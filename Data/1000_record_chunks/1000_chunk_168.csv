record_number,buggy_code,fixed_code,code_similarity
167001,"public String getName(){
  return name;
}","String getName(){
  return name;
}",0.9066666666666666
167002,"public PropertyColumn(AbstractLabel abstractLabel,String name,PropertyType propertyType,Index index){
  this.abstractLabel=abstractLabel;
  this.name=name;
  this.propertyType=propertyType;
  this.index=index;
}","private PropertyColumn(AbstractLabel abstractLabel,String name,PropertyType propertyType,Index index){
  this.abstractLabel=abstractLabel;
  this.name=name;
  this.propertyType=propertyType;
  this.index=index;
}",0.9739952718676124
167003,"public static PropertyColumn fromNotifyJson(AbstractLabel abstractLabel,JsonNode jsonNode){
  PropertyColumn property=new PropertyColumn(abstractLabel,jsonNode.get(""String_Node_Str"").asText(),PropertyType.valueOf(jsonNode.get(""String_Node_Str"").asText()));
  return property;
}","static PropertyColumn fromNotifyJson(AbstractLabel abstractLabel,JsonNode jsonNode){
  PropertyColumn property=new PropertyColumn(abstractLabel,jsonNode.get(""String_Node_Str"").asText(),PropertyType.valueOf(jsonNode.get(""String_Node_Str"").asText()));
  return property;
}",0.9872029250457038
167004,"public JsonNode toNotifyJson(){
  ObjectNode propertyObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  propertyObjectNode.put(""String_Node_Str"",this.name);
  propertyObjectNode.put(""String_Node_Str"",this.propertyType.name());
  return propertyObjectNode;
}","JsonNode toNotifyJson(){
  ObjectNode propertyObjectNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  propertyObjectNode.put(""String_Node_Str"",this.name);
  propertyObjectNode.put(""String_Node_Str"",this.propertyType.name());
  return propertyObjectNode;
}",0.9871559633027523
167005,"public PropertyType getPropertyType(){
  return propertyType;
}","PropertyType getPropertyType(){
  return propertyType;
}",0.9411764705882352
167006,"public String getName(){
  return name;
}","String getName(){
  return name;
}",0.9066666666666666
167007,"public Map<String,Set<String>> getAllEdgeForeignKeys(){
  Map<String,Set<String>> result=new HashMap<>();
  for (  Map.Entry<String,EdgeLabel> stringEdgeLabelEntry : getEdgeLabels().entrySet()) {
    String edgeSchemaAndLabel=stringEdgeLabelEntry.getKey();
    EdgeLabel edgeLabel=stringEdgeLabelEntry.getValue();
    result.put(edgeSchemaAndLabel,edgeLabel.getAllEdgeForeignKeys());
  }
  return result;
}","Map<String,Set<String>> getAllEdgeForeignKeys(){
  Map<String,Set<String>> result=new HashMap<>();
  for (  Map.Entry<String,EdgeLabel> stringEdgeLabelEntry : getEdgeLabels().entrySet()) {
    String edgeSchemaAndLabel=stringEdgeLabelEntry.getKey();
    EdgeLabel edgeLabel=stringEdgeLabelEntry.getValue();
    result.put(edgeSchemaAndLabel,edgeLabel.getAllEdgeForeignKeys());
  }
  return result;
}",0.991304347826087
167008,"private Edge addEdgeInternal(boolean complete,String label,Vertex inVertex,Object... keyValues){
  if (null == inVertex)   throw Graph.Exceptions.argumentCanNotBeNull(""String_Node_Str"");
  if (this.removed)   throw Element.Exceptions.elementAlreadyRemoved(Vertex.class,this.id());
  ElementHelper.validateLabel(label);
  if (label.contains(""String_Node_Str""))   throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{label}));
  ElementHelper.legalPropertyKeyValueArray(keyValues);
  if (ElementHelper.getIdValue(keyValues).isPresent())   throw Edge.Exceptions.userSuppliedIdsNotSupported();
  List<String> previousBatchModeKeys=this.sqlgGraph.tx().getBatchManager().getStreamingBatchModeEdgeKeys();
  int i=0;
  int keyCount=0;
  String key=""String_Node_Str"";
  Object value;
  for (  Object keyValue : keyValues) {
    if (i++ % 2 == 0) {
      key=(String)keyValue;
      if (!key.equals(T.label) && previousBatchModeKeys != null && !key.equals(previousBatchModeKeys.get(keyCount++))) {
        throw new IllegalStateException(""String_Node_Str"" + previousBatchModeKeys.get(keyCount - 1) + ""String_Node_Str""+ key);
      }
    }
 else {
      value=keyValue;
      ElementHelper.validateProperty(key,value);
      this.sqlgGraph.getSqlDialect().validateProperty(key,value);
    }
  }
  final Map<String,PropertyType> columns=SqlgUtil.transformToColumnDefinitionMap(keyValues);
  Optional<VertexLabel> outVertexLabelOptional=this.sqlgGraph.getTopology().getVertexLabel(this.schema,this.table);
  Optional<VertexLabel> inVertexLabelOptional=this.sqlgGraph.getTopology().getVertexLabel(((SqlgVertex)inVertex).schema,((SqlgVertex)inVertex).table);
  Preconditions.checkState(outVertexLabelOptional.isPresent(),""String_Node_Str"",this.schema + ""String_Node_Str"" + this.table);
  Preconditions.checkState(inVertexLabelOptional.isPresent(),""String_Node_Str"",((SqlgVertex)inVertex).schema + ""String_Node_Str"" + ((SqlgVertex)inVertex).table);
  @SuppressWarnings(""String_Node_Str"") EdgeLabel edgeLabel=this.sqlgGraph.getTopology().ensureEdgeLabelExist(label,outVertexLabelOptional.get(),inVertexLabelOptional.get(),columns);
  return new SqlgEdge(this.sqlgGraph,complete,edgeLabel.getSchema().getName(),label,(SqlgVertex)inVertex,this,keyValues);
}","private Edge addEdgeInternal(boolean complete,String label,Vertex inVertex,Object... keyValues){
  if (null == inVertex)   throw Graph.Exceptions.argumentCanNotBeNull(""String_Node_Str"");
  if (this.removed)   throw Element.Exceptions.elementAlreadyRemoved(Vertex.class,this.id());
  ElementHelper.validateLabel(label);
  if (label.contains(""String_Node_Str""))   throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{label}));
  ElementHelper.legalPropertyKeyValueArray(keyValues);
  if (ElementHelper.getIdValue(keyValues).isPresent())   throw Edge.Exceptions.userSuppliedIdsNotSupported();
  List<String> previousBatchModeKeys=this.sqlgGraph.tx().getBatchManager().getStreamingBatchModeEdgeKeys();
  int i=0;
  int keyCount=0;
  String key=""String_Node_Str"";
  Object value;
  for (  Object keyValue : keyValues) {
    if (i++ % 2 == 0) {
      key=(String)keyValue;
      if (!key.equals(T.label) && previousBatchModeKeys != null && !key.equals(previousBatchModeKeys.get(keyCount++))) {
        throw new IllegalStateException(""String_Node_Str"" + previousBatchModeKeys.get(keyCount - 1) + ""String_Node_Str""+ key);
      }
    }
 else {
      value=keyValue;
      ElementHelper.validateProperty(key,value);
      this.sqlgGraph.getSqlDialect().validateProperty(key,value);
    }
  }
  final Map<String,PropertyType> columns=SqlgUtil.transformToColumnDefinitionMap(keyValues);
  Optional<VertexLabel> outVertexLabelOptional=this.sqlgGraph.getTopology().getVertexLabel(this.schema,this.table);
  Optional<VertexLabel> inVertexLabelOptional=this.sqlgGraph.getTopology().getVertexLabel(((SqlgVertex)inVertex).schema,((SqlgVertex)inVertex).table);
  Preconditions.checkState(outVertexLabelOptional.isPresent(),""String_Node_Str"",this.schema + ""String_Node_Str"" + this.table);
  Preconditions.checkState(inVertexLabelOptional.isPresent(),""String_Node_Str"",((SqlgVertex)inVertex).schema + ""String_Node_Str"" + ((SqlgVertex)inVertex).table);
  this.sqlgGraph.getTopology().ensureEdgeLabelExist(label,outVertexLabelOptional.get(),inVertexLabelOptional.get(),columns);
  return new SqlgEdge(this.sqlgGraph,complete,this.schema,label,(SqlgVertex)inVertex,this,keyValues);
}",0.9084776253654148
167009,"public Map<String,Map<String,PropertyType>> getAllTables(){
  this.z_internalReadLock();
  try {
    Map<String,Map<String,PropertyType>> result=new HashMap<>(this.allTableCache);
    if (this.isWriteLockHeldByCurrentThread()) {
      Map<String,AbstractLabel> uncommittedLabels=this.getUncommittedAllTables();
      for (      String table : uncommittedLabels.keySet()) {
        if (result.containsKey(table)) {
          result.get(table).putAll(uncommittedLabels.get(table).getPropertyTypeMap());
        }
 else {
          result.put(table,uncommittedLabels.get(table).getPropertyTypeMap());
        }
      }
    }
    for (    String sqlgSchemaSchemaTable : SQLG_SCHEMA_SCHEMA_TABLES) {
      result.remove(sqlgSchemaSchemaTable);
    }
    return Collections.unmodifiableMap(result);
  }
  finally {
    z_internalReadUnLock();
  }
}","public Map<String,Map<String,PropertyType>> getAllTables(){
  this.z_internalReadLock();
  try {
    Map<String,Map<String,PropertyType>> result;
    if (this.isWriteLockHeldByCurrentThread()) {
      result=new HashMap<>();
      for (      Map.Entry<String,Map<String,PropertyType>> allTableCacheMapEntry : this.allTableCache.entrySet()) {
        result.put(allTableCacheMapEntry.getKey(),new HashMap<>(allTableCacheMapEntry.getValue()));
      }
    }
 else {
      result=new HashMap<>(this.allTableCache);
    }
    if (this.isWriteLockHeldByCurrentThread()) {
      Map<String,AbstractLabel> uncommittedLabels=this.getUncommittedAllTables();
      for (      String table : uncommittedLabels.keySet()) {
        if (result.containsKey(table)) {
          result.get(table).putAll(uncommittedLabels.get(table).getPropertyTypeMap());
        }
 else {
          result.put(table,uncommittedLabels.get(table).getPropertyTypeMap());
        }
      }
    }
    for (    String sqlgSchemaSchemaTable : SQLG_SCHEMA_SCHEMA_TABLES) {
      result.remove(sqlgSchemaSchemaTable);
    }
    return Collections.unmodifiableMap(result);
  }
  finally {
    z_internalReadUnLock();
  }
}",0.827893175074184
167010,"public boolean deepEquals(VertexLabel other){
  Preconditions.checkState(this.equals(other),""String_Node_Str"");
  if (!this.outEdgeLabels.equals(other.outEdgeLabels)) {
    return false;
  }
 else {
    if (this.outEdgeLabels.size() != other.outEdgeLabels.size()) {
      return false;
    }
 else {
      for (      EdgeLabel outEdgeLabel : this.outEdgeLabels.values()) {
        for (        EdgeLabel otherOutEdgeLabel : other.outEdgeLabels.values()) {
          if (outEdgeLabel.equals(otherOutEdgeLabel)) {
            if (!outEdgeLabel.deepEquals(otherOutEdgeLabel)) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }
}","boolean deepEquals(VertexLabel other){
  Preconditions.checkState(this.equals(other),""String_Node_Str"");
  if (!this.outEdgeLabels.equals(other.outEdgeLabels)) {
    return false;
  }
 else {
    if (this.outEdgeLabels.size() != other.outEdgeLabels.size()) {
      return false;
    }
 else {
      for (      EdgeLabel outEdgeLabel : this.outEdgeLabels.values()) {
        for (        EdgeLabel otherOutEdgeLabel : other.outEdgeLabels.values()) {
          if (outEdgeLabel.equals(otherOutEdgeLabel)) {
            if (!outEdgeLabel.deepEquals(otherOutEdgeLabel)) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }
}",0.9947877885331348
167011,"public void ensureColumnsExist(SqlgGraph sqlgGraph,Map<String,PropertyType> columns){
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    if (!this.properties.containsKey(column.getKey())) {
      Preconditions.checkState(!this.schema.isSqlgSchema(),""String_Node_Str"",SQLG_SCHEMA);
      if (!this.uncommittedProperties.containsKey(column.getKey())) {
        this.schema.getTopology().lock();
        if (!this.uncommittedProperties.containsKey(column.getKey())) {
          TopologyManager.addVertexColumn(sqlgGraph,this.schema.getName(),VERTEX_PREFIX + getLabel(),column);
          addColumn(sqlgGraph,this.schema.getName(),VERTEX_PREFIX + getLabel(),ImmutablePair.of(column.getKey(),column.getValue()));
          this.uncommittedProperties.put(column.getKey(),new PropertyColumn(this,column.getKey(),column.getValue()));
        }
      }
    }
  }
}","void ensureColumnsExist(SqlgGraph sqlgGraph,Map<String,PropertyType> columns){
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    if (!this.properties.containsKey(column.getKey())) {
      Preconditions.checkState(!this.schema.isSqlgSchema(),""String_Node_Str"",SQLG_SCHEMA);
      if (!this.uncommittedProperties.containsKey(column.getKey())) {
        this.schema.getTopology().lock();
        if (!this.uncommittedProperties.containsKey(column.getKey())) {
          TopologyManager.addVertexColumn(sqlgGraph,this.schema.getName(),VERTEX_PREFIX + getLabel(),column);
          addColumn(sqlgGraph,this.schema.getName(),VERTEX_PREFIX + getLabel(),ImmutablePair.of(column.getKey(),column.getValue()));
          this.uncommittedProperties.put(column.getKey(),new PropertyColumn(this,column.getKey(),column.getValue()));
        }
      }
    }
  }
}",0.9960022844089093
167012,"public JsonNode toJson(){
  ObjectNode vertexLabelNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  vertexLabelNode.put(""String_Node_Str"",getLabel());
  ArrayNode outEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  EdgeLabel edgeLabel : this.outEdgeLabels.values()) {
    outEdgeLabelsArrayNode.add(edgeLabel.toJson());
  }
  vertexLabelNode.set(""String_Node_Str"",outEdgeLabelsArrayNode);
  ArrayNode inEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  EdgeLabel edgeLabel : this.inEdgeLabels.values()) {
    inEdgeLabelsArrayNode.add(edgeLabel.toJson());
  }
  vertexLabelNode.set(""String_Node_Str"",inEdgeLabelsArrayNode);
  if (this.schema.getTopology().isWriteLockHeldByCurrentThread()) {
    outEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    EdgeLabel edgeLabel : this.uncommittedOutEdgeLabels.values()) {
      outEdgeLabelsArrayNode.add(edgeLabel.toJson());
    }
    vertexLabelNode.set(""String_Node_Str"",outEdgeLabelsArrayNode);
    inEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    EdgeLabel edgeLabel : this.uncommittedInEdgeLabels.values()) {
      inEdgeLabelsArrayNode.add(edgeLabel.toJson());
    }
    vertexLabelNode.set(""String_Node_Str"",inEdgeLabelsArrayNode);
  }
  return vertexLabelNode;
}","@Override protected JsonNode toJson(){
  ObjectNode vertexLabelNode=new ObjectNode(Topology.OBJECT_MAPPER.getNodeFactory());
  vertexLabelNode.put(""String_Node_Str"",getSchema().getName());
  vertexLabelNode.put(""String_Node_Str"",getLabel());
  vertexLabelNode.set(""String_Node_Str"",super.toJson());
  ArrayNode outEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  EdgeLabel edgeLabel : this.outEdgeLabels.values()) {
    outEdgeLabelsArrayNode.add(edgeLabel.toJson());
  }
  vertexLabelNode.set(""String_Node_Str"",outEdgeLabelsArrayNode);
  ArrayNode inEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
  for (  EdgeLabel edgeLabel : this.inEdgeLabels.values()) {
    inEdgeLabelsArrayNode.add(edgeLabel.toJson());
  }
  vertexLabelNode.set(""String_Node_Str"",inEdgeLabelsArrayNode);
  if (this.schema.getTopology().isWriteLockHeldByCurrentThread()) {
    outEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    EdgeLabel edgeLabel : this.uncommittedOutEdgeLabels.values()) {
      outEdgeLabelsArrayNode.add(edgeLabel.toJson());
    }
    vertexLabelNode.set(""String_Node_Str"",outEdgeLabelsArrayNode);
    inEdgeLabelsArrayNode=new ArrayNode(Topology.OBJECT_MAPPER.getNodeFactory());
    for (    EdgeLabel edgeLabel : this.uncommittedInEdgeLabels.values()) {
      inEdgeLabelsArrayNode.add(edgeLabel.toJson());
    }
    vertexLabelNode.set(""String_Node_Str"",inEdgeLabelsArrayNode);
  }
  return vertexLabelNode;
}",0.9474048442906574
167013,"@Override protected Traverser.Admin<E> processNextStart(){
  while (true) {
    if (this.iterator.hasNext()) {
      Traverser.Admin<E> traverser=null;
      Emit<E> emit=this.iterator.next();
      boolean first=true;
      Iterator<Set<String>> labelIter=emit.getPath().labels().iterator();
      for (      Object o : emit.getPath().objects()) {
        E e=(E)o;
        Set<String> labels=labelIter.next();
        this.labels=labels;
        if (!isStart && previousHead != null) {
          traverser=previousHead.split(e,this);
        }
 else         if (first) {
          first=false;
          traverser=B_LP_O_P_S_SE_SL_TraverserGenerator.instance().generate(e,this,1L);
        }
 else {
          traverser=((B_LP_O_P_S_SE_SL_Traverser)traverser).split(e,this);
        }
      }
      return traverser;
    }
 else {
      if (this.isStart) {
        if (this.done)         throw FastNoSuchElementException.instance();
 else {
          this.done=true;
          this.iterator=null == this.iteratorSupplier ? EmptyIterator.instance() : this.iteratorSupplier.get();
        }
      }
 else {
        this.previousHead=this.starts.next();
        this.iterator=null == this.iteratorSupplier ? EmptyIterator.instance() : this.iteratorSupplier.get();
      }
    }
  }
}","@Override protected Traverser.Admin<E> processNextStart(){
  while (true) {
    if (this.iterator.hasNext()) {
      Traverser.Admin<E> traverser=null;
      Emit<E> emit=this.iterator.next();
      if (emitToList && emitted != null) {
        emitted.add(emit);
      }
      boolean first=true;
      Iterator<Set<String>> labelIter=emit.getPath().labels().iterator();
      for (      Object o : emit.getPath().objects()) {
        E e=(E)o;
        Set<String> labels=labelIter.next();
        this.labels=labels;
        if (!isStart && previousHead != null && traverser == null) {
          traverser=previousHead.split(e,this);
        }
 else         if (first) {
          first=false;
          traverser=B_LP_O_P_S_SE_SL_TraverserGenerator.instance().generate(e,this,1L);
        }
 else {
          traverser=((B_LP_O_P_S_SE_SL_Traverser)traverser).split(e,this);
        }
      }
      return traverser;
    }
 else {
      if (this.isStart) {
        if (this.done)         throw FastNoSuchElementException.instance();
 else {
          this.done=true;
          this.iterator=null == this.iteratorSupplier ? EmptyIterator.instance() : this.iteratorSupplier.get();
        }
      }
 else {
        this.previousHead=this.starts.next();
        if (emitted != null) {
          emitToList=false;
          this.iterator=emitted.iterator();
        }
 else {
          this.iterator=null == this.iteratorSupplier ? EmptyIterator.instance() : this.iteratorSupplier.get();
          this.emitted=new LinkedList<>();
        }
      }
    }
  }
}",0.9031349066572736
167014,"SqlgGraphStepCompiled(final SqlgGraph sqlgGraph,final Traversal.Admin traversal,final Class<E> returnClass,final boolean isStart,final Object... ids){
  super(traversal,returnClass,isStart,ids);
  this.sqlgGraph=sqlgGraph;
  this.iteratorSupplier=new SqlgRawIteratorToEmitIterator<>(this::elements);
}","SqlgGraphStepCompiled(final SqlgGraph sqlgGraph,final Traversal.Admin traversal,final Class<E> returnClass,final boolean isStart,final Object... ids){
  super(traversal,returnClass,isStart,ids);
  this.sqlgGraph=sqlgGraph;
  this.iteratorSupplier=new SqlgRawIteratorToEmitIterator<>(this::elements);
  this.emitToList=!isStart;
}",0.9555555555555556
167015,"/** 
 * This is only called for local vertex steps. Constructs the label paths from the given schemaTable to the leaf vertex labels for the gremlin query. For each path Sqlg will executeRegularQuery a sql query. The union of the queries is the result the gremlin query. The vertex labels can be calculated from the steps.
 * @param schemaTable
 * @param replacedSteps The original VertexSteps and HasSteps that were replaced
 * @return a List of paths. Each path is itself a list of SchemaTables.
 */
public SchemaTableTree parse(SchemaTable schemaTable,List<ReplacedStep<S,E>> replacedSteps){
  if (replacedSteps.get(0).isGraphStep()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    Set<SchemaTableTree> schemaTableTrees=new HashSet<>();
    SchemaTableTree rootSchemaTableTree=new SchemaTableTree(this.sqlgGraph,schemaTable,0,replacedSteps.size() - 1);
    rootSchemaTableTree.setOptionalLeftJoin(replacedSteps.get(0).isLeftJoin());
    rootSchemaTableTree.setEmit(replacedSteps.get(0).isEmit());
    rootSchemaTableTree.setUntilFirst(replacedSteps.get(0).isUntilFirst());
    rootSchemaTableTree.initializeAliasColumnNameMaps();
    rootSchemaTableTree.setStepType(schemaTable.isVertexTable() ? SchemaTableTree.STEP_TYPE.VERTEX_STEP : SchemaTableTree.STEP_TYPE.EDGE_VERTEX_STEP);
    schemaTableTrees.add(rootSchemaTableTree);
    for (    ReplacedStep<S,E> replacedStep : replacedSteps) {
      if (!replacedStep.isFake()) {
        schemaTableTrees=replacedStep.calculatePathForStep(schemaTableTrees);
      }
    }
    rootSchemaTableTree.removeAllButDeepestLeafNodes(replacedSteps.size() - 1);
    rootSchemaTableTree.removeNodesInvalidatedByHas();
    rootSchemaTableTree.setLocalStep(true);
    return rootSchemaTableTree;
  }
}","/** 
 * This is only called for local vertex steps. Constructs the label paths from the given schemaTable to the leaf vertex labels for the gremlin query. For each path Sqlg will executeRegularQuery a sql query. The union of the queries is the result the gremlin query. The vertex labels can be calculated from the steps.
 * @param schemaTable
 * @param replacedSteps The original VertexSteps and HasSteps that were replaced
 * @return a List of paths. Each path is itself a list of SchemaTables.
 */
public SchemaTableTree parse(SchemaTable schemaTable,List<ReplacedStep<S,E>> replacedSteps){
  Preconditions.checkArgument(!replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> schemaTableTrees=new HashSet<>();
  SchemaTableTree rootSchemaTableTree=new SchemaTableTree(this.sqlgGraph,schemaTable,0,replacedSteps.size() - 1);
  rootSchemaTableTree.setOptionalLeftJoin(replacedSteps.get(0).isLeftJoin());
  rootSchemaTableTree.setEmit(replacedSteps.get(0).isEmit());
  rootSchemaTableTree.setUntilFirst(replacedSteps.get(0).isUntilFirst());
  rootSchemaTableTree.initializeAliasColumnNameMaps();
  rootSchemaTableTree.setStepType(schemaTable.isVertexTable() ? SchemaTableTree.STEP_TYPE.VERTEX_STEP : SchemaTableTree.STEP_TYPE.EDGE_VERTEX_STEP);
  schemaTableTrees.add(rootSchemaTableTree);
  for (  ReplacedStep<S,E> replacedStep : replacedSteps) {
    if (!replacedStep.isFake()) {
      schemaTableTrees=replacedStep.calculatePathForStep(schemaTableTrees);
    }
  }
  rootSchemaTableTree.removeNodesInvalidatedByHas();
  rootSchemaTableTree.removeAllButDeepestAndAddCacheLeafNodes(replacedSteps.size() - 1);
  rootSchemaTableTree.setLocalStep(true);
  return rootSchemaTableTree;
}",0.8729472774416595
167016,"@Override public <L,R>void bulkAddEdges(SqlgGraph sqlgGraph,SchemaTable in,SchemaTable out,String edgeLabel,Pair<String,String> idFields,List<Pair<L,R>> uids){
  if (!sqlgGraph.tx().isInStreamingBatchMode() && !sqlgGraph.tx().isInStreamingWithLockBatchMode()) {
    throw SqlgExceptions.invalidMode(""String_Node_Str"" + BatchManager.BatchModeType.STREAMING + ""String_Node_Str""+ BatchManager.BatchModeType.STREAMING_WITH_LOCK+ ""String_Node_Str"");
  }
  if (!uids.isEmpty()) {
    Map<String,PropertyType> columns=new HashMap<>();
    Map<String,PropertyType> inProperties=sqlgGraph.getSchemaManager().getTableFor(in.withPrefix(SchemaManager.VERTEX_PREFIX));
    Map<String,PropertyType> outProperties=sqlgGraph.getSchemaManager().getTableFor(out.withPrefix(SchemaManager.VERTEX_PREFIX));
    PropertyType inPropertyType;
    if (idFields.getLeft().equals(SchemaManager.ID)) {
      inPropertyType=PropertyType.INTEGER;
    }
 else {
      inPropertyType=inProperties.get(idFields.getLeft());
    }
    PropertyType outPropertyType;
    if (idFields.getRight().equals(SchemaManager.ID)) {
      outPropertyType=PropertyType.INTEGER;
    }
 else {
      outPropertyType=inProperties.get(idFields.getLeft());
    }
    columns.put(""String_Node_Str"",outPropertyType);
    columns.put(""String_Node_Str"",inPropertyType);
    SecureRandom random=new SecureRandom();
    byte bytes[]=new byte[6];
    random.nextBytes(bytes);
    String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
    tmpTableIdentified=SchemaManager.BULK_TEMP_EDGE + tmpTableIdentified;
    sqlgGraph.getSchemaManager().createTempTable(tmpTableIdentified,columns);
    this.copyInBulkTempEdges(sqlgGraph,SchemaTable.of(in.getSchema(),tmpTableIdentified),uids,inPropertyType,outPropertyType);
    sqlgGraph.getSchemaManager().ensureEdgeTableExist(in.getSchema(),edgeLabel,out,in);
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + edgeLabel));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema() + ""String_Node_Str"" + in.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(out.getSchema() + ""String_Node_Str"" + out.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(in.getSchema() + ""String_Node_Str"" + in.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END);
    sql.append(""String_Node_Str"");
    sql.append(out.getSchema() + ""String_Node_Str"" + out.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END);
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + in.getTable()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(tmpTableIdentified) + ""String_Node_Str"" + this.maybeWrapInQoutes(idFields.getLeft())+ ""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(out.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + out.getTable()));
    sql.append(""String_Node_Str"" + this.maybeWrapInQoutes(idFields.getRight()));
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    Connection conn=sqlgGraph.tx().getConnection();
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.executeUpdate();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override public <L,R>void bulkAddEdges(SqlgGraph sqlgGraph,SchemaTable in,SchemaTable out,String edgeLabel,Pair<String,String> idFields,List<Pair<L,R>> uids){
  if (!sqlgGraph.tx().isInStreamingBatchMode() && !sqlgGraph.tx().isInStreamingWithLockBatchMode()) {
    throw SqlgExceptions.invalidMode(""String_Node_Str"" + BatchManager.BatchModeType.STREAMING + ""String_Node_Str""+ BatchManager.BatchModeType.STREAMING_WITH_LOCK+ ""String_Node_Str"");
  }
  if (!uids.isEmpty()) {
    Map<String,PropertyType> columns=new HashMap<>();
    Map<String,PropertyType> inProperties=sqlgGraph.getSchemaManager().getTableFor(in.withPrefix(SchemaManager.VERTEX_PREFIX));
    Map<String,PropertyType> outProperties=sqlgGraph.getSchemaManager().getTableFor(out.withPrefix(SchemaManager.VERTEX_PREFIX));
    PropertyType inPropertyType;
    if (idFields.getLeft().equals(SchemaManager.ID)) {
      inPropertyType=PropertyType.INTEGER;
    }
 else {
      inPropertyType=inProperties.get(idFields.getLeft());
    }
    PropertyType outPropertyType;
    if (idFields.getRight().equals(SchemaManager.ID)) {
      outPropertyType=PropertyType.INTEGER;
    }
 else {
      outPropertyType=outProperties.get(idFields.getRight());
    }
    columns.put(""String_Node_Str"",outPropertyType);
    columns.put(""String_Node_Str"",inPropertyType);
    SecureRandom random=new SecureRandom();
    byte bytes[]=new byte[6];
    random.nextBytes(bytes);
    String tmpTableIdentified=Base64.getEncoder().encodeToString(bytes);
    tmpTableIdentified=SchemaManager.BULK_TEMP_EDGE + tmpTableIdentified;
    sqlgGraph.getSchemaManager().createTempTable(tmpTableIdentified,columns);
    this.copyInBulkTempEdges(sqlgGraph,SchemaTable.of(in.getSchema(),tmpTableIdentified),uids,inPropertyType,outPropertyType);
    sqlgGraph.getSchemaManager().ensureEdgeTableExist(in.getSchema(),edgeLabel,out,in);
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + edgeLabel));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema() + ""String_Node_Str"" + in.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(out.getSchema() + ""String_Node_Str"" + out.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(in.getSchema() + ""String_Node_Str"" + in.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END);
    sql.append(""String_Node_Str"");
    sql.append(out.getSchema() + ""String_Node_Str"" + out.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END);
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(in.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + in.getTable()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(tmpTableIdentified) + ""String_Node_Str"" + this.maybeWrapInQoutes(idFields.getLeft())+ ""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(out.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(this.maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + out.getTable()));
    sql.append(""String_Node_Str"" + this.maybeWrapInQoutes(idFields.getRight()));
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    Connection conn=sqlgGraph.tx().getConnection();
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.executeUpdate();
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.9983870967741936
167017,"/** 
 * This is only called for local vertex steps. Constructs the label paths from the given schemaTable to the leaf vertex labels for the gremlin query. For each path Sqlg will executeRegularQuery a sql query. The union of the queries is the result the gremlin query. The vertex labels can be calculated from the steps.
 * @param schemaTable
 * @param replacedSteps The original VertexSteps and HasSteps that were replaced
 * @return a List of paths. Each path is itself a list of SchemaTables.
 */
public SchemaTableTree parse(SchemaTable schemaTable,List<ReplacedStep<S,E>> replacedSteps){
  if (replacedSteps.get(0).isGraphStep()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    Set<SchemaTableTree> schemaTableTrees=new HashSet<>();
    SchemaTableTree rootSchemaTableTree=new SchemaTableTree(this.sqlgGraph,schemaTable,0,replacedSteps.size() - 1);
    rootSchemaTableTree.setOptionalLeftJoin(replacedSteps.get(0).isLeftJoin());
    rootSchemaTableTree.setEmit(replacedSteps.get(0).isEmit());
    rootSchemaTableTree.setUntilFirst(replacedSteps.get(0).isUntilFirst());
    rootSchemaTableTree.initializeAliasColumnNameMaps();
    rootSchemaTableTree.setStepType(schemaTable.isVertexTable() ? SchemaTableTree.STEP_TYPE.VERTEX_STEP : SchemaTableTree.STEP_TYPE.EDGE_VERTEX_STEP);
    schemaTableTrees.add(rootSchemaTableTree);
    for (    ReplacedStep<S,E> replacedStep : replacedSteps) {
      if (!replacedStep.isFake()) {
        schemaTableTrees=replacedStep.calculatePathForStep(schemaTableTrees);
      }
    }
    rootSchemaTableTree.removeAllButDeepestLeafNodes(replacedSteps.size() - 1);
    rootSchemaTableTree.removeNodesInvalidatedByHas();
    rootSchemaTableTree.setLocalStep(true);
    return rootSchemaTableTree;
  }
}","/** 
 * This is only called for local vertex steps. Constructs the label paths from the given schemaTable to the leaf vertex labels for the gremlin query. For each path Sqlg will executeRegularQuery a sql query. The union of the queries is the result the gremlin query. The vertex labels can be calculated from the steps.
 * @param schemaTable
 * @param replacedSteps The original VertexSteps and HasSteps that were replaced
 * @return a List of paths. Each path is itself a list of SchemaTables.
 */
public SchemaTableTree parse(SchemaTable schemaTable,List<ReplacedStep<S,E>> replacedSteps){
  Preconditions.checkArgument(!replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> schemaTableTrees=new HashSet<>();
  SchemaTableTree rootSchemaTableTree=new SchemaTableTree(this.sqlgGraph,schemaTable,0,replacedSteps.size() - 1);
  rootSchemaTableTree.setOptionalLeftJoin(replacedSteps.get(0).isLeftJoin());
  rootSchemaTableTree.setEmit(replacedSteps.get(0).isEmit());
  rootSchemaTableTree.setUntilFirst(replacedSteps.get(0).isUntilFirst());
  rootSchemaTableTree.initializeAliasColumnNameMaps();
  rootSchemaTableTree.setStepType(schemaTable.isVertexTable() ? SchemaTableTree.STEP_TYPE.VERTEX_STEP : SchemaTableTree.STEP_TYPE.EDGE_VERTEX_STEP);
  schemaTableTrees.add(rootSchemaTableTree);
  for (  ReplacedStep<S,E> replacedStep : replacedSteps) {
    if (!replacedStep.isFake()) {
      schemaTableTrees=replacedStep.calculatePathForStep(schemaTableTrees);
    }
  }
  rootSchemaTableTree.removeNodesInvalidatedByHas();
  rootSchemaTableTree.removeAllButDeepestAndAddCacheLeafNodes(replacedSteps.size() - 1);
  rootSchemaTableTree.setLocalStep(true);
  return rootSchemaTableTree;
}",0.8729472774416595
167018,"void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache);","void flushEdgeCache(SqlgGraph sqlgGraph,Map<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache);",0.9576547231270358
167019,"public SchemaTable getStreamingBatchModeEdgeSchemaTable(){
  return streamingBatchModeEdgeSchemaTable;
}","SchemaTable getStreamingBatchModeEdgeSchemaTable(){
  return streamingBatchModeEdgeSchemaTable;
}",0.965174129353234
167020,"public boolean vertexIsCached(SqlgVertex vertex){
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> map=this.vertexCache.get(SchemaTable.of(vertex.getSchema(),vertex.getTable()));
  return map != null && map.getRight().containsKey(vertex);
}","boolean vertexIsCached(SqlgVertex vertex){
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> map=this.vertexCache.get(SchemaTable.of(vertex.getSchema(),vertex.getTable()));
  return map != null && map.getRight().containsKey(vertex);
}",0.9859154929577464
167021,"public List<String> getStreamingBatchModeEdgeKeys(){
  return streamingBatchModeEdgeKeys;
}","List<String> getStreamingBatchModeEdgeKeys(){
  return streamingBatchModeEdgeKeys;
}",0.96
167022,"public SchemaTable getStreamingBatchModeVertexSchemaTable(){
  return streamingBatchModeVertexSchemaTable;
}","SchemaTable getStreamingBatchModeVertexSchemaTable(){
  return streamingBatchModeVertexSchemaTable;
}",0.9665071770334928
167023,"public void removeEdge(String schema,String table,SqlgEdge edge){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> sqlgEdgeTripleMap=this.edgeCache.get(schemaTable);
  if (sqlgEdgeTripleMap != null && sqlgEdgeTripleMap.getRight().containsKey(edge)) {
    sqlgEdgeTripleMap.getRight().remove(edge);
  }
 else {
    List<SqlgEdge> edges=this.removeEdgeCache.get(schemaTable);
    if (edges == null) {
      edges=new ArrayList<>();
      this.removeEdgeCache.put(schemaTable,edges);
    }
    edges.add(edge);
  }
}","void removeEdge(String schema,String table,SqlgEdge edge){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  MetaEdge metaEdge=MetaEdge.from(schemaTable,edge.getOutVertex(),edge.getInVertex());
  Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> sqlgEdgeTripleMap=this.edgeCache.get(metaEdge);
  if (sqlgEdgeTripleMap != null && sqlgEdgeTripleMap.getRight().containsKey(edge)) {
    sqlgEdgeTripleMap.getRight().remove(edge);
  }
 else {
    List<SqlgEdge> edges=this.removeEdgeCache.get(schemaTable);
    if (edges == null) {
      edges=new ArrayList<>();
      this.removeEdgeCache.put(schemaTable,edges);
    }
    edges.add(edge);
  }
}",0.7428571428571429
167024,"public boolean updateProperty(SqlgElement sqlgElement,String key,Object value){
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> schemaVertices=this.vertexPropertyCache.get(schemaTable);
      if (schemaVertices == null) {
        schemaVertices=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.vertexPropertyCache.put(schemaTable,schemaVertices);
      }
      SortedSet<String> keys=schemaVertices.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaVertices.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaVertices.getRight().put((SqlgVertex)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
 else {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgEdge,Map<String,Object>>> schemaEdges=this.edgePropertyCache.get(schemaTable);
      if (schemaEdges == null) {
        schemaEdges=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.edgePropertyCache.put(schemaTable,schemaEdges);
      }
      SortedSet<String> keys=schemaEdges.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaEdges.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaEdges.getRight().put((SqlgEdge)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
  return false;
}","boolean updateProperty(SqlgElement sqlgElement,String key,Object value){
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> schemaVertices=this.vertexPropertyCache.get(schemaTable);
      if (schemaVertices == null) {
        schemaVertices=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.vertexPropertyCache.put(schemaTable,schemaVertices);
      }
      SortedSet<String> keys=schemaVertices.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaVertices.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaVertices.getRight().put((SqlgVertex)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
 else {
    SqlgEdge sqlgEdge=(SqlgEdge)sqlgElement;
    MetaEdge metaEdge=MetaEdge.from(schemaTable,sqlgEdge.getOutVertex(),sqlgEdge.getInVertex());
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(metaEdge);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgEdge,Map<String,Object>>> schemaEdges=this.edgePropertyCache.get(schemaTable);
      if (schemaEdges == null) {
        schemaEdges=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.edgePropertyCache.put(schemaTable,schemaEdges);
      }
      SortedSet<String> keys=schemaEdges.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaEdges.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaEdges.getRight().put((SqlgEdge)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
  return false;
}",0.9654166666666668
167025,"public void removeVertex(String schema,String table,SqlgVertex vertex){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertexSortedSetMapPair=this.vertexCache.get(schemaTable);
  if (vertexSortedSetMapPair != null && vertexSortedSetMapPair.getRight().containsKey(vertex)) {
    vertexSortedSetMapPair.getRight().remove(vertex);
    Map<SchemaTable,List<SqlgEdge>> outEdges=this.vertexOutEdgeCache.get(vertex);
    if (outEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : outEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.getRight().remove(sqlgEdge);
        }
        if (cachedEdge.getRight().isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexOutEdgeCache.remove(vertex);
    }
    Map<SchemaTable,List<SqlgEdge>> inEdges=this.vertexInEdgeCache.get(vertex);
    if (inEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : inEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.getRight().remove(sqlgEdge);
        }
        if (cachedEdge.getRight().isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexInEdgeCache.remove(vertex);
    }
  }
 else {
    List<SqlgVertex> vertices=this.removeVertexCache.get(schemaTable);
    if (vertices == null) {
      vertices=new ArrayList<>();
      this.removeVertexCache.put(schemaTable,vertices);
    }
    vertices.add(vertex);
  }
}","void removeVertex(String schema,String table,SqlgVertex vertex){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertexSortedSetMapPair=this.vertexCache.get(schemaTable);
  if (vertexSortedSetMapPair != null && vertexSortedSetMapPair.getRight().containsKey(vertex)) {
    vertexSortedSetMapPair.getRight().remove(vertex);
    Set<MetaEdge> toRemoveMetaEdges=new HashSet<>();
    for (    Map.Entry<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> metaEdgePairEntry : this.edgeCache.entrySet()) {
      MetaEdge metaEdge=metaEdgePairEntry.getKey();
      Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> edges=metaEdgePairEntry.getValue();
      Set<SqlgEdge> toRemove=new HashSet<>();
      for (      Map.Entry<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> sqlgEdgeTripleEntry : edges.getRight().entrySet()) {
        SqlgEdge sqlgEdge=sqlgEdgeTripleEntry.getKey();
        Triple<SqlgVertex,SqlgVertex,Map<String,Object>> inOutVertices=sqlgEdgeTripleEntry.getValue();
        if (inOutVertices.getLeft().equals(vertex) || inOutVertices.getMiddle().equals(vertex)) {
          toRemove.add(sqlgEdge);
        }
      }
      for (      SqlgEdge sqlgEdge : toRemove) {
        edges.getRight().remove(sqlgEdge);
      }
      if (edges.getRight().isEmpty()) {
        toRemoveMetaEdges.add(metaEdge);
      }
    }
    for (    MetaEdge toRemoveMetaEdge : toRemoveMetaEdges) {
      this.edgeCache.remove(toRemoveMetaEdge);
    }
  }
 else {
    List<SqlgVertex> vertices=this.removeVertexCache.get(schemaTable);
    if (vertices == null) {
      vertices=new ArrayList<>();
      this.removeVertexCache.put(schemaTable,vertices);
    }
    vertices.add(vertex);
  }
}",0.3825748357264541
167026,"public void clear(){
  this.vertexCache.clear();
  this.edgeCache.clear();
  this.vertexInEdgeCache.clear();
  this.vertexOutEdgeCache.clear();
  this.removeEdgeCache.clear();
  this.removeVertexCache.clear();
  this.edgePropertyCache.clear();
  this.vertexPropertyCache.clear();
}","public void clear(){
  this.vertexCache.clear();
  this.edgeCache.clear();
  this.removeEdgeCache.clear();
  this.removeVertexCache.clear();
  this.edgePropertyCache.clear();
  this.vertexPropertyCache.clear();
}",0.8600405679513184
167027,"public List<String> getStreamingBatchModeVertexKeys(){
  return streamingBatchModeVertexKeys;
}","List<String> getStreamingBatchModeVertexKeys(){
  return streamingBatchModeVertexKeys;
}",0.9617486338797814
167028,"void addEdge(boolean streaming,SqlgEdge sqlgEdge,SqlgVertex outVertex,SqlgVertex inVertex,Map<String,Object> keyValueMap){
  SchemaTable outSchemaTable=SchemaTable.of(outVertex.getSchema(),sqlgEdge.getTable());
  if (!streaming) {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(outSchemaTable);
    if (triples == null) {
      triples=Pair.of(new TreeSet<>(keyValueMap.keySet()),new LinkedHashMap<>());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
      this.edgeCache.put(outSchemaTable,triples);
    }
 else {
      triples.getLeft().addAll(keyValueMap.keySet());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
    }
    Map<SchemaTable,List<SqlgEdge>> outEdgesMap=this.vertexOutEdgeCache.get(outVertex);
    if (outEdgesMap == null) {
      outEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexOutEdgeCache.put(outVertex,outEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=outEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
    Map<SchemaTable,List<SqlgEdge>> inEdgesMap=this.vertexInEdgeCache.get(outVertex);
    if (inEdgesMap == null) {
      inEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexInEdgeCache.put(inVertex,inEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=inEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
  }
 else {
    if (this.streamingBatchModeEdgeSchemaTable == null) {
      this.streamingBatchModeEdgeSchemaTable=sqlgEdge.getSchemaTablePrefixed();
    }
    if (this.streamingBatchModeEdgeKeys == null) {
      this.streamingBatchModeEdgeKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (this.isStreamingVertices()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (this.isInStreamingModeWithLock() && this.batchCount == 0) {
      this.sqlDialect.lockTable(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
    }
    if (this.isInStreamingModeWithLock()) {
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
    }
    OutputStream out=this.streamingEdgeOutputStreamCache.get(outSchemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlEdge(sqlgGraph,sqlgEdge,outVertex,inVertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingEdgeOutputStreamCache.put(outSchemaTable,out);
    }
    try {
      this.sqlDialect.writeStreamingEdge(out,sqlgEdge,outVertex,inVertex,keyValueMap);
      if (this.isInStreamingModeWithLock()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","void addEdge(boolean streaming,SqlgEdge sqlgEdge,SqlgVertex outVertex,SqlgVertex inVertex,Map<String,Object> keyValueMap){
  SchemaTable outSchemaTable=SchemaTable.of(outVertex.getSchema(),sqlgEdge.getTable());
  MetaEdge metaEdge=MetaEdge.from(outSchemaTable,outVertex,inVertex);
  if (!streaming) {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(metaEdge);
    if (triples == null) {
      triples=Pair.of(new TreeSet<>(keyValueMap.keySet()),new LinkedHashMap<>());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
      this.edgeCache.put(metaEdge,triples);
    }
 else {
      triples.getLeft().addAll(keyValueMap.keySet());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
    }
  }
 else {
    if (this.streamingBatchModeEdgeSchemaTable == null) {
      this.streamingBatchModeEdgeSchemaTable=sqlgEdge.getSchemaTablePrefixed();
    }
    if (this.streamingBatchModeEdgeKeys == null) {
      this.streamingBatchModeEdgeKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (this.isStreamingVertices()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (this.isInStreamingModeWithLock() && this.batchCount == 0) {
      this.sqlDialect.lockTable(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
    }
    if (this.isInStreamingModeWithLock()) {
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
    }
    OutputStream out=this.streamingEdgeOutputStreamCache.get(outSchemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlEdge(sqlgGraph,sqlgEdge,outVertex,inVertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingEdgeOutputStreamCache.put(outSchemaTable,out);
    }
    try {
      this.sqlDialect.writeStreamingEdge(out,sqlgEdge,outVertex,inVertex,keyValueMap);
      if (this.isInStreamingModeWithLock()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",0.674244994910078
167029,"public boolean removeProperty(SqlgProperty sqlgProperty,String key){
  SqlgElement sqlgElement=(SqlgElement)sqlgProperty.element();
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.remove(key);
        return true;
      }
    }
  }
 else {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().remove(key);
        return true;
      }
    }
  }
  return false;
}","boolean removeProperty(SqlgProperty sqlgProperty,String key){
  SqlgElement sqlgElement=(SqlgElement)sqlgProperty.element();
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.remove(key);
        return true;
      }
    }
  }
 else {
    SqlgEdge sqlgEdge=(SqlgEdge)sqlgElement;
    MetaEdge metaEdge=MetaEdge.from(schemaTable,sqlgEdge.getOutVertex(),sqlgEdge.getInVertex());
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(metaEdge);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().remove(key);
        return true;
      }
    }
  }
  return false;
}",0.9199614271938285
167030,"@Override public Iterator<Vertex> vertices(Direction direction,String... edgeLabels){
  SqlgVertex.this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return SqlgVertex.this.vertices(Collections.emptyList(),direction,edgeLabels);
}","@Override public Iterator<Vertex> vertices(Direction direction,String... edgeLabels){
  SqlgVertex.this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return vertices(Collections.emptyList(),direction,edgeLabels);
}",0.9755351681957186
167031,"private Iterator<Vertex> internalGetVertices(List<HasContainer> hasContainers,Direction direction,String... labels){
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    List<Vertex> vertices=this.sqlgGraph.tx().getBatchManager().getVertices(this,direction,labels);
    return vertices.stream().filter(v -> HasContainer.testAll(v,hasContainers)).iterator();
  }
 else {
    List<Vertex> vertices=new ArrayList<>();
    List<HasContainer> labelHasContainers=filterHasContainerOnKey(hasContainers,T.label.getAccessor());
    Set<String> hasContainerLabels=extractLabelsFromHasContainer(labelHasContainers);
    List<Direction> directions=new ArrayList<>(2);
    Set<SchemaTable> inVertexLabels=new HashSet<>();
    Set<SchemaTable> outVertexLabels=new HashSet<>();
    if (direction == Direction.IN) {
      inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
      }
      directions.add(direction);
    }
 else     if (direction == Direction.OUT) {
      outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
      if (labels.length > 0) {
        retainLabels(outVertexLabels,labels);
      }
      directions.add(direction);
    }
 else {
      inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
      outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
        retainLabels(outVertexLabels,labels);
      }
      directions.add(Direction.IN);
      directions.add(Direction.OUT);
    }
    for (    Direction d : directions) {
      for (      SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
        Set<String> edgeForeignKeys=this.sqlgGraph.getSchemaManager().getEdgeForeignKeys(schemaTable.getSchema() + ""String_Node_Str"" + schemaTable.getTable());
        Set<SchemaTable> tables;
switch (d) {
case IN:
          tables=transformToOutSchemaTables(edgeForeignKeys,hasContainerLabels);
        break;
case OUT:
      tables=transformToInSchemaTables(edgeForeignKeys,hasContainerLabels);
    break;
default :
  throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
for (SchemaTable joinSchemaTable : tables) {
StringBuilder sql=new StringBuilder(""String_Node_Str"");
sql.append(""String_Node_Str"");
switch (d) {
case IN:
  sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.sqlgGraph.getSqlDialect().hasContainerKeyToColumn(hasContainer.getKey())));
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
case OUT:
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.sqlgGraph.getSqlDialect().hasContainerKeyToColumn(hasContainer.getKey())));
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
default :
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlgGraph.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.recordId.getId());
break;
case OUT:
preparedStatement.setLong(1,this.recordId.getId());
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
int countHasContainers=2;
for (HasContainer hasContainer : hasContainers) {
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
Map<String,Object> keyValues=new HashMap<>();
keyValues.put(hasContainer.getKey(),hasContainer.getValue());
SqlgUtil.setKeyValuesAsParameter(this.sqlgGraph,countHasContainers++,conn,preparedStatement,keyValues);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() && outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() && outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (!(columnName.equals(""String_Node_Str"") || inVertexColumnNames.contains(columnName) || outVertexColumnNames.contains(columnName))) {
Object object=resultSet.getObject(columnName);
if (object != null) {
keyValues.add(columnName);
keyValues.add(object);
}
}
}
SqlgVertex sqlGVertex;
switch (d) {
case IN:
sqlGVertex=SqlgVertex.of(this.sqlgGraph,outId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
Map<String,Object> keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
vertices.add(sqlGVertex);
break;
case OUT:
sqlGVertex=SqlgVertex.of(this.sqlgGraph,inId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
vertices.add(sqlGVertex);
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
return vertices.iterator();
}
}","private Iterator<Vertex> internalGetVertices(List<HasContainer> hasContainers,Direction direction,String... labels){
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    this.sqlgGraph.tx().flush();
  }
  List<Vertex> vertices=new ArrayList<>();
  List<HasContainer> labelHasContainers=filterHasContainerOnKey(hasContainers,T.label.getAccessor());
  Set<String> hasContainerLabels=extractLabelsFromHasContainer(labelHasContainers);
  List<Direction> directions=new ArrayList<>(2);
  Set<SchemaTable> inVertexLabels=new HashSet<>();
  Set<SchemaTable> outVertexLabels=new HashSet<>();
  if (direction == Direction.IN) {
    inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
    if (labels.length > 0) {
      retainLabels(inVertexLabels,labels);
    }
    directions.add(direction);
  }
 else   if (direction == Direction.OUT) {
    outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
    if (labels.length > 0) {
      retainLabels(outVertexLabels,labels);
    }
    directions.add(direction);
  }
 else {
    inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
    outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
    if (labels.length > 0) {
      retainLabels(inVertexLabels,labels);
      retainLabels(outVertexLabels,labels);
    }
    directions.add(Direction.IN);
    directions.add(Direction.OUT);
  }
  for (  Direction d : directions) {
    for (    SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
      Set<String> edgeForeignKeys=this.sqlgGraph.getSchemaManager().getEdgeForeignKeys(schemaTable.getSchema() + ""String_Node_Str"" + schemaTable.getTable());
      Set<SchemaTable> tables;
switch (d) {
case IN:
        tables=transformToOutSchemaTables(edgeForeignKeys,hasContainerLabels);
      break;
case OUT:
    tables=transformToInSchemaTables(edgeForeignKeys,hasContainerLabels);
  break;
default :
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
for (SchemaTable joinSchemaTable : tables) {
StringBuilder sql=new StringBuilder(""String_Node_Str"");
sql.append(""String_Node_Str"");
switch (d) {
case IN:
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.sqlgGraph.getSqlDialect().hasContainerKeyToColumn(hasContainer.getKey())));
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
case OUT:
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.sqlgGraph.getSqlDialect().hasContainerKeyToColumn(hasContainer.getKey())));
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
default :
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlgGraph.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.recordId.getId());
break;
case OUT:
preparedStatement.setLong(1,this.recordId.getId());
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
int countHasContainers=2;
for (HasContainer hasContainer : hasContainers) {
if (!hasContainer.getBiPredicate().equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
Map<String,Object> keyValues=new HashMap<>();
keyValues.put(hasContainer.getKey(),hasContainer.getValue());
SqlgUtil.setKeyValuesAsParameter(this.sqlgGraph,countHasContainers++,conn,preparedStatement,keyValues);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() && outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() && outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (!(columnName.equals(""String_Node_Str"") || inVertexColumnNames.contains(columnName) || outVertexColumnNames.contains(columnName))) {
Object object=resultSet.getObject(columnName);
if (object != null) {
keyValues.add(columnName);
keyValues.add(object);
}
}
}
SqlgVertex sqlGVertex;
switch (d) {
case IN:
sqlGVertex=SqlgVertex.of(this.sqlgGraph,outId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
Map<String,Object> keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
vertices.add(sqlGVertex);
break;
case OUT:
sqlGVertex=SqlgVertex.of(this.sqlgGraph,inId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
vertices.add(sqlGVertex);
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
return vertices.iterator();
}",0.977594401211678
167032,"@Override public Iterator<Edge> edges(Direction direction,String... edgeLabels){
  SqlgVertex.this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return SqlgVertex.this.internalEdges(direction,edgeLabels);
}","@Override public Iterator<Edge> edges(Direction direction,String... edgeLabels){
  SqlgVertex.this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.tx().getBatchManager().isStreaming()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return internalEdges(direction,edgeLabels);
}",0.9735973597359736
167033,"private Iterator<Edge> internalEdges(Direction direction,String... labels){
  this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    List<Edge> edges=this.sqlgGraph.tx().getBatchManager().getEdges(this,direction,labels);
    return edges.iterator();
  }
 else {
    List<Edge> edges=new ArrayList<>();
    List<Direction> directions=new ArrayList<>(2);
    Set<SchemaTable> inVertexLabels=new HashSet<>();
    Set<SchemaTable> outVertexLabels=new HashSet<>();
    if (direction == Direction.IN) {
      inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
      }
      directions.add(direction);
    }
 else     if (direction == Direction.OUT) {
      outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
      if (labels.length > 0) {
        retainLabels(outVertexLabels,labels);
      }
      directions.add(direction);
    }
 else {
      inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
      outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
        retainLabels(outVertexLabels,labels);
      }
      directions.add(Direction.IN);
      directions.add(Direction.OUT);
    }
    for (    Direction d : directions) {
      for (      SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
switch (d) {
case IN:
          sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
        sql.append(""String_Node_Str"");
      sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
    sql.append(WHERE);
  sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case OUT:
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(WHERE);
sql.append(this.sqlgGraph.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlgGraph.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.recordId.getId());
break;
case OUT:
preparedStatement.setLong(1,this.recordId.getId());
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() || outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long edgeId=resultSet.getLong(""String_Node_Str"");
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
@SuppressWarnings(""String_Node_Str"") Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
@SuppressWarnings(""String_Node_Str"") Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() || outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
SchemaTable inSchemaTable=SchemaTable.from(this.sqlgGraph,inVertexColumnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
SchemaTable outSchemaTable=SchemaTable.from(this.sqlgGraph,outVertexColumnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (!((columnName.equals(""String_Node_Str"") || columnName.equals(inVertexColumnNames) || columnName.equals(outVertexColumnNames)))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlgEdge sqlGEdge=null;
switch (d) {
case IN:
sqlGEdge=new SqlgEdge(this.sqlgGraph,edgeId,schemaTable.getSchema(),schemaTable.getTable().substring(SchemaManager.EDGE_PREFIX.length()),this,SqlgVertex.of(this.sqlgGraph,outId,outSchemaTable.getSchema(),SqlgUtil.removeTrailingOutId(outSchemaTable.getTable())),keyValues.toArray());
break;
case OUT:
sqlGEdge=new SqlgEdge(this.sqlgGraph,edgeId,schemaTable.getSchema(),schemaTable.getTable().substring(SchemaManager.EDGE_PREFIX.length()),SqlgVertex.of(this.sqlgGraph,inId,inSchemaTable.getSchema(),SqlgUtil.removeTrailingInId(inSchemaTable.getTable())),this,keyValues.toArray());
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
edges.add(sqlGEdge);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
return edges.iterator();
}
}","private Iterator<Edge> internalEdges(Direction direction,String... labels){
  this.sqlgGraph.tx().readWrite();
  if (this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode() && this.sqlgGraph.tx().getBatchManager().vertexIsCached(this)) {
    this.sqlgGraph.tx().flush();
  }
  List<Edge> edges=new ArrayList<>();
  List<Direction> directions=new ArrayList<>(2);
  Set<SchemaTable> inVertexLabels=new HashSet<>();
  Set<SchemaTable> outVertexLabels=new HashSet<>();
  if (direction == Direction.IN) {
    inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
    if (labels.length > 0) {
      retainLabels(inVertexLabels,labels);
    }
    directions.add(direction);
  }
 else   if (direction == Direction.OUT) {
    outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
    if (labels.length > 0) {
      retainLabels(outVertexLabels,labels);
    }
    directions.add(direction);
  }
 else {
    inVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getLeft());
    outVertexLabels.addAll(this.sqlgGraph.getSchemaManager().getTableLabels(this.getSchemaTablePrefixed()).getRight());
    if (labels.length > 0) {
      retainLabels(inVertexLabels,labels);
      retainLabels(outVertexLabels,labels);
    }
    directions.add(Direction.IN);
    directions.add(Direction.OUT);
  }
  for (  Direction d : directions) {
    for (    SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
      StringBuilder sql=new StringBuilder(""String_Node_Str"");
switch (d) {
case IN:
        sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
      sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
  sql.append(WHERE);
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case OUT:
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTable.getTable()));
sql.append(WHERE);
sql.append(this.sqlgGraph.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlgGraph.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.recordId.getId());
break;
case OUT:
preparedStatement.setLong(1,this.recordId.getId());
break;
case BOTH:
throw new IllegalStateException(BUG_DIRECTION_BOTH_SHOULD_NEVER_FIRE_HERE);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() || outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long edgeId=resultSet.getLong(""String_Node_Str"");
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
@SuppressWarnings(""String_Node_Str"") Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
@SuppressWarnings(""String_Node_Str"") Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() || outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
SchemaTable inSchemaTable=SchemaTable.from(this.sqlgGraph,inVertexColumnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
SchemaTable outSchemaTable=SchemaTable.from(this.sqlgGraph,outVertexColumnName,this.sqlgGraph.getSqlDialect().getPublicSchema());
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnLabel(i);
if (!((columnName.equals(""String_Node_Str"") || columnName.equals(inVertexColumnNames) || columnName.equals(outVertexColumnNames)))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlgEdge sqlGEdge=null;
switch (d) {
case IN:
sqlGEdge=new SqlgEdge(this.sqlgGraph,edgeId,schemaTable.getSchema(),schemaTable.getTable().substring(SchemaManager.EDGE_PREFIX.length()),this,SqlgVertex.of(this.sqlgGraph,outId,outSchemaTable.getSchema(),SqlgUtil.removeTrailingOutId(outSchemaTable.getTable())),keyValues.toArray());
break;
case OUT:
sqlGEdge=new SqlgEdge(this.sqlgGraph,edgeId,schemaTable.getSchema(),schemaTable.getTable().substring(SchemaManager.EDGE_PREFIX.length()),SqlgVertex.of(this.sqlgGraph,inId,inSchemaTable.getSchema(),SqlgUtil.removeTrailingInId(inSchemaTable.getTable())),this,keyValues.toArray());
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
edges.add(sqlGEdge);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
return edges.iterator();
}",0.9728682170542636
167034,"@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9637526652452024
167035,"@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  C3P0ProxyConnection con=(C3P0ProxyConnection)sqlgGraph.tx().getConnection();
  try {
    Method m=BaseConnection.class.getMethod(""String_Node_Str"",new Class[]{});
    Object[] arg=new Object[]{};
    CopyManager copyManager=(CopyManager)con.rawConnectionOperation(m,C3P0ProxyConnection.RAW_CONNECTION,arg);
    for (    SchemaTable schemaTable : edgeCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=edgeCache.get(schemaTable);
      Map<String,PropertyType> propertyTypeMap=sqlgGraph.getSchemaManager().getAllTables().get(schemaTable.getSchema() + ""String_Node_Str"" + SchemaManager.EDGE_PREFIX+ schemaTable.getTable());
      long endHigh;
      long numberInserted;
      try (InputStream is=mapEdgeToInputStream(propertyTypeMap,triples)){
        StringBuilder sql=new StringBuilder();
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(schemaTable.getSchema()));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
        sql.append(""String_Node_Str"");
        for (        Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple : triples.getRight().values()) {
          int count=1;
          sql.append(maybeWrapInQoutes(triple.getLeft().getSchema() + ""String_Node_Str"" + triple.getLeft().getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
          sql.append(""String_Node_Str"");
          sql.append(maybeWrapInQoutes(triple.getMiddle().getSchema() + ""String_Node_Str"" + triple.getMiddle().getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
          for (          String key : triples.getLeft()) {
            if (count <= triples.getLeft().size()) {
              sql.append(""String_Node_Str"");
            }
            count++;
            appendKeyForStream(propertyTypeMap.get(key),sql,key);
          }
          break;
        }
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_DELIMITER);
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_QUOTE);
        sql.append(""String_Node_Str"");
        if (logger.isDebugEnabled()) {
          logger.debug(sql.toString());
        }
        numberInserted=copyManager.copyIn(sql.toString(),is);
        try (PreparedStatement preparedStatement=con.prepareStatement(""String_Node_Str"" + schemaTable.getSchema() + ""String_Node_Str""+ SchemaManager.EDGE_PREFIX+ schemaTable.getTable()+ ""String_Node_Str"")){
          ResultSet resultSet=preparedStatement.executeQuery();
          resultSet.next();
          endHigh=resultSet.getLong(1);
          resultSet.close();
        }
         long id=endHigh - numberInserted + 1;
        for (        SqlgEdge sqlgEdge : triples.getRight().keySet()) {
          sqlgEdge.setInternalPrimaryKey(RecordId.from(schemaTable,id++));
        }
      }
     }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<MetaEdge,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  C3P0ProxyConnection con=(C3P0ProxyConnection)sqlgGraph.tx().getConnection();
  try {
    Method m=BaseConnection.class.getMethod(""String_Node_Str"",new Class[]{});
    Object[] arg=new Object[]{};
    CopyManager copyManager=(CopyManager)con.rawConnectionOperation(m,C3P0ProxyConnection.RAW_CONNECTION,arg);
    for (    MetaEdge metaEdge : edgeCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=edgeCache.get(metaEdge);
      Map<String,PropertyType> propertyTypeMap=sqlgGraph.getSchemaManager().getAllTables().get(metaEdge.getSchemaTable().getSchema() + ""String_Node_Str"" + SchemaManager.EDGE_PREFIX+ metaEdge.getSchemaTable().getTable());
      long endHigh;
      long numberInserted;
      try (InputStream is=mapEdgeToInputStream(propertyTypeMap,triples)){
        StringBuilder sql=new StringBuilder();
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(metaEdge.getSchemaTable().getSchema()));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + metaEdge.getSchemaTable().getTable()));
        sql.append(""String_Node_Str"");
        for (        Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple : triples.getRight().values()) {
          int count=1;
          sql.append(maybeWrapInQoutes(triple.getLeft().getSchema() + ""String_Node_Str"" + triple.getLeft().getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
          sql.append(""String_Node_Str"");
          sql.append(maybeWrapInQoutes(triple.getMiddle().getSchema() + ""String_Node_Str"" + triple.getMiddle().getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
          for (          String key : triples.getLeft()) {
            if (count <= triples.getLeft().size()) {
              sql.append(""String_Node_Str"");
            }
            count++;
            appendKeyForStream(propertyTypeMap.get(key),sql,key);
          }
          break;
        }
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_DELIMITER);
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_QUOTE);
        sql.append(""String_Node_Str"");
        if (logger.isDebugEnabled()) {
          logger.debug(sql.toString());
        }
        numberInserted=copyManager.copyIn(sql.toString(),is);
        try (PreparedStatement preparedStatement=con.prepareStatement(""String_Node_Str"" + metaEdge.getSchemaTable().getSchema() + ""String_Node_Str""+ SchemaManager.EDGE_PREFIX+ metaEdge.getSchemaTable().getTable()+ ""String_Node_Str"")){
          ResultSet resultSet=preparedStatement.executeQuery();
          resultSet.next();
          endHigh=resultSet.getLong(1);
          resultSet.close();
        }
         long id=endHigh - numberInserted + 1;
        for (        SqlgEdge sqlgEdge : triples.getRight().keySet()) {
          sqlgEdge.setInternalPrimaryKey(RecordId.from(metaEdge.getSchemaTable(),id++));
        }
      }
     }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9715522572665428
167036,"@Test public void testRepeat(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  a1.addEdge(""String_Node_Str"",b2);
  a1.addEdge(""String_Node_Str"",b3);
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  b1.addEdge(""String_Node_Str"",c1);
  b1.addEdge(""String_Node_Str"",c2);
  b1.addEdge(""String_Node_Str"",c3);
  this.sqlgGraph.tx().commit();
  List<Vertex> vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(0).repeat(out(""String_Node_Str"").out(""String_Node_Str""))).toList();
  assertEquals(1,vertices.size());
  assertTrue(vertices.contains(a1));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(repeat(out(""String_Node_Str"",""String_Node_Str"")).times(1)).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(b1));
  assertTrue(vertices.contains(b2));
  assertTrue(vertices.contains(b3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(1).repeat(out(""String_Node_Str"",""String_Node_Str""))).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(b1));
  assertTrue(vertices.contains(b2));
  assertTrue(vertices.contains(b3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(repeat(out(""String_Node_Str"",""String_Node_Str"")).times(2)).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(c1));
  assertTrue(vertices.contains(c2));
  assertTrue(vertices.contains(c3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(2).repeat(out(""String_Node_Str"",""String_Node_Str""))).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(c1));
  assertTrue(vertices.contains(c2));
  assertTrue(vertices.contains(c3));
}","@Test public void testRepeat(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  a1.addEdge(""String_Node_Str"",b2);
  a1.addEdge(""String_Node_Str"",b3);
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  b1.addEdge(""String_Node_Str"",c1);
  b1.addEdge(""String_Node_Str"",c2);
  b1.addEdge(""String_Node_Str"",c3);
  this.sqlgGraph.tx().commit();
  List<Vertex> vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(0).repeat(out(""String_Node_Str"").out(""String_Node_Str""))).toList();
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(repeat(out(""String_Node_Str"",""String_Node_Str"")).times(1)).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(b1));
  assertTrue(vertices.contains(b2));
  assertTrue(vertices.contains(b3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(1).repeat(out(""String_Node_Str"",""String_Node_Str""))).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(b1));
  assertTrue(vertices.contains(b2));
  assertTrue(vertices.contains(b3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(repeat(out(""String_Node_Str"",""String_Node_Str"")).times(2)).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(c1));
  assertTrue(vertices.contains(c2));
  assertTrue(vertices.contains(c3));
  vertices=this.sqlgGraph.traversal().V().hasLabel(""String_Node_Str"").local(__.<Vertex>times(2).repeat(out(""String_Node_Str"",""String_Node_Str""))).toList();
  assertEquals(3,vertices.size());
  assertTrue(vertices.contains(c1));
  assertTrue(vertices.contains(c2));
  assertTrue(vertices.contains(c3));
}",0.8133389261744967
167037,"private void removeObsoleteHasContainers(SchemaTableTree schemaTableTree){
  Set<HasContainer> toRemove=new HashSet<>();
  schemaTableTree.hasContainers.forEach(hasContainer -> {
    if (hasContainer.getKey().equals(label.getAccessor()) && hasContainer.getBiPredicate().equals(Compare.eq)) {
      SchemaTable hasContainerLabelSchemaTable;
      if (schemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
        hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.VERTEX_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
      }
 else {
        hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.EDGE_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
      }
      if (hasContainerLabelSchemaTable.toString().equals(schemaTableTree.getSchemaTable().toString())) {
        toRemove.add(hasContainer);
      }
    }
  }
);
  schemaTableTree.hasContainers.removeAll(toRemove);
}","private void removeObsoleteHasContainers(final SchemaTableTree schemaTableTree){
  Set<HasContainer> toRemove=new HashSet<>();
  schemaTableTree.hasContainers.forEach(hasContainer -> {
    if (hasContainer.getKey().equals(label.getAccessor()) && hasContainer.getBiPredicate().equals(Compare.eq)) {
      SchemaTable hasContainerLabelSchemaTable;
      if (schemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
        hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.VERTEX_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
      }
 else {
        hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.EDGE_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
      }
      if (hasContainerLabelSchemaTable.toString().equals(schemaTableTree.getSchemaTable().toString())) {
        toRemove.add(hasContainer);
      }
    }
  }
);
  schemaTableTree.hasContainers.removeAll(toRemove);
}",0.9971374045801528
167038,"private boolean invalidateByHas(SchemaTableTree schemaTableTree){
  for (  HasContainer hasContainer : schemaTableTree.hasContainers) {
    if (!hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_WITHOUT) && !hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_FROM)) {
      if (hasContainer.getKey().equals(label.getAccessor())) {
        SchemaTable hasContainerLabelSchemaTable;
        if (schemaTableTree.getSchemaTable().getTable().startsWith(SchemaManager.VERTEX_PREFIX)) {
          hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.VERTEX_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
        }
 else {
          hasContainerLabelSchemaTable=SchemaTable.from(this.sqlgGraph,SchemaManager.EDGE_PREFIX + hasContainer.getValue().toString(),this.sqlgGraph.getSqlDialect().getPublicSchema());
        }
        if (hasContainer.getBiPredicate().equals(Compare.eq) && !hasContainerLabelSchemaTable.toString().equals(schemaTableTree.getSchemaTable().toString())) {
          return true;
        }
      }
 else       if (!hasContainer.getKey().equals(T.id.getAccessor())) {
        if (!this.getFilteredAllTables().get(schemaTableTree.getSchemaTable().toString()).containsKey(hasContainer.getKey())) {
          return true;
        }
        if (hasEmptyWithin(hasContainer)) {
          return true;
        }
      }
 else       if (hasEmptyWithin(hasContainer)) {
        return true;
      }
    }
  }
  return false;
}","private boolean invalidateByHas(SchemaTableTree schemaTableTree){
  for (  HasContainer hasContainer : schemaTableTree.hasContainers) {
    if (!hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_WITHOUT) && !hasContainer.getKey().equals(TopologyStrategy.TOPOLOGY_SELECTION_FROM)) {
      if (!hasContainer.getKey().equals(T.id.getAccessor())) {
        if (!this.getFilteredAllTables().get(schemaTableTree.getSchemaTable().toString()).containsKey(hasContainer.getKey())) {
          return true;
        }
        if (hasEmptyWithin(hasContainer)) {
          return true;
        }
      }
 else       if (hasEmptyWithin(hasContainer)) {
        return true;
      }
    }
  }
  return false;
}",0.6297454220634212
167039,"public static List<Pair<SqlgElement,Map<String,Emit<SqlgElement>>>> loadResultSetIntoResultIterator(SqlgGraph sqlgGraph,ResultSetMetaData resultSetMetaData,ResultSet resultSet,SchemaTableTree rootSchemaTableTree,List<LinkedList<SchemaTableTree>> subQueryStacks,boolean first,Map<String,Integer> labeledColumnNameCountMap,Map<String,Integer> lastElementIdCountMap) throws SQLException {
  List<Pair<SqlgElement,Map<String,Emit<SqlgElement>>>> result=new ArrayList<>();
  if (resultSet.next()) {
    if (first) {
      for (      LinkedList<SchemaTableTree> subQueryStack : subQueryStacks) {
        subQueryStack.getFirst().clearColumnNamePropertNameMap();
      }
      populateMetaDataMaps(resultSetMetaData,rootSchemaTableTree,labeledColumnNameCountMap,lastElementIdCountMap);
    }
    int subQueryDepth=0;
    Map<String,Emit<SqlgElement>> previousLabeledElements=null;
    for (    LinkedList<SchemaTableTree> subQueryStack : subQueryStacks) {
      Map<String,Emit<SqlgElement>> labeledElements=SqlgUtil.loadLabeledElements(sqlgGraph,resultSet,subQueryStack,lastElementIdCountMap);
      if (previousLabeledElements == null) {
        previousLabeledElements=labeledElements;
      }
 else {
        previousLabeledElements.putAll(labeledElements);
      }
      if (subQueryDepth == subQueryStacks.size() - 1) {
        SchemaTableTree lastSchemaTableTree=subQueryStack.getLast();
        Optional<SqlgElement> e=SqlgUtil.loadElement(sqlgGraph,lastElementIdCountMap,resultSet,lastSchemaTableTree);
        if (e.isPresent()) {
          result.add(Pair.of(e.get(),previousLabeledElements));
          if (lastSchemaTableTree.getReplacedStepDepth() == lastSchemaTableTree.getStepDepth() && lastSchemaTableTree.isEmit() && lastSchemaTableTree.isUntilFirst()) {
            result.add(Pair.of(e.get(),previousLabeledElements));
          }
        }
 else {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      subQueryDepth++;
    }
  }
  return result;
}","public static List<Pair<SqlgElement,Map<String,Emit<SqlgElement>>>> loadResultSetIntoResultIterator(SqlgGraph sqlgGraph,ResultSetMetaData resultSetMetaData,ResultSet resultSet,SchemaTableTree rootSchemaTableTree,List<LinkedList<SchemaTableTree>> subQueryStacks,boolean first,Map<String,Integer> lastElementIdCountMap) throws SQLException {
  List<Pair<SqlgElement,Map<String,Emit<SqlgElement>>>> result=new ArrayList<>();
  if (resultSet.next()) {
    if (first) {
      for (      LinkedList<SchemaTableTree> subQueryStack : subQueryStacks) {
        for (        SchemaTableTree schemaTableTree : subQueryStack) {
          schemaTableTree.clearColumnNamePropertNameMap();
        }
      }
      populateIdCountMap(resultSetMetaData,rootSchemaTableTree,lastElementIdCountMap);
    }
    int subQueryDepth=0;
    Map<String,Emit<SqlgElement>> previousLabeledElements=null;
    for (    LinkedList<SchemaTableTree> subQueryStack : subQueryStacks) {
      Map<String,Emit<SqlgElement>> labeledElements=SqlgUtil.loadLabeledElements(sqlgGraph,resultSet,subQueryStack,lastElementIdCountMap);
      if (previousLabeledElements == null) {
        previousLabeledElements=labeledElements;
      }
 else {
        previousLabeledElements.putAll(labeledElements);
      }
      if (subQueryDepth == subQueryStacks.size() - 1) {
        SchemaTableTree lastSchemaTableTree=subQueryStack.getLast();
        Optional<SqlgElement> e=SqlgUtil.loadElement(sqlgGraph,lastElementIdCountMap,resultSet,lastSchemaTableTree);
        if (e.isPresent()) {
          result.add(Pair.of(e.get(),previousLabeledElements));
          if (lastSchemaTableTree.getReplacedStepDepth() == lastSchemaTableTree.getStepDepth() && lastSchemaTableTree.isEmit() && lastSchemaTableTree.isUntilFirst()) {
            result.add(Pair.of(e.get(),previousLabeledElements));
          }
        }
 else {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      subQueryDepth++;
    }
  }
  return result;
}",0.9330323551542512
167040,"/** 
 * This constructor is called for the root SchemaTableTree(s) <p> This is invoked from   {@link ReplacedStep} when creating the root {@link SchemaTableTree}s. The hasContainers at this stage contains the   {@link TopologyStrategy} from or without hasContainer.After doing the filtering it must be removed from the hasContainers as it must not partake in sql generation.
 */
SchemaTableTree(SqlgGraph sqlgGraph,SchemaTable schemaTable,int stepDepth,List<HasContainer> hasContainers,List<org.javatuples.Pair<Traversal.Admin,Comparator>> comparators,STEP_TYPE stepType,boolean emit,boolean untilFirst,boolean optionalLeftJoin,int replacedStepDepth,Set<String> labels){
  this(sqlgGraph,schemaTable,stepDepth,replacedStepDepth);
  this.hasContainers=hasContainers;
  this.comparators=comparators;
  this.labels=Collections.unmodifiableSet(labels);
  this.stepType=stepType;
  this.emit=emit;
  this.untilFirst=untilFirst;
  this.optionalLeftJoin=optionalLeftJoin;
  this.filteredAllTables=SqlgUtil.filterHasContainers(sqlgGraph.getSchemaManager(),this.hasContainers);
  SqlgUtil.removeTopologyStrategyHasContainer(this.hasContainers);
  initializeAliasColumnNameMaps();
}","/** 
 * This constructor is called for the root SchemaTableTree(s) <p> This is invoked from   {@link ReplacedStep} when creating the root {@link SchemaTableTree}s. The hasContainers at this stage contains the   {@link TopologyStrategy} from or without hasContainer.After doing the filtering it must be removed from the hasContainers as it must not partake in sql generation.
 */
SchemaTableTree(SqlgGraph sqlgGraph,SchemaTable schemaTable,int stepDepth,List<HasContainer> hasContainers,List<org.javatuples.Pair<Traversal.Admin,Comparator>> comparators,STEP_TYPE stepType,boolean emit,boolean untilFirst,boolean optionalLeftJoin,int replacedStepDepth,Set<String> labels){
  this(sqlgGraph,schemaTable,stepDepth,replacedStepDepth);
  this.hasContainers=hasContainers;
  this.comparators=comparators;
  this.labels=Collections.unmodifiableSet(labels);
  this.stepType=stepType;
  this.emit=emit;
  this.untilFirst=untilFirst;
  this.optionalLeftJoin=optionalLeftJoin;
  this.filteredAllTables=SqlgUtil.filterHasContainers(sqlgGraph.getSchemaManager(),this.hasContainers);
  initializeAliasColumnNameMaps();
}",0.9705753184014052
167041,"protected Object convertObjectArrayToPrimitiveArray(Object[] value,int baseType){
  if (value instanceof String[]) {
    return value;
  }
switch (baseType) {
case Types.BIT:
    return copy(value,new boolean[value.length]);
case Types.BOOLEAN:
  return copy(value,new boolean[value.length]);
case Types.TINYINT:
return copyToTinyInt((Integer[])value,new byte[value.length]);
case Types.SMALLINT:
return copyToSmallInt(value,new short[value.length]);
case Types.INTEGER:
return copy(value,new int[value.length]);
case Types.BIGINT:
return copy(value,new long[value.length]);
case Types.REAL:
return copy(value,new float[value.length]);
case Types.DOUBLE:
return copy(value,new double[value.length]);
case Types.VARCHAR:
return copy(value,new String[value.length]);
case Types.TIMESTAMP:
return copyToLocalDateTime((Timestamp[])value,new LocalDateTime[value.length]);
case Types.DATE:
return copyToLocalDate((Date[])value,new LocalDate[value.length]);
case Types.TIME:
return copyToLocalTime((Time[])value,new LocalTime[value.length]);
}
if (value instanceof Integer[]) {
switch (baseType) {
case Types.TINYINT:
return copyToTinyInt((Integer[])value,new byte[value.length]);
case Types.SMALLINT:
return copyToSmallInt(value,new short[value.length]);
default :
return copy(value,new int[value.length]);
}
}
if (value instanceof Long[]) {
return copy(value,new long[value.length]);
}
if (value instanceof Double[]) {
return copy(value,new double[value.length]);
}
if (value instanceof Float[]) {
return copy(value,new float[value.length]);
}
if (value instanceof Boolean[]) {
return copy(value,new boolean[value.length]);
}
if (value instanceof Character[]) {
return copy(value,new char[value.length]);
}
throw new IllegalArgumentException(String.format(""String_Node_Str"",value.getClass().getComponentType().getName()));
}","protected Object convertObjectArrayToPrimitiveArray(Object[] value,int baseType){
  if (value instanceof String[]) {
    return value;
  }
switch (baseType) {
case Types.BIT:
    return copy(value,new boolean[value.length]);
case Types.BOOLEAN:
  return copy(value,new boolean[value.length]);
case Types.TINYINT:
return copyToTinyInt((Integer[])value,new byte[value.length]);
case Types.SMALLINT:
return copyToSmallInt(value,new short[value.length]);
case Types.INTEGER:
return copy(value,new int[value.length]);
case Types.BIGINT:
return copy(value,new long[value.length]);
case Types.REAL:
return copy(value,new float[value.length]);
case Types.DOUBLE:
return copy(value,new double[value.length]);
case Types.VARCHAR:
return copy(value,new String[value.length]);
case Types.TIMESTAMP:
return copyToLocalDateTime((Timestamp[])value,new LocalDateTime[value.length]);
case 95:
return copyToLocalDateTime(value,new LocalDateTime[value.length]);
case Types.DATE:
return copyToLocalDate((Date[])value,new LocalDate[value.length]);
case Types.TIME:
return copyToLocalTime((Time[])value,new LocalTime[value.length]);
}
if (value instanceof Integer[]) {
switch (baseType) {
case Types.TINYINT:
return copyToTinyInt((Integer[])value,new byte[value.length]);
case Types.SMALLINT:
return copyToSmallInt(value,new short[value.length]);
default :
return copy(value,new int[value.length]);
}
}
if (value instanceof Long[]) {
return copy(value,new long[value.length]);
}
if (value instanceof Double[]) {
return copy(value,new double[value.length]);
}
if (value instanceof Float[]) {
return copy(value,new float[value.length]);
}
if (value instanceof Boolean[]) {
return copy(value,new boolean[value.length]);
}
if (value instanceof Character[]) {
return copy(value,new char[value.length]);
}
throw new IllegalArgumentException(String.format(""String_Node_Str"",value.getClass().getComponentType().getName()));
}",0.979536887452881
167042,"static void addEdgeLabel(SqlgGraph sqlgGraph,String schema,String prefixedTable,SchemaTable foreignKeyIn,SchemaTable foreignKeyOut,Map<String,PropertyType> columns){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaVertex=schemas.get(0);
    List<Vertex> outVertices=traversalSource.V(schemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyOut.getTable()).toList();
    Preconditions.checkState(!outVertices.isEmpty(),""String_Node_Str"" + foreignKeyOut.toString() + ""String_Node_Str"");
    Preconditions.checkState(outVertices.size() == 1,""String_Node_Str"" + foreignKeyOut.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex outVertex=outVertices.get(0);
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeyIn.getSchema()).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaInVertex=schemas.get(0);
    List<Vertex> inVertices=traversalSource.V(schemaInVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyIn.getTable()).toList();
    Preconditions.checkState(!inVertices.isEmpty(),""String_Node_Str"" + foreignKeyIn.toString() + ""String_Node_Str"");
    Preconditions.checkState(inVertices.size() == 1,""String_Node_Str"" + foreignKeyIn.toString() + ""String_Node_Str"");
    Vertex inVertex=inVertices.get(0);
    Vertex edgeVertex=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL,""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length()),""String_Node_Str"",LocalDateTime.now());
    outVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    inVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    for (    Map.Entry<String,PropertyType> columnEntry : columns.entrySet()) {
      Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",columnEntry.getKey(),""String_Node_Str"",columnEntry.getValue().name(),""String_Node_Str"",LocalDateTime.now());
      edgeVertex.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addEdgeLabel(SqlgGraph sqlgGraph,String schema,String prefixedTable,SchemaTable foreignKeyIn,SchemaTable foreignKeyOut,Map<String,PropertyType> columns){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaVertex=schemas.get(0);
    List<Vertex> outVertices=traversalSource.V(schemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyOut.getTable()).toList();
    Preconditions.checkState(!outVertices.isEmpty(),""String_Node_Str"" + foreignKeyOut.toString() + ""String_Node_Str"");
    Preconditions.checkState(outVertices.size() == 1,""String_Node_Str"" + foreignKeyOut.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex outVertex=outVertices.get(0);
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeyIn.getSchema()).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaInVertex=schemas.get(0);
    List<Vertex> inVertices=traversalSource.V(schemaInVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyIn.getTable()).toList();
    Preconditions.checkState(!inVertices.isEmpty(),""String_Node_Str"" + foreignKeyIn.toString() + ""String_Node_Str"");
    Preconditions.checkState(inVertices.size() == 1,""String_Node_Str"" + foreignKeyIn.toString() + ""String_Node_Str"");
    Vertex inVertex=inVertices.get(0);
    Vertex edgeVertex=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL,""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length()),""String_Node_Str"",LocalDateTime.now());
    outVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    inVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    for (    Map.Entry<String,PropertyType> columnEntry : columns.entrySet()) {
      Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",columnEntry.getKey(),""String_Node_Str"",columnEntry.getValue().name(),""String_Node_Str"",LocalDateTime.now());
      edgeVertex.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9828739194258684
167043,"static void addVertexColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.VERTEX_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> vertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.VERTEX_PREFIX.length())).toList();
    if (vertices.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + schema + ""String_Node_Str""+ prefixedTable);
    }
    if (vertices.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + schema + ""String_Node_Str""+ prefixedTable);
    }
    Vertex vertex=vertices.get(0);
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    vertex.addEdge(SchemaManager.SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addVertexColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.VERTEX_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> vertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.VERTEX_PREFIX.length())).toList();
    if (vertices.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + schema + ""String_Node_Str""+ prefixedTable);
    }
    if (vertices.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + schema + ""String_Node_Str""+ prefixedTable);
    }
    Vertex vertex=vertices.get(0);
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    vertex.addEdge(SchemaManager.SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9640780020526856
167044,"static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    String foreignKeySchema=foreignKey.getSchema();
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeySchema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Vertex foreignKeySchemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").dedup().toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String foreignKeyVertexTable;
    if (in) {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(foreignKeySchemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyVertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    String foreignKeySchema=foreignKey.getSchema();
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeySchema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Vertex foreignKeySchemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").dedup().toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String foreignKeyVertexTable;
    if (in) {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(foreignKeySchemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyVertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9833412660637793
167045,"static void addVertexLabel(SqlgGraph sqlgGraph,String schema,String tableName,Map<String,PropertyType> columns){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(tableName.startsWith(SchemaManager.VERTEX_PREFIX));
    Vertex schemaVertex=schemas.get(0);
    Vertex vertex=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_VERTEX_LABEL,""String_Node_Str"",tableName.substring(SchemaManager.VERTEX_PREFIX.length()),""String_Node_Str"",schema + tableName,""String_Node_Str"",LocalDateTime.now());
    schemaVertex.addEdge(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE,vertex);
    for (    Map.Entry<String,PropertyType> columnEntry : columns.entrySet()) {
      Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",columnEntry.getKey(),""String_Node_Str"",columnEntry.getValue().name(),""String_Node_Str"",LocalDateTime.now());
      vertex.addEdge(SchemaManager.SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE,property);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addVertexLabel(SqlgGraph sqlgGraph,String schema,String tableName,Map<String,PropertyType> columns){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(tableName.startsWith(SchemaManager.VERTEX_PREFIX));
    Vertex schemaVertex=schemas.get(0);
    Vertex vertex=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_VERTEX_LABEL,""String_Node_Str"",tableName.substring(SchemaManager.VERTEX_PREFIX.length()),""String_Node_Str"",schema + tableName,""String_Node_Str"",LocalDateTime.now());
    schemaVertex.addEdge(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE,vertex);
    for (    Map.Entry<String,PropertyType> columnEntry : columns.entrySet()) {
      Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",columnEntry.getKey(),""String_Node_Str"",columnEntry.getValue().name(),""String_Node_Str"",LocalDateTime.now());
      vertex.addEdge(SchemaManager.SQLG_SCHEMA_VERTEX_PROPERTIES_EDGE,property);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9641674194519724
167046,"static void addEdgeColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    Set<Vertex> edges=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").toSet();
    if (edges.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    if (edges.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    Vertex edge=edges.iterator().next();
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    edge.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addEdgeColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.topology();
    Set<Vertex> edges=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").toSet();
    if (edges.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    if (edges.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    Vertex edge=edges.iterator().next();
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    edge.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9648711943793912
167047,"private static Object[] getArray(Object val){
  int arrlength=Array.getLength(val);
  Object[] outputArray=new Object[arrlength];
  for (int i=0; i < arrlength; ++i) {
    outputArray[i]=Array.get(val,i);
  }
  return outputArray;
}","private static Object[] getArray(PropertyType propertyType,Object val){
  int arrlength=Array.getLength(val);
  Object[] outputArray=new Object[arrlength];
  for (int i=0; i < arrlength; ++i) {
switch (propertyType) {
case LOCALDATETIME_ARRAY:
      outputArray[i]=Timestamp.valueOf((LocalDateTime)Array.get(val,i));
    break;
default :
  outputArray[i]=Array.get(val,i);
}
}
return outputArray;
}",0.5777777777777777
167048,"/** 
 * This only gets called for array properties
 * @param propertyType
 * @param value
 * @return
 */
public static Object[] transformArrayToInsertValue(PropertyType propertyType,Object value){
  return getArray(value);
}","/** 
 * This only gets called for array properties
 * @param propertyType
 * @param value
 * @return
 */
public static Object[] transformArrayToInsertValue(PropertyType propertyType,Object value){
  return getArray(propertyType,value);
}",0.9718004338394792
167049,"@Override public void validateProperty(Object key,Object value){
  if (value instanceof String) {
    return;
  }
  if (value instanceof Character) {
    return;
  }
  if (value instanceof Boolean) {
    return;
  }
  if (value instanceof Byte) {
    return;
  }
  if (value instanceof Short) {
    return;
  }
  if (value instanceof Integer) {
    return;
  }
  if (value instanceof Long) {
    return;
  }
  if (value instanceof Double) {
    return;
  }
  if (value instanceof LocalDate) {
    return;
  }
  if (value instanceof LocalDateTime) {
    return;
  }
  if (value instanceof ZonedDateTime) {
    return;
  }
  if (value instanceof LocalTime) {
    return;
  }
  if (value instanceof Period) {
    return;
  }
  if (value instanceof Duration) {
    return;
  }
  if (value instanceof byte[]) {
    return;
  }
  if (value instanceof boolean[]) {
    return;
  }
  if (value instanceof char[]) {
    return;
  }
  if (value instanceof short[]) {
    return;
  }
  if (value instanceof int[]) {
    return;
  }
  if (value instanceof long[]) {
    return;
  }
  if (value instanceof double[]) {
    return;
  }
  if (value instanceof String[]) {
    return;
  }
  if (value instanceof Character[]) {
    return;
  }
  if (value instanceof Boolean[]) {
    return;
  }
  if (value instanceof Byte[]) {
    return;
  }
  if (value instanceof Short[]) {
    return;
  }
  if (value instanceof Integer[]) {
    return;
  }
  if (value instanceof Long[]) {
    return;
  }
  if (value instanceof Double[]) {
    return;
  }
  throw Property.Exceptions.dataTypeOfPropertyValueNotSupported(value);
}","@Override public void validateProperty(Object key,Object value){
  if (value instanceof String) {
    return;
  }
  if (value instanceof Character) {
    return;
  }
  if (value instanceof Boolean) {
    return;
  }
  if (value instanceof Byte) {
    return;
  }
  if (value instanceof Short) {
    return;
  }
  if (value instanceof Integer) {
    return;
  }
  if (value instanceof Long) {
    return;
  }
  if (value instanceof Double) {
    return;
  }
  if (value instanceof LocalDate) {
    return;
  }
  if (value instanceof LocalDateTime) {
    return;
  }
  if (value instanceof ZonedDateTime) {
    return;
  }
  if (value instanceof LocalTime) {
    return;
  }
  if (value instanceof Period) {
    return;
  }
  if (value instanceof Duration) {
    return;
  }
  if (value instanceof byte[]) {
    return;
  }
  if (value instanceof boolean[]) {
    return;
  }
  if (value instanceof char[]) {
    return;
  }
  if (value instanceof short[]) {
    return;
  }
  if (value instanceof int[]) {
    return;
  }
  if (value instanceof long[]) {
    return;
  }
  if (value instanceof double[]) {
    return;
  }
  if (value instanceof String[]) {
    return;
  }
  if (value instanceof Character[]) {
    return;
  }
  if (value instanceof Boolean[]) {
    return;
  }
  if (value instanceof Byte[]) {
    return;
  }
  if (value instanceof Short[]) {
    return;
  }
  if (value instanceof Integer[]) {
    return;
  }
  if (value instanceof Long[]) {
    return;
  }
  if (value instanceof Double[]) {
    return;
  }
  if (value instanceof LocalDateTime[]) {
    return;
  }
  if (value instanceof LocalDate[]) {
    return;
  }
  if (value instanceof LocalTime[]) {
    return;
  }
  if (value instanceof ZonedDateTime[]) {
    return;
  }
  throw Property.Exceptions.dataTypeOfPropertyValueNotSupported(value);
}",0.9346557759626604
167050,"@Override public String[] propertyTypeToSqlDefinition(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return new String[]{""String_Node_Str""};
case BYTE:
  return new String[]{""String_Node_Str""};
case SHORT:
return new String[]{""String_Node_Str""};
case INTEGER:
return new String[]{""String_Node_Str""};
case LONG:
return new String[]{""String_Node_Str""};
case FLOAT:
return new String[]{""String_Node_Str""};
case DOUBLE:
return new String[]{""String_Node_Str""};
case LOCALDATE:
return new String[]{""String_Node_Str""};
case LOCALDATETIME:
return new String[]{""String_Node_Str""};
case ZONEDDATETIME:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case LOCALTIME:
return new String[]{""String_Node_Str""};
case PERIOD:
return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
case DURATION:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case STRING:
return new String[]{""String_Node_Str""};
case JSON:
throw new IllegalStateException(""String_Node_Str"");
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case BYTE_ARRAY:
return new String[]{""String_Node_Str""};
case BOOLEAN_ARRAY:
return new String[]{""String_Node_Str""};
case SHORT_ARRAY:
return new String[]{""String_Node_Str""};
case INTEGER_ARRAY:
return new String[]{""String_Node_Str""};
case LONG_ARRAY:
return new String[]{""String_Node_Str""};
case FLOAT_ARRAY:
return new String[]{""String_Node_Str""};
case DOUBLE_ARRAY:
return new String[]{""String_Node_Str""};
case STRING_ARRAY:
return new String[]{""String_Node_Str""};
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public String[] propertyTypeToSqlDefinition(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return new String[]{""String_Node_Str""};
case BYTE:
  return new String[]{""String_Node_Str""};
case SHORT:
return new String[]{""String_Node_Str""};
case INTEGER:
return new String[]{""String_Node_Str""};
case LONG:
return new String[]{""String_Node_Str""};
case FLOAT:
return new String[]{""String_Node_Str""};
case DOUBLE:
return new String[]{""String_Node_Str""};
case LOCALDATE:
return new String[]{""String_Node_Str""};
case LOCALDATETIME:
return new String[]{""String_Node_Str""};
case ZONEDDATETIME:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case LOCALTIME:
return new String[]{""String_Node_Str""};
case PERIOD:
return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
case DURATION:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case STRING:
return new String[]{""String_Node_Str""};
case JSON:
throw new IllegalStateException(""String_Node_Str"");
case POINT:
throw new IllegalStateException(""String_Node_Str"");
case POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POINT:
throw new IllegalStateException(""String_Node_Str"");
case GEOGRAPHY_POLYGON:
throw new IllegalStateException(""String_Node_Str"");
case BYTE_ARRAY:
return new String[]{""String_Node_Str""};
case BOOLEAN_ARRAY:
return new String[]{""String_Node_Str""};
case SHORT_ARRAY:
return new String[]{""String_Node_Str""};
case INTEGER_ARRAY:
return new String[]{""String_Node_Str""};
case LONG_ARRAY:
return new String[]{""String_Node_Str""};
case FLOAT_ARRAY:
return new String[]{""String_Node_Str""};
case DOUBLE_ARRAY:
return new String[]{""String_Node_Str""};
case STRING_ARRAY:
return new String[]{""String_Node_Str""};
case LOCALDATETIME_ARRAY:
return new String[]{""String_Node_Str""};
case LOCALDATE_ARRAY:
return new String[]{""String_Node_Str""};
case LOCALTIME_ARRAY:
return new String[]{""String_Node_Str""};
case ZONEDDATETIME_ARRAY:
return new String[]{""String_Node_Str""};
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.93502538071066
167051,"@Override public String getArrayDriverType(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN_ARRAY:
    return ""String_Node_Str"";
case SHORT_ARRAY:
  return ""String_Node_Str"";
case INTEGER_ARRAY:
return ""String_Node_Str"";
case LONG_ARRAY:
return ""String_Node_Str"";
case DOUBLE_ARRAY:
return ""String_Node_Str"";
case STRING_ARRAY:
return ""String_Node_Str"";
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name() + ""String_Node_Str"");
}
}","@Override public String getArrayDriverType(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN_ARRAY:
    return ""String_Node_Str"";
case SHORT_ARRAY:
  return ""String_Node_Str"";
case INTEGER_ARRAY:
return ""String_Node_Str"";
case LONG_ARRAY:
return ""String_Node_Str"";
case DOUBLE_ARRAY:
return ""String_Node_Str"";
case STRING_ARRAY:
return ""String_Node_Str"";
case LOCALDATETIME_ARRAY:
return ""String_Node_Str"";
case LOCALDATE_ARRAY:
return ""String_Node_Str"";
case LOCALTIME_ARRAY:
return ""String_Node_Str"";
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name() + ""String_Node_Str"");
}
}",0.8656987295825771
167052,"private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String tableNamePattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTable.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new HashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String tableNamePattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTableMap=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTableMap.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new HashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9889549702633816
167053,"void ensureColumnsExist(String schema,String prefixedTable,Map<String,PropertyType> columns){
  boolean isVertex=prefixedTable.startsWith(VERTEX_PREFIX);
  boolean isEdge=prefixedTable.startsWith(EDGE_PREFIX);
  if (!isVertex && !isEdge) {
    throw new IllegalStateException(""String_Node_Str"" + VERTEX_PREFIX + ""String_Node_Str""+ EDGE_PREFIX);
  }
  Map<String,PropertyType> uncommittedColumns=internalGetColumn(schema,prefixedTable);
  Objects.requireNonNull(uncommittedColumns,""String_Node_Str"");
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    String columnName=column.getKey();
    PropertyType columnType=column.getValue();
    if (!uncommittedColumns.containsKey(columnName)) {
      uncommittedColumns=internalGetColumn(schema,prefixedTable);
    }
    if (!uncommittedColumns.containsKey(columnName)) {
      lock(schema,prefixedTable);
      if (!uncommittedColumns.containsKey(columnName)) {
        if (!SQLG_SCHEMA.equals(schema)) {
          if (isVertex) {
            TopologyManager.addVertexColumn(this.sqlgGraph,schema,prefixedTable,column);
          }
 else {
            TopologyManager.addEdgeColumn(this.sqlgGraph,schema,prefixedTable,column);
          }
        }
        addColumn(schema,prefixedTable,ImmutablePair.of(columnName,columnType));
        uncommittedColumns.put(columnName,columnType);
        this.uncommittedTables.put(schema + ""String_Node_Str"" + prefixedTable,uncommittedColumns);
      }
    }
  }
}","private void ensureColumnsExist(String schema,String prefixedTable,Map<String,PropertyType> columns){
  boolean isVertex=prefixedTable.startsWith(VERTEX_PREFIX);
  boolean isEdge=prefixedTable.startsWith(EDGE_PREFIX);
  if (!isVertex && !isEdge) {
    throw new IllegalStateException(""String_Node_Str"" + VERTEX_PREFIX + ""String_Node_Str""+ EDGE_PREFIX);
  }
  Map<String,PropertyType> uncommittedColumns=internalGetColumn(schema,prefixedTable);
  Objects.requireNonNull(uncommittedColumns,""String_Node_Str"");
  for (  Map.Entry<String,PropertyType> column : columns.entrySet()) {
    String columnName=column.getKey();
    PropertyType columnType=column.getValue();
    if (!uncommittedColumns.containsKey(columnName)) {
      uncommittedColumns=internalGetColumn(schema,prefixedTable);
    }
    if (!uncommittedColumns.containsKey(columnName)) {
      lock(schema,prefixedTable);
      if (!uncommittedColumns.containsKey(columnName)) {
        if (!SQLG_SCHEMA.equals(schema)) {
          if (isVertex) {
            TopologyManager.addVertexColumn(this.sqlgGraph,schema,prefixedTable,column);
          }
 else {
            TopologyManager.addEdgeColumn(this.sqlgGraph,schema,prefixedTable,column);
          }
        }
        addColumn(schema,prefixedTable,ImmutablePair.of(columnName,columnType));
        uncommittedColumns.put(columnName,columnType);
        this.uncommittedTables.put(schema + ""String_Node_Str"" + prefixedTable,uncommittedColumns);
      }
    }
  }
}",0.9972881355932204
167054,"static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    String foreignKeySchema=foreignKey.getSchema();
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeySchema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Vertex foreignKeySchemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(in ? SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE : SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").dedup().toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String foreignKeyVertexTable;
    if (in) {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(foreignKeySchemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyVertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    String foreignKeySchema=foreignKey.getSchema();
    schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",foreignKeySchema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + foreignKeySchema + ""String_Node_Str"");
    Vertex foreignKeySchemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").dedup().toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String foreignKeyVertexTable;
    if (in) {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      foreignKeyVertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(foreignKeySchemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",foreignKeyVertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9927165659383232
167055,"static void addEdgeColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    List<Vertex> edges=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").toList();
    if (edges.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    if (edges.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    Vertex edge=edges.get(0);
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    edge.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addEdgeColumn(SqlgGraph sqlgGraph,String schema,String prefixedTable,Map.Entry<String,PropertyType> column){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    Preconditions.checkArgument(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX),""String_Node_Str"" + prefixedTable);
    GraphTraversalSource traversalSource=sqlgGraph.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create());
    Set<Vertex> edges=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").toSet();
    if (edges.size() == 0) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    if (edges.size() > 1) {
      throw new IllegalStateException(""String_Node_Str"" + prefixedTable);
    }
    Vertex edge=edges.iterator().next();
    Vertex property=sqlgGraph.addVertex(T.label,SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_PROPERTY,""String_Node_Str"",column.getKey(),""String_Node_Str"",column.getValue().name(),""String_Node_Str"",LocalDateTime.now());
    edge.addEdge(SchemaManager.SQLG_SCHEMA_EDGE_PROPERTIES_EDGE,property);
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9899448589036652
167056,"private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String tableNamePattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTableMap=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTableMap.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new HashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTableMap=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTableMap.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTableMap.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTableMap.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTableMap.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<String,PropertyType> columns=new HashMap<>();
      ResultSet columnsRs=metadata.getColumns(catalog,schema,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9627809496278096
167057,"public Traversal<Vertex,Long> get_g_V_both_both_count(GraphTraversalSource g){
  return g.V().both().both().count();
}","private Traversal<Vertex,Long> get_g_V_both_both_count(GraphTraversalSource g){
  return g.V().both().both().count();
}",0.9620253164556962
167058,"private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTable.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<String,PropertyType> columns=new HashMap<>();
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","private void upgradeSqlgToTopologySchema(){
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    String catalog=null;
    String schemaPattern=null;
    String tableNamePattern=null;
    String[] types=new String[]{""String_Node_Str""};
    ResultSet schemaRs=metadata.getSchemas();
    while (schemaRs.next()) {
      String schema=schemaRs.getString(1);
      if (schema.equals(SQLG_SCHEMA) || this.sqlDialect.getDefaultSchemas().contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      TopologyManager.addSchema(this.sqlgGraph,schema);
    }
    ResultSet vertexRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (vertexRs.next()) {
      String schema=vertexRs.getString(2);
      String table=vertexRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new ConcurrentHashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addVertexLabel(this.sqlgGraph,schema,table,columns);
    }
    ResultSet edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=Collections.emptyMap();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
          SchemaTable edgeSchemaTable=SchemaTable.of(schema,table);
          String[] split=column.split(""String_Node_Str"");
          SchemaTable foreignKey=SchemaTable.of(split[0],split[1]);
          if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.IN_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> inSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (inSchemaTable.getLeft() == null) {
                inSchemaTable.setLeft(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,true,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(schemaTable,null));
            }
          }
 else           if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
            SchemaTable schemaTable=SchemaTable.of(split[0],split[1].substring(0,split[1].length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()));
            if (inOutSchemaTable.containsKey(edgeSchemaTable)) {
              MutablePair<SchemaTable,SchemaTable> outSchemaTable=inOutSchemaTable.get(edgeSchemaTable);
              if (outSchemaTable.getRight() == null) {
                outSchemaTable.setRight(schemaTable);
              }
 else {
                TopologyManager.addLabelToEdge(this.sqlgGraph,schema,table,false,foreignKey);
              }
            }
 else {
              inOutSchemaTable.put(edgeSchemaTable,MutablePair.of(null,schemaTable));
            }
          }
          MutablePair<SchemaTable,SchemaTable> inOutLabels=inOutSchemaTable.get(edgeSchemaTable);
          if (!edgeAdded && inOutLabels.getLeft() != null && inOutLabels.getRight() != null) {
            TopologyManager.addEdgeLabel(this.sqlgGraph,schema,table,inOutLabels.getLeft(),inOutLabels.getRight(),columns);
            edgeAdded=true;
          }
        }
      }
    }
    edgeRs=metadata.getTables(catalog,schemaPattern,""String_Node_Str"",types);
    while (edgeRs.next()) {
      String schema=edgeRs.getString(2);
      String table=edgeRs.getString(3);
      Set<String> schemasToIgnore=new HashSet<>(this.sqlDialect.getDefaultSchemas());
      schemasToIgnore.remove(this.sqlDialect.getPublicSchema());
      if (schema.equals(SQLG_SCHEMA) || schemasToIgnore.contains(schema) || this.sqlDialect.getGisSchemas().contains(schema)) {
        continue;
      }
      if (this.sqlDialect.getSpacialRefTable().contains(table)) {
        continue;
      }
      Map<SchemaTable,MutablePair<SchemaTable,SchemaTable>> inOutSchemaTable=new HashMap<>();
      Map<String,PropertyType> columns=new HashMap<>();
      String previousSchema=""String_Node_Str"";
      ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
      boolean edgeAdded=false;
      while (columnsRs.next()) {
        String column=columnsRs.getString(4);
        if (!column.equals(SchemaManager.ID) && !column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) && !column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          columns.put(column,propertyType);
        }
      }
      TopologyManager.addEdgeColumn(this.sqlgGraph,schema,table,columns);
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9713204250982675
167059,"SchemaManager(SqlgGraph sqlgGraph,SqlDialect sqlDialect,Configuration configuration){
  this.sqlgGraph=sqlgGraph;
  this.sqlDialect=sqlDialect;
  this.distributed=configuration.getBoolean(""String_Node_Str"",false);
  if (this.distributed) {
    this.hazelcastInstance=Hazelcast.newHazelcastInstance(configHazelcast(configuration));
    this.schemas=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
    this.labelSchemas=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + LABEL_SCHEMAS_HAZELCAST_MAP);
    this.tables=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLES_HAZELCAST_MAP);
    this.edgeForeignKeys=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + EDGE_FOREIGN_KEYS_HAZELCAST_MAP);
    this.tableLabels=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLE_LABELS_HAZELCAST_MAP);
    ((IMap)this.schemas).addEntryListener(new SchemasMapEntryListener(),true);
    ((IMap)this.labelSchemas).addEntryListener(new LabelSchemasMapEntryListener(),true);
    ((IMap)this.tables).addEntryListener(new TablesMapEntryListener(),true);
    ((IMap)this.edgeForeignKeys).addEntryListener(new EdgeForeignKeysMapEntryListener(),true);
    ((IMap)this.tableLabels).addEntryListener(new TableLabelMapEntryListener(),true);
    this.schemaLock=this.hazelcastInstance.getLock(""String_Node_Str"");
  }
 else {
    this.schemaLock=new ReentrantLock();
  }
  this.sqlgGraph.tx().afterCommit(() -> {
    this.localTemporaryTables.clear();
    if (this.isLockedByCurrentThread()) {
      for (      String schema : this.uncommittedSchemas) {
        if (distributed) {
          this.schemas.put(schema,schema);
        }
        this.localSchemas.put(schema,schema);
      }
      for (      Map.Entry<String,Map<String,PropertyType>> uncommittedTablesEntry : this.uncommittedTables.entrySet()) {
        if (distributed) {
          this.tables.put(uncommittedTablesEntry.getKey(),uncommittedTablesEntry.getValue());
        }
        this.localTables.put(uncommittedTablesEntry.getKey(),uncommittedTablesEntry.getValue());
      }
      for (      Map.Entry<String,Set<String>> uncommittedLabelSchemasEntry : this.uncommittedLabelSchemas.entrySet()) {
        Set<String> schemas=uncommittedLabelSchemasEntry.getValue();
        if (schemas == null) {
          if (distributed) {
            this.labelSchemas.put(uncommittedLabelSchemasEntry.getKey(),uncommittedLabelSchemasEntry.getValue());
          }
          this.localLabelSchemas.put(uncommittedLabelSchemasEntry.getKey(),this.uncommittedLabelSchemas.get(uncommittedLabelSchemasEntry.getKey()));
        }
 else {
          schemas.addAll(this.uncommittedLabelSchemas.get(uncommittedLabelSchemasEntry.getKey()));
          if (distributed) {
            this.labelSchemas.put(uncommittedLabelSchemasEntry.getKey(),schemas);
          }
          this.localLabelSchemas.put(uncommittedLabelSchemasEntry.getKey(),schemas);
        }
      }
      for (      Map.Entry<String,Set<String>> uncommittedEdgeForeignKeysEntry : this.uncommittedEdgeForeignKeys.entrySet()) {
        if (distributed) {
          this.edgeForeignKeys.put(uncommittedEdgeForeignKeysEntry.getKey(),uncommittedEdgeForeignKeysEntry.getValue());
        }
        this.localEdgeForeignKeys.put(uncommittedEdgeForeignKeysEntry.getKey(),uncommittedEdgeForeignKeysEntry.getValue());
      }
      for (      Map.Entry<SchemaTable,Pair<Set<SchemaTable>,Set<SchemaTable>>> schemaTableEntry : this.uncommittedTableLabels.entrySet()) {
        Pair<Set<SchemaTable>,Set<SchemaTable>> tableLabels=schemaTableEntry.getValue();
        if (tableLabels == null) {
          tableLabels=Pair.of(new HashSet<>(),new HashSet<>());
        }
        tableLabels.getLeft().addAll(schemaTableEntry.getValue().getLeft());
        tableLabels.getRight().addAll(schemaTableEntry.getValue().getRight());
        if (distributed) {
          this.tableLabels.put(schemaTableEntry.getKey(),tableLabels);
        }
        this.localTableLabels.put(schemaTableEntry.getKey(),tableLabels);
      }
      this.uncommittedSchemas.clear();
      this.uncommittedTables.clear();
      this.uncommittedLabelSchemas.clear();
      this.uncommittedEdgeForeignKeys.clear();
      this.uncommittedTableLabels.clear();
      this.schemaLock.unlock();
    }
  }
);
  this.sqlgGraph.tx().afterRollback(() -> {
    this.localTemporaryTables.clear();
    if (this.isLockedByCurrentThread()) {
      if (this.getSqlDialect().supportsTransactionalSchema()) {
        this.uncommittedSchemas.clear();
        this.uncommittedTables.clear();
        this.uncommittedLabelSchemas.clear();
        this.uncommittedEdgeForeignKeys.clear();
        this.uncommittedTableLabels.clear();
      }
 else {
        for (        String table : this.uncommittedSchemas) {
          if (distributed) {
            this.schemas.put(table,table);
          }
          this.localSchemas.put(table,table);
        }
        for (        Map.Entry<String,Map<String,PropertyType>> tableEntry : this.uncommittedTables.entrySet()) {
          if (distributed) {
            this.tables.put(tableEntry.getKey(),tableEntry.getValue());
          }
          this.localTables.put(tableEntry.getKey(),tableEntry.getValue());
        }
        for (        Map.Entry<String,Set<String>> tableEntry : this.uncommittedLabelSchemas.entrySet()) {
          Set<String> schemas=tableEntry.getValue();
          if (schemas == null) {
            if (distributed) {
              this.labelSchemas.put(tableEntry.getKey(),tableEntry.getValue());
            }
            this.localLabelSchemas.put(tableEntry.getKey(),tableEntry.getValue());
          }
 else {
            schemas.addAll(tableEntry.getValue());
            if (distributed) {
              this.labelSchemas.put(tableEntry.getKey(),schemas);
            }
            this.localLabelSchemas.put(tableEntry.getKey(),schemas);
          }
        }
        for (        Map.Entry<String,Set<String>> tableEntry : this.uncommittedEdgeForeignKeys.entrySet()) {
          if (distributed) {
            this.edgeForeignKeys.put(tableEntry.getKey(),tableEntry.getValue());
          }
          this.localEdgeForeignKeys.put(tableEntry.getKey(),tableEntry.getValue());
        }
        for (        Map.Entry<SchemaTable,Pair<Set<SchemaTable>,Set<SchemaTable>>> schemaTableEntry : this.uncommittedTableLabels.entrySet()) {
          Pair<Set<SchemaTable>,Set<SchemaTable>> tableLabels=schemaTableEntry.getValue();
          if (tableLabels == null) {
            tableLabels=Pair.of(new HashSet<>(),new HashSet<>());
          }
          tableLabels.getLeft().addAll(schemaTableEntry.getValue().getLeft());
          tableLabels.getRight().addAll(schemaTableEntry.getValue().getRight());
          if (distributed) {
            this.tableLabels.put(schemaTableEntry.getKey(),tableLabels);
          }
          this.localTableLabels.put(schemaTableEntry.getKey(),tableLabels);
        }
        this.uncommittedSchemas.clear();
        this.uncommittedTables.clear();
        this.uncommittedLabelSchemas.clear();
        this.uncommittedEdgeForeignKeys.clear();
        this.uncommittedTableLabels.clear();
      }
      this.schemaLock.unlock();
    }
  }
);
}","SchemaManager(SqlgGraph sqlgGraph,SqlDialect sqlDialect,Configuration configuration){
  this.sqlgGraph=sqlgGraph;
  this.sqlDialect=sqlDialect;
  this.distributed=configuration.getBoolean(""String_Node_Str"",false);
  if (this.distributed) {
    this.hazelcastInstance=Hazelcast.newHazelcastInstance(configHazelcast(configuration));
    this.schemas=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
    this.labelSchemas=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + LABEL_SCHEMAS_HAZELCAST_MAP);
    this.tables=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLES_HAZELCAST_MAP);
    this.edgeForeignKeys=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + EDGE_FOREIGN_KEYS_HAZELCAST_MAP);
    this.tableLabels=this.hazelcastInstance.getMap(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLE_LABELS_HAZELCAST_MAP);
    ((IMap)this.schemas).addEntryListener(new SchemasMapEntryListener(),true);
    ((IMap)this.labelSchemas).addEntryListener(new LabelSchemasMapEntryListener(),true);
    ((IMap)this.tables).addEntryListener(new TablesMapEntryListener(),true);
    ((IMap)this.edgeForeignKeys).addEntryListener(new EdgeForeignKeysMapEntryListener(),true);
    ((IMap)this.tableLabels).addEntryListener(new TableLabelMapEntryListener(),true);
    this.schemaLock=this.hazelcastInstance.getLock(""String_Node_Str"");
  }
 else {
    this.schemaLock=new ReentrantLock();
  }
  this.sqlgGraph.tx().afterCommit(() -> {
    this.localTemporaryTables.clear();
    if (this.isLockedByCurrentThread()) {
      for (      String schema : this.uncommittedSchemas) {
        if (distributed) {
          this.schemas.put(schema,schema);
        }
        this.localSchemas.put(schema,schema);
      }
      for (      Map.Entry<String,Map<String,PropertyType>> uncommittedTablesEntry : this.uncommittedTables.entrySet()) {
        if (distributed) {
          this.tables.put(uncommittedTablesEntry.getKey(),uncommittedTablesEntry.getValue());
        }
        this.localTables.put(uncommittedTablesEntry.getKey(),uncommittedTablesEntry.getValue());
      }
      for (      Map.Entry<String,Set<String>> uncommittedLabelSchemasEntry : this.uncommittedLabelSchemas.entrySet()) {
        Set<String> schemas=this.localLabelSchemas.get(uncommittedLabelSchemasEntry.getKey());
        if (schemas == null) {
          if (distributed) {
            this.labelSchemas.put(uncommittedLabelSchemasEntry.getKey(),uncommittedLabelSchemasEntry.getValue());
          }
          this.localLabelSchemas.put(uncommittedLabelSchemasEntry.getKey(),uncommittedLabelSchemasEntry.getValue());
        }
 else {
          schemas.addAll(this.uncommittedLabelSchemas.get(uncommittedLabelSchemasEntry.getKey()));
          if (distributed) {
            this.labelSchemas.put(uncommittedLabelSchemasEntry.getKey(),schemas);
          }
          this.localLabelSchemas.put(uncommittedLabelSchemasEntry.getKey(),schemas);
        }
      }
      for (      Map.Entry<String,Set<String>> uncommittedEdgeForeignKeysEntry : this.uncommittedEdgeForeignKeys.entrySet()) {
        if (distributed) {
          this.edgeForeignKeys.put(uncommittedEdgeForeignKeysEntry.getKey(),uncommittedEdgeForeignKeysEntry.getValue());
        }
        this.localEdgeForeignKeys.put(uncommittedEdgeForeignKeysEntry.getKey(),uncommittedEdgeForeignKeysEntry.getValue());
      }
      for (      Map.Entry<SchemaTable,Pair<Set<SchemaTable>,Set<SchemaTable>>> schemaTableEntry : this.uncommittedTableLabels.entrySet()) {
        Pair<Set<SchemaTable>,Set<SchemaTable>> tableLabels=this.localTableLabels.get(schemaTableEntry.getKey());
        if (tableLabels == null) {
          tableLabels=Pair.of(new HashSet<>(),new HashSet<>());
        }
        tableLabels.getLeft().addAll(schemaTableEntry.getValue().getLeft());
        tableLabels.getRight().addAll(schemaTableEntry.getValue().getRight());
        if (distributed) {
          this.tableLabels.put(schemaTableEntry.getKey(),tableLabels);
        }
        this.localTableLabels.put(schemaTableEntry.getKey(),tableLabels);
      }
      this.uncommittedSchemas.clear();
      this.uncommittedTables.clear();
      this.uncommittedLabelSchemas.clear();
      this.uncommittedEdgeForeignKeys.clear();
      this.uncommittedTableLabels.clear();
      this.schemaLock.unlock();
    }
  }
);
  this.sqlgGraph.tx().afterRollback(() -> {
    this.localTemporaryTables.clear();
    if (this.isLockedByCurrentThread()) {
      if (this.getSqlDialect().supportsTransactionalSchema()) {
        this.uncommittedSchemas.clear();
        this.uncommittedTables.clear();
        this.uncommittedLabelSchemas.clear();
        this.uncommittedEdgeForeignKeys.clear();
        this.uncommittedTableLabels.clear();
      }
 else {
        for (        String table : this.uncommittedSchemas) {
          if (distributed) {
            this.schemas.put(table,table);
          }
          this.localSchemas.put(table,table);
        }
        for (        Map.Entry<String,Map<String,PropertyType>> tableEntry : this.uncommittedTables.entrySet()) {
          if (distributed) {
            this.tables.put(tableEntry.getKey(),tableEntry.getValue());
          }
          this.localTables.put(tableEntry.getKey(),tableEntry.getValue());
        }
        for (        Map.Entry<String,Set<String>> tableEntry : this.uncommittedLabelSchemas.entrySet()) {
          Set<String> schemas=this.localLabelSchemas.get(tableEntry.getKey());
          if (schemas == null) {
            if (distributed) {
              this.labelSchemas.put(tableEntry.getKey(),tableEntry.getValue());
            }
            this.localLabelSchemas.put(tableEntry.getKey(),tableEntry.getValue());
          }
 else {
            schemas.addAll(tableEntry.getValue());
            if (distributed) {
              this.labelSchemas.put(tableEntry.getKey(),schemas);
            }
            this.localLabelSchemas.put(tableEntry.getKey(),schemas);
          }
        }
        for (        Map.Entry<String,Set<String>> tableEntry : this.uncommittedEdgeForeignKeys.entrySet()) {
          if (distributed) {
            this.edgeForeignKeys.put(tableEntry.getKey(),tableEntry.getValue());
          }
          this.localEdgeForeignKeys.put(tableEntry.getKey(),tableEntry.getValue());
        }
        for (        Map.Entry<SchemaTable,Pair<Set<SchemaTable>,Set<SchemaTable>>> schemaTableEntry : this.uncommittedTableLabels.entrySet()) {
          Pair<Set<SchemaTable>,Set<SchemaTable>> tableLabels=this.localTableLabels.get(schemaTableEntry.getKey());
          if (tableLabels == null) {
            tableLabels=Pair.of(new HashSet<>(),new HashSet<>());
          }
          tableLabels.getLeft().addAll(schemaTableEntry.getValue().getLeft());
          tableLabels.getRight().addAll(schemaTableEntry.getValue().getRight());
          if (distributed) {
            this.tableLabels.put(schemaTableEntry.getKey(),tableLabels);
          }
          this.localTableLabels.put(schemaTableEntry.getKey(),tableLabels);
        }
        this.uncommittedSchemas.clear();
        this.uncommittedTables.clear();
        this.uncommittedLabelSchemas.clear();
        this.uncommittedEdgeForeignKeys.clear();
        this.uncommittedTableLabels.clear();
      }
      this.schemaLock.unlock();
    }
  }
);
}",0.9726688102893892
167060,"static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=GraphTraversalSource.build().with(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create()).create(sqlgGraph);
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String vertexTable;
    if (in) {
      vertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      vertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(schemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",vertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}","static void addLabelToEdge(SqlgGraph sqlgGraph,String schema,String prefixedTable,boolean in,SchemaTable foreignKey){
  BatchManager.BatchModeType batchModeType=flushAndSetTxToNone(sqlgGraph);
  try {
    GraphTraversalSource traversalSource=GraphTraversalSource.build().with(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create()).create(sqlgGraph);
    List<Vertex> schemas=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_SCHEMA).has(""String_Node_Str"",schema).toList();
    Preconditions.checkState(!schemas.isEmpty(),""String_Node_Str"" + schema + ""String_Node_Str"");
    Preconditions.checkState(schemas.size() == 1,""String_Node_Str"" + schema + ""String_Node_Str"");
    Vertex schemaVertex=schemas.get(0);
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    List<Vertex> edgeVertices=traversalSource.V().hasLabel(SchemaManager.SQLG_SCHEMA + ""String_Node_Str"" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL).has(""String_Node_Str"",prefixedTable.substring(SchemaManager.EDGE_PREFIX.length())).as(""String_Node_Str"").in(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE).in(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",schema).<Vertex>select(""String_Node_Str"").dedup().toList();
    Preconditions.checkState(!edgeVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(edgeVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Vertex edgeVertex=edgeVertices.get(0);
    String vertexTable;
    if (in) {
      vertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length());
    }
 else {
      vertexTable=foreignKey.getTable().substring(0,foreignKey.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length());
    }
    List<Vertex> foreignKeyVertices=traversalSource.V(schemaVertex).out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE).has(""String_Node_Str"",vertexTable).toList();
    Preconditions.checkState(!foreignKeyVertices.isEmpty(),""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(foreignKeyVertices.size() == 1,""String_Node_Str"" + foreignKey.toString() + ""String_Node_Str"");
    Preconditions.checkState(prefixedTable.startsWith(SchemaManager.EDGE_PREFIX));
    Vertex foreignKeyVertex=foreignKeyVertices.get(0);
    if (in) {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE,edgeVertex);
    }
 else {
      foreignKeyVertex.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE,edgeVertex);
    }
  }
  finally {
    sqlgGraph.tx().batchMode(batchModeType);
  }
}",0.9643605870020964
167061,"protected void combineSteps(Traversal.Admin<?,?> traversal,List<Step> steps,ListIterator<Step> stepIterator){
  SqlgStep sqlgStep=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean alreadyReplacedGraphStep=false;
  boolean repeatStepAdded=false;
  int repeatStepsAdded=0;
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      if (unoptimizableRepeat(steps,stepIterator.previousIndex())) {
        this.logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
        return;
      }
      repeatStepsAdded=0;
      repeatStepAdded=false;
      RepeatStep repeatStep=(RepeatStep)step;
      List<Traversal.Admin<?,?>> repeatTraversals=repeatStep.getGlobalChildren();
      Traversal.Admin admin=repeatTraversals.get(0);
      List<Step> repeatStepInternalVertexSteps=admin.getSteps();
      LoopTraversal loopTraversal;
      long numberOfLoops;
      loopTraversal=(LoopTraversal)repeatStep.getUntilTraversal();
      numberOfLoops=loopTraversal.getMaxLoops();
      for (int i=0; i < numberOfLoops; i++) {
        for (        Step internalVertexStep : repeatStepInternalVertexSteps) {
          if (internalVertexStep instanceof RepeatStep.RepeatEndStep) {
            break;
          }
          internalVertexStep.setPreviousStep(repeatStep.getPreviousStep());
          stepIterator.add(internalVertexStep);
          stepIterator.previous();
          stepIterator.next();
          repeatStepAdded=true;
          repeatStepsAdded++;
        }
      }
      traversal.removeStep(repeatStep);
      for (int i=0; i < repeatStepsAdded; i++) {
        stepIterator.previous();
      }
    }
 else {
      if (isReplaceableStep(step.getClass(),alreadyReplacedGraphStep)) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        if (repeatStepsAdded > 0) {
          repeatStepsAdded--;
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
        }
        pathCount++;
        ReplacedStep replacedStep=ReplacedStep.from(this.sqlgGraph.getSchemaManager(),(AbstractStep)step,pathCount);
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
            pathCount--;
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          previousReplacedStep.setEmitFirst(emitFirst);
          previousReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.getLabels().remove((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          if (emitFirst) {
            pathCount++;
          }
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(steps,stepIterator.nextIndex());
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous == null) {
          sqlgStep=constructSqlgStep(traversal,step);
          alreadyReplacedGraphStep=alreadyReplacedGraphStep || step instanceof GraphStep;
          sqlgStep.addReplacedStep(replacedStep);
          handleFirstReplacedStep(step,sqlgStep,traversal);
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
 else {
          sqlgStep.addReplacedStep(replacedStep);
          if (!repeatStepAdded) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
      }
 else {
        if (lastReplacedStep != null && steps.stream().anyMatch(s -> s instanceof OrderGlobalStep)) {
          doLastEntry(step,stepIterator,traversal,lastReplacedStep,sqlgStep);
        }
        break;
      }
    }
  }
}","protected void combineSteps(Traversal.Admin<?,?> traversal,List<Step> steps,ListIterator<Step> stepIterator){
  SqlgStep sqlgStep=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean alreadyReplacedGraphStep=false;
  boolean repeatStepAdded=false;
  int repeatStepsAdded=0;
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      if (unoptimizableRepeat(steps,stepIterator.previousIndex())) {
        this.logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
        return;
      }
      repeatStepsAdded=0;
      repeatStepAdded=false;
      RepeatStep repeatStep=(RepeatStep)step;
      List<Traversal.Admin<?,?>> repeatTraversals=repeatStep.getGlobalChildren();
      Traversal.Admin admin=repeatTraversals.get(0);
      List<Step> repeatStepInternalVertexSteps=admin.getSteps();
      LoopTraversal loopTraversal;
      long numberOfLoops;
      loopTraversal=(LoopTraversal)repeatStep.getUntilTraversal();
      numberOfLoops=loopTraversal.getMaxLoops();
      for (int i=0; i < numberOfLoops; i++) {
        for (        Step internalVertexStep : repeatStepInternalVertexSteps) {
          if (internalVertexStep instanceof RepeatStep.RepeatEndStep) {
            break;
          }
          internalVertexStep.setPreviousStep(repeatStep.getPreviousStep());
          stepIterator.add(internalVertexStep);
          stepIterator.previous();
          stepIterator.next();
          repeatStepAdded=true;
          repeatStepsAdded++;
        }
      }
      traversal.removeStep(repeatStep);
      for (int i=0; i < repeatStepsAdded; i++) {
        stepIterator.previous();
      }
    }
 else {
      if (isReplaceableStep(step.getClass(),alreadyReplacedGraphStep)) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        if (repeatStepsAdded > 0) {
          repeatStepsAdded--;
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
        }
 else {
          repeatStepAdded=false;
        }
        pathCount++;
        ReplacedStep replacedStep=ReplacedStep.from(this.sqlgGraph.getSchemaManager(),(AbstractStep)step,pathCount);
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgStep.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
            pathCount--;
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          previousReplacedStep.setEmitFirst(emitFirst);
          previousReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.getLabels().remove((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          if (emitFirst) {
            pathCount++;
          }
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(steps,stepIterator.nextIndex());
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous == null) {
          sqlgStep=constructSqlgStep(traversal,step);
          alreadyReplacedGraphStep=alreadyReplacedGraphStep || step instanceof GraphStep;
          sqlgStep.addReplacedStep(replacedStep);
          handleFirstReplacedStep(step,sqlgStep,traversal);
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
 else {
          sqlgStep.addReplacedStep(replacedStep);
          if (!repeatStepAdded) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
      }
 else {
        if (lastReplacedStep != null && steps.stream().anyMatch(s -> s instanceof OrderGlobalStep)) {
          doLastEntry(step,stepIterator,traversal,lastReplacedStep,sqlgStep);
        }
        break;
      }
    }
  }
}",0.994332703633737
167062,"@Test public void testRepeatBoth(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  b1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  List<Vertex> vertices=this.sqlgGraph.traversal().V(b1).repeat(__.both()).times(3).toList();
  Assert.assertEquals(4,vertices.size());
}","@Test public void testRepeatBoth(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex b1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex c1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b1);
  b1.addEdge(""String_Node_Str"",c1);
  this.sqlgGraph.tx().commit();
  List<Vertex> vertices=this.sqlgGraph.traversal().V(b1).repeat(both()).times(3).toList();
  Assert.assertEquals(4,vertices.size());
}",0.9974070872947276
167063,"@Override public void loadResultSet(ResultSet resultSet) throws SQLException {
  ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
  for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
    String columnName=resultSetMetaData.getColumnLabel(i);
    Object o=resultSet.getObject(columnName);
    if (!columnName.equals(""String_Node_Str"") && !columnName.equals(SchemaManager.VERTEX_SCHEMA) && !columnName.equals(SchemaManager.VERTEX_TABLE)&& !Objects.isNull(o)) {
      loadProperty(resultSetMetaData,resultSet,i,columnName,o);
    }
  }
}","@Override public void loadResultSet(ResultSet resultSet) throws SQLException {
  ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
  for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
    String columnName=resultSetMetaData.getColumnLabel(i);
    Object o=resultSet.getObject(columnName);
    if (!columnName.equals(""String_Node_Str"") && !columnName.equals(SchemaManager.VERTEX_SCHEMA) && !columnName.equals(SchemaManager.VERTEX_TABLE)&& !this.sqlgGraph.getSqlDialect().columnsToIgnore().contains(columnName)&& !Objects.isNull(o)) {
      loadProperty(resultSetMetaData,resultSet,i,columnName,o);
    }
  }
}",0.9385004212299916
167064,"private static BatchManager.BatchModeType flushAndSetTxToNone(SqlgGraph sqlgGraph){
  BatchManager.BatchModeType batchModeType=null;
  if (sqlgGraph.tx().isInBatchMode()) {
    batchModeType=sqlgGraph.tx().getBatchModeType();
    sqlgGraph.tx().flush();
    sqlgGraph.tx().batchMode(BatchManager.BatchModeType.NONE);
  }
  return batchModeType;
}","private static BatchManager.BatchModeType flushAndSetTxToNone(SqlgGraph sqlgGraph){
  BatchManager.BatchModeType batchModeType=sqlgGraph.tx().getBatchModeType();
  if (sqlgGraph.tx().isInBatchMode()) {
    batchModeType=sqlgGraph.tx().getBatchModeType();
    sqlgGraph.tx().flush();
    sqlgGraph.tx().batchMode(BatchManager.BatchModeType.NONE);
  }
  return batchModeType;
}",0.9486823855755896
167065,"@Override public String constructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,SqlgVertex vertex,Map<String,Object> keyValueMap){
  StringBuffer sql=new StringBuffer();
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(vertex.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + vertex.getTable()));
  sql.append(""String_Node_Str"");
  if (keyValueMap.isEmpty()) {
    sqlgGraph.getSchemaManager().ensureColumnExist(vertex.getSchema(),SchemaManager.VERTEX_PREFIX + vertex.getTable(),ImmutablePair.of(""String_Node_Str"",PropertyType.from(0)));
    sql.append(maybeWrapInQoutes(""String_Node_Str""));
  }
 else {
    int count=1;
    for (    String key : keyValueMap.keySet()) {
      if (count > 1 && count <= keyValueMap.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      sql.append(maybeWrapInQoutes(key));
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_SEPARATOR);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}","@Override public String constructCompleteCopyCommandSqlVertex(SqlgGraph sqlgGraph,SqlgVertex vertex,Map<String,Object> keyValueMap){
  StringBuffer sql=new StringBuffer();
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(vertex.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + vertex.getTable()));
  sql.append(""String_Node_Str"");
  if (keyValueMap.isEmpty()) {
    sqlgGraph.getSchemaManager().ensureColumnExist(vertex.getSchema(),SchemaManager.VERTEX_PREFIX + vertex.getTable(),ImmutablePair.of(COPY_DUMMY,PropertyType.from(0)));
    sql.append(maybeWrapInQoutes(COPY_DUMMY));
  }
 else {
    int count=1;
    for (    String key : keyValueMap.keySet()) {
      if (count > 1 && count <= keyValueMap.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      sql.append(maybeWrapInQoutes(key));
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_SEPARATOR);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}",0.9763572679509632
167066,"@Override public String constructManualCopyCommandSqlVertex(SqlgGraph sqlgGraph,SchemaTable schemaTable,Map<String,Object> keyValueMap){
  StringBuffer sql=new StringBuffer();
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
  sql.append(""String_Node_Str"");
  if (keyValueMap.isEmpty()) {
    sqlgGraph.getSchemaManager().ensureColumnExist(schemaTable.getSchema(),SchemaManager.VERTEX_PREFIX + schemaTable.getTable(),ImmutablePair.of(""String_Node_Str"",PropertyType.from(0)));
    sql.append(maybeWrapInQoutes(""String_Node_Str""));
  }
 else {
    int count=1;
    for (    String key : keyValueMap.keySet()) {
      if (count > 1 && count <= keyValueMap.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      sql.append(maybeWrapInQoutes(key));
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_SEPARATOR);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}","@Override public String constructManualCopyCommandSqlVertex(SqlgGraph sqlgGraph,SchemaTable schemaTable,Map<String,Object> keyValueMap){
  StringBuffer sql=new StringBuffer();
  sql.append(""String_Node_Str"");
  sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
  sql.append(""String_Node_Str"");
  if (keyValueMap.isEmpty()) {
    sqlgGraph.getSchemaManager().ensureColumnExist(schemaTable.getSchema(),SchemaManager.VERTEX_PREFIX + schemaTable.getTable(),ImmutablePair.of(COPY_DUMMY,PropertyType.from(0)));
    sql.append(maybeWrapInQoutes(COPY_DUMMY));
  }
 else {
    int count=1;
    for (    String key : keyValueMap.keySet()) {
      if (count > 1 && count <= keyValueMap.size()) {
        sql.append(""String_Node_Str"");
      }
      count++;
      sql.append(maybeWrapInQoutes(key));
    }
  }
  sql.append(""String_Node_Str"");
  sql.append(""String_Node_Str"");
  sql.append(COPY_COMMAND_SEPARATOR);
  sql.append(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  return sql.toString();
}",0.9748837209302326
167067,"/** 
 * flushes the cache via the copy command. first writes the
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Map<SchemaTable,Pair<Long,Long>> verticesRanges=new LinkedHashMap<>();
  C3P0ProxyConnection con=(C3P0ProxyConnection)sqlgGraph.tx().getConnection();
  try {
    Method m=BaseConnection.class.getMethod(""String_Node_Str"",new Class[]{});
    Object[] arg=new Object[]{};
    CopyManager copyManager=(CopyManager)con.rawConnectionOperation(m,C3P0ProxyConnection.RAW_CONNECTION,arg);
    for (    SchemaTable schemaTable : vertexCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
      long endHigh;
      long numberInserted;
      try (InputStream is=mapToLabeledVertex_InputStream(vertices)){
        StringBuffer sql=new StringBuffer();
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(schemaTable.getSchema()));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
        sql.append(""String_Node_Str"");
        if (vertices.getLeft().isEmpty()) {
          sqlgGraph.getSchemaManager().ensureColumnExist(schemaTable.getSchema(),SchemaManager.VERTEX_PREFIX + schemaTable.getTable(),ImmutablePair.of(""String_Node_Str"",PropertyType.from(0)));
          sql.append(maybeWrapInQoutes(""String_Node_Str""));
        }
 else {
          int count=1;
          for (          String key : vertices.getLeft()) {
            if (count > 1 && count <= vertices.getLeft().size()) {
              sql.append(""String_Node_Str"");
            }
            count++;
            sql.append(maybeWrapInQoutes(key));
          }
        }
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_SEPARATOR);
        sql.append(""String_Node_Str"");
        if (logger.isDebugEnabled()) {
          logger.debug(sql.toString());
        }
        numberInserted=copyManager.copyIn(sql.toString(),is);
        try (PreparedStatement preparedStatement=con.prepareStatement(""String_Node_Str"" + schemaTable.getSchema() + ""String_Node_Str""+ SchemaManager.VERTEX_PREFIX+ schemaTable.getTable()+ ""String_Node_Str"")){
          ResultSet resultSet=preparedStatement.executeQuery();
          resultSet.next();
          endHigh=resultSet.getLong(1);
          resultSet.close();
        }
         long id=endHigh - numberInserted + 1;
        for (        SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
          sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id++));
        }
      }
       verticesRanges.put(schemaTable,Pair.of(endHigh - numberInserted + 1,endHigh));
    }
    return verticesRanges;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","/** 
 * flushes the cache via the copy command. first writes the
 * @param vertexCache A rather complex object.The map's key is the vertex being cached. The Triple holds, 1) The in labels 2) The out labels 3) The properties as a map of key values
 */
@Override public Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  Map<SchemaTable,Pair<Long,Long>> verticesRanges=new LinkedHashMap<>();
  C3P0ProxyConnection con=(C3P0ProxyConnection)sqlgGraph.tx().getConnection();
  try {
    Method m=BaseConnection.class.getMethod(""String_Node_Str"",new Class[]{});
    Object[] arg=new Object[]{};
    CopyManager copyManager=(CopyManager)con.rawConnectionOperation(m,C3P0ProxyConnection.RAW_CONNECTION,arg);
    for (    SchemaTable schemaTable : vertexCache.keySet()) {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertices=vertexCache.get(schemaTable);
      long endHigh;
      long numberInserted;
      try (InputStream is=mapToLabeledVertex_InputStream(vertices)){
        StringBuffer sql=new StringBuffer();
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(schemaTable.getSchema()));
        sql.append(""String_Node_Str"");
        sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
        sql.append(""String_Node_Str"");
        if (vertices.getLeft().isEmpty()) {
          sqlgGraph.getSchemaManager().ensureColumnExist(schemaTable.getSchema(),SchemaManager.VERTEX_PREFIX + schemaTable.getTable(),ImmutablePair.of(COPY_DUMMY,PropertyType.from(0)));
          sql.append(maybeWrapInQoutes(COPY_DUMMY));
        }
 else {
          int count=1;
          for (          String key : vertices.getLeft()) {
            if (count > 1 && count <= vertices.getLeft().size()) {
              sql.append(""String_Node_Str"");
            }
            count++;
            sql.append(maybeWrapInQoutes(key));
          }
        }
        sql.append(""String_Node_Str"");
        sql.append(""String_Node_Str"");
        sql.append(COPY_COMMAND_SEPARATOR);
        sql.append(""String_Node_Str"");
        if (logger.isDebugEnabled()) {
          logger.debug(sql.toString());
        }
        numberInserted=copyManager.copyIn(sql.toString(),is);
        try (PreparedStatement preparedStatement=con.prepareStatement(""String_Node_Str"" + schemaTable.getSchema() + ""String_Node_Str""+ SchemaManager.VERTEX_PREFIX+ schemaTable.getTable()+ ""String_Node_Str"")){
          ResultSet resultSet=preparedStatement.executeQuery();
          resultSet.next();
          endHigh=resultSet.getLong(1);
          resultSet.close();
        }
         long id=endHigh - numberInserted + 1;
        for (        SqlgVertex sqlgVertex : vertices.getRight().keySet()) {
          sqlgVertex.setInternalPrimaryKey(RecordId.from(schemaTable,id++));
        }
      }
       verticesRanges.put(schemaTable,Pair.of(endHigh - numberInserted + 1,endHigh));
    }
    return verticesRanges;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.991984610452068
167068,"@Test public void testGetEdges(){
  this.sqlgGraph.tx().normalBatchModeOn();
  Vertex root=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex god=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge sqlgEdge=root.addEdge(""String_Node_Str"",god);
  Assert.assertEquals(sqlgEdge,vertexTraversal(root).outE(""String_Node_Str"").next());
  this.sqlgGraph.tx().commit();
}","@Test public void testGetEdges(){
  this.sqlgGraph.tx().normalBatchModeOn();
  Vertex root=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex god=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Edge sqlgEdge=root.addEdge(""String_Node_Str"",god);
  Assert.assertNull(sqlgEdge.id());
  Edge rootGodEdge=vertexTraversal(root).outE(""String_Node_Str"").next();
  Assert.assertNotNull(rootGodEdge);
  Assert.assertNotNull(rootGodEdge.id());
  this.sqlgGraph.tx().commit();
}",0.7742574257425743
167069,"@Override public void apply(final Traversal.Admin<?,?> traversal){
  final Step<?,?> startStep=traversal.getStartStep();
  if (!(startStep instanceof GraphStep)) {
    return;
  }
  final GraphStep<?> originalGraphStep=(GraphStep)startStep;
  final List<Step> steps=new ArrayList<>(traversal.asAdmin().getSteps());
  final ListIterator<Step> stepIterator=steps.listIterator();
  if (originalGraphStep.getIds().length > 0) {
    return;
  }
  if (this.canNotBeOptimized(steps,stepIterator.nextIndex())) {
    logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
    return;
  }
  if (unoptimizableRepeat(steps,stepIterator.nextIndex())) {
    logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
    return;
  }
  SqlgGraphStepCompiled sqlgGraphStepCompiled=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean repeatStepAdded=false;
  int repeatStepsAdded=0;
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      repeatStepsAdded=0;
      repeatStepAdded=false;
      RepeatStep repeatStep=(RepeatStep)step;
      List<Traversal.Admin<?,?>> repeatTraversals=repeatStep.getGlobalChildren();
      Traversal.Admin admin=repeatTraversals.get(0);
      List<Step> internalRepeatSteps=admin.getSteps();
      LoopTraversal loopTraversal=(LoopTraversal)repeatStep.getUntilTraversal();
      long numberOfLoops=loopTraversal.getMaxLoops();
      for (int i=0; i < numberOfLoops; i++) {
        for (        Step internalRepeatStep : internalRepeatSteps) {
          if (internalRepeatStep instanceof RepeatStep.RepeatEndStep) {
            break;
          }
          stepIterator.add(internalRepeatStep);
          stepIterator.previous();
          stepIterator.next();
          repeatStepAdded=true;
          repeatStepsAdded++;
        }
      }
      traversal.removeStep(repeatStep);
      for (int i=0; i < repeatStepsAdded; i++) {
        stepIterator.previous();
      }
    }
 else {
      if (CONSECUTIVE_STEPS_TO_REPLACE.contains(step.getClass())) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        if (repeatStepsAdded > 0) {
          repeatStepsAdded--;
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
        }
        pathCount++;
        ReplacedStep replacedStep=ReplacedStep.from(this.sqlgGraph.getSchemaManager(),(AbstractStep)step,pathCount);
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgGraphStepCompiled.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          previousReplacedStep.addLabel((pathCount - 1) + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.getLabels().remove((pathCount - 1) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(steps,stepIterator.nextIndex());
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous == null) {
          sqlgGraphStepCompiled=new SqlgGraphStepCompiled(this.sqlgGraph,traversal,originalGraphStep.getReturnClass(),originalGraphStep.getIds());
          sqlgGraphStepCompiled.addReplacedStep(replacedStep);
          TraversalHelper.replaceStep(step,sqlgGraphStepCompiled,traversal);
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
 else {
          sqlgGraphStepCompiled.addReplacedStep(replacedStep);
          if (!repeatStepAdded) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
      }
 else {
        if (lastReplacedStep != null) {
          sqlgGraphStepCompiled.parseForStrategy();
          if (!sqlgGraphStepCompiled.isForMultipleQueries()) {
            collectOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep);
          }
        }
        break;
      }
    }
  }
}","@Override public void apply(final Traversal.Admin<?,?> traversal){
  final Step<?,?> startStep=traversal.getStartStep();
  if (!(startStep instanceof GraphStep)) {
    return;
  }
  final GraphStep<?> originalGraphStep=(GraphStep)startStep;
  final List<Step> steps=new ArrayList<>(traversal.asAdmin().getSteps());
  final ListIterator<Step> stepIterator=steps.listIterator();
  if (originalGraphStep.getIds().length > 0) {
    return;
  }
  if (this.canNotBeOptimized(steps,stepIterator.nextIndex())) {
    logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
    return;
  }
  if (unoptimizableRepeat(steps,stepIterator.nextIndex())) {
    logger.debug(""String_Node_Str"" + traversal.toString() + ""String_Node_Str""+ ExceptionUtils.getStackTrace(new Throwable()));
    return;
  }
  SqlgGraphStepCompiled sqlgGraphStepCompiled=null;
  Step previous=null;
  ReplacedStep<?,?> lastReplacedStep=null;
  int pathCount=0;
  boolean repeatStepAdded=false;
  int repeatStepsAdded=0;
  while (stepIterator.hasNext()) {
    Step step=stepIterator.next();
    if (step instanceof RepeatStep) {
      repeatStepsAdded=0;
      repeatStepAdded=false;
      RepeatStep repeatStep=(RepeatStep)step;
      List<Traversal.Admin<?,?>> repeatTraversals=repeatStep.getGlobalChildren();
      Traversal.Admin admin=repeatTraversals.get(0);
      List<Step> internalRepeatSteps=admin.getSteps();
      LoopTraversal loopTraversal=(LoopTraversal)repeatStep.getUntilTraversal();
      long numberOfLoops=loopTraversal.getMaxLoops();
      for (int i=0; i < numberOfLoops; i++) {
        for (        Step internalRepeatStep : internalRepeatSteps) {
          if (internalRepeatStep instanceof RepeatStep.RepeatEndStep) {
            break;
          }
          stepIterator.add(internalRepeatStep);
          stepIterator.previous();
          stepIterator.next();
          repeatStepAdded=true;
          repeatStepsAdded++;
        }
      }
      traversal.removeStep(repeatStep);
      for (int i=0; i < repeatStepsAdded; i++) {
        stepIterator.previous();
      }
    }
 else {
      if (CONSECUTIVE_STEPS_TO_REPLACE.contains(step.getClass())) {
        boolean emit=false;
        boolean emitFirst=false;
        boolean untilFirst=false;
        if (repeatStepsAdded > 0) {
          repeatStepsAdded--;
          RepeatStep repeatStep=(RepeatStep)step.getTraversal().getParent();
          emit=repeatStep.getEmitTraversal() != null;
          emitFirst=repeatStep.emitFirst;
          untilFirst=repeatStep.untilFirst;
        }
        pathCount++;
        ReplacedStep replacedStep=ReplacedStep.from(this.sqlgGraph.getSchemaManager(),(AbstractStep)step,pathCount);
        if (emit) {
          List<ReplacedStep> previousReplacedSteps=sqlgGraphStepCompiled.getReplacedSteps();
          ReplacedStep previousReplacedStep;
          if (emitFirst) {
            previousReplacedStep=previousReplacedSteps.get(previousReplacedSteps.size() - 1);
            pathCount--;
          }
 else {
            previousReplacedStep=replacedStep;
          }
          previousReplacedStep.setEmit(true);
          previousReplacedStep.setUntilFirst(untilFirst);
          previousReplacedStep.addLabel((pathCount) + BaseSqlgStrategy.EMIT_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          previousReplacedStep.getLabels().remove((pathCount) + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
        }
        if (replacedStep.getLabels().isEmpty()) {
          boolean precedesPathStep=precedesPathOrTreeStep(steps,stepIterator.nextIndex());
          if (precedesPathStep) {
            replacedStep.addLabel(pathCount + BaseSqlgStrategy.PATH_LABEL_SUFFIX + BaseSqlgStrategy.SQLG_PATH_FAKE_LABEL);
          }
        }
        if (previous == null) {
          sqlgGraphStepCompiled=new SqlgGraphStepCompiled(this.sqlgGraph,traversal,originalGraphStep.getReturnClass(),originalGraphStep.getIds());
          sqlgGraphStepCompiled.addReplacedStep(replacedStep);
          TraversalHelper.replaceStep(step,sqlgGraphStepCompiled,traversal);
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
 else {
          sqlgGraphStepCompiled.addReplacedStep(replacedStep);
          if (!repeatStepAdded) {
            traversal.removeStep(step);
          }
          collectHasSteps(stepIterator,traversal,replacedStep,pathCount);
        }
        previous=step;
        lastReplacedStep=replacedStep;
      }
 else {
        if (lastReplacedStep != null) {
          sqlgGraphStepCompiled.parseForStrategy();
          if (!sqlgGraphStepCompiled.isForMultipleQueries()) {
            collectOrderGlobalSteps(step,stepIterator,traversal,lastReplacedStep);
          }
        }
        break;
      }
    }
  }
}",0.9965820818228897
167070,"void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> edgeCache);","void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache);",0.916083916083916
167071,"Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>>> vertexCache);","Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache);",0.9352941176470588
167072,"public boolean vertexIsCached(SqlgVertex vertex){
  Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>> map=this.vertexCache.get(SchemaTable.of(vertex.getSchema(),vertex.getTable()));
  return map != null && map.getRight().containsKey(vertex);
}","public boolean vertexIsCached(SqlgVertex vertex){
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> map=this.vertexCache.get(SchemaTable.of(vertex.getSchema(),vertex.getTable()));
  return map != null && map.getRight().containsKey(vertex);
}",0.9581749049429658
167073,"public void removeEdge(String schema,String table,SqlgEdge edge){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> sqlgEdgeTripleMap=this.edgeCache.get(schemaTable);
  if (sqlgEdgeTripleMap != null && sqlgEdgeTripleMap.containsKey(edge)) {
    sqlgEdgeTripleMap.remove(edge);
  }
 else {
    List<SqlgEdge> edges=this.removeEdgeCache.get(schemaTable);
    if (edges == null) {
      edges=new ArrayList<>();
      this.removeEdgeCache.put(schemaTable,edges);
    }
    edges.add(edge);
  }
}","public void removeEdge(String schema,String table,SqlgEdge edge){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> sqlgEdgeTripleMap=this.edgeCache.get(schemaTable);
  if (sqlgEdgeTripleMap != null && sqlgEdgeTripleMap.getRight().containsKey(edge)) {
    sqlgEdgeTripleMap.getRight().remove(edge);
  }
 else {
    List<SqlgEdge> edges=this.removeEdgeCache.get(schemaTable);
    if (edges == null) {
      edges=new ArrayList<>();
      this.removeEdgeCache.put(schemaTable,edges);
    }
    edges.add(edge);
  }
}",0.9607508532423208
167074,"public boolean updateProperty(SqlgElement sqlgElement,String key,Object value){
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Triple<String,String,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> schemaVertices=this.vertexPropertyCache.get(schemaTable);
      if (schemaVertices == null) {
        schemaVertices=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.vertexPropertyCache.put(schemaTable,schemaVertices);
      }
      SortedSet<String> keys=schemaVertices.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaVertices.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaVertices.getRight().put((SqlgVertex)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
 else {
    Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.get(sqlgElement);
      if (triple != null) {
        triple.getRight().put(key,value);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgEdge,Map<String,Object>>> schemaEdges=this.edgePropertyCache.get(schemaTable);
      if (schemaEdges == null) {
        schemaEdges=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.edgePropertyCache.put(schemaTable,schemaEdges);
      }
      SortedSet<String> keys=schemaEdges.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaEdges.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaEdges.getRight().put((SqlgEdge)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
  return false;
}","public boolean updateProperty(SqlgElement sqlgElement,String key,Object value){
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> schemaVertices=this.vertexPropertyCache.get(schemaTable);
      if (schemaVertices == null) {
        schemaVertices=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.vertexPropertyCache.put(schemaTable,schemaVertices);
      }
      SortedSet<String> keys=schemaVertices.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaVertices.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaVertices.getRight().put((SqlgVertex)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
 else {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().put(key,value);
        triples.getLeft().add(key);
        return true;
      }
    }
 else {
      Pair<SortedSet<String>,Map<SqlgEdge,Map<String,Object>>> schemaEdges=this.edgePropertyCache.get(schemaTable);
      if (schemaEdges == null) {
        schemaEdges=Pair.of(new TreeSet<>(),new LinkedHashMap<>());
        this.edgePropertyCache.put(schemaTable,schemaEdges);
      }
      SortedSet<String> keys=schemaEdges.getLeft();
      keys.add(key);
      Map<String,Object> properties=schemaEdges.getRight().get(sqlgElement);
      if (properties == null) {
        properties=new LinkedHashMap<>();
        schemaEdges.getRight().put((SqlgEdge)sqlgElement,properties);
      }
      properties.put(key,value);
      return true;
    }
  }
  return false;
}",0.972914875322442
167075,"public void removeVertex(String schema,String table,SqlgVertex vertex){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>> vertexSortedSetMapPair=this.vertexCache.get(schemaTable);
  if (vertexSortedSetMapPair != null && vertexSortedSetMapPair.getRight().containsKey(vertex)) {
    vertexSortedSetMapPair.getRight().remove(vertex);
    Map<SchemaTable,List<SqlgEdge>> outEdges=this.vertexOutEdgeCache.get(vertex);
    if (outEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : outEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.remove(sqlgEdge);
        }
        if (cachedEdge.isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexOutEdgeCache.remove(vertex);
    }
    Map<SchemaTable,List<SqlgEdge>> inEdges=this.vertexInEdgeCache.get(vertex);
    if (inEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : inEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.remove(sqlgEdge);
        }
        if (cachedEdge.isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexInEdgeCache.remove(vertex);
    }
  }
 else {
    List<SqlgVertex> vertices=this.removeVertexCache.get(schemaTable);
    if (vertices == null) {
      vertices=new ArrayList<>();
      this.removeVertexCache.put(schemaTable,vertices);
    }
    vertices.add(vertex);
  }
}","public void removeVertex(String schema,String table,SqlgVertex vertex){
  SchemaTable schemaTable=SchemaTable.of(schema,table);
  Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertexSortedSetMapPair=this.vertexCache.get(schemaTable);
  if (vertexSortedSetMapPair != null && vertexSortedSetMapPair.getRight().containsKey(vertex)) {
    vertexSortedSetMapPair.getRight().remove(vertex);
    Map<SchemaTable,List<SqlgEdge>> outEdges=this.vertexOutEdgeCache.get(vertex);
    if (outEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : outEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.getRight().remove(sqlgEdge);
        }
        if (cachedEdge.getRight().isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexOutEdgeCache.remove(vertex);
    }
    Map<SchemaTable,List<SqlgEdge>> inEdges=this.vertexInEdgeCache.get(vertex);
    if (inEdges != null) {
      for (      Map.Entry<SchemaTable,List<SqlgEdge>> entry : inEdges.entrySet()) {
        SchemaTable edgeSchemaTable=entry.getKey();
        List<SqlgEdge> edges=entry.getValue();
        Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> cachedEdge=this.edgeCache.get(edgeSchemaTable);
        if (cachedEdge == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        for (        SqlgEdge sqlgEdge : edges) {
          cachedEdge.getRight().remove(sqlgEdge);
        }
        if (cachedEdge.getRight().isEmpty()) {
          this.edgeCache.remove(edgeSchemaTable);
        }
      }
      this.vertexInEdgeCache.remove(vertex);
    }
  }
 else {
    List<SqlgVertex> vertices=this.removeVertexCache.get(schemaTable);
    if (vertices == null) {
      vertices=new ArrayList<>();
      this.removeVertexCache.put(schemaTable,vertices);
    }
    vertices.add(vertex);
  }
}",0.4061662198391421
167076,"public void addVertex(boolean complete,SqlgVertex vertex,Map<String,Object> keyValueMap){
  SchemaTable schemaTable=SchemaTable.of(vertex.getSchema(),vertex.getTable());
  if (!complete) {
    Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>> pairs=this.vertexCache.get(schemaTable);
    if (pairs == null) {
      pairs=Pair.of(new TreeSet<>(keyValueMap.keySet()),new LinkedHashMap<>());
      pairs.getRight().put(vertex,Triple.of(this.sqlDialect.getBatchNull(),this.sqlDialect.getBatchNull(),keyValueMap));
      this.vertexCache.put(schemaTable,pairs);
    }
 else {
      pairs.getLeft().addAll(keyValueMap.keySet());
      pairs.getRight().put(vertex,Triple.of(this.sqlDialect.getBatchNull(),this.sqlDialect.getBatchNull(),keyValueMap));
    }
  }
 else {
    if (this.streamingBatchModeVertexSchemaTable == null) {
      this.streamingBatchModeVertexSchemaTable=vertex.getSchemaTable();
    }
    if (this.streamingBatchModeVertexKeys == null) {
      this.streamingBatchModeVertexKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (isStreamingEdges()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      throw new IllegalStateException(""String_Node_Str"" + this.batchCount + ""String_Node_Str""+ this.batchSize);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == 0) {
      this.batchedElements=new ArrayList<>();
      this.sqlDialect.lockTable(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
      this.sequenceName=this.sqlDialect.sequenceName(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
    }
    if (isBatchModeBatchStreaming()) {
      vertex.setInternalPrimaryKey(RecordId.from(schemaTable,++this.batchIndex));
      this.batchedElements.add(vertex);
    }
    OutputStream out=this.streamingVertexCache.get(schemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlVertex(sqlgGraph,vertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingVertexCache.put(schemaTable,out);
    }
    try {
      this.sqlDialect.flushStreamingVertex(out,keyValueMap);
      if (isBatchModeBatchStreaming()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      this.flush();
      if (this.batchCallback != null) {
        this.batchCallback.callBack(this.batchedElements);
        this.batchedElements.clear();
      }
    }
  }
}","public void addVertex(boolean streaming,SqlgVertex vertex,Map<String,Object> keyValueMap){
  SchemaTable schemaTable=SchemaTable.of(vertex.getSchema(),vertex.getTable());
  if (!streaming) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> pairs=this.vertexCache.get(schemaTable);
    if (pairs == null) {
      pairs=Pair.of(new TreeSet<>(keyValueMap.keySet()),new LinkedHashMap<>());
      pairs.getRight().put(vertex,keyValueMap);
      this.vertexCache.put(schemaTable,pairs);
    }
 else {
      pairs.getLeft().addAll(keyValueMap.keySet());
      pairs.getRight().put(vertex,keyValueMap);
    }
  }
 else {
    if (this.streamingBatchModeVertexSchemaTable == null) {
      this.streamingBatchModeVertexSchemaTable=vertex.getSchemaTable();
    }
    if (this.streamingBatchModeVertexKeys == null) {
      this.streamingBatchModeVertexKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (isStreamingEdges()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      throw new IllegalStateException(""String_Node_Str"" + this.batchCount + ""String_Node_Str""+ this.batchSize);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == 0) {
      this.batchedElements=new ArrayList<>();
      this.sqlDialect.lockTable(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
      this.sequenceName=this.sqlDialect.sequenceName(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,schemaTable,SchemaManager.VERTEX_PREFIX);
    }
    if (isBatchModeBatchStreaming()) {
      vertex.setInternalPrimaryKey(RecordId.from(schemaTable,++this.batchIndex));
      this.batchedElements.add(vertex);
    }
    OutputStream out=this.streamingVertexCache.get(schemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlVertex(sqlgGraph,vertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingVertexCache.put(schemaTable,out);
    }
    try {
      this.sqlDialect.flushStreamingVertex(out,keyValueMap);
      if (isBatchModeBatchStreaming()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      this.flush();
      if (this.batchCallback != null) {
        this.batchCallback.callBack(this.batchedElements);
        this.batchedElements.clear();
      }
    }
  }
}",0.901707779886148
167077,"void addEdge(boolean complete,SqlgEdge sqlgEdge,SqlgVertex outVertex,SqlgVertex inVertex,Map<String,Object> keyValueMap){
  SchemaTable outSchemaTable=SchemaTable.of(outVertex.getSchema(),sqlgEdge.getTable());
  if (!complete) {
    Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> triples=this.edgeCache.get(outSchemaTable);
    if (triples == null) {
      triples=new LinkedHashMap<>();
      triples.put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
      this.edgeCache.put(outSchemaTable,triples);
    }
 else {
      triples.put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
    }
    Map<SchemaTable,List<SqlgEdge>> outEdgesMap=this.vertexOutEdgeCache.get(outVertex);
    if (outEdgesMap == null) {
      outEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexOutEdgeCache.put(outVertex,outEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=outEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
    Map<SchemaTable,List<SqlgEdge>> inEdgesMap=this.vertexInEdgeCache.get(outVertex);
    if (inEdgesMap == null) {
      inEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexInEdgeCache.put(inVertex,inEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=inEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
  }
 else {
    if (this.streamingBatchModeEdgeSchemaTable == null) {
      this.streamingBatchModeEdgeSchemaTable=sqlgEdge.getSchemaTablePrefixed();
    }
    if (this.streamingBatchModeEdgeKeys == null) {
      this.streamingBatchModeEdgeKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (isStreamingVertices()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      throw new IllegalStateException(""String_Node_Str"" + this.batchCount + ""String_Node_Str""+ this.batchSize);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == 0) {
      this.batchedElements=new ArrayList<>();
      this.sqlDialect.lockTable(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.sequenceName=this.sqlDialect.sequenceName(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
    }
    if (isBatchModeBatchStreaming() && this.batchCount > 0) {
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
      this.batchedElements.add(sqlgEdge);
    }
    OutputStream out=this.streamingEdgeCache.get(outSchemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlEdge(sqlgGraph,sqlgEdge,outVertex,inVertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingEdgeCache.put(outSchemaTable,out);
    }
    try {
      this.sqlDialect.flushCompleteEdge(out,sqlgEdge,outVertex,inVertex,keyValueMap);
      if (isBatchModeBatchStreaming()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      this.flush();
      if (this.batchCallback != null) {
        this.batchCallback.callBack(this.batchedElements);
        this.batchedElements.clear();
      }
    }
  }
}","void addEdge(boolean streaming,SqlgEdge sqlgEdge,SqlgVertex outVertex,SqlgVertex inVertex,Map<String,Object> keyValueMap){
  SchemaTable outSchemaTable=SchemaTable.of(outVertex.getSchema(),sqlgEdge.getTable());
  if (!streaming) {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(outSchemaTable);
    if (triples == null) {
      triples=Pair.of(new TreeSet<>(keyValueMap.keySet()),new LinkedHashMap<>());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
      this.edgeCache.put(outSchemaTable,triples);
    }
 else {
      triples.getLeft().addAll(keyValueMap.keySet());
      triples.getRight().put(sqlgEdge,Triple.of(outVertex,inVertex,keyValueMap));
    }
    Map<SchemaTable,List<SqlgEdge>> outEdgesMap=this.vertexOutEdgeCache.get(outVertex);
    if (outEdgesMap == null) {
      outEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexOutEdgeCache.put(outVertex,outEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=outEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        outEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
    Map<SchemaTable,List<SqlgEdge>> inEdgesMap=this.vertexInEdgeCache.get(outVertex);
    if (inEdgesMap == null) {
      inEdgesMap=new HashMap<>();
      List<SqlgEdge> edges=new ArrayList<>();
      edges.add(sqlgEdge);
      inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      this.vertexInEdgeCache.put(inVertex,inEdgesMap);
    }
 else {
      List<SqlgEdge> sqlgEdges=inEdgesMap.get(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()));
      if (sqlgEdges == null) {
        List<SqlgEdge> edges=new ArrayList<>();
        edges.add(sqlgEdge);
        inEdgesMap.put(SchemaTable.of(sqlgEdge.getSchema(),sqlgEdge.getTable()),edges);
      }
 else {
        sqlgEdges.add(sqlgEdge);
      }
    }
  }
 else {
    if (this.streamingBatchModeEdgeSchemaTable == null) {
      this.streamingBatchModeEdgeSchemaTable=sqlgEdge.getSchemaTablePrefixed();
    }
    if (this.streamingBatchModeEdgeKeys == null) {
      this.streamingBatchModeEdgeKeys=new ArrayList<>(keyValueMap.keySet());
    }
    if (isStreamingVertices()) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      throw new IllegalStateException(""String_Node_Str"" + this.batchCount + ""String_Node_Str""+ this.batchSize);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == 0) {
      this.batchedElements=new ArrayList<>();
      this.sqlDialect.lockTable(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.sequenceName=this.sqlDialect.sequenceName(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      this.batchIndex=this.sqlDialect.nextSequenceVal(sqlgGraph,outSchemaTable,SchemaManager.EDGE_PREFIX);
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
    }
    if (isBatchModeBatchStreaming() && this.batchCount > 0) {
      sqlgEdge.setInternalPrimaryKey(RecordId.from(outSchemaTable,++this.batchIndex));
      this.batchedElements.add(sqlgEdge);
    }
    OutputStream out=this.streamingEdgeCache.get(outSchemaTable);
    if (out == null) {
      String sql=this.sqlDialect.constructCompleteCopyCommandSqlEdge(sqlgGraph,sqlgEdge,outVertex,inVertex,keyValueMap);
      out=this.sqlDialect.streamSql(this.sqlgGraph,sql);
      this.streamingEdgeCache.put(outSchemaTable,out);
    }
    try {
      this.sqlDialect.flushCompleteEdge(out,sqlgEdge,outVertex,inVertex,keyValueMap);
      if (isBatchModeBatchStreaming()) {
        this.batchCount++;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    if (isBatchModeBatchStreaming() && this.batchCount == this.batchSize) {
      this.flush();
      if (this.batchCallback != null) {
        this.batchCallback.callBack(this.batchedElements);
        this.batchedElements.clear();
      }
    }
  }
}",0.9623674705813818
167078,"public boolean removeProperty(SqlgProperty sqlgProperty,String key){
  SqlgElement sqlgElement=(SqlgElement)sqlgProperty.element();
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Triple<String,String,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().remove(key);
        return true;
      }
    }
  }
 else {
    Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.get(sqlgElement);
      if (triple != null) {
        triple.getRight().remove(key);
        return true;
      }
    }
  }
  return false;
}","public boolean removeProperty(SqlgProperty sqlgProperty,String key){
  SqlgElement sqlgElement=(SqlgElement)sqlgProperty.element();
  SchemaTable schemaTable=SchemaTable.of(sqlgElement.getSchema(),sqlgElement.getTable());
  if (Vertex.class.isAssignableFrom(sqlgElement.getClass())) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> triples=this.vertexCache.get(schemaTable);
    if (triples != null) {
      Map<String,Object> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.remove(key);
        return true;
      }
    }
  }
 else {
    Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> triples=this.edgeCache.get(schemaTable);
    if (triples != null) {
      Triple<SqlgVertex,SqlgVertex,Map<String,Object>> triple=triples.getRight().get(sqlgElement);
      if (triple != null) {
        triple.getRight().remove(key);
        return true;
      }
    }
  }
  return false;
}",0.9541284403669724
167079,"@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>> edgeCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void flushEdgeCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgEdge,Triple<SqlgVertex,SqlgVertex,Map<String,Object>>>>> edgeCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9464285714285714
167080,"@Override public List<String> getSpacialRefTable(){
  return Collections.EMPTY_LIST;
}","@Override public List<String> getSpacialRefTable(){
  return Collections.emptyList();
}",0.8901734104046243
167081,"@Override public Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Triple<String,String,Map<String,Object>>>>> vertexCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public Map<SchemaTable,Pair<Long,Long>> flushVertexCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> vertexCache){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.9561752988047808
167082,"@Override public List<String> getGisSchemas(){
  return Collections.EMPTY_LIST;
}","@Override public List<String> getGisSchemas(){
  return Collections.emptyList();
}",0.8834355828220859
167083,"@Override public String[] propertyTypeToSqlDefinition(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return new String[]{""String_Node_Str""};
case SHORT:
  return new String[]{""String_Node_Str""};
case INTEGER:
return new String[]{""String_Node_Str""};
case LONG:
return new String[]{""String_Node_Str""};
case FLOAT:
return new String[]{""String_Node_Str""};
case DOUBLE:
return new String[]{""String_Node_Str""};
case LOCALDATE:
return new String[]{""String_Node_Str""};
case LOCALDATETIME:
return new String[]{""String_Node_Str""};
case ZONEDDATETIME:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case LOCALTIME:
return new String[]{""String_Node_Str""};
case PERIOD:
return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
case DURATION:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case STRING:
return new String[]{""String_Node_Str""};
case JSON:
return new String[]{""String_Node_Str""};
case POINT:
return new String[]{""String_Node_Str""};
case POLYGON:
return new String[]{""String_Node_Str""};
case GEOGRAPHY_POINT:
return new String[]{""String_Node_Str""};
case GEOGRAPHY_POLYGON:
return new String[]{""String_Node_Str""};
case BYTE_ARRAY:
return new String[]{""String_Node_Str""};
case BOOLEAN_ARRAY:
return new String[]{""String_Node_Str""};
case SHORT_ARRAY:
return new String[]{""String_Node_Str""};
case INTEGER_ARRAY:
return new String[]{""String_Node_Str""};
case LONG_ARRAY:
return new String[]{""String_Node_Str""};
case FLOAT_ARRAY:
return new String[]{""String_Node_Str""};
case DOUBLE_ARRAY:
return new String[]{""String_Node_Str""};
case STRING_ARRAY:
return new String[]{""String_Node_Str""};
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public String[] propertyTypeToSqlDefinition(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return new String[]{""String_Node_Str""};
case SHORT:
  return new String[]{""String_Node_Str""};
case INTEGER:
return new String[]{""String_Node_Str""};
case LONG:
return new String[]{""String_Node_Str""};
case FLOAT:
return new String[]{""String_Node_Str""};
case DOUBLE:
return new String[]{""String_Node_Str""};
case LOCALDATE:
return new String[]{""String_Node_Str""};
case LOCALDATETIME:
return new String[]{""String_Node_Str""};
case LOCALTIME:
return new String[]{""String_Node_Str""};
case PERIOD:
return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
case DURATION:
return new String[]{""String_Node_Str"",""String_Node_Str""};
case STRING:
return new String[]{""String_Node_Str""};
case JSON:
return new String[]{""String_Node_Str""};
case POINT:
return new String[]{""String_Node_Str""};
case POLYGON:
return new String[]{""String_Node_Str""};
case GEOGRAPHY_POINT:
return new String[]{""String_Node_Str""};
case GEOGRAPHY_POLYGON:
return new String[]{""String_Node_Str""};
case BYTE_ARRAY:
return new String[]{""String_Node_Str""};
case BOOLEAN_ARRAY:
return new String[]{""String_Node_Str""};
case SHORT_ARRAY:
return new String[]{""String_Node_Str""};
case INTEGER_ARRAY:
return new String[]{""String_Node_Str""};
case LONG_ARRAY:
return new String[]{""String_Node_Str""};
case FLOAT_ARRAY:
return new String[]{""String_Node_Str""};
case DOUBLE_ARRAY:
return new String[]{""String_Node_Str""};
case STRING_ARRAY:
return new String[]{""String_Node_Str""};
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9769503546099292
167084,"@Override public int propertyTypeToJavaSqlType(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return Types.BOOLEAN;
case SHORT:
  return Types.SMALLINT;
case INTEGER:
return Types.INTEGER;
case LONG:
return Types.BIGINT;
case FLOAT:
return Types.REAL;
case DOUBLE:
return Types.DOUBLE;
case STRING:
return Types.CLOB;
case BYTE_ARRAY:
return Types.ARRAY;
case BOOLEAN_ARRAY:
return Types.ARRAY;
case SHORT_ARRAY:
return Types.ARRAY;
case INTEGER_ARRAY:
return Types.ARRAY;
case LONG_ARRAY:
return Types.ARRAY;
case FLOAT_ARRAY:
return Types.ARRAY;
case DOUBLE_ARRAY:
return Types.ARRAY;
case STRING_ARRAY:
return Types.ARRAY;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}","@Override public int propertyTypeToJavaSqlType(PropertyType propertyType){
switch (propertyType) {
case BOOLEAN:
    return Types.BOOLEAN;
case SHORT:
  return Types.SMALLINT;
case INTEGER:
return Types.INTEGER;
case LONG:
return Types.BIGINT;
case FLOAT:
return Types.REAL;
case DOUBLE:
return Types.DOUBLE;
case STRING:
return Types.CLOB;
case BYTE_ARRAY:
return Types.ARRAY;
case LOCALDATETIME:
return Types.TIMESTAMP;
case LOCALDATE:
return Types.DATE;
case LOCALTIME:
return Types.TIME;
case JSON:
return Types.OTHER;
case BOOLEAN_ARRAY:
return Types.ARRAY;
case SHORT_ARRAY:
return Types.ARRAY;
case INTEGER_ARRAY:
return Types.ARRAY;
case LONG_ARRAY:
return Types.ARRAY;
case FLOAT_ARRAY:
return Types.ARRAY;
case DOUBLE_ARRAY:
return Types.ARRAY;
case STRING_ARRAY:
return Types.ARRAY;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}",0.9103277674706246
167085,"@Override public PropertyType sqlTypeToPropertyType(int sqlType,String typeName){
switch (sqlType) {
case Types.BIT:
    return PropertyType.BOOLEAN;
case Types.SMALLINT:
  return PropertyType.SHORT;
case Types.INTEGER:
return PropertyType.INTEGER;
case Types.BIGINT:
return PropertyType.LONG;
case Types.REAL:
return PropertyType.FLOAT;
case Types.DOUBLE:
return PropertyType.DOUBLE;
case Types.VARCHAR:
return PropertyType.STRING;
case Types.BINARY:
return PropertyType.BYTE_ARRAY;
case Types.ARRAY:
switch (typeName) {
case ""String_Node_Str"":
return PropertyType.BOOLEAN_ARRAY;
case ""String_Node_Str"":
return PropertyType.SHORT_ARRAY;
case ""String_Node_Str"":
return PropertyType.INTEGER_ARRAY;
case ""String_Node_Str"":
return PropertyType.LONG_ARRAY;
case ""String_Node_Str"":
return PropertyType.FLOAT_ARRAY;
case ""String_Node_Str"":
return PropertyType.DOUBLE_ARRAY;
case ""String_Node_Str"":
return PropertyType.STRING_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + typeName);
}
default :
throw new IllegalStateException(""String_Node_Str"" + sqlType);
}
}","@Override public PropertyType sqlTypeToPropertyType(int sqlType,String typeName){
switch (sqlType) {
case Types.BIT:
    return PropertyType.BOOLEAN;
case Types.SMALLINT:
  return PropertyType.SHORT;
case Types.INTEGER:
return PropertyType.INTEGER;
case Types.BIGINT:
return PropertyType.LONG;
case Types.REAL:
return PropertyType.FLOAT;
case Types.DOUBLE:
return PropertyType.DOUBLE;
case Types.VARCHAR:
return PropertyType.STRING;
case Types.TIMESTAMP:
return PropertyType.LOCALDATETIME;
case Types.DATE:
return PropertyType.LOCALDATE;
case Types.TIME:
return PropertyType.LOCALTIME;
case Types.OTHER:
return PropertyType.JSON;
case Types.BINARY:
return PropertyType.BYTE_ARRAY;
case Types.ARRAY:
switch (typeName) {
case ""String_Node_Str"":
return PropertyType.BOOLEAN_ARRAY;
case ""String_Node_Str"":
return PropertyType.SHORT_ARRAY;
case ""String_Node_Str"":
return PropertyType.INTEGER_ARRAY;
case ""String_Node_Str"":
return PropertyType.LONG_ARRAY;
case ""String_Node_Str"":
return PropertyType.FLOAT_ARRAY;
case ""String_Node_Str"":
return PropertyType.DOUBLE_ARRAY;
case ""String_Node_Str"":
return PropertyType.STRING_ARRAY;
default :
throw new RuntimeException(""String_Node_Str"" + typeName);
}
default :
throw new IllegalStateException(""String_Node_Str"" + sqlType);
}
}",0.9157759726378796
167086,"private String toOrderByClause(SqlgGraph sqlgGraph,MutableBoolean printedOrderBy,int counter){
  String result=""String_Node_Str"";
  for (  Comparator comparator : this.getComparators()) {
    if (!printedOrderBy.booleanValue()) {
      printedOrderBy.setTrue();
      result+=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    if (comparator instanceof ElementValueComparator) {
      ElementValueComparator elementValueComparator=(ElementValueComparator)comparator;
      String prefix=this.getSchemaTable().getSchema();
      prefix+=""String_Node_Str"";
      prefix+=this.getSchemaTable().getTable();
      prefix+=""String_Node_Str"";
      prefix+=elementValueComparator.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
      result+=""String_Node_Str"" + alias;
      if (elementValueComparator.getValueComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (elementValueComparator.getValueComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + elementValueComparator.getValueComparator().toString());
      }
    }
 else     if (comparator instanceof TraversalComparator) {
      TraversalComparator traversalComparator=(TraversalComparator)comparator;
      Preconditions.checkState(traversalComparator.getTraversal().getSteps().size() == 1,""String_Node_Str"");
      Preconditions.checkState(traversalComparator.getTraversal().getSteps().get(0) instanceof SelectOneStep,""String_Node_Str"");
      SelectOneStep selectOneStep=(SelectOneStep)traversalComparator.getTraversal().getSteps().get(0);
      Preconditions.checkState(selectOneStep.getScopeKeys().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().get(0) instanceof ElementValueTraversal,""String_Node_Str"");
      SchemaTableTree selectSchemaTableTree=findSelectSchemaTable((String)selectOneStep.getScopeKeys().iterator().next());
      ElementValueTraversal elementValueTraversal=(ElementValueTraversal)selectOneStep.getLocalChildren().get(0);
      String prefix;
      if (counter != -1) {
        prefix=""String_Node_Str"";
      }
 else {
        prefix=selectSchemaTableTree.labels.iterator().next();
        prefix+=""String_Node_Str"";
      }
      prefix+=selectSchemaTableTree.getSchemaTable().getSchema();
      prefix+=""String_Node_Str"";
      prefix+=selectSchemaTableTree.getSchemaTable().getTable();
      prefix+=""String_Node_Str"";
      prefix+=elementValueTraversal.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
      result+=""String_Node_Str"" + alias;
      if (traversalComparator.getComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (traversalComparator.getComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + traversalComparator.getComparator().toString());
      }
    }
  }
  return result;
}","private String toOrderByClause(SqlgGraph sqlgGraph,MutableBoolean printedOrderBy,int counter){
  String result=""String_Node_Str"";
  for (  Comparator comparator : this.getComparators()) {
    if (!printedOrderBy.booleanValue()) {
      printedOrderBy.setTrue();
      result+=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    if (comparator instanceof ElementValueComparator) {
      ElementValueComparator elementValueComparator=(ElementValueComparator)comparator;
      String prefix=this.getSchemaTable().getSchema();
      prefix+=""String_Node_Str"";
      prefix+=this.getSchemaTable().getTable();
      prefix+=""String_Node_Str"";
      prefix+=elementValueComparator.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
 else {
        alias=""String_Node_Str"" + counter + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
      result+=""String_Node_Str"" + alias;
      if (elementValueComparator.getValueComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (elementValueComparator.getValueComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + elementValueComparator.getValueComparator().toString());
      }
    }
 else     if (comparator instanceof TraversalComparator) {
      TraversalComparator traversalComparator=(TraversalComparator)comparator;
      Preconditions.checkState(traversalComparator.getTraversal().getSteps().size() == 1,""String_Node_Str"");
      Preconditions.checkState(traversalComparator.getTraversal().getSteps().get(0) instanceof SelectOneStep,""String_Node_Str"");
      SelectOneStep selectOneStep=(SelectOneStep)traversalComparator.getTraversal().getSteps().get(0);
      Preconditions.checkState(selectOneStep.getScopeKeys().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().size() == 1,""String_Node_Str"");
      Preconditions.checkState(selectOneStep.getLocalChildren().get(0) instanceof ElementValueTraversal,""String_Node_Str"");
      SchemaTableTree selectSchemaTableTree=findSelectSchemaTable((String)selectOneStep.getScopeKeys().iterator().next());
      ElementValueTraversal elementValueTraversal=(ElementValueTraversal)selectOneStep.getLocalChildren().get(0);
      String prefix;
      if (selectSchemaTableTree.children.isEmpty()) {
        prefix=""String_Node_Str"";
      }
 else {
        prefix=selectSchemaTableTree.labels.iterator().next();
        prefix+=""String_Node_Str"";
      }
      prefix+=selectSchemaTableTree.getSchemaTable().getSchema();
      prefix+=""String_Node_Str"";
      prefix+=selectSchemaTableTree.getSchemaTable().getTable();
      prefix+=""String_Node_Str"";
      prefix+=elementValueTraversal.getPropertyKey();
      String alias;
      if (counter == -1) {
        alias=sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
 else {
        alias=""String_Node_Str"" + selectSchemaTableTree.stepDepth + ""String_Node_Str""+ sqlgGraph.getSqlDialect().maybeWrapInQoutes(threadLocalColumnNameAliasMap.get().get(prefix).iterator().next());
      }
      result+=""String_Node_Str"" + alias;
      if (traversalComparator.getComparator() == Order.incr) {
        result+=""String_Node_Str"";
      }
 else       if (traversalComparator.getComparator() == Order.decr) {
        result+=""String_Node_Str"";
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + traversalComparator.getComparator().toString());
      }
    }
  }
  return result;
}",0.8690712115206765
167087,"/** 
 * Construct a sql statement for one original path to a leaf node. As the path contains the same label more than once it has been split into a List of Stacks.
 * @param subQueryLinkedLists
 * @return
 */
private static String constructDuplicatePathSql(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists){
  String singlePathSql=""String_Node_Str"";
  int count=1;
  SchemaTableTree lastOfPrevious=null;
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    SchemaTableTree firstOfNext=null;
    boolean last=count == subQueryLinkedLists.size();
    if (!last) {
      LinkedList<SchemaTableTree> nextList=subQueryLinkedLists.get(count);
      firstOfNext=nextList.getFirst();
    }
    SchemaTableTree firstSchemaTableTree=subQueryLinkedList.getFirst();
    String sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,firstOfNext);
    singlePathSql+=sql;
    if (count == 1) {
      singlePathSql+=""String_Node_Str"" + count++ + ""String_Node_Str"";
    }
 else {
      singlePathSql+=""String_Node_Str"" + count + ""String_Node_Str"";
      singlePathSql+=constructSectionedJoin(lastOfPrevious,firstSchemaTableTree,count);
      if (count++ < subQueryLinkedLists.size()) {
        singlePathSql+=""String_Node_Str"";
      }
    }
    lastOfPrevious=subQueryLinkedList.getLast();
  }
  String result=""String_Node_Str"" + constructOuterFromClause(sqlgGraph,subQueryLinkedLists);
  singlePathSql+=constructOuterOrderByClause(sqlgGraph,subQueryLinkedLists);
  return result + singlePathSql;
}","/** 
 * Construct a sql statement for one original path to a leaf node. As the path contains the same label more than once it has been split into a List of Stacks.
 * @param subQueryLinkedLists
 * @return
 */
private static String constructDuplicatePathSql(SqlgGraph sqlgGraph,List<LinkedList<SchemaTableTree>> subQueryLinkedLists){
  String singlePathSql=""String_Node_Str"";
  int count=1;
  SchemaTableTree lastOfPrevious=null;
  for (  LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) {
    SchemaTableTree firstOfNext=null;
    boolean last=count == subQueryLinkedLists.size();
    if (!last) {
      LinkedList<SchemaTableTree> nextList=subQueryLinkedLists.get(count);
      firstOfNext=nextList.getFirst();
    }
    SchemaTableTree firstSchemaTableTree=subQueryLinkedList.getFirst();
    String sql=constructSinglePathSql(sqlgGraph,true,subQueryLinkedList,lastOfPrevious,firstOfNext);
    singlePathSql+=sql;
    if (count == 1) {
      singlePathSql+=""String_Node_Str"" + count++ + ""String_Node_Str"";
    }
 else {
      singlePathSql+=""String_Node_Str"" + count + ""String_Node_Str"";
      singlePathSql+=constructSectionedJoin(lastOfPrevious,firstSchemaTableTree,count);
      if (count++ < subQueryLinkedLists.size()) {
        singlePathSql+=""String_Node_Str"";
      }
    }
    lastOfPrevious=subQueryLinkedList.getLast();
  }
  singlePathSql+=constructOuterOrderByClause(sqlgGraph,subQueryLinkedLists);
  String result=""String_Node_Str"" + constructOuterFromClause(sqlgGraph,subQueryLinkedLists);
  return result + singlePathSql;
}",0.9320948110185778
167088,"private Iterator<Pair<E,Multimap<String,Object>>> elements(){
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalAliasColumnNameMap.get().isEmpty(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalColumnNameAliasMap.get().isEmpty(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTree=this.sqlgGraph.getGremlinParser().parse(this.replacedSteps);
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  SchemaTableTree schemaTableTree : rootSchemaTableTree) {
    List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
    try {
      for (      Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
        Connection conn=this.sqlgGraph.tx().getConnection();
        if (logger.isDebugEnabled()) {
          logger.debug(sqlPair.getRight());
        }
        try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
          SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,1);
          ResultSet resultSet=preparedStatement.executeQuery();
          ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
          while (resultSet.next()) {
            Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSetMetaData,resultSet,sqlPair.getLeft());
            resultIterator.add(result);
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  finally {
      schemaTableTree.resetThreadVars();
    }
  }
  return resultIterator;
}","private Iterator<Pair<E,Multimap<String,Object>>> elements(){
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalAliasColumnNameMap.get().isEmpty(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalColumnNameAliasMap.get().isEmpty(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTree=this.sqlgGraph.getGremlinParser().parse(this.replacedSteps);
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  SchemaTableTree schemaTableTree : rootSchemaTableTree) {
    try {
      List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
      for (      Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
        Connection conn=this.sqlgGraph.tx().getConnection();
        if (logger.isDebugEnabled()) {
          logger.debug(sqlPair.getRight());
        }
        try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
          SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,1);
          ResultSet resultSet=preparedStatement.executeQuery();
          ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
          while (resultSet.next()) {
            Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSetMetaData,resultSet,sqlPair.getLeft());
            resultIterator.add(result);
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  finally {
      schemaTableTree.resetThreadVars();
    }
  }
  rootSchemaTableTree.forEach(SchemaTableTree::resetThreadVars);
  return resultIterator;
}",0.9768555466879488
167089,"void parseForStrategy(){
  this.parsedForStrategySql.clear();
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTrees=this.sqlgGraph.getGremlinParser().parseForStrategy(this.replacedSteps);
  for (  SchemaTableTree rootSchemaTableTree : rootSchemaTableTrees) {
    try {
      List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=rootSchemaTableTree.constructSql();
      this.parsedForStrategySql.put(rootSchemaTableTree,sqlStatements);
    }
  finally {
      rootSchemaTableTree.resetThreadVars();
    }
  }
}","void parseForStrategy(){
  this.parsedForStrategySql.clear();
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTrees=this.sqlgGraph.getGremlinParser().parseForStrategy(this.replacedSteps);
  for (  SchemaTableTree rootSchemaTableTree : rootSchemaTableTrees) {
    try {
      List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=rootSchemaTableTree.constructSql();
      this.parsedForStrategySql.put(rootSchemaTableTree,sqlStatements);
    }
  finally {
      rootSchemaTableTree.resetThreadVars();
    }
  }
  rootSchemaTableTrees.forEach(SchemaTableTree::resetThreadVars);
}",0.9531914893617022
167090,"void parseForStrategy(SqlgGraph sqlgGraph,SchemaTable schemaTable){
  this.parsedForStrategySql.clear();
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isVertexStep() || this.replacedSteps.get(0).isEdgeVertexStep(),""String_Node_Str"" + this.replacedSteps.get(0).getStep().getClass().toString());
  SchemaTableTree schemaTableTree=sqlgGraph.getGremlinParser().parse(schemaTable,this.replacedSteps);
  List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
  try {
    this.parsedForStrategySql.put(schemaTableTree,sqlStatements);
  }
  finally {
    schemaTableTree.resetThreadVars();
  }
}","void parseForStrategy(SqlgGraph sqlgGraph,SchemaTable schemaTable){
  this.parsedForStrategySql.clear();
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isVertexStep() || this.replacedSteps.get(0).isEdgeVertexStep(),""String_Node_Str"" + this.replacedSteps.get(0).getStep().getClass().toString());
  SchemaTableTree schemaTableTree=null;
  try {
    schemaTableTree=sqlgGraph.getGremlinParser().parse(schemaTable,this.replacedSteps);
    List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
    this.parsedForStrategySql.put(schemaTableTree,sqlStatements);
  }
  finally {
    if (schemaTableTree != null)     schemaTableTree.resetThreadVars();
  }
}",0.8032454361054767
167091,"void loadSchema(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata;
    metadata=conn.getMetaData();
    if (this.sqlDialect.supportSchemas()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String table=tablesRs.getString(3);
        Map<String,PropertyType> uncommittedColumns=new ConcurrentHashMap<>();
        Set<String> foreignKeys=null;
        String previousSchema=""String_Node_Str"";
        ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
        while (columnsRs.next()) {
          String schema=columnsRs.getString(2);
          this.localSchemas.put(schema,schema);
          if (!previousSchema.equals(schema)) {
            foreignKeys=new HashSet<>();
            uncommittedColumns=new ConcurrentHashMap<>();
          }
          previousSchema=schema;
          String column=columnsRs.getString(4);
          if (!column.equals(SchemaManager.ID)) {
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncommittedColumns.put(column,propertyType);
          }
          this.localTables.put(schema + ""String_Node_Str"" + table,uncommittedColumns);
          Set<String> schemas=this.localLabelSchemas.get(table);
          if (schemas == null) {
            schemas=new HashSet<>();
          }
          schemas.add(schema);
          this.localLabelSchemas.put(table,schemas);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            foreignKeys.add(column);
            this.localEdgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            SchemaTable schemaTable=SchemaTable.of(column.split(""String_Node_Str"")[0],SchemaManager.VERTEX_PREFIX + column.split(""String_Node_Str"")[1].replace(SchemaManager.IN_VERTEX_COLUMN_END,""String_Node_Str"").replace(SchemaManager.OUT_VERTEX_COLUMN_END,""String_Node_Str""));
            Pair<Set<SchemaTable>,Set<SchemaTable>> labels=this.localTableLabels.get(schemaTable);
            if (labels == null) {
              labels=Pair.of(new HashSet<>(),new HashSet<>());
              this.localTableLabels.put(schemaTable,labels);
            }
            if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
              labels.getLeft().add(SchemaTable.of(schema,table));
            }
 else             if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
              labels.getRight().add(SchemaTable.of(schema,table));
            }
          }
        }
      }
    }
 else {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String db=tablesRs.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(db)) {
          String table=tablesRs.getString(3);
          final Map<String,PropertyType> uncomitedColumns=new ConcurrentHashMap<>();
          final Set<String> foreignKeys=new HashSet<>();
          ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
          while (columnsRs.next()) {
            String schema=columnsRs.getString(1);
            this.localSchemas.put(schema,schema);
            String column=columnsRs.getString(4);
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncomitedColumns.put(column,propertyType);
            this.localTables.put(schema + ""String_Node_Str"" + table,uncomitedColumns);
            Set<String> schemas=this.localLabelSchemas.get(table);
            if (schemas == null) {
              schemas=new HashSet<>();
              this.localLabelSchemas.put(table,schemas);
            }
            schemas.add(schema);
            if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
              foreignKeys.add(column);
              this.localEdgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            }
          }
        }
      }
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","void loadSchema(){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"");
  }
  Connection conn=this.sqlgGraph.tx().getConnection();
  try {
    DatabaseMetaData metadata;
    metadata=conn.getMetaData();
    if (this.sqlDialect.supportSchemas()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String table=tablesRs.getString(3);
        if (this.sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        Map<String,PropertyType> uncommittedColumns=new ConcurrentHashMap<>();
        Set<String> foreignKeys=null;
        String previousSchema=""String_Node_Str"";
        ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
        while (columnsRs.next()) {
          String schema=columnsRs.getString(2);
          if (this.sqlDialect.getGisSchemas().contains(schema)) {
            continue;
          }
          this.localSchemas.put(schema,schema);
          if (!previousSchema.equals(schema)) {
            foreignKeys=new HashSet<>();
            uncommittedColumns=new ConcurrentHashMap<>();
          }
          previousSchema=schema;
          String column=columnsRs.getString(4);
          if (!column.equals(SchemaManager.ID)) {
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncommittedColumns.put(column,propertyType);
          }
          this.localTables.put(schema + ""String_Node_Str"" + table,uncommittedColumns);
          Set<String> schemas=this.localLabelSchemas.get(table);
          if (schemas == null) {
            schemas=new HashSet<>();
          }
          schemas.add(schema);
          this.localLabelSchemas.put(table,schemas);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            foreignKeys.add(column);
            this.localEdgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            SchemaTable schemaTable=SchemaTable.of(column.split(""String_Node_Str"")[0],SchemaManager.VERTEX_PREFIX + column.split(""String_Node_Str"")[1].replace(SchemaManager.IN_VERTEX_COLUMN_END,""String_Node_Str"").replace(SchemaManager.OUT_VERTEX_COLUMN_END,""String_Node_Str""));
            Pair<Set<SchemaTable>,Set<SchemaTable>> labels=this.localTableLabels.get(schemaTable);
            if (labels == null) {
              labels=Pair.of(new HashSet<>(),new HashSet<>());
              this.localTableLabels.put(schemaTable,labels);
            }
            if (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
              labels.getLeft().add(SchemaTable.of(schema,table));
            }
 else             if (column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
              labels.getRight().add(SchemaTable.of(schema,table));
            }
          }
        }
      }
    }
 else {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String db=tablesRs.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(db)) {
          String table=tablesRs.getString(3);
          final Map<String,PropertyType> uncomitedColumns=new ConcurrentHashMap<>();
          final Set<String> foreignKeys=new HashSet<>();
          ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
          while (columnsRs.next()) {
            String schema=columnsRs.getString(1);
            this.localSchemas.put(schema,schema);
            String column=columnsRs.getString(4);
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncomitedColumns.put(column,propertyType);
            this.localTables.put(schema + ""String_Node_Str"" + table,uncomitedColumns);
            Set<String> schemas=this.localLabelSchemas.get(table);
            if (schemas == null) {
              schemas=new HashSet<>();
              this.localLabelSchemas.put(table,schemas);
            }
            schemas.add(schema);
            if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
              foreignKeys.add(column);
              this.localEdgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            }
          }
        }
      }
    }
    if (distributed) {
      this.schemas.putAll(this.localSchemas);
      this.labelSchemas.putAll(this.localLabelSchemas);
      this.tables.putAll(this.localTables);
      this.edgeForeignKeys.putAll(this.localEdgeForeignKeys);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9810707456978968
167092,"/** 
 * Generate a query for the replaced steps. Each replaced step translates to a join statement and a section of the where clause.
 * @param replacedSteps
 * @return The results of the query
 */
private <S,E>Iterator<Pair<E,Multimap<String,Object>>> internalGetElements(List<ReplacedStep<S,E>> replacedSteps){
  Preconditions.checkState(SchemaTableTree.threadLocalAliasColumnNameMap.get().isEmpty(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalColumnNameAliasMap.get().isEmpty(),""String_Node_Str"");
  SchemaTable schemaTable=getSchemaTablePrefixed();
  SchemaTableTree schemaTableTree=this.sqlgGraph.getGremlinParser().parse(schemaTable,replacedSteps);
  List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
  try {
    SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
    for (    Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
      Connection conn=this.sqlgGraph.tx().getConnection();
      if (logger.isDebugEnabled()) {
        logger.debug(sqlPair.getRight());
      }
      try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
        preparedStatement.setLong(1,this.recordId.getId());
        SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,2);
        ResultSet resultSet=preparedStatement.executeQuery();
        ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
        while (resultSet.next()) {
          Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSetMetaData,resultSet,sqlPair.getLeft());
          resultIterator.add(result);
        }
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    return resultIterator;
  }
  finally {
    schemaTableTree.resetThreadVars();
  }
}","/** 
 * Generate a query for the replaced steps. Each replaced step translates to a join statement and a section of the where clause.
 * @param replacedSteps
 * @return The results of the query
 */
private <S,E>Iterator<Pair<E,Multimap<String,Object>>> internalGetElements(List<ReplacedStep<S,E>> replacedSteps){
  Preconditions.checkState(SchemaTableTree.threadLocalAliasColumnNameMap.get().isEmpty(),""String_Node_Str"");
  Preconditions.checkState(SchemaTableTree.threadLocalColumnNameAliasMap.get().isEmpty(),""String_Node_Str"");
  SchemaTable schemaTable=getSchemaTablePrefixed();
  SchemaTableTree schemaTableTree=null;
  try {
    schemaTableTree=this.sqlgGraph.getGremlinParser().parse(schemaTable,replacedSteps);
    List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
    SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
    for (    Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
      Connection conn=this.sqlgGraph.tx().getConnection();
      if (logger.isDebugEnabled()) {
        logger.debug(sqlPair.getRight());
      }
      try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
        preparedStatement.setLong(1,this.recordId.getId());
        SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,2);
        ResultSet resultSet=preparedStatement.executeQuery();
        ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
        while (resultSet.next()) {
          Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSetMetaData,resultSet,sqlPair.getLeft());
          resultIterator.add(result);
        }
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
    return resultIterator;
  }
  finally {
    if (schemaTableTree != null)     schemaTableTree.resetThreadVars();
  }
}",0.9803821656050956
167093,"@Before public void before() throws IOException {
  SqlDialect sqlDialect;
  try {
    Class<?> sqlDialectClass=findSqlGDialect();
    Constructor<?> constructor=sqlDialectClass.getConstructor(Configuration.class);
    sqlDialect=(SqlDialect)constructor.newInstance(configuration);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    SqlgDataSource.INSTANCE.setupDataSource(sqlDialect.getJdbcDriver(),configuration);
  }
 catch (  PropertyVetoException e) {
    throw new RuntimeException(e);
  }
  Connection conn;
  try {
    conn=SqlgDataSource.INSTANCE.get(configuration.getString(""String_Node_Str"")).getConnection();
    DatabaseMetaData metadata=conn.getMetaData();
    if (sqlDialect.supportsCascade()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=""String_Node_Str"";
      String[] types={""String_Node_Str""};
      ResultSet result=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (result.next()) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        sql.append(sqlDialect.maybeWrapInQoutes(result.getString(2)));
        sql.append(""String_Node_Str"");
        sql.append(sqlDialect.maybeWrapInQoutes(result.getString(3)));
        sql.append(""String_Node_Str"");
        if (sqlDialect.needsSemicolon()) {
          sql.append(""String_Node_Str"");
        }
        try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
          preparedStatement.executeUpdate();
        }
       }
      catalog=null;
      schemaPattern=null;
      result=metadata.getSchemas(catalog,schemaPattern);
      while (result.next()) {
        String schema=result.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(schema)) {
          StringBuilder sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlDialect.maybeWrapInQoutes(schema));
          sql.append(""String_Node_Str"");
          if (sqlDialect.needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            preparedStatement.executeUpdate();
          }
         }
      }
    }
 else     if (!sqlDialect.supportSchemas()) {
      ResultSet result=metadata.getCatalogs();
      while (result.next()) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        String database=result.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(database)) {
          sql.append(sqlDialect.maybeWrapInQoutes(database));
          if (sqlDialect.needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            preparedStatement.executeUpdate();
          }
         }
      }
    }
 else {
      conn.setAutoCommit(false);
      JDBC.dropSchema(metadata,""String_Node_Str"");
      conn.commit();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  this.sqlgGraph=SqlgGraph.open(configuration);
  this.gt=this.sqlgGraph.traversal();
}","@Before public void before() throws IOException {
  SqlDialect sqlDialect;
  try {
    Class<?> sqlDialectClass=findSqlGDialect();
    Constructor<?> constructor=sqlDialectClass.getConstructor(Configuration.class);
    sqlDialect=(SqlDialect)constructor.newInstance(configuration);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    SqlgDataSource.INSTANCE.setupDataSource(sqlDialect.getJdbcDriver(),configuration);
  }
 catch (  PropertyVetoException e) {
    throw new RuntimeException(e);
  }
  Connection conn;
  try {
    conn=SqlgDataSource.INSTANCE.get(configuration.getString(""String_Node_Str"")).getConnection();
    DatabaseMetaData metadata=conn.getMetaData();
    if (sqlDialect.supportsCascade()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=""String_Node_Str"";
      String[] types={""String_Node_Str""};
      ResultSet result=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (result.next()) {
        String schema=result.getString(2);
        String table=result.getString(3);
        if (sqlDialect.getGisSchemas().contains(schema) || sqlDialect.getSpacialRefTable().contains(table)) {
          continue;
        }
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        sql.append(sqlDialect.maybeWrapInQoutes(schema));
        sql.append(""String_Node_Str"");
        sql.append(sqlDialect.maybeWrapInQoutes(table));
        sql.append(""String_Node_Str"");
        if (sqlDialect.needsSemicolon()) {
          sql.append(""String_Node_Str"");
        }
        try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
          preparedStatement.executeUpdate();
        }
       }
      catalog=null;
      schemaPattern=null;
      result=metadata.getSchemas(catalog,schemaPattern);
      while (result.next()) {
        String schema=result.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(schema)) {
          StringBuilder sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlDialect.maybeWrapInQoutes(schema));
          sql.append(""String_Node_Str"");
          if (sqlDialect.needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            preparedStatement.executeUpdate();
          }
         }
      }
    }
 else     if (!sqlDialect.supportSchemas()) {
      ResultSet result=metadata.getCatalogs();
      while (result.next()) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        String database=result.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(database)) {
          sql.append(sqlDialect.maybeWrapInQoutes(database));
          if (sqlDialect.needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            preparedStatement.executeUpdate();
          }
         }
      }
    }
 else {
      conn.setAutoCommit(false);
      JDBC.dropSchema(metadata,""String_Node_Str"");
      conn.commit();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  this.sqlgGraph=SqlgGraph.open(configuration);
  this.gt=this.sqlgGraph.traversal();
}",0.9576376004947432
167094,"public Set<SchemaTableTree> getRootSchemaTableTrees(SqlgGraph sqlgGraph){
  Preconditions.checkState(this.isGraphStep(),""String_Node_Str"");
  GraphStep graphStep=(GraphStep)this.step;
  Set<SchemaTableTree> result=new HashSet<>();
  List<HasContainer> hasContainerWithoutLabel=this.hasContainers.stream().filter(h -> !h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  List<HasContainer> hasContainerWithLabel=this.hasContainers.stream().filter(h -> h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  if (hasContainerWithLabel.isEmpty()) {
    sqlgGraph.getSchemaManager().getAllTables().forEach((t,p) -> {
      if ((graphStep.getReturnClass().isAssignableFrom(Vertex.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.VERTEX_PREFIX)) || (graphStep.getReturnClass().isAssignableFrom(Edge.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.EDGE_PREFIX))) {
        SchemaTable schemaTable=SchemaTable.from(sqlgGraph,t,sqlgGraph.getSqlDialect().getPublicSchema());
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
 else {
    hasContainerWithLabel.forEach(h -> {
      SchemaTable schemaTableForLabel=SqlgUtil.parseLabelMaybeNoSchema((String)h.getValue());
      if (sqlgGraph.getSchemaManager().getAllTables().containsKey(schemaTableForLabel.toString())) {
        SchemaTable schemaTable=SchemaTable.from(sqlgGraph,schemaTableForLabel.toString(),sqlgGraph.getSqlDialect().getPublicSchema());
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
  return result;
}","public Set<SchemaTableTree> getRootSchemaTableTrees(SqlgGraph sqlgGraph){
  Preconditions.checkState(this.isGraphStep(),""String_Node_Str"");
  GraphStep graphStep=(GraphStep)this.step;
  Set<SchemaTableTree> result=new HashSet<>();
  List<HasContainer> hasContainerWithoutLabel=this.hasContainers.stream().filter(h -> !h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  List<HasContainer> hasContainerWithLabel=this.hasContainers.stream().filter(h -> h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  if (hasContainerWithLabel.isEmpty()) {
    sqlgGraph.getSchemaManager().getAllTables().forEach((t,p) -> {
      if ((graphStep.getReturnClass().isAssignableFrom(Vertex.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.VERTEX_PREFIX)) || (graphStep.getReturnClass().isAssignableFrom(Edge.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.EDGE_PREFIX))) {
        SchemaTable schemaTable=SchemaTable.from(sqlgGraph,t,sqlgGraph.getSqlDialect().getPublicSchema());
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
 else {
    hasContainerWithLabel.forEach(h -> {
      SchemaTable schemaTableForLabel=SqlgUtil.parseLabelMaybeNoSchema((String)h.getValue());
      String table=(graphStep.getReturnClass().isAssignableFrom(Vertex.class) ? SchemaManager.VERTEX_PREFIX : SchemaManager.EDGE_PREFIX) + schemaTableForLabel.getTable();
      schemaTableForLabel=SchemaTable.from(sqlgGraph,schemaTableForLabel.getSchema() == null ? table : schemaTableForLabel.getSchema() + ""String_Node_Str"" + table,sqlgGraph.getSqlDialect().getPublicSchema());
      if (sqlgGraph.getSchemaManager().getAllTables().containsKey(schemaTableForLabel.toString())) {
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTableForLabel,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
  return result;
}",0.8869412795793163
167095,"@Override public <S>Traverser.Admin<S> generate(final S pair,final Step<S,?> startStep,final long initialBulk){
  Pair<S,Multimap<String,Object>> p=(Pair<S,Multimap<String,Object>>)pair;
  return new SqlGraphStepTraverser<>(p.getLeft(),p.getRight(),startStep,initialBulk);
}","@Override public <S>Traverser.Admin<S> generate(final S pair,final Step<S,?> step,final long initialBulk){
  if (pair instanceof Pair) {
    Pair<S,Multimap<String,Object>> p=(Pair<S,Multimap<String,Object>>)pair;
    return new SqlGraphStepTraverser<>(p.getLeft(),p.getRight(),step,initialBulk);
  }
 else {
    Multimap<String,Object> emptyMap=ArrayListMultimap.create();
    return new SqlGraphStepTraverser<>(pair,emptyMap,step,initialBulk);
  }
}",0.7282758620689656
167096,"public Set<SchemaTableTree> getRootSchemaTableTrees(SqlgGraph sqlgGraph){
  Set<SchemaTableTree> result=new HashSet<>();
  this.hasContainers.stream().filter(h -> h.getKey().equals(T.label.getAccessor())).map(HasContainer::getValue).forEach(label -> {
    SchemaTable schemaTable=SchemaTable.from(sqlgGraph,SchemaManager.VERTEX_PREFIX + label,sqlgGraph.getSqlDialect().getPublicSchema());
    SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
    schemaTableTree.setHasContainers(this.hasContainers);
    schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
    schemaTableTree.labels=ReplacedStep.this.labels;
    result.add(schemaTableTree);
  }
);
  return result;
}","public Set<SchemaTableTree> getRootSchemaTableTrees(SqlgGraph sqlgGraph){
  Preconditions.checkState(this.isGraphStep(),""String_Node_Str"");
  GraphStep graphStep=(GraphStep)this.step;
  Set<SchemaTableTree> result=new HashSet<>();
  List<HasContainer> hasContainerWithoutLabel=this.hasContainers.stream().filter(h -> !h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  List<HasContainer> hasContainerWithLabel=this.hasContainers.stream().filter(h -> h.getKey().equals(T.label.getAccessor())).collect(Collectors.toList());
  if (hasContainerWithLabel.isEmpty()) {
    sqlgGraph.getSchemaManager().getAllTables().forEach((t,p) -> {
      if ((graphStep.getReturnClass().isAssignableFrom(Vertex.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.VERTEX_PREFIX)) || (graphStep.getReturnClass().isAssignableFrom(Edge.class) && t.substring(t.indexOf(""String_Node_Str"") + 1).startsWith(SchemaManager.EDGE_PREFIX))) {
        SchemaTable schemaTable=SchemaTable.from(sqlgGraph,t,sqlgGraph.getSqlDialect().getPublicSchema());
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
 else {
    hasContainerWithLabel.forEach(h -> {
      String label=(graphStep.getReturnClass().isAssignableFrom(Vertex.class) ? SchemaManager.VERTEX_PREFIX : SchemaManager.EDGE_PREFIX) + h.getValue();
      SchemaTable schemaTableForLabel=SchemaTable.from(sqlgGraph,label,sqlgGraph.getSqlDialect().getPublicSchema());
      if (sqlgGraph.getSchemaManager().getAllTables().containsKey(schemaTableForLabel.toString())) {
        SchemaTable schemaTable=SchemaTable.from(sqlgGraph,label,sqlgGraph.getSqlDialect().getPublicSchema());
        SchemaTableTree schemaTableTree=new SchemaTableTree(sqlgGraph,schemaTable,1);
        schemaTableTree.setHasContainers(hasContainerWithoutLabel);
        schemaTableTree.setStepType(SchemaTableTree.STEP_TYPE.GRAPH_STEP);
        schemaTableTree.labels=ReplacedStep.this.labels;
        result.add(schemaTableTree);
      }
    }
);
  }
  return result;
}",0.4102054340622929
167097,"void removeNodesInvalidatedByHas(){
  Queue<SchemaTableTree> queue=new LinkedList<>();
  queue.add(this);
  while (!queue.isEmpty()) {
    SchemaTableTree current=queue.remove();
    if (invalidateByHas(current)) {
      removeNode(current);
    }
 else {
      queue.addAll(current.children);
    }
  }
}","boolean removeNodesInvalidatedByHas(){
  if (invalidateByHas(this)) {
    return true;
  }
 else {
    Queue<SchemaTableTree> queue=new LinkedList<>();
    queue.add(this);
    while (!queue.isEmpty()) {
      SchemaTableTree current=queue.remove();
      if (invalidateByHas(current)) {
        removeNode(current);
      }
 else {
        queue.addAll(current.children);
      }
    }
    return false;
  }
}",0.3552447552447552
167098,"/** 
 * Constructs a sql select statement from the SchemaTableTree call stack. The SchemaTableTree is not used as a tree. It is used only as as SchemaTable with a direction. first and last is needed to facilitate generating the from statement. If both first and last is true then the gremlin does not contain duplicate labels in its path and can be executed in one sql statement. If first and last is not equal then the sql will join across many select statements. The previous select needs to join onto the subsequent select. For this the from needs to select the appropriate field for the join.
 * @param distinctQueryStack
 * @param lastOfPrevious
 * @return
 */
private static String constructSinglePathSql(SqlgGraph sqlgGraph,LinkedList<SchemaTableTree> distinctQueryStack,SchemaTableTree lastOfPrevious,SchemaTableTree firstOfNextStack){
  String singlePathSql=""String_Node_Str"";
  SchemaTableTree firstSchemaTableTree=distinctQueryStack.getFirst();
  SchemaTable firstSchemaTable=firstSchemaTableTree.getSchemaTable();
  singlePathSql+=constructFromClause(sqlgGraph,distinctQueryStack,lastOfPrevious,firstOfNextStack);
  singlePathSql+=""String_Node_Str"";
  singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getSchema());
  singlePathSql+=""String_Node_Str"";
  singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getTable());
  SchemaTableTree previous=firstSchemaTableTree;
  boolean skipFirst=true;
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    singlePathSql+=constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree);
    previous=schemaTableTree;
  }
  if (lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    singlePathSql+=""String_Node_Str"";
    singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema());
    singlePathSql+=""String_Node_Str"";
    singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable());
    singlePathSql+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.ID);
    singlePathSql+=""String_Node_Str"";
  }
  boolean printedWhere=lastOfPrevious == null;
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    for (    HasContainer hasContainer : schemaTableTree.getHasContainers()) {
      if (!printedWhere) {
        printedWhere=true;
        singlePathSql+=""String_Node_Str"";
      }
 else {
        singlePathSql+=""String_Node_Str"";
      }
      singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getSchema());
      singlePathSql+=""String_Node_Str"";
      singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getTable());
      if (hasContainer.getKey().equals(T.id.getAccessor())) {
        singlePathSql+=""String_Node_Str"";
      }
 else {
        singlePathSql+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
      }
      singlePathSql+=""String_Node_Str"";
    }
  }
  return singlePathSql;
}","/** 
 * Constructs a sql select statement from the SchemaTableTree call stack. The SchemaTableTree is not used as a tree. It is used only as as SchemaTable with a direction. first and last is needed to facilitate generating the from statement. If both first and last is true then the gremlin does not contain duplicate labels in its path and can be executed in one sql statement. If first and last is not equal then the sql will join across many select statements. The previous select needs to join onto the subsequent select. For this the from needs to select the appropriate field for the join.
 * @param distinctQueryStack
 * @param lastOfPrevious
 * @return
 */
private static String constructSinglePathSql(SqlgGraph sqlgGraph,LinkedList<SchemaTableTree> distinctQueryStack,SchemaTableTree lastOfPrevious,SchemaTableTree firstOfNextStack){
  String singlePathSql=""String_Node_Str"";
  SchemaTableTree firstSchemaTableTree=distinctQueryStack.getFirst();
  SchemaTable firstSchemaTable=firstSchemaTableTree.getSchemaTable();
  singlePathSql+=constructFromClause(sqlgGraph,distinctQueryStack,lastOfPrevious,firstOfNextStack);
  singlePathSql+=""String_Node_Str"";
  singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getSchema());
  singlePathSql+=""String_Node_Str"";
  singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTableTree.getSchemaTable().getTable());
  SchemaTableTree previous=firstSchemaTableTree;
  boolean skipFirst=true;
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    if (skipFirst) {
      skipFirst=false;
      continue;
    }
    singlePathSql+=constructJoinBetweenSchemaTables(sqlgGraph,previous,schemaTableTree);
    previous=schemaTableTree;
  }
  if (lastOfPrevious == null && distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP) {
    singlePathSql+=""String_Node_Str"";
    singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getSchema());
    singlePathSql+=""String_Node_Str"";
    singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(firstSchemaTable.getTable());
    singlePathSql+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.ID);
    singlePathSql+=""String_Node_Str"";
  }
  boolean printedWhere=(lastOfPrevious == null) && (distinctQueryStack.getFirst().stepType != STEP_TYPE.GRAPH_STEP);
  for (  SchemaTableTree schemaTableTree : distinctQueryStack) {
    for (    HasContainer hasContainer : schemaTableTree.getHasContainers()) {
      if (!printedWhere) {
        printedWhere=true;
        singlePathSql+=""String_Node_Str"";
      }
 else {
        singlePathSql+=""String_Node_Str"";
      }
      singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getSchema());
      singlePathSql+=""String_Node_Str"";
      singlePathSql+=sqlgGraph.getSqlDialect().maybeWrapInQoutes(schemaTableTree.getSchemaTable().getTable());
      if (hasContainer.getKey().equals(T.id.getAccessor())) {
        singlePathSql+=""String_Node_Str"";
      }
 else {
        singlePathSql+=""String_Node_Str"" + sqlgGraph.getSqlDialect().maybeWrapInQoutes(hasContainer.getKey());
      }
      singlePathSql+=""String_Node_Str"";
    }
  }
  return singlePathSql;
}",0.989137181874612
167099,"public SqlgGraphStepCompiled(final SqlgGraph sqlgGraph,final Traversal.Admin traversal,final Class<S> returnClass,final Object... ids){
  super(traversal,returnClass,ids);
  this.sqlgGraph=sqlgGraph;
  if ((this.ids.length == 0 || !(this.ids[0] instanceof Element))) {
    if (Vertex.class.isAssignableFrom(this.returnClass)) {
      this.iteratorSupplier=this::elements;
    }
 else {
      this.iteratorSupplier=this::elements;
    }
  }
}","public SqlgGraphStepCompiled(final SqlgGraph sqlgGraph,final Traversal.Admin traversal,final Class<S> returnClass,final Object... ids){
  super(traversal,returnClass,ids);
  this.sqlgGraph=sqlgGraph;
  if ((this.ids.length == 0 || !(this.ids[0] instanceof Element))) {
    this.iteratorSupplier=this::elements;
  }
}",0.8348745046235139
167100,"private Iterator<Pair<E,Multimap<String,Object>>> elements(){
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTree=this.sqlgGraph.getGremlinParser().parse(this.replacedSteps);
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  SchemaTableTree schemaTableTree : rootSchemaTableTree) {
    List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
    for (    Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
      Connection conn=this.sqlgGraph.tx().getConnection();
      if (logger.isDebugEnabled()) {
        logger.debug(sqlPair.getRight());
      }
      try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
        SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement);
        ResultSet resultSet=preparedStatement.executeQuery();
        while (resultSet.next()) {
          Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSet,sqlPair.getLeft());
          resultIterator.add(result);
        }
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return resultIterator;
}","private Iterator<Pair<E,Multimap<String,Object>>> elements(){
  Preconditions.checkState(this.replacedSteps.size() > 0,""String_Node_Str"");
  Preconditions.checkState(this.replacedSteps.get(0).isGraphStep(),""String_Node_Str"");
  Set<SchemaTableTree> rootSchemaTableTree=this.sqlgGraph.getGremlinParser().parse(this.replacedSteps);
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  SchemaTableTree schemaTableTree : rootSchemaTableTree) {
    List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
    for (    Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
      Connection conn=this.sqlgGraph.tx().getConnection();
      if (logger.isDebugEnabled()) {
        logger.debug(sqlPair.getRight());
      }
      try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
        SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,1);
        ResultSet resultSet=preparedStatement.executeQuery();
        while (resultSet.next()) {
          Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSet,sqlPair.getLeft());
          resultIterator.add(result);
        }
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return resultIterator;
}",0.9993006993006992
167101,"/** 
 * Generate a query for the replaced steps. Each replaced step translates to a join statement and a section of the where clause.
 * @param replacedSteps
 * @return The results of the query
 */
private <S,E>Iterator<Pair<E,Multimap<String,Object>>> internalGetElements(List<ReplacedStep<S,E>> replacedSteps){
  SchemaTable schemaTable=getSchemaTablePrefixed();
  SchemaTableTree schemaTableTree=this.sqlgGraph.getGremlinParser().parse(schemaTable,replacedSteps);
  List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sqlPair.getRight());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
      preparedStatement.setLong(1,this.recordId.getId());
      SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement);
      ResultSet resultSet=preparedStatement.executeQuery();
      while (resultSet.next()) {
        Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSet,sqlPair.getLeft());
        resultIterator.add(result);
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return resultIterator;
}","/** 
 * Generate a query for the replaced steps. Each replaced step translates to a join statement and a section of the where clause.
 * @param replacedSteps
 * @return The results of the query
 */
private <S,E>Iterator<Pair<E,Multimap<String,Object>>> internalGetElements(List<ReplacedStep<S,E>> replacedSteps){
  SchemaTable schemaTable=getSchemaTablePrefixed();
  SchemaTableTree schemaTableTree=this.sqlgGraph.getGremlinParser().parse(schemaTable,replacedSteps);
  List<Pair<LinkedList<SchemaTableTree>,String>> sqlStatements=schemaTableTree.constructSql();
  SqlgCompiledResultIterator<Pair<E,Multimap<String,Object>>> resultIterator=new SqlgCompiledResultIterator<>();
  for (  Pair<LinkedList<SchemaTableTree>,String> sqlPair : sqlStatements) {
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sqlPair.getRight());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sqlPair.getRight())){
      preparedStatement.setLong(1,this.recordId.getId());
      SqlgUtil.setParametersOnStatement(this.sqlgGraph,sqlPair.getLeft(),conn,preparedStatement,2);
      ResultSet resultSet=preparedStatement.executeQuery();
      while (resultSet.next()) {
        Pair<E,Multimap<String,Object>> result=SqlgUtil.loadElementsLabeledAndEndElements(this.sqlgGraph,resultSet,sqlPair.getLeft());
        resultIterator.add(result);
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return resultIterator;
}",0.999340804218853
167102,"public static void setParametersOnStatement(SqlgGraph sqlgGraph,LinkedList<SchemaTableTree> schemaTableTreeStack,Connection conn,PreparedStatement preparedStatement) throws SQLException {
  int parameterIndex=2;
  Multimap<String,Object> keyValueMap=LinkedListMultimap.create();
  for (  SchemaTableTree schemaTableTree : schemaTableTreeStack) {
    for (    HasContainer hasContainer : schemaTableTree.getHasContainers()) {
      keyValueMap.put(hasContainer.getKey(),hasContainer.getValue());
    }
  }
  SqlgUtil.setKeyValuesAsParameter(sqlgGraph,parameterIndex,conn,preparedStatement,keyValueMap);
}","public static void setParametersOnStatement(SqlgGraph sqlgGraph,LinkedList<SchemaTableTree> schemaTableTreeStack,Connection conn,PreparedStatement preparedStatement,int parameterIndex) throws SQLException {
  Multimap<String,Object> keyValueMap=LinkedListMultimap.create();
  for (  SchemaTableTree schemaTableTree : schemaTableTreeStack) {
    for (    HasContainer hasContainer : schemaTableTree.getHasContainers()) {
      keyValueMap.put(hasContainer.getKey(),hasContainer.getValue());
    }
  }
  SqlgUtil.setKeyValuesAsParameter(sqlgGraph,parameterIndex,conn,preparedStatement,keyValueMap);
}",0.964196502914238
167103,"@Test public void testCompileGraphStep(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex a3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b11=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b12=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b13=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b21=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b22=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b23=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b31=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b32=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b33=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b11);
  a1.addEdge(""String_Node_Str"",b12);
  a1.addEdge(""String_Node_Str"",b13);
  a2.addEdge(""String_Node_Str"",b21);
  a2.addEdge(""String_Node_Str"",b22);
  a2.addEdge(""String_Node_Str"",b23);
  a3.addEdge(""String_Node_Str"",b31);
  a3.addEdge(""String_Node_Str"",b32);
  a3.addEdge(""String_Node_Str"",b33);
  this.sqlgGraph.tx().commit();
  GraphTraversalSource g=this.sqlgGraph.traversal();
  List<Vertex> vertexes=g.V().hasLabel(""String_Node_Str"").out(""String_Node_Str"").toList();
  Assert.assertEquals(9,vertexes.size());
  Assert.assertEquals(9,vertexes.size());
  Assert.assertTrue(vertexes.containsAll(Arrays.asList(b11,b12,b13,b21,b22,b23,b31,b32,b33)));
  GraphTraversal<Vertex,Map<String,Vertex>> gt=g.V().hasLabel(""String_Node_Str"").as(""String_Node_Str"").out(""String_Node_Str"").as(""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"");
  List<Map<String,Vertex>> list=gt.toList();
  Assert.assertEquals(9,list.size());
  Assert.assertEquals(a1,list.get(0).get(""String_Node_Str""));
  Assert.assertEquals(b11,list.get(0).get(""String_Node_Str""));
  Assert.assertEquals(a1,list.get(1).get(""String_Node_Str""));
  Assert.assertEquals(b12,list.get(1).get(""String_Node_Str""));
  Assert.assertEquals(a3,list.get(8).get(""String_Node_Str""));
  Assert.assertEquals(b33,list.get(8).get(""String_Node_Str""));
}","@Test public void testCompileGraphStep(){
  Vertex a1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex a2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex a3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b11=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b12=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b13=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b21=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b22=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b23=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b31=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b32=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  Vertex b33=this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  a1.addEdge(""String_Node_Str"",b11);
  a1.addEdge(""String_Node_Str"",b12);
  a1.addEdge(""String_Node_Str"",b13);
  a2.addEdge(""String_Node_Str"",b21);
  a2.addEdge(""String_Node_Str"",b22);
  a2.addEdge(""String_Node_Str"",b23);
  a3.addEdge(""String_Node_Str"",b31);
  a3.addEdge(""String_Node_Str"",b32);
  a3.addEdge(""String_Node_Str"",b33);
  this.sqlgGraph.tx().commit();
  GraphTraversalSource g=this.sqlgGraph.traversal();
  List<Vertex> vertexes=g.V().hasLabel(""String_Node_Str"").out(""String_Node_Str"").toList();
  Assert.assertEquals(9,vertexes.size());
  Assert.assertEquals(9,vertexes.size());
  Assert.assertTrue(vertexes.containsAll(Arrays.asList(b11,b12,b13,b21,b22,b23,b31,b32,b33)));
  vertexes=g.V().has(T.label,""String_Node_Str"").out(""String_Node_Str"").toList();
  Assert.assertEquals(9,vertexes.size());
  Assert.assertEquals(9,vertexes.size());
  Assert.assertTrue(vertexes.containsAll(Arrays.asList(b11,b12,b13,b21,b22,b23,b31,b32,b33)));
  vertexes=g.V().has(T.label,""String_Node_Str"").toList();
  Assert.assertEquals(3,vertexes.size());
  GraphTraversal<Vertex,Map<String,Vertex>> gt=g.V().hasLabel(""String_Node_Str"").as(""String_Node_Str"").out(""String_Node_Str"").as(""String_Node_Str"").select(""String_Node_Str"",""String_Node_Str"");
  List<Map<String,Vertex>> list=gt.toList();
  Assert.assertEquals(9,list.size());
  Assert.assertEquals(a1,list.get(0).get(""String_Node_Str""));
  Assert.assertEquals(b11,list.get(0).get(""String_Node_Str""));
  Assert.assertEquals(a1,list.get(1).get(""String_Node_Str""));
  Assert.assertEquals(b12,list.get(1).get(""String_Node_Str""));
  Assert.assertEquals(a3,list.get(8).get(""String_Node_Str""));
  Assert.assertEquals(b33,list.get(8).get(""String_Node_Str""));
}",0.7843470863462356
167104,"private Config configHazelcast(Configuration configuration){
  Config config=new Config();
  config.getNetworkConfig().setPort(5900);
  config.getNetworkConfig().setPortAutoIncrement(true);
  String[] ips=configuration.getStringArray(""String_Node_Str"");
  if (ips.length > 0) {
    NetworkConfig network=config.getNetworkConfig();
    JoinConfig join=network.getJoin();
    join.getMulticastConfig().setEnabled(false);
    for (    String member : ips) {
      join.getTcpIpConfig().addMember(member);
    }
    join.getTcpIpConfig().setEnabled(true);
  }
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  MapConfig schemaMapConfig=new MapConfig();
  schemaMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
  schemaMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(schemaMapConfig);
  MapConfig labelSchemasMapConfig=new MapConfig();
  labelSchemasMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
  labelSchemasMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(labelSchemasMapConfig);
  MapConfig tableMapConfig=new MapConfig();
  tableMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(tableMapConfig);
  MapConfig edgeForeignKeysMapConfig=new MapConfig();
  edgeForeignKeysMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
  edgeForeignKeysMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(edgeForeignKeysMapConfig);
  MapConfig tableLabelMapConfig=new MapConfig();
  tableLabelMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
  tableLabelMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(tableLabelMapConfig);
  return config;
}","private Config configHazelcast(Configuration configuration){
  Config config=new Config();
  config.getNetworkConfig().setPort(5900);
  config.getNetworkConfig().setPortAutoIncrement(true);
  String[] ips=configuration.getStringArray(""String_Node_Str"");
  if (ips.length > 0) {
    NetworkConfig network=config.getNetworkConfig();
    JoinConfig join=network.getJoin();
    join.getMulticastConfig().setEnabled(false);
    for (    String member : ips) {
      join.getTcpIpConfig().addMember(member);
    }
    join.getTcpIpConfig().setEnabled(true);
  }
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  MapConfig schemaMapConfig=new MapConfig();
  schemaMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + SCHEMAS_HAZELCAST_MAP);
  schemaMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(schemaMapConfig);
  MapConfig labelSchemasMapConfig=new MapConfig();
  labelSchemasMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + LABEL_SCHEMAS_HAZELCAST_MAP);
  labelSchemasMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(labelSchemasMapConfig);
  MapConfig tableMapConfig=new MapConfig();
  tableMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLES_HAZELCAST_MAP);
  tableMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(tableMapConfig);
  MapConfig edgeForeignKeysMapConfig=new MapConfig();
  edgeForeignKeysMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + EDGE_FOREIGN_KEYS_HAZELCAST_MAP);
  edgeForeignKeysMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(edgeForeignKeysMapConfig);
  MapConfig tableLabelMapConfig=new MapConfig();
  tableLabelMapConfig.setName(this.sqlgGraph.getConfiguration().getString(""String_Node_Str"") + TABLE_LABELS_HAZELCAST_MAP);
  tableLabelMapConfig.setNearCacheConfig(nearCacheConfig);
  config.addMapConfig(tableLabelMapConfig);
  return config;
}",0.7747281201450026
167105,"@Override public <V>Property<V> property(String key,V value){
  ElementHelper.validateProperty(key,value);
  this.sqlgGraph.getSqlDialect().validateProperty(key,value);
  sqlgGraph.tx().addElementPropertyRollback(this.elementPropertyRollback);
  PropertyType.from(value);
  this.sqlgGraph.getSchemaManager().ensureColumnExist(this.schema,this instanceof Vertex ? SchemaManager.VERTEX_PREFIX + this.table : SchemaManager.EDGE_PREFIX + this.table,ImmutablePair.of(key,PropertyType.from(value)));
  updateRow(key,value);
  return instantiateProperty(key,value);
}","@Override public <V>Property<V> property(String key,V value){
  ElementHelper.validateProperty(key,value);
  this.sqlgGraph.getSqlDialect().validateProperty(key,value);
  sqlgGraph.tx().addElementPropertyRollback(this.elementPropertyRollback);
  PropertyType.from(value);
  this.sqlgGraph.getSchemaManager().ensureColumnExist(this.schema,this instanceof Vertex ? SchemaManager.VERTEX_PREFIX + this.table : SchemaManager.EDGE_PREFIX + this.table,ImmutablePair.of(key,PropertyType.from(value)));
  load();
  updateRow(key,value);
  return instantiateProperty(key,value);
}",0.991150442477876
167106,"@Override public void flushVertexPropertyCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> schemaVertexPropertyCache){
  Connection conn=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : schemaVertexPropertyCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertexKeysPropertyCache=schemaVertexPropertyCache.get(schemaTable);
    SortedSet<String> keys=vertexKeysPropertyCache.getLeft();
    Map<SqlgVertex,Map<String,Object>> vertexPropertyCache=vertexKeysPropertyCache.getRight();
    StringBuilder sql=new StringBuilder();
    sql.append(""String_Node_Str"");
    sql.append(maybeWrapInQoutes(schemaTable.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
    sql.append(""String_Node_Str"");
    int count=1;
    for (    String key : keys) {
      sql.append(maybeWrapInQoutes(key));
      if (count++ < keys.size()) {
        sql.append(""String_Node_Str"");
      }
    }
    sql.append(""String_Node_Str"");
    count=1;
    for (    String key : keys) {
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(key));
      if (count++ < keys.size()) {
        sql.append(""String_Node_Str"");
      }
    }
    sql.append(""String_Node_Str"");
    count=1;
    for (    SqlgVertex sqlgVertex : vertexPropertyCache.keySet()) {
      Map<String,Object> properties=vertexPropertyCache.get(sqlgVertex);
      sql.append(""String_Node_Str"");
      sql.append(sqlgVertex.id());
      sql.append(""String_Node_Str"");
      int countProperties=1;
      for (      String key : keys) {
        Object value=properties.get(key);
        if (value != null) {
          PropertyType propertyType=PropertyType.from(value);
switch (propertyType) {
case BOOLEAN:
            sql.append(value);
          break;
case BYTE:
        sql.append(value);
      break;
case SHORT:
    sql.append(value);
  break;
case INTEGER:
sql.append(value);
break;
case LONG:
sql.append(value);
break;
case FLOAT:
sql.append(value);
break;
case DOUBLE:
sql.append(value);
break;
case STRING:
sql.append(""String_Node_Str"");
sql.append(value);
sql.append(""String_Node_Str"");
break;
case BOOLEAN_ARRAY:
break;
case BYTE_ARRAY:
break;
case SHORT_ARRAY:
break;
case INTEGER_ARRAY:
break;
case LONG_ARRAY:
break;
case FLOAT_ARRAY:
break;
case DOUBLE_ARRAY:
break;
case STRING_ARRAY:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 else {
sql.append(""String_Node_Str"");
}
if (countProperties++ < keys.size()) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
if (count++ < vertexPropertyCache.size()) {
sql.append(""String_Node_Str"");
}
sqlgVertex.reset();
}
sql.append(""String_Node_Str"");
count=1;
for (String key : keys) {
sql.append(maybeWrapInQoutes(key));
if (count++ < keys.size()) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (Statement statement=conn.createStatement()){
statement.execute(sql.toString());
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}","@Override public void flushVertexPropertyCache(SqlgGraph sqlgGraph,Map<SchemaTable,Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>>> schemaVertexPropertyCache){
  Connection conn=sqlgGraph.tx().getConnection();
  for (  SchemaTable schemaTable : schemaVertexPropertyCache.keySet()) {
    Pair<SortedSet<String>,Map<SqlgVertex,Map<String,Object>>> vertexKeysPropertyCache=schemaVertexPropertyCache.get(schemaTable);
    SortedSet<String> keys=vertexKeysPropertyCache.getLeft();
    Map<SqlgVertex,Map<String,Object>> vertexPropertyCache=vertexKeysPropertyCache.getRight();
    StringBuilder sql=new StringBuilder();
    sql.append(""String_Node_Str"");
    sql.append(maybeWrapInQoutes(schemaTable.getSchema()));
    sql.append(""String_Node_Str"");
    sql.append(maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
    sql.append(""String_Node_Str"");
    int count=1;
    for (    String key : keys) {
      sql.append(maybeWrapInQoutes(key));
      if (count++ < keys.size()) {
        sql.append(""String_Node_Str"");
      }
    }
    sql.append(""String_Node_Str"");
    count=1;
    for (    String key : keys) {
      sql.append(""String_Node_Str"");
      sql.append(maybeWrapInQoutes(key));
      if (count++ < keys.size()) {
        sql.append(""String_Node_Str"");
      }
    }
    sql.append(""String_Node_Str"");
    count=1;
    for (    SqlgVertex sqlgVertex : vertexPropertyCache.keySet()) {
      Map<String,Object> properties=vertexPropertyCache.get(sqlgVertex);
      sql.append(""String_Node_Str"");
      sql.append(sqlgVertex.id());
      sql.append(""String_Node_Str"");
      int countProperties=1;
      for (      String key : keys) {
        Object value=properties.get(key);
        if (value != null) {
          PropertyType propertyType=PropertyType.from(value);
switch (propertyType) {
case BOOLEAN:
            sql.append(value);
          break;
case BYTE:
        sql.append(value);
      break;
case SHORT:
    sql.append(value);
  break;
case INTEGER:
sql.append(value);
break;
case LONG:
sql.append(value);
break;
case FLOAT:
sql.append(value);
break;
case DOUBLE:
sql.append(value);
break;
case STRING:
sql.append(""String_Node_Str"");
sql.append(value);
sql.append(""String_Node_Str"");
break;
case BOOLEAN_ARRAY:
break;
case BYTE_ARRAY:
break;
case SHORT_ARRAY:
break;
case INTEGER_ARRAY:
break;
case LONG_ARRAY:
break;
case FLOAT_ARRAY:
break;
case DOUBLE_ARRAY:
break;
case STRING_ARRAY:
break;
default :
throw new IllegalStateException(""String_Node_Str"" + propertyType.name());
}
}
 else {
if (sqlgVertex.property(key).isPresent()) {
sql.append(""String_Node_Str"");
sql.append((Object)sqlgVertex.value(key));
sql.append(""String_Node_Str"");
}
 else {
sql.append(""String_Node_Str"");
}
}
if (countProperties++ < keys.size()) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
if (count++ < vertexPropertyCache.size()) {
sql.append(""String_Node_Str"");
}
sqlgVertex.reset();
}
sql.append(""String_Node_Str"");
count=1;
for (String key : keys) {
sql.append(maybeWrapInQoutes(key));
if (count++ < keys.size()) {
sql.append(""String_Node_Str"");
}
}
sql.append(""String_Node_Str"");
sql.append(""String_Node_Str"");
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (Statement statement=conn.createStatement()){
statement.execute(sql.toString());
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}",0.9756171437225504
167107,"void loadSchema(){
  try {
    Connection conn=SqlgDataSource.INSTANCE.get(this.sqlgGraph.getJdbcUrl()).getConnection();
    DatabaseMetaData metadata;
    metadata=conn.getMetaData();
    if (this.sqlDialect.supportSchemas()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String table=tablesRs.getString(3);
        final Map<String,PropertyType> uncomitedColumns=new ConcurrentHashMap<>();
        final Set<String> foreignKeys=new HashSet<>();
        ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
        while (columnsRs.next()) {
          String schema=columnsRs.getString(2);
          this.schemas.add(schema);
          String column=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          uncomitedColumns.put(column,propertyType);
          this.tables.put(schema + ""String_Node_Str"" + table,uncomitedColumns);
          Set<String> schemas=this.labelSchemas.get(table);
          if (schemas == null) {
            schemas=new HashSet<>();
            this.labelSchemas.put(table,schemas);
          }
          schemas.add(schema);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            foreignKeys.add(column);
            this.edgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
          }
        }
      }
    }
 else {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String db=tablesRs.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(db)) {
          String table=tablesRs.getString(3);
          final Map<String,PropertyType> uncomitedColumns=new ConcurrentHashMap<>();
          final Set<String> foreignKeys=new HashSet<>();
          ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
          while (columnsRs.next()) {
            String schema=columnsRs.getString(1);
            this.schemas.add(schema);
            String column=columnsRs.getString(4);
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncomitedColumns.put(column,propertyType);
            this.tables.put(schema + ""String_Node_Str"" + table,uncomitedColumns);
            Set<String> schemas=this.labelSchemas.get(table);
            if (schemas == null) {
              schemas=new HashSet<>();
              this.labelSchemas.put(table,schemas);
            }
            schemas.add(schema);
            if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
              foreignKeys.add(column);
              this.edgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            }
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}","void loadSchema(){
  try {
    Connection conn=SqlgDataSource.INSTANCE.get(this.sqlgGraph.getJdbcUrl()).getConnection();
    DatabaseMetaData metadata;
    metadata=conn.getMetaData();
    if (this.sqlDialect.supportSchemas()) {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String table=tablesRs.getString(3);
        final Map<String,PropertyType> uncomittedColumns=new ConcurrentHashMap<>();
        Set<String> foreignKeys=null;
        String previousSchema=""String_Node_Str"";
        ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
        while (columnsRs.next()) {
          String schema=columnsRs.getString(2);
          this.schemas.add(schema);
          if (!previousSchema.equals(schema)) {
            foreignKeys=new HashSet<>();
          }
          previousSchema=schema;
          String column=columnsRs.getString(4);
          int columnType=columnsRs.getInt(5);
          String typeName=columnsRs.getString(""String_Node_Str"");
          PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
          uncomittedColumns.put(column,propertyType);
          this.tables.put(schema + ""String_Node_Str"" + table,uncomittedColumns);
          Set<String> schemas=this.labelSchemas.get(table);
          if (schemas == null) {
            schemas=new HashSet<>();
            this.labelSchemas.put(table,schemas);
          }
          schemas.add(schema);
          if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
            foreignKeys.add(column);
            this.edgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
          }
        }
      }
    }
 else {
      String catalog=null;
      String schemaPattern=null;
      String tableNamePattern=null;
      String[] types=new String[]{""String_Node_Str""};
      ResultSet tablesRs=metadata.getTables(catalog,schemaPattern,tableNamePattern,types);
      while (tablesRs.next()) {
        String db=tablesRs.getString(1);
        if (!sqlDialect.getDefaultSchemas().contains(db)) {
          String table=tablesRs.getString(3);
          final Map<String,PropertyType> uncomitedColumns=new ConcurrentHashMap<>();
          final Set<String> foreignKeys=new HashSet<>();
          ResultSet columnsRs=metadata.getColumns(catalog,schemaPattern,table,null);
          while (columnsRs.next()) {
            String schema=columnsRs.getString(1);
            this.schemas.add(schema);
            String column=columnsRs.getString(4);
            int columnType=columnsRs.getInt(5);
            String typeName=columnsRs.getString(""String_Node_Str"");
            PropertyType propertyType=this.sqlDialect.sqlTypeToPropertyType(columnType,typeName);
            uncomitedColumns.put(column,propertyType);
            this.tables.put(schema + ""String_Node_Str"" + table,uncomitedColumns);
            Set<String> schemas=this.labelSchemas.get(table);
            if (schemas == null) {
              schemas=new HashSet<>();
              this.labelSchemas.put(table,schemas);
            }
            schemas.add(schema);
            if (table.startsWith(EDGE_PREFIX) && (column.endsWith(SchemaManager.IN_VERTEX_COLUMN_END) || column.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END))) {
              foreignKeys.add(column);
              this.edgeForeignKeys.put(schema + ""String_Node_Str"" + table,foreignKeys);
            }
          }
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0.9215502212686066
167108,"@Override public GraphTraversal<Edge,Edge> E(){
  this.tx().readWrite();
  final GraphTraversal traversal=new DefaultGraphTraversal<Object,Edge>();
  traversal.strategies().register(SqlGGraphStepStrategy.instance());
  traversal.strategies().register(SqlgHasStepStrategy.instance());
  traversal.addStep(new SqlgGraphStep(traversal,Edge.class,this));
  traversal.sideEffects().setGraph(this);
  return traversal;
}","@Override public GraphTraversal<Edge,Edge> E(){
  this.tx().readWrite();
  final GraphTraversal traversal=new DefaultGraphTraversal<Object,Edge>();
  traversal.getStrategies().register(SqlGGraphStepStrategy.instance());
  traversal.getStrategies().register(SqlgHasStepStrategy.instance());
  traversal.addStep(new SqlgGraphStep(traversal,Edge.class,this));
  traversal.sideEffects().setGraph(this);
  return traversal;
}",0.988009592326139
167109,"@Override public GraphTraversal<Vertex,Vertex> V(){
  this.tx().readWrite();
  final GraphTraversal traversal=new DefaultGraphTraversal<Object,Vertex>();
  traversal.strategies().register(SqlGGraphStepStrategy.instance());
  traversal.strategies().register(SqlgHasStepStrategy.instance());
  traversal.addStep(new SqlgGraphStep(traversal,Vertex.class,this));
  traversal.sideEffects().setGraph(this);
  return traversal;
}","@Override public GraphTraversal<Vertex,Vertex> V(){
  this.tx().readWrite();
  final GraphTraversal traversal=new DefaultGraphTraversal<Object,Vertex>();
  traversal.getStrategies().register(SqlGGraphStepStrategy.instance());
  traversal.getStrategies().register(SqlgHasStepStrategy.instance());
  traversal.addStep(new SqlgGraphStep(traversal,Vertex.class,this));
  traversal.sideEffects().setGraph(this);
  return traversal;
}",0.9882352941176472
167110,"@Override public <S>GraphTraversal<S,S> of(){
  final GraphTraversal<S,S> traversal=new DefaultGraphTraversal<>();
  traversal.strategies().register(SqlGGraphStepStrategy.instance());
  traversal.addStep(new StartStep<>(traversal));
  traversal.sideEffects().setGraph(this);
  return traversal;
}","@Override public <S>GraphTraversal<S,S> of(){
  final GraphTraversal<S,S> traversal=new DefaultGraphTraversal<>();
  traversal.getStrategies().register(SqlGGraphStepStrategy.instance());
  traversal.addStep(new StartStep<>(traversal));
  traversal.sideEffects().setGraph(this);
  return traversal;
}",0.9915966386554622
167111,"@Override public Edge e(final Object id){
  this.tx().readWrite();
  if (null == id)   throw Graph.Exceptions.elementNotFound(Edge.class,id);
  SqlgEdge sqlGEdge=null;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(this.sqlDialect.getPublicSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGES));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
  sql.append(""String_Node_Str"");
  if (this.getSqlDialect().needsSemicolon()) {
    sql.append(""String_Node_Str"");
  }
  Connection conn=this.tx().getConnection();
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
    Long idAsLong=evaluateToLong(id);
    preparedStatement.setLong(1,idAsLong);
    ResultSet resultSet=preparedStatement.executeQuery();
    while (resultSet.next()) {
      String schema=resultSet.getString(""String_Node_Str"");
      String table=resultSet.getString(""String_Node_Str"");
      sqlGEdge=new SqlgEdge(this,idAsLong,schema,table);
    }
    preparedStatement.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (sqlGEdge == null) {
    throw Graph.Exceptions.elementNotFound(Edge.class,id);
  }
  return sqlGEdge;
}","@Override public Edge e(final Object id){
  this.tx().readWrite();
  if (null == id)   throw Graph.Exceptions.elementNotFound(Edge.class,id);
  if (!(id instanceof Long))   throw new NoSuchElementException(id.toString());
  SqlgEdge sqlGEdge=null;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(this.sqlDialect.getPublicSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGES));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
  sql.append(""String_Node_Str"");
  if (this.getSqlDialect().needsSemicolon()) {
    sql.append(""String_Node_Str"");
  }
  Connection conn=this.tx().getConnection();
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
    Long idAsLong=evaluateToLong(id);
    preparedStatement.setLong(1,idAsLong);
    ResultSet resultSet=preparedStatement.executeQuery();
    while (resultSet.next()) {
      String schema=resultSet.getString(""String_Node_Str"");
      String table=resultSet.getString(""String_Node_Str"");
      sqlGEdge=new SqlgEdge(this,idAsLong,schema,table);
    }
    preparedStatement.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (sqlGEdge == null) {
    throw Graph.Exceptions.elementNotFound(Edge.class,id);
  }
  return sqlGEdge;
}",0.9727705922396188
167112,"@Override public Vertex v(final Object id){
  this.tx().readWrite();
  if (null == id)   throw Graph.Exceptions.elementNotFound(Vertex.class,id);
  SqlgVertex sqlGVertex=null;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(this.sqlDialect.getPublicSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTICES));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
  sql.append(""String_Node_Str"");
  if (this.getSqlDialect().needsSemicolon()) {
    sql.append(""String_Node_Str"");
  }
  Connection conn=this.tx().getConnection();
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
    Long idAsLong=evaluateToLong(id);
    preparedStatement.setLong(1,idAsLong);
    ResultSet resultSet=preparedStatement.executeQuery();
    while (resultSet.next()) {
      String schema=resultSet.getString(""String_Node_Str"");
      String table=resultSet.getString(""String_Node_Str"");
      sqlGVertex=SqlgVertex.of(this,idAsLong,schema,table);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (sqlGVertex == null) {
    throw Graph.Exceptions.elementNotFound(Vertex.class,id);
  }
  return sqlGVertex;
}","@Override public Vertex v(final Object id){
  this.tx().readWrite();
  if (null == id)   throw Graph.Exceptions.elementNotFound(Vertex.class,id);
  if (!(id instanceof Long))   throw new NoSuchElementException(id.toString());
  SqlgVertex sqlGVertex=null;
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.getSqlDialect().maybeWrapInQoutes(this.sqlDialect.getPublicSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTICES));
  sql.append(""String_Node_Str"");
  sql.append(this.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
  sql.append(""String_Node_Str"");
  if (this.getSqlDialect().needsSemicolon()) {
    sql.append(""String_Node_Str"");
  }
  Connection conn=this.tx().getConnection();
  if (logger.isDebugEnabled()) {
    logger.debug(sql.toString());
  }
  try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
    Long idAsLong=evaluateToLong(id);
    preparedStatement.setLong(1,idAsLong);
    ResultSet resultSet=preparedStatement.executeQuery();
    while (resultSet.next()) {
      String schema=resultSet.getString(""String_Node_Str"");
      String table=resultSet.getString(""String_Node_Str"");
      sqlGVertex=SqlgVertex.of(this,idAsLong,schema,table);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  if (sqlGVertex == null) {
    throw Graph.Exceptions.elementNotFound(Vertex.class,id);
  }
  return sqlGVertex;
}",0.97291807718348
167113,"@Override public <E extends Element>E element(){
  return (E)this.element;
}","@Override public Element element(){
  return this.element;
}",0.8823529411764706
167114,"public boolean isInBatchMode(){
  return threadLocalTx.get().getBatchManager().isBatchModeOn();
}","public boolean isInBatchMode(){
  if (threadLocalTx.get() != null) {
    return threadLocalTx.get().getBatchManager().isBatchModeOn();
  }
 else {
    return false;
  }
}",0.7265917602996255
167115,"@Override public GraphTraversal<Vertex,Vertex> start(){
  final GraphTraversal<Vertex,Vertex> traversal=GraphTraversal.of();
  traversal.strategies().register(SqlGGraphStepStrategy.instance());
  traversal.strategies().register(SqlgHasStepStrategy.instance());
  traversal.strategies().register(SqlgVertexStepStrategy.instance());
  return (GraphTraversal)traversal.addStep(new StartStep<>(traversal,this));
}","@Override public GraphTraversal<Vertex,Vertex> start(){
  final GraphTraversal<Vertex,Vertex> traversal=GraphTraversal.of();
  traversal.getStrategies().register(SqlGGraphStepStrategy.instance());
  traversal.getStrategies().register(SqlgHasStepStrategy.instance());
  traversal.getStrategies().register(SqlgVertexStepStrategy.instance());
  return (GraphTraversal)traversal.addStep(new StartStep<>(traversal,this));
}",0.9818621523579202
167116,"@Override public Vertex element(){
  return super.element();
}","@Override public Vertex element(){
  return (Vertex)super.element();
}",0.9393939393939394
167117,"@Test public void testEdgeIsToDifferentLabeledVertexes(){
  Vertex v1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex v2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex v3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v3);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(2,v1.out().count().next(),0);
  Set<String> names=new HashSet();
  v1.out().forEach(v -> names.add(v.<String>property(""String_Node_Str"").value()));
  Assert.assertTrue(names.contains(""String_Node_Str""));
  Assert.assertTrue(names.contains(""String_Node_Str""));
}","@Test public void testEdgeIsToDifferentLabeledVertexes(){
  Vertex v1=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex v2=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex v3=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  v1.addEdge(""String_Node_Str"",v2);
  v1.addEdge(""String_Node_Str"",v3);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(2,v1.out().count().next(),0);
  Set<String> names=new HashSet();
  v1.out().forEachRemaining(v -> names.add(v.<String>property(""String_Node_Str"").value()));
  Assert.assertTrue(names.contains(""String_Node_Str""));
  Assert.assertTrue(names.contains(""String_Node_Str""));
}",0.9940199335548172
167118,"@Test public void testNoResult(){
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  Vertex v=this.sqlgGraph.V().<Vertex>has(T.label,""String_Node_Str"").next();
  Assert.assertEquals(""String_Node_Str"",v.property(""String_Node_Str"").value());
  this.sqlgGraph.V().remove();
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(0,this.sqlgGraph.V().count().next(),0);
  Assert.assertEquals(0,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Set<Long> result=new HashSet<>();
  this.sqlgGraph.V().<Vertex>has(T.label,""String_Node_Str"").forEach(vertex -> result.add((Long)vertex.id()));
  Assert.assertEquals(0,result.size());
}","@Test public void testNoResult(){
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  Vertex v=this.sqlgGraph.V().<Vertex>has(T.label,""String_Node_Str"").next();
  Assert.assertEquals(""String_Node_Str"",v.property(""String_Node_Str"").value());
  this.sqlgGraph.V().remove();
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(0,this.sqlgGraph.V().count().next(),0);
  Assert.assertEquals(0,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Set<Long> result=new HashSet<>();
  this.sqlgGraph.V().<Vertex>has(T.label,""String_Node_Str"").forEachRemaining(vertex -> result.add((Long)vertex.id()));
  Assert.assertEquals(0,result.size());
}",0.9937802349689012
167119,"protected void printTraversalForm(final Traversal traversal){
  System.out.println(""String_Node_Str"" + traversal);
  traversal.strategies().apply(TraversalEngine.STANDARD);
  System.out.println(""String_Node_Str"" + traversal);
}","protected void printTraversalForm(final Traversal traversal){
  System.out.println(""String_Node_Str"" + traversal);
  traversal.getStrategies().apply(TraversalEngine.STANDARD);
  System.out.println(""String_Node_Str"" + traversal);
}",0.9890590809628008
167120,"private <S,E>List<Bindings<E>> toBindings(final Traversal<S,Map<String,E>> traversal){
  List<Bindings<E>> result=new LinkedList<>();
  traversal.forEach(o -> {
    result.add(new Bindings<>(o));
  }
);
  return result;
}","private <S,E>List<Bindings<E>> toBindings(final Traversal<S,Map<String,E>> traversal){
  List<Bindings<E>> result=new LinkedList<>();
  traversal.forEachRemaining(o -> {
    result.add(new Bindings<>(o));
  }
);
  return result;
}",0.9800443458980044
167121,"@Test public void shouldNotCallBaseFunctionThusNotRemovingTheVertex() throws Exception {
  Graph g=this.sqlgGraph;
  final StrategyWrappedGraph swg=new StrategyWrappedGraph(g);
  swg.strategy().setGraphStrategy(new GraphStrategy(){
    @Override public UnaryOperator<Supplier<Void>> getRemoveVertexStrategy(    final Strategy.Context<StrategyWrappedVertex> ctx){
      return (t) -> () -> {
        final Vertex v=ctx.getCurrent().getBaseVertex();
        v.bothE().remove();
        v.properties().forEachRemaining(Property::remove);
        v.property(""String_Node_Str"",true);
        return null;
      }
;
    }
  }
);
  final Vertex toRemove=g.addVertex(""String_Node_Str"",""String_Node_Str"");
  toRemove.addEdge(""String_Node_Str"",g.addVertex(""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,toRemove.properties().count().next(),0);
  assertEquals(new Long(1),toRemove.bothE().count().next());
  assertFalse(toRemove.property(""String_Node_Str"").isPresent());
  swg.v(toRemove.id()).remove();
  final Vertex removed=g.v(toRemove.id());
  assertNotNull(removed);
  assertEquals(1,removed.properties().count().next(),0);
  assertEquals(new Long(0),removed.bothE().count().next());
  assertTrue(toRemove.property(""String_Node_Str"").isPresent());
}","@Test public void shouldNotCallBaseFunctionThusNotRemovingTheVertex() throws Exception {
  Graph g=this.sqlgGraph;
  final StrategyWrappedGraph swg=new StrategyWrappedGraph(g);
  swg.getStrategy().setGraphStrategy(new GraphStrategy(){
    @Override public UnaryOperator<Supplier<Void>> getRemoveVertexStrategy(    final Strategy.Context<StrategyWrappedVertex> ctx){
      return (t) -> () -> {
        final Vertex v=ctx.getCurrent().getBaseVertex();
        v.bothE().remove();
        v.properties().forEachRemaining(Property::remove);
        v.property(""String_Node_Str"",true);
        return null;
      }
;
    }
  }
);
  final Vertex toRemove=g.addVertex(""String_Node_Str"",""String_Node_Str"");
  toRemove.addEdge(""String_Node_Str"",g.addVertex(""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,toRemove.properties().count().next(),0);
  assertEquals(new Long(1),toRemove.bothE().count().next());
  assertFalse(toRemove.property(""String_Node_Str"").isPresent());
  swg.v(toRemove.id()).remove();
  final Vertex removed=g.v(toRemove.id());
  assertNotNull(removed);
  assertEquals(1,removed.properties().count().next(),0);
  assertEquals(new Long(0),removed.bothE().count().next());
  assertTrue(toRemove.property(""String_Node_Str"").isPresent());
}",0.9980071741729772
167122,"@Test public void testEdgeBetweenSchemas(){
  Vertex john=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex tom=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex ape=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  john.addEdge(""String_Node_Str"",tom);
  john.addEdge(""String_Node_Str"",ape);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(3,this.sqlgGraph.V().count().next(),0);
  Assert.assertEquals(1,john.out(""String_Node_Str"").count().next(),0);
  Assert.assertEquals(tom,john.out(""String_Node_Str"").next());
  Assert.assertEquals(john,tom.in(""String_Node_Str"").next());
  Assert.assertEquals(2,this.sqlgGraph.E().count().next(),0);
  this.sqlgGraph.E().<Edge>has(T.label,""String_Node_Str"").forEach(a -> {
    Assert.assertEquals(john,a.outV().next());
    Assert.assertEquals(tom,a.inV().next());
  }
);
  Assert.assertEquals(2,this.sqlgGraph.V().<Vertex>has(T.label,(a,b) -> ((String)a).endsWith((String)b),""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,john.out(""String_Node_Str"").has(""String_Node_Str"",""String_Node_Str"").count().next(),0);
  Assert.assertEquals(2,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
}","@Test public void testEdgeBetweenSchemas(){
  Vertex john=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex tom=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Vertex ape=this.sqlgGraph.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  john.addEdge(""String_Node_Str"",tom);
  john.addEdge(""String_Node_Str"",ape);
  this.sqlgGraph.tx().commit();
  Assert.assertEquals(3,this.sqlgGraph.V().count().next(),0);
  Assert.assertEquals(1,john.out(""String_Node_Str"").count().next(),0);
  Assert.assertEquals(tom,john.out(""String_Node_Str"").next());
  Assert.assertEquals(john,tom.in(""String_Node_Str"").next());
  Assert.assertEquals(2,this.sqlgGraph.E().count().next(),0);
  this.sqlgGraph.E().<Edge>has(T.label,""String_Node_Str"").forEachRemaining(a -> {
    Assert.assertEquals(john,a.outV().next());
    Assert.assertEquals(tom,a.inV().next());
  }
);
  Assert.assertEquals(2,this.sqlgGraph.V().<Vertex>has(T.label,(a,b) -> ((String)a).endsWith((String)b),""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,john.out(""String_Node_Str"").has(""String_Node_Str"",""String_Node_Str"").count().next(),0);
  Assert.assertEquals(2,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
  Assert.assertEquals(1,this.sqlgGraph.V().has(T.label,""String_Node_Str"").count().next(),0);
}",0.9973174366616988
167123,"@Test public void hasNextCountBug(){
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  GraphTraversal<Vertex,Vertex> gt=this.sqlgGraph.V().has(T.label,""String_Node_Str"");
  assertTrue(gt.hasNext());
  assertEquals(3,gt.count().next().intValue());
}","@Test(expected=IllegalStateException.class) public void hasNextCountBug(){
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.addVertex(T.label,""String_Node_Str"");
  this.sqlgGraph.tx().commit();
  GraphTraversal<Vertex,Vertex> gt=this.sqlgGraph.V().has(T.label,""String_Node_Str"");
  assertTrue(gt.hasNext());
  assertEquals(3,gt.count().next().intValue());
}",0.9543269230769232
167124,"private String updateVertexLabels(String currentLabel,SchemaTable schemaTable){
  if (StringUtils.isEmpty(currentLabel) || currentLabel.equals(this.sqlDialect.getBatchNull())) {
    return schemaTable.toString();
  }
 else   if (currentLabel.contains(schemaTable.toString())) {
    return currentLabel;
  }
 else {
    return currentLabel + SchemaManager.LABEL_SEPERATOR + schemaTable.toString();
  }
}","private String updateVertexLabels(String currentLabel,SchemaTable schemaTable){
  if (StringUtils.isEmpty(currentLabel) || currentLabel.equals(this.sqlDialect.getBatchNull())) {
    return schemaTable.toString();
  }
 else   if (currentLabel.equals(schemaTable.toString()) || currentLabel.startsWith(schemaTable.toString() + SchemaManager.LABEL_SEPERATOR) || currentLabel.contains(SchemaManager.LABEL_SEPERATOR + schemaTable.toString() + SchemaManager.LABEL_SEPERATOR)|| currentLabel.endsWith(schemaTable.toString() + SchemaManager.LABEL_SEPERATOR)) {
    return currentLabel;
  }
 else {
    return currentLabel + SchemaManager.LABEL_SEPERATOR + schemaTable.toString();
  }
}",0.7328385899814471
167125,"@Override protected void load(){
  if (this.properties.isEmpty()) {
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setLong(1,this.primaryKey);
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{this.schema + ""String_Node_Str"" + this.table,this.primaryKey}));
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}","@Override protected void load(){
  if ((!this.sqlgGraph.tx().isInBatchMode() && this.properties.isEmpty()) || (this.properties.isEmpty() && this.sqlgGraph.features().supportsBatchMode() && this.sqlgGraph.tx().isInBatchMode()&& !this.sqlgGraph.tx().getBatchManager().vertexIsCached(this))) {
    StringBuilder sql=new StringBuilder(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(this.schema));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + this.table));
    sql.append(""String_Node_Str"");
    sql.append(this.sqlgGraph.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
    sql.append(""String_Node_Str"");
    if (this.sqlgGraph.getSqlDialect().needsSemicolon()) {
      sql.append(""String_Node_Str"");
    }
    Connection conn=this.sqlgGraph.tx().getConnection();
    if (logger.isDebugEnabled()) {
      logger.debug(sql.toString());
    }
    try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
      preparedStatement.setLong(1,this.primaryKey);
      ResultSet resultSet=preparedStatement.executeQuery();
      if (resultSet.next()) {
        loadResultSet(resultSet);
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",new Object[]{this.schema + ""String_Node_Str"" + this.table,this.primaryKey}));
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
}",0.918702150929639
167126,"void ensureVertexTableExist(final String schema,final String table,final Object... keyValues){
  Objects.requireNonNull(schema,""String_Node_Str"");
  Objects.requireNonNull(table,""String_Node_Str"");
  final String prefixedTable=VERTEX_PREFIX + table;
  final ConcurrentHashMap<String,PropertyType> columns=SqlgUtil.transformToColumnDefinitionMap(keyValues);
  if (!this.tables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
    if (!this.schemaLock.isHeldByCurrentThread()) {
      this.schemaLock.lock();
    }
    if (!this.sqlDialect.getPublicSchema().equals(schema) && !this.schemas.contains(schema)) {
      if (!this.uncommittedSchemas.contains(schema)) {
        this.uncommittedSchemas.add(schema);
        createSchema(schema);
      }
    }
    if (!this.tables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
      if (!this.uncommittedTables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
        Set<String> schemas=this.uncommittedLabelSchemas.get(prefixedTable);
        if (schemas == null) {
          this.uncommittedLabelSchemas.put(prefixedTable,new HashSet<>(Arrays.asList(schema)));
        }
 else {
          schemas.add(schema);
          this.uncommittedLabelSchemas.put(prefixedTable,schemas);
        }
        this.uncommittedTables.put(schema + ""String_Node_Str"" + prefixedTable,columns);
        createVertexTable(schema,prefixedTable,columns);
      }
    }
  }
  columns.forEach((k,v) -> ensureColumnExist(schema,prefixedTable,ImmutablePair.of(k,v)));
}","void ensureVertexTableExist(final String schema,final String table,final Object... keyValues){
  Objects.requireNonNull(schema,""String_Node_Str"");
  Objects.requireNonNull(table,""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    System.out.println(table);
  }
  final String prefixedTable=VERTEX_PREFIX + table;
  final ConcurrentHashMap<String,PropertyType> columns=SqlgUtil.transformToColumnDefinitionMap(keyValues);
  if (!this.tables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
    if (!this.schemaLock.isHeldByCurrentThread()) {
      this.schemaLock.lock();
    }
    if (!this.sqlDialect.getPublicSchema().equals(schema) && !this.schemas.contains(schema)) {
      if (!this.uncommittedSchemas.contains(schema)) {
        this.uncommittedSchemas.add(schema);
        createSchema(schema);
      }
    }
    if (!this.tables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
      if (!this.uncommittedTables.containsKey(schema + ""String_Node_Str"" + prefixedTable)) {
        Set<String> schemas=this.uncommittedLabelSchemas.get(prefixedTable);
        if (schemas == null) {
          this.uncommittedLabelSchemas.put(prefixedTable,new HashSet<>(Arrays.asList(schema)));
        }
 else {
          schemas.add(schema);
          this.uncommittedLabelSchemas.put(prefixedTable,schemas);
        }
        this.uncommittedTables.put(schema + ""String_Node_Str"" + prefixedTable,columns);
        createVertexTable(schema,prefixedTable,columns);
      }
    }
  }
  columns.forEach((k,v) -> ensureColumnExist(schema,prefixedTable,ImmutablePair.of(k,v)));
}",0.975609756097561
167127,"private SqlG(final Configuration configuration){
  try {
    Class<?> sqlDialectClass=Class.forName(configuration.getString(""String_Node_Str""));
    Constructor<?> constructor=sqlDialectClass.getConstructor(Configuration.class);
    this.sqlDialect=(SqlDialect)constructor.newInstance(configuration);
    this.implementForeignKeys=configuration.getBoolean(""String_Node_Str"",false);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    this.jdbcUrl=configuration.getString(""String_Node_Str"");
    SqlgDataSource.INSTANCE.setupDataSource(sqlDialect.getJdbcDriver(),configuration.getString(""String_Node_Str""),configuration.getString(""String_Node_Str""),configuration.getString(""String_Node_Str""));
    this.sqlDialect.prepareDB(SqlgDataSource.INSTANCE.get(configuration.getString(""String_Node_Str"")).getConnection());
  }
 catch (  PropertyVetoException e) {
    throw new RuntimeException(e);
  }
catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  this.sqlgTransaction=new SqlgTransaction(this);
  this.tx().readWrite();
  this.schemaManager=new SchemaManager(this,sqlDialect);
  this.schemaManager.loadSchema();
  if (!this.sqlDialect.supportSchemas() && !this.schemaManager.existSchema(this.sqlDialect.getPublicSchema())) {
    this.schemaManager.createSchema(this.sqlDialect.getPublicSchema());
  }
  this.schemaManager.ensureGlobalVerticesTableExist();
  this.schemaManager.ensureGlobalEdgesTableExist();
  this.tx().commit();
}","private SqlG(final Configuration configuration){
  try {
    Class<?> sqlDialectClass=Class.forName(configuration.getString(""String_Node_Str""));
    Constructor<?> constructor=sqlDialectClass.getConstructor(Configuration.class);
    this.sqlDialect=(SqlDialect)constructor.newInstance(configuration);
    this.implementForeignKeys=configuration.getBoolean(""String_Node_Str"",false);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    this.jdbcUrl=configuration.getString(""String_Node_Str"");
    SqlgDataSource.INSTANCE.setupDataSource(sqlDialect.getJdbcDriver(),configuration.getString(""String_Node_Str""),configuration.getString(""String_Node_Str""),configuration.getString(""String_Node_Str""));
    this.sqlDialect.prepareDB(SqlgDataSource.INSTANCE.get(configuration.getString(""String_Node_Str"")).getConnection());
  }
 catch (  PropertyVetoException e) {
    throw new RuntimeException(e);
  }
catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  this.sqlgTransaction=new SqlgTransaction(this);
  this.tx().readWrite();
  this.schemaManager=new SchemaManager(this,sqlDialect);
  this.schemaManager.loadSchema();
  if (!this.sqlDialect.supportSchemas() && !this.schemaManager.schemaExist(this.sqlDialect.getPublicSchema())) {
    this.schemaManager.createSchema(this.sqlDialect.getPublicSchema());
  }
  this.schemaManager.ensureGlobalVerticesTableExist();
  this.schemaManager.ensureGlobalEdgesTableExist();
  this.tx().commit();
}",0.8832315003394433
167128,"private Iterable<? extends Vertex> _verticesUsingLabel(String label){
  Set<String> schemas;
  SchemaTable schemaTable=SqlgUtil.parseLabelMaybeNoSchema(label);
  if (schemaTable.getSchema() == null) {
    schemas=this.sqlG.getSchemaManager().getSchemasForTable(SchemaManager.VERTEX_PREFIX + schemaTable.getTable());
  }
 else {
    schemas=new HashSet<>();
    schemas.add(schemaTable.getSchema());
  }
  List<SqlgVertex> sqlGVertexes=new ArrayList<>();
  if (schemas != null) {
    for (    String schema : schemas) {
      StringBuilder sql=new StringBuilder(""String_Node_Str"");
      sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schema));
      sql.append(""String_Node_Str"");
      sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
      if (this.sqlG.getSqlDialect().needsSemicolon()) {
        sql.append(""String_Node_Str"");
      }
      Connection conn=this.sqlG.tx().getConnection();
      if (logger.isDebugEnabled()) {
        logger.debug(sql.toString());
      }
      try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
        ResultSet resultSet=preparedStatement.executeQuery();
        while (resultSet.next()) {
          long id=resultSet.getLong(1);
          SqlgVertex sqlGVertex=new SqlgVertex(this.sqlG,id,schema,schemaTable.getTable());
          sqlGVertex.loadResultSet(resultSet);
          sqlGVertexes.add(sqlGVertex);
        }
      }
 catch (      SQLException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return sqlGVertexes;
}","private Iterable<? extends Vertex> _verticesUsingLabel(String label){
  Set<String> schemas;
  SchemaTable schemaTable=SqlgUtil.parseLabelMaybeNoSchema(label);
  if (schemaTable.getSchema() == null) {
    schemas=this.sqlG.getSchemaManager().getSchemasForTable(SchemaManager.VERTEX_PREFIX + schemaTable.getTable());
  }
 else {
    schemas=new HashSet<>();
    schemas.add(schemaTable.getSchema());
  }
  List<SqlgVertex> sqlGVertexes=new ArrayList<>();
  if (schemas != null) {
    for (    String schema : schemas) {
      if (this.sqlG.getSchemaManager().tableExist(schema,SchemaManager.VERTEX_PREFIX + schemaTable.getTable())) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schema));
        sql.append(""String_Node_Str"");
        sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + schemaTable.getTable()));
        if (this.sqlG.getSqlDialect().needsSemicolon()) {
          sql.append(""String_Node_Str"");
        }
        Connection conn=this.sqlG.tx().getConnection();
        if (logger.isDebugEnabled()) {
          logger.debug(sql.toString());
        }
        try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
          ResultSet resultSet=preparedStatement.executeQuery();
          while (resultSet.next()) {
            long id=resultSet.getLong(1);
            SqlgVertex sqlGVertex=new SqlgVertex(this.sqlG,id,schema,schemaTable.getTable());
            sqlGVertex.loadResultSet(resultSet);
            sqlGVertexes.add(sqlGVertex);
          }
        }
 catch (        SQLException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  return sqlGVertexes;
}",0.7842548076923077
167129,"@Test public void testLoadSchemaWithArraysWithoutFloat() throws Exception {
  Assume.assumeTrue(this.sqlG.getSqlDialect().supportsBooleanArrayValues() && this.sqlG.getSqlDialect().supportsLongArrayValues() && this.sqlG.getSqlDialect().supportsIntegerArrayValues()&& this.sqlG.getSqlDialect().supportsDoubleArrayValues()&& this.sqlG.getSqlDialect().supportsStringArrayValues());
  this.sqlG.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new boolean[]{true},""String_Node_Str"",new short[]{(short)1},""String_Node_Str"",new int[]{1},""String_Node_Str"",new long[]{1L},""String_Node_Str"",new double[]{1D},""String_Node_Str"",new String[]{""String_Node_Str""});
  this.sqlG.tx().commit();
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  Iterator<Vertex> iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  Vertex v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
  this.sqlG.close();
  this.sqlG.open(configuration);
  iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
}","@Test public void testLoadSchemaWithArraysWithoutFloat() throws Exception {
  Assume.assumeTrue(this.sqlG.getSqlDialect().supportsBooleanArrayValues() && this.sqlG.getSqlDialect().supportsLongArrayValues() && this.sqlG.getSqlDialect().supportsIntegerArrayValues()&& this.sqlG.getSqlDialect().supportsDoubleArrayValues()&& this.sqlG.getSqlDialect().supportsStringArrayValues());
  this.sqlG.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new boolean[]{true},""String_Node_Str"",new short[]{(short)1},""String_Node_Str"",new int[]{1},""String_Node_Str"",new long[]{1L},""String_Node_Str"",new double[]{1D},""String_Node_Str"",new String[]{""String_Node_Str""});
  this.sqlG.tx().commit();
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  Iterator<Vertex> iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  Vertex v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
}",0.9989056686364632
167130,"@Test public void testLoadSchemaWithArrays() throws Exception {
  Assume.assumeTrue(this.sqlG.getSqlDialect().supportsBooleanArrayValues() && this.sqlG.getSqlDialect().supportsFloatArrayValues() && this.sqlG.getSqlDialect().supportsLongArrayValues()&& this.sqlG.getSqlDialect().supportsIntegerArrayValues()&& this.sqlG.getSqlDialect().supportsDoubleArrayValues()&& this.sqlG.getSqlDialect().supportsStringArrayValues());
  this.sqlG.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new boolean[]{true},""String_Node_Str"",new short[]{(short)1},""String_Node_Str"",new int[]{1},""String_Node_Str"",new long[]{1L},""String_Node_Str"",new float[]{1F},""String_Node_Str"",new double[]{1D},""String_Node_Str"",new String[]{""String_Node_Str""});
  this.sqlG.tx().commit();
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  Iterator<Vertex> iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  Vertex v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new float[]{1f},(float[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
  this.sqlG.close();
  this.sqlG.open(configuration);
  iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new float[]{1f},(float[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
}","@Test public void testLoadSchemaWithArrays() throws Exception {
  Assume.assumeTrue(this.sqlG.getSqlDialect().supportsBooleanArrayValues() && this.sqlG.getSqlDialect().supportsFloatArrayValues() && this.sqlG.getSqlDialect().supportsLongArrayValues()&& this.sqlG.getSqlDialect().supportsIntegerArrayValues()&& this.sqlG.getSqlDialect().supportsDoubleArrayValues()&& this.sqlG.getSqlDialect().supportsStringArrayValues());
  this.sqlG.addVertex(T.label,""String_Node_Str"",""String_Node_Str"",new boolean[]{true},""String_Node_Str"",new short[]{(short)1},""String_Node_Str"",new int[]{1},""String_Node_Str"",new long[]{1L},""String_Node_Str"",new float[]{1F},""String_Node_Str"",new double[]{1D},""String_Node_Str"",new String[]{""String_Node_Str""});
  this.sqlG.tx().commit();
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  Iterator<Vertex> iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  Vertex v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new float[]{1f},(float[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
  this.sqlG.close();
  this.sqlG=SqlG.open(configuration);
  iter=this.sqlG.V().has(T.label,""String_Node_Str"");
  Assert.assertTrue(iter.hasNext());
  v=iter.next();
  Assert.assertTrue(Arrays.equals(new boolean[]{true},(boolean[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new short[]{(short)1},(short[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new int[]{1},(int[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new long[]{1l},(long[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new float[]{1f},(float[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new double[]{1d},(double[])v.property(""String_Node_Str"").value()));
  Assert.assertTrue(Arrays.equals(new String[]{""String_Node_Str""},(String[])v.property(""String_Node_Str"").value()));
}",0.99902400936951
167131,"private Iterator<SqlgVertex> internalGetVertices(List<HasContainer> hasContainers,Direction direction,String... labels){
  if (this.sqlG.features().supportsBatchMode() && this.sqlG.tx().isInBatchMode() && this.sqlG.tx().getBatchManager().vertexIsCached(this)) {
    List<SqlgVertex> vertices=this.sqlG.tx().getBatchManager().getVertices(this,direction,labels);
    return vertices.stream().filter(v -> HasContainer.testAll(v,hasContainers)).iterator();
  }
 else {
    List<SqlgVertex> vertices=new ArrayList<>();
    List<HasContainer> labelHasContainers=filterHasContainerOnKey(hasContainers,T.label.getAccessor());
    Set<String> hasContainerLabels=extractLabelsFromHasContainer(labelHasContainers);
    List<Direction> directions=new ArrayList<>(2);
    Set<SchemaTable> inVertexLabels=new HashSet<>();
    Set<SchemaTable> outVertexLabels=new HashSet<>();
    if (direction == Direction.IN) {
      inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,true));
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
      }
      directions.add(direction);
    }
 else     if (direction == Direction.OUT) {
      outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,false));
      if (labels.length > 0) {
        retainLabels(outVertexLabels,labels);
      }
      directions.add(direction);
    }
 else {
      inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,true));
      outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,false));
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
        retainLabels(outVertexLabels,labels);
      }
      directions.add(Direction.IN);
      directions.add(Direction.OUT);
    }
    for (    Direction d : directions) {
      for (      SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
        if (this.sqlG.getSchemaManager().tableExist(schemaTable.getSchema(),SchemaManager.EDGE_PREFIX + schemaTable.getTable())) {
          Set<String> edgeForeignKeys=this.sqlG.getSchemaManager().getEdgeForeignKeys(schemaTable.getSchema() + ""String_Node_Str"" + SchemaManager.EDGE_PREFIX+ schemaTable.getTable());
          Set<SchemaTable> tables;
switch (d) {
case IN:
            tables=transformToOutSchemaTables(edgeForeignKeys,hasContainerLabels);
          break;
case OUT:
        tables=transformToInSchemaTables(edgeForeignKeys,hasContainerLabels);
      break;
default :
    throw new IllegalStateException(""String_Node_Str"");
}
for (SchemaTable joinSchemaTable : tables) {
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
  sql.append(""String_Node_Str"");
switch (d) {
case IN:
    sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
  sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.sqlG.getSqlDialect().hasContainerKeyToColumn(hasContainer.key)));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
case OUT:
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.sqlG.getSqlDialect().hasContainerKeyToColumn(hasContainer.key)));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
if (this.sqlG.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlG.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.primaryKey);
break;
case OUT:
preparedStatement.setLong(1,this.primaryKey);
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
int countHasContainers=2;
for (HasContainer hasContainer : hasContainers) {
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(hasContainer.key));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
Map<String,Object> keyValues=new HashMap<>();
keyValues.put(hasContainer.key,hasContainer.value);
SqlgElement.setKeyValuesAsParameter(this.sqlG,countHasContainers++,conn,preparedStatement,keyValues);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() && outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() && outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (!(columnName.equals(""String_Node_Str"") || inVertexColumnNames.contains(columnName) || outVertexColumnNames.contains(columnName))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlgVertex sqlGVertex=null;
switch (d) {
case IN:
sqlGVertex=SqlgVertex.of(this.sqlG,outId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
Map<String,Object> keyValueMap=SqlgUtil.transformToInsertValues(keyValues);
this.properties.clear();
this.properties.putAll(keyValueMap);
break;
case OUT:
sqlGVertex=SqlgVertex.of(this.sqlG,inId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
keyValueMap=SqlgUtil.transformToInsertValues(keyValues);
this.properties.clear();
this.properties.putAll(keyValueMap);
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
vertices.add(sqlGVertex);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
}
return vertices.iterator();
}
}","private Iterator<SqlgVertex> internalGetVertices(List<HasContainer> hasContainers,Direction direction,String... labels){
  if (this.sqlG.features().supportsBatchMode() && this.sqlG.tx().isInBatchMode() && this.sqlG.tx().getBatchManager().vertexIsCached(this)) {
    List<SqlgVertex> vertices=this.sqlG.tx().getBatchManager().getVertices(this,direction,labels);
    return vertices.stream().filter(v -> HasContainer.testAll(v,hasContainers)).iterator();
  }
 else {
    List<SqlgVertex> vertices=new ArrayList<>();
    List<HasContainer> labelHasContainers=filterHasContainerOnKey(hasContainers,T.label.getAccessor());
    Set<String> hasContainerLabels=extractLabelsFromHasContainer(labelHasContainers);
    List<Direction> directions=new ArrayList<>(2);
    Set<SchemaTable> inVertexLabels=new HashSet<>();
    Set<SchemaTable> outVertexLabels=new HashSet<>();
    if (direction == Direction.IN) {
      inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,true));
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
      }
      directions.add(direction);
    }
 else     if (direction == Direction.OUT) {
      outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,false));
      if (labels.length > 0) {
        retainLabels(outVertexLabels,labels);
      }
      directions.add(direction);
    }
 else {
      inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,true));
      outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex(this,false));
      if (labels.length > 0) {
        retainLabels(inVertexLabels,labels);
        retainLabels(outVertexLabels,labels);
      }
      directions.add(Direction.IN);
      directions.add(Direction.OUT);
    }
    for (    Direction d : directions) {
      for (      SchemaTable schemaTable : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
        if (this.sqlG.getSchemaManager().tableExist(schemaTable.getSchema(),SchemaManager.EDGE_PREFIX + schemaTable.getTable())) {
          Set<String> edgeForeignKeys=this.sqlG.getSchemaManager().getEdgeForeignKeys(schemaTable.getSchema() + ""String_Node_Str"" + SchemaManager.EDGE_PREFIX+ schemaTable.getTable());
          Set<SchemaTable> tables;
switch (d) {
case IN:
            tables=transformToOutSchemaTables(edgeForeignKeys,hasContainerLabels);
          break;
case OUT:
        tables=transformToInSchemaTables(edgeForeignKeys,hasContainerLabels);
      break;
default :
    throw new IllegalStateException(""String_Node_Str"");
}
for (SchemaTable joinSchemaTable : tables) {
  StringBuilder sql=new StringBuilder(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
  sql.append(""String_Node_Str"");
  sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
  sql.append(""String_Node_Str"");
switch (d) {
case IN:
    sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
  sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.sqlG.getSqlDialect().hasContainerKeyToColumn(hasContainer.key)));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
case OUT:
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + schemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema() + ""String_Node_Str"" + joinSchemaTable.getTable()+ SchemaManager.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.schema + ""String_Node_Str"" + this.table+ SchemaManager.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
for (HasContainer hasContainer : hasContainers) {
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(joinSchemaTable.getSchema()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTEX_PREFIX + joinSchemaTable.getTable()));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(this.sqlG.getSqlDialect().hasContainerKeyToColumn(hasContainer.key)));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
sql.append(""String_Node_Str"");
}
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
if (this.sqlG.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlG.tx().getConnection();
if (logger.isDebugEnabled()) {
logger.debug(sql.toString());
}
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.primaryKey);
break;
case OUT:
preparedStatement.setLong(1,this.primaryKey);
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
int countHasContainers=2;
for (HasContainer hasContainer : hasContainers) {
sql.append(this.sqlG.getSqlDialect().maybeWrapInQoutes(hasContainer.key));
if (!hasContainer.predicate.equals(Compare.eq)) {
throw new IllegalStateException(""String_Node_Str"");
}
Map<String,Object> keyValues=new HashMap<>();
keyValues.put(hasContainer.key,hasContainer.value);
SqlgElement.setKeyValuesAsParameter(this.sqlG,countHasContainers++,conn,preparedStatement,keyValues);
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (columnName.endsWith(SchemaManager.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SchemaManager.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() && outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() && outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (!(columnName.equals(""String_Node_Str"") || inVertexColumnNames.contains(columnName) || outVertexColumnNames.contains(columnName))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlgVertex sqlGVertex=null;
switch (d) {
case IN:
sqlGVertex=SqlgVertex.of(this.sqlG,outId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
Map<String,Object> keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
break;
case OUT:
sqlGVertex=SqlgVertex.of(this.sqlG,inId,joinSchemaTable.getSchema(),joinSchemaTable.getTable());
keyValueMap=SqlgUtil.transformToInsertValues(keyValues.toArray());
sqlGVertex.properties.clear();
sqlGVertex.properties.putAll(keyValueMap);
sqlGVertex=new SqlgVertex(this.sqlG,inId,joinSchemaTable.getSchema(),joinSchemaTable.getTable(),keyValues.toArray());
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
vertices.add(sqlGVertex);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
}
return vertices.iterator();
}
}",0.9875568523127092
167132,"@Override public void flushRemovedVertices(SqlG sqlG,Map<SchemaTable,List<SqlgVertex>> removeVertexCache){
  if (!removeVertexCache.isEmpty()) {
    for (    Map.Entry<SchemaTable,List<SqlgVertex>> schemaVertices : removeVertexCache.entrySet()) {
      SchemaTable schemaTable=schemaVertices.getKey();
      logger.info(""String_Node_Str"" + schemaTable.toString());
      dropForeignKeys(sqlG,schemaTable);
      List<SqlgVertex> vertices=schemaVertices.getValue();
      int numberOfLoops=(vertices.size() / PARAMETER_LIMIT);
      int previous=0;
      for (int i=1; i <= numberOfLoops + 1; i++) {
        int sublistTo=i * PARAMETER_LIMIT;
        List<SqlgVertex> subVertices;
        if (i <= numberOfLoops) {
          subVertices=vertices.subList(previous,sublistTo);
        }
 else {
          subVertices=vertices.subList(previous,vertices.size());
        }
        previous=sublistTo;
        if (!subVertices.isEmpty()) {
          Pair<Set<Long>,Set<SchemaTable>> outLabels=Pair.of(new HashSet<Long>(),new HashSet<SchemaTable>());
          Pair<Set<Long>,Set<SchemaTable>> inLabels=Pair.of(new HashSet<Long>(),new HashSet<SchemaTable>());
          getInAndOutEdgesToRemove(sqlG,subVertices,outLabels,inLabels);
          deleteEdges(sqlG,schemaTable,outLabels,true);
          deleteEdges(sqlG,schemaTable,inLabels,false);
          StringBuilder sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes((SchemaManager.VERTEX_PREFIX) + schemaTable.getTable()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
          sql.append(""String_Node_Str"");
          int count=1;
          for (          SqlgVertex sqlgVertex : subVertices) {
            sql.append(""String_Node_Str"");
            if (count++ < subVertices.size()) {
              sql.append(""String_Node_Str"");
            }
          }
          sql.append(""String_Node_Str"");
          if (sqlG.getSqlDialect().needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          if (logger.isDebugEnabled()) {
            logger.debug(sql.toString());
          }
          Connection conn=sqlG.tx().getConnection();
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            count=1;
            for (            SqlgVertex sqlgVertex : subVertices) {
              preparedStatement.setLong(count++,(Long)sqlgVertex.id());
            }
            preparedStatement.executeUpdate();
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
          sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(sqlG.getSqlDialect().getPublicSchema()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTICES));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
          sql.append(""String_Node_Str"");
          count=1;
          for (          SqlgVertex vertex : subVertices) {
            sql.append(""String_Node_Str"");
            if (count++ < subVertices.size()) {
              sql.append(""String_Node_Str"");
            }
          }
          sql.append(""String_Node_Str"");
          if (sqlG.getSqlDialect().needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          if (logger.isDebugEnabled()) {
            logger.debug(sql.toString());
          }
          conn=sqlG.tx().getConnection();
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            count=1;
            for (            SqlgVertex vertex : subVertices) {
              preparedStatement.setLong(count++,(Long)vertex.id());
            }
            preparedStatement.executeUpdate();
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
      }
      createForeignKeys(sqlG,schemaTable);
    }
  }
}","@Override public void flushRemovedVertices(SqlG sqlG,Map<SchemaTable,List<SqlgVertex>> removeVertexCache){
  if (!removeVertexCache.isEmpty()) {
    for (    Map.Entry<SchemaTable,List<SqlgVertex>> schemaVertices : removeVertexCache.entrySet()) {
      SchemaTable schemaTable=schemaVertices.getKey();
      dropForeignKeys(sqlG,schemaTable);
      List<SqlgVertex> vertices=schemaVertices.getValue();
      int numberOfLoops=(vertices.size() / PARAMETER_LIMIT);
      int previous=0;
      for (int i=1; i <= numberOfLoops + 1; i++) {
        int sublistTo=i * PARAMETER_LIMIT;
        List<SqlgVertex> subVertices;
        if (i <= numberOfLoops) {
          subVertices=vertices.subList(previous,sublistTo);
        }
 else {
          subVertices=vertices.subList(previous,vertices.size());
        }
        previous=sublistTo;
        if (!subVertices.isEmpty()) {
          Pair<Set<Long>,Set<SchemaTable>> outLabels=Pair.of(new HashSet<Long>(),new HashSet<SchemaTable>());
          Pair<Set<Long>,Set<SchemaTable>> inLabels=Pair.of(new HashSet<Long>(),new HashSet<SchemaTable>());
          getInAndOutEdgesToRemove(sqlG,subVertices,outLabels,inLabels);
          deleteEdges(sqlG,schemaTable,outLabels,true);
          deleteEdges(sqlG,schemaTable,inLabels,false);
          StringBuilder sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(schemaTable.getSchema()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes((SchemaManager.VERTEX_PREFIX) + schemaTable.getTable()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
          sql.append(""String_Node_Str"");
          int count=1;
          for (          SqlgVertex sqlgVertex : subVertices) {
            sql.append(""String_Node_Str"");
            if (count++ < subVertices.size()) {
              sql.append(""String_Node_Str"");
            }
          }
          sql.append(""String_Node_Str"");
          if (sqlG.getSqlDialect().needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          if (logger.isDebugEnabled()) {
            logger.debug(sql.toString());
          }
          Connection conn=sqlG.tx().getConnection();
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            count=1;
            for (            SqlgVertex sqlgVertex : subVertices) {
              preparedStatement.setLong(count++,(Long)sqlgVertex.id());
            }
            preparedStatement.executeUpdate();
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
          sql=new StringBuilder(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(sqlG.getSqlDialect().getPublicSchema()));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(SchemaManager.VERTICES));
          sql.append(""String_Node_Str"");
          sql.append(sqlG.getSqlDialect().maybeWrapInQoutes(""String_Node_Str""));
          sql.append(""String_Node_Str"");
          count=1;
          for (          SqlgVertex vertex : subVertices) {
            sql.append(""String_Node_Str"");
            if (count++ < subVertices.size()) {
              sql.append(""String_Node_Str"");
            }
          }
          sql.append(""String_Node_Str"");
          if (sqlG.getSqlDialect().needsSemicolon()) {
            sql.append(""String_Node_Str"");
          }
          if (logger.isDebugEnabled()) {
            logger.debug(sql.toString());
          }
          conn=sqlG.tx().getConnection();
          try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
            count=1;
            for (            SqlgVertex vertex : subVertices) {
              preparedStatement.setLong(count++,(Long)vertex.id());
            }
            preparedStatement.executeUpdate();
          }
 catch (          SQLException e) {
            throw new RuntimeException(e);
          }
        }
      }
      createForeignKeys(sqlG,schemaTable);
    }
  }
}",0.9925978145928798
167133,"void ensureColumnExist(String schema,String table,ImmutablePair<String,PropertyType> keyValue){
  final Map<String,PropertyType> cachedColumns=this.tables.get(schema + ""String_Node_Str"" + table);
  final Map<String,PropertyType> uncommitedColumns;
  if (cachedColumns == null) {
    uncommitedColumns=this.uncommittedTables.get(schema + ""String_Node_Str"" + table);
  }
 else {
    uncommitedColumns=cachedColumns;
  }
  Objects.requireNonNull(uncommitedColumns,""String_Node_Str"");
  if (!uncommitedColumns.containsKey(keyValue.left)) {
    if (!this.schemaLock.isHeldByCurrentThread()) {
      this.schemaLock.lock();
    }
    if (!uncommitedColumns.containsKey(keyValue.left)) {
      addColumn(schema,table,keyValue);
      uncommitedColumns.put(keyValue.left,keyValue.right);
      this.uncommittedTables.put(schema + ""String_Node_Str"" + table,uncommitedColumns);
    }
  }
}","void ensureColumnExist(String schema,String table,ImmutablePair<String,PropertyType> keyValue){
  final Map<String,PropertyType> cachedColumns=this.tables.get(schema + ""String_Node_Str"" + table);
  Map<String,PropertyType> uncommitedColumns;
  if (cachedColumns == null) {
    uncommitedColumns=this.uncommittedTables.get(schema + ""String_Node_Str"" + table);
  }
 else {
    uncommitedColumns=this.uncommittedTables.get(schema + ""String_Node_Str"" + table);
    if (uncommitedColumns != null) {
      uncommitedColumns.putAll(cachedColumns);
    }
 else {
      uncommitedColumns=new HashMap<>(cachedColumns);
    }
  }
  Objects.requireNonNull(uncommitedColumns,""String_Node_Str"");
  if (!uncommitedColumns.containsKey(keyValue.left)) {
    if (!this.schemaLock.isHeldByCurrentThread()) {
      this.schemaLock.lock();
    }
    if (!uncommitedColumns.containsKey(keyValue.left)) {
      addColumn(schema,table,keyValue);
      uncommitedColumns.put(keyValue.left,keyValue.right);
      this.uncommittedTables.put(schema + ""String_Node_Str"" + table,uncommitedColumns);
    }
  }
}",0.8779989790709546
167134,"@Override public GraphFeatures graph(){
  return new GraphFeatures(){
    @Override public boolean supportsComputer(){
      return false;
    }
    @Override public VariableFeatures variables(){
      return new SqlVariableFeatures();
    }
    @Override public boolean supportsThreadedTransactions(){
      return false;
    }
    @Override public boolean supportsFullyIsolatedTransactions(){
      return false;
    }
  }
;
}","@Override public GraphFeatures graph(){
  return new GraphFeatures(){
    @Override public boolean supportsComputer(){
      return false;
    }
    @Override public VariableFeatures variables(){
      return new SqlVariableFeatures();
    }
    @Override public boolean supportsThreadedTransactions(){
      return false;
    }
  }
;
}",0.8717277486910995
167135,"public Features getFeatures(){
  return new SqlGFeatures();
}","@Override public Features getFeatures(){
  return new SqlGFeatures();
}",0.9242424242424242
167136,"@Override public <V extends Variables>V variables(){
  throw Graph.Exceptions.variablesNotSupported();
}","@Override public Variables variables(){
  throw Graph.Exceptions.variablesNotSupported();
}",0.9333333333333332
167137,"public Iterator<SqlEdge> getEdges(Direction direction,String... labels){
  long sequenceFirstValueLessOne=this.sqlG.getSqlDialect().sequenceInitialValue() - 1l;
  List<Direction> directions=new ArrayList<>(2);
  Set<SqlEdge> edges=new HashSet<>();
  Set<String> inVertexLabels=new HashSet<>();
  Set<String> outVertexLabels=new HashSet<>();
  if (direction == Direction.IN) {
    inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),true));
    if (labels.length > 0)     inVertexLabels.retainAll(Arrays.asList(labels));
    directions.add(direction);
  }
 else   if (direction == Direction.OUT) {
    outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),false));
    if (labels.length > 0)     outVertexLabels.retainAll(Arrays.asList(labels));
    directions.add(direction);
  }
 else {
    inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),true));
    outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),false));
    if (labels.length > 0) {
      inVertexLabels.retainAll(Arrays.asList(labels));
      outVertexLabels.retainAll(Arrays.asList(labels));
    }
    directions.add(Direction.IN);
    directions.add(Direction.OUT);
  }
  for (  Direction d : directions) {
    for (    String label : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
      if (this.sqlG.getSchemaManager().tableExist(SchemaManager.EDGE_PREFIX + label)) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + label));
        sql.append(""String_Node_Str"");
switch (d) {
case IN:
          sql.append(""String_Node_Str"");
        sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.IN_VERTEX_COLUMN_END));
      sql.append(""String_Node_Str"");
    break;
case OUT:
  sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case BOTH:
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
}
if (this.sqlG.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlG.tx().getConnection();
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.primaryKey);
break;
case OUT:
preparedStatement.setLong(1,this.primaryKey);
break;
case BOTH:
preparedStatement.setLong(1,this.primaryKey);
preparedStatement.setLong(2,this.primaryKey);
break;
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (columnName.endsWith(SqlElement.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SqlElement.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() || outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long edgeId=resultSet.getLong(""String_Node_Str"");
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
Long tempInId=resultSet.getLong(inColumnName);
if (tempInId.longValue() != sequenceFirstValueLessOne) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (tempInId.longValue() != sequenceFirstValueLessOne) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
Long tempOutId=resultSet.getLong(outColumnName);
if (tempOutId.longValue() != sequenceFirstValueLessOne) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (tempOutId.longValue() != sequenceFirstValueLessOne) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() || outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (!((columnName.equals(""String_Node_Str"") || columnName.equals(inVertexColumnNames) || columnName.equals(outVertexColumnNames)))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlEdge sqlEdge=null;
switch (d) {
case IN:
sqlEdge=new SqlEdge(this.sqlG,edgeId,label,this,new SqlVertex(this.sqlG,outId,outVertexColumnName.replace(SqlElement.OUT_VERTEX_COLUMN_END,""String_Node_Str"")),keyValues.toArray());
break;
case OUT:
sqlEdge=new SqlEdge(this.sqlG,edgeId,label,new SqlVertex(this.sqlG,inId,inVertexColumnName.replace(SqlElement.IN_VERTEX_COLUMN_END,""String_Node_Str"")),this,keyValues.toArray());
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
edges.add(sqlEdge);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
return edges.iterator();
}","public Iterator<SqlEdge> getEdges(Direction direction,String... labels){
  List<Direction> directions=new ArrayList<>(2);
  Set<SqlEdge> edges=new HashSet<>();
  Set<String> inVertexLabels=new HashSet<>();
  Set<String> outVertexLabels=new HashSet<>();
  if (direction == Direction.IN) {
    inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),true));
    if (labels.length > 0)     inVertexLabels.retainAll(Arrays.asList(labels));
    directions.add(direction);
  }
 else   if (direction == Direction.OUT) {
    outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),false));
    if (labels.length > 0)     outVertexLabels.retainAll(Arrays.asList(labels));
    directions.add(direction);
  }
 else {
    inVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),true));
    outVertexLabels.addAll(this.sqlG.getSchemaManager().getLabelsForVertex((Long)this.id(),false));
    if (labels.length > 0) {
      inVertexLabels.retainAll(Arrays.asList(labels));
      outVertexLabels.retainAll(Arrays.asList(labels));
    }
    directions.add(Direction.IN);
    directions.add(Direction.OUT);
  }
  for (  Direction d : directions) {
    for (    String label : (d == Direction.IN ? inVertexLabels : outVertexLabels)) {
      if (this.sqlG.getSchemaManager().tableExist(SchemaManager.EDGE_PREFIX + label)) {
        StringBuilder sql=new StringBuilder(""String_Node_Str"");
        sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(SchemaManager.EDGE_PREFIX + label));
        sql.append(""String_Node_Str"");
switch (d) {
case IN:
          sql.append(""String_Node_Str"");
        sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.IN_VERTEX_COLUMN_END));
      sql.append(""String_Node_Str"");
    break;
case OUT:
  sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
case BOTH:
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.OUT_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
sql.append(this.sqlG.getSchemaManager().getSqlDialect().maybeWrapInQoutes(this.label + SqlElement.IN_VERTEX_COLUMN_END));
sql.append(""String_Node_Str"");
break;
}
if (this.sqlG.getSqlDialect().needsSemicolon()) {
sql.append(""String_Node_Str"");
}
Connection conn=this.sqlG.tx().getConnection();
try (PreparedStatement preparedStatement=conn.prepareStatement(sql.toString())){
switch (d) {
case IN:
preparedStatement.setLong(1,this.primaryKey);
break;
case OUT:
preparedStatement.setLong(1,this.primaryKey);
break;
case BOTH:
preparedStatement.setLong(1,this.primaryKey);
preparedStatement.setLong(2,this.primaryKey);
break;
}
ResultSet resultSet=preparedStatement.executeQuery();
while (resultSet.next()) {
Set<String> inVertexColumnNames=new HashSet<>();
Set<String> outVertexColumnNames=new HashSet<>();
String inVertexColumnName=""String_Node_Str"";
String outVertexColumnName=""String_Node_Str"";
ResultSetMetaData resultSetMetaData=resultSet.getMetaData();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (columnName.endsWith(SqlElement.IN_VERTEX_COLUMN_END)) {
inVertexColumnNames.add(columnName);
}
 else if (columnName.endsWith(SqlElement.OUT_VERTEX_COLUMN_END)) {
outVertexColumnNames.add(columnName);
}
}
if (inVertexColumnNames.isEmpty() || outVertexColumnNames.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
Long edgeId=resultSet.getLong(""String_Node_Str"");
Long inId=null;
Long outId=null;
for (String inColumnName : inVertexColumnNames) {
if (inId != null) {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempInId=resultSet.getLong(inColumnName);
if (!resultSet.wasNull()) {
inId=tempInId;
inVertexColumnName=inColumnName;
}
}
}
for (String outColumnName : outVertexColumnNames) {
if (outId != null) {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
throw new IllegalStateException(""String_Node_Str"");
}
}
 else {
Long tempOutId=resultSet.getLong(outColumnName);
if (!resultSet.wasNull()) {
outId=tempOutId;
outVertexColumnName=outColumnName;
}
}
}
if (inVertexColumnName.isEmpty() || outVertexColumnName.isEmpty()) {
throw new IllegalStateException(""String_Node_Str"");
}
List<Object> keyValues=new ArrayList<>();
for (int i=1; i <= resultSetMetaData.getColumnCount(); i++) {
String columnName=resultSetMetaData.getColumnName(i);
if (!((columnName.equals(""String_Node_Str"") || columnName.equals(inVertexColumnNames) || columnName.equals(outVertexColumnNames)))) {
keyValues.add(columnName);
keyValues.add(resultSet.getObject(columnName));
}
}
SqlEdge sqlEdge=null;
switch (d) {
case IN:
sqlEdge=new SqlEdge(this.sqlG,edgeId,label,this,new SqlVertex(this.sqlG,outId,outVertexColumnName.replace(SqlElement.OUT_VERTEX_COLUMN_END,""String_Node_Str"")),keyValues.toArray());
break;
case OUT:
sqlEdge=new SqlEdge(this.sqlG,edgeId,label,new SqlVertex(this.sqlG,inId,inVertexColumnName.replace(SqlElement.IN_VERTEX_COLUMN_END,""String_Node_Str"")),this,keyValues.toArray());
break;
case BOTH:
throw new IllegalStateException(""String_Node_Str"");
}
edges.add(sqlEdge);
}
}
 catch (SQLException e) {
throw new RuntimeException(e);
}
}
}
}
return edges.iterator();
}",0.9146709242504878
167138,"@Override protected void execute() throws ArchiverException {
  try {
    ModuleManagementTool mmt=new ModuleManagementTool();
    mmt.setVerbose(false);
    if (getDestFile() != null)     getLogger().info(""String_Node_Str"" + getDestFile());
    if (getDestDirectory() != null)     getLogger().info(""String_Node_Str"" + getDestDirectory());
    File destLocation=(getDestFile() == null || !getDestFile().exists()) ? getDestDirectory() : getDestFile();
    getLogger().info(""String_Node_Str"" + getSourceFile() + ""String_Node_Str""+ destLocation);
    try {
      mmt.installModule(getSourceFile().getAbsolutePath(),destLocation.getAbsolutePath(),false,true,false);
    }
 catch (    Exception e) {
      throw new MojoExecutionException(""String_Node_Str"" + getSourceFile().getAbsolutePath() + ""String_Node_Str""+ destLocation.getAbsolutePath(),e);
    }
    getLogger().debug(""String_Node_Str"" + getSourceFile().getAbsolutePath() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new ArchiverException(""String_Node_Str"" + getSourceFile().getAbsolutePath(),e);
  }
 finally {
  }
}","@Override protected void execute() throws ArchiverException {
  try {
    File destDirectory=getDestDirectory();
    ModuleManagementTool mmt=new ModuleManagementTool();
    mmt.setVerbose(false);
    if (getDestFile() != null)     getLogger().info(""String_Node_Str"" + getDestFile());
    if (getDestDirectory() != null)     getLogger().info(""String_Node_Str"" + destDirectory);
    File destLocation=(getDestFile() == null || !getDestFile().exists()) ? destDirectory : getDestFile();
    getLogger().info(""String_Node_Str"" + getSourceFile() + ""String_Node_Str""+ destLocation);
    try {
      mmt.installModule(getSourceFile().getAbsolutePath(),destLocation.getAbsolutePath(),false,true,false);
    }
 catch (    Exception e) {
      throw new MojoExecutionException(""String_Node_Str"" + getSourceFile().getAbsolutePath() + ""String_Node_Str""+ destLocation.getAbsolutePath(),e);
    }
    getLogger().debug(""String_Node_Str"" + getSourceFile().getAbsolutePath() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new ArchiverException(""String_Node_Str"" + getSourceFile().getAbsolutePath(),e);
  }
 finally {
  }
}",0.970548255550521
167139,"@Override public File getDestDirectory(){
  MavenSession session=legacySupport.getSession();
  MavenProject project=session.getCurrentProject();
  return new File(project.getBuild().getDirectory() + File.separator + project.getBuild().getFinalName());
}","@Override public File getDestDirectory(){
  MavenSession session=legacySupport.getSession();
  MavenProject project=session.getCurrentProject();
  File location=new File(project.getBuild().getDirectory() + File.separator + project.getBuild().getFinalName());
  Plugin warPlugin=project.getPlugin(""String_Node_Str"");
  if (warPlugin != null) {
    Xpp3Dom warPluginConfig=(Xpp3Dom)warPlugin.getConfiguration();
    if (warPluginConfig != null) {
      Xpp3Dom warConfigElement=warPluginConfig.getChild(""String_Node_Str"");
      if (warConfigElement != null) {
        String webappDir=warConfigElement.getValue();
        if (webappDir != null && !webappDir.isEmpty()) {
          location=new File(webappDir);
        }
      }
    }
  }
  return location;
}",0.4787339268051434
167140,"/** 
 * Generates the webapp according to the <tt>mode</tt> attribute.
 * @param pAmpFile the target AMP file
 * @throws IOException
 * @throws ArchiverException
 * @throws ManifestException
 * @throws DependencyResolutionRequiredException
 */
protected void performPackaging(File pAmpFile) throws IOException, ArchiverException, ManifestException, DependencyResolutionRequiredException, MojoExecutionException, MojoFailureException {
  getLog().info(""String_Node_Str"" + this.getAmpName() + ""String_Node_Str"");
  this.buildExplodedAmp(this.getAmpDirectory());
  MavenArchiver vArchiver=new MavenArchiver();
  vArchiver.setArchiver(this.getAmpArchiver());
  vArchiver.setOutputFile(pAmpFile);
  this.getAmpArchiver().addDirectory(this.getAmpDirectory(),this.getIncludes(),this.getExcludes());
  vArchiver.createArchive(this.getProject(),archive);
  String vClassifier=this.getClassifier();
  if (vClassifier != null) {
    this.getProjectHelper().attachArtifact(this.getProject(),""String_Node_Str"",vClassifier,pAmpFile);
  }
 else {
    Artifact vArtifact=this.getProject().getArtifact();
    if (this.isPrimaryArtifact()) {
      vArtifact.setFile(pAmpFile);
    }
 else     if (vArtifact.getFile() == null || vArtifact.getFile().isDirectory()) {
      vArtifact.setFile(pAmpFile);
    }
  }
}","/** 
 * Generates the webapp according to the <tt>mode</tt> attribute.
 * @param pAmpFile the target AMP file
 * @throws IOException
 * @throws ArchiverException
 * @throws ManifestException
 * @throws DependencyResolutionRequiredException
 */
protected void performPackaging(File pAmpFile) throws IOException, ArchiverException, ManifestException, DependencyResolutionRequiredException, MojoExecutionException, MojoFailureException {
  getLog().info(""String_Node_Str"" + this.getAmpName() + ""String_Node_Str"");
  this.buildExplodedAmp(this.getAmpDirectory());
  MavenArchiver vArchiver=new MavenArchiver();
  vArchiver.setArchiver(this.getAmpArchiver());
  vArchiver.setOutputFile(pAmpFile);
  this.getAmpArchiver().addDirectory(this.getAmpDirectory(),null,null);
  vArchiver.createArchive(this.getProject(),archive);
  String vClassifier=this.getClassifier();
  if (vClassifier != null) {
    this.getProjectHelper().attachArtifact(this.getProject(),""String_Node_Str"",vClassifier,pAmpFile);
  }
 else {
    Artifact vArtifact=this.getProject().getArtifact();
    if (this.isPrimaryArtifact()) {
      vArtifact.setFile(pAmpFile);
    }
 else     if (vArtifact.getFile() == null || vArtifact.getFile().isDirectory()) {
      vArtifact.setFile(pAmpFile);
    }
  }
}",0.9827990617670056
167141,"/** 
 * Handles the webapp sources.
 * @param context the packaging context
 * @throws MojoExecutionException if the sources could not be copied
 */
protected void handeAmpConfigDirectory(AmpPackagingContext context) throws MojoExecutionException {
  if (!context.getAmpConfigDirectory().exists()) {
    context.getLog().debug(""String_Node_Str"");
  }
 else {
    if (!context.getAmpConfigDirectory().getAbsolutePath().equals(context.getAmpDirectory().getPath())) {
      final PathSet sources=getFilesToIncludes(context.getAmpConfigDirectory(),new String[0],new String[]{""String_Node_Str""});
      try {
        context.getLog().info(""String_Node_Str"" + CONFIG_PATH);
        copyFiles(id,context,context.getAmpConfigDirectory(),sources,CONFIG_PATH);
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + context.getAmpDirectory().getAbsolutePath() + ""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Handles the webapp sources.
 * @param context the packaging context
 * @throws MojoExecutionException if the sources could not be copied
 */
protected void handeAmpConfigDirectory(AmpPackagingContext context) throws MojoExecutionException {
  if (!context.getAmpConfigDirectory().exists()) {
    context.getLog().debug(""String_Node_Str"");
  }
 else {
    if (!context.getAmpConfigDirectory().getAbsolutePath().equals(context.getAmpDirectory().getPath())) {
      final PathSet sources=getFilesToIncludes(context.getAmpConfigDirectory(),new String[0],new String[]{""String_Node_Str"",""String_Node_Str""});
      try {
        context.getLog().info(""String_Node_Str"" + CONFIG_PATH);
        copyFiles(id,context,context.getAmpConfigDirectory(),sources,CONFIG_PATH);
      }
 catch (      IOException e) {
        throw new MojoExecutionException(""String_Node_Str"" + context.getAmpDirectory().getAbsolutePath() + ""String_Node_Str"",e);
      }
    }
  }
}",0.9904963041182682
167142,"public void performPackaging(AmpPackagingContext context) throws MojoExecutionException, MojoFailureException {
  context.getLog().info(""String_Node_Str"");
  File metainfDir=new File(context.getAmpDirectory(),META_INF_PATH);
  metainfDir.mkdirs();
  handleArtifacts(context);
  handleWebResources(context);
  handleClassesDirectory(context);
  handeAmpConfigDirectory(context);
  handeWebAppSourceDirectory(context);
  handleDeploymentDescriptors(context);
}","public void performPackaging(AmpPackagingContext context) throws MojoExecutionException, MojoFailureException {
  context.getLog().info(""String_Node_Str"");
  File metainfDir=new File(context.getAmpDirectory(),META_INF_PATH);
  metainfDir.mkdirs();
  handleArtifacts(context);
  handleWebResources(context);
  handleClassesDirectory(context);
  handeAmpConfigDirectory(context);
  handeWebAppSourceDirectory(context);
  synthesiseFileMappings(context);
  handleDeploymentDescriptors(context);
}",0.9631966351209252
167143,"private String getAmpMapping(String name){
  if (name.startsWith(""String_Node_Str"") && !name.startsWith(""String_Node_Str"")) {
    return name.substring(4);
  }
  for (  Map.Entry<String,String> mapElelement : ampMapping.entrySet()) {
    if (name.startsWith(mapElelement.getKey())) {
      String relativePath=""String_Node_Str"";
      if ((name.startsWith(""String_Node_Str""))) {
        relativePath=name.substring(7);
      }
 else       relativePath=FileUtils.removePath(name);
      return mapElelement.getValue() + relativePath;
    }
  }
  return ""String_Node_Str"";
}","private String getAmpMapping(String name){
  if (name.startsWith(""String_Node_Str"") && !name.startsWith(""String_Node_Str"")) {
    return name.substring(4);
  }
  for (  Map.Entry<String,String> mapElelement : ampMapping.entrySet()) {
    if (name.startsWith(mapElelement.getKey())) {
      String relativePath=""String_Node_Str"";
      if ((name.startsWith(""String_Node_Str""))) {
        relativePath=name.substring(7);
      }
 else       if ((name.startsWith(""String_Node_Str""))) {
        relativePath=name.substring(4);
      }
 else       relativePath=FileUtils.removePath(name);
      return mapElelement.getValue() + relativePath;
    }
  }
  return ""String_Node_Str"";
}",0.9166666666666666
167144,"private static int encodePushDataOperation(final int opcode,final byte[] bytes,final byte[] partBytes,int pointer){
switch (opcode) {
case 76:
    bytes[pointer=pointer + 1]=(byte)partBytes.length;
default :
  System.arraycopy(partBytes,0,bytes,pointer,partBytes.length);
return pointer + partBytes.length;
}
}","private static int encodePushDataOperation(final int opcode,final byte[] bytes,final byte[] partBytes,int pointer){
switch (opcode) {
case 76:
    bytes[pointer]=(byte)partBytes.length;
  pointer++;
default :
System.arraycopy(partBytes,0,bytes,pointer,partBytes.length);
return pointer + partBytes.length;
}
}",0.9563812600969306
167145,"public static void execute(final ExecutionStep step){
  final Deque<StackObject> stack=step.getStack();
  if (ScriptOperationUtil.isDataPushOperation(step.getInstruction().getOperation())) {
    addStackObject(stack,step.getInstruction().getBytes());
  }
switch (step.getInstruction().getOperation()) {
case OP_DUP:
    addStackObject(stack,stack.peek());
  break;
case OP_2DUP:
final Iterator<StackObject> dup2Iterator=stack.iterator();
addStackObject(stack,dup2Iterator.next());
addStackObject(stack,dup2Iterator.next());
break;
case OP_3DUP:
final Iterator<StackObject> dup3Iterator=stack.iterator();
addStackObject(stack,dup3Iterator.next());
addStackObject(stack,dup3Iterator.next());
addStackObject(stack,dup3Iterator.next());
break;
case OP_DROP:
stack.remove();
break;
case OP_2DROP:
stack.remove();
stack.remove();
break;
case OP_CHECKSIG:
stack.remove();
stack.remove();
addTrue(stack);
break;
case OP_EQUAL:
final StackObject objEqualA=stack.poll();
final StackObject objEqualB=stack.poll();
if (!Arrays.areEqual(objEqualA.getBytes(),objEqualB.getBytes())) {
addTrue(stack);
}
 else {
addFalse(stack);
}
break;
case OP_EQUALVERIFY:
final StackObject objEqualVerifyA=stack.poll();
final StackObject objEqualVerifyB=stack.poll();
if (!Arrays.areEqual(objEqualVerifyA.getBytes(),objEqualVerifyB.getBytes())) {
addException(step);
}
break;
case OP_HASH160:
final StackObject poll=stack.poll();
final byte[] hash160=ComputeUtil.computeHash160(poll.getBytes());
addStackObject(stack,hash160);
break;
case OP_TRUE:
addTrue(stack);
break;
case OP_FALSE:
addFalse(stack);
break;
default :
}
}","public static void execute(final ExecutionStep step){
  final Deque<StackObject> stack=step.getStack();
  if (ScriptOperationUtil.isDataPushOperation(step.getInstruction().getOperation())) {
    addStackObject(stack,step.getInstruction().getBytes());
  }
switch (step.getInstruction().getOperation()) {
case OP_DUP:
    addStackObject(stack,stack.peek());
  break;
case OP_2DUP:
final Iterator<StackObject> dup2Iterator=stack.iterator();
addStackObject(stack,dup2Iterator.next());
addStackObject(stack,dup2Iterator.next());
break;
case OP_3DUP:
final Iterator<StackObject> dup3Iterator=stack.iterator();
addStackObject(stack,dup3Iterator.next());
addStackObject(stack,dup3Iterator.next());
addStackObject(stack,dup3Iterator.next());
break;
case OP_DROP:
stack.remove();
break;
case OP_2DROP:
stack.remove();
stack.remove();
break;
case OP_CHECKSIG:
stack.remove();
stack.remove();
addTrue(stack);
break;
case OP_EQUAL:
final StackObject objEqualA=stack.poll();
final StackObject objEqualB=stack.poll();
if (Arrays.areEqual(objEqualA.getBytes(),objEqualB.getBytes())) {
addTrue(stack);
}
 else {
addFalse(stack);
}
break;
case OP_EQUALVERIFY:
final StackObject objEqualVerifyA=stack.poll();
final StackObject objEqualVerifyB=stack.poll();
if (!Arrays.areEqual(objEqualVerifyA.getBytes(),objEqualVerifyB.getBytes())) {
addException(step);
}
break;
case OP_HASH160:
final StackObject poll=stack.poll();
final byte[] hash160=ComputeUtil.computeHash160(poll.getBytes());
addStackObject(stack,hash160);
break;
case OP_TRUE:
addTrue(stack);
break;
case OP_FALSE:
addFalse(stack);
break;
default :
}
}",0.9996862252902416
167146,"/** 
 * Creates new form ScrUpdateAlert
 * @param verbose run in verbose mode
 * @param _core current dictionary core
 * @throws java.lang.Exception if unable to connect
 */
public ScrUpdateAlert(boolean verbose,DictCore _core) throws Exception {
  setupKeyStrokes();
  initComponents();
  core=_core;
  jTextPane1.setContentType(""String_Node_Str"");
  jPanel1.setBackground(Color.white);
  super.getRootPane().getContentPane().setBackground(Color.white);
  Document doc=WebInterface.checkForUpdates(core.getVersion());
  final Window parent=this;
  Node ver=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node message=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node buttons=doc.getElementsByTagName(""String_Node_Str"").item(0);
  for (Node curButton=buttons.getFirstChild(); curButton != null; curButton=curButton.getNextSibling()) {
    Node nameNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    Node linkNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    buttonMap.put(nameNode.getTextContent(),linkNode.getTextContent());
    PButton newButton=new PButton(core);
    newButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        JButton thisButton=(JButton)e.getSource();
        String link=buttonMap.get(thisButton.getText());
        URI uri;
        try {
          uri=new URI(link);
          uri.normalize();
          java.awt.Desktop.getDesktop().browse(uri);
        }
 catch (        IOException|URISyntaxException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,core.getRootWindow());
        }
      }
    }
);
    newButton.setText(nameNode.getTextContent());
    newButton.setSize(358,30);
    jPanel1.add(newButton);
    int height=this.getSize().height;
    newButton.setLocation(0,height - 30);
    this.setSize(height,height + newButton.getHeight());
  }
  this.setTitle(""String_Node_Str"" + ver.getTextContent() + ""String_Node_Str"");
  jTextPane1.setText(message.getTextContent());
  txtVersion.setText(""String_Node_Str"" + ver.getTextContent());
  if (ver.getTextContent().equals(core.getVersion())) {
    if (verbose) {
      InfoBox.info(""String_Node_Str"",""String_Node_Str"" + core.getVersion() + ""String_Node_Str"",core.getRootWindow());
    }
    this.setVisible(false);
    this.dispose();
  }
 else {
    setVisible(true);
  }
}","/** 
 * Creates new form ScrUpdateAlert
 * @param verbose run in verbose mode
 * @param _core current dictionary core
 * @throws java.lang.Exception if unable to connect
 */
public ScrUpdateAlert(boolean verbose,DictCore _core) throws Exception {
  core=_core;
  setupKeyStrokes();
  initComponents();
  jTextPane1.setContentType(""String_Node_Str"");
  jPanel1.setBackground(Color.white);
  super.getRootPane().getContentPane().setBackground(Color.white);
  Document doc=WebInterface.checkForUpdates(core.getVersion());
  final Window parent=this;
  Node ver=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node message=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node buttons=doc.getElementsByTagName(""String_Node_Str"").item(0);
  for (Node curButton=buttons.getFirstChild(); curButton != null; curButton=curButton.getNextSibling()) {
    Node nameNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    Node linkNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    buttonMap.put(nameNode.getTextContent(),linkNode.getTextContent());
    PButton newButton=new PButton(core);
    newButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        JButton thisButton=(JButton)e.getSource();
        String link=buttonMap.get(thisButton.getText());
        URI uri;
        try {
          uri=new URI(link);
          uri.normalize();
          java.awt.Desktop.getDesktop().browse(uri);
        }
 catch (        IOException|URISyntaxException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,core.getRootWindow());
        }
      }
    }
);
    newButton.setText(nameNode.getTextContent());
    newButton.setSize(358,30);
    jPanel1.add(newButton);
    int height=this.getSize().height;
    newButton.setLocation(0,height - 30);
    this.setSize(height,height + newButton.getHeight());
  }
  this.setTitle(""String_Node_Str"" + ver.getTextContent() + ""String_Node_Str"");
  jTextPane1.setText(message.getTextContent());
  txtVersion.setText(""String_Node_Str"" + ver.getTextContent());
  if (ver.getTextContent().equals(core.getVersion())) {
    if (verbose) {
      InfoBox.info(""String_Node_Str"",""String_Node_Str"" + core.getVersion() + ""String_Node_Str"",core.getRootWindow());
    }
    this.setVisible(false);
    this.dispose();
  }
 else {
    setVisible(true);
  }
}",0.9942833809718252
167147,"/** 
 * populates properties of currently selected word
 */
private void populateProperties(){
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  boolean localPopulating=curPopulating;
  curPopulating=true;
  try {
    if (curWord == null) {
      if (!namePopulating) {
        namePopulating=true;
        ((PTextField)txtConWord).setDefault();
        namePopulating=false;
      }
      ((PTextField)txtLocalWord).setDefault();
      ((PTextField)txtProc).setDefault();
      cmbType.setSelectedItem(defTypeValue);
      chkProcOverride.setSelected(false);
      chkRuleOverride.setSelected(false);
      setPropertiesEnabled(false);
    }
 else {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(curWord.getValue());
        namePopulating=false;
      }
      txtDefinition.setText(curWord.getDefinition());
      txtLocalWord.setText(curWord.getLocalWord().equals(""String_Node_Str"") ? ((PTextField)txtLocalWord).getDefaultValue() : curWord.getLocalWord());
      txtProc.setText(curWord.getPronunciation().equals(""String_Node_Str"") ? ((PTextField)txtProc).getDefaultValue() : curWord.getPronunciation());
      TypeNode type=curWord.getWordTypeId() == 0 ? null : core.getTypes().getNodeById(curWord.getWordTypeId());
      cmbType.setSelectedItem(type == null ? defTypeValue : type);
      chkProcOverride.setSelected(curWord.isProcOverride());
      chkRuleOverride.setSelected(curWord.isRulesOverrride());
      setupClassPanel(curWord.getWordTypeId());
      populateClassPanel();
      setPropertiesEnabled(true);
    }
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  setAllGreyProps();
  curPopulating=localPopulating;
}","/** 
 * populates properties of currently selected word
 */
private void populateProperties(){
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  boolean localPopulating=curPopulating;
  curPopulating=true;
  try {
    if (curWord == null) {
      if (!namePopulating) {
        namePopulating=true;
        ((PTextField)txtConWord).setDefault();
        namePopulating=false;
      }
      ((PTextField)txtLocalWord).setDefault();
      ((PTextField)txtProc).setDefault();
      ((PTextPane)txtDefinition).setDefault();
      cmbType.setSelectedItem(defTypeValue);
      chkProcOverride.setSelected(false);
      chkRuleOverride.setSelected(false);
      setPropertiesEnabled(false);
    }
 else {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(curWord.getValue());
        namePopulating=false;
      }
      txtDefinition.setText(curWord.getDefinition());
      txtLocalWord.setText(curWord.getLocalWord().equals(""String_Node_Str"") ? ((PTextField)txtLocalWord).getDefaultValue() : curWord.getLocalWord());
      txtProc.setText(curWord.getPronunciation().equals(""String_Node_Str"") ? ((PTextField)txtProc).getDefaultValue() : curWord.getPronunciation());
      TypeNode type=curWord.getWordTypeId() == 0 ? null : core.getTypes().getNodeById(curWord.getWordTypeId());
      cmbType.setSelectedItem(type == null ? defTypeValue : type);
      chkProcOverride.setSelected(curWord.isProcOverride());
      chkRuleOverride.setSelected(curWord.isRulesOverrride());
      setupClassPanel(curWord.getWordTypeId());
      populateClassPanel();
      setPropertiesEnabled(true);
    }
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  setAllGreyProps();
  curPopulating=localPopulating;
}",0.9867568329106792
167148,"/** 
 * Init for PDialogs
 * @param _core dictionary core
 * @param _overideFont whether to override font (default to no)
 * @param _defText default text that will display in grey if otherwise empty
 */
public PTextField(DictCore _core,boolean _overideFont,String _defText){
  DefaultBoundedRangeModel pVis=(DefaultBoundedRangeModel)this.getHorizontalVisibility();
  for (  ChangeListener chlist : pVis.getChangeListeners()) {
    pVis.removeChangeListener(chlist);
  }
  pVis.addChangeListener(new PScrollRepainter());
  core=_core;
  overrideFont=_overideFont;
  defText=_defText;
  setupListeners();
  setText(defText);
  setForeground(Color.lightGray);
  setupRightClickMenu();
  if (!overrideFont) {
    setFont(core.getPropertiesManager().getFontCon());
  }
 else {
    setFont(core.getPropertiesManager().getCharisUnicodeFont());
  }
}","/** 
 * Init for PDialogs
 * @param _core dictionary core
 * @param _overideFont whether to override font (default to no)
 * @param _defText default text that will display in grey if otherwise empty
 */
public PTextField(DictCore _core,boolean _overideFont,String _defText){
  DefaultBoundedRangeModel pVis=(DefaultBoundedRangeModel)this.getHorizontalVisibility();
  for (  ChangeListener chlist : pVis.getChangeListeners()) {
    pVis.removeChangeListener(chlist);
  }
  pVis.addChangeListener(new PScrollRepainter());
  core=_core;
  overrideFont=_overideFont;
  defText=_defText;
  setupListeners();
  setForeground(Color.lightGray);
  setupRightClickMenu();
  if (!overrideFont) {
    setFont(core.getPropertiesManager().getFontCon());
  }
 else {
    setFont(core.getPropertiesManager().getCharisUnicodeFont());
  }
  setText(defText);
}",0.97624703087886
167149,"/** 
 * Gives user option to save file, returns continue/don't continue
 * @return true to signal continue, false to signal stop
 */
private boolean saveOrCancelTest(){
  if (core != null && core.getWordCollection().getWordNodes().isEmpty()) {
    Integer saveFirst=localYesNoCancel(""String_Node_Str"",""String_Node_Str"");
    if (saveFirst == JOptionPane.YES_OPTION) {
      boolean saved=saveFile();
      if (!saved) {
        return false;
      }
    }
 else     if (saveFirst == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  return true;
}","/** 
 * Gives user option to save file, returns continue/don't continue
 * @return true to signal continue, false to signal stop
 */
private boolean saveOrCancelTest(){
  if (core != null && !core.getWordCollection().getWordNodes().isEmpty()) {
    Integer saveFirst=localYesNoCancel(""String_Node_Str"",""String_Node_Str"");
    if (saveFirst == JOptionPane.YES_OPTION) {
      boolean saved=saveFile();
      if (!saved) {
        return false;
      }
    }
 else     if (saveFirst == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  return true;
}",0.999104744852283
167150,"private void setupListeners(){
  FocusListener listener=new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      if (isDefaultText()) {
        setText(""String_Node_Str"");
        setForeground(Color.black);
      }
    }
    @Override public void focusLost(    FocusEvent e){
      if (getNakedText().equals(""String_Node_Str"")) {
        setText(defText);
        setForeground(Color.lightGray);
      }
    }
  }
;
  this.addFocusListener(listener);
}","private void setupListeners(){
  FocusListener listener=new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      if (isDefaultText()) {
        setText(""String_Node_Str"");
        setForeground(Color.black);
      }
    }
    @Override public void focusLost(    FocusEvent e){
      if (isEmpty()) {
        setText(defText);
        setForeground(Color.lightGray);
      }
    }
  }
;
  this.addFocusListener(listener);
}",0.9494079655543596
167151,"@Override public void focusLost(FocusEvent e){
  if (getNakedText().equals(""String_Node_Str"")) {
    setText(defText);
    setForeground(Color.lightGray);
  }
}","@Override public void focusLost(FocusEvent e){
  if (isEmpty()) {
    setText(defText);
    setForeground(Color.lightGray);
  }
}",0.8512110726643599
167152,"private void addImage(ImageNode image) throws Exception {
  final String placeHold=""String_Node_Str"";
  if (isDefaultText()) {
    super.setText(""String_Node_Str"");
  }
  ClipboardHandler test=new ClipboardHandler();
  test.cacheClipboard();
  test.setClipboardContents(placeHold);
  paste();
  String newText=getRawHTML();
  setText(newText.replace(placeHold,""String_Node_Str"" + image.getImagePath() + ""String_Node_Str""));
  test.restoreClipboard();
}","private void addImage(ImageNode image) throws Exception {
  final String placeHold=""String_Node_Str"";
  if (isDefaultText()) {
    super.setText(""String_Node_Str"");
  }
  ClipboardHandler test=new ClipboardHandler();
  test.cacheClipboard();
  test.setClipboardContents(placeHold);
  super.paste();
  String newText=getRawHTML();
  setText(newText.replaceAll(placeHold,""String_Node_Str"" + image.getImagePath() + ""String_Node_Str""));
  test.restoreClipboard();
}",0.9901423877327492
167153,"/** 
 * Tests whether the current text value is the default value
 * @return
 */
public boolean isDefaultText(){
  String curText=getNakedText().replaceAll(PGTUtil.RTLMarker,""String_Node_Str"").replaceAll(PGTUtil.LTRMarker,""String_Node_Str"");
  return curText.equals(""String_Node_Str"");
}","/** 
 * Tests whether the current text value is the default value
 * @return
 */
public boolean isDefaultText(){
  String body=super.getText();
  body=body.substring(0,body.indexOf(""String_Node_Str""));
  body=body.substring(body.indexOf(""String_Node_Str"") + 6,body.length());
  return body.trim().equals(defText);
}",0.6079734219269103
167154,"/** 
 * Saves current values to argument word. Default values will not be saved.
 * @param saveWord word to save current values to
 */
private void saveValuesTo(ConWord saveWord){
  if (((PTextField)txtConWord).isDefaultText()) {
    return;
  }
  saveWord.setValue(txtConWord.getText());
  saveWord.setDefinition(txtDefinition.getText());
  saveWord.setLocalWord(((PTextField)txtLocalWord).isDefaultText() ? ""String_Node_Str"" : txtLocalWord.getText());
  saveWord.setProcOverride(chkProcOverride.isSelected());
  saveWord.setPronunciation(((PTextField)txtProc).isDefaultText() ? ""String_Node_Str"" : txtProc.getText());
  saveWord.setRulesOverride(chkRuleOverride.isSelected());
  Object curType=cmbType.getSelectedItem();
  if (curType != null) {
    saveWord.setWordTypeId((curType.equals(defTypeValue) || curType.equals(newTypeValue)) ? 0 : ((TypeNode)curType).getId());
  }
}","/** 
 * Saves current values to argument word. Default values will not be saved.
 * @param saveWord word to save current values to
 */
private void saveValuesTo(ConWord saveWord){
  if (((PTextField)txtConWord).isDefaultText() || saveWord == null) {
    return;
  }
  saveWord.setValue(txtConWord.getText());
  saveWord.setDefinition(txtDefinition.getText());
  saveWord.setLocalWord(((PTextField)txtLocalWord).isDefaultText() ? ""String_Node_Str"" : txtLocalWord.getText());
  saveWord.setProcOverride(chkProcOverride.isSelected());
  saveWord.setPronunciation(((PTextField)txtProc).isDefaultText() ? ""String_Node_Str"" : txtProc.getText());
  saveWord.setRulesOverride(chkRuleOverride.isSelected());
  Object curType=cmbType.getSelectedItem();
  if (curType != null) {
    saveWord.setWordTypeId((curType.equals(defTypeValue) || curType.equals(newTypeValue)) ? 0 : ((TypeNode)curType).getId());
  }
}",0.9887514060742408
167155,"/** 
 * Sets up all component listeners
 */
private void setupListeners(){
  KeyListener enterListener=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && !cmbType.isPopupVisible()) {
        for (        JComboBox curBox : classComboMap.values()) {
          if (curBox.isPopupVisible()) {
            return;
          }
        }
        tryRecord();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyTyped(    KeyEvent e){
    }
  }
;
  txtConWord.setFont(core.getPropertiesManager().getFontCon());
  txtConWord.addKeyListener(enterListener);
  txtConWord.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      setProc();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      setProc();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      setProc();
    }
  }
);
  txtLocalWord.addKeyListener(enterListener);
  txtProc.addKeyListener(enterListener);
}","/** 
 * Sets up all component listeners
 */
private void setupListeners(){
  KeyListener enterListener=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && !cmbType.isPopupVisible()) {
        for (        JComboBox curBox : classComboMap.values()) {
          if (curBox.isPopupVisible()) {
            return;
          }
        }
        tryRecord();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyTyped(    KeyEvent e){
    }
  }
;
  txtConWord.setFont(core.getPropertiesManager().getFontCon());
  txtConWord.addKeyListener(enterListener);
  txtConWord.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      setProc();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      setProc();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      setProc();
    }
  }
);
  txtLocalWord.addKeyListener(enterListener);
  txtProc.addKeyListener(enterListener);
  cmbType.addKeyListener(enterListener);
}",0.9815398469158036
167156,"/** 
 * Populates all grammar chapters and sections that match search value
 */
private void populateFromSearch(){
  savePropsToNode((DefaultMutableTreeNode)treChapList.getLastSelectedPathComponent());
  if (txtSearch.getText().isEmpty() || ((PTextField)txtSearch).isDefaultText()) {
    populateSections();
    return;
  }
  List<GrammarChapNode> chapters=core.getGrammarManager().getChapters();
  Iterator<GrammarChapNode> chapIt=chapters.iterator();
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode(""String_Node_Str"");
  DefaultTreeModel treeModel=new DefaultTreeModel(rootNode);
  treChapList.setModel(treeModel);
  while (chapIt.hasNext()) {
    GrammarChapNode curChap=chapIt.next();
    if (!chapMatchSrc(curChap,txtSearch.getText())) {
      continue;
    }
    rootNode.add(curChap);
  }
  treeModel.reload(rootNode);
  treChapList.setLargeModel(true);
}","/** 
 * Populates all grammar chapters and sections that match search value
 */
private void populateFromSearch(){
}",0.2341069626639758
167157,"/** 
 * Exports language to presentable PDF
 * @param _core dictionary core
 * @param _targetFile target path to write
 * @throws IOException
 */
public PExportToPDF(DictCore _core,String _targetFile) throws IOException {
  core=_core;
  targetFile=_targetFile;
  conFontFile=core.getPropertiesManager().getCachedFont();
  unicodeFontFile=new IOHandler().getUnicodeFontByteArray();
  unicodeFont=PdfFontFactory.createFont(unicodeFontFile,PdfEncodings.IDENTITY_H,true);
  unicodeFont.setSubset(true);
  if (conFontFile == null) {
    conFont=unicodeFont;
  }
 else {
    conFont=PdfFontFactory.createFont(conFontFile,PdfEncodings.IDENTITY_H,true);
  }
  conFontSize=core.getPropertiesManager().getFontSize();
  glossKey=getGlossKey();
}","/** 
 * Exports language to presentable PDF
 * @param _core dictionary core
 * @param _targetFile target path to write
 * @throws IOException
 */
public PExportToPDF(DictCore _core,String _targetFile) throws IOException {
  core=_core;
  targetFile=_targetFile;
  conFontFile=core.getPropertiesManager().getCachedFont();
  unicodeFontFile=new IOHandler().getUnicodeFontByteArray();
  unicodeFont=PdfFontFactory.createFont(unicodeFontFile,PdfEncodings.IDENTITY_H,true);
  unicodeFont.setSubset(true);
  if (conFontFile == null) {
    try {
      conFontFile=IOHandler.getFontFileArray(core.getPropertiesManager().getFontCon());
    }
 catch (    Exception ex) {
      InfoBox.warning(""String_Node_Str"",""String_Node_Str"",null);
    }
  }
  if (conFontFile == null) {
    conFont=unicodeFont;
  }
 else {
    conFont=PdfFontFactory.createFont(conFontFile,PdfEncodings.IDENTITY_H,true);
  }
  conFontSize=core.getPropertiesManager().getFontSize();
  glossKey=getGlossKey();
}",0.861664712778429
167158,"/** 
 * Creates new form ScrIPARefChart
 * @param _core
 */
public ScrIPARefChart(DictCore _core){
  core=_core;
  initComponents();
  handler=new IPAHandler(this);
}","/** 
 * Creates new form ScrIPARefChart
 * @param _core
 */
public ScrIPARefChart(DictCore _core){
  core=_core;
  initComponents();
  handler=new IPAHandler(this);
  this.setupKeyStrokes();
}",0.9273743016759776
167159,"/** 
 * Exports language to presentable PDF
 * @param _core dictionary core
 * @param _targetFile target path to write
 * @throws IOException
 */
public PExportToPDF(DictCore _core,String _targetFile) throws IOException {
  core=_core;
  targetFile=_targetFile;
  conFontFile=core.getPropertiesManager().getCachedFont();
  unicodeFontFile=new IOHandler().getUnicodeFontByteArray();
  if (conFontFile == null) {
    conFont=PdfFontFactory.createFont(FontConstants.HELVETICA_BOLD);
  }
 else {
    conFont=PdfFontFactory.createFont(conFontFile,PdfEncodings.IDENTITY_H,true);
  }
  unicodeFont=PdfFontFactory.createFont(unicodeFontFile,PdfEncodings.IDENTITY_H,true);
  unicodeFont.setSubset(true);
  conFontSize=core.getPropertiesManager().getFontSize();
  glossKey=getGlossKey();
}","/** 
 * Exports language to presentable PDF
 * @param _core dictionary core
 * @param _targetFile target path to write
 * @throws IOException
 */
public PExportToPDF(DictCore _core,String _targetFile) throws IOException {
  core=_core;
  targetFile=_targetFile;
  conFontFile=core.getPropertiesManager().getCachedFont();
  unicodeFontFile=new IOHandler().getUnicodeFontByteArray();
  unicodeFont=PdfFontFactory.createFont(unicodeFontFile,PdfEncodings.IDENTITY_H,true);
  unicodeFont.setSubset(true);
  if (conFontFile == null) {
    conFont=unicodeFont;
  }
 else {
    conFont=PdfFontFactory.createFont(conFontFile,PdfEncodings.IDENTITY_H,true);
  }
  conFontSize=core.getPropertiesManager().getFontSize();
  glossKey=getGlossKey();
}",0.7490092470277411
167160,"/** 
 * Reads from given file
 * @param _fileName filename to read from
 * @throws Exception detailing any loading problems
 */
public void readFile(String _fileName) throws Exception {
  curLoading=true;
  String loadLog=""String_Node_Str"";
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser saxParser=factory.newSAXParser();
    CustHandler handler=CustHandlerFactory.getCustHandler(IOHandler.getDictFile(_fileName),this);
    handler.setWordCollection(wordCollection);
    handler.setTypeCollection(typeCollection);
    saxParser.parse(IOHandler.getDictFile(_fileName),handler);
  }
 catch (  ParserConfigurationException|SAXException|IOException e) {
    throw new Exception(e.getMessage());
  }
  try {
    IOHandler.setFontFrom(_fileName,this);
  }
 catch (  IOException|FontFormatException e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    IOHandler.loadGrammarSounds(_fileName,grammarManager);
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    logoCollection.loadRadicalRelations();
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    IOHandler.loadImages(logoCollection,_fileName);
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  curLoading=false;
  if (!loadLog.equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"");
  }
}","/** 
 * Reads from given file
 * @param _fileName filename to read from
 * @throws Exception detailing any loading problems
 */
public void readFile(String _fileName) throws Exception {
  curLoading=true;
  String loadLog=""String_Node_Str"";
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser saxParser=factory.newSAXParser();
    CustHandler handler;
    if (IOHandler.isFileZipArchive(_fileName)) {
      try (ZipFile zipFile=new ZipFile(_fileName)){
        ZipEntry xmlEntry=zipFile.getEntry(PGTUtil.dictFileName);
        try (InputStream ioStream=zipFile.getInputStream(xmlEntry)){
          handler=CustHandlerFactory.getCustHandler(ioStream,this);
        }
       }
     }
 else {
      try (InputStream ioStream=new FileInputStream(_fileName)){
        handler=CustHandlerFactory.getCustHandler(ioStream,this);
      }
     }
    handler.setWordCollection(wordCollection);
    handler.setTypeCollection(typeCollection);
    if (IOHandler.isFileZipArchive(_fileName)) {
      try (ZipFile zipFile=new ZipFile(_fileName)){
        ZipEntry xmlEntry=zipFile.getEntry(PGTUtil.dictFileName);
        try (InputStream ioStream=zipFile.getInputStream(xmlEntry)){
          saxParser.parse(ioStream,handler);
        }
       }
     }
 else {
      try (InputStream ioStream=new FileInputStream(_fileName)){
        saxParser.parse(ioStream,handler);
      }
     }
  }
 catch (  ParserConfigurationException|SAXException|IOException e) {
    throw new Exception(e.getMessage());
  }
  try {
    IOHandler.setFontFrom(_fileName,this);
  }
 catch (  IOException|FontFormatException e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    IOHandler.loadGrammarSounds(_fileName,grammarManager);
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    logoCollection.loadRadicalRelations();
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  try {
    IOHandler.loadImages(logoCollection,_fileName);
  }
 catch (  Exception e) {
    loadLog+=e.getLocalizedMessage() + ""String_Node_Str"";
  }
  curLoading=false;
  if (!loadLog.equals(""String_Node_Str"")) {
    throw new Exception(""String_Node_Str"");
  }
}",0.7111231101511879
167161,"/** 
 * Filters lexicon. Call RunFilter() instead of this, which runs on a timed session to prevent overlapping filters.
 */
private void filterLexicon(){
  if (curPopulating) {
    return;
  }
  String filterGend=cmbGenderSrc.getValue().equals(defGenderValue) ? ""String_Node_Str"" : ((GenderNode)cmbGenderSrc.getValue()).getValue();
  String filterType=cmbTypeSrc.getValue().equals(defTypeValue) ? ""String_Node_Str"" : ((TypeNode)cmbTypeSrc.getValue()).getValue();
  if (txtConSrc.getText().equals(""String_Node_Str"") && txtDefSrc.getText().equals(""String_Node_Str"") && txtLocalSrc.getText().equals(""String_Node_Str"")&& txtProcSrc.getText().equals(""String_Node_Str"")&& filterGend.equals(""String_Node_Str"")&& filterType.equals(""String_Node_Str"")) {
    populateLexicon();
    lstLexicon.setSelectedIndex(0);
    lstLexicon.ensureIndexIsVisible(0);
    return;
  }
  ConWord filter=new ConWord();
  filter.setValue(txtConSrc.getText().trim());
  filter.setDefinition(txtDefSrc.getText().trim());
  filter.setLocalWord(txtLocalSrc.getText().trim());
  filter.setWordType(filterType);
  filter.setGender(filterGend);
  filter.setPronunciation(txtProcSrc.getText().trim());
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  if (curWord != null) {
    saveValuesTo(curWord);
  }
  try {
    populateLexicon(core.getWordCollection().filteredList(filter));
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),this);
  }
  lstLexicon.setSelectedIndex(0);
  lstLexicon.ensureIndexIsVisible(0);
}","/** 
 * Filters lexicon. Call RunFilter() instead of this, which runs on a timed session to prevent overlapping filters.
 */
private void filterLexicon(){
  if (curPopulating) {
    return;
  }
  String filterGend=cmbGenderSrc.getValue().equals(defGenderValue) ? ""String_Node_Str"" : ((GenderNode)cmbGenderSrc.getValue()).getValue();
  String filterType=cmbTypeSrc.getValue().equals(defTypeValue) ? ""String_Node_Str"" : ((TypeNode)cmbTypeSrc.getValue()).getValue();
  if (txtConSrc.getText().equals(""String_Node_Str"") && txtDefSrc.getText().equals(""String_Node_Str"") && txtLocalSrc.getText().equals(""String_Node_Str"")&& txtProcSrc.getText().equals(""String_Node_Str"")&& filterGend.equals(""String_Node_Str"")&& filterType.equals(""String_Node_Str"")) {
    populateLexicon();
    lstLexicon.setSelectedIndex(0);
    lstLexicon.ensureIndexIsVisible(0);
    if (lstLexicon.getModel().getSize() < core.getWordCollection().getWordCount()) {
      populateLexicon();
      lstLexicon.setSelectedIndex(0);
      populateProperties();
    }
 else {
      return;
    }
  }
  ConWord filter=new ConWord();
  filter.setValue(txtConSrc.getText().trim());
  filter.setDefinition(txtDefSrc.getText().trim());
  filter.setLocalWord(txtLocalSrc.getText().trim());
  filter.setWordType(filterType);
  filter.setGender(filterGend);
  filter.setPronunciation(txtProcSrc.getText().trim());
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  if (curWord != null) {
    saveValuesTo(curWord);
  }
  try {
    populateLexicon(core.getWordCollection().filteredList(filter));
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),this);
  }
  lstLexicon.setSelectedIndex(0);
  lstLexicon.ensureIndexIsVisible(0);
}",0.9353658536585366
167162,"/** 
 * creates blank type, selects value for editing
 */
private void addType(){
  TypeNode curType=(TypeNode)lstTypes.getSelectedValue();
  if (curType != null) {
    savePropertiesTo(curType);
  }
  core.getTypes().clear();
  try {
    core.getTypes().insert();
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  populateTypes();
  lstTypes.setSelectedIndex(0);
  txtName.requestFocus();
}","/** 
 * creates blank type, selects value for editing
 */
private void addType(){
  TypeNode curType=(TypeNode)lstTypes.getSelectedValue();
  if (curType != null) {
    savePropertiesTo(curType);
  }
  core.getTypes().clear();
  try {
    core.getTypes().insert();
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  updatingName=true;
  populateTypes();
  lstTypes.setSelectedIndex(0);
  txtName.setText(""String_Node_Str"");
  populateProperties();
  updatingName=false;
  txtName.requestFocus();
}",0.8981571290009699
167163,"private void setFile(String fileName){
  if (fileName.equals(PGTUtil.emptyFile) || fileName.isEmpty()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  updateAllValues(core);
  try {
    core.readFile(fileName);
    curFileName=fileName;
  }
 catch (  Exception e) {
    core=new DictCore();
    localError(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getMessage());
  }
}","private void setFile(String fileName){
  if (fileName.equals(PGTUtil.emptyFile) || fileName.isEmpty()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  try {
    core.readFile(fileName);
    curFileName=fileName;
  }
 catch (  Exception e) {
    core=new DictCore();
    localError(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getMessage());
  }
  updateAllValues(core);
}",0.4725536992840095
167164,"private boolean chapMatchSrc(GrammarChapNode curChap,String src){
  if (curChap.getName().contains(src)) {
    return true;
  }
  Enumeration sections=curChap.children();
  while (sections.hasMoreElements()) {
    GrammarSectionNode curSec=(GrammarSectionNode)sections.nextElement();
    if (curSec.getName().contains(src)) {
      return true;
    }
  }
  return false;
}","private boolean chapMatchSrc(GrammarChapNode curChap,String src){
  if (curChap.getName().toLowerCase().contains(src.toLowerCase())) {
    return true;
  }
  Enumeration sections=curChap.children();
  while (sections.hasMoreElements()) {
    GrammarSectionNode curSec=(GrammarSectionNode)sections.nextElement();
    if (curSec.getName().contains(src)) {
      return true;
    }
  }
  return false;
}",0.932642487046632
167165,"/** 
 * Creates new form ScrDeclensionSetup
 * @param _core the dictionary core
 * @param _typeId ID of the type for which declensions are to be modified
 */
public ScrDeclensionSetup(DictCore _core,Integer _typeId){
  setupKeyStrokes();
  initComponents();
  try {
    core=_core;
    myType=_core.getTypes().getNodeById(_typeId);
    this.setTitle(""String_Node_Str"" + myType.getValue());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + _typeId + ""String_Node_Str""+ e.getMessage(),this);
    this.dispose();
  }
  declListModel=new DefaultListModel();
  lstDeclensionList.setModel(declListModel);
  setModal(true);
  populateDeclensionList();
  setupListeners();
  setupDimTable();
}","/** 
 * Creates new form ScrDeclensionSetup
 * @param _core the dictionary core
 * @param _typeId ID of the type for which declensions are to be modified
 */
public ScrDeclensionSetup(DictCore _core,Integer _typeId){
  core=_core;
  setupKeyStrokes();
  initComponents();
  try {
    myType=_core.getTypes().getNodeById(_typeId);
    this.setTitle(""String_Node_Str"" + myType.getValue());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + _typeId + ""String_Node_Str""+ e.getMessage(),this);
    this.dispose();
  }
  declListModel=new DefaultListModel();
  lstDeclensionList.setModel(declListModel);
  setModal(true);
  populateDeclensionList();
  setupListeners();
  setupDimTable();
}",0.9791666666666666
167166,"private void logoHit(){
  if (btnLogos.isSelected()) {
    try {
      if (scrLogos == null || scrLogos.isDisposed()) {
        scrLogos=ScrLogoDetails.run(core);
        bindButtonToWindow(scrLogos,btnLogos);
      }
      scrLogos.setVisible(true);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
 else {
    try {
      scrLogos.setVisible(false);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
}","private void logoHit(){
  if (btnLogos.isSelected()) {
    try {
      if (scrLogos == null || scrLogos.isDisposed()) {
        scrLogos=ScrLogoDetails.run(core);
        bindButtonToWindow(scrLogos,btnLogos);
      }
      scrLogos.setVisible(true);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
 else {
    try {
      scrLogos.setVisible(false);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
}",0.9642857142857144
167167,"public void grammarHit(){
  if (btnGrammar.isSelected()) {
    try {
      if (scrGrammar == null || scrGrammar.isDisposed()) {
        scrGrammar=ScrGrammarGuide.run(core);
        bindButtonToWindow(scrGrammar,btnGrammar);
      }
      scrGrammar.setVisible(true);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
 else {
    try {
      scrGrammar.setVisible(false);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
}","public void grammarHit(){
  if (btnGrammar.isSelected()) {
    try {
      if (scrGrammar == null || scrGrammar.isDisposed()) {
        scrGrammar=ScrGrammarGuide.run(core);
        bindButtonToWindow(scrGrammar,btnGrammar);
      }
      scrGrammar.setVisible(true);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
 else {
    try {
      scrGrammar.setVisible(false);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
}",0.9654576856649396
167168,"@Override protected Object doInBackground() throws Exception {
  try {
    core.writeFile(_fileName);
  }
 catch (  IOException|ParserConfigurationException|TransformerException e) {
    parent.setCleanSave(false);
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str""+ e.getMessage(),null);
  }
  latch.countDown();
  return null;
}","@Override protected Object doInBackground() throws Exception {
  try {
    core.writeFile(_fileName);
  }
 catch (  IOException|ParserConfigurationException|TransformerException e) {
    parent.setCleanSave(false);
    localError(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str""+ e.getMessage());
  }
  latch.countDown();
  return null;
}",0.7603305785123967
167169,"private void thesHit(){
  if (btnThes.isSelected()) {
    try {
      if (scrThes == null || scrThes.isDisposed()) {
        scrThes=ScrThesaurus.run(core,this);
        bindButtonToWindow(scrThes,btnThes);
      }
      scrThes.setVisible(true);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
 else {
    try {
      scrThes.setVisible(false);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
}","private void thesHit(){
  if (btnThes.isSelected()) {
    try {
      if (scrThes == null || scrThes.isDisposed()) {
        scrThes=ScrThesaurus.run(core,this);
        bindButtonToWindow(scrThes,btnThes);
      }
      scrThes.setVisible(true);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
 else {
    try {
      scrThes.setVisible(false);
    }
 catch (    Exception e) {
      localInfo(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
}",0.9648331830477908
167170,"@Override public void handlePrintFile(ApplicationEvent event){
  InfoBox.info(""String_Node_Str"",""String_Node_Str"",this);
}","@Override public void handlePrintFile(ApplicationEvent event){
  localInfo(""String_Node_Str"",""String_Node_Str"");
}",0.923728813559322
167171,"/** 
 * Gives user option to save file, returns continue/don't continue
 * @return true to signal continue, false to signal stop
 */
private boolean saveOrCancelTest(){
  if (core != null && core.getWordCollection().getNodeIterator().hasNext()) {
    boolean localOpening=openingFile;
    openingFile=true;
    Integer saveFirst=InfoBox.yesNoCancel(""String_Node_Str"",""String_Node_Str"",this);
    openingFile=localOpening;
    if (saveFirst == JOptionPane.YES_OPTION) {
      boolean saved=saveFile();
      if (!saved) {
        return false;
      }
    }
 else     if (saveFirst == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  return true;
}","/** 
 * Gives user option to save file, returns continue/don't continue
 * @return true to signal continue, false to signal stop
 */
private boolean saveOrCancelTest(){
  if (core != null && core.getWordCollection().getNodeIterator().hasNext()) {
    Integer saveFirst=localYesNoCancel(""String_Node_Str"",""String_Node_Str"");
    if (saveFirst == JOptionPane.YES_OPTION) {
      boolean saved=saveFile();
      if (!saved) {
        return false;
      }
    }
 else     if (saveFirst == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  return true;
}",0.8819672131147541
167172,"private void setFile(String fileName){
  if (fileName.equals(PGTUtil.emptyFile) || fileName.isEmpty()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  updateAllValues(core);
  try {
    core.readFile(fileName);
    curFileName=fileName;
  }
 catch (  Exception e) {
    core=new DictCore();
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getMessage(),this);
  }
}","private void setFile(String fileName){
  if (fileName.equals(PGTUtil.emptyFile) || fileName.isEmpty()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  updateAllValues(core);
  try {
    core.readFile(fileName);
    curFileName=fileName;
  }
 catch (  Exception e) {
    core=new DictCore();
    localError(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ e.getMessage());
  }
}",0.9763593380614656
167173,"/** 
 * Provided for cases where the java is run from an odd source folder (such as under an app file in OSX)
 * @param override directory for base PolyGlot directory
 */
private void setOverrideProgramPath(String override){
  core.getPropertiesManager().setOverrideProgramPath(override);
  try {
    core.getOptionsManager().loadIni();
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
}","/** 
 * Provided for cases where the java is run from an odd source folder (such as under an app file in OSX)
 * @param override directory for base PolyGlot directory
 */
private void setOverrideProgramPath(String override){
  core.getPropertiesManager().setOverrideProgramPath(override);
  try {
    core.getOptionsManager().loadIni();
  }
 catch (  Exception e) {
    localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
}",0.9779735682819384
167174,"@Override public void dispose(){
  if (!saveOrCancelTest()) {
    return;
  }
  try {
    core.getOptionsManager().setLastFiles(lastFiles);
    core.getOptionsManager().saveIni();
  }
 catch (  IOException e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  super.dispose();
  System.exit(0);
}","@Override public void dispose(){
  if (!saveOrCancelTest()) {
    return;
  }
  try {
    core.getOptionsManager().setLastFiles(lastFiles);
    core.getOptionsManager().saveIni();
  }
 catch (  IOException e) {
    localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
  }
  super.dispose();
  System.exit(0);
}",0.9702380952380952
167175,"/** 
 * Creates totally new file
 * @param performTest whether the UI ask for confirmation
 */
final public void newFile(boolean performTest){
  boolean localOpening=openingFile;
  openingFile=true;
  if (performTest && !saveOrCancelTest()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  updateAllValues(core);
  curFileName=""String_Node_Str"";
  openingFile=localOpening;
}","/** 
 * Creates totally new file
 * @param performTest whether the UI ask for confirmation
 */
final public void newFile(boolean performTest){
  if (performTest && !saveOrCancelTest()) {
    return;
  }
  core=new DictCore();
  core.setRootWindow(this);
  updateAllValues(core);
  curFileName=""String_Node_Str"";
}",0.8816901408450705
167176,"/** 
 * sends the write command to the core in a new thread
 * @param _fileName path to write to
 * @return returns success
 */
private boolean doWrite(final String _fileName){
  final ScrDictMenu parent=this;
  final CountDownLatch latch=new CountDownLatch(1);
  boolean ret;
  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  boolean localOpening=openingFile;
  openingFile=true;
  final SwingWorker worker=new SwingWorker(){
    @Override protected Object doInBackground() throws Exception {
      try {
        core.writeFile(_fileName);
      }
 catch (      IOException|ParserConfigurationException|TransformerException e) {
        parent.setCleanSave(false);
        InfoBox.error(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str""+ e.getMessage(),null);
      }
      latch.countDown();
      return null;
    }
  }
;
  worker.execute();
  try {
    latch.await(30,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"",null);
  }
  setCursor(Cursor.getDefaultCursor());
  if (cleanSave) {
    InfoBox.info(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str"",null);
    ret=true;
  }
 else {
    ret=false;
  }
  openingFile=localOpening;
  cleanSave=true;
  return ret;
}","/** 
 * sends the write command to the core in a new thread
 * @param _fileName path to write to
 * @return returns success
 */
private boolean doWrite(final String _fileName){
  final ScrDictMenu parent=this;
  final CountDownLatch latch=new CountDownLatch(1);
  boolean ret;
  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final SwingWorker worker=new SwingWorker(){
    @Override protected Object doInBackground() throws Exception {
      try {
        core.writeFile(_fileName);
      }
 catch (      IOException|ParserConfigurationException|TransformerException e) {
        parent.setCleanSave(false);
        localError(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str""+ e.getMessage());
      }
      latch.countDown();
      return null;
    }
  }
;
  worker.execute();
  try {
    latch.await(30,TimeUnit.SECONDS);
  }
 catch (  Exception e) {
    localError(""String_Node_Str"",""String_Node_Str"");
  }
  setCursor(Cursor.getDefaultCursor());
  if (cleanSave) {
    localInfo(""String_Node_Str"",""String_Node_Str"" + curFileName + ""String_Node_Str"");
    ret=true;
  }
 else {
    ret=false;
  }
  cleanSave=true;
  return ret;
}",0.7162714636140638
167177,"private void openHelp(){
  URI uri;
  try {
    String OS=System.getProperty(""String_Node_Str"");
    String overridePath=core.getPropertiesManager().getOverrideProgramPath();
    if (OS.startsWith(""String_Node_Str"")) {
      String relLocation=new File(""String_Node_Str"").getAbsolutePath();
      relLocation=relLocation.substring(0,relLocation.length() - 1);
      relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      uri=new URI(relLocation);
      uri.normalize();
      java.awt.Desktop.getDesktop().browse(uri);
    }
 else     if (OS.startsWith(""String_Node_Str"")) {
      String relLocation;
      if (overridePath.equals(""String_Node_Str"")) {
        relLocation=new File(""String_Node_Str"").getAbsolutePath();
        relLocation=relLocation.substring(0,relLocation.length() - 1);
        relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      }
 else {
        relLocation=core.getPropertiesManager().getOverrideProgramPath();
        relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      }
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      uri=new URI(relLocation);
      uri.normalize();
      java.awt.Desktop.getDesktop().browse(uri);
    }
 else {
      InfoBox.info(""String_Node_Str"",""String_Node_Str"" + OS + ""String_Node_Str"",this);
    }
  }
 catch (  URISyntaxException|IOException e) {
    InfoBox.info(""String_Node_Str"",""String_Node_Str"",this);
  }
}","private void openHelp(){
  URI uri;
  try {
    String OS=System.getProperty(""String_Node_Str"");
    String overridePath=core.getPropertiesManager().getOverrideProgramPath();
    if (OS.startsWith(""String_Node_Str"")) {
      String relLocation=new File(""String_Node_Str"").getAbsolutePath();
      relLocation=relLocation.substring(0,relLocation.length() - 1);
      relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      uri=new URI(relLocation);
      uri.normalize();
      java.awt.Desktop.getDesktop().browse(uri);
    }
 else     if (OS.startsWith(""String_Node_Str"")) {
      String relLocation;
      if (overridePath.equals(""String_Node_Str"")) {
        relLocation=new File(""String_Node_Str"").getAbsolutePath();
        relLocation=relLocation.substring(0,relLocation.length() - 1);
        relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      }
 else {
        relLocation=core.getPropertiesManager().getOverrideProgramPath();
        relLocation=""String_Node_Str"" + relLocation + ""String_Node_Str"";
      }
      relLocation=relLocation.replaceAll(""String_Node_Str"",""String_Node_Str"");
      uri=new URI(relLocation);
      uri.normalize();
      java.awt.Desktop.getDesktop().browse(uri);
    }
 else {
      localError(""String_Node_Str"",""String_Node_Str"" + OS + ""String_Node_Str"");
    }
  }
 catch (  URISyntaxException|IOException e) {
    localError(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9831985065339142
167178,"/** 
 * saves file as particular filename
 * @return true if file saved, false otherwise
 */
private boolean saveFileAs(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  chooser.setApproveButtonText(""String_Node_Str"");
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  String fileName;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return false;
  }
  if (!fileName.contains(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  File f=new File(fileName);
  if (f.exists()) {
    Integer overWrite=InfoBox.yesNoCancel(""String_Node_Str"",""String_Node_Str"" + fileName,this);
    if (overWrite == JOptionPane.NO_OPTION) {
      saveFileAs();
    }
 else     if (overWrite == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  curFileName=fileName;
  return true;
}","/** 
 * saves file as particular filename
 * @return true if file saved, false otherwise
 */
private boolean saveFileAs(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  chooser.setApproveButtonText(""String_Node_Str"");
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  String fileName;
  holdFront=true;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return false;
  }
  holdFront=false;
  if (!fileName.contains(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  File f=new File(fileName);
  if (f.exists()) {
    Integer overWrite=localYesNoCancel(""String_Node_Str"",""String_Node_Str"" + fileName);
    if (overWrite == JOptionPane.NO_OPTION) {
      saveFileAs();
    }
 else     if (overWrite == JOptionPane.CANCEL_OPTION) {
      return false;
    }
  }
  curFileName=fileName;
  return true;
}",0.9739368998628258
167179,"/** 
 * Prompts user for a location and exports font within PGD to given path
 */
public void exportFont(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  String fileName;
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  chooser.setApproveButtonText(""String_Node_Str"");
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  try {
    IOHandler.exportFont(fileName,curFileName);
  }
 catch (  IOException e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),this);
  }
}","/** 
 * Prompts user for a location and exports font within PGD to given path
 */
public void exportFont(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  String fileName;
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  chooser.setApproveButtonText(""String_Node_Str"");
  holdFront=true;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  holdFront=false;
  try {
    IOHandler.exportFont(fileName,curFileName);
  }
 catch (  IOException e) {
    localError(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
}",0.9642633228840124
167180,"/** 
 * Checks to make certain Java is a high enough version. Informs user and quits otherwise.
 */
private void checkJavaVersion(){
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (javaVersion.startsWith(""String_Node_Str"") || javaVersion.startsWith(""String_Node_Str"") || javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + javaVersion + ""String_Node_Str""+ ""String_Node_Str"",this);
    System.exit(0);
  }
}","/** 
 * Checks to make certain Java is a high enough version. Informs user and quits otherwise.
 */
private void checkJavaVersion(){
  String javaVersion=System.getProperty(""String_Node_Str"");
  if (javaVersion.startsWith(""String_Node_Str"") || javaVersion.startsWith(""String_Node_Str"") || javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")|| javaVersion.startsWith(""String_Node_Str"")) {
    localError(""String_Node_Str"",""String_Node_Str"" + javaVersion + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(0);
  }
}",0.8108527131782945
167181,"/** 
 * checks web for updates to PolyGlot
 * @param verbose Set this to have messages post to user.
 */
private void checkForUpdates(final boolean verbose){
  final Window parent=this;
  Thread check=new Thread(){
    @Override public void run(){
      try {
        ScrUpdateAlert.run(verbose,core);
      }
 catch (      Exception e) {
        if (verbose) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),parent);
        }
      }
    }
  }
;
  check.start();
}","/** 
 * checks web for updates to PolyGlot
 * @param verbose Set this to have messages post to user.
 */
private void checkForUpdates(final boolean verbose){
  final Window parent=this;
  Thread check=new Thread(){
    @Override public void run(){
      try {
        ScrUpdateAlert.run(verbose,core);
      }
 catch (      Exception e) {
        if (verbose) {
          PolyGlot.CustomControls.InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),parent);
        }
      }
    }
  }
;
  check.start();
}",0.97678916827853
167182,"private void lexHit(){
  if (btnLexicon.isSelected()) {
    try {
      if (scrLexicon == null || scrLexicon.isDisposed()) {
        scrLexicon=ScrLexicon.run(core);
        bindButtonToWindow(scrLexicon,btnLexicon);
      }
      scrLexicon.setVisible(true);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
 else {
    try {
      scrLexicon.setVisible(false);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
    }
  }
}","private void lexHit(){
  if (btnLexicon.isSelected()) {
    try {
      if (scrLexicon == null || scrLexicon.isDisposed()) {
        scrLexicon=ScrLexicon.run(core);
        bindButtonToWindow(scrLexicon,btnLexicon);
      }
      scrLexicon.setVisible(true);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
 else {
    try {
      scrLexicon.setVisible(false);
    }
 catch (    Exception e) {
      localError(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
    }
  }
}",0.6637478108581436
167183,"/** 
 * Export dictionary to excel file
 */
private void exportToExcel(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  chooser.setApproveButtonText(""String_Node_Str"");
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  String fileName;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  if (!fileName.contains(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  try {
    ExcelExport.exportExcelDict(fileName,core);
    InfoBox.info(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"",this);
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",e.getLocalizedMessage(),this);
  }
}","/** 
 * Export dictionary to excel file
 */
private void exportToExcel(){
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  chooser.setApproveButtonText(""String_Node_Str"");
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  String fileName;
  holdFront=true;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  holdFront=false;
  if (!fileName.contains(""String_Node_Str"")) {
    fileName+=""String_Node_Str"";
  }
  try {
    ExcelExport.exportExcelDict(fileName,core);
    localInfo(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
 catch (  Exception e) {
    localError(""String_Node_Str"",e.getLocalizedMessage());
  }
}",0.8714053174172545
167184,"@Override public boolean thisOrChildrenFocused(){
  boolean ret=this.isFocusOwner() || openingFile;
  ret=ret || (scrLexicon != null && scrLexicon.thisOrChildrenFocused());
  ret=ret || (scrGrammar != null && scrGrammar.thisOrChildrenFocused());
  ret=ret || (scrLogos != null && scrLogos.thisOrChildrenFocused());
  ret=ret || (scrThes != null && scrThes.thisOrChildrenFocused());
  return ret;
}","@Override public boolean thisOrChildrenFocused(){
  boolean ret=this.isFocusOwner() || holdFront;
  ret=ret || (scrLexicon != null && scrLexicon.thisOrChildrenFocused());
  ret=ret || (scrGrammar != null && scrGrammar.thisOrChildrenFocused());
  ret=ret || (scrLogos != null && scrLogos.thisOrChildrenFocused());
  ret=ret || (scrThes != null && scrThes.thisOrChildrenFocused());
  return ret;
}",0.9747474747474748
167185,"/** 
 * opens dictionary file
 */
public void open(){
  boolean localOpening=openingFile;
  openingFile=true;
  if (!saveOrCancelTest()) {
    return;
  }
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  String fileName;
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  openingFile=localOpening;
  core=new DictCore();
  core.setRootWindow(this);
  setFile(fileName);
  pushRecentFile(fileName);
  populateRecentOpened();
}","/** 
 * opens dictionary file
 */
public void open(){
  if (!saveOrCancelTest()) {
    return;
  }
  JFileChooser chooser=new JFileChooser();
  chooser.setDialogTitle(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  String fileName;
  chooser.setCurrentDirectory(new File(""String_Node_Str""));
  holdFront=true;
  if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    fileName=chooser.getSelectedFile().getAbsolutePath();
  }
 else {
    return;
  }
  holdFront=false;
  core=new DictCore();
  core.setRootWindow(this);
  setFile(fileName);
  pushRecentFile(fileName);
  populateRecentOpened();
}",0.7712590639419907
167186,"/** 
 * Checks whether PolyGlot has focus, and sets main menu to always on top ONLY if so
 */
public void checkProgramFocus(){
  boolean top=rootWindow.thisOrChildrenFocused();
  rootWindow.setAlwaysOnTop(top);
  if (!top) {
    rootWindow.toBack();
  }
}","/** 
 * Checks whether PolyGlot has focus, and sets main menu to always on top ONLY if so
 */
public void checkProgramFocus(){
}",0.6684073107049608
167187,"/** 
 * Creates new form scrExcelImport
 * @param _core feed this the dictCore from the main program
 */
public ScrExcelImport(DictCore _core){
  setupKeyStrokes();
  initComponents();
  setModal(true);
  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  core=_core;
}","/** 
 * Creates new form scrExcelImport
 * @param _core feed this the dictCore from the main program
 */
public ScrExcelImport(DictCore _core){
  core=_core;
  setupKeyStrokes();
  initComponents();
  setModal(true);
  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
}",0.9492753623188406
167188,"/** 
 * Populates recently opened files menu
 */
private void populateRecentOpened(){
  mnuRecents.removeAll();
  for (  final String curFile : lastFiles) {
    Path p=Paths.get(curFile);
    String fileName=p.getFileName().toString();
    JMenuItem lastFile=new JMenuItem();
    lastFile.setText(fileName);
    lastFile.setToolTipText(curFile);
    lastFile.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        setFile(curFile);
      }
    }
);
    mnuRecents.add(lastFile);
  }
}","/** 
 * Populates recently opened files menu
 */
private void populateRecentOpened(){
  mnuRecents.removeAll();
  for (  final String curFile : lastFiles) {
    Path p=Paths.get(curFile);
    String fileName=p.getFileName().toString();
    JMenuItem lastFile=new JMenuItem();
    lastFile.setText(fileName);
    lastFile.setToolTipText(curFile);
    lastFile.addActionListener(new java.awt.event.ActionListener(){
      @Override public void actionPerformed(      java.awt.event.ActionEvent evt){
        if (!saveOrCancelTest()) {
          return;
        }
        setFile(curFile);
      }
    }
);
    mnuRecents.add(lastFile);
  }
}",0.91838417147568
167189,"/** 
 * populates properties of currently selected word
 */
private void populateProperties(){
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  boolean localPopulating=curPopulating;
  curPopulating=true;
  try {
    if (curWord == null) {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(defConValue);
        namePopulating=false;
      }
      txtDefinition.setText(defDefValue);
      txtLocalWord.setText(defLocalValue);
      txtProc.setText(defProcValue);
      cmbGender.setSelectedItem(defGenderValue);
      cmbType.setSelectedItem(defTypeValue);
      chkProcOverride.setSelected(false);
      chkRuleOverride.setSelected(false);
      setPropertiesEnabled(false);
    }
 else {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(curWord.getValue());
        namePopulating=false;
      }
      txtDefinition.setText(curWord.getDefinition().equals(""String_Node_Str"") ? defDefValue : curWord.getDefinition());
      txtLocalWord.setText(curWord.getLocalWord().equals(""String_Node_Str"") ? defLocalValue : curWord.getLocalWord());
      txtProc.setText(curWord.getPronunciation().equals(""String_Node_Str"") ? defProcValue : curWord.getPronunciation());
      cmbGender.setSelectedItem(curWord.getGender().equals(""String_Node_Str"") ? defGenderValue : core.getGenders().findGenderByName(curWord.getGender()));
      cmbType.setSelectedItem(curWord.getWordType().equals(""String_Node_Str"") ? defTypeValue : core.getTypes().findTypeByName(curWord.getWordType()));
      chkProcOverride.setSelected(curWord.isProcOverride());
      chkRuleOverride.setSelected(curWord.isRulesOverrride());
      setPropertiesEnabled(true);
    }
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  setAllGreyProps();
  curPopulating=localPopulating;
}","/** 
 * populates properties of currently selected word
 */
private void populateProperties(){
  ConWord curWord=(ConWord)lstLexicon.getSelectedValue();
  boolean localPopulating=curPopulating;
  curPopulating=true;
  try {
    if (curWord == null) {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(defConValue);
        namePopulating=false;
      }
      txtDefinition.setText(defDefValue);
      txtLocalWord.setText(defLocalValue);
      txtProc.setText(defProcValue);
      cmbGender.setSelectedItem(defGenderValue);
      cmbType.setSelectedItem(defTypeValue);
      chkProcOverride.setSelected(false);
      chkRuleOverride.setSelected(false);
      setPropertiesEnabled(false);
    }
 else {
      if (!namePopulating) {
        namePopulating=true;
        txtConWord.setText(curWord.getValue());
        namePopulating=false;
      }
      txtDefinition.setText(curWord.getDefinition().equals(""String_Node_Str"") ? defDefValue : curWord.getDefinition());
      txtLocalWord.setText(curWord.getLocalWord().equals(""String_Node_Str"") ? defLocalValue : curWord.getLocalWord());
      txtProc.setText(curWord.getPronunciation().equals(""String_Node_Str"") ? defProcValue : curWord.getPronunciation());
      GenderNode gender=core.getGenders().findGenderByName(curWord.getGender());
      cmbGender.setSelectedItem(gender == null ? defGenderValue : gender);
      TypeNode type=core.getTypes().findTypeByName(curWord.getWordType());
      cmbType.setSelectedItem(type == null ? defTypeValue : type);
      chkProcOverride.setSelected(curWord.isProcOverride());
      chkRuleOverride.setSelected(curWord.isRulesOverrride());
      setPropertiesEnabled(true);
    }
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),this);
  }
  setAllGreyProps();
  curPopulating=localPopulating;
}",0.8947927736450585
167190,"/** 
 * Saves current values to argument word. Default values will not be saved.
 * @param saveWord word to save current values to
 */
private void saveValuesTo(ConWord saveWord){
  if (txtConWord.getText().equals(defConValue)) {
    return;
  }
  saveWord.setValue(txtConWord.getText());
  saveWord.setDefinition(txtDefinition.getText().equals(defDefValue) ? ""String_Node_Str"" : txtDefinition.getText());
  GenderNode curGend=(GenderNode)cmbGender.getSelectedItem();
  saveWord.setGender(curGend.equals(defGenderValue) ? ""String_Node_Str"" : curGend.getValue());
  saveWord.setLocalWord(txtLocalWord.getText().equals(defLocalValue) ? ""String_Node_Str"" : txtLocalWord.getText());
  saveWord.setProcOverride(chkProcOverride.isSelected());
  saveWord.setPronunciation(txtProc.getText().equals(defProcValue) ? ""String_Node_Str"" : txtProc.getText());
  saveWord.setRulesOverride(chkRuleOverride.isSelected());
  TypeNode curType=(TypeNode)cmbType.getSelectedItem();
  saveWord.setWordType(curType.equals(defTypeValue) ? ""String_Node_Str"" : curType.getValue());
}","/** 
 * Saves current values to argument word. Default values will not be saved.
 * @param saveWord word to save current values to
 */
private void saveValuesTo(ConWord saveWord){
  if (txtConWord.getText().equals(defConValue)) {
    return;
  }
  saveWord.setValue(txtConWord.getText());
  saveWord.setDefinition(txtDefinition.getText().equals(defDefValue) ? ""String_Node_Str"" : txtDefinition.getText());
  GenderNode curGend=(GenderNode)cmbGender.getSelectedItem();
  if (curGend != null) {
    saveWord.setGender(curGend.equals(defGenderValue) ? ""String_Node_Str"" : curGend.getValue());
  }
  saveWord.setLocalWord(txtLocalWord.getText().equals(defLocalValue) ? ""String_Node_Str"" : txtLocalWord.getText());
  saveWord.setProcOverride(chkProcOverride.isSelected());
  saveWord.setPronunciation(txtProc.getText().equals(defProcValue) ? ""String_Node_Str"" : txtProc.getText());
  saveWord.setRulesOverride(chkRuleOverride.isSelected());
  TypeNode curType=(TypeNode)cmbType.getSelectedItem();
  if (curType != null) {
    saveWord.setWordType(curType.equals(defTypeValue) ? ""String_Node_Str"" : curType.getValue());
  }
}",0.9430147058823528
167191,"/** 
 * Creates new form scrGrammarGuide
 * @param _core Dictionary core
 */
public ScrGrammarGuide(DictCore _core){
  isUpdating=false;
  defSearch=""String_Node_Str"";
  defName=""String_Node_Str"";
  defTime=""String_Node_Str"";
  core=_core;
  playButtonUp=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  playButtonDown=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  recordButtonUp=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  recordButtonDown=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addButton=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  deleteButton=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addButtonPressed=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  deleteButtonPressed=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  initComponents();
  txtSection.setCaret(new HighlightCaret());
  soundRecorder=new SoundRecorder(this);
  soundRecorder.setButtons(btnRecordAudio,btnPlayPauseAudio,playButtonUp,playButtonDown,recordButtonUp,recordButtonDown);
  setInitialValues();
  setupListeners();
  populateSections();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    btnAddSection.setToolTipText(btnAddSection.getToolTipText() + ""String_Node_Str"");
    btnDelete.setToolTipText(btnDelete.getToolTipText() + ""String_Node_Str"");
  }
 else {
    btnAddSection.setToolTipText(btnAddSection.getToolTipText() + ""String_Node_Str"");
    btnDelete.setToolTipText(btnDelete.getToolTipText() + ""String_Node_Str"");
  }
}","/** 
 * Creates new form scrGrammarGuide
 * @param _core Dictionary core
 */
public ScrGrammarGuide(DictCore _core){
  isUpdating=false;
  defSearch=""String_Node_Str"";
  defName=""String_Node_Str"";
  defTime=""String_Node_Str"";
  core=_core;
  playButtonUp=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  playButtonDown=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  recordButtonUp=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  recordButtonDown=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addButton=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  deleteButton=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  addButtonPressed=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  deleteButtonPressed=getButtonSizeIcon(new ImageIcon(getClass().getResource(""String_Node_Str"")));
  initComponents();
  txtSection.setCaret(new HighlightCaret());
  soundRecorder=new SoundRecorder(this);
  soundRecorder.setButtons(btnRecordAudio,btnPlayPauseAudio,playButtonUp,playButtonDown,recordButtonUp,recordButtonDown);
  setInitialValues();
  setupListeners();
  populateSections();
  treChapList.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    btnAddSection.setToolTipText(btnAddSection.getToolTipText() + ""String_Node_Str"");
    btnDelete.setToolTipText(btnDelete.getToolTipText() + ""String_Node_Str"");
  }
 else {
    btnAddSection.setToolTipText(btnAddSection.getToolTipText() + ""String_Node_Str"");
    btnDelete.setToolTipText(btnDelete.getToolTipText() + ""String_Node_Str"");
  }
}",0.973188819167142
167192,"@Override public void repaint(){
  if (skipRepaint) {
    return;
  }
  try {
    if (parent != null) {
      core=parent.getCore();
    }
    if (core == null) {
      return;
    }
    PropertiesManager propMan=core.getPropertiesManager();
    skipRepaint=true;
    if (!curSetText) {
      if (propMan.isEnforceRTL()) {
        prefixRTL();
      }
 else {
        defixRTL();
      }
      Font testFont=propMan.getFontCon();
      if (!testFont.getFamily().equals(getFont().getFamily())) {
        setFont(testFont);
      }
    }
    skipRepaint=false;
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),null);
    skipRepaint=false;
  }
  super.repaint();
}","@Override public void repaint(){
  if (skipRepaint) {
    return;
  }
  try {
    if (parent != null) {
      core=parent.getCore();
    }
    if (core == null) {
      return;
    }
    PropertiesManager propMan=core.getPropertiesManager();
    skipRepaint=true;
    if (!curSetText) {
      if (propMan.isEnforceRTL()) {
        prefixRTL();
      }
 else {
        defixRTL();
      }
      Font testFont=propMan.getFontCon();
      if (testFont != null && !testFont.getFamily().equals(getFont().getFamily())) {
        setFont(testFont);
      }
    }
    skipRepaint=false;
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage(),null);
    skipRepaint=false;
  }
  super.repaint();
}",0.9863387978142076
167193,"/** 
 * Gets language's font
 * @return the fontCon
 */
public Font getFontCon(){
  return font == null ? new JTextField().getFont() : font.deriveFont(fontStyle,fontSize);
}","/** 
 * Gets language's font
 * @return the fontCon
 */
public Font getFontCon(){
  if (fontSize == 0) {
    fontSize=12;
  }
  return font == null ? new JTextField().getFont() : font.deriveFont(fontStyle,fontSize);
}",0.8871794871794871
167194,"/** 
 * Sets currently selected rule's regex equal to proper text box if not already equal
 */
private void setRuleRegex(){
  DeclensionGenRule rule=(DeclensionGenRule)lstRules.getSelectedValue();
  String ruleRegex=txtRuleRegex.getText().trim();
  if (!curPopulating && rule != null && !rule.getName().equals(ruleRegex)) {
    rule.setRegex(ruleRegex);
  }
}","/** 
 * Sets currently selected rule's regex equal to proper text box if not already equal
 */
private void setRuleRegex(){
  DeclensionGenRule rule=(DeclensionGenRule)lstRules.getSelectedValue();
  String ruleRegex=txtRuleRegex.getText().trim();
  if (!curPopulating && rule != null) {
    rule.setRegex(ruleRegex);
  }
}",0.922173274596182
167195,"private void setupKeyStrokes(){
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    InputMap im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
  }
}","/** 
 * enable cut/copy/paste if running on a mac
 */
protected void setupKeyStrokes(){
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    InputMap im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
  }
}",0.9810708491076258
167196,"@Override public void pack(){
  setupKeyStrokes();
  super.pack();
  if (!skipCenter) {
    this.setLocationRelativeTo(null);
  }
}","@Override public void pack(){
  super.pack();
  if (!skipCenter) {
    this.setLocationRelativeTo(null);
  }
}",0.9128630705394192
167197,"@Override public void setVisible(boolean visible){
  setupKeyStrokes();
  if (!ignoreCenter) {
    this.setLocationRelativeTo(null);
  }
  super.setVisible(visible);
}","@Override public void setVisible(boolean visible){
  if (!ignoreCenter) {
    this.setLocationRelativeTo(null);
  }
  super.setVisible(visible);
}",0.9329073482428116
167198,"private void setupKeyStrokes(){
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    InputMap im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
  }
}","/** 
 * enable cut/copy/paste if running on a mac
 */
protected void setupKeyStrokes(){
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    InputMap im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
  }
}",0.9810708491076258
167199,"/** 
 * Creates new form scrSetupDeclGen
 * @param _core dictionary core
 * @param _typeId ID of type to pull rules for
 */
private ScrDeclensionGenSetup(DictCore _core,int _typeId){
  core=_core;
  typeId=_typeId;
  depRulesList=core.getDeclensionManager().getAllDepGenerationRules(_typeId);
  initComponents();
  setupObjectModels();
  setupListeners();
  setObjectProperties();
  populateCombinedDecl();
}","/** 
 * Creates new form scrSetupDeclGen
 * @param _core dictionary core
 * @param _typeId ID of type to pull rules for
 */
private ScrDeclensionGenSetup(DictCore _core,int _typeId){
  core=_core;
  typeId=_typeId;
  depRulesList=core.getDeclensionManager().getAllDepGenerationRules(_typeId);
  setupKeyStrokes();
  initComponents();
  setupObjectModels();
  setupListeners();
  setObjectProperties();
  populateCombinedDecl();
}",0.974910394265233
167200,"/** 
 * Creates new form ScrDeclensionSetup
 * @param _core the dictionary core
 * @param _typeId ID of the type for which declensions are to be modified
 */
public ScrDeclensionSetup(DictCore _core,Integer _typeId){
  initComponents();
  try {
    core=_core;
    myType=_core.getTypes().getNodeById(_typeId);
    this.setTitle(""String_Node_Str"" + myType.getValue());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + _typeId + ""String_Node_Str""+ e.getMessage(),this);
    this.dispose();
  }
  declListModel=new DefaultListModel();
  lstDeclensionList.setModel(declListModel);
  populateDeclensionList();
  setupListeners();
  setupDimTable();
}","/** 
 * Creates new form ScrDeclensionSetup
 * @param _core the dictionary core
 * @param _typeId ID of the type for which declensions are to be modified
 */
public ScrDeclensionSetup(DictCore _core,Integer _typeId){
  setupKeyStrokes();
  initComponents();
  try {
    core=_core;
    myType=_core.getTypes().getNodeById(_typeId);
    this.setTitle(""String_Node_Str"" + myType.getValue());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + _typeId + ""String_Node_Str""+ e.getMessage(),this);
    this.dispose();
  }
  declListModel=new DefaultListModel();
  lstDeclensionList.setModel(declListModel);
  populateDeclensionList();
  setupListeners();
  setupDimTable();
}",0.9848375451263538
167201,"/** 
 * Creates new form scrDictInterface
 */
public ScrDictInterface(){
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    InputMap im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
    im=(InputMap)UIManager.get(""String_Node_Str"");
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.copyAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_V,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.pasteAction);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK),DefaultEditorKit.cutAction);
    UIManager.put(""String_Node_Str"",im);
  }
  initComponents();
  dListModel=new DefaultListModel();
  lstDict.setModel(dListModel);
  tListModel=new DefaultListModel();
  lstTypesList.setModel(tListModel);
  gListModel=new DefaultListModel();
  lstGenderList.setModel(gListModel);
  newFile(true);
  setTitle(screenTitle + ""String_Node_Str"" + core.getVersion());
  setupListeners();
  setupProcTable();
  setupAccelerators();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    activateMacify();
  }
}","/** 
 * Creates new form scrDictInterface
 */
public ScrDictInterface(){
  this.setupKeyStrokes();
  initComponents();
  dListModel=new DefaultListModel();
  lstDict.setModel(dListModel);
  tListModel=new DefaultListModel();
  lstTypesList.setModel(tListModel);
  gListModel=new DefaultListModel();
  lstGenderList.setModel(gListModel);
  newFile(true);
  setTitle(screenTitle + ""String_Node_Str"" + core.getVersion());
  setupListeners();
  setupProcTable();
  setupAccelerators();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    activateMacify();
  }
}",0.0967961826857532
167202,"/** 
 * Creates new form scrExcelImport
 * @param _core feed this the dictCore from the main program
 */
public ScrExcelImport(DictCore _core){
  initComponents();
  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  core=_core;
}","/** 
 * Creates new form scrExcelImport
 * @param _core feed this the dictCore from the main program
 */
public ScrExcelImport(DictCore _core){
  setupKeyStrokes();
  initComponents();
  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  core=_core;
}",0.9575757575757576
167203,"/** 
 * Creates new form scrLangStats
 * @param _core DictCore to build report from
 */
public ScrLangStats(DictCore _core){
  initComponents();
  core=_core;
  jTextPane1.setContentType(""String_Node_Str"");
  jTextPane1.setText(""String_Node_Str"" + core.buildLanguageReport() + ""String_Node_Str"");
  jTextPane1.setCaretPosition(0);
  jScrollPane2.getVerticalScrollBar().setValue(0);
  jScrollPane2.getHorizontalScrollBar().setValue(0);
}","/** 
 * Creates new form scrLangStats
 * @param _core DictCore to build report from
 */
public ScrLangStats(DictCore _core){
  setupKeyStrokes();
  initComponents();
  core=_core;
  jTextPane1.setContentType(""String_Node_Str"");
  jTextPane1.setText(""String_Node_Str"" + core.buildLanguageReport() + ""String_Node_Str"");
  jTextPane1.setCaretPosition(0);
  jScrollPane2.getVerticalScrollBar().setValue(0);
  jScrollPane2.getHorizontalScrollBar().setValue(0);
}",0.9764837625979844
167204,"/** 
 * Opens logo window with particular logograph selected
 * @param _core
 * @param logoId
 */
public ScrLogoDetails(DictCore _core,int logoId){
  setNimbus();
  initComponents();
  core=_core;
  setupFonts();
  try {
    singleModeLogo=(LogoNode)core.getLogoCollection().getNodeById(logoId);
    List<LogoNode> list=new ArrayList();
    list.add(singleModeLogo);
    populateLogographs(list.iterator());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),this);
  }
  setSingleLogoMode(true);
  populateLogoProps();
  setupListeners();
  setTitle(""String_Node_Str"");
  mode=WindowMode.SINGLEVALUE;
}","/** 
 * Opens logo window with particular logograph selected
 * @param _core
 * @param logoId
 */
public ScrLogoDetails(DictCore _core,int logoId){
  setNimbus();
  setupKeyStrokes();
  initComponents();
  core=_core;
  setupFonts();
  try {
    singleModeLogo=(LogoNode)core.getLogoCollection().getNodeById(logoId);
    List<LogoNode> list=new ArrayList();
    list.add(singleModeLogo);
    populateLogographs(list.iterator());
  }
 catch (  Exception e) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),this);
  }
  setSingleLogoMode(true);
  populateLogoProps();
  setupListeners();
  setTitle(""String_Node_Str"");
  mode=WindowMode.SINGLEVALUE;
}",0.9841509433962264
167205,"/** 
 * opens window to show all logographs, or all radicals
 * @param _core dictionary core
 * @param showRadicalsOnly set true to limit to only radicals
 */
public ScrLogoQuickView(DictCore _core,boolean showRadicalsOnly){
  initComponents();
  core=_core;
  setupFonts();
  setupResize();
  btnAdd.setVisible(!showRadicalsOnly);
  btnDel.setVisible(!showRadicalsOnly);
  btnDetails.setVisible(!showRadicalsOnly);
  if (showRadicalsOnly) {
    populateLogos(core.getLogoCollection().getRadicals());
    this.setTitle(""String_Node_Str"");
  }
 else {
    populateLogos(core.getLogoCollection().getAllLogos());
  }
  mode=WindowMode.SELECTLIST;
}","/** 
 * opens window to show all logographs, or all radicals
 * @param _core dictionary core
 * @param showRadicalsOnly set true to limit to only radicals
 */
public ScrLogoQuickView(DictCore _core,boolean showRadicalsOnly){
  setupKeyStrokes();
  initComponents();
  core=_core;
  setupFonts();
  setupResize();
  btnAdd.setVisible(!showRadicalsOnly);
  btnDel.setVisible(!showRadicalsOnly);
  btnDetails.setVisible(!showRadicalsOnly);
  if (showRadicalsOnly) {
    populateLogos(core.getLogoCollection().getRadicals());
    this.setTitle(""String_Node_Str"");
  }
 else {
    populateLogos(core.getLogoCollection().getAllLogos());
  }
  mode=WindowMode.SELECTLIST;
}",0.9839816933638444
167206,"@Override public void run(){
  new ScrLogoQuickView(new DictCore(),false).setVisible(true);
}","@Override public void run(){
  logoFinder.setVisible(true);
}",0.7402597402597403
167207,"/** 
 * Creates new form scrQuickWordEntry
 * @param _core Dictionary core
 */
public ScrQuickWordEntry(DictCore _core){
  core=_core;
  initComponents();
  enterListener=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && (!cmbGender.isPopupVisible()) && !cmbType.isPopupVisible()) {
        tryRecord();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyTyped(    KeyEvent e){
    }
  }
;
  txtConWord.setFont(core.getPropertiesManager().getFontCon());
  txtConWord.addKeyListener(enterListener);
  txtDefinition.addKeyListener(enterListener);
  txtLocalWord.addKeyListener(enterListener);
  txtProc.addKeyListener(enterListener);
  cmbGender.addKeyListener(enterListener);
  cmbType.addKeyListener(enterListener);
  txtConWord.setBackground(core.getRequiredColor());
  txtConWord.requestFocus();
  if (core.getPropertiesManager().isLocalMandatory()) {
    txtLocalWord.setBackground(core.getRequiredColor());
    chkLocal.setEnabled(false);
  }
  if (core.getPropertiesManager().isTypesMandatory()) {
    cmbType.setForeground(core.getRequiredColor());
    chkType.setEnabled(false);
  }
  populateTypes();
  populateGenders();
}","/** 
 * Creates new form scrQuickWordEntry
 * @param _core Dictionary core
 */
public ScrQuickWordEntry(DictCore _core){
  core=_core;
  setupKeyStrokes();
  initComponents();
  enterListener=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && (!cmbGender.isPopupVisible()) && !cmbType.isPopupVisible()) {
        tryRecord();
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyTyped(    KeyEvent e){
    }
  }
;
  txtConWord.setFont(core.getPropertiesManager().getFontCon());
  txtConWord.addKeyListener(enterListener);
  txtDefinition.addKeyListener(enterListener);
  txtLocalWord.addKeyListener(enterListener);
  txtProc.addKeyListener(enterListener);
  cmbGender.addKeyListener(enterListener);
  cmbType.addKeyListener(enterListener);
  txtConWord.setBackground(core.getRequiredColor());
  txtConWord.requestFocus();
  if (core.getPropertiesManager().isLocalMandatory()) {
    txtLocalWord.setBackground(core.getRequiredColor());
    chkLocal.setEnabled(false);
  }
  if (core.getPropertiesManager().isTypesMandatory()) {
    cmbType.setForeground(core.getRequiredColor());
    chkType.setEnabled(false);
  }
  populateTypes();
  populateGenders();
}",0.9917094354520332
167208,"/** 
 * Creates new form ScrThesaurus
 * @param _core dictionary core
 * @param _parent parent window
 */
public ScrThesaurus(DictCore _core,ScrDictInterface _parent){
  core=_core;
  parent=_parent;
  initComponents();
  ThesTreeNode root=new ThesTreeNode();
  root.setAsRootNode(core.getThesManager().getRoot());
  TreeModel newModel=new DefaultTreeModel(root);
  treThes.setModel(newModel);
  lstWords.setModel(new DefaultListModel());
  setupListeners();
  lstWords.setFont(core.getPropertiesManager().getFontCon());
}","/** 
 * Creates new form ScrThesaurus
 * @param _core dictionary core
 * @param _parent parent window
 */
public ScrThesaurus(DictCore _core,ScrDictInterface _parent){
  core=_core;
  parent=_parent;
  setupKeyStrokes();
  initComponents();
  ThesTreeNode root=new ThesTreeNode();
  root.setAsRootNode(core.getThesManager().getRoot());
  TreeModel newModel=new DefaultTreeModel(root);
  treThes.setModel(newModel);
  lstWords.setModel(new DefaultListModel());
  setupListeners();
  lstWords.setFont(core.getPropertiesManager().getFontCon());
}",0.9802816901408452
167209,"/** 
 * Creates new form ScrTranslationFreewrite
 * @param _core Dictionary Core
 * @param initialText initial text for translation
 */
public ScrTranslationFreewrite(DictCore _core,String initialText){
  initComponents();
  core=_core;
  jTextArea1.setFont(core.getPropertiesManager().getFontCon());
  jTextArea1.setText(initialText);
}","/** 
 * Creates new form ScrTranslationFreewrite
 * @param _core Dictionary Core
 * @param initialText initial text for translation
 */
public ScrTranslationFreewrite(DictCore _core,String initialText){
  setupKeyStrokes();
  initComponents();
  core=_core;
  jTextArea1.setFont(core.getPropertiesManager().getFontCon());
  jTextArea1.setText(initialText);
}",0.9697841726618706
167210,"/** 
 * Creates new form ScrTranslationWindow
 * @param _core Set dictionary core
 * @param _parent Set parent value for callbacks
 */
public ScrTranslationWindow(DictCore _core,ScrDictInterface _parent){
  core=_core;
  parent=_parent;
  initComponents();
  txtLocalText.setCaret(new HighlightCaret());
  setObjectFonts();
  matchListModel=new DefaultListModel();
  lstMatchList.setModel(matchListModel);
  setupListeners();
  setCurTranslating(false);
}","/** 
 * Creates new form ScrTranslationWindow
 * @param _core Set dictionary core
 * @param _parent Set parent value for callbacks
 */
public ScrTranslationWindow(DictCore _core,ScrDictInterface _parent){
  core=_core;
  parent=_parent;
  setupKeyStrokes();
  initComponents();
  txtLocalText.setCaret(new HighlightCaret());
  setObjectFonts();
  matchListModel=new DefaultListModel();
  lstMatchList.setModel(matchListModel);
  setupListeners();
  setCurTranslating(false);
}",0.9774436090225564
167211,"/** 
 * Creates new form ScrUpdateAlert
 * @param verbose run in verbose mode
 * @param curVersion current version of PolyGlot
 * @throws java.lang.Exception if unable to connect
 */
public ScrUpdateAlert(boolean verbose,String curVersion) throws Exception {
  initComponents();
  jTextPane1.setContentType(""String_Node_Str"");
  Document doc=WebInterface.checkForUpdates(curVersion);
  final Window parent=this;
  Node ver=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node message=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node buttons=doc.getElementsByTagName(""String_Node_Str"").item(0);
  for (Node curButton=buttons.getFirstChild(); curButton != null; curButton=curButton.getNextSibling()) {
    Node nameNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    Node linkNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    buttonMap.put(nameNode.getTextContent(),linkNode.getTextContent());
    JButton newButton=new JButton();
    newButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        JButton thisButton=(JButton)e.getSource();
        String link=buttonMap.get(thisButton.getText());
        URI uri;
        try {
          uri=new URI(link);
          uri.normalize();
          java.awt.Desktop.getDesktop().browse(uri);
        }
 catch (        IOException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,parent);
        }
catch (        URISyntaxException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,parent);
        }
      }
    }
);
    newButton.setText(nameNode.getTextContent());
    newButton.setSize(jTextPane1.getSize().width,30);
    jPanel1.add(newButton);
    newButton.setLocation(0,this.getSize().height - 30);
    this.setSize(this.getHeight(),this.getHeight() + newButton.getHeight());
  }
  this.setTitle(""String_Node_Str"" + ver.getTextContent() + ""String_Node_Str"");
  jTextPane1.setText(message.getTextContent());
  txtVersion.setText(""String_Node_Str"" + ver.getTextContent());
  if (ver.getTextContent().equals(curVersion)) {
    if (verbose) {
      InfoBox.info(""String_Node_Str"",""String_Node_Str"" + curVersion + ""String_Node_Str"",this);
    }
    this.setVisible(false);
    this.dispose();
  }
 else {
    setVisible(true);
  }
}","/** 
 * Creates new form ScrUpdateAlert
 * @param verbose run in verbose mode
 * @param curVersion current version of PolyGlot
 * @throws java.lang.Exception if unable to connect
 */
public ScrUpdateAlert(boolean verbose,String curVersion) throws Exception {
  setupKeyStrokes();
  initComponents();
  jTextPane1.setContentType(""String_Node_Str"");
  Document doc=WebInterface.checkForUpdates(curVersion);
  final Window parent=this;
  Node ver=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node message=doc.getElementsByTagName(""String_Node_Str"").item(0);
  Node buttons=doc.getElementsByTagName(""String_Node_Str"").item(0);
  for (Node curButton=buttons.getFirstChild(); curButton != null; curButton=curButton.getNextSibling()) {
    Node nameNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    Node linkNode=((Element)curButton.getChildNodes()).getElementsByTagName(""String_Node_Str"").item(0);
    buttonMap.put(nameNode.getTextContent(),linkNode.getTextContent());
    JButton newButton=new JButton();
    newButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        JButton thisButton=(JButton)e.getSource();
        String link=buttonMap.get(thisButton.getText());
        URI uri;
        try {
          uri=new URI(link);
          uri.normalize();
          java.awt.Desktop.getDesktop().browse(uri);
        }
 catch (        IOException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,parent);
        }
catch (        URISyntaxException ex) {
          InfoBox.error(""String_Node_Str"",""String_Node_Str"" + link,parent);
        }
      }
    }
);
    newButton.setText(nameNode.getTextContent());
    newButton.setSize(jTextPane1.getSize().width,30);
    jPanel1.add(newButton);
    newButton.setLocation(0,this.getSize().height - 30);
    this.setSize(this.getHeight(),this.getHeight() + newButton.getHeight());
  }
  this.setTitle(""String_Node_Str"" + ver.getTextContent() + ""String_Node_Str"");
  jTextPane1.setText(message.getTextContent());
  txtVersion.setText(""String_Node_Str"" + ver.getTextContent());
  if (ver.getTextContent().equals(curVersion)) {
    if (verbose) {
      InfoBox.info(""String_Node_Str"",""String_Node_Str"" + curVersion + ""String_Node_Str"",this);
    }
    this.setVisible(false);
    this.dispose();
  }
 else {
    setVisible(true);
  }
}",0.9956313709174122
167212,"private void viewDeclensions(){
  Integer wordId=(Integer)scrToCoreMap.get(lstDict.getSelectedIndex());
  if (wordId == -1) {
    return;
  }
  try {
    ScrDeclensions.run(core,core.getWordById(wordId),(Integer)scrToCoreTypes.get(cmbTypeProp.getSelectedIndex()),core.getLangFont());
  }
 catch (  Exception ex) {
    InfoBox.error(""String_Node_Str"",""String_Node_Str"" + ex.getLocalizedMessage(),this);
  }
  saveModWord();
}","private void viewDeclensions(){
  Integer wordId=(Integer)scrToCoreMap.get(lstDict.getSelectedIndex());
  if (wordId == -1) {
    return;
  }
  try {
    ScrDeclensions.run(core,core.getWordById(wordId),(Integer)scrToCoreTypes.get(cmbTypeProp.getSelectedIndex()),core.getLangFont());
  }
 catch (  Exception ex) {
    InfoBox.error(""String_Node_Str"",ex.getLocalizedMessage(),this);
  }
  saveModWord();
}",0.9758454106280192
167213,"private void newFile(){
  if (!saveOrCancelTest()) {
    return;
  }
  core=new DictCore();
  curFileName=""String_Node_Str"";
  killAllChildren();
  populateDict();
  popWordProps();
  populateTypes();
  populateTypeProps();
  populateGenders();
  populateGenderProps();
  populateProcGuide();
  popLangProps();
}","private void newFile(){
  if (!saveOrCancelTest()) {
    return;
  }
  core=new DictCore();
  curFileName=""String_Node_Str"";
  killAllChildren();
  populateDict();
  popWordProps();
  populateTypes();
  populateTypeProps();
  populateGenders();
  populateGenderProps();
  populateProcGuide();
  popLangProps();
  setConFont(new JTextField().getFont());
}",0.9369369369369368
167214,"/** 
 * deletes currently selected node
 */
private void removeThesNode(){
  ThesTreeNode curNode=(ThesTreeNode)treThes.getLastSelectedPathComponent();
  if (curNode == null) {
    return;
  }
  ThesTreeNode parent=(ThesTreeNode)curNode.getParent();
  if (!curNode.isRoot()) {
    ((DefaultTreeModel)treThes.getModel()).removeNodeFromParent(curNode);
    curNode.removeFromParent();
  }
}","/** 
 * deletes currently selected node
 */
private void removeThesNode(){
  ThesTreeNode curNode=(ThesTreeNode)treThes.getLastSelectedPathComponent();
  int position=treThes.getLeadSelectionRow();
  if (position < 1 || curNode == null) {
    return;
  }
  if (!curNode.isRoot()) {
    ((DefaultTreeModel)treThes.getModel()).removeNodeFromParent(curNode);
    curNode.removeFromParent();
  }
  treThes.setSelectionRow(position - 1);
}",0.4793187347931874
167215,"public TableColumnEditor(Font _myFont){
  myFont=_myFont;
}","public TableColumnEditor(Font _myFont){
  myFont=_myFont;
  JTextField setupText=(JTextField)component;
  setupText.setBorder(BorderFactory.createEmptyBorder());
}",0.5315315315315315
167216,"/** 
 * updates words list for family
 */
private void updateWordsProp(){
  ThesTreeNode curNode=(ThesTreeNode)treThes.getLastSelectedPathComponent();
  DefaultListModel model=(DefaultListModel)lstWords.getModel();
  model.clear();
  Iterator<ConWord> wordIt;
  if (chkInclSubFam.isSelected()) {
    wordIt=curNode.getNode().getWordsIncludeSubs().iterator();
  }
 else {
    wordIt=curNode.getNode().getWords();
  }
  for (int i=0; wordIt.hasNext(); i++) {
    model.add(i,wordIt.next());
  }
}","/** 
 * updates words list for family
 */
private void updateWordsProp(){
  ThesTreeNode curNode=(ThesTreeNode)treThes.getLastSelectedPathComponent();
  DefaultListModel model=(DefaultListModel)lstWords.getModel();
  model.clear();
  if (curNode == null) {
    return;
  }
  Iterator<ConWord> wordIt;
  if (chkInclSubFam.isSelected()) {
    wordIt=curNode.getNode().getWordsIncludeSubs().iterator();
  }
 else {
    wordIt=curNode.getNode().getWords();
  }
  for (int i=0; wordIt.hasNext(); i++) {
    model.add(i,wordIt.next());
  }
}",0.9601554907677357
167217,"/** 
 * gets all words in immediate family
 * @return iterator of all words in immediate family
 */
public Iterator<ConWord> getWords(){
  Collections.sort(words);
  return words.iterator();
}","/** 
 * gets all words in immediate family
 * @return iterator of all words in immediate family
 */
public Iterator<ConWord> getWords(){
  manager.removeDeadWords(this,words);
  Collections.sort(words);
  return words.iterator();
}",0.9078014184397164
167218,"/** 
 * internally facing, recursive method for getting all words in this and subfamilies
 * @return list of (non duped) words in this and all subnodes
 */
private List<ConWord> getWordsIncludeSubsInternal(){
  List<ConWord> ret=new ArrayList(words);
  Iterator<ThesNode> subIt=subNodes.iterator();
  while (subIt.hasNext()) {
    ThesNode curNode=subIt.next();
    Iterator<ConWord> wordIt=curNode.getWordsIncludeSubsInternal().iterator();
    while (wordIt.hasNext()) {
      ConWord curWord=wordIt.next();
      if (!ret.contains(curWord)) {
        ret.add(curWord);
      }
    }
  }
  return ret;
}","/** 
 * internally facing, recursive method for getting all words in this and subfamilies
 * @return list of (non duped) words in this and all subnodes
 */
private List<ConWord> getWordsIncludeSubsInternal(){
  manager.removeDeadWords(this,words);
  List<ConWord> ret=new ArrayList(words);
  Iterator<ThesNode> subIt=subNodes.iterator();
  while (subIt.hasNext()) {
    ThesNode curNode=subIt.next();
    Iterator<ConWord> wordIt=curNode.getWordsIncludeSubsInternal().iterator();
    while (wordIt.hasNext()) {
      ConWord curWord=wordIt.next();
      if (!ret.contains(curWord)) {
        ret.add(curWord);
      }
    }
  }
  return ret;
}",0.9687249398556536
167219,"/** 
 * sets parent and value of node
 * @param _parent parent of note (null if root)
 * @param _value node's string value
 */
public ThesNode(ThesNode _parent,String _value){
  parent=_parent;
  this.setValue(_value);
}","/** 
 * sets parent and value of node
 * @param _parent parent of note (null if root)
 * @param _value node's string value
 */
public ThesNode(ThesNode _parent,String _value,ThesaurusManager _manager){
  parent=_parent;
  this.setValue(_value);
  manager=_manager;
}",0.9053497942386832
167220,"/** 
 * Used when loading from save file and building thesaurus. Either creates new root or adds child/sets buffer to that.
 */
public void buildNewBuffer(){
  if (thesRoot == null) {
    thesRoot=new ThesNode(null);
    buffer=thesRoot;
  }
 else {
    ThesNode newBuffer=new ThesNode(buffer);
    buffer.addNode(newBuffer);
    buffer=newBuffer;
  }
}","/** 
 * Used when loading from save file and building thesaurus. Either creates new root or adds child/sets buffer to that.
 */
public void buildNewBuffer(){
  if (thesRoot == null) {
    thesRoot=new ThesNode(null,this);
    buffer=thesRoot;
  }
 else {
    ThesNode newBuffer=new ThesNode(buffer,this);
    buffer.addNode(newBuffer);
    buffer=newBuffer;
  }
}",0.9860335195530726
167221,"/** 
 * Gets root thesaurus node
 * @return 
 */
public ThesNode getRoot(){
  if (thesRoot == null) {
    thesRoot=new ThesNode(null,""String_Node_Str"");
  }
  return thesRoot;
}","/** 
 * Gets root thesaurus node
 * @return 
 */
public ThesNode getRoot(){
  if (thesRoot == null) {
    thesRoot=new ThesNode(null,""String_Node_Str"",this);
  }
  return thesRoot;
}",0.9860724233983288
167222,"/** 
 * sets menu accelerators and menu item text to reflect this
 */
private void setupAccelerators(){
  String OS=System.getProperty(""String_Node_Str"");
  if (OS.startsWith(""String_Node_Str"")) {
    mnuSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
  }
 else {
    mnuSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
  }
}","/** 
 * sets menu accelerators and menu item text to reflect this
 */
private void setupAccelerators(){
  String OS=System.getProperty(""String_Node_Str"");
  if (OS.startsWith(""String_Node_Str"")) {
    mnuSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
    mnuOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.META_DOWN_MASK));
  }
 else {
    mnuSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
    mnuOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.CTRL_DOWN_MASK));
  }
}",0.9985507246376812
167223,"private void saveProcGuide(){
  if (curPopulating) {
    return;
  }
  boolean localPopulating=curPopulating;
  curPopulating=true;
  List<PronunciationNode> newPro=new ArrayList<PronunciationNode>();
  for (int i=0; i < tblProcGuide.getRowCount(); i++) {
    PronunciationNode newNode=new PronunciationNode();
    newNode.setValue((String)tblProcGuide.getCellEditor(i,0).getCellEditorValue());
    newNode.setPronunciation((String)tblProcGuide.getCellEditor(i,1).getCellEditorValue());
    newPro.add(newNode);
  }
  core.setPronunciations(newPro);
  curPopulating=localPopulating;
}","private void saveProcGuide(){
  if (curPopulating) {
    return;
  }
  boolean localPopulating=curPopulating;
  curPopulating=true;
  List<PronunciationNode> newPro=new ArrayList<PronunciationNode>();
  for (int i=0; i < tblProcGuide.getRowCount(); i++) {
    PronunciationNode newNode=new PronunciationNode();
    if (i == tblProcGuide.getSelectedRow()) {
      newNode.setValue((String)tblProcGuide.getCellEditor(i,0).getCellEditorValue());
      newNode.setPronunciation((String)tblProcGuide.getCellEditor(i,1).getCellEditorValue());
    }
 else {
      newNode.setValue((String)tblProcGuide.getModel().getValueAt(i,0));
      newNode.setPronunciation((String)tblProcGuide.getModel().getValueAt(i,1));
    }
    newPro.add(newNode);
  }
  core.setPronunciations(newPro);
  curPopulating=localPopulating;
}",0.8060344827586207
167224,"private void setupListeners(){
  txtConWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
  }
);
  txtDefProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtLocalWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPluralProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPronunciationProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtAlphaOrder.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
  }
);
  txtConWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtDefFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtLocalWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtPronunciationFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtTypeName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
  }
);
  txtTypesNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveType();
    }
  }
);
  txtGenderName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
  }
);
  txtGenderNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveGender();
    }
  }
);
  txtLangName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
  }
);
}","private void setupListeners(){
  txtConWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
  }
);
  txtDefProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtLocalWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPluralProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPronunciationProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtAlphaOrder.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
  }
);
  txtConWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
  }
);
  txtDefFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
  }
);
  txtLocalWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
  }
);
  txtPronunciationFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (filterListenersActive)       filterDict();
    }
  }
);
  txtTypeName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
  }
);
  txtTypesNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveType();
    }
  }
);
  txtGenderName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
  }
);
  txtGenderNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveGender();
    }
  }
);
  txtLangName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
  }
);
}",0.9700363196125908
167225,"/** 
 * clears all filters set on lexicon
 */
private void clearLexFilter(){
  txtConWordFilter.setText(""String_Node_Str"");
  txtLocalWordFilter.setText(""String_Node_Str"");
  txtPronunciationFilter.setText(""String_Node_Str"");
  txtDefFilter.setText(""String_Node_Str"");
  cmbGenderFilter.setSelectedIndex(cmbGenderFilter.getModel().getSize() - 1);
  cmbTypeFilter.setSelectedIndex(cmbTypeFilter.getModel().getSize() - 1);
  filterDict();
}","/** 
 * clears all filters set on lexicon
 */
private void clearLexFilter(){
  clearLexFilterValues();
  filterDict();
}",0.3978494623655914
167226,"private void cmbTypeFilterActionPerformed(java.awt.event.ActionEvent evt){
  filterDict();
}","private void cmbTypeFilterActionPerformed(java.awt.event.ActionEvent evt){
  if (filterListenersActive)   filterDict();
}",0.863849765258216
167227,"private void saveModWord(){
  if (curPopulating) {
    return;
  }
  curPopulating=true;
  ConWord saveWord=new ConWord();
  Integer scrIndex=lstDict.getSelectedIndex();
  if (scrIndex == -1) {
    curPopulating=false;
    return;
  }
  Integer wordId=(Integer)scrToCoreMap.get(scrIndex);
  saveWord.setValue(txtConWordProp.getText());
  saveWord.setLocalWord(txtLocalWordProp.getText());
  saveWord.setWordType(scrTypeMap.containsKey(cmbTypeProp.getSelectedItem()) ? (String)cmbTypeProp.getSelectedItem() : ""String_Node_Str"");
  saveWord.setDefinition(txtDefProp.getText());
  saveWord.setPronunciation(txtPronunciationProp.getText());
  saveWord.setGender(scrGenderMap.containsKey(cmbGenderProp.getSelectedItem()) ? (String)cmbGenderProp.getSelectedItem() : ""String_Node_Str"");
  saveWord.setPlural(txtPluralProp.getText());
  saveWord.setProcOverride(chkPronunciationOverrideProp.isSelected());
  if (wordId == -1) {
    try {
      wordId=core.addWord(saveWord);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + saveWord.getValue() + ""String_Node_Str""+ e.getMessage(),this);
    }
  }
 else {
    try {
      core.modifyWord(wordId,saveWord);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + saveWord.getValue() + ""String_Node_Str""+ e.getMessage(),this);
    }
  }
  dListModel.remove(scrIndex);
  dListModel.add(scrIndex,saveWord.getValue());
  setLexPosition(scrIndex);
  scrToCoreMap.remove(scrIndex);
  scrToCoreMap.put(scrIndex,wordId);
  curPopulating=false;
  String wordLegal=core.isWordLegal(saveWord);
  txtWordErrorBox.setText(wordLegal);
  setLexiconEnabled(wordLegal.equals(""String_Node_Str""));
  populateDict();
}","private void saveModWord(){
  if (curPopulating) {
    return;
  }
  clearLexFilterValues();
  curPopulating=true;
  ConWord saveWord=new ConWord();
  Integer scrIndex=lstDict.getSelectedIndex();
  if (scrIndex == -1) {
    curPopulating=false;
    return;
  }
  Integer wordId=(Integer)scrToCoreMap.get(scrIndex);
  saveWord.setValue(txtConWordProp.getText());
  saveWord.setLocalWord(txtLocalWordProp.getText());
  saveWord.setWordType(scrTypeMap.containsKey(cmbTypeProp.getSelectedItem()) ? (String)cmbTypeProp.getSelectedItem() : ""String_Node_Str"");
  saveWord.setDefinition(txtDefProp.getText());
  saveWord.setPronunciation(txtPronunciationProp.getText());
  saveWord.setGender(scrGenderMap.containsKey(cmbGenderProp.getSelectedItem()) ? (String)cmbGenderProp.getSelectedItem() : ""String_Node_Str"");
  saveWord.setPlural(txtPluralProp.getText());
  saveWord.setProcOverride(chkPronunciationOverrideProp.isSelected());
  if (wordId == -1) {
    try {
      wordId=core.addWord(saveWord);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + saveWord.getValue() + ""String_Node_Str""+ e.getMessage(),this);
    }
  }
 else {
    try {
      core.modifyWord(wordId,saveWord);
    }
 catch (    Exception e) {
      InfoBox.error(""String_Node_Str"",""String_Node_Str"" + saveWord.getValue() + ""String_Node_Str""+ e.getMessage(),this);
    }
  }
  dListModel.remove(scrIndex);
  dListModel.add(scrIndex,saveWord.getValue());
  setLexPosition(scrIndex);
  scrToCoreMap.remove(scrIndex);
  scrToCoreMap.put(scrIndex,wordId);
  curPopulating=false;
  String wordLegal=core.isWordLegal(saveWord);
  txtWordErrorBox.setText(wordLegal);
  setLexiconEnabled(wordLegal.equals(""String_Node_Str""));
  populateDict();
}",0.992476851851852
167228,"private void cmbGenderFilterActionPerformed(java.awt.event.ActionEvent evt){
  filterDict();
}","private void cmbGenderFilterActionPerformed(java.awt.event.ActionEvent evt){
  if (filterListenersActive)   filterDict();
}",0.8663594470046083
167229,"/** 
 * Builds report on words in ConLang. Potentially computationally expensive.
 * @return 
 */
public String buildWordReport(){
  String ret=""String_Node_Str"";
  String conFontTag=""String_Node_Str"" + core.getLangFont().getFontName() + ""String_Node_Str"";
  Map<String,Integer> wordStart=new HashMap<String,Integer>();
  Map<String,Integer> wordEnd=new HashMap<String,Integer>();
  Map<String,Integer> characterCombos2=new HashMap<String,Integer>();
  Integer highestCombo2=0;
  Map<String,Integer> characterCombos3=new HashMap<String,Integer>();
  Map<String,Integer> typeCountByWord=new HashMap<String,Integer>();
  Map<String,Integer> phonemeCount=new HashMap<String,Integer>();
  Map<String,Integer> charCount=new HashMap<String,Integer>();
  Map<String,Integer> phonemeCombo2=new HashMap<String,Integer>();
  Integer wordCount=nodeMap.size();
  Iterator<ConWord> wordIt=new ArrayList<ConWord>(nodeMap.values()).iterator();
  while (wordIt.hasNext()) {
    ConWord curWord=wordIt.next();
    final String curValue=curWord.getValue();
    final int curValueLength=curValue.length();
    final String curType=curWord.getWordType();
    String beginsWith=curValue.substring(0,1);
    String endsWith=curValue.substring(curValueLength - 1,curValueLength);
    if (wordStart.containsKey(beginsWith)) {
      wordStart.replace(beginsWith,wordStart.get(beginsWith) + 1);
    }
 else {
      wordStart.put(beginsWith,1);
    }
    if (wordEnd.containsKey(endsWith)) {
      wordEnd.replace(endsWith,wordEnd.get(endsWith) + 1);
    }
 else {
      wordEnd.put(endsWith,1);
    }
    List<PronunciationNode> phonArray=core.getPronunciationElements(curValue);
    for (int i=0; i < phonArray.size(); i++) {
      if (phonemeCount.containsKey(phonArray.get(i).getPronunciation())) {
        phonemeCount.replace(phonArray.get(i).getPronunciation(),phonemeCount.get(phonArray.get(i).getPronunciation()) + 1);
      }
 else {
        phonemeCount.put(phonArray.get(i).getPronunciation(),1);
      }
      if (i + 1 < phonArray.size()) {
        String curCombo=phonArray.get(i).getPronunciation() + ""String_Node_Str"" + phonArray.get(i + 1).getPronunciation();
        if (phonemeCombo2.containsKey(curCombo)) {
          phonemeCombo2.replace(curCombo,phonemeCombo2.get(curCombo) + 1);
        }
 else {
          phonemeCombo2.put(curCombo,1);
        }
      }
    }
    for (int i=0; i < curValueLength; i++) {
      String curChar=curValue.substring(i,i + 1);
      if (charCount.containsKey(curChar)) {
        charCount.replace(curChar,charCount.get(curChar) + 1);
      }
 else {
        charCount.put(curChar,1);
      }
    }
    for (int i=0; i < curValueLength - 1; i++) {
      String combo=curValue.substring(i,i + 2);
      if (characterCombos2.containsKey(combo)) {
        int curComboCount=characterCombos2.get(combo);
        if (highestCombo2 <= curComboCount) {
          highestCombo2=curComboCount + 1;
        }
        characterCombos2.replace(combo,curComboCount + 1);
      }
 else {
        characterCombos2.put(combo,1);
      }
    }
    for (int i=0; i < curValueLength - 2; i++) {
      String combo=curValue.substring(i,i + 3);
      if (characterCombos3.containsKey(combo)) {
        characterCombos3.replace(combo,characterCombos3.get(combo) + 1);
      }
 else {
        characterCombos3.put(combo,1);
      }
    }
    if (typeCountByWord.containsKey(curType)) {
      typeCountByWord.replace(curType,typeCountByWord.get(curType) + 1);
    }
 else {
      typeCountByWord.put(curType,1);
    }
  }
  ret+=""String_Node_Str"" + wordCount + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  Entry<String,Integer> curEntry : typeCountByWord.entrySet()) {
    ret+=curEntry.getKey() + ""String_Node_Str"" + curEntry.getValue()+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (wordStart.containsKey(""String_Node_Str"" + letter) ? wordStart.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (wordEnd.containsKey(""String_Node_Str"" + letter) ? wordEnd.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (charCount.containsKey(""String_Node_Str"" + letter) ? charCount.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  Iterator<PronunciationNode> procLoop=core.getPronunciations();
  while (procLoop.hasNext()) {
    PronunciationNode curNode=procLoop.next();
    ret+=curNode.getPronunciation() + ""String_Node_Str"" + (phonemeCount.containsKey(curNode.getPronunciation()) ? phonemeCount.get(curNode.getPronunciation()) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char topRow : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ topRow+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  for (  char y : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ y+ ""String_Node_Str"";
    for (    char x : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
      String search=""String_Node_Str"" + x + y;
      Integer comboValue=(characterCombos2.containsKey(search) ? characterCombos2.get(search) : 0);
      Integer red=(255 / highestCombo2) * comboValue;
      Integer blue=255 - red;
      ret+=""String_Node_Str"" + red + ""String_Node_Str""+ blue+ ""String_Node_Str""+ blue+ ""String_Node_Str""+ ""String_Node_Str""+ conFontTag+ ""String_Node_Str""+ x+ y+ ""String_Node_Str""+ ""String_Node_Str""+ comboValue.toString()+ ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  Iterator<PronunciationNode> procIty=core.getPronunciations();
  while (procIty.hasNext()) {
    ret+=""String_Node_Str"" + procIty.next().getPronunciation() + ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  procIty=core.getPronunciations();
  while (procIty.hasNext()) {
    PronunciationNode y=procIty.next();
    ret+=""String_Node_Str"" + y.getPronunciation() + ""String_Node_Str"";
    Iterator<PronunciationNode> procItx=core.getPronunciations();
    while (procItx.hasNext()) {
      PronunciationNode x=procItx.next();
      String search=x.getPronunciation() + ""String_Node_Str"" + y.getPronunciation();
      Integer comboValue=(phonemeCombo2.containsKey(search) ? phonemeCombo2.get(search) : 0);
      Integer red=(255 / highestCombo2) * comboValue;
      Integer blue=255 - red;
      ret+=""String_Node_Str"" + red + ""String_Node_Str""+ blue+ ""String_Node_Str""+ blue+ ""String_Node_Str""+ x.getPronunciation()+ y.getPronunciation()+ ""String_Node_Str""+ comboValue.toString()+ ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}","/** 
 * Builds report on words in ConLang. Potentially computationally expensive.
 * @return 
 */
public String buildWordReport(){
  String ret=""String_Node_Str"";
  String conFontTag=""String_Node_Str"" + core.getLangFont().getFontName() + ""String_Node_Str"";
  Map<String,Integer> wordStart=new HashMap<String,Integer>();
  Map<String,Integer> wordEnd=new HashMap<String,Integer>();
  Map<String,Integer> characterCombos2=new HashMap<String,Integer>();
  Integer highestCombo2=0;
  Map<String,Integer> characterCombos3=new HashMap<String,Integer>();
  Map<String,Integer> typeCountByWord=new HashMap<String,Integer>();
  Map<String,Integer> phonemeCount=new HashMap<String,Integer>();
  Map<String,Integer> charCount=new HashMap<String,Integer>();
  Map<String,Integer> phonemeCombo2=new HashMap<String,Integer>();
  Integer wordCount=nodeMap.size();
  Iterator<ConWord> wordIt=new ArrayList<ConWord>(nodeMap.values()).iterator();
  while (wordIt.hasNext()) {
    ConWord curWord=wordIt.next();
    final String curValue=curWord.getValue();
    final int curValueLength=curValue.length();
    final String curType=curWord.getWordType();
    String beginsWith=curValue.substring(0,1);
    String endsWith=curValue.substring(curValueLength - 1,curValueLength);
    if (wordStart.containsKey(beginsWith)) {
      int newValue=wordStart.get(beginsWith) + 1;
      wordStart.remove(beginsWith);
      wordStart.put(beginsWith,newValue);
    }
 else {
      wordStart.put(beginsWith,1);
    }
    if (wordEnd.containsKey(endsWith)) {
      int newValue=wordEnd.get(endsWith) + 1;
      wordEnd.remove(endsWith);
      wordEnd.put(endsWith,newValue);
    }
 else {
      wordEnd.put(endsWith,1);
    }
    List<PronunciationNode> phonArray=core.getPronunciationElements(curValue);
    for (int i=0; i < phonArray.size(); i++) {
      if (phonemeCount.containsKey(phonArray.get(i).getPronunciation())) {
        int newValue=phonemeCount.get(phonArray.get(i).getPronunciation()) + 1;
        phonemeCount.remove(phonArray.get(i).getPronunciation());
        phonemeCount.put(phonArray.get(i).getPronunciation(),newValue);
      }
 else {
        phonemeCount.put(phonArray.get(i).getPronunciation(),1);
      }
      if (i + 1 < phonArray.size()) {
        String curCombo=phonArray.get(i).getPronunciation() + ""String_Node_Str"" + phonArray.get(i + 1).getPronunciation();
        if (phonemeCombo2.containsKey(curCombo)) {
          int newValue=phonemeCombo2.get(curCombo) + 1;
          phonemeCombo2.remove(curCombo);
          phonemeCombo2.put(curCombo,newValue);
        }
 else {
          phonemeCombo2.put(curCombo,1);
        }
      }
    }
    for (int i=0; i < curValueLength; i++) {
      String curChar=curValue.substring(i,i + 1);
      if (charCount.containsKey(curChar)) {
        int newValue=charCount.get(curChar) + 1;
        charCount.remove(curChar);
        charCount.put(curChar,newValue);
      }
 else {
        charCount.put(curChar,1);
      }
    }
    for (int i=0; i < curValueLength - 1; i++) {
      String combo=curValue.substring(i,i + 2);
      if (characterCombos2.containsKey(combo)) {
        int curComboCount=characterCombos2.get(combo);
        if (highestCombo2 <= curComboCount) {
          highestCombo2=curComboCount + 1;
        }
        int newValue=characterCombos2.get(combo) + 1;
        characterCombos2.remove(combo);
        characterCombos2.put(combo,newValue);
      }
 else {
        characterCombos2.put(combo,1);
      }
    }
    for (int i=0; i < curValueLength - 2; i++) {
      String combo=curValue.substring(i,i + 3);
      if (characterCombos3.containsKey(combo)) {
        int newValue=characterCombos3.get(combo) + 1;
        characterCombos3.remove(combo);
        characterCombos3.put(combo,newValue);
      }
 else {
        characterCombos3.put(combo,1);
      }
    }
    if (typeCountByWord.containsKey(curType)) {
      int newValue=typeCountByWord.get(curType) + 1;
      typeCountByWord.remove(curType);
      typeCountByWord.put(curType,newValue);
    }
 else {
      typeCountByWord.put(curType,1);
    }
  }
  ret+=""String_Node_Str"" + wordCount + ""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  Entry<String,Integer> curEntry : typeCountByWord.entrySet()) {
    ret+=curEntry.getKey() + ""String_Node_Str"" + curEntry.getValue()+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (wordStart.containsKey(""String_Node_Str"" + letter) ? wordStart.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (wordEnd.containsKey(""String_Node_Str"" + letter) ? wordEnd.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char letter : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ letter+ ""String_Node_Str""+ (charCount.containsKey(""String_Node_Str"" + letter) ? charCount.get(""String_Node_Str"" + letter) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  Iterator<PronunciationNode> procLoop=core.getPronunciations();
  while (procLoop.hasNext()) {
    PronunciationNode curNode=procLoop.next();
    ret+=curNode.getPronunciation() + ""String_Node_Str"" + (phonemeCount.containsKey(curNode.getPronunciation()) ? phonemeCount.get(curNode.getPronunciation()) : ""String_Node_Str"")+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  for (  char topRow : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ topRow+ ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  for (  char y : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
    ret+=""String_Node_Str"" + conFontTag + ""String_Node_Str""+ y+ ""String_Node_Str"";
    for (    char x : core.getPropertiesManager().getAlphaPlainText().toCharArray()) {
      String search=""String_Node_Str"" + x + y;
      Integer comboValue=(characterCombos2.containsKey(search) ? characterCombos2.get(search) : 0);
      Integer red=(255 / highestCombo2) * comboValue;
      Integer blue=255 - red;
      ret+=""String_Node_Str"" + red + ""String_Node_Str""+ blue+ ""String_Node_Str""+ blue+ ""String_Node_Str""+ ""String_Node_Str""+ conFontTag+ ""String_Node_Str""+ x+ y+ ""String_Node_Str""+ ""String_Node_Str""+ comboValue.toString()+ ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  ret+=""String_Node_Str"";
  Iterator<PronunciationNode> procIty=core.getPronunciations();
  while (procIty.hasNext()) {
    ret+=""String_Node_Str"" + procIty.next().getPronunciation() + ""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  procIty=core.getPronunciations();
  while (procIty.hasNext()) {
    PronunciationNode y=procIty.next();
    ret+=""String_Node_Str"" + y.getPronunciation() + ""String_Node_Str"";
    Iterator<PronunciationNode> procItx=core.getPronunciations();
    while (procItx.hasNext()) {
      PronunciationNode x=procItx.next();
      String search=x.getPronunciation() + ""String_Node_Str"" + y.getPronunciation();
      Integer comboValue=(phonemeCombo2.containsKey(search) ? phonemeCombo2.get(search) : 0);
      Integer red=(255 / highestCombo2) * comboValue;
      Integer blue=255 - red;
      ret+=""String_Node_Str"" + red + ""String_Node_Str""+ blue+ ""String_Node_Str""+ blue+ ""String_Node_Str""+ x.getPronunciation()+ y.getPronunciation()+ ""String_Node_Str""+ comboValue.toString()+ ""String_Node_Str"";
    }
    ret+=""String_Node_Str"";
  }
  ret+=""String_Node_Str"";
  return ret;
}",0.9090559754066864
167230,"/** 
 * this is the recursive function that completes the work of its overridden method
 * @param doc the document this is to be inserted into
 * @param curNode node to build element for
 * @return an element containing all thesaurus data
 */
private Element writeToSaveXML(Document doc,ThesNode curNode){
  Element curElement=doc.createElement(XMLIDs.thesNodeXID);
  Element property=doc.createElement(XMLIDs.thesNameXID);
  property.appendChild(doc.createTextNode(curNode.getValue()));
  curElement.appendChild(property);
  property=doc.createElement(XMLIDs.thesNotesXID);
  property.appendChild(doc.createTextNode(curNode.getNotes()));
  curElement.appendChild(property);
  Iterator<ConWord> wordIt=curNode.getWords();
  while (wordIt.hasNext()) {
    ConWord curWord=wordIt.next();
    property=doc.createElement(XMLIDs.thesWordXID);
    property.appendChild(doc.createTextNode(curWord.getId().toString()));
    curElement.appendChild(property);
  }
  Iterator<ThesNode> thesIt=curNode.getNodes();
  while (thesIt.hasNext()) {
    ThesNode curChild=thesIt.next();
    curElement.appendChild(writeToSaveXML(doc,curChild));
  }
  return curElement;
}","/** 
 * this is the recursive function that completes the work of its overridden method
 * @param doc the document this is to be inserted into
 * @param curNode node to build element for
 * @return an element containing all thesaurus data
 */
private Element writeToSaveXML(Document doc,ThesNode curNode){
  Element curElement=doc.createElement(XMLIDs.thesNodeXID);
  if (curNode == null) {
    return curElement;
  }
  Element property=doc.createElement(XMLIDs.thesNameXID);
  property.appendChild(doc.createTextNode(curNode.getValue()));
  curElement.appendChild(property);
  property=doc.createElement(XMLIDs.thesNotesXID);
  property.appendChild(doc.createTextNode(curNode.getNotes()));
  curElement.appendChild(property);
  Iterator<ConWord> wordIt=curNode.getWords();
  while (wordIt.hasNext()) {
    ConWord curWord=wordIt.next();
    property=doc.createElement(XMLIDs.thesWordXID);
    property.appendChild(doc.createTextNode(curWord.getId().toString()));
    curElement.appendChild(property);
  }
  Iterator<ThesNode> thesIt=curNode.getNodes();
  while (thesIt.hasNext()) {
    ThesNode curChild=thesIt.next();
    curElement.appendChild(writeToSaveXML(doc,curChild));
  }
  return curElement;
}",0.9779286926994908
167231,"private void setupListeners(){
  txtConWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
  }
);
  txtDefProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtLocalWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPluralProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPronunciationProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtAlphaOrder.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
  }
);
  txtConWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtDefFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtLocalWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtPronunciationFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtTypeName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
  }
);
  txtTypesNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveType();
    }
  }
);
  txtGenderName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
  }
);
  txtGenderNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveGender();
    }
  }
);
  txtLangName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
  }
);
}","private void setupListeners(){
  txtConWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
      generatePronunciation();
    }
  }
);
  txtDefProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtLocalWordProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPluralProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtPronunciationProp.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveModWord();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveModWord();
    }
  }
);
  txtAlphaOrder.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setAlphaOrder(txtAlphaOrder.getText());
    }
  }
);
  txtConWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtDefFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtLocalWordFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtPronunciationFilter.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      filterDict();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filterDict();
    }
  }
);
  txtTypeName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      checkTypeLexEnabled();
      saveType();
      updateTypeListName();
    }
  }
);
  txtTypesNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveType();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveType();
    }
  }
);
  txtGenderName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      if (curPopulating)       return;
      checkGenderLexEnabled();
      saveGender();
      updateGenderListName();
    }
  }
);
  txtGenderNotes.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void removeUpdate(    DocumentEvent e){
      saveGender();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      saveGender();
    }
  }
);
  txtLangName.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void changedUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void removeUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
    @Override public void insertUpdate(    DocumentEvent e){
      core.getPropertiesManager().setLangName(txtLangName.getText());
      setTitle(screenTitle + ""String_Node_Str"" + core.getVersion()+ ""String_Node_Str""+ txtLangName.getText());
    }
  }
);
}",0.990789577265213
167232,"private void checkGenderLexEnabled(){
  if (core.getGenders().findGenderByName(txtGenderName.getText().trim()) != null) {
    setEnabledGenderLexicon(false);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
 else   if (txtGenderName.getText().trim().equals(""String_Node_Str"")) {
    setEnabledGenderLexicon(false);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
 else {
    setEnabledGenderLexicon(true);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
}","private void checkGenderLexEnabled(){
  GenderNode genNode=core.getGenders().findGenderByName(txtGenderName.getText().trim());
  if (genNode != null) {
    setEnabledGenderLexicon(false);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
 else   if (txtGenderName.getText().trim().equals(""String_Node_Str"")) {
    setEnabledGenderLexicon(false);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
 else {
    setEnabledGenderLexicon(true);
    txtGendersErrorBox.setText(""String_Node_Str"");
  }
}",0.9612244897959183
167233,"/** 
 * sets basic properties of form based on contents
 */
private void setFormProps(){
  textHeight=firstField.getHeight();
  pnlDeclensions.setSize(pnlDeclensions.getSize().width,numFields * textHeight);
  pnlDeclensions.setLayout(new GridLayout(0,2));
  this.setSize(this.getWidth() + 10,pnlDeclensions.getHeight() + 70);
  this.setResizable(false);
}","/** 
 * sets basic properties of form based on contents
 */
private void setFormProps(){
  textHeight=firstField.getHeight();
  pnlDeclensions.setSize(pnlDeclensions.getSize().width,numFields * textHeight);
  pnlDeclensions.setLayout(new GridLayout(0,2));
  this.setSize(this.getWidth() + 10,pnlDeclensions.getHeight() + 70);
}",0.9589442815249268
167234,"public static void strFormat(String path,String fileName,List<Event> events){
  long t1=System.currentTimeMillis();
  for (  Event event : events) {
    Calendar calendar=null;
    calendar=Calendar.getInstance();
    StringBuilder sb=new StringBuilder();
    sb.append(calendar.get(Calendar.YEAR)).append(calendar.get(Calendar.MONTH) + 1).append(calendar.get(Calendar.DAY_OF_MONTH));
    String dt=sb.toString();
    String hour=String.valueOf(calendar.get(Calendar.HOUR_OF_DAY));
    String realPath=""String_Node_Str"" + event.getHeaders().get(""String_Node_Str"") + ""String_Node_Str""+ dt+ ""String_Node_Str""+ hour;
    String realName=fileName;
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t1));
}","public static void strFormat(String path,String fileName,List<Event> events){
  long t1=System.currentTimeMillis();
  boolean flag=true;
  for (  Event event : events) {
    Calendar calendar=null;
    calendar=Calendar.getInstance();
    StringBuilder sb=new StringBuilder();
    sb.append(calendar.get(Calendar.YEAR)).append(zeroFill(calendar.get(Calendar.MONTH) + 1)).append(zeroFill(calendar.get(Calendar.DAY_OF_MONTH)));
    String dt=sb.toString();
    String hour=zeroFill(calendar.get(Calendar.HOUR_OF_DAY));
    String realPath=""String_Node_Str"" + event.getHeaders().get(""String_Node_Str"") + ""String_Node_Str""+ dt+ ""String_Node_Str""+ hour;
    String realName=fileName;
    if (flag) {
      System.out.println(realPath + ""String_Node_Str"" + realName);
      flag=false;
    }
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t1));
}",0.8845671267252195
167235,"public static void regFormat(String path,String fileName,List<Event> events){
  long t1=System.currentTimeMillis();
  for (  Event event : events) {
    String realPath=BucketPath.escapeString(path,event.getHeaders(),null,false,Calendar.SECOND,1,true);
    String realName=BucketPath.escapeString(fileName,event.getHeaders(),null,false,Calendar.SECOND,1,true);
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t1));
}","public static void regFormat(String path,String fileName,List<Event> events){
  long t1=System.currentTimeMillis();
  boolean flag=true;
  for (  Event event : events) {
    String realPath=BucketPath.escapeString(path,event.getHeaders(),null,false,Calendar.SECOND,1,true);
    String realName=BucketPath.escapeString(fileName,event.getHeaders(),null,false,Calendar.SECOND,1,true);
    if (flag) {
      System.out.println(realPath + ""String_Node_Str"" + realName);
      flag=false;
    }
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - t1));
}",0.873767258382643
167236,"/** 
 * Pull events out of channel and send it to HDFS. Take at most batchSize events per Transaction. Find the corresponding bucket for the event. Ensure the file is open. Serialize the data and write it to the file on HDFS. <br/> This method is not thread safe.
 */
public Status process() throws EventDeliveryException {
  if (!this.switchon) {
    LOG.warn(""String_Node_Str"");
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
    return Status.READY;
  }
  long t1=System.currentTimeMillis();
  long t2=System.currentTimeMillis();
  Channel channel=getChannel();
  Transaction transaction=channel.getTransaction();
  List<BucketWriter> writers=Lists.newArrayList();
  Map<String,HDFSEventSinkMetric> metricMap=new HashMap<String,HDFSEventSinkMetric>();
  Map<String,String> bucketWriter2Category=new HashMap<String,String>();
  transaction.begin();
  long tStart=0;
  long tEnd=0;
  try {
    int txnEventCount=0;
    for (txnEventCount=0; txnEventCount < batchSize; txnEventCount++) {
      tStart=System.currentTimeMillis();
      Event event=channel.take();
      if (event == null) {
        break;
      }
      tEnd=System.currentTimeMillis();
      statTakeTime+=tEnd - tStart;
      String category=event.getHeaders().get(""String_Node_Str"");
      HDFSEventSinkMetric crtMetric=metricMap.get(category);
      if (crtMetric == null) {
        crtMetric=new HDFSEventSinkMetric(category);
        metricMap.put(category,crtMetric);
      }
      crtMetric.incTake(tEnd - tStart);
      crtMetric.incEventNum(1);
      String realPath=BucketPath.escapeString(filePath,event.getHeaders(),timeZone,needRounding,roundUnit,roundValue,useLocalTime);
      String realName=BucketPath.escapeString(fileName,event.getHeaders(),timeZone,needRounding,roundUnit,roundValue,useLocalTime);
      String lookupPath=realPath + DIRECTORY_DELIMITER + realName;
      BucketWriter bucketWriter=sfWriters.get(lookupPath);
      if (bucketWriter == null) {
        HDFSWriter hdfsWriter=writerFactory.getWriter(fileType);
        WriterCallback idleCallback=null;
        if (idleTimeout != 0) {
          idleCallback=new WriterCallback(){
            @Override public void run(            String bucketPath){
              sfWriters.remove(bucketPath);
            }
          }
;
        }
        bucketWriter=new BucketWriter(rollInterval,rollSize,rollCount,batchSize,context,realPath,realName,inUsePrefix,inUseSuffix,suffix,codeC,compType,hdfsWriter,timedRollerPool,proxyTicket,sinkCounter,idleTimeout,idleCallback,lookupPath,callTimeout,callTimeoutPool);
        sfWriters.put(lookupPath,bucketWriter);
        bucketWriter2Category.put(bucketWriter.toString(),category);
      }
      if (!writers.contains(bucketWriter)) {
        writers.add(bucketWriter);
      }
      tStart=System.currentTimeMillis();
      bucketWriter.append(event);
      tEnd=System.currentTimeMillis();
      statAppendTime+=tEnd - tStart;
      crtMetric.incAppend(tEnd - tStart);
    }
    if (txnEventCount == 0) {
      sinkCounter.incrementBatchEmptyCount();
    }
 else     if (txnEventCount == batchSize) {
      sinkCounter.incrementBatchCompleteCount();
    }
 else {
      sinkCounter.incrementBatchUnderflowCount();
    }
    statEventCount+=txnEventCount;
    tStart=System.currentTimeMillis();
    for (    BucketWriter bucketWriter : writers) {
      long begin=System.currentTimeMillis();
      bucketWriter.flush();
      long end=System.currentTimeMillis();
      String category=bucketWriter2Category.get(bucketWriter.toString());
      HDFSEventSinkMetric crtMetric=metricMap.get(category);
      if (crtMetric != null) {
        crtMetric.incSync(end - begin);
      }
 else {
        LOG.error(""String_Node_Str"" + bucketWriter.toString());
      }
    }
    tEnd=System.currentTimeMillis();
    statSyncTime+=tEnd - tStart;
    transaction.commit();
    t2=System.currentTimeMillis();
    statAllTime+=t2 - t1;
    if (statEventCount >= STAT_EVENT_COUNT_THRESHOLD) {
      LOG.info(""String_Node_Str"" + writers.size() + ""String_Node_Str""+ statEventCount+ ""String_Node_Str""+ statAllTime+ ""String_Node_Str""+ ""String_Node_Str""+ statTakeTime+ ""String_Node_Str""+ statAppendTime+ ""String_Node_Str""+ statSyncTime+ ""String_Node_Str"");
      statEventCount=0;
      statAllTime=0;
      statTakeTime=0;
      statAppendTime=0;
      statSyncTime=0;
      for (      Map.Entry<String,HDFSEventSinkMetric> crtEntry : metricMap.entrySet()) {
        HDFSEventSinkMetric crtMetric=crtEntry.getValue();
        crtMetric.sum();
        LOG.info(""String_Node_Str"" + crtMetric.toString());
      }
    }
    if (txnEventCount < 1) {
      return Status.BACKOFF;
    }
 else {
      sinkCounter.addToEventDrainSuccessCount(txnEventCount);
      return Status.READY;
    }
  }
 catch (  IOException eIO) {
    transaction.rollback();
    LOG.warn(""String_Node_Str"",eIO);
    return Status.BACKOFF;
  }
catch (  Throwable th) {
    transaction.rollback();
    LOG.error(""String_Node_Str"",th);
    if (th instanceof Error) {
      throw (Error)th;
    }
 else {
      throw new EventDeliveryException(th);
    }
  }
 finally {
    transaction.close();
  }
}","/** 
 * Pull events out of channel and send it to HDFS. Take at most batchSize events per Transaction. Find the corresponding bucket for the event. Ensure the file is open. Serialize the data and write it to the file on HDFS. <br/> This method is not thread safe.
 */
public Status process() throws EventDeliveryException {
  if (!this.switchon) {
    LOG.warn(""String_Node_Str"");
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
    }
    return Status.READY;
  }
  long t1=System.currentTimeMillis();
  long t2=System.currentTimeMillis();
  long tStart=t1;
  long tEnd=t1;
  Channel channel=getChannel();
  Transaction transaction=channel.getTransaction();
  List<BucketWriter> writers=Lists.newArrayList();
  Map<String,HDFSEventSinkMetric> metricMap=new HashMap<String,HDFSEventSinkMetric>();
  Map<BucketWriter,String> bucketWriter2Category=new HashMap<BucketWriter,String>();
  transaction.begin();
  long getFilenameTime=0;
  try {
    int txnEventCount=0;
    for (txnEventCount=0; txnEventCount < batchSize; txnEventCount++) {
      tStart=System.currentTimeMillis();
      Event event=channel.take();
      tEnd=System.currentTimeMillis();
      statTakeTime+=tEnd - tStart;
      if (event == null) {
        break;
      }
      String category=event.getHeaders().get(""String_Node_Str"");
      HDFSEventSinkMetric crtMetric=metricMap.get(category);
      if (crtMetric == null) {
        crtMetric=new HDFSEventSinkMetric(category);
        metricMap.put(category,crtMetric);
      }
      crtMetric.incTake(tEnd - tStart);
      crtMetric.incEventNum(1);
      tStart=System.currentTimeMillis();
      String realPath=BucketPath.escapeString(filePath,event.getHeaders(),timeZone,needRounding,roundUnit,roundValue,useLocalTime);
      String realName=BucketPath.escapeString(fileName,event.getHeaders(),timeZone,needRounding,roundUnit,roundValue,useLocalTime);
      getFilenameTime+=System.currentTimeMillis() - tStart;
      String lookupPath=realPath + DIRECTORY_DELIMITER + realName;
      BucketWriter bucketWriter=sfWriters.get(lookupPath);
      if (bucketWriter == null) {
        HDFSWriter hdfsWriter=writerFactory.getWriter(fileType);
        WriterCallback idleCallback=null;
        if (idleTimeout != 0) {
          idleCallback=new WriterCallback(){
            @Override public void run(            String bucketPath){
              sfWriters.remove(bucketPath);
            }
          }
;
        }
        bucketWriter=new BucketWriter(rollInterval,rollSize,rollCount,batchSize,context,realPath,realName,inUsePrefix,inUseSuffix,suffix,codeC,compType,hdfsWriter,timedRollerPool,proxyTicket,sinkCounter,idleTimeout,idleCallback,lookupPath,callTimeout,callTimeoutPool);
        sfWriters.put(lookupPath,bucketWriter);
      }
      if (!writers.contains(bucketWriter)) {
        writers.add(bucketWriter);
        bucketWriter2Category.put(bucketWriter,category);
      }
      tStart=System.currentTimeMillis();
      bucketWriter.append(event);
      tEnd=System.currentTimeMillis();
      statAppendTime+=tEnd - tStart;
      crtMetric.incAppend(tEnd - tStart);
    }
    if (txnEventCount == 0) {
      sinkCounter.incrementBatchEmptyCount();
    }
 else     if (txnEventCount == batchSize) {
      sinkCounter.incrementBatchCompleteCount();
    }
 else {
      sinkCounter.incrementBatchUnderflowCount();
    }
    statEventCount+=txnEventCount;
    tStart=System.currentTimeMillis();
    for (    BucketWriter bucketWriter : writers) {
      long begin=System.currentTimeMillis();
      bucketWriter.flush();
      long end=System.currentTimeMillis();
      String category=bucketWriter2Category.get(bucketWriter);
      HDFSEventSinkMetric crtMetric=metricMap.get(category);
      if (crtMetric != null) {
        crtMetric.incSync(end - begin);
      }
 else {
        LOG.error(""String_Node_Str"" + bucketWriter.toString());
      }
    }
    tEnd=System.currentTimeMillis();
    statSyncTime+=tEnd - tStart;
    transaction.commit();
    t2=System.currentTimeMillis();
    statAllTime+=t2 - t1;
    LOG.info(""String_Node_Str"" + this.getName() + ""String_Node_Str""+ writers.size()+ ""String_Node_Str""+ statEventCount+ ""String_Node_Str""+ statAllTime+ ""String_Node_Str""+ ""String_Node_Str""+ statTakeTime+ ""String_Node_Str""+ statAppendTime+ ""String_Node_Str""+ statSyncTime+ ""String_Node_Str""+ getFilenameTime+ ""String_Node_Str"");
    statEventCount=0;
    statAllTime=0;
    statTakeTime=0;
    statAppendTime=0;
    statSyncTime=0;
    for (    Map.Entry<String,HDFSEventSinkMetric> crtEntry : metricMap.entrySet()) {
      HDFSEventSinkMetric crtMetric=crtEntry.getValue();
      crtMetric.sum();
      LOG.info(""String_Node_Str"" + this.getName() + ""String_Node_Str""+ crtMetric.toString());
    }
    if (txnEventCount < 1) {
      return Status.BACKOFF;
    }
 else {
      sinkCounter.addToEventDrainSuccessCount(txnEventCount);
      return Status.READY;
    }
  }
 catch (  IOException eIO) {
    transaction.rollback();
    LOG.warn(""String_Node_Str"",eIO);
    return Status.BACKOFF;
  }
catch (  Throwable th) {
    transaction.rollback();
    LOG.error(""String_Node_Str"",th);
    if (th instanceof Error) {
      throw (Error)th;
    }
 else {
      throw new EventDeliveryException(th);
    }
  }
 finally {
    transaction.close();
  }
}",0.9280259641084384
167237,"/** 
 * flush the data
 * @throws IOException
 * @throws InterruptedException
 */
public synchronized void flush() throws IOException, InterruptedException {
  checkAndThrowInterruptedException();
  if (!isBatchComplete()) {
    doFlush();
    if (idleTimeout > 0) {
      if (idleFuture == null || idleFuture.cancel(false)) {
        Callable<Void> idleAction=new Callable<Void>(){
          public Void call() throws Exception {
            try {
              if (isOpen) {
                LOG.info(""String_Node_Str"",bucketPath);
                idleClosed=true;
                graceClose();
              }
              if (onIdleCallback != null)               onIdleCallback.run(onIdleCallbackPath);
            }
 catch (            Throwable t) {
              LOG.error(""String_Node_Str"",t);
            }
            return null;
          }
        }
;
        idleFuture=timedRollerPool.schedule(idleAction,idleTimeout,TimeUnit.SECONDS);
      }
    }
  }
}","/** 
 * flush the data
 * @throws IOException
 * @throws InterruptedException
 */
public synchronized void flush() throws IOException, InterruptedException {
  checkAndThrowInterruptedException();
  if (!isBatchComplete()) {
    doFlush();
    if (idleTimeout > 0) {
      if (idleFuture == null || idleFuture.cancel(false)) {
        Callable<Void> idleAction=new Callable<Void>(){
          public Void call() throws Exception {
            try {
              if (isOpen) {
                LOG.info(""String_Node_Str"",bucketPath);
                graceClose();
                idleClosed=true;
              }
              if (onIdleCallback != null)               LOG.info(""String_Node_Str"",onIdleCallbackPath);
              onIdleCallback.run(onIdleCallbackPath);
            }
 catch (            Throwable t) {
              LOG.error(""String_Node_Str"",t);
            }
            return null;
          }
        }
;
        idleFuture=timedRollerPool.schedule(idleAction,idleTimeout,TimeUnit.SECONDS);
      }
    }
  }
}",0.936127744510978
167238,"/** 
 * Close the file handle and rename the temp file to the permanent filename. Safe to call multiple times. Logs HDFSWriter.close() exceptions.
 * @throws IOException On failure to rename if temp file exists.
 * @throws InterruptedException
 */
public synchronized void close() throws IOException, InterruptedException {
  checkAndThrowInterruptedException();
  flush();
  LOG.debug(""String_Node_Str"",bucketPath);
  if (isOpen) {
    try {
      callWithTimeout(new CallRunner<Void>(){
        @Override public Void call() throws Exception {
          writer.close();
          return null;
        }
      }
);
      sinkCounter.incrementConnectionClosedCount();
    }
 catch (    IOException e) {
      LOG.warn(""String_Node_Str"" + bucketPath + ""String_Node_Str"",e);
      sinkCounter.incrementConnectionFailedCount();
    }
    isOpen=false;
  }
 else {
    LOG.info(""String_Node_Str"",bucketPath);
  }
  if (timedRollFuture != null && !timedRollFuture.isDone()) {
    timedRollFuture.cancel(false);
    timedRollFuture=null;
  }
  if (idleFuture != null && !idleFuture.isDone()) {
    idleFuture.cancel(false);
    idleFuture=null;
  }
  if (bucketPath != null && fileSystem != null) {
    renameBucket();
    fileSystem=null;
  }
}","/** 
 * when stop flume, all schedulers should be canceled
 * @param cancelIdleCallback
 * @throws IOException
 * @throws InterruptedException
 */
public void close(boolean cancelIdleCallback) throws IOException, InterruptedException {
  close();
  if (cancelIdleCallback) {
    if (idleFuture != null && !idleFuture.isDone()) {
      idleFuture.cancel(false);
      idleFuture=null;
    }
  }
}",0.2792406613594611
167239,"/** 
 * try to close file, if failed too many times, just ignore  
 * @throws IOException
 * @throws InterruptedException
 */
private void graceClose() throws IOException, InterruptedException {
  try {
    close();
  }
 catch (  IOException e) {
    hdfsFailCount++;
    if (hdfsFailCount < maxHdfsFailCount) {
      LOG.warn(""String_Node_Str"" + hdfsFailCount);
      throw e;
    }
 else {
      isOpen=false;
      if (timedRollFuture != null && !timedRollFuture.isDone()) {
        timedRollFuture.cancel(false);
        timedRollFuture=null;
      }
      if (idleFuture != null && !idleFuture.isDone()) {
        idleFuture.cancel(false);
        idleFuture=null;
      }
      LOG.error(""String_Node_Str"");
    }
  }
}","/** 
 * try to close file, if failed too many times, just ignore  
 * @throws IOException
 * @throws InterruptedException
 */
private void graceClose() throws IOException, InterruptedException {
  try {
    close();
  }
 catch (  IOException e) {
    hdfsFailCount++;
    if (hdfsFailCount < maxHdfsFailCount) {
      LOG.warn(""String_Node_Str"" + hdfsFailCount);
      throw e;
    }
 else {
      isOpen=false;
      cancelScheduler();
      LOG.error(""String_Node_Str"");
    }
  }
}",0.770885028949545
167240,"@Override public void stop(){
  for (  Entry<String,BucketWriter> entry : sfWriters.entrySet()) {
    LOG.info(""String_Node_Str"",entry.getKey());
    try {
      entry.getValue().close();
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ ""String_Node_Str"",ex);
      if (ex instanceof InterruptedException) {
        Thread.currentThread().interrupt();
      }
    }
  }
  ExecutorService toShutdown[]={callTimeoutPool,timedRollerPool};
  for (  ExecutorService execService : toShutdown) {
    execService.shutdown();
    try {
      while (execService.isTerminated() == false) {
        execService.awaitTermination(Math.max(defaultCallTimeout,callTimeout),TimeUnit.MILLISECONDS);
      }
    }
 catch (    InterruptedException ex) {
      LOG.warn(""String_Node_Str"" + execService,ex);
    }
  }
  callTimeoutPool=null;
  timedRollerPool=null;
  sfWriters.clear();
  sfWriters=null;
  sinkCounter.stop();
  super.stop();
}","@Override public void stop(){
  for (  Entry<String,BucketWriter> entry : sfWriters.entrySet()) {
    LOG.info(""String_Node_Str"",entry.getKey());
    try {
      entry.getValue().close(true);
    }
 catch (    Exception ex) {
      LOG.warn(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ ""String_Node_Str"",ex);
      if (ex instanceof InterruptedException) {
        Thread.currentThread().interrupt();
      }
    }
  }
  ExecutorService toShutdown[]={callTimeoutPool,timedRollerPool};
  for (  ExecutorService execService : toShutdown) {
    execService.shutdown();
    try {
      while (execService.isTerminated() == false) {
        execService.awaitTermination(Math.max(defaultCallTimeout,callTimeout),TimeUnit.MILLISECONDS);
      }
    }
 catch (    InterruptedException ex) {
      LOG.warn(""String_Node_Str"" + execService,ex);
    }
  }
  callTimeoutPool=null;
  timedRollerPool=null;
  sfWriters.clear();
  sfWriters=null;
  sinkCounter.stop();
  super.stop();
}",0.9979591836734694
167241,"public int compare(File a,File b){
  return new Long(a.lastModified()).compareTo(new Long(b.lastModified()));
}","public int compare(File a,File b){
  int timeComparison=new Long(a.lastModified()).compareTo(new Long(b.lastModified()));
  if (timeComparison != 0) {
    return timeComparison;
  }
 else {
    return a.getName().compareTo(b.getName());
  }
}",0.3456090651558073
167242,"/** 
 * Find and open the oldest file in the chosen directory. If the directory is empty, this will return an absent option.
 */
private Optional<FileInfo> getNextFile(){
  FileFilter filter=new FileFilter(){
    public boolean accept(    File pathName){
      if ((pathName.getName().endsWith(completedSuffix)) || (pathName.getName().startsWith(""String_Node_Str""))) {
        return false;
      }
      return true;
    }
  }
;
  List<File> candidateFiles=Arrays.asList(directory.listFiles(filter));
  if (candidateFiles.isEmpty()) {
    return Optional.absent();
  }
 else {
    Collections.sort(candidateFiles,new Comparator<File>(){
      public int compare(      File a,      File b){
        return new Long(a.lastModified()).compareTo(new Long(b.lastModified()));
      }
    }
);
    File nextFile=candidateFiles.get(0);
    try {
      int bufferSize=bufferMaxLines * bufferMaxLineLength;
      BufferedReader reader=new BufferedReader(new FileReader(nextFile),bufferSize);
      reader.mark(bufferSize);
      return Optional.of(new FileInfo(nextFile,reader));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + nextFile,e);
      return Optional.absent();
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"" + nextFile,e);
      return Optional.absent();
    }
  }
}","/** 
 * Find and open the oldest file in the chosen directory. If two or more files are equally old, the file name with lower lexicographical value is returned. If the directory is empty, this will return an absent option.
 */
private Optional<FileInfo> getNextFile(){
  FileFilter filter=new FileFilter(){
    public boolean accept(    File pathName){
      if ((pathName.getName().endsWith(completedSuffix)) || (pathName.getName().startsWith(""String_Node_Str""))) {
        return false;
      }
      return true;
    }
  }
;
  List<File> candidateFiles=Arrays.asList(directory.listFiles(filter));
  if (candidateFiles.isEmpty()) {
    return Optional.absent();
  }
 else {
    Collections.sort(candidateFiles,new Comparator<File>(){
      public int compare(      File a,      File b){
        int timeComparison=new Long(a.lastModified()).compareTo(new Long(b.lastModified()));
        if (timeComparison != 0) {
          return timeComparison;
        }
 else {
          return a.getName().compareTo(b.getName());
        }
      }
    }
);
    File nextFile=candidateFiles.get(0);
    try {
      int bufferSize=bufferMaxLines * bufferMaxLineLength;
      BufferedReader reader=new BufferedReader(new FileReader(nextFile),bufferSize);
      reader.mark(bufferSize);
      return Optional.of(new FileInfo(nextFile,reader));
    }
 catch (    FileNotFoundException e) {
      logger.warn(""String_Node_Str"" + nextFile,e);
      return Optional.absent();
    }
catch (    IOException e) {
      logger.error(""String_Node_Str"" + nextFile,e);
      return Optional.absent();
    }
  }
}",0.9064106959204662
167243,"/** 
 * Empty files should be skipped over when reading directory. This feature is not currently implemented.
 */
@Ignore @Test public void testBehaviorWithEmptyFile() throws IOException {
  File f1=new File(tmpDir.getAbsolutePath() + ""String_Node_Str"");
  Files.touch(f1);
  SpoolingFileLineReader reader=new SpoolingFileLineReader(tmpDir,completedSuffix,bufferMaxLines,bufferMaxLineLength);
  File f2=new File(tmpDir.getAbsolutePath() + ""String_Node_Str"");
  Files.write(""String_Node_Str"" + ""String_Node_Str"",f2,Charsets.UTF_8);
  List<String> out=reader.readLines(8);
  reader.commit();
  assertEquals(8,out.size());
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertNull(reader.readLine());
  List<File> outFiles=Lists.newArrayList(tmpDir.listFiles());
  assertEquals(2,outFiles.size());
  assertTrue(outFiles.contains(new File(tmpDir + ""String_Node_Str"")));
  assertTrue(outFiles.contains(new File(tmpDir + ""String_Node_Str"" + completedSuffix)));
}","/** 
 * Empty files should be skipped over when reading directory. This feature is not currently implemented.
 */
@Ignore @Test public void testBehaviorWithEmptyFile() throws IOException {
  File f1=new File(tmpDir.getAbsolutePath() + ""String_Node_Str"");
  Files.touch(f1);
  SpoolingFileLineReader reader=new SpoolingFileLineReader(tmpDir,completedSuffix,bufferMaxLines,bufferMaxLineLength);
  File f2=new File(tmpDir.getAbsolutePath() + ""String_Node_Str"");
  Files.write(""String_Node_Str"" + ""String_Node_Str"",f2,Charsets.UTF_8);
  List<String> out=reader.readLines(8);
  reader.commit();
  assertEquals(8,out.size());
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertTrue(out.contains(""String_Node_Str""));
  assertNull(reader.readLine());
  List<File> outFiles=Lists.newArrayList(tmpDir.listFiles());
  assertEquals(2,outFiles.size());
  assertTrue(outFiles.contains(new File(tmpDir + ""String_Node_Str"" + completedSuffix)));
  assertTrue(outFiles.contains(new File(tmpDir + ""String_Node_Str"" + completedSuffix)));
}",0.9930555555555556
167244,"@Test public void testSlowSinkRoll() throws IOException, InterruptedException {
  final File f=FileUtil.mktempdir();
  RollSink snk=new RollSink(new Context(),""String_Node_Str"",2000,250){
    @Override protected EventSink newSink(    Context ctx) throws IOException {
      return new EscapedCustomDfsSink(ctx,""String_Node_Str"" + f.getPath(),""String_Node_Str""){
        @Override public void append(        final Event e) throws IOException, InterruptedException {
          super.append(e);
          Clock.sleep(1500);
        }
      }
;
    }
  }
;
  DummySource source=new DummySource(4);
  DirectDriver driver=new DirectDriver(source,snk);
  driver.start();
  Clock.sleep(12200);
  driver.stop();
  assertTrue(snk.getMetrics().getLongMetric(RollSink.A_ROLL_ABORTED_APPENDS) > Long.valueOf(0));
}","@Test public void testSlowSinkRoll() throws IOException, InterruptedException {
  final File f=FileUtil.mktempdir();
  final AtomicBoolean firstPass=new AtomicBoolean(true);
  RollSink snk=new RollSink(new Context(),""String_Node_Str"",1000,250){
    @Override protected EventSink newSink(    Context ctx) throws IOException {
      return new EscapedCustomDfsSink(ctx,""String_Node_Str"" + f.getPath(),""String_Node_Str""){
        @Override public void append(        final Event e) throws IOException, InterruptedException {
          super.append(e);
          if (firstPass.get()) {
            firstPass.set(false);
            Clock.sleep(3000);
          }
        }
      }
;
    }
  }
;
  DummySource source=new DummySource(4);
  DirectDriver driver=new DirectDriver(source,snk);
  driver.start();
  Clock.sleep(6000);
  driver.stop();
  assertTrue(snk.getMetrics().getLongMetric(RollSink.A_ROLL_ABORTED_APPENDS) > Long.valueOf(0));
}",0.909718228867165
167245,"@Override public boolean schemaExists(){
  Connection connection=null;
  ResultSet rset=null;
  try {
    connection=dataSource.getConnection();
    Statement stmt=connection.createStatement();
    rset=stmt.executeQuery(QUREY_SYSCHEMA_FLUME);
    if (!rset.next()) {
      LOGGER.warn(""String_Node_Str"");
      return false;
    }
    String flumeSchemaId=rset.getString(1);
    LOGGER.debug(""String_Node_Str"" + flumeSchemaId);
    connection.commit();
  }
 catch (  SQLException ex) {
    try {
      connection.rollback();
    }
 catch (    SQLException ex2) {
      LOGGER.error(""String_Node_Str"",ex2);
    }
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
 finally {
    if (rset != null) {
      try {
        rset.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
  }
  return true;
}","@Override public boolean schemaExists(){
  Connection connection=null;
  Statement stmt=null;
  try {
    connection=dataSource.getConnection();
    stmt=connection.createStatement();
    ResultSet rset=stmt.executeQuery(QUREY_SYSCHEMA_FLUME);
    if (!rset.next()) {
      LOGGER.warn(""String_Node_Str"");
      return false;
    }
    String flumeSchemaId=rset.getString(1);
    LOGGER.debug(""String_Node_Str"" + flumeSchemaId);
    connection.commit();
  }
 catch (  SQLException ex) {
    try {
      connection.rollback();
    }
 catch (    SQLException ex2) {
      LOGGER.error(""String_Node_Str"",ex2);
    }
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
  }
  return true;
}",0.8827519379844961
167246,"@Override public PersistableEvent fetchAndDeleteEvent(String channel,Connection connection){
  PersistableEvent.Builder peBuilder=null;
  PreparedStatement baseEventFetchStmt=null;
  PreparedStatement spillEventFetchStmt=null;
  InputStream payloadInputStream=null;
  PreparedStatement baseHeaderFetchStmt=null;
  PreparedStatement nameSpillHeaderStmt=null;
  PreparedStatement valueSpillHeaderStmt=null;
  PreparedStatement deleteSpillEventStmt=null;
  PreparedStatement deleteNameSpillHeaderStmt=null;
  PreparedStatement deleteValueSpillHeaderStmt=null;
  PreparedStatement deleteBaseHeaderStmt=null;
  PreparedStatement deleteBaseEventStmt=null;
  try {
    baseEventFetchStmt=connection.prepareStatement(STMT_FETCH_PAYLOAD_BASE);
    baseEventFetchStmt.setString(1,channel);
    ResultSet rsetBaseEvent=baseEventFetchStmt.executeQuery();
    if (!rsetBaseEvent.next()) {
      LOGGER.debug(""String_Node_Str"" + channel);
      return null;
    }
    long eventId=rsetBaseEvent.getLong(1);
    peBuilder=new PersistableEvent.Builder(channel,eventId);
    peBuilder.setBasePayload(rsetBaseEvent.getBytes(2));
    boolean hasSpill=rsetBaseEvent.getBoolean(3);
    if (hasSpill) {
      spillEventFetchStmt=connection.prepareStatement(STMT_FETCH_PAYLOAD_SPILL);
      spillEventFetchStmt.setLong(1,eventId);
      ResultSet rsetSpillEvent=spillEventFetchStmt.executeQuery();
      Blob payloadSpillBlob=rsetSpillEvent.getBlob(1);
      payloadInputStream=payloadSpillBlob.getBinaryStream();
      ByteArrayOutputStream spillStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[1024];
      int length=0;
      while ((length=payloadInputStream.read(buffer)) != -1) {
        spillStream.write(buffer,0,length);
      }
      peBuilder.setSpillPayload(spillStream.toByteArray());
      deleteSpillEventStmt=connection.prepareStatement(STMT_DELETE_EVENT_SPILL);
      deleteSpillEventStmt.setLong(1,eventId);
      int updateCount=deleteSpillEventStmt.executeUpdate();
      if (updateCount != 1) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + updateCount);
      }
    }
    if (rsetBaseEvent.next()) {
      throw new JdbcChannelException(""String_Node_Str"");
    }
    List<Long> nameSpillHeaders=null;
    List<Long> valueSpillHeaders=null;
    baseHeaderFetchStmt=connection.prepareStatement(STMT_FETCH_HEADER_BASE);
    baseHeaderFetchStmt.setLong(1,eventId);
    int headerCount=0;
    ResultSet rsetBaseHeader=baseHeaderFetchStmt.executeQuery();
    while (rsetBaseHeader.next()) {
      headerCount++;
      long headerId=rsetBaseHeader.getLong(1);
      String baseName=rsetBaseHeader.getString(2);
      String baseValue=rsetBaseHeader.getString(3);
      boolean hasNameSpill=rsetBaseHeader.getBoolean(4);
      boolean hasValueSpill=rsetBaseHeader.getBoolean(5);
      peBuilder.setHeader(headerId,baseName,baseValue);
      if (hasNameSpill) {
        if (nameSpillHeaders == null) {
          nameSpillHeaders=new ArrayList<Long>();
        }
        nameSpillHeaders.add(headerId);
      }
      if (hasValueSpill) {
        if (valueSpillHeaders == null) {
          valueSpillHeaders=new ArrayList<Long>();
        }
        valueSpillHeaders.add(headerId);
      }
    }
    if (nameSpillHeaders != null) {
      nameSpillHeaderStmt=connection.prepareStatement(STMT_FETCH_HEADER_NAME_SPILL);
      deleteNameSpillHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_NAME_SPILL);
      for (      long headerId : nameSpillHeaders) {
        nameSpillHeaderStmt.setLong(1,headerId);
        ResultSet rsetHeaderNameSpill=nameSpillHeaderStmt.executeQuery();
        if (!rsetHeaderNameSpill.next()) {
          throw new JdbcChannelException(""String_Node_Str"" + headerId + ""String_Node_Str"");
        }
        String nameSpill=rsetHeaderNameSpill.getString(1);
        peBuilder.setHeaderNameSpill(headerId,nameSpill);
        deleteNameSpillHeaderStmt.setLong(1,headerId);
        deleteNameSpillHeaderStmt.addBatch();
      }
      int[] headerNameSpillDelete=deleteNameSpillHeaderStmt.executeBatch();
      if (headerNameSpillDelete.length != nameSpillHeaders.size()) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + nameSpillHeaders.size() + ""String_Node_Str""+ headerNameSpillDelete.length);
      }
      for (      int numRowsAffected : headerNameSpillDelete) {
        if (numRowsAffected != 1) {
          throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + numRowsAffected);
        }
      }
    }
    if (valueSpillHeaders != null) {
      valueSpillHeaderStmt=connection.prepareStatement(STMT_FETCH_HEADER_VALUE_SPILL);
      deleteValueSpillHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_VALUE_SPILL);
      for (      long headerId : valueSpillHeaders) {
        valueSpillHeaderStmt.setLong(1,headerId);
        ResultSet rsetHeaderValueSpill=valueSpillHeaderStmt.executeQuery();
        if (!rsetHeaderValueSpill.next()) {
          throw new JdbcChannelException(""String_Node_Str"" + headerId + ""String_Node_Str"");
        }
        String valueSpill=rsetHeaderValueSpill.getString(1);
        peBuilder.setHeaderValueSpill(headerId,valueSpill);
        deleteValueSpillHeaderStmt.setLong(1,headerId);
        deleteValueSpillHeaderStmt.addBatch();
      }
      int[] headerValueSpillDelete=deleteValueSpillHeaderStmt.executeBatch();
      if (headerValueSpillDelete.length != valueSpillHeaders.size()) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + valueSpillHeaders.size() + ""String_Node_Str""+ headerValueSpillDelete.length);
      }
      for (      int numRowsAffected : headerValueSpillDelete) {
        if (numRowsAffected != 1) {
          throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + numRowsAffected);
        }
      }
    }
    if (headerCount > 0) {
      deleteBaseHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_BASE);
      deleteBaseHeaderStmt.setLong(1,eventId);
      int rowCount=deleteBaseHeaderStmt.executeUpdate();
      if (rowCount != headerCount) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + headerCount + ""String_Node_Str""+ rowCount);
      }
    }
    deleteBaseEventStmt=connection.prepareStatement(STMT_DELETE_EVENT_BASE);
    deleteBaseEventStmt.setLong(1,eventId);
    int rowCount=deleteBaseEventStmt.executeUpdate();
    if (rowCount != 1) {
      throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + eventId + ""String_Node_Str""+ rowCount);
    }
  }
 catch (  SQLException ex) {
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
 finally {
    if (payloadInputStream != null) {
      try {
        payloadInputStream.close();
      }
 catch (      IOException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (baseEventFetchStmt != null) {
      try {
        baseEventFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (spillEventFetchStmt != null) {
      try {
        spillEventFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteSpillEventStmt != null) {
      try {
        deleteSpillEventStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (baseHeaderFetchStmt != null) {
      try {
        baseHeaderFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (nameSpillHeaderStmt != null) {
      try {
        nameSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (valueSpillHeaderStmt != null) {
      try {
        valueSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteNameSpillHeaderStmt != null) {
      try {
        deleteNameSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteValueSpillHeaderStmt != null) {
      try {
        deleteValueSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteBaseHeaderStmt != null) {
      try {
        deleteBaseHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteBaseEventStmt != null) {
      try {
        deleteBaseEventStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
  }
  return peBuilder.build();
}","@Override public PersistableEvent fetchAndDeleteEvent(String channel,Connection connection){
  PersistableEvent.Builder peBuilder=null;
  PreparedStatement baseEventFetchStmt=null;
  PreparedStatement spillEventFetchStmt=null;
  InputStream payloadInputStream=null;
  PreparedStatement baseHeaderFetchStmt=null;
  PreparedStatement nameSpillHeaderStmt=null;
  PreparedStatement valueSpillHeaderStmt=null;
  PreparedStatement deleteSpillEventStmt=null;
  PreparedStatement deleteNameSpillHeaderStmt=null;
  PreparedStatement deleteValueSpillHeaderStmt=null;
  PreparedStatement deleteBaseHeaderStmt=null;
  PreparedStatement deleteBaseEventStmt=null;
  try {
    baseEventFetchStmt=connection.prepareStatement(STMT_FETCH_PAYLOAD_BASE);
    baseEventFetchStmt.setString(1,channel);
    ResultSet rsetBaseEvent=baseEventFetchStmt.executeQuery();
    if (!rsetBaseEvent.next()) {
      LOGGER.debug(""String_Node_Str"" + channel);
      return null;
    }
    long eventId=rsetBaseEvent.getLong(1);
    peBuilder=new PersistableEvent.Builder(channel,eventId);
    peBuilder.setBasePayload(rsetBaseEvent.getBytes(2));
    boolean hasSpill=rsetBaseEvent.getBoolean(3);
    if (hasSpill) {
      spillEventFetchStmt=connection.prepareStatement(STMT_FETCH_PAYLOAD_SPILL);
      spillEventFetchStmt.setLong(1,eventId);
      ResultSet rsetSpillEvent=spillEventFetchStmt.executeQuery();
      if (!rsetSpillEvent.next()) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + eventId);
      }
      Blob payloadSpillBlob=rsetSpillEvent.getBlob(1);
      payloadInputStream=payloadSpillBlob.getBinaryStream();
      ByteArrayOutputStream spillStream=new ByteArrayOutputStream();
      byte[] buffer=new byte[1024];
      int length=0;
      while ((length=payloadInputStream.read(buffer)) != -1) {
        spillStream.write(buffer,0,length);
      }
      peBuilder.setSpillPayload(spillStream.toByteArray());
      deleteSpillEventStmt=connection.prepareStatement(STMT_DELETE_EVENT_SPILL);
      deleteSpillEventStmt.setLong(1,eventId);
      int updateCount=deleteSpillEventStmt.executeUpdate();
      if (updateCount != 1) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + updateCount);
      }
    }
    if (rsetBaseEvent.next()) {
      throw new JdbcChannelException(""String_Node_Str"");
    }
    List<Long> nameSpillHeaders=null;
    List<Long> valueSpillHeaders=null;
    baseHeaderFetchStmt=connection.prepareStatement(STMT_FETCH_HEADER_BASE);
    baseHeaderFetchStmt.setLong(1,eventId);
    int headerCount=0;
    ResultSet rsetBaseHeader=baseHeaderFetchStmt.executeQuery();
    while (rsetBaseHeader.next()) {
      headerCount++;
      long headerId=rsetBaseHeader.getLong(1);
      String baseName=rsetBaseHeader.getString(2);
      String baseValue=rsetBaseHeader.getString(3);
      boolean hasNameSpill=rsetBaseHeader.getBoolean(4);
      boolean hasValueSpill=rsetBaseHeader.getBoolean(5);
      peBuilder.setHeader(headerId,baseName,baseValue);
      if (hasNameSpill) {
        if (nameSpillHeaders == null) {
          nameSpillHeaders=new ArrayList<Long>();
        }
        nameSpillHeaders.add(headerId);
      }
      if (hasValueSpill) {
        if (valueSpillHeaders == null) {
          valueSpillHeaders=new ArrayList<Long>();
        }
        valueSpillHeaders.add(headerId);
      }
    }
    if (nameSpillHeaders != null) {
      nameSpillHeaderStmt=connection.prepareStatement(STMT_FETCH_HEADER_NAME_SPILL);
      deleteNameSpillHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_NAME_SPILL);
      for (      long headerId : nameSpillHeaders) {
        nameSpillHeaderStmt.setLong(1,headerId);
        ResultSet rsetHeaderNameSpill=nameSpillHeaderStmt.executeQuery();
        if (!rsetHeaderNameSpill.next()) {
          throw new JdbcChannelException(""String_Node_Str"" + headerId + ""String_Node_Str"");
        }
        String nameSpill=rsetHeaderNameSpill.getString(1);
        peBuilder.setHeaderNameSpill(headerId,nameSpill);
        deleteNameSpillHeaderStmt.setLong(1,headerId);
        deleteNameSpillHeaderStmt.addBatch();
      }
      int[] headerNameSpillDelete=deleteNameSpillHeaderStmt.executeBatch();
      if (headerNameSpillDelete.length != nameSpillHeaders.size()) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + nameSpillHeaders.size() + ""String_Node_Str""+ headerNameSpillDelete.length);
      }
      for (      int numRowsAffected : headerNameSpillDelete) {
        if (numRowsAffected != 1) {
          throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + numRowsAffected);
        }
      }
    }
    if (valueSpillHeaders != null) {
      valueSpillHeaderStmt=connection.prepareStatement(STMT_FETCH_HEADER_VALUE_SPILL);
      deleteValueSpillHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_VALUE_SPILL);
      for (      long headerId : valueSpillHeaders) {
        valueSpillHeaderStmt.setLong(1,headerId);
        ResultSet rsetHeaderValueSpill=valueSpillHeaderStmt.executeQuery();
        if (!rsetHeaderValueSpill.next()) {
          throw new JdbcChannelException(""String_Node_Str"" + headerId + ""String_Node_Str"");
        }
        String valueSpill=rsetHeaderValueSpill.getString(1);
        peBuilder.setHeaderValueSpill(headerId,valueSpill);
        deleteValueSpillHeaderStmt.setLong(1,headerId);
        deleteValueSpillHeaderStmt.addBatch();
      }
      int[] headerValueSpillDelete=deleteValueSpillHeaderStmt.executeBatch();
      if (headerValueSpillDelete.length != valueSpillHeaders.size()) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + valueSpillHeaders.size() + ""String_Node_Str""+ headerValueSpillDelete.length);
      }
      for (      int numRowsAffected : headerValueSpillDelete) {
        if (numRowsAffected != 1) {
          throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + numRowsAffected);
        }
      }
    }
    if (headerCount > 0) {
      deleteBaseHeaderStmt=connection.prepareStatement(STMT_DELETE_HEADER_BASE);
      deleteBaseHeaderStmt.setLong(1,eventId);
      int rowCount=deleteBaseHeaderStmt.executeUpdate();
      if (rowCount != headerCount) {
        throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + headerCount + ""String_Node_Str""+ rowCount);
      }
    }
    deleteBaseEventStmt=connection.prepareStatement(STMT_DELETE_EVENT_BASE);
    deleteBaseEventStmt.setLong(1,eventId);
    int rowCount=deleteBaseEventStmt.executeUpdate();
    if (rowCount != 1) {
      throw new JdbcChannelException(""String_Node_Str"" + ""String_Node_Str"" + eventId + ""String_Node_Str""+ rowCount);
    }
  }
 catch (  SQLException ex) {
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    throw new JdbcChannelException(""String_Node_Str"",ex);
  }
 finally {
    if (payloadInputStream != null) {
      try {
        payloadInputStream.close();
      }
 catch (      IOException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (baseEventFetchStmt != null) {
      try {
        baseEventFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (spillEventFetchStmt != null) {
      try {
        spillEventFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteSpillEventStmt != null) {
      try {
        deleteSpillEventStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (baseHeaderFetchStmt != null) {
      try {
        baseHeaderFetchStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (nameSpillHeaderStmt != null) {
      try {
        nameSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (valueSpillHeaderStmt != null) {
      try {
        valueSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteNameSpillHeaderStmt != null) {
      try {
        deleteNameSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteValueSpillHeaderStmt != null) {
      try {
        deleteValueSpillHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteBaseHeaderStmt != null) {
      try {
        deleteBaseHeaderStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
    if (deleteBaseEventStmt != null) {
      try {
        deleteBaseEventStmt.close();
      }
 catch (      SQLException ex) {
        LOGGER.error(""String_Node_Str"",ex);
      }
    }
  }
  return peBuilder.build();
}",0.99254943700633
167247,"public PersistableEvent build(){
  List<HeaderEntry> bHeaders=new ArrayList<HeaderEntry>();
  for (  long headerId : bHeaderParts.keySet()) {
    HeaderPart part=bHeaderParts.get(headerId);
    bHeaders.add(part.getEntry(headerId));
  }
  PersistableEvent pe=new PersistableEvent(bEventId,bChannelName,bBasePayload,bSpillPayload,bHeaders);
  bEventId=0L;
  bChannelName=null;
  bBasePayload=null;
  bSpillPayload=null;
  bHeaderParts.clear();
  return pe;
}","public PersistableEvent build(){
  List<HeaderEntry> bHeaders=new ArrayList<HeaderEntry>();
  if (bHeaderParts != null) {
    for (    long headerId : bHeaderParts.keySet()) {
      HeaderPart part=bHeaderParts.get(headerId);
      bHeaders.add(part.getEntry(headerId));
    }
  }
  PersistableEvent pe=new PersistableEvent(bEventId,bChannelName,bBasePayload,bSpillPayload,bHeaders);
  bEventId=0L;
  bChannelName=null;
  bBasePayload=null;
  bSpillPayload=null;
  bHeaderParts=null;
  return pe;
}",0.9319371727748692
167248,"public MockEvent(byte[] payload,Map<String,String> headers){
  this.payload=payload;
  this.headers=headers;
}","public MockEvent(byte[] payload,Map<String,String> headers,String channel){
  this.payload=payload;
  this.headers=headers;
  this.channel=channel;
}",0.8494208494208494
167249,"@Test public void testCreateQueries(){
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_SCHEMA_FLUME,EXPECTED_QUERY_CREATE_SCHEMA_FLUME);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_EVENT,EXPECTED_QUERY_CREATE_TABLE_FL_EVENT);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_PLSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_PLSPILL);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_HEADER,EXPECTED_QUERY_CREATE_TABLE_FL_HEADER);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_NMSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_NMSPILL);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_VLSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_VLSPILL);
}","@Test public void testCreateQueries(){
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_SCHEMA_FLUME,EXPECTED_QUERY_CREATE_SCHEMA_FLUME);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_EVENT,EXPECTED_QUERY_CREATE_TABLE_FL_EVENT);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_PLSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_PLSPILL);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_HEADER,EXPECTED_QUERY_CREATE_TABLE_FL_HEADER);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_NMSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_NMSPILL);
  Assert.assertEquals(DerbySchemaHandler.QUERY_CREATE_TABLE_FL_VLSPILL,EXPECTED_QUERY_CREATE_TABLE_FL_VLSPILL);
  Assert.assertEquals(DerbySchemaHandler.COLUMN_LOOKUP_QUERY,EXPECTED_COLUMN_LOOKUP_QUERY);
  Assert.assertEquals(DerbySchemaHandler.STMT_INSERT_EVENT_BASE,EXPECTED_STMT_INSERT_EVENT_BASE);
  Assert.assertEquals(DerbySchemaHandler.STMT_INSERT_EVENT_SPILL,EXPECTED_STMT_INSERT_EVENT_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_INSERT_HEADER_BASE,EXPECTED_STMT_INSERT_HEADER_BASE);
  Assert.assertEquals(DerbySchemaHandler.STMT_INSERT_HEADER_NAME_SPILL,EXPECTED_STMT_INSERT_HEADER_NAME_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_INSERT_HEADER_VALUE_SPILL,EXPECTED_STMT_INSERT_HEADER_VALUE_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_FETCH_PAYLOAD_BASE,EXPECTED_STMT_FETCH_PAYLOAD_BASE);
  Assert.assertEquals(DerbySchemaHandler.STMT_FETCH_PAYLOAD_SPILL,EXPECTED_STMT_FETCH_PAYLOAD_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_FETCH_HEADER_BASE,EXPECTED_STMT_FETCH_HEADER_BASE);
  Assert.assertEquals(DerbySchemaHandler.STMT_FETCH_HEADER_NAME_SPILL,EXPECTED_STMT_FETCH_HEADER_NAME_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_FETCH_HEADER_VALUE_SPILL,EXPECTED_STMT_FETCH_HEADER_VALUE_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_DELETE_HEADER_VALUE_SPILL,EXPECTED_STMT_DELETE_HEADER_VALUE_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_DELETE_HEADER_NAME_SPILL,EXPECTED_STMT_DELETE_HEADER_NAME_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_DELETE_EVENT_SPILL,EXPECTED_STMT_DELETE_EVENT_SPILL);
  Assert.assertEquals(DerbySchemaHandler.STMT_DELETE_HEADER_BASE,EXPECTED_STMT_DELETE_HEADER_BASE);
  Assert.assertEquals(DerbySchemaHandler.STMT_DELETE_EVENT_BASE,EXPECTED_STMT_DELETE_EVENT_BASE);
}",0.4565075212557227
167250,"@Test public void testPeristingEvents(){
  provider=new JdbcChannelProviderImpl();
  provider.initialize(derbyProps);
  int nameLimit=ConfigurationConstants.HEADER_NAME_LENGTH_THRESHOLD;
  int th=ConfigurationConstants.PAYLOAD_LENGTH_THRESHOLD;
  byte[] s1=MockEventUtils.generatePayload(th - 1);
  Map<String,String> m1=new HashMap<String,String>();
  m1.put(MockEventUtils.generateHeaderString(1),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(2),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(3),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(100),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit - 21),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit - 2),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit - 1),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit + 1),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit + 2),""String_Node_Str"");
  m1.put(MockEventUtils.generateHeaderString(nameLimit + 21),""String_Node_Str"");
  Event event1=new MockEvent(s1,m1);
  provider.persistEvent(""String_Node_Str"",event1);
  Event event2=provider.removeEvent(""String_Node_Str"");
  assertEquals(event1,event2);
  provider.close();
  provider=null;
}","/** 
 * creaes 1000 events split over 5 channels, stores them
 */
@Test public void testPeristingEvents(){
  provider=new JdbcChannelProviderImpl();
  provider.initialize(derbyProps);
  Map<String,List<MockEvent>> eventMap=new HashMap<String,List<MockEvent>>();
  Set<MockEvent> events=new HashSet<MockEvent>();
  for (int i=1; i < 1001; i++) {
    events.add(MockEventUtils.generateMockEvent(i,i,i,61 % i,5));
  }
  Iterator<MockEvent> meIt=events.iterator();
  while (meIt.hasNext()) {
    MockEvent me=meIt.next();
    String chName=me.getChannel();
    List<MockEvent> eventList=eventMap.get(chName);
    if (eventList == null) {
      eventList=new ArrayList<MockEvent>();
      eventMap.put(chName,eventList);
    }
    eventList.add(me);
    provider.persistEvent(me.getChannel(),me);
  }
  for (  String chName : eventMap.keySet()) {
    List<MockEvent> meList=eventMap.get(chName);
    Iterator<MockEvent> it=meList.iterator();
    while (it.hasNext()) {
      MockEvent me=it.next();
      Event event=provider.removeEvent(chName);
      assertEquals(me,event);
    }
    Event nullEvent=provider.removeEvent(chName);
    Assert.assertNull(nullEvent);
  }
  provider.close();
  provider=null;
}",0.1569230769230769
167251,"private void runTest(byte[] payload,Map<String,String> headers){
  PersistableEvent pe=new PersistableEvent(""String_Node_Str"",new MockEvent(payload,headers));
  Assert.assertArrayEquals(payload,pe.getBody());
  Map<String,String> h=pe.getHeaders();
  if (h == null) {
    Assert.assertTrue(headers == null || headers.size() == 0);
  }
 else {
    Assert.assertTrue(headers.size() == h.size());
    for (    String key : h.keySet()) {
      Assert.assertTrue(headers.containsKey(key));
      String value=h.get(key);
      String expectedValue=headers.remove(key);
      Assert.assertEquals(expectedValue,value);
    }
    Assert.assertTrue(headers.size() == 0);
  }
}","private void runTest(byte[] payload,Map<String,String> headers){
  PersistableEvent pe=new PersistableEvent(""String_Node_Str"",new MockEvent(payload,headers,null));
  Assert.assertArrayEquals(payload,pe.getBody());
  Map<String,String> h=pe.getHeaders();
  if (h == null) {
    Assert.assertTrue(headers == null || headers.size() == 0);
  }
 else {
    Assert.assertTrue(headers.size() == h.size());
    for (    String key : h.keySet()) {
      Assert.assertTrue(headers.containsKey(key));
      String value=h.get(key);
      String expectedValue=headers.remove(key);
      Assert.assertEquals(expectedValue,value);
    }
    Assert.assertTrue(headers.size() == 0);
  }
}",0.9962658700522778
167252,"@Override public void stop(){
  if (runnerThread != null) {
    runner.shouldStop.set(true);
    runnerThread.interrupt();
    while (runnerThread.isAlive()) {
      try {
        logger.debug(""String_Node_Str"");
        runnerThread.join(500);
      }
 catch (      InterruptedException e) {
        logger.debug(""String_Node_Str"",e);
      }
    }
  }
  lifecycleState=LifecycleState.STOP;
}","@Override public void stop(){
  sink.stop();
  if (runnerThread != null) {
    runner.shouldStop.set(true);
    runnerThread.interrupt();
    while (runnerThread.isAlive()) {
      try {
        logger.debug(""String_Node_Str"");
        runnerThread.join(500);
      }
 catch (      InterruptedException e) {
        logger.debug(""String_Node_Str"",e);
      }
    }
  }
  lifecycleState=LifecycleState.STOP;
}",0.9812734082397004
167253,"@Override public void start(){
  runner=new PollingRunner();
  runner.sink=sink;
  runner.counterGroup=counterGroup;
  runner.shouldStop=new AtomicBoolean();
  runnerThread=new Thread(runner);
  runnerThread.start();
  lifecycleState=LifecycleState.START;
}","@Override public void start(){
  sink.start();
  runner=new PollingRunner();
  runner.sink=sink;
  runner.counterGroup=counterGroup;
  runner.shouldStop=new AtomicBoolean();
  runnerThread=new Thread(runner);
  runnerThread.start();
  lifecycleState=LifecycleState.START;
}",0.969811320754717
167254,"@Override public void stop(Context context) throws LifecycleException, InterruptedException {
  Preconditions.checkState(LifecycleState.START.equals(lifecycleState),""String_Node_Str"");
  logger.info(""String_Node_Str"",this);
  driver.setShouldStop(true);
  while (driver.isAlive()) {
    logger.debug(""String_Node_Str"");
    try {
      driver.join();
    }
 catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
      lifecycleState=LifecycleState.ERROR;
    }
  }
  if (!lifecycleState.equals(LifecycleState.ERROR)) {
    lifecycleState=LifecycleState.STOP;
  }
}","@Override public void stop(Context context) throws LifecycleException, InterruptedException {
  Preconditions.checkState(LifecycleState.START.equals(lifecycleState),""String_Node_Str"");
  logger.info(""String_Node_Str"",this);
  driver.setShouldStop(true);
  while (driver.isAlive()) {
    logger.debug(""String_Node_Str"");
    try {
      driver.join();
    }
 catch (    InterruptedException e) {
      logger.error(""String_Node_Str"",e);
      lifecycleState=LifecycleState.ERROR;
      break;
    }
  }
  if (!lifecycleState.equals(LifecycleState.ERROR)) {
    lifecycleState=LifecycleState.STOP;
  }
}",0.9890664423885618
167255,"public void fail(){
  try {
    LifecycleController.stopAll(new ArrayList<LifecycleAware>(supervisedProcesses.keySet()));
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"");
  }
  lifecycleState=LifecycleState.ERROR;
}","public synchronized void fail(){
  lifecycleState=LifecycleState.ERROR;
}",0.3809523809523809
167256,"@Override public LifecycleState getLifecycleState(){
  return lifecycleState;
}","@Override public synchronized LifecycleState getLifecycleState(){
  return lifecycleState;
}",0.9239766081871345
167257,"@Override public void stop(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",Thread.currentThread().getId());
  monitorService.shutdown();
  while (!monitorService.isTerminated()) {
    monitorService.awaitTermination(500,TimeUnit.MILLISECONDS);
  }
synchronized (supervisedProcesses) {
    for (    final Entry<LifecycleAware,Supervisoree> entry : supervisedProcesses.entrySet()) {
      if (entry.getKey().getLifecycleState().equals(LifecycleState.START)) {
        entry.getKey().stop(context);
        LifecycleController.waitForOneOf(entry.getKey(),LifecycleState.STOP_OR_ERROR,5000);
      }
    }
  }
  lifecycleState=LifecycleState.STOP;
  logger.debug(""String_Node_Str"");
}","@Override public synchronized void stop(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",Thread.currentThread().getId());
  if (monitorService != null) {
    monitorService.shutdown();
    while (!monitorService.isTerminated()) {
      monitorService.awaitTermination(500,TimeUnit.MILLISECONDS);
    }
  }
  for (  final Entry<LifecycleAware,Supervisoree> entry : supervisedProcesses.entrySet()) {
    if (entry.getKey().getLifecycleState().equals(LifecycleState.START)) {
      entry.getKey().stop(context);
      if (!LifecycleController.waitForOneOf(entry.getKey(),LifecycleState.STOP_OR_ERROR,5000)) {
        fail();
      }
    }
  }
  if (lifecycleState.equals(LifecycleState.START)) {
    lifecycleState=LifecycleState.STOP;
  }
  logger.debug(""String_Node_Str"");
}",0.8712998712998713
167258,"@Override public void start(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",Thread.currentThread().getId());
synchronized (supervisedProcesses) {
    logger.debug(""String_Node_Str"");
    for (    Entry<LifecycleAware,Supervisoree> entry : supervisedProcesses.entrySet()) {
      MonitorRunnable monitorCheckRunnable=new MonitorRunnable();
      monitorCheckRunnable.lifecycleAware=entry.getKey();
      monitorCheckRunnable.supervisoree=entry.getValue();
      monitorService.scheduleAtFixedRate(monitorCheckRunnable,0,3,TimeUnit.SECONDS);
    }
  }
  lifecycleState=LifecycleState.START;
  logger.debug(""String_Node_Str"");
}","@Override public synchronized void start(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",Thread.currentThread().getId());
  for (  Entry<LifecycleAware,Supervisoree> entry : supervisedProcesses.entrySet()) {
    MonitorRunnable monitorCheckRunnable=new MonitorRunnable();
    monitorCheckRunnable.lifecycleAware=entry.getKey();
    monitorCheckRunnable.supervisoree=entry.getValue();
    monitorService.scheduleAtFixedRate(monitorCheckRunnable,0,3,TimeUnit.SECONDS);
  }
  lifecycleState=LifecycleState.START;
  logger.debug(""String_Node_Str"");
}",0.906520031421838
167259,"@Override public void stop(Context context) throws LifecycleException {
  logger.info(""String_Node_Str"",this);
  boolean complete=false;
  driver.stop(context);
  try {
    complete=LifecycleController.waitForOneOf(driver,new LifecycleState[]{LifecycleState.STOP,LifecycleState.ERROR});
  }
 catch (  InterruptedException e) {
    logger.debug(""String_Node_Str"");
    complete=false;
  }
  if (!complete) {
    logger.error(""String_Node_Str"",Thread.currentThread().getStackTrace());
  }
  lifecycleState=driver.getLifecycleState();
}","@Override public void stop(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",this);
  boolean reached=false;
  try {
    driver.stop(context);
    reached=LifecycleController.waitForOneOf(driver,new LifecycleState[]{LifecycleState.STOP,LifecycleState.ERROR});
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
    lifecycleState=LifecycleState.ERROR;
    throw e;
  }
  if (!reached) {
    logger.error(""String_Node_Str"",Thread.currentThread().getStackTrace());
  }
  lifecycleState=driver.getLifecycleState();
}",0.863514719000892
167260,"@Override public void start(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",this);
  Preconditions.checkState(name != null,""String_Node_Str"");
  Preconditions.checkState(source != null,""String_Node_Str"");
  Preconditions.checkState(sink != null,""String_Node_Str"");
  driver=new ChannelDriver(name + ""String_Node_Str"");
  driver.setSource(source);
  driver.setSink(sink);
  driver.start(context);
  lifecycleState=LifecycleState.START;
}","@Override public void start(Context context) throws LifecycleException, InterruptedException {
  logger.info(""String_Node_Str"",this);
  Preconditions.checkState(name != null,""String_Node_Str"");
  Preconditions.checkState(source != null,""String_Node_Str"");
  Preconditions.checkState(sink != null,""String_Node_Str"");
  driver=new ChannelDriver(name + ""String_Node_Str"");
  driver.setSource(source);
  driver.setSink(sink);
  boolean reached=false;
  try {
    driver.start(context);
    reached=LifecycleController.waitForOneOf(driver,new LifecycleState[]{LifecycleState.START,LifecycleState.ERROR});
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
    driver.stop(context);
    lifecycleState=LifecycleState.ERROR;
    throw e;
  }
  if (reached) {
    lifecycleState=driver.getLifecycleState();
  }
}",0.715261958997722
167261,"@Override public void close() throws IOException {
  List<IOException> exs=new ArrayList<IOException>(2);
  try {
    if (primaryOk)     primary.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  try {
    if (backupOpen)     backup.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  if (exs.size() != 0)   throw MultipleIOException.createIOException(exs);
  return;
}","@Override public void close() throws IOException {
  List<IOException> exs=new ArrayList<IOException>(2);
  try {
    if (primaryOk)     primary.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  try {
    if (backupOpen)     backup.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  if (exs.size() != 0) {
    throw MultipleIOException.createIOException(exs);
  }
}",0.979643765903308
167262,"@Override public void close() throws IOException {
  List<IOException> exs=new ArrayList<IOException>(2);
  try {
    if (primaryOpen)     primary.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  try {
    if (backupOpen)     backup.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  if (exs.size() != 0)   throw MultipleIOException.createIOException(exs);
  return;
}","@Override public void close() throws IOException {
  List<IOException> exs=new ArrayList<IOException>(2);
  try {
    if (primaryOpen)     primary.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  try {
    if (backupOpen)     backup.close();
  }
 catch (  IOException ex) {
    exs.add(ex);
  }
  if (exs.size() != 0) {
    throw MultipleIOException.createIOException(exs);
  }
}",0.979746835443038
167263,"/** 
 * {@inheritDoc}
 */
@Override synchronized public void close() throws IOException {
  long sz=q.size();
  LOG.info(String.format(""String_Node_Str"",sz));
  this.svr.close();
  long maxSleep=MAX_CLOSE_SLEEP;
  long start=Clock.unixTime();
  while (q.peek() != null) {
    if (Clock.unixTime() - start > maxSleep) {
      if (sz == q.size()) {
        LOG.warn(""String_Node_Str"" + q.size() + ""String_Node_Str"");
        return;
      }
      start=Clock.unixTime();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + e.getMessage(),e);
      Thread.currentThread().interrupt();
      closed=true;
      throw new IOException(e);
    }
  }
  closed=true;
  return;
}","/** 
 * {@inheritDoc}
 */
@Override synchronized public void close() throws IOException {
  long sz=q.size();
  LOG.info(String.format(""String_Node_Str"",sz));
  this.svr.close();
  long maxSleep=MAX_CLOSE_SLEEP;
  long start=Clock.unixTime();
  while (q.peek() != null) {
    if (Clock.unixTime() - start > maxSleep) {
      if (sz == q.size()) {
        LOG.warn(""String_Node_Str"" + q.size() + ""String_Node_Str"");
        return;
      }
      start=Clock.unixTime();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + e.getMessage(),e);
      Thread.currentThread().interrupt();
      closed=true;
      throw new IOException(e);
    }
  }
  closed=true;
}",0.9931787175989086
167264,"@Override public void open() throws IOException {
  FlumeConfiguration conf=FlumeConfiguration.get();
  FileSystem hdfs;
  if (conf.getCollectorDfsCompressGzipStatus()) {
    LOG.warn(""String_Node_Str"" + FlumeConfiguration.COLLECTOR_DFS_COMPRESS_GZIP + ""String_Node_Str""+ FlumeConfiguration.COLLECTOR_DFS_COMPRESS_CODEC+ ""String_Node_Str"");
    CompressionCodec gzipC=new GzipCodec();
    Compressor gzCmp=gzipC.createCompressor();
    dstPath=new Path(path + gzipC.getDefaultExtension());
    hdfs=dstPath.getFileSystem(conf);
    writer=hdfs.create(dstPath);
    writer=gzipC.createOutputStream(writer,gzCmp);
    LOG.info(""String_Node_Str"" + dstPath.toString());
    return;
  }
  String codecName=conf.getCollectorDfsCompressCodec();
  List<Class<? extends CompressionCodec>> codecs=CompressionCodecFactory.getCodecClasses(FlumeConfiguration.get());
  CompressionCodec codec=null;
  ArrayList<String> codecStrs=new ArrayList<String>();
  codecStrs.add(""String_Node_Str"");
  for (  Class<? extends CompressionCodec> cls : codecs) {
    codecStrs.add(cls.getSimpleName());
    if (cls.getSimpleName().equals(codecName)) {
      try {
        codec=cls.newInstance();
      }
 catch (      InstantiationException e) {
        LOG.error(""String_Node_Str"" + codec + ""String_Node_Str"");
      }
catch (      IllegalAccessException e) {
        LOG.error(""String_Node_Str"" + codec + ""String_Node_Str"");
      }
    }
  }
  if (codec == null) {
    if (!codecName.equals(""String_Node_Str"")) {
      LOG.warn(""String_Node_Str"" + codecName + ""String_Node_Str""+ codecStrs);
    }
    dstPath=new Path(path);
    hdfs=dstPath.getFileSystem(conf);
    writer=hdfs.create(dstPath);
    LOG.info(""String_Node_Str"" + dstPath.toString());
    return;
  }
  Compressor cmp=codec.createCompressor();
  dstPath=new Path(path + codec.getDefaultExtension());
  hdfs=dstPath.getFileSystem(conf);
  writer=hdfs.create(dstPath);
  try {
    writer=codec.createOutputStream(writer,cmp);
  }
 catch (  NullPointerException npe) {
    LOG.error(""String_Node_Str"" + codec);
    throw new IOException(""String_Node_Str"" + codec);
  }
  LOG.info(""String_Node_Str"" + codec + ""String_Node_Str""+ dstPath.toString());
  return;
}","@Override public void open() throws IOException {
  FlumeConfiguration conf=FlumeConfiguration.get();
  FileSystem hdfs;
  if (conf.getCollectorDfsCompressGzipStatus()) {
    LOG.warn(""String_Node_Str"" + FlumeConfiguration.COLLECTOR_DFS_COMPRESS_GZIP + ""String_Node_Str""+ FlumeConfiguration.COLLECTOR_DFS_COMPRESS_CODEC+ ""String_Node_Str"");
    CompressionCodec gzipC=new GzipCodec();
    Compressor gzCmp=gzipC.createCompressor();
    dstPath=new Path(path + gzipC.getDefaultExtension());
    hdfs=dstPath.getFileSystem(conf);
    writer=hdfs.create(dstPath);
    writer=gzipC.createOutputStream(writer,gzCmp);
    LOG.info(""String_Node_Str"" + dstPath.toString());
    return;
  }
  String codecName=conf.getCollectorDfsCompressCodec();
  List<Class<? extends CompressionCodec>> codecs=CompressionCodecFactory.getCodecClasses(FlumeConfiguration.get());
  CompressionCodec codec=null;
  ArrayList<String> codecStrs=new ArrayList<String>();
  codecStrs.add(""String_Node_Str"");
  for (  Class<? extends CompressionCodec> cls : codecs) {
    codecStrs.add(cls.getSimpleName());
    if (cls.getSimpleName().equals(codecName)) {
      try {
        codec=cls.newInstance();
      }
 catch (      InstantiationException e) {
        LOG.error(""String_Node_Str"" + codec + ""String_Node_Str"");
      }
catch (      IllegalAccessException e) {
        LOG.error(""String_Node_Str"" + codec + ""String_Node_Str"");
      }
    }
  }
  if (codec == null) {
    if (!codecName.equals(""String_Node_Str"")) {
      LOG.warn(""String_Node_Str"" + codecName + ""String_Node_Str""+ codecStrs);
    }
    dstPath=new Path(path);
    hdfs=dstPath.getFileSystem(conf);
    writer=hdfs.create(dstPath);
    LOG.info(""String_Node_Str"" + dstPath.toString());
    return;
  }
  Compressor cmp=codec.createCompressor();
  dstPath=new Path(path + codec.getDefaultExtension());
  hdfs=dstPath.getFileSystem(conf);
  writer=hdfs.create(dstPath);
  try {
    writer=codec.createOutputStream(writer,cmp);
  }
 catch (  NullPointerException npe) {
    LOG.error(""String_Node_Str"" + codec);
    throw new IOException(""String_Node_Str"" + codec);
  }
  LOG.info(""String_Node_Str"" + codec + ""String_Node_Str""+ dstPath.toString());
}",0.9977189781021898
167265,"public static void main(String argv[]){
  if (argv.length < 2) {
    usage();
    System.exit(-1);
  }
  boolean endless=false;
  boolean randsleep=false;
  long sleep=0;
  String props=null;
  long iters=100;
  StringBuffer b=new StringBuffer();
  for (int j=0; j < argv.length; j++) {
    if (""String_Node_Str"".equals(argv[j])) {
      endless=true;
      continue;
    }
    if (""String_Node_Str"".equals(argv[j])) {
      j++;
      sleep=Long.parseLong(argv[j]);
      continue;
    }
    if (""String_Node_Str"".equals(argv[j])) {
      randsleep=true;
      continue;
    }
    props=argv[j];
    j++;
    iters=Long.parseLong(argv[j]);
    j++;
    boolean first=true;
    for (int i=j; i < argv.length; i++) {
      if (!first) {
        b.append(""String_Node_Str"");
      }
      b.append(argv[i]);
      first=false;
    }
    break;
  }
  PropertyConfigurator.configure(props);
  Logger logger=Logger.getLogger(Log4JInjector.class);
  for (long l=0; l < iters || endless; l++) {
    try {
      long thisSleep=(long)((double)sleep * (double)(randsleep ? Math.random() : 1));
      Thread.sleep(thisSleep);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    logger.warn(""String_Node_Str"" + l + ""String_Node_Str""+ b);
  }
}","public static void main(String argv[]){
  if (argv.length < 2) {
    usage();
    System.exit(-1);
  }
  boolean endless=false;
  boolean randsleep=false;
  long sleep=0;
  String props=null;
  long iters=100;
  StringBuffer b=new StringBuffer();
  for (int j=0; j < argv.length; j++) {
    if (""String_Node_Str"".equals(argv[j])) {
      endless=true;
      continue;
    }
    if (""String_Node_Str"".equals(argv[j])) {
      j++;
      sleep=Long.parseLong(argv[j]);
      continue;
    }
    if (""String_Node_Str"".equals(argv[j])) {
      randsleep=true;
      continue;
    }
    props=argv[j];
    j++;
    iters=Long.parseLong(argv[j]);
    j++;
    boolean first=true;
    for (int i=j; i < argv.length; i++) {
      if (!first) {
        b.append(' ');
      }
      b.append(argv[i]);
      first=false;
    }
    break;
  }
  PropertyConfigurator.configure(props);
  Logger logger=Logger.getLogger(Log4JInjector.class);
  for (long l=0; l < iters || endless; l++) {
    try {
      long thisSleep=(long)((double)sleep * (double)(randsleep ? Math.random() : 1));
      Thread.sleep(thisSleep);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    logger.warn(""String_Node_Str"" + l + ""String_Node_Str""+ b);
  }
}",0.9920191540303273
167266,"@Override public void close() throws IOException {
  if (server == null) {
    LOG.info(String.format(""String_Node_Str"",port));
    return;
  }
  server.stop();
  LOG.info(String.format(""String_Node_Str"",port));
  return;
}","@Override public void close() throws IOException {
  if (server == null) {
    LOG.info(String.format(""String_Node_Str"",port));
    return;
  }
  server.stop();
  LOG.info(String.format(""String_Node_Str"",port));
}",0.9770642201834864
167267,"@Override synchronized public void close() throws IOException {
  if (server == null) {
    LOG.info(String.format(""String_Node_Str"",port));
    return;
  }
  server.stop();
  LOG.info(String.format(""String_Node_Str"",port));
  long sz=q.size();
  LOG.info(String.format(""String_Node_Str"",sz));
  long maxSleep=MAX_CLOSE_SLEEP;
  long start=Clock.unixTime();
  while (q.peek() != null) {
    if (Clock.unixTime() - start > maxSleep) {
      if (sz == q.size()) {
        LOG.warn(""String_Node_Str"" + q.size() + ""String_Node_Str"");
        return;
      }
      start=Clock.unixTime();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + e.getMessage(),e);
      Thread.currentThread().interrupt();
      closed=true;
      throw new IOException(e);
    }
  }
  closed=true;
  return;
}","@Override synchronized public void close() throws IOException {
  if (server == null) {
    LOG.info(String.format(""String_Node_Str"",port));
    return;
  }
  server.stop();
  LOG.info(String.format(""String_Node_Str"",port));
  long sz=q.size();
  LOG.info(String.format(""String_Node_Str"",sz));
  long maxSleep=MAX_CLOSE_SLEEP;
  long start=Clock.unixTime();
  while (q.peek() != null) {
    if (Clock.unixTime() - start > maxSleep) {
      if (sz == q.size()) {
        LOG.warn(""String_Node_Str"" + q.size() + ""String_Node_Str"");
        return;
      }
      start=Clock.unixTime();
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      LOG.error(""String_Node_Str"" + e.getMessage(),e);
      Thread.currentThread().interrupt();
      closed=true;
      throw new IOException(e);
    }
  }
  closed=true;
}",0.9941037735849056
167268,"void exec(Command cmd) throws MasterExecException {
  Execable ex=cmds.get(cmd.getCommand());
  if (ex == null) {
    throw new MasterExecException(""String_Node_Str"" + cmd + ""String_Node_Str"",null);
  }
  LOG.info(""String_Node_Str"" + cmd);
  try {
    ex.exec(cmd.getArgs());
  }
 catch (  MasterExecException e) {
    throw e;
  }
catch (  IOException e) {
    throw new MasterExecException(e.getMessage(),e);
  }
  return;
}","void exec(Command cmd) throws MasterExecException {
  Execable ex=cmds.get(cmd.getCommand());
  if (ex == null) {
    throw new MasterExecException(""String_Node_Str"" + cmd + ""String_Node_Str"",null);
  }
  LOG.info(""String_Node_Str"" + cmd);
  try {
    ex.exec(cmd.getArgs());
  }
 catch (  MasterExecException e) {
    throw e;
  }
catch (  IOException e) {
    throw new MasterExecException(e.getMessage(),e);
  }
}",0.98812351543943
167269,"/** 
 * checks to see if any node's last heart beat was too long ago
 */
public void checkup(){
  long now=Clock.unixTime();
  HashMap<String,NodeStatus> ss=null;
synchronized (statuses) {
    ss=new HashMap<String,NodeStatus>(statuses);
  }
  int maxMissed=FlumeConfiguration.get().getMasterMaxMissedheartbeats();
  long timeout=FlumeConfiguration.get().getConfigHeartbeatPeriod() * maxMissed;
  for (  Entry<String,NodeStatus> e : ss.entrySet()) {
    NodeStatus ns=e.getValue();
    long delta=now - ns.lastseen;
    if (delta > timeout) {
      ns.state=NodeState.LOST;
    }
    String expectedPhys=FlumeMaster.getInstance().getSpecMan().getPhysicalNode(e.getKey());
    if (expectedPhys == null || !expectedPhys.equals(ns.physicalNode)) {
      ns.state=NodeState.DECOMMISSIONED;
    }
  }
  return;
}","/** 
 * checks to see if any node's last heart beat was too long ago
 */
public void checkup(){
  long now=Clock.unixTime();
  HashMap<String,NodeStatus> ss=null;
synchronized (statuses) {
    ss=new HashMap<String,NodeStatus>(statuses);
  }
  int maxMissed=FlumeConfiguration.get().getMasterMaxMissedheartbeats();
  long timeout=FlumeConfiguration.get().getConfigHeartbeatPeriod() * maxMissed;
  for (  Entry<String,NodeStatus> e : ss.entrySet()) {
    NodeStatus ns=e.getValue();
    long delta=now - ns.lastseen;
    if (delta > timeout) {
      ns.state=NodeState.LOST;
    }
    String expectedPhys=FlumeMaster.getInstance().getSpecMan().getPhysicalNode(e.getKey());
    if (expectedPhys == null || !expectedPhys.equals(ns.physicalNode)) {
      ns.state=NodeState.DECOMMISSIONED;
    }
  }
}",0.9937655860349128
167270,"/** 
 * Converts a nodemap into an Avro-serialized byte array
 */
static protected byte[] serializeNodeMap(ListMultimap<String,String> nodeMap) throws IOException {
  DatumWriter<AvroFlumeNodeMap> datumWriter=new SpecificDatumWriter<AvroFlumeNodeMap>();
  AvroFlumeNodeMap avromap=new AvroFlumeNodeMap();
  Map<CharSequence,List<CharSequence>> map=new HashMap<CharSequence,List<CharSequence>>();
  for (  Entry<String,Collection<String>> e : nodeMap.asMap().entrySet()) {
    String name=e.getKey();
    GenericArray<CharSequence> out=new GenericData.Array<CharSequence>(e.getValue().size(),Schema.createArray(Schema.create(Type.STRING)));
    for (    String s : e.getValue()) {
      out.add(new String(s));
    }
    map.put(new String(name),out);
  }
  avromap.nodemap=map;
  datumWriter.setSchema(avromap.getSchema());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataFileWriter<AvroFlumeNodeMap> fileWriter=new DataFileWriter<AvroFlumeNodeMap>(datumWriter);
  fileWriter.create(avromap.getSchema(),baos);
  fileWriter.append(avromap);
  fileWriter.close();
  return baos.toByteArray();
}","/** 
 * Converts a nodemap into an Avro-serialized byte array
 */
static protected byte[] serializeNodeMap(ListMultimap<String,String> nodeMap) throws IOException {
  DatumWriter<AvroFlumeNodeMap> datumWriter=new SpecificDatumWriter<AvroFlumeNodeMap>();
  AvroFlumeNodeMap avromap=new AvroFlumeNodeMap();
  Map<CharSequence,List<CharSequence>> map=new HashMap<CharSequence,List<CharSequence>>();
  for (  Entry<String,Collection<String>> e : nodeMap.asMap().entrySet()) {
    String name=e.getKey();
    GenericArray<CharSequence> out=new GenericData.Array<CharSequence>(e.getValue().size(),Schema.createArray(Schema.create(Type.STRING)));
    for (    String s : e.getValue()) {
      out.add(new String(s));
    }
    map.put(name,out);
  }
  avromap.nodemap=map;
  datumWriter.setSchema(avromap.getSchema());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataFileWriter<AvroFlumeNodeMap> fileWriter=new DataFileWriter<AvroFlumeNodeMap>(datumWriter);
  fileWriter.create(avromap.getSchema(),baos);
  fileWriter.append(avromap);
  fileWriter.close();
  return baos.toByteArray();
}",0.9918330308529946
167271,"/** 
 * Converts a ChokeMap into an Avro-serialized byte array
 */
static protected byte[] serializeChokeMap(Map<String,Map<String,Integer>> chokeMap) throws IOException {
  DatumWriter<AvroFlumeChokeMap> datumWriter=new SpecificDatumWriter<AvroFlumeChokeMap>();
  AvroFlumeChokeMap avromap=new AvroFlumeChokeMap();
  Map<CharSequence,Map<CharSequence,Integer>> map=new HashMap<CharSequence,Map<CharSequence,Integer>>();
  for (  Entry<String,Map<String,Integer>> e : chokeMap.entrySet()) {
    String name=e.getKey();
    HashMap<CharSequence,Integer> tempMap=new HashMap<CharSequence,Integer>();
    for (    Entry<String,Integer> mape : e.getValue().entrySet()) {
      tempMap.put(new String(mape.getKey()),mape.getValue());
    }
    map.put(new String(name),tempMap);
  }
  avromap.chokemap=map;
  datumWriter.setSchema(avromap.getSchema());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataFileWriter<AvroFlumeChokeMap> fileWriter=new DataFileWriter<AvroFlumeChokeMap>(datumWriter);
  fileWriter.create(avromap.getSchema(),baos);
  fileWriter.append(avromap);
  fileWriter.close();
  return baos.toByteArray();
}","/** 
 * Converts a ChokeMap into an Avro-serialized byte array
 */
static protected byte[] serializeChokeMap(Map<String,Map<String,Integer>> chokeMap) throws IOException {
  DatumWriter<AvroFlumeChokeMap> datumWriter=new SpecificDatumWriter<AvroFlumeChokeMap>();
  AvroFlumeChokeMap avromap=new AvroFlumeChokeMap();
  Map<CharSequence,Map<CharSequence,Integer>> map=new HashMap<CharSequence,Map<CharSequence,Integer>>();
  for (  Entry<String,Map<String,Integer>> e : chokeMap.entrySet()) {
    String name=e.getKey();
    HashMap<CharSequence,Integer> tempMap=new HashMap<CharSequence,Integer>();
    for (    Entry<String,Integer> mape : e.getValue().entrySet()) {
      tempMap.put(new String(mape.getKey()),mape.getValue());
    }
    map.put(name,tempMap);
  }
  avromap.chokemap=map;
  datumWriter.setSchema(avromap.getSchema());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataFileWriter<AvroFlumeChokeMap> fileWriter=new DataFileWriter<AvroFlumeChokeMap>(datumWriter);
  fileWriter.create(avromap.getSchema(),baos);
  fileWriter.append(avromap);
  fileWriter.close();
  return baos.toByteArray();
}",0.6666666666666666
167272,"@Override synchronized public void removeLogicalNode(String logicNode) throws IOException {
  String oldflow=getFlowId(logicNode);
  parent.removeLogicalNode(logicNode);
  flows.get(oldflow).removeLogicalNode(logicNode);
}","@Override synchronized public void removeLogicalNode(String logicNode) throws IOException {
  String oldflow=getFlowId(logicNode);
  parent.removeLogicalNode(logicNode);
  ConfigurationManager flowCfg=flows.get(oldflow);
  if (flowCfg != null) {
    flowCfg.removeLogicalNode(logicNode);
  }
}",0.8621359223300971
167273,"/** 
 * This translates all autoBEChain, autoE2EChain, and autoDFOChain into low level sinks taking the failover chain mangers info into account.
 */
@Override public String translateSink(String lnode,String sink) throws FlumeSpecException {
  Preconditions.checkArgument(lnode != null);
  Preconditions.checkArgument(sink != null);
  String xsink;
  try {
    List<String> failovers=failchainMan.getFailovers(lnode);
    xsink=FlumeSpecGen.genEventSink(substBEChains(sink,failovers));
    xsink=FlumeSpecGen.genEventSink(substDFOChainsNoLet(xsink,failovers));
    xsink=FlumeSpecGen.genEventSink(substE2EChains(xsink,failovers));
    return xsink;
  }
 catch (  RecognitionException e) {
    throw new FlumeSpecException(e.getMessage());
  }
}","/** 
 * This translates all autoBEChain, autoE2EChain, and autoDFOChain into low level sinks taking the failover chain mangers info into account.
 */
@Override public String translateSink(String lnode,String sink) throws FlumeSpecException {
  Preconditions.checkArgument(lnode != null);
  Preconditions.checkArgument(sink != null);
  String xsink;
  try {
    List<String> failovers=failchainMan.getFailovers(lnode);
    xsink=FlumeSpecGen.genEventSink(substBEChains(sink,failovers));
    xsink=FlumeSpecGen.genEventSink(substDFOChainsNoLet(xsink,failovers));
    xsink=FlumeSpecGen.genEventSink(substE2EChainsSimple(xsink,failovers));
    return xsink;
  }
 catch (  RecognitionException e) {
    throw new FlumeSpecException(e.getMessage());
  }
}",0.9959839357429718
167274,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mTextPaint.setColor(mTextColor);
  mTextPaint.setTextSize(mTextSize);
  mMainLinePaint.setColor(mLineColor);
  mSecondaryLinePaint.setColor(mLineColor);
  mTerciaryLinePaint.setColor(mLineColor);
  mMarkerPaint.setColor(mMarkerColor);
  canvas.drawColor(mBackgroundColor);
  int width=getMeasuredWidth();
  int height=getMeasuredHeight();
  int paddingTop=getPaddingTop();
  int paddingBottom=getPaddingBottom();
  int paddingLeft=getPaddingLeft();
  int paddingRight=getPaddingRight();
  int unitHeight=(height - paddingTop - paddingBottom) / 12;
  float pixDeg=(width - paddingLeft - paddingRight) / mRangeDegrees;
  int minDegrees=Math.round(mDegrees - mRangeDegrees / 2), maxDegrees=Math.round(mDegrees + mRangeDegrees / 2);
  for (int i=-180; i < 540; i+=15) {
    if ((i >= minDegrees) && (i <= maxDegrees)) {
      canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),10 * unitHeight + paddingTop,mTerciaryLinePaint);
      if (i % 45 == 0) {
        canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),8 * unitHeight + paddingTop,mSecondaryLinePaint);
      }
      if (i % 90 == 0) {
        canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),6 * unitHeight + paddingTop,mMainLinePaint);
        String coord=""String_Node_Str"";
switch (i) {
case -90:
case 270:
          coord=getResources().getString(R.string.compass_west);
        break;
case 0:
case 360:
      coord=getResources().getString(R.string.compass_north);
    break;
case 90:
case 450:
  coord=getResources().getString(R.string.compass_east);
break;
case -180:
case 180:
coord=getResources().getString(R.string.compass_south);
break;
}
canvas.drawText(coord,paddingLeft + pixDeg * (i - minDegrees),5 * unitHeight + paddingTop,mTextPaint);
}
}
}
if (mShowMarker) {
pathMarker.moveTo(width / 2,3 * unitHeight + paddingTop);
pathMarker.lineTo((width / 2) + 20 + paddingLeft,paddingTop);
pathMarker.lineTo((width / 2) - 20 + paddingLeft,paddingTop);
pathMarker.close();
canvas.drawPath(pathMarker,mMarkerPaint);
}
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  mTextPaint.setColor(mTextColor);
  mTextPaint.setTextSize(mTextSize);
  mMainLinePaint.setColor(mLineColor);
  mSecondaryLinePaint.setColor(mLineColor);
  mTerciaryLinePaint.setColor(mLineColor);
  mMarkerPaint.setColor(mMarkerColor);
  canvas.drawColor(mBackgroundColor);
  int width=getMeasuredWidth();
  int height=getMeasuredHeight();
  int paddingTop=getPaddingTop();
  int paddingBottom=getPaddingBottom();
  int paddingLeft=getPaddingLeft();
  int paddingRight=getPaddingRight();
  int unitHeight=(height - paddingTop - paddingBottom) / 12;
  float pixDeg=(width - paddingLeft - paddingRight) / mRangeDegrees;
  int minDegrees=Math.round(mDegrees - mRangeDegrees / 2), maxDegrees=Math.round(mDegrees + mRangeDegrees / 2);
  for (int i=-180; i < 540; i+=15) {
    if ((i >= minDegrees) && (i <= maxDegrees)) {
      canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),10 * unitHeight + paddingTop,mTerciaryLinePaint);
      if (i % 45 == 0) {
        canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),8 * unitHeight + paddingTop,mSecondaryLinePaint);
      }
      if (i % 90 == 0) {
        canvas.drawLine(paddingLeft + pixDeg * (i - minDegrees),height - paddingBottom,paddingLeft + pixDeg * (i - minDegrees),6 * unitHeight + paddingTop,mMainLinePaint);
        String coord=""String_Node_Str"";
switch (i) {
case -90:
case 270:
          coord=getResources().getString(R.string.compass_west);
        break;
case 0:
case 360:
      coord=getResources().getString(R.string.compass_north);
    break;
case 90:
case 450:
  coord=getResources().getString(R.string.compass_east);
break;
case -180:
case 180:
coord=getResources().getString(R.string.compass_south);
break;
}
canvas.drawText(coord,paddingLeft + pixDeg * (i - minDegrees),5 * unitHeight + paddingTop,mTextPaint);
}
}
}
if (mShowMarker) {
pathMarker.moveTo(width / 2,3 * unitHeight + paddingTop);
pathMarker.lineTo((width / 2) + 20,paddingTop);
pathMarker.lineTo((width / 2) - 20,paddingTop);
pathMarker.close();
canvas.drawPath(pathMarker,mMarkerPaint);
}
}",0.993766696349065
167275,"public AuthenticationStatus authenticate(String userName,String password,ApplicationContext context){
  ISecurityService securityService=context.getSecurityService();
  IOperationsService operationsService=context.getOperationsSerivce();
  User user=operationsService.findUserByLoginId(userName);
  String passwordHash=securityService.hash(user.getSalt(),password);
  if (user.getPassword() != null && user.getPassword().equals(passwordHash)) {
    GlobalSetting expireSetting=context.getOperationsSerivce().findGlobalSetting(GlobalSetting.PASSWORD_EXPIRE_DAYS,Integer.toString(GlobalSetting.PASSWORD_EXPIRE_DAYS_DEFAULT));
    int passwordExpiresInDays=Integer.parseInt(expireSetting.getValue());
    Date expireTime=DateUtils.addDays(new Date(),-passwordExpiresInDays);
    if (passwordExpiresInDays > 0 && (user.getLastPasswordTime() == null || user.getLastPasswordTime().before(expireTime))) {
      return AuthenticationStatus.EXPIRED;
    }
    return AuthenticationStatus.VALID;
  }
  return AuthenticationStatus.INVALID;
}","public AuthenticationStatus authenticate(String userName,String password,ApplicationContext context){
  ISecurityService securityService=context.getSecurityService();
  IOperationsService operationsService=context.getOperationsService();
  User user=operationsService.findUserByLoginId(userName);
  String passwordHash=securityService.hash(user.getSalt(),password);
  if (user.getPassword() != null && user.getPassword().equals(passwordHash)) {
    GlobalSetting expireSetting=context.getOperationsService().findGlobalSetting(GlobalSetting.PASSWORD_EXPIRE_DAYS,Integer.toString(GlobalSetting.PASSWORD_EXPIRE_DAYS_DEFAULT));
    int passwordExpiresInDays=Integer.parseInt(expireSetting.getValue());
    Date expireTime=DateUtils.addDays(new Date(),-passwordExpiresInDays);
    if (passwordExpiresInDays > 0 && (user.getLastPasswordTime() == null || user.getLastPasswordTime().before(expireTime))) {
      return AuthenticationStatus.EXPIRED;
    }
    return AuthenticationStatus.VALID;
  }
  return AuthenticationStatus.INVALID;
}",0.9980582524271844
167276,"protected GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsSerivce().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}","protected GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsService().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}",0.9966555183946488
167277,"@SuppressWarnings(""String_Node_Str"") @Override protected void init(VaadinRequest request){
  HttpServletRequest req=((VaadinServletRequest)VaadinService.getCurrentRequest()).getHttpServletRequest();
  appSession=new AppSession(req.getRemoteUser(),whereAreYou(req),req.getRemoteHost(),VaadinSession.getCurrent(),req.getHeader(""String_Node_Str""),new Date());
  WebApplicationContext ctx=getWebApplicationContext();
  backgroundRefresherService=ctx.getBean(BackgroundRefresherService.class);
  backgroundRefresherService.init(this);
  setErrorHandler(new DefaultErrorHandler(){
    public void error(    com.vaadin.server.ErrorEvent event){
      String intro=""String_Node_Str"";
      String message=""String_Node_Str"";
      for (Throwable t=event.getThrowable(); t != null; t=t.getCause()) {
        if (t.getCause() == null) {
          intro+=t.getClass().getName() + ""String_Node_Str"";
          message=t.getMessage();
        }
      }
      ErrorWindow window=new ErrorWindow(intro,message);
      window.show();
      Throwable ex=event.getThrowable();
      if (ex != null) {
        log.error(ex.getMessage(),ex);
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
);
  VaadinSession.getCurrent().setConverterFactory(new DefaultConverterFactory(){
    private static final long serialVersionUID=1L;
    @Override protected Converter<Date,?> createDateConverter(    Class<?> sourceType){
      return super.createDateConverter(sourceType);
    }
    protected Converter<String,?> createStringConverter(    Class<?> sourceType){
      if (Double.class.isAssignableFrom(sourceType)) {
        return new StringToDoubleConverter();
      }
 else       if (Float.class.isAssignableFrom(sourceType)) {
        return new StringToFloatConverter();
      }
 else       if (Integer.class.isAssignableFrom(sourceType)) {
        return new StringToIntegerConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (Long.class.isAssignableFrom(sourceType)) {
        return new StringToLongConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (BigDecimal.class.isAssignableFrom(sourceType)) {
        return new StringToBigDecimalConverter();
      }
 else       if (Boolean.class.isAssignableFrom(sourceType)) {
        return new StringToBooleanConverter();
      }
 else       if (Date.class.isAssignableFrom(sourceType)) {
        return new StringToDateConverter(){
          protected DateFormat getFormat(          Locale locale){
            if (locale == null) {
              locale=Locale.getDefault();
            }
            DateFormat f=new SimpleDateFormat(""String_Node_Str"");
            f.setLenient(false);
            return f;
          }
        }
;
      }
 else {
        return null;
      }
    }
  }
);
  Responsive.makeResponsive(this);
  ApplicationContext appCtx=ctx.getBean(ApplicationContext.class);
  IOperationsService operationsService=appCtx.getOperationsSerivce();
  if (operationsService.isUserLoginEnabled()) {
    LoginDialog login=new LoginDialog(appCtx,this);
    UI.getCurrent().addWindow(login);
  }
 else {
    User user=operationsService.findUserByLoginId(DEFAULT_USER);
    if (user == null) {
      user=new User();
      user.setLoginId(DEFAULT_USER);
      operationsService.save(user);
      Group group=operationsService.findGroupByName(DEFAULT_GROUP);
      if (group == null) {
        group=new Group(DEFAULT_GROUP);
        user.getGroups().add(group);
        operationsService.save(group);
        for (        Privilege priv : Privilege.values()) {
          GroupPrivilege groupPriv=new GroupPrivilege(group.getId(),priv.name());
          group.getGroupPrivileges().add(groupPriv);
          operationsService.save(groupPriv);
        }
      }
      UserGroup userGroup=new UserGroup(user.getId(),group.getId());
      operationsService.save(userGroup);
    }
    appCtx.setUser(user);
    login(user);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void init(VaadinRequest request){
  HttpServletRequest req=((VaadinServletRequest)VaadinService.getCurrentRequest()).getHttpServletRequest();
  appSession=new AppSession(req.getRemoteUser(),whereAreYou(req),req.getRemoteHost(),VaadinSession.getCurrent(),req.getHeader(""String_Node_Str""),new Date());
  WebApplicationContext ctx=getWebApplicationContext();
  backgroundRefresherService=ctx.getBean(BackgroundRefresherService.class);
  backgroundRefresherService.init(this);
  setErrorHandler(new DefaultErrorHandler(){
    public void error(    com.vaadin.server.ErrorEvent event){
      String intro=""String_Node_Str"";
      String message=""String_Node_Str"";
      for (Throwable t=event.getThrowable(); t != null; t=t.getCause()) {
        if (t.getCause() == null) {
          intro+=t.getClass().getName() + ""String_Node_Str"";
          message=t.getMessage();
        }
      }
      ErrorWindow window=new ErrorWindow(intro,message);
      window.show();
      Throwable ex=event.getThrowable();
      if (ex != null) {
        log.error(ex.getMessage(),ex);
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
);
  VaadinSession.getCurrent().setConverterFactory(new DefaultConverterFactory(){
    private static final long serialVersionUID=1L;
    @Override protected Converter<Date,?> createDateConverter(    Class<?> sourceType){
      return super.createDateConverter(sourceType);
    }
    protected Converter<String,?> createStringConverter(    Class<?> sourceType){
      if (Double.class.isAssignableFrom(sourceType)) {
        return new StringToDoubleConverter();
      }
 else       if (Float.class.isAssignableFrom(sourceType)) {
        return new StringToFloatConverter();
      }
 else       if (Integer.class.isAssignableFrom(sourceType)) {
        return new StringToIntegerConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (Long.class.isAssignableFrom(sourceType)) {
        return new StringToLongConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (BigDecimal.class.isAssignableFrom(sourceType)) {
        return new StringToBigDecimalConverter();
      }
 else       if (Boolean.class.isAssignableFrom(sourceType)) {
        return new StringToBooleanConverter();
      }
 else       if (Date.class.isAssignableFrom(sourceType)) {
        return new StringToDateConverter(){
          protected DateFormat getFormat(          Locale locale){
            if (locale == null) {
              locale=Locale.getDefault();
            }
            DateFormat f=new SimpleDateFormat(""String_Node_Str"");
            f.setLenient(false);
            return f;
          }
        }
;
      }
 else {
        return null;
      }
    }
  }
);
  Responsive.makeResponsive(this);
  ApplicationContext appCtx=ctx.getBean(ApplicationContext.class);
  IOperationsService operationsService=appCtx.getOperationsService();
  if (operationsService.isUserLoginEnabled()) {
    LoginDialog login=new LoginDialog(appCtx,this);
    UI.getCurrent().addWindow(login);
  }
 else {
    User user=operationsService.findUserByLoginId(DEFAULT_USER);
    if (user == null) {
      user=new User();
      user.setLoginId(DEFAULT_USER);
      operationsService.save(user);
      Group group=operationsService.findGroupByName(DEFAULT_GROUP);
      if (group == null) {
        group=new Group(DEFAULT_GROUP);
        user.getGroups().add(group);
        operationsService.save(group);
        for (        Privilege priv : Privilege.values()) {
          GroupPrivilege groupPriv=new GroupPrivilege(group.getId(),priv.name());
          group.getGroupPrivileges().add(groupPriv);
          operationsService.save(groupPriv);
        }
      }
      UserGroup userGroup=new UserGroup(user.getId(),group.getId());
      operationsService.save(userGroup);
    }
    appCtx.setUser(user);
    login(user);
  }
}",0.9995477159656264
167278,"protected void changePassword(){
  ISecurityService securityService=context.getSecurityService();
  IOperationsService operationsService=context.getOperationsSerivce();
  User user=context.getUser();
  String password=securityService.hash(user.getSalt(),currentPasswordField.getValue());
  if (user != null && user.getPassword() != null && user.getPassword().equals(password)) {
    if (testNewPassword()) {
      operationsService.savePassword(user,newPasswordField.getValue());
      close();
    }
  }
 else {
    String address=Page.getCurrent().getWebBrowser().getAddress();
    log.warn(""String_Node_Str"" + user.getLoginId() + ""String_Node_Str""+ address);
    notify(""String_Node_Str"",""String_Node_Str"");
    currentPasswordField.selectAll();
  }
}","protected void changePassword(){
  ISecurityService securityService=context.getSecurityService();
  IOperationsService operationsService=context.getOperationsService();
  User user=context.getUser();
  String password=securityService.hash(user.getSalt(),currentPasswordField.getValue());
  if (user != null && user.getPassword() != null && user.getPassword().equals(password)) {
    if (testNewPassword()) {
      operationsService.savePassword(user,newPasswordField.getValue());
      close();
    }
  }
 else {
    String address=Page.getCurrent().getWebBrowser().getAddress();
    log.warn(""String_Node_Str"" + user.getLoginId() + ""String_Node_Str""+ address);
    notify(""String_Node_Str"",""String_Node_Str"");
    currentPasswordField.selectAll();
  }
}",0.9973474801061007
167279,"protected static boolean testPassword(PasswordField passwordField,PasswordField validatePasswordField,ApplicationContext context){
  boolean passedTest=true;
  if (validatePasswordField.getValue() == null || passwordField.getValue() == null || !validatePasswordField.getValue().equals(passwordField.getValue())) {
    notify(""String_Node_Str"",""String_Node_Str"");
    passedTest=false;
  }
 else {
    TypedProperties settings=new TypedProperties();
    settings.putAll(context.getOperationsSerivce().findGlobalSettingsAsMap());
    ISecurityService securityService=context.getSecurityService();
    int minPasswordLength=settings.getInt(PASSWORD_MIN_LENGTH,6);
    if (passwordField.getValue().length() < minPasswordLength) {
      passedTest=false;
      notify(""String_Node_Str"",""String_Node_Str"" + minPasswordLength + ""String_Node_Str"");
    }
    int prohibitNPreviousPasswords=settings.getInt(PASSWORD_PROHIBIT_PREVIOUS,5);
    if (passedTest && prohibitNPreviousPasswords != 0) {
      List<UserHist> histories=context.getOperationsSerivce().findUserHist(context.getUser().getId());
      if (prohibitNPreviousPasswords < 0) {
        prohibitNPreviousPasswords=histories.size();
      }
      for (int i=0; i < histories.size() && i < prohibitNPreviousPasswords; i++) {
        UserHist hist=histories.get(i);
        String toCompare=securityService.hash(hist.getSalt(),passwordField.getValue());
        if (toCompare.equals(hist.getPassword())) {
          passedTest=false;
          notify(""String_Node_Str"",""String_Node_Str"");
          break;
        }
      }
    }
    if (passedTest) {
      boolean requiresAlphaNumberic=settings.is(PASSWORD_REQUIRE_ALPHANUMERIC,true);
      if (requiresAlphaNumberic && !containsAlphanumeric(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean requiresSymbol=settings.is(PASSWORD_REQUIRE_SYMBOL,true);
      if (requiresSymbol && !containsSymbol(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean requiresMixedCase=settings.is(PASSWORD_REQUIRE_MIXED_CASE,true);
      if (requiresMixedCase && !containsMixedCase(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean prohibitCommonWords=settings.is(PASSWORD_PROHIBIT_COMMON_WORDS,true);
      if (prohibitCommonWords && containsCommonWords(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return passedTest;
}","protected static boolean testPassword(PasswordField passwordField,PasswordField validatePasswordField,ApplicationContext context){
  boolean passedTest=true;
  if (validatePasswordField.getValue() == null || passwordField.getValue() == null || !validatePasswordField.getValue().equals(passwordField.getValue())) {
    notify(""String_Node_Str"",""String_Node_Str"");
    passedTest=false;
  }
 else {
    TypedProperties settings=new TypedProperties();
    settings.putAll(context.getOperationsService().findGlobalSettingsAsMap());
    ISecurityService securityService=context.getSecurityService();
    int minPasswordLength=settings.getInt(PASSWORD_MIN_LENGTH,6);
    if (passwordField.getValue().length() < minPasswordLength) {
      passedTest=false;
      notify(""String_Node_Str"",""String_Node_Str"" + minPasswordLength + ""String_Node_Str"");
    }
    int prohibitNPreviousPasswords=settings.getInt(PASSWORD_PROHIBIT_PREVIOUS,5);
    if (passedTest && prohibitNPreviousPasswords != 0) {
      List<UserHist> histories=context.getOperationsService().findUserHist(context.getUser().getId());
      if (prohibitNPreviousPasswords < 0) {
        prohibitNPreviousPasswords=histories.size();
      }
      for (int i=0; i < histories.size() && i < prohibitNPreviousPasswords; i++) {
        UserHist hist=histories.get(i);
        String toCompare=securityService.hash(hist.getSalt(),passwordField.getValue());
        if (toCompare.equals(hist.getPassword())) {
          passedTest=false;
          notify(""String_Node_Str"",""String_Node_Str"");
          break;
        }
      }
    }
    if (passedTest) {
      boolean requiresAlphaNumberic=settings.is(PASSWORD_REQUIRE_ALPHANUMERIC,true);
      if (requiresAlphaNumberic && !containsAlphanumeric(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean requiresSymbol=settings.is(PASSWORD_REQUIRE_SYMBOL,true);
      if (requiresSymbol && !containsSymbol(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean requiresMixedCase=settings.is(PASSWORD_REQUIRE_MIXED_CASE,true);
      if (requiresMixedCase && !containsMixedCase(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (passedTest) {
      boolean prohibitCommonWords=settings.is(PASSWORD_PROHIBIT_COMMON_WORDS,true);
      if (prohibitCommonWords && containsCommonWords(passwordField.getValue())) {
        passedTest=false;
        notify(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  return passedTest;
}",0.9992611747321758
167280,"public LoginDialog(ApplicationContext context,LoginListener loginListener){
  super(""String_Node_Str"");
  this.context=context;
  this.loginListener=loginListener;
  settings=new TypedProperties();
  settings.putAll(context.getOperationsSerivce().findGlobalSettingsAsMap());
  passwordExpiresInDays=settings.getInt(GlobalSetting.PASSWORD_EXPIRE_DAYS,60);
  setWidth(300,Unit.PIXELS);
  setResizable(false);
  setModal(true);
  setClosable(false);
  LoginForm loginForm=new LoginForm(){
    @Override protected Component createContent(    TextField userNameField,    PasswordField passwordField,    Button loginButton){
      VerticalLayout layout=new VerticalLayout();
      layout.setMargin(true);
      layout.setSpacing(true);
      LoginDialog.this.userNameField=userNameField;
      userNameField.setWidth(100,Unit.PERCENTAGE);
      LoginDialog.this.passwordField=passwordField;
      passwordField.setWidth(100,Unit.PERCENTAGE);
      passwordField.setNullRepresentation(""String_Node_Str"");
      layout.addComponent(userNameField);
      layout.addComponent(passwordField);
      validatePasswordField=new PasswordField(""String_Node_Str"");
      validatePasswordField.setWidth(100,Unit.PERCENTAGE);
      validatePasswordField.setNullRepresentation(""String_Node_Str"");
      validatePasswordField.setVisible(false);
      layout.addComponent(validatePasswordField);
      HorizontalLayout buttonLayout=new HorizontalLayout();
      loginButton.setStyleName(ValoTheme.BUTTON_PRIMARY);
      LoginDialog.this.loginButton=loginButton;
      buttonLayout.addComponent(loginButton);
      buttonLayout.setWidth(100,Unit.PERCENTAGE);
      layout.addComponent(buttonLayout);
      buttonLayout.addComponent(loginButton);
      buttonLayout.setComponentAlignment(loginButton,Alignment.BOTTOM_RIGHT);
      userNameField.focus();
      return layout;
    }
  }
;
  loginForm.addLoginListener((e) -> login((String)userNameField.getValue(),(String)passwordField.getValue()));
  loginForm.setWidth(300,Unit.PIXELS);
  setContent(loginForm);
}","public LoginDialog(ApplicationContext context,LoginListener loginListener){
  super(""String_Node_Str"");
  this.context=context;
  this.loginListener=loginListener;
  settings=new TypedProperties();
  settings.putAll(context.getOperationsService().findGlobalSettingsAsMap());
  passwordExpiresInDays=settings.getInt(GlobalSetting.PASSWORD_EXPIRE_DAYS,60);
  setWidth(300,Unit.PIXELS);
  setResizable(false);
  setModal(true);
  setClosable(false);
  LoginForm loginForm=new LoginForm(){
    @Override protected Component createContent(    TextField userNameField,    PasswordField passwordField,    Button loginButton){
      VerticalLayout layout=new VerticalLayout();
      layout.setMargin(true);
      layout.setSpacing(true);
      LoginDialog.this.userNameField=userNameField;
      userNameField.setWidth(100,Unit.PERCENTAGE);
      LoginDialog.this.passwordField=passwordField;
      passwordField.setWidth(100,Unit.PERCENTAGE);
      passwordField.setNullRepresentation(""String_Node_Str"");
      layout.addComponent(userNameField);
      layout.addComponent(passwordField);
      validatePasswordField=new PasswordField(""String_Node_Str"");
      validatePasswordField.setWidth(100,Unit.PERCENTAGE);
      validatePasswordField.setNullRepresentation(""String_Node_Str"");
      validatePasswordField.setVisible(false);
      layout.addComponent(validatePasswordField);
      HorizontalLayout buttonLayout=new HorizontalLayout();
      loginButton.setStyleName(ValoTheme.BUTTON_PRIMARY);
      LoginDialog.this.loginButton=loginButton;
      buttonLayout.addComponent(loginButton);
      buttonLayout.setWidth(100,Unit.PERCENTAGE);
      layout.addComponent(buttonLayout);
      buttonLayout.addComponent(loginButton);
      buttonLayout.setComponentAlignment(loginButton,Alignment.BOTTOM_RIGHT);
      userNameField.focus();
      return layout;
    }
  }
;
  loginForm.addLoginListener((e) -> login((String)userNameField.getValue(),(String)passwordField.getValue()));
  loginForm.setWidth(300,Unit.PIXELS);
  setContent(loginForm);
}",0.9995095635115252
167281,"@Override public void selected(){
  if (grid != null) {
    removeComponent(grid);
  }
  grid=new Grid();
  BeanContainer<AuditEvent,AuditEvent> container=new BeanContainer<>(AuditEvent.class);
  grid.setContainerDataSource(container);
  grid.setColumnOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.setSizeFull();
  List<AuditEvent> list=context.getOperationsSerivce().findAuditEvents(-1);
  for (  AuditEvent event : list) {
    container.addItem(event,event);
  }
  addComponent(grid);
  setExpandRatio(grid,1);
}","@Override public void selected(){
  if (grid != null) {
    removeComponent(grid);
  }
  grid=new Grid();
  BeanContainer<AuditEvent,AuditEvent> container=new BeanContainer<>(AuditEvent.class);
  grid.setContainerDataSource(container);
  grid.setColumnOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.getColumn(""String_Node_Str"").setHeaderCaption(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.removeColumn(""String_Node_Str"");
  grid.setSizeFull();
  List<AuditEvent> list=context.getOperationsService().findAuditEvents(-1);
  for (  AuditEvent event : list) {
    container.addItem(event,event);
  }
  addComponent(grid);
  setExpandRatio(grid,1);
}",0.9978586723768736
167282,"private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsSerivce().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}","private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsService().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}",0.9966329966329966
167283,"public void buttonClick(ClickEvent event){
  List<User> users=new ArrayList<User>();
  for (  Group group : getSelectedItems()) {
    users.addAll(context.getOperationsSerivce().findUsersByGroup(group.getId()));
    if (users.size() > 10) {
      break;
    }
  }
  if (users.size() == 0) {
    for (    Group group : getSelectedItems()) {
      context.getConfigurationService().delete(group);
      container.removeItem(group);
    }
  }
 else {
    String message=""String_Node_Str"" + users.size() + ""String_Node_Str""+ ""String_Node_Str"";
    if (users.size() < 10) {
      message+=users.toString();
    }
    Notification note=new Notification(""String_Node_Str"",message);
    note.show(Page.getCurrent());
  }
  table.setValue(null);
  setButtonsEnabled();
}","public void buttonClick(ClickEvent event){
  List<User> users=new ArrayList<User>();
  for (  Group group : getSelectedItems()) {
    users.addAll(context.getOperationsService().findUsersByGroup(group.getId()));
    if (users.size() > 10) {
      break;
    }
  }
  if (users.size() == 0) {
    for (    Group group : getSelectedItems()) {
      context.getConfigurationService().delete(group);
      container.removeItem(group);
    }
  }
 else {
    String message=""String_Node_Str"" + users.size() + ""String_Node_Str""+ ""String_Node_Str"";
    if (users.size() < 10) {
      message+=users.toString();
    }
    Notification note=new Notification(""String_Node_Str"",message);
    note.show(Page.getCurrent());
  }
  table.setValue(null);
  setButtonsEnabled();
}",0.9986859395532196
167284,"public void refresh(){
  container.removeAllItems();
  container.addAll(context.getOperationsSerivce().findGroups());
  table.sort();
  setButtonsEnabled();
}","public void refresh(){
  container.removeAllItems();
  container.addAll(context.getOperationsService().findGroups());
  table.sort();
  setButtonsEnabled();
}",0.9936708860759492
167285,"@Override public boolean closing(){
  if (isChanged) {
    for (    Agent agent : context.getOperationsSerivce().findAgents()) {
      if (!agent.isDeleted() && agent.getStatus().equals(AgentStatus.RUNNING.name())) {
        agent.setStatus(AgentStatus.REQUEST_REFRESH.name());
        context.getConfigurationService().save(agent);
      }
    }
  }
  return true;
}","@Override public boolean closing(){
  if (isChanged) {
    for (    Agent agent : context.getOperationsService().findAgents()) {
      if (!agent.isDeleted() && agent.getStatus().equals(AgentStatus.RUNNING.name())) {
        agent.setStatus(AgentStatus.REQUEST_REFRESH.name());
        context.getConfigurationService().save(agent);
      }
    }
  }
  return true;
}",0.997275204359673
167286,"private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsSerivce().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}","private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsService().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}",0.9966329966329966
167287,"@Override public boolean closing(){
  if (isChanged) {
    for (    Agent agent : context.getOperationsSerivce().findAgents()) {
      if (!agent.isDeleted() && agent.getStatus().equals(AgentStatus.RUNNING.name())) {
        agent.setStatus(AgentStatus.REQUEST_REFRESH.name());
        context.getConfigurationService().save(agent);
      }
    }
  }
  return true;
}","@Override public boolean closing(){
  if (isChanged) {
    for (    Agent agent : context.getOperationsService().findAgents()) {
      if (!agent.isDeleted() && agent.getStatus().equals(AgentStatus.RUNNING.name())) {
        agent.setStatus(AgentStatus.REQUEST_REFRESH.name());
        context.getConfigurationService().save(agent);
      }
    }
  }
  return true;
}",0.997275204359673
167288,"private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsSerivce().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}","private GlobalSetting getGlobalSetting(String name,String defaultValue){
  GlobalSetting setting=context.getOperationsService().findGlobalSetting(name);
  if (setting == null) {
    setting=new GlobalSetting();
    setting.setName(name);
    setting.setValue(defaultValue);
  }
  return setting;
}",0.9966329966329966
167289,"public void buttonClick(ClickEvent event){
  MailSession mailSession=new MailSession(context.getOperationsSerivce().findGlobalSettingsAsMap());
  try {
    mailSession.getTransport();
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  AuthenticationFailedException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
catch (  MessagingException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
 finally {
    mailSession.closeTransport();
  }
}","public void buttonClick(ClickEvent event){
  MailSession mailSession=new MailSession(context.getOperationsService().findGlobalSettingsAsMap());
  try {
    mailSession.getTransport();
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  AuthenticationFailedException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
catch (  MessagingException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
 finally {
    mailSession.closeTransport();
  }
}",0.998473282442748
167290,"private void updateLinks(){
  String level=(String)levelField.getValue();
  linkField.removeAllItems();
  if (level.equals(Notification.NotificationLevel.GLOBAL.toString())) {
    linkField.setEnabled(false);
  }
 else   if (level.equals(Notification.NotificationLevel.AGENT.toString())) {
    linkField.setEnabled(true);
    for (    Agent agent : context.getOperationsSerivce().findAgents()) {
      if (agent.isDeleted()) {
        linkField.addItem(agent.getId());
        linkField.setItemCaption(agent.getId(),agent.getName());
      }
    }
  }
 else   if (level.equals(Notification.NotificationLevel.DEPLOYMENT.toString())) {
    linkField.setEnabled(true);
    List<Agent> agents=context.getOperationsSerivce().findAgents();
    for (    Agent agent : agents) {
      if (!agent.isDeleted()) {
        agent=context.getOperationsSerivce().findAgent(agent.getId(),true);
        for (        AgentDeploy deployment : agent.getAgentDeployments()) {
          linkField.addItem(deployment.getId());
          linkField.setItemCaption(deployment.getId(),agent.getName() + ""String_Node_Str"" + deployment.getName());
        }
      }
    }
  }
}","private void updateLinks(){
  String level=(String)levelField.getValue();
  linkField.removeAllItems();
  if (level.equals(Notification.NotificationLevel.GLOBAL.toString())) {
    linkField.setEnabled(false);
  }
 else   if (level.equals(Notification.NotificationLevel.AGENT.toString())) {
    linkField.setEnabled(true);
    for (    Agent agent : context.getOperationsService().findAgents()) {
      if (agent.isDeleted()) {
        linkField.addItem(agent.getId());
        linkField.setItemCaption(agent.getId(),agent.getName());
      }
    }
  }
 else   if (level.equals(Notification.NotificationLevel.DEPLOYMENT.toString())) {
    linkField.setEnabled(true);
    List<Agent> agents=context.getOperationsService().findAgents();
    for (    Agent agent : agents) {
      if (!agent.isDeleted()) {
        agent=context.getOperationsService().findAgent(agent.getId(),true);
        for (        AgentDeploy deployment : agent.getAgentDeployments()) {
          linkField.addItem(deployment.getId());
          linkField.setItemCaption(deployment.getId(),agent.getName() + ""String_Node_Str"" + deployment.getName());
        }
      }
    }
  }
}",0.9947780678851176
167291,"@Override public boolean closing(){
  if (isChanged) {
    String level=notification.getNotificationLevel();
    if (level.equals(Notification.NotificationLevel.GLOBAL.toString())) {
      for (      Agent agent : context.getOperationsSerivce().findAgents()) {
        refreshAgent(agent);
      }
    }
 else     if (level.equals(Notification.NotificationLevel.AGENT.toString()) && notification.getLinkId() != null) {
      refreshAgent(context.getOperationsSerivce().findAgent(notification.getLinkId(),false));
    }
 else     if (level.equals(Notification.NotificationLevel.DEPLOYMENT.toString()) && notification.getLinkId() != null) {
      AgentDeploy deployment=context.getOperationsSerivce().findAgentDeployment(notification.getLinkId());
      if (deployment != null) {
        refreshAgent(context.getOperationsSerivce().findAgent(deployment.getAgentId(),false));
      }
    }
  }
  return true;
}","@Override public boolean closing(){
  if (isChanged) {
    String level=notification.getNotificationLevel();
    if (level.equals(Notification.NotificationLevel.GLOBAL.toString())) {
      for (      Agent agent : context.getOperationsService().findAgents()) {
        refreshAgent(agent);
      }
    }
 else     if (level.equals(Notification.NotificationLevel.AGENT.toString()) && notification.getLinkId() != null) {
      refreshAgent(context.getOperationsService().findAgent(notification.getLinkId(),false));
    }
 else     if (level.equals(Notification.NotificationLevel.DEPLOYMENT.toString()) && notification.getLinkId() != null) {
      AgentDeploy deployment=context.getOperationsService().findAgentDeployment(notification.getLinkId());
      if (deployment != null) {
        refreshAgent(context.getOperationsService().findAgent(deployment.getAgentId(),false));
      }
    }
  }
  return true;
}",0.9911797133406836
167292,"public void refresh(){
  container.removeAllItems();
  if (StringUtils.isEmpty(filterField.getValue())) {
    container.addAll(context.getOperationsSerivce().findNotifications());
  }
 else {
    String filter=filterField.getValue().toUpperCase();
    for (    Notification notification : context.getOperationsSerivce().findNotifications()) {
      if (notification.getNotificationLevel().indexOf(filter) != -1 || notification.getName().indexOf(filter) != -1 || notification.getEventType().indexOf(filter) != -1) {
        container.addItem(notification);
      }
    }
  }
  table.sort();
  setButtonsEnabled();
}","public void refresh(){
  container.removeAllItems();
  if (StringUtils.isEmpty(filterField.getValue())) {
    container.addAll(context.getOperationsService().findNotifications());
  }
 else {
    String filter=filterField.getValue().toUpperCase();
    for (    Notification notification : context.getOperationsService().findNotifications()) {
      if (notification.getNotificationLevel().indexOf(filter) != -1 || notification.getName().indexOf(filter) != -1 || notification.getEventType().indexOf(filter) != -1) {
        container.addItem(notification);
      }
    }
  }
  table.sort();
  setButtonsEnabled();
}",0.996742671009772
167293,"@SuppressWarnings(""String_Node_Str"") public UserEditPanel(ApplicationContext context,User user){
  this.context=context;
  this.user=user;
  FormLayout form=new FormLayout();
  form.setSpacing(true);
  NativeSelect authField=new NativeSelect(""String_Node_Str"");
  authField.setWidth(16,Unit.EM);
  authField.setHeight(2.15f,Unit.EM);
  authField.setNullSelectionAllowed(false);
  authField.setValidationVisible(false);
  authField.setInvalidAllowed(false);
  authField.addItem(User.AUTH_METHOD_INTERNAL);
  authField.addItem(User.AUTH_METHOD_LDAP);
  if (StringUtils.isNotBlank(user.getAuthMethod())) {
    authField.addItem(user.getAuthMethod());
    authField.setValue(user.getAuthMethod());
  }
  authField.setImmediate(true);
  authField.setRequired(true);
  authField.setRequiredError(""String_Node_Str"");
  form.addComponent(authField);
  TextField loginField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(user.getLoginId()));
  form.addComponent(loginField);
  loginField.addValueChangeListener(new LoginChangeListener());
  loginField.focus();
  TextField nameField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(user.getName()));
  nameField.addValueChangeListener(new NameChangeListener());
  form.addComponent(nameField);
  PasswordField passwordField=new PasswordField(""String_Node_Str"",NOCHANGE);
  passwordField.addValueChangeListener(new PasswordChangeListener());
  form.addComponent(passwordField);
  if (User.AUTH_METHOD_INTERNAL.equals(authField.getValue())) {
    passwordField.setVisible(true);
    passwordField.setRequired(true);
  }
 else {
    passwordField.setVisible(false);
    passwordField.setRequired(false);
  }
  authField.addListener(new Property.ValueChangeListener(){
    private static final long serialVersionUID=1L;
    public void valueChange(    ValueChangeEvent event){
      boolean requirePassword=event.getProperty().getValue().equals(User.AUTH_METHOD_INTERNAL);
      passwordField.setVisible(requirePassword);
      passwordField.setRequired(requirePassword);
      user.setAuthMethod((String)event.getProperty().getValue());
      save(user);
    }
  }
);
  List<Group> groups=context.getOperationsSerivce().findGroups();
  groupsById=new HashMap<String,Group>();
  TwinColSelect groupSelect=new TwinColSelect();
  for (  Group group : groups) {
    groupSelect.addItem(group.getId());
    groupSelect.setItemCaption(group.getId(),group.getName());
    groupsById.put(group.getId(),group);
  }
  lastGroups=new HashSet<String>();
  for (  Group group : user.getGroups()) {
    lastGroups.add(group.getId());
  }
  groupSelect.setValue(lastGroups);
  groupSelect.setRows(20);
  groupSelect.setNullSelectionAllowed(true);
  groupSelect.setMultiSelect(true);
  groupSelect.setImmediate(true);
  groupSelect.setLeftColumnCaption(""String_Node_Str"");
  groupSelect.setRightColumnCaption(""String_Node_Str"");
  groupSelect.addValueChangeListener(new GroupChangeListener());
  form.addComponent(groupSelect);
  addComponent(form);
  setMargin(true);
}","@SuppressWarnings(""String_Node_Str"") public UserEditPanel(ApplicationContext context,User user){
  this.context=context;
  this.user=user;
  FormLayout form=new FormLayout();
  form.setSpacing(true);
  NativeSelect authField=new NativeSelect(""String_Node_Str"");
  authField.setWidth(16,Unit.EM);
  authField.setHeight(2.15f,Unit.EM);
  authField.setNullSelectionAllowed(false);
  authField.setValidationVisible(false);
  authField.setInvalidAllowed(false);
  authField.addItem(User.AUTH_METHOD_INTERNAL);
  authField.addItem(User.AUTH_METHOD_LDAP);
  if (StringUtils.isNotBlank(user.getAuthMethod())) {
    authField.addItem(user.getAuthMethod());
    authField.setValue(user.getAuthMethod());
  }
  authField.setImmediate(true);
  authField.setRequired(true);
  authField.setRequiredError(""String_Node_Str"");
  form.addComponent(authField);
  TextField loginField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(user.getLoginId()));
  form.addComponent(loginField);
  loginField.addValueChangeListener(new LoginChangeListener());
  loginField.focus();
  TextField nameField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(user.getName()));
  nameField.addValueChangeListener(new NameChangeListener());
  form.addComponent(nameField);
  PasswordField passwordField=new PasswordField(""String_Node_Str"",NOCHANGE);
  passwordField.addValueChangeListener(new PasswordChangeListener());
  form.addComponent(passwordField);
  if (User.AUTH_METHOD_INTERNAL.equals(authField.getValue())) {
    passwordField.setVisible(true);
    passwordField.setRequired(true);
  }
 else {
    passwordField.setVisible(false);
    passwordField.setRequired(false);
  }
  authField.addListener(new Property.ValueChangeListener(){
    private static final long serialVersionUID=1L;
    public void valueChange(    ValueChangeEvent event){
      boolean requirePassword=event.getProperty().getValue().equals(User.AUTH_METHOD_INTERNAL);
      passwordField.setVisible(requirePassword);
      passwordField.setRequired(requirePassword);
      user.setAuthMethod((String)event.getProperty().getValue());
      save(user);
    }
  }
);
  List<Group> groups=context.getOperationsService().findGroups();
  groupsById=new HashMap<String,Group>();
  TwinColSelect groupSelect=new TwinColSelect();
  for (  Group group : groups) {
    groupSelect.addItem(group.getId());
    groupSelect.setItemCaption(group.getId(),group.getName());
    groupsById.put(group.getId(),group);
  }
  lastGroups=new HashSet<String>();
  for (  Group group : user.getGroups()) {
    lastGroups.add(group.getId());
  }
  groupSelect.setValue(lastGroups);
  groupSelect.setRows(20);
  groupSelect.setNullSelectionAllowed(true);
  groupSelect.setMultiSelect(true);
  groupSelect.setImmediate(true);
  groupSelect.setLeftColumnCaption(""String_Node_Str"");
  groupSelect.setRightColumnCaption(""String_Node_Str"");
  groupSelect.addValueChangeListener(new GroupChangeListener());
  form.addComponent(groupSelect);
  addComponent(form);
  setMargin(true);
}",0.9996675531914894
167294,"@SuppressWarnings(""String_Node_Str"") public void valueChange(ValueChangeEvent event){
  Set<String> groups=(Set<String>)event.getProperty().getValue();
  IOperationsService operationsSerivce=context.getOperationsSerivce();
  for (  String id : groups) {
    if (!lastGroups.contains(id)) {
      UserGroup userGroup=new UserGroup(user.getId(),id);
      user.getGroups().add(groupsById.get(id));
      if (operationsSerivce.findUser(user.getId()) != null) {
        context.getConfigurationService().save(userGroup);
      }
    }
  }
  for (  String id : lastGroups) {
    if (!groups.contains(id)) {
      user.getGroups().remove(groupsById.get(id));
      if (operationsSerivce.findUser(user.getId()) != null) {
        context.getConfigurationService().delete(new UserGroup(user.getId(),id));
      }
    }
  }
  lastGroups=new HashSet<String>(groups);
}","@SuppressWarnings(""String_Node_Str"") public void valueChange(ValueChangeEvent event){
  Set<String> groups=(Set<String>)event.getProperty().getValue();
  IOperationsService operationsSerivce=context.getOperationsService();
  for (  String id : groups) {
    if (!lastGroups.contains(id)) {
      UserGroup userGroup=new UserGroup(user.getId(),id);
      user.getGroups().add(groupsById.get(id));
      if (operationsSerivce.findUser(user.getId()) != null) {
        context.getConfigurationService().save(userGroup);
      }
    }
  }
  for (  String id : lastGroups) {
    if (!groups.contains(id)) {
      user.getGroups().remove(groupsById.get(id));
      if (operationsSerivce.findUser(user.getId()) != null) {
        context.getConfigurationService().delete(new UserGroup(user.getId(),id));
      }
    }
  }
  lastGroups=new HashSet<String>(groups);
}",0.9976689976689976
167295,"public void buttonClick(ClickEvent event){
  for (  User user : getSelectedItems()) {
    context.getOperationsSerivce().delete(user);
    container.removeItem(user);
  }
  table.setValue(null);
  setButtonsEnabled();
}","public void buttonClick(ClickEvent event){
  for (  User user : getSelectedItems()) {
    context.getOperationsService().delete(user);
    container.removeItem(user);
  }
  table.setValue(null);
  setButtonsEnabled();
}",0.9908675799086758
167296,"public void refresh(){
  container.removeAllItems();
  container.addAll(context.getOperationsSerivce().findUsers());
  table.sort();
  setButtonsEnabled();
}","public void refresh(){
  container.removeAllItems();
  container.addAll(context.getOperationsService().findUsers());
  table.sort();
  setButtonsEnabled();
}",0.9936305732484076
167297,"public DeployDialog(ApplicationContext context,EditAgentPanel parentPanel){
  super(""String_Node_Str"");
  this.context=context;
  this.configurationService=context.getConfigurationService();
  this.operationsService=context.getOperationsSerivce();
  this.parentPanel=parentPanel;
  this.context=context;
  final float DESIRED_WIDTH=1000;
  float width=DESIRED_WIDTH;
  float maxWidth=(float)(Page.getCurrent().getBrowserWindowWidth() * .8);
  if (maxWidth < DESIRED_WIDTH) {
    width=maxWidth;
  }
  setWidth(width,Unit.PIXELS);
  setHeight(600.0f,Unit.PIXELS);
  VerticalLayout layout=new VerticalLayout();
  layout.setMargin(true);
  layout.setSizeFull();
  addComponent(layout,1);
  deployByOptionGroup=new OptionGroup(""String_Node_Str"");
  deployByOptionGroup.addStyleName(ValoTheme.OPTIONGROUP_HORIZONTAL);
  deployByOptionGroup.addItem(DEPLOY_BY_PACKAGE);
  deployByOptionGroup.addItem(DEPLOY_BY_FLOW);
  layout.addComponent(deployByOptionGroup);
  selectDeploymentLayout=new VerticalLayout();
  selectDeploymentLayout.setSizeFull();
  selectDeploymentLayout.setMargin(new MarginInfo(true,false));
  layout.addComponent(selectDeploymentLayout);
  layout.setExpandRatio(selectDeploymentLayout,1);
  backButton=new Button(""String_Node_Str"",e -> back());
  actionButton=new Button(""String_Node_Str"",e -> takeAction());
  actionButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
  actionButton.setClickShortcut(KeyCode.ENTER);
  addComponent(buildButtonFooter(backButton,actionButton));
  deployByOptionGroup.addValueChangeListener(e -> deployByChanged());
  deployByOptionGroup.setValue(DEPLOY_BY_PACKAGE);
}","public DeployDialog(ApplicationContext context,EditAgentPanel parentPanel){
  super(""String_Node_Str"");
  this.context=context;
  this.configurationService=context.getConfigurationService();
  this.operationsService=context.getOperationsService();
  this.parentPanel=parentPanel;
  this.context=context;
  final float DESIRED_WIDTH=1000;
  float width=DESIRED_WIDTH;
  float maxWidth=(float)(Page.getCurrent().getBrowserWindowWidth() * .8);
  if (maxWidth < DESIRED_WIDTH) {
    width=maxWidth;
  }
  setWidth(width,Unit.PIXELS);
  setHeight(600.0f,Unit.PIXELS);
  VerticalLayout layout=new VerticalLayout();
  layout.setMargin(true);
  layout.setSizeFull();
  addComponent(layout,1);
  deployByOptionGroup=new OptionGroup(""String_Node_Str"");
  deployByOptionGroup.addStyleName(ValoTheme.OPTIONGROUP_HORIZONTAL);
  deployByOptionGroup.addItem(DEPLOY_BY_PACKAGE);
  deployByOptionGroup.addItem(DEPLOY_BY_FLOW);
  layout.addComponent(deployByOptionGroup);
  selectDeploymentLayout=new VerticalLayout();
  selectDeploymentLayout.setSizeFull();
  selectDeploymentLayout.setMargin(new MarginInfo(true,false));
  layout.addComponent(selectDeploymentLayout);
  layout.setExpandRatio(selectDeploymentLayout,1);
  backButton=new Button(""String_Node_Str"",e -> back());
  actionButton=new Button(""String_Node_Str"",e -> takeAction());
  actionButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
  actionButton.setClickShortcut(KeyCode.ENTER);
  addComponent(buildButtonFooter(backButton,actionButton));
  deployByOptionGroup.addValueChangeListener(e -> deployByChanged());
  deployByOptionGroup.setValue(DEPLOY_BY_PACKAGE);
}",0.9993781094527364
167298,"protected void deleteTreeItems(AbstractObject obj){
  if (obj instanceof AgentName) {
    AgentName agentName=(AgentName)obj;
    ConfirmDialog.show(""String_Node_Str"",""String_Node_Str"" + agentName.getName() + ""String_Node_Str"",() -> {
      Agent agent=context.getOperationsSerivce().findAgent(agentName.getId(),false);
      context.getConfigurationService().delete(agent);
      context.getAgentManager().refresh(agent);
      refresh();
      return true;
    }
);
  }
}","protected void deleteTreeItems(AbstractObject obj){
  if (obj instanceof AgentName) {
    AgentName agentName=(AgentName)obj;
    ConfirmDialog.show(""String_Node_Str"",""String_Node_Str"" + agentName.getName() + ""String_Node_Str"",() -> {
      Agent agent=context.getOperationsService().findAgent(agentName.getId(),false);
      context.getConfigurationService().delete(agent);
      context.getAgentManager().refresh(agent);
      refresh();
      return true;
    }
);
  }
}",0.9978858350951374
167299,"protected void addChildren(Folder folder){
  if (folder.getParent() != null) {
    treeTable.setChildrenAllowed(folder.getParent(),true);
  }
  treeTable.addItem(folder);
  treeTable.setItemIcon(folder,FontAwesome.FOLDER);
  treeTable.setCollapsed(folder,true);
  treeTable.setChildrenAllowed(folder,false);
  if (folder.getParent() != null) {
    treeTable.setParent(folder,folder.getParent());
  }
  List<Folder> children=folder.getChildren();
  for (  Folder child : children) {
    addChildren(child);
  }
  List<AgentName> agents=context.getOperationsSerivce().findAgentsInFolder(folder);
  for (  AgentName agent : agents) {
    addAgent(folder,agent);
  }
}","protected void addChildren(Folder folder){
  if (folder.getParent() != null) {
    treeTable.setChildrenAllowed(folder.getParent(),true);
  }
  treeTable.addItem(folder);
  treeTable.setItemIcon(folder,FontAwesome.FOLDER);
  treeTable.setCollapsed(folder,true);
  treeTable.setChildrenAllowed(folder,false);
  if (folder.getParent() != null) {
    treeTable.setParent(folder,folder.getParent());
  }
  List<Folder> children=folder.getChildren();
  for (  Folder child : children) {
    addChildren(child);
  }
  List<AgentName> agents=context.getOperationsService().findAgentsInFolder(folder);
  for (  AgentName agent : agents) {
    addAgent(folder,agent);
  }
}",0.9984939759036144
167300,"protected void openItem(Object item){
  if (item instanceof AgentName) {
    AgentName agentName=(AgentName)item;
    Agent agent=context.getOperationsSerivce().findAgent(agentName.getId(),true);
    tabbedPanel.addCloseableTab(agent.getId(),agent.getName(),Icons.AGENT,new EditAgentPanel(context,tabbedPanel,agent));
  }
}","protected void openItem(Object item){
  if (item instanceof AgentName) {
    AgentName agentName=(AgentName)item;
    Agent agent=context.getOperationsService().findAgent(agentName.getId(),true);
    tabbedPanel.addCloseableTab(agent.getId(),agent.getName(),Icons.AGENT,new EditAgentPanel(context,tabbedPanel,agent));
  }
}",0.9969040247678018
167301,"public void refresh(){
  Object selected=treeTable.getValue();
  List<Object> expandedItems=new ArrayList<Object>();
  Collection<?> items=treeTable.getItemIds();
  for (  Object object : items) {
    if (!treeTable.isCollapsed(object)) {
      expandedItems.add(object);
    }
  }
  treeTable.removeAllItems();
  List<Folder> folders=context.getConfigurationService().findFolders(null,FolderType.AGENT);
  for (  Folder folder : folders) {
    addChildren(folder);
  }
  List<AgentName> agents=context.getOperationsSerivce().findAgentsInFolder(null);
  for (  AgentName agent : agents) {
    addAgent(null,agent);
  }
  for (  Object object : expandedItems) {
    treeTable.setCollapsed(object,false);
  }
  treeTable.focus();
  if (treeTable.containsId(selected)) {
    treeTable.setValue(selected);
  }
 else {
    if (treeTable.getItemIds().size() > 0) {
      treeTable.setValue(treeTable.getItemIds().iterator().next());
    }
  }
  treeTable.focus();
}","public void refresh(){
  Object selected=treeTable.getValue();
  List<Object> expandedItems=new ArrayList<Object>();
  Collection<?> items=treeTable.getItemIds();
  for (  Object object : items) {
    if (!treeTable.isCollapsed(object)) {
      expandedItems.add(object);
    }
  }
  treeTable.removeAllItems();
  List<Folder> folders=context.getConfigurationService().findFolders(null,FolderType.AGENT);
  for (  Folder folder : folders) {
    addChildren(folder);
  }
  List<AgentName> agents=context.getOperationsService().findAgentsInFolder(null);
  for (  AgentName agent : agents) {
    addAgent(null,agent);
  }
  for (  Object object : expandedItems) {
    treeTable.setCollapsed(object,false);
  }
  treeTable.focus();
  if (treeTable.containsId(selected)) {
    treeTable.setValue(selected);
  }
 else {
    if (treeTable.getItemIds().size() > 0) {
      treeTable.setValue(treeTable.getItemIds().iterator().next());
    }
  }
  treeTable.focus();
}",0.9989572471324296
167302,"@SuppressWarnings(""String_Node_Str"") protected EntityData processEntity(EntityData inData,Message inputMessage,Model inputModel,ArrayList<EntityData> outDatas,boolean isRoot){
  EntityData outData=new EntityData();
  outData.setChangeType(inData.getChangeType());
  if (isRoot) {
    outDatas.add(outData);
  }
  Set<String> attributeIds=new HashSet<String>();
  attributeIds.addAll(inData.keySet());
  attributeIds.addAll(CollectionUtils.intersection(getAllAttributesForIncludedEntities(inData),transformsByAttributeId.keySet()));
  for (  String attributeId : attributeIds) {
    processAttribute(attributeId,inData,outData,inputMessage,inputModel,outDatas);
  }
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
  return outData;
}","@SuppressWarnings(""String_Node_Str"") protected EntityData processEntity(EntityData inData,Message inputMessage,Model inputModel,boolean isRoot){
  EntityData outData=new EntityData();
  outData.setChangeType(inData.getChangeType());
  Set<String> attributeIds=new HashSet<String>();
  attributeIds.addAll(inData.keySet());
  attributeIds.addAll(CollectionUtils.intersection(getAllAttributesForIncludedEntities(inData),transformsByAttributeId.keySet()));
  for (  String attributeId : attributeIds) {
    processAttribute(attributeId,inData,outData,inputMessage,inputModel);
  }
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
  return outData;
}",0.3577917540181691
167303,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (scriptEngine == null) {
    scriptEngine=new GroovyScriptEngineImpl();
  }
  totalTime=0;
  if (inputMessage instanceof EntityDataMessage) {
    Model inputModel=getComponent().getInputModel();
    List<EntityData> inDatas=((EntityDataMessage)inputMessage).getPayload();
    ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas != null ? inDatas.size() : 0);
    if (inDatas != null) {
      for (      EntityData inData : inDatas) {
        processEntity(inData,inputMessage,inputModel,outDatas,true);
      }
    }
    callback.sendEntityDataMessage(null,outDatas);
    if (totalCalls > 0) {
      log.debug(""String_Node_Str"" + (totalTime / totalCalls) + ""String_Node_Str"");
    }
  }
 else   if (inputMessage instanceof ControlMessage && properties.is(PASS_ALONG_CONTROL_MESSAGES,false)) {
    callback.sendControlMessage();
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (scriptEngine == null) {
    scriptEngine=new GroovyScriptEngineImpl();
  }
  totalTime=0;
  if (inputMessage instanceof EntityDataMessage) {
    Model inputModel=getComponent().getInputModel();
    List<EntityData> inDatas=((EntityDataMessage)inputMessage).getPayload();
    ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas != null ? inDatas.size() : 0);
    if (inDatas != null) {
      for (      EntityData inData : inDatas) {
        outDatas.add(processEntity(inData,inputMessage,inputModel,true));
      }
    }
    callback.sendEntityDataMessage(null,outDatas);
    if (totalCalls > 0) {
      log.debug(""String_Node_Str"" + (totalTime / totalCalls) + ""String_Node_Str"");
    }
  }
 else   if (inputMessage instanceof ControlMessage && properties.is(PASS_ALONG_CONTROL_MESSAGES,false)) {
    callback.sendControlMessage();
  }
}",0.9840123775141826
167304,"protected void processAttribute(String attributeId,EntityData inData,EntityData outData,Message inputMessage,Model inputModel,ArrayList<EntityData> outDatas){
  String transform=transformsByAttributeId.get(attributeId);
  Object value=inData.get(attributeId);
  ModelAttrib attribute=inputModel.getAttributeById(attributeId);
  if (attribute.getDataType().equals(DataType.ARRAY) || attribute.getDataType().equals(DataType.REF)) {
    outData.put(attributeId,processEntity((EntityData)value,inputMessage,inputModel,outDatas,false));
  }
 else {
    if (isNotBlank(transform)) {
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      ModelAttributeScriptHelper helper=helpers.get(attribute.getId());
      if (helper == null) {
        long ts=System.currentTimeMillis();
        scriptEngine.put(""String_Node_Str"",entity);
        scriptEngine.put(""String_Node_Str"",attribute);
        scriptEngine.put(""String_Node_Str"",context);
        scriptEngine.put(""String_Node_Str"",getInputModel());
        try {
          String importString=""String_Node_Str"";
          String code=String.format(""String_Node_Str"",transform);
          helper=(ModelAttributeScriptHelper)scriptEngine.eval(importString + code);
          helpers.put(attribute.getId(),helper);
        }
 catch (        ScriptException e) {
          throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ (value == null ? ""String_Node_Str"" : value.toString())+ ""String_Node_Str""+ e.getCause().getMessage(),e);
        }
        log.debug(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
      }
      helper.setData(inData);
      helper.setValue(value);
      helper.setMessage(inputMessage);
      long ts=System.currentTimeMillis();
      try {
        value=helper.eval();
      }
 catch (      Exception e) {
        throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ (value == null ? ""String_Node_Str"" : value.toString())+ ""String_Node_Str""+ getComponent().toRow(inData,false,false),e);
      }
      totalTime+=(System.currentTimeMillis() - ts);
      totalCalls++;
    }
    if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
      outData.put(attributeId,value);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") protected void processAttribute(String attributeId,EntityData inData,EntityData outData,Message inputMessage,Model inputModel){
  String transform=transformsByAttributeId.get(attributeId);
  Object value=inData.get(attributeId);
  ModelAttrib attribute=inputModel.getAttributeById(attributeId);
  if (value == null) {
    outData.put(attributeId,null);
  }
 else {
    if (attribute.getDataType().equals(DataType.ARRAY)) {
      outData.put(attributeId,processEntityArray((ArrayList<EntityData>)value,inputMessage,inputModel,false));
    }
 else     if (attribute.getDataType().equals(DataType.REF)) {
      outData.put(attributeId,processEntity((EntityData)value,inputMessage,inputModel,false));
    }
 else {
      if (isNotBlank(transform)) {
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        ModelAttributeScriptHelper helper=helpers.get(attribute.getId());
        if (helper == null) {
          long ts=System.currentTimeMillis();
          scriptEngine.put(""String_Node_Str"",entity);
          scriptEngine.put(""String_Node_Str"",attribute);
          scriptEngine.put(""String_Node_Str"",context);
          scriptEngine.put(""String_Node_Str"",getInputModel());
          try {
            String importString=""String_Node_Str"";
            String code=String.format(""String_Node_Str"",transform);
            helper=(ModelAttributeScriptHelper)scriptEngine.eval(importString + code);
            helpers.put(attribute.getId(),helper);
          }
 catch (          ScriptException e) {
            throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ (value == null ? ""String_Node_Str"" : value.toString())+ ""String_Node_Str""+ e.getCause().getMessage(),e);
          }
          log.debug(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
        }
        helper.setData(inData);
        helper.setValue(value);
        helper.setMessage(inputMessage);
        long ts=System.currentTimeMillis();
        try {
          value=helper.eval();
        }
 catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ (value == null ? ""String_Node_Str"" : value.toString())+ ""String_Node_Str""+ getComponent().toRow(inData,false,false),e);
        }
        totalTime+=(System.currentTimeMillis() - ts);
        totalCalls++;
      }
      if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
        outData.put(attributeId,value);
      }
    }
  }
}",0.923490488006617
167305,"public List<Execution> findExecutions(Map<String,Object> params,int limit){
  ISqlTemplate template=databasePlatform.getSqlTemplate();
  StringBuilder whereClause=new StringBuilder();
  int i=params.size();
  for (  String columnName : params.keySet()) {
    whereClause.append(StringUtils.join(StringUtils.splitByCharacterTypeCamelCase(columnName),""String_Node_Str"")).append(""String_Node_Str"");
    if (--i > 0) {
      whereClause.append(""String_Node_Str"");
    }
  }
  return template.query(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + whereClause + ""String_Node_Str""+ limit,tablePrefix),new ISqlRowMapper<Execution>(){
    public Execution mapRow(    Row row){
      Execution e=new Execution();
      e.setId(row.getString(""String_Node_Str""));
      e.setAgentId(row.getString(""String_Node_Str""));
      e.setFlowId(row.getString(""String_Node_Str""));
      e.setAgentName(row.getString(""String_Node_Str""));
      e.setHostName(row.getString(""String_Node_Str""));
      e.setFlowName(row.getString(""String_Node_Str""));
      e.setDeploymentId(row.getString(""String_Node_Str""));
      e.setDeploymentName(row.getString(""String_Node_Str""));
      e.setStatus(row.getString(""String_Node_Str""));
      e.setStartTime(row.getDateTime(""String_Node_Str""));
      e.setEndTime(row.getDateTime(""String_Node_Str""));
      e.setCreateBy(row.getString(""String_Node_Str""));
      e.setLastUpdateBy(row.getString(""String_Node_Str""));
      e.setParameters(row.getString(""String_Node_Str""));
      return e;
    }
  }
,params.values().toArray());
}","public List<Execution> findExecutions(Map<String,Object> params,int limit){
  ISqlTemplate template=databasePlatform.getSqlTemplate();
  StringBuilder whereClause=new StringBuilder();
  int i=params.size();
  for (  String columnName : params.keySet()) {
    whereClause.append(StringUtils.join(StringUtils.splitByCharacterTypeCamelCase(columnName),""String_Node_Str"")).append(""String_Node_Str"");
    if (--i > 0) {
      whereClause.append(""String_Node_Str"");
    }
  }
  return template.query(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + whereClause + ""String_Node_Str"",tablePrefix),limit,new ISqlRowMapper<Execution>(){
    public Execution mapRow(    Row row){
      Execution e=new Execution();
      e.setId(row.getString(""String_Node_Str""));
      e.setAgentId(row.getString(""String_Node_Str""));
      e.setFlowId(row.getString(""String_Node_Str""));
      e.setAgentName(row.getString(""String_Node_Str""));
      e.setHostName(row.getString(""String_Node_Str""));
      e.setFlowName(row.getString(""String_Node_Str""));
      e.setDeploymentId(row.getString(""String_Node_Str""));
      e.setDeploymentName(row.getString(""String_Node_Str""));
      e.setStatus(row.getString(""String_Node_Str""));
      e.setStartTime(row.getDateTime(""String_Node_Str""));
      e.setEndTime(row.getDateTime(""String_Node_Str""));
      e.setCreateBy(row.getString(""String_Node_Str""));
      e.setLastUpdateBy(row.getString(""String_Node_Str""));
      e.setParameters(row.getString(""String_Node_Str""));
      return e;
    }
  }
,params.values().toArray());
}",0.9958951689295864
167306,"private void processTableDeletes(TableData deletes,ISqlTransaction transaction){
  if (deletes != null) {
    Table table=databasePlatform.getTableFromCache(null,null,deletes.getTableName(),false);
    DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.DELETE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
    Iterator<String> itr=deletes.getTableData().keySet().iterator();
    while (itr.hasNext()) {
      String key=itr.next();
      LinkedCaseInsensitiveMap<Object> row=deletes.getTableData().get(key);
      transaction.prepareAndExecute(stmt.getSql().toLowerCase(),row);
    }
  }
}","private void processTableDeletes(TableData deletes,ISqlTransaction transaction){
  if (deletes != null) {
    Table table=databasePlatform.getTableFromCache(null,null,deletes.getTableName(),false);
    DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.DELETE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
    Iterator<String> itr=deletes.getTableData().keySet().iterator();
    while (itr.hasNext()) {
      String key=itr.next();
      LinkedCaseInsensitiveMap<Object> row=deletes.getTableData().get(key);
      Map<String,Object> rowLower=new HashMap<String,Object>();
      for (      String k : row.keySet()) {
        rowLower.put(k.toLowerCase(),row.get(k));
      }
      transaction.prepareAndExecute(stmt.getSql().toLowerCase(),rowLower);
    }
  }
}",0.8878688524590164
167307,"private void importProjectConfiguration(String projectVersionId,ImportConfigData importData,ISqlTransaction transaction,String userId){
  List<TableData> existingProjectData=new ArrayList<TableData>();
  initConfigData(existingProjectData,PROJECT_SQL);
  ProjectVersionData data=importData.getProjectVersion(projectVersionId);
  Iterator<String> itr=data.getProjectData().get(PROJECT_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=data.getProjectData().get(PROJECT_IDX).getTableData().get(key);
    addConfigData(existingProjectData,PROJECT_SQL,projectVersionId,(String)row.get(PROJECT_SQL[PROJECT_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i <= PROJECT_SQL.length - 1; i++) {
    if (data.projectData.size() > i) {
      TableData importProjectData=data.projectData.get(i);
      try {
        processConfigTableData(importData,existingProjectData.get(i),importProjectData,PROJECT_SQL[i][KEY_COLUMNS],transaction,userId);
      }
 catch (      RuntimeException e) {
        if (importProjectData.getTableName().toLowerCase().endsWith(""String_Node_Str"")) {
          Collection<LinkedCaseInsensitiveMap<Object>> maps=importProjectData.getTableData().values();
          StringBuilder ids=new StringBuilder();
          for (          LinkedCaseInsensitiveMap<Object> linkedCaseInsensitiveMap : maps) {
            if (ids.length() > 0) {
              ids.append(""String_Node_Str"");
            }
            ids.append(linkedCaseInsensitiveMap.get(""String_Node_Str""));
          }
          throw new MessageException(String.format(""String_Node_Str"",ids));
        }
 else {
          throw e;
        }
      }
    }
  }
}","private void importProjectConfiguration(String projectVersionId,ImportConfigData importData,ISqlTransaction transaction,String userId){
  List<TableData> existingProjectData=new ArrayList<TableData>();
  initConfigData(existingProjectData,PROJECT_SQL);
  ProjectVersionData data=importData.getProjectVersion(projectVersionId);
  Iterator<String> itr=data.getProjectData().get(PROJECT_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=data.getProjectData().get(PROJECT_IDX).getTableData().get(key);
    addConfigData(existingProjectData,PROJECT_SQL,projectVersionId,(String)row.get(PROJECT_SQL[PROJECT_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i < PROJECT_SQL.length; i++) {
    if (data.projectData.size() > i) {
      TableData importProjectData=data.projectData.get(i);
      try {
        processConfigTableData(importData,existingProjectData.get(i),importProjectData,PROJECT_SQL[i][KEY_COLUMNS],transaction,userId);
      }
 catch (      RuntimeException e) {
        if (importProjectData.getTableName().toLowerCase().endsWith(""String_Node_Str"")) {
          Collection<LinkedCaseInsensitiveMap<Object>> maps=importProjectData.getTableData().values();
          StringBuilder ids=new StringBuilder();
          for (          LinkedCaseInsensitiveMap<Object> linkedCaseInsensitiveMap : maps) {
            if (ids.length() > 0) {
              ids.append(""String_Node_Str"");
            }
            ids.append(linkedCaseInsensitiveMap.get(""String_Node_Str""));
          }
          throw new MessageException(String.format(""String_Node_Str"",ids));
        }
 else {
          throw e;
        }
      }
    }
  }
}",0.9985358711566618
167308,"private void addConfigData(List<TableData> tableData,String[][] sqlElements,String projectVersionId,String keyValue){
  ProjectVersion version=configurationService.findProjectVersion(projectVersionId);
  for (int i=0; i <= sqlElements.length - 1; i++) {
    if (!sqlElements[0][0].equalsIgnoreCase(""String_Node_Str"") || version == null || !projectsExported.contains(version.getProjectId())) {
      String[] entry=sqlElements[i];
      List<Row> rows=getConfigTableData(String.format(entry[SQL],tablePrefix,projectVersionId,keyValue));
      for (      Row row : rows) {
        if (isPassword(row.getString(""String_Node_Str"",false))) {
          String value=row.getString(""String_Node_Str"",false);
          if (isNotBlank(value)) {
            if (value.startsWith(SecurityConstants.PREFIX_ENC)) {
              try {
                row.put(""String_Node_Str"",securityService.decrypt(value.substring(SecurityConstants.PREFIX_ENC.length() - 1)));
              }
 catch (              Exception e) {
              }
            }
          }
        }
        tableData.get(i).rows.put(getPkDataAsString(row,entry[KEY_COLUMNS]),row);
      }
    }
  }
  if (version != null) {
    projectsExported.add(version.getProjectId());
  }
}","private void addConfigData(List<TableData> tableData,String[][] sqlElements,String projectVersionId,String keyValue){
  ProjectVersion version=configurationService.findProjectVersion(projectVersionId);
  for (int i=0; i < sqlElements.length; i++) {
    if (!sqlElements[0][0].equalsIgnoreCase(""String_Node_Str"") || version == null || !projectsExported.contains(version.getProjectId())) {
      String[] entry=sqlElements[i];
      List<Row> rows=getConfigTableData(String.format(entry[SQL],tablePrefix,projectVersionId,keyValue));
      for (      Row row : rows) {
        if (isPassword(row.getString(""String_Node_Str"",false))) {
          String value=row.getString(""String_Node_Str"",false);
          if (isNotBlank(value)) {
            if (value.startsWith(SecurityConstants.PREFIX_ENC)) {
              try {
                row.put(""String_Node_Str"",securityService.decrypt(value.substring(SecurityConstants.PREFIX_ENC.length() - 1)));
              }
 catch (              Exception e) {
              }
            }
          }
        }
        tableData.get(i).rows.put(getPkDataAsString(row,entry[KEY_COLUMNS]),row);
      }
    }
  }
  if (version != null) {
    projectsExported.add(version.getProjectId());
  }
}",0.9979699553390174
167309,"public ImportConfigData(ConfigData configData){
  this.hostName=configData.getHostName();
  this.versionNumber=configData.getVersionNumber();
  this.releasePackageData=configData.releasePackageData;
  this.projectVersionData=configData.projectVersionData;
  this.deletesToProcess=new HashMap<String,TableData>();
}","public ImportConfigData(ConfigData configData){
  this.hostName=configData.getHostName();
  this.versionNumber=configData.getVersionNumber();
  this.releasePackageData=configData.releasePackageData;
  this.projectVersionData=configData.projectVersionData;
  this.deletesToProcess=new LinkedCaseInsensitiveMap<TableData>();
}",0.9498432601880876
167310,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if ((PER_UNIT_OF_WORK.equals(runWhen) && inputMessage instanceof ControlMessage) || (!PER_UNIT_OF_WORK.equals(runWhen) && !(inputMessage instanceof ControlMessage))) {
    HttpDirectory streamable=getResourceReference();
    Map<String,Serializable> outputMessageHeaders=new HashMap<String,Serializable>();
    httpHeaders=getHttpHeaderConfigEntries(inputMessage);
    httpParameters=getHttpParameterConfigEntries(inputMessage);
    assembleRelativePathPlusParameters();
    ArrayList<String> outputPayload=new ArrayList<String>();
    ArrayList<String> inputPayload=new ArrayList<String>();
    if (bodyFrom.equals(""String_Node_Str"") && inputMessage instanceof TextMessage) {
      inputPayload=((TextMessage)inputMessage).getPayload();
    }
 else {
      inputPayload.add(bodyText);
    }
    if (inputPayload != null) {
      try {
        String path=resolveParamsAndHeaders(relativePath,inputMessage);
        for (        String requestContent : inputPayload) {
          getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
          if (parameterReplacement) {
            resolveHttpHeaderVars(httpHeaders,inputMessage);
            requestContent=resolveParamsAndHeaders(requestContent,inputMessage);
          }
          if (isNotBlank(requestContent)) {
            info(""String_Node_Str"",path);
            OutputStream os=streamable.getOutputStream(path,false,false,false,httpHeaders,httpParameters);
            BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,DEFAULT_CHARSET));
            try {
              writer.write(requestContent);
            }
  finally {
              writer.close();
              if (os instanceof IOutputStreamWithResponse) {
                String response=((IOutputStreamWithResponse)os).getResponse();
                if (response != null) {
                  outputPayload.add(response);
                }
              }
            }
          }
 else {
            info(""String_Node_Str"",path);
            HttpInputStream is=(HttpInputStream)streamable.getInputStream(path,false,false,httpHeaders,httpParameters);
            Map<String,List<String>> responseHdrs=is.getHttpConnection().getHeaderFields();
            outputMessageHeaders.putAll(convertResponseHdrsToMsgHeaders(responseHdrs));
            try {
              String response=IOUtils.toString(is);
              if (response != null) {
                outputPayload.add(response);
              }
            }
  finally {
              IOUtils.closeQuietly(is);
            }
          }
        }
        if (outputPayload.size() > 0) {
          callback.sendTextMessage(outputMessageHeaders,outputPayload);
        }
      }
 catch (      IOException e) {
        throw new IoException(String.format(""String_Node_Str"",streamable),e);
      }
    }
  }
 else   if (context.getManipulatedFlow().findStartSteps().contains(context.getFlowStep()) && !PER_UNIT_OF_WORK.equals(runWhen)) {
    warn(""String_Node_Str"",runWhen,PER_UNIT_OF_WORK);
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if ((PER_UNIT_OF_WORK.equals(runWhen) && inputMessage instanceof ControlMessage) || (!PER_UNIT_OF_WORK.equals(runWhen) && !(inputMessage instanceof ControlMessage))) {
    IDirectory streamable=getResourceReference();
    Map<String,Serializable> outputMessageHeaders=new HashMap<String,Serializable>();
    httpHeaders=getHttpHeaderConfigEntries(inputMessage);
    httpParameters=getHttpParameterConfigEntries(inputMessage);
    assembleRelativePathPlusParameters();
    ArrayList<String> outputPayload=new ArrayList<String>();
    ArrayList<String> inputPayload=new ArrayList<String>();
    if (bodyFrom.equals(""String_Node_Str"") && inputMessage instanceof TextMessage) {
      inputPayload=((TextMessage)inputMessage).getPayload();
    }
 else {
      inputPayload.add(bodyText);
    }
    if (inputPayload != null) {
      try {
        String path=resolveParamsAndHeaders(relativePath,inputMessage);
        for (        String requestContent : inputPayload) {
          getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
          if (parameterReplacement) {
            resolveHttpHeaderVars(httpHeaders,inputMessage);
            requestContent=resolveParamsAndHeaders(requestContent,inputMessage);
          }
          if (isNotBlank(requestContent)) {
            info(""String_Node_Str"",path);
            OutputStream os=streamable.getOutputStream(path,false,false,false,httpHeaders,httpParameters);
            BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,DEFAULT_CHARSET));
            try {
              writer.write(requestContent);
            }
  finally {
              writer.close();
              if (os instanceof IOutputStreamWithResponse) {
                String response=((IOutputStreamWithResponse)os).getResponse();
                if (response != null) {
                  outputPayload.add(response);
                }
              }
            }
          }
 else {
            info(""String_Node_Str"",path);
            IInputStreamWithConnection isc=(IInputStreamWithConnection)streamable.getInputStream(path,false,false,httpHeaders,httpParameters);
            Map<String,List<String>> responseHdrs=isc.getHttpConnection().getHeaderFields();
            outputMessageHeaders.putAll(convertResponseHdrsToMsgHeaders(responseHdrs));
            try {
              String response=IOUtils.toString(isc.getInputStream());
              if (response != null) {
                outputPayload.add(response);
              }
            }
  finally {
              IOUtils.closeQuietly(isc.getInputStream());
            }
          }
        }
        if (outputPayload.size() > 0) {
          callback.sendTextMessage(outputMessageHeaders,outputPayload);
        }
      }
 catch (      IOException e) {
        throw new IoException(String.format(""String_Node_Str"",streamable),e);
      }
    }
  }
 else   if (context.getManipulatedFlow().findStartSteps().contains(context.getFlowStep()) && !PER_UNIT_OF_WORK.equals(runWhen)) {
    warn(""String_Node_Str"",runWhen,PER_UNIT_OF_WORK);
  }
}",0.9862058030759474
167311,"@Override public void flowCompleted(boolean cancelled){
  StringBuilder assertFailed=new StringBuilder();
  if (expectedControlMessageCount != controlMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedControlMessageCount,controlMessageCount));
  }
  if (expectedEmptyPayloadMessageCount != emptyPayloadMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEmptyPayloadMessageCount,emptyPayloadMessageCount));
  }
  if (expectedEntityMessageCount != entityMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityMessageCount,entityMessageCount));
  }
  if (expectedTextMessageCount != textMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextMessageCount,textMessageCount));
  }
  if (expectedBinaryMessageCount != binaryMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedBinaryMessageCount,binaryMessageCount));
  }
  if (expectedDistinctAttributeTypeCount != -1 && expectedDistinctAttributeTypeCount != distinctAttributeIds.size()) {
    assertFailed.append(String.format(""String_Node_Str"",expectedDistinctAttributeTypeCount,distinctAttributeIds.size()));
  }
  if (expectedDistinctEntityTypeCount != -1 && expectedDistinctEntityTypeCount != distinctEntityIds.size()) {
    assertFailed.append(String.format(""String_Node_Str"",expectedDistinctEntityTypeCount,distinctEntityIds.size()));
  }
  if (expectedEntityCountPerMessage.intValue() != -1 && expectedEntityCountPerMessage.intValue() != entityCountPerMessage) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityCountPerMessage.intValue(),entityCountPerMessage));
  }
  if (isNotBlank(expectedTextPayload) && !expectedTextPayload.trim().equals(textPayload.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextPayload,textPayload.toString().trim()));
  }
  if (isNotBlank(expectedCustomHeaderPairs) && !expectedCustomHeaderPairs.trim().equals(messageHeaders.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedCustomHeaderPairs.trim(),messageHeaders.toString().trim()));
  }
  if (isNotBlank(expectedCustomControlMsgHeaderPairs) && !expectedCustomControlMsgHeaderPairs.trim().equals(controlMessageHeaders.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedCustomControlMsgHeaderPairs.trim(),controlMessageHeaders.toString().trim()));
  }
  if (isNotBlank(sql)) {
    IResourceRuntime targetResource=context.getDeployedResources().get(dataSourceId);
    DataSource ds=targetResource.reference();
    JdbcTemplate template=new JdbcTemplate(ds);
    int sqlCount=template.queryForObject(sql,Integer.class);
    if (expectedSqlCount != sqlCount) {
      assertFailed.append(String.format(""String_Node_Str"",expectedSqlCount,sqlCount));
    }
  }
  if (assertFailed.length() > 0) {
    throw new AssertException(""String_Node_Str"" + this.context.flowStep.getName() + assertFailed.toString());
  }
}","@Override public void flowCompleted(boolean cancelled){
  StringBuilder assertFailed=new StringBuilder();
  if (expectedControlMessageCount != controlMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedControlMessageCount,controlMessageCount));
  }
  if (expectedEmptyPayloadMessageCount != emptyPayloadMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEmptyPayloadMessageCount,emptyPayloadMessageCount));
  }
  if (expectedEntityMessageCount != entityMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityMessageCount,entityMessageCount));
  }
  if (expectedTextMessageCount != textMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextMessageCount,textMessageCount));
  }
  if (expectedBinaryMessageCount != binaryMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedBinaryMessageCount,binaryMessageCount));
  }
  if (expectedDistinctAttributeTypeCount != -1 && expectedDistinctAttributeTypeCount != distinctAttributeIds.size()) {
    assertFailed.append(String.format(""String_Node_Str"",expectedDistinctAttributeTypeCount,distinctAttributeIds.size()));
  }
  if (expectedDistinctEntityTypeCount != -1 && expectedDistinctEntityTypeCount != distinctEntityIds.size()) {
    assertFailed.append(String.format(""String_Node_Str"",expectedDistinctEntityTypeCount,distinctEntityIds.size()));
  }
  if (expectedEntityCountPerMessage.intValue() != -1 && expectedEntityCountPerMessage.intValue() != entityCountPerMessage) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityCountPerMessage.intValue(),entityCountPerMessage));
  }
  if (isNotBlank(expectedTextPayload) && !expectedTextPayload.trim().equals(textPayload.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextPayload,textPayload.toString().trim()));
  }
  if (isNotBlank(expectedCustomHeaderPairs) && !expectedCustomHeaderPairs.trim().equals(messageHeaders.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedCustomHeaderPairs.trim(),messageHeaders.toString().trim()));
  }
  if (isNotBlank(expectedCustomControlMsgHeaderPairs) && !expectedCustomControlMsgHeaderPairs.trim().equals(controlMessageHeaders.toString().trim())) {
    assertFailed.append(String.format(""String_Node_Str"",expectedCustomControlMsgHeaderPairs.trim(),controlMessageHeaders.toString().trim()));
  }
  if (isNotBlank(sql)) {
    IResourceRuntime targetResource=context.getDeployedResources().get(dataSourceId);
    DataSource ds=targetResource.reference();
    JdbcTemplate template=new JdbcTemplate(ds);
    int sqlCount=template.queryForObject(sql,Integer.class);
    if (expectedSqlCount != sqlCount) {
      assertFailed.append(String.format(""String_Node_Str"",expectedSqlCount,sqlCount));
    }
  }
  if (assertFailed.length() > 0) {
    throw new AssertException(""String_Node_Str"" + this.context.getFlowStep().getName() + assertFailed.toString());
  }
}",0.9988400994200496
167312,"@Override public void contextInitialized(ServletContextEvent sce){
  WebApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  cleanTempJettyDirectories();
  initDatabase(ctx);
  initPlugins(ctx);
  auditStartup(ctx);
  initAgentRuntime(ctx);
  initBackgroundJobs(ctx);
}","@Override public void contextInitialized(ServletContextEvent sce){
  WebApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(sce.getServletContext());
  cleanTempJettyDirectories();
  initDatabase(ctx);
  initPlugins(ctx);
  auditStartup(ctx);
  initUICache(ctx);
  initAgentRuntime(ctx);
  initBackgroundJobs(ctx);
}",0.9696048632218844
167313,"public UICache(IConfigurationService configurationService){
  this.configurationService=configurationService;
  refreshAll();
  this.configurationService.addConfigurationChangeListener(new ChangeListener());
}","public UICache(IConfigurationService configurationService){
  this.configurationService=configurationService;
}",0.69375
167314,"protected void refresh(String projectVersionId,List<Plugin> distinctPlugins){
  long ts=System.currentTimeMillis();
  loadComponentsForClassloader(projectVersionId,""String_Node_Str"" + VersionUtils.getCurrentVersion(),getClass().getClassLoader());
  List<PluginRepository> remoteRepostiories=pluginService.findPluginRepositories();
  List<ProjectVersionDefinitionPlugin> pvcps=configurationService.findProjectVersionComponentPlugins(projectVersionId);
  GenericVersionScheme versionScheme=new GenericVersionScheme();
  for (  Plugin configuredPlugin : distinctPlugins) {
    logger.info(""String_Node_Str"",configuredPlugin.toString(),projectVersionId);
    boolean matched=false;
    for (    ProjectVersionDefinitionPlugin pvcp : pvcps) {
      if (pvcp.matches(configuredPlugin)) {
        try {
          matched=true;
          String latestVersion=pluginManager.getLatestLocalVersion(pvcp.getArtifactGroup(),pvcp.getArtifactName());
          if (isNotBlank(latestVersion)) {
            Version version=versionScheme.parseVersion(latestVersion);
            if (!pvcp.getArtifactVersion().equals(latestVersion)) {
              Version previousVersion=versionScheme.parseVersion(pvcp.getArtifactVersion());
              if (previousVersion.compareTo(version) == -1) {
                if (!pvcp.isPinVersion()) {
                  logger.info(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
                  pvcp.setArtifactVersion(latestVersion);
                  pvcp.setLatestArtifactVersion(latestVersion);
                }
 else {
                  logger.info(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
                  pvcp.setLatestArtifactVersion(latestVersion);
                }
                configurationService.save(pvcp);
              }
 else {
                logger.info(""String_Node_Str"" + ""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
              }
            }
          }
          matched=null != load(projectVersionId,pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),remoteRepostiories);
          if (!matched) {
            logger.warn(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion());
            pluginService.delete(pvcp);
            pluginService.delete((Plugin)pvcp);
          }
        }
 catch (        InvalidVersionSpecificationException e) {
          logger.error(""String_Node_Str"",e);
        }
        break;
      }
    }
    if (!matched) {
      String latestVersion=pluginManager.getLatestLocalVersion(configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName());
      if (latestVersion != null) {
        String pluginId=load(projectVersionId,configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName(),latestVersion,remoteRepostiories);
        List<XMLAbstractDefinition> definitions=definitionsByPluginId.get(pluginId);
        if (definitions != null) {
          definitions=new ArrayList<>(definitionsByPluginId.get(pluginId));
          for (          XMLAbstractDefinition definition : definitions) {
            ProjectVersionDefinitionPlugin plugin=new ProjectVersionDefinitionPlugin();
            plugin.setProjectVersionId(projectVersionId);
            plugin.setDefinitionTypeId(definition.getId());
            plugin.setDefinitionName(definition.getName());
            plugin.setArtifactGroup(configuredPlugin.getArtifactGroup());
            plugin.setArtifactName(configuredPlugin.getArtifactName());
            plugin.setArtifactVersion(latestVersion);
            plugin.setLatestArtifactVersion(latestVersion);
            if (definition instanceof XMLComponentDefinition) {
              plugin.setDefinitionType(DEFINTION_TYPE_COMPONENT);
            }
 else             if (definition instanceof XMLResourceDefinition) {
              plugin.setDefinitionType(DEFINTION_TYPE_RESOURCE);
            }
 else {
              throw new IllegalStateException(""String_Node_Str"");
            }
            configurationService.save(plugin);
          }
        }
 else {
          logger.warn(""String_Node_Str"",pluginId);
        }
      }
 else {
        logger.warn(""String_Node_Str"",configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName());
      }
    }
  }
  long time=System.currentTimeMillis() - ts;
  if (time > 1000) {
    logger.info(""String_Node_Str"",time,projectVersionId);
  }
}","protected void refresh(String projectVersionId,List<Plugin> distinctPlugins){
  long ts=System.currentTimeMillis();
  loadComponentsForClassloader(projectVersionId,""String_Node_Str"" + VersionUtils.getCurrentVersion(),getClass().getClassLoader());
  List<PluginRepository> remoteRepostiories=pluginService.findPluginRepositories();
  List<ProjectVersionDefinitionPlugin> pvcps=configurationService.findProjectVersionComponentPlugins(projectVersionId);
  GenericVersionScheme versionScheme=new GenericVersionScheme();
  for (  Plugin configuredPlugin : distinctPlugins) {
    boolean matched=false;
    for (    ProjectVersionDefinitionPlugin pvcp : pvcps) {
      if (pvcp.matches(configuredPlugin)) {
        try {
          matched=true;
          String latestVersion=pluginManager.getLatestLocalVersion(pvcp.getArtifactGroup(),pvcp.getArtifactName());
          if (isNotBlank(latestVersion)) {
            Version version=versionScheme.parseVersion(latestVersion);
            if (!pvcp.getArtifactVersion().equals(latestVersion)) {
              Version previousVersion=versionScheme.parseVersion(pvcp.getArtifactVersion());
              if (previousVersion.compareTo(version) == -1) {
                if (!pvcp.isPinVersion()) {
                  logger.info(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
                  pvcp.setArtifactVersion(latestVersion);
                  pvcp.setLatestArtifactVersion(latestVersion);
                }
 else {
                  logger.info(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
                  pvcp.setLatestArtifactVersion(latestVersion);
                }
                configurationService.save(pvcp);
              }
 else {
                logger.info(""String_Node_Str"" + ""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),latestVersion);
              }
            }
          }
          matched=null != load(projectVersionId,pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion(),remoteRepostiories);
          if (!matched) {
            logger.warn(""String_Node_Str"",pvcp.getArtifactGroup(),pvcp.getArtifactName(),pvcp.getArtifactVersion());
            pluginService.delete(pvcp);
            pluginService.delete((Plugin)pvcp);
          }
        }
 catch (        InvalidVersionSpecificationException e) {
          logger.error(""String_Node_Str"",e);
        }
        break;
      }
    }
    if (!matched) {
      String latestVersion=pluginManager.getLatestLocalVersion(configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName());
      if (latestVersion != null) {
        String pluginId=load(projectVersionId,configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName(),latestVersion,remoteRepostiories);
        List<XMLAbstractDefinition> definitions=definitionsByPluginId.get(pluginId);
        if (definitions != null) {
          definitions=new ArrayList<>(definitionsByPluginId.get(pluginId));
          for (          XMLAbstractDefinition definition : definitions) {
            ProjectVersionDefinitionPlugin plugin=new ProjectVersionDefinitionPlugin();
            plugin.setProjectVersionId(projectVersionId);
            plugin.setDefinitionTypeId(definition.getId());
            plugin.setDefinitionName(definition.getName());
            plugin.setArtifactGroup(configuredPlugin.getArtifactGroup());
            plugin.setArtifactName(configuredPlugin.getArtifactName());
            plugin.setArtifactVersion(latestVersion);
            plugin.setLatestArtifactVersion(latestVersion);
            if (definition instanceof XMLComponentDefinition) {
              plugin.setDefinitionType(DEFINTION_TYPE_COMPONENT);
            }
 else             if (definition instanceof XMLResourceDefinition) {
              plugin.setDefinitionType(DEFINTION_TYPE_RESOURCE);
            }
 else {
              throw new IllegalStateException(""String_Node_Str"");
            }
            configurationService.save(plugin);
          }
        }
 else {
          logger.warn(""String_Node_Str"",pluginId);
        }
      }
 else {
        logger.warn(""String_Node_Str"",configuredPlugin.getArtifactGroup(),configuredPlugin.getArtifactName());
      }
    }
  }
  long time=System.currentTimeMillis() - ts;
  if (time > 1000) {
    logger.info(""String_Node_Str"",time,projectVersionId);
  }
}",0.9910388317291736
167315,"public FlowRuntime(String executionId,String userId,AgentProjectVersionFlowDeployment deployment,Agent agent,IComponentRuntimeFactory componentRuntimeFactory,IDefinitionFactory definitionFactory,ExecutorService threadService,IOperationsService operationsService,IConfigurationService configurationService,IExecutionService executionService,Map<String,IResourceRuntime> deployedResources,List<Notification> notifications,Map<String,String> globalSettings,Map<String,String> runtimeParameters){
  if (agent.isAutoRefresh() && configurationService != null && operationsService != null) {
    deployment.setFlow(configurationService.findFlow(deployment.getFlow().getId()));
    deployment.setAgentDeployment(operationsService.findAgentDeployment(deployment.getAgentDeployment().getId()));
    operationsService.refreshAgentParameters(agent);
  }
  this.executionId=executionId;
  this.agentProjectVersionFlowDeployment=deployment;
  this.agent=agent;
  this.notifications=notifications;
  this.componentRuntimeFactory=componentRuntimeFactory;
  this.definitionFactory=definitionFactory;
  this.threadService=threadService;
  this.configurationService=configurationService;
  this.executionService=executionService;
  this.mailSession=new MailSession(globalSettings);
  this.deployedResources=deployedResources;
  this.globalSettings=globalSettings;
  this.flowParameters=new LinkedHashMap<String,String>();
  if (runtimeParameters != null) {
    this.flowParameters.putAll(runtimeParameters);
  }
  getFlowParameters(this.flowParameters,agent,deployment);
  if (threadService != null && executionService != null) {
    this.executionTracker=new ExecutionTrackerRecorder(agent,deployment,threadService,executionService,userId,flowParameters.toString());
  }
 else {
    this.executionTracker=new ExecutionTrackerLogger(deployment);
  }
  this.stepRuntimes=new HashMap<String,StepRuntime>();
  manipulatedFlow=manipulateFlow(deployment.getFlow());
  for (  FlowStep flowStep : manipulatedFlow.getFlowSteps()) {
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    if (enabled) {
      ComponentContext context=new ComponentContext(deployment.getAgentDeployment(),flowStep,manipulatedFlow,executionTracker,deployedResources,flowParameters,globalSettings);
      StepRuntime stepRuntime=new StepRuntime(componentRuntimeFactory,definitionFactory,context,this);
      stepRuntimes.put(flowStep.getId(),stepRuntime);
    }
  }
  List<FlowStepLink> links=manipulatedFlow.getFlowStepLinks();
  for (  String stepId : stepRuntimes.keySet()) {
    List<StepRuntime> targetStepRuntimes=new ArrayList<StepRuntime>();
    List<StepRuntime> sourceStepRuntimes=new ArrayList<StepRuntime>();
    for (    FlowStepLink flowStepLink : links) {
      if (stepId.equals(flowStepLink.getSourceStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getTargetStepId());
        if (runtime != null) {
          targetStepRuntimes.add(runtime);
        }
      }
      if (stepId.equals(flowStepLink.getTargetStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getSourceStepId());
        if (runtime != null) {
          sourceStepRuntimes.add(runtime);
        }
      }
    }
    StepRuntime runtime=stepRuntimes.get(stepId);
    if (runtime != null) {
      runtime.setTargetStepRuntimes(targetStepRuntimes);
      runtime.setSourceStepRuntimes(sourceStepRuntimes);
    }
  }
  manipulatedFlow.calculateApproximateOrder();
}","public FlowRuntime(String executionId,String userId,AgentProjectVersionFlowDeployment deployment,Agent agent,IComponentRuntimeFactory componentRuntimeFactory,IDefinitionFactory definitionFactory,ExecutorService threadService,IOperationsService operationsService,IConfigurationService configurationService,IExecutionService executionService,Map<String,IResourceRuntime> deployedResources,List<Notification> notifications,Map<String,String> globalSettings,Map<String,String> runtimeParameters){
  if (agent.isAutoRefresh() && configurationService != null && operationsService != null) {
    deployment.setFlow(configurationService.findFlow(deployment.getFlow().getId()));
    deployment.setAgentDeployment(operationsService.findAgentDeployment(deployment.getAgentDeployment().getId()));
    operationsService.refreshAgentParameters(agent);
  }
  this.executionId=executionId;
  this.agentProjectVersionFlowDeployment=deployment;
  this.agent=agent;
  this.notifications=notifications;
  this.componentRuntimeFactory=componentRuntimeFactory;
  this.definitionFactory=definitionFactory;
  this.threadService=threadService;
  this.configurationService=configurationService;
  this.executionService=executionService;
  this.deployedResources=deployedResources;
  this.globalSettings=globalSettings;
  this.flowParameters=new LinkedHashMap<String,String>();
  if (runtimeParameters != null) {
    this.flowParameters.putAll(runtimeParameters);
  }
  getFlowParameters(this.flowParameters,agent,deployment);
  if (threadService != null && executionService != null) {
    this.executionTracker=new ExecutionTrackerRecorder(agent,deployment,threadService,executionService,userId,flowParameters.toString());
  }
 else {
    this.executionTracker=new ExecutionTrackerLogger(deployment);
  }
  this.stepRuntimes=new HashMap<String,StepRuntime>();
  manipulatedFlow=manipulateFlow(deployment.getFlow());
  for (  FlowStep flowStep : manipulatedFlow.getFlowSteps()) {
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    if (enabled) {
      ComponentContext context=new ComponentContext(deployment.getAgentDeployment(),flowStep,manipulatedFlow,executionTracker,deployedResources,flowParameters,globalSettings);
      StepRuntime stepRuntime=new StepRuntime(componentRuntimeFactory,definitionFactory,context,this);
      stepRuntimes.put(flowStep.getId(),stepRuntime);
    }
  }
  List<FlowStepLink> links=manipulatedFlow.getFlowStepLinks();
  for (  String stepId : stepRuntimes.keySet()) {
    List<StepRuntime> targetStepRuntimes=new ArrayList<StepRuntime>();
    List<StepRuntime> sourceStepRuntimes=new ArrayList<StepRuntime>();
    for (    FlowStepLink flowStepLink : links) {
      if (stepId.equals(flowStepLink.getSourceStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getTargetStepId());
        if (runtime != null) {
          targetStepRuntimes.add(runtime);
        }
      }
      if (stepId.equals(flowStepLink.getTargetStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getSourceStepId());
        if (runtime != null) {
          sourceStepRuntimes.add(runtime);
        }
      }
    }
    StepRuntime runtime=stepRuntimes.get(stepId);
    if (runtime != null) {
      runtime.setTargetStepRuntimes(targetStepRuntimes);
      runtime.setSourceStepRuntimes(sourceStepRuntimes);
    }
  }
  manipulatedFlow.calculateApproximateOrder();
}",0.9924724956572092
167316,"protected void sendNotifications(Notification.EventType eventType){
  if (notifications != null && notifications.size() > 0) {
    Transport transport=null;
    Date date=new Date();
    flowParameters.put(""String_Node_Str"",DateFormatUtils.format(date,DATE_FORMAT));
    flowParameters.put(""String_Node_Str"",DateFormatUtils.format(date,TIME_FORMAT));
    try {
      for (      Notification notification : notifications) {
        if (notification.getEventType().equals(eventType.toString())) {
          log.info(""String_Node_Str"" + notification.getName() + ""String_Node_Str""+ notification.getLevel()+ ""String_Node_Str""+ notification.getNotifyType()+ ""String_Node_Str"");
          transport=mailSession.getTransport();
          MimeMessage message=new MimeMessage(mailSession.getSession());
          message.setSentDate(new Date());
          message.setRecipients(RecipientType.BCC,notification.getRecipients());
          message.setSubject(FormatUtils.replaceTokens(notification.getSubject(),flowParameters,true));
          message.setText(FormatUtils.replaceTokens(notification.getMessage(),flowParameters,true));
          try {
            transport.sendMessage(message,message.getAllRecipients());
          }
 catch (          MessagingException e) {
            log.error(""String_Node_Str"",e);
          }
        }
      }
    }
 catch (    MessagingException e) {
      log.error(""String_Node_Str"",e);
    }
 finally {
      mailSession.closeTransport();
    }
  }
}","protected void sendNotifications(Notification.EventType eventType){
  if (notifications != null && notifications.size() > 0) {
    Transport transport=null;
    Date date=new Date();
    flowParameters.put(""String_Node_Str"",DateFormatUtils.format(date,DATE_FORMAT));
    flowParameters.put(""String_Node_Str"",DateFormatUtils.format(date,TIME_FORMAT));
    MailSession mailSession=new MailSession(globalSettings);
    try {
      for (      Notification notification : notifications) {
        if (notification.getEventType().equals(eventType.toString())) {
          log.info(""String_Node_Str"" + notification.getName() + ""String_Node_Str""+ notification.getLevel()+ ""String_Node_Str""+ notification.getNotifyType()+ ""String_Node_Str"");
          transport=mailSession.getTransport();
          MimeMessage message=new MimeMessage(mailSession.getSession());
          message.setSentDate(new Date());
          message.setRecipients(RecipientType.BCC,notification.getRecipients());
          message.setSubject(FormatUtils.replaceTokens(notification.getSubject(),flowParameters,true));
          message.setText(FormatUtils.replaceTokens(notification.getMessage(),flowParameters,true));
          try {
            transport.sendMessage(message,message.getAllRecipients());
          }
 catch (          MessagingException e) {
            log.error(""String_Node_Str"",e);
          }
        }
      }
    }
 catch (    MessagingException e) {
      log.error(""String_Node_Str"",e);
    }
 finally {
      mailSession.closeTransport();
    }
  }
}",0.979821369500496
167317,"public void closeTransport(){
  try {
    if (transport != null) {
      transport.get().close();
      transport.set(null);
    }
  }
 catch (  MessagingException e) {
  }
}","public void closeTransport(){
  try {
    if (transport.get() != null) {
      transport.get().close();
      transport.set(null);
    }
  }
 catch (  MessagingException e) {
  }
}",0.9830508474576272
167318,"public void buttonClick(ClickEvent event){
  MailSession mailSession=new MailSession(context.getOperationsSerivce().findGlobalSettingsAsMap());
  try {
    mailSession.getTransport();
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  AuthenticationFailedException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    log.warn(""String_Node_Str"",e);
  }
catch (  MessagingException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    log.warn(""String_Node_Str"",e);
  }
 finally {
    mailSession.closeTransport();
  }
}","public void buttonClick(ClickEvent event){
  MailSession mailSession=new MailSession(context.getOperationsSerivce().findGlobalSettingsAsMap());
  try {
    mailSession.getTransport();
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  AuthenticationFailedException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
catch (  MessagingException e) {
    CommonUiUtils.notify(""String_Node_Str"",""String_Node_Str"" + e.getMessage(),Type.ERROR_MESSAGE);
    log.warn(""String_Node_Str"",e);
  }
 finally {
    mailSession.closeTransport();
  }
}",0.970125786163522
167319,"public boolean isDeleted(){
  return deleted;
}","public boolean isDeleted(){
  return deleted || project.isDeleted();
}",0.8034188034188035
167320,"@Override public List<Project> findProjects(){
  List<Project> list=persistenceManager.find(Project.class,new NameValue(""String_Node_Str"",0),null,null,tableName(Project.class));
  AbstractObjectNameBasedSorter.sort(list);
  for (  Project project : list) {
    project.setProjectVersions(findProjectVersionsByProject(project.getId()));
  }
  return list;
}","@Override public List<Project> findProjects(){
  List<Project> list=persistenceManager.find(Project.class,new NameValue(""String_Node_Str"",0),null,null,tableName(Project.class));
  AbstractObjectNameBasedSorter.sort(list);
  for (  Project project : list) {
    project.setProjectVersions(findProjectVersionsByProject(project));
  }
  return list;
}",0.9886363636363636
167321,"@Override public List<ProjectVersion> findProjectVersionsByProject(String projectId){
  Map<String,Object> params=new HashMap<>();
  params.put(""String_Node_Str"",0);
  params.put(""String_Node_Str"",projectId);
  List<ProjectVersion> versions=persistenceManager.find(ProjectVersion.class,params,null,null,tableName(ProjectVersion.class));
  AbstractObjectCreateTimeDescSorter.sort(versions);
  return versions;
}","@Override public List<ProjectVersion> findProjectVersionsByProject(Project project){
  Map<String,Object> params=new HashMap<>();
  params.put(""String_Node_Str"",0);
  params.put(""String_Node_Str"",project.getId());
  List<ProjectVersion> versions=persistenceManager.find(ProjectVersion.class,params,null,null,tableName(ProjectVersion.class));
  for (  ProjectVersion projectVersion : versions) {
    projectVersion.setProject(project);
  }
  AbstractObjectCreateTimeDescSorter.sort(versions);
  return versions;
}",0.8546637744034707
167322,public List<ProjectVersion> findProjectVersionsByProject(String projectId);,public List<ProjectVersion> findProjectVersionsByProject(Project project);,0.912751677852349
167323,"@SuppressWarnings(""String_Node_Str"") protected Panel buildPossibleTargetVersions(ProjectVersion targetProjectVersion){
  Panel possibleTargetVersionsPanel=new Panel(""String_Node_Str"");
  possibleTargetVersionsPanel.addStyleName(ValoTheme.PANEL_SCROLL_INDICATOR);
  possibleTargetVersionsPanel.setSizeFull();
  IndexedContainer container=new IndexedContainer();
  optionGroup=new OptionGroup(""String_Node_Str"",container);
  optionGroup.addStyleName(ValoTheme.OPTIONGROUP_SMALL);
  optionGroup.setItemCaptionMode(ItemCaptionMode.PROPERTY);
  optionGroup.setItemCaptionPropertyId(""String_Node_Str"");
  optionGroup.addStyleName(""String_Node_Str"");
  List<ProjectVersion> projectVersions=configService.findProjectVersionsByProject(targetProjectVersion.getProjectId());
  container.addContainerProperty(""String_Node_Str"",String.class,null);
  for (  ProjectVersion version : projectVersions) {
    Item item=container.addItem(version.getId());
    item.getItemProperty(""String_Node_Str"").setValue(version.getVersionLabel());
    if (targetProjectVersion.getId().equalsIgnoreCase(version.getId())) {
      optionGroup.setItemEnabled(version.getId(),false);
    }
  }
  possibleTargetVersionsPanel.setContent(optionGroup);
  return possibleTargetVersionsPanel;
}","@SuppressWarnings(""String_Node_Str"") protected Panel buildPossibleTargetVersions(ProjectVersion targetProjectVersion){
  Panel possibleTargetVersionsPanel=new Panel(""String_Node_Str"");
  possibleTargetVersionsPanel.addStyleName(ValoTheme.PANEL_SCROLL_INDICATOR);
  possibleTargetVersionsPanel.setSizeFull();
  IndexedContainer container=new IndexedContainer();
  optionGroup=new OptionGroup(""String_Node_Str"",container);
  optionGroup.addStyleName(ValoTheme.OPTIONGROUP_SMALL);
  optionGroup.setItemCaptionMode(ItemCaptionMode.PROPERTY);
  optionGroup.setItemCaptionPropertyId(""String_Node_Str"");
  optionGroup.addStyleName(""String_Node_Str"");
  List<ProjectVersion> projectVersions=configService.findProjectVersionsByProject(targetProjectVersion.getProject());
  container.addContainerProperty(""String_Node_Str"",String.class,null);
  for (  ProjectVersion version : projectVersions) {
    Item item=container.addItem(version.getId());
    item.getItemProperty(""String_Node_Str"").setValue(version.getVersionLabel());
    if (targetProjectVersion.getId().equalsIgnoreCase(version.getId())) {
      optionGroup.setItemEnabled(version.getId(),false);
    }
  }
  possibleTargetVersionsPanel.setContent(optionGroup);
  return possibleTargetVersionsPanel;
}",0.9992019154030328
167324,"protected void refreshProjects(){
  long ts=System.currentTimeMillis();
  Object selected=treeTable.getValue();
  List<Project> projects=configurationService.findProjects();
  treeTable.removeAllItems();
  for (  Project project : projects) {
    List<ProjectVersion> versions=project.getProjectVersions();
    treeTable.addItem(project);
    treeTable.setItemIcon(project,Icons.PROJECT);
    treeTable.setChildrenAllowed(project,versions.size() > 0);
  }
  if (selected == null) {
    String selectedId=context.getUser().findSetting(UserSetting.SETTING_DESIGN_NAVIGATOR_SELECTION_ID).getValue();
    if (isNotBlank(selectedId)) {
      String projectId=context.getUser().findSetting(UserSetting.SETTING_DESIGN_NAVIGATOR_SELECTED_PROJECT_ID).getValue();
      if (isNotBlank(projectId)) {
        Collection<?> items=treeTable.getItemIds();
        for (        Object object : items) {
          if (object instanceof Project && ((Project)object).getId().equals(projectId)) {
            addProjectVersions((Project)object);
            selected=findChild(selectedId,object);
            break;
          }
        }
      }
    }
  }
  selectAndExpand(selected);
  log.info(""String_Node_Str"",(System.currentTimeMillis() - ts));
}","protected void refreshProjects(){
  long ts=System.currentTimeMillis();
  Object selected=treeTable.getValue();
  List<Project> projects=configurationService.findProjects();
  treeTable.removeAllItems();
  for (  Project project : projects) {
    List<ProjectVersion> versions=project.getProjectVersions();
    treeTable.addItem(project);
    treeTable.setItemIcon(project,Icons.PROJECT);
    treeTable.setChildrenAllowed(project,versions.size() > 0);
  }
  if (selected == null) {
    String selectedId=context.getUser().findSetting(UserSetting.SETTING_DESIGN_NAVIGATOR_SELECTION_ID).getValue();
    if (isNotBlank(selectedId)) {
      String projectId=context.getUser().findSetting(UserSetting.SETTING_DESIGN_NAVIGATOR_SELECTED_PROJECT_ID).getValue();
      if (isNotBlank(projectId)) {
        Collection<?> items=treeTable.getItemIds();
        for (        Object object : items) {
          if (object instanceof Project && ((Project)object).getId().equals(projectId) && !((Project)object).isDeleted()) {
            addProjectVersions((Project)object);
            selected=findChild(selectedId,object);
            break;
          }
        }
      }
    }
  }
  selectAndExpand(selected);
  log.info(""String_Node_Str"",(System.currentTimeMillis() - ts));
}",0.9863782051282052
167325,"protected void selectAndExpand(Object value){
  if (value != null && !treeTable.containsId(value)) {
    String projectVersionId=null;
    if (value instanceof AbstractName) {
      AbstractName named=(AbstractName)value;
      projectVersionId=named.getProjectVersionId();
    }
 else     if (value instanceof ProjectVersion) {
      projectVersionId=((ProjectVersion)value).getId();
    }
    String projectId=null;
    if (isNotBlank(projectVersionId)) {
      ProjectVersion projectVersion=configurationService.findProjectVersion(projectVersionId);
      projectId=projectVersion.getProjectId();
    }
 else     if (value instanceof Project) {
      projectId=((Project)value).getId();
    }
    if (isNotBlank(projectId)) {
      Collection<?> items=treeTable.getItemIds();
      for (      Object object : items) {
        if (object instanceof Project && ((Project)object).getId().equals(projectId)) {
          addProjectVersions(((Project)object));
        }
      }
    }
  }
  treeTable.setValue(value);
  if (value != null) {
    treeTable.setCollapsed(value,false);
    Object parent=treeTable.getParent(value);
    while (parent != null) {
      treeTable.setCollapsed(parent,false);
      parent=treeTable.getParent(parent);
    }
  }
  treeTable.focus();
}","protected void selectAndExpand(Object value){
  if (value != null && !treeTable.containsId(value)) {
    String projectVersionId=null;
    if (value instanceof AbstractName) {
      AbstractName named=(AbstractName)value;
      projectVersionId=named.getProjectVersionId();
    }
 else     if (value instanceof ProjectVersion) {
      projectVersionId=((ProjectVersion)value).getId();
    }
    String projectId=null;
    if (isNotBlank(projectVersionId)) {
      ProjectVersion projectVersion=configurationService.findProjectVersion(projectVersionId);
      projectId=projectVersion.getProjectId();
    }
 else     if (value instanceof Project) {
      projectId=((Project)value).getId();
    }
    if (isNotBlank(projectId)) {
      Collection<?> items=treeTable.getItemIds();
      for (      Object object : items) {
        if (object instanceof Project && ((Project)object).getId().equals(projectId) && !((Project)object).isDeleted()) {
          addProjectVersions(((Project)object));
        }
      }
    }
  }
  treeTable.setValue(value);
  if (value != null) {
    treeTable.setCollapsed(value,false);
    Object parent=treeTable.getParent(value);
    while (parent != null) {
      treeTable.setCollapsed(parent,false);
      parent=treeTable.getParent(parent);
    }
  }
  treeTable.focus();
}",0.9868114817688132
167326,"protected void initPlugins(WebApplicationContext ctx){
  InputStream is=ctx.getServletContext().getResourceAsStream(""String_Node_Str"");
  if (is != null) {
    ZipInputStream zip=null;
    try {
      zip=new ZipInputStream(is);
      ZipEntry entry=null;
      File dir=new File(getConfigDir(false),AppConstants.PLUGINS_DIR);
      for (entry=zip.getNextEntry(); entry != null; entry=zip.getNextEntry()) {
        File f=new File(dir,entry.getName());
        if (!f.exists()) {
          if (entry.isDirectory()) {
            f.mkdirs();
          }
 else {
            getLogger().info(""String_Node_Str"" + f.getAbsolutePath());
            f.getParentFile().mkdirs();
            OutputStream os=new BufferedOutputStream(new FileOutputStream(f));
            try {
              final byte buffer[]=new byte[4096];
              int readCount;
              while ((readCount=zip.read(buffer)) > 0) {
                os.write(buffer,0,readCount);
              }
            }
  finally {
              os.close();
            }
          }
        }
      }
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(zip);
    }
  }
  ctx.getBean(IPluginManager.class).init();
  ctx.getBean(IDefinitionFactory.class).refresh();
}","protected void initPlugins(WebApplicationContext ctx){
  InputStream is=ctx.getServletContext().getResourceAsStream(""String_Node_Str"");
  boolean newPluginsUnzipped=false;
  if (is != null) {
    ZipInputStream zip=null;
    try {
      zip=new ZipInputStream(is);
      ZipEntry entry=null;
      File dir=new File(getConfigDir(false),AppConstants.PLUGINS_DIR);
      for (entry=zip.getNextEntry(); entry != null; entry=zip.getNextEntry()) {
        File f=new File(dir,entry.getName());
        if (!f.exists() || (f.getName().startsWith(""String_Node_Str"") && newPluginsUnzipped)) {
          if (entry.isDirectory()) {
            f.mkdirs();
          }
 else {
            getLogger().info(""String_Node_Str"" + f.getAbsolutePath());
            newPluginsUnzipped=true;
            f.getParentFile().mkdirs();
            OutputStream os=new BufferedOutputStream(new FileOutputStream(f));
            try {
              final byte buffer[]=new byte[4096];
              int readCount;
              while ((readCount=zip.read(buffer)) > 0) {
                os.write(buffer,0,readCount);
              }
            }
  finally {
              os.close();
            }
          }
        }
      }
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      IOUtils.closeQuietly(zip);
    }
  }
  ctx.getBean(IPluginManager.class).init();
  ctx.getBean(IDefinitionFactory.class).refresh();
}",0.9497878359264498
167327,"@Override public void start(){
  IResourceRuntime httpResource=getResourceRuntime();
  if (httpResource == null || !(httpResource instanceof Http)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",Http.TYPE));
  }
  Component component=getComponent();
  bodyFrom=component.get(BODY_FROM,""String_Node_Str"");
  bodyText=component.get(BODY_TEXT);
  runWhen=getComponent().get(RUN_WHEN,PER_MESSAGE);
}","@Override public void start(){
  IResourceRuntime httpResource=getResourceRuntime();
  if (httpResource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Component component=getComponent();
  bodyFrom=component.get(BODY_FROM,""String_Node_Str"");
  bodyText=component.get(BODY_TEXT);
  runWhen=getComponent().get(RUN_WHEN,PER_MESSAGE);
}",0.8582474226804123
167328,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if ((PER_UNIT_OF_WORK.equals(runWhen) && inputMessage instanceof ControlMessage) || (!PER_UNIT_OF_WORK.equals(runWhen) && !(inputMessage instanceof ControlMessage))) {
    HttpDirectory streamable=getResourceReference();
    httpHeaders=getHttpHeaderConfigEntries(inputMessage);
    httpParameters=getHttpParameterConfigEntries(inputMessage);
    assembleRelativePathPlusParameters();
    ArrayList<String> outputPayload=new ArrayList<String>();
    ArrayList<String> inputPayload=new ArrayList<String>();
    if (bodyFrom.equals(""String_Node_Str"") && inputMessage instanceof TextMessage) {
      inputPayload=((TextMessage)inputMessage).getPayload();
    }
 else {
      inputPayload.add(bodyText);
    }
    if (inputPayload != null) {
      try {
        String path=resolveParamsAndHeaders(relativePath,inputMessage);
        for (        String requestContent : inputPayload) {
          getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
          if (parameterReplacement) {
            requestContent=resolveParamsAndHeaders(requestContent,inputMessage);
          }
          if (isNotBlank(requestContent)) {
            info(""String_Node_Str"",path);
            HttpOutputStream os=(HttpOutputStream)streamable.getOutputStream(path,httpHeaders,httpParameters);
            BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,DEFAULT_CHARSET));
            try {
              writer.write(requestContent);
            }
  finally {
              writer.close();
              String response=os.getResponse();
              if (response != null) {
                outputPayload.add(response);
              }
            }
          }
 else {
            info(""String_Node_Str"",path);
            InputStream is=streamable.getInputStream(path,httpHeaders,httpParameters);
            try {
              String response=IOUtils.toString(is);
              if (response != null) {
                outputPayload.add(response);
              }
            }
  finally {
              IOUtils.closeQuietly(is);
            }
          }
        }
        if (outputPayload.size() > 0) {
          callback.sendTextMessage(null,outputPayload);
        }
      }
 catch (      IOException e) {
        throw new IoException(String.format(""String_Node_Str"",streamable),e);
      }
    }
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if ((PER_UNIT_OF_WORK.equals(runWhen) && inputMessage instanceof ControlMessage) || (!PER_UNIT_OF_WORK.equals(runWhen) && !(inputMessage instanceof ControlMessage))) {
    IDirectory streamable=getResourceReference();
    httpHeaders=getHttpHeaderConfigEntries(inputMessage);
    httpParameters=getHttpParameterConfigEntries(inputMessage);
    assembleRelativePathPlusParameters();
    ArrayList<String> outputPayload=new ArrayList<String>();
    ArrayList<String> inputPayload=new ArrayList<String>();
    if (bodyFrom.equals(""String_Node_Str"") && inputMessage instanceof TextMessage) {
      inputPayload=((TextMessage)inputMessage).getPayload();
    }
 else {
      inputPayload.add(bodyText);
    }
    if (inputPayload != null) {
      try {
        String path=resolveParamsAndHeaders(relativePath,inputMessage);
        for (        String requestContent : inputPayload) {
          getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
          if (parameterReplacement) {
            requestContent=resolveParamsAndHeaders(requestContent,inputMessage);
          }
          if (isNotBlank(requestContent)) {
            info(""String_Node_Str"",path);
            OutputStream os=streamable.getOutputStream(path,false,false,false,httpHeaders,httpParameters);
            BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,DEFAULT_CHARSET));
            try {
              writer.write(requestContent);
            }
  finally {
              writer.close();
              if (os instanceof IOutputStreamWithResponse) {
                String response=((IOutputStreamWithResponse)os).getResponse();
                if (response != null) {
                  outputPayload.add(response);
                }
              }
            }
          }
 else {
            info(""String_Node_Str"",path);
            InputStream is=streamable.getInputStream(path,false,false,httpHeaders,httpParameters);
            try {
              String response=IOUtils.toString(is);
              if (response != null) {
                outputPayload.add(response);
              }
            }
  finally {
              IOUtils.closeQuietly(is);
            }
          }
        }
        if (outputPayload.size() > 0) {
          callback.sendTextMessage(null,outputPayload);
        }
      }
 catch (      IOException e) {
        throw new IoException(String.format(""String_Node_Str"",streamable),e);
      }
    }
  }
}",0.959569806811392
167329,"public static InputStream getComponentImageInputStream(String projectVersionId,String type,ApplicationContext context){
  String icon=""String_Node_Str"";
  XMLComponentUI definition=context.getUiFactory().getUiDefinition(projectVersionId,type);
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream is=null;
  if (definition != null && isNotBlank(definition.getIconImage())) {
    try {
      icon=definition.getIconImage();
      classLoader=definition.getClassLoader();
      final Enumeration<URL> systemResources=classLoader.getResources(icon);
      while (systemResources.hasMoreElements()) {
        URL url=systemResources.nextElement();
        is=url.openStream();
        break;
      }
    }
 catch (    IOException e) {
    }
  }
  if (is == null) {
    is=UiUtils.class.getResourceAsStream(icon);
  }
  return is;
}","public static InputStream getComponentImageInputStream(String projectVersionId,String type,ApplicationContext context){
  XMLComponentUI definition=context.getUiFactory().getUiDefinition(projectVersionId,type);
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  InputStream is=null;
  if (definition != null && isNotBlank(definition.getIconImage())) {
    String icon=definition.getIconImage();
    classLoader=definition.getClassLoader();
    is=classLoader.getResourceAsStream(icon);
    if (is == null && icon.startsWith(""String_Node_Str"")) {
      is=classLoader.getResourceAsStream(icon.substring(1));
    }
    if (is == null && !icon.startsWith(""String_Node_Str"")) {
      is=classLoader.getResourceAsStream(""String_Node_Str"" + icon);
    }
  }
  if (is == null) {
    is=UiUtils.class.getResourceAsStream(""String_Node_Str"");
  }
  return is;
}",0.4844649021864212
167330,"@Override public void onStartup(ServletContext servletContext) throws ServletException {
  properties=loadProperties();
  LogUtils.initLogging(getConfigDir(false),properties);
  AnnotationConfigWebApplicationContext applicationContext=new AnnotationConfigWebApplicationContext();
  applicationContext.scan(""String_Node_Str"");
  MutablePropertySources sources=applicationContext.getEnvironment().getPropertySources();
  sources.addLast(new PropertiesPropertySource(""String_Node_Str"",properties));
  servletContext.addListener(new ContextLoaderListener(applicationContext));
  servletContext.addListener(this);
  servletContext.addListener(new RequestContextListener());
  AnnotationConfigWebApplicationContext dispatchContext=new AnnotationConfigWebApplicationContext();
  dispatchContext.setParent(applicationContext);
  ServletRegistration.Dynamic dispatcher=servletContext.addServlet(""String_Node_Str"",new DispatcherServlet(dispatchContext));
  dispatcher.setLoadOnStartup(1);
  dispatcher.addMapping(""String_Node_Str"");
  applicationContextRef.set(dispatchContext);
  ServletRegistration.Dynamic apidocs=servletContext.addServlet(""String_Node_Str"",DefaultServlet.class);
  apidocs.addMapping(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ServletRegistration.Dynamic vaadin=servletContext.addServlet(""String_Node_Str"",AppServlet.class);
  vaadin.setAsyncSupported(true);
  vaadin.setInitParameter(""String_Node_Str"",JSR356AsyncSupport.class.getName());
  vaadin.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  vaadin.addMapping(""String_Node_Str"");
}","@Override public void onStartup(ServletContext servletContext) throws ServletException {
  System.out.println(""String_Node_Str"" + VersionUtils.getCurrentVersion());
  properties=loadProperties();
  LogUtils.initLogging(getConfigDir(false),properties);
  AnnotationConfigWebApplicationContext applicationContext=new AnnotationConfigWebApplicationContext();
  applicationContext.scan(""String_Node_Str"");
  MutablePropertySources sources=applicationContext.getEnvironment().getPropertySources();
  sources.addLast(new PropertiesPropertySource(""String_Node_Str"",properties));
  servletContext.addListener(new ContextLoaderListener(applicationContext));
  servletContext.addListener(this);
  servletContext.addListener(new RequestContextListener());
  AnnotationConfigWebApplicationContext dispatchContext=new AnnotationConfigWebApplicationContext();
  dispatchContext.setParent(applicationContext);
  ServletRegistration.Dynamic dispatcher=servletContext.addServlet(""String_Node_Str"",new DispatcherServlet(dispatchContext));
  dispatcher.setLoadOnStartup(1);
  dispatcher.addMapping(""String_Node_Str"");
  applicationContextRef.set(dispatchContext);
  ServletRegistration.Dynamic apidocs=servletContext.addServlet(""String_Node_Str"",DefaultServlet.class);
  apidocs.addMapping(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ServletRegistration.Dynamic vaadin=servletContext.addServlet(""String_Node_Str"",AppServlet.class);
  vaadin.setAsyncSupported(true);
  vaadin.setInitParameter(""String_Node_Str"",JSR356AsyncSupport.class.getName());
  vaadin.setInitParameter(""String_Node_Str"",""String_Node_Str"");
  vaadin.addMapping(""String_Node_Str"");
}",0.9766441303011678
167331,"@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession){
  return null;
}","@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession,Map<String,String> headers,Map<String,String> parameters){
  return getInputStream(relativePath,mustExist,closeSession);
}",0.6763005780346821
167332,"@Override public OutputStream getOutputStream(String relativePath,boolean mustExist,boolean closeSession,boolean append){
  return getOutputStream(relativePath,mustExist);
}","@Override public OutputStream getOutputStream(String relativePath,boolean mustExist,boolean closeSession,boolean append){
  return getOutputStream(relativePath,mustExist,closeSession,append,null,null);
}",0.9202127659574468
167333,"public String getResponse(){
  return response.toString();
}","@Override public String getResponse(){
  return response.toString();
}",0.9230769230769232
167334,"protected AbstractSelect createResourceCombo(XMLSetting definition,AbstractObjectWithSettings obj,ResourceCategory category){
  FlowStep step=getSingleFlowStep();
  String projectVersionId=step.getComponent().getProjectVersionId();
  final AbstractSelect combo=new ComboBox(definition.getName());
  combo.setImmediate(true);
  combo.setDescription(definition.getDescription());
  combo.setNullSelectionAllowed(false);
  combo.setRequired(definition.isRequired());
  Set<String> types=context.getDefinitionFactory().getResourceCategories(projectVersionId);
  if (types != null) {
    List<Resource> resources=context.getConfigurationService().findResourcesByTypes(projectVersionId,types.toArray(new String[types.size()]));
    if (resources != null) {
      for (      Resource resource : resources) {
        combo.addItem(resource.getId());
        combo.setItemCaption(resource.getId(),resource.getName());
      }
      combo.setValue(obj.get(definition.getId()));
    }
  }
  combo.addValueChangeListener(event -> saveSetting(definition.getId(),(String)combo.getValue(),obj));
  combo.setReadOnly(readOnly);
  return combo;
}","protected AbstractSelect createResourceCombo(XMLSetting definition,AbstractObjectWithSettings obj,ResourceCategory category){
  FlowStep step=getSingleFlowStep();
  String projectVersionId=step.getComponent().getProjectVersionId();
  final AbstractSelect combo=new ComboBox(definition.getName());
  combo.setImmediate(true);
  combo.setDescription(definition.getDescription());
  combo.setNullSelectionAllowed(false);
  combo.setRequired(definition.isRequired());
  Set<XMLResourceDefinition> types=context.getDefinitionFactory().getResourceDefinitions(projectVersionId,category);
  if (types != null) {
    String[] typeStrings=new String[types.size()];
    int i=0;
    for (    XMLResourceDefinition type : types) {
      typeStrings[i++]=type.getId();
    }
    List<Resource> resources=context.getConfigurationService().findResourcesByTypes(projectVersionId,typeStrings);
    if (resources != null) {
      for (      Resource resource : resources) {
        combo.addItem(resource.getId());
        combo.setItemCaption(resource.getId(),resource.getName());
      }
      combo.setValue(obj.get(definition.getId()));
    }
  }
  combo.addValueChangeListener(event -> saveSetting(definition.getId(),(String)combo.getValue(),obj));
  combo.setReadOnly(readOnly);
  return combo;
}",0.8943224202237878
167335,"protected void addResourceCombo(XMLComponentDefinition componentDefintion,FormLayout formLayout,final Component component){
  if (componentDefintion == null) {
    log.error(""String_Node_Str"" + component.getName() + ""String_Node_Str""+ component.getType());
  }
 else {
    IConfigurationService configurationService=context.getConfigurationService();
    FlowStep step=getSingleFlowStep();
    if (componentDefintion.getResourceCategory() != null && componentDefintion.getResourceCategory() != ResourceCategory.NONE && step != null) {
      final AbstractSelect resourcesCombo=new ComboBox(""String_Node_Str"");
      resourcesCombo.setImmediate(true);
      String projectVersionId=step.getComponent().getProjectVersionId();
      Set<XMLResourceDefinition> types=context.getDefinitionFactory().getResourceDefinitions(projectVersionId,componentDefintion.getResourceCategory());
      if (types != null) {
        String[] typeStrings=types.toArray(new String[types.size()]);
        int i=0;
        for (        XMLResourceDefinition type : types) {
          typeStrings[i++]=type.getId();
        }
        List<Resource> resources=new ArrayList<>(configurationService.findResourcesByTypes(projectVersionId,typeStrings));
        List<ProjectVersionDependency> dependencies=configurationService.findProjectDependencies(projectVersionId);
        for (        ProjectVersionDependency projectVersionDependency : dependencies) {
          resources.addAll(configurationService.findResourcesByTypes(projectVersionDependency.getTargetProjectVersionId(),typeStrings));
        }
        if (resources != null) {
          for (          Resource resource : resources) {
            resourcesCombo.addItem(resource);
          }
          resourcesCombo.setValue(component.getResource());
        }
      }
      resourcesCombo.addValueChangeListener(new ValueChangeListener(){
        private static final long serialVersionUID=1L;
        @Override public void valueChange(        ValueChangeEvent event){
          component.setResource((Resource)resourcesCombo.getValue());
          context.getConfigurationService().save(component);
        }
      }
);
      formLayout.addComponent(resourcesCombo);
    }
  }
}","protected void addResourceCombo(XMLComponentDefinition componentDefintion,FormLayout formLayout,final Component component){
  if (componentDefintion == null) {
    log.error(""String_Node_Str"" + component.getName() + ""String_Node_Str""+ component.getType());
  }
 else {
    IConfigurationService configurationService=context.getConfigurationService();
    FlowStep step=getSingleFlowStep();
    if (componentDefintion.getResourceCategory() != null && componentDefintion.getResourceCategory() != ResourceCategory.NONE && step != null) {
      final AbstractSelect resourcesCombo=new ComboBox(""String_Node_Str"");
      resourcesCombo.setImmediate(true);
      String projectVersionId=step.getComponent().getProjectVersionId();
      Set<XMLResourceDefinition> types=context.getDefinitionFactory().getResourceDefinitions(projectVersionId,componentDefintion.getResourceCategory());
      if (types != null) {
        String[] typeStrings=new String[types.size()];
        int i=0;
        for (        XMLResourceDefinition type : types) {
          typeStrings[i++]=type.getId();
        }
        List<Resource> resources=new ArrayList<>(configurationService.findResourcesByTypes(projectVersionId,typeStrings));
        List<ProjectVersionDependency> dependencies=configurationService.findProjectDependencies(projectVersionId);
        for (        ProjectVersionDependency projectVersionDependency : dependencies) {
          resources.addAll(configurationService.findResourcesByTypes(projectVersionDependency.getTargetProjectVersionId(),typeStrings));
        }
        if (resources != null) {
          for (          Resource resource : resources) {
            resourcesCombo.addItem(resource);
          }
          resourcesCombo.setValue(component.getResource());
        }
      }
      resourcesCombo.addValueChangeListener(new ValueChangeListener(){
        private static final long serialVersionUID=1L;
        @Override public void valueChange(        ValueChangeEvent event){
          component.setResource((Resource)resourcesCombo.getValue());
          context.getConfigurationService().save(component);
        }
      }
);
      formLayout.addComponent(resourcesCombo);
    }
  }
}",0.9966009517335146
167336,"public PluginManager(String localRepositoryPath,IConfigurationService configurationService){
  this.localRepositoryPath=localRepositoryPath;
  this.configurationService=configurationService;
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",1));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",2));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",3));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",4));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",5));
}","public PluginManager(String localRepositoryPath,IConfigurationService configurationService){
  this.localRepositoryPath=localRepositoryPath;
  this.configurationService=configurationService;
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",10));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",20));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",30));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",40));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",50));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",60));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",70));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",80));
  outOfTheBox.add(new Plugin(""String_Node_Str"",""String_Node_Str"",90));
}",0.7895120174799709
167337,"protected void processMessage(Message inputMessage,boolean unitOfWorkBoundaryReached,ISendMessageCallback callback) throws MessagingException {
  String runWhen=properties.get(RUN_WHEN);
  if ((PER_UNIT_OF_WORK.equals(runWhen) && unitOfWorkBoundaryReached) || PER_MESSAGE.equals(runWhen) || PER_ENTITY.equals(runWhen)) {
    StringBuilder to=new StringBuilder(properties.get(TO_LINE,""String_Node_Str""));
    StringBuilder from=new StringBuilder(properties.get(FROM_LINE,""String_Node_Str""));
    StringBuilder cc=new StringBuilder(properties.get(CC_LINE,""String_Node_Str""));
    StringBuilder bcc=new StringBuilder(properties.get(BCC_LINE,""String_Node_Str""));
    String recipientType=properties.get(SOURCE_STEP_EMAIL_ADDRESS_TYPE);
    String subject=properties.get(SUBJECT,""String_Node_Str"");
    String body=properties.get(BODY,""String_Node_Str"");
    StringBuilder recipientBuilder=null;
    if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_TO.equals(recipientType)) {
      recipientBuilder=to;
    }
 else     if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_CC.equals(recipientType)) {
      recipientBuilder=cc;
    }
 else     if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_BCC.equals(recipientType)) {
      recipientBuilder=bcc;
    }
    boolean oneMessagePerRecipient=properties.is(ONE_EMAIL_PER_RECIPIENT);
    for (    String recipient : recipients) {
      recipientBuilder.append(""String_Node_Str"").append(recipient);
      if (oneMessagePerRecipient) {
        sendEmail(inputMessage,to.toString(),cc.toString(),bcc.toString(),from.toString(),subject,body,callback);
        recipientBuilder.replace(recipientBuilder.length() - recipient.length() - 1,recipientBuilder.length(),""String_Node_Str"");
      }
    }
    if (!oneMessagePerRecipient) {
      sendEmail(inputMessage,to.toString(),cc.toString(),bcc.toString(),from.toString(),subject,body,callback);
    }
  }
}","protected void processMessage(Message inputMessage,boolean unitOfWorkBoundaryReached,ISendMessageCallback callback) throws MessagingException {
  String runWhen=properties.get(RUN_WHEN);
  if ((PER_UNIT_OF_WORK.equals(runWhen) && unitOfWorkBoundaryReached) || (PER_MESSAGE.equals(runWhen) && !(inputMessage instanceof ControlMessage)) || PER_ENTITY.equals(runWhen)) {
    StringBuilder to=new StringBuilder(properties.get(TO_LINE,""String_Node_Str""));
    StringBuilder from=new StringBuilder(properties.get(FROM_LINE,""String_Node_Str""));
    StringBuilder cc=new StringBuilder(properties.get(CC_LINE,""String_Node_Str""));
    StringBuilder bcc=new StringBuilder(properties.get(BCC_LINE,""String_Node_Str""));
    String recipientType=properties.get(SOURCE_STEP_EMAIL_ADDRESS_TYPE);
    String subject=properties.get(SUBJECT,""String_Node_Str"");
    String body=properties.get(BODY,""String_Node_Str"");
    StringBuilder recipientBuilder=null;
    if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_TO.equals(recipientType)) {
      recipientBuilder=to;
    }
 else     if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_CC.equals(recipientType)) {
      recipientBuilder=cc;
    }
 else     if (VALUE_SOURCE_STEP_EMAIL_ADDRESS_TYPE_BCC.equals(recipientType)) {
      recipientBuilder=bcc;
    }
    boolean oneMessagePerRecipient=properties.is(ONE_EMAIL_PER_RECIPIENT);
    for (    String recipient : recipients) {
      recipientBuilder.append(""String_Node_Str"").append(recipient);
      if (oneMessagePerRecipient) {
        sendEmail(inputMessage,to.toString(),cc.toString(),bcc.toString(),from.toString(),subject,body,callback);
        recipientBuilder.replace(recipientBuilder.length() - recipient.length() - 1,recipientBuilder.length(),""String_Node_Str"");
      }
    }
    if (!oneMessagePerRecipient) {
      sendEmail(inputMessage,to.toString(),cc.toString(),bcc.toString(),from.toString(),subject,body,callback);
    }
  }
}",0.9875496688741722
167338,"public void refresh(){
  Object selected=treeTable.getValue();
  List<Object> expandedItems=new ArrayList<Object>();
  Collection<?> items=treeTable.getItemIds();
  for (  Object object : items) {
    if (!treeTable.isCollapsed(object)) {
      expandedItems.add(object);
    }
  }
  treeTable.removeAllItems();
  treeTable.addItem(CURRENTLY_RUNNING);
  treeTable.setChildrenAllowed(CURRENTLY_RUNNING,false);
  treeTable.setItemIcon(CURRENTLY_RUNNING,FontAwesome.GEARS);
  treeTable.addItem(agentsFolder);
  treeTable.setItemIcon(agentsFolder,FontAwesome.FOLDER);
  List<Folder> folders=context.getConfigurationService().findFolders(null,FolderType.AGENT);
  for (  Folder folder : folders) {
    addChildFolder(folder,agentsFolder);
  }
  treeTable.addItem(flowsFolder);
  treeTable.setItemIcon(flowsFolder,FontAwesome.FOLDER);
  addFlowsToFolder(flowsFolder);
  for (  Object object : expandedItems) {
    treeTable.setCollapsed(object,false);
  }
  treeTable.focus();
  if (treeTable.containsId(selected)) {
    treeTable.setValue(selected);
  }
 else {
    treeTable.setValue(CURRENTLY_RUNNING);
  }
}","public void refresh(){
  Object selected=treeTable.getValue();
  List<Object> expandedItems=new ArrayList<Object>();
  Collection<?> items=treeTable.getItemIds();
  for (  Object object : items) {
    if (!treeTable.isCollapsed(object)) {
      expandedItems.add(object);
    }
  }
  treeTable.removeAllItems();
  treeTable.addItem(CURRENTLY_RUNNING);
  treeTable.setChildrenAllowed(CURRENTLY_RUNNING,false);
  treeTable.setItemIcon(CURRENTLY_RUNNING,FontAwesome.GEARS);
  treeTable.addItem(IN_ERROR);
  treeTable.setChildrenAllowed(IN_ERROR,false);
  treeTable.setItemIcon(IN_ERROR,FontAwesome.WARNING);
  treeTable.addItem(agentsFolder);
  treeTable.setItemIcon(agentsFolder,FontAwesome.FOLDER);
  List<Folder> folders=context.getConfigurationService().findFolders(null,FolderType.AGENT);
  for (  Folder folder : folders) {
    addChildFolder(folder,agentsFolder);
  }
  treeTable.addItem(flowsFolder);
  treeTable.setItemIcon(flowsFolder,FontAwesome.FOLDER);
  addFlowsToFolder(flowsFolder);
  for (  Object object : expandedItems) {
    treeTable.setCollapsed(object,false);
  }
  treeTable.focus();
  if (treeTable.containsId(selected)) {
    treeTable.setValue(selected);
  }
 else {
    treeTable.setValue(CURRENTLY_RUNNING);
  }
}",0.9428327645051194
167339,"public Object getBackgroundData(){
  if (statusSelect.isReadOnly()) {
    statusSelect.setReadOnly(false);
    statusSelect.setValue(ANY);
  }
  Object currentSelection=manageNavigator.getCurrentSelection();
  Object currentSelectionParent=manageNavigator.getCurrentSelectionParent();
  if (currentSelection != null) {
    Map<String,Object> params=new HashMap<String,Object>();
    if (currentSelection.equals(ManageNavigator.CURRENTLY_RUNNING)) {
      statusSelect.setValue(ExecutionStatus.RUNNING.name());
      statusSelect.setReadOnly(true);
    }
 else     if (currentSelection instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentName) {
      params.put(""String_Node_Str"",((AgentName)currentSelection).getId());
    }
 else     if (currentSelection instanceof FlowName) {
      params.put(""String_Node_Str"",((FlowName)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeployment) {
      params.put(""String_Node_Str"",((AgentDeployment)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeploymentSummary) {
      params.put(""String_Node_Str"",((AgentDeploymentSummary)currentSelection).getId());
    }
    if (currentSelectionParent instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelectionParent).getId());
    }
 else     if (currentSelectionParent instanceof AgentName) {
      params.put(""String_Node_Str"",((AgentName)currentSelectionParent).getId());
    }
    if (!statusSelect.getValue().equals(ANY)) {
      params.put(""String_Node_Str"",statusSelect.getValue());
    }
    if (params.size() > 0) {
      return context.getExecutionService().findExecutions(params,limit);
    }
  }
  return null;
}","public Object getBackgroundData(){
  if (statusSelect.isReadOnly()) {
    statusSelect.setReadOnly(false);
    statusSelect.setValue(ANY);
  }
  Object currentSelection=manageNavigator.getCurrentSelection();
  Object currentSelectionParent=manageNavigator.getCurrentSelectionParent();
  if (currentSelection != null) {
    Map<String,Object> params=new HashMap<String,Object>();
    if (currentSelection.equals(ManageNavigator.CURRENTLY_RUNNING)) {
      statusSelect.setValue(ExecutionStatus.RUNNING.name());
      statusSelect.setReadOnly(true);
    }
 else     if (currentSelection.equals(ManageNavigator.IN_ERROR)) {
      statusSelect.setValue(ExecutionStatus.ERROR.name());
      statusSelect.setReadOnly(true);
    }
 else     if (currentSelection instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentName) {
      params.put(""String_Node_Str"",((AgentName)currentSelection).getId());
    }
 else     if (currentSelection instanceof FlowName) {
      params.put(""String_Node_Str"",((FlowName)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeployment) {
      params.put(""String_Node_Str"",((AgentDeployment)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeploymentSummary) {
      params.put(""String_Node_Str"",((AgentDeploymentSummary)currentSelection).getId());
    }
    if (currentSelectionParent instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelectionParent).getId());
    }
 else     if (currentSelectionParent instanceof AgentName) {
      params.put(""String_Node_Str"",((AgentName)currentSelectionParent).getId());
    }
    if (!statusSelect.getValue().equals(ANY)) {
      params.put(""String_Node_Str"",statusSelect.getValue());
    }
    if (params.size() > 0) {
      return context.getExecutionService().findExecutions(params,limit);
    }
  }
  return null;
}",0.9545940170940173
167340,"public GroupEditPanel(ApplicationContext context,Group group){
  this.context=context;
  this.group=group;
  FormLayout layout=new FormLayout();
  TextField nameField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(group.getName()));
  nameField.addValueChangeListener(new NameChangeListener());
  layout.addComponent(nameField);
  nameField.focus();
  CheckBox readOnly=new CheckBox(""String_Node_Str"");
  readOnly.setImmediate(true);
  readOnly.setValue(group.isReadOnly());
  readOnly.addValueChangeListener(new ReadOnlyChangeListener());
  layout.addComponent(readOnly);
  TwinColSelect privSelect=new TwinColSelect();
  for (  Privilege priv : Privilege.values()) {
    privSelect.addItem(priv.name());
  }
  lastPrivs=new HashSet<String>();
  for (  GroupPrivilege groupPriv : group.getGroupPrivileges()) {
    lastPrivs.add(groupPriv.getName());
  }
  privSelect.setValue(lastPrivs);
  privSelect.setRows(20);
  privSelect.setNullSelectionAllowed(true);
  privSelect.setMultiSelect(true);
  privSelect.setImmediate(true);
  privSelect.setLeftColumnCaption(""String_Node_Str"");
  privSelect.setRightColumnCaption(""String_Node_Str"");
  privSelect.addValueChangeListener(new PrivilegeChangeListener());
  layout.addComponent(privSelect);
  addComponent(layout);
  setMargin(true);
}","public GroupEditPanel(ApplicationContext context,Group group){
  this.context=context;
  this.group=group;
  FormLayout layout=new FormLayout();
  TextField nameField=new TextField(""String_Node_Str"",StringUtils.trimToEmpty(group.getName()));
  nameField.addValueChangeListener(new NameChangeListener());
  layout.addComponent(nameField);
  nameField.focus();
  readOnly=new CheckBox(""String_Node_Str"");
  readOnly.setEnabled(isNotBlank(group.getName()));
  readOnly.setImmediate(true);
  readOnly.setValue(group.isReadOnly());
  readOnly.addValueChangeListener(new ReadOnlyChangeListener());
  layout.addComponent(readOnly);
  privSelect=new TwinColSelect();
  privSelect.setEnabled(isNotBlank(group.getName()));
  for (  Privilege priv : Privilege.values()) {
    privSelect.addItem(priv.name());
  }
  lastPrivs=new HashSet<String>();
  for (  GroupPrivilege groupPriv : group.getGroupPrivileges()) {
    lastPrivs.add(groupPriv.getName());
  }
  privSelect.setValue(lastPrivs);
  privSelect.setRows(20);
  privSelect.setNullSelectionAllowed(true);
  privSelect.setMultiSelect(true);
  privSelect.setImmediate(true);
  privSelect.setLeftColumnCaption(""String_Node_Str"");
  privSelect.setRightColumnCaption(""String_Node_Str"");
  privSelect.addValueChangeListener(new PrivilegeChangeListener());
  layout.addComponent(privSelect);
  addComponent(layout);
  setMargin(true);
}",0.9298837645294338
167341,"public String getErrorText(List<Throwable> allErrors){
  StringBuilder sb=new StringBuilder();
  int count=0;
  for (  Throwable error : allErrors) {
    if (++count < 10) {
      sb.append(ExceptionUtils.getStackTrace(error)).append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"").append(allErrors.size() - 10).append(""String_Node_Str"");
    }
  }
  return sb.toString();
}","public String getErrorText(List<Throwable> allErrors){
  StringBuilder sb=new StringBuilder();
  int count=0;
  for (  Throwable error : allErrors) {
    if (++count < 10) {
      sb.append(ExceptionUtils.getStackTrace(error)).append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"").append(allErrors.size() - 10).append(""String_Node_Str"");
      break;
    }
  }
  return sb.toString();
}",0.9838107098381071
167342,"private void importModelConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)importData.getModelData().get(0).getTableData().get(0).get(""String_Node_Str"");
  List<TableData> existingModelData=new ArrayList<TableData>();
  initConfigData(existingModelData,MODEL_SQL);
  for (  LinkedCaseInsensitiveMap<Object> row : importData.getModelData().get(0).getTableData()) {
    addConfigData(existingModelData,MODEL_SQL,projectVersionId,(String)row.get(MODEL_SQL[0][2]));
  }
  for (int i=0; i <= MODEL_SQL.length - 1; i++) {
    TableData importModelData=importData.modelData.get(i);
    processConfigTableData(importData,existingModelData.get(i),importModelData,MODEL_SQL[i][2],transaction);
  }
}","private void importModelConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)getOneRow(importData.getModelData().get(MODEL_IDX)).get(""String_Node_Str"");
  List<TableData> existingModelData=new ArrayList<TableData>();
  initConfigData(existingModelData,MODEL_SQL);
  Iterator<String> itr=importData.getModelData().get(MODEL_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=importData.getModelData().get(MODEL_IDX).getTableData().get(key);
    addConfigData(existingModelData,MODEL_SQL,projectVersionId,(String)row.get(MODEL_SQL[MODEL_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i <= MODEL_SQL.length - 1; i++) {
    TableData importModelData=importData.modelData.get(i);
    processConfigTableData(importData,existingModelData.get(i),importModelData,MODEL_SQL[i][KEY_COLUMNS],transaction);
  }
}",0.7718040621266428
167343,"private void importConfiguration(ConfigData configData){
  ImportConfigData importData=new ImportConfigData(configData);
  ISqlTransaction transaction=databasePlatform.getSqlTemplate().startSqlTransaction();
  if (importData.getProjectData().size() > 0 && importData.getProjectData().get(0).rows.size() > 0) {
    importProjectConfiguration(importData,transaction);
  }
  if (importData.getResourceData().size() > 0 && importData.getResourceData().get(0).rows.size() > 0) {
    importResourceConfiguration(importData,transaction);
  }
  if (importData.getModelData().size() > 0 && importData.getModelData().get(0).rows.size() > 0) {
    importModelConfiguration(importData,transaction);
  }
  if (importData.getFlowData().size() > 0 && importData.getFlowData().get(0).rows.size() > 0) {
    importFlowConfiguration(importData,transaction);
  }
  processDeletes(importData,transaction);
  transaction.commit();
}","private void importConfiguration(ConfigData configData){
  ImportConfigData importData=new ImportConfigData(configData);
  ISqlTransaction transaction=databasePlatform.getSqlTemplate().startSqlTransaction();
  if (importData.getProjectData().size() > 0 && importData.getProjectData().get(PROJECT_IDX).rows.size() > 0) {
    importProjectConfiguration(importData,transaction);
  }
  if (importData.getResourceData().size() > 0 && importData.getResourceData().get(RESOURCE_IDX).rows.size() > 0) {
    importResourceConfiguration(importData,transaction);
  }
  if (importData.getModelData().size() > 0 && importData.getModelData().get(MODEL_IDX).rows.size() > 0) {
    importModelConfiguration(importData,transaction);
  }
  if (importData.getFlowData().size() > 0 && importData.getFlowData().get(FLOW_IDX).rows.size() > 0) {
    importFlowConfiguration(importData,transaction);
  }
  processDeletes(importData,transaction);
  transaction.commit();
}",0.976318622174381
167344,"private TableData findUpdates(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  String[] pkCols=StringUtils.split(primaryKeyColumns);
  TableData updates=new TableData(newData.tableName);
  if (existingData.rows.size() > 0 && pkCols.length + 1 < existingData.rows.get(0).size()) {
    for (    LinkedCaseInsensitiveMap<Object> newRow : newData.getTableData()) {
      String newPk=getPkDataAsString(newRow,primaryKeyColumns);
      found=false;
      for (      LinkedCaseInsensitiveMap<Object> existingRow : existingData.getTableData()) {
        String existingPk=getPkDataAsString(existingRow,primaryKeyColumns);
        if (newPk.equalsIgnoreCase(existingPk)) {
          found=true;
        }
      }
      if (found) {
        updates.getTableData().add(newRow);
      }
    }
  }
  return updates;
}","private TableData findUpdates(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  String[] pkCols=StringUtils.split(primaryKeyColumns);
  TableData updates=new TableData(newData.tableName);
  Iterator<String> itr=existingData.getTableData().keySet().iterator();
  int size=0;
  while (itr.hasNext()) {
    String key=itr.next();
    size=existingData.getTableData().get(key).size();
  }
  if (existingData.rows.size() > 0 && pkCols.length + 1 < size) {
    Iterator<String> newRowItr=newData.getTableData().keySet().iterator();
    while (newRowItr.hasNext()) {
      String newPk=newRowItr.next();
      LinkedCaseInsensitiveMap<Object> newRow=newData.getTableData().get(newPk);
      found=false;
      Iterator<String> existingRowItr=existingData.getTableData().keySet().iterator();
      while (existingRowItr.hasNext()) {
        String existingPk=existingRowItr.next();
        if (newPk.equalsIgnoreCase(existingPk)) {
          found=true;
        }
      }
      if (found) {
        updates.getTableData().put(newPk,newRow);
      }
    }
  }
  return updates;
}",0.5876923076923077
167345,"private void importResourceConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)importData.getResourceData().get(0).getTableData().get(0).get(""String_Node_Str"");
  List<TableData> existingResourceData=new ArrayList<TableData>();
  initConfigData(existingResourceData,RESOURCE_SQL);
  for (  LinkedCaseInsensitiveMap<Object> row : importData.getResourceData().get(0).getTableData()) {
    addConfigData(existingResourceData,RESOURCE_SQL,projectVersionId,(String)row.get(RESOURCE_SQL[0][2]));
  }
  for (int i=0; i <= RESOURCE_SQL.length - 1; i++) {
    TableData importResourceData=importData.resourceData.get(i);
    processConfigTableData(importData,existingResourceData.get(i),importResourceData,RESOURCE_SQL[i][2],transaction);
  }
}","private void importResourceConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)getOneRow(importData.getResourceData().get(RESOURCE_IDX)).get(""String_Node_Str"");
  List<TableData> existingResourceData=new ArrayList<TableData>();
  initConfigData(existingResourceData,RESOURCE_SQL);
  Iterator<String> itr=importData.getResourceData().get(RESOURCE_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=importData.getResourceData().get(RESOURCE_IDX).getTableData().get(key);
    addConfigData(existingResourceData,RESOURCE_SQL,projectVersionId,(String)row.get(RESOURCE_SQL[RESOURCE_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i <= RESOURCE_SQL.length - 1; i++) {
    TableData importResourceData=importData.resourceData.get(i);
    processConfigTableData(importData,existingResourceData.get(i),importResourceData,RESOURCE_SQL[i][KEY_COLUMNS],transaction);
  }
}",0.7408656548622822
167346,"private void processTableDeletes(TableData deletes,ISqlTransaction transaction){
  if (deletes != null) {
    Table table=databasePlatform.getTableFromCache(null,null,deletes.getTableName(),false);
    excludeColumns(table);
    DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.DELETE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
    for (    LinkedCaseInsensitiveMap<Object> row : deletes.getTableData()) {
      transaction.prepareAndExecute(stmt.getSql(),row);
    }
  }
}","private void processTableDeletes(TableData deletes,ISqlTransaction transaction){
  if (deletes != null) {
    Table table=databasePlatform.getTableFromCache(null,null,deletes.getTableName(),false);
    excludeColumns(table);
    DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.DELETE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
    Iterator<String> itr=deletes.getTableData().keySet().iterator();
    while (itr.hasNext()) {
      String key=itr.next();
      LinkedCaseInsensitiveMap<Object> row=deletes.getTableData().get(key);
      transaction.prepareAndExecute(stmt.getSql(),row);
    }
  }
}",0.8487261146496815
167347,"private void processTableUpdates(TableData updates,ISqlTransaction transaction){
  Table table=databasePlatform.getTableFromCache(null,null,updates.getTableName(),false);
  excludeColumns(table);
  DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.UPDATE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
  for (  LinkedCaseInsensitiveMap<Object> row : updates.getTableData()) {
    transaction.prepareAndExecute(stmt.getSql(),row);
  }
}","private void processTableUpdates(TableData updates,ISqlTransaction transaction){
  Table table=databasePlatform.getTableFromCache(null,null,updates.getTableName(),false);
  excludeColumns(table);
  DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.UPDATE,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),getUpdateColumns(table),null,null,true);
  Iterator<String> itr=updates.getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=updates.getTableData().get(key);
    transaction.prepareAndExecute(stmt.getSql(),row);
  }
}",0.8782161234991424
167348,"private TableData findDeletes(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  TableData deletes=new TableData(newData.tableName);
  for (  LinkedCaseInsensitiveMap<Object> existingRow : existingData.getTableData()) {
    String existingPk=getPkDataAsString(existingRow,primaryKeyColumns);
    found=false;
    for (    LinkedCaseInsensitiveMap<Object> newRow : newData.getTableData()) {
      String newPk=getPkDataAsString(newRow,primaryKeyColumns);
      if (newPk.equalsIgnoreCase(existingPk)) {
        found=true;
      }
    }
    if (!found) {
      deletes.getTableData().add(existingRow);
    }
  }
  return deletes;
}","private TableData findDeletes(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  TableData deletes=new TableData(newData.tableName);
  Iterator<String> existingRowItr=existingData.getTableData().keySet().iterator();
  while (existingRowItr.hasNext()) {
    String existingPk=existingRowItr.next();
    LinkedCaseInsensitiveMap<Object> existingRow=existingData.getTableData().get(existingPk);
    found=false;
    Iterator<String> newRowItr=newData.getTableData().keySet().iterator();
    while (newRowItr.hasNext()) {
      String newPk=newRowItr.next();
      if (newPk.equalsIgnoreCase(existingPk)) {
        found=true;
      }
    }
    if (!found) {
      deletes.getTableData().put(existingPk,existingRow);
    }
  }
  return deletes;
}",0.6454293628808865
167349,"private TableData findInserts(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  TableData inserts=new TableData(newData.tableName);
  for (  LinkedCaseInsensitiveMap<Object> newRow : newData.getTableData()) {
    String newPk=getPkDataAsString(newRow,primaryKeyColumns);
    found=false;
    for (    LinkedCaseInsensitiveMap<Object> existingRow : existingData.getTableData()) {
      String existingPk=getPkDataAsString(existingRow,primaryKeyColumns);
      if (newPk.equalsIgnoreCase(existingPk)) {
        found=true;
      }
    }
    if (!found) {
      inserts.getTableData().add(newRow);
    }
  }
  return inserts;
}","private TableData findInserts(TableData existingData,TableData newData,String primaryKeyColumns){
  boolean found;
  TableData inserts=new TableData(newData.tableName);
  Iterator<String> newRowItr=newData.getTableData().keySet().iterator();
  while (newRowItr.hasNext()) {
    String newPk=newRowItr.next();
    LinkedCaseInsensitiveMap<Object> newRow=newData.getTableData().get(newPk);
    found=false;
    Iterator<String> existingRowItr=existingData.getTableData().keySet().iterator();
    while (existingRowItr.hasNext()) {
      String existingPk=existingRowItr.next();
      if (newPk.equalsIgnoreCase(existingPk)) {
        found=true;
      }
      if (!found) {
        inserts.getTableData().put(newPk,newRow);
      }
    }
  }
  return inserts;
}",0.5957746478873239
167350,"private void importProjectConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)importData.getProjectData().get(1).getTableData().get(0).get(""String_Node_Str"");
  List<TableData> existingProjectData=new ArrayList<TableData>();
  initConfigData(existingProjectData,PROJECT_SQL);
  for (  LinkedCaseInsensitiveMap<Object> row : importData.getProjectData().get(0).getTableData()) {
    addConfigData(existingProjectData,PROJECT_SQL,projectVersionId,(String)row.get(PROJECT_SQL[0][2]));
  }
  for (int i=0; i <= PROJECT_SQL.length - 1; i++) {
    TableData importProjectData=importData.projectData.get(i);
    processConfigTableData(importData,existingProjectData.get(i),importProjectData,PROJECT_SQL[i][2],transaction);
  }
}","private void importProjectConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)getOneRow(importData.getProjectData().get(PROJECT_VERSION_IDX)).get(""String_Node_Str"");
  List<TableData> existingProjectData=new ArrayList<TableData>();
  initConfigData(existingProjectData,PROJECT_SQL);
  Iterator<String> itr=importData.getProjectData().get(PROJECT_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=importData.getProjectData().get(PROJECT_IDX).getTableData().get(key);
    addConfigData(existingProjectData,PROJECT_SQL,projectVersionId,(String)row.get(PROJECT_SQL[PROJECT_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i <= PROJECT_SQL.length - 1; i++) {
    TableData importProjectData=importData.projectData.get(i);
    processConfigTableData(importData,existingProjectData.get(i),importProjectData,PROJECT_SQL[i][KEY_COLUMNS],transaction);
  }
}",0.6655251141552512
167351,"public void setTableData(List<LinkedCaseInsensitiveMap<Object>> tableData){
  this.rows=tableData;
}","public void setTableData(Map<String,LinkedCaseInsensitiveMap<Object>> tableData){
  this.rows=tableData;
}",0.9320388349514565
167352,"private void importFlowConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)importData.getFlowData().get(4).getTableData().get(0).get(""String_Node_Str"");
  List<TableData> existingFlowData=new ArrayList<TableData>();
  initConfigData(existingFlowData,FLOW_SQL);
  for (  LinkedCaseInsensitiveMap<Object> row : importData.getFlowData().get(4).getTableData()) {
    addConfigData(existingFlowData,FLOW_SQL,projectVersionId,(String)row.get(FLOW_SQL[4][2]));
  }
  for (int i=0; i <= FLOW_SQL.length - 1; i++) {
    TableData importFlowData=importData.flowData.get(i);
    processConfigTableData(importData,existingFlowData.get(i),importFlowData,FLOW_SQL[i][2],transaction);
  }
}","private void importFlowConfiguration(ImportConfigData importData,ISqlTransaction transaction){
  String projectVersionId=(String)getOneRow(importData.getFlowData().get(FLOW_IDX)).get(""String_Node_Str"");
  List<TableData> existingFlowData=new ArrayList<TableData>();
  initConfigData(existingFlowData,FLOW_SQL);
  Iterator<String> itr=importData.getFlowData().get(FLOW_IDX).getTableData().keySet().iterator();
  while (itr.hasNext()) {
    String key=itr.next();
    LinkedCaseInsensitiveMap<Object> row=importData.getFlowData().get(FLOW_IDX).getTableData().get(key);
    addConfigData(existingFlowData,FLOW_SQL,projectVersionId,(String)row.get(FLOW_SQL[FLOW_IDX][KEY_COLUMNS]));
  }
  for (int i=0; i <= FLOW_SQL.length - 1; i++) {
    TableData importFlowData=importData.flowData.get(i);
    processConfigTableData(importData,existingFlowData.get(i),importFlowData,FLOW_SQL[i][KEY_COLUMNS],transaction);
  }
}",0.8431970713849909
167353,"private void addConfigData(List<TableData> tableData,String[][] sqlElements,String projectVersionId,String keyValue){
  for (int i=0; i <= sqlElements.length - 1; i++) {
    String[] entry=sqlElements[i];
    tableData.get(i).rows.addAll(getConfigTableData(String.format(entry[1],tablePrefix,projectVersionId,keyValue)));
  }
}","private void addConfigData(List<TableData> tableData,String[][] sqlElements,String projectVersionId,String keyValue){
  for (int i=0; i <= sqlElements.length - 1; i++) {
    String[] entry=sqlElements[i];
    List<Row> rows=getConfigTableData(String.format(entry[SQL],tablePrefix,projectVersionId,keyValue));
    for (    Row row : rows) {
      tableData.get(i).rows.put(getPkDataAsString(row,entry[KEY_COLUMNS]),row);
    }
  }
}",0.7361477572559367
167354,"public List<LinkedCaseInsensitiveMap<Object>> getTableData(){
  return rows;
}","public Map<String,LinkedCaseInsensitiveMap<Object>> getTableData(){
  return rows;
}",0.9135802469135802
167355,"private void processTableInserts(TableData inserts,ISqlTransaction transaction){
  Table table=databasePlatform.getTableFromCache(null,null,inserts.getTableName(),false);
  excludeColumns(table);
  DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.INSERT,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),table.getColumns(),null,null,true);
  for (  LinkedCaseInsensitiveMap<Object> row : inserts.getTableData()) {
    transaction.prepareAndExecute(stmt.getSql(),row);
  }
}","private void processTableInserts(TableData inserts,ISqlTransaction transaction){
  try {
    Table table=databasePlatform.getTableFromCache(null,null,inserts.getTableName(),false);
    excludeColumns(table);
    DmlStatement stmt=databasePlatform.createDmlStatement(DmlType.INSERT,table.getCatalog(),table.getSchema(),table.getName(),table.getPrimaryKeyColumns(),table.getColumns(),null,null,true);
    Iterator<String> itr=inserts.getTableData().keySet().iterator();
    while (itr.hasNext()) {
      String key=itr.next();
      LinkedCaseInsensitiveMap<Object> row=inserts.getTableData().get(key);
      transaction.prepareAndExecute(stmt.getSql(),row);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + e.getMessage());
  }
}",0.7993680884676145
167356,"@SuppressWarnings(""String_Node_Str"") protected <T extends AbstractObject>T copyWithNewUUID(Map<String,String> oldToNewUUIDMapping,T original){
  T copy=(T)original.clone();
  copy.setId(UUID.randomUUID().toString());
  oldToNewUUIDMapping.put(original.getId(),copy.getId());
  return copy;
}","@SuppressWarnings(""String_Node_Str"") protected <T extends AbstractObject>T copyWithNewUUID(Map<String,AbstractObject> oldToNewUUIDMapping,T original){
  T copy=(T)original.clone();
  copy.setId(UUID.randomUUID().toString());
  oldToNewUUIDMapping.put(original.getId(),copy);
  return copy;
}",0.9518900343642612
167357,"protected Component copy(Map<String,String> oldToNewUUIDMapping,Component original){
  Component component=copyWithNewUUID(oldToNewUUIDMapping,original);
  component.setEntitySettings(new ArrayList<ComponentEntitySetting>());
  component.setAttributeSettings(new ArrayList<ComponentAttributeSetting>());
  component.setSettings(new ArrayList<Setting>());
  for (  Setting setting : original.getSettings()) {
    ComponentSetting cSetting=(ComponentSetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    cSetting.setComponentId(component.getId());
    component.getSettings().add(cSetting);
  }
  for (  ComponentAttributeSetting setting : original.getAttributeSettings()) {
    setting=(ComponentAttributeSetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    setting.setComponentId(component.getId());
    component.getAttributeSettings().add(setting);
  }
  for (  ComponentEntitySetting setting : original.getEntitySettings()) {
    setting=(ComponentEntitySetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    setting.setComponentId(component.getId());
    component.getEntitySettings().add(setting);
  }
  return component;
}","protected Component copy(Map<String,AbstractObject> oldToNewUUIDMapping,Component original){
  Component component=copyWithNewUUID(oldToNewUUIDMapping,original);
  AbstractObject obj=oldToNewUUIDMapping.get(original.getInputModelId());
  if (obj != null) {
    component.setInputModelId(obj.getId());
  }
  obj=oldToNewUUIDMapping.get(original.getOutputModelId());
  if (obj != null) {
    component.setOutputModelId(obj.getId());
  }
  obj=oldToNewUUIDMapping.get(original.getResourceId());
  if (obj != null) {
    component.setResourceId(obj.getId());
  }
  component.setEntitySettings(new ArrayList<ComponentEntitySetting>());
  component.setAttributeSettings(new ArrayList<ComponentAttributeSetting>());
  component.setSettings(new ArrayList<Setting>());
  for (  Setting setting : original.getSettings()) {
    ComponentSetting cSetting=(ComponentSetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    cSetting.setComponentId(component.getId());
    component.getSettings().add(cSetting);
  }
  for (  ComponentAttributeSetting setting : original.getAttributeSettings()) {
    setting=(ComponentAttributeSetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    setting.setComponentId(component.getId());
    component.getAttributeSettings().add(setting);
  }
  for (  ComponentEntitySetting setting : original.getEntitySettings()) {
    setting=(ComponentEntitySetting)copyWithNewUUID(oldToNewUUIDMapping,setting);
    setting.setComponentId(component.getId());
    component.getEntitySettings().add(setting);
  }
  return component;
}",0.8446927374301676
167358,"@Override public ProjectVersion saveNewVersion(String newVersionLabel,ProjectVersion original){
  Map<String,String> oldToNewUUIDMapping=new HashMap<>();
  ProjectVersion newVersion=copyWithNewUUID(oldToNewUUIDMapping,original);
  newVersion.setVersionLabel(newVersionLabel);
  newVersion.setCreateTime(new Date());
  newVersion.setOrigVersionId(original.getId());
  save(newVersion);
  List<ModelName> models=findModelsInProject(original.getId());
  for (  ModelName modelName : models) {
    Model newModel=copy(oldToNewUUIDMapping,findModel(modelName.getId()));
    newModel.setProjectVersionId(newVersion.getId());
    save(newModel);
  }
  List<ResourceName> resources=findResourcesInProject(original.getId());
  for (  ResourceName resourceName : resources) {
    Resource newResource=copy(oldToNewUUIDMapping,findResource(resourceName.getId()));
    newResource.setProjectVersionId(newVersion.getId());
    save(newResource);
  }
  List<FlowName> testFlows=findFlowsInProject(original.getId(),true);
  for (  FlowName flowName : testFlows) {
    Flow newFlow=copy(oldToNewUUIDMapping,findFlow(flowName.getId()));
    newFlow.setProjectVersionId(newVersion.getId());
    save(newFlow);
  }
  List<FlowName> flows=findFlowsInProject(original.getId(),false);
  for (  FlowName flowName : flows) {
    Flow newFlow=copy(oldToNewUUIDMapping,findFlow(flowName.getId()));
    newFlow.setProjectVersionId(newVersion.getId());
    save(newFlow);
  }
  return newVersion;
}","@Override public ProjectVersion saveNewVersion(String newVersionLabel,ProjectVersion original){
  Map<String,AbstractObject> oldToNewUUIDMapping=new HashMap<>();
  ProjectVersion newVersion=copyWithNewUUID(oldToNewUUIDMapping,original);
  newVersion.setVersionLabel(newVersionLabel);
  newVersion.setCreateTime(new Date());
  newVersion.setOrigVersionId(original.getId());
  save(newVersion);
  List<ModelName> models=findModelsInProject(original.getId());
  for (  ModelName modelName : models) {
    Model newModel=copy(oldToNewUUIDMapping,findModel(modelName.getId()));
    newModel.setProjectVersionId(newVersion.getId());
    save(newModel);
  }
  List<ResourceName> resources=findResourcesInProject(original.getId());
  for (  ResourceName resourceName : resources) {
    Resource newResource=copy(oldToNewUUIDMapping,findResource(resourceName.getId()));
    newResource.setProjectVersionId(newVersion.getId());
    save(newResource);
  }
  List<FlowName> testFlows=findFlowsInProject(original.getId(),true);
  for (  FlowName flowName : testFlows) {
    Flow newFlow=copy(oldToNewUUIDMapping,findFlow(flowName.getId()),true);
    newFlow.setProjectVersionId(newVersion.getId());
    save(newFlow,true);
  }
  List<FlowName> flows=findFlowsInProject(original.getId(),false);
  for (  FlowName flowName : flows) {
    Flow newFlow=copy(oldToNewUUIDMapping,findFlow(flowName.getId()),true);
    newFlow.setProjectVersionId(newVersion.getId());
    save(newFlow);
  }
  return newVersion;
}",0.9881876476544044
167359,"protected void massageValues(Map<String,String> oldToNewUUIDMapping,List<? extends Setting> settings){
  for (  Setting setting : settings) {
    setting.setValue(FormatUtils.replaceTokens(setting.getValue(),oldToNewUUIDMapping,false));
  }
}","protected void massageValues(Map<String,AbstractObject> oldToNewUUIDMapping,List<? extends Setting> settings){
  for (  Setting setting : settings) {
    setting.setValue(FormatUtils.replaceTokens(setting.getValue(),toStringTokens(oldToNewUUIDMapping),false));
  }
}",0.9291338582677166
167360,"protected void massageValues(Map<String,AbstractObject> oldToNewUUIDMapping,List<? extends Setting> settings){
  for (  Setting setting : settings) {
    setting.setValue(FormatUtils.replaceTokens(setting.getValue(),toStringTokens(oldToNewUUIDMapping),false));
  }
}","protected void massageValues(Map<String,AbstractObject> oldToNewUUIDMapping,List<? extends Setting> settings){
  Map<String,String> tokens=toStringTokens(oldToNewUUIDMapping);
  for (  Setting setting : settings) {
    boolean printafter=false;
    if (setting.getValue() != null && setting.getValue().contains(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"" + setting.getValue());
      printafter=true;
    }
    setting.setValue(FormatUtils.replaceTokens(setting.getValue(),tokens,false));
    if (printafter) {
      System.out.println(""String_Node_Str"" + setting.getValue());
    }
  }
}",0.384
167361,"protected void buildUI(){
  if (!readOnly) {
    ButtonBar buttonBar=new ButtonBar();
    addComponent(buttonBar);
    addButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.PLUS);
    addButton.addClickListener((event) -> table.addItem(new Route()));
    removeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TRASH_O);
    removeButton.addClickListener((event) -> {
      if (table.getValue() != null) {
        table.removeItem(table.getValue());
        save();
      }
    }
);
  }
  table.setContainerDataSource(container);
  table.setSelectable(true);
  table.setSortEnabled(false);
  table.setImmediate(true);
  table.setSizeFull();
  table.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str""});
  table.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str""});
  table.setTableFieldFactory(new EditFieldFactory());
  table.addItemClickListener((event) -> {
    if (table.getValue() != null) {
      table.setValue(null);
    }
  }
);
  if (!readOnly) {
    table.addValueChangeListener((event) -> removeButton.setEnabled(table.getValue() != null));
    table.setEditable(true);
  }
  addComponent(table);
  setExpandRatio(table,1.0f);
  String json=flowStep.getComponent().get(ContentRouter.SETTING_CONFIG);
  if (isNotBlank(json)) {
    try {
      List<Route> routes=new ObjectMapper().readValue(json,new TypeReference<List<Route>>(){
      }
);
      for (      Route route : routes) {
        table.addItem(route);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}","protected void buildUI(){
  if (!readOnly) {
    ButtonBar buttonBar=new ButtonBar();
    addComponent(buttonBar);
    addButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.PLUS);
    addButton.addClickListener((event) -> table.addItem(new Route()));
    removeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TRASH_O);
    removeButton.addClickListener((event) -> {
      if (table.getValue() != null) {
        table.removeItem(table.getValue());
        save();
      }
    }
);
  }
  table.setContainerDataSource(container);
  table.setSelectable(true);
  table.setSortEnabled(false);
  table.setImmediate(true);
  table.setSizeFull();
  table.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str""});
  table.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str""});
  table.setTableFieldFactory(new EditFieldFactory());
  table.addItemClickListener((event) -> {
    if (table.getValue() != null) {
      table.setValue(null);
    }
  }
);
  table.setEditable(true);
  if (!readOnly) {
    table.addValueChangeListener((event) -> removeButton.setEnabled(table.getValue() != null));
  }
  addComponent(table);
  setExpandRatio(table,1.0f);
  String json=flowStep.getComponent().get(ContentRouter.SETTING_CONFIG);
  if (isNotBlank(json)) {
    try {
      List<Route> routes=new ObjectMapper().readValue(json,new TypeReference<List<Route>>(){
      }
);
      for (      Route route : routes) {
        table.addItem(route);
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.9819935691318328
167362,"protected List<Node> getNodes(){
  ExecutionData executionData=getExecutionData();
  List<FlowStep> flowSteps=flow.getFlowSteps();
  List<FlowStepLink> links=flow.getFlowStepLinks();
  List<Node> list=new ArrayList<Node>();
  for (int i=0; i < 5; i++) {
    if (executionData.steps.size() == flowSteps.size()) {
      break;
    }
 else {
      AppUtils.sleep(200);
      executionData=getExecutionData();
    }
  }
  for (  FlowStep flowStep : flowSteps) {
    Node node=new Node();
    String name=flowStep.getComponent().getName();
    String type=flowStep.getComponent().getType();
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    String imageText=String.format(""String_Node_Str"",UiUtils.getBase64RepresentationOfImageForComponentType(type,context));
    node.setText(imageText);
    node.setName(name);
    node.setEnabled(enabled);
    node.setId(flowStep.getId());
    node.setX(flowStep.getX());
    node.setY(flowStep.getY());
    ExecutionStep executionStep=executionData.findExecutionStep(flowStep.getId());
    if (executionStep != null) {
      node.setEntitiesProcessed(executionStep.getEntitiesProcessed());
      node.setMessagesRecieved(executionStep.getMessagesReceived());
      node.setMessagesSent(executionStep.getMessagesProduced());
      node.setStatus(executionStep.getExecutionStatus().toString());
      node.setInputLabel(Long.toString(executionStep.getMessagesReceived()));
      node.setOutputLabel(Long.toString(executionStep.getMessagesProduced()));
    }
 else {
      showDetails();
      showDiagram.setEnabled(false);
      showDiagram.setDescription(""String_Node_Str"");
    }
    for (    FlowStepLink link : links) {
      if (link.getSourceStepId().equals(node.getId())) {
        node.getTargetNodeIds().add(link.getTargetStepId());
      }
    }
    list.add(node);
  }
  return list;
}","protected List<Node> getNodes(){
  ExecutionData executionData=getExecutionData();
  List<FlowStep> flowSteps=flow.getFlowSteps();
  List<FlowStepLink> links=flow.getFlowStepLinks();
  List<Node> list=new ArrayList<Node>();
  for (int i=0; i < 5; i++) {
    if (executionData.steps.size() == flowSteps.size()) {
      break;
    }
 else {
      AppUtils.sleep(200);
      executionData=getExecutionData();
    }
  }
  for (  FlowStep flowStep : flowSteps) {
    Node node=new Node();
    String name=flowStep.getComponent().getName();
    String type=flowStep.getComponent().getType();
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    String imageText=String.format(""String_Node_Str"",UiUtils.getBase64RepresentationOfImageForComponentType(type,context));
    node.setText(imageText);
    node.setName(name);
    node.setEnabled(enabled);
    node.setId(flowStep.getId());
    node.setX(flowStep.getX());
    node.setY(flowStep.getY());
    ExecutionStep executionStep=executionData.findExecutionStep(flowStep.getId());
    if (node.isEnabled() && executionStep != null) {
      node.setEntitiesProcessed(executionStep.getEntitiesProcessed());
      node.setMessagesRecieved(executionStep.getMessagesReceived());
      node.setMessagesSent(executionStep.getMessagesProduced());
      node.setStatus(executionStep.getExecutionStatus().toString());
      node.setInputLabel(Long.toString(executionStep.getMessagesReceived()));
      node.setOutputLabel(Long.toString(executionStep.getMessagesProduced()));
    }
 else     if (!node.isEnabled()) {
      node.setInputLabel(""String_Node_Str"");
      node.setOutputLabel(""String_Node_Str"");
    }
 else {
      showDetails();
      showDiagram.setEnabled(false);
      showDiagram.setDescription(""String_Node_Str"");
    }
    for (    FlowStepLink link : links) {
      if (link.getSourceStepId().equals(node.getId())) {
        node.getTargetNodeIds().add(link.getTargetStepId());
      }
    }
    list.add(node);
  }
  return list;
}",0.9191402251791198
167363,"/** 
 * Open and connect a reusable SFTP channel.
 * @param channelId is the ID of the reusable channel to open.
 * @return a connected reusable channel.
 * @throws JSchException
 */
protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  Map<Integer,ChannelSftp> channels=threadChannels.get();
  if (channels == null) {
    channels=new HashMap<Integer,ChannelSftp>();
  }
  ChannelSftp channel=channels.get(channelId);
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  channels.put(channelId,channel);
  threadChannels.set(channels);
  return channel;
}","/** 
 * Open and connect a reusable SFTP channel.
 * @param channelId is the ID of the reusable channel to open.
 * @return a connected reusable channel.
 */
protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  Map<Integer,ChannelSftp> channels=threadChannels.get();
  if (channels == null) {
    channels=new HashMap<Integer,ChannelSftp>();
  }
  ChannelSftp channel=channels.get(channelId);
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  channels.put(channelId,channel);
  threadChannels.set(channels);
  return channel;
}",0.9828649760109665
167364,"@Override public void copyFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp uploadSftp=null;
  InputStream inputStream=null;
  try {
    uploadSftp=openConnectedChannel(CHANNEL_1);
    uploadSftp.cd(basePath);
    inputStream=getInputStream(fromFilePath,true);
    uploadSftp.put(inputStream,toFilePath);
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public void copyFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp uploadSftp=null;
  InputStream inputStream=null;
  try {
    uploadSftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    uploadSftp.cd(basePath);
    inputStream=getInputStream(fromFilePath,true);
    uploadSftp.put(inputStream,toFilePath);
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.958904109589041
167365,"@Override public boolean delete(String relativePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rm(relativePath);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public boolean delete(String relativePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rm(relativePath);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.94
167366,"@Override public void moveToDir(String fromFilePath,String toDirPath,boolean closeSession){
  ChannelSftp sftp=null;
  FileInfo fileInfo=new FileInfo(fromFilePath,false,new java.util.Date().getTime(),-1);
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    if (!toDirPath.endsWith(""String_Node_Str"")) {
      toDirPath+=""String_Node_Str"";
    }
    sftp.rename(fromFilePath,toDirPath + fileInfo.getName());
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public void moveToDir(String fromFilePath,String toDirPath,boolean closeSession){
  ChannelSftp sftp=null;
  FileInfo fileInfo=new FileInfo(fromFilePath,false,new java.util.Date().getTime(),-1);
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    if (!toDirPath.endsWith(""String_Node_Str"")) {
      toDirPath+=""String_Node_Str"";
    }
    sftp.rename(fromFilePath,toDirPath + fileInfo.getName());
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.9654605263157896
167367,"@Override public FileInfo listFile(String relativePath,boolean closeSession){
  ChannelSftp sftp=null;
  FileInfo fileInfo=null;
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
      @SuppressWarnings(""String_Node_Str"") Vector list=sftp.ls(relativePath);
      for (      Object object : list) {
        LsEntry entry=(LsEntry)object;
        if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
          fileInfo=new FileInfo(relativePath,entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize());
        }
      }
    }
    return fileInfo;
  }
 catch (  Exception e) {
    return null;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public FileInfo listFile(String relativePath,boolean closeSession){
  ChannelSftp sftp=null;
  FileInfo fileInfo=null;
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
      @SuppressWarnings(""String_Node_Str"") Vector list=sftp.ls(relativePath);
      for (      Object object : list) {
        LsEntry entry=(LsEntry)object;
        if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
          fileInfo=new FileInfo(relativePath,entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize());
        }
      }
    }
    return fileInfo;
  }
 catch (  Exception e) {
    return null;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.9758620689655172
167368,"protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  Map<Integer,ChannelSftp> channels=threadChannels.get();
  if (channels == null) {
    channels=new HashMap<Integer,ChannelSftp>();
  }
  ChannelSftp channel=channels.get(channelId);
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  channels.put(channelId,channel);
  threadChannels.set(channels);
  return channel;
}","/** 
 * Open and connect a reusable SFTP channel.
 * @param channelId is the ID of the reusable channel to open.
 * @return a connected reusable channel.
 * @throws JSchException
 */
protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  Map<Integer,ChannelSftp> channels=threadChannels.get();
  if (channels == null) {
    channels=new HashMap<Integer,ChannelSftp>();
  }
  ChannelSftp channel=channels.get(channelId);
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  channels.put(channelId,channel);
  threadChannels.set(channels);
  return channel;
}",0.8593389700230591
167369,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public List<FileInfo> listFiles(boolean closeSession,String... relativePaths){
  ChannelSftp sftp=null;
  String separator=null;
  List<FileInfo> fileInfoList=new ArrayList<>();
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    for (    String relativePath : relativePaths) {
      if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
        if (relativePath.isEmpty() || StringUtils.endsWith(relativePath,""String_Node_Str"")) {
          separator=""String_Node_Str"";
        }
 else {
          separator=""String_Node_Str"";
        }
        Vector list=new Vector();
        try {
          list.addAll(sftp.ls(relativePath.isEmpty() ? ""String_Node_Str"" : relativePath));
        }
 catch (        SftpException e) {
          log.warn(""String_Node_Str"" + e.getMessage());
        }
        for (        Object object : list) {
          LsEntry entry=(LsEntry)object;
          if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
            fileInfoList.add(new FileInfo(relativePath + separator + entry.getFilename(),entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize()));
          }
        }
      }
    }
    return fileInfoList;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public List<FileInfo> listFiles(boolean closeSession,String... relativePaths){
  ChannelSftp sftp=null;
  String separator=null;
  List<FileInfo> fileInfoList=new ArrayList<>();
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    for (    String relativePath : relativePaths) {
      if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
        if (relativePath.isEmpty() || StringUtils.endsWith(relativePath,""String_Node_Str"")) {
          separator=""String_Node_Str"";
        }
 else {
          separator=""String_Node_Str"";
        }
        Vector list=new Vector();
        try {
          list.addAll(sftp.ls(relativePath.isEmpty() ? ""String_Node_Str"" : relativePath));
        }
 catch (        SftpException e) {
          log.warn(""String_Node_Str"" + e.getMessage());
        }
        for (        Object object : list) {
          LsEntry entry=(LsEntry)object;
          if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
            fileInfoList.add(new FileInfo(relativePath + separator + entry.getFilename(),entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize()));
          }
        }
      }
    }
    return fileInfoList;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.986425339366516
167370,"@Override public void moveFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rename(fromFilePath,toFilePath);
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public void moveFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rename(fromFilePath,toFilePath);
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.9485294117647058
167371,"@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=openConnectedChannel(CHANNEL_IN);
    sftp.cd(basePath);
    if (mustExist && !fileExists(sftp,relativePath)) {
      throw new IoException(""String_Node_Str"",relativePath);
    }
    return new CloseableInputStreamStream(sftp.get(relativePath),session,sftp,closeSession);
  }
 catch (  Exception e) {
    if (e instanceof IOException || (e instanceof SftpException && ((SftpException)e).id != 2)) {
      throw new IoException(""String_Node_Str"",e.getMessage());
    }
 else {
      return null;
    }
  }
}","@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_IN);
    sftp.cd(basePath);
    if (mustExist && !fileExists(sftp,relativePath)) {
      throw new IoException(""String_Node_Str"",relativePath);
    }
    return new CloseableInputStreamStream(sftp.get(relativePath),session,sftp,closeSession);
  }
 catch (  Exception e) {
    if (e instanceof IOException || (e instanceof SftpException && ((SftpException)e).id != 2)) {
      throw new IoException(""String_Node_Str"",e.getMessage());
    }
 else {
      return null;
    }
  }
}",0.9710344827586208
167372,"@Override public boolean renameFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rename(fromFilePath,toFilePath);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public boolean renameFile(String fromFilePath,String toFilePath,boolean closeSession){
  ChannelSftp sftp=null;
  try {
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    sftp.rename(fromFilePath,toFilePath);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.9457364341085271
167373,"@Override public OutputStream getOutputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=openConnectedChannel(CHANNEL_OUT);
    sftp.cd(basePath);
    createRelativePathDirectoriesIfNecessary(sftp,relativePath,mustExist);
    return new CloseableOutputStream(sftp.put(relativePath,ChannelSftp.OVERWRITE),session,sftp,closeSession);
  }
 catch (  Exception e) {
    throw new IoException(e);
  }
}","@Override public OutputStream getOutputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_OUT);
    sftp.cd(basePath);
    createRelativePathDirectoriesIfNecessary(sftp,relativePath,mustExist);
    return new CloseableOutputStream(sftp.put(relativePath,ChannelSftp.OVERWRITE),session,sftp,closeSession);
  }
 catch (  Exception e) {
    throw new IoException(e);
  }
}",0.9602272727272728
167374,"@Override public void copyToDir(String fromFilePath,String toDirPath,boolean closeSession){
  ChannelSftp uploadSftp=null;
  FileInfo fileInfo=new FileInfo(fromFilePath,false,new java.util.Date().getTime(),-1);
  InputStream inputStream=null;
  try {
    uploadSftp=openConnectedChannel(CHANNEL_1);
    uploadSftp.cd(basePath);
    if (!toDirPath.endsWith(""String_Node_Str"")) {
      toDirPath+=""String_Node_Str"";
    }
    inputStream=getInputStream(fromFilePath,true);
    uploadSftp.put(inputStream,toDirPath + fileInfo.getName());
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@Override public void copyToDir(String fromFilePath,String toDirPath,boolean closeSession){
  ChannelSftp uploadSftp=null;
  FileInfo fileInfo=new FileInfo(fromFilePath,false,new java.util.Date().getTime(),-1);
  InputStream inputStream=null;
  try {
    uploadSftp=(closeSession) ? openConnectedChannel() : openConnectedChannel(CHANNEL_1);
    uploadSftp.cd(basePath);
    if (!toDirPath.endsWith(""String_Node_Str"")) {
      toDirPath+=""String_Node_Str"";
    }
    inputStream=getInputStream(fromFilePath,true);
    uploadSftp.put(inputStream,toDirPath + fileInfo.getName());
  }
 catch (  Exception e) {
    throw new IoException(""String_Node_Str"",e.getMessage());
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.9704641350210972
167375,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof TextMessage) {
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
    int headerRowsToSkip=inputMessage.getHeader().getSequenceNumber() == 1 ? numberOfHeaderLinesToSkip : 0;
    try {
      int rowCount=0;
      if (inputRows != null) {
        for (        String inputRow : inputRows) {
          if (headerRowsToSkip == 0) {
            if (rowCount + numberOfFooterLinesToSkip < inputRows.size()) {
              EntityData data=processInputRow(inputMessage,inputRow);
              if (data != null) {
                getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
                outputPayload.add(data);
              }
            }
          }
 else {
            headerRowsToSkip--;
          }
          rowCount++;
        }
      }
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
    callback.sendEntityDataMessage(null,outputPayload);
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof TextMessage) {
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
    int headerRowsToSkip=inputMessage.getHeader().getSequenceNumber() == 0 ? numberOfHeaderLinesToSkip : 0;
    try {
      int rowCount=0;
      if (inputRows != null) {
        for (        String inputRow : inputRows) {
          if (headerRowsToSkip == 0) {
            if (rowCount + numberOfFooterLinesToSkip < inputRows.size()) {
              EntityData data=processInputRow(inputMessage,inputRow);
              if (data != null) {
                getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
                outputPayload.add(data);
              }
            }
          }
 else {
            headerRowsToSkip--;
          }
          rowCount++;
        }
      }
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
    callback.sendEntityDataMessage(null,outputPayload);
  }
}",0.9991251093613298
167376,"private Message createMessage(Message newMessage,Map<String,Serializable> headerSettings){
  ComponentStatistics statistics=componentContext.getComponentStatistics();
  MessageHeader header=newMessage.getHeader();
  Message inputMessage=currentInputMessages.get(ThreadUtils.getThreadNumber(threadCount));
  if (inputMessage != null) {
    header.putAll(inputMessage.getHeader());
  }
  if (headerSettings != null) {
    header.putAll(headerSettings);
  }
  header.setSequenceNumber(statistics.getNumberOutboundMessages(ThreadUtils.getThreadNumber(threadCount)) + 1);
  return newMessage;
}","private Message createMessage(Message newMessage,Map<String,Serializable> headerSettings){
  ComponentStatistics statistics=componentContext.getComponentStatistics();
  MessageHeader header=newMessage.getHeader();
  Message inputMessage=currentInputMessages.get(ThreadUtils.getThreadNumber(threadCount));
  if (inputMessage != null) {
    header.putAll(inputMessage.getHeader());
  }
  if (headerSettings != null) {
    header.putAll(headerSettings);
  }
  header.setSequenceNumber(statistics.getNumberOutboundMessages(ThreadUtils.getThreadNumber(threadCount)));
  return newMessage;
}",0.9965928449744464
167377,"protected Map<Element,Namespace> removeNamespaces(Document document){
  Map<Element,Namespace> namespaces=new HashMap<Element,Namespace>();
  if (ignoreNamespace) {
    namespaces.put(document.getRootElement(),document.getRootElement().getNamespace());
    document.getRootElement().setNamespace(null);
    for (    Element el : document.getRootElement().getDescendants(new ElementFilter())) {
      Namespace nsp=el.getNamespace();
      if (nsp != null) {
        el.setNamespace(null);
        namespaces.put(el,nsp);
      }
    }
  }
  return namespaces;
}","protected Map<Element,Namespace> removeNamespaces(Document document){
  Map<Element,Namespace> namespaces=new HashMap<Element,Namespace>();
  if (ignoreNamespace && document.hasRootElement()) {
    namespaces.put(document.getRootElement(),document.getRootElement().getNamespace());
    document.getRootElement().setNamespace(null);
    for (    Element el : document.getRootElement().getDescendants(new ElementFilter())) {
      Namespace nsp=el.getNamespace();
      if (nsp != null) {
        el.setNamespace(null);
        namespaces.put(el,nsp);
      }
    }
  }
  return namespaces;
}",0.9748045178105996
167378,"void handleEntityListPayload(EntityDataMessage inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Map<String,ArrayList<EntityData>> outboundMessages=new HashMap<String,ArrayList<EntityData>>();
  ArrayList<EntityData> inputDatas=inputMessage.getPayload();
  for (  EntityData entityData : inputDatas) {
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    bindEntityData(scriptEngine,inputMessage,entityData);
    if (routes != null) {
      for (      Route route : routes) {
        try {
          if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
            getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
            ArrayList<EntityData> outboundPayload=outboundMessages.get(route.getTargetStepId());
            if (outboundPayload == null) {
              outboundPayload=new ArrayList<EntityData>();
              outboundMessages.put(route.getTargetStepId(),outboundPayload);
            }
            if (outboundPayload.size() >= rowsPerMessage) {
              outboundMessages.remove(route.getTargetStepId());
              callback.sendEntityDataMessage(null,outboundPayload,route.getTargetStepId());
              targetStepsThatNeedControlMessages.add(route.getTargetStepId());
            }
            outboundPayload.add(entityData.copy());
            if (onlyRouteFirstMatch) {
              break;
            }
          }
        }
 catch (        ScriptException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  for (  String targetFlowStepId : outboundMessages.keySet()) {
    callback.sendEntityDataMessage(null,outboundMessages.get(targetFlowStepId),targetFlowStepId);
    targetStepsThatNeedControlMessages.add(targetFlowStepId);
  }
}","void handleEntityListPayload(EntityDataMessage inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Map<String,ArrayList<EntityData>> outboundMessages=new HashMap<String,ArrayList<EntityData>>();
  ArrayList<EntityData> inputDatas=inputMessage.getPayload();
  for (  EntityData entityData : inputDatas) {
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    bindEntityData(scriptEngine,inputMessage,entityData);
    if (routes != null) {
      for (      Route route : routes) {
        try {
          if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
            ArrayList<EntityData> outboundPayload=outboundMessages.get(route.getTargetStepId());
            if (outboundPayload == null) {
              outboundPayload=new ArrayList<EntityData>();
              outboundMessages.put(route.getTargetStepId(),outboundPayload);
            }
            if (outboundPayload.size() >= rowsPerMessage) {
              outboundMessages.remove(route.getTargetStepId());
              callback.sendEntityDataMessage(null,outboundPayload,route.getTargetStepId());
              targetStepsThatNeedControlMessages.add(route.getTargetStepId());
            }
            outboundPayload.add(entityData.copy());
            if (onlyRouteFirstMatch) {
              break;
            }
          }
        }
 catch (        ScriptException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  for (  String targetFlowStepId : outboundMessages.keySet()) {
    callback.sendEntityDataMessage(null,outboundMessages.get(targetFlowStepId),targetFlowStepId);
    targetStepsThatNeedControlMessages.add(targetFlowStepId);
  }
}",0.9758179231863442
167379,"protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  ChannelSftp channel=channels[channelId];
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
    channels[channelId]=channel;
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  return channel;
}","protected ChannelSftp openConnectedChannel(int channelId) throws JSchException {
  Session session=openSession();
  Map<Integer,ChannelSftp> channels=threadChannels.get();
  if (channels == null) {
    channels=new HashMap<Integer,ChannelSftp>();
  }
  ChannelSftp channel=channels.get(channelId);
  if (channel == null || channel.isClosed()) {
    channel=(ChannelSftp)session.openChannel(""String_Node_Str"");
  }
  if (!channel.isConnected()) {
    channel.connect();
  }
  channels.put(channelId,channel);
  threadChannels.set(channels);
  return channel;
}",0.5153764581124072
167380,"public SftpDirectory(Resource resource,String server,Integer port,String user,String password,String basePath,Integer connectionTimeout,boolean mustExist){
  this.server=server;
  this.port=port;
  this.user=user;
  this.password=password;
  this.basePath=basePath;
  this.connectionTimeout=connectionTimeout;
  this.mustExist=mustExist;
  this.threadSession=new ThreadLocal<Session>();
}","public SftpDirectory(Resource resource,String server,Integer port,String user,String password,String basePath,Integer connectionTimeout,boolean mustExist){
  this.server=server;
  this.port=port;
  this.user=user;
  this.password=password;
  this.basePath=basePath;
  this.connectionTimeout=connectionTimeout;
  this.mustExist=mustExist;
  this.threadSession=new ThreadLocal<Session>();
  this.threadChannels=new ThreadLocal<Map<Integer,ChannelSftp>>();
}",0.9205219454329776
167381,"protected void addInputModelCombo(XMLComponent componentDefintion,FormLayout formLayout,final Component component){
  FlowStep step=getSingleFlowStep();
  if (step != null) {
    String projectVersionId=step.getComponent().getProjectVersionId();
    if (componentDefintion.getInputMessageType() == MessageType.ENTITY || componentDefintion.getInputMessageType() == MessageType.ANY) {
      final AbstractSelect combo=new ComboBox(""String_Node_Str"");
      combo.setImmediate(true);
      combo.setNullSelectionAllowed(true);
      List<ModelName> models=context.getConfigurationService().findModelsInProject(projectVersionId);
      if (models != null) {
        for (        ModelName model : models) {
          combo.addItem(model);
          if (isNotBlank(component.getInputModelId()) && component.getInputModelId().equals(model.getId())) {
            combo.setValue(model);
          }
        }
      }
      combo.addValueChangeListener(new ValueChangeListener(){
        private static final long serialVersionUID=1L;
        @Override public void valueChange(        ValueChangeEvent event){
          ModelName model=(ModelName)combo.getValue();
          if (model != null) {
            component.setInputModel(context.getConfigurationService().findModel(model.getId()));
          }
 else {
            component.setInputModel(null);
          }
          context.getConfigurationService().save((AbstractObject)component);
          setSource(value);
        }
      }
);
      formLayout.addComponent(combo);
    }
  }
}","protected void addInputModelCombo(XMLComponent componentDefintion,FormLayout formLayout,final Component component){
  FlowStep step=getSingleFlowStep();
  if (step != null) {
    String projectVersionId=step.getComponent().getProjectVersionId();
    if (componentDefintion.getInputMessageType() == MessageType.ENTITY || componentDefintion.getInputMessageType() == MessageType.ANY) {
      final AbstractSelect combo=new ComboBox(""String_Node_Str"");
      combo.setImmediate(true);
      combo.setNullSelectionAllowed(true);
      List<ModelName> models=context.getConfigurationService().findModelsInProject(projectVersionId);
      if (models != null) {
        for (        ModelName model : models) {
          combo.addItem(model);
          if (isNotBlank(component.getInputModelId()) && component.getInputModelId().equals(model.getId())) {
            combo.setValue(model);
          }
        }
      }
      combo.addValueChangeListener(new ValueChangeListener(){
        private static final long serialVersionUID=1L;
        @Override public void valueChange(        ValueChangeEvent event){
          ModelName model=(ModelName)combo.getValue();
          if (model != null) {
            component.setInputModel(context.getConfigurationService().findModel(model.getId()));
          }
 else {
            component.setInputModel(null);
          }
          if (componentDefintion.isInputOutputModelsMatch()) {
            component.setOutputModel(component.getInputModel());
          }
          context.getConfigurationService().save((AbstractObject)component);
          setSource(value);
        }
      }
);
      formLayout.addComponent(combo);
    }
  }
}",0.956386292834891
167382,"private boolean fileExists(ChannelSftp sftp,String filePath){
  try {
    SftpATTRS attributes=sftp.stat(filePath);
    if (attributes != null) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  SftpException e) {
    log.error(""String_Node_Str"",e.getMessage());
    return false;
  }
}","private boolean fileExists(ChannelSftp sftp,String filePath){
  try {
    SftpATTRS attributes=sftp.stat(filePath);
    if (attributes != null) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  SftpException e) {
    log.error(String.format(""String_Node_Str"",filePath,e.getMessage()));
    return false;
  }
}",0.8850931677018633
167383,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public List<FileInfo> listFiles(boolean closeSession,String... relativePaths){
  ChannelSftp sftp=null;
  String separator=null;
  List<FileInfo> fileInfoList=new ArrayList<>();
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    for (    String relativePath : relativePaths) {
      if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
        if (StringUtils.endsWith(relativePath,""String_Node_Str"")) {
          separator=""String_Node_Str"";
        }
 else {
          separator=""String_Node_Str"";
        }
        if (relativePath.isEmpty()) {
          relativePath=""String_Node_Str"";
        }
        Vector list=new Vector();
        try {
          list.addAll(sftp.ls(relativePath));
        }
 catch (        SftpException e) {
          log.warn(""String_Node_Str"" + e.getMessage());
        }
        for (        Object object : list) {
          LsEntry entry=(LsEntry)object;
          if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
            fileInfoList.add(new FileInfo(relativePath + separator + entry.getFilename(),entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize()));
          }
        }
      }
    }
    return fileInfoList;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public List<FileInfo> listFiles(boolean closeSession,String... relativePaths){
  ChannelSftp sftp=null;
  String separator=null;
  List<FileInfo> fileInfoList=new ArrayList<>();
  try {
    sftp=openConnectedChannel(CHANNEL_1);
    sftp.cd(basePath);
    for (    String relativePath : relativePaths) {
      if (!relativePath.equals(""String_Node_Str"") && !relativePath.equals(""String_Node_Str"")) {
        if (relativePath.isEmpty() || StringUtils.endsWith(relativePath,""String_Node_Str"")) {
          separator=""String_Node_Str"";
        }
 else {
          separator=""String_Node_Str"";
        }
        Vector list=new Vector();
        try {
          list.addAll(sftp.ls(relativePath.isEmpty() ? ""String_Node_Str"" : relativePath));
        }
 catch (        SftpException e) {
          log.warn(""String_Node_Str"" + e.getMessage());
        }
        for (        Object object : list) {
          LsEntry entry=(LsEntry)object;
          if (!entry.getFilename().equals(""String_Node_Str"") && !entry.getFilename().equals(""String_Node_Str"")) {
            fileInfoList.add(new FileInfo(relativePath + separator + entry.getFilename(),entry.getAttrs().isDir(),entry.getAttrs().getMTime(),entry.getAttrs().getSize()));
          }
        }
      }
    }
    return fileInfoList;
  }
 catch (  Exception e) {
    throw new RuntimeException(String.format(""String_Node_Str"",e.getMessage()),e);
  }
 finally {
    if (closeSession) {
      close();
    }
  }
}",0.8336046890263757
167384,"@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=openConnectedChannel(CHANNEL_IN);
    sftp.cd(basePath);
    if (mustExist && !fileExists(sftp,relativePath)) {
      throw new IoException(""String_Node_Str"",relativePath);
    }
    return new CloseableInputStreamStream(sftp.get(relativePath),session,sftp,closeSession);
  }
 catch (  Exception e) {
    if (((SftpException)e).id != 2) {
      throw new IoException(""String_Node_Str"",e.getMessage());
    }
 else {
      return null;
    }
  }
}","@Override public InputStream getInputStream(String relativePath,boolean mustExist,boolean closeSession){
  Session session=null;
  ChannelSftp sftp=null;
  try {
    session=openSession();
    sftp=openConnectedChannel(CHANNEL_IN);
    sftp.cd(basePath);
    if (mustExist && !fileExists(sftp,relativePath)) {
      throw new IoException(""String_Node_Str"",relativePath);
    }
    return new CloseableInputStreamStream(sftp.get(relativePath),session,sftp,closeSession);
  }
 catch (  Exception e) {
    if (e instanceof IOException || (e instanceof SftpException && ((SftpException)e).id != 2)) {
      throw new IoException(""String_Node_Str"",e.getMessage());
    }
 else {
      return null;
    }
  }
}",0.9554896142433236
167385,"@ExceptionHandler(Exception.class) @ResponseBody public RestError handleError(Exception ex,HttpServletRequest req){
  log.error(""String_Node_Str"",ex);
  int httpErrorCode=500;
  Annotation annotation=ex.getClass().getAnnotation(ResponseStatus.class);
  if (annotation != null) {
    httpErrorCode=((ResponseStatus)annotation).value().value();
  }
  return new RestError(ex,httpErrorCode);
}","@ExceptionHandler(Exception.class) @ResponseBody public RestError handleError(Exception ex,HttpServletRequest req,HttpServletResponse resp){
  log.error(""String_Node_Str"",ex);
  int httpErrorCode=500;
  Annotation annotation=ex.getClass().getAnnotation(ResponseStatus.class);
  if (annotation != null) {
    httpErrorCode=((ResponseStatus)annotation).value().value();
  }
  resp.setStatus(httpErrorCode);
  return new RestError(ex,httpErrorCode);
}",0.9307875894988068
167386,"protected void addComponent(int x,int y,Component component){
  component.setName(component.getType() + ""String_Node_Str"" + (countComponentsOfType(component.getType()) + 1));
  component.setProjectVersionId(flow.getProjectVersionId());
  FlowStep flowStep=new FlowStep(component);
  flowStep.setX(x);
  flowStep.setY(y);
  flowStep.setFlowId(flow.getId());
  flow.getFlowSteps().add(flowStep);
  context.getConfigurationService().save(flowStep);
  selected.add(flowStep);
  redrawFlow();
  propertySheet.setSource(flowStep);
  designNavigator.refresh();
}","protected void addComponent(int x,int y,Component component){
  component.setName(component.getType() + ""String_Node_Str"" + (countComponentsOfType(component.getType()) + 1));
  component.setProjectVersionId(flow.getProjectVersionId());
  FlowStep flowStep=new FlowStep(component);
  flowStep.setX(x);
  flowStep.setY(y);
  flowStep.setFlowId(flow.getId());
  flow.getFlowSteps().add(flowStep);
  context.getConfigurationService().save(flowStep);
  selected=new ArrayList<AbstractObject>(1);
  selected.add(flowStep);
  propertySheet.setSource(selected);
  redrawFlow();
  designNavigator.refresh();
}",0.8363636363636363
167387,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (scriptEngine == null) {
    ScriptEngineManager factory=new ScriptEngineManager();
    scriptEngine=factory.getEngineByName(""String_Node_Str"");
  }
  totalTime=0;
  if (inputMessage instanceof EntityDataMessage) {
    Model inputModel=getComponent().getInputModel();
    List<EntityData> inDatas=((EntityDataMessage)inputMessage).getPayload();
    ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas != null ? inDatas.size() : 0);
    if (inDatas != null) {
      for (      EntityData inData : inDatas) {
        EntityData outData=new EntityData();
        outData.setChangeType(inData.getChangeType());
        outDatas.add(outData);
        Set<String> attributeIds=new HashSet<String>();
        Set<ModelEntity> processedEntities=new HashSet<ModelEntity>();
        for (        String attributeId : inData.keySet()) {
          ModelAttribute attribute=inputModel.getAttributeById(attributeId);
          if (attribute != null) {
            ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
            if (entity != null && !processedEntities.contains(entity)) {
              List<ModelAttribute> attributes=entity.getModelAttributes();
              for (              ModelAttribute modelAttribute : attributes) {
                attributeIds.add(modelAttribute.getId());
              }
              processedEntities.add(entity);
            }
          }
        }
        for (        String attributeId : attributeIds) {
          String transform=transformsByAttributeId.get(attributeId);
          Object value=inData.get(attributeId);
          if (isNotBlank(transform)) {
            ModelAttribute attribute=inputModel.getAttributeById(attributeId);
            ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
            ModelAttributeScriptHelper helper=helpers.get(attribute.getId());
            if (helper == null) {
              long ts=System.currentTimeMillis();
              scriptEngine.put(""String_Node_Str"",value);
              scriptEngine.put(""String_Node_Str"",entity);
              scriptEngine.put(""String_Node_Str"",attribute);
              scriptEngine.put(""String_Node_Str"",context);
              try {
                String importString=""String_Node_Str"";
                String code=String.format(""String_Node_Str"",transform);
                helper=(ModelAttributeScriptHelper)scriptEngine.eval(importString + code);
                helpers.put(attribute.getId(),helper);
              }
 catch (              ScriptException e) {
                throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ value.toString()+ ""String_Node_Str""+ e.getCause().getMessage(),e);
              }
              log.debug(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
            }
            helper.setData(inData);
            helper.setValue(value);
            helper.setMessage(inputMessage);
            long ts=System.currentTimeMillis();
            value=helper.eval();
            totalTime+=(System.currentTimeMillis() - ts);
            totalCalls++;
          }
          if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
            outData.put(attributeId,value);
          }
        }
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      }
    }
    callback.sendEntityDataMessage(null,outDatas);
    if (totalCalls > 0) {
      log.debug(""String_Node_Str"" + (totalTime / totalCalls) + ""String_Node_Str"");
    }
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (scriptEngine == null) {
    ScriptEngineManager factory=new ScriptEngineManager();
    scriptEngine=factory.getEngineByName(""String_Node_Str"");
  }
  totalTime=0;
  if (inputMessage instanceof EntityDataMessage) {
    Model inputModel=getComponent().getInputModel();
    List<EntityData> inDatas=((EntityDataMessage)inputMessage).getPayload();
    ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas != null ? inDatas.size() : 0);
    if (inDatas != null) {
      for (      EntityData inData : inDatas) {
        EntityData outData=new EntityData();
        outData.setChangeType(inData.getChangeType());
        outDatas.add(outData);
        Set<String> attributeIds=new HashSet<String>();
        Set<ModelEntity> processedEntities=new HashSet<ModelEntity>();
        for (        String attributeId : inData.keySet()) {
          ModelAttribute attribute=inputModel.getAttributeById(attributeId);
          if (attribute != null) {
            ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
            if (entity != null && !processedEntities.contains(entity)) {
              List<ModelAttribute> attributes=entity.getModelAttributes();
              for (              ModelAttribute modelAttribute : attributes) {
                attributeIds.add(modelAttribute.getId());
              }
              processedEntities.add(entity);
            }
          }
        }
        for (        String attributeId : attributeIds) {
          String transform=transformsByAttributeId.get(attributeId);
          Object value=inData.get(attributeId);
          if (isNotBlank(transform)) {
            ModelAttribute attribute=inputModel.getAttributeById(attributeId);
            ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
            ModelAttributeScriptHelper helper=helpers.get(attribute.getId());
            if (helper == null) {
              long ts=System.currentTimeMillis();
              scriptEngine.put(""String_Node_Str"",entity);
              scriptEngine.put(""String_Node_Str"",attribute);
              scriptEngine.put(""String_Node_Str"",context);
              try {
                String importString=""String_Node_Str"";
                String code=String.format(""String_Node_Str"",transform);
                helper=(ModelAttributeScriptHelper)scriptEngine.eval(importString + code);
                helpers.put(attribute.getId(),helper);
              }
 catch (              ScriptException e) {
                throw new RuntimeException(""String_Node_Str"" + attribute.getName() + ""String_Node_Str""+ value.toString()+ ""String_Node_Str""+ e.getCause().getMessage(),e);
              }
              log.debug(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
            }
            helper.setData(inData);
            helper.setValue(value);
            helper.setMessage(inputMessage);
            long ts=System.currentTimeMillis();
            value=helper.eval();
            totalTime+=(System.currentTimeMillis() - ts);
            totalCalls++;
          }
          if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
            outData.put(attributeId,value);
          }
        }
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      }
    }
    callback.sendEntityDataMessage(null,outDatas);
    if (totalCalls > 0) {
      log.debug(""String_Node_Str"" + (totalTime / totalCalls) + ""String_Node_Str"");
    }
  }
}",0.9921455146754856
167388,"protected void newProject(){
  deselectAll();
  Project project=new Project();
  project.setName(""String_Node_Str"");
  ProjectVersion version=new ProjectVersion();
  version.setVersionLabel(""String_Node_Str"");
  version.setProject(project);
  project.getProjectVersions().add(version);
  IConfigurationService configurationService=context.getConfigurationService();
  configurationService.save(project);
  configurationService.save(version);
  ProjectVersionItem item=new ProjectVersionItem(project,version);
  grid.getContainerDataSource().addItem(item);
  grid.select(item);
  edit();
}","protected void newProject(){
  deselectAll();
  Project project=new Project();
  project.setName(""String_Node_Str"");
  ProjectVersion version=new ProjectVersion();
  version.setVersionLabel(""String_Node_Str"");
  version.setProject(project);
  project.getProjectVersions().add(version);
  IConfigurationService configurationService=context.getConfigurationService();
  configurationService.save(project);
  configurationService.save(version);
  ProjectVersionItem item=new ProjectVersionItem(project,version);
  grid.getContainerDataSource().addItem(item);
  grid.select(item);
}",0.9914236706689536
167389,"public void openAdvancedEditor(){
  if (value instanceof FlowStep) {
    FlowStep flowStep=(FlowStep)value;
    String type=flowStep.getComponent().getType();
    IComponentEditPanel panel=context.getUiFactory().create(type);
    if (panel != null) {
      if (panel instanceof IFlowStepAware) {
        Flow flow=context.getConfigurationService().findFlow(flowStep.getFlowId());
        ((IFlowStepAware)panel).makeAwareOf(flowStep,flow);
      }
      panel.init(flowStep.getComponent(),context,this);
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,panel);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void openAdvancedEditor(){
  FlowStep flowStep=null;
  if (value instanceof List<?>) {
    List<Object> l=(List<Object>)value;
    if (l.size() == 1) {
      if (l.get(0) instanceof FlowStep) {
        flowStep=(FlowStep)l.get(0);
      }
    }
  }
  if (flowStep != null) {
    String type=flowStep.getComponent().getType();
    IComponentEditPanel panel=context.getUiFactory().create(type);
    if (panel != null) {
      if (panel instanceof IFlowStepAware) {
        Flow flow=context.getConfigurationService().findFlow(flowStep.getFlowId());
        ((IFlowStepAware)panel).makeAwareOf(flowStep,flow);
      }
      panel.init(flowStep.getComponent(),context,this);
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,panel);
    }
  }
}",0.815547703180212
167390,"protected boolean hasAdvancedEditor(){
  if (value instanceof FlowStep) {
    FlowStep flowStep=(FlowStep)value;
    String type=flowStep.getComponent().getType();
    XMLComponentUI definition=context.getUiFactory().getDefinition(type);
    return definition != null && definition.getClassName() != null;
  }
 else {
    return false;
  }
}","@SuppressWarnings(""String_Node_Str"") protected boolean hasAdvancedEditor(){
  FlowStep flowStep=null;
  if (value instanceof List<?>) {
    List<Object> l=(List<Object>)value;
    if (l.size() == 1) {
      if (l.get(0) instanceof FlowStep) {
        flowStep=(FlowStep)l.get(0);
      }
    }
  }
  if (flowStep != null) {
    String type=flowStep.getComponent().getType();
    XMLComponentUI definition=context.getUiFactory().getDefinition(type);
    return definition != null && definition.getClassName() != null;
  }
 else {
    return false;
  }
}",0.7054871220604704
167391,"@Override protected void start(){
  TypedProperties properties=getTypedProperties();
  expectedControlMessageCount=properties.getInt(EXPECTED_CONTROL_MESSAGE_COUNT,expectedEntityMessageCount);
  expectedTextMessageCount=properties.getInt(EXPECTED_TEXT_MESSAGE_COUNT,expectedTextMessageCount);
  expectedEntityMessageCount=properties.getInt(EXPECTED_ENTITY_MESSAGE_COUNT,expectedControlMessageCount);
  expectedEmptyPayloadMessageCount=properties.getInt(EXPECTED_EMPTY_PAYLOAD_MESSAGE_COUNT,expectedEmptyPayloadMessageCount);
  expectedBinaryMessageCount=properties.getInt(EXPECTED_BINARY_MESSAGE_COUNT,expectedBinaryMessageCount);
  expectedSqlCount=properties.getInt(EXPECTED_SQL_COUNT,expectedSqlCount);
  sql=properties.get(ASSERT_SQL);
  dataSourceId=properties.get(ASSERT_SQL_DATASOURCE);
}","@Override protected void start(){
  TypedProperties properties=getTypedProperties();
  expectedControlMessageCount=properties.getInt(EXPECTED_CONTROL_MESSAGE_COUNT,expectedEntityMessageCount);
  expectedTextMessageCount=properties.getInt(EXPECTED_TEXT_MESSAGE_COUNT,expectedTextMessageCount);
  expectedEntityMessageCount=properties.getInt(EXPECTED_ENTITY_MESSAGE_COUNT,expectedControlMessageCount);
  expectedEmptyPayloadMessageCount=properties.getInt(EXPECTED_EMPTY_PAYLOAD_MESSAGE_COUNT,expectedEmptyPayloadMessageCount);
  expectedBinaryMessageCount=properties.getInt(EXPECTED_BINARY_MESSAGE_COUNT,expectedBinaryMessageCount);
  expectedSqlCount=properties.getInt(EXPECTED_SQL_COUNT,expectedSqlCount);
  expectedEntityCountPerMessage=properties.getLong(EXPECTED_ENTITY_COUNT_PER_MESSAGE);
  sql=properties.get(ASSERT_SQL);
  dataSourceId=properties.get(ASSERT_SQL_DATASOURCE);
}",0.9481216457960644
167392,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof ControlMessage) {
    controlMessageCount++;
  }
 else   if (inputMessage instanceof EntityDataMessage) {
    entityMessageCount++;
  }
 else   if (inputMessage instanceof TextMessage) {
    textMessageCount++;
  }
 else   if (inputMessage instanceof BinaryMessage) {
    binaryMessageCount++;
  }
 else {
    emptyPayloadMessageCount++;
  }
  callback.forward(inputMessage);
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof ControlMessage) {
    controlMessageCount++;
  }
 else   if (inputMessage instanceof EntityDataMessage) {
    ArrayList<EntityData> payload=((EntityDataMessage)inputMessage).getPayload();
    entityCountPerMessage=payload.size();
    entityMessageCount++;
  }
 else   if (inputMessage instanceof TextMessage) {
    textMessageCount++;
  }
 else   if (inputMessage instanceof BinaryMessage) {
    binaryMessageCount++;
  }
 else {
    emptyPayloadMessageCount++;
  }
  callback.forward(inputMessage);
}",0.8940170940170941
167393,"@Override public void flowCompleted(boolean cancelled){
  StringBuilder assertFailed=new StringBuilder();
  if (expectedControlMessageCount != controlMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedControlMessageCount,controlMessageCount));
  }
  if (expectedEmptyPayloadMessageCount != emptyPayloadMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEmptyPayloadMessageCount,emptyPayloadMessageCount));
  }
  if (expectedEntityMessageCount != entityMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityMessageCount,entityMessageCount));
  }
  if (expectedTextMessageCount != textMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextMessageCount,textMessageCount));
  }
  if (expectedBinaryMessageCount != binaryMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedBinaryMessageCount,binaryMessageCount));
  }
  if (isNotBlank(sql)) {
    IResourceRuntime targetResource=context.getDeployedResources().get(dataSourceId);
    DataSource ds=targetResource.reference();
    JdbcTemplate template=new JdbcTemplate(ds);
    int sqlCount=template.queryForObject(sql,Integer.class);
    if (expectedSqlCount != sqlCount) {
      assertFailed.append(String.format(""String_Node_Str"",expectedSqlCount,sqlCount));
    }
  }
  if (assertFailed.length() > 0) {
    throw new AssertException(assertFailed.toString());
  }
}","@Override public void flowCompleted(boolean cancelled){
  StringBuilder assertFailed=new StringBuilder();
  if (expectedControlMessageCount != controlMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedControlMessageCount,controlMessageCount));
  }
  if (expectedEmptyPayloadMessageCount != emptyPayloadMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEmptyPayloadMessageCount,emptyPayloadMessageCount));
  }
  if (expectedEntityMessageCount != entityMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityMessageCount,entityMessageCount));
  }
  if (expectedTextMessageCount != textMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedTextMessageCount,textMessageCount));
  }
  if (expectedBinaryMessageCount != binaryMessageCount) {
    assertFailed.append(String.format(""String_Node_Str"",expectedBinaryMessageCount,binaryMessageCount));
  }
  if (expectedEntityCountPerMessage.intValue() != -1 && expectedEntityCountPerMessage.intValue() != entityCountPerMessage) {
    assertFailed.append(String.format(""String_Node_Str"",expectedEntityCountPerMessage.intValue(),entityCountPerMessage));
  }
  if (isNotBlank(sql)) {
    IResourceRuntime targetResource=context.getDeployedResources().get(dataSourceId);
    DataSource ds=targetResource.reference();
    JdbcTemplate template=new JdbcTemplate(ds);
    int sqlCount=template.queryForObject(sql,Integer.class);
    if (expectedSqlCount != sqlCount) {
      assertFailed.append(String.format(""String_Node_Str"",expectedSqlCount,sqlCount));
    }
  }
  if (assertFailed.length() > 0) {
    throw new AssertException(assertFailed.toString());
  }
}",0.9208451592557552
167394,"@Override protected void start(){
  super.start();
  TypedProperties properties=getTypedProperties();
  optimizeForSpeed=properties.is(""String_Node_Str"");
  rowsPerMessage=properties.getInt(ROWS_PER_MESSAGE);
  Model model=getComponent().getOutputModel();
  if (model == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  entitySettings=new ArrayList<XmlParser.XmlFormatterEntitySetting>();
  Component component=getComponent();
  for (  ComponentEntitySetting compEntitySetting : component.getEntitySettings()) {
    if (compEntitySetting.getName().equals(XML_FORMATTER_XPATH)) {
      XPathExpression<?> expression=XPathFactory.instance().compile(compEntitySetting.getValue());
      XmlFormatterEntitySetting entitySetting=new XmlFormatterEntitySetting(compEntitySetting,expression);
      entitySettings.add(entitySetting);
      entitySettingsByPath.put(compEntitySetting.getValue(),entitySetting);
      List<ComponentAttributeSetting> attributeSettings=component.getAttributeSettingsFor(entitySetting.getSetting().getEntityId());
      for (      ComponentAttributeSetting componentAttributeSetting : attributeSettings) {
        if (componentAttributeSetting.getName().equals(XML_FORMATTER_XPATH)) {
          expression=XPathFactory.instance().compile(componentAttributeSetting.getValue());
          entitySetting.getAttributeSettings().add(new XmlFormatterAttributeSetting(componentAttributeSetting,expression));
        }
      }
    }
  }
  if (entitySettings.size() == 0) {
    throw new MisconfiguredException(""String_Node_Str"");
  }
}","@Override protected void start(){
  super.start();
  TypedProperties properties=getTypedProperties();
  optimizeForSpeed=properties.is(""String_Node_Str"");
  rowsPerMessage=properties.getInt(ROWS_PER_MESSAGE);
  Model model=getComponent().getOutputModel();
  if (model == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  List<XmlFormatterEntitySetting> entitySettingsForPath;
  Component component=getComponent();
  for (  ComponentEntitySetting compEntitySetting : component.getEntitySettings()) {
    if (compEntitySetting.getName().equals(XML_FORMATTER_XPATH)) {
      XPathExpression<?> expression=XPathFactory.instance().compile(compEntitySetting.getValue());
      XmlFormatterEntitySetting entitySetting=new XmlFormatterEntitySetting(compEntitySetting,expression);
      entitySettingsForPath=entitySettingsByPath.get(compEntitySetting.getValue());
      if (entitySettingsForPath == null) {
        entitySettingsForPath=new ArrayList<XmlParser.XmlFormatterEntitySetting>();
        entitySettingsByPath.put(compEntitySetting.getValue(),entitySettingsForPath);
      }
      entitySettingsForPath.add(entitySetting);
      entitySettings.add(entitySetting);
      List<ComponentAttributeSetting> attributeSettings=component.getAttributeSettingsFor(entitySetting.getSetting().getEntityId());
      for (      ComponentAttributeSetting componentAttributeSetting : attributeSettings) {
        if (componentAttributeSetting.getName().equals(XML_FORMATTER_XPATH)) {
          expression=XPathFactory.instance().compile(componentAttributeSetting.getValue());
          entitySetting.getAttributeSettings().add(new XmlFormatterAttributeSetting(componentAttributeSetting,expression));
        }
      }
    }
  }
  if (entitySettings.size() == 0) {
    throw new MisconfiguredException(""String_Node_Str"");
  }
}",0.8785651279035578
167395,"protected void handleUsingPullParser(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  try {
    Map<String,String> currentDataAtLevel=new HashMap<>();
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> payload=new ArrayList<EntityData>();
    if (inputRows != null) {
      for (      String xml : inputRows) {
        List<StringBuilder> paths=new ArrayList<>();
        parser.setInput(new StringReader(xml));
        int eventType=parser.getEventType();
        while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
            for (            StringBuilder path : paths) {
              path.append(""String_Node_Str"").append(parser.getName());
            }
          StringBuilder shortPath=new StringBuilder(""String_Node_Str"").append(parser.getName());
        paths.add(shortPath);
      addAttributes(parser,paths,currentDataAtLevel);
    break;
case XmlPullParser.END_TAG:
  EntityData data=processCurrentLevel(paths.get(0).toString(),currentDataAtLevel);
if (data != null) {
  payload.add(data);
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
}
String removed=paths.remove(paths.size() - 1).toString();
Iterator<Entry<String,String>> entries=currentDataAtLevel.entrySet().iterator();
while (entries.hasNext()) {
Entry<String,String> entry=entries.next();
if (entry.getKey().startsWith(removed)) {
entries.remove();
}
}
for (StringBuilder path : paths) {
int index=path.lastIndexOf(""String_Node_Str"");
if (index >= 0) {
path.replace(index,path.length(),""String_Node_Str"");
}
}
break;
case XmlPullParser.TEXT:
String text=parser.getText();
for (StringBuilder path : paths) {
currentDataAtLevel.put(String.format(""String_Node_Str"",path),text);
currentDataAtLevel.put(path.toString(),text);
}
break;
}
if (payload.size() > rowsPerMessage) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
eventType=parser.next();
}
}
if (payload.size() > 0) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
}
}
 catch (RuntimeException ex) {
throw ex;
}
catch (Exception e) {
throw new RuntimeException(e);
}
}","protected void handleUsingPullParser(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  try {
    Map<String,String> currentDataAtLevel=new HashMap<>();
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> payload=new ArrayList<EntityData>();
    if (inputRows != null) {
      for (      String xml : inputRows) {
        List<StringBuilder> paths=new ArrayList<>();
        parser.setInput(new StringReader(xml));
        int eventType=parser.getEventType();
        while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
            for (            StringBuilder path : paths) {
              path.append(""String_Node_Str"").append(parser.getName());
            }
          StringBuilder shortPath=new StringBuilder(""String_Node_Str"").append(parser.getName());
        paths.add(shortPath);
      addAttributes(parser,paths,currentDataAtLevel);
    break;
case XmlPullParser.END_TAG:
  List<EntityData> data=processCurrentLevel(paths.get(0).toString(),currentDataAtLevel);
if (data != null) {
  payload.addAll(data);
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
}
String removed=paths.remove(paths.size() - 1).toString();
Iterator<Entry<String,String>> entries=currentDataAtLevel.entrySet().iterator();
while (entries.hasNext()) {
Entry<String,String> entry=entries.next();
if (entry.getKey().startsWith(removed)) {
entries.remove();
}
}
for (StringBuilder path : paths) {
int index=path.lastIndexOf(""String_Node_Str"");
if (index >= 0) {
path.replace(index,path.length(),""String_Node_Str"");
}
}
break;
case XmlPullParser.TEXT:
String text=parser.getText();
for (StringBuilder path : paths) {
currentDataAtLevel.put(String.format(""String_Node_Str"",path),text);
currentDataAtLevel.put(path.toString(),text);
}
break;
}
if (payload.size() > rowsPerMessage) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
eventType=parser.next();
}
}
if (payload.size() > 0) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
}
}
 catch (RuntimeException ex) {
throw ex;
}
catch (Exception e) {
throw new RuntimeException(e);
}
}",0.9980447534216816
167396,"protected EntityData processCurrentLevel(String path,Map<String,String> currentDataByLevel){
  EntityData data=null;
  XmlFormatterEntitySetting entitySetting=entitySettingsByPath.get(path);
  if (entitySetting != null) {
    data=new EntityData();
    List<XmlFormatterAttributeSetting> attributeSettings=entitySetting.getAttributeSettings();
    for (    XmlFormatterAttributeSetting attributeSetting : attributeSettings) {
      String xpath=attributeSetting.getExpression().getExpression();
      String value=currentDataByLevel.get(xpath);
      if (value != null) {
        data.put(attributeSetting.getSetting().getAttributeId(),value);
      }
    }
  }
  return data;
}","protected List<EntityData> processCurrentLevel(String path,Map<String,String> currentDataByLevel){
  List<EntityData> entitiesData=null;
  EntityData data=null;
  if (entitySettingsByPath.get(path) != null) {
    for (    XmlFormatterEntitySetting entitySetting : entitySettingsByPath.get(path)) {
      if (entitySetting != null) {
        data=new EntityData();
        List<XmlFormatterAttributeSetting> attributeSettings=entitySetting.getAttributeSettings();
        for (        XmlFormatterAttributeSetting attributeSetting : attributeSettings) {
          String xpath=attributeSetting.getExpression().getExpression();
          String value=currentDataByLevel.get(xpath);
          if (value != null) {
            data.put(attributeSetting.getSetting().getAttributeId(),value);
          }
        }
        if (entitiesData == null) {
          entitiesData=new ArrayList<EntityData>();
        }
        entitiesData.add(data);
      }
    }
  }
  return entitiesData;
}",0.7365883062085594
167397,"protected void addAttributes(XmlPullParser parser,StringBuilder shortPath,StringBuilder fullPath,Map<String,String> values){
  int attributeCount=parser.getAttributeCount();
  for (int i=0; i < attributeCount; i++) {
    String attributeName=parser.getAttributeName(i);
    String attributeValue=parser.getAttributeValue(i);
    values.put(String.format(""String_Node_Str"",fullPath,attributeName),attributeValue);
    values.put(String.format(""String_Node_Str"",shortPath,attributeName),attributeValue);
  }
}","protected void addAttributes(XmlPullParser parser,List<StringBuilder> paths,Map<String,String> values){
  int attributeCount=parser.getAttributeCount();
  for (int i=0; i < attributeCount; i++) {
    String attributeName=parser.getAttributeName(i);
    String attributeValue=parser.getAttributeValue(i);
    for (    StringBuilder path : paths) {
      values.put(String.format(""String_Node_Str"",path,attributeName),attributeValue);
    }
  }
}",0.8054679284963197
167398,"protected void handleUsingPullParser(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  try {
    Map<String,String> currentDataAtLevel=new HashMap<>();
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> payload=new ArrayList<EntityData>();
    if (inputRows != null) {
      for (      String xml : inputRows) {
        StringBuilder fullPath=new StringBuilder();
        List<StringBuilder> shortPaths=new ArrayList<>();
        parser.setInput(new StringReader(xml));
        int eventType=parser.getEventType();
        while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
            fullPath.append(""String_Node_Str"").append(parser.getName());
          StringBuilder shortPath=new StringBuilder(""String_Node_Str"").append(parser.getName());
        shortPaths.add(shortPath);
      addAttributes(parser,shortPath,fullPath,currentDataAtLevel);
    break;
case XmlPullParser.END_TAG:
  EntityData data=processCurrentLevel(fullPath.toString(),currentDataAtLevel);
if (data != null) {
  payload.add(data);
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
}
int index=fullPath.lastIndexOf(""String_Node_Str"");
if (index >= 0) {
fullPath.replace(index,fullPath.length(),""String_Node_Str"");
}
break;
case XmlPullParser.TEXT:
StringBuilder path=shortPaths.get(shortPaths.size() - 1);
String text=parser.getText();
currentDataAtLevel.put(String.format(""String_Node_Str"",fullPath),text);
currentDataAtLevel.put(fullPath.toString(),text);
currentDataAtLevel.put(String.format(""String_Node_Str"",path),text);
currentDataAtLevel.put(path.toString(),text);
break;
}
if (payload.size() > rowsPerMessage) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
eventType=parser.next();
}
}
if (payload.size() > 0) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
}
}
 catch (RuntimeException ex) {
throw ex;
}
catch (Exception e) {
throw new RuntimeException(e);
}
}","protected void handleUsingPullParser(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  try {
    Map<String,String> currentDataAtLevel=new HashMap<>();
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    ArrayList<String> inputRows=((TextMessage)inputMessage).getPayload();
    ArrayList<EntityData> payload=new ArrayList<EntityData>();
    if (inputRows != null) {
      for (      String xml : inputRows) {
        List<StringBuilder> paths=new ArrayList<>();
        parser.setInput(new StringReader(xml));
        int eventType=parser.getEventType();
        while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
            for (            StringBuilder path : paths) {
              path.append(""String_Node_Str"").append(parser.getName());
            }
          StringBuilder shortPath=new StringBuilder(""String_Node_Str"").append(parser.getName());
        paths.add(shortPath);
      addAttributes(parser,paths,currentDataAtLevel);
    break;
case XmlPullParser.END_TAG:
  EntityData data=processCurrentLevel(paths.get(0).toString(),currentDataAtLevel);
if (data != null) {
  payload.add(data);
  getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
}
paths.remove(paths.size() - 1);
for (StringBuilder path : paths) {
int index=path.lastIndexOf(""String_Node_Str"");
if (index >= 0) {
path.replace(index,path.length(),""String_Node_Str"");
}
}
break;
case XmlPullParser.TEXT:
String text=parser.getText();
for (StringBuilder path : paths) {
currentDataAtLevel.put(String.format(""String_Node_Str"",path),text);
currentDataAtLevel.put(path.toString(),text);
}
break;
}
if (payload.size() > rowsPerMessage) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
eventType=parser.next();
}
}
if (payload.size() > 0) {
callback.sendEntityDataMessage(null,payload);
payload=new ArrayList<>();
}
}
}
 catch (RuntimeException ex) {
throw ex;
}
catch (Exception e) {
throw new RuntimeException(e);
}
}",0.8703527168732126
167399,"protected void deleteSelected(){
  IConfigurationService configurationService=context.getConfigurationService();
  Iterator<AbstractObject> iter=selected.iterator();
  while (iter.hasNext()) {
    AbstractObject s=iter.next();
    if (s instanceof FlowStep) {
      FlowStep flowStep=(FlowStep)s;
      configurationService.delete(flow,flowStep);
      iter.remove();
    }
 else     if (selected instanceof FlowStepLink) {
      FlowStepLink link=(FlowStepLink)s;
      configurationService.delete(link);
      flow.removeFlowStepLink(link.getSourceStepId(),link.getTargetStepId());
      iter.remove();
    }
  }
  propertySheet.setSource(null);
  redrawFlow();
}","protected void deleteSelected(){
  IConfigurationService configurationService=context.getConfigurationService();
  Iterator<AbstractObject> iter=selected.iterator();
  while (iter.hasNext()) {
    AbstractObject s=iter.next();
    if (s instanceof FlowStep) {
      FlowStep flowStep=(FlowStep)s;
      configurationService.delete(flow,flowStep);
      iter.remove();
    }
 else     if (s instanceof FlowStepLink) {
      FlowStepLink link=(FlowStepLink)s;
      configurationService.delete(link);
      flow.removeFlowStepLink(link.getSourceStepId(),link.getTargetStepId());
      iter.remove();
    }
  }
  propertySheet.setSource(null);
  redrawFlow();
}",0.9947089947089948
167400,"private void deploy(final AgentDeployment deployment){
  DeploymentStatus status=deployment.getDeploymentStatus();
  if (!status.equals(DeploymentStatus.DISABLED) && !status.equals(DeploymentStatus.REQUEST_DISABLE) && !status.equals(DeploymentStatus.REQUEST_UNDEPLOY)) {
    try {
      log.info(""String_Node_Str"",deployment.getFlow().toString(),agent.getName());
      deployResources(deployment.getFlow());
      if (deployment.asStartType() == StartType.ON_DEPLOY) {
        scheduleNow(deployment);
      }
 else       if (deployment.asStartType() == StartType.SCHEDULED_CRON) {
        String cron=deployment.getStartExpression();
        log.info(""String_Node_Str"",new Object[]{deployment.getFlow().toString(),agent.getName(),cron,new CronSequenceGenerator(cron).next(new Date())});
        ScheduledFuture<?> future=this.flowExecutionScheduler.schedule(new FlowRunner(deployment,UUID.randomUUID().toString()),new CronTrigger(cron));
        scheduledDeployments.put(deployment,future);
      }
      deployment.setStatus(DeploymentStatus.DEPLOYED.name());
      deployment.setMessage(""String_Node_Str"");
      scheduledFlows.put(deployment,Collections.synchronizedList(new ArrayList<FlowRuntime>()));
      log.info(""String_Node_Str"",deployment.getFlow().getName());
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",deployment.getFlow().getName(),e);
      deployment.setStatus(DeploymentStatus.ERROR.name());
      deployment.setMessage(ExceptionUtils.getRootCauseMessage(e));
    }
    configurationService.save(deployment);
  }
}","private void deploy(final AgentDeployment deployment){
  DeploymentStatus status=deployment.getDeploymentStatus();
  if (!status.equals(DeploymentStatus.DISABLED) && !status.equals(DeploymentStatus.REQUEST_DISABLE) && !status.equals(DeploymentStatus.REQUEST_UNDEPLOY)) {
    try {
      log.info(""String_Node_Str"",deployment.getFlow().toString(),agent.getName());
      deployResources(deployment.getFlow());
      if (scheduledFlows.get(deployment) == null) {
        scheduledFlows.put(deployment,Collections.synchronizedList(new ArrayList<FlowRuntime>()));
      }
      if (deployment.asStartType() == StartType.ON_DEPLOY) {
        scheduleNow(deployment);
      }
 else       if (deployment.asStartType() == StartType.SCHEDULED_CRON) {
        String cron=deployment.getStartExpression();
        log.info(""String_Node_Str"",new Object[]{deployment.getFlow().toString(),agent.getName(),cron,new CronSequenceGenerator(cron).next(new Date())});
        ScheduledFuture<?> future=this.flowExecutionScheduler.schedule(new FlowRunner(deployment,UUID.randomUUID().toString()),new CronTrigger(cron));
        scheduledDeployments.put(deployment,future);
      }
      deployment.setStatus(DeploymentStatus.DEPLOYED.name());
      deployment.setMessage(""String_Node_Str"");
      log.info(""String_Node_Str"",deployment.getFlow().getName());
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",deployment.getFlow().getName(),e);
      deployment.setStatus(DeploymentStatus.ERROR.name());
      deployment.setMessage(ExceptionUtils.getRootCauseMessage(e));
    }
    configurationService.save(deployment);
  }
}",0.9193446754883428
167401,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof EntityDataMessage) {
    ArrayList<EntityData> inputRows=((EntityDataMessage)inputMessage).getPayload();
    if (inputRows == null) {
      return;
    }
    ArrayList<EntityData> outputPayload=null;
    for (    EntityData inputRow : inputRows) {
      if (entityPerRecord) {
        outputPayload=mapInputToOutputByEntity(inputRow);
      }
 else {
        outputPayload=mapInputToOutput(inputRow);
      }
    }
    callback.sendEntityDataMessage(null,outputPayload);
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (inputMessage instanceof EntityDataMessage) {
    ArrayList<EntityData> inputRows=((EntityDataMessage)inputMessage).getPayload();
    if (inputRows == null) {
      return;
    }
    ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
    for (    EntityData inputRow : inputRows) {
      if (entityPerRecord) {
        outputPayload.addAll(mapInputToOutputByEntity(inputRow));
      }
 else {
        outputPayload.addAll(mapInputToOutput(inputRow));
      }
    }
    callback.sendEntityDataMessage(null,outputPayload);
  }
}",0.9618082618862042
167402,"private int execute(ISqlTransaction transaction,DmlStatement dmlStatement,Object marker,Object[] data){
  String sql=dmlStatement.getSql();
  if (!sql.equals(lastPreparedDml)) {
    transaction.flush();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",sql);
    }
    transaction.prepare(sql);
    lastPreparedDml=sql;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",Arrays.toString(data),Arrays.toString(dmlStatement.getTypes()));
  }
  try {
    return transaction.addRow(marker,data,dmlStatement.getTypes());
  }
 catch (  SqlException ex) {
    if (!(continueOnError || (replaceRows && ex instanceof UniqueKeyException))) {
      log(LogLevel.WARN,String.format(""String_Node_Str"",dmlStatement.getSql(),Arrays.toString(data),Arrays.toString(dmlStatement.getTypes())));
    }
    throw ex;
  }
}","private int execute(ISqlTransaction transaction,DmlStatement dmlStatement,Object marker,Object[] data){
  String sql=dmlStatement.getSql();
  if (!sql.equals(lastPreparedDml)) {
    transaction.flush();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",sql);
    }
    transaction.prepare(sql);
    lastPreparedDml=sql;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",Arrays.toString(data),Arrays.toString(dmlStatement.getTypes()));
  }
  try {
    return transaction.addRow(marker,data,dmlStatement.getTypes());
  }
 catch (  SqlException ex) {
    if (!(replaceRows && ex instanceof UniqueKeyException)) {
      if (continueOnError) {
        log(LogLevel.WARN,String.format(""String_Node_Str"" + ""String_Node_Str"",dmlStatement.getSql(),Arrays.toString(data),Arrays.toString(dmlStatement.getTypes())));
        return 0;
      }
 else {
        log(LogLevel.ERROR,String.format(""String_Node_Str"",dmlStatement.getSql(),Arrays.toString(data),Arrays.toString(dmlStatement.getTypes())));
        throw ex;
      }
    }
 else {
      throw ex;
    }
  }
}",0.8461137193531559
167403,"public void setSource(Object obj){
  value=obj;
  editButton.setVisible(hasAdvancedEditor());
  FormLayout formLayout=new FormLayout();
  formLayout.setWidth(100,Unit.PERCENTAGE);
  formLayout.setMargin(false);
  formLayout.addStyleName(ValoTheme.FORMLAYOUT_LIGHT);
  if (obj != null) {
    if (obj instanceof FlowStep) {
      obj=((FlowStep)obj).getComponent();
    }
    if (obj instanceof Component) {
      Component component=(Component)obj;
      context.getConfigurationService().refresh(component);
      addComponentProperties(formLayout,component);
    }
    if (obj instanceof Resource) {
      Resource resource=(Resource)obj;
      context.getConfigurationService().refresh(resource);
      addResourceProperties(formLayout,resource);
    }
    if (obj instanceof AbstractObjectWithSettings) {
      List<XMLSetting> settings=buildSettings(obj);
      if (settings != null) {
        for (        XMLSetting definition : settings) {
          addSettingField(definition,(AbstractObjectWithSettings)obj,formLayout);
        }
      }
    }
    if (obj instanceof Component) {
      Component component=(Component)obj;
      XMLComponent componentDefintion=context.getComponentFactory().getComonentDefinition(component.getType());
      addThreadCount(componentDefintion,formLayout,component);
      addComponentShared(formLayout,component);
    }
  }
  panel.setContent(formLayout);
}","public void setSource(Object obj){
  value=obj;
  editButton.setVisible(hasAdvancedEditor());
  FormLayout formLayout=new FormLayout();
  formLayout.setWidth(100,Unit.PERCENTAGE);
  formLayout.setMargin(false);
  formLayout.addStyleName(ValoTheme.FORMLAYOUT_LIGHT);
  if (obj != null) {
    if (obj instanceof FlowStep) {
      obj=((FlowStep)obj).getComponent();
    }
    if (obj instanceof Component) {
      Component component=(Component)obj;
      context.getConfigurationService().refresh(component);
      addComponentProperties(formLayout,component);
    }
    if (obj instanceof Resource) {
      Resource resource=(Resource)obj;
      addResourceProperties(formLayout,resource);
    }
    if (obj instanceof AbstractObjectWithSettings) {
      List<XMLSetting> settings=buildSettings(obj);
      if (settings != null) {
        for (        XMLSetting definition : settings) {
          addSettingField(definition,(AbstractObjectWithSettings)obj,formLayout);
        }
      }
    }
    if (obj instanceof Component) {
      Component component=(Component)obj;
      XMLComponent componentDefintion=context.getComponentFactory().getComonentDefinition(component.getType());
      addThreadCount(componentDefintion,formLayout,component);
      addComponentShared(formLayout,component);
    }
  }
  panel.setContent(formLayout);
}",0.9784277879341864
167404,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (ComponentUtils.getPayloadType(inputMessage.getPayload()) == ComponentUtils.PAYLOAD_TYPE_LIST_STRING) {
    List<String> files=inputMessage.getPayload();
    ArrayList<String> filePaths=new ArrayList<String>();
    for (    String fileName : files) {
      log(LogLevel.INFO,""String_Node_Str"",fileName);
      FileInfo sourceZipFile=sourceDir.listFile(fileName);
      if (mustExist && sourceZipFile == null) {
        throw new IoException(String.format(""String_Node_Str"",fileName));
      }
      if (sourceZipFile != null) {
        File unzipDir=new File(LogUtils.getLogDir(),""String_Node_Str"");
        unzipDir.mkdirs();
        File localZipFile=copyZipLocally(fileName,unzipDir);
        ZipFile zipFile=getNewZipFile(localZipFile);
        InputStream in=null;
        OutputStream out=null;
        try {
          String targetDirNameResolved=resolveParamsAndHeaders(targetRelativePath,inputMessage);
          if (targetSubDir) {
            targetDirNameResolved=targetDirNameResolved + ""String_Node_Str"" + FilenameUtils.removeExtension(new FileInfo(fileName,false,0).getName());
          }
          for (Enumeration<? extends ZipEntry> e=zipFile.entries(); e.hasMoreElements(); ) {
            ZipEntry entry=e.nextElement();
            info(""String_Node_Str"",entry.getName());
            if (!entry.isDirectory() && (extractEmptyFiles || entry.getSize() > 0)) {
              out=targetDir.getOutputStream(targetDirNameResolved + ""String_Node_Str"" + entry.getName(),false);
              in=zipFile.getInputStream(entry);
              IOUtils.copy(in,out);
              filePaths.add(targetDirNameResolved);
            }
          }
        }
 catch (        IOException e) {
          throw new IoException(e);
        }
 finally {
          IOUtils.closeQuietly(in);
          IOUtils.closeQuietly(out);
          IOUtils.closeQuietly(zipFile);
          FileUtils.deleteQuietly(localZipFile);
        }
        if (deleteOnComplete) {
          sourceDir.delete(fileName);
        }
        log(LogLevel.INFO,""String_Node_Str"",fileName);
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      }
    }
    if (filePaths.size() > 0) {
      callback.sendMessage(null,filePaths);
    }
  }
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  if (ComponentUtils.getPayloadType(inputMessage.getPayload()) == ComponentUtils.PAYLOAD_TYPE_LIST_STRING) {
    List<String> files=inputMessage.getPayload();
    ArrayList<String> filePaths=new ArrayList<String>();
    for (    String fileName : files) {
      log(LogLevel.INFO,""String_Node_Str"",fileName);
      FileInfo sourceZipFile=sourceDir.listFile(fileName);
      if (mustExist && sourceZipFile == null) {
        throw new IoException(String.format(""String_Node_Str"",fileName));
      }
      if (sourceZipFile != null) {
        File unzipDir=new File(LogUtils.getLogDir(),""String_Node_Str"");
        unzipDir.mkdirs();
        File localZipFile=copyZipLocally(fileName,unzipDir);
        ZipFile zipFile=getNewZipFile(localZipFile);
        InputStream in=null;
        OutputStream out=null;
        try {
          String targetDirNameResolved=resolveParamsAndHeaders(targetRelativePath,inputMessage);
          if (targetSubDir) {
            targetDirNameResolved=targetDirNameResolved + ""String_Node_Str"" + FilenameUtils.removeExtension(new FileInfo(fileName,false,0).getName());
          }
          for (Enumeration<? extends ZipEntry> e=zipFile.entries(); e.hasMoreElements(); ) {
            ZipEntry entry=e.nextElement();
            info(""String_Node_Str"",entry.getName());
            if (!entry.isDirectory() && (extractEmptyFiles || entry.getSize() > 0)) {
              String relativePathToEntry=targetDirNameResolved + ""String_Node_Str"" + entry.getName();
              out=targetDir.getOutputStream(relativePathToEntry,false);
              in=zipFile.getInputStream(entry);
              IOUtils.copy(in,out);
              filePaths.add(relativePathToEntry);
            }
          }
        }
 catch (        IOException e) {
          throw new IoException(e);
        }
 finally {
          IOUtils.closeQuietly(in);
          IOUtils.closeQuietly(out);
          IOUtils.closeQuietly(zipFile);
          FileUtils.deleteQuietly(localZipFile);
        }
        if (deleteOnComplete) {
          sourceDir.delete(fileName);
        }
        log(LogLevel.INFO,""String_Node_Str"",fileName);
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      }
    }
    if (filePaths.size() > 0) {
      callback.sendMessage(null,filePaths);
    }
  }
}",0.954507512520868
167405,"protected Field<?> buildEditableNavigatorField(Object itemId){
  if (itemBeingEdited != null && itemBeingEdited.equals(itemId)) {
    final EnableFocusTextField field=new EnableFocusTextField();
    field.addStyleName(ValoTheme.TEXTFIELD_SMALL);
    field.setImmediate(true);
    field.addFocusListener(new FocusListener(){
      @Override public void focus(      FocusEvent event){
        field.setFocusAllowed(false);
        field.selectAll();
        field.setFocusAllowed(true);
      }
    }
);
    field.focus();
    field.addShortcutListener(new ShortcutListener(""String_Node_Str"",KeyCode.ESCAPE,null){
      @Override public void handleAction(      Object sender,      Object target){
        abortEditingItem();
      }
    }
);
    field.addValueChangeListener(event -> finishEditingItem());
    field.addBlurListener(new BlurListener(){
      @Override public void blur(      BlurEvent event){
        finishEditingItem();
      }
    }
);
    return field;
  }
 else {
    return null;
  }
}","protected Field<?> buildEditableNavigatorField(Object itemId){
  if (itemBeingEdited != null && itemBeingEdited.equals(itemId)) {
    final EnableFocusTextField field=new EnableFocusTextField();
    field.addStyleName(ValoTheme.TEXTFIELD_SMALL);
    field.setImmediate(true);
    field.addFocusListener(new FocusListener(){
      @Override public void focus(      FocusEvent event){
        field.setFocusAllowed(false);
        field.selectAll();
        field.setFocusAllowed(true);
      }
    }
);
    field.focus();
    field.addShortcutListener(new ShortcutListener(""String_Node_Str"",KeyCode.ESCAPE,null){
      @Override public void handleAction(      Object sender,      Object target){
        abortEditingItem();
      }
    }
);
    field.addValueChangeListener(event -> finishEditingItem());
    field.addBlurListener(event -> finishEditingItem());
    return field;
  }
 else {
    return null;
  }
}",0.8988529718456726
167406,"@Override public void deselected(){
  treeTable.removeShortcutListener(enterKeyListener);
}","@Override public void deselected(){
}",0.578125
167407,"public ManageProjectsPanel(ApplicationContext context,DesignNavigator projectNavigator){
  this.setSizeFull();
  this.context=context;
  this.projectNavigator=projectNavigator;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  openProjectButton=buttonBar.addButton(""String_Node_Str"",Icons.PROJECT);
  openProjectButton.addClickListener(event -> openProject(treeTable.getValue()));
  newProjectButton=buttonBar.addButton(""String_Node_Str"",Icons.PROJECT);
  newProjectButton.addClickListener(event -> createNewProject());
  newVersionButton=buttonBar.addButton(""String_Node_Str"",Icons.VERSION);
  newVersionButton.addClickListener(event -> createNewVersion());
  newVersionButton.setEnabled(false);
  newVersionButton.setDescription(""String_Node_Str"");
  editButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.EDIT);
  editButton.addClickListener(event -> edit(treeTable.getValue()));
  removeButton=buttonBar.addButton(""String_Node_Str"",Icons.DELETE);
  removeButton.addClickListener(event -> removeProject());
  enterKeyListener=new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,null){
    public void handleAction(    Object sender,    Object target){
      if (currentlyEditing != null) {
        save();
      }
 else {
        openProject(treeTable.getValue());
      }
    }
  }
;
  treeTable=new TreeTable();
  treeTable.setSizeFull();
  treeTable.setSortEnabled(true);
  treeTable.setCacheRate(100);
  treeTable.setImmediate(true);
  treeTable.setSelectable(true);
  treeTable.setEditable(true);
  treeTable.addContainerProperty(""String_Node_Str"",String.class,""String_Node_Str"",""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",String.class,""String_Node_Str"",""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",Boolean.class,null,""String_Node_Str"",null,null);
  treeTable.setColumnWidth(""String_Node_Str"",45);
  treeTable.addContainerProperty(""String_Node_Str"",Boolean.class,null,""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",Date.class,null,""String_Node_Str"",null,null);
  treeTable.setColumnCollapsingAllowed(true);
  treeTable.setColumnCollapsed(""String_Node_Str"",true);
  treeTable.addItemClickListener(new TreeTableItemClickListener());
  treeTable.addValueChangeListener(event -> save());
  treeTable.setTableFieldFactory(new FieldFactory());
  treeTable.setSortContainerPropertyId(""String_Node_Str"");
  treeTable.setSortAscending(true);
  addComponent(treeTable);
  setExpandRatio(treeTable,1);
  refresh();
}","public ManageProjectsPanel(ApplicationContext context,DesignNavigator projectNavigator){
  this.setSizeFull();
  this.context=context;
  this.projectNavigator=projectNavigator;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  openProjectButton=buttonBar.addButton(""String_Node_Str"",Icons.PROJECT);
  openProjectButton.addClickListener(event -> openProject(treeTable.getValue()));
  newProjectButton=buttonBar.addButton(""String_Node_Str"",Icons.PROJECT);
  newProjectButton.addClickListener(event -> createNewProject());
  newVersionButton=buttonBar.addButton(""String_Node_Str"",Icons.VERSION);
  newVersionButton.addClickListener(event -> createNewVersion());
  newVersionButton.setEnabled(false);
  newVersionButton.setDescription(""String_Node_Str"");
  editButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.EDIT);
  editButton.addClickListener(event -> edit(treeTable.getValue()));
  removeButton=buttonBar.addButton(""String_Node_Str"",Icons.DELETE);
  removeButton.addClickListener(event -> removeProject());
  treeTable=new TreeTable();
  treeTable.setSizeFull();
  treeTable.setSortEnabled(true);
  treeTable.setCacheRate(100);
  treeTable.setImmediate(true);
  treeTable.setSelectable(true);
  treeTable.setEditable(true);
  treeTable.addContainerProperty(""String_Node_Str"",String.class,""String_Node_Str"",""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",String.class,""String_Node_Str"",""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",Boolean.class,null,""String_Node_Str"",null,null);
  treeTable.setColumnWidth(""String_Node_Str"",45);
  treeTable.addContainerProperty(""String_Node_Str"",Boolean.class,null,""String_Node_Str"",null,null);
  treeTable.addContainerProperty(""String_Node_Str"",Date.class,null,""String_Node_Str"",null,null);
  treeTable.setColumnCollapsingAllowed(true);
  treeTable.setColumnCollapsed(""String_Node_Str"",true);
  treeTable.addItemClickListener(new TreeTableItemClickListener());
  treeTable.addValueChangeListener(event -> save());
  treeTable.setTableFieldFactory(new FieldFactory());
  treeTable.setSortContainerPropertyId(""String_Node_Str"");
  treeTable.setSortAscending(true);
  addComponent(treeTable);
  setExpandRatio(treeTable,1);
  refresh();
}",0.9420078985657868
167408,"@Override public void selected(){
  treeTable.addShortcutListener(enterKeyListener);
}","@Override public void selected(){
}",0.5785123966942148
167409,"@Override public void handle(final Message inputMessage,final ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  lastPreparedDml=null;
  if (error == null) {
    if (databasePlatform == null) {
      if (getResourceRuntime() == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      DataSource dataSource=(DataSource)getResourceReference();
      databasePlatform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers,false);
    }
    if (targetTables == null) {
      Model model=getInputModel();
      targetTables=new ArrayList<TargetTableDefintion>();
      for (      ModelEntity entity : model.getModelEntities()) {
        String tableName=tablePrefix + entity.getName() + tableSuffix;
        Table table=databasePlatform.getTableFromCache(catalogName,schemaName,tableName,true);
        if (table != null) {
          targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy()),new TargetTable(DmlType.DELETE,entity,table.copy())));
        }
      }
    }
    ArrayList<EntityData> inputRows=inputMessage.getPayload();
    if (inputRows != null && inputRows.size() > 0) {
      ISqlTransaction transaction=databasePlatform.getSqlTemplate().startSqlTransaction();
      transaction.setInBatchMode(batchMode);
      try {
        write(transaction,inputMessage,callback,unitOfWorkBoundaryReached);
        transaction.commit();
      }
 catch (      Throwable ex) {
        error=ex;
        transaction.rollback();
        if (ex instanceof RuntimeException) {
          throw (RuntimeException)ex;
        }
 else {
          throw new RuntimeException(ex);
        }
      }
 finally {
        transaction.close();
      }
    }
    if (callback != null && results.size() > 0) {
      callback.sendMessage(null,convertResultsToTextPayload(results));
    }
  }
}","@Override public void handle(final Message inputMessage,final ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  lastPreparedDml=null;
  if (error == null) {
    if (databasePlatform == null) {
      if (getResourceRuntime() == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      DataSource dataSource=(DataSource)getResourceReference();
      databasePlatform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers,false);
    }
    if (targetTables == null) {
      Model model=getInputModel();
      targetTables=new ArrayList<TargetTableDefintion>();
      for (      ModelEntity entity : model.getModelEntities()) {
        String tableName=tablePrefix + entity.getName() + tableSuffix;
        Table table=databasePlatform.getTableFromCache(catalogName,schemaName,tableName,true);
        if (table != null) {
          targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy()),new TargetTable(DmlType.DELETE,entity,table.copy())));
        }
      }
    }
    ArrayList<EntityData> inputRows=inputMessage.getPayload();
    if (inputRows != null && inputRows.size() > 0) {
      ISqlTransaction transaction=databasePlatform.getSqlTemplate().startSqlTransaction();
      transaction.setInBatchMode(batchMode);
      try {
        write(transaction,inputMessage,callback,unitOfWorkBoundaryReached);
        transaction.commit();
      }
 catch (      Throwable ex) {
        error=ex;
        transaction.rollback();
        if (ex instanceof RuntimeException) {
          throw (RuntimeException)ex;
        }
 else {
          throw new RuntimeException(ex);
        }
      }
 finally {
        transaction.close();
      }
    }
    if (callback != null && results.size() > 0) {
      callback.sendMessage(null,convertResultsToTextPayload(results));
    }
  }
  if (targetTables != null) {
    for (    TargetTableDefintion targetTable : targetTables) {
      targetTable.getDeleteTable().getRowValues().clear();
      targetTable.getInsertTable().getRowValues().clear();
      targetTable.getUpdateTable().getRowValues().clear();
    }
  }
}",0.9330793045963324
167410,"@Override public void afterFlow(){
  super.afterFlow();
  Execution execution=getExecution();
  execution.setEndTime(new Date());
  ExecutionStatus status=ExecutionStatus.DONE;
  if (steps != null) {
    for (    ExecutionStep executionStep : steps.values()) {
      if (ExecutionStatus.ERROR.name().equals(executionStep.getStatus())) {
        status=ExecutionStatus.ERROR;
      }
      if (ExecutionStatus.CANCELLED.name().equals(executionStep.getStatus())) {
        status=ExecutionStatus.CANCELLED;
      }
    }
  }
  execution.setStatus(status.name());
  this.recorder.record(execution);
}","@Override public void afterFlow(){
  super.afterFlow();
  Execution execution=getExecution();
  execution.setEndTime(new Date());
  ExecutionStatus status=ExecutionStatus.DONE;
  if (steps != null) {
    for (    ExecutionStep executionStep : steps.values()) {
      if (ExecutionStatus.ERROR.name().equals(executionStep.getStatus())) {
        status=ExecutionStatus.ERROR;
      }
      if (status != ExecutionStatus.ERROR && ExecutionStatus.CANCELLED.name().equals(executionStep.getStatus())) {
        status=ExecutionStatus.CANCELLED;
      }
    }
  }
  execution.setStatus(status.name());
  this.recorder.record(execution);
}",0.9715215622457284
167411,"@SuppressWarnings(""String_Node_Str"") protected void handleStringListPayload(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Map<String,ArrayList<String>> outboundMessages=new HashMap<String,ArrayList<String>>();
  ArrayList<String> inputDatas=(ArrayList<String>)inputMessage.getPayload();
  for (  String data : inputDatas) {
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    bindStringData(scriptEngine,data);
    if (routes != null) {
      for (      Route route : routes) {
        try {
          if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
            ArrayList<String> outboundPayload=outboundMessages.get(route.getTargetStepId());
            if (outboundPayload == null) {
              outboundPayload=new ArrayList<String>();
              outboundMessages.put(route.getTargetStepId(),outboundPayload);
            }
            if (outboundPayload.size() >= rowsPerMessage) {
              outboundMessages.remove(route.getTargetStepId());
              callback.sendMessage(null,outboundPayload,false,route.getTargetStepId());
            }
            outboundPayload.add(data);
          }
        }
 catch (        ScriptException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  for (  String targetFlowStepId : outboundMessages.keySet()) {
    callback.sendMessage(null,outboundMessages.get(targetFlowStepId),true,targetFlowStepId);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void handleStringListPayload(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Map<String,ArrayList<String>> outboundMessages=new HashMap<String,ArrayList<String>>();
  ArrayList<String> inputDatas=(ArrayList<String>)inputMessage.getPayload();
  for (  String data : inputDatas) {
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    bindStringData(scriptEngine,data);
    if (routes != null) {
      for (      Route route : routes) {
        try {
          if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
            ArrayList<String> outboundPayload=outboundMessages.get(route.getTargetStepId());
            if (outboundPayload == null) {
              outboundPayload=new ArrayList<String>();
              outboundMessages.put(route.getTargetStepId(),outboundPayload);
            }
            if (outboundPayload.size() >= rowsPerMessage) {
              outboundMessages.remove(route.getTargetStepId());
              callback.sendMessage(null,outboundPayload,false,route.getTargetStepId());
            }
            outboundPayload.add(data);
          }
        }
 catch (        ScriptException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  for (  String targetFlowStepId : outboundMessages.keySet()) {
    callback.sendMessage(null,outboundMessages.get(targetFlowStepId),unitOfWorkBoundaryReached,targetFlowStepId);
  }
}",0.990304246071548
167412,"private boolean isUnitOfWorkLastMessage(String unitOfWork,boolean lastMessage){
  if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_INPUT_MESSAGE) || (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FLOW) && lastMessage)) {
    return true;
  }
 else {
    return false;
  }
}","private boolean isUnitOfWorkLastMessage(boolean lastMessage){
  FlowStep flowStep=componentContext.getFlowStep();
  String unitOfWork=flowStep.getComponent().get(UNIT_OF_WORK,UNIT_OF_WORK_FLOW);
  if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_INPUT_MESSAGE) || (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FLOW) && lastMessage)) {
    return true;
  }
 else {
    return false;
  }
}",0.7558320373250389
167413,"@Override public void sendControlMessage(){
  FlowStep flowStep=componentContext.getFlowStep();
  sendMessage(new ControlMessage(flowStep.getId()));
}","@Override public void sendControlMessage(){
  FlowStep flowStep=componentContext.getFlowStep();
  sendMessage(createMessage(new ControlMessage(flowStep.getId()),null,null,true));
}",0.9090909090909092
167414,"private Message createMessage(Message newMessage,Map<String,Serializable> headerSettings,Serializable payload,boolean lastMessage){
  FlowStep flowStep=componentContext.getFlowStep();
  ComponentStatistics statistics=componentContext.getComponentStatistics();
  String unitOfWork=flowStep.getComponent().get(UNIT_OF_WORK,UNIT_OF_WORK_FLOW);
  MessageHeader header=newMessage.getHeader();
  Message inputMessage=currentInputMessages.get(ThreadUtils.getThreadNumber());
  if (inputMessage != null) {
    header.putAll(inputMessage.getHeader());
  }
  if (headerSettings != null) {
    header.putAll(headerSettings);
  }
  header.setUnitOfWorkLastMessage(isUnitOfWorkLastMessage(unitOfWork,lastMessage));
  header.setSequenceNumber(statistics.getNumberOutboundMessages(ThreadUtils.getThreadNumber()) + 1);
  newMessage.setPayload(payload);
  return newMessage;
}","private Message createMessage(Message newMessage,Map<String,Serializable> headerSettings,Serializable payload,boolean lastMessage){
  ComponentStatistics statistics=componentContext.getComponentStatistics();
  MessageHeader header=newMessage.getHeader();
  Message inputMessage=currentInputMessages.get(ThreadUtils.getThreadNumber());
  if (inputMessage != null) {
    header.putAll(inputMessage.getHeader());
  }
  if (headerSettings != null) {
    header.putAll(headerSettings);
  }
  header.setUnitOfWorkLastMessage(isUnitOfWorkLastMessage(lastMessage));
  header.setSequenceNumber(statistics.getNumberOutboundMessages(ThreadUtils.getThreadNumber()) + 1);
  newMessage.setPayload(payload);
  return newMessage;
}",0.4612452350698856
167415,"public Row toRow(EntityData data,boolean qualifyWithEntityName){
  Row row=new Row(data.size()){
    private static final long serialVersionUID=1L;
    @Override public String toString(){
      return String.format(""String_Node_Str"",data.getChangeType(),super.toString());
    }
  }
;
  Set<String> attributeIds=data.keySet();
  for (  String attributeId : attributeIds) {
    if (inputModel != null) {
      ModelAttribute attribute=inputModel.getAttributeById(attributeId);
      if (attribute != null) {
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        if (qualifyWithEntityName) {
          row.put(entity.getName() + ""String_Node_Str"" + attribute.getName(),data.get(attributeId));
        }
 else {
          row.put(attribute.getName(),data.get(attributeId));
        }
      }
    }
 else {
      row.put(attributeId,data.get(attributeId));
    }
  }
  return row;
}","public Row toRow(EntityData data,boolean qualifyWithEntityName,boolean input){
  Row row=new Row(data.size()){
    private static final long serialVersionUID=1L;
    @Override public String toString(){
      return String.format(""String_Node_Str"",data.getChangeType(),super.toString());
    }
  }
;
  Model model=input ? inputModel : outputModel;
  Set<String> attributeIds=data.keySet();
  for (  String attributeId : attributeIds) {
    if (model != null) {
      ModelAttribute attribute=model.getAttributeById(attributeId);
      if (attribute != null) {
        ModelEntity entity=model.getEntityById(attribute.getEntityId());
        if (qualifyWithEntityName) {
          row.put(entity.getName() + ""String_Node_Str"" + attribute.getName(),data.get(attributeId));
        }
 else {
          row.put(attribute.getName(),data.get(attributeId));
        }
      }
    }
 else {
      row.put(attributeId,data.get(attributeId));
    }
  }
  return row;
}",0.9555436529191216
167416,"public Set<String> getEntityNames(EntityData data){
  Set<String> names=new HashSet<String>();
  Set<String> attributeIds=data.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=inputModel.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      names.add(entity.getName());
    }
  }
  return names;
}","public Set<String> getEntityNames(EntityData data,boolean input){
  Set<String> names=new HashSet<String>();
  Model model=input ? inputModel : outputModel;
  if (model != null) {
    Set<String> attributeIds=data.keySet();
    for (    String attributeId : attributeIds) {
      ModelAttribute attribute=model.getAttributeById(attributeId);
      if (attribute != null) {
        ModelEntity entity=model.getEntityById(attribute.getEntityId());
        names.add(entity.getName());
      }
    }
  }
  return names;
}",0.5708200212992546
167417,"protected Bindings bindEntityData(ScriptEngine scriptEngine,EntityData entityData){
  Bindings bindings=scriptEngine.createBindings();
  Model model=context.getFlowStep().getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  bindings.put(""String_Node_Str"",context.getFlowStep().getComponent().getEntityNames(entityData));
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      log(LogLevel.WARN,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
  return bindings;
}","protected Bindings bindEntityData(ScriptEngine scriptEngine,EntityData entityData){
  Bindings bindings=scriptEngine.createBindings();
  Model model=context.getFlowStep().getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  bindings.put(""String_Node_Str"",entityData.getChangeType().name());
  bindings.put(""String_Node_Str"",context.getFlowStep().getComponent().getEntityNames(entityData,true));
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      log(LogLevel.WARN,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
  return bindings;
}",0.9696223316912972
167418,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  MessageHeader header=inputMessage.getHeader();
  log(LogLevel.INFO,String.format(""String_Node_Str"",inputMessage.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),unitOfWorkBoundaryReached,getFlow().findFlowStepWithId(header.getOriginatingStepId()).getName(),header.toString()));
  Serializable payload=inputMessage.getPayload();
  if (payload instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
    for (    Object object : list) {
      if (object instanceof EntityData && getComponent().getInputModel() != null) {
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
        log(LogLevel.INFO,String.format(""String_Node_Str"",getComponent().toRow((EntityData)object,context.getFlowStep().getComponent().getBoolean(SETTING_QUALIFY_WITH_ENTITY_NAME,true))));
      }
 else {
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
        log(LogLevel.INFO,String.format(""String_Node_Str"",object));
      }
    }
  }
  callback.sendMessage(null,payload,unitOfWorkBoundaryReached);
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  MessageHeader header=inputMessage.getHeader();
  log(LogLevel.INFO,String.format(""String_Node_Str"",inputMessage.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),unitOfWorkBoundaryReached,getFlow().findFlowStepWithId(header.getOriginatingStepId()).getName(),header.toString()));
  Serializable payload=inputMessage.getPayload();
  if (payload instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
    for (    Object object : list) {
      if (object instanceof EntityData && getComponent().getInputModel() != null) {
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
        log(LogLevel.INFO,String.format(""String_Node_Str"",getComponent().toRow((EntityData)object,context.getFlowStep().getComponent().getBoolean(SETTING_QUALIFY_WITH_ENTITY_NAME,true),true)));
      }
 else {
        getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
        log(LogLevel.INFO,String.format(""String_Node_Str"",object));
      }
    }
  }
  callback.sendMessage(null,payload,unitOfWorkBoundaryReached);
}",0.9979846835953244
167419,"protected Row nextRowFromInputMessage(){
  if (flowStep.getComponent().getInputModel() != null) {
    if (entityDataIterator == null) {
      List<EntityData> list=inputMessage.getPayload();
      entityDataIterator=list.iterator();
    }
    if (entityDataIterator.hasNext()) {
      EntityData data=entityDataIterator.next();
      return flowStep.getComponent().toRow(data,false);
    }
 else {
      return null;
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","protected Row nextRowFromInputMessage(){
  if (flowStep.getComponent().getInputModel() != null) {
    if (entityDataIterator == null) {
      List<EntityData> list=inputMessage.getPayload();
      entityDataIterator=list.iterator();
    }
    if (entityDataIterator.hasNext()) {
      EntityData data=entityDataIterator.next();
      return flowStep.getComponent().toRow(data,false,true);
    }
 else {
      return null;
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9949849548645938
167420,"protected void setParamsFromInboundMsgAndRec(Map<String,Object> paramMap,final Message inputMessage,final EntityData entityData){
  paramMap.clear();
  paramMap.putAll(getParamsFromHeader(inputMessage));
  if (entityData != null) {
    paramMap.putAll(this.getComponent().toRow(entityData,true));
  }
}","protected void setParamsFromInboundMsgAndRec(Map<String,Object> paramMap,final Message inputMessage,final EntityData entityData){
  paramMap.clear();
  paramMap.putAll(getParamsFromHeader(inputMessage));
  if (entityData != null) {
    paramMap.putAll(this.getComponent().toRow(entityData,true,true));
  }
}",0.9917898193760264
167421,"private int processSql(Message inputMessage,NamedParameterJdbcTemplate template,Map<String,Object> params,String sqlToExecute){
  int sqlCount=0;
  if (runWhen.equals(PER_MESSAGE)) {
    int count=template.update(sqlToExecute,params);
    results.add(new Result(sqlToExecute,count));
    getComponentStatistics().incrementNumberEntitiesProcessed(count);
    sqlCount++;
  }
 else   if (runWhen.equals(PER_ENTITY)) {
    List<EntityData> datas=inputMessage.getPayload();
    for (    EntityData entityData : datas) {
      params.putAll(getComponent().toRow(entityData,false));
      int count=template.update(sqlToExecute,params);
      results.add(new Result(sqlToExecute,count));
      getComponentStatistics().incrementNumberEntitiesProcessed(count);
      sqlCount++;
    }
  }
  return sqlCount;
}","private int processSql(Message inputMessage,NamedParameterJdbcTemplate template,Map<String,Object> params,String sqlToExecute){
  int sqlCount=0;
  if (runWhen.equals(PER_MESSAGE)) {
    int count=template.update(sqlToExecute,params);
    results.add(new Result(sqlToExecute,count));
    getComponentStatistics().incrementNumberEntitiesProcessed(count);
    sqlCount++;
  }
 else   if (runWhen.equals(PER_ENTITY)) {
    List<EntityData> datas=inputMessage.getPayload();
    for (    EntityData entityData : datas) {
      params.putAll(getComponent().toRow(entityData,false,true));
      int count=template.update(sqlToExecute,params);
      results.add(new Result(sqlToExecute,count));
      getComponentStatistics().incrementNumberEntitiesProcessed(count);
      sqlCount++;
    }
  }
  return sqlCount;
}",0.9968924798011188
167422,"protected void logInput(Message inputMessage,ISendMessageCallback messageTarget,boolean unitOfWorkBoundaryReached){
  MessageHeader header=inputMessage.getHeader();
  int threadNumber=ThreadUtils.getThreadNumber();
  String source=""String_Node_Str"";
  try {
    source=componentContext.getManipulatedFlow().findFlowStepWithId(header.getOriginatingStepId()).getName();
  }
 catch (  NullPointerException e) {
  }
  componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",inputMessage.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),unitOfWorkBoundaryReached,source,header));
  Serializable payload=inputMessage.getPayload();
  if (payload instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
    for (    Object object : list) {
      if (object instanceof EntityData && componentContext.getFlowStep().getComponent().getInputModel() != null) {
        componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",componentContext.getFlowStep().getComponent().toRow((EntityData)object,true)));
      }
 else {
        componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
      }
    }
  }
}","protected void logInput(Message inputMessage,ISendMessageCallback messageTarget,boolean unitOfWorkBoundaryReached){
  MessageHeader header=inputMessage.getHeader();
  int threadNumber=ThreadUtils.getThreadNumber();
  String source=""String_Node_Str"";
  try {
    source=componentContext.getManipulatedFlow().findFlowStepWithId(header.getOriginatingStepId()).getName();
  }
 catch (  NullPointerException e) {
  }
  componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",inputMessage.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),unitOfWorkBoundaryReached,source,header));
  Serializable payload=inputMessage.getPayload();
  if (payload instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
    for (    Object object : list) {
      if (object instanceof EntityData && componentContext.getFlowStep().getComponent().getInputModel() != null) {
        componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",componentContext.getFlowStep().getComponent().toRow((EntityData)object,true,true)));
      }
 else {
        componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
      }
    }
  }
}",0.9981811567842852
167423,"protected void logOutput(Message message,String... targetFlowStepIds){
  Collection<String> targetStepIds=targetFlowStepIds != null ? Arrays.asList(targetFlowStepIds) : Collections.emptyList();
  int threadNumber=ThreadUtils.getThreadNumber();
  for (  StepRuntime targetRuntime : targetStepRuntimes) {
    boolean forward=targetStepIds == null || targetStepIds.size() == 0 || targetStepIds.contains(targetRuntime.getComponentContext().getFlowStep().getId());
    if (forward) {
      MessageHeader header=message.getHeader();
      componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",message.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),header));
      Serializable payload=message.getPayload();
      if (payload instanceof List) {
        @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
        for (        Object object : list) {
          if (object instanceof EntityData) {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",componentContext.getFlowStep().getComponent().toRow((EntityData)object,true)));
          }
 else {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
          }
        }
      }
    }
  }
}","protected void logOutput(Message message,String... targetFlowStepIds){
  Collection<String> targetStepIds=targetFlowStepIds != null ? Arrays.asList(targetFlowStepIds) : Collections.emptyList();
  int threadNumber=ThreadUtils.getThreadNumber();
  for (  StepRuntime targetRuntime : targetStepRuntimes) {
    boolean forward=targetStepIds == null || targetStepIds.size() == 0 || targetStepIds.contains(targetRuntime.getComponentContext().getFlowStep().getId());
    if (forward) {
      MessageHeader header=message.getHeader();
      componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",message.getClass().getSimpleName(),header.getSequenceNumber(),header.isUnitOfWorkLastMessage(),header));
      Serializable payload=message.getPayload();
      if (payload instanceof List) {
        @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
        for (        Object object : list) {
          if (object instanceof EntityData) {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",componentContext.getFlowStep().getComponent().toRow((EntityData)object,true,false)));
          }
 else {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
          }
        }
      }
    }
  }
}",0.9979108635097492
167424,"protected void calculateDiff(ISendMessageCallback callback){
  for (  ModelEntity entity : entities) {
    Component component=context.getFlowStep().getComponent();
    ComponentEntitySetting add=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_ADD_ENABLED);
    ComponentEntitySetting chg=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_CHG_ENABLED);
    ComponentEntitySetting del=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_DEL_ENABLED);
    boolean addEnabled=add != null ? Boolean.parseBoolean(add.getValue()) : true;
    boolean chgEnabled=chg != null ? Boolean.parseBoolean(chg.getValue()) : true;
    boolean delEnabled=del != null ? Boolean.parseBoolean(del.getValue()) : true;
    StringBuilder addSql=new StringBuilder(""String_Node_Str"");
    StringBuilder chgSql=new StringBuilder(addSql);
    StringBuilder delSql=new StringBuilder(addSql);
    appendColumns(addSql,""String_Node_Str"",entity);
    appendColumns(delSql,""String_Node_Str"",entity);
    appendColumns(chgSql,""String_Node_Str"",entity);
    addSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    delSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    chgSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    boolean secondPk=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
          chgSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondPk=true;
      }
    }
    addSql.append(""String_Node_Str"");
    delSql.append(""String_Node_Str"");
    chgSql.append(""String_Node_Str"");
    secondPk=false;
    boolean secondCol=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        secondPk=true;
      }
 else {
        if (secondCol) {
          chgSql.append(""String_Node_Str"");
        }
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondCol=true;
      }
    }
    if (entity.hasOnlyPrimaryKeys()) {
      chgSql.append(""String_Node_Str"");
    }
    log(LogLevel.INFO,""String_Node_Str"",addSql);
    log(LogLevel.INFO,""String_Node_Str"",chgSql);
    log(LogLevel.INFO,""String_Node_Str"",delSql);
    RdbmsReader reader=new RdbmsReader();
    reader.setDataSource(databasePlatform.getDataSource());
    reader.setContext(context);
    reader.setComponentDefinition(componentDefinition);
    reader.setRowsPerMessage(rowsPerMessage);
    if (addEnabled) {
      reader.setSql(addSql.toString());
      reader.setEntityChangeType(ChangeType.ADD);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
    if (chgEnabled) {
      reader.setSql(chgSql.toString());
      reader.setEntityChangeType(ChangeType.CHG);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
    if (delEnabled) {
      reader.setSql(delSql.toString());
      reader.setEntityChangeType(ChangeType.DEL);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
  }
  ResettableBasicDataSource ds=databasePlatform.getDataSource();
  ds.close();
  databasePlatform=null;
  if (!inMemoryCompare) {
    try {
      Files.list(Paths.get(System.getProperty(""String_Node_Str""))).filter(path -> path.toFile().getName().startsWith(databaseName)).forEach(path -> deleteDatabaseFile(path.toFile()));
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
}","protected void calculateDiff(ISendMessageCallback callback){
  for (  ModelEntity entity : entities) {
    Component component=context.getFlowStep().getComponent();
    ComponentEntitySetting add=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_ADD_ENABLED);
    ComponentEntitySetting chg=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_CHG_ENABLED);
    ComponentEntitySetting del=component.getSingleEntitySetting(entity.getId(),DataDiff.ENTITY_DEL_ENABLED);
    boolean addEnabled=add != null ? Boolean.parseBoolean(add.getValue()) : true;
    boolean chgEnabled=chg != null ? Boolean.parseBoolean(chg.getValue()) : true;
    boolean delEnabled=del != null ? Boolean.parseBoolean(del.getValue()) : true;
    StringBuilder addSql=new StringBuilder(""String_Node_Str"");
    StringBuilder chgSql=new StringBuilder(addSql);
    StringBuilder delSql=new StringBuilder(addSql);
    appendColumns(addSql,""String_Node_Str"",entity);
    appendColumns(delSql,""String_Node_Str"",entity);
    appendColumns(chgSql,""String_Node_Str"",entity);
    addSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    delSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    chgSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    boolean secondPk=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
          chgSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondPk=true;
      }
    }
    addSql.append(""String_Node_Str"");
    delSql.append(""String_Node_Str"");
    chgSql.append(""String_Node_Str"");
    secondPk=false;
    boolean secondCol=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        secondPk=true;
      }
 else {
        if (secondCol) {
          chgSql.append(""String_Node_Str"");
        }
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondCol=true;
      }
    }
    if (entity.hasOnlyPrimaryKeys()) {
      chgSql.append(""String_Node_Str"");
    }
    log(LogLevel.INFO,""String_Node_Str"",addSql);
    log(LogLevel.INFO,""String_Node_Str"",chgSql);
    log(LogLevel.INFO,""String_Node_Str"",delSql);
    RdbmsReader reader=new RdbmsReader();
    reader.setDataSource(databasePlatform.getDataSource());
    reader.setContext(context);
    reader.setComponentDefinition(componentDefinition);
    reader.setRowsPerMessage(rowsPerMessage);
    if (addEnabled) {
      reader.setSql(addSql.toString());
      reader.setEntityChangeType(ChangeType.ADD);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
    if (chgEnabled) {
      reader.setSql(chgSql.toString());
      reader.setEntityChangeType(ChangeType.CHG);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
    if (delEnabled) {
      reader.setSql(delSql.toString());
      reader.setEntityChangeType(ChangeType.DEL);
      reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    }
  }
  ResettableBasicDataSource ds=databasePlatform.getDataSource();
  ds.close();
  if (!inMemoryCompare) {
    try {
      Files.list(Paths.get(System.getProperty(""String_Node_Str""))).filter(path -> path.toFile().getName().startsWith(databaseName)).forEach(path -> deleteDatabaseFile(path.toFile()));
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
  databasePlatform=null;
  databaseName=null;
  databaseWriter=null;
}",0.9897826086956522
167425,"protected void pollForFiles(String path,Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkLastMessage){
  File pathDir=getNewFile(path);
  ArrayList<File> fileReferences=new ArrayList<File>();
  String[] includes=StringUtils.isNotBlank(filePattern) ? filePattern.split(""String_Node_Str"") : new String[]{""String_Node_Str""};
  DirectoryScanner scanner=getDirectoryScanner();
  scanner.setIncludes(includes);
  scanner.setBasedir(pathDir);
  scanner.setCaseSensitive(false);
  scanner.scan();
  String[] files=scanner.getIncludedFiles();
  if (files.length > 0) {
    for (int i=0; i < files.length && i < maxFilesToPoll; i++) {
      File file=getNewFile(path,files[i]);
      filesSent.add(file);
      fileReferences.add(file);
    }
    Collections.sort(fileReferences,new Comparator<File>(){
      @Override public int compare(      File o1,      File o2){
        int cmpr=0;
        if (SORT_NAME.equals(fileSortOption)) {
          cmpr=new String(o1.getName()).compareTo(new String(o2.getName()));
        }
 else         if (SORT_MODIFIED.equals(fileSortOption)) {
          cmpr=new Long(o1.lastModified()).compareTo(new Long(o2.lastModified()));
        }
        return cmpr;
      }
    }
);
    ArrayList<String> filePaths=new ArrayList<>();
    for (    File file : fileReferences) {
      log(LogLevel.INFO,""String_Node_Str"" + file.getAbsolutePath());
      getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      filePaths.add(file.getAbsolutePath());
      if (filePaths.size() <= filesPerMessage) {
        callback.sendMessage(null,filePaths,unitOfWorkLastMessage);
        filePaths=new ArrayList<>();
      }
    }
    if (filePaths.size() > 0) {
      callback.sendMessage(null,filePaths,unitOfWorkLastMessage);
    }
  }
 else   if (cancelOnNoFiles) {
    callback.sendShutdownMessage(true);
  }
}","protected void pollForFiles(String path,Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkLastMessage){
  File pathDir=getNewFile(path);
  ArrayList<File> fileReferences=new ArrayList<File>();
  String[] includes=StringUtils.isNotBlank(filePattern) ? filePattern.split(""String_Node_Str"") : new String[]{""String_Node_Str""};
  DirectoryScanner scanner=getDirectoryScanner();
  scanner.setIncludes(includes);
  scanner.setBasedir(pathDir);
  scanner.setCaseSensitive(false);
  scanner.scan();
  String[] files=scanner.getIncludedFiles();
  if (files.length > 0) {
    for (int i=0; i < files.length && i < maxFilesToPoll; i++) {
      File file=getNewFile(path,files[i]);
      filesSent.add(file);
      fileReferences.add(file);
    }
    Collections.sort(fileReferences,new Comparator<File>(){
      @Override public int compare(      File o1,      File o2){
        int cmpr=0;
        if (SORT_NAME.equals(fileSortOption)) {
          cmpr=new String(o1.getName()).compareTo(new String(o2.getName()));
        }
 else         if (SORT_MODIFIED.equals(fileSortOption)) {
          cmpr=new Long(o1.lastModified()).compareTo(new Long(o2.lastModified()));
        }
        return cmpr;
      }
    }
);
    ArrayList<String> filePaths=new ArrayList<>();
    for (    File file : fileReferences) {
      log(LogLevel.INFO,""String_Node_Str"" + file.getAbsolutePath());
      getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
      filePaths.add(file.getAbsolutePath());
      if (filePaths.size() <= filesPerMessage) {
        callback.sendMessage(null,filePaths,false);
        filePaths=new ArrayList<>();
      }
    }
    if (filePaths.size() > 0) {
      callback.sendMessage(null,filePaths,unitOfWorkLastMessage);
    }
  }
 else   if (cancelOnNoFiles) {
    callback.sendShutdownMessage(true);
  }
}",0.923907177549919
167426,"@Override public ProjectVersion findProjectVersion(String projectVersionId){
  ProjectVersion projectVersion=new ProjectVersion(projectVersionId);
  refresh(projectVersion);
  return projectVersion;
}","@Override public ProjectVersion findProjectVersion(String projectVersionId){
  Map<String,Object> params=new HashMap<>();
  params.put(""String_Node_Str"",projectVersionId);
  ProjectVersion projectVersion=findOne(ProjectVersion.class,params);
  if (projectVersion != null) {
    refresh(projectVersion);
  }
  return projectVersion;
}",0.6454033771106942
167427,"protected void calculateDiff(ISendMessageCallback callback){
  Model inputModel=context.getFlowStep().getComponent().getInputModel();
  List<ModelEntity> entities=inputModel.getModelEntities();
  for (  ModelEntity entity : entities) {
    StringBuilder addSql=new StringBuilder(""String_Node_Str"");
    StringBuilder chgSql=new StringBuilder(addSql);
    StringBuilder delSql=new StringBuilder(addSql);
    appendColumns(addSql,""String_Node_Str"",entity);
    appendColumns(delSql,""String_Node_Str"",entity);
    appendColumns(chgSql,""String_Node_Str"",entity);
    addSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    delSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    chgSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    boolean secondPk=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondPk=true;
      }
    }
    addSql.append(""String_Node_Str"");
    delSql.append(""String_Node_Str"");
    chgSql.append(""String_Node_Str"");
    secondPk=false;
    boolean secondCol=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        secondPk=true;
      }
 else {
        if (secondCol) {
          chgSql.append(""String_Node_Str"");
        }
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondCol=true;
      }
    }
    log(LogLevel.INFO,""String_Node_Str"",addSql);
    log(LogLevel.INFO,""String_Node_Str"",chgSql);
    log(LogLevel.INFO,""String_Node_Str"",delSql);
    RdbmsReader reader=new RdbmsReader();
    reader.setDataSource(databasePlatform.getDataSource());
    reader.setContext(context);
    reader.setComponentDefinition(componentDefinition);
    reader.setRowsPerMessage(rowsPerMessage);
    reader.setSql(addSql.toString());
    reader.setEntityChangeType(ChangeType.ADD);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    reader.setSql(chgSql.toString());
    reader.setEntityChangeType(ChangeType.CHG);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    reader.setSql(delSql.toString());
    reader.setEntityChangeType(ChangeType.DEL);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
  }
  ResettableBasicDataSource ds=databasePlatform.getDataSource();
  ds.close();
  databasePlatform=null;
  if (!inMemoryCompare) {
    try {
      Files.list(Paths.get(System.getProperty(""String_Node_Str""))).filter(path -> path.toFile().getName().startsWith(databaseName)).forEach(path -> deleteDatabaseFile(path.toFile()));
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
}","protected void calculateDiff(ISendMessageCallback callback){
  Model inputModel=context.getFlowStep().getComponent().getInputModel();
  List<ModelEntity> entities=inputModel.getModelEntities();
  for (  ModelEntity entity : entities) {
    StringBuilder addSql=new StringBuilder(""String_Node_Str"");
    StringBuilder chgSql=new StringBuilder(addSql);
    StringBuilder delSql=new StringBuilder(addSql);
    appendColumns(addSql,""String_Node_Str"",entity);
    appendColumns(delSql,""String_Node_Str"",entity);
    appendColumns(chgSql,""String_Node_Str"",entity);
    addSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    delSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    chgSql.append(""String_Node_Str"" + entity.getName() + ""String_Node_Str""+ entity.getName()+ ""String_Node_Str"");
    boolean secondPk=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
          chgSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondPk=true;
      }
    }
    addSql.append(""String_Node_Str"");
    delSql.append(""String_Node_Str"");
    chgSql.append(""String_Node_Str"");
    secondPk=false;
    boolean secondCol=false;
    for (    ModelAttribute attribute : entity.getModelAttributes()) {
      if (attribute.isPk()) {
        if (secondPk) {
          addSql.append(""String_Node_Str"");
          delSql.append(""String_Node_Str"");
        }
        addSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        delSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"");
        secondPk=true;
      }
 else {
        if (secondCol) {
          chgSql.append(""String_Node_Str"");
        }
        chgSql.append(""String_Node_Str"").append(attribute.getName()).append(""String_Node_Str"").append(""String_Node_Str"").append(attribute.getName());
        secondCol=true;
      }
    }
    if (entity.hasOnlyPrimaryKeys()) {
      chgSql.append(""String_Node_Str"");
    }
    log(LogLevel.INFO,""String_Node_Str"",addSql);
    log(LogLevel.INFO,""String_Node_Str"",chgSql);
    log(LogLevel.INFO,""String_Node_Str"",delSql);
    RdbmsReader reader=new RdbmsReader();
    reader.setDataSource(databasePlatform.getDataSource());
    reader.setContext(context);
    reader.setComponentDefinition(componentDefinition);
    reader.setRowsPerMessage(rowsPerMessage);
    reader.setSql(addSql.toString());
    reader.setEntityChangeType(ChangeType.ADD);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    reader.setSql(chgSql.toString());
    reader.setEntityChangeType(ChangeType.CHG);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
    reader.setSql(delSql.toString());
    reader.setEntityChangeType(ChangeType.DEL);
    reader.handle(new ControlMessage(this.context.getFlowStep().getId()),callback,false);
  }
  ResettableBasicDataSource ds=databasePlatform.getDataSource();
  ds.close();
  databasePlatform=null;
  if (!inMemoryCompare) {
    try {
      Files.list(Paths.get(System.getProperty(""String_Node_Str""))).filter(path -> path.toFile().getName().startsWith(databaseName)).forEach(path -> deleteDatabaseFile(path.toFile()));
    }
 catch (    IOException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
}",0.9884268091059392
167428,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  if (inputRows == null) {
    return;
  }
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  for (  EntityData inputRow : inputRows) {
    EntityData outputRow=new EntityData();
    for (    Entry<String,Object> attrEntry : inputRow.entrySet()) {
      Set<String> newAttrIds=attrToAttrMap.get(attrEntry.getKey());
      if (newAttrIds != null) {
        for (        String newAttrId : newAttrIds) {
          outputRow.put(newAttrId,attrEntry.getValue());
        }
      }
    }
    if (setUnmappedAttributesToNull) {
      for (      ModelEntity entity : getComponent().getOutputModel().getModelEntities()) {
        for (        ModelAttribute attr : entity.getModelAttributes()) {
          if (!outputRow.containsKey(attr.getId())) {
            outputRow.put(attr.getId(),null);
          }
        }
      }
    }
    if (outputRow.size() > 0) {
      outputPayload.add(outputRow);
      getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    }
  }
  callback.sendMessage(null,outputPayload,unitOfWorkBoundaryReached);
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  if (inputRows == null) {
    return;
  }
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  for (  EntityData inputRow : inputRows) {
    EntityData outputRow=new EntityData();
    outputRow.setChangeType(inputRow.getChangeType());
    for (    Entry<String,Object> attrEntry : inputRow.entrySet()) {
      Set<String> newAttrIds=attrToAttrMap.get(attrEntry.getKey());
      if (newAttrIds != null) {
        for (        String newAttrId : newAttrIds) {
          outputRow.put(newAttrId,attrEntry.getValue());
        }
      }
    }
    if (setUnmappedAttributesToNull) {
      for (      ModelEntity entity : getComponent().getOutputModel().getModelEntities()) {
        for (        ModelAttribute attr : entity.getModelAttributes()) {
          if (!outputRow.containsKey(attr.getId())) {
            outputRow.put(attr.getId(),null);
          }
        }
      }
    }
    if (outputRow.size() > 0) {
      outputPayload.add(outputRow);
      getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    }
  }
  callback.sendMessage(null,outputPayload,unitOfWorkBoundaryReached);
}",0.9784229109454688
167429,"@Override public ArrayList<EntityData> extractData(ResultSet rs) throws SQLException, DataAccessException {
  ResultSetMetaData meta=rs.getMetaData();
  Map<Integer,String> columnHints=getSqlColumnEntityHints(sqlToExecute);
  ArrayList<String> attributeIds=getAttributeIds(meta,columnHints);
  long ts=System.currentTimeMillis();
  while (rs.next()) {
    if (outputRecCount++ % rowsPerMessage == 0 && payload != null) {
      callback.sendMessage(null,payload,false);
      payload=null;
    }
    if (payload == null) {
      payload=new ArrayList<>();
    }
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    EntityData rowData=new EntityData();
    rowData.setChangeType(entityChangeType);
    for (int i=1; i <= meta.getColumnCount(); i++) {
      String attributeId=attributeIds.get(i - 1);
      if (isNotBlank(attributeId)) {
        Object value=JdbcUtils.getResultSetValue(rs,i);
        if (trimColumns && value instanceof String) {
          value=value.toString().trim();
        }
        rowData.put(attributeId,value);
      }
    }
    payload.add(rowData);
    if (context.getDeployment() != null && context.getDeployment().asLogLevel() == LogLevel.DEBUG) {
      logEntityAttributes(rowData);
    }
    long newTs=System.currentTimeMillis();
    if (newTs - ts > 10000) {
      getExecutionTracker().updateStatistics(threadNumber,context);
      ts=newTs;
    }
  }
  return payload;
}","@Override public ArrayList<EntityData> extractData(ResultSet rs) throws SQLException, DataAccessException {
  ResultSetMetaData meta=rs.getMetaData();
  Map<Integer,String> columnHints=getSqlColumnEntityHints(sqlToExecute);
  ArrayList<String> attributeIds=getAttributeIds(meta,columnHints);
  long ts=System.currentTimeMillis();
  while (rs.next()) {
    if (outputRecCount++ % rowsPerMessage == 0 && payload != null) {
      callback.sendMessage(null,payload,false);
      messageSent=true;
      payload=null;
    }
    if (payload == null) {
      payload=new ArrayList<>();
    }
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
    EntityData rowData=new EntityData();
    rowData.setChangeType(entityChangeType);
    for (int i=1; i <= meta.getColumnCount(); i++) {
      String attributeId=attributeIds.get(i - 1);
      if (isNotBlank(attributeId)) {
        Object value=JdbcUtils.getResultSetValue(rs,i);
        if (trimColumns && value instanceof String) {
          value=value.toString().trim();
        }
        rowData.put(attributeId,value);
      }
    }
    payload.add(rowData);
    if (context.getDeployment() != null && context.getDeployment().asLogLevel() == LogLevel.DEBUG) {
      logEntityAttributes(rowData);
    }
    long newTs=System.currentTimeMillis();
    if (newTs - ts > 10000) {
      getExecutionTracker().updateStatistics(threadNumber,context);
      ts=newTs;
    }
  }
  return payload;
}",0.991701244813278
167430,"@Override protected void start(){
  TypedProperties properties=getTypedProperties();
  sqls=getSqlStatements(true);
  rowsPerMessage=properties.getLong(ROWS_PER_MESSAGE);
  trimColumns=properties.is(TRIM_COLUMNS);
  matchOnColumnNameOnly=properties.is(MATCH_ON_COLUMN_NAME_ONLY,false);
}","@Override protected void start(){
  TypedProperties properties=getTypedProperties();
  sqls=getSqlStatements(true);
  rowsPerMessage=properties.getLong(ROWS_PER_MESSAGE);
  trimColumns=properties.is(TRIM_COLUMNS);
  matchOnColumnNameOnly=properties.is(MATCH_ON_COLUMN_NAME_ONLY,false);
  messageSent=false;
}",0.9647058823529412
167431,"@Override public void handle(final Message inputMessage,final ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> inboundPayload=null;
  if (!(inputMessage instanceof ControlMessage)) {
    inboundPayload=inputMessage.getPayload();
    if (inboundPayload != null) {
      inboundRecordCount=inboundPayload.size();
    }
  }
  ArrayList<EntityData> outboundPayload=null;
  for (int i=0; i < inboundRecordCount; i++) {
    if (inboundPayload != null && inboundPayload.size() > i && inboundPayload.get(i) instanceof EntityData) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,inboundPayload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    ResultSetToEntityDataConverter resultSetToEntityDataConverter=new ResultSetToEntityDataConverter(inputMessage,callback,unitOfWorkBoundaryReached);
    for (    String sql : getSqls()) {
      String sqlToExecute=FormatUtils.replaceTokens(sql,getComponentContext().getFlowParametersAsString(),true);
      log(LogLevel.INFO,""String_Node_Str"" + sqlToExecute);
      resultSetToEntityDataConverter.setSqlToExecute(sqlToExecute);
      outboundPayload=template.query(sqlToExecute,paramMap,resultSetToEntityDataConverter);
    }
  }
  if (outboundPayload != null && outboundPayload.size() > 0) {
    callback.sendMessage(null,outboundPayload,unitOfWorkBoundaryReached);
  }
}","@Override public void handle(final Message inputMessage,final ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> inboundPayload=null;
  if (!(inputMessage instanceof ControlMessage)) {
    inboundPayload=inputMessage.getPayload();
    if (inboundPayload != null) {
      inboundRecordCount=inboundPayload.size();
    }
  }
  ArrayList<EntityData> outboundPayload=null;
  for (int i=0; i < inboundRecordCount; i++) {
    if (inboundPayload != null && inboundPayload.size() > i && inboundPayload.get(i) instanceof EntityData) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,inboundPayload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    ResultSetToEntityDataConverter resultSetToEntityDataConverter=new ResultSetToEntityDataConverter(inputMessage,callback,unitOfWorkBoundaryReached);
    for (    String sql : getSqls()) {
      String sqlToExecute=FormatUtils.replaceTokens(sql,getComponentContext().getFlowParametersAsString(),true);
      log(LogLevel.INFO,""String_Node_Str"" + sqlToExecute);
      resultSetToEntityDataConverter.setSqlToExecute(sqlToExecute);
      outboundPayload=template.query(sqlToExecute,paramMap,resultSetToEntityDataConverter);
    }
  }
  if (outboundPayload != null && outboundPayload.size() > 0) {
    callback.sendMessage(null,outboundPayload,unitOfWorkBoundaryReached);
    messageSent=true;
  }
  if (!messageSent && unitOfWorkBoundaryReached) {
    callback.sendMessage(null,new ArrayList<>(),true);
  }
}",0.9591836734693876
167432,"private void write(ISqlTransaction transaction,Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkLastMessage){
  long ts=System.currentTimeMillis();
  int totalStatementCount=0;
  TargetTable modelTable=null;
  Object[] data=null;
  List<Result> results=new ArrayList<Result>();
  List<EntityData> inputRows=inputMessage.getPayload();
  try {
    Map<TargetTableDefintion,WriteStats> statsMap=new HashMap<TargetTableDefintion,WriteStats>();
    for (    TargetTableDefintion targetTableDefinition : targetTables) {
      for (      EntityData inputRow : inputRows) {
        log.info(""String_Node_Str"" + inputRow);
        inboundEntityDataCount++;
        WriteStats stats=statsMap.get(targetTableDefinition);
        if (stats == null) {
          stats=new WriteStats();
          statsMap.put(targetTableDefinition,stats);
        }
        if (updateFirst || inputRow.getChangeType() == ChangeType.CHG) {
          modelTable=targetTableDefinition.getUpdateTable();
          if (modelTable.shouldProcess(inputRow)) {
            data=getValues(true,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
            results.add(new Result(modelTable.getStatement().getSql(),count));
            totalStatementCount++;
            stats.updateCount+=count;
            getComponentStatistics().incrementNumberEntitiesProcessed(count);
            if (insertFallback && count == 0) {
              modelTable=targetTableDefinition.getInsertTable();
              if (modelTable.shouldProcess(inputRow)) {
                log.debug(""String_Node_Str"");
                data=getValues(false,modelTable,inputRow);
                count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
                results.add(new Result(modelTable.getStatement().getSql(),count));
                totalStatementCount++;
                stats.fallbackInsertCount+=count;
                getComponentStatistics().incrementNumberEntitiesProcessed(count);
              }
            }
 else             if (count == 0 && !continueOnError) {
              throw new SqlException(String.format(""String_Node_Str"",modelTable.getStatement().getSql(),Arrays.toString(data),Arrays.toString(modelTable.getStatement().getTypes())));
            }
 else             if (count == 0) {
              stats.ignoredCount++;
            }
          }
        }
 else         if (inputRow.getChangeType() == ChangeType.ADD) {
          try {
            modelTable=targetTableDefinition.getInsertTable();
            if (modelTable.shouldProcess(inputRow)) {
              data=getValues(false,modelTable,inputRow);
              int count=execute(transaction,modelTable.getStatement(),new Object(),data,!replaceRows && !continueOnError);
              results.add(new Result(modelTable.getStatement().getSql(),count));
              totalStatementCount++;
              stats.insertCount+=count;
              getComponentStatistics().incrementNumberEntitiesProcessed(count);
            }
          }
 catch (          UniqueKeyException e) {
            if (replaceRows) {
              modelTable=targetTableDefinition.getUpdateTable();
              if (modelTable.shouldProcess(inputRow)) {
                log.debug(""String_Node_Str"");
                data=getValues(true,modelTable,inputRow);
                int count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
                results.add(new Result(modelTable.getStatement().getSql(),count));
                totalStatementCount++;
                stats.fallbackUpdateCount+=count;
                getComponentStatistics().incrementNumberEntitiesProcessed(count);
              }
            }
 else             if (!continueOnError) {
              throw e;
            }
 else {
              stats.ignoredCount++;
            }
          }
        }
 else         if (inputRow.getChangeType() == ChangeType.DEL) {
          modelTable=targetTableDefinition.getDeleteTable();
          if (modelTable.shouldProcess(inputRow)) {
            data=getValues(false,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data,!replaceRows && !continueOnError);
            results.add(new Result(modelTable.getStatement().getSql(),count));
            totalStatementCount++;
            stats.deleteCount+=count;
            getComponentStatistics().incrementNumberEntitiesProcessed(count);
          }
        }
      }
    }
    info(""String_Node_Str"",totalStatementCount,LogUtils.formatDuration(System.currentTimeMillis() - ts));
    for (    TargetTableDefintion table : targetTables) {
      WriteStats stats=statsMap.get(table);
      if (stats != null) {
        StringBuilder msg=new StringBuilder();
        if (stats.insertCount > 0) {
          msg.append(""String_Node_Str"");
          msg.append(stats.insertCount);
        }
        if (stats.fallbackUpdateCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.fallbackUpdateCount);
        }
        if (stats.updateCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.updateCount);
        }
        if (stats.deleteCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.deleteCount);
        }
        if (stats.fallbackInsertCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.fallbackInsertCount);
        }
        if (stats.ignoredCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.ignoredCount);
        }
        if (msg.length() > 0) {
          log(LogLevel.INFO,""String_Node_Str"",table.getInsertTable().getTable().getFullyQualifiedTableName(),msg.toString());
        }
      }
    }
  }
 catch (  RuntimeException ex) {
    if (modelTable != null && data != null) {
      log(LogLevel.ERROR,String.format(""String_Node_Str"",inboundEntityDataCount,modelTable.getStatement().getSql(),Arrays.toString(data),Arrays.toString(modelTable.getStatement().getTypes())));
    }
    throw ex;
  }
}","private void write(ISqlTransaction transaction,Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkLastMessage){
  long ts=System.currentTimeMillis();
  int totalStatementCount=0;
  TargetTable modelTable=null;
  Object[] data=null;
  List<Result> results=new ArrayList<Result>();
  List<EntityData> inputRows=inputMessage.getPayload();
  try {
    Map<TargetTableDefintion,WriteStats> statsMap=new HashMap<TargetTableDefintion,WriteStats>();
    for (    TargetTableDefintion targetTableDefinition : targetTables) {
      for (      EntityData inputRow : inputRows) {
        log.debug(""String_Node_Str"",inputRow);
        inboundEntityDataCount++;
        WriteStats stats=statsMap.get(targetTableDefinition);
        if (stats == null) {
          stats=new WriteStats();
          statsMap.put(targetTableDefinition,stats);
        }
        if (updateFirst || inputRow.getChangeType() == ChangeType.CHG) {
          modelTable=targetTableDefinition.getUpdateTable();
          if (modelTable.shouldProcess(inputRow)) {
            data=getValues(true,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
            results.add(new Result(modelTable.getStatement().getSql(),count));
            totalStatementCount++;
            stats.updateCount+=count;
            getComponentStatistics().incrementNumberEntitiesProcessed(count);
            if (insertFallback && count == 0) {
              modelTable=targetTableDefinition.getInsertTable();
              if (modelTable.shouldProcess(inputRow)) {
                log.debug(""String_Node_Str"");
                data=getValues(false,modelTable,inputRow);
                count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
                results.add(new Result(modelTable.getStatement().getSql(),count));
                totalStatementCount++;
                stats.fallbackInsertCount+=count;
                getComponentStatistics().incrementNumberEntitiesProcessed(count);
              }
            }
 else             if (count == 0 && !continueOnError) {
              throw new SqlException(String.format(""String_Node_Str"",modelTable.getStatement().getSql(),Arrays.toString(data),Arrays.toString(modelTable.getStatement().getTypes())));
            }
 else             if (count == 0) {
              stats.ignoredCount++;
            }
          }
        }
 else         if (inputRow.getChangeType() == ChangeType.ADD) {
          try {
            modelTable=targetTableDefinition.getInsertTable();
            if (modelTable.shouldProcess(inputRow)) {
              data=getValues(false,modelTable,inputRow);
              int count=execute(transaction,modelTable.getStatement(),new Object(),data,!replaceRows && !continueOnError);
              results.add(new Result(modelTable.getStatement().getSql(),count));
              totalStatementCount++;
              stats.insertCount+=count;
              getComponentStatistics().incrementNumberEntitiesProcessed(count);
            }
          }
 catch (          UniqueKeyException e) {
            if (replaceRows) {
              modelTable=targetTableDefinition.getUpdateTable();
              if (modelTable.shouldProcess(inputRow)) {
                log.debug(""String_Node_Str"");
                data=getValues(true,modelTable,inputRow);
                int count=execute(transaction,modelTable.getStatement(),new Object(),data,true);
                results.add(new Result(modelTable.getStatement().getSql(),count));
                totalStatementCount++;
                stats.fallbackUpdateCount+=count;
                getComponentStatistics().incrementNumberEntitiesProcessed(count);
              }
            }
 else             if (!continueOnError) {
              throw e;
            }
 else {
              stats.ignoredCount++;
            }
          }
        }
 else         if (inputRow.getChangeType() == ChangeType.DEL) {
          modelTable=targetTableDefinition.getDeleteTable();
          if (modelTable.shouldProcess(inputRow)) {
            data=getValues(false,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data,!replaceRows && !continueOnError);
            results.add(new Result(modelTable.getStatement().getSql(),count));
            totalStatementCount++;
            stats.deleteCount+=count;
            getComponentStatistics().incrementNumberEntitiesProcessed(count);
          }
        }
      }
    }
    info(""String_Node_Str"",totalStatementCount,LogUtils.formatDuration(System.currentTimeMillis() - ts));
    for (    TargetTableDefintion table : targetTables) {
      WriteStats stats=statsMap.get(table);
      if (stats != null) {
        StringBuilder msg=new StringBuilder();
        if (stats.insertCount > 0) {
          msg.append(""String_Node_Str"");
          msg.append(stats.insertCount);
        }
        if (stats.fallbackUpdateCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.fallbackUpdateCount);
        }
        if (stats.updateCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.updateCount);
        }
        if (stats.deleteCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.deleteCount);
        }
        if (stats.fallbackInsertCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.fallbackInsertCount);
        }
        if (stats.ignoredCount > 0) {
          if (msg.length() > 0) {
            msg.append(""String_Node_Str"");
          }
          msg.append(""String_Node_Str"");
          msg.append(stats.ignoredCount);
        }
        if (msg.length() > 0) {
          log(LogLevel.INFO,""String_Node_Str"",table.getInsertTable().getTable().getFullyQualifiedTableName(),msg.toString());
        }
      }
    }
  }
 catch (  RuntimeException ex) {
    if (modelTable != null && data != null) {
      log(LogLevel.ERROR,String.format(""String_Node_Str"",inboundEntityDataCount,modelTable.getStatement().getSql(),Arrays.toString(data),Arrays.toString(modelTable.getStatement().getTypes())));
    }
    throw ex;
  }
}",0.9990072546773576
167433,"private int execute(ISqlTransaction transaction,DmlStatement dmlStatement,Object marker,Object[] data,boolean logFailure){
  String sql=dmlStatement.getSql();
  if (!sql.equals(lastPreparedDml)) {
    transaction.flush();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",sql);
    }
    transaction.prepare(sql);
    lastPreparedDml=sql;
  }
  if (log.isInfoEnabled()) {
    log.info(""String_Node_Str"",Arrays.toString(data),Arrays.toString(dmlStatement.getTypes()));
  }
  try {
    return transaction.addRow(marker,data,dmlStatement.getTypes());
  }
 catch (  SqlException ex) {
    if (logFailure) {
      log(LogLevel.WARN,String.format(""String_Node_Str"",dmlStatement.getSql(),Arrays.toString(data),Arrays.toString(dmlStatement.getTypes())));
    }
    throw ex;
  }
}","private int execute(ISqlTransaction transaction,DmlStatement dmlStatement,Object marker,Object[] data,boolean logFailure){
  String sql=dmlStatement.getSql();
  if (!sql.equals(lastPreparedDml)) {
    transaction.flush();
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"",sql);
    }
    transaction.prepare(sql);
    lastPreparedDml=sql;
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",Arrays.toString(data),Arrays.toString(dmlStatement.getTypes()));
  }
  try {
    return transaction.addRow(marker,data,dmlStatement.getTypes());
  }
 catch (  SqlException ex) {
    if (logFailure) {
      log(LogLevel.WARN,String.format(""String_Node_Str"",dmlStatement.getSql(),Arrays.toString(data),Arrays.toString(dmlStatement.getTypes())));
    }
    throw ex;
  }
}",0.988593155893536
167434,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Model inputModel=getComponent().getInputModel();
  List<EntityData> inDatas=inputMessage.getPayload();
  ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas.size());
  for (  EntityData inData : inDatas) {
    EntityData outData=new EntityData();
    outDatas.add(outData);
    Set<String> attributeIds=new HashSet<String>(inData.keySet());
    attributeIds.addAll(transformsByAttributeId.keySet());
    for (    String attributeId : attributeIds) {
      String transform=transformsByAttributeId.get(attributeId);
      Object value=inData.get(attributeId);
      if (isNotBlank(transform)) {
        ModelAttribute attribute=inputModel.getAttributeById(attributeId);
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        value=ModelAttributeScriptHelper.eval(attribute,value,entity,inData,transform);
      }
      if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
        outData.put(attributeId,value);
      }
    }
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
  }
  callback.sendMessage(null,outDatas,unitOfWorkBoundaryReached);
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  Model inputModel=getComponent().getInputModel();
  List<EntityData> inDatas=inputMessage.getPayload();
  ArrayList<EntityData> outDatas=new ArrayList<EntityData>(inDatas.size());
  for (  EntityData inData : inDatas) {
    EntityData outData=new EntityData();
    outData.setChangeType(inData.getChangeType());
    outDatas.add(outData);
    Set<String> attributeIds=new HashSet<String>();
    Set<ModelEntity> processedEntities=new HashSet<ModelEntity>();
    for (    String attributeId : inData.keySet()) {
      ModelAttribute attribute=inputModel.getAttributeById(attributeId);
      if (attribute != null) {
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        if (!processedEntities.contains(entity)) {
          List<ModelAttribute> attributes=entity.getModelAttributes();
          for (          ModelAttribute modelAttribute : attributes) {
            attributeIds.add(modelAttribute.getId());
          }
          processedEntities.add(entity);
        }
      }
    }
    for (    String attributeId : attributeIds) {
      String transform=transformsByAttributeId.get(attributeId);
      Object value=inData.get(attributeId);
      if (isNotBlank(transform)) {
        ModelAttribute attribute=inputModel.getAttributeById(attributeId);
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        value=ModelAttributeScriptHelper.eval(attribute,value,entity,inData,transform);
      }
      if (value != ModelAttributeScriptHelper.REMOVE_ATTRIBUTE) {
        outData.put(attributeId,value);
      }
    }
    getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);
  }
  callback.sendMessage(null,outDatas,unitOfWorkBoundaryReached);
}",0.773419773095624
167435,"protected void deployResources(Flow flow){
  Set<Resource> flowResources=flow.findResources();
  for (  Resource flowResource : flowResources) {
    IResourceRuntime alreadyDeployed=deployedResources.get(flowResource.getId());
    Map<String,SettingDefinition> settings=resourceFactory.getSettingDefinitionsForResourceType(flowResource.getType());
    TypedProperties defaultSettings=flowResource.toTypedProperties(settings);
    TypedProperties overrideSettings=agent.toTypedProperties(flowResource);
    TypedProperties combined=new TypedProperties(defaultSettings);
    combined.putAll(overrideSettings);
    boolean deploy=true;
    if (alreadyDeployed != null) {
      deploy=false;
      Resource deployedResource=alreadyDeployed.getResource();
      TypedProperties alreadyDeployedOverrides=alreadyDeployed.getResourceRuntimeSettings();
      TypedProperties alreadyDeployedDefaultSettings=deployedResource.toTypedProperties(settings);
      TypedProperties alreadyDeployedCombined=new TypedProperties(alreadyDeployedDefaultSettings);
      alreadyDeployedCombined.putAll(alreadyDeployedOverrides);
      for (      Object key : combined.keySet()) {
        Object newObj=combined.get(key);
        Object oldObj=alreadyDeployedCombined.get(key);
        if (!ObjectUtils.equals(newObj,oldObj)) {
          deploy=true;
          break;
        }
      }
      if (deploy) {
        log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
        alreadyDeployed.stop();
      }
    }
    if (deploy) {
      log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
      IResourceRuntime resource=resourceFactory.create(flowResource,overrideSettings);
      deployedResources.put(flowResource.getId(),resource);
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void deployResources(Flow flow){
  Set<Resource> flowResources=flow.findResources();
  for (  Resource flowResource : flowResources) {
    IResourceRuntime alreadyDeployed=deployedResources.get(flowResource.getId());
    Map<String,SettingDefinition> settings=resourceFactory.getSettingDefinitionsForResourceType(flowResource.getType());
    TypedProperties defaultSettings=flowResource.toTypedProperties(settings);
    TypedProperties overrideSettings=agent.toTypedProperties(flowResource);
    TypedProperties combined=new TypedProperties(defaultSettings);
    combined.putAll(overrideSettings);
    Set<Entry<Object,Object>> entries=combined.entrySet();
    for (    Entry<Object,Object> entry : entries) {
      String value=(String)entry.getValue();
      if (value != null) {
        value=FormatUtils.replaceTokens(value,(Map)System.getProperties(),true);
        entry.setValue(value);
      }
    }
    boolean deploy=true;
    if (alreadyDeployed != null) {
      deploy=false;
      Resource deployedResource=alreadyDeployed.getResource();
      TypedProperties alreadyDeployedOverrides=alreadyDeployed.getResourceRuntimeSettings();
      TypedProperties alreadyDeployedDefaultSettings=deployedResource.toTypedProperties(settings);
      TypedProperties alreadyDeployedCombined=new TypedProperties(alreadyDeployedDefaultSettings);
      alreadyDeployedCombined.putAll(alreadyDeployedOverrides);
      for (      Object key : combined.keySet()) {
        Object newObj=combined.get(key);
        Object oldObj=alreadyDeployedCombined.get(key);
        if (!ObjectUtils.equals(newObj,oldObj)) {
          deploy=true;
          break;
        }
      }
      if (deploy) {
        log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
        alreadyDeployed.stop();
      }
    }
    if (deploy) {
      log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
      IResourceRuntime resource=resourceFactory.create(flowResource,combined);
      deployedResources.put(flowResource.getId(),resource);
    }
  }
}",0.8766485647788984
167436,"@Override protected void start(){
  super.start();
  TypedProperties properties=getTypedProperties();
  ignoreNamespace=properties.is(IGNORE_NAMESPACE);
  useParameterReplacement=properties.is(PARAMETER_REPLACEMENT);
  xmlFormat=properties.get(XML_FORMAT);
  Setting templateSetting=getComponent().findSetting(XML_FORMATTER_TEMPLATE);
  if (templateSetting != null && StringUtils.isNotBlank(templateSetting.getValue())) {
    SAXBuilder builder=new SAXBuilder();
    builder.setXMLReaderFactory(XMLReaders.NONVALIDATING);
    builder.setFeature(""String_Node_Str"",false);
    try {
      String xml=templateSetting.getValue();
      if (useParameterReplacement) {
        xml=FormatUtils.replaceTokens(xml,context.getFlowParametersAsString(),true);
      }
      templateDocument=builder.build(new StringReader(xml));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  Model model=getComponent().getInputModel();
  entitySettings=new HashMap<String,XmlFormatterEntitySetting>();
  attributeSettings=new ArrayList<XmlFormatterAttributeSetting>();
  if (model != null) {
    Map<Element,Namespace> namespaces=removeNamespaces(templateDocument);
    for (    ComponentEntitySetting compEntitySetting : getComponent().getEntitySettings()) {
      if (compEntitySetting.getName().equals(XML_FORMATTER_XPATH)) {
        XPathExpression<Element> expression=XPathFactory.instance().compile(compEntitySetting.getValue(),Filters.element());
        List<Element> matches=expression.evaluate(templateDocument.getRootElement());
        if (matches.size() == 0) {
          log(LogLevel.WARN,""String_Node_Str"" + compEntitySetting.getValue() + ""String_Node_Str"");
        }
 else {
          Element templateElement=matches.get(0);
          entitySettings.put(compEntitySetting.getEntityId(),new XmlFormatterEntitySetting(compEntitySetting,expression,templateElement));
        }
      }
    }
    restoreNamespaces(templateDocument,namespaces);
    for (    ComponentAttributeSetting compAttrSetting : getComponent().getAttributeSettings()) {
      if (compAttrSetting.getName().equals(XML_FORMATTER_XPATH)) {
        ModelAttribute attr=model.getAttributeById(compAttrSetting.getAttributeId());
        if (attr != null) {
          XPathExpression<Object> expression=XPathFactory.instance().compile(compAttrSetting.getValue());
          XmlFormatterEntitySetting entitySetting=entitySettings.get(attr.getEntityId());
          XmlFormatterAttributeSetting attrSetting=new XmlFormatterAttributeSetting(compAttrSetting,expression);
          if (entitySetting != null) {
            entitySetting.getAttributeSettings().add(attrSetting);
          }
 else {
            attributeSettings.add(attrSetting);
          }
        }
      }
    }
  }
}","@Override protected void start(){
  super.start();
  TypedProperties properties=getTypedProperties();
  ignoreNamespace=properties.is(IGNORE_NAMESPACE);
  useParameterReplacement=properties.is(PARAMETER_REPLACEMENT);
  xmlFormat=properties.get(XML_FORMAT);
  template=properties.get(XML_FORMATTER_TEMPLATE);
}",0.1866059817945383
167437,"@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  ArrayList<String> outputPayload=new ArrayList<String>();
  Document document=templateDocument.clone();
  Map<Element,Namespace> namespaces=removeNamespaces(document);
  for (  XmlFormatterEntitySetting entitySetting : entitySettings.values()) {
    List<Element> matches=entitySetting.getExpression().evaluate(document.getRootElement());
    for (    Element element : matches) {
      entitySetting.setParentElement(element.getParentElement());
    }
  }
  for (  EntityData inputRow : inputRows) {
    processInputRow(document,inputRow);
  }
  restoreNamespaces(document,namespaces);
  XMLOutputter xmlOutputter=new XMLOutputter();
  Format format=null;
  if (xmlFormat.equals(COMPACT_FORMAT)) {
    format=Format.getCompactFormat();
  }
 else   if (xmlFormat.equals(RAW_FORMAT)) {
    format=Format.getRawFormat();
  }
 else {
    format=Format.getPrettyFormat();
  }
  xmlOutputter.setFormat(format);
  outputPayload.add(xmlOutputter.outputString(document));
  log(LogLevel.DEBUG,outputPayload.toString());
  callback.sendMessage(outputPayload,unitOfWorkBoundaryReached);
}","@Override public void handle(Message inputMessage,ISendMessageCallback callback,boolean unitOfWorkBoundaryReached){
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  ArrayList<String> outputPayload=new ArrayList<String>();
  SAXBuilder builder=new SAXBuilder();
  builder.setXMLReaderFactory(XMLReaders.NONVALIDATING);
  builder.setFeature(""String_Node_Str"",false);
  Document document=null;
  try {
    document=builder.build(new StringReader(FormatUtils.replaceTokens(template,context.getFlowParametersAsString(),true)));
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
  Model model=getComponent().getInputModel();
  Map<String,XmlFormatterEntitySetting> entitySettings=new HashMap<String,XmlFormatterEntitySetting>();
  List<XmlFormatterAttributeSetting> attributeSettings=new ArrayList<XmlFormatterAttributeSetting>();
  if (model != null) {
    Map<Element,Namespace> namespaces=removeNamespaces(document);
    for (    ComponentEntitySetting compEntitySetting : getComponent().getEntitySettings()) {
      if (compEntitySetting.getName().equals(XML_FORMATTER_XPATH)) {
        XPathExpression<Element> expression=XPathFactory.instance().compile(compEntitySetting.getValue(),Filters.element());
        List<Element> matches=expression.evaluate(document.getRootElement());
        if (matches.size() == 0) {
          log(LogLevel.WARN,""String_Node_Str"" + compEntitySetting.getValue() + ""String_Node_Str"");
        }
 else {
          Element templateElement=matches.get(0);
          entitySettings.put(compEntitySetting.getEntityId(),new XmlFormatterEntitySetting(compEntitySetting,expression,templateElement));
        }
      }
    }
    restoreNamespaces(document,namespaces);
    for (    ComponentAttributeSetting compAttrSetting : getComponent().getAttributeSettings()) {
      if (compAttrSetting.getName().equals(XML_FORMATTER_XPATH)) {
        ModelAttribute attr=model.getAttributeById(compAttrSetting.getAttributeId());
        if (attr != null) {
          XPathExpression<Object> expression=XPathFactory.instance().compile(compAttrSetting.getValue());
          XmlFormatterEntitySetting entitySetting=entitySettings.get(attr.getEntityId());
          XmlFormatterAttributeSetting attrSetting=new XmlFormatterAttributeSetting(compAttrSetting,expression);
          if (entitySetting != null) {
            entitySetting.getAttributeSettings().add(attrSetting);
          }
 else {
            attributeSettings.add(attrSetting);
          }
        }
      }
    }
  }
  Map<Element,Namespace> namespaces=removeNamespaces(document);
  for (  XmlFormatterEntitySetting entitySetting : entitySettings.values()) {
    List<Element> matches=entitySetting.getExpression().evaluate(document.getRootElement());
    for (    Element element : matches) {
      entitySetting.setParentElement(element.getParentElement());
    }
  }
  for (  EntityData inputRow : inputRows) {
    processInputRow(document,inputRow,entitySettings,attributeSettings);
  }
  restoreNamespaces(document,namespaces);
  XMLOutputter xmlOutputter=new XMLOutputter();
  Format format=null;
  if (xmlFormat.equals(COMPACT_FORMAT)) {
    format=Format.getCompactFormat();
  }
 else   if (xmlFormat.equals(RAW_FORMAT)) {
    format=Format.getRawFormat();
  }
 else {
    format=Format.getPrettyFormat();
  }
  xmlOutputter.setFormat(format);
  outputPayload.add(xmlOutputter.outputString(document));
  log(LogLevel.DEBUG,outputPayload.toString());
  callback.sendMessage(outputPayload,unitOfWorkBoundaryReached);
}",0.4902772031443939
167438,"private Set<XmlFormatterEntitySetting> getEntitySettings(EntityData inputRow){
  Set<XmlFormatterEntitySetting> entitySettingSet=new HashSet<XmlFormatterEntitySetting>();
  Model model=getComponent().getInputModel();
  if (model != null && inputRow.size() > 0) {
    for (    String attributeId : inputRow.keySet()) {
      ModelAttribute attribute=model.getAttributeById(attributeId);
      if (attribute != null) {
        XmlFormatterEntitySetting entitySetting=entitySettings.get(attribute.getEntityId());
        if (entitySetting != null) {
          entitySettingSet.add(entitySetting);
        }
      }
    }
  }
  return entitySettingSet;
}","private Set<XmlFormatterEntitySetting> getEntitySettings(EntityData inputRow,Map<String,XmlFormatterEntitySetting> entitySettings){
  Set<XmlFormatterEntitySetting> entitySettingSet=new HashSet<XmlFormatterEntitySetting>();
  Model model=getComponent().getInputModel();
  if (model != null && inputRow.size() > 0) {
    for (    String attributeId : inputRow.keySet()) {
      ModelAttribute attribute=model.getAttributeById(attributeId);
      if (attribute != null) {
        XmlFormatterEntitySetting entitySetting=entitySettings.get(attribute.getEntityId());
        if (entitySetting != null) {
          entitySettingSet.add(entitySetting);
        }
      }
    }
  }
  return entitySettingSet;
}",0.9608277900960828
167439,"private void processInputRow(Document document,EntityData inputRow){
  Set<XmlFormatterEntitySetting> inputEntitySettings=getEntitySettings(inputRow);
  applyAttributeXpath(document,inputRow,attributeSettings);
  for (  XmlFormatterEntitySetting entitySetting : inputEntitySettings) {
    if (entitySetting.isFirstTimeApply()) {
      applyAttributeXpath(document,inputRow,entitySetting.getAttributeSettings());
      entitySetting.setFirstTimeApply(false);
    }
 else {
      Map<Element,Namespace> namespaces=removeNamespaces(templateDocument);
      applyAttributeXpath(templateDocument,inputRow,entitySetting.getAttributeSettings());
      restoreNamespaces(templateDocument,namespaces);
      Element clonedElement=entitySetting.getTemplateElement().clone();
      entitySetting.getParentElement().addContent(clonedElement);
    }
  }
}","private void processInputRow(Document document,EntityData inputRow,Map<String,XmlFormatterEntitySetting> entitySettings,List<XmlFormatterAttributeSetting> attributeSettings){
  Set<XmlFormatterEntitySetting> inputEntitySettings=getEntitySettings(inputRow,entitySettings);
  applyAttributeXpath(document,inputRow,attributeSettings);
  for (  XmlFormatterEntitySetting entitySetting : inputEntitySettings) {
    if (entitySetting.isFirstTimeApply()) {
      applyAttributeXpath(document,inputRow,entitySetting.getAttributeSettings());
      entitySetting.setFirstTimeApply(false);
    }
 else {
      Map<Element,Namespace> namespaces=removeNamespaces(document);
      applyAttributeXpath(document,inputRow,entitySetting.getAttributeSettings());
      restoreNamespaces(document,namespaces);
      Element clonedElement=entitySetting.getTemplateElement().clone();
      entitySetting.getParentElement().addContent(clonedElement);
    }
  }
}",0.9006176305446378
167440,"public Group(String name){
  this.name=name;
}","public Group(String name){
  this();
  this.name=name;
}",0.9019607843137256
167441,"@SuppressWarnings(""String_Node_Str"") public TopBar(ViewManager vm,ApplicationContext context){
  setWidth(100,Unit.PERCENTAGE);
  this.viewManager=vm;
  this.viewManager.addViewChangeListener(this);
  viewToButtonMapping=new HashMap<String,MenuItem>();
  menuBar=new MenuBar();
  menuBar.setWidth(100,Unit.PERCENTAGE);
  addComponent(menuBar);
  setExpandRatio(menuBar,1.0f);
  Button helpButton=new Button(""String_Node_Str"",FontAwesome.QUESTION_CIRCLE);
  helpButton.addClickListener(event -> openHelp(event));
  addComponent(helpButton);
  Button settingsButton=new Button(context.getUser().getLoginId(),FontAwesome.GEAR);
  settingsButton.addClickListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
    }
  }
);
  addComponent(settingsButton);
  Button logoutButton=new Button(""String_Node_Str"",FontAwesome.SIGN_OUT);
  logoutButton.addClickListener(event -> logout());
  addComponent(logoutButton);
  Map<Category,List<TopBarLink>> menuItemsByCategory=viewManager.getMenuItemsByCategory();
  Set<Category> categories=menuItemsByCategory.keySet();
  for (  Category category : categories) {
    if (!context.getUser().hasPrivilege(category.name())) {
      continue;
    }
    List<TopBarLink> links=menuItemsByCategory.get(category);
    if (viewManager.getDefaultView() == null && links.size() > 0) {
      viewManager.setDefaultView(links.get(0).id());
    }
    MenuItem categoryItem=null;
    if (links.size() > 1) {
      categoryItem=menuBar.addItem(category.name(),null);
      categoryItem.setCheckable(true);
      categoryItems.add(categoryItem);
    }
    for (    final TopBarLink menuLink : links) {
      Command command=new Command(){
        private static final long serialVersionUID=1L;
        @Override public void menuSelected(        MenuItem selectedItem){
          uncheckAll();
          selectedItem.setChecked(true);
          viewManager.navigateTo(menuLink.id());
        }
      }
;
      MenuItem menuItem=null;
      if (categoryItem == null) {
        menuItem=menuBar.addItem(menuLink.name(),command);
      }
 else {
        menuItem=categoryItem.addItem(menuLink.name(),command);
      }
      menuItem.setCheckable(true);
      viewToButtonMapping.put(menuLink.id(),menuItem);
    }
  }
  viewManager.navigateTo(viewManager.getDefaultView());
}","@SuppressWarnings(""String_Node_Str"") public TopBar(ViewManager vm,ApplicationContext context){
  setWidth(100,Unit.PERCENTAGE);
  this.viewManager=vm;
  this.viewManager.addViewChangeListener(this);
  viewToButtonMapping=new HashMap<String,MenuItem>();
  menuBar=new MenuBar();
  menuBar.setWidth(100,Unit.PERCENTAGE);
  addComponent(menuBar);
  setExpandRatio(menuBar,1.0f);
  Button helpButton=new Button(""String_Node_Str"",FontAwesome.QUESTION_CIRCLE);
  helpButton.addClickListener(event -> openHelp(event));
  addComponent(helpButton);
  Button settingsButton=new Button(context.getUser().getLoginId(),FontAwesome.GEAR);
  settingsButton.addClickListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
    }
  }
);
  addComponent(settingsButton);
  Button logoutButton=new Button(""String_Node_Str"",FontAwesome.SIGN_OUT);
  logoutButton.addClickListener(event -> logout());
  addComponent(logoutButton);
  Map<Category,List<TopBarLink>> menuItemsByCategory=viewManager.getMenuItemsByCategory();
  Set<Category> categories=menuItemsByCategory.keySet();
  for (  Category category : categories) {
    if (!context.getUser().hasPrivilege(category.name())) {
      log.info(""String_Node_Str"",context.getUser(),category.name());
      continue;
    }
    List<TopBarLink> links=menuItemsByCategory.get(category);
    boolean needDefaultView=viewManager.getDefaultView() == null && links.size() > 0;
    MenuItem categoryItem=null;
    if (links.size() > 1) {
      categoryItem=menuBar.addItem(category.name(),null);
      categoryItem.setCheckable(true);
      categoryItems.add(categoryItem);
    }
    if (needDefaultView) {
      viewManager.setDefaultView(links.get(0).id());
    }
    for (    final TopBarLink menuLink : links) {
      Command command=new Command(){
        private static final long serialVersionUID=1L;
        @Override public void menuSelected(        MenuItem selectedItem){
          uncheckAll();
          selectedItem.setChecked(true);
          viewManager.navigateTo(menuLink.id());
        }
      }
;
      MenuItem menuItem=null;
      if (categoryItem == null) {
        menuItem=menuBar.addItem(menuLink.name(),command);
      }
 else {
        menuItem=categoryItem.addItem(menuLink.name(),command);
      }
      menuItem.setCheckable(true);
      viewToButtonMapping.put(menuLink.id(),menuItem);
    }
  }
  viewManager.navigateTo(viewManager.getDefaultView());
}",0.8900083963056256
167442,"@SuppressWarnings(""String_Node_Str"") @Override protected void init(VaadinRequest request){
  setPollInterval(5000);
  WebApplicationContext ctx=getWebApplicationContext();
  backgroundRefresherService=ctx.getBean(BackgroundRefresherService.class);
  backgroundRefresherService.init(this);
  UI.getCurrent().setErrorHandler(new DefaultErrorHandler(){
    public void error(    com.vaadin.server.ErrorEvent event){
      String intro=""String_Node_Str"";
      String message=""String_Node_Str"";
      for (Throwable t=event.getThrowable(); t != null; t=t.getCause()) {
        if (t.getCause() == null) {
          intro+=t.getClass().getName() + ""String_Node_Str"";
          message=t.getMessage();
        }
      }
      ErrorWindow window=new ErrorWindow(intro,message);
      window.show();
      Throwable ex=event.getThrowable();
      if (ex != null) {
        log.error(ex.getMessage(),ex);
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
);
  VaadinSession.getCurrent().setConverterFactory(new DefaultConverterFactory(){
    private static final long serialVersionUID=1L;
    @Override protected Converter<Date,?> createDateConverter(    Class<?> sourceType){
      return super.createDateConverter(sourceType);
    }
    protected Converter<String,?> createStringConverter(    Class<?> sourceType){
      if (Double.class.isAssignableFrom(sourceType)) {
        return new StringToDoubleConverter();
      }
 else       if (Float.class.isAssignableFrom(sourceType)) {
        return new StringToFloatConverter();
      }
 else       if (Integer.class.isAssignableFrom(sourceType)) {
        return new StringToIntegerConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (Long.class.isAssignableFrom(sourceType)) {
        return new StringToLongConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (BigDecimal.class.isAssignableFrom(sourceType)) {
        return new StringToBigDecimalConverter();
      }
 else       if (Boolean.class.isAssignableFrom(sourceType)) {
        return new StringToBooleanConverter();
      }
 else       if (Date.class.isAssignableFrom(sourceType)) {
        return new StringToDateConverter();
      }
 else {
        return null;
      }
    }
  }
);
  Responsive.makeResponsive(this);
  ApplicationContext appCtx=ctx.getBean(ApplicationContext.class);
  if (appCtx.getConfigurationService().isUserLoginEnabled()) {
    LoginDialog login=new LoginDialog(appCtx,this);
    UI.getCurrent().addWindow(login);
  }
 else {
    User user=appCtx.getConfigurationService().findUserByLoginId(""String_Node_Str"");
    if (user == null) {
      user=new User();
      user.setLoginId(""String_Node_Str"");
      appCtx.getConfigurationService().save(user);
      Group group=new Group(""String_Node_Str"");
      appCtx.getConfigurationService().save(group);
      for (      Privilege priv : Privilege.values()) {
        GroupPrivilege groupPriv=new GroupPrivilege(group.getId(),priv.name());
        appCtx.getConfigurationService().save(groupPriv);
      }
      UserGroup userGroup=new UserGroup(user.getId(),group.getId());
      appCtx.getConfigurationService().save(userGroup);
    }
    appCtx.setUser(user);
    login(user);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void init(VaadinRequest request){
  setPollInterval(5000);
  WebApplicationContext ctx=getWebApplicationContext();
  backgroundRefresherService=ctx.getBean(BackgroundRefresherService.class);
  backgroundRefresherService.init(this);
  UI.getCurrent().setErrorHandler(new DefaultErrorHandler(){
    public void error(    com.vaadin.server.ErrorEvent event){
      String intro=""String_Node_Str"";
      String message=""String_Node_Str"";
      for (Throwable t=event.getThrowable(); t != null; t=t.getCause()) {
        if (t.getCause() == null) {
          intro+=t.getClass().getName() + ""String_Node_Str"";
          message=t.getMessage();
        }
      }
      ErrorWindow window=new ErrorWindow(intro,message);
      window.show();
      Throwable ex=event.getThrowable();
      if (ex != null) {
        log.error(ex.getMessage(),ex);
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
  }
);
  VaadinSession.getCurrent().setConverterFactory(new DefaultConverterFactory(){
    private static final long serialVersionUID=1L;
    @Override protected Converter<Date,?> createDateConverter(    Class<?> sourceType){
      return super.createDateConverter(sourceType);
    }
    protected Converter<String,?> createStringConverter(    Class<?> sourceType){
      if (Double.class.isAssignableFrom(sourceType)) {
        return new StringToDoubleConverter();
      }
 else       if (Float.class.isAssignableFrom(sourceType)) {
        return new StringToFloatConverter();
      }
 else       if (Integer.class.isAssignableFrom(sourceType)) {
        return new StringToIntegerConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (Long.class.isAssignableFrom(sourceType)) {
        return new StringToLongConverter(){
          private static final long serialVersionUID=1L;
          @Override protected NumberFormat getFormat(          Locale locale){
            NumberFormat format=super.getFormat(locale);
            format.setGroupingUsed(false);
            return format;
          }
        }
;
      }
 else       if (BigDecimal.class.isAssignableFrom(sourceType)) {
        return new StringToBigDecimalConverter();
      }
 else       if (Boolean.class.isAssignableFrom(sourceType)) {
        return new StringToBooleanConverter();
      }
 else       if (Date.class.isAssignableFrom(sourceType)) {
        return new StringToDateConverter();
      }
 else {
        return null;
      }
    }
  }
);
  Responsive.makeResponsive(this);
  ApplicationContext appCtx=ctx.getBean(ApplicationContext.class);
  if (appCtx.getConfigurationService().isUserLoginEnabled()) {
    LoginDialog login=new LoginDialog(appCtx,this);
    UI.getCurrent().addWindow(login);
  }
 else {
    User user=appCtx.getConfigurationService().findUserByLoginId(""String_Node_Str"");
    if (user == null) {
      user=new User();
      user.setLoginId(""String_Node_Str"");
      appCtx.getConfigurationService().save(user);
      Group group=new Group(""String_Node_Str"");
      user.getGroups().add(group);
      appCtx.getConfigurationService().save(group);
      for (      Privilege priv : Privilege.values()) {
        GroupPrivilege groupPriv=new GroupPrivilege(group.getId(),priv.name());
        group.getGroupPrivileges().add(groupPriv);
        appCtx.getConfigurationService().save(groupPriv);
      }
      UserGroup userGroup=new UserGroup(user.getId(),group.getId());
      appCtx.getConfigurationService().save(userGroup);
    }
    appCtx.setUser(user);
    login(user);
  }
}",0.988597189074516
167443,"protected void logOutput(Message message,String... targetFlowStepIds){
  Collection<String> targetStepIds=targetFlowStepIds != null ? Arrays.asList(targetFlowStepIds) : Collections.emptyList();
  int threadNumber=ThreadUtils.getThreadNumber();
  for (  StepRuntime targetRuntime : targetStepRuntimes) {
    boolean forward=targetStepIds == null || targetStepIds.size() == 0 || targetStepIds.contains(targetRuntime.getComponentContext().getFlowStep().getId());
    if (forward) {
      String target=targetRuntime.getComponentContext().getFlowStep().getId() != null ? componentContext.getManipulatedFlow().findFlowStepWithId(targetRuntime.getComponentContext().getFlowStep().getId()).getName() : ""String_Node_Str"";
      componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",message.getHeader().getSequenceNumber(),message.getHeader().isUnitOfWorkLastMessage()));
      Serializable payload=message.getPayload();
      if (payload instanceof List) {
        @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
        for (        Object object : list) {
          if (object instanceof EntityData) {
            Row rowData=new Row(0);
            try {
              rowData=componentContext.getFlowStep().getComponent().toRow((EntityData)object,true);
            }
 catch (            Exception e) {
            }
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",rowData));
          }
 else {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
          }
        }
      }
    }
  }
}","protected void logOutput(Message message,String... targetFlowStepIds){
  Collection<String> targetStepIds=targetFlowStepIds != null ? Arrays.asList(targetFlowStepIds) : Collections.emptyList();
  int threadNumber=ThreadUtils.getThreadNumber();
  for (  StepRuntime targetRuntime : targetStepRuntimes) {
    boolean forward=targetStepIds == null || targetStepIds.size() == 0 || targetStepIds.contains(targetRuntime.getComponentContext().getFlowStep().getId());
    if (forward) {
      componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",message.getHeader().getSequenceNumber(),message.getHeader().isUnitOfWorkLastMessage()));
      Serializable payload=message.getPayload();
      if (payload instanceof List) {
        @SuppressWarnings(""String_Node_Str"") List<Object> list=(List<Object>)payload;
        for (        Object object : list) {
          if (object instanceof EntityData) {
            Row rowData=new Row(0);
            try {
              rowData=componentContext.getFlowStep().getComponent().toRow((EntityData)object,true);
            }
 catch (            Exception e) {
            }
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",rowData));
          }
 else {
            componentContext.getExecutionTracker().log(threadNumber,LogLevel.INFO,componentContext,String.format(""String_Node_Str"",object));
          }
        }
      }
    }
  }
}",0.9281125726521872
167444,"private void processFiles(List<String> files,IMessageTarget messageTarget,boolean unitOfWorkLastMessage){
  int numberMessages=0;
  int linesInMessage=0;
  ArrayList<String> payload=new ArrayList<String>();
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int currentFileLinesRead=0;
    String currentLine;
    try {
      info(""String_Node_Str"",file);
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      while ((currentLine=reader.readLine()) != null) {
        currentFileLinesRead++;
        if (linesInMessage == textRowsPerMessage) {
          initAndSendMessage(payload,messageTarget,++numberMessages,false);
          linesInMessage=0;
          payload=new ArrayList<String>();
        }
        if (currentFileLinesRead > textHeaderLinesToSkip) {
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FILE)) {
        initAndSendMessage(payload,messageTarget,++numberMessages,true);
        numberMessages=0;
        linesInMessage=0;
      }
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
  if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_INPUT_MESSAGE) || (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FLOW) && unitOfWorkLastMessage)) {
    initAndSendMessage(payload,messageTarget,++numberMessages,true);
  }
}","private void processFiles(List<String> files,IMessageTarget messageTarget,boolean unitOfWorkLastMessage){
  int numberMessages=0;
  int linesInMessage=0;
  ArrayList<String> payload=new ArrayList<String>();
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int currentFileLinesRead=0;
    String currentLine;
    try {
      info(""String_Node_Str"",file);
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      while ((currentLine=reader.readLine()) != null) {
        currentFileLinesRead++;
        if (linesInMessage == textRowsPerMessage) {
          initAndSendMessage(payload,messageTarget,++numberMessages,false);
          linesInMessage=0;
          payload=new ArrayList<String>();
        }
        if (currentFileLinesRead > textHeaderLinesToSkip) {
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FILE)) {
        initAndSendMessage(payload,messageTarget,++numberMessages,true);
        numberMessages=0;
        linesInMessage=0;
      }
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
  if (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_INPUT_MESSAGE) || (unitOfWork.equalsIgnoreCase(UNIT_OF_WORK_FLOW) && unitOfWorkLastMessage)) {
    initAndSendMessage(payload,messageTarget,++numberMessages,true);
  }
 else {
    initAndSendMessage(payload,messageTarget,++numberMessages,false);
  }
}",0.978272390037096
167445,"@Override public void run(){
  try {
    MessageTarget target=new MessageTarget();
    while (running) {
      Message inputMessage=inQueue.take();
      if (inputMessage instanceof ShutdownMessage) {
        ShutdownMessage shutdownMessage=(ShutdownMessage)inputMessage;
        cancelled=shutdownMessage.isCancelled();
        String fromStepId=inputMessage.getHeader().getOriginatingStepId();
        removeSourceStepRuntime(fromStepId);
        if (cancelled || fromStepId == null || sourceStepRuntimes == null || sourceStepRuntimes.size() == 0 || fromStepId.equals(componentContext.getFlowStep().getId())) {
          shutdown(target);
        }
      }
 else {
        try {
          componentContext.getExecutionTracker().beforeHandle(componentContext);
          componentRuntime.handle(inputMessage,target);
        }
 catch (        Exception ex) {
          recordError(ex);
        }
 finally {
          componentContext.getExecutionTracker().afterHandle(componentContext,error);
        }
        if (isStartStep() || (sourceStepRuntimes.size() == 1 && sourceStepRuntimes.get(0).getComponentContext().equals(this.componentContext) && inQueue.size() == 0)) {
          shutdown(target);
        }
      }
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    error=ex;
  }
}","@Override public void run(){
  try {
    MessageTarget target=new MessageTarget();
    while (flowRuntime.isRunning()) {
      Message inputMessage=inQueue.poll(5,TimeUnit.SECONDS);
      if (running) {
        if (inputMessage instanceof ShutdownMessage) {
          ShutdownMessage shutdownMessage=(ShutdownMessage)inputMessage;
          cancelled=shutdownMessage.isCancelled();
          String fromStepId=inputMessage.getHeader().getOriginatingStepId();
          removeSourceStepRuntime(fromStepId);
          if (cancelled || fromStepId == null || sourceStepRuntimes == null || sourceStepRuntimes.size() == 0 || fromStepId.equals(componentContext.getFlowStep().getId())) {
            shutdown(target);
          }
        }
 else         if (inputMessage != null) {
          try {
            componentContext.getExecutionTracker().beforeHandle(componentContext);
            componentRuntime.handle(inputMessage,target);
          }
 catch (          Exception ex) {
            recordError(ex);
          }
 finally {
            componentContext.getExecutionTracker().afterHandle(componentContext,error);
          }
          if (isStartStep() || (sourceStepRuntimes.size() == 1 && sourceStepRuntimes.get(0).getComponentContext().equals(this.componentContext) && inQueue.size() == 0)) {
            shutdown(target);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    error=ex;
  }
}",0.9402823018458196
167446,"@Override public void handle(final Message inputMessage,final IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (getResourceRuntime() == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> payload=null;
  if (!(inputMessage instanceof StartupMessage)) {
    payload=inputMessage.getPayload();
    if (payload != null) {
      inboundRecordCount=payload.size();
    }
  }
  for (int i=0; i < inboundRecordCount; i++) {
    if (payload != null && payload.size() > i && payload.get(i) instanceof EntityData) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,payload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    Message message=null;
    MessageResultSetExtractor messageResultSetExtractor=new MessageResultSetExtractor(inputMessage,messageTarget);
    for (    String sql : sqls) {
      String sqlToExecute=FormatUtils.replaceTokens(sql,context.getFlowParametersAsString(),true);
      log(LogLevel.DEBUG,""String_Node_Str"" + sqlToExecute);
      messageResultSetExtractor.setSqlToExecute(sqlToExecute);
      message=template.query(sqlToExecute,paramMap,messageResultSetExtractor);
    }
    if (message != null) {
      message.getHeader().setLastMessage(true);
    }
  }
}","@Override public void handle(final Message inputMessage,final IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (getResourceRuntime() == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> payload=null;
  if (!(inputMessage instanceof StartupMessage)) {
    payload=inputMessage.getPayload();
    if (payload != null) {
      inboundRecordCount=payload.size();
    }
  }
  for (int i=0; i < inboundRecordCount; i++) {
    if (payload != null && payload.size() > i && payload.get(i) instanceof EntityData) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,payload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    MessageResultSetExtractor messageResultSetExtractor=new MessageResultSetExtractor(inputMessage,messageTarget);
    Message message=null;
    for (    String sql : sqls) {
      String sqlToExecute=FormatUtils.replaceTokens(sql,context.getFlowParametersAsString(),true);
      log(LogLevel.DEBUG,""String_Node_Str"" + sqlToExecute);
      messageResultSetExtractor.setSqlToExecute(sqlToExecute);
      message=template.query(sqlToExecute,paramMap,messageResultSetExtractor);
    }
    if (message != null) {
      message.getHeader().setLastMessage(true);
      messageTarget.put(message);
    }
  }
}",0.9708078750848608
167447,"@Override public Message extractData(ResultSet rs) throws SQLException, DataAccessException {
  ResultSetMetaData meta=rs.getMetaData();
  Map<Integer,String> columnHints=getSqlColumnEntityHints(sqlToExecute);
  ArrayList<String> attributeIds=getAttributeIds(meta,columnHints);
  while (rs.next()) {
    if (outputRecCount++ % rowsPerMessage == 0 || message == null) {
      message=createMessage(inputMessage);
      getComponentStatistics().incrementOutboundMessages();
      message.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
      messageTarget.put(message);
    }
    getComponentStatistics().incrementNumberEntitiesProcessed();
    EntityData rowData=new EntityData();
    for (int i=1; i <= meta.getColumnCount(); i++) {
      Object value=JdbcUtils.getResultSetValue(rs,i);
      if (trimColumns && value instanceof String) {
        value=value.toString().trim();
      }
      rowData.put(attributeIds.get(i - 1),value);
    }
    ArrayList<EntityData> payload=message.getPayload();
    payload.add(rowData);
    if (context.getDeployment() != null && context.getDeployment().asLogLevel() == LogLevel.DEBUG) {
      logEntityAttributes(rowData);
    }
  }
  return message;
}","@Override public Message extractData(ResultSet rs) throws SQLException, DataAccessException {
  ResultSetMetaData meta=rs.getMetaData();
  Map<Integer,String> columnHints=getSqlColumnEntityHints(sqlToExecute);
  ArrayList<String> attributeIds=getAttributeIds(meta,columnHints);
  while (rs.next()) {
    if (outputRecCount++ % rowsPerMessage == 0 && message != null) {
      messageTarget.put(message);
      message=null;
    }
    getComponentStatistics().incrementNumberEntitiesProcessed();
    if (message == null) {
      message=createMessage(inputMessage);
      getComponentStatistics().incrementOutboundMessages();
      message.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
    }
    EntityData rowData=new EntityData();
    for (int i=1; i <= meta.getColumnCount(); i++) {
      Object value=JdbcUtils.getResultSetValue(rs,i);
      if (trimColumns && value instanceof String) {
        value=value.toString().trim();
      }
      rowData.put(attributeIds.get(i - 1),value);
    }
    ArrayList<EntityData> payload=message.getPayload();
    payload.add(rowData);
    if (context.getDeployment() != null && context.getDeployment().asLogLevel() == LogLevel.DEBUG) {
      logEntityAttributes(rowData);
    }
  }
  return message;
}",0.8903071400079776
167448,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    for (    EntityData entityData : datas) {
      lookup.put(entityData.get(keyAttributeId),entityData.get(valueAttributeId));
    }
    lookupInitialized=inputMessage.getHeader().isLastMessage();
    if (lookupInitialized) {
      Iterator<Message> messages=queuedWhileWaitingForLookup.iterator();
      while (messages.hasNext()) {
        Message message=messages.next();
        enhanceAndSend(message,messageTarget);
      }
    }
  }
 else   if (!lookupInitialized) {
    queuedWhileWaitingForLookup.add(inputMessage);
  }
 else   if (lookupInitialized) {
    enhanceAndSend(inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (sourceStepId.equals(inputMessage.getHeader().getOriginatingStepId())) {
    List<EntityData> datas=inputMessage.getPayload();
    for (    EntityData entityData : datas) {
      lookup.put(entityData.get(keyAttributeId),entityData.get(valueAttributeId));
    }
    lookupInitialized=inputMessage.getHeader().isLastMessage();
    if (lookupInitialized) {
      Iterator<Message> messages=queuedWhileWaitingForLookup.iterator();
      while (messages.hasNext()) {
        Message message=messages.next();
        enhanceAndSend(message,messageTarget);
      }
    }
  }
 else   if (!lookupInitialized) {
    queuedWhileWaitingForLookup.add(inputMessage);
  }
 else   if (lookupInitialized) {
    enhanceAndSend(inputMessage,messageTarget);
  }
}",0.9774011299435028
167449,"@SuppressWarnings(""String_Node_Str"") public void start(String executionId,Map<String,IResourceRuntime> deployedResources,Agent agent,List<Notification> notifications,Map<String,String> globalSettings) throws InterruptedException {
  this.stepRuntimes=new HashMap<String,StepRuntime>();
  this.agent=agent;
  this.notifications=notifications;
  this.mailSession=new MailSession(globalSettings);
  Map<String,Serializable> parameters=getFlowParameters(deployment.getAgentDeploymentParameters(),agent.getAgentParameters());
  this.flowParameters=MapUtils.typedMap(parameters,String.class,String.class);
  Flow flow=deployment.getFlow();
  List<FlowStep> steps=flow.getFlowSteps();
  executionTracker.beforeFlow(executionId);
  sendNotifications(Notification.EventType.FLOW_START);
  for (  FlowStep flowStep : steps) {
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    if (enabled) {
      ComponentContext context=new ComponentContext(flowStep,flow,executionTracker,deployedResources.get(flowStep.getComponent().getResourceId()),parameters,globalSettings);
      StepRuntime stepRuntime=new StepRuntime(componentFactory.create(flowStep.getComponent().getType()),context,this);
      stepRuntimes.put(flowStep.getId(),stepRuntime);
    }
  }
  List<FlowStepLink> links=flow.getFlowStepLinks();
  for (  String stepId : stepRuntimes.keySet()) {
    List<StepRuntime> targetStepRuntimes=new ArrayList<StepRuntime>();
    List<StepRuntime> sourceStepRuntimes=new ArrayList<StepRuntime>();
    for (    FlowStepLink flowStepLink : links) {
      if (stepId.equals(flowStepLink.getSourceStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getTargetStepId());
        if (runtime != null) {
          targetStepRuntimes.add(runtime);
        }
      }
 else       if (stepId.equals(flowStepLink.getTargetStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getSourceStepId());
        if (runtime != null) {
          sourceStepRuntimes.add(runtime);
        }
      }
    }
    StepRuntime runtime=stepRuntimes.get(stepId);
    if (runtime != null) {
      runtime.setTargetStepRuntimes(targetStepRuntimes);
      runtime.setSourceStepRuntimes(sourceStepRuntimes);
    }
  }
  List<StepRuntime> startSteps=findStartSteps();
  flow.calculateApproximateOrder();
  List<FlowStep> flowSteps=flow.getFlowSteps();
  for (  FlowStep flowStep : flowSteps) {
    StepRuntime stepRuntime=stepRuntimes.get(flowStep.getId());
    try {
      stepRuntime.start(executionTracker,resourceFactory);
    }
 catch (    RuntimeException ex) {
      stepRuntime.error=ex;
      throw ex;
    }
  }
  for (  StepRuntime stepRuntime : stepRuntimes.values()) {
    stepRuntime.setRunning(true);
    threadService.execute(stepRuntime);
  }
  StartupMessage startMessage=new StartupMessage();
  for (  StepRuntime stepRuntime : startSteps) {
    stepRuntime.queue(startMessage);
  }
}","@SuppressWarnings(""String_Node_Str"") public void start(String executionId,Map<String,IResourceRuntime> deployedResources,Agent agent,List<Notification> notifications,Map<String,String> globalSettings) throws InterruptedException {
  this.stepRuntimes=new HashMap<String,StepRuntime>();
  this.agent=agent;
  this.notifications=notifications;
  this.mailSession=new MailSession(globalSettings);
  Map<String,Serializable> parameters=getFlowParameters(deployment.getAgentDeploymentParameters(),agent.getAgentParameters());
  this.flowParameters=MapUtils.typedMap(parameters,String.class,String.class);
  Flow flow=deployment.getFlow();
  List<FlowStep> steps=flow.getFlowSteps();
  executionTracker.beforeFlow(executionId);
  sendNotifications(Notification.EventType.FLOW_START);
  for (  FlowStep flowStep : steps) {
    boolean enabled=flowStep.getComponent().getBoolean(AbstractComponentRuntime.ENABLED,true);
    if (enabled) {
      ComponentContext context=new ComponentContext(flowStep,flow,executionTracker,deployedResources.get(flowStep.getComponent().getResourceId()),parameters,globalSettings);
      StepRuntime stepRuntime=new StepRuntime(componentFactory.create(flowStep.getComponent().getType()),context,this);
      stepRuntimes.put(flowStep.getId(),stepRuntime);
    }
  }
  List<FlowStepLink> links=flow.getFlowStepLinks();
  for (  String stepId : stepRuntimes.keySet()) {
    List<StepRuntime> targetStepRuntimes=new ArrayList<StepRuntime>();
    List<StepRuntime> sourceStepRuntimes=new ArrayList<StepRuntime>();
    for (    FlowStepLink flowStepLink : links) {
      if (stepId.equals(flowStepLink.getSourceStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getTargetStepId());
        if (runtime != null) {
          targetStepRuntimes.add(runtime);
        }
      }
 else       if (stepId.equals(flowStepLink.getTargetStepId())) {
        StepRuntime runtime=stepRuntimes.get(flowStepLink.getSourceStepId());
        if (runtime != null) {
          sourceStepRuntimes.add(runtime);
        }
      }
    }
    StepRuntime runtime=stepRuntimes.get(stepId);
    if (runtime != null) {
      runtime.setTargetStepRuntimes(targetStepRuntimes);
      runtime.setSourceStepRuntimes(sourceStepRuntimes);
    }
  }
  List<StepRuntime> startSteps=findStartSteps();
  flow.calculateApproximateOrder();
  List<FlowStep> flowSteps=flow.getFlowSteps();
  for (  FlowStep flowStep : flowSteps) {
    StepRuntime stepRuntime=stepRuntimes.get(flowStep.getId());
    if (stepRuntime != null) {
      try {
        stepRuntime.start(executionTracker,resourceFactory);
      }
 catch (      RuntimeException ex) {
        stepRuntime.error=ex;
        throw ex;
      }
    }
  }
  for (  StepRuntime stepRuntime : stepRuntimes.values()) {
    stepRuntime.setRunning(true);
    threadService.execute(stepRuntime);
  }
  StartupMessage startMessage=new StartupMessage();
  for (  StepRuntime stepRuntime : startSteps) {
    stepRuntime.queue(startMessage);
  }
}",0.9913924050632912
167450,"public void refresh(){
  for (  IDb db : dbs) {
    try {
      BasicDataSource ds=db.getPlatform().getDataSource();
      ds.close();
    }
 catch (    SQLException e) {
    }
  }
  dbs.clear();
  dbs.add(new IDb(){
    @Override public IDatabasePlatform getPlatform(){
      return platform;
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
  }
);
  IAgentManager agentManager=context.getAgentManager();
  Collection<Agent> agents=agentManager.getAvailableAgents();
  for (  Agent agent : agents) {
    AgentRuntime runtime=agentManager.getAgentRuntime(agent);
    Collection<IResourceRuntime> resources=runtime.getDeployedResources();
    for (    IResourceRuntime iResource : resources) {
      if (iResource.getResource().getType().equals(Datasource.TYPE)) {
        DbResource db=new DbResource(agent,iResource);
        dbs.add(db);
      }
    }
  }
  Collections.sort(dbs,new Comparator<IDb>(){
    @Override public int compare(    IDb o1,    IDb o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
}","public void refresh(){
  for (  IDb db : dbs) {
    if (db instanceof DbResource) {
      ((DbResource)db).close();
    }
  }
  dbs.clear();
  dbs.add(new IDb(){
    @Override public IDatabasePlatform getPlatform(){
      return platform;
    }
    @Override public String getName(){
      return ""String_Node_Str"";
    }
  }
);
  IAgentManager agentManager=context.getAgentManager();
  Collection<Agent> agents=agentManager.getAvailableAgents();
  for (  Agent agent : agents) {
    AgentRuntime runtime=agentManager.getAgentRuntime(agent);
    Collection<IResourceRuntime> resources=runtime.getDeployedResources();
    for (    IResourceRuntime iResource : resources) {
      if (iResource.getResource().getType().equals(Datasource.TYPE)) {
        DbResource db=new DbResource(agent,iResource);
        dbs.add(db);
      }
    }
  }
  Collections.sort(dbs,new Comparator<IDb>(){
    @Override public int compare(    IDb o1,    IDb o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
}",0.9210653753026634
167451,"protected void archive(String archivePath){
  String path=getResourceRuntime().getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}","protected void archive(String archivePath){
  String path=getResourceRuntime().getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      File targetFile=new File(destDir,srcFile.getName());
      if (targetFile.exists()) {
        info(""String_Node_Str"");
        FileUtils.deleteQuietly(targetFile);
      }
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}",0.838475499092559
167452,"protected String getSampleXml(){
  Model model=component.getInputModel();
  String batchXml=""String_Node_Str"";
  if (model != null) {
    ArrayList<EntityData> inputRows=new ArrayList<EntityData>();
    for (    ModelEntity entity : getMatchingEntities(filterField.getValue())) {
      for (      ModelAttribute attr : entity.getModelAttributes()) {
        EntityData data=new EntityData();
        DataType type=attr.getDataType();
        String value=null;
        if (type.isString()) {
          value=RandomStringUtils.randomAlphanumeric(10);
        }
 else         if (type.isNumeric()) {
          value=String.valueOf(RandomUtils.nextInt());
        }
 else         if (type.isTimestamp()) {
          value=new Date(RandomUtils.nextLong()).toString();
        }
 else         if (type.isBoolean()) {
          value=Boolean.toString(RandomUtils.nextBoolean());
        }
        data.put(attr.getId(),value);
        inputRows.add(data);
      }
    }
    batchXml=XsltProcessor.getBatchXml(model,inputRows,false);
  }
  return batchXml;
}","protected String getSampleXml(){
  Model model=component.getInputModel();
  String batchXml=""String_Node_Str"";
  if (model != null) {
    ArrayList<EntityData> inputRows=new ArrayList<EntityData>();
    for (    ModelEntity entity : getMatchingEntities(filterField.getValue())) {
      for (      ModelAttribute attr : entity.getModelAttributes()) {
        EntityData data=new EntityData();
        DataType type=attr.getDataType();
        Object value=null;
        if (type.isString()) {
          value=RandomStringUtils.randomAlphanumeric(10);
        }
 else         if (type.isNumeric()) {
          value=String.valueOf(RandomUtils.nextInt());
        }
 else         if (type.isTimestamp()) {
          value=new Date(RandomUtils.nextInt(Integer.MAX_VALUE) * 1000l);
        }
 else         if (type.isBoolean()) {
          value=Boolean.toString(RandomUtils.nextBoolean());
        }
        data.put(attr.getId(),value);
        inputRows.add(data);
      }
    }
    batchXml=XsltProcessor.getBatchXml(model,inputRows,false);
  }
  return batchXml;
}",0.9730496453900708
167453,"protected List<Agent> findAgents(Map<String,Object> params,Folder folder){
  List<Agent> list=persistenceManager.find(Agent.class,params,null,null,tableName(Agent.class));
  Map<String,Folder> folderMapById=new HashMap<String,Folder>();
  if (folder != null) {
    folderMapById.put(folder.getId(),folder);
  }
 else {
    folderMapById=foldersById(null,FolderType.AGENT);
  }
  for (  Agent agent : list) {
    agent.setFolder(folderMapById.get(agent.getFolderId()));
    refreshAgentSettings(agent);
    refreshAgentResourceSettings(agent);
    refreshAgentDeployments(agent);
  }
  Collections.sort(list,new Comparator<Agent>(){
    @Override public int compare(    Agent o1,    Agent o2){
      return o1.getCreateTime().compareTo(o2.getCreateTime());
    }
  }
);
  return list;
}","protected List<Agent> findAgents(Map<String,Object> params,Folder folder){
  List<Agent> list=persistenceManager.find(Agent.class,params,null,null,tableName(Agent.class));
  Map<String,Folder> folderMapById=new HashMap<String,Folder>();
  if (folder != null) {
    folderMapById.put(folder.getId(),folder);
  }
 else {
    folderMapById=foldersById(null,FolderType.AGENT);
  }
  for (  Agent agent : list) {
    refreshAgentSettings(agent);
    refreshAgentResourceSettings(agent);
    refreshAgentDeployments(agent);
    agent.setFolder(folderMapById.get(agent.getFolderId()));
  }
  Collections.sort(list,new Comparator<Agent>(){
    @Override public int compare(    Agent o1,    Agent o2){
      return o1.getCreateTime().compareTo(o2.getCreateTime());
    }
  }
);
  return list;
}",0.8598726114649682
167454,"@Override public void handle(final Message inputMessage,final IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (error == null || !stopProcessingOnError) {
    if (getResourceRuntime() == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ArrayList<EntityData> inputRows=inputMessage.getPayload();
    if (inputRows == null) {
      return;
    }
    ISqlTransaction transaction=platform.getSqlTemplate().startSqlTransaction();
    transaction.setInBatchMode(batchMode);
    try {
      write(transaction,inputRows);
      transaction.commit();
    }
 catch (    Throwable ex) {
      error=ex;
      transaction.rollback();
      if (ex instanceof RuntimeException) {
        throw (RuntimeException)ex;
      }
 else {
        throw new RuntimeException(ex);
      }
    }
 finally {
      transaction.close();
    }
  }
}","@Override public void handle(final Message inputMessage,final IMessageTarget messageTarget){
  lastPreparedDml=null;
  getComponentStatistics().incrementInboundMessages();
  if (error == null || !stopProcessingOnError) {
    if (getResourceRuntime() == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    ArrayList<EntityData> inputRows=inputMessage.getPayload();
    if (inputRows == null) {
      return;
    }
    ISqlTransaction transaction=platform.getSqlTemplate().startSqlTransaction();
    transaction.setInBatchMode(batchMode);
    try {
      write(transaction,inputRows);
      transaction.commit();
    }
 catch (    Throwable ex) {
      error=ex;
      transaction.rollback();
      if (ex instanceof RuntimeException) {
        throw (RuntimeException)ex;
      }
 else {
        throw new RuntimeException(ex);
      }
    }
 finally {
      transaction.close();
    }
  }
}",0.9866220735785952
167455,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
    Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
    while (messages.hasNext()) {
      Message message=messages.next();
      multiply(message,messageTarget);
    }
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
 else   if (multipliersInitialized) {
    multiply(inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
    if (multipliersInitialized) {
      Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
      while (messages.hasNext()) {
        Message message=messages.next();
        multiply(message,messageTarget);
      }
    }
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
 else   if (multipliersInitialized) {
    multiply(inputMessage,messageTarget);
  }
}",0.9676165803108808
167456,"public MessageScriptHelper(ComponentContext context,ComponentStatistics componentStatistics){
  this.context=context;
  this.resource=context.getResourceRuntime();
  this.componentStatistics=componentStatistics;
  this.flow=context.getFlow();
  this.flowStep=context.getFlowStep();
}","public MessageScriptHelper(IComponentRuntime component){
  this.context=component.getComponentContext();
  this.resource=context.getResourceRuntime();
  this.componentStatistics=context.getComponentStatistics();
  this.flow=context.getFlow();
  this.flowStep=context.getFlowStep();
}",0.4805653710247349
167457,"private EntityData processInputRow(String inputRow) throws IOException {
  CsvReader csvReader=new CsvReader(new ByteArrayInputStream(inputRow.getBytes()),Charset.forName(encoding));
  csvReader.setDelimiter(delimiter.charAt(0));
  if (isNotBlank(quoteCharacter)) {
    csvReader.setTextQualifier(quoteCharacter.charAt(0));
    csvReader.setUseTextQualifier(true);
  }
  if (csvReader.readRecord()) {
    EntityData data=new EntityData();
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object value=csvReader.get(attribute.getOrdinal() - 1);
        if (isNotBlank(attribute.getFormatFunction())) {
          value=ModelAttributeScriptHelper.eval(attribute.getAttribute(),value,attribute.getEntity(),data,attribute.getFormatFunction());
        }
        data.put(attribute.getAttributeId(),value);
      }
    }
 else {
      Model model=getComponent().getOutputModel();
      List<ModelEntity> entities=model.getModelEntities();
      int index=0;
      for (      ModelEntity modelEntity : entities) {
        List<ModelAttribute> attributes=modelEntity.getModelAttributes();
        for (        ModelAttribute modelAttribute : attributes) {
          data.put(modelAttribute.getId(),csvReader.get(index));
        }
      }
    }
    return data;
  }
  return null;
}","private EntityData processInputRow(String inputRow) throws IOException {
  CsvReader csvReader=new CsvReader(new ByteArrayInputStream(inputRow.getBytes()),Charset.forName(encoding));
  csvReader.setDelimiter(delimiter.charAt(0));
  if (isNotBlank(quoteCharacter)) {
    csvReader.setTextQualifier(quoteCharacter.charAt(0));
    csvReader.setUseTextQualifier(true);
  }
 else {
    csvReader.setUseTextQualifier(false);
  }
  if (csvReader.readRecord()) {
    EntityData data=new EntityData();
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object value=csvReader.get(attribute.getOrdinal() - 1);
        if (isNotBlank(attribute.getFormatFunction())) {
          value=ModelAttributeScriptHelper.eval(attribute.getAttribute(),value,attribute.getEntity(),data,attribute.getFormatFunction());
        }
        data.put(attribute.getAttributeId(),value);
      }
    }
 else {
      Model model=getComponent().getOutputModel();
      List<ModelEntity> entities=model.getModelEntities();
      int index=0;
      for (      ModelEntity modelEntity : entities) {
        List<ModelAttribute> attributes=modelEntity.getModelAttributes();
        for (        ModelAttribute modelAttribute : attributes) {
          data.put(modelAttribute.getId(),csvReader.get(index));
        }
      }
    }
    return data;
  }
  return null;
}",0.9800295857988166
167458,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  Resource resource=getComponent().getResource();
  String path=resource.get(LocalFile.LOCALFILE_PATH);
  if (useTriggerFile) {
    File triggerFile=new File(path,triggerFilePath);
    if (triggerFile.exists()) {
      pollForFiles(path,inputMessage,messageTarget);
      FileUtils.deleteQuietly(triggerFile);
    }
 else     if (cancelOnNoFiles) {
      getComponentStatistics().incrementOutboundMessages();
      messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
    }
  }
 else {
    pollForFiles(path,inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  IResourceRuntime resourceRuntime=getResourceRuntime();
  String path=resourceRuntime.getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  if (useTriggerFile) {
    File triggerFile=new File(path,triggerFilePath);
    if (triggerFile.exists()) {
      pollForFiles(path,inputMessage,messageTarget);
      FileUtils.deleteQuietly(triggerFile);
    }
 else     if (cancelOnNoFiles) {
      getComponentStatistics().incrementOutboundMessages();
      messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
    }
  }
 else {
    pollForFiles(path,inputMessage,messageTarget);
  }
}",0.9431818181818182
167459,"protected void archive(String archivePath){
  Resource resource=getComponent().getResource();
  String path=resource.get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}","protected void archive(String archivePath){
  String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}",0.8896103896103896
167460,"protected void pollForFiles(String path,Message inputMessage,IMessageTarget messageTarget){
  File pathDir=new File(path);
  ArrayList<String> filePaths=new ArrayList<String>();
  String[] includes=StringUtils.isNotBlank(filePattern) ? filePattern.split(""String_Node_Str"") : new String[]{""String_Node_Str""};
  DirectoryScanner scanner=new DirectoryScanner();
  scanner.setIncludes(includes);
  scanner.setBasedir(pathDir);
  scanner.setCaseSensitive(false);
  scanner.scan();
  String[] files=scanner.getIncludedFiles();
  if (files.length > 0) {
    for (    String filePath : files) {
      File file=new File(path,filePath);
      filesSent.add(file);
      log(LogLevel.INFO,""String_Node_Str"" + file.getAbsolutePath());
      getComponentStatistics().incrementNumberEntitiesProcessed();
      filePaths.add(file.getAbsolutePath());
    }
    getComponentStatistics().incrementOutboundMessages();
    messageTarget.put(inputMessage.copy(getFlowStepId(),filePaths));
  }
 else   if (cancelOnNoFiles) {
    getComponentStatistics().incrementOutboundMessages();
    messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
  }
}","protected void pollForFiles(String path,Message inputMessage,IMessageTarget messageTarget){
  File pathDir=new File(path);
  ArrayList<String> filePaths=new ArrayList<String>();
  ArrayList<File> fileReferences=new ArrayList<File>();
  String[] includes=StringUtils.isNotBlank(filePattern) ? filePattern.split(""String_Node_Str"") : new String[]{""String_Node_Str""};
  DirectoryScanner scanner=new DirectoryScanner();
  scanner.setIncludes(includes);
  scanner.setBasedir(pathDir);
  scanner.setCaseSensitive(false);
  scanner.scan();
  String[] files=scanner.getIncludedFiles();
  if (files.length > 0) {
    for (    String filePath : files) {
      File file=new File(path,filePath);
      filesSent.add(file);
      fileReferences.add(file);
    }
    Collections.sort(fileReferences,new Comparator<File>(){
      @Override public int compare(      File o1,      File o2){
        return new Long(o1.lastModified()).compareTo(new Long(o2.lastModified()));
      }
    }
);
    for (    File file : fileReferences) {
      log(LogLevel.INFO,""String_Node_Str"" + file.getAbsolutePath());
      getComponentStatistics().incrementNumberEntitiesProcessed();
      filePaths.add(file.getAbsolutePath());
    }
    getComponentStatistics().incrementOutboundMessages();
    messageTarget.put(inputMessage.copy(getFlowStepId(),filePaths));
  }
 else   if (cancelOnNoFiles) {
    getComponentStatistics().incrementOutboundMessages();
    messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
  }
}",0.8622526636225266
167461,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    List<String> fullyQualifiedFiles=inputMessage.getPayload();
    String path=getResourceRuntime().getResource().get(LocalFile.LOCALFILE_PATH);
    for (    String fullyQualifiedFile : fullyQualifiedFiles) {
      if (fullyQualifiedFile.startsWith(path)) {
        files.add(fullyQualifiedFile.substring(path.length()));
      }
 else {
        files.add(fullyQualifiedFile);
      }
    }
  }
 else {
    files.add(relativePathAndFile);
  }
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int linesInMessage=0;
    try {
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,false);
            linesInMessage=0;
            payload=new ArrayList<String>();
          }
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    List<String> fullyQualifiedFiles=inputMessage.getPayload();
    String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
    for (    String fullyQualifiedFile : fullyQualifiedFiles) {
      if (fullyQualifiedFile.startsWith(path)) {
        files.add(fullyQualifiedFile.substring(path.length()));
      }
 else {
        files.add(fullyQualifiedFile);
      }
    }
  }
 else {
    files.add(relativePathAndFile);
  }
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int linesInMessage=0;
    try {
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,false);
            linesInMessage=0;
            payload=new ArrayList<String>();
          }
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}",0.9945786101527846
167462,"protected void archive(String archivePath){
  Resource resource=getComponent().getResource();
  String path=resource.get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  String srcFile : filesRead) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile,destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(new File(path,srcFile),destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}","protected void archive(String archivePath){
  String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  String srcFile : filesRead) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile,destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(new File(path,srcFile),destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}",0.8893709327548807
167463,"protected void deployResources(Flow flow){
  Set<Resource> flowResources=flow.findResources();
  for (  Resource flowResource : flowResources) {
    IResourceRuntime alreadyDeployed=deployedResources.get(flowResource.getId());
    Map<String,SettingDefinition> settings=resourceFactory.getSettingDefinitionsForResourceType(flowResource.getType());
    TypedProperties defaultSettings=flowResource.toTypedProperties(settings);
    TypedProperties overrideSettings=agent.toTypedProperties(flowResource);
    TypedProperties combined=new TypedProperties(defaultSettings);
    combined.putAll(overrideSettings);
    boolean deploy=true;
    if (alreadyDeployed != null) {
      deploy=false;
      Resource deployedResource=alreadyDeployed.getResource();
      TypedProperties alreadyDeployedOverrides=alreadyDeployed.getAgentOverrides();
      TypedProperties alreadyDeployedDefaultSettings=deployedResource.toTypedProperties(settings);
      TypedProperties alreadyDeployedCombined=new TypedProperties(alreadyDeployedDefaultSettings);
      alreadyDeployedCombined.putAll(alreadyDeployedOverrides);
      for (      Object key : combined.keySet()) {
        Object newObj=combined.get(key);
        Object oldObj=alreadyDeployedCombined.get(key);
        if (!ObjectUtils.equals(newObj,oldObj)) {
          deploy=true;
          break;
        }
      }
      if (deploy) {
        log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
        alreadyDeployed.stop();
      }
    }
    if (deploy) {
      log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
      IResourceRuntime resource=resourceFactory.create(flowResource,overrideSettings);
      deployedResources.put(flowResource.getId(),resource);
    }
  }
}","protected void deployResources(Flow flow){
  Set<Resource> flowResources=flow.findResources();
  for (  Resource flowResource : flowResources) {
    IResourceRuntime alreadyDeployed=deployedResources.get(flowResource.getId());
    Map<String,SettingDefinition> settings=resourceFactory.getSettingDefinitionsForResourceType(flowResource.getType());
    TypedProperties defaultSettings=flowResource.toTypedProperties(settings);
    TypedProperties overrideSettings=agent.toTypedProperties(flowResource);
    TypedProperties combined=new TypedProperties(defaultSettings);
    combined.putAll(overrideSettings);
    boolean deploy=true;
    if (alreadyDeployed != null) {
      deploy=false;
      Resource deployedResource=alreadyDeployed.getResource();
      TypedProperties alreadyDeployedOverrides=alreadyDeployed.getResourceRuntimeSettings();
      TypedProperties alreadyDeployedDefaultSettings=deployedResource.toTypedProperties(settings);
      TypedProperties alreadyDeployedCombined=new TypedProperties(alreadyDeployedDefaultSettings);
      alreadyDeployedCombined.putAll(alreadyDeployedOverrides);
      for (      Object key : combined.keySet()) {
        Object newObj=combined.get(key);
        Object oldObj=alreadyDeployedCombined.get(key);
        if (!ObjectUtils.equals(newObj,oldObj)) {
          deploy=true;
          break;
        }
      }
      if (deploy) {
        log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
        alreadyDeployed.stop();
      }
    }
    if (deploy) {
      log.info(""String_Node_Str"",flowResource.getName(),agent.getName());
      IResourceRuntime resource=resourceFactory.create(flowResource,overrideSettings);
      deployedResources.put(flowResource.getId(),resource);
    }
  }
}",0.989997142040583
167464,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<String> inputRows=inputMessage.getPayload();
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  Message outputMessage=inputMessage.copy(getFlowStepId(),outputPayload);
  int headerRowsToSkip=numberOfHeaderLinesToSkip;
  try {
    int rowCount=0;
    for (    String inputRow : inputRows) {
      if (headerRowsToSkip == 0) {
        if (rowCount + numberOfFooterLinesToSkip < inputRows.size()) {
          EntityData data=processInputRow(inputRow);
          if (data != null) {
            outputPayload.add(data);
          }
        }
      }
 else {
        headerRowsToSkip--;
      }
      rowCount++;
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<String> inputRows=inputMessage.getPayload();
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  Message outputMessage=inputMessage.copy(getFlowStepId(),outputPayload);
  int headerRowsToSkip=numberOfHeaderLinesToSkip;
  try {
    int rowCount=0;
    for (    String inputRow : inputRows) {
      if (headerRowsToSkip == 0) {
        if (!inputMessage.getHeader().isLastMessage() || (rowCount + numberOfFooterLinesToSkip < inputRows.size())) {
          EntityData data=processInputRow(inputRow);
          if (data != null) {
            getComponentStatistics().incrementNumberEntitiesProcessed();
            outputPayload.add(data);
          }
        }
      }
 else {
        headerRowsToSkip--;
      }
      rowCount++;
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}",0.9493670886075948
167465,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  IResourceRuntime resourceRuntime=getResourceRuntime();
  String path=resourceRuntime.getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  if (useTriggerFile) {
    File triggerFile=new File(path,triggerFilePath);
    if (triggerFile.exists()) {
      pollForFiles(path,inputMessage,messageTarget);
      FileUtils.deleteQuietly(triggerFile);
    }
 else     if (cancelOnNoFiles) {
      getComponentStatistics().incrementOutboundMessages();
      messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
    }
  }
 else {
    pollForFiles(path,inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  IResourceRuntime resourceRuntime=getResourceRuntime();
  String path=resourceRuntime.getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
  if (useTriggerFile) {
    File triggerFile=new File(path,triggerFilePath);
    if (triggerFile.exists()) {
      pollForFiles(path,inputMessage,messageTarget);
      FileUtils.deleteQuietly(triggerFile);
    }
 else     if (cancelOnNoFiles) {
      getComponentStatistics().incrementOutboundMessages();
      messageTarget.put(new ShutdownMessage(getFlowStepId(),true));
    }
  }
 else {
    pollForFiles(path,inputMessage,messageTarget);
  }
}",0.9758787043418332
167466,"protected void archive(String archivePath){
  String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}","protected void archive(String archivePath){
  String path=getResourceRuntime().getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  File srcFile : filesSent) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile.getAbsolutePath(),destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(srcFile,destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}",0.9617486338797814
167467,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    List<String> fullyQualifiedFiles=inputMessage.getPayload();
    String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
    for (    String fullyQualifiedFile : fullyQualifiedFiles) {
      if (fullyQualifiedFile.startsWith(path)) {
        files.add(fullyQualifiedFile.substring(path.length()));
      }
 else {
        files.add(fullyQualifiedFile);
      }
    }
  }
 else {
    files.add(relativePathAndFile);
  }
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int linesInMessage=0;
    try {
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,false);
            linesInMessage=0;
            payload=new ArrayList<String>();
          }
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    List<String> fullyQualifiedFiles=inputMessage.getPayload();
    String path=getResourceRuntime().getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
    for (    String fullyQualifiedFile : fullyQualifiedFiles) {
      if (fullyQualifiedFile.startsWith(path)) {
        files.add(fullyQualifiedFile.substring(path.length()));
      }
 else {
        files.add(fullyQualifiedFile);
      }
    }
  }
 else {
    files.add(relativePathAndFile);
  }
  filesRead.addAll(files);
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    int linesInMessage=0;
    try {
      IStreamable resource=(IStreamable)getResourceReference();
      String filePath=FormatUtils.replaceTokens(file,context.getFlowParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages++,false);
            linesInMessage=0;
            payload=new ArrayList<String>();
          }
          getComponentStatistics().incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages++,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}",0.9904341427520236
167468,"protected void archive(String archivePath){
  String path=getResourceRuntime().getAgentOverrides().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  String srcFile : filesRead) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile,destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(new File(path,srcFile),destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}","protected void archive(String archivePath){
  String path=getResourceRuntime().getResourceRuntimeSettings().get(LocalFile.LOCALFILE_PATH);
  File destDir=new File(path,archivePath);
  for (  String srcFile : filesRead) {
    try {
      log(LogLevel.INFO,""String_Node_Str"",srcFile,destDir.getAbsolutePath());
      FileUtils.moveFileToDirectory(new File(path,srcFile),destDir,true);
    }
 catch (    IOException e) {
      throw new IoException(e);
    }
  }
}",0.9616648411829136
167469,"private void initAndSendMessage(ArrayList<String> payload,Message inputMessage,IMessageTarget messageTarget,int numberMessages,boolean lastMessage){
  numberMessages++;
  Message message=new Message(getFlowStepId());
  message.getHeader().setSequenceNumber(numberMessages);
  message.getHeader().setLastMessage(lastMessage);
  message.setPayload(payload);
  getComponentStatistics().incrementOutboundMessages();
  messageTarget.put(message);
}","private void initAndSendMessage(ArrayList<String> payload,Message inputMessage,IMessageTarget messageTarget,int numberMessages,boolean lastMessage){
  Message message=new Message(getFlowStepId());
  message.getHeader().setSequenceNumber(numberMessages);
  message.getHeader().setLastMessage(lastMessage);
  message.setPayload(payload);
  getComponentStatistics().incrementOutboundMessages();
  messageTarget.put(message);
}",0.976905311778291
167470,"private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=getComponent().getOutputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      if (attribute != null) {
        format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
        formats.put(attributeSetting.getAttributeId(),format);
      }
    }
    if (format != null) {
      if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
        format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
      }
 else       if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
        format.setFormatFunction(attributeSetting.getValue());
      }
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}","private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=getComponent().getOutputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      if (attribute != null) {
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
        formats.put(attributeSetting.getAttributeId(),format);
      }
    }
    if (format != null) {
      if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
        format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
      }
 else       if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
        format.setFormatFunction(attributeSetting.getValue());
      }
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}",0.9787798408488064
167471,"protected void addComponent(int x,int y,Component component){
  component.setName(component.getType() + ""String_Node_Str"" + (countComponentsOfType(component.getType()) + 1));
  component.setProjectVersionId(flow.getProjectVersionId());
  FlowStep flowStep=new FlowStep(component);
  flowStep.setX(x);
  flowStep.setY(y);
  flowStep.setFlowId(flow.getId());
  flow.getFlowSteps().add(flowStep);
  context.getConfigurationService().save(flowStep);
  redrawFlow();
  propertySheet.setSource(component);
  projectNavigator.refresh();
  projectNavigator.select(flowStep);
}","protected void addComponent(int x,int y,Component component){
  component.setName(component.getType() + ""String_Node_Str"" + (countComponentsOfType(component.getType()) + 1));
  component.setProjectVersionId(flow.getProjectVersionId());
  FlowStep flowStep=new FlowStep(component);
  flowStep.setX(x);
  flowStep.setY(y);
  flowStep.setFlowId(flow.getId());
  flow.getFlowSteps().add(flowStep);
  context.getConfigurationService().save(flowStep);
  selected=flowStep;
  redrawFlow();
  propertySheet.setSource(flowStep);
  projectNavigator.refresh();
}",0.9329758713136728
167472,"protected void redrawFlow(){
  delButton.setEnabled(false);
  if (diagram != null) {
    diagramLayout.removeComponent(diagram);
  }
  diagram=new Diagram();
  if (selected != null && selected instanceof FlowStep) {
    diagram.setSelectedNodeId(((FlowStep)selected).getId());
  }
  diagram.setSizeFull();
  diagram.addListener(new DiagramChangedListener());
  diagramLayout.addComponent(diagram);
  diagram.setNodes(getNodes());
}","protected void redrawFlow(){
  if (diagram != null) {
    diagramLayout.removeComponent(diagram);
  }
  diagram=new Diagram();
  if (selected != null && selected instanceof FlowStep) {
    diagram.setSelectedNodeId(((FlowStep)selected).getId());
    delButton.setEnabled(true);
  }
 else {
    delButton.setEnabled(false);
  }
  diagram.setSizeFull();
  diagram.addListener(new DiagramChangedListener());
  diagramLayout.addComponent(diagram);
  diagram.setNodes(getNodes());
}",0.8810572687224669
167473,"private Map<Element,Namespace> removeNamespaces(Document document){
  Map<Element,Namespace> namespaces=new HashMap<Element,Namespace>();
  if (ignoreNamespace) {
    document.getRootElement().setNamespace(null);
    for (    Element el : document.getRootElement().getDescendants(new ElementFilter())) {
      Namespace nsp=el.getNamespace();
      if (nsp != null) {
        el.setNamespace(null);
        namespaces.put(el,nsp);
      }
    }
  }
  return namespaces;
}","private Map<Element,Namespace> removeNamespaces(Document document){
  Map<Element,Namespace> namespaces=new HashMap<Element,Namespace>();
  if (ignoreNamespace) {
    namespaces.put(document.getRootElement(),document.getRootElement().getNamespace());
    document.getRootElement().setNamespace(null);
    for (    Element el : document.getRootElement().getDescendants(new ElementFilter())) {
      Namespace nsp=el.getNamespace();
      if (nsp != null) {
        el.setNamespace(null);
        namespaces.put(el,nsp);
      }
    }
  }
  return namespaces;
}",0.9145631067961164
167474,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  Message outputMessage=new Message(getFlowStepId());
  ArrayList<String> outputPayload=new ArrayList<String>();
  Document document=templateDocument.clone();
  Namespace rootNamespace=document.getRootElement().getNamespace();
  Map<Element,Namespace> namespaces=removeNamespaces(document);
  for (  XmlFormatterEntitySetting entitySetting : entitySettings.values()) {
    List<Element> matches=entitySetting.getExpression().evaluate(document.getRootElement());
    for (    Element element : matches) {
      entitySetting.setParentElement(element.getParentElement());
    }
  }
  for (  EntityData inputRow : inputRows) {
    processInputRow(document,inputRow);
  }
  restoreNamespaces(document,namespaces);
  document.getRootElement().setNamespace(rootNamespace);
  XMLOutputter xmlOutputter=new XMLOutputter();
  xmlOutputter.setFormat(Format.getPrettyFormat());
  outputPayload.add(xmlOutputter.outputString(document));
  outputMessage.setPayload(outputPayload);
  log(LogLevel.INFO,outputPayload.toString());
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  Message outputMessage=new Message(getFlowStepId());
  ArrayList<String> outputPayload=new ArrayList<String>();
  Document document=templateDocument.clone();
  Map<Element,Namespace> namespaces=removeNamespaces(document);
  for (  XmlFormatterEntitySetting entitySetting : entitySettings.values()) {
    List<Element> matches=entitySetting.getExpression().evaluate(document.getRootElement());
    for (    Element element : matches) {
      entitySetting.setParentElement(element.getParentElement());
    }
  }
  for (  EntityData inputRow : inputRows) {
    processInputRow(document,inputRow);
  }
  restoreNamespaces(document,namespaces);
  XMLOutputter xmlOutputter=new XMLOutputter();
  xmlOutputter.setFormat(Format.getPrettyFormat());
  outputPayload.add(xmlOutputter.outputString(document));
  outputMessage.setPayload(outputPayload);
  log(LogLevel.INFO,outputPayload.toString());
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}",0.956278419027632
167475,"private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=getComponent().getOutputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      if (attribute != null) {
        ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
        format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
        formats.put(attributeSetting.getAttributeId(),format);
        if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
          format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
        }
 else         if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
          format.setFormatFunction(attributeSetting.getValue());
        }
      }
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}","private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=getComponent().getOutputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      if (attribute != null) {
        format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
        formats.put(attributeSetting.getAttributeId(),format);
      }
    }
    if (format != null) {
      if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
        format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
      }
 else       if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
        format.setFormatFunction(attributeSetting.getValue());
      }
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}",0.959946595460614
167476,"private void shutdown(MessageTarget target) throws InterruptedException {
  this.componentRuntime.lastMessageReceived(target);
  for (  StepRuntime targetStepRuntime : targetStepRuntimes) {
    targetStepRuntime.queue(new ShutdownMessage(componentRuntime.getComponentContext().getFlowStep().getId(),cancelled));
  }
  this.componentRuntime.stop();
  running=false;
  executionTracker.flowStepFinished(componentRuntime.getComponentContext(),error,cancelled);
}","private void shutdown(MessageTarget target) throws InterruptedException {
  this.componentRuntime.lastMessageReceived(target);
  for (  StepRuntime targetStepRuntime : targetStepRuntimes) {
    targetStepRuntime.queue(new ShutdownMessage(componentRuntime.getComponentContext().getFlowStep().getId(),cancelled));
  }
  try {
    this.componentRuntime.stop();
  }
 catch (  Exception e) {
    recordError(e);
  }
  running=false;
  executionTracker.flowStepFinished(componentRuntime.getComponentContext(),error,cancelled);
}",0.9357798165137616
167477,"@Override protected void start(TypedProperties properties){
  streamable=new HttpStreamable(properties.get(URL),properties.get(HTTP_METHOD,HTTP_METHOD_GET),properties.getInt(HTTP_TIMEOUT),properties.get(SECURITY),properties.get(SECURITY_USERNAME),properties.get(SECURITY_PASSWORD));
}","@Override protected void start(TypedProperties properties){
  streamable=new HttpStreamable(properties.get(URL),properties.get(HTTP_METHOD,HTTP_METHOD_GET),properties.get(CONTENT_TYPE),properties.getInt(HTTP_TIMEOUT),properties.get(SECURITY),properties.get(SECURITY_USERNAME),properties.get(SECURITY_PASSWORD));
}",0.95142378559464
167478,"@Override public InputStream getInputStream(String relativePath,boolean mustExist){
  try {
    HttpURLConnection httpConnection=buildHttpUrlConnection();
    int responseCode=httpConnection.getResponseCode();
    if (responseCode == 200) {
      String type=httpConnection.getContentEncoding();
      InputStream in=httpConnection.getInputStream();
      if (!isBlank(type) && type.equals(""String_Node_Str"")) {
        in=new GZIPInputStream(in);
      }
      return in;
    }
 else {
      throw new IoException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
}","@Override public InputStream getInputStream(String relativePath,boolean mustExist){
  try {
    HttpURLConnection httpConnection=buildHttpUrlConnection(relativePath);
    int responseCode=httpConnection.getResponseCode();
    if (responseCode == 200) {
      String type=httpConnection.getContentEncoding();
      InputStream in=httpConnection.getInputStream();
      if (!isBlank(type) && type.equals(""String_Node_Str"")) {
        in=new GZIPInputStream(in);
      }
      return in;
    }
 else {
      throw new IoException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
}",0.9904458598726116
167479,"protected HttpURLConnection buildHttpUrlConnection(){
  try {
    HttpURLConnection httpUrlConnection=(HttpURLConnection)new URL(url).openConnection();
    setBasicAuthIfNeeded(httpUrlConnection);
    httpUrlConnection.setConnectTimeout(timeout);
    httpUrlConnection.setReadTimeout(timeout);
    httpUrlConnection.setRequestMethod(httpMethod);
    httpUrlConnection.setDoOutput(true);
    httpUrlConnection.setDoInput(true);
    return httpUrlConnection;
  }
 catch (  Exception e) {
    throw new IoException(e);
  }
}","protected HttpURLConnection buildHttpUrlConnection(String relativePath){
  try {
    String fullUrl=url;
    if (isNotBlank(relativePath)) {
      fullUrl+=relativePath;
    }
    HttpURLConnection httpUrlConnection=(HttpURLConnection)new URL(fullUrl).openConnection();
    setBasicAuthIfNeeded(httpUrlConnection);
    if (isNotBlank(contentType)) {
      httpUrlConnection.setRequestProperty(""String_Node_Str"",contentType);
    }
    httpUrlConnection.setConnectTimeout(timeout);
    httpUrlConnection.setReadTimeout(timeout);
    httpUrlConnection.setRequestMethod(httpMethod);
    httpUrlConnection.setDoOutput(true);
    httpUrlConnection.setDoInput(true);
    return httpUrlConnection;
  }
 catch (  Exception e) {
    throw new IoException(e);
  }
}",0.8150470219435737
167480,"public HttpStreamable(String url,String httpMethod,int timeout,String security,String username,String password){
  this.url=url;
  this.httpMethod=httpMethod;
  this.timeout=timeout;
  this.security=security;
  this.username=username;
  this.password=password;
}","public HttpStreamable(String url,String httpMethod,String contentType,int timeout,String security,String username,String password){
  this.url=url;
  this.httpMethod=httpMethod;
  this.contentType=contentType;
  this.timeout=timeout;
  this.security=security;
  this.username=username;
  this.password=password;
}",0.9113043478260868
167481,"@Override public OutputStream getOutputStream(String relativePath,boolean mustExist){
  HttpURLConnection httpUrlConnection=buildHttpUrlConnection();
  return new HttpOutputStream(httpUrlConnection);
}","@Override public OutputStream getOutputStream(String relativePath,boolean mustExist){
  HttpURLConnection httpUrlConnection=buildHttpUrlConnection(relativePath);
  return new HttpOutputStream(httpUrlConnection);
}",0.9710144927536232
167482,"@Override protected void start(TypedProperties properties){
  streamableResource=new ScpStreamable(resource,properties.getProperty(SSH_SERVER),properties.getInt(SSH_PORT),properties.getProperty(SSH_USER),properties.getProperty(SSH_PASSWORD),properties.getProperty(SSH_BASE_PATH),properties.getInt(SSH_CONNECTION_TIMEOUT),properties.is(SSH_MUST_EXIST));
}","@Override protected void start(TypedProperties properties){
  streamableResource=new ScpStreamable(resource,properties.getProperty(SCP_SERVER),properties.getInt(SCP_PORT),properties.getProperty(SCP_USER),properties.getProperty(SCP_PASSWORD),properties.getProperty(SCP_BASE_PATH),properties.getInt(SCP_CONNECTION_TIMEOUT),properties.is(SCP_MUST_EXIST));
}",0.8728813559322034
167483,"protected HorizontalLayout buildMenuBar(){
  HorizontalLayout layout=new HorizontalLayout();
  layout.setWidth(100,Unit.PERCENTAGE);
  MenuBar leftMenuBar=new MenuBar();
  leftMenuBar.addStyleName(ValoTheme.MENUBAR_BORDERLESS);
  leftMenuBar.setWidth(100,Unit.PERCENTAGE);
  newMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  editMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      open(treeTable.getValue());
    }
  }
);
  editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      startEditingItem((AbstractObject)treeTable.getValue());
    }
  }
);
  delete=editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      handleDelete();
    }
  }
);
  MenuItem projectMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      viewProjects();
    }
  }
);
  exportProject=projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      exportProject();
    }
  }
);
  closeProject=projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      closeProject();
    }
  }
);
  blank=newMenu.addItem(""String_Node_Str"",null);
  newFlow=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewFlow();
    }
  }
);
  newModel=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewModel();
    }
  }
);
  newComponent=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
    }
  }
);
  newDataSource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewDatabase();
    }
  }
);
  newFileResource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewLocalFileSystem();
    }
  }
);
  newSSHResource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewSSHFileSystem();
    }
  }
);
  MenuBar rightMenuBar=new MenuBar();
  rightMenuBar.addStyleName(ValoTheme.MENUBAR_BORDERLESS);
  search=rightMenuBar.addItem(""String_Node_Str"",Icons.SEARCH,new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      search.setChecked(!search.isChecked());
      searchBarLayout.setVisible(search.isChecked());
    }
  }
);
  layout.addComponent(leftMenuBar);
  layout.addComponent(rightMenuBar);
  layout.setExpandRatio(leftMenuBar,1);
  return layout;
}","protected HorizontalLayout buildMenuBar(){
  HorizontalLayout layout=new HorizontalLayout();
  layout.setWidth(100,Unit.PERCENTAGE);
  MenuBar leftMenuBar=new MenuBar();
  leftMenuBar.addStyleName(ValoTheme.MENUBAR_BORDERLESS);
  leftMenuBar.setWidth(100,Unit.PERCENTAGE);
  newMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  editMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      open(treeTable.getValue());
    }
  }
);
  editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      startEditingItem((AbstractObject)treeTable.getValue());
    }
  }
);
  delete=editMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      handleDelete();
    }
  }
);
  MenuItem projectMenu=leftMenuBar.addItem(""String_Node_Str"",null);
  projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      viewProjects();
    }
  }
);
  exportProject=projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      exportProject();
    }
  }
);
  closeProject=projectMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      closeProject();
    }
  }
);
  blank=newMenu.addItem(""String_Node_Str"",null);
  newFlow=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewFlow();
    }
  }
);
  newModel=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewModel();
    }
  }
);
  newComponent=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
    }
  }
);
  newDataSource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewDatabase();
    }
  }
);
  newFileResource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewLocalFileSystem();
    }
  }
);
  newSSHResource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewSSHFileSystem();
    }
  }
);
  newWebResource=newMenu.addItem(""String_Node_Str"",new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      addNewHttpResource();
    }
  }
);
  MenuBar rightMenuBar=new MenuBar();
  rightMenuBar.addStyleName(ValoTheme.MENUBAR_BORDERLESS);
  search=rightMenuBar.addItem(""String_Node_Str"",Icons.SEARCH,new Command(){
    @Override public void menuSelected(    MenuItem selectedItem){
      search.setChecked(!search.isChecked());
      searchBarLayout.setVisible(search.isChecked());
    }
  }
);
  layout.addComponent(leftMenuBar);
  layout.addComponent(rightMenuBar);
  layout.setExpandRatio(leftMenuBar,1);
  return layout;
}",0.9717348927875245
167484,"protected void setMenuItemsEnabled(){
  Object selected=treeTable.getValue();
  editMenu.setEnabled(false);
  newMenu.setEnabled(true);
  blank.setVisible(false);
  newComponent.setVisible(false);
  newFlow.setVisible(false);
  newModel.setVisible(false);
  newDataSource.setVisible(false);
  newFileResource.setVisible(false);
  if (selected instanceof FolderName) {
    FolderName folder=(FolderName)selected;
    if (folder.getName().equals(""String_Node_Str"")) {
      newFlow.setVisible(true);
    }
 else     if (folder.getName().equals(""String_Node_Str"")) {
      newModel.setVisible(true);
    }
 else     if (folder.getName().equals(""String_Node_Str"")) {
      newDataSource.setVisible(true);
      newFileResource.setVisible(true);
    }
 else {
      blank.setVisible(true);
      newMenu.setEnabled(false);
    }
  }
 else {
    blank.setVisible(true);
    newMenu.setEnabled(false);
    if (selected != null && !(selected instanceof ProjectVersion)) {
      editMenu.setEnabled(true);
    }
  }
  closeProject.setEnabled(selected instanceof ProjectVersion);
  exportProject.setEnabled(selected instanceof ProjectVersion);
  boolean deleteEnabled=false;
  deleteEnabled|=isDeleteButtonEnabled(treeTable.getValue());
  delete.setEnabled(deleteEnabled);
}","protected void setMenuItemsEnabled(){
  Object selected=treeTable.getValue();
  editMenu.setEnabled(false);
  newMenu.setEnabled(true);
  blank.setVisible(false);
  newComponent.setVisible(false);
  newFlow.setVisible(false);
  newModel.setVisible(false);
  newDataSource.setVisible(false);
  newSSHResource.setVisible(false);
  newWebResource.setVisible(false);
  newFileResource.setVisible(false);
  if (selected instanceof FolderName) {
    FolderName folder=(FolderName)selected;
    if (folder.getName().equals(""String_Node_Str"")) {
      newFlow.setVisible(true);
    }
 else     if (folder.getName().equals(""String_Node_Str"")) {
      newModel.setVisible(true);
    }
 else     if (folder.getName().equals(""String_Node_Str"")) {
      newDataSource.setVisible(true);
      newFileResource.setVisible(true);
      newWebResource.setVisible(true);
      newSSHResource.setVisible(true);
    }
 else {
      blank.setVisible(true);
      newMenu.setEnabled(false);
    }
  }
 else {
    blank.setVisible(true);
    newMenu.setEnabled(false);
    if (selected != null && !(selected instanceof ProjectVersion)) {
      editMenu.setEnabled(true);
    }
  }
  closeProject.setEnabled(selected instanceof ProjectVersion);
  exportProject.setEnabled(selected instanceof ProjectVersion);
  boolean deleteEnabled=false;
  deleteEnabled|=isDeleteButtonEnabled(treeTable.getValue());
  delete.setEnabled(deleteEnabled);
}",0.9439880507841673
167485,"@Override protected void start(){
  delimiter=getComponent().get(SETTING_DELIMITER,delimiter);
  quoteCharacter=getComponent().get(SETTING_QUOTE_CHARACTER,quoteCharacter);
  encoding=getComponent().get(SETTING_ENCODING,encoding);
  convertAttributeSettingsToAttributeFormat();
  if (getComponent().getOutputModel() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override protected void start(){
  delimiter=getComponent().get(SETTING_DELIMITER,delimiter);
  quoteCharacter=getComponent().get(SETTING_QUOTE_CHARACTER,quoteCharacter);
  encoding=getComponent().get(SETTING_ENCODING,encoding);
  numberOfFooterLinesToSkip=getComponent().getInt(SETTING_FOOTER_LINES_TO_SKIP,0);
  numberOfHeaderLinesToSkip=getComponent().getInt(SETTING_HEADER_LINES_TO_SKIP,0);
  convertAttributeSettingsToAttributeFormat();
  if (getComponent().getOutputModel() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.823404255319149
167486,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<String> inputRows=inputMessage.getPayload();
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  Message outputMessage=inputMessage.copy(getFlowStepId(),outputPayload);
  try {
    for (    String inputRow : inputRows) {
      EntityData data=processInputRow(inputRow);
      if (data != null) {
        outputPayload.add(data);
      }
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
  log(LogLevel.INFO,outputPayload.toString());
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  ArrayList<String> inputRows=inputMessage.getPayload();
  ArrayList<EntityData> outputPayload=new ArrayList<EntityData>();
  Message outputMessage=inputMessage.copy(getFlowStepId(),outputPayload);
  int headerRowsToSkip=numberOfHeaderLinesToSkip;
  try {
    int rowCount=0;
    for (    String inputRow : inputRows) {
      if (headerRowsToSkip == 0) {
        if (rowCount + numberOfFooterLinesToSkip < inputRows.size()) {
          EntityData data=processInputRow(inputRow);
          if (data != null) {
            outputPayload.add(data);
          }
        }
      }
 else {
        headerRowsToSkip--;
      }
      rowCount++;
    }
  }
 catch (  IOException e) {
    throw new IoException(e);
  }
  log(LogLevel.INFO,outputPayload.toString());
  getComponentStatistics().incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(getComponentStatistics().getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}",0.8687258687258688
167487,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (currentSequence == null) {
    final String sqlToExecute=FormatUtils.replaceTokens(this.sql,context.getFlowParametersAsString(),true);
    log(LogLevel.DEBUG,""String_Node_Str"" + sqlToExecute);
    currentSequence=getJdbcTemplate().queryForObject(sqlToExecute,context.getFlowParameters(),Long.class);
  }
  if (!(inputMessage instanceof StartupMessage)) {
    ArrayList<EntityData> outgoingPayload=new ArrayList<EntityData>();
    ArrayList<EntityData> payload=inputMessage.getPayload();
    for (    EntityData entityData : payload) {
      entityData=entityData.copy();
      entityData.put(sequenceAttributeId,++currentSequence);
      getComponentStatistics().incrementNumberEntitiesProcessed();
      outgoingPayload.add(entityData);
    }
    sendMessage(outgoingPayload,messageTarget,inputMessage.getHeader().isLastMessage());
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  getComponentStatistics().incrementInboundMessages();
  if (currentSequence == null) {
    final String sqlToExecute=FormatUtils.replaceTokens(this.sql,context.getFlowParametersAsString(),true);
    log(LogLevel.DEBUG,""String_Node_Str"" + sqlToExecute);
    currentSequence=getJdbcTemplate().queryForObject(sqlToExecute,context.getFlowParameters(),Long.class);
    if (currentSequence == null) {
      currentSequence=1l;
    }
  }
  if (!(inputMessage instanceof StartupMessage)) {
    ArrayList<EntityData> outgoingPayload=new ArrayList<EntityData>();
    ArrayList<EntityData> payload=inputMessage.getPayload();
    for (    EntityData entityData : payload) {
      entityData=entityData.copy();
      entityData.put(sequenceAttributeId,++currentSequence);
      getComponentStatistics().incrementNumberEntitiesProcessed();
      outgoingPayload.add(entityData);
    }
    sendMessage(outgoingPayload,messageTarget,inputMessage.getHeader().isLastMessage());
  }
}",0.9669462259496794
167488,"@Override public void save(ModelEntityRelationship modelEntityRelationship){
  save((AbstractObject)modelEntityRelationship);
  for (  ModelAttributeRelationship attributeRelationship : modelEntityRelationship.getAttributeRelationships()) {
    save(attributeRelationship);
  }
}","@Override public void save(ModelEntity modelEntity){
  save((AbstractObject)modelEntity);
  for (  ModelAttribute modelAttribute : modelEntity.getModelAttributes()) {
    save(modelAttribute);
  }
}",0.7631027253668763
167489,"@Override public void delete(ModelAttributeRelationship modelAttributeRelationship){
  persistenceManager.delete(modelAttributeRelationship,null,null,tableName(ModelAttributeRelationship.class));
}","@Override public void delete(ModelAttribute modelAttribute){
  List<ComponentAttributeSetting> attributeSettings=persistenceManager.find(ComponentAttributeSetting.class,new NameValue(""String_Node_Str"",modelAttribute.getId()),null,null,tableName(ComponentAttributeSetting.class));
  for (  ComponentAttributeSetting setting : attributeSettings) {
    delete(setting);
  }
  persistenceManager.delete(modelAttribute,null,null,tableName(ModelAttribute.class));
}",0.2530487804878049
167490,"@Override public void deleteFlow(Flow flow){
  flow.setDeleted(true);
  save((AbstractObject)flow);
}","@Override public void deleteFlow(Flow flow){
  flow.setDeleted(true);
  List<FlowStep> steps=flow.getFlowSteps();
  for (  FlowStep flowStep : steps) {
    if (!flowStep.getComponent().isShared()) {
      flowStep.getComponent().setDeleted(true);
      save(flowStep.getComponent());
    }
  }
  save((AbstractObject)flow);
}",0.4741784037558685
167491,"@Override public void refresh(ModelAttributeRelationship modelAttributeRelationship){
  refresh((AbstractObject)modelAttributeRelationship);
}","@Override public void refresh(ModelAttribute modelAttribute){
  refresh((AbstractObject)modelAttribute);
}",0.8548387096774194
167492,"@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  String importStatements=flowStep.getComponent().get(IMPORTS);
  String initScript=flowStep.getComponent().get(INIT_SCRIPT);
  String handleMessageScript=flowStep.getComponent().get(HANDLE_SCRIPT);
  String onSuccess=flowStep.getComponent().get(ON_FLOW_SUCCESS);
  String onError=flowStep.getComponent().get(ON_FLOW_ERROR);
  ScriptEngineManager factory=new ScriptEngineManager();
  ScriptEngine engine=factory.getEngineByName(""String_Node_Str"");
  engine.put(""String_Node_Str"",this);
  StringBuilder script=new StringBuilder();
  try {
    script.append(String.format(""String_Node_Str"",IMessageTarget.class.getName()));
    script.append(String.format(""String_Node_Str"",Message.class.getPackage().getName()));
    script.append(String.format(""String_Node_Str"",MessageScriptHelper.class.getName()));
    script.append(""String_Node_Str"");
    if (isNotBlank(importStatements)) {
      script.append(importStatements);
    }
    script.append(""String_Node_Str"");
    script.append(String.format(""String_Node_Str"",MessageScriptHelper.class.getSimpleName()));
    if (isNotBlank(initScript)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",initScript));
    }
    if (isNotBlank(handleMessageScript)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",handleMessageScript));
    }
    if (isNotBlank(onSuccess)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",onSuccess));
    }
    script.append(""String_Node_Str"");
    if (isNotBlank(onError)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",onError));
    }
    script.append(""String_Node_Str"");
    executionTracker.log(executionId,LogLevel.DEBUG,this,script.toString());
    script.append(""String_Node_Str"");
    engine.eval(script.toString());
    this.engine=engine;
  }
 catch (  ScriptException e) {
    Throwable rootCause=ExceptionUtils.getRootCause(e);
    if (rootCause != null) {
      if (rootCause instanceof RuntimeException) {
        throw (RuntimeException)rootCause;
      }
 else {
        throw new RuntimeException(rootCause);
      }
    }
 else {
      throw new RuntimeException(e);
    }
  }
}","@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  String importStatements=flowStep.getComponent().get(IMPORTS);
  String initScript=flowStep.getComponent().get(INIT_SCRIPT);
  String handleMessageScript=flowStep.getComponent().get(HANDLE_SCRIPT);
  String onSuccess=flowStep.getComponent().get(ON_FLOW_SUCCESS);
  String onError=flowStep.getComponent().get(ON_FLOW_ERROR);
  ScriptEngineManager factory=new ScriptEngineManager();
  ScriptEngine engine=factory.getEngineByName(""String_Node_Str"");
  engine.put(""String_Node_Str"",this);
  StringBuilder script=new StringBuilder();
  try {
    script.append(String.format(""String_Node_Str"",IMessageTarget.class.getName()));
    script.append(String.format(""String_Node_Str"",Message.class.getPackage().getName()));
    script.append(String.format(""String_Node_Str"",MessageScriptHelper.class.getName()));
    script.append(""String_Node_Str"");
    if (isNotBlank(importStatements)) {
      script.append(importStatements);
    }
    script.append(""String_Node_Str"");
    script.append(String.format(""String_Node_Str"",MessageScriptHelper.class.getSimpleName()));
    if (isNotBlank(initScript)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",initScript));
    }
    if (isNotBlank(handleMessageScript)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",handleMessageScript));
    }
    if (isNotBlank(onSuccess)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",onSuccess));
    }
    if (isNotBlank(onError)) {
      script.append(""String_Node_Str"");
      script.append(String.format(""String_Node_Str"",onError));
    }
    script.append(""String_Node_Str"");
    executionTracker.log(executionId,LogLevel.DEBUG,this,script.toString());
    script.append(""String_Node_Str"");
    engine.eval(script.toString());
    this.engine=engine;
  }
 catch (  ScriptException e) {
    Throwable rootCause=ExceptionUtils.getRootCause(e);
    if (rootCause != null) {
      if (rootCause instanceof RuntimeException) {
        throw (RuntimeException)rootCause;
      }
 else {
        throw new RuntimeException(rootCause);
      }
    }
 else {
      throw new RuntimeException(e);
    }
  }
}",0.9919457397202204
167493,"@Override public void componentEvent(Event e){
  IConfigurationService configurationService=context.getConfigurationService();
  if (e instanceof NodeSelectedEvent) {
    NodeSelectedEvent event=(NodeSelectedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    selected=flowStep;
    propertySheet.valueChange(flowStep);
    delButton.setEnabled(true);
  }
 else   if (e instanceof NodeDoubleClickedEvent) {
    NodeDoubleClickedEvent event=(NodeDoubleClickedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    projectNavigator.open(flowStep,flow,propertySheet);
  }
 else   if (e instanceof NodeMovedEvent) {
    NodeMovedEvent event=(NodeMovedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    if (flowStep != null) {
      flowStep.setX(node.getX());
      flowStep.setY(node.getY());
    }
    configurationService.save(flow);
  }
 else   if (e instanceof LinkEvent) {
    LinkEvent event=(LinkEvent)e;
    if (!event.isRemoved()) {
      flow.getFlowStepLinks().add(new FlowStepLink(event.getSourceNodeId(),event.getTargetNodeId()));
      configurationService.save(flow);
    }
 else {
      FlowStepLink link=flow.removeFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
      if (link != null) {
        if (configurationService.delete(link)) {
          redrawFlow();
        }
      }
    }
  }
 else   if (e instanceof LinkSelectedEvent) {
    LinkSelectedEvent event=(LinkSelectedEvent)e;
    selected=flow.findFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
    delButton.setEnabled(true);
  }
}","@Override public void componentEvent(Event e){
  IConfigurationService configurationService=context.getConfigurationService();
  if (e instanceof NodeSelectedEvent) {
    NodeSelectedEvent event=(NodeSelectedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    selected=flowStep;
    propertySheet.valueChange(flowStep);
    delButton.setEnabled(true);
  }
 else   if (e instanceof NodeDoubleClickedEvent) {
    NodeDoubleClickedEvent event=(NodeDoubleClickedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    projectNavigator.open(flowStep,flow,propertySheet);
  }
 else   if (e instanceof NodeMovedEvent) {
    NodeMovedEvent event=(NodeMovedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    if (flowStep != null) {
      flowStep.setX(node.getX());
      flowStep.setY(node.getY());
    }
    configurationService.save(flow);
  }
 else   if (e instanceof LinkEvent) {
    LinkEvent event=(LinkEvent)e;
    if (!event.isRemoved()) {
      flow.getFlowStepLinks().add(new FlowStepLink(event.getSourceNodeId(),event.getTargetNodeId()));
      Component sourceComp=flow.findFlowStepWithId(event.getSourceNodeId()).getComponent();
      Component targetComp=flow.findFlowStepWithId(event.getTargetNodeId()).getComponent();
      IComponentFactory factory=context.getComponentFactory();
      ComponentDefinition sourceDefn=factory.getComponentDefinitionForComponentType(sourceComp.getType());
      if (targetComp.getInputModel() == null) {
        if (sourceComp.getOutputModel() != null) {
          targetComp.setInputModel(sourceComp.getOutputModel());
        }
 else         if (sourceDefn.inputOutputModelsMatch() && sourceComp.getInputModel() != null) {
          targetComp.setInputModel(sourceComp.getInputModel());
        }
      }
      if (sourceComp.getOutputModel() == null) {
        if (targetComp.getInputModel() != null) {
          sourceComp.setOutputModel(targetComp.getInputModel());
        }
      }
      if (sourceComp.getInputModel() == null && sourceDefn.inputOutputModelsMatch()) {
        if (targetComp.getInputModel() != null) {
          sourceComp.setInputModel(targetComp.getInputModel());
        }
      }
      configurationService.save(flow);
    }
 else {
      FlowStepLink link=flow.removeFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
      if (link != null) {
        if (configurationService.delete(link)) {
          redrawFlow();
        }
      }
    }
  }
 else   if (e instanceof LinkSelectedEvent) {
    LinkSelectedEvent event=(LinkSelectedEvent)e;
    selected=flow.findFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
    delButton.setEnabled(true);
  }
}",0.7392078326657766
167494,"@Override public void call(JsonArray arguments){
  if (arguments.length() > 0) {
    Object obj=arguments.get(0);
    if (obj instanceof JsonObject) {
      JsonObject json=arguments.getObject(0);
      String sourceNodeId=json.getString(""String_Node_Str"");
      String targetNodeId=json.getString(""String_Node_Str"");
      boolean removed=json.getBoolean(""String_Node_Str"");
      DiagramState state=getState();
      for (      Node node : state.nodes) {
        if (node.getId().equals(sourceNodeId)) {
          if (!removed && !node.getTargetNodeIds().contains(targetNodeId)) {
            node.getTargetNodeIds().add(targetNodeId);
          }
 else           if (removed) {
            node.getTargetNodeIds().remove(targetNodeId);
          }
          fireEvent(new LinkEvent(Diagram.this,sourceNodeId,targetNodeId,removed));
          break;
        }
      }
    }
  }
}","@Override public void call(JsonArray arguments){
  if (arguments.length() > 0) {
    Object obj=arguments.get(0);
    if (obj instanceof JsonObject) {
      JsonObject json=arguments.getObject(0);
      String sourceNodeId=json.getString(""String_Node_Str"");
      String targetNodeId=json.getString(""String_Node_Str"");
      String origSourceNodeId=json.getString(""String_Node_Str"");
      String origTargetNodeId=json.getString(""String_Node_Str"");
      DiagramState state=getState();
      for (      Node node : state.nodes) {
        if (node.getId().equals(sourceNodeId)) {
          if (!node.getTargetNodeIds().contains(targetNodeId)) {
            node.getTargetNodeIds().add(targetNodeId);
          }
          fireEvent(new LinkEvent(Diagram.this,sourceNodeId,targetNodeId,false));
          break;
        }
      }
      for (      Node node : state.nodes) {
        if (node.getId().equals(origSourceNodeId)) {
          node.getTargetNodeIds().remove(origTargetNodeId);
          fireEvent(new LinkEvent(Diagram.this,origSourceNodeId,origTargetNodeId,true));
          break;
        }
      }
    }
  }
}",0.5294705294705294
167495,"public Diagram(){
  setPrimaryStyleName(""String_Node_Str"");
  setId(""String_Node_Str"");
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String sourceNodeId=json.getString(""String_Node_Str"");
          String targetNodeId=json.getString(""String_Node_Str"");
          fireEvent(new LinkSelectedEvent(Diagram.this,sourceNodeId,targetNodeId));
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              state.selectedNodeId=id;
              fireEvent(new NodeSelectedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              fireEvent(new NodeDoubleClickedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          double x=json.getNumber(""String_Node_Str"");
          double y=json.getNumber(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              node.setX((int)x);
              node.setY((int)y);
              fireEvent(new NodeMovedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String sourceNodeId=json.getString(""String_Node_Str"");
          String targetNodeId=json.getString(""String_Node_Str"");
          boolean removed=json.getBoolean(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(sourceNodeId)) {
              if (!removed && !node.getTargetNodeIds().contains(targetNodeId)) {
                node.getTargetNodeIds().add(targetNodeId);
              }
 else               if (removed) {
                node.getTargetNodeIds().remove(targetNodeId);
              }
              fireEvent(new LinkEvent(Diagram.this,sourceNodeId,targetNodeId,removed));
              break;
            }
          }
        }
      }
    }
  }
);
}","public Diagram(){
  setPrimaryStyleName(""String_Node_Str"");
  setId(""String_Node_Str"");
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String sourceNodeId=json.getString(""String_Node_Str"");
          String targetNodeId=json.getString(""String_Node_Str"");
          fireEvent(new LinkSelectedEvent(Diagram.this,sourceNodeId,targetNodeId));
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              state.selectedNodeId=id;
              fireEvent(new NodeSelectedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              fireEvent(new NodeDoubleClickedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String id=json.getString(""String_Node_Str"");
          double x=json.getNumber(""String_Node_Str"");
          double y=json.getNumber(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(id)) {
              node.setX((int)x);
              node.setY((int)y);
              fireEvent(new NodeMovedEvent(Diagram.this,node));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String sourceNodeId=json.getString(""String_Node_Str"");
          String targetNodeId=json.getString(""String_Node_Str"");
          boolean removed=json.getBoolean(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(sourceNodeId)) {
              if (!removed && !node.getTargetNodeIds().contains(targetNodeId)) {
                node.getTargetNodeIds().add(targetNodeId);
              }
 else               if (removed) {
                node.getTargetNodeIds().remove(targetNodeId);
              }
              fireEvent(new LinkEvent(Diagram.this,sourceNodeId,targetNodeId,removed));
              break;
            }
          }
        }
      }
    }
  }
);
  addFunction(""String_Node_Str"",new JavaScriptFunction(){
    private static final long serialVersionUID=1L;
    @Override public void call(    JsonArray arguments){
      if (arguments.length() > 0) {
        Object obj=arguments.get(0);
        if (obj instanceof JsonObject) {
          JsonObject json=arguments.getObject(0);
          String sourceNodeId=json.getString(""String_Node_Str"");
          String targetNodeId=json.getString(""String_Node_Str"");
          String origSourceNodeId=json.getString(""String_Node_Str"");
          String origTargetNodeId=json.getString(""String_Node_Str"");
          DiagramState state=getState();
          for (          Node node : state.nodes) {
            if (node.getId().equals(sourceNodeId)) {
              if (!node.getTargetNodeIds().contains(targetNodeId)) {
                node.getTargetNodeIds().add(targetNodeId);
              }
              fireEvent(new LinkEvent(Diagram.this,sourceNodeId,targetNodeId,false));
              break;
            }
          }
          for (          Node node : state.nodes) {
            if (node.getId().equals(origSourceNodeId)) {
              node.getTargetNodeIds().remove(origTargetNodeId);
              fireEvent(new LinkEvent(Diagram.this,origSourceNodeId,origTargetNodeId,true));
              break;
            }
          }
        }
      }
    }
  }
);
}",0.8536193029490616
167496,"private EntityData processInputRow(String inputRow) throws IOException {
  CsvReader csvReader=new CsvReader(new ByteArrayInputStream(inputRow.getBytes()),Charset.forName(encoding));
  csvReader.setDelimiter(delimiter.charAt(0));
  if (isNotBlank(quoteCharacter)) {
    csvReader.setTextQualifier(quoteCharacter.charAt(0));
    csvReader.setUseTextQualifier(true);
  }
  if (csvReader.readRecord()) {
    EntityData data=new EntityData();
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object value=csvReader.get(attribute.getOrdinal());
        if (isNotBlank(attribute.getFormatFunction())) {
          value=ModelAttributeScriptHelper.eval(attribute.getAttribute(),value,attribute.getEntity(),data,attribute.getFormatFunction());
        }
        data.put(attribute.getAttributeId(),value);
      }
    }
 else {
      Model model=flowStep.getComponent().getOutputModel();
      List<ModelEntity> entities=model.getModelEntities();
      int index=0;
      for (      ModelEntity modelEntity : entities) {
        List<ModelAttribute> attributes=modelEntity.getModelAttributes();
        for (        ModelAttribute modelAttribute : attributes) {
          data.put(modelAttribute.getId(),csvReader.get(index));
        }
      }
    }
    return data;
  }
  return null;
}","private EntityData processInputRow(String inputRow) throws IOException {
  CsvReader csvReader=new CsvReader(new ByteArrayInputStream(inputRow.getBytes()),Charset.forName(encoding));
  csvReader.setDelimiter(delimiter.charAt(0));
  if (isNotBlank(quoteCharacter)) {
    csvReader.setTextQualifier(quoteCharacter.charAt(0));
    csvReader.setUseTextQualifier(true);
  }
  if (csvReader.readRecord()) {
    EntityData data=new EntityData();
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object value=csvReader.get(attribute.getOrdinal() - 1);
        if (isNotBlank(attribute.getFormatFunction())) {
          value=ModelAttributeScriptHelper.eval(attribute.getAttribute(),value,attribute.getEntity(),data,attribute.getFormatFunction());
        }
        data.put(attribute.getAttributeId(),value);
      }
    }
 else {
      Model model=flowStep.getComponent().getOutputModel();
      List<ModelEntity> entities=model.getModelEntities();
      int index=0;
      for (      ModelEntity modelEntity : entities) {
        List<ModelAttribute> attributes=modelEntity.getModelAttributes();
        for (        ModelAttribute modelAttribute : attributes) {
          data.put(modelAttribute.getId(),csvReader.get(index));
        }
      }
    }
    return data;
  }
  return null;
}",0.9984984984984984
167497,"public FlowStepLink removeFlowStepLink(String sourceStepId,String targetStepId){
  FlowStepLink link=null;
  Iterator<FlowStepLink> i=flowStepLinks.iterator();
  while (i.hasNext()) {
    link=i.next();
    if (link.getSourceStepId().equals(sourceStepId) && link.getTargetStepId().equals(targetStepId)) {
      i.remove();
    }
  }
  return link;
}","public FlowStepLink removeFlowStepLink(String sourceStepId,String targetStepId){
  FlowStepLink link=null;
  Iterator<FlowStepLink> i=flowStepLinks.iterator();
  while (i.hasNext()) {
    link=i.next();
    if (link.getSourceStepId().equals(sourceStepId) && link.getTargetStepId().equals(targetStepId)) {
      i.remove();
      break;
    }
  }
  return link;
}",0.9817158931082982
167498,"@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  error=null;
  if (resource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TypedProperties properties=flowStep.getComponent().toTypedProperties(getSettingDefinitions(false));
  replaceRows=properties.is(REPLACE);
  updateFirst=properties.is(UPDATE_FIRST);
  insertFallback=properties.is(INSERT_FALLBACK);
  quoteIdentifiers=properties.is(QUOTE_IDENTIFIERS);
  stopProcessingOnError=properties.is(STOP_PROCESSING_ON_ERROR,true);
  fitToColumn=properties.is(FIT_TO_COLUMN);
  DataSource dataSource=(DataSource)resource.reference();
  platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers);
  targetTables=new ArrayList<TargetTableDefintion>();
  for (  ModelEntity entity : flowStep.getComponent().getInputModel().getModelEntities()) {
    Table table=platform.getTableFromCache(entity.getName(),true);
    if (table != null) {
      targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy())));
    }
  }
}","@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  error=null;
  if (resource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Model model=flowStep.getComponent().getInputModel();
  if (model == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TypedProperties properties=flowStep.getComponent().toTypedProperties(getSettingDefinitions(false));
  replaceRows=properties.is(REPLACE);
  updateFirst=properties.is(UPDATE_FIRST);
  insertFallback=properties.is(INSERT_FALLBACK);
  quoteIdentifiers=properties.is(QUOTE_IDENTIFIERS);
  stopProcessingOnError=properties.is(STOP_PROCESSING_ON_ERROR,true);
  fitToColumn=properties.is(FIT_TO_COLUMN);
  DataSource dataSource=(DataSource)resource.reference();
  platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers);
  targetTables=new ArrayList<TargetTableDefintion>();
  for (  ModelEntity entity : model.getModelEntities()) {
    Table table=platform.getTableFromCache(entity.getName(),true);
    if (table != null) {
      targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy())));
    }
  }
}",0.9283464566929134
167499,"@Override public void componentEvent(Event e){
  IConfigurationService configurationService=context.getConfigurationService();
  if (e instanceof NodeSelectedEvent) {
    NodeSelectedEvent event=(NodeSelectedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    selected=flowStep;
    propertySheet.valueChange(flowStep);
    delButton.setEnabled(true);
  }
 else   if (e instanceof NodeDoubleClickedEvent) {
    NodeDoubleClickedEvent event=(NodeDoubleClickedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    projectNavigator.open(flowStep,flow,propertySheet);
  }
 else   if (e instanceof NodeMovedEvent) {
    NodeMovedEvent event=(NodeMovedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    if (flowStep != null) {
      flowStep.setX(node.getX());
      flowStep.setY(node.getY());
    }
    configurationService.save(flow);
  }
 else   if (e instanceof LinkEvent) {
    LinkEvent event=(LinkEvent)e;
    if (!event.isRemoved()) {
      flow.getFlowStepLinks().add(new FlowStepLink(event.getSourceNodeId(),event.getTargetNodeId()));
      configurationService.save(flow);
    }
 else {
      FlowStepLink link=flow.removeFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
      if (link != null) {
        configurationService.delete(link);
        redrawFlow();
      }
    }
  }
 else   if (e instanceof LinkSelectedEvent) {
    LinkSelectedEvent event=(LinkSelectedEvent)e;
    selected=flow.findFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
    delButton.setEnabled(true);
  }
}","@Override public void componentEvent(Event e){
  IConfigurationService configurationService=context.getConfigurationService();
  if (e instanceof NodeSelectedEvent) {
    NodeSelectedEvent event=(NodeSelectedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    selected=flowStep;
    propertySheet.valueChange(flowStep);
    delButton.setEnabled(true);
  }
 else   if (e instanceof NodeDoubleClickedEvent) {
    NodeDoubleClickedEvent event=(NodeDoubleClickedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    projectNavigator.open(flowStep,flow,propertySheet);
  }
 else   if (e instanceof NodeMovedEvent) {
    NodeMovedEvent event=(NodeMovedEvent)e;
    Node node=event.getNode();
    FlowStep flowStep=flow.findFlowStepWithId(node.getId());
    if (flowStep != null) {
      flowStep.setX(node.getX());
      flowStep.setY(node.getY());
    }
    configurationService.save(flow);
  }
 else   if (e instanceof LinkEvent) {
    LinkEvent event=(LinkEvent)e;
    if (!event.isRemoved()) {
      flow.getFlowStepLinks().add(new FlowStepLink(event.getSourceNodeId(),event.getTargetNodeId()));
      configurationService.save(flow);
    }
 else {
      FlowStepLink link=flow.removeFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
      if (link != null) {
        if (configurationService.delete(link)) {
          redrawFlow();
        }
      }
    }
  }
 else   if (e instanceof LinkSelectedEvent) {
    LinkSelectedEvent event=(LinkSelectedEvent)e;
    selected=flow.findFlowStepLink(event.getSourceNodeId(),event.getTargetNodeId());
    delButton.setEnabled(true);
  }
}",0.9934718100890207
167500,"protected void refreshUI(ExecutionData data){
  if (!ExecutionStatus.DONE.name().equals(statusLabel.getValue()) && !ExecutionStatus.CANCELLED.name().equals(statusLabel.getValue()) && !ExecutionStatus.ERROR.name().equals(statusLabel.getValue())) {
    flowLabel.setValue(data.execution.getFlowName());
    startLabel.setValue(formatDate(data.execution.getStartTime()));
    if (data.execution.getStatus().equals(ExecutionStatus.ERROR.name())) {
      statusLabel.setStyleName(""String_Node_Str"");
      statusLabel.setValue(FontAwesome.WARNING.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
    }
 else     if (data.execution.getStatus().equals(ExecutionStatus.DONE.name())) {
      statusLabel.setStyleName(""String_Node_Str"");
      statusLabel.setValue(FontAwesome.CHECK.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
    }
 else     if (data.execution.getStatus().equals(ExecutionStatus.RUNNING.name())) {
      statusLabel.setStyleName(""String_Node_Str"");
      statusLabel.setValue(FontAwesome.SPINNER.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
    }
 else {
      statusLabel.setStyleName(""String_Node_Str"");
      statusLabel.setValue(data.execution.getStatus());
    }
    endLabel.setValue(formatDate(data.execution.getEndTime()));
    stepContainer.removeAllItems();
    stepContainer.addAll(data.steps);
    List<ExecutionStepLog> logMessages=new ArrayList<ExecutionStepLog>(logContainer.getItemIds());
    for (    ExecutionStepLog logMsg : data.logs) {
      logMessages.remove(logMsg);
    }
    if (logMessages.size() > 0) {
      logContainer.removeAllItems();
      logContainer.addAll(data.logs);
    }
  }
}","protected void refreshUI(ExecutionData data){
  if (!ExecutionStatus.DONE.name().equals(statusLabel.getValue()) && !ExecutionStatus.CANCELLED.name().equals(statusLabel.getValue()) && !ExecutionStatus.ERROR.name().equals(statusLabel.getValue())) {
    flowLabel.setValue(data.execution.getFlowName());
    startLabel.setValue(formatDate(data.execution.getStartTime()));
    if (data.execution.getStatus() != null) {
      if (data.execution.getStatus().equals(ExecutionStatus.ERROR.name())) {
        statusLabel.setStyleName(""String_Node_Str"");
        statusLabel.setValue(FontAwesome.WARNING.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
      }
 else       if (data.execution.getStatus().equals(ExecutionStatus.DONE.name())) {
        statusLabel.setStyleName(""String_Node_Str"");
        statusLabel.setValue(FontAwesome.CHECK.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
      }
 else       if (data.execution.getStatus().equals(ExecutionStatus.RUNNING.name())) {
        statusLabel.setStyleName(""String_Node_Str"");
        statusLabel.setValue(FontAwesome.SPINNER.getHtml() + ""String_Node_Str"" + data.execution.getStatus());
      }
 else {
        statusLabel.setStyleName(""String_Node_Str"");
        statusLabel.setValue(data.execution.getStatus());
      }
    }
    endLabel.setValue(formatDate(data.execution.getEndTime()));
    stepContainer.removeAllItems();
    stepContainer.addAll(data.steps);
    List<ExecutionStepLog> logMessages=new ArrayList<ExecutionStepLog>(logContainer.getItemIds());
    for (    ExecutionStepLog logMsg : data.logs) {
      logMessages.remove(logMsg);
    }
    if (logMessages.size() > 0) {
      logContainer.removeAllItems();
      logContainer.addAll(data.logs);
    }
  }
}",0.9760374050263004
167501,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int linesInMessage=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    files=inputMessage.getPayload();
  }
 else {
    files.add(relativePathAndFile);
  }
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    try {
      IStreamableResource resource=(IStreamableResource)this.resource.reference();
      String filePath=FormatUtils.replaceTokens(file,inputMessage.getHeader().getParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        componentStatistics.incrementNumberEntitiesProcessed();
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,false);
            linesInMessage=0;
          }
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  String currentLine;
  int linesRead=0;
  int linesInMessage=0;
  int numberMessages=0;
  List<String> files=new ArrayList<String>();
  if (getFileNameFromMessage) {
    files=inputMessage.getPayload();
  }
 else {
    files.add(relativePathAndFile);
  }
  for (  String file : files) {
    InputStream inStream=null;
    BufferedReader reader=null;
    try {
      IStreamableResource resource=(IStreamableResource)this.resource.reference();
      String filePath=FormatUtils.replaceTokens(file,inputMessage.getHeader().getParametersAsString(),true);
      inStream=resource.getInputStream(filePath,mustExist);
      reader=new BufferedReader(new InputStreamReader(inStream,encoding));
      ArrayList<String> payload=new ArrayList<String>();
      while ((currentLine=reader.readLine()) != null) {
        linesRead++;
        if (linesRead > textHeaderLinesToSkip) {
          if (linesInMessage >= textRowsPerMessage) {
            initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,false);
            linesInMessage=0;
          }
          componentStatistics.incrementNumberEntitiesProcessed();
          payload.add(currentLine);
          linesInMessage++;
        }
      }
      initAndSendMessage(payload,inputMessage,messageTarget,numberMessages,true);
    }
 catch (    IOException e) {
      throw new IoException(""String_Node_Str"" + e.getMessage());
    }
 finally {
      IOUtils.closeQuietly(reader);
      IOUtils.closeQuietly(inStream);
    }
  }
}",0.9598269468479604
167502,"private void applySettings(){
  Component component=flowStep.getComponent();
  relativePathAndFile=component.get(SETTING_RELATIVE_PATH,relativePathAndFile);
  mustExist=component.getBoolean(SETTING_MUST_EXIST,mustExist);
  textRowsPerMessage=component.getInt(SETTING_ROWS_PER_MESSAGE,textRowsPerMessage);
  textHeaderLinesToSkip=component.getInt(SETTING_HEADER_LINES_TO_SKIP,textHeaderLinesToSkip);
  getFileNameFromMessage=component.getBoolean(SETTING_GET_FILE_FROM_MESSAGE,getFileNameFromMessage);
  deleteOnComplete=component.getBoolean(SETTING_DELETE_ON_COMPLETE,deleteOnComplete);
  encoding=component.get(SETTING_ENCODING,encoding);
}","private void applySettings(){
  Component component=flowStep.getComponent();
  relativePathAndFile=component.get(SETTING_RELATIVE_PATH,relativePathAndFile);
  mustExist=component.getBoolean(SETTING_MUST_EXIST,mustExist);
  textRowsPerMessage=component.getInt(SETTING_ROWS_PER_MESSAGE,textRowsPerMessage);
  textHeaderLinesToSkip=component.getInt(SETTING_HEADER_LINES_TO_SKIP,textHeaderLinesToSkip);
  textRowsPerMessage=component.getInt(SETTING_ROWS_PER_MESSAGE,textRowsPerMessage);
  getFileNameFromMessage=component.getBoolean(SETTING_GET_FILE_FROM_MESSAGE,getFileNameFromMessage);
  deleteOnComplete=component.getBoolean(SETTING_DELETE_ON_COMPLETE,deleteOnComplete);
  encoding=component.get(SETTING_ENCODING,encoding);
}",0.93841642228739
167503,"private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=flowStep.getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=flowStep.getComponent().getInputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
      formats.put(attributeSetting.getAttributeId(),format);
    }
    if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
      format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
    }
 else     if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
      format.setFormatFunction(attributeSetting.getValue());
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}","private void convertAttributeSettingsToAttributeFormat(){
  List<ComponentAttributeSetting> attributeSettings=flowStep.getComponent().getAttributeSettings();
  Map<String,AttributeFormat> formats=new HashMap<String,DelimitedParser.AttributeFormat>();
  for (  ComponentAttributeSetting attributeSetting : attributeSettings) {
    AttributeFormat format=formats.get(attributeSetting.getAttributeId());
    if (format == null) {
      Model inputModel=flowStep.getComponent().getOutputModel();
      ModelAttribute attribute=inputModel.getAttributeById(attributeSetting.getAttributeId());
      ModelEntity entity=inputModel.getEntityById(attribute.getEntityId());
      format=new AttributeFormat(attributeSetting.getAttributeId(),entity,attribute);
      formats.put(attributeSetting.getAttributeId(),format);
    }
    if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_ORDINAL)) {
      format.setOrdinal(Integer.parseInt(attributeSetting.getValue()));
    }
 else     if (attributeSetting.getName().equalsIgnoreCase(DELIMITED_FORMATTER_ATTRIBUTE_FORMAT_FUNCTION)) {
      format.setFormatFunction(attributeSetting.getValue());
    }
  }
  attributes.addAll(formats.values());
  Collections.sort(attributes,new Comparator<AttributeFormat>(){
    @Override public int compare(    AttributeFormat ordinal1,    AttributeFormat ordinal2){
      return ordinal1.getOrdinal() - ordinal2.getOrdinal();
    }
  }
);
}",0.9982608695652174
167504,"@Override public void run(){
synchronized (AgentRuntime.this) {
    configurationService.refresh(agent);
    for (    AgentDeployment deployment : agent.getAgentDeployments()) {
      DeploymentStatus status=deployment.getDeploymentStatus();
      if (status.equals(DeploymentStatus.REQUEST_DEPLOY)) {
        deploy(deployment);
      }
 else       if (status.equals(DeploymentStatus.REQUEST_UNDEPLOY)) {
        undeploy(deployment);
      }
 else       if (status.equals(DeploymentStatus.REQUEST_DISABLE)) {
        stop(deployment);
        deployment.setStatus(DeploymentStatus.DISABLED.name());
        configurationService.save(deployment);
      }
 else {
        deployResources(deployment.getFlow());
      }
    }
  }
}","@Override public void run(){
synchronized (AgentRuntime.this) {
    configurationService.refresh(agent);
    for (    AgentDeployment deployment : new HashSet<AgentDeployment>(agent.getAgentDeployments())) {
      DeploymentStatus status=deployment.getDeploymentStatus();
      if (status.equals(DeploymentStatus.REQUEST_DEPLOY)) {
        deploy(deployment);
      }
 else       if (status.equals(DeploymentStatus.REQUEST_UNDEPLOY)) {
        undeploy(deployment);
      }
 else       if (status.equals(DeploymentStatus.REQUEST_DISABLE)) {
        stop(deployment);
        deployment.setStatus(DeploymentStatus.DISABLED.name());
        configurationService.save(deployment);
      }
 else {
        deployResources(deployment.getFlow());
      }
    }
  }
}",0.9651006711409396
167505,"@Override public void beforeFlow(String executionId){
  super.beforeFlow(executionId);
  this.steps=new HashMap<String,ExecutionStep>();
  execution=new Execution();
  execution.setId(executionId);
  execution.setStartTime(new Date());
  execution.setStatus(ExecutionStatus.RUNNING.name());
  execution.setAgentId(deployment.getAgentId());
  execution.setFlowId(deployment.getFlowId());
  execution.setAgentName(agent.getName());
  execution.setFlowName(deployment.getFlow().getName());
  this.recorder.record(execution);
}","@Override public void beforeFlow(String executionId){
  super.beforeFlow(executionId);
  this.steps=new HashMap<String,ExecutionStep>();
  execution=new Execution();
  execution.setId(executionId);
  execution.setStartTime(new Date());
  execution.setStatus(ExecutionStatus.RUNNING.name());
  execution.setAgentId(deployment.getAgentId());
  execution.setFlowId(deployment.getFlowId());
  execution.setAgentName(agent.getName());
  execution.setFlowName(deployment.getName());
  this.recorder.record(execution);
}",0.9903474903474904
167506,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
  if (multipliersInitialized) {
    Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
    while (messages.hasNext()) {
      Message message=messages.next();
      multiply(message,messageTarget);
    }
    multiply(inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
    Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
    while (messages.hasNext()) {
      Message message=messages.next();
      multiply(message,messageTarget);
    }
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
 else   if (multipliersInitialized) {
    multiply(inputMessage,messageTarget);
  }
}",0.6968876860622463
167507,"public AgentDeploymentParameter(String name,String value,String agentDeploymentId){
  this.name=name;
  this.value=value;
  this.agentDeploymentId=agentDeploymentId;
}","public AgentDeploymentParameter(String name,String value,String agentDeploymentId,String flowParameterId){
  this.name=name;
  this.value=value;
  this.agentDeploymentId=agentDeploymentId;
  this.flowParameterId=flowParameterId;
}",0.8413098236775819
167508,"private void write(ISqlTransaction transaction,List<EntityData> inputRows){
  for (  EntityData inputRow : inputRows) {
    for (    TargetTableDefintion targetTableDefinition : targetTables) {
      if (updateFirst) {
        TargetTable modelTable=targetTableDefinition.getUpdateTable();
        if (modelTable.shouldProcess(inputRow)) {
          List<Object> data=getValues(true,modelTable,inputRow);
          int count=execute(transaction,modelTable.getStatement(),new Object(),data);
          componentStatistics.incrementNumberEntitiesProcessed(count);
          if (insertFallback && count == 0) {
            modelTable=targetTableDefinition.getInsertTable();
            if (modelTable.shouldProcess(inputRow)) {
              log.debug(""String_Node_Str"");
              data=getValues(false,modelTable,inputRow);
              int endIndex=data.size() - modelTable.getKeyTargetColumns().size();
              count=execute(transaction,modelTable.getStatement(),new Object(),data.subList(0,endIndex));
              componentStatistics.incrementNumberEntitiesProcessed(count);
            }
          }
        }
      }
 else {
        try {
          TargetTable modelTable=targetTableDefinition.getInsertTable();
          if (modelTable.shouldProcess(inputRow)) {
            List<Object> data=getValues(false,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data);
            componentStatistics.incrementNumberEntitiesProcessed(count);
          }
        }
 catch (        UniqueKeyException e) {
          if (replaceRows) {
            TargetTable modelTable=targetTableDefinition.getUpdateTable();
            if (modelTable.shouldProcess(inputRow)) {
              log.debug(""String_Node_Str"");
              List<Object> data=getValues(true,modelTable,inputRow);
              int count=execute(transaction,modelTable.getStatement(),new Object(),data);
              componentStatistics.incrementNumberEntitiesProcessed(count);
            }
          }
 else {
            throw e;
          }
        }
      }
    }
  }
}","private void write(ISqlTransaction transaction,List<EntityData> inputRows){
  for (  EntityData inputRow : inputRows) {
    for (    TargetTableDefintion targetTableDefinition : targetTables) {
      if (updateFirst) {
        TargetTable modelTable=targetTableDefinition.getUpdateTable();
        if (modelTable.shouldProcess(inputRow)) {
          List<Object> data=getValues(true,modelTable,inputRow);
          int count=execute(transaction,modelTable.getStatement(),new Object(),data);
          componentStatistics.incrementNumberEntitiesProcessed(count);
          if (insertFallback && count == 0) {
            modelTable=targetTableDefinition.getInsertTable();
            if (modelTable.shouldProcess(inputRow)) {
              log.debug(""String_Node_Str"");
              data=getValues(false,modelTable,inputRow);
              count=execute(transaction,modelTable.getStatement(),new Object(),data);
              componentStatistics.incrementNumberEntitiesProcessed(count);
            }
          }
        }
      }
 else {
        try {
          TargetTable modelTable=targetTableDefinition.getInsertTable();
          if (modelTable.shouldProcess(inputRow)) {
            List<Object> data=getValues(false,modelTable,inputRow);
            int count=execute(transaction,modelTable.getStatement(),new Object(),data);
            componentStatistics.incrementNumberEntitiesProcessed(count);
          }
        }
 catch (        UniqueKeyException e) {
          if (replaceRows) {
            TargetTable modelTable=targetTableDefinition.getUpdateTable();
            if (modelTable.shouldProcess(inputRow)) {
              log.debug(""String_Node_Str"");
              List<Object> data=getValues(true,modelTable,inputRow);
              int count=execute(transaction,modelTable.getStatement(),new Object(),data);
              componentStatistics.incrementNumberEntitiesProcessed(count);
            }
          }
 else {
            throw e;
          }
        }
      }
    }
  }
}",0.9454191033138402
167509,"protected void refreshAgentDeployments(Agent agent){
  Map<String,Object> settingParams=new HashMap<String,Object>();
  settingParams.put(""String_Node_Str"",agent.getId());
  List<AgentDeployment> deployments=persistenceManager.find(AgentDeployment.class,settingParams,null,null,tableName(AgentDeployment.class));
  for (  AgentDeployment agentDeployment : deployments) {
    refreshAgentDeploymentRelations(agentDeployment);
    refresh(agentDeployment.getFlow());
    agent.getAgentDeployments().add(agentDeployment);
  }
}","protected void refreshAgentDeployments(Agent agent){
  Map<String,Object> settingParams=new HashMap<String,Object>();
  settingParams.put(""String_Node_Str"",agent.getId());
  List<AgentDeployment> deployments=persistenceManager.find(AgentDeployment.class,settingParams,null,null,tableName(AgentDeployment.class));
  agent.setAgentDeployments(deployments);
  for (  AgentDeployment agentDeployment : deployments) {
    refreshAgentDeploymentRelations(agentDeployment);
    refresh(agentDeployment.getFlow());
  }
}",0.9073359073359072
167510,"@Override public void flowStepFinished(String executionId,IComponent component,Throwable error,boolean cancelled){
  super.flowStepFinished(executionId,component,error,cancelled);
  ExecutionStep step=steps.get(component.getFlowStep().getId());
  step.setEndTime(new Date());
  ExecutionStatus status=ExecutionStatus.DONE;
  if (error != null) {
    status=ExecutionStatus.ERROR;
  }
  if (cancelled) {
    status=ExecutionStatus.CANCELLED;
  }
  step.setStatus(status.name());
  if (component.getComponentStatistics() != null) {
    step.setMessagesReceived(component.getComponentStatistics().getNumberInboundMessages());
    step.setMessagesProduced(component.getComponentStatistics().getNumberOutboundMessages());
  }
  this.recorder.record(step);
}","@Override public void flowStepFinished(String executionId,IComponent component,Throwable error,boolean cancelled){
  super.flowStepFinished(executionId,component,error,cancelled);
  ExecutionStep step=steps.get(component.getFlowStep().getId());
  if (step != null) {
    step.setEndTime(new Date());
    ExecutionStatus status=ExecutionStatus.DONE;
    if (error != null) {
      status=ExecutionStatus.ERROR;
    }
    if (cancelled) {
      status=ExecutionStatus.CANCELLED;
    }
    step.setStatus(status.name());
    if (component.getComponentStatistics() != null) {
      step.setMessagesReceived(component.getComponentStatistics().getNumberInboundMessages());
      step.setMessagesProduced(component.getComponentStatistics().getNumberOutboundMessages());
    }
    this.recorder.record(step);
  }
}",0.925545571245186
167511,"@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  error=null;
  TypedProperties properties=flowStep.getComponent().toTypedProperties(getSettingDefinitions(false));
  replaceRows=properties.is(REPLACE);
  updateFirst=properties.is(UPDATE_FIRST);
  insertFallback=properties.is(INSERT_FALLBACK);
  quoteIdentifiers=properties.is(QUOTE_IDENTIFIERS);
  stopProcessingOnError=properties.is(STOP_PROCESSING_ON_ERROR,true);
  fitToColumn=properties.is(FIT_TO_COLUMN);
  DataSource dataSource=(DataSource)resource.reference();
  platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers);
  targetTables=new ArrayList<TargetTableDefintion>();
  for (  ModelEntity entity : flowStep.getComponent().getInputModel().getModelEntities()) {
    Table table=platform.getTableFromCache(entity.getName(),true);
    if (table != null) {
      targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy())));
    }
  }
}","@Override public void start(String executionId,IExecutionTracker executionTracker){
  super.start(executionId,executionTracker);
  error=null;
  if (resource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TypedProperties properties=flowStep.getComponent().toTypedProperties(getSettingDefinitions(false));
  replaceRows=properties.is(REPLACE);
  updateFirst=properties.is(UPDATE_FIRST);
  insertFallback=properties.is(INSERT_FALLBACK);
  quoteIdentifiers=properties.is(QUOTE_IDENTIFIERS);
  stopProcessingOnError=properties.is(STOP_PROCESSING_ON_ERROR,true);
  fitToColumn=properties.is(FIT_TO_COLUMN);
  DataSource dataSource=(DataSource)resource.reference();
  platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),quoteIdentifiers);
  targetTables=new ArrayList<TargetTableDefintion>();
  for (  ModelEntity entity : flowStep.getComponent().getInputModel().getModelEntities()) {
    Table table=platform.getTableFromCache(entity.getName(),true);
    if (table != null) {
      targetTables.add(new TargetTableDefintion(entity,new TargetTable(DmlType.UPDATE,entity,table.copy()),new TargetTable(DmlType.INSERT,entity,table.copy())));
    }
  }
}",0.963404255319149
167512,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  this.executionId=executionId;
  componentStatistics.incrementInboundMessages();
  if (this.resource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (inputMessage.getHeader().getSequenceNumber() == 1) {
    initStreamAndWriter();
  }
  ArrayList<String> recs=inputMessage.getPayload();
  try {
    for (    String rec : recs) {
      bufferedWriter.write(rec);
      if (StringUtils.isNotBlank(lineTerminator)) {
        bufferedWriter.write(TEXTFILEWRITER_TEXT_LINE_TERMINATOR);
      }
 else {
        bufferedWriter.newLine();
      }
    }
    bufferedWriter.flush();
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (this.resource == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (inputMessage.getHeader().getSequenceNumber() == 1) {
    initStreamAndWriter();
  }
  ArrayList<String> recs=inputMessage.getPayload();
  try {
    for (    String rec : recs) {
      bufferedWriter.write(rec);
      if (StringUtils.isNotBlank(lineTerminator)) {
        bufferedWriter.write(TEXTFILEWRITER_TEXT_LINE_TERMINATOR);
      }
 else {
        bufferedWriter.newLine();
      }
    }
    bufferedWriter.flush();
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
}",0.9790849673202614
167513,"protected TreeTable buildTreeTable(){
  final TreeTable table=new TreeTable();
  table.addStyleName(ValoTheme.TREETABLE_NO_HORIZONTAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_NO_STRIPES);
  table.addStyleName(ValoTheme.TREETABLE_NO_VERTICAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_BORDERLESS);
  table.addStyleName(""String_Node_Str"");
  table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
  table.setItemCaptionMode(ItemCaptionMode.EXPLICIT);
  table.setSizeFull();
  table.setCacheRate(100);
  table.setPageLength(100);
  table.setImmediate(true);
  table.setSelectable(true);
  table.setEditable(true);
  table.setContainerDataSource(new BeanItemContainer<AbstractObject>(AbstractObject.class));
  table.setTableFieldFactory(new DefaultFieldFactory(){
    @Override public Field<?> createField(    Container container,    Object itemId,    Object propertyId,    Component uiContext){
      return buildEditableNavigatorField(itemId);
    }
  }
);
  table.setVisibleColumns(new Object[]{""String_Node_Str""});
  table.setColumnExpandRatio(""String_Node_Str"",1);
  treeTableDeleteKeyShortcutListener=new ShortcutListener(""String_Node_Str"",KeyCode.DELETE,null){
    private static final long serialVersionUID=1L;
    @Override public void handleAction(    Object sender,    Object target){
      if (delete.isEnabled()) {
        handleDelete();
      }
    }
  }
;
  table.addShortcutListener(treeTableDeleteKeyShortcutListener);
  treeTableEnterKeyShortcutListener=new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,null){
    private static final long serialVersionUID=1L;
    @Override public void handleAction(    Object sender,    Object target){
      open(treeTable.getValue());
    }
  }
;
  table.addValueChangeListener(new ValueChangeListener(){
    private static final long serialVersionUID=1L;
    @Override public void valueChange(    ValueChangeEvent event){
      selectionChanged(event);
    }
  }
);
  table.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    @Override public void itemClick(    ItemClickEvent event){
      if (event.getButton() == MouseButton.LEFT) {
        if (event.isDoubleClick()) {
          abortEditingItem();
          open(event.getItemId());
          itemClicked=null;
          if (table.areChildrenAllowed(event.getItemId())) {
            Object item=event.getItemId();
            table.setCollapsed(item,!table.isCollapsed(item));
          }
        }
 else {
          if (itemClicked != null && itemClicked.equals(event.getItemId())) {
            long timeSinceClick=System.currentTimeMillis() - itemClickTimeInMs;
            if (timeSinceClick > 600 && timeSinceClick < 2000) {
              startEditingItem(itemClicked);
            }
 else {
              itemClicked=null;
            }
          }
 else           if (event.getItemId() instanceof AbstractObject) {
            itemClicked=(AbstractObject)event.getItemId();
            itemClickTimeInMs=System.currentTimeMillis();
          }
        }
      }
    }
  }
);
  table.addExpandListener(new ExpandListener(){
    @Override public void nodeExpand(    ExpandEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),Icons.FOLDER_OPEN);
      }
    }
  }
);
  table.addCollapseListener(new CollapseListener(){
    @Override public void nodeCollapse(    CollapseEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),Icons.FOLDER_CLOSED);
      }
    }
  }
);
  table.setCellStyleGenerator(new CellStyleGenerator(){
    private static final long serialVersionUID=1L;
    @Override public String getStyle(    Table source,    Object itemId,    Object propertyId){
      if (itemId instanceof Folder && ""String_Node_Str"".equals(propertyId)) {
        return ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
  return table;
}","protected TreeTable buildTreeTable(){
  final TreeTable table=new TreeTable();
  table.addStyleName(ValoTheme.TREETABLE_NO_HORIZONTAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_NO_STRIPES);
  table.addStyleName(ValoTheme.TREETABLE_NO_VERTICAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_BORDERLESS);
  table.addStyleName(""String_Node_Str"");
  table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
  table.setItemCaptionMode(ItemCaptionMode.EXPLICIT);
  table.setSizeFull();
  table.setCacheRate(100);
  table.setPageLength(100);
  table.setImmediate(true);
  table.setSelectable(true);
  table.setEditable(true);
  table.setContainerDataSource(new BeanItemContainer<AbstractObject>(AbstractObject.class));
  table.setTableFieldFactory(new DefaultFieldFactory(){
    @Override public Field<?> createField(    Container container,    Object itemId,    Object propertyId,    Component uiContext){
      return buildEditableNavigatorField(itemId);
    }
  }
);
  table.setVisibleColumns(new Object[]{""String_Node_Str""});
  table.setColumnExpandRatio(""String_Node_Str"",1);
  treeTableDeleteKeyShortcutListener=new ShortcutListener(""String_Node_Str"",KeyCode.DELETE,null){
    private static final long serialVersionUID=1L;
    @Override public void handleAction(    Object sender,    Object target){
      if (delete.isEnabled()) {
        handleDelete();
      }
    }
  }
;
  table.addShortcutListener(treeTableDeleteKeyShortcutListener);
  treeTableEnterKeyShortcutListener=new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,null){
    private static final long serialVersionUID=1L;
    @Override public void handleAction(    Object sender,    Object target){
      open(treeTable.getValue());
    }
  }
;
  table.addValueChangeListener(new ValueChangeListener(){
    private static final long serialVersionUID=1L;
    @Override public void valueChange(    ValueChangeEvent event){
      selectionChanged();
    }
  }
);
  table.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    @Override public void itemClick(    ItemClickEvent event){
      if (event.getButton() == MouseButton.LEFT) {
        if (event.isDoubleClick()) {
          abortEditingItem();
          open(event.getItemId());
          itemClicked=null;
          if (table.areChildrenAllowed(event.getItemId())) {
            Object item=event.getItemId();
            table.setCollapsed(item,!table.isCollapsed(item));
          }
        }
 else {
          if (itemClicked != null && itemClicked.equals(event.getItemId())) {
            long timeSinceClick=System.currentTimeMillis() - itemClickTimeInMs;
            if (timeSinceClick > 600 && timeSinceClick < 2000) {
              startEditingItem(itemClicked);
            }
 else {
              itemClicked=null;
            }
          }
 else           if (event.getItemId() instanceof AbstractObject) {
            itemClicked=(AbstractObject)event.getItemId();
            itemClickTimeInMs=System.currentTimeMillis();
          }
        }
      }
    }
  }
);
  table.addExpandListener(new ExpandListener(){
    @Override public void nodeExpand(    ExpandEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),Icons.FOLDER_OPEN);
      }
    }
  }
);
  table.addCollapseListener(new CollapseListener(){
    @Override public void nodeCollapse(    CollapseEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),Icons.FOLDER_CLOSED);
      }
    }
  }
);
  table.setCellStyleGenerator(new CellStyleGenerator(){
    private static final long serialVersionUID=1L;
    @Override public String getStyle(    Table source,    Object itemId,    Object propertyId){
      if (itemId instanceof Folder && ""String_Node_Str"".equals(propertyId)) {
        return ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
  return table;
}",0.9993652405738224
167514,"protected void finishEditingItem(){
  if (itemBeingEdited != null) {
    IConfigurationService configurationService=context.getConfigurationService();
    treeTable.addShortcutListener(treeTableDeleteKeyShortcutListener);
    Object selected=itemBeingEdited;
    Method method=null;
    try {
      method=configurationService.getClass().getMethod(""String_Node_Str"",itemBeingEdited.getClass());
    }
 catch (    NoSuchMethodException e) {
    }
catch (    SecurityException e) {
    }
    if (method != null) {
      try {
        method.invoke(configurationService,itemBeingEdited);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      configurationService.save(itemBeingEdited);
    }
    itemBeingEdited=null;
    treeTable.refreshRowCache();
    treeTable.focus();
    treeTable.setValue(selected);
  }
}","protected void finishEditingItem(){
  if (itemBeingEdited != null) {
    IConfigurationService configurationService=context.getConfigurationService();
    treeTable.addShortcutListener(treeTableDeleteKeyShortcutListener);
    Object selected=itemBeingEdited;
    Method method=null;
    try {
      method=configurationService.getClass().getMethod(""String_Node_Str"",itemBeingEdited.getClass());
    }
 catch (    NoSuchMethodException e) {
    }
catch (    SecurityException e) {
    }
    if (method != null) {
      try {
        method.invoke(configurationService,itemBeingEdited);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      configurationService.save(itemBeingEdited);
    }
    itemBeingEdited=null;
    treeTable.refreshRowCache();
    treeTable.focus();
    treeTable.setValue(selected);
    selectionChanged();
  }
}",0.9862385321100916
167515,"@Override public void valueChange(ValueChangeEvent event){
  selectionChanged(event);
}","@Override public void valueChange(ValueChangeEvent event){
  selectionChanged();
}",0.970414201183432
167516,"protected void selectionChanged(ValueChangeEvent event){
  setMenuItemsEnabled();
  updatePropertySheet();
  treeTable.removeShortcutListener(treeTableEnterKeyShortcutListener);
  if (treeTable.getValue() != null) {
    treeTable.addShortcutListener(treeTableEnterKeyShortcutListener);
  }
}","protected void selectionChanged(){
  setMenuItemsEnabled();
  updatePropertySheet();
  treeTable.removeShortcutListener(treeTableEnterKeyShortcutListener);
  if (treeTable.getValue() != null) {
    treeTable.addShortcutListener(treeTableEnterKeyShortcutListener);
  }
}",0.9607142857142856
167517,"public EditFlowPanel(ApplicationContext context,Flow flow,IDesignNavigator designNavigator,TabbedPanel tabs){
  context.getConfigurationService().refresh(flow);
  this.flow=flow;
  this.context=context;
  this.tabs=tabs;
  this.designNavigator=designNavigator;
  this.propertySheet=new PropertySheet(context);
  this.propertySheet.setListener(new IPropertySheetChangeListener(){
    @Override public void componentNameChanged(    Component component){
      selected(EditFlowPanel.this.flow.findFlowStepWithComponentId(component.getId()));
    }
  }
);
  this.propertySheet.setCaption(""String_Node_Str"");
  this.componentPalette=new EditFlowPalette(this,context.getComponentFactory());
  addComponent(componentPalette);
  VerticalLayout rightLayout=new VerticalLayout();
  rightLayout.setSizeFull();
  rightLayout.addComponent(buildButtonBar());
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setSizeFull();
  splitPanel.setSplitPosition(50,Unit.PERCENTAGE);
  diagramLayout=new CssLayout();
  diagramLayout.setWidth(10000,Unit.PIXELS);
  diagramLayout.setHeight(10000,Unit.PIXELS);
  DragAndDropWrapper wrapper=new DragAndDropWrapper(diagramLayout);
  wrapper.setSizeUndefined();
  wrapper.setDropHandler(new DropHandler());
  Panel panel=new Panel();
  panel.setSizeFull();
  panel.addStyleName(ValoTheme.PANEL_WELL);
  panel.setContent(wrapper);
  splitPanel.addComponent(panel);
  splitPanel.addComponent(propertySheet);
  rightLayout.addComponent(splitPanel);
  rightLayout.setExpandRatio(splitPanel,1);
  addComponent(rightLayout);
  setExpandRatio(rightLayout,1);
  redrawFlow();
  context.getBackgroundRefresherService().register(this);
}","public EditFlowPanel(ApplicationContext context,Flow flow,IDesignNavigator designNavigator,TabbedPanel tabs){
  context.getConfigurationService().refresh(flow);
  this.flow=flow;
  this.context=context;
  this.tabs=tabs;
  this.designNavigator=designNavigator;
  this.propertySheet=new PropertySheet(context);
  this.propertySheet.setListener(new IPropertySheetChangeListener(){
    @Override public void componentNameChanged(    Component component){
      refreshStepOnDiagram(EditFlowPanel.this.flow.findFlowStepWithComponentId(component.getId()));
    }
  }
);
  this.propertySheet.setCaption(""String_Node_Str"");
  this.componentPalette=new EditFlowPalette(this,context.getComponentFactory());
  addComponent(componentPalette);
  VerticalLayout rightLayout=new VerticalLayout();
  rightLayout.setSizeFull();
  rightLayout.addComponent(buildButtonBar());
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setSizeFull();
  splitPanel.setSplitPosition(50,Unit.PERCENTAGE);
  diagramLayout=new CssLayout();
  diagramLayout.setWidth(10000,Unit.PIXELS);
  diagramLayout.setHeight(10000,Unit.PIXELS);
  DragAndDropWrapper wrapper=new DragAndDropWrapper(diagramLayout);
  wrapper.setSizeUndefined();
  wrapper.setDropHandler(new DropHandler());
  Panel panel=new Panel();
  panel.setSizeFull();
  panel.addStyleName(ValoTheme.PANEL_WELL);
  panel.setContent(wrapper);
  splitPanel.addComponent(panel);
  splitPanel.addComponent(propertySheet);
  rightLayout.addComponent(splitPanel);
  rightLayout.setExpandRatio(splitPanel,1);
  addComponent(rightLayout);
  setExpandRatio(rightLayout,1);
  redrawFlow();
  context.getBackgroundRefresherService().register(this);
}",0.9916467780429594
167518,"@Override public void componentNameChanged(Component component){
  selected(EditFlowPanel.this.flow.findFlowStepWithComponentId(component.getId()));
}","@Override public void componentNameChanged(Component component){
  refreshStepOnDiagram(EditFlowPanel.this.flow.findFlowStepWithComponentId(component.getId()));
}",0.9294871794871796
167519,"public void selected(FlowStep step){
  if (step != null) {
    step=flow.findFlowStepWithId(step.getId());
  }
  if (step != null) {
    context.getConfigurationService().refresh(step.getComponent());
    diagram.setNodes(getNodes());
    diagram.setSelectedNodeId(step.getId());
    propertySheet.valueChange(step);
  }
 else {
    diagram.setSelectedNodeId(null);
    propertySheet.valueChange((Object)null);
  }
}","public void selected(FlowStep step){
  if (step != null) {
    step=flow.findFlowStepWithId(step.getId());
  }
  if (step != null) {
    refreshStepOnDiagram(step);
    propertySheet.valueChange(step);
  }
 else {
    diagram.setSelectedNodeId(null);
    propertySheet.valueChange((Object)null);
  }
}",0.7726638772663877
167520,"public Message copy(String originatingStepId){
  try {
    Message message=(Message)this.clone();
    message.header=header.copy();
    message.header.setOriginatingStepId(originatingStepId);
    return message;
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
}","public Message copy(String originatingStepId,Serializable newPayload){
  try {
    Message message=(Message)this.clone();
    message.header=header.copy();
    message.header.setOriginatingStepId(originatingStepId);
    message.setPayload(newPayload);
    return message;
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
}",0.9074074074074074
167521,"private void open(){
  IStreamableResource resource=(IStreamableResource)this.resource.reference();
  resource.appendPath(relativePathAndFile,mustExist);
  inStream=resource.getInputStream();
}","private void open(){
  IStreamableResource resource=(IStreamableResource)this.resource.reference();
  inStream=resource.getInputStream(relativePathAndFile,mustExist);
}",0.8088642659279779
167522,"private OutputStream getOutputStream(IStreamableResource conn){
  conn.appendPath(relativePathAndFile,mustExist);
  return conn.getOutputStream();
}","private OutputStream getOutputStream(IStreamableResource conn){
  return conn.getOutputStream(relativePathAndFile,mustExist);
}",0.7709090909090909
167523,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  if (attributes.size() == 0) {
    executionTracker.log(executionId,LogLevel.INFO,this,""String_Node_Str"");
  }
  componentStatistics.incrementInboundMessages();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  Message outputMessage=new Message(flowStep.getId());
  ArrayList<String> outputPayload=new ArrayList<String>();
  String outputRec;
  for (  EntityData inputRow : inputRows) {
    outputRec=processInputRow(executionId,inputRow);
    outputPayload.add(outputRec);
  }
  outputMessage.setPayload(outputPayload);
  executionTracker.log(executionId,LogLevel.INFO,this,outputPayload.toString());
  componentStatistics.incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(componentStatistics.getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  if (attributes.size() == 0) {
    executionTracker.log(executionId,LogLevel.INFO,this,""String_Node_Str"");
  }
  componentStatistics.incrementInboundMessages();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  Message outputMessage=new Message(flowStep.getId());
  ArrayList<String> outputPayload=new ArrayList<String>();
  String outputRec;
  for (  EntityData inputRow : inputRows) {
    outputRec=processInputRow(inputRow);
    outputPayload.add(outputRec);
  }
  outputMessage.setPayload(outputPayload);
  executionTracker.log(executionId,LogLevel.INFO,this,outputPayload.toString());
  componentStatistics.incrementOutboundMessages();
  outputMessage.getHeader().setSequenceNumber(componentStatistics.getNumberOutboundMessages());
  outputMessage.getHeader().setLastMessage(inputMessage.getHeader().isLastMessage());
  messageTarget.put(outputMessage);
}",0.9937565036420396
167524,"private String processInputRow(String executionId,EntityData inputRow){
  Writer writer=new StringWriter();
  CsvWriter csvWriter=new CsvWriter(writer,delimiter.charAt(0));
  if (!StringUtils.isEmpty(quoteCharacter)) {
    csvWriter.setUseTextQualifier(true);
    csvWriter.setTextQualifier(quoteCharacter.charAt(0));
    csvWriter.setForceQualifier(true);
  }
  try {
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object object=inputRow.get(attribute.getAttributeId());
        if (isNotBlank(attribute.getFormatFunction())) {
          object=ModelAttributeScriptHelper.eval(attribute.getAttribute(),object,attribute.getEntity(),inputRow,attribute.getFormatFunction());
        }
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
 else {
      Collection<Object> values=inputRow.values();
      for (      Object object : values) {
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
  return writer.toString();
}","private String processInputRow(EntityData inputRow){
  Writer writer=new StringWriter();
  CsvWriter csvWriter=new CsvWriter(writer,delimiter.charAt(0));
  if (!StringUtils.isEmpty(quoteCharacter)) {
    csvWriter.setUseTextQualifier(true);
    csvWriter.setTextQualifier(quoteCharacter.charAt(0));
    csvWriter.setForceQualifier(true);
  }
  try {
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object object=inputRow.get(attribute.getAttributeId());
        if (isNotBlank(attribute.getFormatFunction())) {
          object=ModelAttributeScriptHelper.eval(attribute.getAttribute(),object,attribute.getEntity(),inputRow,attribute.getFormatFunction());
        }
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
 else {
      Collection<Object> values=inputRow.values();
      for (      Object object : values) {
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
  return writer.toString();
}",0.9915140687807056
167525,"@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
 else {
    Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
    while (messages.hasNext()) {
      Message message=messages.next();
      multiply(message,messageTarget);
    }
    multiply(inputMessage,messageTarget);
  }
}","@Override public void handle(Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (inputMessage.getHeader().getOriginatingStepId().equals(sourceStepId)) {
    List<EntityData> datas=inputMessage.getPayload();
    multipliers.addAll(datas);
    multipliersInitialized=inputMessage.getHeader().isLastMessage();
  }
 else   if (!multipliersInitialized) {
    queuedWhileWaitingForMultiplier.add(inputMessage);
  }
  if (multipliersInitialized) {
    Iterator<Message> messages=queuedWhileWaitingForMultiplier.iterator();
    while (messages.hasNext()) {
      Message message=messages.next();
      multiply(message,messageTarget);
    }
    multiply(inputMessage,messageTarget);
  }
}",0.9779005524861878
167526,"@Override public void handle(String executionId,Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  Map<String,Message> outboundMessages=new HashMap<String,Message>();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  for (  EntityData entityData : inputRows) {
    bind(executionId,entityData);
    for (    Route route : routes) {
      try {
        if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
          Message message=outboundMessages.get(route.getTargetStepId());
          if (message == null) {
            message=new Message(flowStep.getId());
            message.setPayload(new ArrayList<EntityData>());
            message.getHeader().getTargetStepIds().add(route.getTargetStepId());
            outboundMessages.put(route.getTargetStepId(),message);
          }
          ArrayList<EntityData> outputRows=message.getPayload();
          outputRows.add(entityData);
          if (outputRows.size() >= rowsPerMessage) {
            outboundMessages.remove(route.getTargetStepId());
            componentStatistics.incrementOutboundMessages();
            messageTarget.put(message);
          }
        }
      }
 catch (      ScriptException e) {
        throw new RuntimeException(e);
      }
    }
  }
  Collection<Message> messages=outboundMessages.values();
  for (  Message message : messages) {
    componentStatistics.incrementOutboundMessages();
    messageTarget.put(message);
  }
}","@Override public void handle(String executionId,Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  Map<String,Message> outboundMessages=new HashMap<String,Message>();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  for (  EntityData entityData : inputRows) {
    bind(executionId,entityData);
    if (routes != null) {
      for (      Route route : routes) {
        try {
          if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
            Message message=outboundMessages.get(route.getTargetStepId());
            if (message == null) {
              message=new Message(flowStep.getId());
              message.setPayload(new ArrayList<EntityData>());
              message.getHeader().getTargetStepIds().add(route.getTargetStepId());
              outboundMessages.put(route.getTargetStepId(),message);
            }
            ArrayList<EntityData> outputRows=message.getPayload();
            outputRows.add(entityData);
            if (outputRows.size() >= rowsPerMessage) {
              outboundMessages.remove(route.getTargetStepId());
              componentStatistics.incrementOutboundMessages();
              messageTarget.put(message);
            }
          }
        }
 catch (        ScriptException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
  Collection<Message> messages=outboundMessages.values();
  for (  Message message : messages) {
    componentStatistics.incrementOutboundMessages();
    messageTarget.put(message);
  }
}",0.9713914174252276
167527,"public void open(Object item){
  if (item instanceof FlowStep) {
    FlowStep flowStep=(FlowStep)item;
    String type=flowStep.getComponent().getType();
    if (type.equals(FixedLengthFormatter.TYPE) || type.equals(DelimitedFormatter.TYPE)) {
      EditFormatPanel editFormat=new EditFormatPanel(context,flowStep.getComponent());
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editFormat);
    }
 else     if (type.equals(DbReader.TYPE)) {
      EditDbReaderPanel editFormat=new EditDbReaderPanel(context,flowStep.getComponent());
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editFormat);
      unselectAll();
    }
 else     if (type.equals(EntityRouter.TYPE)) {
      EditEntityRouterPanel editPanel=new EditEntityRouterPanel(context,flowStep,(Flow)treeTable.getParent(flowStep));
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editPanel);
    }
 else     if (type.equals(MappingProcessor.TYPE)) {
      EditMappingPanel editMapping=new EditMappingPanel(context,flowStep.getComponent());
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editMapping);
    }
 else {
      item=context.getConfigurationService().findFlow(flowStep.getFlowId());
    }
  }
  if (item instanceof Flow) {
    Flow flow=(Flow)item;
    EditFlowPanel flowLayout=new EditFlowPanel(context,flow,this,tabs);
    tabs.addCloseableTab(flow.getId(),flow.getName(),Icons.FLOW,flowLayout);
  }
 else   if (item instanceof Model) {
    Model model=(Model)item;
    EditModelPanel editModel=new EditModelPanel(context,model);
    tabs.addCloseableTab(model.getId(),model.getName(),Icons.MODEL,editModel);
  }
 else   if (item instanceof Resource) {
    Resource resource=(Resource)item;
    PropertySheet sheet=new PropertySheet(context);
    sheet.valueChange(resource);
    tabs.addCloseableTab(resource.getId(),resource.getName(),treeTable.getItemIcon(item),sheet);
  }
}","public void open(Object item){
  if (item instanceof FlowStep) {
    FlowStep flowStep=(FlowStep)item;
    String type=flowStep.getComponent().getType();
    if (type.equals(FixedLengthFormatter.TYPE) || type.equals(DelimitedFormatter.TYPE)) {
      EditFormatPanel editFormat=new EditFormatPanel(context,flowStep.getComponent());
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editFormat);
    }
 else     if (type.equals(DbReader.TYPE)) {
      EditDbReaderPanel editFormat=new EditDbReaderPanel(context,flowStep.getComponent(),propertySheet);
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editFormat);
      unselectAll();
    }
 else     if (type.equals(EntityRouter.TYPE)) {
      EditEntityRouterPanel editPanel=new EditEntityRouterPanel(context,flowStep,(Flow)treeTable.getParent(flowStep));
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editPanel);
    }
 else     if (type.equals(MappingProcessor.TYPE)) {
      EditMappingPanel editMapping=new EditMappingPanel(context,flowStep.getComponent());
      tabs.addCloseableTab(flowStep.getId(),flowStep.getName(),Icons.COMPONENT,editMapping);
    }
 else {
      item=context.getConfigurationService().findFlow(flowStep.getFlowId());
    }
  }
  if (item instanceof Flow) {
    Flow flow=(Flow)item;
    EditFlowPanel flowLayout=new EditFlowPanel(context,flow,this,tabs);
    tabs.addCloseableTab(flow.getId(),flow.getName(),Icons.FLOW,flowLayout);
  }
 else   if (item instanceof Model) {
    Model model=(Model)item;
    EditModelPanel editModel=new EditModelPanel(context,model);
    tabs.addCloseableTab(model.getId(),model.getName(),Icons.MODEL,editModel);
  }
 else   if (item instanceof Resource) {
    Resource resource=(Resource)item;
    PropertySheet sheet=new PropertySheet(context);
    sheet.valueChange(resource);
    tabs.addCloseableTab(resource.getId(),resource.getName(),treeTable.getItemIcon(item),sheet);
  }
}",0.99645928174001
167528,"@Override public boolean closing(){
  if (queryPanel != null) {
    save();
    BasicDataSource dataSource=(BasicDataSource)platform.getDataSource();
    try {
      dataSource.close();
    }
 catch (    SQLException e) {
    }
  }
  return true;
}","@Override public boolean closing(){
  if (queryPanel != null) {
    save();
    BasicDataSource dataSource=(BasicDataSource)platform.getDataSource();
    try {
      dataSource.close();
    }
 catch (    SQLException e) {
    }
  }
  if (propertySheet != null) {
    propertySheet.valueChange(component);
  }
  return true;
}",0.8167539267015707
167529,"public EditDbReaderPanel(ApplicationContext context,Component component){
  this.context=context;
  this.component=component;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  executeSqlClickListener=new ExecuteSqlClickListener();
  executeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.PLAY,executeSqlClickListener);
  executeButton.setEnabled(false);
  Resource resource=component.getResource();
  if (resource != null) {
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_INITIAL_SIZE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MAX_ACTIVE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MAX_IDLE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MIN_IDLE,""String_Node_Str"");
    DataSourceResource dataSourceResource=(DataSourceResource)context.getResourceFactory().create(resource);
    DataSource dataSource=dataSourceResource.reference();
    platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),false);
    queryPanel=new QueryPanel(new IDb(){
      @Override public IDatabasePlatform getPlatform(){
        return platform;
      }
      @Override public String getName(){
        return ""String_Node_Str"";
      }
    }
,new ISettingsProvider(){
      Settings settings=new Settings();
      @Override public void save(      Settings settings){
      }
      @Override public Settings load(){
        return settings;
      }
      @Override public Settings get(){
        return settings;
      }
    }
,new IButtonBar(){
      @Override public void setRollbackButtonEnabled(      boolean enabled){
      }
      @Override public void setExecuteScriptButtonEnabled(      boolean enabled){
      }
      @Override public void setExecuteAtCursorButtonEnabled(      boolean enabled){
        executeButton.setEnabled(enabled);
      }
      @Override public void setCommitButtonEnabled(      boolean enabled){
      }
    }
,context.getUser().getUserId());
    queryPanel.appendSql(component.get(DbReader.SQL));
    queryPanel.addShortcutListener(new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,new int[]{ModifierKey.CTRL}){
      @Override public void handleAction(      Object sender,      Object target){
        executeSqlClickListener.buttonClick(new ClickEvent(executeButton));
      }
    }
);
    addComponent(queryPanel);
    setExpandRatio(queryPanel,1);
  }
 else {
    Label label=new Label(""String_Node_Str"");
    addComponent(label);
    setExpandRatio(label,1);
  }
}","public EditDbReaderPanel(ApplicationContext context,Component component,PropertySheet propertySheet){
  this.context=context;
  this.component=component;
  this.propertySheet=propertySheet;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  executeSqlClickListener=new ExecuteSqlClickListener();
  executeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.PLAY,executeSqlClickListener);
  executeButton.setEnabled(false);
  Resource resource=component.getResource();
  if (resource != null) {
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_INITIAL_SIZE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MAX_ACTIVE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MAX_IDLE,""String_Node_Str"");
    resource.put(BasicDataSourcePropertyConstants.DB_POOL_MIN_IDLE,""String_Node_Str"");
    DataSourceResource dataSourceResource=(DataSourceResource)context.getResourceFactory().create(resource);
    DataSource dataSource=dataSourceResource.reference();
    platform=JdbcDatabasePlatformFactory.createNewPlatformInstance(dataSource,new SqlTemplateSettings(),false);
    queryPanel=new QueryPanel(new IDb(){
      @Override public IDatabasePlatform getPlatform(){
        return platform;
      }
      @Override public String getName(){
        return ""String_Node_Str"";
      }
    }
,new ISettingsProvider(){
      Settings settings=new Settings();
      @Override public void save(      Settings settings){
      }
      @Override public Settings load(){
        return settings;
      }
      @Override public Settings get(){
        return settings;
      }
    }
,new IButtonBar(){
      @Override public void setRollbackButtonEnabled(      boolean enabled){
      }
      @Override public void setExecuteScriptButtonEnabled(      boolean enabled){
      }
      @Override public void setExecuteAtCursorButtonEnabled(      boolean enabled){
        executeButton.setEnabled(enabled);
      }
      @Override public void setCommitButtonEnabled(      boolean enabled){
      }
    }
,context.getUser().getUserId());
    queryPanel.appendSql(component.get(DbReader.SQL));
    queryPanel.addShortcutListener(new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,new int[]{ModifierKey.CTRL}){
      @Override public void handleAction(      Object sender,      Object target){
        executeSqlClickListener.buttonClick(new ClickEvent(executeButton));
      }
    }
);
    addComponent(queryPanel);
    setExpandRatio(queryPanel,1);
  }
 else {
    Label label=new Label(""String_Node_Str"");
    addComponent(label);
    setExpandRatio(label,1);
  }
}",0.9876970396001538
167530,"@Override public void handle(String executionId,final Message inputMessage,final IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (resource == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  if (inputRows == null) {
    return;
  }
  ISqlTransaction transaction=platform.getSqlTemplate().startSqlTransaction();
  for (  EntityData inputRow : inputRows) {
    for (    TargetTable modelTable : targetTables) {
      ArrayList<Object> data=new ArrayList<Object>();
      for (      TargetColumn modelColumn : modelTable.getTargetColumns()) {
        Object value=inputRow.get(modelColumn.getModelAttribute().getId());
        if (fitToColumn && value != null && value instanceof String) {
          value=fitToColumn(modelTable.getTable(),modelColumn.getModelAttribute().getName(),(String)value);
        }
        data.add(value);
      }
      if (updateFirst) {
        for (        TargetColumn modelColumn : modelTable.getKeyTargetColumns()) {
          data.add(inputRow.get(modelColumn.getModelAttribute().getId()));
        }
        int count=execute(transaction,modelTable.getUpdateStatement(),new Object(),data);
        if (insertFallback && count == 0) {
          log.debug(""String_Node_Str"");
          int endIndex=data.size() - modelTable.getKeyTargetColumns().size();
          count=execute(transaction,modelTable.getInsertStatement(),new Object(),data.subList(0,endIndex));
        }
      }
 else {
        try {
          execute(transaction,modelTable.getInsertStatement(),new Object(),data);
        }
 catch (        UniqueKeyException e) {
          if (replaceRows) {
            log.debug(""String_Node_Str"");
            for (            TargetColumn modelColumn : modelTable.getKeyTargetColumns()) {
              data.add(inputRow.get(modelColumn.getModelAttribute().getId()));
            }
            execute(transaction,modelTable.getUpdateStatement(),new Object(),data);
          }
 else {
            throw e;
          }
        }
      }
    }
  }
  transaction.commit();
  transaction.close();
}","@Override public void handle(String executionId,final Message inputMessage,final IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (resource == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  if (inputRows == null) {
    return;
  }
  ISqlTransaction transaction=platform.getSqlTemplate().startSqlTransaction();
  try {
    for (    EntityData inputRow : inputRows) {
      for (      TargetTable modelTable : targetTables) {
        if (modelTable.shouldProcess(inputRow)) {
          ArrayList<Object> data=new ArrayList<Object>();
          for (          TargetColumn modelColumn : modelTable.getTargetColumns()) {
            Object value=inputRow.get(modelColumn.getModelAttribute().getId());
            if (fitToColumn && value != null && value instanceof String) {
              value=fitToColumn(modelTable.getTable(),modelColumn.getModelAttribute().getName(),(String)value);
            }
            data.add(value);
          }
          if (updateFirst) {
            for (            TargetColumn modelColumn : modelTable.getKeyTargetColumns()) {
              data.add(inputRow.get(modelColumn.getModelAttribute().getId()));
            }
            int count=execute(transaction,modelTable.getUpdateStatement(),new Object(),data);
            if (insertFallback && count == 0) {
              log.debug(""String_Node_Str"");
              int endIndex=data.size() - modelTable.getKeyTargetColumns().size();
              count=execute(transaction,modelTable.getInsertStatement(),new Object(),data.subList(0,endIndex));
            }
          }
 else {
            try {
              execute(transaction,modelTable.getInsertStatement(),new Object(),data);
            }
 catch (            UniqueKeyException e) {
              if (replaceRows) {
                log.debug(""String_Node_Str"");
                for (                TargetColumn modelColumn : modelTable.getKeyTargetColumns()) {
                  data.add(inputRow.get(modelColumn.getModelAttribute().getId()));
                }
                execute(transaction,modelTable.getUpdateStatement(),new Object(),data);
              }
 else {
                throw e;
              }
            }
          }
        }
      }
    }
    transaction.commit();
  }
 catch (  Throwable ex) {
    transaction.rollback();
    if (ex instanceof RuntimeException) {
      throw (RuntimeException)ex;
    }
 else {
      throw new RuntimeException(ex);
    }
  }
 finally {
    transaction.close();
  }
}",0.8993458535556025
167531,"protected void bind(String executionId,EntityData entityData){
  Bindings bindings=scriptEngine.createBindings();
  Model model=flowStep.getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      executionTracker.log(executionId,LogLevel.WARN,this,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
}","protected void bind(String executionId,EntityData entityData){
  long ts=System.currentTimeMillis();
  Bindings bindings=scriptEngine.createBindings();
  Model model=flowStep.getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      executionTracker.log(executionId,LogLevel.WARN,this,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
  log.info(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
}",0.9444691248334074
167532,"protected void bind(String executionId,EntityData entityData){
  long ts=System.currentTimeMillis();
  Bindings bindings=scriptEngine.createBindings();
  Model model=flowStep.getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      executionTracker.log(executionId,LogLevel.WARN,this,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
  log.info(""String_Node_Str"" + (System.currentTimeMillis() - ts) + ""String_Node_Str"");
}","protected void bind(String executionId,EntityData entityData){
  Bindings bindings=scriptEngine.createBindings();
  Model model=flowStep.getComponent().getInputModel();
  List<ModelEntity> entities=model.getModelEntities();
  for (  ModelEntity modelEntity : entities) {
    HashMap<String,Object> boundEntity=new HashMap<String,Object>();
    bindings.put(modelEntity.getName(),boundEntity);
  }
  Set<String> attributeIds=entityData.keySet();
  for (  String attributeId : attributeIds) {
    ModelAttribute attribute=model.getAttributeById(attributeId);
    if (attribute != null) {
      ModelEntity entity=model.getEntityById(attribute.getEntityId());
      Object value=entityData.get(attributeId);
      @SuppressWarnings(""String_Node_Str"") Map<String,Object> boundEntity=(Map<String,Object>)bindings.get(entity.getName());
      boundEntity.put(attribute.getName(),value);
    }
 else {
      executionTracker.log(executionId,LogLevel.WARN,this,""String_Node_Str"" + attributeId);
    }
  }
  scriptEngine.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
}",0.9444691248334074
167533,"@Override public void handle(String executionId,Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  Map<String,Message> outboundMessages=new HashMap<String,Message>();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  for (  EntityData entityData : inputRows) {
    bind(executionId,entityData);
    for (    Route route : routes) {
      try {
        if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
          Message message=outboundMessages.get(route.getTargetStepId());
          if (message == null) {
            message=new Message(flowStep.getId());
            message.setPayload(new ArrayList<EntityData>());
            message.getHeader().getTargetStepIds().add(route.getTargetStepId());
            outboundMessages.put(route.getTargetStepId(),message);
          }
          ArrayList<EntityData> outputRows=message.getPayload();
          outputRows.add(entityData);
          if (outputRows.size() >= rowsPerMessage) {
            outboundMessages.remove(route.getTargetStepId());
            componentStatistics.incrementOutboundMessages();
            messageTarget.put(message);
          }
        }
      }
 catch (      ScriptException e) {
        throw new RuntimeException(e);
      }
    }
    Collection<Message> messages=outboundMessages.values();
    for (    Message message : messages) {
      componentStatistics.incrementOutboundMessages();
      messageTarget.put(message);
    }
  }
}","@Override public void handle(String executionId,Message inputMessage,IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  Map<String,Message> outboundMessages=new HashMap<String,Message>();
  ArrayList<EntityData> inputRows=inputMessage.getPayload();
  for (  EntityData entityData : inputRows) {
    bind(executionId,entityData);
    for (    Route route : routes) {
      try {
        if (Boolean.TRUE.equals(scriptEngine.eval(route.getMatchExpression()))) {
          Message message=outboundMessages.get(route.getTargetStepId());
          if (message == null) {
            message=new Message(flowStep.getId());
            message.setPayload(new ArrayList<EntityData>());
            message.getHeader().getTargetStepIds().add(route.getTargetStepId());
            outboundMessages.put(route.getTargetStepId(),message);
          }
          ArrayList<EntityData> outputRows=message.getPayload();
          outputRows.add(entityData);
          if (outputRows.size() >= rowsPerMessage) {
            outboundMessages.remove(route.getTargetStepId());
            componentStatistics.incrementOutboundMessages();
            messageTarget.put(message);
          }
        }
      }
 catch (      ScriptException e) {
        throw new RuntimeException(e);
      }
    }
  }
  Collection<Message> messages=outboundMessages.values();
  for (  Message message : messages) {
    componentStatistics.incrementOutboundMessages();
    messageTarget.put(message);
  }
}",0.9946808510638298
167534,"public void selected(FlowStep step){
  if (step != null) {
    context.getConfigurationService().refresh(flow.findFlowStepWithId(step.getId()).getComponent());
    diagram.setNodes(getNodes());
    diagram.setSelectedNodeId(step.getId());
    propertySheet.valueChange(step);
  }
 else {
    diagram.setSelectedNodeId(null);
    propertySheet.valueChange((Object)null);
  }
}","public void selected(FlowStep step){
  if (step != null) {
    step=flow.findFlowStepWithId(step.getId());
  }
  if (step != null) {
    context.getConfigurationService().refresh(step.getComponent());
    diagram.setNodes(getNodes());
    diagram.setSelectedNodeId(step.getId());
    propertySheet.valueChange(step);
  }
 else {
    diagram.setSelectedNodeId(null);
    propertySheet.valueChange((Object)null);
  }
}",0.854614412136536
167535,"public EditModelPanel(ApplicationContext context,Model model){
  this.context=context;
  this.model=model;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  addEntityButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TABLE);
  addEntityButton.addClickListener(new AddEntityClickListener());
  addAttributeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.COLUMNS);
  addAttributeButton.addClickListener(new AddAttributeClickListener());
  editButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.EDIT);
  editButton.addClickListener(new EditClickListener());
  removeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TRASH_O);
  removeButton.addClickListener(new RemoveClickListener());
  importButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.DOWNLOAD);
  importButton.addClickListener(new ImportClickListener());
  filterField=buttonBar.addFilter();
  filterField.addTextChangeListener(new TextChangeListener(){
    @Override public void textChange(    TextChangeEvent event){
      filterField.setValue(event.getText());
      setButtonsEnabled(event.getText());
      treeTable.removeAllItems();
      addAll(event.getText(),EditModelPanel.this.model.getModelEntities());
    }
  }
);
  treeTable.setSizeFull();
  treeTable.setCacheRate(100);
  treeTable.setPageLength(100);
  treeTable.setImmediate(true);
  treeTable.setSelectable(true);
  treeTable.setMultiSelect(true);
  treeTable.addGeneratedColumn(""String_Node_Str"",new ColumnGenerator(){
    Map<Object,TextField> fields=new HashMap<Object,TextField>();
    @Override public Object generateCell(    Table source,    Object itemId,    Object columnId){
      AbstractObject obj=(AbstractObject)itemId;
      if (lastEditItemIds.contains(itemId)) {
        TextField t=new TextField();
        t.setImmediate(true);
        t.setWidth(100,Unit.PERCENTAGE);
        t.focus();
        t.selectAll();
        t.setValue(obj.getName());
        fields.put(itemId,t);
        return t;
      }
 else {
        TextField t=fields.get(itemId);
        if (t != null) {
          obj.setName(t.getValue());
          fields.remove(itemId);
        }
        return getName(filterField.getValue(),obj.getName());
      }
    }
  }
);
  treeTable.setColumnHeader(""String_Node_Str"",""String_Node_Str"");
  treeTable.addGeneratedColumn(""String_Node_Str"",new ColumnGenerator(){
    Map<Object,ComboBox> fields=new HashMap<Object,ComboBox>();
    @Override public Object generateCell(    Table source,    Object itemId,    Object columnId){
      if (itemId instanceof ModelAttribute) {
        ModelAttribute obj=(ModelAttribute)itemId;
        if (lastEditItemIds.contains(itemId)) {
          ComboBox cbox=new ComboBox();
          cbox.setNullSelectionAllowed(false);
          for (          DataType dataType : DataType.values()) {
            cbox.addItem(dataType.name());
          }
          cbox.setValue(obj.getType());
          fields.put(itemId,cbox);
          return cbox;
        }
 else {
          ComboBox t=fields.get(itemId);
          if (t != null) {
            obj.setType((String)t.getValue());
            fields.remove(itemId);
          }
          return obj.getType();
        }
      }
 else {
        return null;
      }
    }
  }
);
  treeTable.setColumnHeader(""String_Node_Str"",""String_Node_Str"");
  treeTable.addItemClickListener(new TreeTableItemClickListener());
  treeTable.addValueChangeListener(new TreeTableValueChangeListener());
  addComponent(treeTable);
  setExpandRatio(treeTable,1.0f);
  addAll(""String_Node_Str"",model.getModelEntities());
  setButtonsEnabled(""String_Node_Str"");
}","public EditModelPanel(ApplicationContext context,Model model){
  this.context=context;
  this.model=model;
  ButtonBar buttonBar=new ButtonBar();
  addComponent(buttonBar);
  addEntityButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TABLE);
  addEntityButton.addClickListener(new AddEntityClickListener());
  addAttributeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.COLUMNS);
  addAttributeButton.addClickListener(new AddAttributeClickListener());
  editButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.EDIT);
  editButton.addClickListener(new EditClickListener());
  removeButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.TRASH_O);
  removeButton.addClickListener(new RemoveClickListener());
  importButton=buttonBar.addButton(""String_Node_Str"",FontAwesome.DOWNLOAD);
  importButton.addClickListener(new ImportClickListener());
  filterField=buttonBar.addFilter();
  filterField.addTextChangeListener(new TextChangeListener(){
    @Override public void textChange(    TextChangeEvent event){
      filterField.setValue(event.getText());
      setButtonsEnabled(event.getText());
      treeTable.removeAllItems();
      addAll(event.getText(),EditModelPanel.this.model.getModelEntities());
    }
  }
);
  treeTable.setSizeFull();
  treeTable.setCacheRate(100);
  treeTable.setPageLength(100);
  treeTable.setImmediate(true);
  treeTable.setSelectable(true);
  treeTable.setMultiSelect(true);
  treeTable.addGeneratedColumn(""String_Node_Str"",new ColumnGenerator(){
    @Override public Object generateCell(    Table source,    Object itemId,    Object columnId){
      final AbstractObject obj=(AbstractObject)itemId;
      if (lastEditItemIds.contains(itemId)) {
        ImmediateUpdateTextField t=new ImmediateUpdateTextField(null){
          protected void save(){
            obj.setName(getValue());
            EditModelPanel.this.context.getConfigurationService().save(obj);
          }
        }
;
        t.setWidth(100,Unit.PERCENTAGE);
        t.setValue(obj.getName());
        t.focus();
        t.selectAll();
        return t;
      }
 else {
        return getName(filterField.getValue(),obj.getName());
      }
    }
  }
);
  treeTable.setColumnHeader(""String_Node_Str"",""String_Node_Str"");
  treeTable.addGeneratedColumn(""String_Node_Str"",new ColumnGenerator(){
    @Override public Object generateCell(    Table source,    Object itemId,    Object columnId){
      if (itemId instanceof ModelAttribute) {
        final ModelAttribute obj=(ModelAttribute)itemId;
        if (lastEditItemIds.contains(itemId)) {
          final ComboBox cbox=new ComboBox();
          cbox.setNullSelectionAllowed(false);
          for (          DataType dataType : DataType.values()) {
            cbox.addItem(dataType.name());
          }
          cbox.setValue(obj.getType());
          cbox.addValueChangeListener(new ValueChangeListener(){
            @Override public void valueChange(            ValueChangeEvent event){
              obj.setType((String)cbox.getValue());
              EditModelPanel.this.context.getConfigurationService().save(obj);
            }
          }
);
          return cbox;
        }
 else {
          return obj.getType();
        }
      }
 else {
        return null;
      }
    }
  }
);
  treeTable.setColumnHeader(""String_Node_Str"",""String_Node_Str"");
  treeTable.addItemClickListener(new TreeTableItemClickListener());
  treeTable.addValueChangeListener(new TreeTableValueChangeListener());
  addComponent(treeTable);
  setExpandRatio(treeTable,1.0f);
  addAll(""String_Node_Str"",model.getModelEntities());
  setButtonsEnabled(""String_Node_Str"");
}",0.8568278903128015
167536,"@Override public Object generateCell(Table source,Object itemId,Object columnId){
  if (itemId instanceof ModelAttribute) {
    ModelAttribute obj=(ModelAttribute)itemId;
    if (lastEditItemIds.contains(itemId)) {
      ComboBox cbox=new ComboBox();
      cbox.setNullSelectionAllowed(false);
      for (      DataType dataType : DataType.values()) {
        cbox.addItem(dataType.name());
      }
      cbox.setValue(obj.getType());
      fields.put(itemId,cbox);
      return cbox;
    }
 else {
      ComboBox t=fields.get(itemId);
      if (t != null) {
        obj.setType((String)t.getValue());
        fields.remove(itemId);
      }
      return obj.getType();
    }
  }
 else {
    return null;
  }
}","@Override public Object generateCell(Table source,Object itemId,Object columnId){
  if (itemId instanceof ModelAttribute) {
    final ModelAttribute obj=(ModelAttribute)itemId;
    if (lastEditItemIds.contains(itemId)) {
      final ComboBox cbox=new ComboBox();
      cbox.setNullSelectionAllowed(false);
      for (      DataType dataType : DataType.values()) {
        cbox.addItem(dataType.name());
      }
      cbox.setValue(obj.getType());
      cbox.addValueChangeListener(new ValueChangeListener(){
        @Override public void valueChange(        ValueChangeEvent event){
          obj.setType((String)cbox.getValue());
          EditModelPanel.this.context.getConfigurationService().save(obj);
        }
      }
);
      return cbox;
    }
 else {
      return obj.getType();
    }
  }
 else {
    return null;
  }
}",0.7495120364346128
167537,"public void valueChange(ValueChangeEvent event){
  for (  Object itemId : lastEditItemIds) {
    if (itemId instanceof ModelEntity) {
      ModelEntity e=(ModelEntity)itemId;
      context.getConfigurationService().save(e);
    }
 else     if (itemId instanceof ModelAttribute) {
      ModelAttribute a=(ModelAttribute)itemId;
      context.getConfigurationService().save(a);
    }
  }
  lastEditItemIds=Collections.emptySet();
  treeTable.refreshRowCache();
  setButtonsEnabled(filterField.getValue());
}","public void valueChange(ValueChangeEvent event){
  lastEditItemIds=Collections.emptySet();
  treeTable.refreshRowCache();
  setButtonsEnabled(filterField.getValue());
}",0.4992570579494799
167538,"protected void addModelAttribute(String filter,ModelEntity entity,ModelAttribute modelAttribute){
  treeTable.addItem(modelAttribute);
  treeTable.setItemIcon(modelAttribute,FontAwesome.COLUMNS);
  treeTable.setParent(modelAttribute,entity);
  treeTable.setChildrenAllowed(entity,true);
  treeTable.setChildrenAllowed(modelAttribute,false);
}","protected void addModelAttribute(String filter,ModelEntity entity,ModelAttribute modelAttribute){
  treeTable.addItem(modelAttribute);
  treeTable.setItemIcon(modelAttribute,FontAwesome.COLUMNS);
  treeTable.setChildrenAllowed(entity,true);
  treeTable.setParent(modelAttribute,entity);
  treeTable.setChildrenAllowed(modelAttribute,false);
}",0.8654970760233918
167539,"public void setButtonsEnabled(String filter){
  boolean noFilter=isBlank(filter);
  Set<Object> selected=getSelectedItems();
  addEntityButton.setEnabled(noFilter);
  importButton.setEnabled(noFilter);
  addAttributeButton.setEnabled(noFilter);
  removeButton.setEnabled(selected.size() > 0);
  editButton.setEnabled(selected.size() > 0);
}","public void setButtonsEnabled(String filter){
  boolean noFilter=isBlank(filter);
  Set<Object> selected=getSelectedItems();
  addEntityButton.setEnabled(noFilter);
  importButton.setEnabled(noFilter);
  addAttributeButton.setEnabled(noFilter && selected.size() > 0);
  removeButton.setEnabled(selected.size() > 0);
  editButton.setEnabled(selected.size() > 0);
}",0.9672830725462304
167540,"protected void addModelAttribute(String filter,ModelEntity entity,ModelAttribute modelAttribute){
  treeTable.addItem(modelAttribute);
  treeTable.setItemIcon(modelAttribute,FontAwesome.COLUMNS);
  treeTable.setParent(modelAttribute,entity);
  treeTable.setChildrenAllowed(entity,true);
  treeTable.setChildrenAllowed(modelAttribute,false);
}","protected void addModelAttribute(String filter,ModelEntity entity,ModelAttribute modelAttribute){
  treeTable.addItem(modelAttribute);
  treeTable.setItemIcon(modelAttribute,FontAwesome.COLUMNS);
  treeTable.setChildrenAllowed(entity,true);
  treeTable.setParent(modelAttribute,entity);
  treeTable.setChildrenAllowed(modelAttribute,false);
}",0.8654970760233918
167541,"public EditFlowPanel(ApplicationContext context,Flow componentFlow,IDesignNavigator designNavigator,TabbedPanel tabs){
  this.context=context;
  this.tabs=tabs;
  this.flow=componentFlow;
  this.designNavigator=designNavigator;
  this.propertySheet=new PropertySheet(context);
  this.propertySheet.setCaption(""String_Node_Str"");
  this.componentPalette=new EditFlowPalette(this,context.getComponentFactory());
  addComponent(componentPalette);
  VerticalLayout rightLayout=new VerticalLayout();
  rightLayout.setSizeFull();
  rightLayout.addComponent(buildButtonBar());
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setSizeFull();
  splitPanel.setSplitPosition(50,Unit.PERCENTAGE);
  diagramLayout=new CssLayout();
  diagramLayout.setWidth(10000,Unit.PIXELS);
  diagramLayout.setHeight(10000,Unit.PIXELS);
  DragAndDropWrapper wrapper=new DragAndDropWrapper(diagramLayout);
  wrapper.setSizeUndefined();
  wrapper.setDropHandler(new DropHandler());
  Panel panel=new Panel();
  panel.setSizeFull();
  panel.addStyleName(ValoTheme.PANEL_WELL);
  panel.setContent(wrapper);
  splitPanel.addComponent(panel);
  splitPanel.addComponent(propertySheet);
  rightLayout.addComponent(splitPanel);
  rightLayout.setExpandRatio(splitPanel,1);
  addComponent(rightLayout);
  setExpandRatio(rightLayout,1);
  redrawFlow();
  context.getBackgroundRefresherService().register(this);
}","public EditFlowPanel(ApplicationContext context,Flow flow,IDesignNavigator designNavigator,TabbedPanel tabs){
  context.getConfigurationService().refresh(flow);
  this.flow=flow;
  this.context=context;
  this.tabs=tabs;
  this.designNavigator=designNavigator;
  this.propertySheet=new PropertySheet(context);
  this.propertySheet.setCaption(""String_Node_Str"");
  this.componentPalette=new EditFlowPalette(this,context.getComponentFactory());
  addComponent(componentPalette);
  VerticalLayout rightLayout=new VerticalLayout();
  rightLayout.setSizeFull();
  rightLayout.addComponent(buildButtonBar());
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setSizeFull();
  splitPanel.setSplitPosition(50,Unit.PERCENTAGE);
  diagramLayout=new CssLayout();
  diagramLayout.setWidth(10000,Unit.PIXELS);
  diagramLayout.setHeight(10000,Unit.PIXELS);
  DragAndDropWrapper wrapper=new DragAndDropWrapper(diagramLayout);
  wrapper.setSizeUndefined();
  wrapper.setDropHandler(new DropHandler());
  Panel panel=new Panel();
  panel.setSizeFull();
  panel.addStyleName(ValoTheme.PANEL_WELL);
  panel.setContent(wrapper);
  splitPanel.addComponent(panel);
  splitPanel.addComponent(propertySheet);
  rightLayout.addComponent(splitPanel);
  rightLayout.setExpandRatio(splitPanel,1);
  addComponent(rightLayout);
  setExpandRatio(rightLayout,1);
  redrawFlow();
  context.getBackgroundRefresherService().register(this);
}",0.9585253456221198
167542,"public void itemClick(ItemClickEvent event){
  if (event.getButton() == MouseButton.LEFT) {
    if (event.isDoubleClick()) {
    }
 else {
    }
  }
}","public void itemClick(ItemClickEvent event){
  if (event.getButton() == MouseButton.LEFT) {
    if (event.isDoubleClick()) {
      if (treeTable.hasChildren(event.getItemId())) {
        treeTable.setCollapsed(event.getItemId(),!treeTable.isCollapsed(event.getItemId()));
      }
    }
  }
}",0.5850340136054422
167543,"protected TreeTable buildTreeTable(){
  final TreeTable table=new TreeTable();
  table.addStyleName(ValoTheme.TREETABLE_NO_HORIZONTAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_NO_STRIPES);
  table.addStyleName(ValoTheme.TREETABLE_NO_VERTICAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_BORDERLESS);
  table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
  table.setSizeFull();
  table.setCacheRate(100);
  table.setPageLength(100);
  table.setImmediate(true);
  table.setSelectable(true);
  table.setEditable(false);
  table.setContainerDataSource(new BeanItemContainer<AbstractObject>(AbstractObject.class));
  table.setVisibleColumns(new Object[]{""String_Node_Str""});
  table.setColumnExpandRatio(""String_Node_Str"",1);
  table.addShortcutListener(new ShortcutListener(""String_Node_Str"",KeyCode.ENTER,null){
    public void handleAction(    Object sender,    Object target){
      Set<Object> selectedIds=getTableValues();
      for (      Object object : selectedIds) {
        openItem(object);
      }
    }
  }
);
  table.addItemClickListener(new ItemClickListener(){
    public void itemClick(    ItemClickEvent event){
      if (event.getButton() == MouseButton.LEFT) {
        if (event.isDoubleClick()) {
        }
 else {
        }
      }
    }
  }
);
  table.addCollapseListener(new CollapseListener(){
    public void nodeCollapse(    CollapseEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),FontAwesome.FOLDER);
      }
    }
  }
);
  table.addExpandListener(new ExpandListener(){
    public void nodeExpand(    ExpandEvent event){
      if (event.getItemId() instanceof Folder) {
        Folder folder=(Folder)event.getItemId();
        table.setItemIcon(folder,FontAwesome.FOLDER_OPEN);
        folderExpanded(folder);
      }
    }
  }
);
  table.setCellStyleGenerator(new CellStyleGenerator(){
    public String getStyle(    Table source,    Object itemId,    Object propertyId){
      if (itemId instanceof Folder && ""String_Node_Str"".equals(propertyId)) {
        return ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
  return table;
}","protected TreeTable buildTreeTable(){
  final TreeTable table=new TreeTable();
  table.addStyleName(ValoTheme.TREETABLE_NO_HORIZONTAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_NO_STRIPES);
  table.addStyleName(ValoTheme.TREETABLE_NO_VERTICAL_LINES);
  table.addStyleName(ValoTheme.TREETABLE_BORDERLESS);
  table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
  table.setSizeFull();
  table.setCacheRate(100);
  table.setPageLength(100);
  table.setImmediate(true);
  table.setSelectable(true);
  table.setEditable(false);
  table.setContainerDataSource(new BeanItemContainer<AbstractObject>(AbstractObject.class));
  table.setVisibleColumns(new Object[]{""String_Node_Str""});
  table.setColumnExpandRatio(""String_Node_Str"",1);
  table.addItemClickListener(new ItemClickListener(){
    public void itemClick(    ItemClickEvent event){
      if (event.getButton() == MouseButton.LEFT) {
        if (event.isDoubleClick()) {
          if (treeTable.hasChildren(event.getItemId())) {
            treeTable.setCollapsed(event.getItemId(),!treeTable.isCollapsed(event.getItemId()));
          }
        }
      }
    }
  }
);
  table.addCollapseListener(new CollapseListener(){
    public void nodeCollapse(    CollapseEvent event){
      if (event.getItemId() instanceof Folder) {
        table.setItemIcon(event.getItemId(),FontAwesome.FOLDER);
      }
    }
  }
);
  table.addExpandListener(new ExpandListener(){
    public void nodeExpand(    ExpandEvent event){
      if (event.getItemId() instanceof Folder) {
        Folder folder=(Folder)event.getItemId();
        table.setItemIcon(folder,FontAwesome.FOLDER_OPEN);
        folderExpanded(folder);
      }
    }
  }
);
  table.setCellStyleGenerator(new CellStyleGenerator(){
    public String getStyle(    Table source,    Object itemId,    Object propertyId){
      if (itemId instanceof Folder && ""String_Node_Str"".equals(propertyId)) {
        return ""String_Node_Str"";
      }
 else {
        return null;
      }
    }
  }
);
  return table;
}",0.8886751622986295
167544,"public Object getBackgroundData(){
  Object currentSelection=manageNavigator.getCurrentSelection();
  if (currentSelection != null) {
    Map<String,Object> params=new HashMap<String,Object>();
    if (currentSelection instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelection).getId());
    }
 else     if (currentSelection instanceof Flow) {
      params.put(""String_Node_Str"",((Flow)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeployment) {
      params.put(""String_Node_Str"",((AgentDeployment)currentSelection).getFlowId());
    }
    if (params.size() > 0) {
      return context.getExecutionService().findExecutions(params,limit);
    }
  }
  return null;
}","public Object getBackgroundData(){
  Object currentSelection=manageNavigator.getCurrentSelection();
  Object currentSelectionParent=manageNavigator.getCurrentSelectionParent();
  if (currentSelection != null) {
    Map<String,Object> params=new HashMap<String,Object>();
    if (currentSelection instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelection).getId());
    }
 else     if (currentSelection instanceof Flow) {
      params.put(""String_Node_Str"",((Flow)currentSelection).getId());
    }
 else     if (currentSelection instanceof AgentDeployment) {
      params.put(""String_Node_Str"",((AgentDeployment)currentSelection).getFlowId());
    }
    if (currentSelectionParent instanceof Agent) {
      params.put(""String_Node_Str"",((Agent)currentSelectionParent).getId());
    }
    if (params.size() > 0) {
      return context.getExecutionService().findExecutions(params,limit);
    }
  }
  return null;
}",0.8725075528700906
167545,"private String processInputRow(String executionId,EntityData inputRow){
  Writer writer=new StringWriter();
  CsvWriter csvWriter=new CsvWriter(writer,delimiter.charAt(0));
  if (!StringUtils.isEmpty(quoteCharacter)) {
    csvWriter.setTextQualifier(quoteCharacter.charAt(0));
  }
  try {
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        csvWriter.write(inputRow.get(attribute.getAttributeId()).toString());
      }
    }
 else {
      Collection<Object> values=inputRow.values();
      for (      Object object : values) {
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
  return writer.toString();
}","private String processInputRow(String executionId,EntityData inputRow){
  Writer writer=new StringWriter();
  CsvWriter csvWriter=new CsvWriter(writer,delimiter.charAt(0));
  if (!StringUtils.isEmpty(quoteCharacter)) {
    csvWriter.setUseTextQualifier(true);
    csvWriter.setTextQualifier(quoteCharacter.charAt(0));
    csvWriter.setForceQualifier(true);
  }
  try {
    if (attributes.size() > 0) {
      for (      AttributeFormat attribute : attributes) {
        Object object=inputRow.get(attribute.getAttributeId());
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
 else {
      Collection<Object> values=inputRow.values();
      for (      Object object : values) {
        csvWriter.write(object != null ? object.toString() : null);
      }
    }
  }
 catch (  IOException e) {
    throw new IoException(""String_Node_Str"" + e.getMessage());
  }
  return writer.toString();
}",0.9024676850763808
167546,"@Override public void afterHandle(String executionId,IComponent component,Throwable error){
  super.afterHandle(executionId,component,error);
  ExecutionStep step=steps.get(component.getFlowStep().getId());
  step.setEndTime(new Date());
  step.setStatus(error != null ? ExecutionStatus.ERROR.name() : ExecutionStatus.DONE.name());
  step.setMessagesReceived(component.getComponentStatistics().getNumberInboundMessages());
  step.setMessagesProduced(component.getComponentStatistics().getNumberOutboundMessages());
  this.recorder.record(step);
}","@Override public void afterHandle(String executionId,IComponent component,Throwable error){
  super.afterHandle(executionId,component,error);
  ExecutionStep step=steps.get(component.getFlowStep().getId());
  step.setStatus(error != null ? ExecutionStatus.ERROR.name() : ExecutionStatus.RUNNING.name());
  step.setMessagesReceived(component.getComponentStatistics().getNumberInboundMessages());
  step.setMessagesProduced(component.getComponentStatistics().getNumberOutboundMessages());
  this.recorder.record(step);
}",0.5620300751879699
167547,"public static String[] getSignatures(){
  List<String> signatures=new ArrayList<String>();
  Method[] methods=Transformer.class.getMethods();
  LocalVariableTableParameterNameDiscoverer discoverer=new LocalVariableTableParameterNameDiscoverer();
  for (  Method method : methods) {
    if (method.getDeclaringClass().equals(Transformer.class) && Modifier.isPublic(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())) {
      StringBuilder sig=new StringBuilder(method.getName());
      sig.append(""String_Node_Str"");
      String[] names=discoverer.getParameterNames(method);
      for (      String name : names) {
        sig.append(name);
        sig.append(""String_Node_Str"");
      }
      if (names.length > 0) {
        sig.replace(sig.length() - 1,sig.length(),""String_Node_Str"");
      }
 else {
        sig.append(""String_Node_Str"");
      }
      signatures.add(sig.toString());
    }
  }
  return signatures.toArray(new String[signatures.size()]);
}","public static String[] getSignatures(){
  List<String> signatures=new ArrayList<String>();
  Method[] methods=Transformer.class.getMethods();
  LocalVariableTableParameterNameDiscoverer discoverer=new LocalVariableTableParameterNameDiscoverer();
  for (  Method method : methods) {
    if (method.getDeclaringClass().equals(Transformer.class) && Modifier.isPublic(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())) {
      StringBuilder sig=new StringBuilder(method.getName());
      sig.append(""String_Node_Str"");
      String[] names=discoverer.getParameterNames(method);
      for (      String name : names) {
        sig.append(name);
        sig.append(""String_Node_Str"");
      }
      if (names.length > 0) {
        sig.replace(sig.length() - 1,sig.length(),""String_Node_Str"");
      }
 else {
        sig.append(""String_Node_Str"");
      }
      signatures.add(sig.toString());
    }
  }
  Collections.sort(signatures);
  return signatures.toArray(new String[signatures.size()]);
}",0.9838872104733132
167548,"public static Object eval(Object value,String expression){
  ScriptEngine engine=scriptEngine.get();
  if (engine == null) {
    ScriptEngineManager factory=new ScriptEngineManager();
    engine=factory.getEngineByName(""String_Node_Str"");
    scriptEngine.set(engine);
  }
  engine.put(""String_Node_Str"",value);
  try {
    String importString=""String_Node_Str"";
    String code=String.format(""String_Node_Str"",expression);
    Object obj=engine.eval(importString + code);
    if (obj instanceof RuntimeException) {
      throw (RuntimeException)obj;
    }
 else     if (obj instanceof Throwable) {
      throw new RuntimeException((Throwable)obj);
    }
 else {
      return obj;
    }
  }
 catch (  ScriptException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static Object eval(Object value,String expression){
  ScriptEngine engine=scriptEngine.get();
  if (engine == null) {
    ScriptEngineManager factory=new ScriptEngineManager();
    engine=factory.getEngineByName(""String_Node_Str"");
    scriptEngine.set(engine);
  }
  engine.put(""String_Node_Str"",value);
  try {
    String importString=""String_Node_Str"";
    String code=String.format(""String_Node_Str"",expression);
    return engine.eval(importString + code);
  }
 catch (  ScriptException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.7242921013412816
167549,"private void shutdown() throws InterruptedException {
  for (  StepRuntime targetStepRuntime : targetStepRuntimes) {
    targetStepRuntime.put(new ShutdownMessage(component.getFlowStep().getId()));
  }
  this.component.stop();
  running=false;
}","private void shutdown() throws InterruptedException {
  for (  StepRuntime targetStepRuntime : targetStepRuntimes) {
    targetStepRuntime.put(new ShutdownMessage(component.getFlowStep().getId()));
  }
  this.component.stop();
  running=false;
  executionTracker.flowStepFinished(executionId,component,error);
}",0.8812949640287769
167550,"protected void addNewModel(){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    ProjectVersion projectVersion=findProjectVersion();
    Model model=new Model();
    model.setName(""String_Node_Str"");
    model.setProjectVersionId(projectVersion.getId());
    context.getConfigurationService().save(model);
    treeTable.addItem(model);
    treeTable.setItemIcon(model,Icons.MODEL);
    treeTable.setParent(model,folder);
    this.treeTable.setChildrenAllowed(model,false);
    treeTable.setCollapsed(folder,false);
    startEditingItem(model);
  }
}","protected void addNewModel(){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    treeTable.setChildrenAllowed(folder,true);
    ProjectVersion projectVersion=findProjectVersion();
    Model model=new Model();
    model.setName(""String_Node_Str"");
    model.setProjectVersionId(projectVersion.getId());
    context.getConfigurationService().save(model);
    treeTable.addItem(model);
    treeTable.setItemIcon(model,Icons.MODEL);
    treeTable.setParent(model,folder);
    this.treeTable.setChildrenAllowed(model,false);
    treeTable.setCollapsed(folder,false);
    startEditingItem(model);
  }
}",0.9611248966087677
167551,"protected void addNewFlow(){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    ProjectVersion projectVersion=findProjectVersion();
    Flow flow=new Flow();
    flow.setProjectVersionId(projectVersion.getId());
    flow.setName(""String_Node_Str"");
    context.getConfigurationService().save(flow);
    treeTable.addItem(flow);
    treeTable.setItemIcon(flow,Icons.FLOW);
    treeTable.setParent(flow,folder);
    treeTable.setChildrenAllowed(flow,false);
    treeTable.setCollapsed(folder,false);
    treeTable.setCollapsed(projectVersion,false);
    treeTable.setValue(flow);
    startEditingItem(flow);
  }
}","protected void addNewFlow(){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    treeTable.setChildrenAllowed(folder,true);
    ProjectVersion projectVersion=findProjectVersion();
    Flow flow=new Flow();
    flow.setProjectVersionId(projectVersion.getId());
    flow.setName(""String_Node_Str"");
    context.getConfigurationService().save(flow);
    treeTable.addItem(flow);
    treeTable.setItemIcon(flow,Icons.FLOW);
    treeTable.setParent(flow,folder);
    treeTable.setChildrenAllowed(flow,false);
    treeTable.setCollapsed(folder,false);
    treeTable.setCollapsed(projectVersion,false);
    treeTable.setValue(flow);
    startEditingItem(flow);
  }
}",0.964741185296324
167552,"protected void addNewResource(String type,String defaultName,FontAwesome icon){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    ProjectVersion projectVersion=findProjectVersion();
    Resource resource=new Resource();
    resource.setName(defaultName);
    resource.setProjectVersionId(projectVersion.getId());
    resource.setType(type);
    context.getConfigurationService().save(resource);
    treeTable.addItem(resource);
    treeTable.setItemIcon(resource,icon);
    treeTable.setParent(resource,folder);
    treeTable.setCollapsed(folder,false);
    startEditingItem(resource);
  }
}","protected void addNewResource(String type,String defaultName,FontAwesome icon){
  Folder folder=findFolderWithName(""String_Node_Str"");
  if (folder != null) {
    treeTable.setChildrenAllowed(folder,true);
    ProjectVersion projectVersion=findProjectVersion();
    Resource resource=new Resource();
    resource.setName(defaultName);
    resource.setProjectVersionId(projectVersion.getId());
    resource.setType(type);
    context.getConfigurationService().save(resource);
    treeTable.addItem(resource);
    treeTable.setItemIcon(resource,icon);
    treeTable.setParent(resource,folder);
    treeTable.setCollapsed(folder,false);
    startEditingItem(resource);
  }
}",0.9637065637065636
167553,"@Override public void itemClick(ItemClickEvent event){
  if (event.isDoubleClick()) {
    Object object=event.getPropertyId();
    if (!object.toString().equals(""String_Node_Str"")) {
      Object prop=event.getPropertyId();
      String header=logTable.getColumnHeader(prop);
      Property<?> p=event.getItem().getItemProperty(prop);
      String data=String.valueOf(p.getValue());
      new ReadOnlyTextAreaDialog(header,data,false).showAtSize(.5);
    }
  }
}","@Override public void itemClick(ItemClickEvent event){
  if (event.isDoubleClick()) {
    Object object=event.getPropertyId();
    if (!object.toString().equals(""String_Node_Str"")) {
      Object prop=event.getPropertyId();
      String header=logTable.getColumnHeader(prop);
      Property<?> p=event.getItem().getItemProperty(prop);
      if (p != null) {
        String data=String.valueOf(p.getValue());
        new ReadOnlyTextAreaDialog(header,data,false).showAtSize(.5);
      }
    }
  }
}",0.9635036496350364
167554,"public ExecutionLogPanel(String executionId,ApplicationContext context){
  this.backgroundRefresherService=context.getBackgroundRefresherService();
  this.executionService=context.getExecutionService();
  this.executionId=executionId;
  HorizontalLayout header1=new HorizontalLayout();
  header1.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header1.addComponent(flowLabel);
  header1.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header1.addComponent(startLabel);
  header1.setSpacing(true);
  header1.setMargin(new MarginInfo(true,true,false,true));
  header1.setWidth(""String_Node_Str"");
  addComponent(header1);
  HorizontalLayout header2=new HorizontalLayout();
  header2.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header2.addComponent(statusLabel);
  header2.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header2.addComponent(endLabel);
  header2.setSpacing(true);
  header2.setMargin(new MarginInfo(false,true,true,true));
  header2.setWidth(""String_Node_Str"");
  addComponent(header2);
  stepContainer.setBeanIdProperty(""String_Node_Str"");
  stepTable.setContainerDataSource(stepContainer);
  stepTable.setSelectable(true);
  stepTable.setMultiSelect(true);
  stepTable.setImmediate(true);
  stepTable.setSizeFull();
  stepTable.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  stepTable.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  stepTable.addValueChangeListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      @SuppressWarnings(""String_Node_Str"") Set<String> executionStepIds=(Set<String>)event.getProperty().getValue();
      logContainer.removeAllItems();
      List<ExecutionStepLog> logs=executionService.findExecutionStepLog(executionStepIds);
      logContainer.addAll(logs);
    }
  }
);
  final Table logTable=new Table();
  logTable.setContainerDataSource(logContainer);
  logTable.setSelectable(true);
  logTable.setMultiSelect(true);
  logTable.setSizeFull();
  logTable.addGeneratedColumn(""String_Node_Str"",new ComponentNameColumnGenerator());
  logTable.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  logTable.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  logTable.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    @Override public void itemClick(    ItemClickEvent event){
      if (event.isDoubleClick()) {
        Object object=event.getPropertyId();
        if (!object.toString().equals(""String_Node_Str"")) {
          Object prop=event.getPropertyId();
          String header=logTable.getColumnHeader(prop);
          Property<?> p=event.getItem().getItemProperty(prop);
          String data=String.valueOf(p.getValue());
          new ReadOnlyTextAreaDialog(header,data,false).showAtSize(.5);
        }
      }
    }
  }
);
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setFirstComponent(stepTable);
  splitPanel.setSecondComponent(logTable);
  splitPanel.setSplitPosition(50f);
  splitPanel.setSizeFull();
  addComponent(splitPanel);
  setExpandRatio(splitPanel,1.0f);
  refreshUI(getExecutionData());
  backgroundRefresherService.register(this);
}","public ExecutionLogPanel(String executionId,ApplicationContext context){
  this.backgroundRefresherService=context.getBackgroundRefresherService();
  this.executionService=context.getExecutionService();
  this.executionId=executionId;
  HorizontalLayout header1=new HorizontalLayout();
  header1.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header1.addComponent(flowLabel);
  header1.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header1.addComponent(startLabel);
  header1.setSpacing(true);
  header1.setMargin(new MarginInfo(true,true,false,true));
  header1.setWidth(""String_Node_Str"");
  addComponent(header1);
  HorizontalLayout header2=new HorizontalLayout();
  header2.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header2.addComponent(statusLabel);
  header2.addComponent(new Label(""String_Node_Str"",ContentMode.HTML));
  header2.addComponent(endLabel);
  header2.setSpacing(true);
  header2.setMargin(new MarginInfo(false,true,true,true));
  header2.setWidth(""String_Node_Str"");
  addComponent(header2);
  stepContainer.setBeanIdProperty(""String_Node_Str"");
  stepTable.setContainerDataSource(stepContainer);
  stepTable.setSelectable(true);
  stepTable.setMultiSelect(true);
  stepTable.setImmediate(true);
  stepTable.setSizeFull();
  stepTable.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  stepTable.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  stepTable.addValueChangeListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      @SuppressWarnings(""String_Node_Str"") Set<String> executionStepIds=(Set<String>)event.getProperty().getValue();
      logContainer.removeAllItems();
      List<ExecutionStepLog> logs=executionService.findExecutionStepLog(executionStepIds);
      logContainer.addAll(logs);
    }
  }
);
  final Table logTable=new Table();
  logTable.setContainerDataSource(logContainer);
  logTable.setSelectable(true);
  logTable.setMultiSelect(true);
  logTable.setSizeFull();
  logTable.addGeneratedColumn(""String_Node_Str"",new ComponentNameColumnGenerator());
  logTable.setVisibleColumns(new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  logTable.setColumnHeaders(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  logTable.addItemClickListener(new ItemClickListener(){
    private static final long serialVersionUID=1L;
    @Override public void itemClick(    ItemClickEvent event){
      if (event.isDoubleClick()) {
        Object object=event.getPropertyId();
        if (!object.toString().equals(""String_Node_Str"")) {
          Object prop=event.getPropertyId();
          String header=logTable.getColumnHeader(prop);
          Property<?> p=event.getItem().getItemProperty(prop);
          if (p != null) {
            String data=String.valueOf(p.getValue());
            new ReadOnlyTextAreaDialog(header,data,false).showAtSize(.5);
          }
        }
      }
    }
  }
);
  VerticalSplitPanel splitPanel=new VerticalSplitPanel();
  splitPanel.setFirstComponent(stepTable);
  splitPanel.setSecondComponent(logTable);
  splitPanel.setSplitPosition(50f);
  splitPanel.setSizeFull();
  addComponent(splitPanel);
  setExpandRatio(splitPanel,1.0f);
  refreshUI(getExecutionData());
  backgroundRefresherService.register(this);
}",0.9938720250819438
167555,"public void buttonClick(ClickEvent event){
  System.out.println(""String_Node_Str"");
  for (  ModelEntity entity : component.getInputModel().getModelEntities()) {
    for (    ModelAttribute attr : entity.getModelAttributes()) {
      for (      ModelEntity entity2 : component.getOutputModel().getModelEntities()) {
        for (        ModelAttribute attr2 : entity2.getModelAttributes()) {
          autoMap(attr,attr2);
        }
      }
    }
  }
}","public void buttonClick(ClickEvent event){
  for (  ModelEntity entity : component.getInputModel().getModelEntities()) {
    for (    ModelAttribute attr : entity.getModelAttributes()) {
      for (      ModelEntity entity2 : component.getOutputModel().getModelEntities()) {
        for (        ModelAttribute attr2 : entity2.getModelAttributes()) {
          autoMap(attr,attr2);
        }
      }
    }
  }
}",0.183082271147161
167556,"public void call(JsonArray arguments){
  if (arguments.length() > 0) {
    JsonObject json=arguments.getObject(0);
    String sourceId=json.getString(""String_Node_Str"").substring(3);
    String targetId=json.getString(""String_Node_Str"").substring(3);
    boolean removed=json.getBoolean(""String_Node_Str"");
    if (removed) {
      removeConnection(sourceId,targetId);
    }
 else {
      ComponentAttributeSetting setting=new ComponentAttributeSetting();
      setting.setAttributeId(sourceId);
      setting.setComponentId(component.getId());
      setting.setName(MappingProcessor.ATTRIBUTE_MAPS_TO);
      component.addAttributeSetting(setting);
      setting.setValue(targetId);
      context.getConfigurationService().save(setting);
    }
  }
}","public void call(JsonArray arguments){
  if (arguments.length() > 0) {
    JsonObject json=arguments.getObject(0);
    String sourceId=json.getString(""String_Node_Str"").substring(3);
    String targetId=json.getString(""String_Node_Str"").substring(3);
    boolean removed=json.getBoolean(""String_Node_Str"");
    if (removed) {
      removeConnection(sourceId,targetId);
    }
 else {
      ComponentAttributeSetting setting=new ComponentAttributeSetting();
      setting.setAttributeId(sourceId);
      setting.setComponentId(component.getId());
      setting.setName(MappingProcessor.ATTRIBUTE_MAPS_TO);
      component.addAttributeSetting(setting);
      setting.setValue(targetId);
      context.getConfigurationService().save(setting);
      markAsDirty();
    }
  }
}",0.9861932938856016
167557,"public void removeSelected(){
  if (selectedSourceId != null) {
    removeConnection(selectedSourceId,selectedTargetId);
    selectedSourceId=selectedTargetId=null;
    markAsDirty();
  }
}","public void removeSelected(){
  if (selectedSourceId != null) {
    removeConnection(selectedSourceId,selectedTargetId);
    selectedSourceId=selectedTargetId=null;
  }
}",0.947075208913649
167558,"protected void removeConnection(String sourceId,String targetId){
  List<ComponentAttributeSetting> settings=component.getAttributeSetting(sourceId,MappingProcessor.ATTRIBUTE_MAPS_TO);
  for (  ComponentAttributeSetting setting : settings) {
    if (setting.getValue().equals(targetId)) {
      component.getAttributeSettings().remove(setting);
      context.getConfigurationService().delete(setting);
    }
  }
}","protected void removeConnection(String sourceId,String targetId){
  List<ComponentAttributeSetting> settings=component.getAttributeSetting(sourceId,MappingProcessor.ATTRIBUTE_MAPS_TO);
  for (  ComponentAttributeSetting setting : settings) {
    if (setting.getValue().equals(targetId)) {
      component.getAttributeSettings().remove(setting);
      context.getConfigurationService().delete(setting);
      markAsDirty();
    }
  }
}",0.975206611570248
167559,"protected Folder addVirtualFolder(String name,ProjectVersion projectVersion){
  String folderId=name + ""String_Node_Str"" + projectVersion.getId();
  Folder folder=new Folder();
  folder.makeVirtual();
  folder.getProjectVersionId();
  folder.setId(folderId);
  folder.setName(name);
  treeTable.addItem(folder);
  treeTable.setItemIcon(folder,Icons.FOLDER_CLOSED);
  treeTable.setItemCaption(folder,name);
  treeTable.setParent(folder,projectVersion);
  return folder;
}","protected Folder addVirtualFolder(String name,ProjectVersion projectVersion){
  String folderId=name + ""String_Node_Str"" + projectVersion.getId();
  Folder folder=new Folder();
  folder.makeVirtual();
  folder.getProjectVersionId();
  folder.setId(folderId);
  folder.setName(name);
  treeTable.addItem(folder);
  treeTable.setItemIcon(folder,Icons.FOLDER_CLOSED);
  treeTable.setItemCaption(folder,name);
  treeTable.setParent(folder,projectVersion);
  treeTable.setChildrenAllowed(folder,false);
  return folder;
}",0.9533468559837728
167560,"protected void addFlowsToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Flow> flows=configurationService.findFlowsInProject(projectVersion.getId());
  for (  Flow flow : flows) {
    this.treeTable.addItem(flow);
    this.treeTable.setItemIcon(flow,Icons.FLOW);
    this.treeTable.setParent(flow,folder);
    List<FlowStep> flowSteps=flow.getFlowSteps();
    this.treeTable.setChildrenAllowed(flow,flowSteps.size() > 0);
    for (    FlowStep flowStep : flowSteps) {
      this.treeTable.addItem(flowStep);
      this.treeTable.setItemCaption(flowStep,flowStep.getName());
      this.treeTable.setItemIcon(flowStep,Icons.COMPONENT);
      this.treeTable.setParent(flowStep,flow);
      this.treeTable.setChildrenAllowed(flowStep,false);
    }
  }
}","protected void addFlowsToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Flow> flows=configurationService.findFlowsInProject(projectVersion.getId());
  for (  Flow flow : flows) {
    this.treeTable.setChildrenAllowed(folder,true);
    this.treeTable.addItem(flow);
    this.treeTable.setItemIcon(flow,Icons.FLOW);
    this.treeTable.setParent(flow,folder);
    List<FlowStep> flowSteps=flow.getFlowSteps();
    this.treeTable.setChildrenAllowed(flow,flowSteps.size() > 0);
    for (    FlowStep flowStep : flowSteps) {
      this.treeTable.addItem(flowStep);
      this.treeTable.setItemCaption(flowStep,flowStep.getName());
      this.treeTable.setItemIcon(flowStep,Icons.COMPONENT);
      this.treeTable.setParent(flowStep,flow);
      this.treeTable.setChildrenAllowed(flowStep,false);
    }
  }
}",0.9700115340253748
167561,"protected void addModelsToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Model> models=configurationService.findModelsInProject(projectVersion.getId());
  for (  Model model : models) {
    this.treeTable.addItem(model);
    this.treeTable.setItemIcon(model,Icons.MODEL);
    this.treeTable.setParent(model,folder);
    this.treeTable.setChildrenAllowed(model,false);
  }
}","protected void addModelsToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Model> models=configurationService.findModelsInProject(projectVersion.getId());
  for (  Model model : models) {
    this.treeTable.setChildrenAllowed(folder,true);
    this.treeTable.addItem(model);
    this.treeTable.setItemIcon(model,Icons.MODEL);
    this.treeTable.setParent(model,folder);
    this.treeTable.setChildrenAllowed(model,false);
  }
}",0.9471544715447154
167562,"protected void addResourcesToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Resource> resources=configurationService.findResourcesInProject(projectVersion.getId());
  for (  Resource resource : resources) {
    this.treeTable.addItem(resource);
    if (DataSourceResource.TYPE.equals(resource.getType())) {
      this.treeTable.setItemIcon(resource,Icons.DATABASE);
    }
 else {
      this.treeTable.setItemIcon(resource,Icons.GENERAL_RESOURCE);
    }
    this.treeTable.setChildrenAllowed(resource,false);
    this.treeTable.setParent(resource,folder);
  }
}","protected void addResourcesToFolder(Folder folder,ProjectVersion projectVersion){
  IConfigurationService configurationService=context.getConfigurationService();
  List<Resource> resources=configurationService.findResourcesInProject(projectVersion.getId());
  for (  Resource resource : resources) {
    this.treeTable.setChildrenAllowed(folder,true);
    this.treeTable.addItem(resource);
    if (DataSourceResource.TYPE.equals(resource.getType())) {
      this.treeTable.setItemIcon(resource,Icons.DATABASE);
    }
 else {
      this.treeTable.setItemIcon(resource,Icons.GENERAL_RESOURCE);
    }
    this.treeTable.setChildrenAllowed(resource,false);
    this.treeTable.setParent(resource,folder);
  }
}",0.9617083946980854
167563,"public void valueChange(ValueChangeEvent event){
  setButtonsEnabled();
  if (currentlyEditing != null) {
    currentlyEditing=null;
    treeTable.refreshRowCache();
    setButtonsEnabled();
  }
}","public void valueChange(ValueChangeEvent event){
  setButtonsEnabled();
  if (currentlyEditing != null) {
    currentlyEditing=null;
    refresh();
  }
}",0.8767908309455588
167564,"@Override public void handle(String executionId,final Message inputMessage,final IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> payload=null;
  if (!(inputMessage instanceof StartupMessage)) {
    payload=inputMessage.getPayload();
    inboundRecordCount=payload.size();
  }
  for (int i=0; i < inboundRecordCount; i++) {
    if (payload != null && payload.size() > i) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,payload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    executionTracker.log(executionId,LogLevel.DEBUG,this,""String_Node_Str"" + sql);
    template.query(sql,paramMap,new ResultSetExtractor<Object>(){
      @Override public Object extractData(      ResultSet rs) throws SQLException, DataAccessException {
        ResultSetMetaData meta=rs.getMetaData();
        ArrayList<String> attributeIds=null;
        Message message=null;
        int outputRecCount=0;
        while (rs.next()) {
          if (message == null) {
            message=createMessage(inputMessage);
          }
          if (outputRecCount == 0) {
            attributeIds=getAttributeIds(meta,getSqlColumnEntityHints(sql));
          }
          EntityData rowData=new EntityData();
          for (int i=1; i <= meta.getColumnCount(); i++) {
            Object value=JdbcUtils.getResultSetValue(rs,i);
            if (trimColumns && value instanceof String) {
              value=value.toString().trim();
            }
            rowData.put(attributeIds.get(i - 1),value);
          }
          ArrayList<EntityData> payload=message.getPayload();
          payload.add(rowData);
          if (payload.size() >= rowsPerMessage) {
            componentStatistics.incrementOutboundMessages();
            messageTarget.put(message);
            message=null;
          }
          outputRecCount++;
        }
        rs.close();
        if (message != null) {
          componentStatistics.incrementOutboundMessages();
          messageTarget.put(message);
        }
        return null;
      }
    }
);
  }
}","@Override public void handle(String executionId,final Message inputMessage,final IMessageTarget messageTarget){
  componentStatistics.incrementInboundMessages();
  if (resource == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  NamedParameterJdbcTemplate template=getJdbcTemplate();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  int inboundRecordCount=1;
  ArrayList<EntityData> payload=null;
  if (!(inputMessage instanceof StartupMessage)) {
    payload=inputMessage.getPayload();
    inboundRecordCount=payload.size();
  }
  for (int i=0; i < inboundRecordCount; i++) {
    if (payload != null && payload.size() > i) {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,payload.get(i));
    }
 else {
      setParamsFromInboundMsgAndRec(paramMap,inputMessage,null);
    }
    executionTracker.log(executionId,LogLevel.DEBUG,this,""String_Node_Str"" + sql);
    template.query(sql,paramMap,new ResultSetExtractor<Object>(){
      @Override public Object extractData(      ResultSet rs) throws SQLException, DataAccessException {
        ResultSetMetaData meta=rs.getMetaData();
        ArrayList<String> attributeIds=null;
        Message message=null;
        int outputRecCount=0;
        while (rs.next()) {
          if (message == null) {
            message=createMessage(inputMessage);
          }
          if (outputRecCount == 0) {
            attributeIds=getAttributeIds(meta,getSqlColumnEntityHints(sql));
          }
          EntityData rowData=new EntityData();
          for (int i=1; i <= meta.getColumnCount(); i++) {
            Object value=JdbcUtils.getResultSetValue(rs,i);
            if (trimColumns && value instanceof String) {
              value=value.toString().trim();
            }
            rowData.put(attributeIds.get(i - 1),value);
          }
          ArrayList<EntityData> payload=message.getPayload();
          payload.add(rowData);
          if (payload.size() >= rowsPerMessage) {
            componentStatistics.incrementOutboundMessages();
            messageTarget.put(message);
            message=null;
          }
          outputRecCount++;
        }
        rs.close();
        if (message != null) {
          componentStatistics.incrementOutboundMessages();
          messageTarget.put(message);
        }
        return null;
      }
    }
);
  }
}",0.9824180594747124
167565,"protected void refreshOpenProjects(){
  Iterator<ProjectVersion> i=projects.iterator();
  while (i.hasNext()) {
    ProjectVersion projectVersion=i.next();
    if (projectVersion.isDeleted() || projectVersion.getProject().isDeleted()) {
      i.remove();
    }
  }
  Collections.sort(projects,new Comparator<ProjectVersion>(){
    @Override public int compare(    ProjectVersion o1,    ProjectVersion o2){
      return o1.getProject().getName().compareTo(o2.getProject().getName());
    }
  }
);
  treeTable.removeAllItems();
  for (  ProjectVersion projectVersion : projects) {
    treeTable.addItem(projectVersion);
    treeTable.setItemIcon(projectVersion,Icons.PROJECT);
    treeTable.setItemCaption(projectVersion,projectVersion.getProject().getName());
    treeTable.setChildrenAllowed(projectVersion,true);
    addFlowsToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
    addModelsToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
    addResourcesToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
  }
}","protected void refreshOpenProjects(){
  Iterator<ProjectVersion> i=projects.iterator();
  while (i.hasNext()) {
    ProjectVersion projectVersion=i.next();
    context.getConfigurationService().refresh(projectVersion);
    if (projectVersion.isDeleted() || projectVersion.getProject().isDeleted()) {
      i.remove();
    }
  }
  Collections.sort(projects,new Comparator<ProjectVersion>(){
    @Override public int compare(    ProjectVersion o1,    ProjectVersion o2){
      return o1.getProject().getName().compareTo(o2.getProject().getName());
    }
  }
);
  treeTable.removeAllItems();
  for (  ProjectVersion projectVersion : projects) {
    treeTable.addItem(projectVersion);
    treeTable.setItemIcon(projectVersion,Icons.PROJECT);
    treeTable.setItemCaption(projectVersion,projectVersion.getProject().getName());
    treeTable.setChildrenAllowed(projectVersion,true);
    addFlowsToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
    addModelsToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
    addResourcesToFolder(addVirtualFolder(""String_Node_Str"",projectVersion),projectVersion);
  }
}",0.9719376391982184
167566,"@Override public Field<?> createField(Container container,Object itemId,Object propertyId,Component uiContext){
  boolean isVersion=itemId instanceof ProjectVersion;
  if (itemId.equals(currentlyEditing) && !propertyId.equals(""String_Node_Str"") && !(!isVersion && (propertyId.equals(""String_Node_Str"") || propertyId.equals(""String_Node_Str"")))) {
    Field<?> field=super.createField(container,itemId,propertyId,uiContext);
    if (field instanceof TextField) {
      final TextField textField=(TextField)field;
      textField.setNullRepresentation(""String_Node_Str"");
      textField.setWidth(100,Unit.PERCENTAGE);
      textField.addValueChangeListener(new ValueChangeListener(){
        @Override public void valueChange(        ValueChangeEvent event){
          textField.selectAll();
        }
      }
);
      if (""String_Node_Str"".equals(propertyId)) {
        textField.focus();
      }
    }
 else     if (field instanceof CheckBox) {
      CheckBox checkBox=(CheckBox)field;
      checkBox.setCaption(null);
      checkBox.setWidth(100,Unit.PERCENTAGE);
    }
    return field;
  }
 else {
    return null;
  }
}","@Override public Field<?> createField(Container container,Object itemId,Object propertyId,Component uiContext){
  boolean isVersion=itemId instanceof ProjectVersion;
  if (itemId.equals(currentlyEditing) && !propertyId.equals(""String_Node_Str"") && !(!isVersion && (propertyId.equals(""String_Node_Str"") || propertyId.equals(""String_Node_Str"")))) {
    Field<?> field=super.createField(container,itemId,propertyId,uiContext);
    if (field instanceof TextField) {
      final TextField textField=(TextField)field;
      textField.setNullRepresentation(""String_Node_Str"");
      textField.setWidth(100,Unit.PERCENTAGE);
      textField.addFocusListener(new FocusListener(){
        @Override public void focus(        FocusEvent event){
          textField.selectAll();
        }
      }
);
      if (""String_Node_Str"".equals(propertyId)) {
        textField.focus();
      }
    }
 else     if (field instanceof CheckBox) {
      CheckBox checkBox=(CheckBox)field;
      checkBox.setCaption(null);
      checkBox.setWidth(100,Unit.PERCENTAGE);
    }
    return field;
  }
 else {
    return null;
  }
}",0.9631294964028776
167567,"@Override public void valueChange(ValueChangeEvent event){
  textField.selectAll();
}","public void valueChange(ValueChangeEvent event){
  setButtonsEnabled();
  if (currentlyEditing != null) {
    currentlyEditing=null;
    treeTable.refreshRowCache();
    setButtonsEnabled();
  }
}",0.4270462633451957
167568,"private Properties getConnectionProps(){
  Properties connectionProps=new Properties();
  for (  Entry<String,JComponent> entry : components.entrySet()) {
    String value=null;
    JComponent component=entry.getValue();
    if (component instanceof JTextField) {
      value=((JTextField)component).getText();
    }
 else     if (component instanceof JComboBox) {
      value=((JComboBox)component).getSelectedItem().toString();
    }
    connectionProps.put(entry.getKey(),value);
  }
  return connectionProps;
}","private Properties getConnectionProps(){
  Properties connectionProps=new Properties();
  for (  Entry<String,JComponent> entry : components.entrySet()) {
    String value=null;
    JComponent component=entry.getValue();
    if (component instanceof JTextField) {
      value=((JTextField)component).getText();
    }
 else     if (component instanceof JComboBox) {
      value=((JComboBox)component).getEditor().getItem().toString();
    }
    connectionProps.put(entry.getKey(),value);
  }
  return connectionProps;
}",0.9825581395348836
167569,"@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
break;
case KeyEvent.VK_ESCAPE:
ZooInspectorConnectionPropertiesDialog.this.dispose();
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
    okButton.doClick();
  break;
case KeyEvent.VK_ESCAPE:
cancelButton.doClick();
break;
default :
break;
}
}",0.5361842105263158
167570,"/** 
 * @param lastConnectionProps - the last connection properties used. if this is the first connection since starting the applications this will be the default settings
 * @param connectionPropertiesTemplateAndLabels - the connection properties and labels to show in this dialog
 * @param zooInspectorPanel - the  {@link ZooInspectorPanel} linked to this dialog
 */
public ZooInspectorConnectionPropertiesDialog(Properties lastConnectionProps,Pair<Map<String,List<String>>,Map<String,String>> connectionPropertiesTemplateAndLabels,final ZooInspectorPanel zooInspectorPanel){
  final Map<String,List<String>> connectionPropertiesTemplate=connectionPropertiesTemplateAndLabels.getKey();
  final Map<String,String> connectionPropertiesLabels=connectionPropertiesTemplateAndLabels.getValue();
  this.setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  this.setModal(true);
  this.setAlwaysOnTop(true);
  this.setResizable(false);
  final JPanel options=new JPanel();
  final JFileChooser fileChooser=new JFileChooser();
  options.setLayout(new GridBagLayout());
  int i=0;
  components=new HashMap<String,JComponent>();
  for (  Entry<String,List<String>> entry : connectionPropertiesTemplate.entrySet()) {
    int rowPos=2 * i + 1;
    JLabel label=new JLabel(connectionPropertiesLabels.get(entry.getKey()));
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    options.add(label,c1);
    if (entry.getValue().size() == 0) {
      JTextField text=new JTextField();
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=2;
      c2.gridy=rowPos;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.WEST;
      c2.fill=GridBagConstraints.HORIZONTAL;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      options.add(text,c2);
      components.put(entry.getKey(),text);
    }
 else     if (entry.getValue().size() == 1) {
      JTextField text=new JTextField(entry.getValue().get(0));
      text.addKeyListener(new KeyListener(){
        @Override public void keyTyped(        KeyEvent e){
        }
        @Override public void keyReleased(        KeyEvent e){
        }
        @Override public void keyPressed(        KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
            ZooInspectorConnectionPropertiesDialog.this.dispose();
          Properties connectionProps=getConnectionProps();
        zooInspectorPanel.connect(connectionProps);
      break;
case KeyEvent.VK_ESCAPE:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  break;
default :
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(text,c2);
components.put(entry.getKey(),text);
}
 else {
List<String> list=entry.getValue();
JComboBox combo=new JComboBox(list.toArray(new String[list.size()]));
combo.setEditable(true);
combo.setSelectedItem(list.get(0));
combo.getEditor().getEditorComponent().addKeyListener(new KeyListener(){
@Override public void keyTyped(KeyEvent e){
}
@Override public void keyReleased(KeyEvent e){
}
@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
break;
case KeyEvent.VK_ESCAPE:
ZooInspectorConnectionPropertiesDialog.this.dispose();
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(combo,c2);
components.put(entry.getKey(),combo);
}
i++;
}
loadConnectionProps(lastConnectionProps);
JPanel buttonsPanel=new JPanel();
buttonsPanel.setLayout(new GridBagLayout());
JButton loadPropsFileButton=new JButton(""String_Node_Str"");
loadPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
int result=fileChooser.showOpenDialog(ZooInspectorConnectionPropertiesDialog.this);
if (result == JFileChooser.APPROVE_OPTION) {
File propsFilePath=fileChooser.getSelectedFile();
Properties props=new Properties();
try {
FileReader reader=new FileReader(propsFilePath);
try {
props.load(reader);
loadConnectionProps(props);
}
  finally {
reader.close();
}
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
options.revalidate();
options.repaint();
}
}
}
);
GridBagConstraints c3=new GridBagConstraints();
c3.gridx=0;
c3.gridy=0;
c3.gridwidth=1;
c3.gridheight=1;
c3.weightx=0;
c3.weighty=1;
c3.anchor=GridBagConstraints.SOUTHWEST;
c3.fill=GridBagConstraints.NONE;
c3.insets=new Insets(5,5,5,5);
c3.ipadx=0;
c3.ipady=0;
buttonsPanel.add(loadPropsFileButton,c3);
JButton saveDefaultPropsFileButton=new JButton(""String_Node_Str"");
saveDefaultPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
Properties connectionProps=getConnectionProps();
try {
zooInspectorPanel.setdefaultConnectionProps(connectionProps);
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
}
);
GridBagConstraints c6=new GridBagConstraints();
c6.gridx=1;
c6.gridy=0;
c6.gridwidth=1;
c6.gridheight=1;
c6.weightx=1;
c6.weighty=1;
c6.anchor=GridBagConstraints.SOUTHWEST;
c6.fill=GridBagConstraints.NONE;
c6.insets=new Insets(5,5,5,5);
c6.ipadx=0;
c6.ipady=0;
buttonsPanel.add(saveDefaultPropsFileButton,c6);
JButton okButton=new JButton(""String_Node_Str"");
okButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
}
}
);
GridBagConstraints c4=new GridBagConstraints();
c4.gridx=2;
c4.gridy=0;
c4.gridwidth=1;
c4.gridheight=1;
c4.weightx=0;
c4.weighty=1;
c4.anchor=GridBagConstraints.SOUTH;
c4.fill=GridBagConstraints.HORIZONTAL;
c4.insets=new Insets(5,5,5,5);
c4.ipadx=0;
c4.ipady=0;
buttonsPanel.add(okButton,c4);
JButton cancelButton=new JButton(""String_Node_Str"");
cancelButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
}
}
);
GridBagConstraints c5=new GridBagConstraints();
c5.gridx=3;
c5.gridy=0;
c5.gridwidth=1;
c5.gridheight=1;
c5.weightx=0;
c5.weighty=1;
c5.anchor=GridBagConstraints.SOUTH;
c5.fill=GridBagConstraints.HORIZONTAL;
c5.insets=new Insets(5,5,5,5);
c5.ipadx=0;
c5.ipady=0;
buttonsPanel.add(cancelButton,c5);
this.add(options,BorderLayout.CENTER);
this.add(buttonsPanel,BorderLayout.SOUTH);
this.pack();
}","/** 
 * @param lastConnectionProps - the last connection properties used. if this is the first connection since starting the applications this will be the default settings
 * @param connectionPropertiesTemplateAndLabels - the connection properties and labels to show in this dialog
 * @param zooInspectorPanel - the  {@link ZooInspectorPanel} linked to this dialog
 */
public ZooInspectorConnectionPropertiesDialog(Properties lastConnectionProps,Pair<Map<String,List<String>>,Map<String,String>> connectionPropertiesTemplateAndLabels,final ZooInspectorPanel zooInspectorPanel){
  final Map<String,List<String>> connectionPropertiesTemplate=connectionPropertiesTemplateAndLabels.getKey();
  final Map<String,String> connectionPropertiesLabels=connectionPropertiesTemplateAndLabels.getValue();
  this.setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  this.setModal(true);
  this.setAlwaysOnTop(true);
  this.setResizable(false);
  final JPanel options=new JPanel();
  final JFileChooser fileChooser=new JFileChooser();
  options.setLayout(new GridBagLayout());
  int i=0;
  final JButton okButton=new JButton(""String_Node_Str"");
  final JButton cancelButton=new JButton(""String_Node_Str"");
  components=new HashMap<String,JComponent>();
  for (  Entry<String,List<String>> entry : connectionPropertiesTemplate.entrySet()) {
    int rowPos=2 * i + 1;
    JLabel label=new JLabel(connectionPropertiesLabels.get(entry.getKey()));
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    options.add(label,c1);
    if (entry.getValue().size() == 0) {
      JTextField text=new JTextField();
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=2;
      c2.gridy=rowPos;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.WEST;
      c2.fill=GridBagConstraints.HORIZONTAL;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      options.add(text,c2);
      components.put(entry.getKey(),text);
    }
 else     if (entry.getValue().size() == 1) {
      JTextField text=new JTextField(entry.getValue().get(0));
      text.addKeyListener(new KeyListener(){
        @Override public void keyTyped(        KeyEvent e){
        }
        @Override public void keyReleased(        KeyEvent e){
        }
        @Override public void keyPressed(        KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
            okButton.doClick();
          break;
case KeyEvent.VK_ESCAPE:
        cancelButton.doClick();
      break;
default :
    break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(text,c2);
components.put(entry.getKey(),text);
}
 else {
List<String> list=entry.getValue();
JComboBox combo=new JComboBox(list.toArray(new String[list.size()]));
combo.setEditable(true);
combo.setSelectedItem(list.get(0));
combo.getEditor().getEditorComponent().addKeyListener(new KeyListener(){
@Override public void keyTyped(KeyEvent e){
}
@Override public void keyReleased(KeyEvent e){
}
@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
  okButton.doClick();
break;
case KeyEvent.VK_ESCAPE:
cancelButton.doClick();
break;
default :
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(combo,c2);
components.put(entry.getKey(),combo);
}
i++;
}
loadConnectionProps(lastConnectionProps);
JPanel buttonsPanel=new JPanel();
buttonsPanel.setLayout(new GridBagLayout());
JButton loadPropsFileButton=new JButton(""String_Node_Str"");
loadPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
int result=fileChooser.showOpenDialog(ZooInspectorConnectionPropertiesDialog.this);
if (result == JFileChooser.APPROVE_OPTION) {
File propsFilePath=fileChooser.getSelectedFile();
Properties props=new Properties();
try {
FileReader reader=new FileReader(propsFilePath);
try {
props.load(reader);
loadConnectionProps(props);
}
  finally {
reader.close();
}
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
options.revalidate();
options.repaint();
}
}
}
);
GridBagConstraints c3=new GridBagConstraints();
c3.gridx=0;
c3.gridy=0;
c3.gridwidth=1;
c3.gridheight=1;
c3.weightx=0;
c3.weighty=1;
c3.anchor=GridBagConstraints.SOUTHWEST;
c3.fill=GridBagConstraints.NONE;
c3.insets=new Insets(5,5,5,5);
c3.ipadx=0;
c3.ipady=0;
buttonsPanel.add(loadPropsFileButton,c3);
JButton saveDefaultPropsFileButton=new JButton(""String_Node_Str"");
saveDefaultPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
Properties connectionProps=getConnectionProps();
try {
zooInspectorPanel.setdefaultConnectionProps(connectionProps);
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
}
);
GridBagConstraints c6=new GridBagConstraints();
c6.gridx=1;
c6.gridy=0;
c6.gridwidth=1;
c6.gridheight=1;
c6.weightx=1;
c6.weighty=1;
c6.anchor=GridBagConstraints.SOUTHWEST;
c6.fill=GridBagConstraints.NONE;
c6.insets=new Insets(5,5,5,5);
c6.ipadx=0;
c6.ipady=0;
buttonsPanel.add(saveDefaultPropsFileButton,c6);
okButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
}
}
);
GridBagConstraints c4=new GridBagConstraints();
c4.gridx=2;
c4.gridy=0;
c4.gridwidth=1;
c4.gridheight=1;
c4.weightx=0;
c4.weighty=1;
c4.anchor=GridBagConstraints.SOUTH;
c4.fill=GridBagConstraints.HORIZONTAL;
c4.insets=new Insets(5,5,5,5);
c4.ipadx=0;
c4.ipady=0;
buttonsPanel.add(okButton,c4);
cancelButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
}
}
);
GridBagConstraints c5=new GridBagConstraints();
c5.gridx=3;
c5.gridy=0;
c5.gridwidth=1;
c5.gridheight=1;
c5.weightx=0;
c5.weighty=1;
c5.anchor=GridBagConstraints.SOUTH;
c5.fill=GridBagConstraints.HORIZONTAL;
c5.insets=new Insets(5,5,5,5);
c5.ipadx=0;
c5.ipady=0;
buttonsPanel.add(cancelButton,c5);
this.add(options,BorderLayout.CENTER);
this.add(buttonsPanel,BorderLayout.SOUTH);
this.pack();
}",0.9482560885110976
167571,"@Override public void updateDefaultConnectionFile(Properties connectionProps) throws IOException {
  Properties properties=new Properties();
  String connStr=connectionProps.getProperty(CONNECT_STRING);
  defaultHostsList.remove(connStr);
  while (defaultHostsList.size() > defaultHostsListSize) {
    defaultHostsList.remove(defaultHostsList.size() - 1);
  }
  try {
    defaultHostsList.add(0,connStr);
  }
 catch (  Throwable t) {
    System.out.println(t);
  }
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < defaultHostsList.size(); i++) {
    String str=defaultHostsList.get(i);
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(str);
  }
  properties.setProperty(CONNECT_STRING,sb.toString());
  properties.setProperty(SESSION_TIMEOUT,defaultTimeout);
  properties.getProperty(DATA_ENCRYPTION_MANAGER,defaultEncryptionManager);
  saveDefaultConnectionFile(properties);
}","@Override public void updateDefaultConnectionFile(Properties connectionProps) throws IOException {
  Properties properties=new Properties();
  String connStr=connectionProps.getProperty(CONNECT_STRING);
  defaultHostsList.remove(connStr);
  while (defaultHostsList.size() > defaultHostsListSize) {
    defaultHostsList.remove(defaultHostsList.size() - 1);
  }
  defaultHostsList.add(0,connStr);
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < defaultHostsList.size(); i++) {
    String str=defaultHostsList.get(i);
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(str);
  }
  System.out.println(""String_Node_Str"" + sb.toString());
  properties.setProperty(CONNECT_STRING,sb.toString());
  properties.setProperty(SESSION_TIMEOUT,defaultTimeout);
  properties.getProperty(DATA_ENCRYPTION_MANAGER,defaultEncryptionManager);
  saveDefaultConnectionFile(properties);
}",0.9298729983434566
167572,"@Override public List<String> loadNodeViewersFile(File selectedFile) throws IOException {
  List<String> result=new ArrayList<String>();
  if (defaultNodeViewersFile.exists()) {
    FileReader reader=new FileReader(selectedFile);
    try {
      BufferedReader buff=new BufferedReader(reader);
      try {
        while (buff.ready()) {
          String line=buff.readLine();
          if (line != null && line.length() > 0) {
            result.add(line);
          }
        }
      }
  finally {
        buff.close();
      }
    }
  finally {
      reader.close();
    }
  }
  return result;
}","@Override public List<String> loadNodeViewersFile(File selectedFile) throws IOException {
  List<String> result=new ArrayList<String>();
  if (defaultNodeViewersFile.exists()) {
    FileReader reader=new FileReader(selectedFile);
    try {
      BufferedReader buff=new BufferedReader(reader);
      try {
        while (buff.ready()) {
          String line=buff.readLine();
          if (line != null && line.length() > 0) {
            result.add(line);
          }
        }
      }
  finally {
        buff.close();
      }
    }
  finally {
      reader.close();
    }
  }
 else {
    result.add(""String_Node_Str"");
    result.add(""String_Node_Str"");
    result.add(""String_Node_Str"");
  }
  return result;
}",0.8848207475209764
167573,"/** 
 */
public NodeViewerData(){
  this.setLayout(new BorderLayout());
  this.dataArea=new JTextPane();
  this.highlighter=(DefaultHighlighter)dataArea.getHighlighter();
  dataArea.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == KeyEvent.VK_F) && ((e.getModifiers() & (KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) != 0)) {
        NodeDataViewerFindDialog dialog=new NodeDataViewerFindDialog(NodeViewerData.this);
        dialog.setVisible(true);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        highlighter.removeAllHighlights();
      }
    }
  }
);
  dataArea.setEditable(false);
  this.toolbar=new JToolBar();
  this.toolbar.setFloatable(false);
  scroller=new JScrollPane(this.dataArea);
  scroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  this.add(scroller,BorderLayout.CENTER);
  this.add(this.toolbar,BorderLayout.NORTH);
  final JButton saveButton=new JButton(ZooInspectorIconResources.getSaveIcon());
  saveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (selectedNode != null) {
        if (JOptionPane.showConfirmDialog(NodeViewerData.this,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
          zooInspectorManager.setData(selectedNode,dataArea.getText());
        }
      }
    }
  }
);
  saveButton.setEnabled(false);
  this.toolbar.add(saveButton);
  JButton editButton=new JButton(ZooInspectorIconResources.getEditIcon());
  editButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (zooInspectorManager != null && zooInspectorManager.getZookeeperStates() == States.CONNECTED) {
        saveButton.setEnabled(!saveButton.isEnabled());
        dataArea.setEditable(saveButton.isEnabled());
      }
    }
  }
);
  this.toolbar.add(editButton);
  JButton searchButton=new JButton(ZooInspectorIconResources.getSearchIcon());
  searchButton.setToolTipText(""String_Node_Str"");
  searchButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      NodeDataViewerFindDialog dialog=new NodeDataViewerFindDialog(NodeViewerData.this);
      dialog.setVisible(true);
    }
  }
);
  this.toolbar.add(searchButton);
}","/** 
 */
public NodeViewerData(){
  this.setLayout(new BorderLayout());
  this.dataArea=new JTextPane();
  this.highlighter=(DefaultHighlighter)dataArea.getHighlighter();
  dataArea.addKeyListener(new KeyListener(){
    @Override public void keyTyped(    KeyEvent e){
    }
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if ((e.getKeyCode() == KeyEvent.VK_F) && ((e.getModifiers() & (KeyEvent.CTRL_MASK | KeyEvent.META_MASK)) != 0)) {
        NodeDataViewerFindDialog dialog=new NodeDataViewerFindDialog(NodeViewerData.this);
        dialog.setVisible(true);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        highlighter.removeAllHighlights();
      }
    }
  }
);
  dataArea.setEditable(false);
  this.toolbar=new JToolBar();
  this.toolbar.setFloatable(false);
  scroller=new JScrollPane(this.dataArea);
  scroller.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  this.add(scroller,BorderLayout.CENTER);
  this.add(this.toolbar,BorderLayout.NORTH);
  final JButton saveButton=new JButton(ZooInspectorIconResources.getSaveIcon());
  saveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (selectedNode != null) {
        if (JOptionPane.showConfirmDialog(NodeViewerData.this,""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
          zooInspectorManager.setData(selectedNode,dataArea.getText());
        }
      }
    }
  }
);
  saveButton.setEnabled(false);
  this.toolbar.add(saveButton);
  JButton editButton=new JButton(ZooInspectorIconResources.getEditIcon());
  editButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (zooInspectorManager != null && zooInspectorManager.getZookeeperStates() == States.CONNECTED) {
        saveButton.setEnabled(!saveButton.isEnabled());
        dataArea.setEditable(saveButton.isEnabled());
      }
    }
  }
);
  this.toolbar.add(editButton);
  JButton searchButton=new JButton(ZooInspectorIconResources.getSearchIcon());
  String osName=System.getProperty(""String_Node_Str"").toLowerCase();
  String tipText=""String_Node_Str"";
  if (osName != null && osName.indexOf(""String_Node_Str"") > -1) {
    tipText=""String_Node_Str"";
  }
  searchButton.setToolTipText(tipText);
  searchButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      NodeDataViewerFindDialog dialog=new NodeDataViewerFindDialog(NodeViewerData.this);
      dialog.setVisible(true);
    }
  }
);
  this.toolbar.add(searchButton);
}",0.9532387888079724
167574,"/** 
 * @param args - not used. The value of these parameters will have no effect on the application
 */
public static void main(String[] args){
  try {
    Dimension screenSize=getScreenResolution();
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    JFrame frame=new JFrame(""String_Node_Str"");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final ZooInspectorPanel zooInspectorPanel=new ZooInspectorPanel(new ZooInspectorManagerImpl());
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowClosed(      WindowEvent e){
        super.windowClosed(e);
        zooInspectorPanel.disconnect(true);
      }
    }
);
    frame.setContentPane(zooInspectorPanel);
    frame.setSize(1024,768);
    frame.setVisible(true);
  }
 catch (  Exception e) {
    LoggerFactory.getLogger().error(""String_Node_Str"",e);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","/** 
 * @param args - not used. The value of these parameters will have no effect on the application
 */
public static void main(String[] args){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    JFrame frame=new JFrame(""String_Node_Str"");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final ZooInspectorPanel zooInspectorPanel=new ZooInspectorPanel(new ZooInspectorManagerImpl());
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowClosed(      WindowEvent e){
        super.windowClosed(e);
        zooInspectorPanel.disconnect(true);
      }
    }
);
    frame.setContentPane(zooInspectorPanel);
    frame.setSize(1024,768);
    frame.setVisible(true);
  }
 catch (  Exception e) {
    LoggerFactory.getLogger().error(""String_Node_Str"",e);
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}",0.9753593429158112
167575,"@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
break;
case KeyEvent.VK_ESCAPE:
ZooInspectorConnectionPropertiesDialog.this.dispose();
break;
default :
break;
}
}","@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
break;
case KeyEvent.VK_ESCAPE:
ZooInspectorConnectionPropertiesDialog.this.dispose();
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.9491525423728814
167576,"/** 
 * @param lastConnectionProps - the last connection properties used. if this is the first connection since starting the applications this will be the default settings
 * @param connectionPropertiesTemplateAndLabels - the connection properties and labels to show in this dialog
 * @param zooInspectorPanel - the  {@link ZooInspectorPanel} linked to this dialog
 */
public ZooInspectorConnectionPropertiesDialog(Properties lastConnectionProps,Pair<Map<String,List<String>>,Map<String,String>> connectionPropertiesTemplateAndLabels,final ZooInspectorPanel zooInspectorPanel){
  final Map<String,List<String>> connectionPropertiesTemplate=connectionPropertiesTemplateAndLabels.getKey();
  final Map<String,String> connectionPropertiesLabels=connectionPropertiesTemplateAndLabels.getValue();
  this.setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  this.setModal(true);
  this.setAlwaysOnTop(true);
  this.setResizable(false);
  final JPanel options=new JPanel();
  final JFileChooser fileChooser=new JFileChooser();
  options.setLayout(new GridBagLayout());
  int i=0;
  components=new HashMap<String,JComponent>();
  for (  Entry<String,List<String>> entry : connectionPropertiesTemplate.entrySet()) {
    int rowPos=2 * i + 1;
    JLabel label=new JLabel(connectionPropertiesLabels.get(entry.getKey()));
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    options.add(label,c1);
    if (entry.getValue().size() == 0) {
      JTextField text=new JTextField();
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=2;
      c2.gridy=rowPos;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.WEST;
      c2.fill=GridBagConstraints.HORIZONTAL;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      options.add(text,c2);
      components.put(entry.getKey(),text);
    }
 else     if (entry.getValue().size() == 1) {
      JTextField text=new JTextField(entry.getValue().get(0));
      text.addKeyListener(new KeyListener(){
        @Override public void keyTyped(        KeyEvent e){
        }
        @Override public void keyReleased(        KeyEvent e){
        }
        @Override public void keyPressed(        KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
            ZooInspectorConnectionPropertiesDialog.this.dispose();
          Properties connectionProps=getConnectionProps();
        zooInspectorPanel.connect(connectionProps);
      break;
case KeyEvent.VK_ESCAPE:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  break;
default :
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(text,c2);
components.put(entry.getKey(),text);
}
 else {
List<String> list=entry.getValue();
JComboBox combo=new JComboBox(list.toArray(new String[list.size()]));
combo.setEditable(true);
combo.setSelectedItem(list.get(0));
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(combo,c2);
components.put(entry.getKey(),combo);
}
i++;
}
loadConnectionProps(lastConnectionProps);
JPanel buttonsPanel=new JPanel();
buttonsPanel.setLayout(new GridBagLayout());
JButton loadPropsFileButton=new JButton(""String_Node_Str"");
loadPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
int result=fileChooser.showOpenDialog(ZooInspectorConnectionPropertiesDialog.this);
if (result == JFileChooser.APPROVE_OPTION) {
File propsFilePath=fileChooser.getSelectedFile();
Properties props=new Properties();
try {
FileReader reader=new FileReader(propsFilePath);
try {
props.load(reader);
loadConnectionProps(props);
}
  finally {
reader.close();
}
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
options.revalidate();
options.repaint();
}
}
}
);
GridBagConstraints c3=new GridBagConstraints();
c3.gridx=0;
c3.gridy=0;
c3.gridwidth=1;
c3.gridheight=1;
c3.weightx=0;
c3.weighty=1;
c3.anchor=GridBagConstraints.SOUTHWEST;
c3.fill=GridBagConstraints.NONE;
c3.insets=new Insets(5,5,5,5);
c3.ipadx=0;
c3.ipady=0;
buttonsPanel.add(loadPropsFileButton,c3);
JButton saveDefaultPropsFileButton=new JButton(""String_Node_Str"");
saveDefaultPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
Properties connectionProps=getConnectionProps();
try {
zooInspectorPanel.setdefaultConnectionProps(connectionProps);
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
}
);
GridBagConstraints c6=new GridBagConstraints();
c6.gridx=1;
c6.gridy=0;
c6.gridwidth=1;
c6.gridheight=1;
c6.weightx=1;
c6.weighty=1;
c6.anchor=GridBagConstraints.SOUTHWEST;
c6.fill=GridBagConstraints.NONE;
c6.insets=new Insets(5,5,5,5);
c6.ipadx=0;
c6.ipady=0;
buttonsPanel.add(saveDefaultPropsFileButton,c6);
JButton okButton=new JButton(""String_Node_Str"");
okButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
}
}
);
GridBagConstraints c4=new GridBagConstraints();
c4.gridx=2;
c4.gridy=0;
c4.gridwidth=1;
c4.gridheight=1;
c4.weightx=0;
c4.weighty=1;
c4.anchor=GridBagConstraints.SOUTH;
c4.fill=GridBagConstraints.HORIZONTAL;
c4.insets=new Insets(5,5,5,5);
c4.ipadx=0;
c4.ipady=0;
buttonsPanel.add(okButton,c4);
JButton cancelButton=new JButton(""String_Node_Str"");
cancelButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
}
}
);
GridBagConstraints c5=new GridBagConstraints();
c5.gridx=3;
c5.gridy=0;
c5.gridwidth=1;
c5.gridheight=1;
c5.weightx=0;
c5.weighty=1;
c5.anchor=GridBagConstraints.SOUTH;
c5.fill=GridBagConstraints.HORIZONTAL;
c5.insets=new Insets(5,5,5,5);
c5.ipadx=0;
c5.ipady=0;
buttonsPanel.add(cancelButton,c5);
this.add(options,BorderLayout.CENTER);
this.add(buttonsPanel,BorderLayout.SOUTH);
this.pack();
}","/** 
 * @param lastConnectionProps - the last connection properties used. if this is the first connection since starting the applications this will be the default settings
 * @param connectionPropertiesTemplateAndLabels - the connection properties and labels to show in this dialog
 * @param zooInspectorPanel - the  {@link ZooInspectorPanel} linked to this dialog
 */
public ZooInspectorConnectionPropertiesDialog(Properties lastConnectionProps,Pair<Map<String,List<String>>,Map<String,String>> connectionPropertiesTemplateAndLabels,final ZooInspectorPanel zooInspectorPanel){
  final Map<String,List<String>> connectionPropertiesTemplate=connectionPropertiesTemplateAndLabels.getKey();
  final Map<String,String> connectionPropertiesLabels=connectionPropertiesTemplateAndLabels.getValue();
  this.setLayout(new BorderLayout());
  this.setTitle(""String_Node_Str"");
  this.setModal(true);
  this.setAlwaysOnTop(true);
  this.setResizable(false);
  final JPanel options=new JPanel();
  final JFileChooser fileChooser=new JFileChooser();
  options.setLayout(new GridBagLayout());
  int i=0;
  components=new HashMap<String,JComponent>();
  for (  Entry<String,List<String>> entry : connectionPropertiesTemplate.entrySet()) {
    int rowPos=2 * i + 1;
    JLabel label=new JLabel(connectionPropertiesLabels.get(entry.getKey()));
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    options.add(label,c1);
    if (entry.getValue().size() == 0) {
      JTextField text=new JTextField();
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=2;
      c2.gridy=rowPos;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.WEST;
      c2.fill=GridBagConstraints.HORIZONTAL;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      options.add(text,c2);
      components.put(entry.getKey(),text);
    }
 else     if (entry.getValue().size() == 1) {
      JTextField text=new JTextField(entry.getValue().get(0));
      text.addKeyListener(new KeyListener(){
        @Override public void keyTyped(        KeyEvent e){
        }
        @Override public void keyReleased(        KeyEvent e){
        }
        @Override public void keyPressed(        KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
            ZooInspectorConnectionPropertiesDialog.this.dispose();
          Properties connectionProps=getConnectionProps();
        zooInspectorPanel.connect(connectionProps);
      break;
case KeyEvent.VK_ESCAPE:
    ZooInspectorConnectionPropertiesDialog.this.dispose();
  break;
default :
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(text,c2);
components.put(entry.getKey(),text);
}
 else {
List<String> list=entry.getValue();
JComboBox combo=new JComboBox(list.toArray(new String[list.size()]));
combo.setEditable(true);
combo.setSelectedItem(list.get(0));
combo.getEditor().getEditorComponent().addKeyListener(new KeyListener(){
@Override public void keyTyped(KeyEvent e){
}
@Override public void keyReleased(KeyEvent e){
}
@Override public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ENTER:
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
break;
case KeyEvent.VK_ESCAPE:
ZooInspectorConnectionPropertiesDialog.this.dispose();
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}
}
);
GridBagConstraints c2=new GridBagConstraints();
c2.gridx=2;
c2.gridy=rowPos;
c2.gridwidth=1;
c2.gridheight=1;
c2.weightx=0;
c2.weighty=0;
c2.anchor=GridBagConstraints.WEST;
c2.fill=GridBagConstraints.HORIZONTAL;
c2.insets=new Insets(5,5,5,5);
c2.ipadx=0;
c2.ipady=0;
options.add(combo,c2);
components.put(entry.getKey(),combo);
}
i++;
}
loadConnectionProps(lastConnectionProps);
JPanel buttonsPanel=new JPanel();
buttonsPanel.setLayout(new GridBagLayout());
JButton loadPropsFileButton=new JButton(""String_Node_Str"");
loadPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
int result=fileChooser.showOpenDialog(ZooInspectorConnectionPropertiesDialog.this);
if (result == JFileChooser.APPROVE_OPTION) {
File propsFilePath=fileChooser.getSelectedFile();
Properties props=new Properties();
try {
FileReader reader=new FileReader(propsFilePath);
try {
props.load(reader);
loadConnectionProps(props);
}
  finally {
reader.close();
}
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
options.revalidate();
options.repaint();
}
}
}
);
GridBagConstraints c3=new GridBagConstraints();
c3.gridx=0;
c3.gridy=0;
c3.gridwidth=1;
c3.gridheight=1;
c3.weightx=0;
c3.weighty=1;
c3.anchor=GridBagConstraints.SOUTHWEST;
c3.fill=GridBagConstraints.NONE;
c3.insets=new Insets(5,5,5,5);
c3.ipadx=0;
c3.ipady=0;
buttonsPanel.add(loadPropsFileButton,c3);
JButton saveDefaultPropsFileButton=new JButton(""String_Node_Str"");
saveDefaultPropsFileButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
Properties connectionProps=getConnectionProps();
try {
zooInspectorPanel.setdefaultConnectionProps(connectionProps);
}
 catch (IOException ex) {
LoggerFactory.getLogger().error(""String_Node_Str"",ex);
JOptionPane.showMessageDialog(ZooInspectorConnectionPropertiesDialog.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
}
}
}
);
GridBagConstraints c6=new GridBagConstraints();
c6.gridx=1;
c6.gridy=0;
c6.gridwidth=1;
c6.gridheight=1;
c6.weightx=1;
c6.weighty=1;
c6.anchor=GridBagConstraints.SOUTHWEST;
c6.fill=GridBagConstraints.NONE;
c6.insets=new Insets(5,5,5,5);
c6.ipadx=0;
c6.ipady=0;
buttonsPanel.add(saveDefaultPropsFileButton,c6);
JButton okButton=new JButton(""String_Node_Str"");
okButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
Properties connectionProps=getConnectionProps();
zooInspectorPanel.connect(connectionProps);
}
}
);
GridBagConstraints c4=new GridBagConstraints();
c4.gridx=2;
c4.gridy=0;
c4.gridwidth=1;
c4.gridheight=1;
c4.weightx=0;
c4.weighty=1;
c4.anchor=GridBagConstraints.SOUTH;
c4.fill=GridBagConstraints.HORIZONTAL;
c4.insets=new Insets(5,5,5,5);
c4.ipadx=0;
c4.ipady=0;
buttonsPanel.add(okButton,c4);
JButton cancelButton=new JButton(""String_Node_Str"");
cancelButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ZooInspectorConnectionPropertiesDialog.this.dispose();
}
}
);
GridBagConstraints c5=new GridBagConstraints();
c5.gridx=3;
c5.gridy=0;
c5.gridwidth=1;
c5.gridheight=1;
c5.weightx=0;
c5.weighty=1;
c5.anchor=GridBagConstraints.SOUTH;
c5.fill=GridBagConstraints.HORIZONTAL;
c5.insets=new Insets(5,5,5,5);
c5.ipadx=0;
c5.ipady=0;
buttonsPanel.add(cancelButton,c5);
this.add(options,BorderLayout.CENTER);
this.add(buttonsPanel,BorderLayout.SOUTH);
this.pack();
}",0.9608716507914754
167577,"@Override public void valueChanged(TreeSelectionEvent e){
  long start=System.currentTimeMillis();
  TreePath[] paths=e.getPaths();
  System.out.println(""String_Node_Str"" + Arrays.asList(paths));
  selectedNodes.clear();
  for (  TreePath path : paths) {
    boolean appended=false;
    StringBuilder sb=new StringBuilder();
    Object[] pathArray=path.getPath();
    for (    Object o : pathArray) {
      if (o != null) {
        String nodeName=o.toString();
        if (nodeName != null) {
          if (nodeName.length() > 0) {
            appended=true;
            sb.append(""String_Node_Str"");
            sb.append(o.toString());
          }
        }
      }
    }
    if (appended) {
      selectedNodes.add(sb.toString());
    }
  }
  for (int i=0; i < needsReload.size(); i++) {
    this.needsReload.set(i,true);
  }
  reloadSelectedViewer();
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + selectedNodes);
  System.out.println(""String_Node_Str"" + (end - start));
}","@Override public void valueChanged(TreeSelectionEvent e){
  long start=System.currentTimeMillis();
  TreePath[] paths=e.getPaths();
  System.out.println(""String_Node_Str"" + Arrays.toString(paths));
  selectedNodes.clear();
  for (  TreePath path : paths) {
    boolean appended=false;
    StringBuilder sb=new StringBuilder();
    Object[] pathArray=path.getPath();
    for (    Object o : pathArray) {
      if (o != null) {
        String nodeName=o.toString();
        if (nodeName != null) {
          if (nodeName.length() > 0) {
            appended=true;
            sb.append(""String_Node_Str"");
            sb.append(o.toString());
          }
        }
      }
    }
    if (appended) {
      selectedNodes.add(sb.toString());
    }
  }
  for (int i=0; i < needsReload.size(); i++) {
    this.needsReload.set(i,true);
  }
  reloadSelectedViewer();
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + selectedNodes);
  System.out.println(""String_Node_Str"" + (end - start));
}",0.993076162215628
167578,"private void doRefresh(final TreePath[] selectedNodes){
  System.out.println(""String_Node_Str"" + selectedNodes);
  final Set<TreePath> expandedNodes=new LinkedHashSet<TreePath>();
  int rowCount=tree.getRowCount();
  for (int i=0; i < rowCount; i++) {
    TreePath path=tree.getPathForRow(i);
    if (tree.isExpanded(path)) {
      expandedNodes.add(path);
    }
  }
  System.out.println(""String_Node_Str"" + expandedNodes);
  SwingWorker<Boolean,Void> worker=new SwingWorker<Boolean,Void>(){
    @Override protected Boolean doInBackground() throws Exception {
      tree.setModel(new DefaultTreeModel(new ZooInspectorTreeNode(""String_Node_Str"",null)));
      return true;
    }
    @Override protected void done(){
      for (      TreePath path : expandedNodes) {
        tree.expandPath(path);
      }
      tree.getSelectionModel().setSelectionPaths(selectedNodes);
      skipRefreshPaths.clear();
    }
  }
;
  worker.execute();
}","private void doRefresh(final TreePath[] selectedNodes){
  System.out.println(""String_Node_Str"" + Arrays.toString(selectedNodes));
  final Set<TreePath> expandedNodes=new LinkedHashSet<TreePath>();
  int rowCount=tree.getRowCount();
  for (int i=0; i < rowCount; i++) {
    TreePath path=tree.getPathForRow(i);
    if (tree.isExpanded(path)) {
      expandedNodes.add(path);
    }
  }
  System.out.println(""String_Node_Str"" + expandedNodes);
  SwingWorker<Boolean,Void> worker=new SwingWorker<Boolean,Void>(){
    @Override protected Boolean doInBackground() throws Exception {
      tree.setModel(new DefaultTreeModel(new ZooInspectorTreeNode(""String_Node_Str"",null)));
      return true;
    }
    @Override protected void done(){
      for (      TreePath path : expandedNodes) {
        tree.expandPath(path);
      }
      tree.getSelectionModel().setSelectionPaths(selectedNodes);
      skipRefreshPaths.clear();
    }
  }
;
  worker.execute();
}",0.9771883289124668
167579,"/** 
 * Refresh the tree view
 */
public void refreshView(){
  List<String> visiblePaths=new ArrayList<String>();
  int rowCount=tree.getRowCount();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + rowCount);
  for (int i=0; i < rowCount; i++) {
    TreePath path=tree.getPathForRow(i);
    visiblePaths.add(ZooInspectorUtil.treePathToZnodePath(path));
  }
  System.out.println(""String_Node_Str"" + visiblePaths);
  try {
    zooInspectorManager.getCache().refresh(visiblePaths,0);
  }
 catch (  KeeperException e) {
    zooInspectorPanel.checkZookeeperStates(e.getMessage());
    return;
  }
  skipRefreshPaths.addAll(getExpandedNodes());
  doRefresh(tree.getSelectionPaths());
}","/** 
 * Refresh the tree view
 */
public void refreshView(){
  List<String> visiblePaths=new ArrayList<String>();
  int rowCount=tree.getRowCount();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + rowCount);
  for (int i=0; i < rowCount; i++) {
    TreePath path=tree.getPathForRow(i);
    visiblePaths.add(ZooInspectorUtil.treePathToZnodePath(path));
  }
  System.out.println(""String_Node_Str"" + visiblePaths);
  try {
    zooInspectorManager.getCache().refresh(visiblePaths,0);
  }
 catch (  KeeperException e) {
    zooInspectorPanel.checkZookeeperStates(e.getMessage());
    return;
  }
  skipRefreshPaths.addAll(getExpandedNodes());
  doRefresh(tree.getSelectionPaths());
  System.out.println(""String_Node_Str"");
}",0.9720136518771332
167580,"@Override public void nodeSelectionChanged(List<String> selectedNodes){
  this.aclDataPanel.removeAll();
  if (selectedNodes.size() > 0) {
    this.selectedNode=selectedNodes.get(0);
    SwingWorker<List<Map<String,String>>,Void> worker=new SwingWorker<List<Map<String,String>>,Void>(){
      @Override protected List<Map<String,String>> doInBackground() throws Exception {
        return NodeViewerACL.this.zooInspectorManager.getACLs(NodeViewerACL.this.selectedNode);
      }
      @Override protected void done(){
        List<Map<String,String>> acls=null;
        try {
          acls=get();
        }
 catch (        InterruptedException e) {
          acls=new ArrayList<Map<String,String>>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
        }
catch (        ExecutionException e) {
          acls=new ArrayList<Map<String,String>>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
        }
        aclDataPanel.setLayout(new GridBagLayout());
        int j=0;
        for (        Map<String,String> data : acls) {
          int rowPos=2 * j + 1;
          JPanel aclPanel=new JPanel();
          aclPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
          aclPanel.setBackground(Color.WHITE);
          aclPanel.setLayout(new GridBagLayout());
          int i=0;
          for (          Map.Entry<String,String> entry : data.entrySet()) {
            int rowPosACL=2 * i + 1;
            JLabel label=new JLabel(entry.getKey());
            JTextField text=new JTextField(entry.getValue());
            text.setEditable(false);
            GridBagConstraints c1=new GridBagConstraints();
            c1.gridx=1;
            c1.gridy=rowPosACL;
            c1.gridwidth=1;
            c1.gridheight=1;
            c1.weightx=0;
            c1.weighty=0;
            c1.anchor=GridBagConstraints.NORTHWEST;
            c1.fill=GridBagConstraints.BOTH;
            c1.insets=new Insets(5,5,5,5);
            c1.ipadx=0;
            c1.ipady=0;
            aclPanel.add(label,c1);
            GridBagConstraints c2=new GridBagConstraints();
            c2.gridx=3;
            c2.gridy=rowPosACL;
            c2.gridwidth=1;
            c2.gridheight=1;
            c2.weightx=0;
            c2.weighty=0;
            c2.anchor=GridBagConstraints.NORTHWEST;
            c2.fill=GridBagConstraints.BOTH;
            c2.insets=new Insets(5,5,5,5);
            c2.ipadx=0;
            c2.ipady=0;
            aclPanel.add(text,c2);
            i++;
          }
          GridBagConstraints c=new GridBagConstraints();
          c.gridx=1;
          c.gridy=rowPos;
          c.gridwidth=1;
          c.gridheight=1;
          c.weightx=1;
          c.weighty=1;
          c.anchor=GridBagConstraints.NORTHWEST;
          c.fill=GridBagConstraints.NONE;
          c.insets=new Insets(5,5,5,5);
          c.ipadx=0;
          c.ipady=0;
          aclDataPanel.add(aclPanel,c);
        }
        NodeViewerACL.this.aclDataPanel.revalidate();
        NodeViewerACL.this.aclDataPanel.repaint();
      }
    }
;
    worker.execute();
  }
}","@Override public void nodeSelectionChanged(List<String> selectedNodes){
  if (selectedNodes.size() > 0) {
    this.selectedNode=selectedNodes.get(0);
    SwingWorker<List<Map<String,String>>,Void> worker=new SwingWorker<List<Map<String,String>>,Void>(){
      @Override protected List<Map<String,String>> doInBackground() throws Exception {
        return NodeViewerACL.this.zooInspectorManager.getACLs(NodeViewerACL.this.selectedNode);
      }
      @Override protected void done(){
        List<Map<String,String>> acls=null;
        try {
          acls=get();
        }
 catch (        InterruptedException e) {
          acls=new ArrayList<Map<String,String>>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
        }
catch (        ExecutionException e) {
          acls=new ArrayList<Map<String,String>>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
        }
        aclDataPanel.removeAll();
        aclDataPanel.setLayout(new GridBagLayout());
        int j=0;
        for (        Map<String,String> data : acls) {
          int rowPos=2 * j + 1;
          JPanel aclPanel=new JPanel();
          aclPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
          aclPanel.setBackground(Color.WHITE);
          aclPanel.setLayout(new GridBagLayout());
          int i=0;
          for (          Map.Entry<String,String> entry : data.entrySet()) {
            int rowPosACL=2 * i + 1;
            JLabel label=new JLabel(entry.getKey());
            JTextField text=new JTextField(entry.getValue());
            text.setEditable(false);
            GridBagConstraints c1=new GridBagConstraints();
            c1.gridx=1;
            c1.gridy=rowPosACL;
            c1.gridwidth=1;
            c1.gridheight=1;
            c1.weightx=0;
            c1.weighty=0;
            c1.anchor=GridBagConstraints.NORTHWEST;
            c1.fill=GridBagConstraints.BOTH;
            c1.insets=new Insets(5,5,5,5);
            c1.ipadx=0;
            c1.ipady=0;
            aclPanel.add(label,c1);
            GridBagConstraints c2=new GridBagConstraints();
            c2.gridx=3;
            c2.gridy=rowPosACL;
            c2.gridwidth=1;
            c2.gridheight=1;
            c2.weightx=0;
            c2.weighty=0;
            c2.anchor=GridBagConstraints.NORTHWEST;
            c2.fill=GridBagConstraints.BOTH;
            c2.insets=new Insets(5,5,5,5);
            c2.ipadx=0;
            c2.ipady=0;
            aclPanel.add(text,c2);
            i++;
          }
          GridBagConstraints c=new GridBagConstraints();
          c.gridx=1;
          c.gridy=rowPos;
          c.gridwidth=1;
          c.gridheight=1;
          c.weightx=1;
          c.weighty=1;
          c.anchor=GridBagConstraints.NORTHWEST;
          c.fill=GridBagConstraints.NONE;
          c.insets=new Insets(5,5,5,5);
          c.ipadx=0;
          c.ipady=0;
          aclDataPanel.add(aclPanel,c);
        }
        NodeViewerACL.this.aclDataPanel.revalidate();
        NodeViewerACL.this.aclDataPanel.repaint();
      }
    }
;
    worker.execute();
  }
}",0.9894037640360588
167581,"@Override protected void done(){
  List<Map<String,String>> acls=null;
  try {
    acls=get();
  }
 catch (  InterruptedException e) {
    acls=new ArrayList<Map<String,String>>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
  }
catch (  ExecutionException e) {
    acls=new ArrayList<Map<String,String>>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
  }
  aclDataPanel.setLayout(new GridBagLayout());
  int j=0;
  for (  Map<String,String> data : acls) {
    int rowPos=2 * j + 1;
    JPanel aclPanel=new JPanel();
    aclPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    aclPanel.setBackground(Color.WHITE);
    aclPanel.setLayout(new GridBagLayout());
    int i=0;
    for (    Map.Entry<String,String> entry : data.entrySet()) {
      int rowPosACL=2 * i + 1;
      JLabel label=new JLabel(entry.getKey());
      JTextField text=new JTextField(entry.getValue());
      text.setEditable(false);
      GridBagConstraints c1=new GridBagConstraints();
      c1.gridx=1;
      c1.gridy=rowPosACL;
      c1.gridwidth=1;
      c1.gridheight=1;
      c1.weightx=0;
      c1.weighty=0;
      c1.anchor=GridBagConstraints.NORTHWEST;
      c1.fill=GridBagConstraints.BOTH;
      c1.insets=new Insets(5,5,5,5);
      c1.ipadx=0;
      c1.ipady=0;
      aclPanel.add(label,c1);
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=3;
      c2.gridy=rowPosACL;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.NORTHWEST;
      c2.fill=GridBagConstraints.BOTH;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      aclPanel.add(text,c2);
      i++;
    }
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=1;
    c.gridy=rowPos;
    c.gridwidth=1;
    c.gridheight=1;
    c.weightx=1;
    c.weighty=1;
    c.anchor=GridBagConstraints.NORTHWEST;
    c.fill=GridBagConstraints.NONE;
    c.insets=new Insets(5,5,5,5);
    c.ipadx=0;
    c.ipady=0;
    aclDataPanel.add(aclPanel,c);
  }
  NodeViewerACL.this.aclDataPanel.revalidate();
  NodeViewerACL.this.aclDataPanel.repaint();
}","@Override protected void done(){
  List<Map<String,String>> acls=null;
  try {
    acls=get();
  }
 catch (  InterruptedException e) {
    acls=new ArrayList<Map<String,String>>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
  }
catch (  ExecutionException e) {
    acls=new ArrayList<Map<String,String>>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerACL.this.selectedNode,e);
  }
  aclDataPanel.removeAll();
  aclDataPanel.setLayout(new GridBagLayout());
  int j=0;
  for (  Map<String,String> data : acls) {
    int rowPos=2 * j + 1;
    JPanel aclPanel=new JPanel();
    aclPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
    aclPanel.setBackground(Color.WHITE);
    aclPanel.setLayout(new GridBagLayout());
    int i=0;
    for (    Map.Entry<String,String> entry : data.entrySet()) {
      int rowPosACL=2 * i + 1;
      JLabel label=new JLabel(entry.getKey());
      JTextField text=new JTextField(entry.getValue());
      text.setEditable(false);
      GridBagConstraints c1=new GridBagConstraints();
      c1.gridx=1;
      c1.gridy=rowPosACL;
      c1.gridwidth=1;
      c1.gridheight=1;
      c1.weightx=0;
      c1.weighty=0;
      c1.anchor=GridBagConstraints.NORTHWEST;
      c1.fill=GridBagConstraints.BOTH;
      c1.insets=new Insets(5,5,5,5);
      c1.ipadx=0;
      c1.ipady=0;
      aclPanel.add(label,c1);
      GridBagConstraints c2=new GridBagConstraints();
      c2.gridx=3;
      c2.gridy=rowPosACL;
      c2.gridwidth=1;
      c2.gridheight=1;
      c2.weightx=0;
      c2.weighty=0;
      c2.anchor=GridBagConstraints.NORTHWEST;
      c2.fill=GridBagConstraints.BOTH;
      c2.insets=new Insets(5,5,5,5);
      c2.ipadx=0;
      c2.ipady=0;
      aclPanel.add(text,c2);
      i++;
    }
    GridBagConstraints c=new GridBagConstraints();
    c.gridx=1;
    c.gridy=rowPos;
    c.gridwidth=1;
    c.gridheight=1;
    c.weightx=1;
    c.weighty=1;
    c.anchor=GridBagConstraints.NORTHWEST;
    c.fill=GridBagConstraints.NONE;
    c.insets=new Insets(5,5,5,5);
    c.ipadx=0;
    c.ipady=0;
    aclDataPanel.add(aclPanel,c);
  }
  NodeViewerACL.this.aclDataPanel.revalidate();
  NodeViewerACL.this.aclDataPanel.repaint();
}",0.9936851601262968
167582,"@Override public void nodeSelectionChanged(List<String> selectedNodes){
  this.metaDataPanel.removeAll();
  if (selectedNodes.size() > 0) {
    this.selectedNode=selectedNodes.get(0);
    SwingWorker<Map<String,String>,Void> worker=new SwingWorker<Map<String,String>,Void>(){
      @Override protected Map<String,String> doInBackground() throws Exception {
        return NodeViewerMetaData.this.zooInspectorManager.getNodeMeta(NodeViewerMetaData.this.selectedNode);
      }
      @Override protected void done(){
        Map<String,String> data=null;
        try {
          data=get();
        }
 catch (        InterruptedException e) {
          data=new HashMap<String,String>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerMetaData.this.selectedNode,e);
        }
catch (        ExecutionException e) {
          data=new HashMap<String,String>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerMetaData.this.selectedNode,e);
        }
        NodeViewerMetaData.this.metaDataPanel.setLayout(new GridBagLayout());
        JPanel infoPanel=new JPanel();
        infoPanel.setBackground(Color.WHITE);
        infoPanel.setLayout(new GridBagLayout());
        int i=0;
        int rowPos=0;
        for (        Map.Entry<String,String> entry : data.entrySet()) {
          rowPos=2 * i + 1;
          JLabel label=new JLabel(entry.getKey());
          JTextField text=new JTextField(entry.getValue());
          text.setEditable(false);
          GridBagConstraints c1=new GridBagConstraints();
          c1.gridx=0;
          c1.gridy=rowPos;
          c1.gridwidth=1;
          c1.gridheight=1;
          c1.weightx=0;
          c1.weighty=0;
          c1.anchor=GridBagConstraints.WEST;
          c1.fill=GridBagConstraints.HORIZONTAL;
          c1.insets=new Insets(5,5,5,5);
          c1.ipadx=0;
          c1.ipady=0;
          infoPanel.add(label,c1);
          GridBagConstraints c2=new GridBagConstraints();
          c2.gridx=2;
          c2.gridy=rowPos;
          c2.gridwidth=1;
          c2.gridheight=1;
          c2.weightx=0;
          c2.weighty=0;
          c2.anchor=GridBagConstraints.WEST;
          c2.fill=GridBagConstraints.HORIZONTAL;
          c2.insets=new Insets(5,5,5,5);
          c2.ipadx=0;
          c2.ipady=0;
          infoPanel.add(text,c2);
          i++;
        }
        GridBagConstraints c=new GridBagConstraints();
        c.gridx=1;
        c.gridy=rowPos;
        c.gridwidth=1;
        c.gridheight=1;
        c.weightx=1;
        c.weighty=1;
        c.anchor=GridBagConstraints.NORTHWEST;
        c.fill=GridBagConstraints.NONE;
        c.insets=new Insets(5,5,5,5);
        c.ipadx=0;
        c.ipady=0;
        NodeViewerMetaData.this.metaDataPanel.add(infoPanel,c);
        NodeViewerMetaData.this.metaDataPanel.revalidate();
        NodeViewerMetaData.this.metaDataPanel.repaint();
      }
    }
;
    worker.execute();
  }
}","@Override public void nodeSelectionChanged(List<String> selectedNodes){
  this.metaDataPanel.removeAll();
  this.metaDataPanel.setLayout(new GridBagLayout());
  if (selectedNodes.size() > 0) {
    final String selectedNode=selectedNodes.get(0);
    SwingWorker<Map<String,String>,Void> worker=new SwingWorker<Map<String,String>,Void>(){
      @Override protected Map<String,String> doInBackground() throws Exception {
        return NodeViewerMetaData.this.zooInspectorManager.getNodeMeta(selectedNode);
      }
      @Override protected void done(){
        Map<String,String> data=null;
        try {
          data=get();
        }
 catch (        InterruptedException e) {
          data=new HashMap<String,String>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + selectedNode,e);
        }
catch (        ExecutionException e) {
          data=new HashMap<String,String>();
          LoggerFactory.getLogger().error(""String_Node_Str"" + selectedNode,e);
        }
        JPanel infoPanel=new JPanel();
        infoPanel.setBackground(Color.WHITE);
        infoPanel.setLayout(new GridBagLayout());
        int i=0;
        int rowPos=0;
        for (        Map.Entry<String,String> entry : data.entrySet()) {
          rowPos=2 * i + 1;
          JLabel label=new JLabel(entry.getKey());
          JTextField text=new JTextField(entry.getValue());
          text.setEditable(false);
          GridBagConstraints c1=new GridBagConstraints();
          c1.gridx=0;
          c1.gridy=rowPos;
          c1.gridwidth=1;
          c1.gridheight=1;
          c1.weightx=0;
          c1.weighty=0;
          c1.anchor=GridBagConstraints.WEST;
          c1.fill=GridBagConstraints.HORIZONTAL;
          c1.insets=new Insets(5,5,5,5);
          c1.ipadx=0;
          c1.ipady=0;
          infoPanel.add(label,c1);
          GridBagConstraints c2=new GridBagConstraints();
          c2.gridx=2;
          c2.gridy=rowPos;
          c2.gridwidth=1;
          c2.gridheight=1;
          c2.weightx=0;
          c2.weighty=0;
          c2.anchor=GridBagConstraints.WEST;
          c2.fill=GridBagConstraints.HORIZONTAL;
          c2.insets=new Insets(5,5,5,5);
          c2.ipadx=0;
          c2.ipady=0;
          infoPanel.add(text,c2);
          i++;
        }
        GridBagConstraints c=new GridBagConstraints();
        c.gridx=1;
        c.gridy=rowPos;
        c.gridwidth=1;
        c.gridheight=1;
        c.weightx=1;
        c.weighty=1;
        c.anchor=GridBagConstraints.NORTHWEST;
        c.fill=GridBagConstraints.NONE;
        c.insets=new Insets(5,5,5,5);
        c.ipadx=0;
        c.ipady=0;
        NodeViewerMetaData.this.metaDataPanel.add(infoPanel,c);
        NodeViewerMetaData.this.metaDataPanel.revalidate();
        NodeViewerMetaData.this.metaDataPanel.repaint();
      }
    }
;
    worker.execute();
  }
}",0.9590178108248314
167583,"@Override protected Map<String,String> doInBackground() throws Exception {
  return NodeViewerMetaData.this.zooInspectorManager.getNodeMeta(NodeViewerMetaData.this.selectedNode);
}","@Override protected Map<String,String> doInBackground() throws Exception {
  return NodeViewerMetaData.this.zooInspectorManager.getNodeMeta(selectedNode);
}",0.9285714285714286
167584,"@Override protected void done(){
  Map<String,String> data=null;
  try {
    data=get();
  }
 catch (  InterruptedException e) {
    data=new HashMap<String,String>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerMetaData.this.selectedNode,e);
  }
catch (  ExecutionException e) {
    data=new HashMap<String,String>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + NodeViewerMetaData.this.selectedNode,e);
  }
  NodeViewerMetaData.this.metaDataPanel.setLayout(new GridBagLayout());
  JPanel infoPanel=new JPanel();
  infoPanel.setBackground(Color.WHITE);
  infoPanel.setLayout(new GridBagLayout());
  int i=0;
  int rowPos=0;
  for (  Map.Entry<String,String> entry : data.entrySet()) {
    rowPos=2 * i + 1;
    JLabel label=new JLabel(entry.getKey());
    JTextField text=new JTextField(entry.getValue());
    text.setEditable(false);
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    infoPanel.add(label,c1);
    GridBagConstraints c2=new GridBagConstraints();
    c2.gridx=2;
    c2.gridy=rowPos;
    c2.gridwidth=1;
    c2.gridheight=1;
    c2.weightx=0;
    c2.weighty=0;
    c2.anchor=GridBagConstraints.WEST;
    c2.fill=GridBagConstraints.HORIZONTAL;
    c2.insets=new Insets(5,5,5,5);
    c2.ipadx=0;
    c2.ipady=0;
    infoPanel.add(text,c2);
    i++;
  }
  GridBagConstraints c=new GridBagConstraints();
  c.gridx=1;
  c.gridy=rowPos;
  c.gridwidth=1;
  c.gridheight=1;
  c.weightx=1;
  c.weighty=1;
  c.anchor=GridBagConstraints.NORTHWEST;
  c.fill=GridBagConstraints.NONE;
  c.insets=new Insets(5,5,5,5);
  c.ipadx=0;
  c.ipady=0;
  NodeViewerMetaData.this.metaDataPanel.add(infoPanel,c);
  NodeViewerMetaData.this.metaDataPanel.revalidate();
  NodeViewerMetaData.this.metaDataPanel.repaint();
}","@Override protected void done(){
  Map<String,String> data=null;
  try {
    data=get();
  }
 catch (  InterruptedException e) {
    data=new HashMap<String,String>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + selectedNode,e);
  }
catch (  ExecutionException e) {
    data=new HashMap<String,String>();
    LoggerFactory.getLogger().error(""String_Node_Str"" + selectedNode,e);
  }
  JPanel infoPanel=new JPanel();
  infoPanel.setBackground(Color.WHITE);
  infoPanel.setLayout(new GridBagLayout());
  int i=0;
  int rowPos=0;
  for (  Map.Entry<String,String> entry : data.entrySet()) {
    rowPos=2 * i + 1;
    JLabel label=new JLabel(entry.getKey());
    JTextField text=new JTextField(entry.getValue());
    text.setEditable(false);
    GridBagConstraints c1=new GridBagConstraints();
    c1.gridx=0;
    c1.gridy=rowPos;
    c1.gridwidth=1;
    c1.gridheight=1;
    c1.weightx=0;
    c1.weighty=0;
    c1.anchor=GridBagConstraints.WEST;
    c1.fill=GridBagConstraints.HORIZONTAL;
    c1.insets=new Insets(5,5,5,5);
    c1.ipadx=0;
    c1.ipady=0;
    infoPanel.add(label,c1);
    GridBagConstraints c2=new GridBagConstraints();
    c2.gridx=2;
    c2.gridy=rowPos;
    c2.gridwidth=1;
    c2.gridheight=1;
    c2.weightx=0;
    c2.weighty=0;
    c2.anchor=GridBagConstraints.WEST;
    c2.fill=GridBagConstraints.HORIZONTAL;
    c2.insets=new Insets(5,5,5,5);
    c2.ipadx=0;
    c2.ipady=0;
    infoPanel.add(text,c2);
    i++;
  }
  GridBagConstraints c=new GridBagConstraints();
  c.gridx=1;
  c.gridy=rowPos;
  c.gridwidth=1;
  c.gridheight=1;
  c.weightx=1;
  c.weighty=1;
  c.anchor=GridBagConstraints.NORTHWEST;
  c.fill=GridBagConstraints.NONE;
  c.insets=new Insets(5,5,5,5);
  c.ipadx=0;
  c.ipady=0;
  NodeViewerMetaData.this.metaDataPanel.add(infoPanel,c);
  NodeViewerMetaData.this.metaDataPanel.revalidate();
  NodeViewerMetaData.this.metaDataPanel.repaint();
}",0.96514607893388
167585,"public JsonNode toJsonNode(Patch patch){
  List<PatchOperation> operations=patch.getOperations();
  JsonNodeFactory nodeFactory=JsonNodeFactory.instance;
  ArrayNode patchNode=nodeFactory.arrayNode();
  for (  PatchOperation operation : operations) {
    ObjectNode opNode=nodeFactory.objectNode();
    opNode.set(""String_Node_Str"",nodeFactory.textNode(operation.getOp()));
    opNode.set(""String_Node_Str"",nodeFactory.textNode(operation.getPath()));
    if (operation instanceof FromOperation) {
      FromOperation fromOp=(FromOperation)operation;
      opNode.set(""String_Node_Str"",nodeFactory.textNode(fromOp.getFrom()));
    }
    Object value=operation.getValue();
    if (value != null) {
      opNode.set(""String_Node_Str"",MAPPER.valueToTree(value));
    }
  }
  return patchNode;
}","public JsonNode toJsonNode(Patch patch){
  List<PatchOperation> operations=patch.getOperations();
  JsonNodeFactory nodeFactory=JsonNodeFactory.instance;
  ArrayNode patchNode=nodeFactory.arrayNode();
  for (  PatchOperation operation : operations) {
    ObjectNode opNode=nodeFactory.objectNode();
    opNode.set(""String_Node_Str"",nodeFactory.textNode(operation.getOp()));
    opNode.set(""String_Node_Str"",nodeFactory.textNode(operation.getPath()));
    if (operation instanceof FromOperation) {
      FromOperation fromOp=(FromOperation)operation;
      opNode.set(""String_Node_Str"",nodeFactory.textNode(fromOp.getFrom()));
    }
    Object value=operation.getValue();
    if (value != null) {
      opNode.set(""String_Node_Str"",MAPPER.valueToTree(value));
    }
    patchNode.add(opNode);
  }
  return patchNode;
}",0.9831985065339142
167586,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.home_fragment);
  analytics=GoogleAnalytics.getInstance(this);
  analytics.setLocalDispatchPeriod(1800);
  tracker=analytics.newTracker(""String_Node_Str"");
  tracker.enableExceptionReporting(true);
  tracker.enableAdvertisingIdCollection(true);
  tracker.enableAutoActivityTracking(true);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  AccountHeader headerResult=new AccountHeaderBuilder().withActivity(this).withHeaderBackground(R.drawable.cover).build();
  result=new DrawerBuilder().withActivity(this).withToolbar(toolbar).withTranslucentStatusBar(true).withActionBarDrawerToggle(true).withAccountHeader(headerResult).withSelectedItem(0).addDrawerItems(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_swap_horiz_24px),new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_settings_24px)).withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener(){
    @Override public boolean onItemClick(    AdapterView<?> parent,    View view,    int position,    long id,    IDrawerItem drawerItem){
      if (drawerItem instanceof Nameable) {
switch (((Nameable)drawerItem).getName()) {
case ""String_Node_Str"":
{
            Intent intent=new Intent(MainActivity.this,SettingsActivity.class);
            startActivity(intent);
            break;
          }
case ""String_Node_Str"":
{
          try {
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + ""String_Node_Str""));
            startActivity(intent);
          }
 catch (          Exception e) {
            Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          break;
        }
case ""String_Node_Str"":
{
        removeAds();
        break;
      }
case ""String_Node_Str"":
{
      Intent intent=new Intent(MainActivity.this,Gitty.class);
      startActivity(intent);
      break;
    }
case ""String_Node_Str"":
{
    String url=""String_Node_Str"";
    Intent i=new Intent(Intent.ACTION_VIEW);
    i.setData(Uri.parse(url));
    startActivity(i);
    break;
  }
}
}
return false;
}
}
).build();
if (!bp.isPurchased(""String_Node_Str"")) {
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_dnd_on_24px));
}
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_edit_black_18dp));
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_mail_24px));
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_shop_24px));
adapter=new ServerListAdapter();
fab=(FloatingActionButton)findViewById(R.id.fab);
fab.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
newAddServerActivity(v);
}
}
);
list=(ExpandableHeightListView)findViewById(R.id.list);
list.setAdapter(adapter);
list.setOnItemClickListener(this);
list.setOnItemLongClickListener(this);
list.setExpanded(true);
fab.attachToListView(list);
LinearLayout reportBugLayout=(LinearLayout)findViewById(R.id.reportLayout);
reportBugLayout.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
Intent intent=new Intent(MainActivity.this,Gitty.class);
startActivity(intent);
}
}
);
if (instanceCount > 0) {
finish();
}
prefs=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
if (prefs.getBoolean(""String_Node_Str"",true)) {
startIntro();
prefs.edit().putBoolean(""String_Node_Str"",false).commit();
}
if (adapter.isServerNull()) {
reportBugLayout.setVisibility(View.GONE);
}
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.home_fragment);
  analytics=GoogleAnalytics.getInstance(this);
  analytics.setLocalDispatchPeriod(1800);
  tracker=analytics.newTracker(""String_Node_Str"");
  tracker.enableExceptionReporting(true);
  tracker.enableAdvertisingIdCollection(true);
  tracker.enableAutoActivityTracking(true);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  AccountHeader headerResult=new AccountHeaderBuilder().withActivity(this).withHeaderBackground(R.drawable.cover).build();
  result=new DrawerBuilder().withActivity(this).withToolbar(toolbar).withTranslucentStatusBar(true).withActionBarDrawerToggle(true).withAccountHeader(headerResult).withSelectedItem(0).addDrawerItems(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_swap_horiz_24px),new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_settings_24px)).withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener(){
    @Override public boolean onItemClick(    AdapterView<?> parent,    View view,    int position,    long id,    IDrawerItem drawerItem){
      if (drawerItem instanceof Nameable) {
switch (((Nameable)drawerItem).getName()) {
case ""String_Node_Str"":
{
            Intent intent=new Intent(MainActivity.this,SettingsActivity.class);
            startActivity(intent);
            break;
          }
case ""String_Node_Str"":
{
          try {
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + ""String_Node_Str""));
            startActivity(intent);
          }
 catch (          Exception e) {
            Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          break;
        }
case ""String_Node_Str"":
{
        removeAds();
        break;
      }
case ""String_Node_Str"":
{
      Intent intent=new Intent(MainActivity.this,Gitty.class);
      startActivity(intent);
      break;
    }
case ""String_Node_Str"":
{
    String url=""String_Node_Str"";
    Intent i=new Intent(Intent.ACTION_VIEW);
    i.setData(Uri.parse(url));
    startActivity(i);
    break;
  }
}
}
return false;
}
}
).build();
if (!inAppPayments.isPurchased()) {
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_dnd_on_24px));
}
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_edit_black_18dp));
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_mail_24px));
result.addItem(new PrimaryDrawerItem().withName(""String_Node_Str"").withIcon(R.drawable.ic_ic_shop_24px));
adapter=new ServerListAdapter();
fab=(FloatingActionButton)findViewById(R.id.fab);
fab.setOnClickListener(new View.OnClickListener(){
public void onClick(View v){
newAddServerActivity(v);
}
}
);
list=(ExpandableHeightListView)findViewById(R.id.list);
list.setAdapter(adapter);
list.setOnItemClickListener(this);
list.setOnItemLongClickListener(this);
list.setExpanded(true);
fab.attachToListView(list);
LinearLayout reportBugLayout=(LinearLayout)findViewById(R.id.reportLayout);
reportBugLayout.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
Intent intent=new Intent(MainActivity.this,Gitty.class);
startActivity(intent);
}
}
);
if (instanceCount > 0) {
finish();
}
prefs=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
if (prefs.getBoolean(""String_Node_Str"",true)) {
startIntro();
prefs.edit().putBoolean(""String_Node_Str"",false).commit();
}
if (adapter.isServerNull()) {
reportBugLayout.setVisibility(View.GONE);
}
}",0.992672075372939
167587,"private void requestNewInterstitial(){
  if (!bp.isPurchased(""String_Node_Str"")) {
    AdRequest adRequest=new AdRequest.Builder().addTestDevice(AdRequest.DEVICE_ID_EMULATOR).addTestDevice(""String_Node_Str"").build();
    mInterstitialAd.loadAd(adRequest);
  }
}","private void requestNewInterstitial(){
  if (!inAppPayments.isPurchased()) {
    AdRequest adRequest=new AdRequest.Builder().addTestDevice(AdRequest.DEVICE_ID_EMULATOR).addTestDevice(""String_Node_Str"").build();
    mInterstitialAd.loadAd(adRequest);
  }
}",0.9418604651162792
167588,"private void showAd(){
  SharedPreferences sp=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  if (!bp.isPurchased(""String_Node_Str"")) {
    if (mInterstitialAd.isLoaded()) {
      if (sp.getInt(""String_Node_Str"",0) < 2) {
        SharedPreferences.Editor ed=sp.edit();
        ed.putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1);
        ed.commit();
        mInterstitialAd.show();
      }
    }
  }
}","private void showAd(){
  SharedPreferences sp=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  if (!inAppPayments.isPurchased()) {
    if (mInterstitialAd.isLoaded()) {
      if (sp.getInt(""String_Node_Str"",0) < 2) {
        SharedPreferences.Editor ed=sp.edit();
        ed.putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1);
        ed.commit();
        mInterstitialAd.show();
      }
    }
  }
}",0.9618138424821002
167589,"/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FacebookSdk.sdkInitialize(getApplicationContext());
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  loadPinnedItems();
  loadRecentItems();
  server.setAutoJoinChannels(pinnedRooms);
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  String key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  if (!bp.isPurchased(""String_Node_Str"")) {
    mInterstitialAd=new InterstitialAd(this);
    mInterstitialAd.setAdUnitId(""String_Node_Str"");
    requestNewInterstitial();
    mInterstitialAd.setAdListener(new AdListener(){
      @Override public void onAdClosed(){
        requestNewInterstitial();
      }
    }
);
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  isFirstTimeRefresh=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  final ImageView sendButton=(ImageView)findViewById(R.id.send_button);
  sendButton.setVisibility(View.GONE);
  input=(AutoCompleteTextView)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  input.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (input.getText().toString().equals(""String_Node_Str"")) {
        sendButton.setVisibility(View.GONE);
      }
 else {
        sendButton.setVisibility(View.VISIBLE);
      }
    }
  }
);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
      updateAutoComplete();
    }
  }
);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsLayout=(FrameLayout)findViewById(R.id.roomsLayout);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  swipeRefresh=(SwipeRefreshLayout)findViewById(R.id.swipeRefresh);
  swipeRefresh.setColorSchemeResources(R.color.refresh_progress_1,R.color.refresh_progress_2,R.color.refresh_progress_3);
  swipeRefresh.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener(){
    @Override public void onScrollChanged(){
      Rect scrollBounds=new Rect();
      swipeRefresh.getHitRect(scrollBounds);
      TextView firstItem=(TextView)findViewById(R.id.firstItem);
      if (firstItem.getLocalVisibleRect(scrollBounds)) {
        if (conversationLayout.getVisibility() != View.VISIBLE) {
          swipeRefresh.setEnabled(true);
        }
 else {
          swipeRefresh.setEnabled(false);
        }
      }
 else {
        swipeRefresh.setEnabled(false);
      }
    }
  }
);
  swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      if (swipeRefresh.getScrollY() == 0) {
        refreshActivity();
      }
    }
  }
);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
      if (Math.random() * 100 < 30) {
        showAd();
      }
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      invalidateOptionsMenu();
      swipeRefresh.setEnabled(false);
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
      showConversationLayout();
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      invalidateOptionsMenu();
      swipeRefresh.setEnabled(false);
      pager.setCurrentItem(0);
      showConversationLayout();
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() > 0) {
        invalidateOptionsMenu();
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        saveRecentItems();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
      if (Math.random() * 100 < 10) {
        showAd();
      }
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}","/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FacebookSdk.sdkInitialize(getApplicationContext());
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  loadPinnedItems();
  loadRecentItems();
  server.setAutoJoinChannels(pinnedRooms);
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  String key=""String_Node_Str"";
  inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  if (!inAppPayments.isPurchased()) {
    mInterstitialAd=new InterstitialAd(this);
    mInterstitialAd.setAdUnitId(""String_Node_Str"");
    requestNewInterstitial();
    mInterstitialAd.setAdListener(new AdListener(){
      @Override public void onAdClosed(){
        requestNewInterstitial();
      }
    }
);
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  isFirstTimeRefresh=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  final ImageView sendButton=(ImageView)findViewById(R.id.send_button);
  sendButton.setVisibility(View.GONE);
  input=(AutoCompleteTextView)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  input.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (input.getText().toString().equals(""String_Node_Str"")) {
        sendButton.setVisibility(View.GONE);
      }
 else {
        sendButton.setVisibility(View.VISIBLE);
      }
    }
  }
);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
      updateAutoComplete();
    }
  }
);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsLayout=(FrameLayout)findViewById(R.id.roomsLayout);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  swipeRefresh=(SwipeRefreshLayout)findViewById(R.id.swipeRefresh);
  swipeRefresh.setColorSchemeResources(R.color.refresh_progress_1,R.color.refresh_progress_2,R.color.refresh_progress_3);
  swipeRefresh.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener(){
    @Override public void onScrollChanged(){
      Rect scrollBounds=new Rect();
      swipeRefresh.getHitRect(scrollBounds);
      TextView firstItem=(TextView)findViewById(R.id.firstItem);
      if (firstItem.getLocalVisibleRect(scrollBounds)) {
        if (conversationLayout.getVisibility() != View.VISIBLE) {
          swipeRefresh.setEnabled(true);
        }
 else {
          swipeRefresh.setEnabled(false);
        }
      }
 else {
        swipeRefresh.setEnabled(false);
      }
    }
  }
);
  swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      if (swipeRefresh.getScrollY() == 0) {
        refreshActivity();
      }
    }
  }
);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
      if (Math.random() * 100 < 30) {
        showAd();
      }
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      invalidateOptionsMenu();
      swipeRefresh.setEnabled(false);
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
      showConversationLayout();
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      invalidateOptionsMenu();
      swipeRefresh.setEnabled(false);
      pager.setCurrentItem(0);
      showConversationLayout();
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() > 0) {
        invalidateOptionsMenu();
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        saveRecentItems();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
      if (Math.random() * 100 < 10) {
        showAd();
      }
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}",0.997946611909651
167590,"public boolean isPurchased(){
}","public boolean isPurchased(){
  return bp.isPurchased(""String_Node_Str"");
}",0.5849056603773585
167591,"/** 
 * Update server
 */
private void updateServer(){
  Database db=new Database(this);
  int serverId=this.server.getId();
  int identityId=db.getIdentityIdByServerId(serverId);
  Server server=getServerFromView();
  server.setAuthentication(authentication);
  db.updateServer(serverId,server,identityId);
  Identity identity=getIdentityFromView();
  db.updateIdentity(identityId,identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());
  db.setChannels(serverId,channels);
  db.setCommands(serverId,commands);
  db.close();
  server.setId(this.server.getId());
  server.setIdentity(identity);
  server.setAutoJoinChannels(channels);
  server.setConnectCommands(commands);
  Hermes.getInstance().updateServer(server);
}","/** 
 * Update server
 */
private void updateServer(){
  Database db=new Database(this);
  int serverId=this.server.getId();
  int identityId=db.getIdentityIdByServerId(serverId);
  Server server=getServerFromView();
  if (nickservCheckbox.isChecked()) {
    authentication.setNickservPassword(saslPasswordEditText.toString());
  }
 else   if (saslCheckbox.isChecked()) {
    authentication.setSaslUsername(saslUsernameEditText.toString());
    authentication.setSaslPassword(saslPasswordEditText.toString());
  }
  server.setAuthentication(authentication);
  db.updateServer(serverId,server,identityId);
  Identity identity=getIdentityFromView();
  db.updateIdentity(identityId,identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());
  db.setChannels(serverId,channels);
  db.setCommands(serverId,commands);
  db.close();
  server.setId(this.server.getId());
  server.setIdentity(identity);
  server.setAutoJoinChannels(channels);
  server.setConnectCommands(commands);
  Hermes.getInstance().updateServer(server);
}",0.8354570637119113
167592,"/** 
 * Add server to database
 */
private void addServer(){
  Database db=new Database(this);
  Identity identity=getIdentityFromView();
  long identityId=db.addIdentity(identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());
  Server server=getServerFromView();
  server.setAuthentication(authentication);
  long serverId=db.addServer(server,(int)identityId);
  db.setChannels((int)serverId,channels);
  db.setCommands((int)serverId,commands);
  db.close();
  server.setId((int)serverId);
  server.setIdentity(identity);
  server.setAutoJoinChannels(channels);
  server.setConnectCommands(commands);
  Hermes.getInstance().addServer(server);
}","/** 
 * Add server to database
 */
private void addServer(){
  Database db=new Database(this);
  Identity identity=getIdentityFromView();
  long identityId=db.addIdentity(identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());
  Server server=getServerFromView();
  if (nickservCheckbox.isChecked()) {
    authentication.setNickservPassword(saslPasswordEditText.toString());
  }
 else   if (saslCheckbox.isChecked()) {
    authentication.setSaslUsername(saslUsernameEditText.toString());
    authentication.setSaslPassword(saslPasswordEditText.toString());
  }
  server.setAuthentication(authentication);
  long serverId=db.addServer(server,(int)identityId);
  db.setChannels((int)serverId,channels);
  db.setCommands((int)serverId,commands);
  db.close();
  server.setId((int)serverId);
  server.setIdentity(identity);
  server.setAutoJoinChannels(channels);
  server.setConnectCommands(commands);
  Hermes.getInstance().addServer(server);
}",0.8205438066465257
167593,"/** 
 * Populate an identity object from the data in the view
 * @return The identity object
 */
private Identity getIdentityFromView(){
  String nickname=((EditText)findViewById(R.id.nickname)).getText().toString();
  String ident=((EditText)findViewById(R.id.ident)).getText().toString().trim();
  String realname=((EditText)findViewById(R.id.realname)).getText().toString().trim();
  String[] floatStrings=nickname.split(""String_Node_Str"");
  String[] nick=new String[floatStrings.length];
  for (int i=0; i < nick.length; i++) {
    nick[i]=String.valueOf(floatStrings[i]);
  }
  Identity identity=new Identity();
  identity.setNickname(nick[0]);
  identity.setIdent(ident);
  identity.setRealName(realname);
  List<String> aliasesList=Arrays.asList(nick);
  identity.setAliases(aliasesList);
  return identity;
}","/** 
 * Populate an identity object from the data in the view
 * @return The identity object
 */
private Identity getIdentityFromView(){
  String nickname=((EditText)findViewById(R.id.nickname)).getText().toString();
  String ident=((EditText)findViewById(R.id.username)).getText().toString().trim();
  String realname=((EditText)findViewById(R.id.realname)).getText().toString().trim();
  String[] floatStrings=nickname.split(""String_Node_Str"");
  String[] nick=new String[floatStrings.length];
  for (int i=0; i < nick.length; i++) {
    nick[i]=String.valueOf(floatStrings[i]);
  }
  Identity identity=new Identity();
  identity.setNickname(nick[0]);
  identity.setIdent(ident);
  identity.setRealName(realname);
  List<String> aliasesList=Arrays.asList(nick);
  identity.setAliases(aliasesList);
  return identity;
}",0.9920586438607208
167594,"/** 
 * Populate an identity object from the data in the view
 * @return The identity object
 */
private Identity getIdentityFromView(){
  String nickname=((EditText)findViewById(R.id.nickname)).getText().toString();
  String ident=((EditText)findViewById(R.id.username)).getText().toString().trim();
  String realname=((EditText)findViewById(R.id.realname)).getText().toString().trim();
  String[] floatStrings=nickname.split(""String_Node_Str"");
  String[] nick=new String[floatStrings.length];
  for (int i=0; i < nick.length; i++) {
    nick[i]=String.valueOf(floatStrings[i]);
  }
  Identity identity=new Identity();
  identity.setNickname(nick[0]);
  identity.setIdent(ident);
  identity.setRealName(realname);
  List<String> aliasesList=Arrays.asList(nick);
  identity.setAliases(aliasesList);
  return identity;
}","/** 
 * Populate an identity object from the data in the view
 * @return The identity object
 */
private Identity getIdentityFromView(){
  String nickname=((EditText)findViewById(R.id.nickname)).getText().toString();
  String ident=((EditText)findViewById(R.id.ident)).getText().toString().trim();
  String realname=((EditText)findViewById(R.id.realname)).getText().toString().trim();
  String[] floatStrings=nickname.split(""String_Node_Str"");
  String[] nick=new String[floatStrings.length];
  for (int i=0; i < nick.length; i++) {
    nick[i]=String.valueOf(floatStrings[i]);
  }
  Identity identity=new Identity();
  identity.setNickname(nick[0]);
  identity.setIdent(ident);
  identity.setRealName(realname);
  List<String> aliasesList=Arrays.asList(nick);
  identity.setAliases(aliasesList);
  return identity;
}",0.9920586438607208
167595,"/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  if (server.autoConnectStarred()) {
    server.setAutoJoinChannels(pinnedRooms);
  }
  loadPinnedItems();
  loadRecentItems();
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  LinearLayout ads=(LinearLayout)findViewById(R.id.ads_card_conversation);
  if (bp.isPurchased(""String_Node_Str"")) {
    ads.setVisibility(LinearLayout.GONE);
  }
 else {
    AdView mAdView=(AdView)findViewById(R.id.adView);
    AdRequest adRequest=new AdRequest.Builder().build();
    mAdView.loadAd(adRequest);
    ads.setVisibility(LinearLayout.VISIBLE);
  }
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  RoomsList=new ArrayList<String>();
  ArrayList<Integer> MentionsList=new ArrayList<Integer>();
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      showConversationLayout();
      invalidateOptionsMenu();
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showConversationLayout();
      invalidateOptionsMenu();
      pager.setCurrentItem(0);
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() != 0) {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
        toast.show();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}","/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  loadPinnedItems();
  loadRecentItems();
  server.setAutoJoinChannels(pinnedRooms);
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  LinearLayout ads=(LinearLayout)findViewById(R.id.ads_card_conversation);
  if (bp.isPurchased(""String_Node_Str"")) {
    ads.setVisibility(LinearLayout.GONE);
  }
 else {
    AdView mAdView=(AdView)findViewById(R.id.adView);
    AdRequest adRequest=new AdRequest.Builder().build();
    mAdView.loadAd(adRequest);
    ads.setVisibility(LinearLayout.VISIBLE);
  }
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  RoomsList=new ArrayList<String>();
  ArrayList<Integer> MentionsList=new ArrayList<Integer>();
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      showConversationLayout();
      invalidateOptionsMenu();
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showConversationLayout();
      invalidateOptionsMenu();
      pager.setCurrentItem(0);
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() != 0) {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
        toast.show();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}",0.992900432900433
167596,"/** 
 * On server status update
 */
@Override public void onStatusUpdate(){
  EditText input=(EditText)findViewById(R.id.input);
  if (server.isConnected()) {
    input.setEnabled(true);
  }
 else {
    input.setEnabled(false);
    if (server.getStatus() == Status.CONNECTING) {
      return;
    }
    if (binder == null || binder.getService() == null || binder.getService().getSettings() == null) {
      return;
    }
    if (!binder.getService().getSettings().isReconnectEnabled() && !reconnectDialogActive) {
      reconnectDialogActive=true;
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(getResources().getString(R.string.reconnect_after_disconnect,server.getTitle())).setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          if (!server.isDisconnected()) {
            reconnectDialogActive=false;
            return;
          }
          server.setStatus(Status.CONNECTING);
          binder.connect(server);
          reconnectDialogActive=false;
        }
      }
).setNegativeButton(getString(R.string.negative_button),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          server.setMayReconnect(false);
          reconnectDialogActive=false;
          dialog.cancel();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
}","/** 
 * On server status update
 */
@Override public void onStatusUpdate(){
  EditText input=(EditText)findViewById(R.id.input);
  if (server.isConnected()) {
    input.setEnabled(true);
  }
 else {
    input.setEnabled(false);
    if (server.getStatus() == Status.CONNECTING) {
      return;
    }
    if (binder == null || binder.getService() == null || binder.getService().getSettings() == null) {
      return;
    }
    if (!binder.getService().getSettings().isReconnectEnabled() && !reconnectDialogActive && server.mayReconnect() == true) {
      reconnectDialogActive=true;
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(getResources().getString(R.string.reconnect_after_disconnect,server.getTitle())).setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          if (!server.isDisconnected()) {
            reconnectDialogActive=false;
            return;
          }
          server.setStatus(Status.CONNECTING);
          binder.connect(server);
          reconnectDialogActive=false;
        }
      }
).setNegativeButton(getString(R.string.negative_button),new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          server.setMayReconnect(false);
          reconnectDialogActive=false;
          dialog.cancel();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
}",0.9893719806763284
167597,"/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  loadPinnedItems();
  loadRecentItems();
  server.setAutoJoinChannels(pinnedRooms);
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  LinearLayout ads=(LinearLayout)findViewById(R.id.ads_card_conversation);
  if (bp.isPurchased(""String_Node_Str"")) {
    ads.setVisibility(LinearLayout.GONE);
  }
 else {
    AdView mAdView=(AdView)findViewById(R.id.adView);
    AdRequest adRequest=new AdRequest.Builder().build();
    mAdView.loadAd(adRequest);
    ads.setVisibility(LinearLayout.VISIBLE);
  }
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  RoomsList=new ArrayList<String>();
  ArrayList<Integer> MentionsList=new ArrayList<Integer>();
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      showConversationLayout();
      invalidateOptionsMenu();
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showConversationLayout();
      invalidateOptionsMenu();
      pager.setCurrentItem(0);
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() != 0) {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
        toast.show();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}","/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  key=""String_Node_Str"";
  iap inAppPayments=new iap();
  bp=inAppPayments.getBilling(this,key);
  bp.loadOwnedPurchasesFromGoogle();
  tinydb=new TinyDB(getApplicationContext());
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  loadPinnedItems();
  loadRecentItems();
  server.setAutoJoinChannels(pinnedRooms);
  HashSet hs=new HashSet();
  hs.addAll(recentList);
  recentList.clear();
  recentList.addAll(hs);
  saveRecentItems();
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  try {
    setTitle(server.getTitle());
  }
 catch (  Exception e) {
  }
  isFirstTimeStarred=tinydb.getBoolean(""String_Node_Str"",true);
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  LinearLayout ads=(LinearLayout)findViewById(R.id.ads_card_conversation);
  if (bp.isPurchased(""String_Node_Str"")) {
    ads.setVisibility(LinearLayout.GONE);
  }
 else {
    AdView mAdView=(AdView)findViewById(R.id.adView);
    AdRequest adRequest=new AdRequest.Builder().build();
    mAdView.loadAd(adRequest);
    ads.setVisibility(LinearLayout.VISIBLE);
  }
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.Underline);
  indicator.setFooterIndicatorHeight(2 * density);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  conversationLayout=(FrameLayout)findViewById(R.id.conversationFragment);
  conversationLayout.setVisibility(LinearLayout.INVISIBLE);
  roomsList=(ExpandableHeightListView)findViewById(R.id.roomsActivityList);
  roomsList.setExpanded(true);
  SwipeDismissListViewTouchListener touchListener=new SwipeDismissListViewTouchListener(roomsList,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        roomAdapter.remove(position);
      }
      roomAdapter.notifyDataSetChanged();
    }
  }
);
  roomsList.setOnTouchListener(touchListener);
  roomsList.setOnScrollListener(touchListener.makeScrollListener());
  RoomsList=new ArrayList<String>();
  ArrayList<Integer> MentionsList=new ArrayList<Integer>();
  ArrayList<String> channels=new ArrayList<String>();
  ArrayList<String> query=new ArrayList<String>();
  channels=server.getCurrentChannelNames();
  query=server.getCurrentQueryNames();
  for (int i=0; i < channels.size(); i++) {
    try {
      Conversation conversation=server.getConversation(channels.get(i));
      int Mentions=conversation.getNewMentions();
      RoomsList.add(channels.get(i));
      MentionsList.add(Mentions);
    }
 catch (    Exception E) {
    }
  }
  fab=(FloatingActionButton)findViewById(R.id.room_fab);
  fab.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        joinRoom(v);
      }
      return true;
    }
  }
);
  roomAdapter=new mentionsAdapter(RoomsList,MentionsList);
  roomsList.setAdapter(roomAdapter);
  roomsList.setEmptyView(findViewById(R.id.roomsActivityList_empty));
  roomsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      showConversationLayout();
      invalidateOptionsMenu();
      int pagerPosition;
      String name;
      TextView roomName=(TextView)view.findViewById(R.id.room_name);
      name=roomName.getText().toString();
      pagerPosition=pagerAdapter.getPositionByName(name);
      pager.setCurrentItem(pagerPosition,true);
    }
  }
);
  CardView otherCard=(CardView)findViewById(R.id.card_view_other);
  otherCard.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showConversationLayout();
      invalidateOptionsMenu();
      pager.setCurrentItem(0);
    }
  }
);
  int counter;
  for (counter=0; counter < recentList.size(); counter++) {
    if (RoomsList.contains(recentList.get(counter))) {
      recentList.remove(counter);
      saveRecentItems();
    }
  }
  LinearLayout recentLabel=(LinearLayout)findViewById(R.id.recentName);
  if (recentList.size() != 0) {
    recentLabel.setVisibility(View.VISIBLE);
  }
 else {
    recentLabel.setVisibility(View.GONE);
  }
  recentView=(ExpandableHeightListView)findViewById(R.id.recentList);
  loadLastItems();
  int k;
  for (k=0; k < lastRooms.size(); k++) {
    String lastRoom=lastRooms.get(k);
    if (RoomsList.contains(lastRoom)) {
    }
 else {
      recentList.add(lastRoom);
    }
  }
  lastRooms.clear();
  saveLastItems();
  saveRecentItems();
  recentAdapter=new recentAdapter(recentList);
  recentView.setAdapter(recentAdapter);
  recentView.setExpanded(true);
  recentView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapter,    View v,    int position,    long arg3){
      final String room=(String)recentAdapter.getRoomAtPosition(position);
      if (RoomsList.size() != 0) {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        recentList.remove(position);
        saveRecentItems();
        refreshActivity();
      }
 else {
        new Thread(){
          @Override public void run(){
            try {
              binder.getService().getConnection(serverId).joinChannel(room);
            }
 catch (            Exception E) {
            }
          }
        }
.start();
        saveRecentItems();
        refreshActivity();
      }
    }
  }
);
  SwipeDismissListViewTouchListener touchListenerRecent=new SwipeDismissListViewTouchListener(recentView,new SwipeDismissListViewTouchListener.DismissCallbacks(){
    @Override public boolean canDismiss(    int position){
      return true;
    }
    @Override public void onDismiss(    ListView listView,    int[] reverseSortedPositions){
      for (      int position : reverseSortedPositions) {
        recentAdapter.remove(position);
        saveRecentItems();
      }
      recentAdapter.notifyDataSetChanged();
    }
  }
);
  recentView.setOnTouchListener(touchListenerRecent);
  recentView.setOnScrollListener(touchListenerRecent.makeScrollListener());
}",0.97901376146789
167598,"@Override public void onItemClick(AdapterView<?> adapter,View v,int position,long arg3){
  final String room=(String)recentAdapter.getRoomAtPosition(position);
  if (RoomsList.size() != 0) {
    new Thread(){
      @Override public void run(){
        try {
          binder.getService().getConnection(serverId).joinChannel(room);
        }
 catch (        Exception E) {
        }
      }
    }
.start();
    recentList.remove(position);
    saveRecentItems();
    refreshActivity();
  }
 else {
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
    toast.show();
    refreshActivity();
  }
}","@Override public void onItemClick(AdapterView<?> adapter,View v,int position,long arg3){
  final String room=(String)recentAdapter.getRoomAtPosition(position);
  if (RoomsList.size() != 0) {
    new Thread(){
      @Override public void run(){
        try {
          binder.getService().getConnection(serverId).joinChannel(room);
        }
 catch (        Exception E) {
        }
      }
    }
.start();
    recentList.remove(position);
    saveRecentItems();
    refreshActivity();
  }
 else {
    new Thread(){
      @Override public void run(){
        try {
          binder.getService().getConnection(serverId).joinChannel(room);
        }
 catch (        Exception E) {
        }
      }
    }
.start();
    saveRecentItems();
    refreshActivity();
  }
}",0.7671428571428571
167599,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  FragmentActivity faActivity=(FragmentActivity)super.getActivity();
  LinearLayout llLayout=(LinearLayout)inflater.inflate(R.layout.conversations,container,false);
  serverId=super.getActivity().getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  Settings settings=new Settings(super.getActivity());
  if (server == null) {
    super.getActivity().finish();
  }
  super.getActivity().setTitle(server.getTitle());
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  EditText input=(EditText)llLayout.findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)llLayout.findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(getActivity(),server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)llLayout.findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.None);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  scrollback=new Scrollback();
  llLayout.findViewById(R.id.conversationFragment);
  return llLayout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  setHasOptionsMenu(true);
  FragmentActivity faActivity=(FragmentActivity)super.getActivity();
  LinearLayout llLayout=(LinearLayout)inflater.inflate(R.layout.conversations,container,false);
  serverId=super.getActivity().getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  Settings settings=new Settings(super.getActivity());
  if (server == null) {
    super.getActivity().finish();
  }
  super.getActivity().setTitle(server.getTitle());
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  EditText input=(EditText)llLayout.findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)llLayout.findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(getActivity(),server);
  pager.setAdapter(pagerAdapter);
  final float density=getResources().getDisplayMetrics().density;
  indicator=(ConversationIndicator)llLayout.findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.None);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  scrollback=new Scrollback();
  llLayout.findViewById(R.id.conversationFragment);
  getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  return llLayout;
}",0.9806451612903224
167600,"/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  setTitle(server.getTitle());
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.None);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}","/** 
 * On create
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  serverId=getIntent().getExtras().getInt(""String_Node_Str"");
  server=Hermes.getInstance().getServerById(serverId);
  Settings settings=new Settings(this);
  if (server == null) {
    this.finish();
  }
  setTitle(server.getTitle());
  setContentView(R.layout.conversations);
  boolean isLandscape=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);
  EditText input=(EditText)findViewById(R.id.input);
  input.setOnKeyListener(inputKeyListener);
  pager=(ViewPager)findViewById(R.id.pager);
  pagerAdapter=new ConversationPagerAdapter(this,server);
  pager.setAdapter(pagerAdapter);
  indicator=(ConversationIndicator)findViewById(R.id.titleIndicator);
  indicator.setServer(server);
  indicator.setViewPager(pager);
  indicator.setFooterColor(Color.parseColor(""String_Node_Str""));
  indicator.setFooterLineHeight(1);
  indicator.setPadding(10,10,10,10);
  indicator.setFooterIndicatorStyle(IndicatorStyle.None);
  indicator.setSelectedColor(0xFF222222);
  indicator.setSelectedBold(false);
  indicator.setBackgroundColor(Color.parseColor(""String_Node_Str""));
  historySize=settings.getHistorySize();
  if (server.getStatus() == Status.PRE_CONNECTING) {
    server.clearConversations();
    pagerAdapter.clearConversations();
    server.getConversation(ServerInfo.DEFAULT_NAME).setHistorySize(historySize);
  }
  float fontSize=settings.getFontSize();
  indicator.setTextSize(TypedValue.COMPLEX_UNIT_SP,35);
  input.setTypeface(Typeface.SANS_SERIF);
  Collection<Conversation> mConversations=server.getConversations();
  for (  Conversation conversation : mConversations) {
    if (conversation.getStatus() == Conversation.STATUS_SELECTED) {
      onNewConversation(conversation.getName());
    }
 else {
      createNewConversation(conversation.getName());
    }
  }
  input.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      openSoftKeyboard(v);
    }
  }
);
  int setInputTypeFlags=0;
  setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
  if (settings.autoCapSentences()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
  }
  if (isLandscape && settings.imeExtract()) {
    setInputTypeFlags|=InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  }
  if (!settings.imeExtract()) {
    input.setImeOptions(input.getImeOptions() | EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  }
  input.setInputType(input.getInputType() | setInputTypeFlags);
  scrollback=new Scrollback();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}",0.9724912824486632
167601,"/** 
 * Open the soft keyboard (helper function)
 */
private void openSoftKeyboard(View view){
  ((InputMethodManager)getSystemService(INPUT_METHOD_SERVICE)).showSoftInput(view,InputMethodManager.SHOW_IMPLICIT);
}","/** 
 * Open the soft keyboard (helper function)
 */
private void openSoftKeyboard(View view){
  ((InputMethodManager)getSystemService(INPUT_METHOD_SERVICE)).showSoftInput(view,InputMethodManager.SHOW_IMPLICIT);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
}",0.8336594911937377
167602,"/** 
 * Render message as spannable string
 * @return
 */
public SpannableString render(Context context){
  Settings settings=new Settings(context);
  if (canvas == null) {
    String prefix=hasIcon() && settings.showIcons() ? ""String_Node_Str"" : ""String_Node_Str"";
    String nick=hasSender() ? sender + ""String_Node_Str"" : ""String_Node_Str"";
    String timestamp=settings.showTimestamp() ? renderTimeStamp(settings.use24hFormat(),settings.includeSeconds()) : ""String_Node_Str"";
    canvas=new SpannableString(prefix + timestamp + nick);
    SpannableString renderedText;
    if (settings.showMircColors()) {
      renderedText=MircColors.toSpannable(text);
    }
 else {
      renderedText=new SpannableString(MircColors.removeStyleAndColors(text));
    }
    if (settings.showGraphicalSmilies()) {
      renderedText=Smilies.toSpannable(renderedText,context);
    }
    canvas=new SpannableString(TextUtils.concat(canvas,renderedText));
    if (hasSender()) {
      int start=(prefix + timestamp).length() + 1;
      int end=start + sender.length();
      if (settings.showColorsNick()) {
        canvas.setSpan(new ForegroundColorSpan(getSenderColor()),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    if (hasIcon() && settings.showIcons()) {
      Drawable drawable=context.getResources().getDrawable(icon);
      drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());
      canvas.setSpan(new ImageSpan(drawable,ImageSpan.ALIGN_BOTTOM),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
    if (hasColor() && settings.showColors()) {
      ForegroundColorSpan[] spans=canvas.getSpans(0,canvas.length(),ForegroundColorSpan.class);
      int start=0;
      for (int i=0; i < spans.length; i++) {
        canvas.setSpan(new ForegroundColorSpan(color),start,canvas.getSpanStart(spans[i]),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        start=canvas.getSpanEnd(spans[i]);
      }
      canvas.setSpan(new ForegroundColorSpan(color),start,canvas.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
  return canvas;
}","/** 
 * Render message as spannable string
 * @return
 */
public SpannableString render(Context context){
  Settings settings=new Settings(context);
  if (canvas == null) {
    String prefix=hasIcon() && settings.showIcons() ? ""String_Node_Str"" : ""String_Node_Str"";
    String nick=hasSender() ? ""String_Node_Str"" + sender + ""String_Node_Str"" : ""String_Node_Str"";
    String timestamp=settings.showTimestamp() ? renderTimeStamp(settings.use24hFormat(),settings.includeSeconds()) : ""String_Node_Str"";
    canvas=new SpannableString(prefix + timestamp + nick);
    SpannableString renderedText;
    if (settings.showMircColors()) {
      renderedText=MircColors.toSpannable(text);
    }
 else {
      renderedText=new SpannableString(MircColors.removeStyleAndColors(text));
    }
    if (settings.showGraphicalSmilies()) {
      renderedText=Smilies.toSpannable(renderedText,context);
    }
    canvas=new SpannableString(TextUtils.concat(canvas,renderedText));
    if (hasSender()) {
      int start=(prefix + timestamp).length() + 1;
      int end=start + sender.length();
      if (settings.showColorsNick()) {
        canvas.setSpan(new ForegroundColorSpan(getSenderColor()),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    if (hasIcon() && settings.showIcons()) {
      Drawable drawable=context.getResources().getDrawable(icon);
      drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());
      canvas.setSpan(new ImageSpan(drawable,ImageSpan.ALIGN_BOTTOM),0,1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
    if (hasColor() && settings.showColors()) {
      ForegroundColorSpan[] spans=canvas.getSpans(0,canvas.length(),ForegroundColorSpan.class);
      int start=0;
      for (int i=0; i < spans.length; i++) {
        canvas.setSpan(new ForegroundColorSpan(color),start,canvas.getSpanStart(spans[i]),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        start=canvas.getSpanEnd(spans[i]);
      }
      canvas.setSpan(new ForegroundColorSpan(color),start,canvas.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
  return canvas;
}",0.995164410058027
167603,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  FrameLayout llLayout=(FrameLayout)inflater.inflate(R.layout.server_sliding_fragment,container,false);
  llLayout.findViewById(R.id.home_mainFragment);
  serverSliding=(SlidingUpPanelLayout)llLayout.findViewById(R.id.sliding_layout);
  serverSliding.setEnableDragViewTouchEvents(true);
  list=(ListView)llLayout.findViewById(android.R.id.list);
  list.setAdapter(adapter);
  return llLayout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  FrameLayout llLayout=(FrameLayout)inflater.inflate(R.layout.server_sliding_fragment,container,false);
  llLayout.findViewById(R.id.home_mainFragment);
  serverSliding=(SlidingUpPanelLayout)llLayout.findViewById(R.id.sliding_layout);
  serverSliding.setEnableDragViewTouchEvents(true);
  adapter=new ServerListAdapter();
  list=(ListView)llLayout.findViewById(android.R.id.list);
  list.setAdapter(adapter);
  list.setOnItemClickListener(this);
  list.setOnItemLongClickListener(this);
  return llLayout;
}",0.8914798206278027
167604,"@Override public void init(Bundle savedInstanceState){
  allowArrowAnimation();
  MaterialSection home=newSection(""String_Node_Str"",new ServersActivity());
  MaterialSection addserver=newSection(""String_Node_Str"",new Intent(this,AddServerActivity.class));
  MaterialSection settings=newSection(""String_Node_Str"",R.drawable.ic_ic_settings_24px,new Intent(this,SettingsActivity.class));
  MaterialSection help=newSection(""String_Node_Str"",R.drawable.ic_ic_help_24px,new Intent(this,SettingsActivity.class));
  MaterialSection about=newSection(""String_Node_Str"",R.drawable.ic_ic_info_24px,new Intent(this,SettingsActivity.class));
  addSection(home);
  addSection(addserver);
  addBottomSection(settings);
  addBottomSection(help);
  addBottomSection(about);
  setDrawerHeaderImage(R.drawable.cover);
  this.addSection(newSection(""String_Node_Str"",new MaterialSectionListener(){
    @Override public void onClick(    MaterialSection section){
      FragmentManager fm=getSupportFragmentManager();
      HomeFragment fragment=(HomeFragment)fm.findFragmentByTag(""String_Node_Str"");
      fragment.openServerPane();
    }
  }
));
  if (instanceCount > 0) {
    finish();
  }
  instanceCount++;
}","@Override public void init(Bundle savedInstanceState){
  allowArrowAnimation();
  final MaterialSection home=newSection(""String_Node_Str"",new HomeFragment());
  MaterialSection addserver=newSection(""String_Node_Str"",new Intent(this,AddServerActivity.class));
  MaterialSection settings=newSection(""String_Node_Str"",R.drawable.ic_ic_settings_24px,new Intent(this,SettingsActivity.class));
  MaterialSection help=newSection(""String_Node_Str"",R.drawable.ic_ic_help_24px,new Intent(this,SettingsActivity.class));
  MaterialSection about=newSection(""String_Node_Str"",R.drawable.ic_ic_info_24px,new Intent(this,SettingsActivity.class));
  final FragmentManager fm=getSupportFragmentManager();
  final HomeFragment fragment=(HomeFragment)home.getTargetFragment();
  addSection(home);
  addSection(addserver);
  addBottomSection(settings);
  addBottomSection(help);
  addBottomSection(about);
  setDrawerHeaderImage(R.drawable.cover);
  home.setSectionColor(Color.rgb(255,152,0),Color.rgb(251,140,0));
  this.addSection(newSection(""String_Node_Str"",new MaterialSectionListener(){
    @Override public void onClick(    MaterialSection section){
      fragment.openServerPane();
    }
  }
));
  if (instanceCount > 0) {
    finish();
  }
  instanceCount++;
}",0.8420188756668034
167605,"@Override public void onClick(MaterialSection section){
  FragmentManager fm=getSupportFragmentManager();
  HomeFragment fragment=(HomeFragment)fm.findFragmentByTag(""String_Node_Str"");
  fragment.openServerPane();
}","@Override public void onClick(MaterialSection section){
  fragment.openServerPane();
}",0.5714285714285714
167606,"@Override public void handle(MessageContext context,IHandlerChain chain){
  QueueingConsumer currentConsumer=(QueueingConsumer)context.getOtherParams().get(""String_Node_Str"");
  try {
    while (true) {
      try {
        QueueingConsumer.Delivery delivery=currentConsumer.nextDelivery();
        final Message msg=MessageFactory.createMessage(delivery);
        if (msg == null)         continue;
        if (msg.getMessageType().equals(MessageType.QueueMessage)) {
          this.doUncompress(context,msg);
        }
        context.setConsumeMsgs(new ArrayList<Message>(1){
{
            this.add(msg);
          }
        }
);
        if (msg.getMessageType().equals(MessageType.BroadcastMessage) && context.getNoticeListener() != null) {
          IMessageReceiveListener noticeListener=context.getNoticeListener();
          noticeListener.onMessage(msg);
        }
 else {
          process(context);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"");
      }
catch (      Exception e) {
        ExceptionHelper.logException(logger,e,""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
  }
 finally {
synchronized (context.getChannel()) {
      try {
        if (context.getChannel().isOpen()) {
          context.getChannel().basicCancel(context.getConsumerTag());
        }
      }
 catch (      IOException e1) {
        ExceptionHelper.logException(logger,e1,""String_Node_Str"");
      }
    }
    chain.handle(context);
  }
}","@Override public void handle(MessageContext context,IHandlerChain chain){
  QueueingConsumer currentConsumer=(QueueingConsumer)context.getOtherParams().get(""String_Node_Str"");
  int retryCount=0, retryTotalCount=10;
  boolean stop=false;
  try {
    while (!stop) {
      try {
        QueueingConsumer.Delivery delivery=currentConsumer.nextDelivery();
        final Message msg=MessageFactory.createMessage(delivery);
        if (msg == null)         continue;
        if (msg.getMessageType().equals(MessageType.QueueMessage)) {
          this.doUncompress(context,msg);
        }
        context.setConsumeMsgs(new ArrayList<Message>(1){
{
            this.add(msg);
          }
        }
);
        if (msg.getMessageType().equals(MessageType.BroadcastMessage) && context.getNoticeListener() != null) {
          IMessageReceiveListener noticeListener=context.getNoticeListener();
          noticeListener.onMessage(msg);
        }
 else {
          process(context);
        }
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"");
      }
catch (      ShutdownSignalException e) {
        retryCount++;
        if (retryCount >= retryTotalCount)         stop=true;
      }
catch (      Exception e) {
        ExceptionHelper.logException(logger,e,""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
  }
 finally {
synchronized (context.getChannel()) {
      try {
        if (context.getChannel().isOpen()) {
          context.getChannel().basicCancel(context.getConsumerTag());
        }
      }
 catch (      IOException e1) {
        ExceptionHelper.logException(logger,e1,""String_Node_Str"");
      }
    }
    chain.handle(context);
  }
}",0.9380851706433102
167607,"private Object innerRpcRequest(String method,Object[] params){
  ConnectionFactory connectionFactory=new ConnectionFactory();
  connectionFactory.setHost(this.host);
  try {
    Connection connection=connectionFactory.newConnection();
    Channel channel=connection.createChannel();
    JsonRpcClient client=new JsonRpcClient(channel,Constants.PROXY_EXCHANGE_NAME,Constants.DEFAULT_CONFIG_RPC_RESPONSE_ROUTING_KEY,10000);
    return client.call(method,params);
  }
 catch (  IOException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  TimeoutException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  JsonRpcException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
}","private Object innerRpcRequest(String method,Object[] params){
  ConnectionFactory connectionFactory=new ConnectionFactory();
  connectionFactory.setHost(this.host);
  Connection connection=null;
  Channel channel=null;
  JsonRpcClient client=null;
  try {
    connection=connectionFactory.newConnection();
    channel=connection.createChannel();
    client=new JsonRpcClient(channel,Constants.PROXY_EXCHANGE_NAME,Constants.DEFAULT_CONFIG_RPC_RESPONSE_ROUTING_KEY,30000);
    return client.call(method,params);
  }
 catch (  IOException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  TimeoutException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  JsonRpcException e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    logger.error(e);
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (client != null) {
        client.close();
      }
      if (channel != null && channel.isOpen()) {
        channel.close();
      }
      if (connection != null && connection.isOpen()) {
        connection.close();
      }
    }
 catch (    IOException e) {
      logger.error(e);
    }
catch (    TimeoutException e) {
      logger.error(e);
    }
  }
}",0.7268339768339769
167608,"public static void writeFile(String fileName,long[] xArr,long[] yArr){
  String filePath=String.format(TestConfigConstant.OUTPUT_FILE_PATH_FORMAT,fileName);
  PrintWriter out=null;
  try {
    logger.info(filePath);
    File dataFile=new File(filePath);
    if (!dataFile.exists()) {
      dataFile.createNewFile();
    }
    out=new PrintWriter(new FileWriter(filePath));
    out.println(""String_Node_Str"");
    for (int i=0; i < xArr.length; i++) {
      out.println(xArr[i] + ""String_Node_Str"" + yArr[i]);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (null != out) {
      out.close();
    }
  }
}","public static void writeFile(String fileName,long[] xArr,long[] yArr){
  String filePath=String.format(TestConfigConstant.OUTPUT_FILE_PATH_FORMAT,fileName);
  File dataFile=new File(filePath);
  try {
    if (!dataFile.exists() && (!dataFile.createNewFile())) {
      throw new RuntimeException(""String_Node_Str"" + filePath + ""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    throw new RuntimeException(e);
  }
  try (FileWriter fileWriter=new FileWriter(filePath);PrintWriter out=new PrintWriter(fileWriter)){
    out.println(""String_Node_Str"");
    for (int i=0; i < xArr.length; i++) {
      out.println(xArr[i] + ""String_Node_Str"" + yArr[i]);
    }
  }
 catch (  IOException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.4806408544726301
167609,"public static void exec(String[] cmds,boolean hasOutput){
  if (cmds == null || cmds.length == 0) {
    return;
  }
  try {
    Process process=Runtime.getRuntime().exec(cmds);
    if (hasOutput) {
      InputStreamReader ir=new InputStreamReader(process.getInputStream());
      LineNumberReader input=new LineNumberReader(ir);
      String line;
      while ((line=input.readLine()) != null)       System.out.println(line);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void exec(String[] cmds,boolean hasOutput){
  if (cmds == null || cmds.length == 0) {
    return;
  }
  if (hasOutput) {
    Process process=null;
    try {
      process=Runtime.getRuntime().exec(cmds);
    }
 catch (    IOException e) {
      ExceptionHelper.logException(logger,e,""String_Node_Str"");
      throw new RuntimeException(e.toString());
    }
    try (InputStreamReader ir=new InputStreamReader(process.getInputStream());LineNumberReader input=new LineNumberReader(ir)){
      String line;
      while ((line=input.readLine()) != null)       System.out.println(line);
    }
 catch (    IOException e) {
      ExceptionHelper.logException(logger,e,""String_Node_Str"");
      throw new RuntimeException(e.toString());
    }
  }
}",0.3255813953488372
167610,"@Override public void run(){
  try {
    this.init();
    msgBodyProcessor=MessageBodyTransferFactory.createMsgBodyProcessor(msg.getMessageType());
    byte[] msgBodyOfBytes=msgBodyProcessor.box(msg.getMessageBody());
    AMQP.BasicProperties header=MessageHeaderTransfer.box(msg.getMessageHeader());
    while (flag) {
      ProxyProducer.produce(CONSTS.PROXY_EXCHANGE_NAME,this.channel,this.getRoutingkey(),msgBodyOfBytes,header);
      ++counter;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      this.close();
    }
 catch (    IOException e) {
    }
  }
}","@Override public void run(){
  try {
    this.init();
    msgBodyProcessor=MessageBodyTransferFactory.createMsgBodyProcessor(msg.getMessageType());
    byte[] msgBodyOfBytes=msgBodyProcessor.box(msg.getMessageBody());
    AMQP.BasicProperties header=MessageHeaderTransfer.box(msg.getMessageHeader());
    while (flag) {
      ProxyProducer.produce(Constants.PROXY_EXCHANGE_NAME,this.channel,this.getRoutingkey(),msgBodyOfBytes,header);
      ++counter;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      this.close();
    }
 catch (    IOException e) {
    }
  }
}",0.989247311827957
167611,"public ExchangerManager(String pubsuberHost,int pubsuberPort){
  this.pubsuber=PubSuberFactory.createPubSuber();
  this.pubsuber.setHost(pubsuberHost);
  this.pubsuber.setPort(pubsuberPort);
  this.pubsuber.open();
  boolean isAlive=this.pubsuber.isAlive();
  if (!isAlive)   return;
  scan();
  registry=new ConcurrentHashMap<>();
  this.channels.add(CONSTS.PUBSUB_AUTH_CHANNEL);
  watchPubSuber();
}","public ExchangerManager(String pubsuberHost,int pubsuberPort){
  this.pubsuber=PubSuberFactory.createPubSuber();
  this.pubsuber.setHost(pubsuberHost);
  this.pubsuber.setPort(pubsuberPort);
  this.pubsuber.open();
  boolean isAlive=this.pubsuber.isAlive();
  if (!isAlive)   return;
  scan();
  registry=new ConcurrentHashMap<>();
  this.channels.add(Constants.PUBSUB_AUTH_CHANNEL);
  watchPubSuber();
}",0.9838509316770186
167612,"/** 
 * main operation method for producing and consuming msg, in the method body, the message will flow through a handler-chain
 * @param context the message context
 */
public void carry(MessageContext context){
  if (ConfigManager.getInstance().getServerState().equals(CONSTS.MESSAGEBUS_SERVER_EVENT_STARTED)) {
    IHandlerChain handlerChain=new MessageCarryHandlerChain(carryType,this.getContext());
    handlerChain.handle(context);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * main operation method for producing and consuming msg, in the method body, the message will flow through a handler-chain
 * @param context the message context
 */
public void carry(MessageContext context){
  if (ConfigManager.getInstance().getServerState().equals(Constants.MESSAGEBUS_SERVER_EVENT_STARTED)) {
    IHandlerChain handlerChain=new MessageCarryHandlerChain(carryType,this.getContext());
    handlerChain.handle(context);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9872173058013766
167613,"/** 
 * this method used to do some init thing before carrying message it will create some expensive big object so do NOT invoke it frequently
 * @throws MessagebusConnectedFailedException
 */
public synchronized void open() throws MessagebusConnectedFailedException {
  if (this.isOpen())   return;
  this.exchangeManager=new ExchangerManager(this.getPubsuberHost(),this.getPubsuberPort());
  if (!this.exchangeManager.isZKAlive())   throw new MessagebusConnectedFailedException(""String_Node_Str"");
  this.configManager=ConfigManager.getInstance();
  this.configManager.setExchangeManager(this.exchangeManager);
  this.exchangeManager.registerWithMultiChannels(this.appId,this.configManager,new String[]{CONSTS.PUBSUB_ROUTER_CHANNEL,CONSTS.PUBSUB_CONFIG_CHANNEL,CONSTS.PUBSUB_EVENT_CHANNEL,CONSTS.PUBSUB_AUTH_CHANNEL,CONSTS.PUBSUB_AUTH_SEND_PERMISSION_CHANNEL,CONSTS.PUBSUB_AUTH_RECEIVE_PERMISSION_CHANNEL});
  try {
    this.configManager.parseRealTimeData();
  }
 catch (  IOException e) {
    throw new MessagebusConnectedFailedException(e);
  }
  this.initConnection();
  boolean isAuthorized=this.doAuth();
  if (!isAuthorized)   throw new PermissionException(""String_Node_Str"" + this.appId + ""String_Node_Str"");
  this.useChannelPool=Boolean.valueOf(configManager.getClientConfigMap().get(""String_Node_Str"").getValue());
  if (this.useChannelPool) {
    this.initChannelPool();
  }
  GenericContext context=new GenericContext();
  context.setAppId(appId);
  context.setPool(this.pool);
  context.setConfigManager(this.configManager);
  context.setConnection(this.connection);
  ServiceLoader<IProducer> producerLoader=ServiceLoader.load(IProducer.class);
  producer=producerLoader.iterator().next();
  producer.setContext(context);
  ServiceLoader<IConsumer> consumerLoader=ServiceLoader.load(IConsumer.class);
  consumer=consumerLoader.iterator().next();
  consumer.setContext(context);
  ServiceLoader<IRequester> requestLoader=ServiceLoader.load(IRequester.class);
  requester=requestLoader.iterator().next();
  requester.setContext(context);
  ServiceLoader<IResponser> responseLoader=ServiceLoader.load(IResponser.class);
  responser=responseLoader.iterator().next();
  responser.setContext(context);
  ServiceLoader<IPublisher> publisherLoader=ServiceLoader.load(IPublisher.class);
  publisher=publisherLoader.iterator().next();
  publisher.setContext(context);
  ServiceLoader<ISubscriber> subscriberLoader=ServiceLoader.load(ISubscriber.class);
  subscriber=subscriberLoader.iterator().next();
  subscriber.setContext(context);
  ServiceLoader<IBroadcaster> broadcasterLoader=ServiceLoader.load(IBroadcaster.class);
  broadcaster=broadcasterLoader.iterator().next();
  broadcaster.setContext(context);
  boolean success=this.isOpen.compareAndSet(false,true);
  if (!success) {
    logger.error(""String_Node_Str"");
  }
}","/** 
 * this method used to do some init thing before carrying message it will create some expensive big object so do NOT invoke it frequently
 * @throws MessagebusConnectedFailedException
 */
public synchronized void open() throws MessagebusConnectedFailedException {
  if (this.isOpen())   return;
  this.exchangeManager=new ExchangerManager(this.getPubsuberHost(),this.getPubsuberPort());
  if (!this.exchangeManager.isZKAlive())   throw new MessagebusConnectedFailedException(""String_Node_Str"");
  this.configManager=ConfigManager.getInstance();
  this.configManager.setExchangeManager(this.exchangeManager);
  this.exchangeManager.registerWithMultiChannels(this.appId,this.configManager,new String[]{Constants.PUBSUB_ROUTER_CHANNEL,Constants.PUBSUB_CONFIG_CHANNEL,Constants.PUBSUB_EVENT_CHANNEL,Constants.PUBSUB_AUTH_CHANNEL,Constants.PUBSUB_AUTH_SEND_PERMISSION_CHANNEL,Constants.PUBSUB_AUTH_RECEIVE_PERMISSION_CHANNEL});
  try {
    this.configManager.parseRealTimeData();
  }
 catch (  IOException e) {
    throw new MessagebusConnectedFailedException(e);
  }
  this.initConnection();
  boolean isAuthorized=this.doAuth();
  if (!isAuthorized)   throw new PermissionException(""String_Node_Str"" + this.appId + ""String_Node_Str"");
  this.useChannelPool=Boolean.valueOf(configManager.getClientConfigMap().get(""String_Node_Str"").getValue());
  if (this.useChannelPool) {
    this.initChannelPool();
  }
  GenericContext context=new GenericContext();
  context.setAppId(appId);
  context.setPool(this.pool);
  context.setConfigManager(this.configManager);
  context.setConnection(this.connection);
  ServiceLoader<IProducer> producerLoader=ServiceLoader.load(IProducer.class);
  producer=producerLoader.iterator().next();
  producer.setContext(context);
  ServiceLoader<IConsumer> consumerLoader=ServiceLoader.load(IConsumer.class);
  consumer=consumerLoader.iterator().next();
  consumer.setContext(context);
  ServiceLoader<IRequester> requestLoader=ServiceLoader.load(IRequester.class);
  requester=requestLoader.iterator().next();
  requester.setContext(context);
  ServiceLoader<IResponser> responseLoader=ServiceLoader.load(IResponser.class);
  responser=responseLoader.iterator().next();
  responser.setContext(context);
  ServiceLoader<IPublisher> publisherLoader=ServiceLoader.load(IPublisher.class);
  publisher=publisherLoader.iterator().next();
  publisher.setContext(context);
  ServiceLoader<ISubscriber> subscriberLoader=ServiceLoader.load(ISubscriber.class);
  subscriber=subscriberLoader.iterator().next();
  subscriber.setContext(context);
  ServiceLoader<IBroadcaster> broadcasterLoader=ServiceLoader.load(IBroadcaster.class);
  broadcaster=broadcasterLoader.iterator().next();
  broadcaster.setContext(context);
  boolean success=this.isOpen.compareAndSet(false,true);
  if (!success) {
    logger.error(""String_Node_Str"");
  }
}",0.9862820963770664
167614,"public int getPubsuberPort(){
  if (this.pubsuberPort == 0)   this.pubsuberPort=2181;
  return pubsuberPort;
}","public int getPubsuberPort(){
  if (this.pubsuberPort == 0) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return pubsuberPort;
}",0.749003984063745
167615,"protected void init() throws IOException {
  this.connectionFactory=new ConnectionFactory();
  this.connectionFactory.setHost(this.host);
  this.connection=this.connectionFactory.newConnection();
  this.channel=this.connection.createChannel();
}","protected void init(){
  try {
    this.connectionFactory=new ConnectionFactory();
    this.connectionFactory.setHost(this.host);
    this.connection=this.connectionFactory.newConnection();
    this.channel=this.connection.createChannel();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.toString());
  }
}",0.1533219761499148
167616,"public synchronized boolean isAlive(){
  try {
    ShellHelper.ExecResult result=ShellHelper.exec(""String_Node_Str"");
    return result.getInfo().contains(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
catch (  InterruptedException e) {
    return false;
  }
}","public static boolean isAlive(String mqHost){
  if (!comeFromSameHost(mqHost)) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    ShellHelper.ExecResult result=ShellHelper.exec(""String_Node_Str"");
    return result.getInfo().contains(""String_Node_Str"");
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
catch (  InterruptedException e) {
    return false;
  }
}",0.7854454203262233
167617,"public void stop(){
  logger.info(""String_Node_Str"");
  String mqServerStopCmdStr=""String_Node_Str"";
  try {
    ShellHelper.exec(""String_Node_Str"" + mqServerStopCmdStr);
  }
 catch (  IOException|InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}","public static void stop(String mqHost){
  if (!comeFromSameHost(mqHost)) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
  String mqServerStopCmdStr=""String_Node_Str"";
  try {
    ShellHelper.exec(""String_Node_Str"" + mqServerStopCmdStr);
  }
 catch (  IOException|InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
}",0.7401574803149606
167618,"public void start(){
  logger.info(""String_Node_Str"");
  String mqServerStartupCmdStr=""String_Node_Str"";
  try {
    ShellHelper.exec(""String_Node_Str"" + mqServerStartupCmdStr);
  }
 catch (  IOException|InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}","public static void start(String mqHost){
  if (!comeFromSameHost(mqHost)) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"");
  String mqServerStartupCmdStr=""String_Node_Str"";
  try {
    ShellHelper.exec(""String_Node_Str"" + mqServerStartupCmdStr);
  }
 catch (  IOException|InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}",0.8163841807909604
167619,"public static void stop(){
  RabbitmqServerManager serverManager=RabbitmqServerManager.defaultManager(config);
  if (serverManager.isAlive()) {
    App app=new App();
    broadcastEvent(CONSTS.MESSAGEBUS_SERVER_EVENT_STOPPED,app);
    serverManager.stop();
    destroy(null);
  }
}","public static void stop(){
  App app=new App();
  broadcastEvent(CONSTS.MESSAGEBUS_SERVER_EVENT_STOPPED,app);
  destroy(null);
}",0.6259168704156479
167620,"public static void startup(){
  logger.debug(""String_Node_Str"");
  RabbitmqInitializer rabbitmqInitializer=RabbitmqInitializer.getInstance(config);
  try {
    rabbitmqInitializer.launch();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  logger.debug(""String_Node_Str"");
  Map<String,Object> context=null;
  context=buildContext(config);
  logger.info(""String_Node_Str"");
  PubSuberInitializer pubSuberInitializer=PubSuberInitializer.getInstance(context);
  try {
    pubSuberInitializer.launch();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
  try {
    buildCommonClient(context);
  }
 catch (  MessagebusConnectedFailedException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    logger.error(""String_Node_Str"");
    System.exit(1);
  }
  boolean mqIsAlive=RabbitmqServerManager.defaultManager(config).isAlive();
  logger.debug(""String_Node_Str"" + mqIsAlive);
  if (mqIsAlive) {
    App app=new App();
    broadcastEvent(CONSTS.MESSAGEBUS_SERVER_EVENT_STARTED,app);
    logger.debug(""String_Node_Str"");
    ServiceLoader serviceLoader=ServiceLoader.getInstance(context);
    serviceLoader.launch();
synchronized (app) {
      try {
        app.wait(0);
      }
 catch (      InterruptedException e) {
        logger.info(""String_Node_Str"");
      }
 finally {
        destroy(context);
      }
    }
  }
 else {
    logger.error(""String_Node_Str"" + ""String_Node_Str"");
    System.exit(1);
  }
}","public static void startup(){
  logger.debug(""String_Node_Str"");
  RabbitmqInitializer rabbitmqInitializer=RabbitmqInitializer.getInstance(config);
  try {
    rabbitmqInitializer.launch();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
  logger.debug(""String_Node_Str"");
  Map<String,Object> context=null;
  context=buildContext(config);
  logger.info(""String_Node_Str"");
  PubSuberInitializer pubSuberInitializer=PubSuberInitializer.getInstance(context);
  try {
    pubSuberInitializer.launch();
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  InterruptedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
  try {
    buildCommonClient(context);
  }
 catch (  MessagebusConnectedFailedException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    logger.error(""String_Node_Str"");
    System.exit(1);
  }
  App app=new App();
  broadcastEvent(CONSTS.MESSAGEBUS_SERVER_EVENT_STARTED,app);
  logger.debug(""String_Node_Str"");
  ServiceLoader serviceLoader=ServiceLoader.getInstance(context);
  serviceLoader.launch();
synchronized (app) {
    try {
      app.wait(0);
    }
 catch (    InterruptedException e) {
      logger.info(""String_Node_Str"");
    }
 finally {
      destroy(context);
    }
  }
}",0.9015025041736228
167621,"public synchronized void launch() throws IOException {
  RabbitmqServerManager serverManager=RabbitmqServerManager.defaultManager(properties);
  logger.info(""String_Node_Str"" + (serverManager.isAlive() ? ""String_Node_Str"" : ""String_Node_Str""));
  if (!serverManager.isAlive())   serverManager.start();
  this.initTopologyComponent();
}","public synchronized void launch() throws IOException {
  this.initTopologyComponent();
}",0.4160756501182033
167622,"@NotNull public IResponser getResponser() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return responser;
}","@NotNull public synchronized IResponser getResponser() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return responser;
}",0.964769647696477
167623,"private void initChannelPool(){
  Map<String,Config> clientConfigs=this.configManager.getClientConfigMap();
  ChannelPoolConfig config=new ChannelPoolConfig();
  config.setMaxTotal(Integer.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setMaxIdle(Integer.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setMaxWaitMillis(Long.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setTestOnBorrow(Boolean.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setTestOnReturn(Boolean.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  pool=new ChannelPool(config,new ChannelFactory(this.connection));
}","private void initChannelPool(){
  Map<String,Config> clientConfigs=this.configManager.getClientConfigMap();
  ChannelPoolConfig config=new ChannelPoolConfig();
  config.setMaxTotal(Integer.parseInt(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setMaxIdle(Integer.parseInt(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setMaxWaitMillis(Long.parseLong(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setTestOnBorrow(Boolean.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  config.setTestOnReturn(Boolean.valueOf(clientConfigs.get(""String_Node_Str"").getValue()));
  pool=new ChannelPool(config,new ChannelFactory(this.connection));
}",0.6794117647058824
167624,"@NotNull public IRequester getRequester() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return requester;
}","@NotNull public synchronized IRequester getRequester() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return requester;
}",0.964769647696477
167625,"@NotNull public IProducer getProducer() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return producer;
}","@NotNull public synchronized IProducer getProducer() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return producer;
}",0.9641873278236914
167626,"@NotNull public IConsumer getConsumer() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return consumer;
}","@NotNull public synchronized IConsumer getConsumer() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return consumer;
}",0.9641873278236914
167627,"@NotNull public ISubscriber getSubscriber() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return subscriber;
}","@NotNull public synchronized ISubscriber getSubscriber() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return subscriber;
}",0.9653333333333334
167628,"@NotNull public IPublisher getPublisher() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return publisher;
}","@NotNull public synchronized IPublisher getPublisher() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return publisher;
}",0.964769647696477
167629,"@NotNull public IBroadcaster getBroadcaster() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return broadcaster;
}","@NotNull public synchronized IBroadcaster getBroadcaster() throws MessagebusUnOpenException {
  if (!this.isOpen())   throw new MessagebusUnOpenException(""String_Node_Str"");
  return broadcaster;
}",0.9658792650918636
167630,"private void processReceivePermission(List<ReceivePermission> receivePermissions){
  receivePermissionMap=new ConcurrentHashMap<>(receivePermissions.size());
  int maxReceivePermGrantId=0;
  for (  ReceivePermission receivePermission : receivePermissions) {
    String targetId=String.valueOf(receivePermission.getTargetId());
    if (!receivePermissionMap.containsKey(targetId)) {
      receivePermissionMap.put(targetId,""String_Node_Str"");
    }
    String joinedGrantIds=receivePermissionMap.get(targetId);
    String grantId=String.valueOf(receivePermission.getGrantId());
    receivePermissionMap.put(targetId,joinedGrantIds + grantId + ""String_Node_Str"");
    maxReceivePermGrantId=Math.max(maxReceivePermGrantId,Integer.valueOf(grantId));
  }
  receivePermByteQueryArrMap=new ConcurrentHashMap<>(receivePermissionMap.size());
  for (  Map.Entry<String,String> receivePermItem : receivePermissionMap.entrySet()) {
    receivePermByteQueryArrMap.put(receivePermItem.getKey(),this.buildQueryArray(maxReceivePermGrantId,receivePermItem.getKey(),this.receivePermissionMap));
  }
}","private void processReceivePermission(List<ReceivePermission> receivePermissions){
  receivePermissionMap=new ConcurrentHashMap<>(receivePermissions.size());
  int maxReceivePermGrantId=0;
  for (  ReceivePermission receivePermission : receivePermissions) {
    String targetId=String.valueOf(receivePermission.getTargetId());
    if (!receivePermissionMap.containsKey(targetId)) {
      receivePermissionMap.put(targetId,""String_Node_Str"");
    }
    String joinedGrantIds=receivePermissionMap.get(targetId);
    String grantId=String.valueOf(receivePermission.getGrantId());
    receivePermissionMap.put(targetId,joinedGrantIds + grantId + ""String_Node_Str"");
    maxReceivePermGrantId=Math.max(maxReceivePermGrantId,Integer.parseInt(grantId));
  }
  receivePermByteQueryArrMap=new ConcurrentHashMap<>(receivePermissionMap.size());
  for (  Map.Entry<String,String> receivePermItem : receivePermissionMap.entrySet()) {
    receivePermByteQueryArrMap.put(receivePermItem.getKey(),this.buildQueryArray(maxReceivePermGrantId,receivePermItem.getKey(),this.receivePermissionMap));
  }
}",0.9930715935334872
167631,"private void processSendPermission(List<SendPermission> sendPermissions){
  sendPermissionMap=new ConcurrentHashMap<>(sendPermissions.size());
  int maxSendPermGrantId=0;
  for (  SendPermission sendPermission : sendPermissions) {
    String targetId=String.valueOf(sendPermission.getTargetId());
    if (!sendPermissionMap.containsKey(targetId)) {
      sendPermissionMap.put(targetId,""String_Node_Str"");
    }
    String joinedGrantIds=sendPermissionMap.get(targetId);
    String grantId=String.valueOf(sendPermission.getGrantId());
    sendPermissionMap.put(targetId,joinedGrantIds + grantId + ""String_Node_Str"");
    maxSendPermGrantId=Math.max(maxSendPermGrantId,Integer.valueOf(grantId));
  }
  sendPermByteQueryArrMap=new ConcurrentHashMap<>(sendPermissionMap.size());
  for (  Map.Entry<String,String> sendPermItem : this.sendPermissionMap.entrySet()) {
    sendPermByteQueryArrMap.put(sendPermItem.getKey(),this.buildQueryArray(maxSendPermGrantId,sendPermItem.getKey(),this.sendPermissionMap));
  }
}","private void processSendPermission(List<SendPermission> sendPermissions){
  sendPermissionMap=new ConcurrentHashMap<>(sendPermissions.size());
  int maxSendPermGrantId=0;
  for (  SendPermission sendPermission : sendPermissions) {
    String targetId=String.valueOf(sendPermission.getTargetId());
    if (!sendPermissionMap.containsKey(targetId)) {
      sendPermissionMap.put(targetId,""String_Node_Str"");
    }
    String joinedGrantIds=sendPermissionMap.get(targetId);
    String grantId=String.valueOf(sendPermission.getGrantId());
    sendPermissionMap.put(targetId,joinedGrantIds + grantId + ""String_Node_Str"");
    maxSendPermGrantId=Math.max(maxSendPermGrantId,Integer.parseInt(grantId));
  }
  sendPermByteQueryArrMap=new ConcurrentHashMap<>(sendPermissionMap.size());
  for (  Map.Entry<String,String> sendPermItem : this.sendPermissionMap.entrySet()) {
    sendPermByteQueryArrMap.put(sendPermItem.getKey(),this.buildQueryArray(maxSendPermGrantId,sendPermItem.getKey(),this.sendPermissionMap));
  }
}",0.9925705794947994
167632,"private byte[] buildQueryArray(int maxGrantId,String targetIdStr,Map<String,String> map){
  byte[] permissionQueryBytes=new byte[maxGrantId + 1];
  String[] grantIds=map.get(targetIdStr).toString().split(""String_Node_Str"");
  permissionQueryBytes[0]=0;
  for (int i=0; i <= maxGrantId; i++) {
    permissionQueryBytes[i]=0;
    for (int j=0; j < grantIds.length; j++) {
      int current=Integer.valueOf(grantIds[j]);
      if (i == current) {
        permissionQueryBytes[i]=1;
        break;
      }
    }
  }
  return permissionQueryBytes;
}","private byte[] buildQueryArray(int maxGrantId,String targetIdStr,Map<String,String> map){
  byte[] permissionQueryBytes=new byte[maxGrantId + 1];
  String[] grantIds=map.get(targetIdStr).toString().split(""String_Node_Str"");
  permissionQueryBytes[0]=0;
  for (int i=0; i <= maxGrantId; i++) {
    permissionQueryBytes[i]=0;
    for (int j=0; j < grantIds.length; j++) {
      int current=Integer.parseInt(grantIds[j]);
      if (i == current) {
        permissionQueryBytes[i]=1;
        break;
      }
    }
  }
  return permissionQueryBytes;
}",0.945821854912764
167633,"public static IMessageHeader unbox(@NotNull AMQP.BasicProperties properties,MessageType msgType,IMessageHeader msgHeader){
  msgHeader.setCorrelationId(properties.getCorrelationId());
  msgHeader.setHeaders(properties.getHeaders());
  msgHeader.setTimestamp(properties.getTimestamp());
  String msgIdStr=properties.getMessageId();
  if (msgIdStr != null && !msgIdStr.isEmpty())   msgHeader.setMessageId(Long.valueOf(msgIdStr));
 else   logger.error(""String_Node_Str"");
  msgHeader.setContentEncoding(properties.getContentEncoding());
  msgHeader.setContentType(properties.getContentType());
  msgHeader.setAppId(properties.getAppId());
  msgHeader.setReplyTo(properties.getReplyTo());
  return msgHeader;
}","public static IMessageHeader unbox(@NotNull AMQP.BasicProperties properties,MessageType msgType,IMessageHeader msgHeader){
  msgHeader.setCorrelationId(properties.getCorrelationId());
  msgHeader.setHeaders(properties.getHeaders());
  msgHeader.setTimestamp(properties.getTimestamp());
  String msgIdStr=properties.getMessageId();
  if (msgIdStr != null && !msgIdStr.isEmpty())   msgHeader.setMessageId(Long.parseLong(msgIdStr));
 else   logger.error(""String_Node_Str"");
  msgHeader.setContentEncoding(properties.getContentEncoding());
  msgHeader.setContentType(properties.getContentType());
  msgHeader.setAppId(properties.getAppId());
  msgHeader.setReplyTo(properties.getReplyTo());
  return msgHeader;
}",0.9886845827439888
167634,"@NotNull public static String syncHTTPGet(@NotNull Map<String,Object> requestParamDic,@NotNull AuthInfo authInfo){
  CloseableHttpClient httpClient=HttpClients.createDefault();
  CloseableHttpResponse response=null;
  try {
    URI uri=new URIBuilder().setScheme(""String_Node_Str"").setHost(requestParamDic.get(""String_Node_Str"").toString()).setPort(Integer.valueOf(requestParamDic.get(""String_Node_Str"").toString())).setPath(requestParamDic.get(""String_Node_Str"").toString()).setUserInfo(authInfo.getUserName(),authInfo.getPassword()).build();
    HttpGet httpGet=new HttpGet(uri);
    response=httpClient.execute(httpGet);
    HttpEntity entity=response.getEntity();
    if (entity != null) {
      long len=entity.getContentLength();
      if (len == -1)       return ""String_Node_Str"";
      if (len < 2 * 1024 * 1024) {
        return EntityUtils.toString(entity);
      }
 else {
        logger.error(""String_Node_Str"" + len + ""String_Node_Str""+ ""String_Node_Str""+ uri.getRawPath());
        return ""String_Node_Str"";
      }
    }
  }
 catch (  IOException|URISyntaxException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (response != null)     try {
      response.close();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return ""String_Node_Str"";
}","@NotNull public static String syncHTTPGet(@NotNull Map<String,Object> requestParamDic,@NotNull AuthInfo authInfo){
  CloseableHttpClient httpClient=HttpClients.createDefault();
  CloseableHttpResponse response=null;
  try {
    URI uri=new URIBuilder().setScheme(""String_Node_Str"").setHost(requestParamDic.get(""String_Node_Str"").toString()).setPort(Integer.parseInt(requestParamDic.get(""String_Node_Str"").toString())).setPath(requestParamDic.get(""String_Node_Str"").toString()).setUserInfo(authInfo.getUserName(),authInfo.getPassword()).build();
    HttpGet httpGet=new HttpGet(uri);
    response=httpClient.execute(httpGet);
    HttpEntity entity=response.getEntity();
    if (entity != null) {
      long len=entity.getContentLength();
      if (len == -1)       return ""String_Node_Str"";
      if (len < 2 * 1024 * 1024) {
        return EntityUtils.toString(entity);
      }
 else {
        logger.error(""String_Node_Str"" + len + ""String_Node_Str""+ ""String_Node_Str""+ uri.getRawPath());
        return ""String_Node_Str"";
      }
    }
  }
 catch (  IOException|URISyntaxException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
 finally {
    if (response != null)     try {
      response.close();
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + e.getMessage());
    }
  }
  return ""String_Node_Str"";
}",0.9944300037133308
167635,"private void request(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  try {
    if (!request.getMethod().toLowerCase().equals(""String_Node_Str""))     throw new InvalidParameterException(""String_Node_Str"" + request.getMethod());
    String timeoutStr=request.getParameter(""String_Node_Str"");
    if (timeoutStr == null || timeoutStr.isEmpty())     throw new NullPointerException(""String_Node_Str"");
    long timeout;
    timeout=Long.valueOf(timeoutStr);
    if (timeout < Constants.MIN_REQUEST_TIMEOUT || timeout > Constants.MAX_REQUEST_TIMEOUT)     throw new InvalidParameterException(""String_Node_Str"" + Constants.MIN_REQUEST_TIMEOUT + ""String_Node_Str""+ Constants.MAX_REQUEST_TIMEOUT);
    String queueName=request.getRequestURI().split(""String_Node_Str"")[3];
    String msgStr=request.getParameter(""String_Node_Str"");
    Message msg=MessageJSONSerializer.deSerialize(msgStr,MessageType.QueueMessage);
    Messagebus messagebus=(Messagebus)(getServletContext().getAttribute(Constants.MESSAGE_BUS_KEY));
    IRequester requester=messagebus.getRequester();
    Message responseMsg=requester.request(msg,queueName,timeout);
    String respMsgStr=MessageJSONSerializer.serialize(responseMsg);
    ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",respMsgStr);
  }
 catch (  MessagebusUnOpenException e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
catch (  MessageResponseTimeoutException e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
catch (  Exception e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",""String_Node_Str"");
  }
}","private void request(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  try {
    if (!request.getMethod().toLowerCase().equals(""String_Node_Str""))     throw new InvalidParameterException(""String_Node_Str"" + request.getMethod());
    String timeoutStr=request.getParameter(""String_Node_Str"");
    if (timeoutStr == null || timeoutStr.isEmpty())     throw new NullPointerException(""String_Node_Str"");
    long timeout;
    timeout=Long.parseLong(timeoutStr);
    if (timeout < Constants.MIN_REQUEST_TIMEOUT || timeout > Constants.MAX_REQUEST_TIMEOUT)     throw new InvalidParameterException(""String_Node_Str"" + Constants.MIN_REQUEST_TIMEOUT + ""String_Node_Str""+ Constants.MAX_REQUEST_TIMEOUT);
    String queueName=request.getRequestURI().split(""String_Node_Str"")[3];
    String msgStr=request.getParameter(""String_Node_Str"");
    Message msg=MessageJSONSerializer.deSerialize(msgStr,MessageType.QueueMessage);
    Messagebus messagebus=(Messagebus)(getServletContext().getAttribute(Constants.MESSAGE_BUS_KEY));
    IRequester requester=messagebus.getRequester();
    Message responseMsg=requester.request(msg,queueName,timeout);
    String respMsgStr=MessageJSONSerializer.serialize(responseMsg);
    ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",respMsgStr);
  }
 catch (  MessagebusUnOpenException e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
catch (  MessageResponseTimeoutException e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
catch (  Exception e) {
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,""String_Node_Str"" + e.getMessage(),""String_Node_Str"",""String_Node_Str"");
  }
}",0.9956850053937432
167636,"private void syncConsume(HttpServletRequest request,HttpServletResponse response,Messagebus messagebus) throws ServletException, IOException {
  String queueName=request.getRequestURI().split(""String_Node_Str"")[3];
  String numStr=request.getParameter(""String_Node_Str"");
  int num=0;
  List<Message> messages=null;
  try {
    if (numStr == null)     throw new NullPointerException(""String_Node_Str"");
    try {
      num=Integer.valueOf(numStr);
    }
 catch (    NumberFormatException e) {
      throw new InvalidParameterException(""String_Node_Str"");
    }
    if (num < Constants.MIN_CONSUME_NUM || num > Constants.MAX_CONSUME_NUM)     throw new InvalidParameterException(""String_Node_Str"" + Constants.MAX_CONSUME_NUM + ""String_Node_Str""+ Constants.MIN_CONSUME_NUM);
    IConsumer consumer=messagebus.getConsumer();
    messages=consumer.consume(queueName,num);
    if (messages == null) {
      ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else {
      String msgsStr=MessageJSONSerializer.serializeMessages(messages);
      ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",msgsStr);
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,e.getMessage(),""String_Node_Str"",""String_Node_Str"");
  }
}","private void syncConsume(HttpServletRequest request,HttpServletResponse response,Messagebus messagebus) throws ServletException, IOException {
  String queueName=request.getRequestURI().split(""String_Node_Str"")[3];
  String numStr=request.getParameter(""String_Node_Str"");
  int num=0;
  List<Message> messages=null;
  try {
    if (numStr == null)     throw new NullPointerException(""String_Node_Str"");
    try {
      num=Integer.parseInt(numStr);
    }
 catch (    NumberFormatException e) {
      throw new InvalidParameterException(""String_Node_Str"");
    }
    if (num < Constants.MIN_CONSUME_NUM || num > Constants.MAX_CONSUME_NUM)     throw new InvalidParameterException(""String_Node_Str"" + Constants.MAX_CONSUME_NUM + ""String_Node_Str""+ Constants.MIN_CONSUME_NUM);
    IConsumer consumer=messagebus.getConsumer();
    messages=consumer.consume(queueName,num);
    if (messages == null) {
      ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
 else {
      String msgsStr=MessageJSONSerializer.serializeMessages(messages);
      ResponseUtil.response(response,Constants.HTTP_SUCCESS_CODE,""String_Node_Str"",""String_Node_Str"",msgsStr);
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
    ResponseUtil.response(response,Constants.HTTP_FAILED_CODE,e.getMessage(),""String_Node_Str"",""String_Node_Str"");
  }
}",0.9946524064171124
167637,"public void activate() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.valueOf(pNodeId);
  try {
    nodeService.activate(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void activate() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.parseInt(pNodeId);
  try {
    nodeService.activate(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.9884704073789392
167638,"public void unactivate() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.valueOf(pNodeId);
  try {
    nodeService.unactivate(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void unactivate() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.parseInt(pNodeId);
  try {
    nodeService.unactivate(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.988540870893812
167639,"public void reset() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.valueOf(pNodeId);
  try {
    String appId=nodeService.resetAppId(nodeId);
    responseJTableData(resp,generateCreateSuccessJSONStr(appId));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void reset() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.parseInt(pNodeId);
  try {
    String appId=nodeService.resetAppId(nodeId);
    responseJTableData(resp,generateCreateSuccessJSONStr(appId));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.9887640449438202
167640,"public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.valueOf(req.getParameter(""String_Node_Str""));
    pageSize=Integer.valueOf(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAvailableQueues());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,0,Integer.MAX_VALUE);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}","public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.valueOf(req.getParameter(""String_Node_Str""));
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAvailableQueues());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,0,Integer.MAX_VALUE);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}",0.991284137129576
167641,"public void create() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  node=new Node();
  String pNodeName=req.getParameter(""String_Node_Str"");
  String pNodeType=req.getParameter(""String_Node_Str"");
  String pParentId=req.getParameter(""String_Node_Str"");
  String pRouterType=req.getParameter(""String_Node_Str"");
  String pNodeLevel=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeName)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setName(pNodeName);
  if (Strings.isNullOrEmpty(pNodeType)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (pNodeType.equals(Constants.EXCHANGE_TYPE_OF_STRING)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setType(Short.valueOf(pNodeType));
  if (Strings.isNullOrEmpty(pParentId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setParentId(Integer.valueOf(pParentId));
  if (node.getType() == Constants.EXCHANGE_TYPE) {
    if (Strings.isNullOrEmpty(pRouterType)) {
      responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
      return;
    }
    node.setRouterType(pRouterType);
  }
  if (Strings.isNullOrEmpty(pNodeLevel)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setLevel(Short.valueOf(pNodeLevel));
  try {
    node.setRoutingKey(nodeService.generateRoutingKey(node));
    node.setValue(nodeService.generateNodeValue(node));
  }
 catch (  IllegalStateException e) {
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
    return;
  }
  try {
    nodeService.save(node);
    responseJTableData(resp,generateCreateSuccessJSONStr(""String_Node_Str""));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
  }
}","public void create() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  node=new Node();
  String pNodeName=req.getParameter(""String_Node_Str"");
  String pNodeType=req.getParameter(""String_Node_Str"");
  String pParentId=req.getParameter(""String_Node_Str"");
  String pRouterType=req.getParameter(""String_Node_Str"");
  String pNodeLevel=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeName)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setName(pNodeName);
  if (Strings.isNullOrEmpty(pNodeType)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (pNodeType.equals(Constants.EXCHANGE_TYPE_OF_STRING)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setType(Short.valueOf(pNodeType));
  if (Strings.isNullOrEmpty(pParentId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setParentId(Integer.parseInt(pParentId));
  if (node.getType() == Constants.EXCHANGE_TYPE) {
    if (Strings.isNullOrEmpty(pRouterType)) {
      responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
      return;
    }
    node.setRouterType(pRouterType);
  }
  if (Strings.isNullOrEmpty(pNodeLevel)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  node.setLevel(Short.valueOf(pNodeLevel));
  try {
    node.setRoutingKey(nodeService.generateRoutingKey(node));
    node.setValue(nodeService.generateNodeValue(node));
  }
 catch (  IllegalStateException e) {
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
    return;
  }
  try {
    nodeService.save(node);
    responseJTableData(resp,generateCreateSuccessJSONStr(""String_Node_Str""));
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
  }
}",0.9963244302866944
167642,"public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.valueOf(req.getParameter(""String_Node_Str""));
    pageSize=Integer.valueOf(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithPaging(offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAll());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getAll();
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}","public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.parseInt(req.getParameter(""String_Node_Str""));
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithPaging(offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAll());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getAll();
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}",0.9808917197452228
167643,"public void delete() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.valueOf(pNodeId);
  try {
    nodeService.remove(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
  }
}","public void delete() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String pNodeId=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(pNodeId)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int nodeId=Integer.parseInt(pNodeId);
  try {
    nodeService.remove(nodeId);
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(e.getMessage()));
  }
}",0.9883449883449884
167644,"@Override public void contextInitialized(ServletContextEvent servletContextEvent){
  Messagebus messagebus=Messagebus.createClient(""String_Node_Str"");
  messagebus.setZkHost(Constants.ZK_HOST);
  messagebus.setZkPort(Constants.ZK_PORT);
  try {
    messagebus.open();
    servletContextEvent.getServletContext().setAttribute(Constants.MESSAGEBUS_KEY,messagebus);
    sentinel=new Sentinel(messagebus,servletContextEvent);
    sentinel.startMonitor();
  }
 catch (  MessagebusConnectedFailedException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}","@Override public void contextInitialized(ServletContextEvent servletContextEvent){
}",0.2592592592592592
167645,"public void create() throws IOException {
  HttpServletRequest request=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  Module newModule=new Module();
  newModule.setModuleName(request.getParameter(""String_Node_Str""));
  newModule.setModuleValue(request.getParameter(""String_Node_Str""));
  newModule.setLinkUrl(request.getParameter(""String_Node_Str""));
  newModule.setParentModule(request.getParameter(""String_Node_Str""));
  String sortIndexStr=request.getParameter(""String_Node_Str"");
  if (sortIndexStr == null || sortIndexStr.isEmpty())   sortIndexStr=""String_Node_Str"";
  newModule.setSortIndex(Integer.valueOf(sortIndexStr));
  Module existsModule=moduleService.getWithModuleValue(newModule.getModuleValue());
  if (existsModule == null) {
    moduleService.create(newModule);
    existsModule=moduleService.getWithModuleValue(newModule.getModuleValue());
    String jsonStr=gson.toJson(existsModule);
    jsonStr=generateCreateSuccessJSONStr(jsonStr);
    super.refreshMenu(ServletActionContext.getRequest().getSession());
    responseJTableData(resp,jsonStr);
  }
 else {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void create() throws IOException {
  HttpServletRequest request=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  Module newModule=new Module();
  newModule.setModuleName(request.getParameter(""String_Node_Str""));
  newModule.setModuleValue(request.getParameter(""String_Node_Str""));
  newModule.setLinkUrl(request.getParameter(""String_Node_Str""));
  newModule.setParentModule(request.getParameter(""String_Node_Str""));
  String sortIndexStr=request.getParameter(""String_Node_Str"");
  if (sortIndexStr == null || sortIndexStr.isEmpty())   sortIndexStr=""String_Node_Str"";
  newModule.setSortIndex(Integer.parseInt(sortIndexStr));
  Module existsModule=moduleService.getWithModuleValue(newModule.getModuleValue());
  if (existsModule == null) {
    moduleService.create(newModule);
    existsModule=moduleService.getWithModuleValue(newModule.getModuleValue());
    String jsonStr=gson.toJson(existsModule);
    jsonStr=generateCreateSuccessJSONStr(jsonStr);
    super.refreshMenu(ServletActionContext.getRequest().getSession());
    responseJTableData(resp,jsonStr);
  }
 else {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.9937785151389464
167646,"public void update() throws IOException {
  HttpServletRequest request=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  Module module=new Module();
  module.setModuleCode(request.getParameter(""String_Node_Str""));
  module.setModuleName(request.getParameter(""String_Node_Str""));
  module.setModuleValue(request.getParameter(""String_Node_Str""));
  module.setLinkUrl(request.getParameter(""String_Node_Str""));
  module.setParentModule(request.getParameter(""String_Node_Str""));
  String sortIndexStr=request.getParameter(""String_Node_Str"");
  if (sortIndexStr == null || sortIndexStr.isEmpty())   sortIndexStr=""String_Node_Str"";
  module.setSortIndex(Integer.valueOf(sortIndexStr));
  moduleService.modify(module);
  super.refreshMenu(ServletActionContext.getRequest().getSession());
  responseJTableData(resp,generateUpdateSuccessJSONStr());
}","public void update() throws IOException {
  HttpServletRequest request=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  Module module=new Module();
  module.setModuleCode(request.getParameter(""String_Node_Str""));
  module.setModuleName(request.getParameter(""String_Node_Str""));
  module.setModuleValue(request.getParameter(""String_Node_Str""));
  module.setLinkUrl(request.getParameter(""String_Node_Str""));
  module.setParentModule(request.getParameter(""String_Node_Str""));
  String sortIndexStr=request.getParameter(""String_Node_Str"");
  if (sortIndexStr == null || sortIndexStr.isEmpty())   sortIndexStr=""String_Node_Str"";
  module.setSortIndex(Integer.parseInt(sortIndexStr));
  moduleService.modify(module);
  super.refreshMenu(ServletActionContext.getRequest().getSession());
  responseJTableData(resp,generateUpdateSuccessJSONStr());
}",0.991577765300393
167647,"public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Module> moduleList=null;
  try {
    offset=Integer.valueOf(req.getParameter(""String_Node_Str""));
    pageSize=Integer.valueOf(req.getParameter(""String_Node_Str""));
    moduleList=moduleService.getWithPaging(offset,pageSize);
    String jsonArr=gson.toJson(moduleList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,moduleService.countAll());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    moduleList=moduleService.getAll();
    String jsonArr=gson.toJson(moduleList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}","public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Module> moduleList=null;
  try {
    offset=Integer.parseInt(req.getParameter(""String_Node_Str""));
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
    moduleList=moduleService.getWithPaging(offset,pageSize);
    String jsonArr=gson.toJson(moduleList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,moduleService.countAll());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    moduleList=moduleService.getAll();
    String jsonArr=gson.toJson(moduleList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}",0.9813200498132004
167648,"public void sendlist() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  List<Node> nodeList=null;
  String targetIdStr=req.getParameter(""String_Node_Str"");
  int targetId=-1;
  try {
    targetId=Integer.valueOf(targetIdStr);
  }
 catch (  NumberFormatException e) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  Node targetNode=nodeService.get(targetId);
  if (targetNode == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str"" + targetIdStr));
    return;
  }
  boolean isPubsubQueue=targetNode.getName().contains(""String_Node_Str"");
  nodeList=nodeService.getQueues(targetId,isPubsubQueue);
  List<SendPermission> sendPermissionList=sendPermissionService.getWithTargetId(targetId);
  int[] sendGrantIds=this.extractSendGrantIds(sendPermissionList);
  String jsonArr=gson.toJson(nodeList);
  jsonArr=generateListSuccessJSONStr(jsonArr,gson.toJson(sendGrantIds));
  responseJTableData(resp,jsonArr);
}","public void sendlist() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  List<Node> nodeList=null;
  String targetIdStr=req.getParameter(""String_Node_Str"");
  int targetId=-1;
  try {
    targetId=Integer.parseInt(targetIdStr);
  }
 catch (  NumberFormatException e) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  Node targetNode=nodeService.get(targetId);
  if (targetNode == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str"" + targetIdStr));
    return;
  }
  boolean isPubsubQueue=targetNode.getName().contains(""String_Node_Str"");
  nodeList=nodeService.getQueues(targetId,isPubsubQueue);
  List<SendPermission> sendPermissionList=sendPermissionService.getWithTargetId(targetId);
  int[] sendGrantIds=this.extractSendGrantIds(sendPermissionList);
  String jsonArr=gson.toJson(nodeList);
  jsonArr=generateListSuccessJSONStr(jsonArr,gson.toJson(sendGrantIds));
  responseJTableData(resp,jsonArr);
}",0.9929478138222848
167649,"public void sendpermission() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String joinedGrantIds=req.getParameter(""String_Node_Str"");
  String targetIdStr=req.getParameter(""String_Node_Str"");
  String originalGrantIds=req.getParameter(""String_Node_Str"");
  if (joinedGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (originalGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int targetId=Integer.valueOf(targetIdStr);
  Map<String,List<Integer>> filterMap=this.filterGrantIds(originalGrantIds,joinedGrantIds);
  SendPermission sendPermission=new SendPermission();
  sendPermission.setTargetId(targetId);
  try {
    for (    Integer deletingGrantId : filterMap.get(""String_Node_Str"")) {
      sendPermissionService.remove(targetId,deletingGrantId);
    }
    for (    Integer insertingGrantId : filterMap.get(""String_Node_Str"")) {
      sendPermission.setGrantId(insertingGrantId);
      sendPermissionService.save(sendPermission);
    }
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void sendpermission() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String joinedGrantIds=req.getParameter(""String_Node_Str"");
  String targetIdStr=req.getParameter(""String_Node_Str"");
  String originalGrantIds=req.getParameter(""String_Node_Str"");
  if (joinedGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (originalGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int targetId=Integer.parseInt(targetIdStr);
  Map<String,List<Integer>> filterMap=this.filterGrantIds(originalGrantIds,joinedGrantIds);
  SendPermission sendPermission=new SendPermission();
  sendPermission.setTargetId(targetId);
  try {
    for (    Integer deletingGrantId : filterMap.get(""String_Node_Str"")) {
      sendPermissionService.remove(targetId,deletingGrantId);
    }
    for (    Integer insertingGrantId : filterMap.get(""String_Node_Str"")) {
      sendPermission.setGrantId(insertingGrantId);
      sendPermissionService.save(sendPermission);
    }
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.9950347567030784
167650,"public void receivelist() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  List<Node> nodeList=null;
  String targetIdStr=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
  int targetId=-1;
  try {
    targetId=Integer.valueOf(targetIdStr);
  }
 catch (  NumberFormatException e) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  Node targetNode=nodeService.get(targetId);
  if (targetNode == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str"" + targetIdStr));
    return;
  }
  boolean isPubsubQueue=targetNode.getName().contains(""String_Node_Str"");
  nodeList=nodeService.getQueues(targetId,isPubsubQueue);
  List<ReceivePermission> receivePermissionList=receivePermissionService.getWithTargetId(targetId);
  int[] receiveGrantIds=this.extractReceiveGrantIds(receivePermissionList);
  String jsonArr=gson.toJson(nodeList);
  jsonArr=generateListSuccessJSONStr(jsonArr,gson.toJson(receiveGrantIds));
  responseJTableData(resp,jsonArr);
}","public void receivelist() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  List<Node> nodeList=null;
  String targetIdStr=req.getParameter(""String_Node_Str"");
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
  int targetId=-1;
  try {
    targetId=Integer.parseInt(targetIdStr);
  }
 catch (  NumberFormatException e) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  Node targetNode=nodeService.get(targetId);
  if (targetNode == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str"" + targetIdStr));
    return;
  }
  boolean isPubsubQueue=targetNode.getName().contains(""String_Node_Str"");
  nodeList=nodeService.getQueues(targetId,isPubsubQueue);
  List<ReceivePermission> receivePermissionList=receivePermissionService.getWithTargetId(targetId);
  int[] receiveGrantIds=this.extractReceiveGrantIds(receivePermissionList);
  String jsonArr=gson.toJson(nodeList);
  jsonArr=generateListSuccessJSONStr(jsonArr,gson.toJson(receiveGrantIds));
  responseJTableData(resp,jsonArr);
}",0.9937785151389464
167651,"public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.valueOf(req.getParameter(""String_Node_Str""));
    pageSize=Integer.valueOf(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAvailableQueues());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,0,Integer.MAX_VALUE);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}","public void list() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  int offset, pageSize;
  List<Node> nodeList=null;
  try {
    offset=Integer.parseInt(req.getParameter(""String_Node_Str""));
    pageSize=Integer.parseInt(req.getParameter(""String_Node_Str""));
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,offset,pageSize);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListWithPagingSuccessJSONStr(jsonArr,nodeService.countAvailableQueues());
    responseJTableData(resp,jsonArr);
  }
 catch (  NumberFormatException e) {
    nodeList=nodeService.getWithType(Constants.QUEUE_TYPE,0,Integer.MAX_VALUE);
    String jsonArr=gson.toJson(nodeList);
    jsonArr=generateListSuccessJSONStr(jsonArr);
    responseJTableData(resp,jsonArr);
  }
}",0.9825783972125436
167652,"public void receivepermission() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String joinedGrantIds=req.getParameter(""String_Node_Str"");
  String targetIdStr=req.getParameter(""String_Node_Str"");
  String originalGrantIds=req.getParameter(""String_Node_Str"");
  if (joinedGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (originalGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int targetId=Integer.valueOf(targetIdStr);
  Map<String,List<Integer>> filterMap=this.filterGrantIds(originalGrantIds,joinedGrantIds);
  ReceivePermission receivePermission=new ReceivePermission();
  receivePermission.setTargetId(targetId);
  try {
    for (    Integer deletingGrantId : filterMap.get(""String_Node_Str"")) {
      receivePermissionService.remove(targetId,deletingGrantId);
    }
    for (    Integer insertingGrantId : filterMap.get(""String_Node_Str"")) {
      receivePermission.setGrantId(insertingGrantId);
      receivePermissionService.save(receivePermission);
    }
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}","public void receivepermission() throws IOException {
  HttpServletRequest req=ServletActionContext.getRequest();
  HttpServletResponse resp=ServletActionContext.getResponse();
  String joinedGrantIds=req.getParameter(""String_Node_Str"");
  String targetIdStr=req.getParameter(""String_Node_Str"");
  String originalGrantIds=req.getParameter(""String_Node_Str"");
  if (joinedGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (originalGrantIds == null) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  if (Strings.isNullOrEmpty(targetIdStr)) {
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
    return;
  }
  int targetId=Integer.parseInt(targetIdStr);
  Map<String,List<Integer>> filterMap=this.filterGrantIds(originalGrantIds,joinedGrantIds);
  ReceivePermission receivePermission=new ReceivePermission();
  receivePermission.setTargetId(targetId);
  try {
    for (    Integer deletingGrantId : filterMap.get(""String_Node_Str"")) {
      receivePermissionService.remove(targetId,deletingGrantId);
    }
    for (    Integer insertingGrantId : filterMap.get(""String_Node_Str"")) {
      receivePermission.setGrantId(insertingGrantId);
      receivePermissionService.save(receivePermission);
    }
    responseJTableData(resp,generateUpdateSuccessJSONStr());
  }
 catch (  SQLException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
    responseJTableData(resp,generateErrorJSONStr(""String_Node_Str""));
  }
}",0.9951219512195122
167653,"private static void prepareEnv(String configFilePathStr){
  logger.info(""String_Node_Str"");
  ConfigurationLoader configurationLoader=ConfigurationLoader.defaultLoader();
  configurationLoader.setConfigFilePathStr(configFilePathStr);
  try {
    configurationLoader.launch();
  }
 catch (  IOException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    logger.error(""String_Node_Str"" + e.getMessage());
    logger.error(""String_Node_Str"");
    System.exit(1);
  }
  config=configurationLoader.getConfigProperties();
  String zkHost=config.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_HOST);
  int zkPort=Integer.valueOf(config.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_PORT));
  globalZKExchangeManager=ExchangerManager.defaultExchangerManager(zkHost,zkPort);
}","private static void prepareEnv(String configFilePathStr){
  logger.info(""String_Node_Str"");
  ConfigurationLoader configurationLoader=ConfigurationLoader.defaultLoader();
  configurationLoader.setConfigFilePathStr(configFilePathStr);
  try {
    configurationLoader.launch();
  }
 catch (  IOException e) {
    ExceptionHelper.logException(logger,e,""String_Node_Str"");
    logger.error(""String_Node_Str"" + e.getMessage());
    logger.error(""String_Node_Str"");
    System.exit(1);
  }
  config=configurationLoader.getConfigProperties();
  String zkHost=config.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_HOST);
  int zkPort=Integer.parseInt(config.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_PORT));
  globalZKExchangeManager=ExchangerManager.defaultExchangerManager(zkHost,zkPort);
}",0.9904882688649336
167654,"private static void buildCommonClient(Map<String,Object> context) throws MessagebusConnectedFailedException {
  Properties serverConfig=(Properties)context.get(Constants.KEY_SERVER_CONFIG);
  String appId=serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_APP_ID);
  Messagebus commonClient=Messagebus.createClient(appId);
  String zkHost=serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_HOST);
  int zkPort=Integer.valueOf(serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_PORT));
  commonClient.setZkHost(zkHost);
  commonClient.setZkPort(zkPort);
  commonClient.open();
  context.put(Constants.GLOBAL_CLIENT_OBJECT,commonClient);
}","private static void buildCommonClient(Map<String,Object> context) throws MessagebusConnectedFailedException {
  Properties serverConfig=(Properties)context.get(Constants.KEY_SERVER_CONFIG);
  String appId=serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_APP_ID);
  Messagebus commonClient=Messagebus.createClient(appId);
  String zkHost=serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_HOST);
  int zkPort=Integer.parseInt(serverConfig.getProperty(Constants.KEY_MESSAGEBUS_SERVER_ZK_PORT));
  commonClient.setZkHost(zkHost);
  commonClient.setZkPort(zkPort);
  commonClient.open();
  context.put(Constants.GLOBAL_CLIENT_OBJECT,commonClient);
}",0.9886621315192744
167655,"public MsgLogService(Map<String,Object> context){
  super(context);
  serverConfig=(Properties)this.context.get(Constants.KEY_SERVER_CONFIG);
  client=(Messagebus)this.context.get(Constants.GLOBAL_CLIENT_OBJECT);
}","public MsgLogService(Map<String,Object> context){
  super(context);
  client=(Messagebus)this.context.get(Constants.GLOBAL_CLIENT_OBJECT);
}",0.7909604519774012
167656,"/** 
 * close the messagebus client and release all used resources pls invoke this method after making sure you will not use the client in current context.
 */
public synchronized void close(){
  try {
    this.configManager.destroy();
    if (this.useChannelPool)     pool.destroy();
    if (this.connection.isOpen())     this.connection.close();
    this.zookeeper.close();
    boolean success=this.isOpen.compareAndSet(true,false);
    if (!success) {
      logger.error(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * close the messagebus client and release all used resources pls invoke this method after making sure you will not use the client in current context.
 */
public synchronized void close(){
  try {
    if (this.configManager != null)     this.configManager.destroy();
    if (this.useChannelPool && pool != null)     pool.destroy();
    if (this.connection.isOpen())     this.connection.close();
    this.zookeeper.close();
    boolean success=this.isOpen.compareAndSet(true,false);
    if (!success) {
      logger.error(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage());
  }
}",0.9577922077922078
167657,"public static ExecResult exec(@NotNull String cmdStr) throws IOException, InterruptedException {
  String[] splitedParts=new String[]{""String_Node_Str"",""String_Node_Str"",cmdStr};
  Process process=Runtime.getRuntime().exec(splitedParts);
  process.waitFor();
  String errStr=translateFromStream(process.getErrorStream());
  String infoStr=translateFromStream(process.getInputStream());
  ExecResult execResult=new ExecResult();
  execResult.setError(errStr);
  execResult.setInfo(infoStr);
  logger.debug(""String_Node_Str"" + ""String_Node_Str"" + errStr + ""String_Node_Str""+ cmdStr);
  logger.debug(""String_Node_Str"" + infoStr);
  return execResult;
}","public static ExecResult exec(@NotNull String cmdStr) throws IOException, InterruptedException {
  String[] cmd={""String_Node_Str"",""String_Node_Str"",cmdStr};
  Process process=Runtime.getRuntime().exec(cmd);
  process.waitFor();
  String errStr=translateFromStream(process.getErrorStream());
  String infoStr=translateFromStream(process.getInputStream());
  ExecResult execResult=new ExecResult();
  execResult.setError(errStr);
  execResult.setInfo(infoStr);
  logger.debug(""String_Node_Str"" + ""String_Node_Str"" + errStr + ""String_Node_Str""+ cmdStr);
  logger.debug(""String_Node_Str"" + infoStr);
  return execResult;
}",0.1782334384858044
167658,"private static ZooKeeper createZKClient(){
  try {
    return new ZooKeeper(host + port,30000,new SessionWatcher());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
}","private static ZooKeeper createZKClient(){
  try {
    return new ZooKeeper(host + ""String_Node_Str"" + port,30000,new SessionWatcher());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage());
  }
}",0.9567099567099568
167659,"public void testSimpleProduceAndConsume() throws Exception {
  Messagebus client=Messagebus.getInstance();
  client.setZkHost(""String_Node_Str"");
  client.setZkPort(2181);
  client.open();
  appkey=java.util.UUID.randomUUID().toString();
  msgType=""String_Node_Str"";
  String queueName=""String_Node_Str"";
  IConsumerCloser closer=client.getConsumer().consume(appkey,msgType,queueName,new IMessageReceiveListener(){
    @Override public void onMessage(    Message msg,    MessageFormat format){
switch (format) {
case Text:
{
          TextMessage txtMsg=(TextMessage)msg;
          logger.debug(""String_Node_Str"" + txtMsg.getMessageBody());
        }
      break;
case Object:
{
      ObjectMessage objMsg=(ObjectMessage)msg;
      SimpleObjectMessagePOJO realObj=(SimpleObjectMessagePOJO)objMsg.getObject();
      logger.debug(""String_Node_Str"" + realObj.getTxt());
    }
  break;
}
}
}
);
TextMessagePOJO msg=new TextMessagePOJO();
msg.setMessageBody(""String_Node_Str"");
client.getProducer().produce(msg,MessageFormat.Text,appkey,queueName,msgType);
ObjectMessagePOJO objMsg=new ObjectMessagePOJO();
SimpleObjectMessagePOJO soPojo=new SimpleObjectMessagePOJO();
soPojo.setTxt(""String_Node_Str"");
objMsg.setObject(soPojo);
client.getProducer().produce(objMsg,MessageFormat.Object,appkey,queueName,msgType);
Thread.sleep(10000);
closer.closeConsumer();
client.close();
}","public void testSimpleProduceAndConsume() throws Exception {
  appkey=java.util.UUID.randomUUID().toString();
  msgType=""String_Node_Str"";
  String queueName=""String_Node_Str"";
  IConsumerCloser closer=client.getConsumer().consume(appkey,msgType,queueName,new IMessageReceiveListener(){
    @Override public void onMessage(    Message msg,    MessageFormat format){
switch (format) {
case Text:
{
          TextMessage txtMsg=(TextMessage)msg;
          logger.debug(""String_Node_Str"" + txtMsg.getMessageBody());
        }
      break;
case Object:
{
      ObjectMessage objMsg=(ObjectMessage)msg;
      SimpleObjectMessagePOJO realObj=(SimpleObjectMessagePOJO)objMsg.getObject();
      logger.debug(""String_Node_Str"" + realObj.getTxt());
    }
  break;
}
}
}
);
TextMessagePOJO msg=new TextMessagePOJO();
msg.setMessageBody(""String_Node_Str"");
client.getProducer().produce(msg,MessageFormat.Text,appkey,queueName,msgType);
ObjectMessagePOJO objMsg=new ObjectMessagePOJO();
SimpleObjectMessagePOJO soPojo=new SimpleObjectMessagePOJO();
soPojo.setTxt(""String_Node_Str"");
objMsg.setObject(soPojo);
client.getProducer().produce(objMsg,MessageFormat.Object,appkey,queueName,msgType);
Thread.sleep(10000);
closer.closeConsumer();
client.close();
}",0.9509954058192956
167660,public Config find(long id);,"@Select(""String_Node_Str"") public Config find(long id);",0.6746987951807228
167661,public void save(Config configItem);,"@Insert(""String_Node_Str"") public void save(Config configItem);",0.7272727272727273
167662,public void update(Config config);,"@Update(""String_Node_Str"") public void update(Config config);",0.7157894736842105
167663,public void delete(long id);,"@Delete(""String_Node_Str"") public void delete(long id);",0.6746987951807228
167664,"@Override protected void onDraw(Canvas canvas){
  getDrawingRect(mRect);
  mRect.left+=getPaddingLeft() + mPadding;
  mRect.top+=getPaddingTop() + mPadding;
  mRect.right-=getPaddingRight() + mPadding;
  mRect.bottom-=getPaddingBottom() + mPadding;
  mRectF.set(mRect);
  mPaint.setAntiAlias(true);
  mPaint.setStrokeCap(Paint.Cap.BUTT);
  mPaint.setColor(mColor);
  canvas.drawArc(mRectF,-60,mProgress < 0 ? getMax() - 60 : mProgress * 300 / getMax(),!mHollow,mPaint);
}","@Override protected void onDraw(Canvas canvas){
  getDrawingRect(mRect);
  mRect.left+=getPaddingLeft() + mPadding;
  mRect.top+=getPaddingTop() + mPadding;
  mRect.right-=getPaddingRight() + mPadding;
  mRect.bottom-=getPaddingBottom() + mPadding;
  mRectF.set(mRect);
  mPaint.setAntiAlias(true);
  mPaint.setStrokeCap(Paint.Cap.BUTT);
  mPaint.setColor(mColor);
  canvas.drawArc(mRectF,-60,mProgress < 0 ? 300 : mProgress * 300 / getMax(),!mHollow,mPaint);
}",0.9849785407725322
167665,"@SuppressLint(""String_Node_Str"") @Override public void onCreate(){
  super.onCreate();
  Languager.setLanguage(this);
  IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
  registerReceiver(networkReceiver,filter);
  updateConnectedFlags();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  allowMobileData=sharedPrefs.getBoolean(SettingsFragment.PREF_KEY_MOBILE_DATA,true);
  alarmsMap=new HashMap<Integer,Alarm>();
  exchangesMap=new HashMap<String,Exchange>();
  alarmManager=(AlarmManager)getSystemService(ALARM_SERVICE);
  try {
    db=new DBManager(this);
    nextAlarmID=db.getMaxID();
    alarmsMap=db.getAlarms();
    if (nextAlarmID == 0) {
    }
    if (nextAlarmID > 0) {
      for (      Alarm alarm : alarmsMap.values()) {
        alarm.setExchange(getExchange(alarm.getExchangeCode()));
        if (alarm.isOn()) {
          addToAlarmManager(alarm,0);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e);
  }
}","@SuppressLint(""String_Node_Str"") @Override public void onCreate(){
  super.onCreate();
  Languager.setLanguage(this);
  IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
  registerReceiver(networkReceiver,filter);
  updateConnectedFlags();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  allowMobileData=sharedPrefs.getBoolean(SettingsFragment.PREF_KEY_MOBILE_DATA,true);
  alarmsMap=new HashMap<Integer,Alarm>();
  exchangesMap=new HashMap<String,Exchange>();
  alarmManager=(AlarmManager)getSystemService(ALARM_SERVICE);
  try {
    db=new DBManager(this);
    nextAlarmID=db.getMaxID();
    alarmsMap=db.getAlarms();
    if (alarmsMap.isEmpty()) {
    }
 else {
      for (      Alarm alarm : alarmsMap.values()) {
        alarm.setExchange(getExchange(alarm.getExchangeCode()));
        if (alarm.isOn()) {
          addToAlarmManager(alarm,0);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",e);
  }
}",0.9689067201604814
167666,"@Override public boolean onTouch(final View view,MotionEvent event){
  pointToPosition=pointToPosition == null ? enclosingActivity.getListView().pointToPosition((int)event.getX(),(int)event.getY()) : pointToPosition;
  View childView=mListView.getChildAt(pointToPosition);
  if (childView == null) {
    return false;
  }
  if (mSwipeSlop < 0) {
    mSwipeSlop=ViewConfiguration.get(enclosingActivity).getScaledTouchSlop();
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (mItemPressed) {
      return false;
    }
  mItemPressed=true;
mDownX=event.getX();
break;
case MotionEvent.ACTION_CANCEL:
childView.setAlpha(1);
childView.setTranslationX(0);
mItemPressed=false;
break;
case MotionEvent.ACTION_MOVE:
{
float x=event.getX() + view.getTranslationX();
float deltaX=x - mDownX;
float deltaXAbs=Math.abs(deltaX);
if (!mSwiping) {
if (deltaXAbs > mSwipeSlop) {
mSwiping=true;
mListView.requestDisallowInterceptTouchEvent(true);
}
}
if (mSwiping) {
childView.setTranslationX((x - mDownX));
childView.setAlpha(1 - deltaXAbs / view.getWidth());
}
}
break;
case MotionEvent.ACTION_UP:
{
if (mSwiping) {
float x=event.getX() + view.getTranslationX();
float deltaX=x - mDownX;
float deltaXAbs=Math.abs(deltaX);
float fractionCovered;
float endX;
float endAlpha;
final boolean remove;
if (deltaXAbs > view.getWidth() * REMOVE_THRESHOLD) {
fractionCovered=deltaXAbs / childView.getWidth();
endX=deltaX < 0 ? -view.getWidth() : view.getWidth();
endAlpha=0;
remove=true;
}
 else {
fractionCovered=1 - (deltaXAbs / view.getWidth());
endX=0;
endAlpha=1;
remove=false;
}
long duration=(int)((1 - fractionCovered) * SWIPE_DURATION);
mListView.setEnabled(false);
if (remove) {
AlarmListAdapter adapter=(AlarmListAdapter)enclosingActivity.getListAdapter();
Alarm alarm=adapter.getItem(pointToPosition);
if (enclosingActivity.ismBound()) {
enclosingActivity.getmStorageAndControlService().deleteAlarm(alarm);
adapter.remove(pointToPosition);
}
 else {
Log.d(""String_Node_Str"" + alarm.getId());
}
mSwiping=false;
mListView.setEnabled(true);
}
 else {
mSwiping=false;
mListView.setEnabled(true);
childView.setAlpha(1);
childView.setTranslationX(0);
}
}
 else {
return false;
}
}
pointToPosition=null;
mItemPressed=false;
break;
default :
return false;
}
return true;
}","@Override public boolean onTouch(final View view,MotionEvent event){
  pointToPosition=pointToPosition == -1 ? enclosingActivity.getListView().pointToPosition((int)event.getX(),(int)event.getY()) : pointToPosition;
  View childView=mListView.getChildAt(pointToPosition);
  Log.d(""String_Node_Str"" + pointToPosition);
  if (childView == null) {
    return false;
  }
  if (mSwipeSlop < 0) {
    mSwipeSlop=ViewConfiguration.get(enclosingActivity).getScaledTouchSlop();
  }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    if (mItemPressed) {
      return false;
    }
  mItemPressed=true;
mDownX=event.getX();
break;
case MotionEvent.ACTION_CANCEL:
childView.setAlpha(1);
childView.setTranslationX(0);
mItemPressed=false;
break;
case MotionEvent.ACTION_MOVE:
{
float x=event.getX() + view.getTranslationX();
float deltaX=x - mDownX;
float deltaXAbs=Math.abs(deltaX);
if (!mSwiping) {
if (deltaXAbs > mSwipeSlop) {
mSwiping=true;
mListView.requestDisallowInterceptTouchEvent(true);
}
}
if (mSwiping) {
childView.setTranslationX((x - mDownX));
childView.setAlpha(1 - deltaXAbs / view.getWidth());
}
}
break;
case MotionEvent.ACTION_UP:
{
if (mSwiping) {
float x=event.getX() + view.getTranslationX();
float deltaX=x - mDownX;
float deltaXAbs=Math.abs(deltaX);
float fractionCovered;
float endX;
float endAlpha;
final boolean remove;
if (deltaXAbs > view.getWidth() * REMOVE_THRESHOLD) {
fractionCovered=deltaXAbs / childView.getWidth();
endX=deltaX < 0 ? -view.getWidth() : view.getWidth();
endAlpha=0;
remove=true;
}
 else {
fractionCovered=1 - (deltaXAbs / view.getWidth());
endX=0;
endAlpha=1;
remove=false;
}
long duration=(int)((1 - fractionCovered) * SWIPE_DURATION);
mListView.setEnabled(false);
if (remove) {
AlarmListAdapter adapter=(AlarmListAdapter)enclosingActivity.getListAdapter();
Alarm alarm=adapter.getItem(pointToPosition);
if (enclosingActivity.ismBound()) {
enclosingActivity.getmStorageAndControlService().deleteAlarm(alarm);
adapter.remove(pointToPosition);
}
 else {
Log.d(""String_Node_Str"" + alarm.getId());
}
mSwiping=false;
mListView.setEnabled(true);
}
 else {
mSwiping=false;
mListView.setEnabled(true);
childView.setAlpha(1);
childView.setTranslationX(0);
}
}
 else {
return false;
}
}
pointToPosition=-1;
mItemPressed=false;
break;
default :
return false;
}
return true;
}",0.9637870855148342
167667,"@Override protected void execute(){
  @SuppressWarnings(""String_Node_Str"") Packet p;
  int i=-1;
  int substream_level=0;
  while (true) {
    if (substream_level == 0) {
      try {
        i=findInputPortElementWithData(inportArray);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (i == -1)       return;
    }
    p=inportArray[i].receive();
    if (p.getType() == Packet.OPEN)     substream_level++;
 else     if (p.getType() == Packet.CLOSE)     substream_level--;
    outport.send(p);
  }
}","@Override protected void execute(){
  @SuppressWarnings(""String_Node_Str"") Packet p=null;
  int i=-1;
  int substream_level=0;
  while (true) {
    if (substream_level != 0) {
      p=inportArray[i].receive();
      if (p == null)       break;
    }
 else {
      while (true) {
        try {
          i=findInputPortElementWithData(inportArray);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        if (i == -1)         return;
        p=inportArray[i].receive();
        if (p != null)         break;
      }
    }
    if (p.getType() == Packet.OPEN)     substream_level++;
 else     if (p.getType() == Packet.CLOSE)     substream_level--;
    outport.send(p);
  }
}",0.834920634920635
167668,"@Override protected void define(){
  boolean makeMergeSubstreamSensitive=true;
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.GenSS.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.LoadBalance.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.CheckSequenceWithinSubstreams.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  if (makeMergeSubstreamSensitive) {
    component(""String_Node_Str"",com.jpmorrsn.fbp.components.SubstreamSensitiveMerge.class);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  }
 else {
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  }
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  initialize(""String_Node_Str"",component(""String_Node_Str""),port(""String_Node_Str""));
}","@Override protected void define(){
  boolean makeMergeSubstreamSensitive=true;
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.GenSS.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.LoadBalance.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.CheckSequenceWithinSubstreams.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  if (makeMergeSubstreamSensitive) {
    component(""String_Node_Str"",com.jpmorrsn.fbp.components.SubstreamSensitiveMerge.class);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  }
 else {
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  }
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  initialize(""String_Node_Str"",component(""String_Node_Str""),port(""String_Node_Str""));
}",0.8238503507404521
167669,"/** 
 * This method is called from other parts of the system to activate this Component if it needs to be. This will start its thread if needed, and if already started, will notify() it.
 */
void activate(){
  if (isTerminated()) {
    return;
  }
  if (!isAlive()) {
    setPriority(priority);
    start();
  }
 else {
    mother.traceLocks(""String_Node_Str"" + getName());
    try {
      goLock.lockInterruptibly();
      if (status == StatusValues.DORMANT) {
        canGo.signal();
        mother.traceLocks(""String_Node_Str"" + getName());
      }
    }
 catch (    InterruptedException e) {
      return;
    }
 finally {
      goLock.unlock();
      mother.traceLocks(""String_Node_Str"" + getName());
    }
  }
}","/** 
 * This method is called from other parts of the system to activate this Component if it needs to be. This will start its thread if needed, and if already started, will notify() it.
 */
void activate(){
  if (isTerminated()) {
    return;
  }
  if (!isAlive()) {
    setPriority(priority);
    start();
  }
 else {
    mother.traceLocks(""String_Node_Str"" + getName());
    try {
      goLock.lockInterruptibly();
      if (status == StatusValues.DORMANT || status == StatusValues.SUSP_FIPE) {
        canGo.signal();
        mother.traceLocks(""String_Node_Str"" + getName());
      }
    }
 catch (    InterruptedException e) {
      return;
    }
 finally {
      goLock.unlock();
      mother.traceLocks(""String_Node_Str"" + getName());
    }
  }
}",0.9755102040816328
167670,"/** 
 * The send function. See OutputPort.send.
 */
@SuppressWarnings(""String_Node_Str"") synchronized boolean send(final Packet packet,final OutputPort op){
  sender=op.sender;
  Class c1=op.type;
  Class c2=packet.getContent().getClass();
  if (c1 != null && !c1.isAssignableFrom(c2)) {
    FlowError.complain(getName() + ""String_Node_Str"" + c2.getSimpleName()+ ""String_Node_Str""+ c1.getSimpleName());
  }
  if (isClosed()) {
    sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    return false;
  }
  while (isFull()) {
    if (dropOldest) {
      array[receivePtr]=null;
      if (capacity == (receivePtr=receivePtr + 1)) {
        receivePtr=0;
      }
      sender.network.dropOlds.getAndIncrement();
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
      usedSlots--;
    }
 else {
      sender.curOutPort=op;
      sender.status=Component.StatusValues.SUSP_SEND;
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
      try {
        wait();
      }
 catch (      InterruptedException e) {
        indicateOneSenderClosed();
        FlowError.complain(sender.getName() + ""String_Node_Str"");
        return false;
      }
      sender=op.sender;
      sender.status=Component.StatusValues.ACTIVE;
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    }
  }
  if (isClosed()) {
    sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    return false;
  }
  sender.mother.traceLocks(""String_Node_Str"" + getReceiver().getName());
  try {
    getReceiver().goLock.lockInterruptibly();
    packet.clearOwner();
    array[sendPtr]=packet;
    if (capacity == (sendPtr=sendPtr + 1)) {
      sendPtr=0;
    }
    usedSlots++;
    if (getReceiver().getStatus() == Component.StatusValues.DORMANT || getReceiver().getStatus() == Component.StatusValues.NOT_STARTED) {
      getReceiver().activate();
    }
 else {
      notifyAll();
    }
    op.sender.status=Component.StatusValues.ACTIVE;
    sender.network.active=true;
  }
 catch (  InterruptedException ex) {
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
 finally {
    getReceiver().goLock.unlock();
    getReceiver().mother.traceLocks(""String_Node_Str"" + getReceiver().getName());
  }
  sender.network.sends.getAndIncrement();
  sender=null;
  return true;
}","/** 
 * The send function. See OutputPort.send.
 */
@SuppressWarnings(""String_Node_Str"") synchronized boolean send(final Packet packet,final OutputPort op){
  sender=op.sender;
  Class c1=op.type;
  Class c2=packet.getContent().getClass();
  if (c1 != null && !c1.isAssignableFrom(c2)) {
    FlowError.complain(getName() + ""String_Node_Str"" + c2.getSimpleName()+ ""String_Node_Str""+ c1.getSimpleName());
  }
  if (isClosed()) {
    sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    return false;
  }
  while (isFull()) {
    if (dropOldest) {
      array[receivePtr]=null;
      if (capacity == (receivePtr=receivePtr + 1)) {
        receivePtr=0;
      }
      sender.network.dropOlds.getAndIncrement();
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
      usedSlots--;
    }
 else {
      sender.curOutPort=op;
      sender.status=Component.StatusValues.SUSP_SEND;
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
      try {
        wait();
      }
 catch (      InterruptedException e) {
        indicateOneSenderClosed();
        FlowError.complain(sender.getName() + ""String_Node_Str"");
        return false;
      }
      sender=op.sender;
      sender.status=Component.StatusValues.ACTIVE;
      sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    }
  }
  if (isClosed()) {
    sender.mother.traceFuncs(sender.getName() + ""String_Node_Str"");
    return false;
  }
  sender.mother.traceLocks(""String_Node_Str"" + getReceiver().getName());
  try {
    getReceiver().goLock.lockInterruptibly();
    packet.clearOwner();
    array[sendPtr]=packet;
    if (capacity == (sendPtr=sendPtr + 1)) {
      sendPtr=0;
    }
    usedSlots++;
    if (getReceiver().getStatus() == Component.StatusValues.DORMANT || getReceiver().getStatus() == Component.StatusValues.NOT_STARTED || getReceiver().getStatus() == Component.StatusValues.SUSP_FIPE) {
      getReceiver().activate();
    }
 else {
      notifyAll();
    }
    op.sender.status=Component.StatusValues.ACTIVE;
    sender.network.active=true;
  }
 catch (  InterruptedException ex) {
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
 finally {
    getReceiver().goLock.unlock();
    getReceiver().mother.traceLocks(""String_Node_Str"" + getReceiver().getName());
  }
  sender.network.sends.getAndIncrement();
  sender=null;
  return true;
}",0.9863301787592008
167671,"@Override protected void define(){
  boolean makeMergeSubstreamSensitive=true;
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.GenSS.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.LoadBalance.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.Passthru.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.CheckSequenceWithinSubstreams.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),1);
  if (makeMergeSubstreamSensitive) {
    component(""String_Node_Str"",com.jpmorrsn.fbp.components.SubstreamSensitiveMerge.class);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  }
 else {
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  }
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  initialize(""String_Node_Str"",component(""String_Node_Str""),port(""String_Node_Str""));
}","@Override protected void define(){
  boolean makeMergeSubstreamSensitive=true;
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.GenSS.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.LoadBalance.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.Passthru.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.SlowPass.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.CheckSequenceWithinSubstreams.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),7);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),7);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),7);
  if (makeMergeSubstreamSensitive) {
    component(""String_Node_Str"",com.jpmorrsn.fbp.components.SubstreamSensitiveMerge.class);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  }
 else {
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
    connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),2);
  }
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""),4);
  initialize(""String_Node_Str"",component(""String_Node_Str""),port(""String_Node_Str""));
}",0.9988267500977708
167672,"void buildNote(final int note,final int duration,final float sampleRate){
  double RAD=2.0 * Math.PI;
  int gap=25;
  int samples=(int)(duration * sampleRate / 1000);
  boolean note_ending=false, note_ended=false;
  int savex=0;
  for (int i=0; i < samples; i++) {
    if (note == 0) {
      x=0;
    }
 else     if (!note_ended) {
      x=(int)(32767.0 * Math.sin(RAD * note * i / sampleRate));
      if (note_ending) {
        if (Math.signum(x) != Math.signum(savex)) {
          note_ended=true;
          x=savex=0;
        }
      }
 else       if (i >= samples - gap * sampleRate / 1000) {
        note_ending=true;
        savex=x;
      }
    }
    String s=new Integer(x).toString();
    traceport.send(create(s));
    buf[curSlot + 1]=(byte)(x % 256);
    buf[curSlot + 0]=(byte)(x / 256);
    curSlot+=2;
    if (curSlot >= buf.length) {
      outport.send(create(buf));
      buf=new byte[bufferSize];
      curSlot=0;
    }
  }
}","void buildNote(final int note,final int duration,final float sampleRate){
  double RAD=2.0 * Math.PI;
  int gap=25;
  int samples=(int)(duration * sampleRate / 1000);
  boolean note_ending=false, note_ended=false;
  int savex=0;
  for (int i=0; i < samples; i++) {
    if (note == 0) {
      x=0;
    }
 else     if (!note_ended) {
      x=(int)(32767.0 * Math.sin(RAD * note * i / sampleRate));
      if (note_ending) {
        if (Math.signum(x) != Math.signum(savex)) {
          note_ended=true;
          x=savex=0;
        }
      }
 else       if (i >= samples - gap * sampleRate / 1000) {
        note_ending=true;
        savex=x;
      }
    }
    String s=new Integer(x).toString();
    buf[curSlot + 1]=(byte)(x % 256);
    buf[curSlot + 0]=(byte)(x / 256);
    curSlot+=2;
    if (curSlot >= buf.length) {
      outport.send(create(buf));
      buf=new byte[bufferSize];
      curSlot=0;
    }
  }
}",0.983288409703504
167673,"@Override protected void define(){
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.ReadFile.class);
  component(""String_Node_Str"",Text2IntArray.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.SoundMixer.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  initialize(""String_Node_Str"".replace(""String_Node_Str"",File.separator),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(""String_Node_Str"",""String_Node_Str"");
}","@Override protected void define(){
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.ReadFile.class);
  component(""String_Node_Str"",Text2IntArray.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.SoundMixer.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  initialize(""String_Node_Str"".replace(""String_Node_Str"",File.separator),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(""String_Node_Str"",""String_Node_Str"");
  initialize(""String_Node_Str"",""String_Node_Str"");
}",0.9044025157232704
167674,"@Override protected void define(){
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells2.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells3.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells4.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.SoundMixer.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.WriteToConsole.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  initialize(""String_Node_Str"",""String_Node_Str"");
}","@Override protected void define(){
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells2.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells3.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.examples.components.JingleBells4.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.GenSamples.class);
  component(""String_Node_Str"",com.jpmorrsn.fbp.components.SoundMixer.class);
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(component(""String_Node_Str""),port(""String_Node_Str""),component(""String_Node_Str""),port(""String_Node_Str""));
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  connect(""String_Node_Str"",""String_Node_Str"");
  initialize(""String_Node_Str"",""String_Node_Str"");
}",0.9734860883797054
167675,"public int[] read() throws InterruptedException, IOException {
  initializeConnection();
  ActionDecoder decoder=new ActionDecoder();
  final int[][] key={null};
  readingThread=Thread.currentThread();
  Consumer<Signal> prevHandler=connection.getSignalHandler();
  connection.setSignalHandler(interruptHandler);
  CountDownLatch latch=new CountDownLatch(1);
  Attributes attributes=connection.enterRawMode();
  connection.setStdinHandler(keys -> {
    decoder.add(keys);
    if (decoder.hasNext()) {
      key[0]=decoder.next().buffer().array();
      latch.countDown();
    }
  }
);
  try {
    latch.await();
  }
  finally {
    connection.setStdinHandler(null);
    connection.setSignalHandler(prevHandler);
    readingThread=null;
  }
  return key[0];
}","public int[] read() throws InterruptedException, IOException {
  initializeConnection();
  ActionDecoder decoder=new ActionDecoder();
  final int[][] key={null};
  readingThread=Thread.currentThread();
  Consumer<Signal> prevHandler=connection.getSignalHandler();
  connection.setSignalHandler(interruptHandler);
  CountDownLatch latch=new CountDownLatch(1);
  Attributes attributes=connection.enterRawMode();
  connection.setStdinHandler(keys -> {
    decoder.add(keys);
    if (decoder.hasNext()) {
      key[0]=decoder.next().buffer().array();
      connection.setStdinHandler(null);
      latch.countDown();
    }
  }
);
  try {
    latch.await();
  }
  finally {
    connection.setSignalHandler(prevHandler);
    connection.setAttributes(attributes);
    readingThread=null;
  }
  return key[0];
}",0.9230769230769232
167676,"private static void addInterfaces(Class<?> c,Set<Class<?>> interfaces){
  for (  Class<?> i : c.getInterfaces()) {
    if (!interfaces.contains(i)) {
      interfaces.add(i);
      addInterfaces(i,interfaces);
    }
  }
}","private static void addInterfaces(Class<?> c,List<Class<?>> interfaces){
  for (  Class<?> i : c.getInterfaces()) {
    if (!interfaces.contains(i)) {
      interfaces.add(i);
      addInterfaces(i,interfaces);
    }
  }
}",0.9887133182844244
167677,"@Override public void handle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine line=ctx.getParsedCommandLine();
  if (line.getFormat() == CommandFormat.INSTANCE) {
    if (line.hasProperty(""String_Node_Str"") || line.hasProperty(""String_Node_Str"")) {
      registration.handle(line);
      return;
    }
    final String cmd=line.getOperationName();
    if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      registration.handle(line);
    }
 else {
      addLine(line);
    }
  }
 else {
    addLine(line);
  }
}","@Override public void handle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine line=ctx.getParsedCommandLine();
  if (line.getFormat() == CommandFormat.INSTANCE) {
    if (line.hasProperty(""String_Node_Str"") || line.hasProperty(""String_Node_Str"")) {
      registration.handle(line);
      return;
    }
    final String cmd=line.getOperationName();
    if (""String_Node_Str"".equals(cmd)) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      registration.handle(line);
    }
 else {
      addLine(line);
    }
  }
 else {
    addLine(line);
  }
}",0.9133986928104576
167678,"@Override public void handle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine line=ctx.getParsedCommandLine();
  if (line.getFormat() == CommandFormat.INSTANCE) {
    if (line.hasProperty(""String_Node_Str"") || line.hasProperty(""String_Node_Str"")) {
      registration.handle(line);
      return;
    }
    final String cmd=line.getOperationName();
    if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      registration.handle(line);
    }
 else {
      addLine(line.getOriginalLine());
    }
  }
 else {
    addLine(line.getOriginalLine());
  }
}","@Override public void handle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine line=ctx.getParsedCommandLine();
  if (line.getFormat() == CommandFormat.INSTANCE) {
    if (line.hasProperty(""String_Node_Str"") || line.hasProperty(""String_Node_Str"")) {
      registration.handle(line);
      return;
    }
    final String cmd=line.getOperationName();
    if (""String_Node_Str"".equals(cmd)) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      registration.handle(line);
    }
 else {
      addLine(line.getOriginalLine());
    }
  }
 else {
    addLine(line.getOriginalLine());
  }
}",0.922173274596182
167679,"private void resetArgs(String cmdLine) throws CommandFormatException {
  if (cmdLine != null) {
    parsedCmd.parse(prefix,cmdLine,this);
    setOutputTarget(parsedCmd.getOutputTarget());
  }
  this.cmdLine=cmdLine;
}","private void resetArgs(String cmdLine) throws CommandFormatException {
  if (cmdLine != null) {
    parsedCmd.parse(prefix,cmdLine,this,redirection != null);
    setOutputTarget(parsedCmd.getOutputTarget());
  }
  this.cmdLine=cmdLine;
}",0.9559471365638766
167680,"public static SubstitutedLine parseLine(String commandLine,final CommandLineParser.CallbackHandler handler,boolean strict,CommandContext ctx) throws CommandFormatException {
  if (commandLine == null) {
    return null;
  }
  final ParsingStateCallbackHandler callbackHandler=getCallbackHandler(handler);
  return StateParser.parseLine(commandLine,callbackHandler,InitialState.INSTANCE,strict,ctx);
}","public static SubstitutedLine parseLine(String commandLine,final CommandLineParser.CallbackHandler handler,boolean strict,CommandContext ctx,boolean disableResolutionException) throws CommandFormatException {
  if (commandLine == null) {
    return null;
  }
  final ParsingStateCallbackHandler callbackHandler=getCallbackHandler(handler);
  return StateParser.parseLine(commandLine,callbackHandler,InitialState.INSTANCE,strict,disableResolutionException,ctx);
}",0.9280742459396752
167681,"/** 
 * Returns the string which was actually parsed with all the substitutions performed
 */
protected static SubstitutedLine doParse(String str,ParsingStateCallbackHandler callbackHandler,ParsingState initialState,boolean strict,CommandContext cmdCtx) throws CommandFormatException {
  if (str == null || str.isEmpty()) {
    return new SubstitutedLine(str);
  }
  ParsingContextImpl ctx=new ParsingContextImpl();
  ctx.initialState=initialState;
  ctx.callbackHandler=callbackHandler;
  ctx.input=str;
  ctx.strict=strict;
  ctx.cmdCtx=cmdCtx;
  ctx.substitued.substitued=ctx.parse();
  return ctx.substitued;
}","/** 
 * Returns the string which was actually parsed with all the substitutions performed
 */
protected static SubstitutedLine doParse(String str,ParsingStateCallbackHandler callbackHandler,ParsingState initialState,boolean strict,boolean disableResolutionException,CommandContext cmdCtx) throws CommandFormatException {
  if (str == null || str.isEmpty()) {
    return new SubstitutedLine(str);
  }
  ParsingContextImpl ctx=new ParsingContextImpl();
  ctx.initialState=initialState;
  ctx.callbackHandler=callbackHandler;
  ctx.input=str;
  ctx.strict=strict;
  ctx.cmdCtx=cmdCtx;
  ctx.disableResolutionException=disableResolutionException;
  ctx.substitued.substitued=ctx.parse();
  return ctx.substitued;
}",0.9274924471299094
167682,"private void substituteVariable(boolean exceptionIfNotResolved) throws UnresolvedVariableException {
  int endIndex=location + 1;
  char c=input.charAt(endIndex);
  if (endIndex >= input.length() || !(Character.isJavaIdentifierStart(c) && c != '$')) {
    return;
  }
  while (++endIndex < input.length()) {
    c=input.charAt(endIndex);
    if (!(Character.isJavaIdentifierPart(c) && c != '$')) {
      break;
    }
  }
  final String name=input.substring(location + 1,endIndex);
  final String value=cmdCtx == null ? null : cmdCtx.getVariable(name);
  if (value == null) {
    if (exceptionIfNotResolved) {
      throw new UnresolvedVariableException(name,""String_Node_Str"" + name);
    }
  }
 else {
    substitued.add(""String_Node_Str"" + name,value,location);
    StringBuilder buf=new StringBuilder(input.length() - name.length() + value.length());
    buf.append(input.substring(0,location)).append(value);
    if (endIndex < input.length()) {
      buf.append(input.substring(endIndex));
    }
    input=buf.toString();
    ch=input.charAt(location);
  }
}","private void substituteVariable(boolean exceptionIfNotResolved) throws UnresolvedVariableException {
  int endIndex=location + 1;
  char c=input.charAt(endIndex);
  if (endIndex >= input.length() || !(Character.isJavaIdentifierStart(c) && c != '$')) {
    return;
  }
  while (++endIndex < input.length()) {
    c=input.charAt(endIndex);
    if (!(Character.isJavaIdentifierPart(c) && c != '$')) {
      break;
    }
  }
  final String name=input.substring(location + 1,endIndex);
  final String value=cmdCtx == null ? null : cmdCtx.getVariable(name);
  if (value == null) {
    if (exceptionIfNotResolved && !disableResolutionException) {
      throw new UnresolvedVariableException(name,""String_Node_Str"" + name);
    }
  }
 else {
    substitued.add(""String_Node_Str"" + name,value,location);
    StringBuilder buf=new StringBuilder(input.length() - name.length() + value.length());
    buf.append(input.substring(0,location)).append(value);
    if (endIndex < input.length()) {
      buf.append(input.substring(endIndex));
    }
    input=buf.toString();
    ch=input.charAt(location);
  }
}",0.985628187297172
167683,"public static SubstitutedLine parseLine(String str,ParsingStateCallbackHandler callbackHandler,ParsingState initialState,boolean strict,CommandContext ctx) throws CommandFormatException {
  try {
    return doParse(str,callbackHandler,initialState,strict,ctx);
  }
 catch (  CommandFormatException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new CommandFormatException(""String_Node_Str"" + str + ""String_Node_Str"",t);
  }
}","public static SubstitutedLine parseLine(String str,ParsingStateCallbackHandler callbackHandler,ParsingState initialState,boolean strict,boolean disableResolutionException,CommandContext ctx) throws CommandFormatException {
  try {
    return doParse(str,callbackHandler,initialState,strict,disableResolutionException,ctx);
  }
 catch (  CommandFormatException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new CommandFormatException(""String_Node_Str"" + str + ""String_Node_Str"",t);
  }
}",0.9333333333333332
167684,"@Test public void testForIf() throws Exception {
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    checkEmpty();
  }
  finally {
    removeProperties();
  }
}","@Test public void testForIf() throws Exception {
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"");
    checkEmpty();
  }
  finally {
    removeProperties();
  }
}",0.9385382059800664
167685,"public AttachmentHandler(CommandContext ctx){
  super(ctx,""String_Node_Str"",true);
  action=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      if (buffer == null || buffer.isEmpty()) {
        candidates.add(DISPLAY);
        candidates.add(SAVE);
        return cursor;
      }
      if (buffer.equals(DISPLAY) || buffer.equals(SAVE)) {
        candidates.add(""String_Node_Str"");
        return cursor;
      }
      if (DISPLAY.startsWith(buffer)) {
        candidates.add(DISPLAY + ""String_Node_Str"");
        return 0;
      }
      if (SAVE.startsWith(buffer)) {
        candidates.add(SAVE + ""String_Node_Str"");
        return 0;
      }
      return -1;
    }
  }
,0,""String_Node_Str"");
  operation=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(originalLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < originalLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 3) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      String cmd;
      if (wordCount == 1) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 3) {
        return -1;
      }
 else {
        cmd=originalLine.substring(cmdStart);
        int i=cmd.indexOf(""String_Node_Str"");
        if (i > 0) {
          if (i == cmd.length() - 1) {
            cmd=""String_Node_Str"";
          }
 else {
            cmd=cmd.substring(i + 1);
          }
        }
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=originalLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=originalLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      String act=getAction(ctx);
      if (!(SAVE.equals(act) || DISPLAY.equals(act))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addRequiredPreceding(action);
  final FilenameTabCompleter pathCompleter=FilenameTabCompleter.newCompleter(ctx);
  targetFile=new FileSystemPathArgument(this,pathCompleter,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!(SAVE.equals(getAction(ctx)))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  targetFile.addRequiredPreceding(operation);
  overwrite=new ArgumentWithoutValue(this,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!(SAVE.equals(getAction(ctx)))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  headers.addRequiredPreceding(operation);
}","public AttachmentHandler(CommandContext ctx){
  super(ctx,""String_Node_Str"",true);
  action=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      if (buffer == null || buffer.isEmpty()) {
        candidates.add(DISPLAY);
        candidates.add(SAVE);
        return cursor;
      }
      if (buffer.equals(DISPLAY) || buffer.equals(SAVE)) {
        candidates.add(""String_Node_Str"");
        return cursor;
      }
      if (DISPLAY.startsWith(buffer)) {
        candidates.add(DISPLAY + ""String_Node_Str"");
        return 0;
      }
      if (SAVE.startsWith(buffer)) {
        candidates.add(SAVE + ""String_Node_Str"");
        return 0;
      }
      return -1;
    }
  }
,0,""String_Node_Str"");
  operation=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String substitutedLine=ctx.getParsedCommandLine().getSubstitutedLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(substitutedLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < substitutedLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 3) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      String cmd;
      if (wordCount == 1) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 3) {
        return -1;
      }
 else {
        cmd=substitutedLine.substring(cmdStart);
        int i=cmd.indexOf(""String_Node_Str"");
        if (i > 0) {
          if (i == cmd.length() - 1) {
            cmd=""String_Node_Str"";
          }
 else {
            cmd=cmd.substring(i + 1);
          }
        }
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=substitutedLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=substitutedLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      String act=getAction(ctx);
      if (!(SAVE.equals(act) || DISPLAY.equals(act))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addRequiredPreceding(action);
  final FilenameTabCompleter pathCompleter=FilenameTabCompleter.newCompleter(ctx);
  targetFile=new FileSystemPathArgument(this,pathCompleter,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!(SAVE.equals(getAction(ctx)))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  targetFile.addRequiredPreceding(operation);
  overwrite=new ArgumentWithoutValue(this,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!(SAVE.equals(getAction(ctx)))) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  headers.addRequiredPreceding(operation);
}",0.9777893232887388
167686,"@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(originalLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < originalLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 3) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  String cmd;
  if (wordCount == 1) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 3) {
    return -1;
  }
 else {
    cmd=originalLine.substring(cmdStart);
    int i=cmd.indexOf(""String_Node_Str"");
    if (i > 0) {
      if (i == cmd.length() - 1) {
        cmd=""String_Node_Str"";
      }
 else {
        cmd=cmd.substring(i + 1);
      }
    }
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=originalLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=originalLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}","@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String substitutedLine=ctx.getParsedCommandLine().getSubstitutedLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(substitutedLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < substitutedLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 3) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  String cmd;
  if (wordCount == 1) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 3) {
    return -1;
  }
 else {
    cmd=substitutedLine.substring(cmdStart);
    int i=cmd.indexOf(""String_Node_Str"");
    if (i > 0) {
      if (i == cmd.length() - 1) {
        cmd=""String_Node_Str"";
      }
 else {
        cmd=cmd.substring(i + 1);
      }
    }
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=substitutedLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=substitutedLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}",0.9468118195956454
167687,"public EchoDMRHandler(){
  super(""String_Node_Str"");
  new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(originalLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < originalLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 2) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      final String cmd;
      if (wordCount == 1) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 2) {
        return -1;
      }
 else {
        cmd=originalLine.substring(cmdStart);
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=originalLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=originalLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
}","public EchoDMRHandler(){
  super(""String_Node_Str"");
  new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String substituedLine=ctx.getParsedCommandLine().getSubstitutedLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(substituedLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < substituedLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(substituedLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 2) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(substituedLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      final String cmd;
      if (wordCount == 1) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 2) {
        return -1;
      }
 else {
        cmd=substituedLine.substring(cmdStart);
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=substituedLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=substituedLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
}",0.7088537330002775
167688,"@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(originalLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < originalLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 2) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  final String cmd;
  if (wordCount == 1) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 2) {
    return -1;
  }
 else {
    cmd=originalLine.substring(cmdStart);
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=originalLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=originalLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}","@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String substituedLine=ctx.getParsedCommandLine().getSubstitutedLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(substituedLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < substituedLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(substituedLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 2) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(substituedLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  final String cmd;
  if (wordCount == 1) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 2) {
    return -1;
  }
 else {
    cmd=substituedLine.substring(cmdStart);
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=substituedLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=substituedLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}",0.7222808870116156
167689,"@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String lnStr=ln.getValue(ctx.getParsedCommandLine());
  if (lnStr == null) {
    return -1;
  }
  final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(originalLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < originalLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 3) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  final String cmd;
  if (wordCount == 2) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 3) {
    return -1;
  }
 else {
    cmd=originalLine.substring(cmdStart);
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=originalLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=originalLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}","@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final String lnStr=ln.getValue(ctx.getParsedCommandLine());
  if (lnStr == null) {
    return -1;
  }
  final String substitutedLine=ctx.getParsedCommandLine().getSubstitutedLine();
  boolean skipWS;
  int wordCount;
  if (Character.isWhitespace(substitutedLine.charAt(0))) {
    skipWS=true;
    wordCount=0;
  }
 else {
    skipWS=false;
    wordCount=1;
  }
  int cmdStart=1;
  while (cmdStart < substitutedLine.length()) {
    if (skipWS) {
      if (!Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
        skipWS=false;
        ++wordCount;
        if (wordCount == 3) {
          break;
        }
      }
    }
 else     if (Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
      skipWS=true;
    }
    ++cmdStart;
  }
  final String cmd;
  if (wordCount == 2) {
    cmd=""String_Node_Str"";
  }
 else   if (wordCount != 3) {
    return -1;
  }
 else {
    cmd=substitutedLine.substring(cmdStart);
  }
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=substitutedLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=substitutedLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}",0.9440628066732092
167690,"public BatchEditLineHandler(){
  super(""String_Node_Str"");
  ln=new ArgumentWithValue(this,0,""String_Node_Str"");
  ln.addCantAppearAfter(helpArg);
  ArgumentWithValue line=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String lnStr=ln.getValue(ctx.getParsedCommandLine());
      if (lnStr == null) {
        return -1;
      }
      final String originalLine=ctx.getParsedCommandLine().getOriginalLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(originalLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < originalLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(originalLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 3) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(originalLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      final String cmd;
      if (wordCount == 2) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 3) {
        return -1;
      }
 else {
        cmd=originalLine.substring(cmdStart);
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=originalLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=originalLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
  line.addRequiredPreceding(ln);
}","public BatchEditLineHandler(){
  super(""String_Node_Str"");
  ln=new ArgumentWithValue(this,0,""String_Node_Str"");
  ln.addCantAppearAfter(helpArg);
  ArgumentWithValue line=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final String lnStr=ln.getValue(ctx.getParsedCommandLine());
      if (lnStr == null) {
        return -1;
      }
      final String substitutedLine=ctx.getParsedCommandLine().getSubstitutedLine();
      boolean skipWS;
      int wordCount;
      if (Character.isWhitespace(substitutedLine.charAt(0))) {
        skipWS=true;
        wordCount=0;
      }
 else {
        skipWS=false;
        wordCount=1;
      }
      int cmdStart=1;
      while (cmdStart < substitutedLine.length()) {
        if (skipWS) {
          if (!Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
            skipWS=false;
            ++wordCount;
            if (wordCount == 3) {
              break;
            }
          }
        }
 else         if (Character.isWhitespace(substitutedLine.charAt(cmdStart))) {
          skipWS=true;
        }
        ++cmdStart;
      }
      final String cmd;
      if (wordCount == 2) {
        cmd=""String_Node_Str"";
      }
 else       if (wordCount != 3) {
        return -1;
      }
 else {
        cmd=substitutedLine.substring(cmdStart);
      }
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=substitutedLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=substitutedLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
  line.addRequiredPreceding(ln);
}",0.9588051072030837
167691,"public IfHandler(){
  super(""String_Node_Str"",true);
  condition=new ConditionArgument(this);
  condition.addCantAppearAfter(helpArg);
  of=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      return Collections.singletonList(""String_Node_Str"");
    }
  }
),1,""String_Node_Str"");
  of.addRequiredPreceding(condition);
  final ArgumentWithValue line=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final ParsedCommandLine args=ctx.getParsedCommandLine();
      final String lnStr=of.getValue(args);
      if (lnStr == null) {
        return -1;
      }
      final String originalLine=args.getOriginalLine();
      String conditionStr;
      try {
        conditionStr=condition.getValue(args,true);
      }
 catch (      CommandFormatException e) {
        return -1;
      }
      int i=originalLine.indexOf(conditionStr);
      if (i < 0) {
        return -1;
      }
      i=originalLine.indexOf(""String_Node_Str"",i + conditionStr.length());
      if (i < 0) {
        return -1;
      }
      final String cmd=originalLine.substring(i + 3);
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=originalLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=originalLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
  line.addRequiredPreceding(of);
}","public IfHandler(){
  super(""String_Node_Str"",true);
  condition=new ConditionArgument(this);
  condition.addCantAppearAfter(helpArg);
  of=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      return Collections.singletonList(""String_Node_Str"");
    }
  }
),1,""String_Node_Str"");
  of.addRequiredPreceding(condition);
  final ArgumentWithValue line=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final ParsedCommandLine args=ctx.getParsedCommandLine();
      final String lnStr=of.getValue(args);
      if (lnStr == null) {
        return -1;
      }
      final String substitutedLine=args.getSubstitutedLine();
      String conditionStr;
      try {
        conditionStr=condition.getValue(args,true);
      }
 catch (      CommandFormatException e) {
        return -1;
      }
      int i=substitutedLine.indexOf(conditionStr);
      if (i < 0) {
        return -1;
      }
      i=substitutedLine.indexOf(""String_Node_Str"",i + conditionStr.length());
      if (i < 0) {
        return -1;
      }
      final String cmd=substitutedLine.substring(i + 3);
      int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
      if (cmdResult < 0) {
        return cmdResult;
      }
      int escapeCorrection=0;
      int start=substitutedLine.length() - 1 - buffer.length();
      while (start - escapeCorrection >= 0) {
        final char ch=substitutedLine.charAt(start - escapeCorrection);
        if (Character.isWhitespace(ch) || ch == '=') {
          break;
        }
        ++escapeCorrection;
      }
      return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
    }
  }
,Integer.MAX_VALUE,""String_Node_Str""){
  }
;
  line.addRequiredPreceding(of);
}",0.9658185556412232
167692,"@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String lnStr=of.getValue(args);
  if (lnStr == null) {
    return -1;
  }
  final String originalLine=args.getOriginalLine();
  String conditionStr;
  try {
    conditionStr=condition.getValue(args,true);
  }
 catch (  CommandFormatException e) {
    return -1;
  }
  int i=originalLine.indexOf(conditionStr);
  if (i < 0) {
    return -1;
  }
  i=originalLine.indexOf(""String_Node_Str"",i + conditionStr.length());
  if (i < 0) {
    return -1;
  }
  final String cmd=originalLine.substring(i + 3);
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=originalLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=originalLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}","@Override public int complete(CommandContext ctx,String buffer,int cursor,List<String> candidates){
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String lnStr=of.getValue(args);
  if (lnStr == null) {
    return -1;
  }
  final String substitutedLine=args.getSubstitutedLine();
  String conditionStr;
  try {
    conditionStr=condition.getValue(args,true);
  }
 catch (  CommandFormatException e) {
    return -1;
  }
  int i=substitutedLine.indexOf(conditionStr);
  if (i < 0) {
    return -1;
  }
  i=substitutedLine.indexOf(""String_Node_Str"",i + conditionStr.length());
  if (i < 0) {
    return -1;
  }
  final String cmd=substitutedLine.substring(i + 3);
  int cmdResult=ctx.getDefaultCommandCompleter().complete(ctx,cmd,cmd.length(),candidates);
  if (cmdResult < 0) {
    return cmdResult;
  }
  int escapeCorrection=0;
  int start=substitutedLine.length() - 1 - buffer.length();
  while (start - escapeCorrection >= 0) {
    final char ch=substitutedLine.charAt(start - escapeCorrection);
    if (Character.isWhitespace(ch) || ch == '=') {
      break;
    }
    ++escapeCorrection;
  }
  return buffer.length() + escapeCorrection - (cmd.length() - cmdResult);
}",0.9436679373146972
167693,"protected int complete(CommandContext ctx,ParsedCommandLine parsedCmd,OperationCandidatesProvider candidatesProvider,final String buffer,int cursor,List<String> candidates){
  if (parsedCmd.isRequestComplete()) {
    return -1;
  }
  if (parsedCmd.endsOnHeaderListStart() || parsedCmd.hasHeaders()) {
    final Map<String,OperationRequestHeader> headers=candidatesProvider.getHeaders(ctx);
    if (headers.isEmpty()) {
      return -1;
    }
    int result=buffer.length();
    if (parsedCmd.getLastHeaderName() != null) {
      if (buffer.endsWith(parsedCmd.getLastHeaderName())) {
        result=parsedCmd.getLastChunkIndex();
        for (        String name : headers.keySet()) {
          if (name.equals(parsedCmd.getLastHeaderName())) {
            result=completeHeader(headers,ctx,parsedCmd,buffer,cursor,candidates);
            break;
          }
          if (!parsedCmd.hasHeader(name) && name.startsWith(parsedCmd.getLastHeaderName())) {
            candidates.add(name);
          }
        }
      }
 else {
        result=completeHeader(headers,ctx,parsedCmd,buffer,cursor,candidates);
      }
    }
 else {
      if (!parsedCmd.hasHeaders()) {
        candidates.addAll(headers.keySet());
      }
 else       if (parsedCmd.endsOnHeaderSeparator()) {
        candidates.addAll(headers.keySet());
        for (        ParsedOperationRequestHeader parsed : parsedCmd.getHeaders()) {
          candidates.remove(parsed.getName());
        }
      }
 else {
        final ParsedOperationRequestHeader lastParsedHeader=parsedCmd.getLastHeader();
        final OperationRequestHeader lastHeader=headers.get(lastParsedHeader.getName());
        if (lastHeader == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=lastHeader.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        result=headerCompleter.complete(ctx,buffer,cursor,candidates);
      }
    }
    Collections.sort(candidates);
    return result;
  }
  if (parsedCmd.endsOnPropertyListEnd()) {
    return buffer.length();
  }
  if (parsedCmd.hasProperties() || parsedCmd.endsOnPropertyListStart() || parsedCmd.endsOnNotOperator()) {
    if (!parsedCmd.hasOperationName()) {
      return -1;
    }
    final Collection<CommandArgument> allArgs=candidatesProvider.getProperties(ctx,parsedCmd.getOperationName(),parsedCmd.getAddress());
    if (allArgs.isEmpty()) {
      final CommandLineFormat format=parsedCmd.getFormat();
      if (!parsedCmd.hasProperties() && format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
        candidates.add(format.getPropertyListEnd());
      }
      return buffer.length();
    }
    try {
      if (parsedCmd.endsOnNotOperator()) {
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (!arg.isValueRequired()) {
              candidates.add(arg.getFullName());
            }
          }
        }
        Collections.sort(candidates);
        return buffer.length();
      }
      if (!parsedCmd.hasProperties()) {
        boolean needNeg=false;
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (arg.getIndex() >= 0) {
              final CommandLineCompleter valCompl=arg.getValueCompleter();
              if (valCompl != null) {
                valCompl.complete(ctx,""String_Node_Str"",0,candidates);
              }
            }
 else {
              String argName=arg.getFullName();
              candidates.add(argName);
              if (!arg.isValueRequired()) {
                needNeg=true;
              }
            }
          }
        }
        if (needNeg) {
          candidates.add(Util.NOT_OPERATOR);
        }
        Collections.sort(candidates);
        return buffer.length();
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
    int result=buffer.length();
    String chunk=null;
    CommandLineCompleter valueCompleter=null;
    if (!parsedCmd.endsOnPropertySeparator()) {
      final String argName=parsedCmd.getLastParsedPropertyName();
      final String argValue=parsedCmd.getLastParsedPropertyValue();
      if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
        result=parsedCmd.getLastChunkIndex();
        if (parsedCmd.endsOnPropertyValueSeparator()) {
          ++result;
        }
        chunk=argValue;
        if (argName != null) {
          valueCompleter=getValueCompleter(ctx,allArgs,argName);
        }
 else {
          valueCompleter=getValueCompleter(ctx,allArgs,parsedCmd.getOtherProperties().size() - 1);
        }
        if (valueCompleter == null) {
          if (parsedCmd.endsOnSeparator()) {
            return -1;
          }
          for (          CommandArgument arg : allArgs) {
            try {
              if (arg.canAppearNext(ctx) && !arg.getFullName().equals(argName)) {
                return -1;
              }
            }
 catch (            CommandFormatException e) {
              break;
            }
          }
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
            candidates.add(format.getPropertyListEnd());
          }
          return buffer.length();
        }
      }
 else {
        chunk=argName;
        result=parsedCmd.getLastChunkIndex();
      }
    }
 else {
      chunk=null;
    }
    if (valueCompleter != null) {
      if (chunk == null) {
        String parsedName=parsedCmd.getLastParsedPropertyName();
        for (        CommandArgument arg : allArgs) {
          String argFullName=arg.getFullName();
          if (argFullName.equals(parsedName)) {
            if (!arg.isValueRequired()) {
              candidates.add(Util.FALSE);
              return result;
            }
          }
        }
      }
      int valueResult=valueCompleter.complete(ctx,chunk == null ? ""String_Node_Str"" : chunk,chunk == null ? 0 : chunk.length(),candidates);
      if (valueResult < 0) {
        return valueResult;
      }
 else {
        if (suggestionEqualsUserEntry(candidates,chunk,valueResult)) {
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null) {
            for (            CommandArgument arg : allArgs) {
              try {
                if (arg.canAppearNext(ctx)) {
                  candidates.set(0,""String_Node_Str"" + format.getPropertySeparator());
                  return buffer.length();
                }
              }
 catch (              CommandFormatException e) {
                e.printStackTrace();
                return result + valueResult;
              }
            }
            candidates.set(0,format.getPropertyListEnd());
            return buffer.length();
          }
        }
        return result + valueResult;
      }
    }
    CommandArgument lastArg=null;
    boolean allPropertiesPresent=true;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          allPropertiesPresent=false;
        }
 else {
          String argFullName=arg.getFullName();
          if (argFullName.equals(chunk)) {
            lastArg=arg;
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    boolean needNeg=false;
    boolean optionMatch=false;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() < 0) {
            String argFullName=arg.getFullName();
            if (chunk != null && argFullName.startsWith(chunk)) {
              if (!parsedCmd.isLastPropertyNegated()) {
                optionMatch=true;
                break;
              }
 else               if (!arg.isValueRequired()) {
                optionMatch=true;
                break;
              }
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
    }
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            if (optionMatch) {
              continue;
            }
            CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              final String value=chunk == null ? ""String_Node_Str"" : chunk;
              valCompl.complete(ctx,value,value.length(),candidates);
            }
          }
 else {
            String argFullName=arg.getFullName();
            if (chunk == null || argFullName.startsWith(chunk)) {
              if (!parsedCmd.isLastPropertyNegated()) {
                candidates.add(argFullName);
              }
 else               if (!arg.isValueRequired()) {
                candidates.add(argFullName);
              }
            }
            if (!arg.isValueRequired() && !parsedCmd.isLastPropertyNegated()) {
              needNeg=true;
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    if (needNeg && parsedCmd.endsOnPropertySeparator()) {
      candidates.add(Util.NOT_OPERATOR);
    }
    if (lastArg != null) {
      if (lastArg.isValueRequired()) {
        candidates.add(lastArg.getFullName() + ""String_Node_Str"");
      }
 else       if (lastArg instanceof ArgumentWithoutValue) {
        ArgumentWithoutValue argWithoutValue=(ArgumentWithoutValue)lastArg;
        if (!argWithoutValue.isExclusive()) {
          if (!allPropertiesPresent) {
            CommandLineFormat format=parsedCmd.getFormat();
            if (format != null && format.getPropertySeparator() != null) {
              candidates.add(lastArg.getFullName() + format.getPropertySeparator());
            }
          }
        }
      }
 else {
        CommandLineFormat format=parsedCmd.getFormat();
        if (!parsedCmd.isLastPropertyNegated()) {
          candidates.add(""String_Node_Str"" + Util.FALSE);
        }
        if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
          candidates.add(format.getPropertyListEnd());
          if (!allPropertiesPresent) {
            candidates.add(format.getPropertySeparator());
          }
        }
      }
    }
    if (candidates.isEmpty()) {
      if (chunk == null && !parsedCmd.endsOnSeparator()) {
        final CommandLineFormat format=parsedCmd.getFormat();
        if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
          candidates.add(format.getPropertyListEnd());
        }
      }
    }
 else {
      Collections.sort(candidates);
    }
    return result;
  }
  if (parsedCmd.hasOperationName() || parsedCmd.endsOnAddressOperationNameSeparator()) {
    if (parsedCmd.getAddress().endsOnType()) {
      return -1;
    }
    final Collection<String> names=candidatesProvider.getOperationNames(ctx,parsedCmd.getAddress());
    if (names.isEmpty()) {
      return -1;
    }
    final String chunk=parsedCmd.getOperationName();
    if (chunk == null) {
      candidates.addAll(names);
    }
 else {
      for (      String name : names) {
        if (name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
    }
    Collections.sort(candidates);
    if (parsedCmd.endsOnSeparator()) {
      return buffer.length();
    }
 else {
      if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0)) && parsedCmd.getFormat().getPropertyListStart().length() > 0) {
        candidates.set(0,chunk + parsedCmd.getFormat().getPropertyListStart());
      }
      return parsedCmd.getLastChunkIndex();
    }
  }
  final OperationRequestAddress address=parsedCmd.getAddress();
  if (buffer.endsWith(""String_Node_Str"")) {
    return -1;
  }
  final String chunk;
  if (address.isEmpty() || parsedCmd.endsOnNodeSeparator() || parsedCmd.endsOnNodeTypeNameSeparator()|| address.equals(ctx.getCurrentNodePath())) {
    chunk=null;
  }
 else   if (address.endsOnType()) {
    chunk=address.getNodeType();
    address.toParentNode();
  }
 else {
    chunk=address.toNodeType();
  }
  final Collection<String> names;
  if (address.endsOnType()) {
    names=candidatesProvider.getNodeNames(ctx,address);
  }
 else {
    names=candidatesProvider.getNodeTypes(ctx,address);
  }
  if (names.isEmpty()) {
    return -1;
  }
  if (chunk == null) {
    candidates.addAll(names);
  }
 else {
    for (    String name : names) {
      if (name.startsWith(chunk)) {
        candidates.add(name);
      }
    }
  }
  String lastSegment=""String_Node_Str"";
  if (parsedCmd.getSubstitutedLine().length() >= parsedCmd.getLastSeparatorIndex()) {
    lastSegment=parsedCmd.getSubstitutedLine().substring(parsedCmd.getLastSeparatorIndex() + 1);
  }
  SegmentParsingInitialState.SegmentParsingCallbackHandler parsedSegment=parseLastSegment(lastSegment);
  int offset;
  if (candidates.size() == 1) {
    final String candidate=candidates.get(0);
    if (address.endsOnType()) {
      if (chunk != null && chunk.equals(candidate)) {
        if (parsedSegment.isOpenQuotes()) {
          candidates.set(0,""String_Node_Str"");
        }
 else {
          candidates.set(0,parsedCmd.getFormat().getAddressOperationSeparator());
          candidates.add(parsedCmd.getFormat().getNodeSeparator());
        }
        return buffer.length();
      }
      if (parsedSegment.isOpenQuotes()) {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR_INSIDE_QUOTES);
        offset=parsedSegment.getOffset() - 1;
        candidates.set(0,""String_Node_Str"" + escapedCandidate + ""String_Node_Str"");
      }
 else {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR);
        offset=parsedSegment.getOffset();
        candidates.set(0,escapedCandidate);
      }
    }
 else {
      if (chunk != null && chunk.equals(candidate)) {
        if (parsedSegment.isOpenQuotes()) {
          candidates.set(0,""String_Node_Str"");
        }
 else {
          candidates.set(0,""String_Node_Str"");
        }
        return buffer.length();
      }
      if (parsedSegment.isOpenQuotes()) {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR_INSIDE_QUOTES);
        offset=parsedSegment.getOffset() - 1;
        candidates.set(0,""String_Node_Str"" + escapedCandidate + ""String_Node_Str"");
      }
 else {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR);
        offset=parsedSegment.getOffset();
        candidates.set(0,escapedCandidate + ""String_Node_Str"");
      }
    }
  }
 else {
    if (parsedSegment.isOpenQuotes()) {
      Util.sortAndEscape(candidates,ESCAPE_SELECTOR_INSIDE_QUOTES);
    }
 else {
      Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
    }
    offset=parsedSegment.getOffset();
  }
  return parsedCmd.getLastSeparatorIndex() + 1 + offset;
}","protected int complete(CommandContext ctx,ParsedCommandLine parsedCmd,OperationCandidatesProvider candidatesProvider,final String buffer,int cursor,List<String> candidates){
  if (parsedCmd.isRequestComplete()) {
    return -1;
  }
  if (parsedCmd.endsOnHeaderListStart() || parsedCmd.hasHeaders()) {
    final Map<String,OperationRequestHeader> headers=candidatesProvider.getHeaders(ctx);
    if (headers.isEmpty()) {
      return -1;
    }
    int result=buffer.length();
    if (parsedCmd.getLastHeaderName() != null) {
      if (buffer.endsWith(parsedCmd.getLastHeaderName())) {
        result=parsedCmd.getLastChunkOriginalIndex();
        for (        String name : headers.keySet()) {
          if (name.equals(parsedCmd.getLastHeaderName())) {
            result=completeHeader(headers,ctx,parsedCmd,buffer,cursor,candidates);
            break;
          }
          if (!parsedCmd.hasHeader(name) && name.startsWith(parsedCmd.getLastHeaderName())) {
            candidates.add(name);
          }
        }
      }
 else {
        result=completeHeader(headers,ctx,parsedCmd,buffer,cursor,candidates);
      }
    }
 else {
      if (!parsedCmd.hasHeaders()) {
        candidates.addAll(headers.keySet());
      }
 else       if (parsedCmd.endsOnHeaderSeparator()) {
        candidates.addAll(headers.keySet());
        for (        ParsedOperationRequestHeader parsed : parsedCmd.getHeaders()) {
          candidates.remove(parsed.getName());
        }
      }
 else {
        final ParsedOperationRequestHeader lastParsedHeader=parsedCmd.getLastHeader();
        final OperationRequestHeader lastHeader=headers.get(lastParsedHeader.getName());
        if (lastHeader == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=lastHeader.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        result=headerCompleter.complete(ctx,buffer,cursor,candidates);
      }
    }
    Collections.sort(candidates);
    return result;
  }
  if (parsedCmd.endsOnPropertyListEnd()) {
    return buffer.length();
  }
  if (parsedCmd.hasProperties() || parsedCmd.endsOnPropertyListStart() || parsedCmd.endsOnNotOperator()) {
    if (!parsedCmd.hasOperationName()) {
      return -1;
    }
    final Collection<CommandArgument> allArgs=candidatesProvider.getProperties(ctx,parsedCmd.getOperationName(),parsedCmd.getAddress());
    if (allArgs.isEmpty()) {
      final CommandLineFormat format=parsedCmd.getFormat();
      if (!parsedCmd.hasProperties() && format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
        candidates.add(format.getPropertyListEnd());
      }
      return buffer.length();
    }
    try {
      if (parsedCmd.endsOnNotOperator()) {
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (!arg.isValueRequired()) {
              candidates.add(arg.getFullName());
            }
          }
        }
        Collections.sort(candidates);
        return buffer.length();
      }
      if (!parsedCmd.hasProperties()) {
        boolean needNeg=false;
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (arg.getIndex() >= 0) {
              final CommandLineCompleter valCompl=arg.getValueCompleter();
              if (valCompl != null) {
                valCompl.complete(ctx,""String_Node_Str"",0,candidates);
              }
            }
 else {
              String argName=arg.getFullName();
              candidates.add(argName);
              if (!arg.isValueRequired()) {
                needNeg=true;
              }
            }
          }
        }
        if (needNeg) {
          candidates.add(Util.NOT_OPERATOR);
        }
        Collections.sort(candidates);
        return buffer.length();
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
    int result=buffer.length();
    String chunk=null;
    CommandLineCompleter valueCompleter=null;
    if (!parsedCmd.endsOnPropertySeparator()) {
      final String argName=parsedCmd.getLastParsedPropertyName();
      final String argValue=parsedCmd.getLastParsedPropertyValue();
      if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
        result=parsedCmd.getLastChunkIndex();
        if (parsedCmd.endsOnPropertyValueSeparator()) {
          ++result;
        }
        chunk=argValue;
        if (argName != null) {
          valueCompleter=getValueCompleter(ctx,allArgs,argName);
        }
 else {
          valueCompleter=getValueCompleter(ctx,allArgs,parsedCmd.getOtherProperties().size() - 1);
        }
        if (valueCompleter == null) {
          if (parsedCmd.endsOnSeparator()) {
            return -1;
          }
          for (          CommandArgument arg : allArgs) {
            try {
              if (arg.canAppearNext(ctx) && !arg.getFullName().equals(argName)) {
                return -1;
              }
            }
 catch (            CommandFormatException e) {
              break;
            }
          }
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
            candidates.add(format.getPropertyListEnd());
          }
          return buffer.length();
        }
      }
 else {
        chunk=argName;
        result=parsedCmd.getLastChunkIndex();
      }
    }
 else {
      chunk=null;
    }
    if (valueCompleter != null) {
      if (chunk == null) {
        String parsedName=parsedCmd.getLastParsedPropertyName();
        for (        CommandArgument arg : allArgs) {
          String argFullName=arg.getFullName();
          if (argFullName.equals(parsedName)) {
            if (!arg.isValueRequired()) {
              candidates.add(Util.FALSE);
              return parsedCmd.getLastChunkOriginalIndex();
            }
          }
        }
      }
      SubstitutedLine substitutions=parsedCmd.getSubstitutions();
      int valueResult=valueCompleter.complete(ctx,chunk == null ? ""String_Node_Str"" : chunk,chunk == null ? 0 : chunk.length(),candidates);
      if (valueResult < 0) {
        return valueResult;
      }
 else {
        if (suggestionEqualsUserEntry(candidates,chunk,valueResult)) {
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null) {
            for (            CommandArgument arg : allArgs) {
              try {
                if (arg.canAppearNext(ctx)) {
                  candidates.set(0,""String_Node_Str"" + format.getPropertySeparator());
                  return buffer.length();
                }
              }
 catch (              CommandFormatException e) {
                return -1;
              }
            }
            candidates.set(0,format.getPropertyListEnd());
            return buffer.length();
          }
        }
        int correctedValueOffset=substitutions.getOriginalOffset(result + valueResult);
        return correctedValueOffset;
      }
    }
    CommandArgument lastArg=null;
    boolean allPropertiesPresent=true;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          allPropertiesPresent=false;
        }
 else {
          String argFullName=arg.getFullName();
          if (argFullName.equals(chunk)) {
            lastArg=arg;
          }
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
    }
    boolean needNeg=false;
    boolean optionMatch=false;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() < 0) {
            String argFullName=arg.getFullName();
            if (chunk != null && argFullName.startsWith(chunk)) {
              if (!parsedCmd.isLastPropertyNegated()) {
                optionMatch=true;
                break;
              }
 else               if (!arg.isValueRequired()) {
                optionMatch=true;
                break;
              }
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
    }
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            if (optionMatch) {
              continue;
            }
            CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              final String value=chunk == null ? ""String_Node_Str"" : chunk;
              valCompl.complete(ctx,value,value.length(),candidates);
            }
          }
 else {
            String argFullName=arg.getFullName();
            if (chunk == null || argFullName.startsWith(chunk)) {
              if (!parsedCmd.isLastPropertyNegated()) {
                candidates.add(argFullName);
              }
 else               if (!arg.isValueRequired()) {
                candidates.add(argFullName);
              }
            }
            if (!arg.isValueRequired() && !parsedCmd.isLastPropertyNegated()) {
              needNeg=true;
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        return -1;
      }
    }
    if (needNeg && parsedCmd.endsOnPropertySeparator()) {
      candidates.add(Util.NOT_OPERATOR);
    }
    if (lastArg != null) {
      if (lastArg.isValueRequired()) {
        candidates.add(lastArg.getFullName() + ""String_Node_Str"");
      }
 else       if (lastArg instanceof ArgumentWithoutValue) {
        ArgumentWithoutValue argWithoutValue=(ArgumentWithoutValue)lastArg;
        if (!argWithoutValue.isExclusive()) {
          if (!allPropertiesPresent) {
            CommandLineFormat format=parsedCmd.getFormat();
            if (format != null && format.getPropertySeparator() != null) {
              candidates.add(lastArg.getFullName() + format.getPropertySeparator());
            }
          }
        }
      }
 else {
        CommandLineFormat format=parsedCmd.getFormat();
        if (!parsedCmd.isLastPropertyNegated()) {
          candidates.add(""String_Node_Str"" + Util.FALSE);
        }
        if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
          candidates.add(format.getPropertyListEnd());
          if (!allPropertiesPresent) {
            candidates.add(format.getPropertySeparator());
          }
        }
      }
    }
    if (candidates.isEmpty()) {
      if (chunk == null && !parsedCmd.endsOnSeparator()) {
        final CommandLineFormat format=parsedCmd.getFormat();
        if (format != null && format.getPropertyListEnd() != null && format.getPropertyListEnd().length() > 0) {
          candidates.add(format.getPropertyListEnd());
        }
      }
    }
 else {
      Collections.sort(candidates);
    }
    return parsedCmd.getOriginalOffset(result);
  }
  if (parsedCmd.hasOperationName() || parsedCmd.endsOnAddressOperationNameSeparator()) {
    if (parsedCmd.getAddress().endsOnType()) {
      return -1;
    }
    final Collection<String> names=candidatesProvider.getOperationNames(ctx,parsedCmd.getAddress());
    if (names.isEmpty()) {
      return -1;
    }
    final String chunk=parsedCmd.getOperationName();
    if (chunk == null) {
      candidates.addAll(names);
    }
 else {
      for (      String name : names) {
        if (name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
    }
    Collections.sort(candidates);
    if (parsedCmd.endsOnSeparator()) {
      return buffer.length();
    }
 else {
      if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0)) && parsedCmd.getFormat().getPropertyListStart().length() > 0) {
        candidates.set(0,chunk + parsedCmd.getFormat().getPropertyListStart());
      }
      return parsedCmd.getLastChunkOriginalIndex();
    }
  }
  final OperationRequestAddress address=parsedCmd.getAddress();
  if (buffer.endsWith(""String_Node_Str"")) {
    return -1;
  }
  final String chunk;
  if (address.isEmpty() || parsedCmd.endsOnNodeSeparator() || parsedCmd.endsOnNodeTypeNameSeparator()|| address.equals(ctx.getCurrentNodePath())) {
    chunk=null;
  }
 else   if (address.endsOnType()) {
    chunk=address.getNodeType();
    address.toParentNode();
  }
 else {
    chunk=address.toNodeType();
  }
  final Collection<String> names;
  if (address.endsOnType()) {
    names=candidatesProvider.getNodeNames(ctx,address);
  }
 else {
    names=candidatesProvider.getNodeTypes(ctx,address);
  }
  if (names.isEmpty()) {
    return -1;
  }
  if (chunk == null) {
    candidates.addAll(names);
  }
 else {
    for (    String name : names) {
      if (name.startsWith(chunk)) {
        candidates.add(name);
      }
    }
  }
  String lastSegment=""String_Node_Str"";
  if (parsedCmd.getSubstitutedLine().length() >= parsedCmd.getLastSeparatorIndex()) {
    lastSegment=parsedCmd.getSubstitutedLine().substring(parsedCmd.getLastSeparatorIndex() + 1);
  }
  SegmentParsingInitialState.SegmentParsingCallbackHandler parsedSegment=parseLastSegment(lastSegment);
  int offset;
  if (candidates.size() == 1) {
    final String candidate=candidates.get(0);
    if (address.endsOnType()) {
      if (chunk != null && chunk.equals(candidate)) {
        if (parsedSegment.isOpenQuotes()) {
          candidates.set(0,""String_Node_Str"");
        }
 else {
          candidates.set(0,parsedCmd.getFormat().getAddressOperationSeparator());
          candidates.add(parsedCmd.getFormat().getNodeSeparator());
        }
        return buffer.length();
      }
      if (parsedSegment.isOpenQuotes()) {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR_INSIDE_QUOTES);
        offset=parsedSegment.getOffset() - 1;
        candidates.set(0,""String_Node_Str"" + escapedCandidate + ""String_Node_Str"");
      }
 else {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR);
        offset=parsedSegment.getOffset();
        candidates.set(0,escapedCandidate);
      }
    }
 else {
      if (chunk != null && chunk.equals(candidate)) {
        if (parsedSegment.isOpenQuotes()) {
          candidates.set(0,""String_Node_Str"");
        }
 else {
          candidates.set(0,""String_Node_Str"");
        }
        return buffer.length();
      }
      if (parsedSegment.isOpenQuotes()) {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR_INSIDE_QUOTES);
        offset=parsedSegment.getOffset() - 1;
        candidates.set(0,""String_Node_Str"" + escapedCandidate + ""String_Node_Str"");
      }
 else {
        String escapedCandidate=Util.escapeString(candidate,ESCAPE_SELECTOR);
        offset=parsedSegment.getOffset();
        candidates.set(0,escapedCandidate + ""String_Node_Str"");
      }
    }
  }
 else {
    if (parsedSegment.isOpenQuotes()) {
      Util.sortAndEscape(candidates,ESCAPE_SELECTOR_INSIDE_QUOTES);
    }
 else {
      Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
    }
    offset=parsedSegment.getOffset();
  }
  return parsedCmd.getLastSeparatorOriginalIndex() + 1 + offset;
}",0.986495902319254
167694,"private int completeHeader(Map<String,OperationRequestHeader> headers,CommandContext ctx,ParsedCommandLine parsedCmd,String buffer,int cursor,List<String> candidates){
  final OperationRequestHeader header=headers.get(parsedCmd.getLastHeaderName());
  if (header == null) {
    return -1;
  }
  final CommandLineCompleter headerCompleter=header.getCompleter();
  if (headerCompleter == null) {
    return -1;
  }
  int valueResult=headerCompleter.complete(ctx,buffer.substring(parsedCmd.getLastChunkIndex()),cursor,candidates);
  if (valueResult < 0) {
    return -1;
  }
  return parsedCmd.getLastChunkIndex() + valueResult;
}","private int completeHeader(Map<String,OperationRequestHeader> headers,CommandContext ctx,ParsedCommandLine parsedCmd,String buffer,int cursor,List<String> candidates){
  final OperationRequestHeader header=headers.get(parsedCmd.getLastHeaderName());
  if (header == null) {
    return -1;
  }
  final CommandLineCompleter headerCompleter=header.getCompleter();
  if (headerCompleter == null) {
    return -1;
  }
  int valueResult=headerCompleter.complete(ctx,buffer.substring(parsedCmd.getLastChunkOriginalIndex()),cursor,candidates);
  if (valueResult < 0) {
    return -1;
  }
  return parsedCmd.getOriginalOffset(parsedCmd.getLastChunkIndex() + valueResult);
}",0.9713400464756003
167695,"public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final Boolean computeCompositeIndex=deploymentUnit.getAttachment(Attachments.COMPUTE_COMPOSITE_ANNOTATION_INDEX);
  if (computeCompositeIndex != null && !computeCompositeIndex) {
    return;
  }
  Map<ModuleIdentifier,CompositeIndex> additionalAnnotationIndexes=new HashMap<ModuleIdentifier,CompositeIndex>();
  final List<ModuleIdentifier> additionalModuleIndexes=deploymentUnit.getAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES);
  final List<Index> indexes=new ArrayList<Index>();
  for (  final ModuleIdentifier moduleIdentifier : additionalModuleIndexes) {
    try {
      Module module=moduleLoader.loadModule(moduleIdentifier);
      final CompositeIndex additionalIndex=ModuleIndexBuilder.buildCompositeIndex(module);
      if (additionalIndex != null) {
        indexes.addAll(additionalIndex.indexes);
        additionalAnnotationIndexes.put(moduleIdentifier,additionalIndex);
      }
 else {
        final Index index=calculateModuleIndex(module);
        indexes.add(index);
      }
    }
 catch (    ModuleLoadException e) {
      throw new DeploymentUnitProcessingException(e);
    }
catch (    IOException e) {
      throw new DeploymentUnitProcessingException(e);
    }
  }
  deploymentUnit.putAttachment(Attachments.ADDITIONAL_ANNOTATION_INDEXES_BY_MODULE,additionalAnnotationIndexes);
  final List<ResourceRoot> allResourceRoots=new ArrayList<ResourceRoot>();
  final List<ResourceRoot> resourceRoots=deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS);
  for (  ResourceRoot resourceRoot : resourceRoots) {
    if (!SubDeploymentMarker.isSubDeployment(resourceRoot) && ModuleRootMarker.isModuleRoot(resourceRoot)) {
      allResourceRoots.add(resourceRoot);
    }
  }
  allResourceRoots.addAll(handleClassPathItems(deploymentUnit));
  final ResourceRoot deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  if (ModuleRootMarker.isModuleRoot(deploymentRoot)) {
    allResourceRoots.add(deploymentRoot);
  }
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);
    if (index != null) {
      indexes.add(index);
    }
  }
  deploymentUnit.putAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX,new CompositeIndex(indexes));
}","public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final Boolean computeCompositeIndex=deploymentUnit.getAttachment(Attachments.COMPUTE_COMPOSITE_ANNOTATION_INDEX);
  if (computeCompositeIndex != null && !computeCompositeIndex) {
    return;
  }
  DeploymentUnit top=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  Map<ModuleIdentifier,AdditionalModuleSpecification> additionalModuleSpecificationMap=new HashMap<>();
  for (  AdditionalModuleSpecification i : top.getAttachmentList(Attachments.ADDITIONAL_MODULES)) {
    additionalModuleSpecificationMap.put(i.getModuleIdentifier(),i);
  }
  Map<ModuleIdentifier,CompositeIndex> additionalAnnotationIndexes=new HashMap<ModuleIdentifier,CompositeIndex>();
  final List<ModuleIdentifier> additionalModuleIndexes=deploymentUnit.getAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES);
  final List<Index> indexes=new ArrayList<Index>();
  for (  final ModuleIdentifier moduleIdentifier : additionalModuleIndexes) {
    AdditionalModuleSpecification additional=additionalModuleSpecificationMap.get(moduleIdentifier);
    if (additional != null) {
      for (      ResourceRoot resource : additional.getResourceRoots()) {
        ResourceRootIndexer.indexResourceRoot(resource);
        Index indexAttachment=resource.getAttachment(Attachments.ANNOTATION_INDEX);
        if (indexAttachment != null) {
          indexes.add(indexAttachment);
        }
      }
    }
 else {
      try {
        Module module=moduleLoader.loadModule(moduleIdentifier);
        final CompositeIndex additionalIndex=ModuleIndexBuilder.buildCompositeIndex(module);
        if (additionalIndex != null) {
          indexes.addAll(additionalIndex.indexes);
          additionalAnnotationIndexes.put(moduleIdentifier,additionalIndex);
        }
 else {
          final Index index=calculateModuleIndex(module);
          indexes.add(index);
        }
      }
 catch (      ModuleLoadException e) {
        throw new DeploymentUnitProcessingException(e);
      }
catch (      IOException e) {
        throw new DeploymentUnitProcessingException(e);
      }
    }
  }
  deploymentUnit.putAttachment(Attachments.ADDITIONAL_ANNOTATION_INDEXES_BY_MODULE,additionalAnnotationIndexes);
  final List<ResourceRoot> allResourceRoots=new ArrayList<ResourceRoot>();
  final List<ResourceRoot> resourceRoots=deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS);
  for (  ResourceRoot resourceRoot : resourceRoots) {
    if (!SubDeploymentMarker.isSubDeployment(resourceRoot) && ModuleRootMarker.isModuleRoot(resourceRoot)) {
      allResourceRoots.add(resourceRoot);
    }
  }
  allResourceRoots.addAll(handleClassPathItems(deploymentUnit));
  final ResourceRoot deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  if (ModuleRootMarker.isModuleRoot(deploymentRoot)) {
    allResourceRoots.add(deploymentRoot);
  }
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);
    if (index != null) {
      indexes.add(index);
    }
  }
  deploymentUnit.putAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX,new CompositeIndex(indexes));
}",0.7850530213768726
167696,"/** 
 * Process the deployment root for module dependency information.
 * @param phaseContext the deployment unit context
 * @throws org.jboss.as.server.deployment.DeploymentUnitProcessingException
 */
public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  for (  final ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=ManifestHelper.getMainAttributeValue(manifest,DEPENDENCIES_ATTR);
    if (dependencyString == null)     continue;
    if (deploymentUnit.getParent() == null && SubDeploymentMarker.isSubDeployment(resourceRoot)) {
      continue;
    }
    final String[] dependencyDefs=dependencyString.split(""String_Node_Str"");
    for (    final String dependencyDef : dependencyDefs) {
      final String trimmed=dependencyDef.trim();
      if (trimmed.isEmpty()) {
        continue;
      }
      final String[] dependencyParts=trimmed.split(""String_Node_Str"");
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      final boolean export=containsParam(dependencyParts,EXPORT_PARAM);
      final boolean optional=containsParam(dependencyParts,OPTIONAL_PARAM);
      final boolean services=containsParam(dependencyParts,SERVICES_PARAM);
      final boolean annotations=containsParam(dependencyParts,ANNOTATIONS_PARAM);
      final boolean metaInf=containsParam(dependencyParts,META_INF);
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith(""String_Node_Str"")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      if (annotations) {
        deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES,dependencyId);
        if (dependencyLoader == deploymentModuleLoader) {
          phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleServiceName(dependencyId));
        }
      }
      final ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services,true);
      if (metaInf) {
        dependency.addImportFilter(PathFilters.getMetaInfSubdirectoriesFilter(),true);
        dependency.addImportFilter(PathFilters.getMetaInfFilter(),true);
      }
      deploymentUnit.addToAttachmentList(Attachments.MANIFEST_DEPENDENCIES,dependency);
    }
  }
}","/** 
 * Process the deployment root for module dependency information.
 * @param phaseContext the deployment unit context
 * @throws org.jboss.as.server.deployment.DeploymentUnitProcessingException
 */
public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  DeploymentUnit top=deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
  Set<ModuleIdentifier> additionalModules=new HashSet<>();
  for (  AdditionalModuleSpecification i : top.getAttachmentList(Attachments.ADDITIONAL_MODULES)) {
    additionalModules.add(i.getModuleIdentifier());
  }
  for (  final ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=ManifestHelper.getMainAttributeValue(manifest,DEPENDENCIES_ATTR);
    if (dependencyString == null)     continue;
    if (deploymentUnit.getParent() == null && SubDeploymentMarker.isSubDeployment(resourceRoot)) {
      continue;
    }
    final String[] dependencyDefs=dependencyString.split(""String_Node_Str"");
    for (    final String dependencyDef : dependencyDefs) {
      final String trimmed=dependencyDef.trim();
      if (trimmed.isEmpty()) {
        continue;
      }
      final String[] dependencyParts=trimmed.split(""String_Node_Str"");
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      final boolean export=containsParam(dependencyParts,EXPORT_PARAM);
      final boolean optional=containsParam(dependencyParts,OPTIONAL_PARAM);
      final boolean services=containsParam(dependencyParts,SERVICES_PARAM);
      final boolean annotations=containsParam(dependencyParts,ANNOTATIONS_PARAM);
      final boolean metaInf=containsParam(dependencyParts,META_INF);
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith(""String_Node_Str"")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      if (annotations) {
        deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES,dependencyId);
        if (dependencyLoader == deploymentModuleLoader && !additionalModules.contains(dependencyId)) {
          phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleServiceName(dependencyId));
        }
      }
      final ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services,true);
      if (metaInf) {
        dependency.addImportFilter(PathFilters.getMetaInfSubdirectoriesFilter(),true);
        dependency.addImportFilter(PathFilters.getMetaInfFilter(),true);
      }
      deploymentUnit.addToAttachmentList(Attachments.MANIFEST_DEPENDENCIES,dependency);
    }
  }
}",0.9389813414019162
167697,"private void handleDeployment(final DeploymentPhaseContext phaseContext,final DeploymentUnit deploymentUnit,final ModuleSpecification moduleSpec,final ModuleStructureSpec rootDeploymentSpecification) throws DeploymentUnitProcessingException {
  final Map<VirtualFile,ResourceRoot> resourceRoots=resourceRoots(deploymentUnit);
  moduleSpec.addUserDependencies(rootDeploymentSpecification.getModuleDependencies());
  moduleSpec.addExclusions(rootDeploymentSpecification.getExclusions());
  moduleSpec.addAliases(rootDeploymentSpecification.getAliases());
  moduleSpec.addModuleSystemDependencies(rootDeploymentSpecification.getSystemDependencies());
  for (  final ResourceRoot additionalResourceRoot : rootDeploymentSpecification.getResourceRoots()) {
    final ResourceRoot existingRoot=resourceRoots.get(additionalResourceRoot.getRoot());
    if (existingRoot != null) {
      existingRoot.merge(additionalResourceRoot);
    }
 else     if (!additionalResourceRoot.getRoot().exists()) {
      ServerLogger.DEPLOYMENT_LOGGER.additionalResourceRootDoesNotExist(additionalResourceRoot.getRoot().getPathName());
    }
 else {
      deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,additionalResourceRoot);
      ResourceRootIndexer.indexResourceRoot(additionalResourceRoot);
      ModuleRootMarker.mark(additionalResourceRoot);
    }
  }
  for (  final String classFileTransformer : rootDeploymentSpecification.getClassFileTransformers()) {
    moduleSpec.addClassFileTransformer(classFileTransformer);
  }
  for (  final ModuleIdentifier dependency : rootDeploymentSpecification.getAnnotationModules()) {
    deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES,dependency);
    if (dependency.getName().startsWith(ServiceModuleLoader.MODULE_PREFIX)) {
      phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleServiceName(dependency));
    }
  }
  moduleSpec.setLocalLast(rootDeploymentSpecification.isLocalLast());
  if (rootDeploymentSpecification.getExcludedSubsystems() != null) {
    deploymentUnit.putAttachment(Attachments.EXCLUDED_SUBSYSTEMS,rootDeploymentSpecification.getExcludedSubsystems());
  }
}","private void handleDeployment(final DeploymentPhaseContext phaseContext,final DeploymentUnit deploymentUnit,final ModuleSpecification moduleSpec,final ModuleStructureSpec rootDeploymentSpecification,Set<ModuleIdentifier> additionalModules) throws DeploymentUnitProcessingException {
  final Map<VirtualFile,ResourceRoot> resourceRoots=resourceRoots(deploymentUnit);
  moduleSpec.addUserDependencies(rootDeploymentSpecification.getModuleDependencies());
  moduleSpec.addExclusions(rootDeploymentSpecification.getExclusions());
  moduleSpec.addAliases(rootDeploymentSpecification.getAliases());
  moduleSpec.addModuleSystemDependencies(rootDeploymentSpecification.getSystemDependencies());
  for (  final ResourceRoot additionalResourceRoot : rootDeploymentSpecification.getResourceRoots()) {
    final ResourceRoot existingRoot=resourceRoots.get(additionalResourceRoot.getRoot());
    if (existingRoot != null) {
      existingRoot.merge(additionalResourceRoot);
    }
 else     if (!additionalResourceRoot.getRoot().exists()) {
      ServerLogger.DEPLOYMENT_LOGGER.additionalResourceRootDoesNotExist(additionalResourceRoot.getRoot().getPathName());
    }
 else {
      deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS,additionalResourceRoot);
      ResourceRootIndexer.indexResourceRoot(additionalResourceRoot);
      ModuleRootMarker.mark(additionalResourceRoot);
    }
  }
  for (  final String classFileTransformer : rootDeploymentSpecification.getClassFileTransformers()) {
    moduleSpec.addClassFileTransformer(classFileTransformer);
  }
  for (  final ModuleIdentifier dependency : rootDeploymentSpecification.getAnnotationModules()) {
    deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES,dependency);
    if (dependency.getName().startsWith(ServiceModuleLoader.MODULE_PREFIX) && !additionalModules.contains(dependency)) {
      phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleServiceName(dependency));
    }
  }
  moduleSpec.setLocalLast(rootDeploymentSpecification.isLocalLast());
  if (rootDeploymentSpecification.getExcludedSubsystems() != null) {
    deploymentUnit.putAttachment(Attachments.EXCLUDED_SUBSYSTEMS,rootDeploymentSpecification.getExcludedSubsystems());
  }
}",0.9813189286518118
167698,"@Override public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final ServiceModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  if (deploymentUnit.getParent() != null) {
    if (deploymentRoot.hasAttachment(SUB_DEPLOYMENT_STRUCTURE)) {
      final ModuleSpecification subModuleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
      handleDeployment(phaseContext,deploymentUnit,subModuleSpec,deploymentRoot.getAttachment(SUB_DEPLOYMENT_STRUCTURE));
    }
  }
  VirtualFile deploymentFile=null;
  for (  final String loc : DEPLOYMENT_STRUCTURE_DESCRIPTOR_LOCATIONS) {
    final VirtualFile file=deploymentRoot.getRoot().getChild(loc);
    if (file.exists()) {
      deploymentFile=file;
      break;
    }
  }
  ParseResult result=deploymentUnit.getAttachment(RESULT_ATTACHMENT_KEY);
  if (deploymentFile == null && result == null) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    if (deploymentFile != null) {
      ServerLogger.DEPLOYMENT_LOGGER.jbossDeploymentStructureIgnored(deploymentFile.getPathName());
    }
    if (result != null) {
      ServerLogger.DEPLOYMENT_LOGGER.jbossDeploymentStructureNamespaceIgnored(deploymentUnit.getName());
    }
    return;
  }
  try {
    if (deploymentFile != null) {
      result=parse(deploymentFile.getPhysicalFile(),deploymentUnit,moduleLoader);
    }
    final ModuleSpecification moduleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
    if (result.getEarSubDeploymentsIsolated() != null) {
      moduleSpec.setSubDeploymentModulesIsolated(result.getEarSubDeploymentsIsolated());
    }
    if (result.getEarExclusionsCascadedToSubDeployments() != null) {
      moduleSpec.setExclusionsCascadedToSubDeployments(result.getEarExclusionsCascadedToSubDeployments());
    }
    final ModuleStructureSpec rootDeploymentSpecification=result.getRootDeploymentSpecification();
    if (rootDeploymentSpecification != null) {
      handleDeployment(phaseContext,deploymentUnit,moduleSpec,rootDeploymentSpecification);
    }
    final Map<String,ResourceRoot> subDeploymentMap=new HashMap<String,ResourceRoot>();
    final List<ResourceRoot> resourceRoots=deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS);
    for (    final ResourceRoot root : resourceRoots) {
      if (SubDeploymentMarker.isSubDeployment(root)) {
        subDeploymentMap.put(root.getRoot().getPathNameRelativeTo(deploymentRoot.getRoot()),root);
      }
    }
    for (    final Entry<String,ModuleStructureSpec> entry : result.getSubDeploymentSpecifications().entrySet()) {
      final String path=entry.getKey();
      final ModuleStructureSpec spec=entry.getValue();
      if (!subDeploymentMap.containsKey(path)) {
        throw subDeploymentNotFound(path,subDeploymentMap.keySet());
      }
      final ResourceRoot subDeployment=subDeploymentMap.get(path);
      subDeployment.putAttachment(SUB_DEPLOYMENT_STRUCTURE,spec);
      if (moduleSpec.isExclusionsCascadedToSubDeployments() && rootDeploymentSpecification != null) {
        for (        ModuleIdentifier exclusion : rootDeploymentSpecification.getExclusions()) {
          spec.getExclusions().add(exclusion);
        }
      }
    }
    for (    final ModuleStructureSpec additionalModule : result.getAdditionalModules()) {
      for (      final ModuleIdentifier identifier : additionalModule.getAnnotationModules()) {
        ServerLogger.DEPLOYMENT_LOGGER.annotationImportIgnored(identifier,additionalModule.getModuleIdentifier());
      }
      final List<ResourceRoot> additionalModuleResourceRoots=new ArrayList<ResourceRoot>(additionalModule.getResourceRoots());
      final ListIterator<ResourceRoot> itr=additionalModuleResourceRoots.listIterator();
      while (itr.hasNext()) {
        final ResourceRoot resourceRoot=itr.next();
        if (!resourceRoot.getRoot().exists()) {
          ServerLogger.DEPLOYMENT_LOGGER.additionalResourceRootDoesNotExist(resourceRoot.getRoot().getPathName());
          itr.remove();
        }
      }
      final AdditionalModuleSpecification additional=new AdditionalModuleSpecification(additionalModule.getModuleIdentifier(),additionalModuleResourceRoots);
      additional.addAliases(additionalModule.getAliases());
      additional.addSystemDependencies(additionalModule.getModuleDependencies());
      deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_MODULES,additional);
      for (      final ResourceRoot root : additionalModuleResourceRoots) {
        ResourceRootIndexer.indexResourceRoot(root);
      }
    }
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
}","@Override public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot deploymentRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final ServiceModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  if (deploymentUnit.getParent() != null) {
    if (deploymentRoot.hasAttachment(SUB_DEPLOYMENT_STRUCTURE)) {
      final ModuleSpecification subModuleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
      Set<ModuleIdentifier> additionalModules=new HashSet<>();
      for (      AdditionalModuleSpecification i : deploymentUnit.getParent().getAttachmentList(Attachments.ADDITIONAL_MODULES)) {
        additionalModules.add(i.getModuleIdentifier());
      }
      handleDeployment(phaseContext,deploymentUnit,subModuleSpec,deploymentRoot.getAttachment(SUB_DEPLOYMENT_STRUCTURE),additionalModules);
    }
  }
  VirtualFile deploymentFile=null;
  for (  final String loc : DEPLOYMENT_STRUCTURE_DESCRIPTOR_LOCATIONS) {
    final VirtualFile file=deploymentRoot.getRoot().getChild(loc);
    if (file.exists()) {
      deploymentFile=file;
      break;
    }
  }
  ParseResult result=deploymentUnit.getAttachment(RESULT_ATTACHMENT_KEY);
  if (deploymentFile == null && result == null) {
    return;
  }
  if (deploymentUnit.getParent() != null) {
    if (deploymentFile != null) {
      ServerLogger.DEPLOYMENT_LOGGER.jbossDeploymentStructureIgnored(deploymentFile.getPathName());
    }
    if (result != null) {
      ServerLogger.DEPLOYMENT_LOGGER.jbossDeploymentStructureNamespaceIgnored(deploymentUnit.getName());
    }
    return;
  }
  try {
    if (deploymentFile != null) {
      result=parse(deploymentFile.getPhysicalFile(),deploymentUnit,moduleLoader);
    }
    Set<ModuleIdentifier> additionalModuleSet=new HashSet<>();
    for (    final ModuleStructureSpec additionalModule : result.getAdditionalModules()) {
      for (      final ModuleIdentifier identifier : additionalModule.getAnnotationModules()) {
        ServerLogger.DEPLOYMENT_LOGGER.annotationImportIgnored(identifier,additionalModule.getModuleIdentifier());
      }
      final List<ResourceRoot> additionalModuleResourceRoots=new ArrayList<ResourceRoot>(additionalModule.getResourceRoots());
      final ListIterator<ResourceRoot> itr=additionalModuleResourceRoots.listIterator();
      while (itr.hasNext()) {
        final ResourceRoot resourceRoot=itr.next();
        if (!resourceRoot.getRoot().exists()) {
          ServerLogger.DEPLOYMENT_LOGGER.additionalResourceRootDoesNotExist(resourceRoot.getRoot().getPathName());
          itr.remove();
        }
      }
      additionalModuleSet.add(additionalModule.getModuleIdentifier());
      final AdditionalModuleSpecification additional=new AdditionalModuleSpecification(additionalModule.getModuleIdentifier(),additionalModuleResourceRoots);
      additional.addAliases(additionalModule.getAliases());
      additional.addSystemDependencies(additionalModule.getModuleDependencies());
      deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_MODULES,additional);
      for (      final ResourceRoot root : additionalModuleResourceRoots) {
        ResourceRootIndexer.indexResourceRoot(root);
      }
    }
    final ModuleSpecification moduleSpec=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
    if (result.getEarSubDeploymentsIsolated() != null) {
      moduleSpec.setSubDeploymentModulesIsolated(result.getEarSubDeploymentsIsolated());
    }
    if (result.getEarExclusionsCascadedToSubDeployments() != null) {
      moduleSpec.setExclusionsCascadedToSubDeployments(result.getEarExclusionsCascadedToSubDeployments());
    }
    final ModuleStructureSpec rootDeploymentSpecification=result.getRootDeploymentSpecification();
    if (rootDeploymentSpecification != null) {
      handleDeployment(phaseContext,deploymentUnit,moduleSpec,rootDeploymentSpecification,additionalModuleSet);
    }
    final Map<String,ResourceRoot> subDeploymentMap=new HashMap<String,ResourceRoot>();
    final List<ResourceRoot> resourceRoots=deploymentUnit.getAttachmentList(Attachments.RESOURCE_ROOTS);
    for (    final ResourceRoot root : resourceRoots) {
      if (SubDeploymentMarker.isSubDeployment(root)) {
        subDeploymentMap.put(root.getRoot().getPathNameRelativeTo(deploymentRoot.getRoot()),root);
      }
    }
    for (    final Entry<String,ModuleStructureSpec> entry : result.getSubDeploymentSpecifications().entrySet()) {
      final String path=entry.getKey();
      final ModuleStructureSpec spec=entry.getValue();
      if (!subDeploymentMap.containsKey(path)) {
        throw subDeploymentNotFound(path,subDeploymentMap.keySet());
      }
      final ResourceRoot subDeployment=subDeploymentMap.get(path);
      subDeployment.putAttachment(SUB_DEPLOYMENT_STRUCTURE,spec);
      if (moduleSpec.isExclusionsCascadedToSubDeployments() && rootDeploymentSpecification != null) {
        for (        ModuleIdentifier exclusion : rootDeploymentSpecification.getExclusions()) {
          spec.getExclusions().add(exclusion);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DeploymentUnitProcessingException(e);
  }
}",0.6797244094488188
167699,"private boolean getSimpleValues(ModelNode propType,String name,String radical,List<String> candidates){
  if (name != null) {
    propType=propType.get(name);
  }
  final List<ModelNode> allowed;
  if (!propType.has(Util.ALLOWED)) {
    if (isBoolean(propType)) {
      allowed=BOOLEAN_LIST;
    }
 else     if (isBytes(propType)) {
      if (radical.endsWith(""String_Node_Str"")) {
        return true;
      }
 else {
        BytesCompleter.INSTANCE.complete(ctx,radical,0,candidates);
        return false;
      }
    }
 else {
      List<String> c=getCandidatesFromMetadata(propType,radical);
      if (c != null) {
        candidates.addAll(c);
      }
      return false;
    }
  }
 else {
    allowed=propType.get(Util.ALLOWED).asList();
  }
  boolean isComplete=false;
  for (  ModelNode candidate : allowed) {
    String c=candidate.asString();
    if (c.startsWith(radical)) {
      if (c.equals(radical)) {
        isComplete=true;
        break;
      }
      candidates.add(candidate.asString());
    }
  }
  Collections.sort(candidates);
  return isComplete;
}","private boolean getSimpleValues(ModelNode propType,String name,String radical,List<String> candidates){
  if (name != null) {
    propType=propType.get(name);
  }
  final List<ModelNode> allowed;
  if (!propType.has(Util.ALLOWED)) {
    if (isBoolean(propType)) {
      allowed=BOOLEAN_LIST;
    }
 else     if (isBytes(propType)) {
      if (radical.endsWith(""String_Node_Str"")) {
        return true;
      }
 else {
        BytesCompleter.INSTANCE.complete(ctx,radical,0,candidates);
        return false;
      }
    }
 else {
      List<String> c=getCandidatesFromMetadata(propType,radical);
      if (c != null) {
        if (c.isEmpty()) {
          return true;
        }
        candidates.addAll(c);
      }
      return false;
    }
  }
 else {
    allowed=propType.get(Util.ALLOWED).asList();
  }
  boolean isComplete=false;
  for (  ModelNode candidate : allowed) {
    String c=candidate.asString();
    if (c.startsWith(radical)) {
      if (c.equals(radical)) {
        isComplete=true;
        break;
      }
      candidates.add(candidate.asString());
    }
  }
  Collections.sort(candidates);
  return isComplete;
}",0.9728260869565216
167700,"private List<String> getCandidatesFromMetadata(ModelNode propType,String path){
  List<String> candidates=null;
  if (propType.has(Util.FILESYSTEM_PATH) && propType.get(Util.FILESYSTEM_PATH).asBoolean()) {
    CommandLineCompleter completer=FilenameTabCompleter.newCompleter(ctx);
    candidates=new ArrayList<>();
    completer.complete(ctx,path,offset,candidates);
    valLength=path.lastIndexOf(File.separator) + 1;
    if (Util.isWindows()) {
      int i=path.lastIndexOf(File.separator);
      if (i >= 0) {
        valLength=2;
      }
      if (candidates.size() == 1) {
        String candidate=candidates.get(0);
        if (candidate.endsWith(File.separator)) {
          candidate=candidate + File.separator;
        }
        candidates.set(0,candidate);
      }
    }
  }
 else   if (propType.has(Util.RELATIVE_TO) && propType.get(Util.RELATIVE_TO).asBoolean()) {
    DeploymentItemCompleter completer=new DeploymentItemCompleter(address);
    candidates=new ArrayList<>();
    valLength=completer.complete(ctx,path,offset,candidates);
  }
 else   if (propType.has(Util.CAPABILITY_REFERENCE)) {
    CapabilityReferenceCompleter completer=factory.newCompleter(address,propType.get(Util.CAPABILITY_REFERENCE).asString());
    candidates=new ArrayList<>();
    completer.complete(ctx,path,offset,candidates);
  }
  return candidates;
}","/** 
 * Returns the list of candidates implied by metadata.
 * @param propType
 * @param path
 * @return List of candidates, null means no candidates, empty candidatesmeans complete.
 */
private List<String> getCandidatesFromMetadata(ModelNode propType,String path){
  List<String> candidates=null;
  if (propType.has(Util.FILESYSTEM_PATH) && propType.get(Util.FILESYSTEM_PATH).asBoolean()) {
    CommandLineCompleter completer=FilenameTabCompleter.newCompleter(ctx);
    candidates=new ArrayList<>();
    completer.complete(ctx,path,offset,candidates);
    if (candidates.isEmpty()) {
      return null;
    }
    if (candidates.size() == 1) {
      String candidate=candidates.get(0);
      int sepIndex=path.lastIndexOf(File.separator);
      String lastPath=path;
      if (sepIndex >= 0 && sepIndex < path.length() - 1) {
        lastPath=path.substring(sepIndex + 1);
      }
      if (candidate.equals(lastPath)) {
        candidates.clear();
        return candidates;
      }
    }
    valLength=path.lastIndexOf(File.separator) + 1;
    if (Util.isWindows()) {
      int i=path.lastIndexOf(File.separator);
      if (i >= 0) {
        valLength=2;
      }
      if (candidates.size() == 1) {
        String candidate=candidates.get(0);
        if (candidate.endsWith(File.separator)) {
          candidate=candidate + File.separator;
        }
        candidates.set(0,candidate);
      }
    }
  }
 else   if (propType.has(Util.RELATIVE_TO) && propType.get(Util.RELATIVE_TO).asBoolean()) {
    DeploymentItemCompleter completer=new DeploymentItemCompleter(address);
    candidates=new ArrayList<>();
    valLength=completer.complete(ctx,path,offset,candidates);
    if (candidates.isEmpty()) {
      return null;
    }
  }
 else   if (propType.has(Util.CAPABILITY_REFERENCE)) {
    CapabilityReferenceCompleter completer=factory.newCompleter(address,propType.get(Util.CAPABILITY_REFERENCE).asString());
    candidates=new ArrayList<>();
    completer.complete(ctx,path,offset,candidates);
    if (candidates.isEmpty()) {
      return null;
    }
    if (candidates.size() == 1) {
      String candidate=candidates.get(0);
      if (candidate.equals(path)) {
        candidates.clear();
        return candidates;
      }
    }
  }
  return candidates;
}",0.7353837628151842
167701,"private DefaultStateWithEndCharacter(String id,final char leaveStateChar,boolean endRequired,boolean enterLeaveContent,CharacterHandlerMap enterStateHandlers,boolean resolveSystemProperties){
  super(id,enterLeaveContent,enterStateHandlers,resolveSystemProperties);
  this.leaveStateChar=leaveStateChar;
  if (enterLeaveContent) {
    setLeaveHandler(new CharacterHandler(){
      @Override public void handle(      ParsingContext ctx) throws CommandFormatException {
        if (ctx.getCharacter() == leaveStateChar) {
          GlobalCharacterHandlers.CONTENT_CHARACTER_HANDLER.handle(ctx);
        }
      }
    }
);
  }
  if (endRequired) {
    this.setEndContentHandler(new ErrorCharacterHandler((""String_Node_Str"" + leaveStateChar + ""String_Node_Str"")));
  }
 else {
    this.setEndContentHandler(new CharacterHandler(){
      @Override public void handle(      ParsingContext ctx) throws CommandFormatException {
        ctx.setError(new ArgumentValueNotFinishedException(""String_Node_Str"" + leaveStateChar + ""String_Node_Str""));
      }
    }
);
  }
  this.setDefaultHandler(GlobalCharacterHandlers.CONTENT_CHARACTER_HANDLER);
}","private DefaultStateWithEndCharacter(String id,final char leaveStateChar,boolean endRequired,boolean enterLeaveContent,CharacterHandlerMap enterStateHandlers,boolean resolveSystemProperties){
  super(id,enterLeaveContent,enterStateHandlers,resolveSystemProperties);
  this.leaveStateChar=leaveStateChar;
  if (enterLeaveContent) {
    setLeaveHandler(new CharacterHandler(){
      @Override public void handle(      ParsingContext ctx) throws CommandFormatException {
        if (ctx.getCharacter() == leaveStateChar && !ctx.isEndOfContent()) {
          GlobalCharacterHandlers.CONTENT_CHARACTER_HANDLER.handle(ctx);
        }
      }
    }
);
  }
  if (endRequired) {
    this.setEndContentHandler(new ErrorCharacterHandler((""String_Node_Str"" + leaveStateChar + ""String_Node_Str"")));
  }
 else {
    this.setEndContentHandler(new CharacterHandler(){
      @Override public void handle(      ParsingContext ctx) throws CommandFormatException {
        ctx.setError(new ArgumentValueNotFinishedException(""String_Node_Str"" + leaveStateChar + ""String_Node_Str""));
      }
    }
);
  }
  this.setDefaultHandler(GlobalCharacterHandlers.CONTENT_CHARACTER_HANDLER);
}",0.9891162385720506
167702,"public CipherSuiteFilterValidator(){
  super(ModelType.STRING,true,true,false);
}","CipherSuiteFilterValidator(){
  super(ModelType.STRING,true,true,false);
}",0.9548387096774194
167703,"/** 
 * Connect to the server using a specified host and port.
 * @param protocol The protocol
 * @param controllerHost The host name.
 * @param controllerPort The port.
 * @param username The user name for logging in.
 * @param password The password for logging in.
 */
public void connect(String protocol,String controllerHost,int controllerPort,String username,char[] password,String clientBindAddress){
  doConnect(() -> {
    return CommandContextFactory.getInstance().newCommandContext(new CommandContextConfiguration.Builder().setController(constructUri(protocol,controllerHost,controllerPort)).setUsername(username).setPassword(password).setClientBindAddress(clientBindAddress).build());
  }
);
}","/** 
 * Connect to the server using a specified host and port.
 * @param protocol The protocol
 * @param controllerHost The host name.
 * @param controllerPort The port.
 * @param username The user name for logging in.
 * @param password The password for logging in.
 */
public void connect(String protocol,String controllerHost,int controllerPort,String username,char[] password,String clientBindAddress){
  doConnect(() -> {
    return CommandContextFactory.getInstance().newCommandContext(new CommandContextConfiguration.Builder().setController(constructUri(protocol,controllerHost,controllerPort)).setUsername(username).setPassword(password).setErrorOnInteract(false).setClientBindAddress(clientBindAddress).build());
  }
);
}",0.9818688981868898
167704,"public static String getMessagesFromThrowable(Throwable t){
  final StringBuilder buf=new StringBuilder();
  if (t.getLocalizedMessage() != null) {
    buf.append(t.getLocalizedMessage());
  }
 else {
    buf.append(t.getClass().getName());
  }
  Throwable t1=t.getCause();
  while (t1 != null) {
    if (t1.getLocalizedMessage() != null) {
      buf.append(""String_Node_Str"").append(t1.getLocalizedMessage());
    }
 else {
      buf.append(""String_Node_Str"").append(t1.getClass().getName());
    }
    t1=t1.getCause();
  }
  for (  Throwable suppressed : t.getSuppressed()) {
    if (suppressed.getLocalizedMessage() != null) {
      buf.append(""String_Node_Str"").append(suppressed.getLocalizedMessage());
    }
 else {
      buf.append(""String_Node_Str"").append(suppressed.getClass().getName());
    }
  }
  return buf.toString();
}","public static String getMessagesFromThrowable(Throwable t){
  final StringBuilder buf=new StringBuilder();
  if (t.getLocalizedMessage() != null) {
    buf.append(t.getLocalizedMessage());
  }
 else {
    buf.append(t.getClass().getName());
  }
  boolean encodingSeen=false;
  if (t instanceof CharacterCodingException) {
    encodingSeen=true;
    buf.append(""String_Node_Str"" + ENCODING_EXCEPTION_MESSAGE);
  }
  Throwable t1=t.getCause();
  while (t1 != null) {
    if (t1.getLocalizedMessage() != null) {
      buf.append(""String_Node_Str"").append(t1.getLocalizedMessage());
    }
 else {
      buf.append(""String_Node_Str"").append(t1.getClass().getName());
    }
    if (!encodingSeen && t1 instanceof CharacterCodingException) {
      encodingSeen=true;
      buf.append(""String_Node_Str"" + ENCODING_EXCEPTION_MESSAGE);
    }
    t1=t1.getCause();
  }
  for (  Throwable suppressed : t.getSuppressed()) {
    if (suppressed.getLocalizedMessage() != null) {
      buf.append(""String_Node_Str"").append(suppressed.getLocalizedMessage());
    }
 else {
      buf.append(""String_Node_Str"").append(suppressed.getClass().getName());
    }
  }
  return buf.toString();
}",0.8343313373253493
167705,"private List<String> getCommandLines(File file){
  try {
    return Files.readAllLines(file.toPath(),StandardCharsets.UTF_8);
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
}","private List<String> getCommandLines(File file){
  List<String> lines=new ArrayList<>();
  try (BufferedReader reader=new BufferedReader(new FileReader(file))){
    String line=reader.readLine();
    while (line != null) {
      lines.add(line);
      line=reader.readLine();
    }
  }
 catch (  Throwable e) {
    throw new IllegalStateException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
  return lines;
}",0.4272727272727272
167706,"@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  ParsedCommandLine args=ctx.getParsedCommandLine();
  final String path=this.path.getValue(args,true);
  final File archive;
  archive=new File(path);
  if (!archive.exists()) {
    throw new OperationFormatException(""String_Node_Str"" + archive.getAbsolutePath() + ""String_Node_Str"");
  }
  if (archive.isDirectory()) {
    throw new OperationFormatException(archive.getAbsolutePath() + ""String_Node_Str"");
  }
  File root;
  try {
    root=extractArchive(archive);
  }
 catch (  IOException e) {
    throw new OperationFormatException(""String_Node_Str"" + archive.getAbsolutePath() + ""String_Node_Str"");
  }
  ctx.setCurrentDir(root);
  String holdbackBatch=activateNewBatch(ctx);
  try {
    String script=this.script.getValue(args);
    if (script == null) {
      script=""String_Node_Str"";
    }
    File scriptFile=new File(ctx.getCurrentDir(),script);
    if (!scriptFile.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
    }
    ctx.printLine(""String_Node_Str"" + script + ""String_Node_Str"");
    try (BufferedReader reader=Files.newBufferedReader(scriptFile.toPath(),StandardCharsets.UTF_8)){
      String line=reader.readLine();
      while (!ctx.isTerminated() && line != null) {
        ctx.handle(line);
        line=reader.readLine();
      }
    }
 catch (    FileNotFoundException e) {
      throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
    }
catch (    IOException e) {
      throw new CommandFormatException(e.getMessage());
    }
catch (    CommandLineException e) {
      throw new CommandFormatException(e.getMessage());
    }
    ModelNode composite=ctx.getBatchManager().getActiveBatch().toRequest();
    return composite;
  }
  finally {
    ctx.setCurrentDir(new File(""String_Node_Str""));
    discardBatch(ctx,holdbackBatch);
    recursiveDelete(root);
  }
}","@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  ParsedCommandLine args=ctx.getParsedCommandLine();
  final String path=this.path.getValue(args,true);
  final File archive;
  archive=new File(path);
  if (!archive.exists()) {
    throw new OperationFormatException(""String_Node_Str"" + archive.getAbsolutePath() + ""String_Node_Str"");
  }
  if (archive.isDirectory()) {
    throw new OperationFormatException(archive.getAbsolutePath() + ""String_Node_Str"");
  }
  File root;
  try {
    root=extractArchive(archive);
  }
 catch (  IOException e) {
    throw new OperationFormatException(""String_Node_Str"" + archive.getAbsolutePath() + ""String_Node_Str"");
  }
  ctx.setCurrentDir(root);
  String holdbackBatch=activateNewBatch(ctx);
  try {
    String script=this.script.getValue(args);
    if (script == null) {
      script=""String_Node_Str"";
    }
    File scriptFile=new File(ctx.getCurrentDir(),script);
    if (!scriptFile.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
    }
    ctx.printLine(""String_Node_Str"" + script + ""String_Node_Str"");
    try (BufferedReader reader=new BufferedReader(new FileReader(scriptFile))){
      String line=reader.readLine();
      while (!ctx.isTerminated() && line != null) {
        ctx.handle(line);
        line=reader.readLine();
      }
    }
 catch (    FileNotFoundException e) {
      throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
    }
catch (    IOException e) {
      throw new CommandFormatException(e.getMessage());
    }
catch (    CommandLineException e) {
      throw new CommandFormatException(e.getMessage());
    }
    ModelNode composite=ctx.getBatchManager().getActiveBatch().toRequest();
    return composite;
  }
  finally {
    ctx.setCurrentDir(new File(""String_Node_Str""));
    discardBatch(ctx,holdbackBatch);
    recursiveDelete(root);
  }
}",0.9819384380564742
167707,"@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  ParsedCommandLine args=ctx.getParsedCommandLine();
  boolean l=this.l.isPresent(args);
  if (!args.hasProperties() || l) {
    throw new OperationFormatException(""String_Node_Str"" + args.getOriginalLine() + ""String_Node_Str"");
  }
  final boolean unmanaged=this.unmanaged.isPresent(args);
  final String path=this.path.getValue(args);
  final File f;
  if (path != null) {
    f=new File(path);
    if (!f.exists()) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    if (!unmanaged && f.isDirectory()) {
      throw new OperationFormatException(f.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 else {
    f=null;
  }
  String name=this.name.getValue(args);
  if (name == null) {
    if (f == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
    name=f.getName();
  }
  final String runtimeName=rtName.getValue(args);
  final boolean force=this.force.isPresent(args);
  final boolean disabled=this.disabled.isPresent(args);
  final String serverGroups=this.serverGroups.getValue(args);
  final boolean allServerGroups=this.allServerGroups.isPresent(args);
  final boolean archive=isCliArchive(f);
  if (name.equals(ALL)) {
    if (force || disabled) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    List<String> sgList=getServerGroups(ctx,client,allServerGroups,serverGroups,f);
    try {
      return buildDeployAllRequest(client,sgList);
    }
 catch (    IOException ex) {
      throw new CommandFormatException(ex.getMessage(),ex);
    }
  }
  if (force) {
    if (f == null) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"");
    }
    if ((disabled && ctx.isDomainMode()) || serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"" + this.disabled.getFullName()+ ""String_Node_Str""+ this.serverGroups.getFullName()+ ""String_Node_Str""+ this.allServerGroups.getFullName()+ '.');
    }
    if (archive) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"");
    }
    if (Util.isDeploymentInRepository(name,client)) {
      return buildDeploymentReplace(f,name,runtimeName,disabled);
    }
 else {
      return buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : disabled);
    }
  }
  if (disabled) {
    if (f == null) {
      throw new OperationFormatException(this.disabled.getFullName() + ""String_Node_Str"");
    }
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str""+ this.disabled.getFullName()+ '.');
    }
    if (archive) {
      throw new OperationFormatException(this.disabled.getFullName() + ""String_Node_Str"");
    }
    if (!ctx.isBatchMode() && Util.isDeploymentInRepository(name,client)) {
      throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str""+ this.force.getFullName()+ ""String_Node_Str"");
    }
    return buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : Boolean.TRUE);
  }
  if (archive) {
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str"");
    }
    TempFileProvider tempFileProvider;
    MountHandle root;
    try {
      tempFileProvider=TempFileProvider.create(""String_Node_Str"",Executors.newSingleThreadScheduledExecutor(),true);
      root=extractArchive(f,tempFileProvider);
    }
 catch (    IOException e) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    ctx.setCurrentDir(root.getMountSource());
    String holdbackBatch=activateNewBatch(ctx);
    try {
      String script=this.script.getValue(args);
      if (script == null) {
        script=""String_Node_Str"";
      }
      File scriptFile=new File(ctx.getCurrentDir(),script);
      if (!scriptFile.exists()) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
      }
      BufferedReader reader=null;
      try {
        reader=Files.newBufferedReader(scriptFile.toPath(),StandardCharsets.UTF_8);
        String line=reader.readLine();
        while (!ctx.isTerminated() && line != null) {
          ctx.handle(line);
          line=reader.readLine();
        }
      }
 catch (      FileNotFoundException e) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
      }
catch (      IOException e) {
        throw new CommandFormatException(""String_Node_Str"" + scriptFile.getName() + ""String_Node_Str""+ e.getMessage(),e);
      }
catch (      CommandLineException e) {
        throw new CommandFormatException(e.getMessage(),e);
      }
 finally {
        if (reader != null) {
          try {
            reader.close();
          }
 catch (          IOException e) {
          }
        }
      }
      return ctx.getBatchManager().getActiveBatch().toRequest();
    }
  finally {
      ctx.setCurrentDir(currentDir);
      discardBatch(ctx,holdbackBatch);
      VFSUtils.safeClose(root,tempFileProvider);
    }
  }
  final ModelNode deployRequest;
  if (ctx.isDomainMode()) {
    final List<String> sgList=getServerGroups(ctx,client,allServerGroups,serverGroups,f);
    deployRequest=new ModelNode();
    deployRequest.get(Util.OPERATION).set(Util.COMPOSITE);
    deployRequest.get(Util.ADDRESS).setEmptyList();
    ModelNode steps=deployRequest.get(Util.STEPS);
    for (    String serverGroup : sgList) {
      steps.add(Util.configureDeploymentOperation(Util.ADD,name,serverGroup));
    }
    for (    String serverGroup : sgList) {
      steps.add(Util.configureDeploymentOperation(Util.DEPLOY,name,serverGroup));
    }
  }
 else {
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str"");
    }
    deployRequest=new ModelNode();
    deployRequest.get(Util.OPERATION).set(Util.DEPLOY);
    deployRequest.get(Util.ADDRESS,Util.DEPLOYMENT).set(name);
  }
  final ModelNode addRequest;
  if (f != null) {
    if (!ctx.isBatchMode() && Util.isDeploymentInRepository(name,client)) {
      throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str""+ this.force.getFullName()+ ""String_Node_Str"");
    }
    addRequest=this.buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : Boolean.FALSE);
  }
 else   if (!ctx.isBatchMode() && !Util.isDeploymentInRepository(name,client)) {
    throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    addRequest=null;
  }
  if (addRequest != null) {
    final ModelNode composite=new ModelNode();
    composite.get(Util.OPERATION).set(Util.COMPOSITE);
    composite.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=composite.get(Util.STEPS);
    steps.add(addRequest);
    steps.add(deployRequest);
    return composite;
  }
  return deployRequest;
}","@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  ParsedCommandLine args=ctx.getParsedCommandLine();
  boolean l=this.l.isPresent(args);
  if (!args.hasProperties() || l) {
    throw new OperationFormatException(""String_Node_Str"" + args.getOriginalLine() + ""String_Node_Str"");
  }
  final boolean unmanaged=this.unmanaged.isPresent(args);
  final String path=this.path.getValue(args);
  final File f;
  if (path != null) {
    f=new File(path);
    if (!f.exists()) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    if (!unmanaged && f.isDirectory()) {
      throw new OperationFormatException(f.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 else {
    f=null;
  }
  String name=this.name.getValue(args);
  if (name == null) {
    if (f == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
    name=f.getName();
  }
  final String runtimeName=rtName.getValue(args);
  final boolean force=this.force.isPresent(args);
  final boolean disabled=this.disabled.isPresent(args);
  final String serverGroups=this.serverGroups.getValue(args);
  final boolean allServerGroups=this.allServerGroups.isPresent(args);
  final boolean archive=isCliArchive(f);
  if (name.equals(ALL)) {
    if (force || disabled) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    List<String> sgList=getServerGroups(ctx,client,allServerGroups,serverGroups,f);
    try {
      return buildDeployAllRequest(client,sgList);
    }
 catch (    IOException ex) {
      throw new CommandFormatException(ex.getMessage(),ex);
    }
  }
  if (force) {
    if (f == null) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"");
    }
    if ((disabled && ctx.isDomainMode()) || serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"" + this.disabled.getFullName()+ ""String_Node_Str""+ this.serverGroups.getFullName()+ ""String_Node_Str""+ this.allServerGroups.getFullName()+ '.');
    }
    if (archive) {
      throw new OperationFormatException(this.force.getFullName() + ""String_Node_Str"");
    }
    if (Util.isDeploymentInRepository(name,client)) {
      return buildDeploymentReplace(f,name,runtimeName,disabled);
    }
 else {
      return buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : disabled);
    }
  }
  if (disabled) {
    if (f == null) {
      throw new OperationFormatException(this.disabled.getFullName() + ""String_Node_Str"");
    }
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str""+ this.disabled.getFullName()+ '.');
    }
    if (archive) {
      throw new OperationFormatException(this.disabled.getFullName() + ""String_Node_Str"");
    }
    if (!ctx.isBatchMode() && Util.isDeploymentInRepository(name,client)) {
      throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str""+ this.force.getFullName()+ ""String_Node_Str"");
    }
    return buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : Boolean.TRUE);
  }
  if (archive) {
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str"");
    }
    TempFileProvider tempFileProvider;
    MountHandle root;
    try {
      tempFileProvider=TempFileProvider.create(""String_Node_Str"",Executors.newSingleThreadScheduledExecutor(),true);
      root=extractArchive(f,tempFileProvider);
    }
 catch (    IOException e) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    ctx.setCurrentDir(root.getMountSource());
    String holdbackBatch=activateNewBatch(ctx);
    try {
      String script=this.script.getValue(args);
      if (script == null) {
        script=""String_Node_Str"";
      }
      File scriptFile=new File(ctx.getCurrentDir(),script);
      if (!scriptFile.exists()) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
      }
      try (BufferedReader reader=new BufferedReader(new FileReader(scriptFile))){
        String line=reader.readLine();
        while (!ctx.isTerminated() && line != null) {
          ctx.handle(line);
          line=reader.readLine();
        }
      }
 catch (      FileNotFoundException e) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str"");
      }
catch (      IOException e) {
        throw new CommandFormatException(""String_Node_Str"" + scriptFile.getName() + ""String_Node_Str""+ e.getMessage(),e);
      }
catch (      CommandLineException e) {
        throw new CommandFormatException(e.getMessage(),e);
      }
      return ctx.getBatchManager().getActiveBatch().toRequest();
    }
  finally {
      ctx.setCurrentDir(currentDir);
      discardBatch(ctx,holdbackBatch);
      VFSUtils.safeClose(root,tempFileProvider);
    }
  }
  final ModelNode deployRequest;
  if (ctx.isDomainMode()) {
    final List<String> sgList=getServerGroups(ctx,client,allServerGroups,serverGroups,f);
    deployRequest=new ModelNode();
    deployRequest.get(Util.OPERATION).set(Util.COMPOSITE);
    deployRequest.get(Util.ADDRESS).setEmptyList();
    ModelNode steps=deployRequest.get(Util.STEPS);
    for (    String serverGroup : sgList) {
      steps.add(Util.configureDeploymentOperation(Util.ADD,name,serverGroup));
    }
    for (    String serverGroup : sgList) {
      steps.add(Util.configureDeploymentOperation(Util.DEPLOY,name,serverGroup));
    }
  }
 else {
    if (serverGroups != null || allServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allServerGroups.getFullName()+ ""String_Node_Str"");
    }
    deployRequest=new ModelNode();
    deployRequest.get(Util.OPERATION).set(Util.DEPLOY);
    deployRequest.get(Util.ADDRESS,Util.DEPLOYMENT).set(name);
  }
  final ModelNode addRequest;
  if (f != null) {
    if (!ctx.isBatchMode() && Util.isDeploymentInRepository(name,client)) {
      throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str""+ this.force.getFullName()+ ""String_Node_Str"");
    }
    addRequest=this.buildDeploymentAdd(f,name,runtimeName,unmanaged,ctx.isDomainMode() ? null : Boolean.FALSE);
  }
 else   if (!ctx.isBatchMode() && !Util.isDeploymentInRepository(name,client)) {
    throw new OperationFormatException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    addRequest=null;
  }
  if (addRequest != null) {
    final ModelNode composite=new ModelNode();
    composite.get(Util.OPERATION).set(Util.COMPOSITE);
    composite.get(Util.ADDRESS).setEmptyList();
    final ModelNode steps=composite.get(Util.STEPS);
    steps.add(addRequest);
    steps.add(deployRequest);
    return composite;
  }
  return deployRequest;
}",0.9786943458071564
167708,"@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=this.name.getValue(args);
  boolean keepContent=this.keepContent.isPresent(args);
  final boolean allRelevantServerGroups=this.allRelevantServerGroups.isPresent(args);
  final String serverGroupsStr=this.serverGroups.getValue(args);
  final String path=this.path.getValue(args);
  final File f;
  if (path != null) {
    f=new File(path);
    if (!f.exists()) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    if (!isCliArchive(f)) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 else {
    f=null;
  }
  if (isCliArchive(f)) {
    if (name != null) {
      throw new OperationFormatException(this.name.getFullName() + ""String_Node_Str"");
    }
    if (serverGroupsStr != null || allRelevantServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allRelevantServerGroups.getFullName()+ ""String_Node_Str"");
    }
    if (keepContent) {
      throw new OperationFormatException(this.keepContent.getFullName() + ""String_Node_Str"");
    }
    TempFileProvider tempFileProvider;
    MountHandle root;
    try {
      tempFileProvider=TempFileProvider.create(""String_Node_Str"",Executors.newSingleThreadScheduledExecutor(),true);
      root=extractArchive(f,tempFileProvider);
    }
 catch (    IOException e) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    ctx.setCurrentDir(root.getMountSource());
    String holdbackBatch=activateNewBatch(ctx);
    try {
      String script=this.script.getValue(args);
      if (script == null) {
        script=""String_Node_Str"";
      }
      File scriptFile=new File(ctx.getCurrentDir(),script);
      if (!scriptFile.exists()) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"");
      }
      BufferedReader reader=null;
      try {
        reader=Files.newBufferedReader(scriptFile.toPath(),StandardCharsets.UTF_8);
        String line=reader.readLine();
        while (!ctx.isTerminated() && line != null) {
          ctx.handle(line);
          line=reader.readLine();
        }
      }
 catch (      FileNotFoundException e) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"");
      }
catch (      IOException e) {
        throw new CommandFormatException(""String_Node_Str"" + scriptFile.getName() + ""String_Node_Str""+ e.getMessage(),e);
      }
catch (      CommandLineException e) {
        throw new CommandFormatException(e.getMessage(),e);
      }
 finally {
        if (reader != null) {
          try {
            reader.close();
          }
 catch (          IOException e) {
          }
        }
      }
      return ctx.getBatchManager().getActiveBatch().toRequest();
    }
  finally {
      ctx.setCurrentDir(currentDir);
      discardBatch(ctx,holdbackBatch);
      VFSUtils.safeClose(root,tempFileProvider);
    }
  }
  if (name == null) {
    throw new OperationFormatException(""String_Node_Str"");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
  DefaultOperationRequestBuilder builder;
  final List<String> deploymentNames;
  if (name.indexOf('*') < 0) {
    deploymentNames=Collections.singletonList(name);
  }
 else {
    deploymentNames=Util.getMatchingDeployments(client,name,null);
    if (deploymentNames.isEmpty()) {
      throw new CommandFormatException(""String_Node_Str"" + name);
    }
  }
  for (  String deploymentName : deploymentNames) {
    final List<String> serverGroups;
    if (ctx.isDomainMode()) {
      if (allRelevantServerGroups) {
        if (keepContent) {
          serverGroups=Util.getAllEnabledServerGroups(deploymentName,client);
        }
 else {
          try {
            serverGroups=Util.getServerGroupsReferencingDeployment(deploymentName,client);
          }
 catch (          CommandLineException e) {
            throw new CommandFormatException(""String_Node_Str"",e);
          }
        }
      }
 else {
        if (serverGroupsStr == null) {
          serverGroups=Collections.emptyList();
        }
 else {
          serverGroups=Arrays.asList(serverGroupsStr.split(""String_Node_Str""));
        }
      }
      if (serverGroups.isEmpty()) {
        if (keepContent) {
          throw new OperationFormatException(""String_Node_Str"");
        }
      }
 else {
        if (!keepContent) {
          try {
            List<String> sg=Util.getServerGroupsReferencingDeployment(deploymentName,client);
            keepContent=!serverGroups.containsAll(sg);
          }
 catch (          CommandLineException e) {
            throw new CommandFormatException(""String_Node_Str"",e);
          }
        }
        for (        String group : serverGroups) {
          ModelNode groupStep=Util.configureDeploymentOperation(Util.UNDEPLOY,deploymentName,group);
          steps.add(groupStep);
          if (!keepContent) {
            groupStep=Util.configureDeploymentOperation(Util.REMOVE,deploymentName,group);
            steps.add(groupStep);
          }
        }
      }
    }
 else {
      if (Util.isDeployedAndEnabledInStandalone(deploymentName,client)) {
        builder=new DefaultOperationRequestBuilder();
        builder.setOperationName(Util.UNDEPLOY);
        builder.addNode(Util.DEPLOYMENT,deploymentName);
        steps.add(builder.buildRequest());
      }
    }
  }
  if (!keepContent) {
    for (    String deploymentName : deploymentNames) {
      builder=new DefaultOperationRequestBuilder();
      builder.setOperationName(Util.REMOVE);
      builder.addNode(Util.DEPLOYMENT,deploymentName);
      steps.add(builder.buildRequest());
    }
  }
  return composite;
}","@Override public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws CommandFormatException {
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=this.name.getValue(args);
  boolean keepContent=this.keepContent.isPresent(args);
  final boolean allRelevantServerGroups=this.allRelevantServerGroups.isPresent(args);
  final String serverGroupsStr=this.serverGroups.getValue(args);
  final String path=this.path.getValue(args);
  final File f;
  if (path != null) {
    f=new File(path);
    if (!f.exists()) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    if (!isCliArchive(f)) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 else {
    f=null;
  }
  if (isCliArchive(f)) {
    if (name != null) {
      throw new OperationFormatException(this.name.getFullName() + ""String_Node_Str"");
    }
    if (serverGroupsStr != null || allRelevantServerGroups) {
      throw new OperationFormatException(this.serverGroups.getFullName() + ""String_Node_Str"" + this.allRelevantServerGroups.getFullName()+ ""String_Node_Str"");
    }
    if (keepContent) {
      throw new OperationFormatException(this.keepContent.getFullName() + ""String_Node_Str"");
    }
    TempFileProvider tempFileProvider;
    MountHandle root;
    try {
      tempFileProvider=TempFileProvider.create(""String_Node_Str"",Executors.newSingleThreadScheduledExecutor(),true);
      root=extractArchive(f,tempFileProvider);
    }
 catch (    IOException e) {
      throw new OperationFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    ctx.setCurrentDir(root.getMountSource());
    String holdbackBatch=activateNewBatch(ctx);
    try {
      String script=this.script.getValue(args);
      if (script == null) {
        script=""String_Node_Str"";
      }
      File scriptFile=new File(ctx.getCurrentDir(),script);
      if (!scriptFile.exists()) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"");
      }
      try (BufferedReader reader=new BufferedReader(new FileReader(scriptFile))){
        String line=reader.readLine();
        while (!ctx.isTerminated() && line != null) {
          ctx.handle(line);
          line=reader.readLine();
        }
      }
 catch (      FileNotFoundException e) {
        throw new CommandFormatException(""String_Node_Str"" + script + ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"");
      }
catch (      IOException e) {
        throw new CommandFormatException(""String_Node_Str"" + scriptFile.getName() + ""String_Node_Str""+ e.getMessage(),e);
      }
catch (      CommandLineException e) {
        throw new CommandFormatException(e.getMessage(),e);
      }
      return ctx.getBatchManager().getActiveBatch().toRequest();
    }
  finally {
      ctx.setCurrentDir(currentDir);
      discardBatch(ctx,holdbackBatch);
      VFSUtils.safeClose(root,tempFileProvider);
    }
  }
  if (name == null) {
    throw new OperationFormatException(""String_Node_Str"");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
  DefaultOperationRequestBuilder builder;
  final List<String> deploymentNames;
  if (name.indexOf('*') < 0) {
    deploymentNames=Collections.singletonList(name);
  }
 else {
    deploymentNames=Util.getMatchingDeployments(client,name,null);
    if (deploymentNames.isEmpty()) {
      throw new CommandFormatException(""String_Node_Str"" + name);
    }
  }
  for (  String deploymentName : deploymentNames) {
    final List<String> serverGroups;
    if (ctx.isDomainMode()) {
      if (allRelevantServerGroups) {
        if (keepContent) {
          serverGroups=Util.getAllEnabledServerGroups(deploymentName,client);
        }
 else {
          try {
            serverGroups=Util.getServerGroupsReferencingDeployment(deploymentName,client);
          }
 catch (          CommandLineException e) {
            throw new CommandFormatException(""String_Node_Str"",e);
          }
        }
      }
 else {
        if (serverGroupsStr == null) {
          serverGroups=Collections.emptyList();
        }
 else {
          serverGroups=Arrays.asList(serverGroupsStr.split(""String_Node_Str""));
        }
      }
      if (serverGroups.isEmpty()) {
        if (keepContent) {
          throw new OperationFormatException(""String_Node_Str"");
        }
      }
 else {
        if (!keepContent) {
          try {
            List<String> sg=Util.getServerGroupsReferencingDeployment(deploymentName,client);
            keepContent=!serverGroups.containsAll(sg);
          }
 catch (          CommandLineException e) {
            throw new CommandFormatException(""String_Node_Str"",e);
          }
        }
        for (        String group : serverGroups) {
          ModelNode groupStep=Util.configureDeploymentOperation(Util.UNDEPLOY,deploymentName,group);
          steps.add(groupStep);
          if (!keepContent) {
            groupStep=Util.configureDeploymentOperation(Util.REMOVE,deploymentName,group);
            steps.add(groupStep);
          }
        }
      }
    }
 else {
      if (Util.isDeployedAndEnabledInStandalone(deploymentName,client)) {
        builder=new DefaultOperationRequestBuilder();
        builder.setOperationName(Util.UNDEPLOY);
        builder.addNode(Util.DEPLOYMENT,deploymentName);
        steps.add(builder.buildRequest());
      }
    }
  }
  if (!keepContent) {
    for (    String deploymentName : deploymentNames) {
      builder=new DefaultOperationRequestBuilder();
      builder.setOperationName(Util.REMOVE);
      builder.addNode(Util.DEPLOYMENT,deploymentName);
      steps.add(builder.buildRequest());
    }
  }
  return composite;
}",0.974613506916192
167709,"@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final BatchManager batchManager=ctx.getBatchManager();
  final boolean list=l.isPresent(ctx.getParsedCommandLine());
  final String path=file.getValue(ctx.getParsedCommandLine());
  final String name=this.name.getValue(ctx.getParsedCommandLine());
  if (list) {
    if (path != null || name != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final Set<String> heldbackNames=batchManager.getHeldbackNames();
    if (!heldbackNames.isEmpty()) {
      List<String> names=new ArrayList<String>(heldbackNames.size());
      for (      String heldbackName : heldbackNames) {
        names.add(heldbackName == null ? ""String_Node_Str"" : heldbackName);
      }
      Collections.sort(names);
      for (      String heldbackName : names) {
        ctx.printLine(heldbackName);
      }
    }
    return;
  }
  if (batchManager.isBatchActive()) {
    throw new CommandLineException(""String_Node_Str"");
  }
  if (path != null) {
    if (name != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    final File baseDir=f.getParentFile();
    if (baseDir != null) {
      ctx.setCurrentDir(baseDir);
    }
    BufferedReader reader=null;
    try {
      reader=Files.newBufferedReader(f.toPath(),StandardCharsets.UTF_8);
      String line=reader.readLine();
      batchManager.activateNewBatch();
      final Batch batch=batchManager.getActiveBatch();
      while (line != null) {
        line=line.trim();
        if (!line.isEmpty() && line.charAt(0) != '#') {
          batch.add(ctx.toBatchedCommand(line));
        }
        line=reader.readLine();
      }
    }
 catch (    IOException e) {
      batchManager.discardActiveBatch();
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
catch (    CommandFormatException e) {
      batchManager.discardActiveBatch();
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
 finally {
      if (baseDir != null) {
        ctx.setCurrentDir(currentDir);
      }
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        IOException e) {
        }
      }
    }
    return;
  }
  boolean activated;
  if (batchManager.isHeldback(name)) {
    activated=batchManager.activateHeldbackBatch(name);
    if (activated) {
      final String msg=name == null ? ""String_Node_Str"" : ""String_Node_Str"" + name + ""String_Node_Str"";
      ctx.printLine(msg);
      List<BatchedCommand> batch=batchManager.getActiveBatch().getCommands();
      if (!batch.isEmpty()) {
        for (int i=0; i < batch.size(); ++i) {
          BatchedCommand cmd=batch.get(i);
          ctx.printLine(""String_Node_Str"" + (i + 1) + ' '+ cmd.getCommand());
        }
      }
    }
  }
 else   if (name != null) {
    throw new CommandLineException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    activated=batchManager.activateNewBatch();
  }
  if (!activated) {
    throw new CommandLineException(""String_Node_Str"");
  }
}","@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final BatchManager batchManager=ctx.getBatchManager();
  final boolean list=l.isPresent(ctx.getParsedCommandLine());
  final String path=file.getValue(ctx.getParsedCommandLine());
  final String name=this.name.getValue(ctx.getParsedCommandLine());
  if (list) {
    if (path != null || name != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final Set<String> heldbackNames=batchManager.getHeldbackNames();
    if (!heldbackNames.isEmpty()) {
      List<String> names=new ArrayList<String>(heldbackNames.size());
      for (      String heldbackName : heldbackNames) {
        names.add(heldbackName == null ? ""String_Node_Str"" : heldbackName);
      }
      Collections.sort(names);
      for (      String heldbackName : names) {
        ctx.printLine(heldbackName);
      }
    }
    return;
  }
  if (batchManager.isBatchActive()) {
    throw new CommandLineException(""String_Node_Str"");
  }
  if (path != null) {
    if (name != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    final File baseDir=f.getParentFile();
    if (baseDir != null) {
      ctx.setCurrentDir(baseDir);
    }
    try (BufferedReader reader=new BufferedReader(new FileReader(f))){
      String line=reader.readLine();
      batchManager.activateNewBatch();
      final Batch batch=batchManager.getActiveBatch();
      while (line != null) {
        line=line.trim();
        if (!line.isEmpty() && line.charAt(0) != '#') {
          batch.add(ctx.toBatchedCommand(line));
        }
        line=reader.readLine();
      }
    }
 catch (    IOException e) {
      batchManager.discardActiveBatch();
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
catch (    CommandFormatException e) {
      batchManager.discardActiveBatch();
      throw new CommandLineException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
 finally {
      if (baseDir != null) {
        ctx.setCurrentDir(currentDir);
      }
    }
    return;
  }
  boolean activated;
  if (batchManager.isHeldback(name)) {
    activated=batchManager.activateHeldbackBatch(name);
    if (activated) {
      final String msg=name == null ? ""String_Node_Str"" : ""String_Node_Str"" + name + ""String_Node_Str"";
      ctx.printLine(msg);
      List<BatchedCommand> batch=batchManager.getActiveBatch().getCommands();
      if (!batch.isEmpty()) {
        for (int i=0; i < batch.size(); ++i) {
          BatchedCommand cmd=batch.get(i);
          ctx.printLine(""String_Node_Str"" + (i + 1) + ' '+ cmd.getCommand());
        }
      }
    }
  }
 else   if (name != null) {
    throw new CommandLineException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
 else {
    activated=batchManager.activateNewBatch();
  }
  if (!activated) {
    throw new CommandLineException(""String_Node_Str"");
  }
}",0.7276987970629589
167710,"@Override protected ModelNode buildRequestWOValidation(CommandContext ctx) throws CommandFormatException {
  final String path=file.getValue(ctx.getParsedCommandLine());
  final ModelNode headersNode=headers.isPresent(ctx.getParsedCommandLine()) ? headers.toModelNode(ctx) : null;
  final BatchManager batchManager=ctx.getBatchManager();
  if (batchManager.isBatchActive()) {
    if (path != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final Batch batch=batchManager.getActiveBatch();
    List<BatchedCommand> currentBatch=batch.getCommands();
    if (currentBatch.isEmpty()) {
      batchManager.discardActiveBatch();
      throw new CommandFormatException(""String_Node_Str"");
    }
    final ModelNode request=batch.toRequest();
    if (headersNode != null) {
      request.get(Util.OPERATION_HEADERS).set(headersNode);
    }
    return request;
  }
  if (path != null) {
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    final File baseDir=f.getParentFile();
    if (baseDir != null) {
      ctx.setCurrentDir(baseDir);
    }
    BufferedReader reader=null;
    try {
      reader=Files.newBufferedReader(f.toPath(),StandardCharsets.UTF_8);
      String line=reader.readLine();
      batchManager.activateNewBatch();
      while (line != null) {
        ctx.handle(line.trim());
        line=reader.readLine();
      }
      final ModelNode request=batchManager.getActiveBatch().toRequest();
      if (headersNode != null) {
        request.get(Util.OPERATION_HEADERS).set(headersNode);
      }
      return request;
    }
 catch (    IOException e) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
catch (    CommandLineException e) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
 finally {
      if (baseDir != null) {
        ctx.setCurrentDir(currentDir);
      }
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  throw new CommandFormatException(""String_Node_Str"");
}","@Override protected ModelNode buildRequestWOValidation(CommandContext ctx) throws CommandFormatException {
  final String path=file.getValue(ctx.getParsedCommandLine());
  final ModelNode headersNode=headers.isPresent(ctx.getParsedCommandLine()) ? headers.toModelNode(ctx) : null;
  final BatchManager batchManager=ctx.getBatchManager();
  if (batchManager.isBatchActive()) {
    if (path != null) {
      throw new CommandFormatException(""String_Node_Str"");
    }
    final Batch batch=batchManager.getActiveBatch();
    List<BatchedCommand> currentBatch=batch.getCommands();
    if (currentBatch.isEmpty()) {
      batchManager.discardActiveBatch();
      throw new CommandFormatException(""String_Node_Str"");
    }
    final ModelNode request=batch.toRequest();
    if (headersNode != null) {
      request.get(Util.OPERATION_HEADERS).set(headersNode);
    }
    return request;
  }
  if (path != null) {
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str"");
    }
    final File currentDir=ctx.getCurrentDir();
    final File baseDir=f.getParentFile();
    if (baseDir != null) {
      ctx.setCurrentDir(baseDir);
    }
    try (BufferedReader reader=new BufferedReader(new FileReader(f))){
      String line=reader.readLine();
      batchManager.activateNewBatch();
      while (line != null) {
        ctx.handle(line.trim());
        line=reader.readLine();
      }
      final ModelNode request=batchManager.getActiveBatch().toRequest();
      if (headersNode != null) {
        request.get(Util.OPERATION_HEADERS).set(headersNode);
      }
      return request;
    }
 catch (    IOException e) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
catch (    CommandLineException e) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath(),e);
    }
 finally {
      if (baseDir != null) {
        ctx.setCurrentDir(currentDir);
      }
    }
  }
  throw new CommandFormatException(""String_Node_Str"");
}",0.9276300578034682
167711,"private static void processFile(File file,final CommandContext cmdCtx){
  BufferedReader reader=null;
  try {
    reader=Files.newBufferedReader(file.toPath(),StandardCharsets.UTF_8);
    String line=reader.readLine();
    while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {
      cmdCtx.handleSafe(line.trim());
      line=reader.readLine();
    }
  }
 catch (  Throwable e) {
    throw new IllegalStateException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e);
  }
 finally {
    StreamUtils.safeClose(reader);
  }
}","private static void processFile(File file,final CommandContext cmdCtx){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String line=reader.readLine();
    while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {
      cmdCtx.handleSafe(line.trim());
      line=reader.readLine();
    }
  }
 catch (  Throwable e) {
    throw new IllegalStateException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"",e);
  }
 finally {
    StreamUtils.safeClose(reader);
  }
}",0.944696282864914
167712,"protected void setOutputTarget(String filePath){
  if (filePath == null) {
    this.outputTarget=null;
    return;
  }
  try {
    this.outputTarget=Files.newBufferedWriter(Paths.get(filePath),StandardCharsets.UTF_8);
  }
 catch (  IOException e) {
    error(e.getLocalizedMessage());
  }
}","protected void setOutputTarget(String filePath){
  if (filePath == null) {
    this.outputTarget=null;
    return;
  }
  FileWriter writer;
  try {
    writer=new FileWriter(filePath,false);
  }
 catch (  IOException e) {
    error(e.getLocalizedMessage());
    return;
  }
  this.outputTarget=new BufferedWriter(writer);
}",0.7243066884176182
167713,"@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String action=this.action.getValue(args);
  if (action == null) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  if (action.equals(""String_Node_Str"")) {
    ctx.printColumns(getExistingCommands());
    return;
  }
  if (action.equals(""String_Node_Str"")) {
    final String nodePath=this.nodePath.getValue(args,true);
    final String propName=this.idProperty.getValue(args,false);
    final String cmdName=this.commandName.getValue(args,true);
    validateInput(ctx,nodePath,propName);
    if (cmdRegistry.getCommandHandler(cmdName) != null) {
      throw new CommandFormatException(""String_Node_Str"" + cmdName + ""String_Node_Str"");
    }
    cmdRegistry.registerHandler(new GenericTypeOperationHandler(ctx,nodePath,propName),cmdName);
    return;
  }
  if (action.equals(""String_Node_Str"")) {
    final String cmdName=this.commandName.getValue(args,true);
    CommandHandler handler=cmdRegistry.getCommandHandler(cmdName);
    if (!(handler instanceof GenericTypeOperationHandler)) {
      throw new CommandFormatException(""String_Node_Str"" + cmdName + ""String_Node_Str"");
    }
    cmdRegistry.remove(cmdName);
    return;
  }
  throw new CommandFormatException(""String_Node_Str"" + action);
}","@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String action=this.action.getValue(args);
  if (action == null) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  if (action.equals(""String_Node_Str"")) {
    ctx.printColumns(getExistingCommands());
    return;
  }
  if (action.equals(""String_Node_Str"")) {
    final String nodePath=this.nodePath.getValue(args,true);
    final String propName=this.idProperty.getValue(args,false);
    final String cmdName=this.commandName.getValue(args,true);
    validateInput(ctx,nodePath,propName);
    if (cmdRegistry.getCommandHandler(cmdName) != null) {
      throw new CommandFormatException(""String_Node_Str"" + cmdName + ""String_Node_Str"");
    }
    cmdRegistry.registerHandler(new GenericTypeOperationHandler(cmdName,ctx,nodePath,propName),cmdName);
    return;
  }
  if (action.equals(""String_Node_Str"")) {
    final String cmdName=this.commandName.getValue(args,true);
    CommandHandler handler=cmdRegistry.getCommandHandler(cmdName);
    if (!(handler instanceof GenericTypeOperationHandler)) {
      throw new CommandFormatException(""String_Node_Str"" + cmdName + ""String_Node_Str"");
    }
    cmdRegistry.remove(cmdName);
    return;
  }
  throw new CommandFormatException(""String_Node_Str"" + action);
}",0.9970695970695972
167714,"public GenericTypeOperationHandler(CommandContext ctx,String nodeType,String idProperty,String... excludeOperations){
  super(ctx,""String_Node_Str"",true);
  if (nodeType == null || nodeType.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + (nodeType == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (nodeType.startsWith(""String_Node_Str"") || nodeType.startsWith(""String_Node_Str"")) {
    int nextSep=nodeType.indexOf('/',7);
    if (nextSep < 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + nodeType + ""String_Node_Str"");
    }
    nodeType=nodeType.substring(nextSep);
    this.nodeType=nodeType;
  }
 else {
    this.nodeType=nodeType;
  }
  helpArg=new ArgumentWithoutValue(this,""String_Node_Str"",""String_Node_Str"");
  addRequiredPath(nodeType);
  this.commandName=getRequiredType();
  if (this.commandName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + nodeType + ""String_Node_Str"");
  }
  this.idProperty=idProperty;
  if (excludeOperations != null) {
    this.excludedOps=new HashSet<String>(Arrays.asList(excludeOperations));
  }
 else {
    excludedOps=Collections.emptySet();
  }
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,Util.PROFILE);
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!isDependsOnProfile()) {
        return false;
      }
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profileName == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      address.toNode(getRequiredType(),""String_Node_Str"");
      Collection<String> ops=Util.getOperationNames(ctx,address);
      ops.removeAll(excludedOps);
      if (customHandlers != null) {
        if (ops.isEmpty()) {
          ops=customHandlers.keySet();
        }
 else {
          ops=new HashSet<String>(ops);
          for (          Map.Entry<String,OperationCommandWithDescription> entry : customHandlers.entrySet()) {
            if (entry.getValue().isAvailable(ctx)) {
              ops.add(entry.getKey());
            }
 else {
              ops.remove(entry.getKey());
            }
          }
        }
      }
      return ops;
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addCantAppearAfter(helpArg);
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      return Util.getNodeNames(ctx.getModelControllerClient(),address,getRequiredType());
    }
  }
),(idProperty == null ? ""String_Node_Str"" : ""String_Node_Str"" + idProperty)){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name.addCantAppearAfter(helpArg);
  helpArg.addCantAppearAfter(name);
  helpProperties=new ArgumentWithoutValue(this,""String_Node_Str"");
  helpProperties.addRequiredPreceding(helpArg);
  helpProperties.addCantAppearAfter(operation);
  helpCommands=new ArgumentWithoutValue(this,""String_Node_Str"");
  helpCommands.addRequiredPreceding(helpArg);
  helpCommands.addCantAppearAfter(operation);
  helpCommands.addCantAppearAfter(helpProperties);
  helpProperties.addCantAppearAfter(helpCommands);
  staticArgs.put(helpArg.getFullName(),helpArg);
  staticArgs.put(helpCommands.getFullName(),helpCommands);
  staticArgs.put(helpProperties.getFullName(),helpProperties);
  staticArgs.put(profile.getFullName(),profile);
  staticArgs.put(name.getFullName(),name);
  staticArgs.put(operation.getFullName(),operation);
}","/** 
 * Generic command constructor.
 * @param commandName The name of the command. If null, nodeType is used.
 * @param ctx The CommandContext.
 * @param nodeType The resource type.
 * @param idProperty The property name that identify the resource.
 * @param excludeOperations The list of operations to exclude.
 */
public GenericTypeOperationHandler(String commandName,CommandContext ctx,String nodeType,String idProperty,String... excludeOperations){
  super(ctx,""String_Node_Str"",true);
  if (nodeType == null || nodeType.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + (nodeType == null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (nodeType.startsWith(""String_Node_Str"") || nodeType.startsWith(""String_Node_Str"")) {
    int nextSep=nodeType.indexOf('/',7);
    if (nextSep < 0) {
      throw new IllegalArgumentException(""String_Node_Str"" + nodeType + ""String_Node_Str"");
    }
    nodeType=nodeType.substring(nextSep);
    this.nodeType=nodeType;
  }
 else {
    this.nodeType=nodeType;
  }
  helpArg=new ArgumentWithoutValue(this,""String_Node_Str"",""String_Node_Str"");
  addRequiredPath(nodeType);
  this.commandName=commandName == null ? getRequiredType() : commandName;
  if (this.commandName == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + nodeType + ""String_Node_Str"");
  }
  this.idProperty=idProperty;
  if (excludeOperations != null) {
    this.excludedOps=new HashSet<String>(Arrays.asList(excludeOperations));
  }
 else {
    excludedOps=Collections.emptySet();
  }
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,Util.PROFILE);
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!isDependsOnProfile()) {
        return false;
      }
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public Collection<String> getAllCandidates(    CommandContext ctx){
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profileName == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      address.toNode(getRequiredType(),""String_Node_Str"");
      Collection<String> ops=Util.getOperationNames(ctx,address);
      ops.removeAll(excludedOps);
      if (customHandlers != null) {
        if (ops.isEmpty()) {
          ops=customHandlers.keySet();
        }
 else {
          ops=new HashSet<String>(ops);
          for (          Map.Entry<String,OperationCommandWithDescription> entry : customHandlers.entrySet()) {
            if (entry.getValue().isAvailable(ctx)) {
              ops.add(entry.getKey());
            }
 else {
              ops.remove(entry.getKey());
            }
          }
        }
      }
      return ops;
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addCantAppearAfter(helpArg);
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestAddress address=new DefaultOperationRequestAddress();
      if (isDependsOnProfile() && ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedCommandLine());
        if (profile == null) {
          return Collections.emptyList();
        }
        address.toNode(Util.PROFILE,profileName);
      }
      for (      OperationRequestAddress.Node node : getRequiredAddress()) {
        address.toNode(node.getType(),node.getName());
      }
      return Util.getNodeNames(ctx.getModelControllerClient(),address,getRequiredType());
    }
  }
),(idProperty == null ? ""String_Node_Str"" : ""String_Node_Str"" + idProperty)){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (isDependsOnProfile() && ctx.isDomainMode() && !profile.isValueComplete(ctx.getParsedCommandLine())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name.addCantAppearAfter(helpArg);
  helpArg.addCantAppearAfter(name);
  helpProperties=new ArgumentWithoutValue(this,""String_Node_Str"");
  helpProperties.addRequiredPreceding(helpArg);
  helpProperties.addCantAppearAfter(operation);
  helpCommands=new ArgumentWithoutValue(this,""String_Node_Str"");
  helpCommands.addRequiredPreceding(helpArg);
  helpCommands.addCantAppearAfter(operation);
  helpCommands.addCantAppearAfter(helpProperties);
  helpProperties.addCantAppearAfter(helpCommands);
  staticArgs.put(helpArg.getFullName(),helpArg);
  staticArgs.put(helpCommands.getFullName(),helpCommands);
  staticArgs.put(helpProperties.getFullName(),helpProperties);
  staticArgs.put(profile.getFullName(),profile);
  staticArgs.put(name.getFullName(),name);
  staticArgs.put(operation.getFullName(),operation);
}",0.9662387902233164
167715,"private void initCommands() throws CommandLineException {
  cmdRegistry.registerHandler(new AttachmentHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new PrefixHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new ClearScreenHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new CommandCommandHandler(cmdRegistry),""String_Node_Str"");
  cmdRegistry.registerHandler(new ConnectHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EchoDMRHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new HelpHandler(cmdRegistry),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new HistoryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new LsHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new ASModuleHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new PrintWorkingNodeHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new QuitHandler(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new ReadAttributeHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new ReadOperationHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new VersionHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new ConnectionInfoHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new CommandTimeoutHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new SetVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EchoVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new UnsetVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeployHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new UndeployHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeploymentInfoHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeploymentOverlayHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchDiscardHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchListHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchHoldbackHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchRunHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchClearHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchRemoveLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchMoveLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchEditLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new TryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new CatchHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new FinallyHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EndTryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new IfHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new ElseHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EndIfHandler(),""String_Node_Str"");
  final DefaultCompleter driverNameCompleter=new DefaultCompleter(JDBCDriverNameProvider.INSTANCE);
  final GenericTypeOperationHandler dsHandler=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  dsHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  final DataSourceAddCompositeHandler dsAddHandler=new DataSourceAddCompositeHandler(this,""String_Node_Str"");
  dsAddHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  dsHandler.addHandler(Util.ADD,dsAddHandler);
  cmdRegistry.registerHandler(dsHandler,""String_Node_Str"");
  final GenericTypeOperationHandler xaDsHandler=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  xaDsHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  final XADataSourceAddCompositeHandler xaDsAddHandler=new XADataSourceAddCompositeHandler(this,""String_Node_Str"");
  xaDsAddHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  xaDsHandler.addHandler(Util.ADD,xaDsAddHandler);
  cmdRegistry.registerHandler(xaDsHandler,""String_Node_Str"");
  cmdRegistry.registerHandler(new JDBCDriverInfoHandler(this),""String_Node_Str"");
  final GenericTypeOperationHandler rolloutPlan=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  rolloutPlan.addValueConverter(""String_Node_Str"",HeadersArgumentValueConverter.INSTANCE);
  rolloutPlan.addValueCompleter(""String_Node_Str"",RolloutPlanCompleter.INSTANCE);
  cmdRegistry.registerHandler(rolloutPlan,""String_Node_Str"");
  cmdRegistry.registerHandler(new ArchiveHandler(this),false,""String_Node_Str"");
  final AtomicReference<EmbeddedProcessLaunch> embeddedServerLaunch=EmbeddedControllerHandlerRegistrar.registerEmbeddedCommands(cmdRegistry,this);
  cmdRegistry.registerHandler(new ReloadHandler(this,embeddedServerLaunch),""String_Node_Str"");
  cmdRegistry.registerHandler(new ShutdownHandler(this,embeddedServerLaunch),""String_Node_Str"");
  registerExtraHandlers();
  extLoader=new ExtensionsLoader(cmdRegistry,this);
}","private void initCommands() throws CommandLineException {
  cmdRegistry.registerHandler(new AttachmentHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new PrefixHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new ClearScreenHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new CommandCommandHandler(cmdRegistry),""String_Node_Str"");
  cmdRegistry.registerHandler(new ConnectHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EchoDMRHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new HelpHandler(cmdRegistry),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new HistoryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new LsHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new ASModuleHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new PrintWorkingNodeHandler(),""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new QuitHandler(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmdRegistry.registerHandler(new ReadAttributeHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new ReadOperationHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new VersionHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new ConnectionInfoHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new CommandTimeoutHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new SetVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EchoVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new UnsetVariableHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeployHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new UndeployHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeploymentInfoHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new DeploymentOverlayHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchDiscardHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchListHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchHoldbackHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchRunHandler(this),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchClearHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchRemoveLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchMoveLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new BatchEditLineHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new TryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new CatchHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new FinallyHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EndTryHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new IfHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new ElseHandler(),""String_Node_Str"");
  cmdRegistry.registerHandler(new EndIfHandler(),""String_Node_Str"");
  final DefaultCompleter driverNameCompleter=new DefaultCompleter(JDBCDriverNameProvider.INSTANCE);
  final GenericTypeOperationHandler dsHandler=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  dsHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  final DataSourceAddCompositeHandler dsAddHandler=new DataSourceAddCompositeHandler(this,""String_Node_Str"");
  dsAddHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  dsHandler.addHandler(Util.ADD,dsAddHandler);
  cmdRegistry.registerHandler(dsHandler,dsHandler.getCommandName());
  final GenericTypeOperationHandler xaDsHandler=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  xaDsHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  final XADataSourceAddCompositeHandler xaDsAddHandler=new XADataSourceAddCompositeHandler(this,""String_Node_Str"");
  xaDsAddHandler.addValueCompleter(Util.DRIVER_NAME,driverNameCompleter);
  xaDsHandler.addHandler(Util.ADD,xaDsAddHandler);
  cmdRegistry.registerHandler(xaDsHandler,xaDsHandler.getCommandName());
  cmdRegistry.registerHandler(new JDBCDriverInfoHandler(this),""String_Node_Str"");
  final GenericTypeOperationHandler rolloutPlan=new GenericTypeOperationHandler(this,""String_Node_Str"",null);
  rolloutPlan.addValueConverter(""String_Node_Str"",HeadersArgumentValueConverter.INSTANCE);
  rolloutPlan.addValueCompleter(""String_Node_Str"",RolloutPlanCompleter.INSTANCE);
  cmdRegistry.registerHandler(rolloutPlan,rolloutPlan.getCommandName());
  cmdRegistry.registerHandler(new ArchiveHandler(this),false,""String_Node_Str"");
  final AtomicReference<EmbeddedProcessLaunch> embeddedServerLaunch=EmbeddedControllerHandlerRegistrar.registerEmbeddedCommands(cmdRegistry,this);
  cmdRegistry.registerHandler(new ReloadHandler(this,embeddedServerLaunch),""String_Node_Str"");
  cmdRegistry.registerHandler(new ShutdownHandler(this,embeddedServerLaunch),""String_Node_Str"");
  registerExtraHandlers();
  extLoader=new ExtensionsLoader(cmdRegistry,this);
}",0.9870936438622028
167716,"protected void listLinks(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(content,args);
  assertNotPresent(deployments,args);
  assertNotPresent(redeployAffected,args);
  final String name=this.name.getValue(args,true);
  if (name == null) {
    throw new CommandFormatException(this.name + ""String_Node_Str"");
  }
  final String sg=serverGroups.getValue(ctx.getParsedCommandLine());
  if (ctx.isDomainMode()) {
    final List<String> groups;
    if (sg == null) {
      groups=Util.getServerGroups(client);
    }
 else {
      groups=Arrays.asList(sg.split(""String_Node_Str""));
    }
    if (groups.size() == 0) {
      throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"");
    }
    for (    String group : groups) {
      final List<String> links=loadLinks(client,name,group);
      if (!links.isEmpty()) {
        ctx.printLine(""String_Node_Str"" + group + Util.LINE_SEPARATOR);
        ctx.printColumns(links);
        ctx.printLine(""String_Node_Str"");
      }
    }
  }
 else {
    final List<String> content=loadLinks(client,name,sg);
    if (l.isPresent(args)) {
      for (      String contentPath : content) {
        ctx.printLine(contentPath);
      }
    }
 else {
      ctx.printColumns(content);
    }
  }
}","protected void listLinks(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(content,args);
  assertNotPresent(deployments,args);
  assertNotPresent(redeployAffected,args);
  final String name=getName(ctx,true);
  final String sg=serverGroups.getValue(ctx.getParsedCommandLine());
  if (ctx.isDomainMode()) {
    final List<String> groups;
    if (sg == null) {
      groups=Util.getServerGroups(client);
    }
 else {
      groups=Arrays.asList(sg.split(""String_Node_Str""));
    }
    if (groups.size() == 0) {
      throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"");
    }
    for (    String group : groups) {
      final List<String> links=loadLinks(client,name,group);
      if (!links.isEmpty()) {
        ctx.printLine(""String_Node_Str"" + group + Util.LINE_SEPARATOR);
        ctx.printColumns(links);
        ctx.printLine(""String_Node_Str"");
      }
    }
  }
 else {
    final List<String> content=loadLinks(client,name,sg);
    if (l.isPresent(args)) {
      for (      String contentPath : content) {
        ctx.printLine(contentPath);
      }
    }
 else {
      ctx.printColumns(content);
    }
  }
}",0.9537468626747938
167717,"protected ModelNode upload(CommandContext ctx,boolean stream) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=this.name.getValue(args,true);
  if (!Util.isValidPath(ctx.getModelControllerClient(),Util.DEPLOYMENT_OVERLAY,name)) {
    throw new CommandLineException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  final String contentStr=content.getValue(args,true);
  final String[] contentPairs=contentStr.split(""String_Node_Str"");
  if (contentPairs.length == 0) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  final String[] contentNames=new String[contentPairs.length];
  final File[] contentPaths=new File[contentPairs.length];
  for (int i=0; i < contentPairs.length; ++i) {
    final String pair=contentPairs[i];
    final int equalsIndex=pair.indexOf('=');
    if (equalsIndex < 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    contentNames[i]=pair.substring(0,equalsIndex);
    if (contentNames[i].length() == 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    String path=pair.substring(equalsIndex + 1);
    if (path.length() == 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    path=pathCompleter.translatePath(path);
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath());
    }
    contentPaths[i]=f;
  }
  final String deploymentsStr=deployments.getValue(args);
  if (deploymentsStr != null) {
    throw new CommandFormatException(deployments.getFullName() + ""String_Node_Str"");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode composite=new ModelNode();
  final OperationBuilder opBuilder=stream ? new OperationBuilder(composite,true) : null;
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  for (int i=0; i < contentNames.length; ++i) {
    final ModelNode op=new ModelNode();
    ModelNode address=op.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT_OVERLAY,name);
    address.add(Util.CONTENT,contentNames[i]);
    op.get(Util.OPERATION).set(Util.ADD);
    if (opBuilder != null) {
      op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);
      opBuilder.addFileAsAttachment(contentPaths[i]);
    }
 else {
      op.get(Util.CONTENT).get(Util.BYTES).set(Util.readBytes(contentPaths[i]));
    }
    steps.add(op);
  }
  if (redeployAffected.isPresent(args)) {
    if (ctx.isDomainMode()) {
      for (      String sgName : Util.getServerGroups(client)) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,sgName,null,false,REDEPLOY_ALL);
      }
    }
 else {
      addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,false,REDEPLOY_ALL);
    }
  }
 else {
    printWarning(ctx,client,name,contentStr,null);
  }
  if (opBuilder == null) {
    return composite;
  }
  try {
    final ModelNode result=client.execute(opBuilder.build());
    if (!Util.isSuccess(result)) {
      throw new CommandFormatException(Util.getFailureDescription(result));
    }
  }
 catch (  IOException e) {
    throw new CommandFormatException(""String_Node_Str"",e);
  }
  return null;
}","protected ModelNode upload(CommandContext ctx,boolean stream) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final String name=getName(ctx,false);
  final String contentStr=content.getValue(args,true);
  final String[] contentPairs=contentStr.split(""String_Node_Str"");
  if (contentPairs.length == 0) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  final String[] contentNames=new String[contentPairs.length];
  final File[] contentPaths=new File[contentPairs.length];
  for (int i=0; i < contentPairs.length; ++i) {
    final String pair=contentPairs[i];
    final int equalsIndex=pair.indexOf('=');
    if (equalsIndex < 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    contentNames[i]=pair.substring(0,equalsIndex);
    if (contentNames[i].length() == 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    String path=pair.substring(equalsIndex + 1);
    if (path.length() == 0) {
      throw new CommandFormatException(""String_Node_Str"" + pair + ""String_Node_Str"");
    }
    path=pathCompleter.translatePath(path);
    final File f=new File(path);
    if (!f.exists()) {
      throw new CommandFormatException(""String_Node_Str"" + f.getAbsolutePath());
    }
    contentPaths[i]=f;
  }
  final String deploymentsStr=deployments.getValue(args);
  if (deploymentsStr != null) {
    throw new CommandFormatException(deployments.getFullName() + ""String_Node_Str"");
  }
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode composite=new ModelNode();
  final OperationBuilder opBuilder=stream ? new OperationBuilder(composite,true) : null;
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  for (int i=0; i < contentNames.length; ++i) {
    final ModelNode op=new ModelNode();
    ModelNode address=op.get(Util.ADDRESS);
    address.add(Util.DEPLOYMENT_OVERLAY,name);
    address.add(Util.CONTENT,contentNames[i]);
    op.get(Util.OPERATION).set(Util.ADD);
    if (opBuilder != null) {
      op.get(Util.CONTENT).get(Util.INPUT_STREAM_INDEX).set(i);
      opBuilder.addFileAsAttachment(contentPaths[i]);
    }
 else {
      op.get(Util.CONTENT).get(Util.BYTES).set(Util.readBytes(contentPaths[i]));
    }
    steps.add(op);
  }
  if (redeployAffected.isPresent(args)) {
    if (ctx.isDomainMode()) {
      for (      String sgName : Util.getServerGroups(client)) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,sgName,null,false,REDEPLOY_ALL);
      }
    }
 else {
      addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,false,REDEPLOY_ALL);
    }
  }
 else {
    printWarning(ctx,client,name,contentStr,null);
  }
  if (opBuilder == null) {
    return composite;
  }
  try {
    final ModelNode result=client.execute(opBuilder.build());
    if (!Util.isSuccess(result)) {
      throw new CommandFormatException(Util.getFailureDescription(result));
    }
  }
 catch (  IOException e) {
    throw new CommandFormatException(""String_Node_Str"",e);
  }
  return null;
}",0.9662440812585916
167718,"protected ModelNode link(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  final String name=this.name.getValue(args,true);
  final String[] deployments=getLinks(this.deployments,args);
  if (deployments == null) {
    throw new CommandFormatException(this.deployments.getFullName() + ""String_Node_Str"");
  }
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ModelControllerClient client=ctx.getModelControllerClient();
  if (ctx.isDomainMode()) {
    final List<String> sg=getServerGroupsToLink(ctx);
    for (    String group : sg) {
      if (!Util.isValidPath(client,Util.SERVER_GROUP,group,Util.DEPLOYMENT_OVERLAY,name)) {
        final ModelNode op=new ModelNode();
        final ModelNode address=op.get(Util.ADDRESS);
        address.add(Util.SERVER_GROUP,group);
        address.add(Util.DEPLOYMENT_OVERLAY,name);
        op.get(Util.OPERATION).set(Util.ADD);
        steps.add(op);
      }
      addAddRedeployLinksSteps(ctx,steps,name,group,deployments,false);
    }
  }
 else {
    addAddRedeployLinksSteps(ctx,steps,name,null,deployments,false);
  }
  return composite;
}","protected ModelNode link(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allRelevantServerGroups,args);
  final String name=getName(ctx,false);
  final String[] deployments=getLinks(this.deployments,args);
  if (deployments == null) {
    throw new CommandFormatException(this.deployments.getFullName() + ""String_Node_Str"");
  }
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  final ModelControllerClient client=ctx.getModelControllerClient();
  if (ctx.isDomainMode()) {
    final List<String> sg=getServerGroupsToLink(ctx);
    for (    String group : sg) {
      if (!Util.isValidPath(client,Util.SERVER_GROUP,group,Util.DEPLOYMENT_OVERLAY,name)) {
        final ModelNode op=new ModelNode();
        final ModelNode address=op.get(Util.ADDRESS);
        address.add(Util.SERVER_GROUP,group);
        address.add(Util.DEPLOYMENT_OVERLAY,name);
        op.get(Util.OPERATION).set(Util.ADD);
        steps.add(op);
      }
      addAddRedeployLinksSteps(ctx,steps,name,group,deployments,false);
    }
  }
 else {
    addAddRedeployLinksSteps(ctx,steps,name,null,deployments,false);
  }
  return composite;
}",0.9839851024208566
167719,"protected ModelNode remove(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allServerGroups,args);
  final String name=this.name.getValue(args,true);
  if (name == null) {
    throw new CommandFormatException(this.name + ""String_Node_Str"");
  }
  final String contentStr=content.getValue(args);
  String deploymentStr=deployments.getValue(args);
  final String sgStr=serverGroups.getValue(args);
  final List<String> sg;
  if (sgStr == null) {
    if (allRelevantServerGroups.isPresent(args)) {
      sg=Util.getServerGroupsReferencingOverlay(name,client);
    }
 else {
      sg=null;
    }
  }
 else {
    sg=Arrays.asList(sgStr.split(""String_Node_Str""));
    if (sg.isEmpty()) {
      throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"");
    }
  }
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  byte redeploy=this.redeployAffected.isPresent(args) ? REDEPLOY_ONLY_AFFECTED : REDEPLOY_NONE;
  if (!redeployAffected.isPresent(args)) {
    printWarning(ctx,client,name,contentStr,deploymentStr);
  }
  if (contentStr != null || deploymentStr == null && sg == null) {
    if (redeploy == REDEPLOY_ONLY_AFFECTED) {
      redeploy=REDEPLOY_ALL;
    }
    final List<String> contentList;
    if (contentStr == null) {
      contentList=loadContentFor(client,name);
    }
 else {
      contentList=java.util.Arrays.asList(contentStr.split(""String_Node_Str""));
    }
    for (    String content : contentList) {
      final ModelNode op=new ModelNode();
      ModelNode addr=op.get(Util.ADDRESS);
      addr.add(Util.DEPLOYMENT_OVERLAY,name);
      addr.add(Util.CONTENT,content);
      op.get(Util.OPERATION).set(Util.REMOVE);
      steps.add(op);
    }
  }
  if (deploymentStr != null || contentStr == null) {
    if (ctx.isDomainMode()) {
      if (deploymentStr == null) {
        final List<String> groups=sg == null ? Util.getServerGroupsReferencingOverlay(name,client) : sg;
        for (        String group : groups) {
          addRemoveRedeployLinksSteps(ctx,client,steps,name,group,null,true,redeploy);
        }
      }
 else {
        if (ctx.isDomainMode() && sg == null) {
          throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"" + allRelevantServerGroups.getFullName()+ ""String_Node_Str"");
        }
        final List<String> links=Arrays.asList(deploymentStr.split(""String_Node_Str""));
        for (        String group : sg) {
          addRemoveRedeployLinksSteps(ctx,client,steps,name,group,links,true,redeploy);
        }
      }
    }
 else {
      if (deploymentStr == null) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,true,redeploy);
      }
 else {
        final List<String> links=Arrays.asList(deploymentStr.split(""String_Node_Str""));
        addRemoveRedeployLinksSteps(ctx,client,steps,name,null,links,true,redeploy);
      }
    }
  }
 else   if (redeploy == REDEPLOY_ALL) {
    if (ctx.isDomainMode()) {
      for (      String group : Util.getServerGroupsReferencingOverlay(name,client)) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,group,null,false,redeploy);
      }
    }
 else {
      addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,false,redeploy);
    }
  }
  if (contentStr == null && deploymentStr == null && sg == null) {
    final ModelNode op=new ModelNode();
    op.get(Util.ADDRESS).add(Util.DEPLOYMENT_OVERLAY,name);
    op.get(Util.OPERATION).set(Util.REMOVE);
    steps.add(op);
  }
  return composite;
}","protected ModelNode remove(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(allServerGroups,args);
  final String name=getName(ctx,false);
  final String contentStr=content.getValue(args);
  String deploymentStr=deployments.getValue(args);
  final String sgStr=serverGroups.getValue(args);
  final List<String> sg;
  if (sgStr == null) {
    if (allRelevantServerGroups.isPresent(args)) {
      sg=Util.getServerGroupsReferencingOverlay(name,client);
    }
 else {
      sg=null;
    }
  }
 else {
    sg=Arrays.asList(sgStr.split(""String_Node_Str""));
    if (sg.isEmpty()) {
      throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"");
    }
  }
  final ModelNode composite=new ModelNode();
  composite.get(Util.OPERATION).set(Util.COMPOSITE);
  composite.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=composite.get(Util.STEPS);
  byte redeploy=this.redeployAffected.isPresent(args) ? REDEPLOY_ONLY_AFFECTED : REDEPLOY_NONE;
  if (!redeployAffected.isPresent(args)) {
    printWarning(ctx,client,name,contentStr,deploymentStr);
  }
  if (contentStr != null || deploymentStr == null && sg == null) {
    if (redeploy == REDEPLOY_ONLY_AFFECTED) {
      redeploy=REDEPLOY_ALL;
    }
    final List<String> contentList;
    if (contentStr == null) {
      contentList=loadContentFor(client,name);
    }
 else {
      contentList=java.util.Arrays.asList(contentStr.split(""String_Node_Str""));
    }
    for (    String content : contentList) {
      final ModelNode op=new ModelNode();
      ModelNode addr=op.get(Util.ADDRESS);
      addr.add(Util.DEPLOYMENT_OVERLAY,name);
      addr.add(Util.CONTENT,content);
      op.get(Util.OPERATION).set(Util.REMOVE);
      steps.add(op);
    }
  }
  if (deploymentStr != null || contentStr == null) {
    if (ctx.isDomainMode()) {
      if (deploymentStr == null) {
        final List<String> groups=sg == null ? Util.getServerGroupsReferencingOverlay(name,client) : sg;
        for (        String group : groups) {
          addRemoveRedeployLinksSteps(ctx,client,steps,name,group,null,true,redeploy);
        }
      }
 else {
        if (ctx.isDomainMode() && sg == null) {
          throw new CommandFormatException(serverGroups.getFullName() + ""String_Node_Str"" + allRelevantServerGroups.getFullName()+ ""String_Node_Str"");
        }
        final List<String> links=Arrays.asList(deploymentStr.split(""String_Node_Str""));
        for (        String group : sg) {
          addRemoveRedeployLinksSteps(ctx,client,steps,name,group,links,true,redeploy);
        }
      }
    }
 else {
      if (deploymentStr == null) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,true,redeploy);
      }
 else {
        final List<String> links=Arrays.asList(deploymentStr.split(""String_Node_Str""));
        addRemoveRedeployLinksSteps(ctx,client,steps,name,null,links,true,redeploy);
      }
    }
  }
 else   if (redeploy == REDEPLOY_ALL) {
    if (ctx.isDomainMode()) {
      for (      String group : Util.getServerGroupsReferencingOverlay(name,client)) {
        addRemoveRedeployLinksSteps(ctx,client,steps,name,group,null,false,redeploy);
      }
    }
 else {
      addRemoveRedeployLinksSteps(ctx,client,steps,name,null,null,false,redeploy);
    }
  }
  if (contentStr == null && deploymentStr == null && sg == null) {
    final ModelNode op=new ModelNode();
    op.get(Util.ADDRESS).add(Util.DEPLOYMENT_OVERLAY,name);
    op.get(Util.OPERATION).set(Util.REMOVE);
    steps.add(op);
  }
  return composite;
}",0.9808470461289452
167720,"protected ModelNode redeployAffected(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(serverGroups,args);
  assertNotPresent(allServerGroups,args);
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(content,args);
  assertNotPresent(deployments,args);
  assertNotPresent(redeployAffected,args);
  final String overlay=name.getValue(args,true);
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode redeployOp=new ModelNode();
  redeployOp.get(Util.OPERATION).set(Util.COMPOSITE);
  redeployOp.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=redeployOp.get(Util.STEPS);
  if (ctx.isDomainMode()) {
    for (    String group : Util.getServerGroupsReferencingOverlay(overlay,client)) {
      addRemoveRedeployLinksSteps(ctx,client,steps,overlay,group,null,false,REDEPLOY_ALL);
    }
  }
 else {
    addRemoveRedeployLinksSteps(ctx,client,steps,overlay,null,null,false,REDEPLOY_ALL);
  }
  if (!steps.isDefined() || steps.asList().isEmpty()) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  return redeployOp;
}","protected ModelNode redeployAffected(CommandContext ctx) throws CommandLineException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(serverGroups,args);
  assertNotPresent(allServerGroups,args);
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(content,args);
  assertNotPresent(deployments,args);
  assertNotPresent(redeployAffected,args);
  final String overlay=getName(ctx,false);
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode redeployOp=new ModelNode();
  redeployOp.get(Util.OPERATION).set(Util.COMPOSITE);
  redeployOp.get(Util.ADDRESS).setEmptyList();
  final ModelNode steps=redeployOp.get(Util.STEPS);
  if (ctx.isDomainMode()) {
    for (    String group : Util.getServerGroupsReferencingOverlay(overlay,client)) {
      addRemoveRedeployLinksSteps(ctx,client,steps,overlay,group,null,false,REDEPLOY_ALL);
    }
  }
 else {
    addRemoveRedeployLinksSteps(ctx,client,steps,overlay,null,null,false,REDEPLOY_ALL);
  }
  if (!steps.isDefined() || steps.asList().isEmpty()) {
    throw new CommandFormatException(""String_Node_Str"");
  }
  return redeployOp;
}",0.9836206896551724
167721,"protected void listContent(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(serverGroups,args);
  assertNotPresent(allServerGroups,args);
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(deployments,args);
  assertNotPresent(content,args);
  assertNotPresent(redeployAffected,args);
  final String name=this.name.getValue(args,true);
  if (name == null) {
    throw new CommandFormatException(this.name.getFullName() + ""String_Node_Str"");
  }
  final List<String> content=loadContentFor(client,name);
  if (l.isPresent(args)) {
    for (    String contentPath : content) {
      ctx.printLine(contentPath);
    }
  }
 else {
    ctx.printColumns(content);
  }
}","protected void listContent(CommandContext ctx) throws CommandLineException {
  final ModelControllerClient client=ctx.getModelControllerClient();
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  assertNotPresent(serverGroups,args);
  assertNotPresent(allServerGroups,args);
  assertNotPresent(allRelevantServerGroups,args);
  assertNotPresent(deployments,args);
  assertNotPresent(content,args);
  assertNotPresent(redeployAffected,args);
  final String name=getName(ctx,true);
  final List<String> content=loadContentFor(client,name);
  if (l.isPresent(args)) {
    for (    String contentPath : content) {
      ctx.printLine(contentPath);
    }
  }
 else {
    ctx.printColumns(content);
  }
}",0.900455432661028
167722,"@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final boolean v=verbose.isPresent(ctx.getParsedCommandLine());
  final OperationResponse response;
  boolean failed=false;
  boolean hasFile=file.getValue(ctx.getParsedCommandLine()) != null;
  try {
    final ModelNode request=buildRequest(ctx);
    OperationBuilder builder=new OperationBuilder(request,true);
    for (    String path : getAttachments(ctx).getAttachedFiles()) {
      builder.addFileAsAttachment(new File(path));
    }
    final ModelControllerClient client=ctx.getModelControllerClient();
    try {
      response=client.executeOperation(builder.build(),OperationMessageHandler.DISCARD);
    }
 catch (    Exception e) {
      throw new CommandFormatException(""String_Node_Str"" + e.getLocalizedMessage());
    }
    if (!Util.isSuccess(response.getResponseNode())) {
      throw new CommandFormatException(Util.getFailureDescription(response.getResponseNode()));
    }
    ModelNode steps=response.getResponseNode().get(Util.RESULT);
    if (steps.isDefined()) {
      final Batch batch=ctx.getBatchManager().getActiveBatch();
      int i=1;
      for (      BatchedCommand cmd : batch.getCommands()) {
        ModelNode step=steps.get(""String_Node_Str"" + i);
        if (step.isDefined()) {
          if (cmd.getResponseHandler() != null) {
            cmd.getResponseHandler().handleResponse(step,response);
          }
          i+=1;
        }
      }
    }
  }
 catch (  CommandLineException e) {
    failed=true;
    if (hasFile) {
      throw new CommandLineException(""String_Node_Str"",e);
    }
 else {
      throw new CommandLineException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
 finally {
    if (hasFile) {
      ctx.getBatchManager().discardActiveBatch();
    }
 else     if (!failed) {
      if (ctx.getBatchManager().isBatchActive()) {
        ctx.getBatchManager().discardActiveBatch();
      }
    }
  }
  if (v) {
    ctx.printLine(response.getResponseNode().toString());
  }
 else {
    ctx.printLine(""String_Node_Str"");
    super.handleResponse(ctx,response.getResponseNode(),true);
  }
}","@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final boolean v=verbose.isPresent(ctx.getParsedCommandLine());
  final OperationResponse response;
  boolean failed=false;
  boolean hasFile=file.getValue(ctx.getParsedCommandLine()) != null;
  try {
    final ModelNode request=buildRequest(ctx);
    OperationBuilder builder=new OperationBuilder(request,true);
    for (    String path : getAttachments(ctx).getAttachedFiles()) {
      builder.addFileAsAttachment(new File(path));
    }
    final ModelControllerClient client=ctx.getModelControllerClient();
    try {
      response=client.executeOperation(builder.build(),OperationMessageHandler.DISCARD);
    }
 catch (    Exception e) {
      throw new CommandFormatException(""String_Node_Str"" + e.getLocalizedMessage());
    }
    if (!Util.isSuccess(response.getResponseNode())) {
      String msg=formatBatchError(ctx,response.getResponseNode());
      if (msg == null) {
        msg=Util.getFailureDescription(response.getResponseNode());
      }
      throw new CommandFormatException(msg);
    }
    ModelNode steps=response.getResponseNode().get(Util.RESULT);
    if (steps.isDefined()) {
      final Batch batch=ctx.getBatchManager().getActiveBatch();
      int i=1;
      for (      BatchedCommand cmd : batch.getCommands()) {
        ModelNode step=steps.get(""String_Node_Str"" + i);
        if (step.isDefined()) {
          if (cmd.getResponseHandler() != null) {
            cmd.getResponseHandler().handleResponse(step,response);
          }
          i+=1;
        }
      }
    }
  }
 catch (  CommandLineException e) {
    failed=true;
    if (hasFile) {
      throw new CommandLineException(""String_Node_Str"",e);
    }
 else {
      throw new CommandLineException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
 finally {
    if (hasFile) {
      ctx.getBatchManager().discardActiveBatch();
    }
 else     if (!failed) {
      if (ctx.getBatchManager().isBatchActive()) {
        ctx.getBatchManager().discardActiveBatch();
      }
    }
  }
  if (v) {
    ctx.printLine(response.getResponseNode().toString());
  }
 else {
    ctx.printLine(""String_Node_Str"");
    super.handleResponse(ctx,response.getResponseNode(),true);
  }
}",0.9484772154797344
167723,"@Test public void testRollbackBatch() throws Exception {
  addProperty(""String_Node_Str"",""String_Node_Str"");
  cli.sendLine(""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",readProperty(""String_Node_Str""));
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
  cli.sendLine(""String_Node_Str"",true);
  String line=cli.readOutput();
  String expectedErrorCode=ControllerLogger.ROOT_LOGGER.compositeOperationFailed();
  expectedErrorCode=expectedErrorCode.substring(0,expectedErrorCode.indexOf(':'));
  assertTrue(""String_Node_Str"",line.contains(expectedErrorCode));
  assertEquals(""String_Node_Str"",readProperty(""String_Node_Str""));
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
  cli.sendLine(""String_Node_Str"");
  removeProperty(""String_Node_Str"");
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testRollbackBatch() throws Exception {
  addProperty(""String_Node_Str"",""String_Node_Str"");
  cli.sendLine(""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  addProperty(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",readProperty(""String_Node_Str""));
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
  cli.sendLine(""String_Node_Str"",true);
  String line=cli.readOutput();
  String expectedErrorCode=ControllerLogger.ROOT_LOGGER.compositeOperationFailed();
  expectedErrorCode=expectedErrorCode.substring(0,expectedErrorCode.indexOf(':'));
  assertTrue(""String_Node_Str"",line.contains(expectedErrorCode));
  assertTrue(""String_Node_Str"",line.contains(""String_Node_Str""));
  assertEquals(""String_Node_Str"",readProperty(""String_Node_Str""));
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
  cli.sendLine(""String_Node_Str"");
  removeProperty(""String_Node_Str"");
  assertFalse(cli.isValidPath(""String_Node_Str"",""String_Node_Str""));
}",0.967
167724,"/** 
 * Create an alias in interactive mode and verify it was persisted in .aesh_aliases file at the end of the session <a href=""https://issues.jboss.org/browse/WFCORE-1294"">WFCORE-1294</a>
 * @throws Exception
 */
@Test @Ignore(""String_Node_Str"") public void testAliasPersistence() throws Exception {
  final File aliasFile=temporaryUserHome.newFile(""String_Node_Str"");
  CliProcessWrapper cli=new CliProcessWrapper().addCliArgument(""String_Node_Str"").addJavaOption(""String_Node_Str"" + temporaryUserHome.getRoot().toPath().toString()).addCliArgument(""String_Node_Str"" + temporaryUserHome.getRoot().toPath().toString());
  try {
    cli.executeInteractive();
    cli.pushLineAndWaitForResults(""String_Node_Str"" + VALID_ALIAS_NAME + ""String_Node_Str""+ VALID_ALIAS_COMMAND);
    cli.ctrlCAndWaitForClose();
  }
 catch (  Exception ex) {
    fail(ex.getLocalizedMessage());
  }
 finally {
    cli.destroyProcess();
  }
  List<String> aliasesInFile=Files.readAllLines(aliasFile.toPath(),Charset.defaultCharset());
  boolean found=false;
  for (  String line : aliasesInFile) {
    if (line.contains(""String_Node_Str"" + VALID_ALIAS_NAME + ""String_Node_Str""+ VALID_ALIAS_COMMAND)) {
      found=true;
      break;
    }
  }
  assertTrue(""String_Node_Str"",found);
}","/** 
 * Create an alias in interactive mode and verify it was persisted in .aesh_aliases file at the end of the session <a href=""https://issues.jboss.org/browse/WFCORE-1294"">WFCORE-1294</a>
 * @throws Exception
 */
@Test public void testAliasPersistence() throws Exception {
  final File aliasFile=temporaryUserHome.newFile(""String_Node_Str"");
  CliProcessWrapper cli=new CliProcessWrapper().addCliArgument(""String_Node_Str"").addJavaOption(""String_Node_Str"" + temporaryUserHome.getRoot().toPath().toString()).addCliArgument(""String_Node_Str"" + temporaryUserHome.getRoot().toPath().toString());
  try {
    cli.executeInteractive();
    cli.pushLineAndWaitForResults(""String_Node_Str"" + VALID_ALIAS_NAME + ""String_Node_Str""+ VALID_ALIAS_COMMAND);
    cli.pushLineAndWaitForResults(""String_Node_Str"");
  }
 catch (  Exception ex) {
    fail(ex.getLocalizedMessage());
  }
 finally {
    cli.destroyProcess();
  }
  assertAliasSaved(aliasFile);
}",0.8069059518400727
167725,"@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final boolean v=verbose.isPresent(ctx.getParsedCommandLine());
  final OperationResponse response;
  boolean failed=false;
  boolean hasFile=file.getValue(ctx.getParsedCommandLine()) != null;
  try {
    final ModelNode request=buildRequest(ctx);
    OperationBuilder builder=new OperationBuilder(request,true);
    for (    String path : getAttachments(ctx).getAttachedFiles()) {
      builder.addFileAsAttachment(new File(path));
    }
    final ModelControllerClient client=ctx.getModelControllerClient();
    try {
      response=client.executeOperation(builder.build(),OperationMessageHandler.DISCARD);
    }
 catch (    Exception e) {
      throw new CommandFormatException(""String_Node_Str"" + e.getLocalizedMessage());
    }
    if (!Util.isSuccess(response.getResponseNode())) {
      throw new CommandFormatException(Util.getFailureDescription(response.getResponseNode()));
    }
    ModelNode steps=response.getResponseNode().get(Util.RESULT);
    if (steps.isDefined()) {
      final Batch batch=ctx.getBatchManager().getActiveBatch();
      int i=1;
      for (      BatchedCommand cmd : batch.getCommands()) {
        ModelNode step=steps.get(""String_Node_Str"" + i);
        if (step.isDefined()) {
          if (cmd.getResponseHandler() != null) {
            cmd.getResponseHandler().handleResponse(step,response);
          }
        }
      }
    }
  }
 catch (  CommandLineException e) {
    failed=true;
    if (hasFile) {
      throw new CommandLineException(""String_Node_Str"",e);
    }
 else {
      throw new CommandLineException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
 finally {
    if (hasFile) {
      ctx.getBatchManager().discardActiveBatch();
    }
 else     if (!failed) {
      if (ctx.getBatchManager().isBatchActive()) {
        ctx.getBatchManager().discardActiveBatch();
      }
    }
  }
  if (v) {
    ctx.printLine(response.getResponseNode().toString());
  }
 else {
    ctx.printLine(""String_Node_Str"");
    super.handleResponse(ctx,response.getResponseNode(),true);
  }
}","@Override protected void doHandle(CommandContext ctx) throws CommandLineException {
  final boolean v=verbose.isPresent(ctx.getParsedCommandLine());
  final OperationResponse response;
  boolean failed=false;
  boolean hasFile=file.getValue(ctx.getParsedCommandLine()) != null;
  try {
    final ModelNode request=buildRequest(ctx);
    OperationBuilder builder=new OperationBuilder(request,true);
    for (    String path : getAttachments(ctx).getAttachedFiles()) {
      builder.addFileAsAttachment(new File(path));
    }
    final ModelControllerClient client=ctx.getModelControllerClient();
    try {
      response=client.executeOperation(builder.build(),OperationMessageHandler.DISCARD);
    }
 catch (    Exception e) {
      throw new CommandFormatException(""String_Node_Str"" + e.getLocalizedMessage());
    }
    if (!Util.isSuccess(response.getResponseNode())) {
      throw new CommandFormatException(Util.getFailureDescription(response.getResponseNode()));
    }
    ModelNode steps=response.getResponseNode().get(Util.RESULT);
    if (steps.isDefined()) {
      final Batch batch=ctx.getBatchManager().getActiveBatch();
      int i=1;
      for (      BatchedCommand cmd : batch.getCommands()) {
        ModelNode step=steps.get(""String_Node_Str"" + i);
        if (step.isDefined()) {
          if (cmd.getResponseHandler() != null) {
            cmd.getResponseHandler().handleResponse(step,response);
          }
          i+=1;
        }
      }
    }
  }
 catch (  CommandLineException e) {
    failed=true;
    if (hasFile) {
      throw new CommandLineException(""String_Node_Str"",e);
    }
 else {
      throw new CommandLineException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
 finally {
    if (hasFile) {
      ctx.getBatchManager().discardActiveBatch();
    }
 else     if (!failed) {
      if (ctx.getBatchManager().isBatchActive()) {
        ctx.getBatchManager().discardActiveBatch();
      }
    }
  }
  if (v) {
    ctx.printLine(response.getResponseNode().toString());
  }
 else {
    ctx.printLine(""String_Node_Str"");
    super.handleResponse(ctx,response.getResponseNode(),true);
  }
}",0.9962210675484175
167726,"@Test public void testBatchFile() throws Exception {
  CLIWrapper cli=new CLIWrapper(true);
  File f=new File(System.currentTimeMillis() + ""String_Node_Str"");
  File f2=new File(f.getAbsolutePath() + ""String_Node_Str"");
  assertFalse(f.exists());
  assertFalse(f2.exists());
  File batchFile=new File(System.currentTimeMillis() + ""String_Node_Str"");
  String cmd=""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"";
  Files.write(batchFile.toPath(),cmd.getBytes());
  try {
    cli.sendLine(""String_Node_Str"" + batchFile + ""String_Node_Str"");
    assertTrue(f.exists() && f.length() != 0);
    assertTrue(f2.exists() && f2.length() == 0);
  }
  finally {
    batchFile.delete();
    f.delete();
    f2.delete();
    cli.quit();
  }
}","@Test public void testBatchFile() throws Exception {
  CLIWrapper cli=new CLIWrapper(true);
  File f=new File(System.currentTimeMillis() + ""String_Node_Str"");
  File f2=new File(f.getAbsolutePath() + ""String_Node_Str"");
  assertFalse(f.exists());
  assertFalse(f2.exists());
  File batchFile=new File(System.currentTimeMillis() + ""String_Node_Str"");
  String cmd=""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.getAbsolutePath()+ ""String_Node_Str"";
  Files.write(batchFile.toPath(),cmd.getBytes());
  try {
    cli.sendLine(""String_Node_Str"" + batchFile + ""String_Node_Str"");
    assertTrue(f.exists() && f.length() != 0);
    assertTrue(f2.exists() && f2.length() != 0);
  }
  finally {
    batchFile.delete();
    f.delete();
    f2.delete();
    cli.quit();
  }
}",0.99880810488677
167727,"@Test public void testBatch() throws Exception {
  CLIWrapper cli=new CLIWrapper(true);
  File f=new File(System.currentTimeMillis() + ""String_Node_Str"");
  File f2=new File(f.getAbsolutePath() + ""String_Node_Str"");
  assertFalse(f.exists());
  assertFalse(f2.exists());
  try {
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath());
    cli.sendLine(""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath());
    cli.sendLine(""String_Node_Str"");
    assertTrue(f.exists() && f.length() != 0);
    assertTrue(f2.exists() && f2.length() == 0);
  }
  finally {
    f.delete();
    f2.delete();
    cli.quit();
  }
}","@Test public void testBatch() throws Exception {
  CLIWrapper cli=new CLIWrapper(true);
  File f=new File(System.currentTimeMillis() + ""String_Node_Str"");
  File f2=new File(f.getAbsolutePath() + ""String_Node_Str"");
  assertFalse(f.exists());
  assertFalse(f2.exists());
  try {
    cli.sendLine(""String_Node_Str"");
    cli.sendLine(""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath());
    cli.sendLine(""String_Node_Str"" + ""String_Node_Str"" + f.getAbsolutePath());
    cli.sendLine(""String_Node_Str"");
    assertTrue(f.exists() && f.length() != 0);
    assertTrue(f2.exists() && f2.length() != 0);
  }
  finally {
    f.delete();
    f2.delete();
    cli.quit();
  }
}",0.998522895125554
167728,"@Override public void addCompleter(final CommandLineCompleter completer){
  console.addCompletion(new Completion(){
    @Override public void complete(    CompleteOperation co){
      List<String> candidates=new ArrayList<>();
      int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
      co.setOffset(offset);
      co.setCompletionCandidates(candidates);
      if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(co.getBuffer()))       co.doAppendSeparator(true);
 else       co.doAppendSeparator(false);
    }
  }
);
}","@Override public void addCompleter(final CommandLineCompleter completer){
  console.addCompletion(new Completion(){
    @Override public void complete(    CompleteOperation co){
      List<String> candidates=new ArrayList<>();
      int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
      co.setOffset(offset);
      co.setCompletionCandidates(candidates);
      String buffer=cmdCtx.getArgumentsString() == null ? co.getBuffer() : ctx.getArgumentsString() + co.getBuffer();
      if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(buffer))       co.doAppendSeparator(true);
 else       co.doAppendSeparator(false);
    }
  }
);
}",0.8406015037593985
167729,"public static Console getConsole(final CommandContext ctx,InputStream is,OutputStream os,final Settings settings) throws CliInitializationException {
  org.jboss.aesh.console.Console aeshConsole=null;
  try {
    aeshConsole=new org.jboss.aesh.console.Console(settings);
  }
 catch (  Throwable e) {
    throw new CliInitializationException(""String_Node_Str"",e);
  }
  final org.jboss.aesh.console.Console finalAeshConsole=aeshConsole;
  Console console=new Console(){
    private CommandContext cmdCtx=ctx;
    private org.jboss.aesh.console.Console console=finalAeshConsole;
    private CommandHistory history=new HistoryImpl();
    private boolean controlled;
    @Override public void addCompleter(    final CommandLineCompleter completer){
      console.addCompletion(new Completion(){
        @Override public void complete(        CompleteOperation co){
          List<String> candidates=new ArrayList<>();
          int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
          co.setOffset(offset);
          co.setCompletionCandidates(candidates);
          if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(co.getBuffer()))           co.doAppendSeparator(true);
 else           co.doAppendSeparator(false);
        }
      }
);
    }
    @Override public boolean isUseHistory(){
      return !settings.isHistoryDisabled();
    }
    @Override public CommandHistory getHistory(){
      return history;
    }
    @Override public void setCompletion(    boolean complete){
      console.setCompletionEnabled(complete);
    }
    @Override public void clearScreen(){
      try {
        console.clear();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    @Override public void printColumns(    Collection<String> list){
      String[] newList=new String[list.size()];
      list.toArray(newList);
      console.getShell().out().println(Parser.formatDisplayList(newList,console.getTerminalSize().getHeight(),console.getTerminalSize().getWidth()));
    }
    @Override public void print(    String line){
      console.getShell().out().print(line);
    }
    @Override public void printNewLine(){
      console.getShell().out().println();
    }
    @Override public String readLine(    String prompt){
      return read(prompt,null);
    }
    @Override public String readLine(    String prompt,    Character mask){
      return read(prompt,mask);
    }
    private String read(    String prompt,    Character mask){
      int PID=-1;
      try {
        ConsoleCallback callback=console.getConsoleCallback();
        if (callback instanceof CommandContextImpl.CLIAeshConsoleCallback) {
          CommandContextImpl.CLIAeshConsoleCallback cliCallback=((CommandContextImpl.CLIAeshConsoleCallback)callback);
          if (cliCallback.hasActiveProcess()) {
            PID=cliCallback.getProcessPID();
            console.putProcessInBackground(PID);
          }
        }
        Prompt origPrompt=null;
        if (!console.getPrompt().getPromptAsString().equals(prompt)) {
          origPrompt=console.getPrompt();
          console.setPrompt(new Prompt(prompt,mask));
          redrawPrompt();
        }
        try {
          return console.getInputLine();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
 finally {
          if (origPrompt != null) {
            console.setPrompt(origPrompt);
          }
        }
      }
  finally {
        if (PID != -1) {
          console.putProcessInForeground(PID);
        }
      }
      return null;
    }
    @Override public int getTerminalWidth(){
      return console.getTerminalSize().getWidth();
    }
    @Override public int getTerminalHeight(){
      return console.getTerminalSize().getHeight();
    }
    @Override public boolean isCompletionEnabled(){
      return settings.isCompletionDisabled();
    }
    @Override public void interrupt(){
    }
    @Override public void controlled(){
      console.controlled();
      controlled=true;
    }
    @Override public void continuous(){
      console.continuous();
      controlled=false;
    }
    @Override public boolean isControlled(){
      return controlled;
    }
    @Override public void setCallback(    ConsoleCallback consoleCallback){
      if (console != null)       console.setConsoleCallback(consoleCallback);
    }
    @Override public void start(){
      if (console != null)       console.start();
    }
    @Override public void stop(){
      if (console != null) {
        console.stop();
      }
    }
    @Override public boolean running(){
      return console != null && (console.isRunning() || console.hasRunningProcesses());
    }
    @Override public void setPrompt(    String prompt){
      setPrompt(prompt,null);
    }
    @Override public void setPrompt(    String prompt,    Character mask){
      if (!prompt.equals(console.getPrompt().getPromptAsString())) {
        console.setPrompt(new Prompt(prompt,mask));
      }
    }
    @Override public void redrawPrompt(){
      console.clearBufferAndDisplayPrompt();
    }
class HistoryImpl implements CommandHistory {
      @Override public List<String> asList(){
        return console.getHistory().getAll();
      }
      @Override public boolean isUseHistory(){
        return console.getHistory().isEnabled();
      }
      @Override public void setUseHistory(      boolean useHistory){
        if (useHistory) {
          console.getHistory().enable();
        }
 else {
          console.getHistory().disable();
        }
      }
      @Override public void clear(){
        console.getHistory().clear();
      }
      @Override public int getMaxSize(){
        return settings.getHistorySize();
      }
    }
  }
;
  return console;
}","public static Console getConsole(final CommandContext ctx,InputStream is,OutputStream os,final Settings settings) throws CliInitializationException {
  org.jboss.aesh.console.Console aeshConsole=null;
  try {
    aeshConsole=new org.jboss.aesh.console.Console(settings);
  }
 catch (  Throwable e) {
    throw new CliInitializationException(""String_Node_Str"",e);
  }
  final org.jboss.aesh.console.Console finalAeshConsole=aeshConsole;
  Console console=new Console(){
    private CommandContext cmdCtx=ctx;
    private org.jboss.aesh.console.Console console=finalAeshConsole;
    private CommandHistory history=new HistoryImpl();
    private boolean controlled;
    @Override public void addCompleter(    final CommandLineCompleter completer){
      console.addCompletion(new Completion(){
        @Override public void complete(        CompleteOperation co){
          List<String> candidates=new ArrayList<>();
          int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
          co.setOffset(offset);
          co.setCompletionCandidates(candidates);
          String buffer=cmdCtx.getArgumentsString() == null ? co.getBuffer() : ctx.getArgumentsString() + co.getBuffer();
          if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(buffer))           co.doAppendSeparator(true);
 else           co.doAppendSeparator(false);
        }
      }
);
    }
    @Override public boolean isUseHistory(){
      return !settings.isHistoryDisabled();
    }
    @Override public CommandHistory getHistory(){
      return history;
    }
    @Override public void setCompletion(    boolean complete){
      console.setCompletionEnabled(complete);
    }
    @Override public void clearScreen(){
      try {
        console.clear();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    @Override public void printColumns(    Collection<String> list){
      String[] newList=new String[list.size()];
      list.toArray(newList);
      console.getShell().out().println(Parser.formatDisplayList(newList,console.getTerminalSize().getHeight(),console.getTerminalSize().getWidth()));
    }
    @Override public void print(    String line){
      console.getShell().out().print(line);
    }
    @Override public void printNewLine(){
      console.getShell().out().println();
    }
    @Override public String readLine(    String prompt){
      return read(prompt,null);
    }
    @Override public String readLine(    String prompt,    Character mask){
      return read(prompt,mask);
    }
    private String read(    String prompt,    Character mask){
      int PID=-1;
      try {
        ConsoleCallback callback=console.getConsoleCallback();
        if (callback instanceof CommandContextImpl.CLIAeshConsoleCallback) {
          CommandContextImpl.CLIAeshConsoleCallback cliCallback=((CommandContextImpl.CLIAeshConsoleCallback)callback);
          if (cliCallback.hasActiveProcess()) {
            PID=cliCallback.getProcessPID();
            console.putProcessInBackground(PID);
          }
        }
        Prompt origPrompt=null;
        if (!console.getPrompt().getPromptAsString().equals(prompt)) {
          origPrompt=console.getPrompt();
          console.setPrompt(new Prompt(prompt,mask));
          redrawPrompt();
        }
        try {
          return console.getInputLine();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
 finally {
          if (origPrompt != null) {
            console.setPrompt(origPrompt);
          }
        }
      }
  finally {
        if (PID != -1) {
          console.putProcessInForeground(PID);
        }
      }
      return null;
    }
    @Override public int getTerminalWidth(){
      return console.getTerminalSize().getWidth();
    }
    @Override public int getTerminalHeight(){
      return console.getTerminalSize().getHeight();
    }
    @Override public boolean isCompletionEnabled(){
      return settings.isCompletionDisabled();
    }
    @Override public void interrupt(){
    }
    @Override public void controlled(){
      console.controlled();
      controlled=true;
    }
    @Override public void continuous(){
      console.continuous();
      controlled=false;
    }
    @Override public boolean isControlled(){
      return controlled;
    }
    @Override public void setCallback(    ConsoleCallback consoleCallback){
      if (console != null)       console.setConsoleCallback(consoleCallback);
    }
    @Override public void start(){
      if (console != null)       console.start();
    }
    @Override public void stop(){
      if (console != null) {
        console.stop();
      }
    }
    @Override public boolean running(){
      return console != null && (console.isRunning() || console.hasRunningProcesses());
    }
    @Override public void setPrompt(    String prompt){
      setPrompt(prompt,null);
    }
    @Override public void setPrompt(    String prompt,    Character mask){
      if (!prompt.equals(console.getPrompt().getPromptAsString())) {
        console.setPrompt(new Prompt(prompt,mask));
      }
    }
    @Override public void redrawPrompt(){
      console.clearBufferAndDisplayPrompt();
    }
class HistoryImpl implements CommandHistory {
      @Override public List<String> asList(){
        return console.getHistory().getAll();
      }
      @Override public boolean isUseHistory(){
        return console.getHistory().isEnabled();
      }
      @Override public void setUseHistory(      boolean useHistory){
        if (useHistory) {
          console.getHistory().enable();
        }
 else {
          console.getHistory().disable();
        }
      }
      @Override public void clear(){
        console.getHistory().clear();
      }
      @Override public int getMaxSize(){
        return settings.getHistorySize();
      }
    }
  }
;
  return console;
}",0.9825997952917092
167730,"@Override public void complete(CompleteOperation co){
  List<String> candidates=new ArrayList<>();
  int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
  co.setOffset(offset);
  co.setCompletionCandidates(candidates);
  if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(co.getBuffer()))   co.doAppendSeparator(true);
 else   co.doAppendSeparator(false);
}","@Override public void complete(CompleteOperation co){
  List<String> candidates=new ArrayList<>();
  int offset=completer.complete(cmdCtx,co.getBuffer(),co.getCursor(),candidates);
  co.setOffset(offset);
  co.setCompletionCandidates(candidates);
  String buffer=cmdCtx.getArgumentsString() == null ? co.getBuffer() : ctx.getArgumentsString() + co.getBuffer();
  if (co.getCompletionCandidates().size() == 1 && co.getCompletionCandidates().get(0).getCharacters().startsWith(buffer))   co.doAppendSeparator(true);
 else   co.doAppendSeparator(false);
}",0.8654618473895582
167731,"protected OperationRequestAddress getAddress(CommandContext ctx) throws CommandFormatException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final OperationRequestAddress address;
  if (node.isPresent(args)) {
    address=new DefaultOperationRequestAddress(ctx.getCurrentNodePath());
    CommandLineParser.CallbackHandler handler=new DefaultCallbackHandler(address);
    String nodePath=args.getSubstitutedLine();
    int nodeArgInd=nodePath.indexOf(""String_Node_Str"");
    if (nodeArgInd < 0) {
      throw new CommandFormatException(""String_Node_Str"" + nodePath + ""String_Node_Str"");
    }
    int nodeArgEndInd=nodeArgInd + 8;
    do {
      nodeArgEndInd=nodePath.indexOf(' ',nodeArgEndInd);
      if (nodeArgEndInd < 0) {
        nodeArgEndInd=nodePath.length();
      }
 else       if (nodePath.charAt(nodeArgEndInd - 1) == '\\') {
        ++nodeArgEndInd;
      }
 else {
        break;
      }
    }
 while (nodeArgEndInd < nodePath.length());
    nodePath=nodePath.substring(nodeArgInd + 8,nodeArgEndInd);
    ctx.getCommandLineParser().parse(nodePath,handler);
  }
 else {
    address=new DefaultOperationRequestAddress(ctx.getCurrentNodePath());
  }
  return address;
}","protected OperationRequestAddress getAddress(CommandContext ctx) throws CommandFormatException {
  final ParsedCommandLine args=ctx.getParsedCommandLine();
  final OperationRequestAddress address;
  if (node.isPresent(args) && node.isValueComplete(args)) {
    address=new DefaultOperationRequestAddress(ctx.getCurrentNodePath());
    CommandLineParser.CallbackHandler handler=new DefaultCallbackHandler(address);
    String nodePath=args.getSubstitutedLine();
    int nodeArgInd=nodePath.indexOf(""String_Node_Str"");
    if (nodeArgInd < 0) {
      throw new CommandFormatException(""String_Node_Str"" + nodePath + ""String_Node_Str"");
    }
    int nodeArgEndInd=nodeArgInd + 8;
    do {
      nodeArgEndInd=nodePath.indexOf(' ',nodeArgEndInd);
      if (nodeArgEndInd < 0) {
        nodeArgEndInd=nodePath.length();
      }
 else       if (nodePath.charAt(nodeArgEndInd - 1) == '\\') {
        ++nodeArgEndInd;
      }
 else {
        break;
      }
    }
 while (nodeArgEndInd < nodePath.length());
    nodePath=nodePath.substring(nodeArgInd + 8,nodeArgEndInd);
    ctx.getCommandLineParser().parse(nodePath,handler);
  }
 else {
    address=new DefaultOperationRequestAddress(ctx.getCurrentNodePath());
  }
  return address;
}",0.9876237623762376
167732,"@Override public boolean isValueRequired(){
  return true;
}","/** 
 * Argument can only appear if not already present in the parsed command BUT this is not all the time true, for example, an argument cannot appear AFTER some other arguments. This logic is in the parent implementation. That is why, although we would like to redefine the method at this point we can't.
 */
@Override public boolean isValueRequired(){
  return true;
}",0.2784222737819025
167733,"@Override public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {
  if (!access.isSatisfied(ctx)) {
    return false;
  }
  ParsedCommandLine args=ctx.getParsedCommandLine();
  if (exclusive) {
    final Set<String> propertyNames=args.getPropertyNames();
    if (propertyNames.isEmpty()) {
      final List<String> values=args.getOtherProperties();
      if (values.isEmpty()) {
        return true;
      }
      if (index == -1) {
        return false;
      }
      return !(index == 0 && values.size() == 1);
    }
    if (propertyNames.size() != 1) {
      return false;
    }
    if (args.getLastParsedPropertyName() == null) {
      return false;
    }
    final List<String> values=args.getOtherProperties();
    if (!values.isEmpty()) {
      return false;
    }
    return fullName.startsWith(args.getLastParsedPropertyName()) || (shortName != null && shortName.startsWith(args.getLastParsedPropertyName()));
  }
  if (isPresent(args)) {
    return !isValueComplete(args);
  }
  for (  CommandArgument arg : cantAppearAfter) {
    if (arg.isPresent(args)) {
      return false;
    }
  }
  if (requiredPreceding != null) {
    for (    CommandArgument arg : requiredPreceding) {
      if (arg.isPresent(args)) {
        return true;
      }
    }
    return false;
  }
  return true;
}","@Override public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {
  if (!access.isSatisfied(ctx)) {
    return false;
  }
  ParsedCommandLine args=ctx.getParsedCommandLine();
  if (exclusive) {
    final Set<String> propertyNames=args.getPropertyNames();
    if (propertyNames.isEmpty()) {
      final List<String> values=args.getOtherProperties();
      if (values.isEmpty()) {
        return true;
      }
      if (index == -1) {
        return false;
      }
      return !(index == 0 && values.size() == 1);
    }
    if (propertyNames.size() != 1) {
      return false;
    }
    if (args.getLastParsedPropertyName() == null) {
      return false;
    }
    final List<String> values=args.getOtherProperties();
    if (!values.isEmpty()) {
      return false;
    }
    if (fullName.equals(args.getLastParsedPropertyName())) {
      return false;
    }
    return fullName.startsWith(args.getLastParsedPropertyName()) || (shortName != null && shortName.startsWith(args.getLastParsedPropertyName()));
  }
  if (isPresent(args)) {
    return false;
  }
  for (  CommandArgument arg : cantAppearAfter) {
    if (arg.isPresent(args)) {
      return false;
    }
  }
  if (requiredPreceding != null) {
    for (    CommandArgument arg : requiredPreceding) {
      if (arg.isPresent(args)) {
        return true;
      }
    }
    return false;
  }
  return true;
}",0.7313653136531365
167734,"protected int complete(CommandContext ctx,ParsedCommandLine parsedCmd,OperationCandidatesProvider candidatesProvider,final String buffer,int cursor,List<String> candidates){
  if (parsedCmd.isRequestComplete()) {
    return -1;
  }
  if (parsedCmd.endsOnHeaderListStart() || parsedCmd.hasHeaders()) {
    final Map<String,OperationRequestHeader> headers=candidatesProvider.getHeaders(ctx);
    if (headers.isEmpty()) {
      return -1;
    }
    int result=buffer.length();
    if (parsedCmd.getLastHeaderName() != null) {
      if (buffer.endsWith(parsedCmd.getLastHeaderName())) {
        result=parsedCmd.getLastChunkIndex();
        for (        String name : headers.keySet()) {
          if (!parsedCmd.hasHeader(name) && name.startsWith(parsedCmd.getLastHeaderName())) {
            candidates.add(name);
          }
        }
      }
 else {
        final OperationRequestHeader header=headers.get(parsedCmd.getLastHeaderName());
        if (header == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=header.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        int valueResult=headerCompleter.complete(ctx,buffer.substring(parsedCmd.getLastChunkIndex()),cursor,candidates);
        if (valueResult < 0) {
          return -1;
        }
        result=parsedCmd.getLastChunkIndex() + valueResult;
      }
    }
 else {
      if (!parsedCmd.hasHeaders()) {
        candidates.addAll(headers.keySet());
      }
 else       if (parsedCmd.endsOnHeaderSeparator()) {
        candidates.addAll(headers.keySet());
        for (        ParsedOperationRequestHeader parsed : parsedCmd.getHeaders()) {
          candidates.remove(parsed.getName());
        }
      }
 else {
        final ParsedOperationRequestHeader lastParsedHeader=parsedCmd.getLastHeader();
        final OperationRequestHeader lastHeader=headers.get(lastParsedHeader.getName());
        if (lastHeader == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=lastHeader.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        result=headerCompleter.complete(ctx,buffer,cursor,candidates);
      }
    }
    Collections.sort(candidates);
    return result;
  }
  if (parsedCmd.endsOnPropertyListEnd()) {
    return buffer.length();
  }
  if (parsedCmd.hasProperties() || parsedCmd.endsOnPropertyListStart()) {
    if (!parsedCmd.hasOperationName()) {
      return -1;
    }
    final Collection<CommandArgument> allArgs=candidatesProvider.getProperties(ctx,parsedCmd.getOperationName(),parsedCmd.getAddress());
    if (allArgs.isEmpty()) {
      final CommandLineFormat format=parsedCmd.getFormat();
      if (format != null && format.getPropertyListEnd() != null) {
        candidates.add(format.getPropertyListEnd());
      }
      return buffer.length();
    }
    try {
      if (!parsedCmd.hasProperties()) {
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (arg.getIndex() >= 0) {
              final CommandLineCompleter valCompl=arg.getValueCompleter();
              if (valCompl != null) {
                valCompl.complete(ctx,""String_Node_Str"",0,candidates);
              }
            }
 else {
              String argName=arg.getFullName();
              candidates.add(argName);
            }
          }
        }
        Collections.sort(candidates);
        return buffer.length();
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
    int result=buffer.length();
    String chunk=null;
    CommandLineCompleter valueCompleter=null;
    if (!parsedCmd.endsOnPropertySeparator()) {
      final String argName=parsedCmd.getLastParsedPropertyName();
      final String argValue=parsedCmd.getLastParsedPropertyValue();
      if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
        result=parsedCmd.getLastChunkIndex();
        if (parsedCmd.endsOnPropertyValueSeparator()) {
          ++result;
        }
        chunk=argValue;
        if (argName != null) {
          valueCompleter=getValueCompleter(ctx,allArgs,argName);
        }
 else {
          valueCompleter=getValueCompleter(ctx,allArgs,parsedCmd.getOtherProperties().size() - 1);
        }
        if (valueCompleter == null) {
          if (parsedCmd.endsOnSeparator()) {
            return -1;
          }
          for (          CommandArgument arg : allArgs) {
            try {
              if (arg.canAppearNext(ctx) && !arg.getFullName().equals(argName)) {
                return -1;
              }
            }
 catch (            CommandFormatException e) {
              break;
            }
          }
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null && format.getPropertyListEnd() != null) {
            candidates.add(format.getPropertyListEnd());
          }
          return buffer.length();
        }
      }
 else {
        chunk=argName;
        result=parsedCmd.getLastChunkIndex();
      }
    }
 else {
      chunk=null;
    }
    if (valueCompleter != null) {
      if (chunk == null) {
        String parsedName=parsedCmd.getLastParsedPropertyName();
        for (        CommandArgument arg : allArgs) {
          String argFullName=arg.getFullName();
          if (argFullName.equals(parsedName)) {
            if (!arg.isValueRequired()) {
              candidates.add(Util.FALSE);
              return result;
            }
          }
        }
      }
      int valueResult=valueCompleter.complete(ctx,chunk == null ? ""String_Node_Str"" : chunk,0,candidates);
      if (valueResult < 0) {
        return valueResult;
      }
 else {
        if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0))) {
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null) {
            for (            CommandArgument arg : allArgs) {
              try {
                if (arg.canAppearNext(ctx)) {
                  candidates.set(0,""String_Node_Str"" + format.getPropertySeparator());
                  return buffer.length();
                }
              }
 catch (              CommandFormatException e) {
                e.printStackTrace();
                return result + valueResult;
              }
            }
            candidates.set(0,format.getPropertyListEnd());
            return buffer.length();
          }
        }
        return result + valueResult;
      }
    }
    CommandArgument lastArg=null;
    boolean allPropertiesPresent=true;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          allPropertiesPresent=false;
        }
 else {
          String argFullName=arg.getFullName();
          if (argFullName.equals(chunk)) {
            lastArg=arg;
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              final String value=chunk == null ? ""String_Node_Str"" : chunk;
              valCompl.complete(ctx,value,value.length(),candidates);
            }
          }
 else {
            String argFullName=arg.getFullName();
            if (chunk == null || argFullName.startsWith(chunk)) {
              candidates.add(argFullName);
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    if (lastArg != null) {
      if (lastArg.isValueRequired()) {
        candidates.add(lastArg.getFullName() + ""String_Node_Str"");
      }
 else {
        CommandLineFormat format=parsedCmd.getFormat();
        candidates.add(""String_Node_Str"" + Util.FALSE);
        if (format != null && format.getPropertyListEnd() != null) {
          candidates.add(format.getPropertyListEnd());
          if (!allPropertiesPresent) {
            candidates.add(format.getPropertySeparator());
          }
        }
      }
    }
    if (candidates.isEmpty()) {
      if (chunk == null && !parsedCmd.endsOnSeparator()) {
        final CommandLineFormat format=parsedCmd.getFormat();
        if (format != null && format.getPropertyListEnd() != null) {
          candidates.add(format.getPropertyListEnd());
        }
      }
    }
 else {
      Collections.sort(candidates);
    }
    return result;
  }
  if (parsedCmd.hasOperationName() || parsedCmd.endsOnAddressOperationNameSeparator()) {
    if (parsedCmd.getAddress().endsOnType()) {
      return -1;
    }
    final Collection<String> names=candidatesProvider.getOperationNames(ctx,parsedCmd.getAddress());
    if (names.isEmpty()) {
      return -1;
    }
    final String chunk=parsedCmd.getOperationName();
    if (chunk == null) {
      candidates.addAll(names);
    }
 else {
      for (      String name : names) {
        if (name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
    }
    Collections.sort(candidates);
    if (parsedCmd.endsOnSeparator()) {
      return buffer.length();
    }
 else {
      if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0)) && parsedCmd.getFormat().getPropertyListStart().length() > 0) {
        candidates.set(0,chunk + parsedCmd.getFormat().getPropertyListStart());
      }
      return parsedCmd.getLastChunkIndex();
    }
  }
  final OperationRequestAddress address=parsedCmd.getAddress();
  if (buffer.endsWith(""String_Node_Str"")) {
    return -1;
  }
  final String chunk;
  if (address.isEmpty() || parsedCmd.endsOnNodeSeparator() || parsedCmd.endsOnNodeTypeNameSeparator()|| address.equals(ctx.getCurrentNodePath())) {
    chunk=null;
  }
 else   if (address.endsOnType()) {
    chunk=address.getNodeType();
    address.toParentNode();
  }
 else {
    chunk=address.toNodeType();
  }
  final Collection<String> names;
  if (address.endsOnType()) {
    names=candidatesProvider.getNodeNames(ctx,address);
  }
 else {
    names=candidatesProvider.getNodeTypes(ctx,address);
  }
  if (names.isEmpty()) {
    return -1;
  }
  if (chunk == null) {
    candidates.addAll(names);
  }
 else {
    for (    String name : names) {
      if (name.startsWith(chunk)) {
        candidates.add(name);
      }
    }
  }
  if (candidates.size() == 1) {
    final String candidate=candidates.get(0);
    if (address.endsOnType()) {
      if (chunk != null && chunk.equals(candidate)) {
        candidates.set(0,parsedCmd.getFormat().getAddressOperationSeparator());
        candidates.add(parsedCmd.getFormat().getNodeSeparator());
        return buffer.length();
      }
      candidates.set(0,Util.escapeString(candidate,ESCAPE_SELECTOR));
    }
 else {
      if (chunk != null && chunk.equals(candidate)) {
        candidates.set(0,""String_Node_Str"");
        return buffer.length();
      }
      candidates.set(0,Util.escapeString(candidate,ESCAPE_SELECTOR) + '=');
    }
  }
 else {
    Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
  }
  return parsedCmd.endsOnSeparator() ? parsedCmd.getLastSeparatorIndex() + 1 : parsedCmd.getLastChunkIndex();
}","protected int complete(CommandContext ctx,ParsedCommandLine parsedCmd,OperationCandidatesProvider candidatesProvider,final String buffer,int cursor,List<String> candidates){
  if (parsedCmd.isRequestComplete()) {
    return -1;
  }
  if (parsedCmd.endsOnHeaderListStart() || parsedCmd.hasHeaders()) {
    final Map<String,OperationRequestHeader> headers=candidatesProvider.getHeaders(ctx);
    if (headers.isEmpty()) {
      return -1;
    }
    int result=buffer.length();
    if (parsedCmd.getLastHeaderName() != null) {
      if (buffer.endsWith(parsedCmd.getLastHeaderName())) {
        result=parsedCmd.getLastChunkIndex();
        for (        String name : headers.keySet()) {
          if (!parsedCmd.hasHeader(name) && name.startsWith(parsedCmd.getLastHeaderName())) {
            candidates.add(name);
          }
        }
      }
 else {
        final OperationRequestHeader header=headers.get(parsedCmd.getLastHeaderName());
        if (header == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=header.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        int valueResult=headerCompleter.complete(ctx,buffer.substring(parsedCmd.getLastChunkIndex()),cursor,candidates);
        if (valueResult < 0) {
          return -1;
        }
        result=parsedCmd.getLastChunkIndex() + valueResult;
      }
    }
 else {
      if (!parsedCmd.hasHeaders()) {
        candidates.addAll(headers.keySet());
      }
 else       if (parsedCmd.endsOnHeaderSeparator()) {
        candidates.addAll(headers.keySet());
        for (        ParsedOperationRequestHeader parsed : parsedCmd.getHeaders()) {
          candidates.remove(parsed.getName());
        }
      }
 else {
        final ParsedOperationRequestHeader lastParsedHeader=parsedCmd.getLastHeader();
        final OperationRequestHeader lastHeader=headers.get(lastParsedHeader.getName());
        if (lastHeader == null) {
          return -1;
        }
        final CommandLineCompleter headerCompleter=lastHeader.getCompleter();
        if (headerCompleter == null) {
          return -1;
        }
        result=headerCompleter.complete(ctx,buffer,cursor,candidates);
      }
    }
    Collections.sort(candidates);
    return result;
  }
  if (parsedCmd.endsOnPropertyListEnd()) {
    return buffer.length();
  }
  if (parsedCmd.hasProperties() || parsedCmd.endsOnPropertyListStart()) {
    if (!parsedCmd.hasOperationName()) {
      return -1;
    }
    final Collection<CommandArgument> allArgs=candidatesProvider.getProperties(ctx,parsedCmd.getOperationName(),parsedCmd.getAddress());
    if (allArgs.isEmpty()) {
      final CommandLineFormat format=parsedCmd.getFormat();
      if (format != null && format.getPropertyListEnd() != null) {
        candidates.add(format.getPropertyListEnd());
      }
      return buffer.length();
    }
    try {
      if (!parsedCmd.hasProperties()) {
        for (        CommandArgument arg : allArgs) {
          if (arg.canAppearNext(ctx)) {
            if (arg.getIndex() >= 0) {
              final CommandLineCompleter valCompl=arg.getValueCompleter();
              if (valCompl != null) {
                valCompl.complete(ctx,""String_Node_Str"",0,candidates);
              }
            }
 else {
              String argName=arg.getFullName();
              candidates.add(argName);
            }
          }
        }
        Collections.sort(candidates);
        return buffer.length();
      }
    }
 catch (    CommandFormatException e) {
      return -1;
    }
    int result=buffer.length();
    String chunk=null;
    CommandLineCompleter valueCompleter=null;
    if (!parsedCmd.endsOnPropertySeparator()) {
      final String argName=parsedCmd.getLastParsedPropertyName();
      final String argValue=parsedCmd.getLastParsedPropertyValue();
      if (argValue != null || parsedCmd.endsOnPropertyValueSeparator()) {
        result=parsedCmd.getLastChunkIndex();
        if (parsedCmd.endsOnPropertyValueSeparator()) {
          ++result;
        }
        chunk=argValue;
        if (argName != null) {
          valueCompleter=getValueCompleter(ctx,allArgs,argName);
        }
 else {
          valueCompleter=getValueCompleter(ctx,allArgs,parsedCmd.getOtherProperties().size() - 1);
        }
        if (valueCompleter == null) {
          if (parsedCmd.endsOnSeparator()) {
            return -1;
          }
          for (          CommandArgument arg : allArgs) {
            try {
              if (arg.canAppearNext(ctx) && !arg.getFullName().equals(argName)) {
                return -1;
              }
            }
 catch (            CommandFormatException e) {
              break;
            }
          }
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null && format.getPropertyListEnd() != null) {
            candidates.add(format.getPropertyListEnd());
          }
          return buffer.length();
        }
      }
 else {
        chunk=argName;
        result=parsedCmd.getLastChunkIndex();
      }
    }
 else {
      chunk=null;
    }
    if (valueCompleter != null) {
      if (chunk == null) {
        String parsedName=parsedCmd.getLastParsedPropertyName();
        for (        CommandArgument arg : allArgs) {
          String argFullName=arg.getFullName();
          if (argFullName.equals(parsedName)) {
            if (!arg.isValueRequired()) {
              candidates.add(Util.FALSE);
              return result;
            }
          }
        }
      }
      int valueResult=valueCompleter.complete(ctx,chunk == null ? ""String_Node_Str"" : chunk,0,candidates);
      if (valueResult < 0) {
        return valueResult;
      }
 else {
        if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0))) {
          final CommandLineFormat format=parsedCmd.getFormat();
          if (format != null) {
            for (            CommandArgument arg : allArgs) {
              try {
                if (arg.canAppearNext(ctx)) {
                  candidates.set(0,""String_Node_Str"" + format.getPropertySeparator());
                  return buffer.length();
                }
              }
 catch (              CommandFormatException e) {
                e.printStackTrace();
                return result + valueResult;
              }
            }
            candidates.set(0,format.getPropertyListEnd());
            return buffer.length();
          }
        }
        return result + valueResult;
      }
    }
    CommandArgument lastArg=null;
    boolean allPropertiesPresent=true;
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          allPropertiesPresent=false;
        }
 else {
          String argFullName=arg.getFullName();
          if (argFullName.equals(chunk)) {
            lastArg=arg;
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    for (    CommandArgument arg : allArgs) {
      try {
        if (arg.canAppearNext(ctx)) {
          if (arg.getIndex() >= 0) {
            CommandLineCompleter valCompl=arg.getValueCompleter();
            if (valCompl != null) {
              final String value=chunk == null ? ""String_Node_Str"" : chunk;
              valCompl.complete(ctx,value,value.length(),candidates);
            }
          }
 else {
            String argFullName=arg.getFullName();
            if (chunk == null || argFullName.startsWith(chunk)) {
              candidates.add(argFullName);
            }
          }
        }
      }
 catch (      CommandFormatException e) {
        e.printStackTrace();
        return -1;
      }
    }
    if (lastArg != null) {
      if (lastArg.isValueRequired()) {
        candidates.add(lastArg.getFullName() + ""String_Node_Str"");
      }
 else       if (lastArg instanceof ArgumentWithoutValue) {
        ArgumentWithoutValue argWithoutValue=(ArgumentWithoutValue)lastArg;
        if (!argWithoutValue.isExclusive()) {
          if (!allPropertiesPresent) {
            CommandLineFormat format=parsedCmd.getFormat();
            if (format != null && format.getPropertySeparator() != null) {
              candidates.add(lastArg.getFullName() + format.getPropertySeparator());
            }
          }
        }
      }
 else {
        CommandLineFormat format=parsedCmd.getFormat();
        candidates.add(""String_Node_Str"" + Util.FALSE);
        if (format != null && format.getPropertyListEnd() != null) {
          candidates.add(format.getPropertyListEnd());
          if (!allPropertiesPresent) {
            candidates.add(format.getPropertySeparator());
          }
        }
      }
    }
    if (candidates.isEmpty()) {
      if (chunk == null && !parsedCmd.endsOnSeparator()) {
        final CommandLineFormat format=parsedCmd.getFormat();
        if (format != null && format.getPropertyListEnd() != null) {
          candidates.add(format.getPropertyListEnd());
        }
      }
    }
 else {
      Collections.sort(candidates);
    }
    return result;
  }
  if (parsedCmd.hasOperationName() || parsedCmd.endsOnAddressOperationNameSeparator()) {
    if (parsedCmd.getAddress().endsOnType()) {
      return -1;
    }
    final Collection<String> names=candidatesProvider.getOperationNames(ctx,parsedCmd.getAddress());
    if (names.isEmpty()) {
      return -1;
    }
    final String chunk=parsedCmd.getOperationName();
    if (chunk == null) {
      candidates.addAll(names);
    }
 else {
      for (      String name : names) {
        if (name.startsWith(chunk)) {
          candidates.add(name);
        }
      }
    }
    Collections.sort(candidates);
    if (parsedCmd.endsOnSeparator()) {
      return buffer.length();
    }
 else {
      if (chunk != null && candidates.size() == 1 && chunk.equals(candidates.get(0)) && parsedCmd.getFormat().getPropertyListStart().length() > 0) {
        candidates.set(0,chunk + parsedCmd.getFormat().getPropertyListStart());
      }
      return parsedCmd.getLastChunkIndex();
    }
  }
  final OperationRequestAddress address=parsedCmd.getAddress();
  if (buffer.endsWith(""String_Node_Str"")) {
    return -1;
  }
  final String chunk;
  if (address.isEmpty() || parsedCmd.endsOnNodeSeparator() || parsedCmd.endsOnNodeTypeNameSeparator()|| address.equals(ctx.getCurrentNodePath())) {
    chunk=null;
  }
 else   if (address.endsOnType()) {
    chunk=address.getNodeType();
    address.toParentNode();
  }
 else {
    chunk=address.toNodeType();
  }
  final Collection<String> names;
  if (address.endsOnType()) {
    names=candidatesProvider.getNodeNames(ctx,address);
  }
 else {
    names=candidatesProvider.getNodeTypes(ctx,address);
  }
  if (names.isEmpty()) {
    return -1;
  }
  if (chunk == null) {
    candidates.addAll(names);
  }
 else {
    for (    String name : names) {
      if (name.startsWith(chunk)) {
        candidates.add(name);
      }
    }
  }
  if (candidates.size() == 1) {
    final String candidate=candidates.get(0);
    if (address.endsOnType()) {
      if (chunk != null && chunk.equals(candidate)) {
        candidates.set(0,parsedCmd.getFormat().getAddressOperationSeparator());
        candidates.add(parsedCmd.getFormat().getNodeSeparator());
        return buffer.length();
      }
      candidates.set(0,Util.escapeString(candidate,ESCAPE_SELECTOR));
    }
 else {
      if (chunk != null && chunk.equals(candidate)) {
        candidates.set(0,""String_Node_Str"");
        return buffer.length();
      }
      candidates.set(0,Util.escapeString(candidate,ESCAPE_SELECTOR) + '=');
    }
  }
 else {
    Util.sortAndEscape(candidates,ESCAPE_SELECTOR);
  }
  return parsedCmd.endsOnSeparator() ? parsedCmd.getLastSeparatorIndex() + 1 : parsedCmd.getLastChunkIndex();
}",0.9790512465373962
167735,"@Override public void marshallAsElement(AttributeDefinition attribute,ModelNode resourceModel,boolean marshallDefault,XMLStreamWriter writer) throws XMLStreamException {
  String wrapper=wrapperElement == null ? attribute.getName() : wrapperElement;
  resourceModel=resourceModel.get(attribute.getName());
  if (!resourceModel.isDefined()) {
    writer.writeEmptyElement(wrapper);
    return;
  }
  if (wrapElement) {
    writer.writeStartElement(wrapper);
  }
  for (  ModelNode property : resourceModel.asList()) {
    writer.writeEmptyElement(elementName);
    writer.writeAttribute(org.jboss.as.controller.parsing.Attribute.NAME.getLocalName(),property.asProperty().getName());
    writer.writeAttribute(org.jboss.as.controller.parsing.Attribute.VALUE.getLocalName(),property.asProperty().getValue().asString());
  }
  if (wrapElement) {
    writer.writeEndElement();
  }
}","@Override public void marshallAsElement(AttributeDefinition attribute,ModelNode resourceModel,boolean marshallDefault,XMLStreamWriter writer) throws XMLStreamException {
  resourceModel=resourceModel.get(attribute.getName());
  if (!resourceModel.isDefined()) {
    return;
  }
  String wrapper=wrapperElement == null ? attribute.getName() : wrapperElement;
  List<ModelNode> elementList=resourceModel.asList();
  if (elementList.isEmpty()) {
    if (wrapElement) {
      writer.writeEmptyElement(wrapper);
    }
 else {
      ControllerLogger.MGMT_OP_LOGGER.debugf(""String_Node_Str"",getClass().getSimpleName(),attribute.getName());
    }
    return;
  }
  if (wrapElement) {
    writer.writeStartElement(wrapper);
  }
  for (  ModelNode property : elementList) {
    writer.writeEmptyElement(elementName);
    writer.writeAttribute(org.jboss.as.controller.parsing.Attribute.NAME.getLocalName(),property.asProperty().getName());
    writer.writeAttribute(org.jboss.as.controller.parsing.Attribute.VALUE.getLocalName(),property.asProperty().getValue().asString());
  }
  if (wrapElement) {
    writer.writeEndElement();
  }
}",0.7896051974012993
167736,"private void parseGroup(XMLExtendedStreamReader reader,ModelNode op,boolean wildcard) throws XMLStreamException {
  parseAttributes(reader,op,attributesByGroup.get(reader.getLocalName()),wildcard);
  if (reader.hasNext()) {
    if (reader.nextTag() == START_ELEMENT && attributeElements.containsKey(reader.getLocalName())) {
      AttributeDefinition ad=attributeElements.get(reader.getLocalName());
      ad.getParser().parseElement(ad,reader,op);
      ParseUtils.requireNoContent(reader);
    }
 else     if (reader.getEventType() != END_ELEMENT) {
      throw ParseUtils.unexpectedElement(reader);
    }
  }
}","private void parseGroup(XMLExtendedStreamReader reader,ModelNode op,boolean wildcard) throws XMLStreamException {
  Map<String,AttributeDefinition> groupAttrs=attributesByGroup.get(reader.getLocalName());
  parseAttributes(reader,op,groupAttrs,wildcard);
  while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
    String attrName=reader.getLocalName();
    if (attributeElements.containsKey(attrName) && groupAttrs.containsKey(attrName)) {
      AttributeDefinition ad=attributeElements.get(reader.getLocalName());
      ad.getParser().parseElement(ad,reader,op);
    }
 else {
      throw ParseUtils.unexpectedElement(reader);
    }
  }
}",0.444091990483743
167737,"@Override public void interact(){
  interact=true;
  if (cmdCompleter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (this.client == null) {
    printLine(""String_Node_Str"" + ""String_Node_Str"");
  }
  console.setPrompt(getPrompt());
  while (!isTerminated()) {
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override public void interact(){
  interact=true;
  if (cmdCompleter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (this.client == null) {
    printLine(""String_Node_Str"" + ""String_Node_Str"");
  }
  console.setPrompt(getPrompt());
  while (!isTerminated() && console.running()) {
    try {
      Thread.sleep(10);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9747899159663864
167738,"@Override public void handleRequest(final HttpServerExchange exchange){
  final ModelNode dmr;
  final OperationResponse response;
  final HeaderMap requestHeaders=exchange.getRequestHeaders();
  final boolean cachable;
  final boolean get=exchange.getRequestMethod().equals(Methods.GET);
  final boolean encode=Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.ACCEPT)) || Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.CONTENT_TYPE));
  final OperationParameter.Builder operationParameterBuilder=new OperationParameter.Builder(get).encode(encode);
  final int streamIndex=getStreamIndex(exchange,requestHeaders);
  try {
    if (get) {
      GetOperation operation=getOperation(exchange);
      operationParameterBuilder.maxAge(operation.getMaxAge());
      dmr=convertGetRequest(exchange,operation);
      cachable=operation.getMaxAge() > 0;
    }
 else {
      dmr=convertPostRequest(exchange,encode);
      cachable=false;
    }
    operationParameterBuilder.pretty(dmr.hasDefined(""String_Node_Str"") && dmr.get(""String_Node_Str"").asBoolean());
  }
 catch (  Exception e) {
    ROOT_LOGGER.debugf(""String_Node_Str"",e.getMessage());
    Common.sendError(exchange,false,e.toString());
    return;
  }
  final ResponseCallback callback=new ResponseCallback(){
    @Override void doSendResponse(    final OperationResponse response){
      boolean closeResponse=true;
      try {
        ModelNode responseNode=response.getResponseNode();
        if (responseNode.hasDefined(OUTCOME) && FAILED.equals(responseNode.get(OUTCOME).asString())) {
          Common.sendError(exchange,encode,responseNode);
          return;
        }
        if (streamIndex < 0) {
          writeResponse(exchange,200,responseNode,operationParameterBuilder.build());
        }
 else {
          List<OperationResponse.StreamEntry> streamEntries=response.getInputStreams();
          if (streamIndex >= streamEntries.size()) {
            Common.sendError(exchange,encode,new ModelNode(HttpServerLogger.ROOT_LOGGER.invalidUseStreamAsResponseIndex(streamIndex,streamEntries.size())),400);
          }
 else {
            closeResponse=false;
            writeResponse(exchange,200,response,streamIndex,operationParameterBuilder.build());
          }
        }
      }
  finally {
        if (closeResponse) {
          StreamUtils.safeClose(response);
        }
      }
    }
  }
;
  final boolean sendPreparedResponse=sendPreparedResponse(dmr);
  final ModelController.OperationTransactionControl control=sendPreparedResponse ? new ModelController.OperationTransactionControl(){
    @Override public void operationPrepared(    final ModelController.OperationTransaction transaction,    final ModelNode result){
      transaction.commit();
      result.get(OUTCOME).set(SUCCESS);
      result.get(RESULT);
      callback.sendResponse(OperationResponse.Factory.createSimple(result));
    }
  }
 : ModelController.OperationTransactionControl.COMMIT;
  try {
    dmr.get(OPERATION_HEADERS,ACCESS_MECHANISM).set(AccessMechanism.HTTP.toString());
    response=modelController.execute(new OperationBuilder(dmr).build(),OperationMessageHandler.logging,control);
    if (cachable && streamIndex > -1) {
      MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
      md.update(response.toString().getBytes());
      ETag etag=new ETag(false,HexConverter.convertToHexString(md.digest()));
      operationParameterBuilder.etag(etag);
      if (!ETagUtils.handleIfNoneMatch(exchange,etag,false)) {
        exchange.setResponseCode(304);
        DomainUtil.writeCacheHeaders(exchange,304,operationParameterBuilder.build());
        exchange.endExchange();
        return;
      }
    }
  }
 catch (  Throwable t) {
    ROOT_LOGGER.modelRequestError(t);
    Common.sendError(exchange,encode,t.getLocalizedMessage());
    return;
  }
  callback.sendResponse(response);
}","@Override public void handleRequest(final HttpServerExchange exchange){
  final ModelNode dmr;
  final OperationResponse response;
  final HeaderMap requestHeaders=exchange.getRequestHeaders();
  final boolean cachable;
  final boolean get=exchange.getRequestMethod().equals(Methods.GET);
  final boolean encode=Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.ACCEPT)) || Common.APPLICATION_DMR_ENCODED.equals(requestHeaders.getFirst(Headers.CONTENT_TYPE));
  final OperationParameter.Builder operationParameterBuilder=new OperationParameter.Builder(get).encode(encode);
  final int streamIndex=getStreamIndex(exchange,requestHeaders);
  try {
    if (get) {
      GetOperation operation=getOperation(exchange);
      operationParameterBuilder.maxAge(operation.getMaxAge());
      dmr=convertGetRequest(exchange,operation);
      cachable=operation.getMaxAge() > 0;
    }
 else {
      dmr=convertPostRequest(exchange,encode);
      cachable=false;
    }
    boolean pretty=false;
    if (dmr.hasDefined(JSON_PRETTY)) {
      String jsonPretty=dmr.get(JSON_PRETTY).asString();
      pretty=jsonPretty.equals(""String_Node_Str"") || jsonPretty.equals(""String_Node_Str"");
    }
    operationParameterBuilder.pretty(pretty);
  }
 catch (  Exception e) {
    ROOT_LOGGER.debugf(""String_Node_Str"",e.getMessage());
    Common.sendError(exchange,false,e.toString());
    return;
  }
  final ResponseCallback callback=new ResponseCallback(){
    @Override void doSendResponse(    final OperationResponse response){
      boolean closeResponse=true;
      try {
        ModelNode responseNode=response.getResponseNode();
        if (responseNode.hasDefined(OUTCOME) && FAILED.equals(responseNode.get(OUTCOME).asString())) {
          Common.sendError(exchange,encode,responseNode);
          return;
        }
        if (streamIndex < 0) {
          writeResponse(exchange,200,responseNode,operationParameterBuilder.build());
        }
 else {
          List<OperationResponse.StreamEntry> streamEntries=response.getInputStreams();
          if (streamIndex >= streamEntries.size()) {
            Common.sendError(exchange,encode,new ModelNode(HttpServerLogger.ROOT_LOGGER.invalidUseStreamAsResponseIndex(streamIndex,streamEntries.size())),400);
          }
 else {
            closeResponse=false;
            writeResponse(exchange,200,response,streamIndex,operationParameterBuilder.build());
          }
        }
      }
  finally {
        if (closeResponse) {
          StreamUtils.safeClose(response);
        }
      }
    }
  }
;
  final boolean sendPreparedResponse=sendPreparedResponse(dmr);
  final ModelController.OperationTransactionControl control=sendPreparedResponse ? new ModelController.OperationTransactionControl(){
    @Override public void operationPrepared(    final ModelController.OperationTransaction transaction,    final ModelNode result){
      transaction.commit();
      result.get(OUTCOME).set(SUCCESS);
      result.get(RESULT);
      callback.sendResponse(OperationResponse.Factory.createSimple(result));
    }
  }
 : ModelController.OperationTransactionControl.COMMIT;
  try {
    dmr.get(OPERATION_HEADERS,ACCESS_MECHANISM).set(AccessMechanism.HTTP.toString());
    response=modelController.execute(new OperationBuilder(dmr).build(),OperationMessageHandler.logging,control);
    if (cachable && streamIndex > -1) {
      MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
      md.update(response.toString().getBytes());
      ETag etag=new ETag(false,HexConverter.convertToHexString(md.digest()));
      operationParameterBuilder.etag(etag);
      if (!ETagUtils.handleIfNoneMatch(exchange,etag,false)) {
        exchange.setResponseCode(304);
        DomainUtil.writeCacheHeaders(exchange,304,operationParameterBuilder.build());
        exchange.endExchange();
        return;
      }
    }
  }
 catch (  Throwable t) {
    ROOT_LOGGER.modelRequestError(t);
    Common.sendError(exchange,encode,t.getLocalizedMessage());
    return;
  }
  callback.sendResponse(response);
}",0.9654127745518808
167739,"private Index calculateModuleIndex(final Module module) throws ModuleLoadException, IOException {
  final Indexer indexer=new Indexer();
  final PathFilter filter=PathFilters.getDefaultImportFilter();
  final Iterator<Resource> iterator=module.iterateResources(filter);
  while (iterator.hasNext()) {
    Resource resource=iterator.next();
    indexer.index(resource.openStream());
  }
  return indexer.complete();
}","private Index calculateModuleIndex(final Module module) throws ModuleLoadException, IOException {
  final Indexer indexer=new Indexer();
  final PathFilter filter=PathFilters.getDefaultImportFilter();
  final Iterator<Resource> iterator=module.iterateResources(filter);
  while (iterator.hasNext()) {
    Resource resource=iterator.next();
    if (resource.getName().endsWith(""String_Node_Str"")) {
      try (InputStream in=resource.openStream()){
        indexer.index(in);
      }
 catch (      Exception e) {
        ServerLogger.DEPLOYMENT_LOGGER.cannotIndexClass(resource.getName(),resource.getURL().toExternalForm(),e);
      }
    }
  }
  return indexer.complete();
}",0.6605504587155964
167740,"@Override public Object resolveValue(CommandContext ctx,ModelNode response) throws CommandLineException {
  final List<Operand> operands=getOperands();
  if (operands.isEmpty()) {
    throw new CommandLineException(getName() + ""String_Node_Str"");
  }
  if (operands.size() != 2) {
    throw new CommandLineException(getName() + ""String_Node_Str"" + operands.size());
  }
  final Object left=operands.get(0).resolveValue(ctx,response);
  if (left == null) {
    return false;
  }
  final Object right=operands.get(1).resolveValue(ctx,response);
  if (right == null) {
    return false;
  }
  if (!(left instanceof ModelNode) || !(right instanceof ModelNode)) {
    throw new CommandLineException(""String_Node_Str"" + left.getClass().getName() + ""String_Node_Str""+ right.getClass().getName());
  }
  if (((ModelNode)left).getType() != ((ModelNode)right).getType()) {
    return false;
  }
  return compare(left,right);
}","@Override public Object resolveValue(CommandContext ctx,ModelNode response) throws CommandLineException {
  final List<Operand> operands=getOperands();
  if (operands.isEmpty()) {
    throw new CommandLineException(getName() + ""String_Node_Str"");
  }
  if (operands.size() != 2) {
    throw new CommandLineException(getName() + ""String_Node_Str"" + operands.size());
  }
  final Object left=operands.get(0).resolveValue(ctx,response);
  if (left == null) {
    return false;
  }
  final Object right=operands.get(1).resolveValue(ctx,response);
  if (right == null) {
    return false;
  }
  if (!(left instanceof ModelNode) || !(right instanceof ModelNode)) {
    throw new CommandLineException(""String_Node_Str"" + left.getClass().getName() + ""String_Node_Str""+ right.getClass().getName());
  }
  return compare(left,right);
}",0.9247558874210224
167741,"@Override public Object resolveValue(CommandContext ctx,ModelNode response) throws CommandLineException {
  ModelNode targetValue=response;
  for (  String name : path) {
    if (!targetValue.has(name)) {
      break;
    }
 else {
      targetValue=targetValue.get(name);
    }
  }
  return targetValue == null ? null : targetValue;
}","@Override public Object resolveValue(CommandContext ctx,ModelNode response) throws CommandLineException {
  ModelNode targetValue=response;
  for (  String name : path) {
    if (!targetValue.has(name)) {
      return null;
    }
 else {
      targetValue=targetValue.get(name);
    }
  }
  return targetValue == null ? null : targetValue;
}",0.9763313609467456
167742,"@Override protected boolean compare(Object left,Object right){
  if (left == null) {
    return right != null;
  }
  return !left.equals(right);
}","@Override protected boolean compare(Object left,Object right){
  if (((ModelNode)left).getType() != ((ModelNode)right).getType()) {
    return true;
  }
  if (left == null) {
    return right != null;
  }
  return !left.equals(right);
}",0.7015706806282722
167743,"@Test public void testSimpleInt() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"").set(11);
  assertFalse(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(111);
  assertTrue(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
}","@Test public void testSimpleInt() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"").set(11);
  assertFalse(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(111);
  assertTrue(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
}",0.9895988112927192
167744,"@Test public void testPathBoolean() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(true);
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(false);
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(false);
  assertTrue(node,""String_Node_Str"");
}","@Test public void testPathBoolean() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(true);
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(false);
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
  node.get(""String_Node_Str"").get(""String_Node_Str"").set(false);
  assertTrue(node,""String_Node_Str"");
}",0.6738738738738739
167745,"@Test public void testUndefined() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
}","@Test public void testUndefined() throws Exception {
  ModelNode node=new ModelNode();
  node.get(""String_Node_Str"");
  assertFalse(node,""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
  node.get(""String_Node_Str"").set(""String_Node_Str"");
  assertTrue(node,""String_Node_Str"");
}",0.96793893129771
167746,"private boolean isGlobalAlias(final ImmutableManagementResourceRegistration registry,final Property child){
  if (isSquatterResource(registry,child.getName())) {
    ImmutableManagementResourceRegistration squatterRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(child.getName(),child.getValue().asString())));
    return squatterRegistration != null && squatterRegistration.isAlias();
  }
  String key=child.getName();
  ImmutableManagementResourceRegistration wildCardChildRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(key)));
  boolean isAlias=wildCardChildRegistration.isAlias();
  Set<String> registredNames=registry.getChildNames(PathAddress.pathAddress(PathElement.pathElement(key)));
  if (registredNames != null && !registredNames.isEmpty() && isAlias) {
    for (    String value : registredNames) {
      ImmutableManagementResourceRegistration childRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(key,value)));
      isAlias=isAlias && childRegistration != null && childRegistration.isAlias();
      if (!isAlias) {
        return false;
      }
    }
  }
  return isAlias;
}","private boolean isGlobalAlias(final ImmutableManagementResourceRegistration registry,final Property child){
  if (isSquatterResource(registry,child.getName())) {
    Set<PathElement> childrenPath=registry.getChildAddresses(PathAddress.EMPTY_ADDRESS);
    boolean found=false;
    boolean alias=true;
    for (    PathElement childPath : childrenPath) {
      if (childPath.getKey().equals(child.getName())) {
        found=true;
        ImmutableManagementResourceRegistration squatterRegistration=registry.getSubModel(PathAddress.pathAddress(childPath));
        alias=alias && (squatterRegistration != null && squatterRegistration.isAlias());
      }
    }
    if (found && alias) {
      return true;
    }
    ImmutableManagementResourceRegistration squatterRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(child.getName(),child.getValue().asString())));
    return squatterRegistration != null && squatterRegistration.isAlias();
  }
  String key=child.getName();
  ImmutableManagementResourceRegistration wildCardChildRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(key)));
  boolean isAlias=wildCardChildRegistration.isAlias();
  Set<String> registredNames=registry.getChildNames(PathAddress.pathAddress(PathElement.pathElement(key)));
  if (registredNames != null && !registredNames.isEmpty() && isAlias) {
    for (    String value : registredNames) {
      ImmutableManagementResourceRegistration childRegistration=registry.getSubModel(PathAddress.pathAddress(PathElement.pathElement(key,value)));
      isAlias=isAlias && childRegistration != null && childRegistration.isAlias();
      if (!isAlias) {
        return false;
      }
    }
  }
  return isAlias;
}",0.8128415300546448
167747,"private void doExecuteInternal(final OperationContext context,final ModelNode operation,final ReadResourceDescriptionAccessControlContext accessControlContext) throws OperationFailedException {
  for (  AttributeDefinition def : DEFINITION.getParameters()) {
    def.validateOperation(operation);
  }
  final String opName=operation.require(OP).asString();
  PathAddress opAddr=PathAddress.pathAddress(operation.get(OP_ADDR));
  final boolean recursive=GlobalOperationHandlers.getRecursive(context,operation);
  final boolean proxies=PROXIES.resolveModelAttribute(context,operation).asBoolean();
  final boolean ops=OPERATIONS.resolveModelAttribute(context,operation).asBoolean();
  final boolean nots=NOTIFICATIONS.resolveModelAttribute(context,operation).asBoolean();
  final boolean aliases=INCLUDE_ALIASES.resolveModelAttribute(context,operation).asBoolean();
  final boolean inherited=INHERITED.resolveModelAttribute(context,operation).asBoolean();
  final AccessControl accessControl=AccessControl.forName(ACCESS_CONTROL.resolveModelAttribute(context,operation).asString());
  final ImmutableManagementResourceRegistration registry=getResourceRegistrationCheckForAlias(context,opAddr,accessControlContext);
  final DescriptionProvider descriptionProvider=registry.getModelDescription(PathAddress.EMPTY_ADDRESS);
  final Locale locale=GlobalOperationHandlers.getLocale(context,operation);
  final ModelNode nodeDescription=descriptionProvider.getModelDescription(locale);
  final Map<String,ModelNode> operations=ops ? new HashMap<String,ModelNode>() : null;
  final Map<String,ModelNode> notifications=nots ? new HashMap<String,ModelNode>() : null;
  final Map<PathElement,ModelNode> childResources=recursive ? new HashMap<PathElement,ModelNode>() : Collections.<PathElement,ModelNode>emptyMap();
  if (accessControl != AccessControl.NONE) {
    accessControlContext.initLocalResourceAddresses(context,opAddr);
  }
  final ReadResourceDescriptionAssemblyHandler assemblyHandler=new ReadResourceDescriptionAssemblyHandler(nodeDescription,operations,notifications,childResources,accessControlContext,accessControl);
  context.addStep(assemblyHandler,OperationContext.Stage.MODEL,true);
  if (!aliases && nodeDescription.hasDefined(CHILDREN)) {
    for (    Property child : nodeDescription.get(CHILDREN).asPropertyList()) {
      String key=child.getName();
      if (isGlobalAlias(registry,child)) {
        nodeDescription.get(CHILDREN).remove(key);
      }
    }
  }
  if (ops) {
    for (    final Map.Entry<String,OperationEntry> entry : registry.getOperationDescriptions(PathAddress.EMPTY_ADDRESS,inherited).entrySet()) {
      if (entry.getValue().getType() == OperationEntry.EntryType.PUBLIC) {
        if (context.getProcessType() != ProcessType.DOMAIN_SERVER || entry.getValue().getFlags().contains(OperationEntry.Flag.RUNTIME_ONLY)) {
          final DescriptionProvider provider=entry.getValue().getDescriptionProvider();
          operations.put(entry.getKey(),provider.getModelDescription(locale));
        }
      }
    }
  }
  if (nots) {
    for (    final Map.Entry<String,NotificationEntry> entry : registry.getNotificationDescriptions(PathAddress.EMPTY_ADDRESS,inherited).entrySet()) {
      final DescriptionProvider provider=entry.getValue().getDescriptionProvider();
      notifications.put(entry.getKey(),provider.getModelDescription(locale));
    }
  }
  if (nodeDescription.hasDefined(ATTRIBUTES)) {
    for (    final String attr : nodeDescription.require(ATTRIBUTES).keys()) {
      final AttributeAccess access=registry.getAttributeAccess(PathAddress.EMPTY_ADDRESS,attr);
      final AttributeAccess.AccessType accessType=access == null ? AttributeAccess.AccessType.READ_ONLY : access.getAccessType();
      final AttributeAccess.Storage storage=access == null ? AttributeAccess.Storage.CONFIGURATION : access.getStorageType();
      final ModelNode attrNode=nodeDescription.get(ATTRIBUTES,attr);
      String displayedAccessType=context.getProcessType() == ProcessType.DOMAIN_SERVER && storage == AttributeAccess.Storage.CONFIGURATION ? AttributeAccess.AccessType.READ_ONLY.toString() : accessType.toString();
      attrNode.get(ACCESS_TYPE).set(displayedAccessType);
      attrNode.get(STORAGE).set(storage.toString());
      if (accessType == AttributeAccess.AccessType.READ_WRITE) {
        Set<AttributeAccess.Flag> flags=access.getFlags();
        if (flags.contains(AttributeAccess.Flag.RESTART_ALL_SERVICES)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else         if (flags.contains(AttributeAccess.Flag.RESTART_RESOURCE_SERVICES)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else         if (flags.contains(AttributeAccess.Flag.RESTART_JVM)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
      }
    }
  }
  if (accessControl != AccessControl.NONE) {
    accessControlContext.checkResourceAccess(context,registry,nodeDescription,operations);
  }
  if (recursive) {
    for (    final PathElement element : registry.getChildAddresses(PathAddress.EMPTY_ADDRESS)) {
      PathAddress relativeAddr=PathAddress.pathAddress(element);
      ImmutableManagementResourceRegistration childReg=registry.getSubModel(relativeAddr);
      boolean readChild=true;
      if (childReg.isRemote() && !proxies) {
        readChild=false;
      }
      if (childReg.isAlias() && !aliases) {
        readChild=false;
      }
      if (readChild) {
        final ModelNode rrOp=operation.clone();
        final PathAddress address;
        try {
          address=PathAddress.pathAddress(opAddr,element);
        }
 catch (        Exception e) {
          continue;
        }
        rrOp.get(OP_ADDR).set(address.toModelNode());
        GlobalOperationHandlers.setNextRecursive(context,operation,rrOp);
        final ModelNode rrRsp=new ModelNode();
        childResources.put(element,rrRsp);
        final OperationStepHandler handler=getRecursiveStepHandler(childReg,opName,accessControlContext,address);
        context.addStep(rrRsp,rrOp,handler,OperationContext.Stage.MODEL,true);
        nodeDescription.get(CHILDREN,element.getKey(),MODEL_DESCRIPTION,element.getValue());
      }
 else       if (childReg.isAlias() && !aliases) {
        if (isSquatterResource(registry,element.getKey())) {
          if (!nodeDescription.get(CHILDREN,element.getKey()).isDefined()) {
            nodeDescription.get(CHILDREN).get(element.getKey()).remove(element.getValue());
          }
        }
      }
    }
  }
  context.completeStep(new OperationContext.RollbackHandler(){
    @Override public void handleRollback(    OperationContext context,    ModelNode operation){
      if (!context.hasFailureDescription()) {
        for (        final ModelNode value : childResources.values()) {
          if (value.hasDefined(FAILURE_DESCRIPTION)) {
            context.getFailureDescription().set(value.get(FAILURE_DESCRIPTION));
            break;
          }
        }
      }
    }
  }
);
}","private void doExecuteInternal(final OperationContext context,final ModelNode operation,final ReadResourceDescriptionAccessControlContext accessControlContext) throws OperationFailedException {
  for (  AttributeDefinition def : DEFINITION.getParameters()) {
    def.validateOperation(operation);
  }
  final String opName=operation.require(OP).asString();
  PathAddress opAddr=PathAddress.pathAddress(operation.get(OP_ADDR));
  final boolean recursive=GlobalOperationHandlers.getRecursive(context,operation);
  final boolean proxies=PROXIES.resolveModelAttribute(context,operation).asBoolean();
  final boolean ops=OPERATIONS.resolveModelAttribute(context,operation).asBoolean();
  final boolean nots=NOTIFICATIONS.resolveModelAttribute(context,operation).asBoolean();
  final boolean aliases=INCLUDE_ALIASES.resolveModelAttribute(context,operation).asBoolean();
  final boolean inherited=INHERITED.resolveModelAttribute(context,operation).asBoolean();
  final AccessControl accessControl=AccessControl.forName(ACCESS_CONTROL.resolveModelAttribute(context,operation).asString());
  final ImmutableManagementResourceRegistration registry=getResourceRegistrationCheckForAlias(context,opAddr,accessControlContext);
  final DescriptionProvider descriptionProvider=registry.getModelDescription(PathAddress.EMPTY_ADDRESS);
  final Locale locale=GlobalOperationHandlers.getLocale(context,operation);
  final ModelNode nodeDescription=descriptionProvider.getModelDescription(locale);
  final Map<String,ModelNode> operations=ops ? new HashMap<String,ModelNode>() : null;
  final Map<String,ModelNode> notifications=nots ? new HashMap<String,ModelNode>() : null;
  final Map<PathElement,ModelNode> childResources=recursive ? new HashMap<PathElement,ModelNode>() : Collections.<PathElement,ModelNode>emptyMap();
  if (accessControl != AccessControl.NONE) {
    accessControlContext.initLocalResourceAddresses(context,opAddr);
  }
  final ReadResourceDescriptionAssemblyHandler assemblyHandler=new ReadResourceDescriptionAssemblyHandler(nodeDescription,operations,notifications,childResources,accessControlContext,accessControl);
  context.addStep(assemblyHandler,OperationContext.Stage.MODEL,true);
  if (!aliases && nodeDescription.hasDefined(CHILDREN)) {
    for (    Property child : nodeDescription.get(CHILDREN).asPropertyList()) {
      String key=child.getName();
      if (isGlobalAlias(registry,child)) {
        nodeDescription.get(CHILDREN).remove(key);
      }
    }
  }
  if (ops) {
    for (    final Map.Entry<String,OperationEntry> entry : registry.getOperationDescriptions(PathAddress.EMPTY_ADDRESS,inherited).entrySet()) {
      if (entry.getValue().getType() == OperationEntry.EntryType.PUBLIC) {
        if (context.getProcessType() != ProcessType.DOMAIN_SERVER || entry.getValue().getFlags().contains(OperationEntry.Flag.RUNTIME_ONLY)) {
          final DescriptionProvider provider=entry.getValue().getDescriptionProvider();
          operations.put(entry.getKey(),provider.getModelDescription(locale));
        }
      }
    }
  }
  if (nots) {
    for (    final Map.Entry<String,NotificationEntry> entry : registry.getNotificationDescriptions(PathAddress.EMPTY_ADDRESS,inherited).entrySet()) {
      final DescriptionProvider provider=entry.getValue().getDescriptionProvider();
      notifications.put(entry.getKey(),provider.getModelDescription(locale));
    }
  }
  if (nodeDescription.hasDefined(ATTRIBUTES)) {
    for (    final String attr : nodeDescription.require(ATTRIBUTES).keys()) {
      final AttributeAccess access=registry.getAttributeAccess(PathAddress.EMPTY_ADDRESS,attr);
      final AttributeAccess.AccessType accessType=access == null ? AttributeAccess.AccessType.READ_ONLY : access.getAccessType();
      final AttributeAccess.Storage storage=access == null ? AttributeAccess.Storage.CONFIGURATION : access.getStorageType();
      final ModelNode attrNode=nodeDescription.get(ATTRIBUTES,attr);
      String displayedAccessType=context.getProcessType() == ProcessType.DOMAIN_SERVER && storage == AttributeAccess.Storage.CONFIGURATION ? AttributeAccess.AccessType.READ_ONLY.toString() : accessType.toString();
      attrNode.get(ACCESS_TYPE).set(displayedAccessType);
      attrNode.get(STORAGE).set(storage.toString());
      if (accessType == AttributeAccess.AccessType.READ_WRITE) {
        Set<AttributeAccess.Flag> flags=access.getFlags();
        if (flags.contains(AttributeAccess.Flag.RESTART_ALL_SERVICES)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else         if (flags.contains(AttributeAccess.Flag.RESTART_RESOURCE_SERVICES)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else         if (flags.contains(AttributeAccess.Flag.RESTART_JVM)) {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
 else {
          attrNode.get(RESTART_REQUIRED).set(""String_Node_Str"");
        }
      }
    }
  }
  if (accessControl != AccessControl.NONE) {
    accessControlContext.checkResourceAccess(context,registry,nodeDescription,operations);
  }
  if (recursive) {
    for (    final PathElement element : registry.getChildAddresses(PathAddress.EMPTY_ADDRESS)) {
      PathAddress relativeAddr=PathAddress.pathAddress(element);
      ImmutableManagementResourceRegistration childReg=registry.getSubModel(relativeAddr);
      boolean readChild=true;
      if (childReg.isRemote() && !proxies) {
        readChild=false;
      }
      if (childReg.isAlias() && !aliases) {
        readChild=false;
      }
      if (readChild) {
        final ModelNode rrOp=operation.clone();
        final PathAddress address;
        try {
          address=PathAddress.pathAddress(opAddr,element);
        }
 catch (        Exception e) {
          continue;
        }
        rrOp.get(OP_ADDR).set(address.toModelNode());
        GlobalOperationHandlers.setNextRecursive(context,operation,rrOp);
        final ModelNode rrRsp=new ModelNode();
        childResources.put(element,rrRsp);
        final OperationStepHandler handler=getRecursiveStepHandler(childReg,opName,accessControlContext,address);
        context.addStep(rrRsp,rrOp,handler,OperationContext.Stage.MODEL,true);
        nodeDescription.get(CHILDREN,element.getKey(),MODEL_DESCRIPTION,element.getValue());
      }
 else       if (childReg.isAlias() && !aliases) {
        if (isSquatterResource(registry,element.getKey())) {
          if (nodeDescription.get(CHILDREN).hasDefined(element.getKey())) {
            nodeDescription.get(CHILDREN).get(element.getKey()).remove(element.getValue());
          }
        }
      }
    }
  }
  context.completeStep(new OperationContext.RollbackHandler(){
    @Override public void handleRollback(    OperationContext context,    ModelNode operation){
      if (!context.hasFailureDescription()) {
        for (        final ModelNode value : childResources.values()) {
          if (value.hasDefined(FAILURE_DESCRIPTION)) {
            context.getFailureDescription().set(value.get(FAILURE_DESCRIPTION));
            break;
          }
        }
      }
    }
  }
);
}",0.998095238095238
167748,"@Override public void validateParameter(String parameterName,ModelNode value) throws OperationFailedException {
  super.validateParameter(parameterName,value);
  if (value.isDefined()) {
    final String suffix=value.asString();
    try {
      if (denySeconds && (suffix.contains(""String_Node_Str"") || suffix.contains(""String_Node_Str""))) {
        throw createOperationFailure(LoggingLogger.ROOT_LOGGER.invalidSuffix(suffix));
      }
      new SimpleDateFormat(suffix);
    }
 catch (    IllegalArgumentException e) {
      throw createOperationFailure(LoggingLogger.ROOT_LOGGER.invalidSuffix(suffix));
    }
  }
}","@Override public void validateParameter(String parameterName,ModelNode value) throws OperationFailedException {
  super.validateParameter(parameterName,value);
  if (value.isDefined()) {
    final String suffix=value.asString();
    try {
      if (denySeconds && (suffix.contains(""String_Node_Str"") || suffix.contains(""String_Node_Str""))) {
        throw createOperationFailure(LoggingLogger.ROOT_LOGGER.suffixContainsMillis(suffix));
      }
      new SimpleDateFormat(suffix);
    }
 catch (    IllegalArgumentException e) {
      throw createOperationFailure(LoggingLogger.ROOT_LOGGER.invalidSuffix(suffix));
    }
  }
}",0.9734085414987912
167749,"@Override public LdapEntry[] search(LdapConnectionHandler originalConnectionHandler,LdapEntry entry) throws IOException, NamingException {
  Set<LdapEntry> foundEntries=new HashSet<LdapEntry>();
  LdapConnectionHandler connectionHandler=originalConnectionHandler;
  URI originalReferralAddress=null;
  if ((originalReferralAddress=entry.getReferralUri()) != null) {
    connectionHandler=connectionHandler.findForReferral(originalReferralAddress);
    if (connectionHandler == null) {
      SECURITY_LOGGER.tracef(""String_Node_Str"",originalReferralAddress);
      return foundEntries.toArray(new LdapEntry[foundEntries.size()]);
    }
  }
  DirContext dirContext=connectionHandler.getConnection();
  Attributes groups=dirContext.getAttributes(entry.getDistinguishedName(),new String[]{groupAttribute});
  Attribute groupRef=groups.get(groupAttribute);
  if (preferOriginalConnection) {
    connectionHandler=originalConnectionHandler;
    originalReferralAddress=null;
  }
  if (groupRef != null && groupRef.size() > 0) {
    NamingEnumeration<String> groupRefValues=(NamingEnumeration<String>)groupRef.getAll();
    while (groupRefValues.hasMore()) {
      String distingushedName=groupRefValues.next().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      SECURITY_LOGGER.tracef(""String_Node_Str"",distingushedName);
      LdapConnectionHandler groupLoadHandler=connectionHandler;
      URI groupReferralAddress=originalReferralAddress;
      boolean retry=false;
      String simpleName=null;
      do {
        retry=false;
        try {
          dirContext=groupLoadHandler.getConnection();
          Attributes groupNameAttrs=dirContext.getAttributes(distingushedName,groupNameAttribute != null ? new String[]{groupNameAttribute} : new String[]{});
          if (groupNameAttribute != null) {
            Attribute groupNameAttr=groupNameAttrs.get(groupNameAttribute);
            simpleName=(String)groupNameAttr.get();
            SECURITY_LOGGER.tracef(""String_Node_Str"",simpleName,distingushedName);
          }
 else {
            SECURITY_LOGGER.trace(""String_Node_Str"");
          }
          foundEntries.add(new LdapEntry(simpleName,distingushedName,groupReferralAddress));
        }
 catch (        LdapReferralException e) {
          Object info=e.getReferralInfo();
          try {
            URI fullUri=new URI(info.toString());
            groupReferralAddress=new URI(fullUri.getScheme(),null,fullUri.getHost(),fullUri.getPort(),null,null,null);
            distingushedName=fullUri.getPath().substring(1);
            SECURITY_LOGGER.tracef(""String_Node_Str"",groupReferralAddress.toString(),distingushedName);
            groupLoadHandler=groupLoadHandler.findForReferral(groupReferralAddress);
            if (groupLoadHandler == null) {
              SECURITY_LOGGER.tracef(""String_Node_Str"",fullUri);
            }
            retry=true;
          }
 catch (          URISyntaxException ue) {
            SECURITY_LOGGER.tracef(""String_Node_Str"",info);
          }
        }
      }
 while (retry);
    }
  }
 else {
    SECURITY_LOGGER.tracef(""String_Node_Str"",entry);
  }
  return foundEntries.toArray(new LdapEntry[foundEntries.size()]);
}","@Override public LdapEntry[] search(LdapConnectionHandler originalConnectionHandler,LdapEntry entry) throws IOException, NamingException {
  Set<LdapEntry> foundEntries=new HashSet<LdapEntry>();
  LdapConnectionHandler connectionHandler=originalConnectionHandler;
  URI originalReferralAddress=null;
  if ((originalReferralAddress=entry.getReferralUri()) != null) {
    connectionHandler=connectionHandler.findForReferral(originalReferralAddress);
    if (connectionHandler == null) {
      SECURITY_LOGGER.tracef(""String_Node_Str"",originalReferralAddress);
      return foundEntries.toArray(new LdapEntry[foundEntries.size()]);
    }
  }
  DirContext dirContext=connectionHandler.getConnection();
  Attributes groups=dirContext.getAttributes(entry.getDistinguishedName(),new String[]{groupAttribute});
  Attribute groupRef=groups.get(groupAttribute);
  if (preferOriginalConnection) {
    connectionHandler=originalConnectionHandler;
    originalReferralAddress=null;
  }
  if (groupRef != null && groupRef.size() > 0) {
    NamingEnumeration<String> groupRefValues=(NamingEnumeration<String>)groupRef.getAll();
    while (groupRefValues.hasMore()) {
      String distingushedName=groupRefValues.next().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      SECURITY_LOGGER.tracef(""String_Node_Str"",distingushedName);
      LdapConnectionHandler groupLoadHandler=connectionHandler;
      URI groupReferralAddress=originalReferralAddress;
      boolean retry=false;
      String simpleName=null;
      do {
        retry=false;
        try {
          dirContext=groupLoadHandler.getConnection();
          Attributes groupNameAttrs=dirContext.getAttributes(distingushedName,groupNameAttribute != null ? new String[]{groupNameAttribute} : new String[]{});
          if (groupNameAttribute != null) {
            Attribute groupNameAttr=groupNameAttrs.get(groupNameAttribute);
            simpleName=(String)groupNameAttr.get();
            SECURITY_LOGGER.tracef(""String_Node_Str"",simpleName,distingushedName);
          }
 else {
            SECURITY_LOGGER.trace(""String_Node_Str"");
          }
          foundEntries.add(new LdapEntry(simpleName,distingushedName,groupReferralAddress));
        }
 catch (        NameNotFoundException e) {
          SECURITY_LOGGER.tracef(""String_Node_Str"",e.getMessage());
          if (!this.IGNORE_NONEXISTENT_ROLE)           throw e;
        }
catch (        LdapReferralException e) {
          Object info=e.getReferralInfo();
          try {
            URI fullUri=new URI(info.toString());
            groupReferralAddress=new URI(fullUri.getScheme(),null,fullUri.getHost(),fullUri.getPort(),null,null,null);
            distingushedName=fullUri.getPath().substring(1);
            SECURITY_LOGGER.tracef(""String_Node_Str"",groupReferralAddress.toString(),distingushedName);
            groupLoadHandler=groupLoadHandler.findForReferral(groupReferralAddress);
            if (groupLoadHandler == null) {
              SECURITY_LOGGER.tracef(""String_Node_Str"",fullUri);
            }
            retry=true;
          }
 catch (          URISyntaxException ue) {
            SECURITY_LOGGER.tracef(""String_Node_Str"",info);
          }
        }
      }
 while (retry);
    }
  }
 else {
    SECURITY_LOGGER.tracef(""String_Node_Str"",entry);
  }
  return foundEntries.toArray(new LdapEntry[foundEntries.size()]);
}",0.794615849969752
167750,"/** 
 * Main entry point.  Reads and executes the command object from standard input.
 * @param args ignored
 */
public static void main(String[] args){
  final InputStream initialInput=new Base64InputStream(System.in);
  final PrintStream initialError=System.err;
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final byte[] authKey=new byte[16];
  try {
    StreamUtils.readFully(initialInput,authKey);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(ExitCodes.FAILED);
    throw new IllegalStateException();
  }
  final MarshallerFactory factory=Marshalling.getMarshallerFactory(""String_Node_Str"",DomainServerMain.class.getClassLoader());
  final Unmarshaller unmarshaller;
  final ByteInput byteInput;
  final AsyncFuture<ServiceContainer> containerFuture;
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassResolver(new SimpleClassResolver(DomainServerMain.class.getClassLoader()));
    unmarshaller=factory.createUnmarshaller(configuration);
    byteInput=Marshalling.createByteInput(initialInput);
    unmarshaller.start(byteInput);
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    containerFuture=task.run(Arrays.<ServiceActivator>asList(new ServiceActivator(){
      @Override public void activate(      final ServiceActivatorContext serviceActivatorContext){
      }
    }
));
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(ExitCodes.FAILED);
    throw new IllegalStateException();
  }
 finally {
  }
  for (; ; ) {
    try {
      final String hostName=StreamUtils.readUTFZBytes(initialInput);
      final int port=StreamUtils.readInt(initialInput);
      final boolean managementSubsystemEndpoint=StreamUtils.readBoolean(initialInput);
      final byte[] asAuthKey=new byte[16];
      StreamUtils.readFully(initialInput,asAuthKey);
      final ServiceContainer container=containerFuture.get();
      final HostControllerClient client=getRequiredService(container,HostControllerConnectionService.SERVICE_NAME,HostControllerClient.class);
      client.reconnect(hostName,port,asAuthKey,managementSubsystemEndpoint);
    }
 catch (    InterruptedIOException e) {
      Thread.interrupted();
    }
catch (    EOFException e) {
      break;
    }
catch (    Exception e) {
      e.printStackTrace();
      break;
    }
  }
  final ServiceContainer container;
  try {
    container=containerFuture.get();
    final GracefulShutdownService client=getRequiredService(container,GracefulShutdownService.SERVICE_NAME,GracefulShutdownService.class);
    client.awaitSuspend();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.exit(ExitCodes.NORMAL);
  throw new IllegalStateException();
}","/** 
 * Main entry point.  Reads and executes the command object from standard input.
 * @param args ignored
 */
public static void main(String[] args){
  final InputStream initialInput=new Base64InputStream(System.in);
  final PrintStream initialError=System.err;
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final byte[] authKey=new byte[16];
  try {
    StreamUtils.readFully(initialInput,authKey);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(ExitCodes.FAILED);
    throw new IllegalStateException();
  }
  final MarshallerFactory factory=Marshalling.getMarshallerFactory(""String_Node_Str"",DomainServerMain.class.getClassLoader());
  final Unmarshaller unmarshaller;
  final ByteInput byteInput;
  final AsyncFuture<ServiceContainer> containerFuture;
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassResolver(new SimpleClassResolver(DomainServerMain.class.getClassLoader()));
    unmarshaller=factory.createUnmarshaller(configuration);
    byteInput=Marshalling.createByteInput(initialInput);
    unmarshaller.start(byteInput);
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    containerFuture=task.run(Arrays.<ServiceActivator>asList(new ServiceActivator(){
      @Override public void activate(      final ServiceActivatorContext serviceActivatorContext){
      }
    }
));
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(ExitCodes.FAILED);
    throw new IllegalStateException();
  }
 finally {
  }
  for (; ; ) {
    try {
      final String hostName=StreamUtils.readUTFZBytes(initialInput);
      final int port=StreamUtils.readInt(initialInput);
      final boolean managementSubsystemEndpoint=StreamUtils.readBoolean(initialInput);
      final byte[] asAuthKey=new byte[16];
      StreamUtils.readFully(initialInput,asAuthKey);
      final ServiceContainer container=containerFuture.get();
      final HostControllerClient client=getRequiredService(container,HostControllerConnectionService.SERVICE_NAME,HostControllerClient.class);
      client.reconnect(hostName,port,asAuthKey,managementSubsystemEndpoint);
    }
 catch (    InterruptedIOException e) {
      Thread.interrupted();
    }
catch (    EOFException e) {
      break;
    }
catch (    Exception e) {
      e.printStackTrace();
      break;
    }
  }
  final ServiceContainer container;
  try {
    container=containerFuture.get();
    ServiceController<?> controller=container.getService(GracefulShutdownService.SERVICE_NAME);
    if (controller != null) {
      ((GracefulShutdownService)controller.getValue()).awaitSuspend();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  System.exit(ExitCodes.NORMAL);
  throw new IllegalStateException();
}",0.9741869622283796
167751,"@Override public void requestsComplete(){
  if (count.decrementAndGet() == 0) {
    delegate.requestsComplete();
  }
}","@Override public void requestsComplete(){
  if (count.decrementAndGet() == 0) {
    if (delegate != null) {
      delegate.requestsComplete();
    }
  }
}",0.8676470588235294
167752,"@Override public void unPaused(){
  if (canceled.compareAndSet(false,true)) {
    delegate.unPaused();
  }
}","@Override public void unPaused(){
  if (canceled.compareAndSet(false,true)) {
    if (delegate != null) {
      delegate.unPaused();
    }
  }
}",0.8571428571428571
167753,"/** 
 * resumed a given deployment
 * @param deployment The deployment to resume
 */
public synchronized void resumeDeployment(final String deployment){
  final List<ControlPoint> eps=new ArrayList<ControlPoint>();
  for (  ControlPoint ep : entryPoints.values()) {
    if (ep.getDeployment().equals(deployment)) {
      ep.resume();
    }
  }
}","/** 
 * resumed a given deployment
 * @param deployment The deployment to resume
 */
public synchronized void resumeDeployment(final String deployment){
  for (  ControlPoint ep : entryPoints.values()) {
    if (ep.getDeployment().equals(deployment)) {
      ep.resume();
    }
  }
}",0.5987261146496815
167754,"/** 
 * Pauses a given deployment
 * @param deployment The deployment to pause
 * @param listener The listener that will be notified when the pause is complete
 */
public synchronized void pauseDeployment(final String deployment,ServerActivityListener listener){
  final List<ControlPoint> eps=new ArrayList<ControlPoint>();
  for (  ControlPoint ep : entryPoints.values()) {
    if (ep.getDeployment().equals(deployment)) {
      eps.add(ep);
    }
  }
  CountingRequestCountListener realListener=new CountingRequestCountListener(eps.size(),listener);
  for (  ControlPoint ep : eps) {
    ep.pause(realListener);
  }
}","/** 
 * Pauses a given deployment
 * @param deployment The deployment to pause
 * @param listener The listener that will be notified when the pause is complete
 */
public synchronized void pauseDeployment(final String deployment,ServerActivityListener listener){
  final List<ControlPoint> eps=new ArrayList<ControlPoint>();
  for (  ControlPoint ep : entryPoints.values()) {
    if (ep.getDeployment().equals(deployment)) {
      if (!ep.isPaused()) {
        eps.add(ep);
      }
    }
  }
  CountingRequestCountListener realListener=new CountingRequestCountListener(eps.size(),listener);
  for (  ControlPoint ep : eps) {
    ep.pause(realListener);
  }
}",0.9655712050078248
167755,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  EntryPointIdentifier that=(EntryPointIdentifier)o;
  if (deployment != null ? !deployment.equals(that.deployment) : that.deployment != null)   return false;
  if (name != null ? !name.equals(that.name) : that.name != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  ControlPointIdentifier that=(ControlPointIdentifier)o;
  if (deployment != null ? !deployment.equals(that.deployment) : that.deployment != null)   return false;
  if (name != null ? !name.equals(that.name) : that.name != null)   return false;
  return true;
}",0.5843828715365239
167756,"@Override public void start(StartContext context) throws StartException {
  final SuspendResumeHandler suspendResumeHandler=new SuspendResumeHandler();
  final ControlPoint controlPoint=requestControllerInjectedValue.getValue().getEntryPoint(""String_Node_Str"",""String_Node_Str"");
  HttpHandler shutdown=new HttpHandler(){
    @Override public void handleRequest(    HttpServerExchange exchange) throws Exception {
      if (exchange.isInIoThread()) {
        exchange.dispatch(this);
        return;
      }
      final int count=COUNT.incrementAndGet();
      if (exchange.getQueryParameters().containsKey(SKIP_GRACEFUL)) {
        System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
        suspendResumeHandler.handleRequest(exchange);
        return;
      }
      System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
      RunResult result=controlPoint.beginRequest();
      if (result == RunResult.REJECTED) {
        System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
        exchange.setResponseCode(503);
        return;
      }
      exchange.addExchangeCompleteListener(new ExchangeCompletionListener(){
        @Override public void exchangeEvent(        HttpServerExchange exchange,        NextListener nextListener){
          System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
          controlPoint.requestComplete();
          nextListener.proceed();
        }
      }
);
      suspendResumeHandler.handleRequest(exchange);
    }
  }
;
  undertow=Undertow.builder().addHttpListener(8080 + socketBindingManagerInjectedValue.getValue().getPortOffset(),""String_Node_Str"").setHandler(shutdown).build();
  undertow.start();
}","@Override public void start(StartContext context) throws StartException {
  final SuspendResumeHandler suspendResumeHandler=new SuspendResumeHandler();
  final ControlPoint controlPoint=requestControllerInjectedValue.getValue().getControlPoint(""String_Node_Str"",""String_Node_Str"");
  HttpHandler shutdown=new HttpHandler(){
    @Override public void handleRequest(    HttpServerExchange exchange) throws Exception {
      if (exchange.isInIoThread()) {
        exchange.dispatch(this);
        return;
      }
      final int count=COUNT.incrementAndGet();
      if (exchange.getQueryParameters().containsKey(SKIP_GRACEFUL)) {
        System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
        suspendResumeHandler.handleRequest(exchange);
        return;
      }
      System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
      RunResult result=controlPoint.beginRequest();
      if (result == RunResult.REJECTED) {
        System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
        exchange.setResponseCode(503);
        return;
      }
      exchange.addExchangeCompleteListener(new ExchangeCompletionListener(){
        @Override public void exchangeEvent(        HttpServerExchange exchange,        NextListener nextListener){
          System.out.println(""String_Node_Str"" + count + ""String_Node_Str""+ exchange);
          controlPoint.requestComplete();
          nextListener.proceed();
        }
      }
);
      suspendResumeHandler.handleRequest(exchange);
    }
  }
;
  undertow=Undertow.builder().addHttpListener(8080 + socketBindingManagerInjectedValue.getValue().getPortOffset(),""String_Node_Str"").setHandler(shutdown).build();
  undertow.start();
}",0.9965497412305924
167757,"@Override public void transformResource(final ResourceTransformationContext context,final PathAddress address,final Resource resource) throws OperationFailedException {
  if (resource.isProxy() || resource.isRuntime()) {
    return;
  }
  ResourceTransformationContext current=context;
  Iterator<Map.Entry<ModelVersionPair,ChainedPlaceholderResolver>> it=placeholderResolvers.entrySet().iterator();
  if (it.hasNext()) {
    ChainedPlaceholderResolver resolver=it.next().getValue();
    current=ChainedTransformationTools.initialiseChain(current,resolver);
    resolver.getDescription().getResourceTransformer().transformResource(current,address,resource);
  }
  while (it.hasNext()) {
    ChainedPlaceholderResolver resolver=it.next().getValue();
    current=ChainedTransformationTools.nextInChain(current,resolver);
    try {
      Resource currentResource=current.readResourceFromRoot(address);
      resolver.getDescription().getResourceTransformer().transformResource(current,address,currentResource);
    }
 catch (    Resource.NoSuchResourceException e) {
      continue;
    }
  }
  Resource transformed=current.getTransformedRoot();
  Resource originalTransformed=context.getTransformedRoot();
  copy(transformed,originalTransformed,address);
}","@Override public void transformResource(final ResourceTransformationContext context,final PathAddress address,final Resource resource) throws OperationFailedException {
  if (resource.isProxy() || resource.isRuntime()) {
    return;
  }
  ResourceTransformationContext current=context;
  Iterator<Map.Entry<ModelVersionPair,ChainedPlaceholderResolver>> it=placeholderResolvers.entrySet().iterator();
  if (it.hasNext()) {
    ChainedPlaceholderResolver resolver=it.next().getValue();
    current=ChainedTransformationTools.initialiseChain(current,resolver);
    resolver.getDescription().getResourceTransformer().transformResource(current,address,resource);
  }
  while (it.hasNext()) {
    ChainedPlaceholderResolver resolver=it.next().getValue();
    current=ChainedTransformationTools.nextInChainResource(current,resolver);
    try {
      Resource currentResource=current.readResourceFromRoot(address);
      resolver.getDescription().getResourceTransformer().transformResource(current,address,currentResource);
    }
 catch (    Resource.NoSuchResourceException e) {
      continue;
    }
  }
  Resource transformed=current.getTransformedRoot();
  Resource originalTransformed=context.getTransformedRoot();
  copy(transformed,originalTransformed,address);
}",0.9968203497615262
167758,"public synchronized ManagedQueueExecutorService getValue() throws IllegalStateException {
  final ManagedQueueExecutorService value=this.executor;
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.boundedQueueThreadPoolExecutorUninitialized();
  }
  return value;
}","public ManagedQueueExecutorService getValue() throws IllegalStateException {
  final ManagedQueueExecutorService value;
synchronized (this) {
    value=this.executor;
  }
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.boundedQueueThreadPoolExecutorUninitialized();
  }
  return value;
}",0.6083916083916084
167759,"public synchronized void stop(final StopContext context){
  final ManagedQueueExecutorService executor=getValue();
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(new EventListener<StopContext>(){
    public void handleEvent(    final StopContext stopContext){
      stopContext.complete();
    }
  }
,context);
  this.executor=null;
}","public void stop(final StopContext context){
  final ManagedQueueExecutorService executor;
synchronized (this) {
    executor=this.executor;
    this.executor=null;
  }
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(StopContextEventListener.getInstance(),context);
}",0.5659824046920822
167760,"public synchronized ManagedQueuelessExecutorService getValue() throws IllegalStateException {
  final ManagedQueuelessExecutorService value=this.executor;
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.queuelessThreadPoolExecutorUninitialized();
  }
  return value;
}","public ManagedQueuelessExecutorService getValue() throws IllegalStateException {
  final ManagedQueuelessExecutorService value;
synchronized (this) {
    value=this.executor;
  }
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.queuelessThreadPoolExecutorUninitialized();
  }
  return value;
}",0.9140893470790378
167761,"public synchronized void stop(final StopContext context){
  final ManagedQueuelessExecutorService executor=getValue();
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(new EventListener<StopContext>(){
    public void handleEvent(    final StopContext stopContext){
      stopContext.complete();
    }
  }
,context);
  this.executor=null;
}","public void stop(final StopContext context){
  final ManagedQueuelessExecutorService executor;
synchronized (this) {
    executor=this.executor;
    this.executor=null;
  }
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(StopContextEventListener.getInstance(),context);
}",0.5710144927536231
167762,"public synchronized void start(final StartContext context) throws StartException {
  ScheduledThreadPoolExecutor scheduledExecutor=new ExecutorImpl(0,threadFactoryValue.getValue());
  scheduledExecutor.setCorePoolSize(maxThreads);
  if (keepAlive != null)   scheduledExecutor.setKeepAliveTime(keepAlive.getDuration(),keepAlive.getUnit());
  executor=new ManagedScheduledExecutorService(scheduledExecutor);
}","public void start(final StartContext context) throws StartException {
  ScheduledThreadPoolExecutor scheduledExecutor=new ExecutorImpl(0,threadFactoryValue.getValue());
  scheduledExecutor.setCorePoolSize(maxThreads);
  if (keepAlive != null)   scheduledExecutor.setKeepAliveTime(keepAlive.getDuration(),keepAlive.getUnit());
  final ManagedScheduledExecutorService executorService=new ManagedScheduledExecutorService(scheduledExecutor);
synchronized (this) {
    executor=executorService;
  }
}",0.8558758314855875
167763,"public synchronized ManagedScheduledExecutorService getValue() throws IllegalStateException {
  final ManagedScheduledExecutorService value=this.executor;
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.scheduledThreadPoolExecutorUninitialized();
  }
  return value;
}","public ManagedScheduledExecutorService getValue() throws IllegalStateException {
  final ManagedScheduledExecutorService value;
synchronized (this) {
    value=this.executor;
  }
  if (value == null) {
    throw ThreadsLogger.ROOT_LOGGER.scheduledThreadPoolExecutorUninitialized();
  }
  return value;
}",0.9140893470790378
167764,"public synchronized void stop(final StopContext context){
  final ManagedScheduledExecutorService executor=getValue();
  this.context=context;
  context.asynchronous();
  executor.internalShutdown();
  this.executor=null;
}","public void stop(final StopContext context){
  final ManagedScheduledExecutorService executor;
synchronized (this) {
    executor=this.executor;
    this.context=context;
    this.executor=null;
  }
  context.asynchronous();
  executor.internalShutdown();
}",0.7333333333333333
167765,"protected void terminated(){
synchronized (ScheduledThreadPoolService.this) {
    super.terminated();
    context.complete();
    context=null;
  }
}","protected void terminated(){
  super.terminated();
  StopContext context;
synchronized (ScheduledThreadPoolService.this) {
    context=ScheduledThreadPoolService.this.context;
    ScheduledThreadPoolService.this.context=null;
  }
  context.complete();
}",0.417910447761194
167766,"public synchronized void stop(final StopContext context){
  final ManagedJBossThreadPoolExecutorService executor=getValue();
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(new EventListener<StopContext>(){
    public void handleEvent(    final StopContext stopContext){
      stopContext.complete();
    }
  }
,context);
  this.executor=null;
}","public void stop(final StopContext context){
  final ManagedJBossThreadPoolExecutorService executor;
synchronized (this) {
    executor=this.executor;
    this.executor=null;
  }
  context.asynchronous();
  executor.internalShutdown();
  executor.addShutdownListener(StopContextEventListener.getInstance(),context);
}",0.5783475783475783
167767,"static SyslogAuditLogHandler createHandler(final PathManagerService pathManager,final OperationContext context,final ModelNode operation,final EnvironmentNameReader environmentReader) throws OperationFailedException {
  final PathAddress pathAddress=getAffectedHandlerAddress(operation);
  final String name=Util.getNameFromAddress(pathAddress);
  final Resource handlerResource=context.readResourceFromRoot(pathAddress);
  final ModelNode handlerModel=handlerResource.getModel();
  final String formatterName=FORMATTER.resolveModelAttribute(context,handlerModel).asString();
  final int maxFailureCount=MAX_FAILURE_COUNT.resolveModelAttribute(context,handlerModel).asInt();
  final SyslogAuditLogHandler handler=new SyslogAuditLogHandler(name,formatterName,maxFailureCount,pathManager);
  handler.setFacility(SyslogAuditLogHandler.Facility.valueOf(FACILITY.resolveModelAttribute(context,handlerModel).asString()));
  if (environmentReader.isServer()) {
    handler.setHostName(environmentReader.getHostName() != null ? environmentReader.getHostName() + ""String_Node_Str"" + environmentReader.getServerName() : environmentReader.getServerName());
  }
 else {
    handler.setHostName(environmentReader.getHostName());
  }
  handler.setAppName(resolveAppName(context,handlerModel.get(APP_NAME.getName()),environmentReader));
  if (environmentReader.getProductName() != null) {
    handler.setAppName(environmentReader.getProductName());
  }
  handler.setSyslogType(SyslogHandler.SyslogType.valueOf(SYSLOG_FORMAT.resolveModelAttribute(context,handlerModel).asString()));
  handler.setTruncate(TRUNCATE.resolveModelAttribute(context,handlerModel).asBoolean());
  if (handlerModel.hasDefined(MAX_LENGTH.getName())) {
    handler.setMaxLength(MAX_LENGTH.resolveModelAttribute(context,handlerModel).asInt());
  }
  final Set<ResourceEntry> protocols=handlerResource.getChildren(PROTOCOL);
  if (protocols.size() == 0) {
    throw DomainManagementMessages.MESSAGES.noSyslogProtocol();
  }
  final ResourceEntry protocol=protocols.iterator().next();
  final SyslogAuditLogHandler.Transport transport=SyslogAuditLogHandler.Transport.valueOf(protocol.getPathElement().getValue().toUpperCase(Locale.ENGLISH));
  handler.setTransport(transport);
  try {
    handler.setSyslogServerAddress(InetAddress.getByName(SyslogAuditLogProtocolResourceDefinition.HOST.resolveModelAttribute(context,protocol.getModel()).asString()));
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(e);
  }
  handler.setPort(SyslogAuditLogProtocolResourceDefinition.PORT.resolveModelAttribute(context,protocol.getModel()).asInt());
  if (transport != SyslogAuditLogHandler.Transport.UDP) {
    handler.setMessageTransfer(SyslogAuditLogHandler.MessageTransfer.valueOf(SyslogAuditLogProtocolResourceDefinition.Tcp.MESSAGE_TRANSFER.resolveModelAttribute(context,protocol.getModel()).asString()));
  }
  if (transport == SyslogAuditLogHandler.Transport.TLS) {
    final Set<ResourceEntry> tlsStores=protocol.getChildren(AUTHENTICATION);
    for (    ResourceEntry storeEntry : tlsStores) {
      final ModelNode storeModel=storeEntry.getModel();
      String type=storeEntry.getPathElement().getValue();
      if (type.equals(CLIENT_CERT_STORE)) {
        handler.setTlsClientCertStorePassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD,storeModel));
        handler.setTlsClientCertStorePath(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.resolveModelAttribute(context,storeModel).asString());
        handler.setTlsClientCertStoreRelativeTo(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_RELATIVE_TO,storeModel));
        handler.setTlsClientCertStoreKeyPassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEY_PASSWORD,storeModel));
      }
 else       if (type.equals(TRUSTSTORE)) {
        handler.setTlsTruststorePassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD,storeModel));
        handler.setTlsTrustStorePath(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.resolveModelAttribute(context,storeModel).asString());
        handler.setTlsTrustStoreRelativeTo(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_RELATIVE_TO,storeModel));
      }
    }
  }
  return handler;
}","static SyslogAuditLogHandler createHandler(final PathManagerService pathManager,final OperationContext context,final ModelNode operation,final EnvironmentNameReader environmentReader) throws OperationFailedException {
  final PathAddress pathAddress=getAffectedHandlerAddress(operation);
  final String name=Util.getNameFromAddress(pathAddress);
  final Resource handlerResource=context.readResourceFromRoot(pathAddress);
  final ModelNode handlerModel=handlerResource.getModel();
  final String formatterName=FORMATTER.resolveModelAttribute(context,handlerModel).asString();
  final int maxFailureCount=MAX_FAILURE_COUNT.resolveModelAttribute(context,handlerModel).asInt();
  final SyslogAuditLogHandler handler=new SyslogAuditLogHandler(name,formatterName,maxFailureCount,pathManager);
  handler.setFacility(SyslogAuditLogHandler.Facility.valueOf(FACILITY.resolveModelAttribute(context,handlerModel).asString()));
  if (environmentReader.isServer()) {
    handler.setHostName(environmentReader.getHostName() != null ? environmentReader.getHostName() + ""String_Node_Str"" + environmentReader.getServerName() : environmentReader.getServerName());
  }
 else {
    handler.setHostName(environmentReader.getHostName());
  }
  handler.setAppName(resolveAppName(context,handlerModel.get(APP_NAME.getName()),environmentReader));
  handler.setSyslogType(SyslogHandler.SyslogType.valueOf(SYSLOG_FORMAT.resolveModelAttribute(context,handlerModel).asString()));
  handler.setTruncate(TRUNCATE.resolveModelAttribute(context,handlerModel).asBoolean());
  if (handlerModel.hasDefined(MAX_LENGTH.getName())) {
    handler.setMaxLength(MAX_LENGTH.resolveModelAttribute(context,handlerModel).asInt());
  }
  final Set<ResourceEntry> protocols=handlerResource.getChildren(PROTOCOL);
  if (protocols.size() == 0) {
    throw DomainManagementMessages.MESSAGES.noSyslogProtocol();
  }
  final ResourceEntry protocol=protocols.iterator().next();
  final SyslogAuditLogHandler.Transport transport=SyslogAuditLogHandler.Transport.valueOf(protocol.getPathElement().getValue().toUpperCase(Locale.ENGLISH));
  handler.setTransport(transport);
  try {
    handler.setSyslogServerAddress(InetAddress.getByName(SyslogAuditLogProtocolResourceDefinition.HOST.resolveModelAttribute(context,protocol.getModel()).asString()));
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(e);
  }
  handler.setPort(SyslogAuditLogProtocolResourceDefinition.PORT.resolveModelAttribute(context,protocol.getModel()).asInt());
  if (transport != SyslogAuditLogHandler.Transport.UDP) {
    handler.setMessageTransfer(SyslogAuditLogHandler.MessageTransfer.valueOf(SyslogAuditLogProtocolResourceDefinition.Tcp.MESSAGE_TRANSFER.resolveModelAttribute(context,protocol.getModel()).asString()));
  }
  if (transport == SyslogAuditLogHandler.Transport.TLS) {
    final Set<ResourceEntry> tlsStores=protocol.getChildren(AUTHENTICATION);
    for (    ResourceEntry storeEntry : tlsStores) {
      final ModelNode storeModel=storeEntry.getModel();
      String type=storeEntry.getPathElement().getValue();
      if (type.equals(CLIENT_CERT_STORE)) {
        handler.setTlsClientCertStorePassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD,storeModel));
        handler.setTlsClientCertStorePath(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.resolveModelAttribute(context,storeModel).asString());
        handler.setTlsClientCertStoreRelativeTo(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_RELATIVE_TO,storeModel));
        handler.setTlsClientCertStoreKeyPassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEY_PASSWORD,storeModel));
      }
 else       if (type.equals(TRUSTSTORE)) {
        handler.setTlsTruststorePassword(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PASSWORD,storeModel));
        handler.setTlsTrustStorePath(SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_PATH.resolveModelAttribute(context,storeModel).asString());
        handler.setTlsTrustStoreRelativeTo(resolveUndefinableAttribute(context,SyslogAuditLogProtocolResourceDefinition.TlsKeyStore.KEYSTORE_RELATIVE_TO,storeModel));
      }
    }
  }
  return handler;
}",0.9868718877320054
167768,"public static boolean isExecute(ModelControllerClient client,String[] parent,OperationRequestAddress address,String operation){
  final ModelNode accessControl=getAccessControl(client,parent,address,true);
  if (accessControl == null) {
    return false;
  }
  if (!accessControl.has(Util.DEFAULT)) {
    log.warn(""String_Node_Str"" + accessControl);
    return false;
  }
  final ModelNode defaults=accessControl.get(Util.DEFAULT);
  if (!defaults.has(Util.OPERATIONS)) {
    log.warn(""String_Node_Str"" + accessControl);
    return false;
  }
  final ModelNode operations=defaults.get(Util.OPERATIONS);
  if (!operations.has(operation)) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + operation);
    }
    return false;
  }
  final ModelNode opAC=operations.get(operation);
  if (!opAC.has(Util.EXECUTE)) {
    log.warn(""String_Node_Str"" + operation + ""String_Node_Str""+ accessControl);
    return false;
  }
  return opAC.get(Util.EXECUTE).asBoolean();
}","public static boolean isExecute(ModelControllerClient client,String[] parent,OperationRequestAddress address,String operation){
  final ModelNode accessControl=getAccessControl(client,parent,address,true);
  if (accessControl == null) {
    return false;
  }
  if (!accessControl.has(Util.DEFAULT)) {
    log.warn(""String_Node_Str"" + accessControl);
    return false;
  }
  final ModelNode defaults=accessControl.get(Util.DEFAULT);
  if (!defaults.has(Util.OPERATIONS)) {
    log.warn(""String_Node_Str"" + defaults);
    return false;
  }
  final ModelNode operations=defaults.get(Util.OPERATIONS);
  if (!operations.has(operation)) {
    if (log.isTraceEnabled()) {
      log.trace(""String_Node_Str"" + operation);
    }
    return false;
  }
  final ModelNode opAC=operations.get(operation);
  if (!opAC.has(Util.EXECUTE)) {
    log.warn(""String_Node_Str"" + operation + ""String_Node_Str""+ accessControl);
    return false;
  }
  return opAC.get(Util.EXECUTE).asBoolean();
}",0.9892362890825218
167769,"@Override public IoFuture<Connection> connect() throws IOException {
  final URI uri;
  try {
    uri=this.getConnectionURI();
  }
 catch (  URISyntaxException e) {
    throw MESSAGES.couldNotConnect(e);
  }
  final Endpoint endpoint=this.endpointInjectedValue.getValue();
  final CallbackHandler callbackHandler;
  final CallbackHandlerFactory cbhFactory;
  SSLContext sslContext=null;
  SecurityRealm realm=securityRealmInjectedValue.getOptionalValue();
  if (realm != null && (cbhFactory=realm.getSecretCallbackHandlerFactory()) != null && username != null) {
    callbackHandler=cbhFactory.getCallbackHandler(username);
  }
 else {
    callbackHandler=getCallbackHandler();
  }
  if (realm != null) {
    sslContext=realm.getSSLContext();
  }
  final OptionMap.Builder builder=OptionMap.builder();
  builder.set(SASL_POLICY_NOANONYMOUS,Boolean.FALSE);
  builder.set(SASL_POLICY_NOPLAINTEXT,Boolean.FALSE);
  builder.set(Options.SASL_DISALLOWED_MECHANISMS,Sequence.of(JBOSS_LOCAL_USER));
  builder.set(Options.SSL_ENABLED,true);
  builder.set(Options.SSL_STARTTLS,true);
  builder.addAll(this.connectionCreationOptions);
  return endpoint.connect(uri,builder.getMap(),callbackHandler,sslContext);
}","@Override public IoFuture<Connection> connect() throws IOException {
  final URI uri;
  try {
    uri=this.getConnectionURI();
  }
 catch (  URISyntaxException e) {
    throw MESSAGES.couldNotConnect(e);
  }
  final Endpoint endpoint=this.endpointInjectedValue.getValue();
  final CallbackHandler callbackHandler;
  final CallbackHandlerFactory cbhFactory;
  SSLContext sslContext=null;
  SecurityRealm realm=securityRealmInjectedValue.getOptionalValue();
  if (realm != null && (cbhFactory=realm.getSecretCallbackHandlerFactory()) != null && username != null) {
    callbackHandler=cbhFactory.getCallbackHandler(username);
  }
 else {
    callbackHandler=getCallbackHandler();
  }
  if (realm != null) {
    sslContext=realm.getSSLContext();
  }
  final OptionMap.Builder builder=OptionMap.builder();
  builder.set(SASL_POLICY_NOANONYMOUS,Boolean.FALSE);
  builder.set(SASL_POLICY_NOPLAINTEXT,Boolean.FALSE);
  builder.set(Options.SASL_DISALLOWED_MECHANISMS,Sequence.of(JBOSS_LOCAL_USER));
  if (uri.getScheme().equals(HTTP_REMOTING)) {
    builder.set(SSL_ENABLED,false);
  }
 else   if (uri.getScheme().equals(HTTPS_REMOTING)) {
    builder.set(SSL_ENABLED,true);
    builder.set(SSL_STARTTLS,false);
  }
 else {
    builder.set(Options.SSL_ENABLED,true);
    builder.set(Options.SSL_STARTTLS,true);
  }
  builder.addAll(this.connectionCreationOptions);
  return endpoint.connect(uri,builder.getMap(),callbackHandler,sslContext);
}",0.8698292220113852
167770,"public static void addDeploymentProcessor(final String subsystemName,Phase phase,int priority,DeploymentUnitProcessor processor){
  final EnumMap<Phase,Set<RegisteredDeploymentUnitProcessor>> deployerMap=INSTANCE.deployerMap;
  deployerMap.get(phase).add(new RegisteredDeploymentUnitProcessor(priority,processor,subsystemName));
}","public static void addDeploymentProcessor(final String subsystemName,Phase phase,int priority,DeploymentUnitProcessor processor){
  final EnumMap<Phase,Set<RegisteredDeploymentUnitProcessor>> deployerMap=INSTANCE.deployerMap;
  Set<RegisteredDeploymentUnitProcessor> registeredDeploymentUnitProcessors=deployerMap.get(phase);
  RegisteredDeploymentUnitProcessor registeredDeploymentUnitProcessor=new RegisteredDeploymentUnitProcessor(priority,processor,subsystemName);
  if (registeredDeploymentUnitProcessors.contains(registeredDeploymentUnitProcessor)) {
    throw ServerMessages.MESSAGES.duplicateDeploymentUnitProcessor(priority,processor.getClass());
  }
  registeredDeploymentUnitProcessors.add(registeredDeploymentUnitProcessor);
}",0.6086142322097379
167771,"@Override public int compareTo(final RegisteredDeploymentUnitProcessor o){
  final int rel=Integer.signum(priority - o.priority);
  return rel == 0 ? processor.getClass().getName().compareTo(o.getClass().getName()) : rel;
}","@Override public int compareTo(final RegisteredDeploymentUnitProcessor o){
  final int rel=Integer.signum(priority - o.priority);
  return rel == 0 ? processor.getClass().getName().compareTo(o.processor.getClass().getName()) : rel;
}",0.9780701754385964
167772,"public static void registerJBossXMLParsers(){
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_XML_PARSER,new JBossAllXmlParserRegisteringProcessor<DeploymentDependencies>(ROOT_1_0,DeploymentDependencies.ATTACHMENT_KEY,DeploymentDependenciesParserV_1_0.INSTANCE));
}","public static void registerJBossXMLParsers(){
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_DEPLOYMENT_DEPS,new JBossAllXmlParserRegisteringProcessor<DeploymentDependencies>(ROOT_1_0,DeploymentDependencies.ATTACHMENT_KEY,DeploymentDependenciesParserV_1_0.INSTANCE));
}",0.9667149059334298
167773,"public static void registerJBossXMLParsers(){
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_XML_PARSER,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_0,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser10.JBOSS_ALL_XML_PARSER));
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_XML_PARSER,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_1,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser11.JBOSS_ALL_XML_PARSER));
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_XML_PARSER,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_2,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser12.JBOSS_ALL_XML_PARSER));
}","public static void registerJBossXMLParsers(){
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_STRUCTURE_1_0,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_0,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser10.JBOSS_ALL_XML_PARSER));
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_STRUCTURE_1_1,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_1,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser11.JBOSS_ALL_XML_PARSER));
  DeployerChainAddHandler.addDeploymentProcessor(ServerService.SERVER_NAME,Phase.STRUCTURE,Phase.STRUCTURE_REGISTER_JBOSS_ALL_STRUCTURE_1_2,new JBossAllXmlParserRegisteringProcessor<ParseResult>(ROOT_1_2,RESULT_ATTACHMENT_KEY,JBossDeploymentStructureParser12.JBOSS_ALL_XML_PARSER));
}",0.9613011777902412
167774,"static Locale getLocale(OperationContext context,final ModelNode operation) throws OperationFailedException {
  if (!operation.hasDefined(LOCALE.getName())) {
    return null;
  }
  String unparsed=normalizeLocale(operation.get(LOCALE.getName()).asString());
  int len=unparsed.length();
  if (len != 2 && len != 5 && len < 7) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  char char0=unparsed.charAt(0);
  char char1=unparsed.charAt(1);
  if (char0 < 'a' || char0 > 'z' || char1 < 'a' || char1 > 'z') {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  if (len == 2) {
    return new Locale(unparsed,""String_Node_Str"");
  }
  if (!isLocaleSeparator(unparsed.charAt(2))) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  char char3=unparsed.charAt(3);
  if (isLocaleSeparator(char3)) {
    return new Locale(unparsed.substring(0,2),""String_Node_Str"",unparsed.substring(4));
  }
  char char4=unparsed.charAt(4);
  if (char3 < 'A' || char3 > 'Z' || char4 < 'A' || char4 > 'Z') {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  if (len == 5) {
    return new Locale(unparsed.substring(0,2),unparsed.substring(3));
  }
  if (!isLocaleSeparator(unparsed.charAt(5))) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  return new Locale(unparsed.substring(0,2),unparsed.substring(3,5),unparsed.substring(6));
}","static Locale getLocale(OperationContext context,final ModelNode operation) throws OperationFailedException {
  if (!operation.hasDefined(GlobalOperationAttributes.LOCALE.getName())) {
    return null;
  }
  String unparsed=normalizeLocale(operation.get(GlobalOperationAttributes.LOCALE.getName()).asString());
  int len=unparsed.length();
  if (len != 2 && len != 5 && len < 7) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  char char0=unparsed.charAt(0);
  char char1=unparsed.charAt(1);
  if (char0 < 'a' || char0 > 'z' || char1 < 'a' || char1 > 'z') {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  if (len == 2) {
    return new Locale(unparsed,""String_Node_Str"");
  }
  if (!isLocaleSeparator(unparsed.charAt(2))) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  char char3=unparsed.charAt(3);
  if (isLocaleSeparator(char3)) {
    return new Locale(unparsed.substring(0,2),""String_Node_Str"",unparsed.substring(4));
  }
  char char4=unparsed.charAt(4);
  if (char3 < 'A' || char3 > 'Z' || char4 < 'A' || char4 > 'Z') {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  if (len == 5) {
    return new Locale(unparsed.substring(0,2),unparsed.substring(3));
  }
  if (!isLocaleSeparator(unparsed.charAt(5))) {
    reportInvalidLocaleFormat(context,unparsed);
    return null;
  }
  return new Locale(unparsed.substring(0,2),unparsed.substring(3,5),unparsed.substring(6));
}",0.9820565907522428
167775,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String childType=GlobalOperationHandlers.CHILD_TYPE.resolveModelAttribute(context,operation).asString();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS,false);
  ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  Map<String,Set<String>> childAddresses=GlobalOperationHandlers.getChildAddresses(context,address,registry,resource,childType);
  Set<String> childNames=childAddresses.get(childType);
  if (childNames == null) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.unknownChildType(childType)));
  }
  childNames=new TreeSet<String>(childNames);
  ModelNode result=context.getResult();
  result.setEmptyList();
  PathAddress childAddress=address.append(PathElement.pathElement(childType));
  ModelNode op=Util.createEmptyOperation(READ_RESOURCE_OPERATION,childAddress);
  op.get(OPERATION_HEADERS).set(operation.get(OPERATION_HEADERS));
  ModelNode opAddr=op.get(OP_ADDR);
  ModelNode childProperty=opAddr.require(address.size());
  Set<Action.ActionEffect> actionEffects=EnumSet.of(Action.ActionEffect.ADDRESS);
  FilteredData fd=null;
  for (  String childName : childNames) {
    childProperty.set(childType,new ModelNode(childName));
    if (context.authorize(op,actionEffects).getDecision() == AuthorizationResult.Decision.PERMIT) {
      result.add(childName);
    }
 else {
      if (fd == null) {
        fd=new FilteredData(address);
      }
      fd.addAccessRestrictedResource(PathAddress.pathAddress(opAddr));
    }
  }
  if (fd != null) {
    context.getResponseHeaders().get(ACCESS_CONTROL).set(fd.toModelNode());
  }
  context.stepCompleted();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String childType=CHILD_TYPE.resolveModelAttribute(context,operation).asString();
  final Resource resource=context.readResource(PathAddress.EMPTY_ADDRESS,false);
  ImmutableManagementResourceRegistration registry=context.getResourceRegistration();
  Map<String,Set<String>> childAddresses=GlobalOperationHandlers.getChildAddresses(context,address,registry,resource,childType);
  Set<String> childNames=childAddresses.get(childType);
  if (childNames == null) {
    throw new OperationFailedException(new ModelNode().set(MESSAGES.unknownChildType(childType)));
  }
  childNames=new TreeSet<String>(childNames);
  ModelNode result=context.getResult();
  result.setEmptyList();
  PathAddress childAddress=address.append(PathElement.pathElement(childType));
  ModelNode op=Util.createEmptyOperation(READ_RESOURCE_OPERATION,childAddress);
  op.get(OPERATION_HEADERS).set(operation.get(OPERATION_HEADERS));
  ModelNode opAddr=op.get(OP_ADDR);
  ModelNode childProperty=opAddr.require(address.size());
  Set<Action.ActionEffect> actionEffects=EnumSet.of(Action.ActionEffect.ADDRESS);
  FilteredData fd=null;
  for (  String childName : childNames) {
    childProperty.set(childType,new ModelNode(childName));
    if (context.authorize(op,actionEffects).getDecision() == AuthorizationResult.Decision.PERMIT) {
      result.add(childName);
    }
 else {
      if (fd == null) {
        fd=new FilteredData(address);
      }
      fd.addAccessRestrictedResource(PathAddress.pathAddress(opAddr));
    }
  }
  if (fd != null) {
    context.getResponseHeaders().get(ACCESS_CONTROL).set(fd.toModelNode());
  }
  context.stepCompleted();
}",0.9934462042599672
167776,"@Override public boolean implies(Permission permission){
  if (permission instanceof ManagementPermission) {
    ManagementPermission mperm=(ManagementPermission)permission;
    ManagementPermission provided=permissions.get(mperm.getActionEffect());
    return provided != null && provided.implies(mperm);
  }
  return false;
}","@Override public boolean implies(Permission permission){
  if (permission instanceof ManagementPermission) {
    ManagementPermission mperm=(ManagementPermission)permission;
    ManagementPermission provided;
synchronized (permissions) {
      provided=permissions.get(mperm.getActionEffect());
    }
    return provided != null && provided.implies(mperm);
  }
  return false;
}",0.9276595744680852
167777,"public static void safeClose(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
    }
  }
}","public static void safeClose(final ZipFile closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
    }
  }
}",0.9634146341463414
167778,"/** 
 * Creates an exception indicating the   {@link ObjectName} could not be created for the address.
 * @param cause   the cause of the error.
 * @param address the address.
 * @return a {@link RuntimeException} for the error.
 */
@Message(id=11332,value=""String_Node_Str"") RuntimeException cannotCreateObjectName(@Cause Throwable cause,PathAddress address);","/** 
 * Creates an exception indicating the   {@link ObjectName} could not be created for the address.
 * @param cause   the cause of the error.
 * @param address the address.
 * @param s
 * @return a {@link RuntimeException} for the error.
 */
@Message(id=11332,value=""String_Node_Str"") RuntimeException cannotCreateObjectName(@Cause Throwable cause,PathAddress address,String s);",0.97165991902834
167779,"static ObjectName createObjectName(final String domain,final PathAddress pathAddress){
  if (pathAddress.size() == 0) {
    return ModelControllerMBeanHelper.createRootObjectName(domain);
  }
  final StringBuilder sb=new StringBuilder(domain);
  sb.append(""String_Node_Str"");
  boolean first=true;
  for (  PathElement element : pathAddress) {
    if (first) {
      first=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    escapeKey(ESCAPED_KEY_CHARACTERS,sb,element.getKey());
    sb.append(""String_Node_Str"");
    escapeValue(sb,element.getValue());
  }
  try {
    return ObjectName.getInstance(sb.toString());
  }
 catch (  MalformedObjectNameException e) {
    throw MESSAGES.cannotCreateObjectName(e,pathAddress);
  }
}","static ObjectName createObjectName(final String domain,final PathAddress pathAddress){
  if (pathAddress.size() == 0) {
    return ModelControllerMBeanHelper.createRootObjectName(domain);
  }
  final StringBuilder sb=new StringBuilder(domain);
  sb.append(""String_Node_Str"");
  boolean first=true;
  for (  PathElement element : pathAddress) {
    if (first) {
      first=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    escapeKey(ESCAPED_KEY_CHARACTERS,sb,element.getKey());
    sb.append(""String_Node_Str"");
    escapeValue(sb,element.getValue());
  }
  try {
    return ObjectName.getInstance(sb.toString());
  }
 catch (  MalformedObjectNameException e) {
    throw MESSAGES.cannotCreateObjectName(e,pathAddress,sb.toString());
  }
}",0.9906542056074766
167780,"private static void escapeValue(final StringBuilder sb,final String value){
  final boolean containsAsterix=value.contains(""String_Node_Str"");
  final boolean containsBackslash=value.contains(""String_Node_Str"");
  final boolean containsColon=value.contains(""String_Node_Str"");
  final boolean containsEquals=value.contains(""String_Node_Str"");
  final boolean containsNewLine=value.contains(""String_Node_Str"");
  final boolean containsQuestionMark=value.contains(""String_Node_Str"");
  final boolean containsQuote=value.contains(""String_Node_Str"");
  boolean quoted=containsAsterix || containsBackslash || containsColon|| containsEquals|| containsNewLine|| containsQuestionMark|| containsQuote;
  if (quoted) {
    String replaced=value;
    sb.append(""String_Node_Str"");
    replaced=checkAndReplace(containsAsterix,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsBackslash,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsNewLine,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsQuestionMark,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsQuote,replaced,""String_Node_Str"",""String_Node_Str"");
    sb.append(replaced);
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(value);
  }
}","private static void escapeValue(final StringBuilder sb,final String value){
  final boolean containsAsterix=value.contains(""String_Node_Str"");
  final boolean containsBackslash=value.contains(""String_Node_Str"");
  final boolean containsColon=value.contains(""String_Node_Str"");
  final boolean containsEquals=value.contains(""String_Node_Str"");
  final boolean containsNewLine=value.contains(""String_Node_Str"");
  final boolean containsQuestionMark=value.contains(""String_Node_Str"");
  final boolean containsQuote=value.contains(""String_Node_Str"");
  final boolean containsComma=value.contains(""String_Node_Str"");
  boolean quoted=containsAsterix || containsBackslash || containsColon|| containsEquals|| containsNewLine|| containsQuestionMark|| containsQuote|| containsComma;
  if (quoted) {
    String replaced=value;
    sb.append(""String_Node_Str"");
    replaced=checkAndReplace(containsAsterix,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsBackslash,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsNewLine,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsQuestionMark,replaced,""String_Node_Str"",""String_Node_Str"");
    replaced=checkAndReplace(containsQuote,replaced,""String_Node_Str"",""String_Node_Str"");
    sb.append(replaced);
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(value);
  }
}",0.9705132872224244
167781,"private void fillHistory(ModelNode result,PatchType type,String oneOffPatchID,File historyDir) throws Exception {
  ModelNode history=new ModelNode();
  history.get(type.getName()).set(oneOffPatchID);
  File timestampFile=new File(historyDir,CommonAttributes.TIMESTAMP);
  String timestamp=PatchUtils.readRef(timestampFile);
  history.get(CommonAttributes.APPLIED_AT).set(timestamp);
  result.add(history);
}","private void fillHistory(ModelNode result,PatchType type,String oneOffPatchID,File historyDir) throws Exception {
  ModelNode history=new ModelNode();
  history.get(type.getName()).set(oneOffPatchID);
  File timestampFile=new File(historyDir,Constants.TIMESTAMP);
  String timestamp=PatchUtils.readRef(timestampFile);
  history.get(Constants.APPLIED_AT).set(timestamp);
  result.add(history);
}",0.9526184538653366
167782,"/** 
 * Finish the patch.
 * @param patch the patch
 * @return the patching result
 * @throws PatchingException
 */
PatchingResult finish(final Patch patch) throws PatchingException {
  if (rollbackOnly) {
    throw new IllegalStateException();
  }
  final String patchId=patch.getPatchId();
  final PatchInfo newInfo;
  if (Patch.PatchType.ONE_OFF == patch.getPatchType()) {
    final List<String> patches=new ArrayList<String>(info.getPatchIDs());
    patches.add(0,patchId);
    final String resultingVersion=info.getVersion();
    newInfo=new LocalPatchInfo(resultingVersion,info.getCumulativeID(),patches,info.getEnvironment());
  }
 else {
    final String resultingVersion=patch.getResultingVersion();
    newInfo=new LocalPatchInfo(resultingVersion,patchId,Collections.<String>emptyList(),info.getEnvironment());
  }
  final File cumulativeBackup=new File(backup,DirectoryStructure.CUMULATIVE);
  final File referencesBackup=new File(backup,DirectoryStructure.REFERENCES);
  final File timestamp=new File(backup,CommonAttributes.TIMESTAMP);
  try {
    PatchUtils.writeRef(cumulativeBackup,info.getCumulativeID());
    PatchUtils.writeRefs(referencesBackup,info.getPatchIDs());
    PatchUtils.writeRef(timestamp,generateTimestamp());
  }
 catch (  IOException e) {
    throw new PatchingException(e);
  }
  final Patch newPatch=new RollbackPatch();
  final File patchXml=new File(backup,PatchXml.PATCH_XML);
  try {
    final OutputStream os=new FileOutputStream(patchXml);
    try {
      PatchXml.marshal(os,newPatch);
    }
  finally {
      PatchUtils.safeClose(os);
    }
  }
 catch (  XMLStreamException e) {
    throw new PatchingException(e);
  }
catch (  IOException e) {
    throw new PatchingException(e);
  }
  try {
    persist(newInfo);
    return new PatchingResult(){
      @Override public String getPatchId(){
        return patch.getPatchId();
      }
      @Override public boolean hasFailures(){
        return false;
      }
      @Override public Collection<ContentItem> getProblems(){
        return Collections.emptyList();
      }
      @Override public PatchInfo getPatchInfo(){
        return newInfo;
      }
      @Override public void rollback(){
        try {
          persist(info);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  Exception e) {
    try {
      persist(info);
    }
 catch (    Exception ex) {
      PatchLogger.ROOT_LOGGER.debugf(ex,""String_Node_Str"");
    }
    throw new PatchingException(e);
  }
}","/** 
 * Finish the patch.
 * @param patch the patch
 * @return the patching result
 * @throws PatchingException
 */
PatchingResult finish(final Patch patch) throws PatchingException {
  if (rollbackOnly) {
    throw new IllegalStateException();
  }
  final String patchId=patch.getPatchId();
  final PatchInfo newInfo;
  if (Patch.PatchType.ONE_OFF == patch.getPatchType()) {
    final List<String> patches=new ArrayList<String>(info.getPatchIDs());
    patches.add(0,patchId);
    final String resultingVersion=info.getVersion();
    newInfo=new LocalPatchInfo(resultingVersion,info.getCumulativeID(),patches,info.getEnvironment());
  }
 else {
    final String resultingVersion=patch.getResultingVersion();
    newInfo=new LocalPatchInfo(resultingVersion,patchId,Collections.<String>emptyList(),info.getEnvironment());
  }
  final File cumulativeBackup=new File(backup,DirectoryStructure.CUMULATIVE);
  final File referencesBackup=new File(backup,DirectoryStructure.REFERENCES);
  final File timestamp=new File(backup,Constants.TIMESTAMP);
  try {
    PatchUtils.writeRef(cumulativeBackup,info.getCumulativeID());
    PatchUtils.writeRefs(referencesBackup,info.getPatchIDs());
    PatchUtils.writeRef(timestamp,generateTimestamp());
  }
 catch (  IOException e) {
    throw new PatchingException(e);
  }
  final Patch newPatch=new RollbackPatch();
  final File patchXml=new File(backup,PatchXml.PATCH_XML);
  try {
    final OutputStream os=new FileOutputStream(patchXml);
    try {
      PatchXml.marshal(os,newPatch);
    }
  finally {
      PatchUtils.safeClose(os);
    }
  }
 catch (  XMLStreamException e) {
    throw new PatchingException(e);
  }
catch (  IOException e) {
    throw new PatchingException(e);
  }
  try {
    persist(newInfo);
    return new PatchingResult(){
      @Override public String getPatchId(){
        return patch.getPatchId();
      }
      @Override public boolean hasFailures(){
        return false;
      }
      @Override public Collection<ContentItem> getProblems(){
        return Collections.emptyList();
      }
      @Override public PatchInfo getPatchInfo(){
        return newInfo;
      }
      @Override public void rollback(){
        try {
          persist(info);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  Exception e) {
    try {
      persist(info);
    }
 catch (    Exception ex) {
      PatchLogger.ROOT_LOGGER.debugf(ex,""String_Node_Str"");
    }
    throw new PatchingException(e);
  }
}",0.9962458012250544
167783,"static PatchingTask createMiscTask(final ContentModification modification,final MiscContentItem item,final PatchingContext context){
  final File target=context.getTargetFile(item);
  final File backup=context.getBackupFile(item);
  final ModificationType type=modification.getType();
switch (type) {
case ADD:
    return new FileAddTask(item,target,backup,modification);
case MODIFY:
  return new FileModifyTask(item,target,backup,modification);
case REMOVE:
return new FileRemoveTask(item,target,backup,modification);
default :
throw new IllegalStateException();
}
}","static PatchingTask createMiscTask(final ContentModification modification,final MiscContentItem item,final PatchingContext context){
  final File target=context.getTargetFile(item);
  final File backup=context.getBackupFile(item);
  final ModificationType type=modification.getType();
switch (type) {
case ADD:
    return new FileAddTask(item,target,backup,modification);
case MODIFY:
  return new FileUpdateTask(item,target,backup,modification);
case REMOVE:
return new FileRemoveTask(item,target,backup,modification);
default :
throw new IllegalStateException();
}
}",0.98943661971831
167784,"@Override public void registerChildren(ManagementResourceRegistration resourceRegistration){
  resourceRegistration.registerSubModel(SystemPropertyResourceDefinition.createForStandaloneServer(serverEnvironment));
  resourceRegistration.registerSubModel(new VaultResourceDefinition(vaultReader));
  final EnvironmentNameReader environmentReader=new EnvironmentNameReader(){
    public boolean isServer(){
      return true;
    }
    public String getServerName(){
      return serverEnvironment.getServerName();
    }
    public String getHostName(){
      return serverEnvironment.getHostControllerName();
    }
    public String getProductName(){
      if (serverEnvironment.getProductConfig() != null && serverEnvironment.getProductConfig().getProductName() != null) {
        return serverEnvironment.getProductConfig().getProductName();
      }
      return null;
    }
  }
;
  final ResourceDefinition managementDefinition;
  if (isDomain) {
    managementDefinition=CoreManagementResourceDefinition.forDomainServer(authorizer,auditLogger,pathManager,environmentReader);
  }
 else {
    managementDefinition=CoreManagementResourceDefinition.forStandaloneServer(authorizer,auditLogger,pathManager,environmentReader,NativeManagementResourceDefinition.INSTANCE,NativeRemotingManagementResourceDefinition.INSTANCE,HttpManagementResourceDefinition.INSTANCE);
  }
  resourceRegistration.registerSubModel(managementDefinition);
  resourceRegistration.registerSubModel(new ServiceContainerResourceDefinition());
  resourceRegistration.registerSubModel(new ModuleLoadingResourceDefinition());
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(resourceRegistration);
  resourceRegistration.registerSubModel(PathResourceDefinition.createSpecified(pathManager));
  ManagementResourceRegistration interfaces=resourceRegistration.registerSubModel(new InterfaceDefinition(SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,true));
  interfaces.registerReadOnlyAttribute(NetworkInterfaceRuntimeHandler.RESOLVED_ADDRESS,NetworkInterfaceRuntimeHandler.INSTANCE);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.DEFINITION,SpecifiedInterfaceResolveHandler.INSTANCE);
  resourceRegistration.registerSubModel(new SocketBindingGroupResourceDefinition(BindingGroupAddHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false,SocketBindingResourceDefinition.INSTANCE,RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE,LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE));
  ManagementResourceRegistration deployments=resourceRegistration.registerSubModel(ServerDeploymentResourceDefinition.create(contentRepository,vaultReader));
  resourceRegistration.registerSubModel(new DeploymentOverlayDefinition(DeploymentOverlayPriority.SERVER,contentRepository,null));
  deployments.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(SUBDEPLOYMENT),DeploymentAttributes.DEPLOYMENT_RESOLVER));
  resourceRegistration.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,parallelBoot,true,false));
  if (extensionRegistry != null) {
    extensionRegistry.setSubsystemParentResourceRegistrations(resourceRegistration,deployments);
    extensionRegistry.setPathManager(pathManager);
  }
  resourceRegistration.registerOperationHandler(DeployerChainAddHandler.DEFINITION,DeployerChainAddHandler.INSTANCE,false);
}","@Override public void registerChildren(ManagementResourceRegistration resourceRegistration){
  resourceRegistration.registerSubModel(SystemPropertyResourceDefinition.createForStandaloneServer(serverEnvironment));
  resourceRegistration.registerSubModel(new VaultResourceDefinition(vaultReader));
  final EnvironmentNameReader environmentReader=new EnvironmentNameReader(){
    public boolean isServer(){
      return true;
    }
    public String getServerName(){
      return serverEnvironment.getServerName();
    }
    public String getHostName(){
      return serverEnvironment.getHostControllerName();
    }
    public String getProductName(){
      if (serverEnvironment.getProductConfig() != null && serverEnvironment.getProductConfig().getProductName() != null) {
        return serverEnvironment.getProductConfig().getProductName();
      }
      return null;
    }
  }
;
  final ResourceDefinition managementDefinition;
  if (isDomain) {
    managementDefinition=CoreManagementResourceDefinition.forDomainServer(authorizer,auditLogger,pathManager,environmentReader);
  }
 else {
    managementDefinition=CoreManagementResourceDefinition.forStandaloneServer(authorizer,auditLogger,pathManager,environmentReader,NativeManagementResourceDefinition.INSTANCE,NativeRemotingManagementResourceDefinition.INSTANCE,HttpManagementResourceDefinition.INSTANCE);
  }
  resourceRegistration.registerSubModel(managementDefinition);
  resourceRegistration.registerSubModel(new ServiceContainerResourceDefinition());
  resourceRegistration.registerSubModel(new ModuleLoadingResourceDefinition());
  resourceRegistration.registerSubModel(PatchResourceDefinition.INSTANCE);
  PlatformMBeanResourceRegistrar.registerPlatformMBeanResources(resourceRegistration);
  resourceRegistration.registerSubModel(PathResourceDefinition.createSpecified(pathManager));
  ManagementResourceRegistration interfaces=resourceRegistration.registerSubModel(new InterfaceDefinition(SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,true));
  interfaces.registerReadOnlyAttribute(NetworkInterfaceRuntimeHandler.RESOLVED_ADDRESS,NetworkInterfaceRuntimeHandler.INSTANCE);
  interfaces.registerOperationHandler(SpecifiedInterfaceResolveHandler.DEFINITION,SpecifiedInterfaceResolveHandler.INSTANCE);
  resourceRegistration.registerSubModel(new SocketBindingGroupResourceDefinition(BindingGroupAddHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false,SocketBindingResourceDefinition.INSTANCE,RemoteDestinationOutboundSocketBindingResourceDefinition.INSTANCE,LocalDestinationOutboundSocketBindingResourceDefinition.INSTANCE));
  ManagementResourceRegistration deployments=resourceRegistration.registerSubModel(ServerDeploymentResourceDefinition.create(contentRepository,vaultReader));
  resourceRegistration.registerSubModel(new DeploymentOverlayDefinition(DeploymentOverlayPriority.SERVER,contentRepository,null));
  deployments.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(SUBDEPLOYMENT),DeploymentAttributes.DEPLOYMENT_RESOLVER));
  resourceRegistration.registerSubModel(new ExtensionResourceDefinition(extensionRegistry,parallelBoot,true,false));
  if (extensionRegistry != null) {
    extensionRegistry.setSubsystemParentResourceRegistrations(resourceRegistration,deployments);
    extensionRegistry.setPathManager(pathManager);
  }
  resourceRegistration.registerOperationHandler(DeployerChainAddHandler.DEFINITION,DeployerChainAddHandler.INSTANCE,false);
}",0.9891383055756698
167785,"/** 
 * Executes an operation on the controller latching onto an existing transaction
 * @param operation the operation
 * @param handler the handler
 * @param control the transaction control
 * @param attachments the operation attachments
 * @param prepareStep the prepare step to be executed before any other steps
 * @param operationId the id of the current transaction
 * @return the result of the operation
 */
protected ModelNode executeReadOnlyOperation(final ModelNode operation,final OperationMessageHandler handler,final OperationTransactionControl control,final OperationAttachments attachments,final OperationStepHandler prepareStep,final int operationId){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(ModelController.ACCESS_PERMISSION);
  }
  final OperationContext delegateContext=activeOperations.get(operationId);
  if (delegateContext == null) {
    throw MESSAGES.noContextToDelegateTo(operationId);
    ;
  }
  final ModelNode response=new ModelNode();
  final OperationTransactionControl originalResultTxControl=control == null ? null : new OperationTransactionControl(){
    @Override public void operationPrepared(    OperationTransaction transaction,    ModelNode result){
      control.operationPrepared(transaction,response);
    }
  }
;
  final ReadOnlyContext context=new ReadOnlyContext(processType,runningModeControl.getRunningMode(),originalResultTxControl,processState,false,delegateContext,this,operationId);
  context.addStep(response,operation,prepareStep,OperationContext.Stage.MODEL);
  CurrentOperationIdHolder.setCurrentOperationID(operationId);
  try {
    context.executeOperation();
  }
  finally {
    CurrentOperationIdHolder.setCurrentOperationID(null);
  }
  if (!response.hasDefined(RESPONSE_HEADERS) || !response.get(RESPONSE_HEADERS).hasDefined(PROCESS_STATE)) {
    ControlledProcessState.State state=processState.getState();
switch (state) {
case RELOAD_REQUIRED:
case RESTART_REQUIRED:
      response.get(RESPONSE_HEADERS,PROCESS_STATE).set(state.toString());
    break;
default :
  break;
}
}
return response;
}","/** 
 * Executes an operation on the controller latching onto an existing transaction
 * @param operation the operation
 * @param handler the handler
 * @param control the transaction control
 * @param attachments the operation attachments
 * @param prepareStep the prepare step to be executed before any other steps
 * @param operationId the id of the current transaction
 * @return the result of the operation
 */
protected ModelNode executeReadOnlyOperation(final ModelNode operation,final OperationMessageHandler handler,final OperationTransactionControl control,final OperationAttachments attachments,final OperationStepHandler prepareStep,final int operationId){
  final SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(ModelController.ACCESS_PERMISSION);
  }
  final OperationContext delegateContext=activeOperations.get(operationId);
  if (delegateContext == null) {
    throw MESSAGES.noContextToDelegateTo(operationId);
  }
  final ModelNode response=new ModelNode();
  final OperationTransactionControl originalResultTxControl=control == null ? null : new OperationTransactionControl(){
    @Override public void operationPrepared(    OperationTransaction transaction,    ModelNode result){
      control.operationPrepared(transaction,response);
    }
  }
;
  final ReadOnlyContext context=new ReadOnlyContext(processType,runningModeControl.getRunningMode(),originalResultTxControl,processState,false,delegateContext,this,operationId);
  context.addStep(response,operation,prepareStep,OperationContext.Stage.MODEL);
  CurrentOperationIdHolder.setCurrentOperationID(operationId);
  try {
    context.executeOperation();
  }
  finally {
    CurrentOperationIdHolder.setCurrentOperationID(null);
  }
  if (!response.hasDefined(RESPONSE_HEADERS) || !response.get(RESPONSE_HEADERS).hasDefined(PROCESS_STATE)) {
    ControlledProcessState.State state=processState.getState();
switch (state) {
case RELOAD_REQUIRED:
case RESTART_REQUIRED:
      response.get(RESPONSE_HEADERS,PROCESS_STATE).set(state.toString());
    break;
default :
  break;
}
}
return response;
}",0.9985808893093662
167786,"@Override protected void performRuntime(OperationContext context,ModelNode operation,ModelNode model,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  int bufferSize=BUFFER_SIZE.resolveModelAttribute(context,model).asInt();
  int bufferPerSlice=BUFFER_PER_SLICE.resolveModelAttribute(context,model).asInt();
  boolean direct=DIRECT_BUFFERS.resolveModelAttribute(context,model).asBoolean();
  final BufferPoolService service=new BufferPoolService(bufferSize,bufferPerSlice,direct);
  final ServiceBuilder<Pool<ByteBuffer>> serviceBuilder=context.getServiceTarget().addService(IOServices.BUFFER_POOL.append(name),service);
  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<Pool<ByteBuffer>> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}","@Override protected void performRuntime(OperationContext context,ModelNode operation,ModelNode model,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  int bufferSize=BUFFER_SIZE.resolveModelAttribute(context,model).asInt();
  int bufferPerSlice=BUFFER_PER_SLICE.resolveModelAttribute(context,model).asInt();
  boolean direct=true;
  ModelNode directBuffersModel=DIRECT_BUFFERS.resolveModelAttribute(context,model);
  if (directBuffersModel.isDefined()) {
    direct=directBuffersModel.asBoolean();
  }
  final BufferPoolService service=new BufferPoolService(bufferSize,bufferPerSlice,direct);
  final ServiceBuilder<Pool<ByteBuffer>> serviceBuilder=context.getServiceTarget().addService(IOServices.BUFFER_POOL.append(name),service);
  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);
  final ServiceController<Pool<ByteBuffer>> serviceController=serviceBuilder.install();
  if (newControllers != null) {
    newControllers.add(serviceController);
  }
}",0.93923145665773
167787,"@Override protected void performRemove(OperationContext context,ModelNode operation,ModelNode model) throws OperationFailedException {
  super.performRemove(context,operation,model);
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String serverName=address.getLastElement().getValue();
  final PathAddress running=address.subAddress(0,1).append(PathElement.pathElement(RUNNING_SERVER,serverName));
  final ModelNode runningServerRemove=new ModelNode();
  runningServerRemove.get(OP).set(REMOVE);
  runningServerRemove.get(OP_ADDR).set(running.toModelNode());
  context.addStep(runningServerRemove,new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      context.removeResource(PathAddress.EMPTY_ADDRESS);
      context.stepCompleted();
    }
  }
,OperationContext.Stage.IMMEDIATE);
  final ModelNode verifyOp=new ModelNode();
  verifyOp.get(OP).set(""String_Node_Str"");
  verifyOp.get(OP_ADDR).add(HOST,address.getElement(0).getValue());
  context.addStep(verifyOp,new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      final PathAddress serverAddress=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(SERVER,serverName));
      final ProxyController controller=context.getResourceRegistration().getProxyController(serverAddress);
      if (controller != null) {
        context.getFailureDescription().set(MESSAGES.serverStillRunning(serverName));
      }
      context.stepCompleted();
    }
  }
,OperationContext.Stage.RUNTIME);
}","@Override protected void performRemove(OperationContext context,ModelNode operation,ModelNode model) throws OperationFailedException {
  super.performRemove(context,operation,model);
  final PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  final String serverName=address.getLastElement().getValue();
  final PathAddress running=address.subAddress(0,1).append(PathElement.pathElement(RUNNING_SERVER,serverName));
  final ModelNode runningServerRemove=new ModelNode();
  runningServerRemove.get(OP).set(REMOVE);
  runningServerRemove.get(OP_ADDR).set(running.toModelNode());
  context.addStep(runningServerRemove,new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      context.removeResource(PathAddress.EMPTY_ADDRESS);
      context.stepCompleted();
    }
  }
,OperationContext.Stage.MODEL,true);
  final ModelNode verifyOp=new ModelNode();
  verifyOp.get(OP).set(""String_Node_Str"");
  verifyOp.get(OP_ADDR).add(HOST,address.getElement(0).getValue());
  context.addStep(verifyOp,new OperationStepHandler(){
    @Override public void execute(    final OperationContext context,    final ModelNode operation) throws OperationFailedException {
      final PathAddress serverAddress=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(SERVER,serverName));
      final ProxyController controller=context.getResourceRegistration().getProxyController(serverAddress);
      if (controller != null) {
        context.getFailureDescription().set(MESSAGES.serverStillRunning(serverName));
      }
      context.stepCompleted();
    }
  }
,OperationContext.Stage.RUNTIME);
}",0.9955998826635376
167788,"private static void checkFailedTransformedWriteAttributeOperation(ModelTestKernelServices<?> mainServices,ModelVersion modelVersion,ModelNode operation,FailedOperationTransformationConfig config) throws OperationFailedException {
  TransformedOperation transformedOperation=mainServices.transformOperation(modelVersion,operation.clone());
  if (config.expectFailedWriteAttributeOperation(operation)) {
    Assert.assertNotNull(""String_Node_Str"" + operation,transformedOperation.getFailureDescription());
    if (config.canCorrectMore(operation)) {
      checkFailedTransformedWriteAttributeOperation(mainServices,modelVersion,config.correctWriteAttributeOperation(operation),config);
    }
  }
 else {
    ModelNode result=mainServices.executeOperation(modelVersion,transformedOperation);
    Assert.assertEquals(""String_Node_Str"" + operation + ""String_Node_Str""+ result,SUCCESS,result.get(OUTCOME).asString());
  }
}","private static void checkFailedTransformedWriteAttributeOperation(ModelTestKernelServices<?> mainServices,ModelVersion modelVersion,ModelNode operation,FailedOperationTransformationConfig config) throws OperationFailedException {
  TransformedOperation transformedOperation=mainServices.transformOperation(modelVersion,operation.clone());
  if (config.expectFailedWriteAttributeOperation(operation)) {
    Assert.assertNotNull(""String_Node_Str"" + operation,transformedOperation.getFailureDescription());
    checkFailedTransformedWriteAttributeOperation(mainServices,modelVersion,config.correctWriteAttributeOperation(operation),config);
  }
 else {
    ModelNode result=mainServices.executeOperation(modelVersion,transformedOperation);
    Assert.assertEquals(""String_Node_Str"" + operation + ""String_Node_Str""+ result,SUCCESS,result.get(OUTCOME).asString());
  }
}",0.9708193041526376
167789,"private void revertBindingReinstall(OperationContext context,String bindingName,ModelNode bindingModel,String attributeName,ModelNode previousValue){
  context.removeService(SOCKET_BINDING.append(bindingName));
  ModelNode unresolvedConfig=bindingModel.clone();
  unresolvedConfig.get(attributeName).set(previousValue);
  try {
    BindingAddHandler.installBindingService(context,unresolvedConfig,bindingName);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private void revertBindingReinstall(OperationContext context,String bindingName,ModelNode bindingModel,String attributeName,ModelNode previousValue){
  context.removeService(SOCKET_BINDING.append(bindingName));
  ModelNode unresolvedConfig=bindingModel.clone();
  unresolvedConfig.get(attributeName).set(previousValue);
  try {
    BindingAddHandler.installBindingService(context,unresolvedConfig,bindingName,null);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9948186528497408
167790,"private void handleBindingReinstall(OperationContext context,String bindingName,ModelNode bindingModel) throws OperationFailedException {
  context.removeService(SOCKET_BINDING.append(bindingName));
  try {
    BindingAddHandler.installBindingService(context,bindingModel,bindingName);
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
}","private void handleBindingReinstall(OperationContext context,String bindingName,ModelNode bindingModel) throws OperationFailedException {
  context.removeService(SOCKET_BINDING.append(bindingName));
  try {
    BindingAddHandler.installBindingService(context,bindingModel,bindingName,null);
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(new ModelNode().set(e.toString()));
  }
}",0.9938800489596084
167791,"@Override protected void performRuntime(OperationContext context,ModelNode operation,ModelNode model,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers) throws OperationFailedException {
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  String name=address.getLastElement().getValue();
  try {
    newControllers.add(installBindingService(context,model,name));
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));
  }
}","@Override protected void performRuntime(OperationContext context,ModelNode operation,ModelNode model,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers) throws OperationFailedException {
  PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  String name=address.getLastElement().getValue();
  try {
    newControllers.add(installBindingService(context,model,name,verificationHandler));
  }
 catch (  UnknownHostException e) {
    throw new OperationFailedException(new ModelNode().set(e.getLocalizedMessage()));
  }
}",0.9822380106571936
167792,"public static ServiceController<SocketBinding> installBindingService(OperationContext context,ModelNode config,String name) throws UnknownHostException, OperationFailedException {
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ModelNode intfNode=AbstractSocketBindingResourceDefinition.INTERFACE.resolveModelAttribute(context,config);
  final String intf=intfNode.isDefined() ? intfNode.asString() : null;
  final int port=AbstractSocketBindingResourceDefinition.PORT.resolveModelAttribute(context,config).asInt();
  final boolean fixedPort=AbstractSocketBindingResourceDefinition.FIXED_PORT.resolveModelAttribute(context,config).asBoolean();
  final ModelNode mcastNode=AbstractSocketBindingResourceDefinition.MULTICAST_ADDRESS.resolveModelAttribute(context,config);
  final String mcastAddr=mcastNode.isDefined() ? mcastNode.asString() : null;
  final int mcastPort=AbstractSocketBindingResourceDefinition.MULTICAST_PORT.resolveModelAttribute(context,config).asInt(0);
  final InetAddress mcastInet=mcastAddr == null ? null : InetAddress.getByName(mcastAddr);
  final ModelNode mappingsNode=config.get(CLIENT_MAPPINGS);
  final List<ClientMapping> clientMappings=mappingsNode.isDefined() ? parseClientMappings(mappingsNode) : null;
  final SocketBindingService service=new SocketBindingService(name,port,fixedPort,mcastInet,mcastPort,clientMappings);
  final ServiceBuilder<SocketBinding> builder=serviceTarget.addService(SocketBinding.JBOSS_BINDING_NAME.append(name),service);
  if (intf != null) {
    builder.addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(intf),NetworkInterfaceBinding.class,service.getInterfaceBinding());
  }
  return builder.addDependency(SocketBindingManager.SOCKET_BINDING_MANAGER,SocketBindingManager.class,service.getSocketBindings()).setInitialMode(Mode.ON_DEMAND).install();
}","public static ServiceController<SocketBinding> installBindingService(OperationContext context,ModelNode config,String name,final ServiceVerificationHandler verificationHandler) throws UnknownHostException, OperationFailedException {
  final ServiceTarget serviceTarget=context.getServiceTarget();
  final ModelNode intfNode=AbstractSocketBindingResourceDefinition.INTERFACE.resolveModelAttribute(context,config);
  final String intf=intfNode.isDefined() ? intfNode.asString() : null;
  final int port=AbstractSocketBindingResourceDefinition.PORT.resolveModelAttribute(context,config).asInt();
  final boolean fixedPort=AbstractSocketBindingResourceDefinition.FIXED_PORT.resolveModelAttribute(context,config).asBoolean();
  final ModelNode mcastNode=AbstractSocketBindingResourceDefinition.MULTICAST_ADDRESS.resolveModelAttribute(context,config);
  final String mcastAddr=mcastNode.isDefined() ? mcastNode.asString() : null;
  final int mcastPort=AbstractSocketBindingResourceDefinition.MULTICAST_PORT.resolveModelAttribute(context,config).asInt(0);
  final InetAddress mcastInet=mcastAddr == null ? null : InetAddress.getByName(mcastAddr);
  final ModelNode mappingsNode=config.get(CLIENT_MAPPINGS);
  final List<ClientMapping> clientMappings=mappingsNode.isDefined() ? parseClientMappings(mappingsNode) : null;
  final SocketBindingService service=new SocketBindingService(name,port,fixedPort,mcastInet,mcastPort,clientMappings);
  final ServiceBuilder<SocketBinding> builder=serviceTarget.addService(SocketBinding.JBOSS_BINDING_NAME.append(name),service);
  if (intf != null) {
    builder.addDependency(NetworkInterfaceService.JBOSS_NETWORK_INTERFACE.append(intf),NetworkInterfaceBinding.class,service.getInterfaceBinding());
  }
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  return builder.addDependency(SocketBindingManager.SOCKET_BINDING_MANAGER,SocketBindingManager.class,service.getSocketBindings()).setInitialMode(Mode.ON_DEMAND).install();
}",0.9636174636174636
167793,"protected void recoverServices(OperationContext context,ModelNode operation,ModelNode model) throws OperationFailedException {
  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  String name=address.getLastElement().getValue();
  ServiceName svcName=SocketBinding.JBOSS_BINDING_NAME.append(name);
  ServiceRegistry registry=context.getServiceRegistry(true);
  ServiceController<?> controller=registry.getService(svcName);
  if (controller != null) {
    context.revertReloadRequired();
  }
 else {
    try {
      BindingAddHandler.installBindingService(context,model,name);
    }
 catch (    UnknownHostException e) {
      throw new OperationFailedException(new ModelNode().set(e.toString()));
    }
  }
}","protected void recoverServices(OperationContext context,ModelNode operation,ModelNode model) throws OperationFailedException {
  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));
  String name=address.getLastElement().getValue();
  ServiceName svcName=SocketBinding.JBOSS_BINDING_NAME.append(name);
  ServiceRegistry registry=context.getServiceRegistry(true);
  ServiceController<?> controller=registry.getService(svcName);
  if (controller != null) {
    context.revertReloadRequired();
  }
 else {
    try {
      BindingAddHandler.installBindingService(context,model,name,null);
    }
 catch (    UnknownHostException e) {
      throw new OperationFailedException(new ModelNode().set(e.toString()));
    }
  }
}",0.9965963240299524
167794,"public void addDeploymentOverlays(final List<ModelNode> updates){
  if (domainModel.hasDefined(DEPLOYMENT_OVERLAY)) {
    HostFileRepository remoteRepository=null;
    if (!domainController.getLocalHostInfo().isMasterDomainController()) {
      remoteRepository=domainController.getRemoteFileRepository();
    }
    for (    Property deploymentOverlay : domainModel.get(DEPLOYMENT_OVERLAY).asPropertyList()) {
      String name=deploymentOverlay.getName();
      ModelNode details=deploymentOverlay.getValue();
      PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name));
      ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
      updates.add(addOp);
      if (details.hasDefined(CONTENT)) {
        for (        Property content : details.get(CONTENT).asPropertyList()) {
          final String contentName=content.getName();
          final ModelNode contentDetails=content.getValue();
          byte[] hash=contentDetails.require(CONTENT).asBytes();
          File[] files=domainController.getLocalFileRepository().getDeploymentFiles(hash);
          if (files == null || files.length == 0) {
            if (remoteRepository != null) {
              remoteRepository.getDeploymentFiles(hash);
            }
          }
          addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(CONTENT,contentName));
          addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
          addOp.get(CONTENT).get(HASH).set(contentDetails.get(CONTENT));
          updates.add(addOp);
        }
      }
      if (serverGroup.hasDefined(DEPLOYMENT_OVERLAY)) {
        final ModelNode groupOverlay=serverGroup.get(DEPLOYMENT_OVERLAY).asObject();
        if (groupOverlay.has(name)) {
          ModelNode deploymentsNode=groupOverlay.get(name);
          if (deploymentsNode.has(DEPLOYMENT)) {
            for (            Property content : deploymentsNode.get(DEPLOYMENT).asPropertyList()) {
              final String deploymentName=content.getName();
              final ModelNode deploymentDetails=content.getValue();
              boolean regEx=deploymentDetails.hasDefined(REGULAR_EXPRESSION) ? deploymentDetails.require(REGULAR_EXPRESSION).asBoolean() : false;
              addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(DEPLOYMENT,deploymentName));
              addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
              addOp.get(REGULAR_EXPRESSION).set(regEx);
              updates.add(addOp);
            }
          }
        }
      }
    }
  }
}","public void addDeploymentOverlays(final List<ModelNode> updates){
  if (domainModel.hasDefined(DEPLOYMENT_OVERLAY)) {
    HostFileRepository remoteRepository=null;
    if (!domainController.getLocalHostInfo().isMasterDomainController()) {
      remoteRepository=domainController.getRemoteFileRepository();
    }
    for (    Property deploymentOverlay : domainModel.get(DEPLOYMENT_OVERLAY).asPropertyList()) {
      String name=deploymentOverlay.getName();
      ModelNode details=deploymentOverlay.getValue();
      PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name));
      ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
      updates.add(addOp);
      if (details.hasDefined(CONTENT)) {
        for (        Property content : details.get(CONTENT).asPropertyList()) {
          final String contentName=content.getName();
          final ModelNode contentDetails=content.getValue();
          byte[] hash=contentDetails.require(CONTENT).asBytes();
          File[] files=domainController.getLocalFileRepository().getDeploymentFiles(hash);
          if (files == null || files.length == 0) {
            if (remoteRepository != null) {
              remoteRepository.getDeploymentFiles(hash);
            }
          }
          addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(CONTENT,contentName));
          addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
          addOp.get(CONTENT).get(HASH).set(contentDetails.get(CONTENT));
          updates.add(addOp);
        }
      }
      if (serverGroup.hasDefined(DEPLOYMENT_OVERLAY)) {
        final ModelNode groupOverlay=serverGroup.get(DEPLOYMENT_OVERLAY).asObject();
        if (groupOverlay.has(name)) {
          ModelNode deploymentsNode=groupOverlay.get(name);
          if (deploymentsNode.has(DEPLOYMENT)) {
            for (            Property content : deploymentsNode.get(DEPLOYMENT).asPropertyList()) {
              final String deploymentName=content.getName();
              final ModelNode deploymentDetails=content.getValue();
              addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(DEPLOYMENT,deploymentName));
              addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
              updates.add(addOp);
            }
          }
        }
      }
    }
  }
}",0.953118792212952
167795,"void readDomainElement1_4(final XMLExtendedStreamReader reader,final ModelNode address,final Namespace expectedNs,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  readDomainElementAttributes_1_3(reader,expectedNs,address,list);
  Element element=nextElement(reader,expectedNs);
  if (element == Element.EXTENSIONS) {
    extensionXml.parseExtensions(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SYSTEM_PROPERTIES) {
    parseSystemProperties(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PATHS) {
    parsePaths(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PROFILES) {
    parseProfiles(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  final Set<String> interfaceNames=new HashSet<String>();
  if (element == Element.INTERFACES) {
    parseInterfaces(reader,interfaceNames,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SOCKET_BINDING_GROUPS) {
    parseDomainSocketBindingGroups(reader,address,expectedNs,list,interfaceNames);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.DEPLOYMENTS) {
    parseDeployments(reader,address,expectedNs,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME),EnumSet.of(Element.CONTENT,Element.FS_ARCHIVE,Element.FS_EXPLODED));
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.DEPLOYMENT_OVERLAYS) {
    parseDeploymentOverlays(reader,expectedNs,new ModelNode(),list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SERVER_GROUPS) {
    parseServerGroups(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.MANAGEMENT_CLIENT_CONTENT) {
    parseManagementClientContent(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
 else   if (element == null) {
    initializeRolloutPlans(address,list);
  }
 else {
    throw unexpectedElement(reader);
  }
}","void readDomainElement1_4(final XMLExtendedStreamReader reader,final ModelNode address,final Namespace expectedNs,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  readDomainElementAttributes_1_3(reader,expectedNs,address,list);
  Element element=nextElement(reader,expectedNs);
  if (element == Element.EXTENSIONS) {
    extensionXml.parseExtensions(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SYSTEM_PROPERTIES) {
    parseSystemProperties(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PATHS) {
    parsePaths(reader,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.PROFILES) {
    parseProfiles(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  final Set<String> interfaceNames=new HashSet<String>();
  if (element == Element.INTERFACES) {
    parseInterfaces(reader,interfaceNames,address,expectedNs,list,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SOCKET_BINDING_GROUPS) {
    parseDomainSocketBindingGroups(reader,address,expectedNs,list,interfaceNames);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.DEPLOYMENTS) {
    parseDeployments(reader,address,expectedNs,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME),EnumSet.of(Element.CONTENT,Element.FS_ARCHIVE,Element.FS_EXPLODED));
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.DEPLOYMENT_OVERLAYS) {
    parseDeploymentOverlays(reader,expectedNs,new ModelNode(),list,true,false);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.SERVER_GROUPS) {
    parseServerGroups(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
  if (element == Element.MANAGEMENT_CLIENT_CONTENT) {
    parseManagementClientContent(reader,address,expectedNs,list);
    element=nextElement(reader,expectedNs);
  }
 else   if (element == null) {
    initializeRolloutPlans(address,list);
  }
 else {
    throw unexpectedElement(reader);
  }
}",0.9974776427424904
167796,"void parseServerGroups(final XMLExtendedStreamReader reader,final ModelNode address,final Namespace expectedNs,final List<ModelNode> list) throws XMLStreamException {
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element serverGroup=Element.forName(reader.getLocalName());
    if (Element.SERVER_GROUP != serverGroup) {
      throw unexpectedElement(reader);
    }
    String name=null;
    String profile=null;
    Boolean managementSubsystemEndpoint=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (!isNoNamespaceAttribute(reader,i)) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            if (name != null) {
              throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
            }
            if (!names.add(value)) {
              throw ParseUtils.duplicateNamedElement(reader,value);
            }
            name=value;
            break;
          }
case PROFILE:
{
          if (profile != null) {
            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          }
          profile=value;
          break;
        }
case MANAGEMENT_SUBSYSTEM_ENDPOINT:
{
        if (managementSubsystemEndpoint != null) {
          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
        }
        managementSubsystemEndpoint=Boolean.valueOf(value);
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (profile == null) {
throw missingRequired(reader,Collections.singleton(Attribute.PROFILE));
}
final ModelNode groupAddress=new ModelNode().set(address);
groupAddress.add(ModelDescriptionConstants.SERVER_GROUP,name);
final ModelNode group=new ModelNode();
group.get(OP).set(ADD);
group.get(OP_ADDR).set(groupAddress);
group.get(PROFILE).set(profile);
if (managementSubsystemEndpoint != null) {
group.get(MANAGEMENT_SUBSYSTEM_ENDPOINT).set(managementSubsystemEndpoint);
}
list.add(group);
boolean sawDeployments=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
  JvmXml.parseJvm(reader,groupAddress,expectedNs,list,new HashSet<String>());
  break;
}
case SOCKET_BINDING_GROUP:
{
parseSocketBindingGroupRef(reader,group,ServerGroupResourceDefinition.SOCKET_BINDING_GROUP,ServerGroupResourceDefinition.SOCKET_BINDING_PORT_OFFSET);
break;
}
case DEPLOYMENTS:
{
if (sawDeployments) {
throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
}
sawDeployments=true;
parseDeployments(reader,groupAddress,expectedNs,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME,Attribute.ENABLED),Collections.<Element>emptySet());
break;
}
case DEPLOYMENT_OVERLAYS:
{
parseDeploymentOverlays(reader,expectedNs,groupAddress,list);
break;
}
case SYSTEM_PROPERTIES:
{
parseSystemProperties(reader,groupAddress,expectedNs,list,false);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
}","void parseServerGroups(final XMLExtendedStreamReader reader,final ModelNode address,final Namespace expectedNs,final List<ModelNode> list) throws XMLStreamException {
  requireNoAttributes(reader);
  final Set<String> names=new HashSet<String>();
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,expectedNs);
    Element serverGroup=Element.forName(reader.getLocalName());
    if (Element.SERVER_GROUP != serverGroup) {
      throw unexpectedElement(reader);
    }
    String name=null;
    String profile=null;
    Boolean managementSubsystemEndpoint=null;
    final int count=reader.getAttributeCount();
    for (int i=0; i < count; i++) {
      final String value=reader.getAttributeValue(i);
      if (!isNoNamespaceAttribute(reader,i)) {
        throw ParseUtils.unexpectedAttribute(reader,i);
      }
 else {
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            if (name != null) {
              throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
            }
            if (!names.add(value)) {
              throw ParseUtils.duplicateNamedElement(reader,value);
            }
            name=value;
            break;
          }
case PROFILE:
{
          if (profile != null) {
            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          }
          profile=value;
          break;
        }
case MANAGEMENT_SUBSYSTEM_ENDPOINT:
{
        if (managementSubsystemEndpoint != null) {
          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
        }
        managementSubsystemEndpoint=Boolean.valueOf(value);
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (profile == null) {
throw missingRequired(reader,Collections.singleton(Attribute.PROFILE));
}
final ModelNode groupAddress=new ModelNode().set(address);
groupAddress.add(ModelDescriptionConstants.SERVER_GROUP,name);
final ModelNode group=new ModelNode();
group.get(OP).set(ADD);
group.get(OP_ADDR).set(groupAddress);
group.get(PROFILE).set(profile);
if (managementSubsystemEndpoint != null) {
group.get(MANAGEMENT_SUBSYSTEM_ENDPOINT).set(managementSubsystemEndpoint);
}
list.add(group);
boolean sawDeployments=false;
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
requireNamespace(reader,expectedNs);
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case JVM:
{
  JvmXml.parseJvm(reader,groupAddress,expectedNs,list,new HashSet<String>());
  break;
}
case SOCKET_BINDING_GROUP:
{
parseSocketBindingGroupRef(reader,group,ServerGroupResourceDefinition.SOCKET_BINDING_GROUP,ServerGroupResourceDefinition.SOCKET_BINDING_PORT_OFFSET);
break;
}
case DEPLOYMENTS:
{
if (sawDeployments) {
throw MESSAGES.alreadyDefined(element.getLocalName(),reader.getLocation());
}
sawDeployments=true;
parseDeployments(reader,groupAddress,expectedNs,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME,Attribute.ENABLED),Collections.<Element>emptySet());
break;
}
case DEPLOYMENT_OVERLAYS:
{
parseDeploymentOverlays(reader,expectedNs,groupAddress,list,false,true);
break;
}
case SYSTEM_PROPERTIES:
{
parseSystemProperties(reader,groupAddress,expectedNs,list,false);
break;
}
default :
throw ParseUtils.unexpectedElement(reader);
}
}
}
}",0.99840046531918
167797,"@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String deploymentOverlay=address.getElement(address.size() - 2).getValue();
  final Boolean regularExpression=DeploymentOverlayDeploymentDefinition.REGULAR_EXPRESSION.resolveModelAttribute(context,model).asBoolean();
  installServices(context,verificationHandler,newControllers,name,deploymentOverlay,regularExpression,priority);
}","@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String deploymentOverlay=address.getElement(address.size() - 2).getValue();
  installServices(context,verificationHandler,newControllers,name,deploymentOverlay,priority);
}",0.8774094063222821
167798,"static void installServices(final OperationContext context,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers,final String name,final String deploymentOverlay,final boolean regularExpression,final DeploymentOverlayPriority priority){
  final DeploymentOverlayLinkService service=new DeploymentOverlayLinkService(name,regularExpression,priority);
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(deploymentOverlay).append(name);
  ServiceBuilder<DeploymentOverlayLinkService> builder=context.getServiceTarget().addService(serviceName,service).addDependency(DeploymentOverlayIndexService.SERVICE_NAME,DeploymentOverlayIndexService.class,service.getDeploymentOverlayIndexServiceInjectedValue()).addDependency(DeploymentOverlayService.SERVICE_NAME.append(deploymentOverlay),DeploymentOverlayService.class,service.getDeploymentOverlayServiceInjectedValue());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  final ServiceController<DeploymentOverlayLinkService> controller=builder.install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}","static void installServices(final OperationContext context,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers,final String name,final String deploymentOverlay,final DeploymentOverlayPriority priority){
  final DeploymentOverlayLinkService service=new DeploymentOverlayLinkService(name,priority);
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(deploymentOverlay).append(name);
  ServiceBuilder<DeploymentOverlayLinkService> builder=context.getServiceTarget().addService(serviceName,service).addDependency(DeploymentOverlayIndexService.SERVICE_NAME,DeploymentOverlayIndexService.class,service.getDeploymentOverlayIndexServiceInjectedValue()).addDependency(DeploymentOverlayService.SERVICE_NAME.append(deploymentOverlay),DeploymentOverlayService.class,service.getDeploymentOverlayServiceInjectedValue());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  final ServiceController<DeploymentOverlayLinkService> controller=builder.install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}",0.9783923941227312
167799,"@Override protected void recoverServices(final OperationContext context,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String deploymentOverlay=address.getElement(address.size() - 2).getValue();
  final Boolean regularExpression=DeploymentOverlayDeploymentDefinition.REGULAR_EXPRESSION.resolveModelAttribute(context,model).asBoolean();
  DeploymentOverlayDeploymentAdd.installServices(context,null,null,name,deploymentOverlay,regularExpression,priority);
}","@Override protected void recoverServices(final OperationContext context,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String deploymentOverlay=address.getElement(address.size() - 2).getValue();
  DeploymentOverlayDeploymentAdd.installServices(context,null,null,name,deploymentOverlay,priority);
}",0.7051397655545536
167800,"@Override public int compare(final DeploymentOverlayLinkService o1,final DeploymentOverlayLinkService o2){
  int res=o1.getPriority().ordinal() - o2.getPriority().ordinal();
  if (res != 0) {
    return res;
  }
  if (o2.isRegex() && !o1.isRegex()) {
    return -1;
  }
 else   if (o1.isRegex() && !o2.isRegex()) {
    return 1;
  }
  return 0;
}","@Override public int compare(final DeploymentOverlayLinkService o1,final DeploymentOverlayLinkService o2){
  int res=o1.getPriority().ordinal() - o2.getPriority().ordinal();
  if (res != 0) {
    return res;
  }
  if (o2.isWildcard() && !o1.isWildcard()) {
    return -1;
  }
 else   if (o1.isWildcard() && !o2.isWildcard()) {
    return 1;
  }
  return 0;
}",0.9261363636363636
167801,"/** 
 * Returns all the deployment overlays that should be applied to a deployment, with the highest priority first.
 * @param deploymentName The deployment name
 * @return
 */
public synchronized List<DeploymentOverlayService> getOverrides(final String deploymentName){
  final List<DeploymentOverlayLinkService> matched=new ArrayList<DeploymentOverlayLinkService>();
  for (  final DeploymentOverlayLinkService service : services) {
    if (service.isRegex()) {
      if (service.getPattern().matcher(deploymentName).matches()) {
        matched.add(service);
      }
    }
 else     if (service.getDeployment().equals(deploymentName)) {
      matched.add(service);
    }
  }
  Collections.sort(matched,new Comparator<DeploymentOverlayLinkService>(){
    @Override public int compare(    final DeploymentOverlayLinkService o1,    final DeploymentOverlayLinkService o2){
      int res=o1.getPriority().ordinal() - o2.getPriority().ordinal();
      if (res != 0) {
        return res;
      }
      if (o2.isRegex() && !o1.isRegex()) {
        return -1;
      }
 else       if (o1.isRegex() && !o2.isRegex()) {
        return 1;
      }
      return 0;
    }
  }
);
  final List<DeploymentOverlayService> ret=new ArrayList<DeploymentOverlayService>();
  for (  final DeploymentOverlayLinkService i : matched) {
    ret.add(i.getDeploymentOverlayServiceInjectedValue().getValue());
  }
  return ret;
}","/** 
 * Returns all the deployment overlays that should be applied to a deployment, with the highest priority first.
 * @param deploymentName The deployment name
 * @return
 */
public synchronized List<DeploymentOverlayService> getOverrides(final String deploymentName){
  final List<DeploymentOverlayLinkService> matched=new ArrayList<DeploymentOverlayLinkService>();
  for (  final DeploymentOverlayLinkService service : services) {
    if (service.isWildcard()) {
      if (service.getPattern().matcher(deploymentName).matches()) {
        matched.add(service);
      }
    }
 else     if (service.getDeployment().equals(deploymentName)) {
      matched.add(service);
    }
  }
  Collections.sort(matched,new Comparator<DeploymentOverlayLinkService>(){
    @Override public int compare(    final DeploymentOverlayLinkService o1,    final DeploymentOverlayLinkService o2){
      int res=o1.getPriority().ordinal() - o2.getPriority().ordinal();
      if (res != 0) {
        return res;
      }
      if (o2.isWildcard() && !o1.isWildcard()) {
        return -1;
      }
 else       if (o1.isWildcard() && !o2.isWildcard()) {
        return 1;
      }
      return 0;
    }
  }
);
  final List<DeploymentOverlayService> ret=new ArrayList<DeploymentOverlayService>();
  for (  final DeploymentOverlayLinkService i : matched) {
    ret.add(i.getDeploymentOverlayServiceInjectedValue().getValue());
  }
  return ret;
}",0.976925807596734
167802,"public DeploymentOverlayLinkService(final String deployment,final boolean regex,final DeploymentOverlayPriority priority){
  this.deployment=deployment;
  this.priority=priority;
  this.regex=regex;
  if (regex) {
    this.pattern=Pattern.compile(wildcardToJavaRegexp(deployment));
  }
 else {
    this.pattern=null;
  }
}","public DeploymentOverlayLinkService(final String deployment,final DeploymentOverlayPriority priority){
  this.deployment=deployment;
  this.priority=priority;
  this.pattern=Pattern.compile(wildcardToJavaRegexp(deployment));
  wildcard=deployment.contains(""String_Node_Str"") || deployment.contains(""String_Node_Str"");
}",0.7113884555382215
167803,"protected void parseDeploymentOverlay(final XMLExtendedStreamReader reader,final ModelNode baseAddress,final List<ModelNode> list) throws XMLStreamException {
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
ModelNode addr=baseAddress.clone();
addr.add(DEPLOYMENT_OVERLAY,name);
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
op.get(OP_ADDR).set(addr);
list.add(op);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case CONTENT:
  parseContentOverride(name,reader,baseAddress,list);
break;
case DEPLOYMENT:
parseDeploymentOverlayDeployment(name,reader,baseAddress,list);
break;
default :
throw unexpectedElement(reader);
}
}
}","protected void parseDeploymentOverlay(final XMLExtendedStreamReader reader,final ModelNode baseAddress,final List<ModelNode> list,final boolean allowContent,final boolean allowDeployment) throws XMLStreamException {
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String name=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        name=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
if (required.size() > 0) {
throw missingRequired(reader,required);
}
ModelNode addr=baseAddress.clone();
addr.add(DEPLOYMENT_OVERLAY,name);
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
op.get(OP_ADDR).set(addr);
list.add(op);
while (reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
if (element == Element.CONTENT && allowContent) {
  parseContentOverride(name,reader,baseAddress,list);
}
 else if (element == Element.DEPLOYMENT && allowDeployment) {
  parseDeploymentOverlayDeployment(name,reader,baseAddress,list);
}
 else {
  throw unexpectedElement(reader);
}
}
}",0.913666279519938
167804,"protected void parseDeploymentOverlayDeployment(final String name,final XMLExtendedStreamReader reader,final ModelNode baseAddress,final List<ModelNode> list) throws XMLStreamException {
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String depName=null;
  boolean regEx=false;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        depName=value;
        break;
      }
case REGULAR_EXPRESSION:
{
      regEx=Boolean.parseBoolean(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
if (required.size() > 0) {
throw missingRequired(reader,required);
}
final ModelNode address=baseAddress.clone();
address.add(DEPLOYMENT_OVERLAY,name);
address.add(DEPLOYMENT,depName);
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
op.get(OP_ADDR).set(address);
op.get(REGULAR_EXPRESSION).set(regEx);
list.add(op);
}","protected void parseDeploymentOverlayDeployment(final String name,final XMLExtendedStreamReader reader,final ModelNode baseAddress,final List<ModelNode> list) throws XMLStreamException {
  final EnumSet<Attribute> required=EnumSet.of(Attribute.NAME);
  String depName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    requireNoNamespaceAttribute(reader,i);
    final String value=reader.getAttributeValue(i);
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
    required.remove(attribute);
switch (attribute) {
case NAME:
{
        depName=value;
        break;
      }
default :
    throw unexpectedAttribute(reader,i);
}
}
requireNoContent(reader);
if (required.size() > 0) {
throw missingRequired(reader,required);
}
final ModelNode address=baseAddress.clone();
address.add(DEPLOYMENT_OVERLAY,name);
address.add(DEPLOYMENT,depName);
final ModelNode op=new ModelNode();
op.get(OP).set(ADD);
op.get(OP_ADDR).set(address);
list.add(op);
}",0.9230059935454128
167805,"protected void writeDeploymentOverlays(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> names=modelNode.keys();
  if (names.size() > 0) {
    writer.writeStartElement(Element.DEPLOYMENT_OVERLAYS.getLocalName());
    for (    String uniqueName : names) {
      final ModelNode contentItem=modelNode.get(uniqueName);
      writer.writeStartElement(Element.DEPLOYMENT_OVERLAY.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      if (contentItem.hasDefined(CONTENT)) {
        final ModelNode overridesNode=contentItem.get(CONTENT);
        final Set<String> overrides=overridesNode.keys();
        for (        final String override : overrides) {
          final ModelNode overrideNode=overridesNode.get(override);
          final String content=HashUtil.bytesToHexString(overrideNode.require(CONTENT).asBytes());
          writer.writeStartElement(Element.CONTENT.getLocalName());
          writeAttribute(writer,Attribute.PATH,override);
          writeAttribute(writer,Attribute.CONTENT,content);
          writer.writeEndElement();
        }
      }
      if (contentItem.hasDefined(DEPLOYMENT)) {
        final ModelNode deployments=contentItem.get(DEPLOYMENT);
        Set<String> deploymentNames=deployments.keys();
        if (deploymentNames.size() > 0) {
          for (          String deploymentName : deploymentNames) {
            final ModelNode depNode=deployments.get(deploymentName);
            final boolean regEx=depNode.hasDefined(REGULAR_EXPRESSION) ? depNode.get(REGULAR_EXPRESSION).asBoolean() : false;
            writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
            writeAttribute(writer,Attribute.NAME,deploymentName);
            if (regEx) {
              writeAttribute(writer,Attribute.REGULAR_EXPRESSION,""String_Node_Str"");
            }
            writer.writeEndElement();
          }
        }
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    writeNewLine(writer);
  }
}","protected void writeDeploymentOverlays(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> names=modelNode.keys();
  if (names.size() > 0) {
    writer.writeStartElement(Element.DEPLOYMENT_OVERLAYS.getLocalName());
    for (    String uniqueName : names) {
      final ModelNode contentItem=modelNode.get(uniqueName);
      writer.writeStartElement(Element.DEPLOYMENT_OVERLAY.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      if (contentItem.hasDefined(CONTENT)) {
        final ModelNode overridesNode=contentItem.get(CONTENT);
        final Set<String> overrides=overridesNode.keys();
        for (        final String override : overrides) {
          final ModelNode overrideNode=overridesNode.get(override);
          final String content=HashUtil.bytesToHexString(overrideNode.require(CONTENT).asBytes());
          writer.writeStartElement(Element.CONTENT.getLocalName());
          writeAttribute(writer,Attribute.PATH,override);
          writeAttribute(writer,Attribute.CONTENT,content);
          writer.writeEndElement();
        }
      }
      if (contentItem.hasDefined(DEPLOYMENT)) {
        final ModelNode deployments=contentItem.get(DEPLOYMENT);
        Set<String> deploymentNames=deployments.keys();
        if (deploymentNames.size() > 0) {
          for (          String deploymentName : deploymentNames) {
            final ModelNode depNode=deployments.get(deploymentName);
            writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
            writeAttribute(writer,Attribute.NAME,deploymentName);
            writer.writeEndElement();
          }
        }
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    writeNewLine(writer);
  }
}",0.8568443051201672
167806,"protected void parseDeploymentOverlays(final XMLExtendedStreamReader reader,final Namespace namespace,final ModelNode baseAddress,final List<ModelNode> list) throws XMLStreamException {
  requireNoAttributes(reader);
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,namespace);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case DEPLOYMENT_OVERLAY:
      parseDeploymentOverlay(reader,baseAddress,list);
    break;
default :
  throw unexpectedElement(reader);
}
}
}","protected void parseDeploymentOverlays(final XMLExtendedStreamReader reader,final Namespace namespace,final ModelNode baseAddress,final List<ModelNode> list,final boolean allowContent,final boolean allowDeployment) throws XMLStreamException {
  requireNoAttributes(reader);
  while (reader.nextTag() != END_ELEMENT) {
    requireNamespace(reader,namespace);
    final Element element=Element.forName(reader.getLocalName());
switch (element) {
case DEPLOYMENT_OVERLAY:
      parseDeploymentOverlay(reader,baseAddress,list,allowContent,allowDeployment);
    break;
default :
  throw unexpectedElement(reader);
}
}
}",0.924561403508772
167807,"/** 
 * Read the <server/> element based on version 1.4 of the schema.
 * @param reader  the xml stream reader
 * @param address address of the parent resource of any resources this method will add
 * @param list    the list of boot operations to which any new operations should be added
 * @throws XMLStreamException if a parsing error occurs
 */
private void readServerElement_1_4(final Namespace namespace,final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  ModelNode serverName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case NONE:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            serverName=ServerRootResourceDefinition.NAME.parse(value,reader.getLocation());
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      parseSchemaLocations(reader,address,list,i);
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
setServerName(address,list,serverName);
Element element=nextElement(reader,namespace);
if (element == Element.EXTENSIONS) {
extensionXml.parseExtensions(reader,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseSystemProperties(reader,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.PATHS) {
parsePaths(reader,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.VAULT) {
parseVault(reader,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.MANAGEMENT) {
ManagementXml managementXml=new ManagementXml(this);
managementXml.parseManagement(reader,address,namespace,list,true,false);
element=nextElement(reader,namespace);
}
if (element == Element.PROFILE) {
parseServerProfile(reader,address,list);
element=nextElement(reader,namespace);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.SOCKET_BINDING_GROUP) {
parseSocketBindingGroup_1_1(reader,interfaceNames,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.DEPLOYMENTS) {
parseDeployments(reader,address,namespace,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME,Attribute.ENABLED),EnumSet.of(Element.CONTENT,Element.FS_ARCHIVE,Element.FS_EXPLODED));
element=nextElement(reader,namespace);
}
if (element == Element.DEPLOYMENT_OVERLAYS) {
parseDeploymentOverlays(reader,namespace,new ModelNode(),list);
element=nextElement(reader,namespace);
}
if (element != null) {
throw unexpectedElement(reader);
}
}","/** 
 * Read the <server/> element based on version 1.4 of the schema.
 * @param reader  the xml stream reader
 * @param address address of the parent resource of any resources this method will add
 * @param list    the list of boot operations to which any new operations should be added
 * @throws XMLStreamException if a parsing error occurs
 */
private void readServerElement_1_4(final Namespace namespace,final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  ModelNode serverName=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case NONE:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            serverName=ServerRootResourceDefinition.NAME.parse(value,reader.getLocation());
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      parseSchemaLocations(reader,address,list,i);
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
setServerName(address,list,serverName);
Element element=nextElement(reader,namespace);
if (element == Element.EXTENSIONS) {
extensionXml.parseExtensions(reader,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.SYSTEM_PROPERTIES) {
parseSystemProperties(reader,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.PATHS) {
parsePaths(reader,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.VAULT) {
parseVault(reader,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.MANAGEMENT) {
ManagementXml managementXml=new ManagementXml(this);
managementXml.parseManagement(reader,address,namespace,list,true,false);
element=nextElement(reader,namespace);
}
if (element == Element.PROFILE) {
parseServerProfile(reader,address,list);
element=nextElement(reader,namespace);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,namespace,list,true);
element=nextElement(reader,namespace);
}
if (element == Element.SOCKET_BINDING_GROUP) {
parseSocketBindingGroup_1_1(reader,interfaceNames,address,namespace,list);
element=nextElement(reader,namespace);
}
if (element == Element.DEPLOYMENTS) {
parseDeployments(reader,address,namespace,list,EnumSet.of(Attribute.NAME,Attribute.RUNTIME_NAME,Attribute.ENABLED),EnumSet.of(Element.CONTENT,Element.FS_ARCHIVE,Element.FS_EXPLODED));
element=nextElement(reader,namespace);
}
if (element == Element.DEPLOYMENT_OVERLAYS) {
parseDeploymentOverlays(reader,namespace,new ModelNode(),list,true,true);
element=nextElement(reader,namespace);
}
if (element != null) {
throw unexpectedElement(reader);
}
}",0.9984591679506932
167808,"@Override public ModelNode transform(final OperationContext context,final ModelNode operation){
  if (operation.get(OP).asString().equals(COMPOSITE)) {
    ModelNode ret=operation.clone();
    final List<ModelNode> list=new ArrayList<ModelNode>(ret.get(STEPS).asList());
    ListIterator<ModelNode> it=list.listIterator();
    while (it.hasNext()) {
      final ModelNode subOperation=it.next();
      transform(context,subOperation);
    }
    ret.get(STEPS).set(list);
    return ret;
  }
 else {
    if (matches(operation,newOperation)) {
      return newOperation;
    }
 else {
      return operation;
    }
  }
}","@Override public ModelNode transform(final OperationContext context,final ModelNode operation){
  if (operation.get(OP).asString().equals(COMPOSITE)) {
    ModelNode ret=operation.clone();
    final List<ModelNode> list=new ArrayList<ModelNode>();
    ListIterator<ModelNode> it=ret.get(STEPS).asList().listIterator();
    while (it.hasNext()) {
      final ModelNode subOperation=it.next();
      list.add(transform(context,subOperation));
    }
    ret.get(STEPS).set(list);
    return ret;
  }
 else {
    if (matches(operation,newOperation)) {
      return newOperation;
    }
 else {
      return operation;
    }
  }
}",0.9339774557165862
167809,"/** 
 * Create the metadata which gets send to the DC when registering.
 * @param hostInfo the local host info
 * @param productConfig the product config
 * @param ignoredResourceRegistry registry of ignored resources
 * @return the host info
 */
public static ModelNode createLocalHostHostInfo(final LocalHostControllerInfo hostInfo,final ProductConfig productConfig,final IgnoredDomainResourceRegistry ignoredResourceRegistry){
  final ModelNode info=new ModelNode();
  info.get(NAME).set(hostInfo.getLocalHostName());
  info.get(RELEASE_VERSION).set(Version.AS_VERSION);
  info.get(RELEASE_CODENAME).set(Version.AS_RELEASE_CODENAME);
  info.get(MANAGEMENT_MAJOR_VERSION).set(Version.MANAGEMENT_MAJOR_VERSION);
  info.get(MANAGEMENT_MINOR_VERSION).set(Version.MANAGEMENT_MINOR_VERSION);
  info.get(MANAGEMENT_MICRO_VERSION).set(Version.MANAGEMENT_MICRO_VERSION);
  final String productName=productConfig.getProductName();
  final String productVersion=productConfig.getProductVersion();
  if (productName != null) {
    info.get(PRODUCT_NAME).set(productName);
  }
  if (productVersion != null) {
    info.get(PRODUCT_VERSION).set(productVersion);
  }
  ModelNode ignoredModel=Resource.Tools.readModel(ignoredResourceRegistry.getRootResource());
  info.get(IGNORED_RESOURCES).set(ignoredModel);
  return info;
}","/** 
 * Create the metadata which gets send to the DC when registering.
 * @param hostInfo the local host info
 * @param productConfig the product config
 * @param ignoredResourceRegistry registry of ignored resources
 * @return the host info
 */
public static ModelNode createLocalHostHostInfo(final LocalHostControllerInfo hostInfo,final ProductConfig productConfig,final IgnoredDomainResourceRegistry ignoredResourceRegistry){
  final ModelNode info=new ModelNode();
  info.get(NAME).set(hostInfo.getLocalHostName());
  info.get(RELEASE_VERSION).set(Version.AS_VERSION);
  info.get(RELEASE_CODENAME).set(Version.AS_RELEASE_CODENAME);
  info.get(MANAGEMENT_MAJOR_VERSION).set(Version.MANAGEMENT_MAJOR_VERSION);
  info.get(MANAGEMENT_MINOR_VERSION).set(Version.MANAGEMENT_MINOR_VERSION);
  info.get(MANAGEMENT_MICRO_VERSION).set(Version.MANAGEMENT_MICRO_VERSION);
  final String productName=productConfig.getProductName();
  final String productVersion=productConfig.getProductVersion();
  if (productName != null) {
    info.get(PRODUCT_NAME).set(productName);
  }
  if (productVersion != null) {
    info.get(PRODUCT_VERSION).set(productVersion);
  }
  ModelNode ignoredModel=ignoredResourceRegistry.getIgnoredResourcesAsModel();
  if (ignoredModel.hasDefined(IGNORED_RESOURCE_TYPE)) {
    info.get(IGNORED_RESOURCES).set(ignoredModel.require(IGNORED_RESOURCE_TYPE));
  }
  return info;
}",0.8794378698224852
167810,"public ProductConfig(ModuleLoader loader,String home){
  String productName=null;
  String productVersion=null;
  String consoleSlot=null;
  try {
    FileReader reader=new FileReader(home + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
    Properties props=new Properties();
    props.load(reader);
    String slot=(String)props.get(""String_Node_Str"");
    if (slot != null) {
      Module module=loader.loadModule(ModuleIdentifier.create(""String_Node_Str"",slot));
      InputStream stream=module.getClassLoader().getResourceAsStream(""String_Node_Str"");
      Manifest manifest=null;
      if (stream != null) {
        manifest=new Manifest(stream);
      }
      if (manifest != null) {
        productName=manifest.getMainAttributes().getValue(""String_Node_Str"");
        productVersion=manifest.getMainAttributes().getValue(""String_Node_Str"");
        consoleSlot=manifest.getMainAttributes().getValue(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
  name=productName;
  version=productVersion;
  this.consoleSlot=consoleSlot;
}","/** 
 * Solely for use in unit testing 
 */
public ProductConfig(final String productName,final String productVersion,final String consoleSlot){
  this.name=productName;
  this.version=productVersion;
  this.consoleSlot=consoleSlot;
}",0.0715917745620716
167811,"public static void init(){
  addArguments(CommandLineConstants.ADMIN_ONLY);
  instructions.add(MESSAGES.argAdminOnly());
  addArguments(CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"",CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argPublicBindAddress());
  addArguments(CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argInterfaceBindAddress());
  addArguments(CommandLineConstants.SHORT_SERVER_CONFIG + ""String_Node_Str"",CommandLineConstants.SHORT_SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argShortServerConfig());
  addArguments(CommandLineConstants.SYS_PROP + ""String_Node_Str"");
  instructions.add(MESSAGES.argSystem());
  addArguments(CommandLineConstants.SHORT_HELP,CommandLineConstants.HELP);
  instructions.add(MESSAGES.argHelp());
  addArguments(CommandLineConstants.READ_ONLY_SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argReadOnlyServerConfig());
  addArguments(CommandLineConstants.SHORT_PROPERTIES + ""String_Node_Str"",CommandLineConstants.SHORT_PROPERTIES + ""String_Node_Str"",CommandLineConstants.PROPERTIES + ""String_Node_Str"");
  instructions.add(MESSAGES.argProperties());
  addArguments(CommandLineConstants.SECURITY_PROP + ""String_Node_Str"");
  instructions.add(MESSAGES.argSecurityProperty());
  addArguments(CommandLineConstants.SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argServerConfig());
  addArguments(CommandLineConstants.DEFAULT_MULTICAST_ADDRESS + ""String_Node_Str"",CommandLineConstants.DEFAULT_MULTICAST_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argDefaultMulticastAddress());
  addArguments(CommandLineConstants.SHORT_VERSION,CommandLineConstants.OLD_SHORT_VERSION,CommandLineConstants.VERSION);
  instructions.add(MESSAGES.argVersion());
}","public static void init(){
  addArguments(CommandLineConstants.ADMIN_ONLY);
  instructions.add(MESSAGES.argAdminOnly());
  addArguments(CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"",CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argPublicBindAddress());
  addArguments(CommandLineConstants.PUBLIC_BIND_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argInterfaceBindAddress());
  addArguments(CommandLineConstants.SHORT_SERVER_CONFIG + ""String_Node_Str"",CommandLineConstants.SHORT_SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argShortServerConfig());
  addArguments(CommandLineConstants.DEBUG + ""String_Node_Str"");
  instructions.add(MESSAGES.argDebugPort());
  addArguments(CommandLineConstants.SYS_PROP + ""String_Node_Str"");
  instructions.add(MESSAGES.argSystem());
  addArguments(CommandLineConstants.SHORT_HELP,CommandLineConstants.HELP);
  instructions.add(MESSAGES.argHelp());
  addArguments(CommandLineConstants.READ_ONLY_SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argReadOnlyServerConfig());
  addArguments(CommandLineConstants.SHORT_PROPERTIES + ""String_Node_Str"",CommandLineConstants.SHORT_PROPERTIES + ""String_Node_Str"",CommandLineConstants.PROPERTIES + ""String_Node_Str"");
  instructions.add(MESSAGES.argProperties());
  addArguments(CommandLineConstants.SECURITY_PROP + ""String_Node_Str"");
  instructions.add(MESSAGES.argSecurityProperty());
  addArguments(CommandLineConstants.SERVER_CONFIG + ""String_Node_Str"");
  instructions.add(MESSAGES.argServerConfig());
  addArguments(CommandLineConstants.DEFAULT_MULTICAST_ADDRESS + ""String_Node_Str"",CommandLineConstants.DEFAULT_MULTICAST_ADDRESS + ""String_Node_Str"");
  instructions.add(MESSAGES.argDefaultMulticastAddress());
  addArguments(CommandLineConstants.SHORT_VERSION,CommandLineConstants.OLD_SHORT_VERSION,CommandLineConstants.VERSION);
  instructions.add(MESSAGES.argVersion());
}",0.9713835652402204
167812,"public static ServerEnvironment determineEnvironment(String[] args,Properties systemProperties,Map<String,String> systemEnvironment,ServerEnvironment.LaunchType launchType){
  final int argsLength=args.length;
  String serverConfig=null;
  String initialServerConfig=null;
  RunningMode runningMode=RunningMode.NORMAL;
  ProductConfig productConfig;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if (CommandLineConstants.VERSION.equals(arg) || CommandLineConstants.SHORT_VERSION.equals(arg) || CommandLineConstants.OLD_VERSION.equals(arg)|| CommandLineConstants.OLD_SHORT_VERSION.equals(arg)) {
        productConfig=new ProductConfig(Module.getBootModuleLoader(),SecurityActions.getSystemProperty(ServerEnvironment.HOME_DIR));
        System.out.println(productConfig.getPrettyVersionString());
        return null;
      }
 else       if (CommandLineConstants.HELP.equals(arg) || CommandLineConstants.SHORT_HELP.equals(arg) || CommandLineConstants.OLD_HELP.equals(arg)) {
        usage();
        return null;
      }
 else       if (CommandLineConstants.SERVER_CONFIG.equals(arg) || CommandLineConstants.SHORT_SERVER_CONFIG.equals(arg) || CommandLineConstants.OLD_SERVER_CONFIG.equals(arg)) {
        serverConfig=args[++i];
      }
 else       if (arg.startsWith(CommandLineConstants.SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.SHORT_SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.READ_ONLY_SERVER_CONFIG)) {
        initialServerConfig=parseValue(arg,CommandLineConstants.READ_ONLY_SERVER_CONFIG);
        if (initialServerConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.OLD_SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (CommandLineConstants.PROPERTIES.equals(arg) || CommandLineConstants.OLD_PROPERTIES.equals(arg) || CommandLineConstants.SHORT_PROPERTIES.equals(arg)) {
        if (!processProperties(arg,args[++i],systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.SHORT_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.OLD_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SYS_PROP)) {
        String name, value;
        int idx=arg.indexOf(""String_Node_Str"");
        if (idx == -1) {
          name=arg.substring(2);
          value=""String_Node_Str"";
        }
 else {
          name=arg.substring(2,idx);
          value=arg.substring(idx + 1,arg.length());
        }
        systemProperties.setProperty(name,value);
      }
 else       if (arg.startsWith(CommandLineConstants.PUBLIC_BIND_ADDRESS)) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf(ServerMessages.MESSAGES.noArgValue(arg));
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        String propertyName=null;
        if (idx < 0) {
          propertyName=arg.length() == 2 ? ServerEnvironment.JBOSS_BIND_ADDRESS : ServerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + arg.substring(2);
        }
 else         if (idx == 2) {
          propertyName=ServerEnvironment.JBOSS_BIND_ADDRESS;
        }
 else {
          propertyName=ServerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + arg.substring(2,idx);
        }
        systemProperties.setProperty(propertyName,value);
      }
 else       if (arg.startsWith(CommandLineConstants.DEFAULT_MULTICAST_ADDRESS)) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf(ServerMessages.MESSAGES.valueExpectedForCommandLineOption(arg));
          System.err.println();
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        systemProperties.setProperty(ServerEnvironment.JBOSS_DEFAULT_MULTICAST_ADDRESS,value);
      }
 else       if (CommandLineConstants.ADMIN_ONLY.equals(arg)) {
        runningMode=RunningMode.ADMIN_ONLY;
      }
 else       if (arg.startsWith(CommandLineConstants.SECURITY_PROP)) {
        String token=arg.substring(2);
        processSecurityProperties(token,systemProperties);
      }
 else {
        System.err.printf(ServerMessages.MESSAGES.invalidCommandLineOption(arg));
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.printf(ServerMessages.MESSAGES.valueExpectedForCommandLineOption(arg));
      usage();
      return null;
    }
  }
  if (serverConfig != null && initialServerConfig != null) {
    throw ServerMessages.MESSAGES.cannotHaveBothInitialServerConfigAndServerConfig();
  }
  String hostControllerName=null;
  productConfig=new ProductConfig(Module.getBootModuleLoader(),SecurityActions.getSystemProperty(ServerEnvironment.HOME_DIR));
  return new ServerEnvironment(hostControllerName,systemProperties,systemEnvironment,serverConfig,initialServerConfig,launchType,runningMode,productConfig);
}","public static ServerEnvironment determineEnvironment(String[] args,Properties systemProperties,Map<String,String> systemEnvironment,ServerEnvironment.LaunchType launchType){
  final int argsLength=args.length;
  String serverConfig=null;
  String initialServerConfig=null;
  RunningMode runningMode=RunningMode.NORMAL;
  ProductConfig productConfig;
  for (int i=0; i < argsLength; i++) {
    final String arg=args[i];
    try {
      if (CommandLineConstants.VERSION.equals(arg) || CommandLineConstants.SHORT_VERSION.equals(arg) || CommandLineConstants.OLD_VERSION.equals(arg)|| CommandLineConstants.OLD_SHORT_VERSION.equals(arg)) {
        productConfig=new ProductConfig(Module.getBootModuleLoader(),SecurityActions.getSystemProperty(ServerEnvironment.HOME_DIR));
        System.out.println(productConfig.getPrettyVersionString());
        return null;
      }
 else       if (CommandLineConstants.HELP.equals(arg) || CommandLineConstants.SHORT_HELP.equals(arg) || CommandLineConstants.OLD_HELP.equals(arg)) {
        usage();
        return null;
      }
 else       if (CommandLineConstants.SERVER_CONFIG.equals(arg) || CommandLineConstants.SHORT_SERVER_CONFIG.equals(arg) || CommandLineConstants.OLD_SERVER_CONFIG.equals(arg)) {
        serverConfig=args[++i];
      }
 else       if (arg.startsWith(CommandLineConstants.SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.SHORT_SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.READ_ONLY_SERVER_CONFIG)) {
        initialServerConfig=parseValue(arg,CommandLineConstants.READ_ONLY_SERVER_CONFIG);
        if (initialServerConfig == null) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_SERVER_CONFIG)) {
        serverConfig=parseValue(arg,CommandLineConstants.OLD_SERVER_CONFIG);
        if (serverConfig == null) {
          return null;
        }
      }
 else       if (CommandLineConstants.PROPERTIES.equals(arg) || CommandLineConstants.OLD_PROPERTIES.equals(arg) || CommandLineConstants.SHORT_PROPERTIES.equals(arg)) {
        if (!processProperties(arg,args[++i],systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SHORT_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.SHORT_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.OLD_PROPERTIES)) {
        String urlSpec=parseValue(arg,CommandLineConstants.OLD_PROPERTIES);
        if (urlSpec == null || !processProperties(arg,urlSpec,systemProperties)) {
          return null;
        }
      }
 else       if (arg.startsWith(CommandLineConstants.SYS_PROP)) {
        String name, value;
        int idx=arg.indexOf(""String_Node_Str"");
        if (idx == -1) {
          name=arg.substring(2);
          value=""String_Node_Str"";
        }
 else {
          name=arg.substring(2,idx);
          value=arg.substring(idx + 1,arg.length());
        }
        systemProperties.setProperty(name,value);
      }
 else       if (arg.startsWith(CommandLineConstants.PUBLIC_BIND_ADDRESS)) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf(ServerMessages.MESSAGES.noArgValue(arg));
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        String propertyName=null;
        if (idx < 0) {
          propertyName=arg.length() == 2 ? ServerEnvironment.JBOSS_BIND_ADDRESS : ServerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + arg.substring(2);
        }
 else         if (idx == 2) {
          propertyName=ServerEnvironment.JBOSS_BIND_ADDRESS;
        }
 else {
          propertyName=ServerEnvironment.JBOSS_BIND_ADDRESS_PREFIX + arg.substring(2,idx);
        }
        systemProperties.setProperty(propertyName,value);
      }
 else       if (arg.startsWith(CommandLineConstants.DEFAULT_MULTICAST_ADDRESS)) {
        int idx=arg.indexOf('=');
        if (idx == arg.length() - 1) {
          System.err.printf(ServerMessages.MESSAGES.valueExpectedForCommandLineOption(arg));
          System.err.println();
          usage();
          return null;
        }
        String value=idx > -1 ? arg.substring(idx + 1) : args[++i];
        systemProperties.setProperty(ServerEnvironment.JBOSS_DEFAULT_MULTICAST_ADDRESS,value);
      }
 else       if (CommandLineConstants.ADMIN_ONLY.equals(arg)) {
        runningMode=RunningMode.ADMIN_ONLY;
      }
 else       if (arg.startsWith(CommandLineConstants.SECURITY_PROP)) {
        String token=arg.substring(2);
        processSecurityProperties(token,systemProperties);
      }
 else       if (arg.equals(CommandLineConstants.DEBUG)) {
        final int next=i + 1;
        if (next < argsLength) {
          final String nextArg=args[next];
          if (!nextArg.startsWith(""String_Node_Str"")) {
            try {
              Integer.parseInt(nextArg);
              i++;
            }
 catch (            NumberFormatException ignore) {
            }
          }
        }
      }
 else {
        System.err.printf(ServerMessages.MESSAGES.invalidCommandLineOption(arg));
        usage();
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      System.err.printf(ServerMessages.MESSAGES.valueExpectedForCommandLineOption(arg));
      usage();
      return null;
    }
  }
  if (serverConfig != null && initialServerConfig != null) {
    throw ServerMessages.MESSAGES.cannotHaveBothInitialServerConfigAndServerConfig();
  }
  String hostControllerName=null;
  productConfig=new ProductConfig(Module.getBootModuleLoader(),SecurityActions.getSystemProperty(ServerEnvironment.HOME_DIR));
  return new ServerEnvironment(hostControllerName,systemProperties,systemEnvironment,serverConfig,initialServerConfig,launchType,runningMode,productConfig);
}",0.967701076630779
167813,"/** 
 * Instructions for the   {@link org.jboss.as.server.CommandLineArgument#DEBUG} command line argument.
 * @return the message.
 */
@Message(id=Message.NONE,value=""String_Node_Str"") String argDebugPort();","/** 
 * Instructions for the   {@link CommandLineConstants#DEBUG} command line argument.
 * @return the message.
 */
@Message(id=Message.NONE,value=""String_Node_Str"") String argDebugPort();",0.9168765743073048
167814,"public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  for (  AttributeDefinition def : DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.values()) {
    def.validateOperation(operation);
  }
  String name=DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.get(NAME).resolveModelAttribute(context,operation).asString();
  final PathAddress address=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(DEPLOYMENT,name));
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  boolean exists=root.hasChild(PathElement.pathElement(DEPLOYMENT,name));
  if (!exists) {
    ServerMessages.MESSAGES.noSuchDeployment(name);
  }
  final ModelNode replaceNode=context.readResourceForUpdate(address).getModel();
  final String replacedRuntimeName=RUNTIME_NAME.resolveModelAttribute(context,replaceNode).asString();
  final String runtimeName=operation.hasDefined(RUNTIME_NAME.getName()) ? operation.get(RUNTIME_NAME.getName()).asString() : name;
  final ModelNode content=operation.require(CONTENT).clone();
  final DeploymentHandlerUtil.ContentItem contentItem;
  ModelNode contentItemNode=content.require(0);
  byte[] originalHash=contentItemNode.hasDefined(CONTENT_HASH.getName()) ? CONTENT_HASH.resolveModelAttribute(context,contentItemNode).asBytes() : null;
  if (contentItemNode.hasDefined(CONTENT_HASH.getName())) {
    byte[] hash=CONTENT_HASH.resolveModelAttribute(context,contentItemNode).asBytes();
    contentItem=addFromHash(hash);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    contentItem=addFromContentAdditionParameter(context,contentItemNode);
    contentItemNode=new ModelNode();
    contentItemNode.get(CONTENT_HASH.getName()).set(contentItem.getHash());
    content.clear();
    content.add(contentItemNode);
  }
 else {
    contentItem=addUnmanaged(context,contentItemNode);
  }
  final ModelNode deployNode=context.readResourceForUpdate(address).getModel();
  removeContentAdditions(deployNode.require(CONTENT));
  deployNode.get(NAME).set(name);
  deployNode.get(RUNTIME_NAME.getName()).set(runtimeName);
  deployNode.get(CONTENT).set(content);
  ENABLED.validateAndSet(deployNode,replaceNode);
  if (ENABLED.resolveModelAttribute(context,replaceNode).asBoolean()) {
    DeploymentHandlerUtil.replace(context,replaceNode,runtimeName,name,replacedRuntimeName,vaultReader,contentItem);
  }
  if (context.completeStep() == ResultAction.KEEP) {
    if (originalHash != null) {
      final ModelNode contentNode=replaceNode.get(CONTENT).get(0);
      if (contentNode.hasDefined(CONTENT_HASH.getName())) {
        byte[] newHash=CONTENT_HASH.resolveModelAttribute(context,contentNode).asBytes();
        if (!Arrays.equals(originalHash,newHash)) {
          contentRepository.removeContent(originalHash);
        }
      }
    }
  }
 else {
    final ModelNode contentNode=replaceNode.get(CONTENT).get(0);
    if (contentNode.hasDefined(CONTENT_HASH.getName())) {
      byte[] newHash=CONTENT_HASH.resolveModelAttribute(context,contentNode).asBytes();
      contentRepository.removeContent(newHash);
    }
  }
}","public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  for (  AttributeDefinition def : DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.values()) {
    def.validateOperation(operation);
  }
  String name=DeploymentAttributes.FULL_REPLACE_DEPLOYMENT_ATTRIBUTES.get(NAME).resolveModelAttribute(context,operation).asString();
  final PathAddress address=PathAddress.EMPTY_ADDRESS.append(PathElement.pathElement(DEPLOYMENT,name));
  final Resource root=context.readResource(PathAddress.EMPTY_ADDRESS);
  boolean exists=root.hasChild(PathElement.pathElement(DEPLOYMENT,name));
  if (!exists) {
    ServerMessages.MESSAGES.noSuchDeployment(name);
  }
  final ModelNode replaceNode=context.readResourceForUpdate(address).getModel();
  final String replacedRuntimeName=RUNTIME_NAME.resolveModelAttribute(context,replaceNode).asString();
  final String runtimeName=operation.hasDefined(RUNTIME_NAME.getName()) ? operation.get(RUNTIME_NAME.getName()).asString() : name;
  final ModelNode content=operation.require(CONTENT).clone();
  final DeploymentHandlerUtil.ContentItem contentItem;
  ModelNode contentItemNode=content.require(0);
  byte[] originalHash=replaceNode.get(CONTENT).get(0).hasDefined(CONTENT_HASH.getName()) ? CONTENT_HASH.resolveModelAttribute(context,replaceNode.get(CONTENT).get(0)).asBytes() : null;
  if (contentItemNode.hasDefined(CONTENT_HASH.getName())) {
    byte[] hash=CONTENT_HASH.resolveModelAttribute(context,contentItemNode).asBytes();
    contentItem=addFromHash(hash);
  }
 else   if (hasValidContentAdditionParameterDefined(contentItemNode)) {
    contentItem=addFromContentAdditionParameter(context,contentItemNode);
    contentItemNode=new ModelNode();
    contentItemNode.get(CONTENT_HASH.getName()).set(contentItem.getHash());
    content.clear();
    content.add(contentItemNode);
  }
 else {
    contentItem=addUnmanaged(context,contentItemNode);
  }
  final ModelNode deployNode=context.readResourceForUpdate(address).getModel();
  removeContentAdditions(deployNode.require(CONTENT));
  deployNode.get(NAME).set(name);
  deployNode.get(RUNTIME_NAME.getName()).set(runtimeName);
  deployNode.get(CONTENT).set(content);
  ENABLED.validateAndSet(deployNode,replaceNode);
  if (ENABLED.resolveModelAttribute(context,replaceNode).asBoolean()) {
    DeploymentHandlerUtil.replace(context,replaceNode,runtimeName,name,replacedRuntimeName,vaultReader,contentItem);
  }
  if (context.completeStep() == ResultAction.KEEP) {
    if (originalHash != null) {
      final ModelNode contentNode=replaceNode.get(CONTENT).get(0);
      if (contentNode.hasDefined(CONTENT_HASH.getName())) {
        byte[] newHash=CONTENT_HASH.resolveModelAttribute(context,contentNode).asBytes();
        if (!Arrays.equals(originalHash,newHash)) {
          contentRepository.removeContent(originalHash);
        }
      }
    }
  }
 else {
    final ModelNode contentNode=replaceNode.get(CONTENT).get(0);
    if (contentNode.hasDefined(CONTENT_HASH.getName())) {
      byte[] newHash=CONTENT_HASH.resolveModelAttribute(context,contentNode).asBytes();
      contentRepository.removeContent(newHash);
    }
  }
}",0.9818932655654384
167815,"@Override public void execute(final OperationContext context,final ModelNode operation) throws OperationFailedException {
  if (context.hasFailureDescription()) {
    context.setRollbackOnly();
    context.completeStep();
    return;
  }
  final Set<String> outstanding=new HashSet<String>(hostProxies.keySet());
  final List<TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation>> results=new ArrayList<TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation>>();
  final Map<String,HostControllerUpdateTask.ExecutedHostRequest> finalResults=new HashMap<String,HostControllerUpdateTask.ExecutedHostRequest>();
  final HostControllerUpdateTask.ProxyOperationListener listener=new HostControllerUpdateTask.ProxyOperationListener();
  for (  Map.Entry<String,ProxyController> entry : hostProxies.entrySet()) {
    final String host=entry.getKey();
    final TransformingProxyController proxyController=(TransformingProxyController)entry.getValue();
    ModelNode op=context.getAttachment(OperationAttachments.SLAVE_SERVER_OPERATION);
    if (op == null) {
      op=operation;
    }
    final HostControllerUpdateTask task=new HostControllerUpdateTask(host,op.clone(),context,proxyController);
    final HostControllerUpdateTask.ExecutedHostRequest finalResult=task.execute(listener);
    finalResults.put(host,finalResult);
  }
  boolean interrupted=false;
  try {
    try {
      while (outstanding.size() > 0) {
        final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared=listener.retrievePreparedOperation();
        final String hostName=prepared.getOperation().getName();
        if (!outstanding.remove(hostName)) {
          continue;
        }
        final ModelNode preparedResult=prepared.getPreparedResult();
        if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
          HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",hostName,preparedResult);
        }
        domainOperationContext.addHostControllerResult(hostName,preparedResult);
        results.add(prepared);
      }
    }
 catch (    InterruptedException ie) {
      interrupted=true;
      domainOperationContext.setFailureReported(true);
      for (      final HostControllerUpdateTask.ExecutedHostRequest finalResult : finalResults.values()) {
        finalResult.asyncCancel();
      }
      for (      final Map.Entry<String,HostControllerUpdateTask.ExecutedHostRequest> entry : finalResults.entrySet()) {
        final String hostName=entry.getKey();
        try {
          final HostControllerUpdateTask.ExecutedHostRequest request=entry.getValue();
          final ModelNode result=request.getFinalResult().get();
          final ModelNode transformedResult=request.transformResult(result);
          domainOperationContext.addHostControllerResult(hostName,transformedResult);
        }
 catch (        Exception e) {
          final ModelNode result=new ModelNode();
          result.get(OUTCOME).set(FAILED);
          if (e instanceof InterruptedException) {
            result.get(FAILURE_DESCRIPTION).set(MESSAGES.interruptedAwaitingResultFromHost(entry.getKey()));
            interrupted=true;
          }
 else {
            result.get(FAILURE_DESCRIPTION).set(MESSAGES.exceptionAwaitingResultFromHost(entry.getKey(),e.getMessage()));
          }
          domainOperationContext.addHostControllerResult(hostName,result);
        }
      }
    }
    context.completeStep();
  }
  finally {
    try {
      boolean rollback=domainOperationContext.isCompleteRollback();
      for (      final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
        if (prepared.isDone()) {
          continue;
        }
        if (!rollback) {
          prepared.commit();
        }
 else {
          prepared.rollback();
        }
      }
      for (      final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
        final String hostName=prepared.getOperation().getName();
        try {
          final ModelNode finalResult=prepared.getFinalResult().get();
          domainOperationContext.addHostControllerResult(hostName,finalResult);
          if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
            HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",hostName,finalResult);
          }
        }
 catch (        InterruptedException e) {
          interrupted=true;
          CONTROLLER_LOGGER.interruptedAwaitingFinalResponse(hostName);
        }
catch (        ExecutionException e) {
          CONTROLLER_LOGGER.caughtExceptionAwaitingFinalResponse(e.getCause(),hostName);
        }
      }
    }
  finally {
      if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
  }
}","@Override public void execute(final OperationContext context,final ModelNode operation) throws OperationFailedException {
  if (context.hasFailureDescription()) {
    context.setRollbackOnly();
    context.completeStep();
    return;
  }
  final Set<String> outstanding=new HashSet<String>(hostProxies.keySet());
  final List<TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation>> results=new ArrayList<TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation>>();
  final Map<String,HostControllerUpdateTask.ExecutedHostRequest> finalResults=new HashMap<String,HostControllerUpdateTask.ExecutedHostRequest>();
  final HostControllerUpdateTask.ProxyOperationListener listener=new HostControllerUpdateTask.ProxyOperationListener();
  for (  Map.Entry<String,ProxyController> entry : hostProxies.entrySet()) {
    final String host=entry.getKey();
    final TransformingProxyController proxyController=(TransformingProxyController)entry.getValue();
    List<DomainOperationTransformer> transformers=context.getAttachment(OperationAttachments.SLAVE_SERVER_OPERATION_TRANSFORMERS);
    ModelNode op=operation;
    if (transformers != null) {
      for (      final DomainOperationTransformer transformer : transformers) {
        op=transformer.transform(context,op);
      }
    }
    final HostControllerUpdateTask task=new HostControllerUpdateTask(host,op.clone(),context,proxyController);
    final HostControllerUpdateTask.ExecutedHostRequest finalResult=task.execute(listener);
    finalResults.put(host,finalResult);
  }
  boolean interrupted=false;
  try {
    try {
      while (outstanding.size() > 0) {
        final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared=listener.retrievePreparedOperation();
        final String hostName=prepared.getOperation().getName();
        if (!outstanding.remove(hostName)) {
          continue;
        }
        final ModelNode preparedResult=prepared.getPreparedResult();
        if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
          HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",hostName,preparedResult);
        }
        domainOperationContext.addHostControllerResult(hostName,preparedResult);
        results.add(prepared);
      }
    }
 catch (    InterruptedException ie) {
      interrupted=true;
      domainOperationContext.setFailureReported(true);
      for (      final HostControllerUpdateTask.ExecutedHostRequest finalResult : finalResults.values()) {
        finalResult.asyncCancel();
      }
      for (      final Map.Entry<String,HostControllerUpdateTask.ExecutedHostRequest> entry : finalResults.entrySet()) {
        final String hostName=entry.getKey();
        try {
          final HostControllerUpdateTask.ExecutedHostRequest request=entry.getValue();
          final ModelNode result=request.getFinalResult().get();
          final ModelNode transformedResult=request.transformResult(result);
          domainOperationContext.addHostControllerResult(hostName,transformedResult);
        }
 catch (        Exception e) {
          final ModelNode result=new ModelNode();
          result.get(OUTCOME).set(FAILED);
          if (e instanceof InterruptedException) {
            result.get(FAILURE_DESCRIPTION).set(MESSAGES.interruptedAwaitingResultFromHost(entry.getKey()));
            interrupted=true;
          }
 else {
            result.get(FAILURE_DESCRIPTION).set(MESSAGES.exceptionAwaitingResultFromHost(entry.getKey(),e.getMessage()));
          }
          domainOperationContext.addHostControllerResult(hostName,result);
        }
      }
    }
    context.completeStep();
  }
  finally {
    try {
      boolean rollback=domainOperationContext.isCompleteRollback();
      for (      final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
        if (prepared.isDone()) {
          continue;
        }
        if (!rollback) {
          prepared.commit();
        }
 else {
          prepared.rollback();
        }
      }
      for (      final TransactionalProtocolClient.PreparedOperation<HostControllerUpdateTask.ProxyOperation> prepared : results) {
        final String hostName=prepared.getOperation().getName();
        try {
          final ModelNode finalResult=prepared.getFinalResult().get();
          domainOperationContext.addHostControllerResult(hostName,finalResult);
          if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
            HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",hostName,finalResult);
          }
        }
 catch (        InterruptedException e) {
          interrupted=true;
          CONTROLLER_LOGGER.interruptedAwaitingFinalResponse(hostName);
        }
catch (        ExecutionException e) {
          CONTROLLER_LOGGER.caughtExceptionAwaitingFinalResponse(e.getCause(),hostName);
        }
      }
    }
  finally {
      if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
  }
}",0.9741449511400652
167816,"public Map<Set<ServerIdentity>,ModelNode> getServerOperations(OperationContext context,ModelNode originalOperation,PathAddress address){
  if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
    HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",originalOperation);
  }
  ModelNode operation=context.getAttachment(OperationAttachments.SLAVE_SERVER_OPERATION);
  if (operation == null) {
    operation=originalOperation;
  }
  Set<ModelNode> dontPropagate=context.getAttachment(DONT_PROPAGATE_TO_SERVERS_ATTACHMENT);
  if (dontPropagate != null && dontPropagate.contains(operation)) {
    return Collections.emptyMap();
  }
  final ModelNode domain=Resource.Tools.readModel(context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS,true));
  final ModelNode host=domain.get(HOST,localHostName);
  if (address.size() == 0) {
    return resolveDomainRootOperation(operation,domain,host);
  }
 else {
    DomainKey domainKey=DomainKey.forName(address.getElement(0).getKey());
switch (domainKey) {
case EXTENSION:
{
        Set<ServerIdentity> allServers=getAllRunningServers(host,localHostName,serverProxies);
        return Collections.singletonMap(allServers,operation);
      }
case DEPLOYMENT:
{
      return Collections.emptyMap();
    }
case PATH:
{
    return getServerPathOperations(operation,address,host,true);
  }
case SYSTEM_PROPERTY:
{
  return getServerSystemPropertyOperations(operation,address,Level.DOMAIN,domain,null,host);
}
case PROFILE:
{
return getServerProfileOperations(operation,address,domain,host);
}
case INTERFACE:
{
return getServerInterfaceOperations(operation,address,host,true);
}
case SOCKET_BINDING_GROUP:
{
return getServerSocketBindingGroupOperations(operation,address,domain,host);
}
case SERVER_GROUP:
{
return getServerGroupOperations(operation,address,domain,host);
}
case MANAGMENT_CLIENT_CONTENT:
{
return Collections.emptyMap();
}
case HOST:
{
return getServerHostOperations(operation,address,domain,host);
}
case DEPLOYMENT_OVERLAY:
{
return getDeploymentOverlayOperations(operation,host);
}
default :
throw MESSAGES.unexpectedInitialPathKey(address.getElement(0).getKey());
}
}
}","public Map<Set<ServerIdentity>,ModelNode> getServerOperations(OperationContext context,ModelNode originalOperation,PathAddress address){
  if (HOST_CONTROLLER_LOGGER.isTraceEnabled()) {
    HOST_CONTROLLER_LOGGER.tracef(""String_Node_Str"",originalOperation);
  }
  List<DomainOperationTransformer> transformers=context.getAttachment(OperationAttachments.SLAVE_SERVER_OPERATION_TRANSFORMERS);
  ModelNode operation=originalOperation;
  if (transformers != null) {
    for (    DomainOperationTransformer transformer : transformers) {
      operation=transformer.transform(context,operation);
    }
  }
  Set<ModelNode> dontPropagate=context.getAttachment(DONT_PROPAGATE_TO_SERVERS_ATTACHMENT);
  if (dontPropagate != null && dontPropagate.contains(operation)) {
    return Collections.emptyMap();
  }
  final ModelNode domain=Resource.Tools.readModel(context.readResourceFromRoot(PathAddress.EMPTY_ADDRESS,true));
  final ModelNode host=domain.get(HOST,localHostName);
  if (address.size() == 0) {
    return resolveDomainRootOperation(operation,domain,host);
  }
 else {
    DomainKey domainKey=DomainKey.forName(address.getElement(0).getKey());
switch (domainKey) {
case EXTENSION:
{
        Set<ServerIdentity> allServers=getAllRunningServers(host,localHostName,serverProxies);
        return Collections.singletonMap(allServers,operation);
      }
case DEPLOYMENT:
{
      return Collections.emptyMap();
    }
case PATH:
{
    return getServerPathOperations(operation,address,host,true);
  }
case SYSTEM_PROPERTY:
{
  return getServerSystemPropertyOperations(operation,address,Level.DOMAIN,domain,null,host);
}
case PROFILE:
{
return getServerProfileOperations(operation,address,domain,host);
}
case INTERFACE:
{
return getServerInterfaceOperations(operation,address,host,true);
}
case SOCKET_BINDING_GROUP:
{
return getServerSocketBindingGroupOperations(operation,address,domain,host);
}
case SERVER_GROUP:
{
return getServerGroupOperations(operation,address,domain,host);
}
case MANAGMENT_CLIENT_CONTENT:
{
return Collections.emptyMap();
}
case HOST:
{
return getServerHostOperations(operation,address,domain,host);
}
case DEPLOYMENT_OVERLAY:
{
return getDeploymentOverlayOperations(operation,host);
}
default :
throw MESSAGES.unexpectedInitialPathKey(address.getElement(0).getKey());
}
}
}",0.9268846503178928
167817,"static void installServices(final OperationContext context,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers,final String name,final String deploymentOverlay,final boolean regularExpression,final DeploymentOverlayPriority priority){
  final DeploymentOverlayLinkService service=new DeploymentOverlayLinkService(name,regularExpression,priority);
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(name);
  ServiceBuilder<DeploymentOverlayLinkService> builder=context.getServiceTarget().addService(serviceName,service).addDependency(DeploymentOverlayIndexService.SERVICE_NAME,DeploymentOverlayIndexService.class,service.getDeploymentOverlayIndexServiceInjectedValue()).addDependency(DeploymentOverlayService.SERVICE_NAME.append(deploymentOverlay),DeploymentOverlayService.class,service.getDeploymentOverlayServiceInjectedValue());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  final ServiceController<DeploymentOverlayLinkService> controller=builder.install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}","static void installServices(final OperationContext context,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers,final String name,final String deploymentOverlay,final boolean regularExpression,final DeploymentOverlayPriority priority){
  final DeploymentOverlayLinkService service=new DeploymentOverlayLinkService(name,regularExpression,priority);
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(deploymentOverlay).append(name);
  ServiceBuilder<DeploymentOverlayLinkService> builder=context.getServiceTarget().addService(serviceName,service).addDependency(DeploymentOverlayIndexService.SERVICE_NAME,DeploymentOverlayIndexService.class,service.getDeploymentOverlayIndexServiceInjectedValue()).addDependency(DeploymentOverlayService.SERVICE_NAME.append(deploymentOverlay),DeploymentOverlayService.class,service.getDeploymentOverlayServiceInjectedValue());
  if (verificationHandler != null) {
    builder.addListener(verificationHandler);
  }
  final ServiceController<DeploymentOverlayLinkService> controller=builder.install();
  if (newControllers != null) {
    newControllers.add(controller);
  }
}",0.9888793840889648
167818,"@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(name);
  context.removeService(serviceName);
}","@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final PathAddress address=PathAddress.pathAddress(operation.get(OP_ADDR));
  final String name=address.getLastElement().getValue();
  final String deploymentOverlay=address.getElement(address.size() - 2).getValue();
  final ServiceName serviceName=DeploymentOverlayLinkService.SERVICE_NAME.append(deploymentOverlay).append(name);
  context.removeService(serviceName);
}",0.8829787234042553
167819,"public void addDeploymentOverlays(final List<ModelNode> updates){
  if (domainModel.hasDefined(DEPLOYMENT_OVERLAY)) {
    HostFileRepository remoteRepository=null;
    if (!domainController.getLocalHostInfo().isMasterDomainController()) {
      remoteRepository=domainController.getRemoteFileRepository();
    }
    for (    Property deploymentOverlay : domainModel.get(DEPLOYMENT_OVERLAY).asPropertyList()) {
      String name=deploymentOverlay.getName();
      ModelNode details=deploymentOverlay.getValue();
      PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name));
      ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
      updates.add(addOp);
      if (details.hasDefined(CONTENT)) {
        for (        Property content : details.get(CONTENT).asPropertyList()) {
          final String contentName=content.getName();
          final ModelNode contentDetails=content.getValue();
          byte[] hash=contentDetails.require(CONTENT).asBytes();
          File[] files=domainController.getLocalFileRepository().getDeploymentFiles(hash);
          if (files == null || files.length == 0) {
            if (remoteRepository != null) {
              remoteRepository.getDeploymentFiles(hash);
            }
          }
          addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(CONTENT,contentName));
          addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
          addOp.get(CONTENT).get(HASH).set(contentDetails.get(CONTENT));
          updates.add(addOp);
        }
      }
      if (serverGroup.hasDefined(DEPLOYMENT_OVERLAY)) {
        final ModelNode groupOverlay=serverGroup.get(DEPLOYMENT_OVERLAY).asObject();
        if (groupOverlay.has(name)) {
          List<Property> deployments=groupOverlay.get(name).asPropertyList();
          for (          Property content : deployments) {
            final String deploymentName=content.getName();
            final ModelNode deploymentDetails=content.getValue();
            boolean regEx=deploymentDetails.hasDefined(REGULAR_EXPRESSION) ? deploymentDetails.require(REGULAR_EXPRESSION).asBoolean() : false;
            addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(DEPLOYMENT,deploymentName));
            addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
            addOp.get(REGULAR_EXPRESSION).set(regEx);
            updates.add(addOp);
          }
        }
      }
    }
  }
}","public void addDeploymentOverlays(final List<ModelNode> updates){
  if (domainModel.hasDefined(DEPLOYMENT_OVERLAY)) {
    HostFileRepository remoteRepository=null;
    if (!domainController.getLocalHostInfo().isMasterDomainController()) {
      remoteRepository=domainController.getRemoteFileRepository();
    }
    for (    Property deploymentOverlay : domainModel.get(DEPLOYMENT_OVERLAY).asPropertyList()) {
      String name=deploymentOverlay.getName();
      ModelNode details=deploymentOverlay.getValue();
      PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name));
      ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
      updates.add(addOp);
      if (details.hasDefined(CONTENT)) {
        for (        Property content : details.get(CONTENT).asPropertyList()) {
          final String contentName=content.getName();
          final ModelNode contentDetails=content.getValue();
          byte[] hash=contentDetails.require(CONTENT).asBytes();
          File[] files=domainController.getLocalFileRepository().getDeploymentFiles(hash);
          if (files == null || files.length == 0) {
            if (remoteRepository != null) {
              remoteRepository.getDeploymentFiles(hash);
            }
          }
          addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(CONTENT,contentName));
          addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
          addOp.get(CONTENT).get(HASH).set(contentDetails.get(CONTENT));
          updates.add(addOp);
        }
      }
      if (serverGroup.hasDefined(DEPLOYMENT_OVERLAY)) {
        final ModelNode groupOverlay=serverGroup.get(DEPLOYMENT_OVERLAY).asObject();
        if (groupOverlay.has(name)) {
          ModelNode deploymentsNode=groupOverlay.get(name);
          if (deploymentsNode.has(DEPLOYMENT)) {
            for (            Property content : deploymentsNode.get(DEPLOYMENT).asPropertyList()) {
              final String deploymentName=content.getName();
              final ModelNode deploymentDetails=content.getValue();
              boolean regEx=deploymentDetails.hasDefined(REGULAR_EXPRESSION) ? deploymentDetails.require(REGULAR_EXPRESSION).asBoolean() : false;
              addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT_OVERLAY,name),PathElement.pathElement(DEPLOYMENT,deploymentName));
              addOp=Util.getEmptyOperation(ADD,addr.toModelNode());
              addOp.get(REGULAR_EXPRESSION).set(regEx);
              updates.add(addOp);
            }
          }
        }
      }
    }
  }
}",0.9334112149532712
167820,"protected void writeDeploymentOverlays(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> names=modelNode.keys();
  if (names.size() > 0) {
    writer.writeStartElement(Element.DEPLOYMENT_OVERLAYS.getLocalName());
    for (    String uniqueName : names) {
      final ModelNode contentItem=modelNode.get(uniqueName);
      writer.writeStartElement(Element.DEPLOYMENT_OVERLAY.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      if (contentItem.hasDefined(CONTENT)) {
        final ModelNode overridesNode=contentItem.get(CONTENT);
        final Set<String> overrides=overridesNode.keys();
        for (        final String override : overrides) {
          final ModelNode overrideNode=overridesNode.get(override);
          final String content=HashUtil.bytesToHexString(overrideNode.require(CONTENT).asBytes());
          writer.writeStartElement(Element.CONTENT.getLocalName());
          writeAttribute(writer,Attribute.PATH,override);
          writeAttribute(writer,Attribute.CONTENT,content);
          writer.writeEndElement();
        }
      }
      if (contentItem.hasDefined(DEPLOYMENT)) {
        final ModelNode deployments=contentItem.get(DEPLOYMENT);
        Set<String> deploymentNames=deployments.keys();
        if (deploymentNames.size() > 0) {
          for (          String deploymentName : deploymentNames) {
            final ModelNode depNode=deployments.get(uniqueName);
            final boolean regEx=depNode.hasDefined(REGULAR_EXPRESSION) ? depNode.get(REGULAR_EXPRESSION).asBoolean() : false;
            writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
            writeAttribute(writer,Attribute.NAME,deploymentName);
            if (regEx) {
              writeAttribute(writer,Attribute.REGULAR_EXPRESSION,""String_Node_Str"");
            }
            writer.writeEndElement();
          }
        }
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    writeNewLine(writer);
  }
}","protected void writeDeploymentOverlays(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> names=modelNode.keys();
  if (names.size() > 0) {
    writer.writeStartElement(Element.DEPLOYMENT_OVERLAYS.getLocalName());
    for (    String uniqueName : names) {
      final ModelNode contentItem=modelNode.get(uniqueName);
      writer.writeStartElement(Element.DEPLOYMENT_OVERLAY.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      if (contentItem.hasDefined(CONTENT)) {
        final ModelNode overridesNode=contentItem.get(CONTENT);
        final Set<String> overrides=overridesNode.keys();
        for (        final String override : overrides) {
          final ModelNode overrideNode=overridesNode.get(override);
          final String content=HashUtil.bytesToHexString(overrideNode.require(CONTENT).asBytes());
          writer.writeStartElement(Element.CONTENT.getLocalName());
          writeAttribute(writer,Attribute.PATH,override);
          writeAttribute(writer,Attribute.CONTENT,content);
          writer.writeEndElement();
        }
      }
      if (contentItem.hasDefined(DEPLOYMENT)) {
        final ModelNode deployments=contentItem.get(DEPLOYMENT);
        Set<String> deploymentNames=deployments.keys();
        if (deploymentNames.size() > 0) {
          for (          String deploymentName : deploymentNames) {
            final ModelNode depNode=deployments.get(deploymentName);
            final boolean regEx=depNode.hasDefined(REGULAR_EXPRESSION) ? depNode.get(REGULAR_EXPRESSION).asBoolean() : false;
            writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
            writeAttribute(writer,Attribute.NAME,deploymentName);
            if (regEx) {
              writeAttribute(writer,Attribute.REGULAR_EXPRESSION,""String_Node_Str"");
            }
            writer.writeEndElement();
          }
        }
      }
      writer.writeEndElement();
    }
    writer.writeEndElement();
    writeNewLine(writer);
  }
}",0.9960726558664704
167821,"private void registerTransformers1_0_0(SubsystemRegistration registration){
  final TransformersSubRegistration transformers=registration.registerModelTransformers(ModelVersion.create(1,0,0),new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override protected ModelNode transformModel(    TransformationContext context,    ModelNode model){
      boolean showModel=model.get(CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED).isDefined();
      ModelNode result=model.clone();
      result.get(CommonAttributes.SHOW_MODEL).set(showModel);
      return result;
    }
  }
);
  TransformersSubRegistration expressions=transformers.registerSubResource(ExposeModelResourceExpression.INSTANCE.getPathElement());
  expressions.discardOperations(ADD,REMOVE,WRITE_ATTRIBUTE_OPERATION,READ_ATTRIBUTE_OPERATION);
  TransformersSubRegistration resolved=transformers.registerSubResource(ExposeModelResourceResolved.INSTANCE.getPathElement());
  resolved.discardOperations(WRITE_ATTRIBUTE_OPERATION);
  resolved.registerOperationTransformer(ADD,new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      ModelNode node=new ModelNode();
      node.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      node.get(OP_ADDR).set(address.subAddress(0,address.size() - 1).toModelNode());
      node.get(NAME).set(CommonAttributes.SHOW_MODEL);
      node.get(VALUE).set(true);
      return node;
    }
  }
);
  resolved.registerOperationTransformer(REMOVE,new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      ModelNode node=new ModelNode();
      node.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      node.get(OP_ADDR).set(address.subAddress(0,address.size() - 1).toModelNode());
      node.get(NAME).set(CommonAttributes.SHOW_MODEL);
      node.get(VALUE).set(false);
      return node;
    }
  }
);
  resolved.registerOperationTransformer(READ_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation){
      return new TransformedOperation(null,new OperationResultTransformer(){
        @Override public ModelNode transformResult(        ModelNode result){
          if (operation.get(NAME).asString().equals(CommonAttributes.DOMAIN_NAME)) {
            result.get(RESULT).set(CommonAttributes.DEFAULT_RESOLVED_DOMAIN);
          }
          result.get(OUTCOME).set(SUCCESS);
          result.get(RESULT);
          return result;
        }
      }
);
    }
  }
);
}","private void registerTransformers1_0_0(SubsystemRegistration registration){
  final TransformersSubRegistration transformers=registration.registerModelTransformers(ModelVersion.create(1,0,0),new AbstractSubsystemTransformer(SUBSYSTEM_NAME){
    @Override protected ModelNode transformModel(    TransformationContext context,    ModelNode model){
      boolean showModel=model.get(CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED).isDefined();
      ModelNode result=model.clone();
      result.get(CommonAttributes.SHOW_MODEL).set(showModel);
      result.remove(CommonAttributes.EXPOSE_MODEL);
      return result;
    }
  }
);
  TransformersSubRegistration expressions=transformers.registerSubResource(ExposeModelResourceExpression.INSTANCE.getPathElement());
  expressions.discardOperations(ADD,REMOVE,WRITE_ATTRIBUTE_OPERATION,READ_ATTRIBUTE_OPERATION);
  TransformersSubRegistration resolved=transformers.registerSubResource(ExposeModelResourceResolved.INSTANCE.getPathElement());
  resolved.discardOperations(WRITE_ATTRIBUTE_OPERATION);
  resolved.registerOperationTransformer(ADD,new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      ModelNode node=new ModelNode();
      node.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      node.get(OP_ADDR).set(address.subAddress(0,address.size() - 1).toModelNode());
      node.get(NAME).set(CommonAttributes.SHOW_MODEL);
      node.get(VALUE).set(true);
      return node;
    }
  }
);
  resolved.registerOperationTransformer(REMOVE,new AbstractOperationTransformer(){
    @Override protected ModelNode transform(    TransformationContext context,    PathAddress address,    ModelNode operation){
      ModelNode node=new ModelNode();
      node.get(OP).set(WRITE_ATTRIBUTE_OPERATION);
      node.get(OP_ADDR).set(address.subAddress(0,address.size() - 1).toModelNode());
      node.get(NAME).set(CommonAttributes.SHOW_MODEL);
      node.get(VALUE).set(false);
      return node;
    }
  }
);
  resolved.registerOperationTransformer(READ_ATTRIBUTE_OPERATION,new OperationTransformer(){
    @Override public TransformedOperation transformOperation(    final TransformationContext context,    final PathAddress address,    final ModelNode operation){
      return new TransformedOperation(null,new OperationResultTransformer(){
        @Override public ModelNode transformResult(        ModelNode result){
          if (operation.get(NAME).asString().equals(CommonAttributes.DOMAIN_NAME)) {
            result.get(RESULT).set(CommonAttributes.DEFAULT_RESOLVED_DOMAIN);
          }
          result.get(OUTCOME).set(SUCCESS);
          result.get(RESULT);
          return result;
        }
      }
);
    }
  }
);
}",0.9905523255813954
167822,"@Override protected ModelNode transformModel(TransformationContext context,ModelNode model){
  boolean showModel=model.get(CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED).isDefined();
  ModelNode result=model.clone();
  result.get(CommonAttributes.SHOW_MODEL).set(showModel);
  return result;
}","@Override protected ModelNode transformModel(TransformationContext context,ModelNode model){
  boolean showModel=model.get(CommonAttributes.EXPOSE_MODEL,CommonAttributes.RESOLVED).isDefined();
  ModelNode result=model.clone();
  result.get(CommonAttributes.SHOW_MODEL).set(showModel);
  result.remove(CommonAttributes.EXPOSE_MODEL);
  return result;
}",0.926605504587156
167823,"/** 
 * Marshalls the value from the given   {@code resourceModel} as an xml element, if it{@link #isMarshallable(org.jboss.dmr.ModelNode,boolean) is marshallable}.
 * @param resourceModel the model, a non-null node of {@link org.jboss.dmr.ModelType#OBJECT}.
 * @param writer        stream writer to use for writing the attribute
 * @throws javax.xml.stream.XMLStreamException if thrown by  {@code writer}
 */
public abstract void marshallAsElement(final ModelNode resourceModel,final boolean marshallDefault,final XMLStreamWriter writer) throws XMLStreamException ;","/** 
 * Marshalls the value from the given   {@code resourceModel} as an xml element, if it{@link #isMarshallable(org.jboss.dmr.ModelNode,boolean) is marshallable}.
 * @param resourceModel the model, a non-null node of {@link org.jboss.dmr.ModelType#OBJECT}.
 * @param writer        stream writer to use for writing the attribute
 * @throws javax.xml.stream.XMLStreamException if thrown by  {@code writer}
 */
public void marshallAsElement(final ModelNode resourceModel,final boolean marshallDefault,final XMLStreamWriter writer) throws XMLStreamException {
  throw ControllerMessages.MESSAGES.couldNotMarshalAttributeAsElement(getName());
}",0.9229494614747308
167824,"@Override protected void initCoreModel(Resource rootResource,ManagementResourceRegistration rootRegistration){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (type == Type.STANDALONE) {
    ServerControllerModelUtil.updateCoreModelNonVersions(rootResource.getModel(),null);
    ServerControllerModelUtil.initOperations(rootRegistration,createContentRepository(),new NullConfigurationPersister(),createStandaloneServerEnvironment(),null,runningModeControl,null,new ExtensionRegistry(ProcessType.STANDALONE_SERVER,runningModeControl),false,null,pathManagerService);
    rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.MANAGEMENT),Resource.Factory.create());
    rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.SERVICE_CONTAINER),Resource.Factory.create());
    rootResource.registerChild(ServerEnvironmentResourceDescription.RESOURCE_PATH,Resource.Factory.create());
    pathManagerService.addPathManagerResources(rootResource);
  }
 else   if (type == Type.HOST) {
    final String hostName=""String_Node_Str"";
    final ExtensionRegistry extensionRegistry=new ExtensionRegistry(ProcessType.HOST_CONTROLLER,runningModeControl);
    final HostControllerEnvironment env=createHostControllerEnvironment();
    final LocalHostControllerInfoImpl info=createLocalHostControllerInfo(env);
    final IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(info);
    final HostControllerConfigurationPersister persister=new HostControllerConfigurationPersister(env,info,Executors.newCachedThreadPool(),extensionRegistry);
    HostModelUtil.createRootRegistry(rootRegistration,env,ignoredRegistry,new HostModelRegistrar(){
      @Override public void registerHostModel(      String hostName,      ManagementResourceRegistration root){
      }
    }
);
    HostModelUtil.createHostRegistry(hostName,rootRegistration,persister,env,(HostRunningModeControl)runningModeControl,createHostFileRepository(),info,null,null,createContentRepository(),createDomainController(env,info),extensionRegistry,null,ignoredRegistry,null,pathManagerService);
  }
 else   if (type == Type.DOMAIN) {
    final HostControllerEnvironment env=createHostControllerEnvironment();
    final LocalHostControllerInfoImpl info=createLocalHostControllerInfo(env);
    final IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(info);
    DomainModelUtil.initializeMasterDomainRegistry(rootRegistration,new NullConfigurationPersister(),createContentRepository(),createHostFileRepository(),createDomainController(env,info),new ExtensionRegistry(ProcessType.HOST_CONTROLLER,runningModeControl),pathManagerService);
    HostModelUtil.createRootRegistry(rootRegistration,env,ignoredRegistry,new HostModelRegistrar(){
      @Override public void registerHostModel(      String hostName,      ManagementResourceRegistration root){
      }
    }
);
  }
  if (modelInitializer != null) {
    modelInitializer.populateModel(rootResource);
  }
}","@Override protected void initCoreModel(Resource rootResource,ManagementResourceRegistration rootRegistration){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (type == Type.STANDALONE) {
    ServerControllerModelUtil.updateCoreModelNonVersions(rootResource.getModel(),null);
    ServerControllerModelUtil.initOperations(rootRegistration,createContentRepository(),new NullConfigurationPersister(),createStandaloneServerEnvironment(),null,runningModeControl,null,new ExtensionRegistry(ProcessType.STANDALONE_SERVER,runningModeControl),false,pathManagerService);
    rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.MANAGEMENT),Resource.Factory.create());
    rootResource.registerChild(PathElement.pathElement(ModelDescriptionConstants.CORE_SERVICE,ModelDescriptionConstants.SERVICE_CONTAINER),Resource.Factory.create());
    rootResource.registerChild(ServerEnvironmentResourceDescription.RESOURCE_PATH,Resource.Factory.create());
    pathManagerService.addPathManagerResources(rootResource);
  }
 else   if (type == Type.HOST) {
    final String hostName=""String_Node_Str"";
    final ExtensionRegistry extensionRegistry=new ExtensionRegistry(ProcessType.HOST_CONTROLLER,runningModeControl);
    final HostControllerEnvironment env=createHostControllerEnvironment();
    final LocalHostControllerInfoImpl info=createLocalHostControllerInfo(env);
    final IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(info);
    final HostControllerConfigurationPersister persister=new HostControllerConfigurationPersister(env,info,Executors.newCachedThreadPool(),extensionRegistry);
    HostModelUtil.createRootRegistry(rootRegistration,env,ignoredRegistry,new HostModelRegistrar(){
      @Override public void registerHostModel(      String hostName,      ManagementResourceRegistration root){
      }
    }
);
    HostModelUtil.createHostRegistry(hostName,rootRegistration,persister,env,(HostRunningModeControl)runningModeControl,createHostFileRepository(),info,null,null,createContentRepository(),createDomainController(env,info),extensionRegistry,null,ignoredRegistry,null,pathManagerService);
  }
 else   if (type == Type.DOMAIN) {
    final HostControllerEnvironment env=createHostControllerEnvironment();
    final LocalHostControllerInfoImpl info=createLocalHostControllerInfo(env);
    final IgnoredDomainResourceRegistry ignoredRegistry=new IgnoredDomainResourceRegistry(info);
    DomainModelUtil.initializeMasterDomainRegistry(rootRegistration,new NullConfigurationPersister(),createContentRepository(),createHostFileRepository(),createDomainController(env,info),new ExtensionRegistry(ProcessType.HOST_CONTROLLER,runningModeControl),pathManagerService);
    HostModelUtil.createRootRegistry(rootRegistration,env,ignoredRegistry,new HostModelRegistrar(){
      @Override public void registerHostModel(      String hostName,      ManagementResourceRegistration root){
      }
    }
);
  }
  if (modelInitializer != null) {
    modelInitializer.populateModel(rootResource);
  }
}",0.9991913310690604
167825,"private ContentRepository createContentRepository(){
  return new ContentRepository(){
    @Override public void removeContent(    byte[] hash){
    }
    @Override public boolean hasContent(    byte[] hash){
      return false;
    }
    @Override public VirtualFile getContent(    byte[] hash){
      return null;
    }
    @Override public byte[] addContent(    InputStream stream) throws IOException {
      return null;
    }
  }
;
}","private ContentRepository createContentRepository(){
  return new ContentRepository(){
    @Override public void removeContent(    byte[] hash){
    }
    @Override public boolean hasContent(    byte[] hash){
      return false;
    }
    @Override public VirtualFile getContent(    byte[] hash){
      return null;
    }
    @Override public byte[] addContent(    InputStream stream) throws IOException {
      return null;
    }
    @Override public boolean syncContent(    byte[] hash){
      return false;
    }
  }
;
}",0.9053069719042665
167826,"@Message(id=18772,value=""String_Node_Str"") XMLStreamException duplicateJBossXmlNamespace(String namespace,@Param Location location);","@Message(id=18772,value=""String_Node_Str"") XMLStreamException duplicateJBossXmlNamespace(QName namespace,@Param Location location);",0.9581749049429658
167827,"@Message(id=18773,value=""String_Node_Str"") DeploymentUnitProcessingException equivilentNamespacesInJBossXml(String key,String s);","@Message(id=18773,value=""String_Node_Str"") DeploymentUnitProcessingException equivilentNamespacesInJBossXml(QName key,QName s);",0.9140625
167828,"@Override public void readElement(final XMLExtendedStreamReader xmlExtendedStreamReader,final JBossAllXmlParseContext jBossXmlParseContext) throws XMLStreamException {
  final Location nsLocation=xmlExtendedStreamReader.getLocation();
  final Object result=parserDescription.getParser().parse(xmlExtendedStreamReader,jBossXmlParseContext.getDeploymentUnit());
  jBossXmlParseContext.addResult(xmlExtendedStreamReader.getNamespaceURI(),result,nsLocation);
}","@Override public void readElement(final XMLExtendedStreamReader xmlExtendedStreamReader,final JBossAllXmlParseContext jBossXmlParseContext) throws XMLStreamException {
  final Location nsLocation=xmlExtendedStreamReader.getLocation();
  final QName elementName=xmlExtendedStreamReader.getName();
  final Object result=parserDescription.getParser().parse(xmlExtendedStreamReader,jBossXmlParseContext.getDeploymentUnit());
  jBossXmlParseContext.addResult(elementName,result,nsLocation);
}",0.8907741251325557
167829,"@Override public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot root=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  VirtualFile descriptor=null;
  for (  final String loc : DEPLOYMENT_STRUCTURE_DESCRIPTOR_LOCATIONS) {
    final VirtualFile file=root.getRoot().getChild(loc);
    if (file.exists()) {
      descriptor=file;
      break;
    }
  }
  if (descriptor == null) {
    return;
  }
  final XMLMapper mapper=XMLMapper.Factory.create();
  final Map<String,AttachmentKey<?>> namespaceAttachments=new HashMap<String,AttachmentKey<?>>();
  for (  final JBossAllXMLParserDescription<?> parser : deploymentUnit.getAttachmentList(JBossAllXMLParserDescription.ATTACHMENT_KEY)) {
    namespaceAttachments.put(parser.getRootElement().getNamespaceURI(),parser.getAttachmentKey());
    mapper.registerRootElement(parser.getRootElement(),new JBossAllXMLElementReader(parser));
  }
  mapper.registerRootElement(new QName(Namespace.JBOSS_1_0.getUriString(),JBOSS),Parser.INSTANCE);
  mapper.registerRootElement(new QName(Namespace.NONE.getUriString(),JBOSS),Parser.INSTANCE);
  final JBossAllXmlParseContext context=new JBossAllXmlParseContext(deploymentUnit);
  parse(descriptor,mapper,context);
  final Map<AttachmentKey<?>,String> usedNamespaces=new HashMap<AttachmentKey<?>,String>();
  for (  Map.Entry<String,Object> entry : context.getParseResults().entrySet()) {
    final AttachmentKey attachmentKey=namespaceAttachments.get(entry.getKey());
    if (usedNamespaces.containsKey(attachmentKey)) {
      ServerMessages.MESSAGES.equivilentNamespacesInJBossXml(entry.getKey(),usedNamespaces.get(attachmentKey));
    }
    usedNamespaces.put(attachmentKey,entry.getKey());
    deploymentUnit.putAttachment(attachmentKey,entry.getValue());
  }
}","@Override public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ResourceRoot root=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  VirtualFile descriptor=null;
  for (  final String loc : DEPLOYMENT_STRUCTURE_DESCRIPTOR_LOCATIONS) {
    final VirtualFile file=root.getRoot().getChild(loc);
    if (file.exists()) {
      descriptor=file;
      break;
    }
  }
  if (descriptor == null) {
    return;
  }
  final XMLMapper mapper=XMLMapper.Factory.create();
  final Map<QName,AttachmentKey<?>> namespaceAttachments=new HashMap<QName,AttachmentKey<?>>();
  for (  final JBossAllXMLParserDescription<?> parser : deploymentUnit.getAttachmentList(JBossAllXMLParserDescription.ATTACHMENT_KEY)) {
    namespaceAttachments.put(parser.getRootElement(),parser.getAttachmentKey());
    mapper.registerRootElement(parser.getRootElement(),new JBossAllXMLElementReader(parser));
  }
  mapper.registerRootElement(new QName(Namespace.JBOSS_1_0.getUriString(),JBOSS),Parser.INSTANCE);
  mapper.registerRootElement(new QName(Namespace.NONE.getUriString(),JBOSS),Parser.INSTANCE);
  final JBossAllXmlParseContext context=new JBossAllXmlParseContext(deploymentUnit);
  parse(descriptor,mapper,context);
  final Map<AttachmentKey<?>,QName> usedNamespaces=new HashMap<AttachmentKey<?>,QName>();
  for (  Map.Entry<QName,Object> entry : context.getParseResults().entrySet()) {
    final AttachmentKey attachmentKey=namespaceAttachments.get(entry.getKey());
    if (usedNamespaces.containsKey(attachmentKey)) {
      ServerMessages.MESSAGES.equivilentNamespacesInJBossXml(entry.getKey(),usedNamespaces.get(attachmentKey));
    }
    usedNamespaces.put(attachmentKey,entry.getKey());
    deploymentUnit.putAttachment(attachmentKey,entry.getValue());
  }
}",0.9806417395916204
167830,"public Map<String,Object> getParseResults(){
  return Collections.unmodifiableMap(parseResults);
}","public Map<QName,Object> getParseResults(){
  return Collections.unmodifiableMap(parseResults);
}",0.9435897435897436
167831,"public void addResult(final String namespace,final Object result,final Location location) throws XMLStreamException {
  if (parseResults.containsKey(namespace)) {
    throw ServerMessages.MESSAGES.duplicateJBossXmlNamespace(namespace,location);
  }
  parseResults.put(namespace,result);
}","public void addResult(final QName namespace,final Object result,final Location location) throws XMLStreamException {
  if (parseResults.containsKey(namespace)) {
    throw ServerMessages.MESSAGES.duplicateJBossXmlNamespace(namespace,location);
  }
  parseResults.put(namespace,result);
}",0.9808695652173912
167832,"public XmlAuthenticationResourceDefinition(){
  super(PathElement.pathElement(ModelDescriptionConstants.AUTHENTICATION,ModelDescriptionConstants.USER),ManagementDescription.getResourceDescriptionResolver(""String_Node_Str""),new SecurityRealmChildAddHandler(true),new SecurityRealmChildRemoveHandler(true),OperationEntry.Flag.RESTART_RESOURCE_SERVICES,OperationEntry.Flag.RESTART_RESOURCE_SERVICES);
}","public XmlAuthenticationResourceDefinition(){
  super(PathElement.pathElement(ModelDescriptionConstants.AUTHENTICATION,ModelDescriptionConstants.USERS),ManagementDescription.getResourceDescriptionResolver(""String_Node_Str""),new SecurityRealmChildAddHandler(true),new SecurityRealmChildRemoveHandler(true),OperationEntry.Flag.RESTART_RESOURCE_SERVICES,OperationEntry.Flag.RESTART_RESOURCE_SERVICES);
}",0.9987484355444304
167833,"public synchronized void persistProperties() throws IOException {
  Properties toSave=(Properties)properties.clone();
  File backup=new File(propertiesFile.getCanonicalPath() + ""String_Node_Str"");
  if (backup.exists()) {
    if (backup.delete() == false) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  if (propertiesFile.renameTo(backup) == false) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  FileReader fr=new FileReader(backup);
  BufferedReader br=new BufferedReader(fr);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(propertiesFile),""String_Node_Str""));
  try {
    String line;
    while ((line=br.readLine()) != null) {
      String trimmed=line.trim();
      if (trimmed.startsWith(""String_Node_Str"")) {
        bw.append(line);
        bw.newLine();
      }
 else       if (trimmed.length() == 0) {
        bw.newLine();
      }
 else {
        int equals=trimmed.indexOf('=');
        if (equals > 0) {
          String userName=trimmed.substring(0,equals);
          if (toSave.containsKey(userName)) {
            String escapedUserName=escapeString(userName,ESCAPE_ARRAY);
            bw.append(escapedUserName + ""String_Node_Str"" + toSave.getProperty(userName));
            bw.newLine();
            toSave.remove(userName);
          }
        }
      }
    }
    for (    Object currentKey : toSave.keySet()) {
      String escapedUserName=escapeString((String)currentKey,ESCAPE_ARRAY);
      bw.append(escapedUserName + ""String_Node_Str"" + toSave.getProperty((String)currentKey));
      bw.newLine();
    }
    bw.newLine();
  }
  finally {
    safeClose(bw);
    safeClose(br);
    safeClose(fr);
  }
}","public synchronized void persistProperties() throws IOException {
  Properties toSave=(Properties)properties.clone();
  File backup=new File(propertiesFile.getCanonicalPath() + ""String_Node_Str"");
  if (backup.exists()) {
    if (backup.delete() == false) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  if (propertiesFile.renameTo(backup) == false) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  FileReader fr=new FileReader(backup);
  BufferedReader br=new BufferedReader(fr);
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(propertiesFile),""String_Node_Str""));
  try {
    String line;
    while ((line=br.readLine()) != null) {
      String trimmed=line.trim();
      if (trimmed.startsWith(""String_Node_Str"")) {
        bw.append(line);
        bw.newLine();
      }
 else       if (trimmed.length() == 0) {
        bw.newLine();
      }
 else {
        int equals=trimmed.indexOf('=');
        if (equals > 0) {
          String userName=trimmed.substring(0,equals);
          if (toSave.containsKey(userName)) {
            String escapedUserName=escapeString(userName,ESCAPE_ARRAY);
            bw.append(escapedUserName + ""String_Node_Str"" + toSave.getProperty(userName));
            bw.newLine();
            toSave.remove(userName);
          }
        }
      }
    }
    for (    Object currentKey : toSave.keySet()) {
      String escapedUserName=escapeString((String)currentKey,ESCAPE_ARRAY);
      bw.append(escapedUserName + ""String_Node_Str"" + toSave.getProperty((String)currentKey));
      bw.newLine();
    }
  }
  finally {
    safeClose(bw);
    safeClose(br);
    safeClose(fr);
  }
}",0.9946839929119904
167834,"public ConfirmationChoice(ConsoleWrapper theConsole,final String message,final String prompt,final State yesState,final State noState){
  this.theConsole=theConsole;
  this.message=message;
  this.prompt=prompt;
  this.yesState=yesState;
  this.noState=noState;
}","public ConfirmationChoice(ConsoleWrapper theConsole,final String message,final String prompt,final State yesState,final State noState){
  this.theConsole=theConsole;
  this.message=message;
  this.prompt=prompt;
  this.yesState=yesState;
  this.noState=noState;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.8594771241830066
167835,"@Override public State execute(){
  if (message != null) {
    theConsole.printf(message);
    theConsole.printf(NEW_LINE);
  }
  theConsole.printf(prompt);
  String temp=theConsole.readLine(SPACE);
switch (convertResponse(temp)) {
case YES:
    return yesState;
case NO:
  return noState;
default :
return new ErrorState(null,MESSAGES.invalidConfirmationResponse(),this);
}
}","@Override public State execute(){
  if (message != null) {
    theConsole.printf(message);
    theConsole.printf(NEW_LINE);
  }
  theConsole.printf(prompt);
  String temp=theConsole.readLine(SPACE);
switch (convertResponse(temp)) {
case YES:
    return yesState;
case NO:
  return noState;
default :
return new ErrorState(theConsole,MESSAGES.invalidConfirmationResponse(),this);
}
}",0.9815303430079156
167836,"public DuplicateUserCheckState(final ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
}","public DuplicateUserCheckState(final ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.7860696517412935
167837,"public ErrorState(ConsoleWrapper theConsole,String errorMessage,State nextState,StateValues stateValues){
  this.errorMessage=errorMessage;
  this.nextState=nextState;
  this.stateValues=stateValues;
  this.theConsole=theConsole;
}","public ErrorState(ConsoleWrapper theConsole,String errorMessage,State nextState,StateValues stateValues){
  this.errorMessage=errorMessage;
  this.nextState=nextState;
  this.stateValues=stateValues;
  this.theConsole=theConsole;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.843065693430657
167838,"public PromptNewUserState(ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
}","public PromptNewUserState(ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.7736842105263158
167839,"public PromptPasswordState(ConsoleWrapper theConsole,StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
}","public PromptPasswordState(ConsoleWrapper theConsole,StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.7675675675675676
167840,"@Override public State execute(){
  State continuingState=new WeakCheckState(theConsole,stateValues);
  if (stateValues.isSilentOrNonInteractive() == false) {
    theConsole.printf(MESSAGES.passwordPrompt());
    char[] tempChar=theConsole.readPassword(""String_Node_Str"");
    if (tempChar == null || tempChar.length == 0) {
      return new ErrorState(theConsole,MESSAGES.noPasswordExiting());
    }
    theConsole.printf(MESSAGES.passwordConfirmationPrompt());
    char[] secondTempChar=theConsole.readPassword(""String_Node_Str"");
    if (secondTempChar == null) {
      secondTempChar=new char[0];
    }
    if (Arrays.equals(tempChar,secondTempChar) == false) {
      return new ErrorState(null,MESSAGES.passwordMisMatch(),this);
    }
    stateValues.setPassword(tempChar);
    if (!stateValues.isManagement()) {
      theConsole.printf(MESSAGES.rolesPrompt());
      String userRoles=stateValues.getKnownRoles().get(stateValues.getUserName());
      stateValues.setRoles(theConsole.readLine(""String_Node_Str"",(userRoles == null ? ""String_Node_Str"" : userRoles)));
    }
  }
  return continuingState;
}","@Override public State execute(){
  State continuingState=new WeakCheckState(theConsole,stateValues);
  if (stateValues.isSilentOrNonInteractive() == false) {
    theConsole.printf(MESSAGES.passwordPrompt());
    char[] tempChar=theConsole.readPassword(""String_Node_Str"");
    if (tempChar == null || tempChar.length == 0) {
      return new ErrorState(theConsole,MESSAGES.noPasswordExiting());
    }
    theConsole.printf(MESSAGES.passwordConfirmationPrompt());
    char[] secondTempChar=theConsole.readPassword(""String_Node_Str"");
    if (secondTempChar == null) {
      secondTempChar=new char[0];
    }
    if (Arrays.equals(tempChar,secondTempChar) == false) {
      return new ErrorState(theConsole,MESSAGES.passwordMisMatch(),this);
    }
    stateValues.setPassword(tempChar);
    if (!stateValues.isManagement()) {
      theConsole.printf(MESSAGES.rolesPrompt());
      String userRoles=stateValues.getKnownRoles().get(stateValues.getUserName());
      stateValues.setRoles(theConsole.readLine(""String_Node_Str"",(userRoles == null ? ""String_Node_Str"" : userRoles)));
    }
  }
  return continuingState;
}",0.9936936936936936
167841,"public PropertyFileFinder(ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
}","public PropertyFileFinder(ConsoleWrapper theConsole,final StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.7736842105263158
167842,"public PropertyFilePrompt(ConsoleWrapper theConsole){
  this.theConsole=theConsole;
}","public PropertyFilePrompt(ConsoleWrapper theConsole){
  this.theConsole=theConsole;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.6640625
167843,"@Override public State execute(){
  StateValues stateValues=new StateValues();
  theConsole.printf(AddPropertiesUser.NEW_LINE);
  theConsole.printf(MESSAGES.filePrompt());
  theConsole.printf(AddPropertiesUser.NEW_LINE);
  while (true) {
    String temp=theConsole.readLine(""String_Node_Str"");
    if (temp == null) {
      theConsole.printf(AddPropertiesUser.NEW_LINE);
      return null;
    }
    if (temp.length() > 0) {
switch (convertResponse(temp)) {
case MANAGEMENT:
        stateValues.setManagement(true);
      stateValues.setRealm(DEFAULT_MANAGEMENT_REALM);
    return new PropertyFileFinder(theConsole,stateValues);
case APPLICATION:
  stateValues.setManagement(false);
stateValues.setRealm(DEFAULT_APPLICATION_REALM);
return new PropertyFileFinder(theConsole,stateValues);
default :
return new ErrorState(null,MESSAGES.invalidChoiceResponse(),this);
}
}
 else {
stateValues.setManagement(true);
stateValues.setRealm(DEFAULT_MANAGEMENT_REALM);
return new PropertyFileFinder(theConsole,stateValues);
}
}
}","@Override public State execute(){
  StateValues stateValues=new StateValues();
  theConsole.printf(AddPropertiesUser.NEW_LINE);
  theConsole.printf(MESSAGES.filePrompt());
  theConsole.printf(AddPropertiesUser.NEW_LINE);
  while (true) {
    String temp=theConsole.readLine(""String_Node_Str"");
    if (temp == null) {
      theConsole.printf(AddPropertiesUser.NEW_LINE);
      return null;
    }
    if (temp.length() > 0) {
switch (convertResponse(temp)) {
case MANAGEMENT:
        stateValues.setManagement(true);
      stateValues.setRealm(DEFAULT_MANAGEMENT_REALM);
    return new PropertyFileFinder(theConsole,stateValues);
case APPLICATION:
  stateValues.setManagement(false);
stateValues.setRealm(DEFAULT_APPLICATION_REALM);
return new PropertyFileFinder(theConsole,stateValues);
default :
return new ErrorState(theConsole,MESSAGES.invalidChoiceResponse(),this);
}
}
 else {
stateValues.setManagement(true);
stateValues.setRealm(DEFAULT_MANAGEMENT_REALM);
return new PropertyFileFinder(theConsole,stateValues);
}
}
}",0.9931372549019608
167844,"public WeakCheckState(ConsoleWrapper theConsole,StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
}","public WeakCheckState(ConsoleWrapper theConsole,StateValues stateValues){
  this.theConsole=theConsole;
  this.stateValues=stateValues;
  if (theConsole.getConsole() == null) {
    throw MESSAGES.noConsoleAvailable();
  }
}",0.7611111111111111
167845,"@Override public State execute(){
  State retryState=stateValues.isSilentOrNonInteractive() ? null : new PromptNewUserState(theConsole,stateValues);
  if (Arrays.equals(stateValues.getUserName().toCharArray(),stateValues.getPassword())) {
    return new ErrorState(null,MESSAGES.usernamePasswordMatch(),retryState);
  }
  for (  char currentChar : stateValues.getUserName().toCharArray()) {
    if ((!isValidPunctuation(currentChar)) && (Character.isLetter(currentChar) || Character.isDigit(currentChar)) == false) {
      return new ErrorState(null,MESSAGES.usernameNotAlphaNumeric(),retryState);
    }
  }
  boolean weakUserName=false;
  for (  String current : BAD_USER_NAMES) {
    if (current.equals(stateValues.getUserName().toLowerCase())) {
      weakUserName=true;
      break;
    }
  }
  State continuingState=new DuplicateUserCheckState(theConsole,stateValues);
  if (weakUserName && stateValues.isSilentOrNonInteractive() == false) {
    String message=MESSAGES.usernameEasyToGuess(stateValues.getUserName());
    String prompt=MESSAGES.sureToAddUser(stateValues.getUserName());
    State noState=new PromptNewUserState(theConsole,stateValues);
    return new ConfirmationChoice(theConsole,message,prompt,continuingState,noState);
  }
  return continuingState;
}","@Override public State execute(){
  State retryState=stateValues.isSilentOrNonInteractive() ? null : new PromptNewUserState(theConsole,stateValues);
  if (Arrays.equals(stateValues.getUserName().toCharArray(),stateValues.getPassword())) {
    return new ErrorState(theConsole,MESSAGES.usernamePasswordMatch(),retryState);
  }
  for (  char currentChar : stateValues.getUserName().toCharArray()) {
    if ((!isValidPunctuation(currentChar)) && (Character.isLetter(currentChar) || Character.isDigit(currentChar)) == false) {
      return new ErrorState(theConsole,MESSAGES.usernameNotAlphaNumeric(),retryState);
    }
  }
  boolean weakUserName=false;
  for (  String current : BAD_USER_NAMES) {
    if (current.equals(stateValues.getUserName().toLowerCase())) {
      weakUserName=true;
      break;
    }
  }
  State continuingState=new DuplicateUserCheckState(theConsole,stateValues);
  if (weakUserName && stateValues.isSilentOrNonInteractive() == false) {
    String message=MESSAGES.usernameEasyToGuess(stateValues.getUserName());
    String prompt=MESSAGES.sureToAddUser(stateValues.getUserName());
    State noState=new PromptNewUserState(theConsole,stateValues);
    return new ConfirmationChoice(theConsole,message,prompt,continuingState,noState);
  }
  return continuingState;
}",0.989071038251366
167846,"@Override public Object getConsole(){
  return null;
}","@Override public Object getConsole(){
  return this;
}",0.925925925925926
167847,"/** 
 * Generates and returns the URI that corresponds to the remote outbound connection. If the URI has already been generated in a previous request, then it returns that back. Else the URI is constructed out of the outbound socket binding's destination address and destination port.
 * @return
 * @throws IOException
 * @throws URISyntaxException
 */
private synchronized URI getConnectionURI() throws IOException, URISyntaxException {
  if (this.connectionURI != null) {
    return this.connectionURI;
  }
  final OutboundSocketBinding destinationOutboundSocket=this.destinationOutboundSocketBindingInjectedValue.getValue();
  final InetAddress destinationAddress=destinationOutboundSocket.getDestinationAddress();
  final int port=destinationOutboundSocket.getDestinationPort();
  this.connectionURI=new URI(REMOTE_URI_SCHEME + destinationAddress.getHostAddress() + ""String_Node_Str""+ port);
  return this.connectionURI;
}","/** 
 * Generates and returns the URI that corresponds to the remote outbound connection. If the URI has already been generated in a previous request, then it returns that back. Else the URI is constructed out of the outbound socket binding's destination address and destination port.
 * @return
 * @throws IOException
 * @throws URISyntaxException
 */
private synchronized URI getConnectionURI() throws IOException, URISyntaxException {
  if (this.connectionURI != null) {
    return this.connectionURI;
  }
  final OutboundSocketBinding destinationOutboundSocket=this.destinationOutboundSocketBindingInjectedValue.getValue();
  final InetAddress destinationAddress=destinationOutboundSocket.getDestinationAddress();
  final int port=destinationOutboundSocket.getDestinationPort();
  this.connectionURI=new URI(REMOTE_URI_SCHEME + NetworkUtils.formatPossibleIpv6Address(destinationAddress.getHostAddress()) + ""String_Node_Str""+ port);
  return this.connectionURI;
}",0.96723044397463
167848,"/** 
 * Create the SystemPropertyRemoveHandler
 * @param processEnvironment
 */
public SystemPropertyRemoveHandler(ProcessEnvironment processEnvironment){
  this.processEnvironment=processEnvironment;
}","/** 
 * Create the SystemPropertyRemoveHandler
 * @param processEnvironment the process environment to use to validate changes. May be {@code null}
 */
public SystemPropertyRemoveHandler(ProcessEnvironment processEnvironment){
  this.processEnvironment=processEnvironment;
}",0.8487394957983193
167849,"protected boolean requiresRuntime(OperationContext context){
  return context.isNormalServer();
}","protected boolean requiresRuntime(OperationContext context){
  return true;
}",0.8620689655172413
167850,"@Override protected boolean requiresRuntime(OperationContext context){
  return context.isNormalServer();
}","@Override protected boolean requiresRuntime(OperationContext context){
  return true;
}",0.8762886597938144
167851,"private void completeRemoteTransaction(OperationContext context,ModelNode operation,AtomicReference<ModelController.OperationTransaction> txRef,AtomicReference<ModelNode> preparedResultRef,AtomicReference<ModelNode> finalResultRef){
  boolean txCompleted=false;
  try {
    ModelNode preparedResponse=preparedResultRef.get();
    ModelNode preparedResult=preparedResponse.get(RESULT);
    if (preparedResponse.hasDefined(FAILURE_DESCRIPTION)) {
      context.getFailureDescription().set(preparedResponse.get(FAILURE_DESCRIPTION));
      if (preparedResult.isDefined()) {
        context.getResult().set(preparedResult);
      }
    }
 else {
      context.getResult().set(preparedResult);
    }
    OperationContext.ResultAction resultAction=context.completeStep();
    ModelController.OperationTransaction tx=txRef.get();
    try {
      if (resultAction == OperationContext.ResultAction.KEEP) {
        tx.commit();
      }
 else {
        tx.rollback();
      }
    }
  finally {
      txCompleted=true;
    }
    ModelNode finalResponse=finalResultRef.get();
    if (finalResponse != null) {
      ModelNode finalResult=finalResponse.get(RESULT);
      if (finalResponse.hasDefined(FAILURE_DESCRIPTION)) {
        context.getFailureDescription().set(finalResponse.get(FAILURE_DESCRIPTION));
        if (finalResult.isDefined()) {
          context.getResult().set(finalResult);
        }
      }
 else {
        context.getResult().set(finalResult);
      }
    }
 else {
      ControllerLogger.SERVER_MANAGEMENT_LOGGER.noFinalProxyOutcomeReceived(operation.get(OP),operation.get(OP_ADDR),proxyController.getProxyNodeAddress().toModelNode());
    }
  }
  finally {
    if (!txCompleted && txRef.get() != null) {
      txRef.get().rollback();
    }
  }
}","private void completeRemoteTransaction(OperationContext context,ModelNode operation,AtomicReference<ModelController.OperationTransaction> txRef,AtomicReference<ModelNode> preparedResultRef,AtomicReference<ModelNode> finalResultRef){
  boolean txCompleted=false;
  try {
    ModelNode preparedResponse=preparedResultRef.get();
    ModelNode preparedResult=preparedResponse.get(RESULT);
    if (preparedResponse.hasDefined(FAILURE_DESCRIPTION)) {
      context.getFailureDescription().set(preparedResponse.get(FAILURE_DESCRIPTION));
      if (preparedResult.isDefined()) {
        context.getResult().set(preparedResult);
      }
    }
 else {
      context.getResult().set(preparedResult);
    }
    OperationContext.ResultAction resultAction=context.completeStep();
    ModelController.OperationTransaction tx=txRef.get();
    try {
      if (resultAction == OperationContext.ResultAction.KEEP) {
        tx.commit();
      }
 else {
        tx.rollback();
      }
    }
  finally {
      txCompleted=true;
    }
    ModelNode finalResponse=finalResultRef.get();
    if (finalResponse != null) {
      ModelNode finalResult=finalResponse.get(RESULT);
      if (finalResponse.hasDefined(FAILURE_DESCRIPTION)) {
        context.getFailureDescription().set(finalResponse.get(FAILURE_DESCRIPTION));
        if (finalResult.isDefined()) {
          context.getResult().set(finalResult);
        }
      }
 else {
        context.getResult().set(finalResult);
      }
      if (context.getProcessType() == ProcessType.HOST_CONTROLLER && finalResponse.has(SERVER_GROUPS)) {
        context.getServerResults().set(finalResponse.get(SERVER_GROUPS));
      }
    }
 else {
      ControllerLogger.SERVER_MANAGEMENT_LOGGER.noFinalProxyOutcomeReceived(operation.get(OP),operation.get(OP_ADDR),proxyController.getProxyNodeAddress().toModelNode());
    }
  }
  finally {
    if (!txCompleted && txRef.get() != null) {
      txRef.get().rollback();
    }
  }
}",0.9494731153742232
167852,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  context.completeStep();
  final boolean isDomain=isDomainOperation(operation);
  boolean shouldContinue=collectDomainFailure(context,isDomain);
  shouldContinue=shouldContinue && collectContextFailure(context,isDomain);
  shouldContinue=shouldContinue && collectHostFailures(context,isDomain);
  if (shouldContinue) {
    ModelNode contextResult=context.getResult();
    contextResult.setEmptyObject();
    contextResult.set(getDomainResults(operation));
    if (domainOperationContext.getServerResults().size() > 0) {
      populateServerGroupResults(context,context.getResult());
    }
  }
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  context.completeStep();
  final boolean isDomain=isDomainOperation(operation);
  boolean shouldContinue=collectDomainFailure(context,isDomain);
  shouldContinue=shouldContinue && collectContextFailure(context,isDomain);
  shouldContinue=shouldContinue && collectHostFailures(context,isDomain);
  if (shouldContinue) {
    ModelNode contextResult=context.getResult();
    contextResult.setEmptyObject();
    contextResult.set(getDomainResults(operation));
    if (domainOperationContext.getServerResults().size() > 0) {
      populateServerGroupResults(context,context.getResult());
    }
 else {
      context.getServerResults();
    }
  }
}",0.9670781893004116
167853,"@Override public ModelNode getDomainOperation(){
  List<ModelNode> domainSteps=new ArrayList<ModelNode>();
  for (  HostControllerExecutionSupport step : steps) {
    ModelNode stepNode=step.getDomainOperation();
    if (stepNode != null) {
      domainSteps.add(stepNode);
    }
  }
  ModelNode stepsParam=new ModelNode();
  for (  ModelNode stepNode : domainSteps) {
    stepsParam.add(stepNode);
  }
  ModelNode result=Util.getEmptyOperation(COMPOSITE,new ModelNode());
  result.get(STEPS).set(stepsParam);
  return result;
}","@Override public ModelNode getDomainOperation(){
  List<ModelNode> domainSteps=new ArrayList<ModelNode>();
  for (  HostControllerExecutionSupport step : steps) {
    ModelNode stepNode=step.getDomainOperation();
    if (stepNode != null) {
      domainSteps.add(stepNode);
    }
  }
  if (domainSteps.size() == 0) {
    return null;
  }
  ModelNode stepsParam=new ModelNode();
  for (  ModelNode stepNode : domainSteps) {
    stepsParam.add(stepNode);
  }
  ModelNode result=Util.getEmptyOperation(COMPOSITE,new ModelNode());
  result.get(STEPS).set(stepsParam);
  return result;
}",0.9513513513513514
167854,"protected void writeSocketBindingGroup(XMLExtendedStreamWriter writer,ModelNode bindingGroup,boolean fromServer) throws XMLStreamException {
  writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
  SocketBindingGroupResourceDefinition.NAME.marshallAsAttribute(bindingGroup,writer);
  SocketBindingGroupResourceDefinition.DEFAULT_INTERFACE.marshallAsAttribute(bindingGroup,writer);
  if (fromServer) {
    SocketBindingGroupResourceDefinition.PORT_OFFSET.marshallAsAttribute(bindingGroup,writer);
  }
  if (!fromServer) {
    SocketBindingGroupResourceDefinition.INCLUDES.marshallAsElement(bindingGroup,writer);
  }
  if (bindingGroup.hasDefined(SOCKET_BINDING)) {
    ModelNode bindings=bindingGroup.get(SOCKET_BINDING);
    for (    String bindingName : bindings.keys()) {
      ModelNode binding=bindings.get(bindingName);
      writer.writeStartElement(Element.SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,bindingName);
      ModelNode attr=binding.get(INTERFACE);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.INTERFACE,attr.asString());
      }
      attr=binding.get(PORT);
      writeAttribute(writer,Attribute.PORT,attr.asString());
      attr=binding.get(FIXED_PORT);
      if (attr.isDefined() && attr.asBoolean()) {
        writeAttribute(writer,Attribute.FIXED_PORT,attr.asString());
      }
      attr=binding.get(MULTICAST_ADDRESS);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_ADDRESS,attr.asString());
      }
      attr=binding.get(MULTICAST_PORT);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString());
      }
      attr=binding.get(CLIENT_MAPPINGS);
      if (attr.isDefined()) {
        for (        ModelNode mapping : attr.asList()) {
          writer.writeEmptyElement(Element.CLIENT_MAPPING.getLocalName());
          attr=mapping.get(SOURCE_NETWORK);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.SOURCE_NETWORK,attr.asString());
          }
          attr=mapping.get(DESTINATION_ADDRESS);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_ADDRESS,attr.asString());
          }
          attr=mapping.get(DESTINATION_PORT);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_PORT,attr.asString());
          }
        }
      }
      writer.writeEndElement();
      attr=binding.get(CLIENT_MAPPINGS);
      if (attr.isDefined()) {
        for (        ModelNode mapping : attr.asList()) {
          writer.writeEmptyElement(Element.CLIENT_MAPPING.getLocalName());
          attr=binding.get(SOURCE_NETWORK);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.SOURCE_NETWORK,attr.asString());
          }
          attr=binding.get(DESTINATION_ADDRESS);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_ADDRESS,attr.asString());
          }
          attr=binding.get(DESTINATION_PORT);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_PORT,attr.asString());
          }
        }
      }
    }
  }
  if (bindingGroup.hasDefined(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode localDestinationOutboundSocketBindings=bindingGroup.get(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : localDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=localDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      if (outboundSocketBinding.hasDefined(SOURCE_PORT)) {
        final String sourcePort=outboundSocketBinding.get(SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.SOURCE_PORT,sourcePort);
      }
      if (outboundSocketBinding.hasDefined(SOURCE_INTERFACE)) {
        final String sourceInterface=outboundSocketBinding.get(SOURCE_INTERFACE).asString();
        writeAttribute(writer,Attribute.SOURCE_INTERFACE,sourceInterface);
      }
      if (outboundSocketBinding.hasDefined(FIXED_SOURCE_PORT)) {
        final String fixedSourcePort=outboundSocketBinding.get(FIXED_SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.FIXED_SOURCE_PORT,fixedSourcePort);
      }
      writer.writeStartElement(Element.LOCAL_DESTINATION.getLocalName());
      final ModelNode socketBindingRef=outboundSocketBinding.get(SOCKET_BINDING_REF);
      writeAttribute(writer,Attribute.SOCKET_BINDING_REF,socketBindingRef.asString());
      writer.writeEndElement();
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode remoteDestinationOutboundSocketBindings=bindingGroup.get(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : remoteDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=remoteDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      if (outboundSocketBinding.hasDefined(SOURCE_PORT)) {
        final String sourcePort=outboundSocketBinding.get(SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.SOURCE_PORT,sourcePort);
      }
      if (outboundSocketBinding.hasDefined(SOURCE_INTERFACE)) {
        final String sourceInterface=outboundSocketBinding.get(SOURCE_INTERFACE).asString();
        writeAttribute(writer,Attribute.SOURCE_INTERFACE,sourceInterface);
      }
      if (outboundSocketBinding.hasDefined(FIXED_SOURCE_PORT)) {
        final String fixedSourcePort=outboundSocketBinding.get(FIXED_SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.FIXED_SOURCE_PORT,fixedSourcePort);
      }
      writer.writeStartElement(Element.REMOTE_DESTINATION.getLocalName());
      final ModelNode host=outboundSocketBinding.get(HOST);
      writeAttribute(writer,Attribute.HOST,host.asString());
      final ModelNode destPort=outboundSocketBinding.get(PORT);
      writeAttribute(writer,Attribute.PORT,destPort.asString());
      writer.writeEndElement();
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}","protected void writeSocketBindingGroup(XMLExtendedStreamWriter writer,ModelNode bindingGroup,boolean fromServer) throws XMLStreamException {
  writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
  SocketBindingGroupResourceDefinition.NAME.marshallAsAttribute(bindingGroup,writer);
  SocketBindingGroupResourceDefinition.DEFAULT_INTERFACE.marshallAsAttribute(bindingGroup,writer);
  if (fromServer) {
    SocketBindingGroupResourceDefinition.PORT_OFFSET.marshallAsAttribute(bindingGroup,writer);
  }
  if (!fromServer) {
    SocketBindingGroupResourceDefinition.INCLUDES.marshallAsElement(bindingGroup,writer);
  }
  if (bindingGroup.hasDefined(SOCKET_BINDING)) {
    ModelNode bindings=bindingGroup.get(SOCKET_BINDING);
    for (    String bindingName : bindings.keys()) {
      ModelNode binding=bindings.get(bindingName);
      writer.writeStartElement(Element.SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,bindingName);
      ModelNode attr=binding.get(INTERFACE);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.INTERFACE,attr.asString());
      }
      attr=binding.get(PORT);
      writeAttribute(writer,Attribute.PORT,attr.asString());
      attr=binding.get(FIXED_PORT);
      if (attr.isDefined() && attr.asBoolean()) {
        writeAttribute(writer,Attribute.FIXED_PORT,attr.asString());
      }
      attr=binding.get(MULTICAST_ADDRESS);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_ADDRESS,attr.asString());
      }
      attr=binding.get(MULTICAST_PORT);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString());
      }
      attr=binding.get(CLIENT_MAPPINGS);
      if (attr.isDefined()) {
        for (        ModelNode mapping : attr.asList()) {
          writer.writeEmptyElement(Element.CLIENT_MAPPING.getLocalName());
          attr=mapping.get(SOURCE_NETWORK);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.SOURCE_NETWORK,attr.asString());
          }
          attr=mapping.get(DESTINATION_ADDRESS);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_ADDRESS,attr.asString());
          }
          attr=mapping.get(DESTINATION_PORT);
          if (attr.isDefined()) {
            writeAttribute(writer,Attribute.DESTINATION_PORT,attr.asString());
          }
        }
      }
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode localDestinationOutboundSocketBindings=bindingGroup.get(LOCAL_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : localDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=localDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      if (outboundSocketBinding.hasDefined(SOURCE_PORT)) {
        final String sourcePort=outboundSocketBinding.get(SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.SOURCE_PORT,sourcePort);
      }
      if (outboundSocketBinding.hasDefined(SOURCE_INTERFACE)) {
        final String sourceInterface=outboundSocketBinding.get(SOURCE_INTERFACE).asString();
        writeAttribute(writer,Attribute.SOURCE_INTERFACE,sourceInterface);
      }
      if (outboundSocketBinding.hasDefined(FIXED_SOURCE_PORT)) {
        final String fixedSourcePort=outboundSocketBinding.get(FIXED_SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.FIXED_SOURCE_PORT,fixedSourcePort);
      }
      writer.writeStartElement(Element.LOCAL_DESTINATION.getLocalName());
      final ModelNode socketBindingRef=outboundSocketBinding.get(SOCKET_BINDING_REF);
      writeAttribute(writer,Attribute.SOCKET_BINDING_REF,socketBindingRef.asString());
      writer.writeEndElement();
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING)) {
    final ModelNode remoteDestinationOutboundSocketBindings=bindingGroup.get(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING);
    for (    final String outboundSocketBindingName : remoteDestinationOutboundSocketBindings.keys()) {
      final ModelNode outboundSocketBinding=remoteDestinationOutboundSocketBindings.get(outboundSocketBindingName);
      writer.writeStartElement(Element.OUTBOUND_SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,outboundSocketBindingName);
      if (outboundSocketBinding.hasDefined(SOURCE_PORT)) {
        final String sourcePort=outboundSocketBinding.get(SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.SOURCE_PORT,sourcePort);
      }
      if (outboundSocketBinding.hasDefined(SOURCE_INTERFACE)) {
        final String sourceInterface=outboundSocketBinding.get(SOURCE_INTERFACE).asString();
        writeAttribute(writer,Attribute.SOURCE_INTERFACE,sourceInterface);
      }
      if (outboundSocketBinding.hasDefined(FIXED_SOURCE_PORT)) {
        final String fixedSourcePort=outboundSocketBinding.get(FIXED_SOURCE_PORT).asString();
        writeAttribute(writer,Attribute.FIXED_SOURCE_PORT,fixedSourcePort);
      }
      writer.writeStartElement(Element.REMOTE_DESTINATION.getLocalName());
      final ModelNode host=outboundSocketBinding.get(HOST);
      writeAttribute(writer,Attribute.HOST,host.asString());
      final ModelNode destPort=outboundSocketBinding.get(PORT);
      writeAttribute(writer,Attribute.PORT,destPort.asString());
      writer.writeEndElement();
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}",0.9397038370285528
167855,"private ModelNode parseClientMapping(XMLExtendedStreamReader reader) throws XMLStreamException {
  final ModelNode mapping=new ModelNode();
  final ModelNode sourceNetwork=mapping.get(SOURCE_NETWORK);
  final ModelNode destination=mapping.get(DESTINATION_ADDRESS);
  final ModelNode destinationPort=mapping.get(DESTINATION_PORT);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SOURCE_NETWORK:
      validateAddressMask(value,reader.getLocation());
    sourceNetwork.set(value);
  break;
case DESTINATION_ADDRESS:
if (value == null || value.isEmpty()) {
  throw invalidAttributeValue(reader,i);
}
destination.set(value);
break;
case DESTINATION_PORT:
{
destinationPort.set(parseBoundedIntegerAttribute(reader,i,0,65535,true));
break;
}
}
}
if (!destination.isDefined()) {
throw MESSAGES.missingRequiredAttributes(new StringBuilder(DESTINATION_PORT),reader.getLocation());
}
requireNoContent(reader);
return mapping;
}","private ModelNode parseClientMapping(XMLExtendedStreamReader reader) throws XMLStreamException {
  final ModelNode mapping=new ModelNode();
  final ModelNode sourceNetwork=mapping.get(SOURCE_NETWORK);
  final ModelNode destination=mapping.get(DESTINATION_ADDRESS);
  final ModelNode destinationPort=mapping.get(DESTINATION_PORT);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
    final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case SOURCE_NETWORK:
      validateAddressMask(value,reader.getLocation());
    sourceNetwork.set(value);
  break;
case DESTINATION_ADDRESS:
if (value == null || value.isEmpty()) {
  throw invalidAttributeValue(reader,i);
}
destination.set(value);
break;
case DESTINATION_PORT:
{
destinationPort.set(parseBoundedIntegerAttribute(reader,i,0,65535,true));
break;
}
}
}
if (!destination.isDefined()) {
throw MESSAGES.missingRequiredAttributes(new StringBuilder(DESTINATION_ADDRESS),reader.getLocation());
}
requireNoContent(reader);
return mapping;
}",0.99626400996264
167856,"FileSystemDeploymentService(final String relativeTo,final File deploymentDir,final File relativeToDir,final ModelControllerClient controllerClient,final ScheduledExecutorService scheduledExecutor,final ServerDeploymentRepository deploymentRepository,final ContentRepository contentRepository) throws OperationFailedException {
  if (contentRepository == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (scheduledExecutor == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (controllerClient == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (deploymentRepository == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (deploymentDir == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (!deploymentDir.exists()) {
    throw MESSAGES.directoryDoesNotExist(deploymentDir.getAbsolutePath());
  }
  if (!deploymentDir.isDirectory()) {
    throw MESSAGES.notADirectory(deploymentDir.getAbsolutePath());
  }
  if (!deploymentDir.canWrite()) {
    throw MESSAGES.directoryNotWritable(deploymentDir.getAbsolutePath());
  }
  this.relativeTo=relativeTo;
  this.deploymentDir=deploymentDir;
  this.controllerClient=controllerClient;
  this.scheduledExecutor=scheduledExecutor;
  this.deploymentRepository=deploymentRepository;
  this.contentRepository=contentRepository;
  if (relativeToDir != null) {
    String fullDir=deploymentDir.getAbsolutePath();
    String relDir=relativeToDir.getAbsolutePath();
    String sub=fullDir.substring(relDir.length());
    if (sub.startsWith(File.separator)) {
      sub=sub.length() == 1 ? ""String_Node_Str"" : sub.substring(1);
    }
    this.relativePath=sub.length() > 0 ? sub + ""String_Node_Str"" : sub;
  }
 else {
    relativePath=null;
  }
  establishDeployedContentList(deploymentDir);
}","FileSystemDeploymentService(final String relativeTo,final File deploymentDir,final File relativeToDir,final ModelControllerClient controllerClient,final ScheduledExecutorService scheduledExecutor,final ServerDeploymentRepository deploymentRepository,final ContentRepository contentRepository) throws OperationFailedException {
  if (contentRepository == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (scheduledExecutor == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (controllerClient == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (deploymentRepository == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (deploymentDir == null) {
    throw MESSAGES.nullVar(""String_Node_Str"");
  }
  if (!deploymentDir.exists()) {
    throw MESSAGES.directoryDoesNotExist(deploymentDir.getAbsolutePath());
  }
  if (!deploymentDir.isDirectory()) {
    throw MESSAGES.notADirectory(deploymentDir.getAbsolutePath());
  }
  if (!deploymentDir.canWrite()) {
    throw MESSAGES.directoryNotWritable(deploymentDir.getAbsolutePath());
  }
  this.relativeTo=relativeTo;
  this.deploymentDir=deploymentDir;
  this.controllerClient=controllerClient;
  this.scheduledExecutor=scheduledExecutor;
  this.deploymentRepository=deploymentRepository;
  this.contentRepository=contentRepository;
  if (relativeToDir != null) {
    String fullDir=deploymentDir.getAbsolutePath();
    String relDir=relativeToDir.getAbsolutePath();
    String sub=fullDir.substring(relDir.length());
    if (sub.startsWith(File.separator)) {
      sub=sub.length() == 1 ? ""String_Node_Str"" : sub.substring(1);
    }
    this.relativePath=sub.length() > 0 ? sub + File.separator : sub;
  }
 else {
    relativePath=null;
  }
  establishDeployedContentList(deploymentDir);
}",0.9913576805129636
167857,"/** 
 * Scan the given directory for content changes.
 * @param directory the directory to scan
 * @param scanContext context of the scan
 */
private void scanDirectory(final File directory,final String relativePath,final ScanContext scanContext){
  final File[] children=directory.listFiles(filter);
  if (children == null) {
    return;
  }
  for (  File child : children) {
    final String fileName=child.getName();
    if (fileName.endsWith(DEPLOYED)) {
      final String deploymentName=fileName.substring(0,fileName.length() - DEPLOYED.length());
      DeploymentMarker deploymentMarker=deployed.get(deploymentName);
      if (deploymentMarker == null) {
        scanContext.toRemove.remove(deploymentName);
        removeExtraneousMarker(child,fileName);
      }
 else {
        final File deploymentFile=new File(directory,deploymentName);
        if (deploymentFile.exists()) {
          scanContext.toRemove.remove(deploymentName);
          if (deployed.get(deploymentName).lastModified != child.lastModified()) {
            scanContext.scannerTasks.add(new RedeployTask(deploymentName,child.lastModified(),directory,!child.isDirectory()));
          }
        }
 else {
          boolean autoDeployable=deploymentMarker.archive ? autoDeployZip : autoDeployExploded;
          if (!autoDeployable) {
            scanContext.toRemove.remove(deploymentName);
            if (!deploymentMarker.archive) {
              scanContext.prematureExplodedDeletions.add(deploymentName);
            }
          }
        }
      }
    }
 else     if (fileName.endsWith(DO_DEPLOY) || (fileName.endsWith(FAILED_DEPLOY) && firstScan)) {
      final String markerStatus=fileName.endsWith(DO_DEPLOY) ? DO_DEPLOY : FAILED_DEPLOY;
      final String deploymentName=fileName.substring(0,fileName.length() - markerStatus.length());
      if (FAILED_DEPLOY.equals(markerStatus)) {
        ROOT_LOGGER.reattemptingFailedDeployment(deploymentName);
      }
      final File deploymentFile=new File(directory,deploymentName);
      if (!deploymentFile.exists()) {
        scanContext.ignoredMissingDeployments.add(deploymentName);
        continue;
      }
      long timestamp=getDeploymentTimestamp(deploymentFile);
      final String path=relativeTo == null ? deploymentFile.getAbsolutePath() : relativePath + deploymentName;
      final boolean archive=deploymentFile.isFile();
      addContentAddingTask(path,archive,deploymentName,deploymentFile,timestamp,scanContext);
    }
 else     if (fileName.endsWith(FAILED_DEPLOY)) {
      final String deploymentName=fileName.substring(0,fileName.length() - FAILED_DEPLOY.length());
      scanContext.toRemove.remove(deploymentName);
      if (!deployed.containsKey(deploymentName) && !(new File(child.getParent(),deploymentName).exists())) {
        removeExtraneousMarker(child,fileName);
      }
    }
 else     if (isEEArchive(fileName)) {
      boolean autoDeployable=child.isDirectory() ? autoDeployExploded : autoDeployZip;
      if (autoDeployable) {
        if (!isAutoDeployDisabled(child)) {
          long timestamp=getDeploymentTimestamp(child);
          final File failedMarker=new File(directory,fileName + FAILED_DEPLOY);
          if (failedMarker.exists() && timestamp <= failedMarker.lastModified()) {
            continue;
          }
          final File undeployedMarker=new File(directory,fileName + UNDEPLOYED);
          if (undeployedMarker.exists() && timestamp <= undeployedMarker.lastModified()) {
            continue;
          }
          DeploymentMarker marker=deployed.get(fileName);
          if (marker == null || marker.lastModified != timestamp) {
            try {
              if (isZipComplete(child)) {
                final String path=relativeTo == null ? child.getAbsolutePath() : relativePath + fileName;
                final boolean archive=child.isFile();
                addContentAddingTask(path,archive,fileName,child,timestamp,scanContext);
              }
 else {
                scanContext.incompleteFiles.put(child,new IncompleteDeploymentStatus(child,timestamp));
              }
            }
 catch (            NonScannableZipException e) {
              scanContext.nonscannable.put(child,new NonScannableStatus(e,timestamp));
            }
          }
        }
      }
 else       if (!deployed.containsKey(fileName) && !new File(fileName + DO_DEPLOY).exists() && !new File(fileName + FAILED_DEPLOY).exists()) {
        scanContext.nonDeployable.add(fileName);
      }
    }
 else     if (fileName.endsWith(DEPLOYING) || fileName.endsWith(UNDEPLOYING)) {
      removeExtraneousMarker(child,fileName);
    }
 else     if (fileName.endsWith(PENDING)) {
      final String deploymentName=fileName.substring(0,fileName.length() - PENDING.length());
      File deployment=new File(child.getParent(),deploymentName);
      if (!deployment.exists()) {
        removeExtraneousMarker(child,fileName);
      }
    }
 else     if (child.isDirectory()) {
      if (WEB_INF.equalsIgnoreCase(fileName) || META_INF.equalsIgnoreCase(fileName)) {
        scanContext.illegalDir.add(fileName);
      }
 else {
        scanDirectory(child,relativePath + child.getName() + File.separator,scanContext);
      }
    }
  }
}","/** 
 * Scan the given directory for content changes.
 * @param directory the directory to scan
 * @param scanContext context of the scan
 */
private void scanDirectory(final File directory,final String relativePath,final ScanContext scanContext){
  final File[] children=directory.listFiles(filter);
  if (children == null) {
    return;
  }
  for (  File child : children) {
    final String fileName=child.getName();
    if (fileName.endsWith(DEPLOYED)) {
      final String deploymentName=fileName.substring(0,fileName.length() - DEPLOYED.length());
      DeploymentMarker deploymentMarker=deployed.get(deploymentName);
      if (deploymentMarker == null) {
        scanContext.toRemove.remove(deploymentName);
        removeExtraneousMarker(child,fileName);
      }
 else {
        final File deploymentFile=new File(directory,deploymentName);
        if (deploymentFile.exists()) {
          scanContext.toRemove.remove(deploymentName);
          if (deployed.get(deploymentName).lastModified != child.lastModified()) {
            scanContext.scannerTasks.add(new RedeployTask(deploymentName,child.lastModified(),directory,!child.isDirectory()));
          }
        }
 else {
          boolean autoDeployable=deploymentMarker.archive ? autoDeployZip : autoDeployExploded;
          if (!autoDeployable) {
            scanContext.toRemove.remove(deploymentName);
            if (!deploymentMarker.archive) {
              scanContext.prematureExplodedDeletions.add(deploymentName);
            }
          }
        }
      }
    }
 else     if (fileName.endsWith(DO_DEPLOY) || (fileName.endsWith(FAILED_DEPLOY) && firstScan)) {
      final String markerStatus=fileName.endsWith(DO_DEPLOY) ? DO_DEPLOY : FAILED_DEPLOY;
      final String deploymentName=fileName.substring(0,fileName.length() - markerStatus.length());
      if (FAILED_DEPLOY.equals(markerStatus)) {
        ROOT_LOGGER.reattemptingFailedDeployment(deploymentName);
      }
      final File deploymentFile=new File(directory,deploymentName);
      if (!deploymentFile.exists()) {
        scanContext.ignoredMissingDeployments.add(deploymentName);
        continue;
      }
      long timestamp=getDeploymentTimestamp(deploymentFile);
      final String path=relativeTo == null ? deploymentFile.getAbsolutePath() : relativePath + deploymentName;
      final boolean archive=deploymentFile.isFile();
      addContentAddingTask(path,archive,deploymentName,deploymentFile,timestamp,scanContext);
    }
 else     if (fileName.endsWith(FAILED_DEPLOY)) {
      final String deploymentName=fileName.substring(0,fileName.length() - FAILED_DEPLOY.length());
      scanContext.toRemove.remove(deploymentName);
      if (!deployed.containsKey(deploymentName) && !(new File(child.getParent(),deploymentName).exists())) {
        removeExtraneousMarker(child,fileName);
      }
    }
 else     if (isEEArchive(fileName)) {
      boolean autoDeployable=child.isDirectory() ? autoDeployExploded : autoDeployZip;
      if (autoDeployable) {
        if (!isAutoDeployDisabled(child)) {
          long timestamp=getDeploymentTimestamp(child);
          final File failedMarker=new File(directory,fileName + FAILED_DEPLOY);
          if (failedMarker.exists() && timestamp <= failedMarker.lastModified()) {
            continue;
          }
          final File undeployedMarker=new File(directory,fileName + UNDEPLOYED);
          if (undeployedMarker.exists() && timestamp <= undeployedMarker.lastModified()) {
            continue;
          }
          DeploymentMarker marker=deployed.get(fileName);
          if (marker == null || marker.lastModified != timestamp) {
            try {
              if (isZipComplete(child)) {
                final String path=relativeTo == null ? child.getAbsolutePath() : relativePath + fileName;
                final boolean archive=child.isFile();
                addContentAddingTask(path,archive,fileName,child,timestamp,scanContext);
              }
 else {
                if (child.exists()) {
                  scanContext.incompleteFiles.put(child,new IncompleteDeploymentStatus(child,timestamp));
                }
              }
            }
 catch (            NonScannableZipException e) {
              scanContext.nonscannable.put(child,new NonScannableStatus(e,timestamp));
            }
          }
        }
      }
 else       if (!deployed.containsKey(fileName) && !new File(fileName + DO_DEPLOY).exists() && !new File(fileName + FAILED_DEPLOY).exists()) {
        scanContext.nonDeployable.add(fileName);
      }
    }
 else     if (fileName.endsWith(DEPLOYING) || fileName.endsWith(UNDEPLOYING)) {
      removeExtraneousMarker(child,fileName);
    }
 else     if (fileName.endsWith(PENDING)) {
      final String deploymentName=fileName.substring(0,fileName.length() - PENDING.length());
      File deployment=new File(child.getParent(),deploymentName);
      if (!deployment.exists()) {
        removeExtraneousMarker(child,fileName);
      }
    }
 else     if (child.isDirectory()) {
      if (WEB_INF.equalsIgnoreCase(fileName) || META_INF.equalsIgnoreCase(fileName)) {
        scanContext.illegalDir.add(fileName);
      }
 else {
        scanDirectory(child,relativePath + child.getName() + File.separator,scanContext);
      }
    }
  }
}",0.9944614209320092
167858,"/** 
 * {@inheritDoc}
 */
@Override public void initializeParsers(ExtensionParsingContext context){
  context.setSubsystemXmlMapping(Namespace.REMOTING_1_0.getUriString(),NewRemotingSubsystemParser.INSTANCE);
  context.setSubsystemXmlMapping(Namespace.REMOTING_1_1.getUriString(),RemotingSubsystem11Parser.INSTANCE);
}","/** 
 * {@inheritDoc}
 */
@Override public void initializeParsers(ExtensionParsingContext context){
  context.setSubsystemXmlMapping(Namespace.REMOTING_1_0.getUriString(),RemotingSubsystem10Parser.INSTANCE);
  context.setSubsystemXmlMapping(Namespace.REMOTING_1_1.getUriString(),RemotingSubsystem11Parser.INSTANCE);
}",0.9921259842519684
167859,"private void parseProperties(XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  while (reader.nextTag() != END_ELEMENT) {
    reader.require(START_ELEMENT,Namespace.CURRENT.getUriString(),Element.PROPERTY.getLocalName());
    final Property property=readProperty(reader);
    ModelNode propertyOp=new ModelNode();
    propertyOp.get(OP).set(ADD);
    propertyOp.get(OP_ADDR).set(address).add(PROPERTY,property.getName());
    propertyOp.get(VALUE).set(property.getValue());
    list.add(propertyOp);
  }
}","private void parseProperties(XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  while (reader.nextTag() != END_ELEMENT) {
    reader.require(START_ELEMENT,Namespace.REMOTING_1_0.getUriString(),Element.PROPERTY.getLocalName());
    final Property property=readProperty(reader);
    ModelNode propertyOp=new ModelNode();
    propertyOp.get(OP).set(ADD);
    propertyOp.get(OP_ADDR).set(address).add(PROPERTY,property.getName());
    propertyOp.get(VALUE).set(property.getValue());
    list.add(propertyOp);
  }
}",0.9833187006145742
167860,"/** 
 * Finds and returns methods corresponding to the passed method <code>name</code> and method <code>paramTypes</code>. The passed <code>classReflectionIndex</code> will be used to traverse the class hierarchy while finding the method. <p/> Returns empty collection if no such method is found
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param methodName                The name of the method
 * @param paramTypes                The param types accepted by the method
 * @return
 */
public static Collection<Method> findMethods(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final String methodName,final String... paramTypes){
  Collection<Method> methods=classReflectionIndex.getMethods(methodName,paramTypes);
  if (!methods.isEmpty()) {
    return methods;
  }
  Class<?> superClass=classReflectionIndex.getIndexedClass().getSuperclass();
  if (superClass != null) {
    ClassReflectionIndex<?> superClassIndex=deploymentReflectionIndex.getClassIndex(superClass);
    if (superClassIndex != null) {
      return findMethods(deploymentReflectionIndex,superClassIndex,methodName,paramTypes);
    }
  }
  return methods;
}","/** 
 * Finds and returns methods corresponding to the passed method <code>name</code> and method <code>paramTypes</code>. The passed <code>classReflectionIndex</code> will be used to traverse the class hierarchy while finding the method. <p/> Returns empty collection if no such method is found
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param methodName                The name of the method
 * @param paramTypes                The param types accepted by the method
 * @return
 */
public static Collection<Method> findMethods(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final String methodName,final String... paramTypes){
  final Collection<Method> methods=classReflectionIndex.getMethods(methodName,paramTypes);
  if (!methods.isEmpty()) {
    return methods;
  }
  Class<?> superClass=classReflectionIndex.getIndexedClass().getSuperclass();
  if (superClass != null) {
    ClassReflectionIndex<?> superClassIndex=deploymentReflectionIndex.getClassIndex(superClass);
    if (superClassIndex != null) {
      return findMethods(deploymentReflectionIndex,superClassIndex,methodName,paramTypes);
    }
  }
  return methods;
}",0.997774480712166
167861,"/** 
 * Finds and returns a method corresponding to the passed <code>method</code>, which may be declared in the super class of the passed <code>classReflectionIndex</code>. <p/> <p/>
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param method                    The method being searched for
 * @return
 */
public static Method findMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final Method method){
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
  return findMethod(deploymentReflectionIndex,classReflectionIndex,methodIdentifier);
}","/** 
 * Finds and returns a method corresponding to the passed <code>method</code>, which may be declared in the super class of the passed <code>classReflectionIndex</code>. <p/> <p/>
 * @param deploymentReflectionIndex The deployment reflection index
 * @param clazz                     The class
 * @param method                    The method being searched for
 * @return
 */
public static Method findMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final Class<?> clazz,final Method method){
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
  return findMethod(deploymentReflectionIndex,clazz,methodIdentifier);
}",0.8872638634978671
167862,"/** 
 * Finds and returns a method corresponding to the passed <code>method</code>, which may be declared in the super class of the passed <code>classReflectionIndex</code>. <p/> <p/> Throws   {@link org.jboss.as.server.deployment.DeploymentUnitProcessingException} if no such method is found.
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param method                    The method being searched for
 * @return
 * @throws org.jboss.as.server.deployment.DeploymentUnitProcessingException If no such method is found
 */
public static Method findRequiredMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final Method method) throws DeploymentUnitProcessingException {
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
  return findRequiredMethod(deploymentReflectionIndex,classReflectionIndex,methodIdentifier);
}","/** 
 * Finds and returns a method corresponding to the passed <code>method</code>, which may be declared in the super class of the passed <code>classReflectionIndex</code>. <p/> <p/> Throws   {@link org.jboss.as.server.deployment.DeploymentUnitProcessingException} if no such method is found.
 * @param deploymentReflectionIndex The deployment reflection index
 * @param clazz                     The class
 * @param method                    The method being searched for
 * @return
 * @throws org.jboss.as.server.deployment.DeploymentUnitProcessingException If no such method is found
 */
public static Method findRequiredMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final Class<?> clazz,final Method method) throws DeploymentUnitProcessingException {
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
  return findRequiredMethod(deploymentReflectionIndex,clazz,methodIdentifier);
}",0.912745545911375
167863,"/** 
 * Updates the handlers to be assigned. Checks to see if the handler already exists and throws an  {@link OperationFailedException exception} if it does.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForAssign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  final ModelNode parent=getParent(model);
  if (handlerExists(handlerName,handlerAttribute,parent)) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  parent.get(handlerAttribute.getName()).add(handlerName);
}","/** 
 * Updates the handlers to be assigned. Checks to see if the handler already exists and throws an  {@link OperationFailedException exception} if it does.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForAssign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  if (handlerExists(handlerName,handlerAttribute,model)) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  model.get(handlerAttribute.getName()).add(handlerName);
}",0.9589905362776026
167864,"/** 
 * Updates the handlers to be unassigned. Checks to see if the handler exists and creates a new list of handlers removing the handler to be unassigned. If the handler to be unassigned does not exist an  {@link OperationFailedException exception} is thrown.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForUnassign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  final ModelNode parent=getParent(model);
  if (handlerExists(handlerName,handlerAttribute,parent)) {
    final ModelNode currentSubhandlers=handlerAttribute.validateOperation(parent);
    final List<ModelNode> newSubhandlers=new ArrayList<ModelNode>();
    for (    ModelNode node : currentSubhandlers.asList()) {
      if (node.asString().equals(handlerName)) {
        continue;
      }
      newSubhandlers.add(node);
    }
    parent.get(handlerAttribute.getName()).set(newSubhandlers);
  }
 else {
    throw createFailureMessage(MESSAGES.cannotUnassignHandler(handlerName));
  }
}","/** 
 * Updates the handlers to be unassigned. Checks to see if the handler exists and creates a new list of handlers removing the handler to be unassigned. If the handler to be unassigned does not exist an  {@link OperationFailedException exception} is thrown.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForUnassign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  if (handlerExists(handlerName,handlerAttribute,model)) {
    final ModelNode currentSubhandlers=handlerAttribute.resolveModelAttribute(context,model);
    final List<ModelNode> newSubhandlers=new ArrayList<ModelNode>();
    for (    ModelNode node : currentSubhandlers.asList()) {
      if (node.asString().equals(handlerName)) {
        continue;
      }
      newSubhandlers.add(node);
    }
    model.get(handlerAttribute.getName()).set(newSubhandlers);
  }
 else {
    throw createFailureMessage(MESSAGES.cannotUnassignHandler(handlerName));
  }
}",0.951043338683788
167865,"protected AbstractLoggerService(final String name){
  this.name=name;
}","protected AbstractLoggerService(final String name){
  if (CommonAttributes.ROOT_LOGGER_NAME.equals(name)) {
    this.name=""String_Node_Str"";
  }
 else {
    this.name=name;
  }
}",0.570281124497992
167866,"static Collection<ServiceController<?>> installLoggerHandlers(final ServiceTarget serviceTarget,final String loggerName,final ModelNode handlers,final ServiceVerificationHandler verificationHandler){
  final List<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>();
  for (  final ModelNode handler : handlers.asList()) {
    final String handlerName=handler.asString();
    final LoggerHandlerService service=new LoggerHandlerService(loggerName);
    final Injector<Handler> injector=service.getHandlerInjector();
    controllers.add(serviceTarget.addService(LogServices.loggerHandlerName(loggerName,handlerName),service).addDependency(LogServices.loggerName(loggerName)).addDependency(LogServices.handlerName(handlerName),Handler.class,injector).addListener(verificationHandler).install());
  }
  return controllers;
}","static Collection<ServiceController<?>> installLoggerHandlers(final ServiceTarget serviceTarget,final String loggerName,final ModelNode handlers,final ServiceVerificationHandler verificationHandler){
  final List<ServiceController<?>> controllers=new ArrayList<ServiceController<?>>();
  for (  final ModelNode handler : handlers.asList()) {
    final String handlerName=handler.asString();
    final LoggerHandlerService service=new LoggerHandlerService(loggerName);
    final Injector<Handler> injector=service.getHandlerInjector();
    final ServiceName serviceName=LogServices.loggerHandlerName(loggerName,handlerName);
    final ServiceName dep1=LogServices.loggerName(loggerName);
    final ServiceName dep2=LogServices.handlerName(handlerName);
    LoggingLogger.ROOT_LOGGER.debugf(""String_Node_Str"",serviceName,dep1,dep2);
    controllers.add(serviceTarget.addService(serviceName,service).addDependency(dep1).addDependency(dep2,Handler.class,injector).addListener(verificationHandler).install());
  }
  return controllers;
}",0.7788461538461539
167867,"public static ServiceName loggerHandlerName(final String loggerName,final String handlerName){
  return loggerName.length() == 0 ? ROOT_LOGGER_HANDLER.append(handlerName) : LOGGER_HANDLER.append(loggerName,handlerName);
}","public static ServiceName loggerHandlerName(final String loggerName,final String handlerName){
  return CommonAttributes.ROOT_LOGGER_NAME.equals(loggerName) ? ROOT_LOGGER_HANDLER.append(CommonAttributes.ROOT_LOGGER_NAME,handlerName) : LOGGER_HANDLER.append(loggerName,handlerName);
}",0.7817460317460317
167868,"@Override protected void updateRuntime(final ModelNode operation,final ExtHandler handler) throws OperationFailedException {
  final ModelNode autoflush=AUTOFLUSH.validateResolvedOperation(operation);
  if (autoflush.isDefined()) {
    handler.setAutoFlush(autoflush.asBoolean());
  }
}","@Override protected void updateRuntime(final ModelNode operation,final T handler) throws OperationFailedException {
  final ModelNode autoflush=AUTOFLUSH.validateResolvedOperation(operation);
  if (autoflush.isDefined()) {
    handler.setAutoFlush(autoflush.asBoolean());
  }
}",0.9804618117229128
167869,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.COMPILATION_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      CompilationMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.COMPILATION_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      CompilationMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.COMPILATION_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      CompilationMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.COMPILATION_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      CompilationMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    final ModelNode store=result.get(PlatformMBeanConstants.OBJECT_NAME);
    CompilationMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME,store);
  }
  context.completeStep();
}",0.8698224852071006
167870,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final String memPoolName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  MemoryPoolMXBean memoryPoolMXBean=MemoryPoolMXBeanAttributeHandler.getMemoryPoolMXBean(memPoolName);
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_READ_WRITE_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final String memPoolName=PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();
  MemoryPoolMXBean memoryPoolMXBean=MemoryPoolMXBeanAttributeHandler.getMemoryPoolMXBean(memPoolName);
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_READ_WRITE_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.MEMORY_POOL_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      MemoryPoolMXBeanAttributeHandler.storeResult(attribute,store,memoryPoolMXBean,memPoolName);
    }
 catch (    UnsupportedOperationException ignored) {
    }
  }
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    final ModelNode store=result.get(PlatformMBeanConstants.OBJECT_NAME);
    MemoryPoolMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME,store,memoryPoolMXBean,memPoolName);
  }
  context.completeStep();
}",0.9154160982264664
167871,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.OPERATING_SYSTEM_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      OperatingSystemMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.OPERATING_SYSTEM_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      OperatingSystemMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.OPERATING_SYSTEM_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      OperatingSystemMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.OPERATING_SYSTEM_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      OperatingSystemMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    final ModelNode store=result.get(PlatformMBeanConstants.OBJECT_NAME);
    OperatingSystemMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME,store);
  }
  context.completeStep();
}",0.8829676071055381
167872,"public static ModelNode getGetLoggerLevelDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  addLoggerNameParam(node.get(REQUEST_PROPERTIES),bundle);
  node.get(REPLY_PROPERTIES);
  return node;
}","public static ModelNode getGetLoggerLevelDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(OPERATION_NAME).set(GET_LOGGER_LEVEL);
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  addLoggerNameParam(node.get(REQUEST_PROPERTIES),bundle);
  node.get(REPLY_PROPERTIES);
  node.get(REPLY_PROPERTIES,TYPE).set(ModelType.STRING);
  node.get(REPLY_PROPERTIES,NILLABLE).set(true);
  return node;
}",0.8120481927710843
167873,"public static ModelNode getBufferPoolResource(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL));
  for (  String attr : PlatformMBeanConstants.BUFFER_POOL_READ_ATTRIBUTES) {
    node.get(ATTRIBUTES,attr,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL + ""String_Node_Str"" + attr));
  }
  for (  String attr : PlatformMBeanConstants.BUFFER_POOL_METRICS) {
    node.get(ATTRIBUTES,attr,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL + ""String_Node_Str"" + attr));
  }
  final ModelNode attrs=node.get(ATTRIBUTES);
  addObjectNameAttribute(attrs,bundle);
  populateAttribute(attrs,NAME,ModelType.STRING,true,null);
  populateAttribute(attrs,COUNT,ModelType.LONG,true,MeasurementUnit.NONE);
  populateAttribute(attrs,MEMORY_USED,ModelType.LONG,true,MeasurementUnit.BYTES);
  populateAttribute(attrs,TOTAL_CAPACITY,ModelType.LONG,true,MeasurementUnit.BYTES);
  node.get(OPERATIONS).setEmptyObject();
  node.get(CHILDREN).setEmptyObject();
  return node;
}","public static ModelNode getBufferPoolResource(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL));
  for (  String attr : PlatformMBeanConstants.BUFFER_POOL_READ_ATTRIBUTES) {
    node.get(ATTRIBUTES,attr,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL + ""String_Node_Str"" + attr));
  }
  for (  String attr : PlatformMBeanConstants.BUFFER_POOL_METRICS) {
    node.get(ATTRIBUTES,attr,DESCRIPTION).set(bundle.getString(PlatformMBeanConstants.BUFFER_POOL + ""String_Node_Str"" + attr));
  }
  final ModelNode attrs=node.get(ATTRIBUTES);
  addObjectNameAttribute(attrs,bundle);
  populateAttribute(attrs,NAME,ModelType.STRING,true,null);
  populateAttribute(attrs,COUNT,ModelType.LONG,true,MeasurementUnit.NONE);
  populateAttribute(attrs,MEMORY_USED,ModelType.LONG,true,MeasurementUnit.BYTES);
  populateAttribute(attrs,TOTAL_CAPACITY,ModelType.LONG,true,MeasurementUnit.BYTES);
  attrs.get(NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  node.get(OPERATIONS).setEmptyObject();
  node.get(CHILDREN).setEmptyObject();
  return node;
}",0.969283276450512
167874,"public static ModelNode getSetLoggerLevelDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  final ModelNode reqProps=node.get(REQUEST_PROPERTIES);
  addLoggerNameParam(reqProps,bundle);
  final ModelNode level=reqProps.get(LEVEL_NAME);
  level.get(DESCRIPTION).set(bundle.getString(LOGGING + ""String_Node_Str"" + LEVEL_NAME));
  level.get(TYPE).set(ModelType.STRING);
  level.get(REQUIRED).set(false);
  node.get(REPLY_PROPERTIES).setEmptyObject();
  return node;
}","public static ModelNode getSetLoggerLevelDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(OPERATION_NAME).set(SET_LOGGER_LEVEL);
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  final ModelNode reqProps=node.get(REQUEST_PROPERTIES);
  addLoggerNameParam(reqProps,bundle);
  final ModelNode level=reqProps.get(LEVEL_NAME);
  level.get(DESCRIPTION).set(bundle.getString(LOGGING + ""String_Node_Str"" + LEVEL_NAME));
  level.get(TYPE).set(ModelType.STRING);
  level.get(REQUIRED).set(false);
  node.get(REPLY_PROPERTIES).setEmptyObject();
  return node;
}",0.960380348652932
167875,"public static ModelNode getGetParentLoggerNameDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  addLoggerNameParam(node.get(REQUEST_PROPERTIES),bundle);
  node.get(REPLY_PROPERTIES);
  return node;
}","public static ModelNode getGetParentLoggerNameDescription(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(OPERATION_NAME).set(GET_PARENT_LOGGER_NAME);
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  addLoggerNameParam(node.get(REQUEST_PROPERTIES),bundle);
  node.get(REPLY_PROPERTIES);
  node.get(REPLY_PROPERTIES,TYPE).set(ModelType.STRING);
  node.get(REPLY_PROPERTIES,NILLABLE).set(true);
  return node;
}",0.8085106382978723
167876,"public static ModelNode getBufferPoolRootResource(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  node.get(ATTRIBUTES).setEmptyObject();
  node.get(OPERATIONS).setEmptyObject();
  node.get(CHILDREN,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  node.get(CHILDREN,NAME,MIN_OCCURS).set(0);
  node.get(CHILDREN,NAME,MODEL_DESCRIPTION);
  return node;
}","public static ModelNode getBufferPoolRootResource(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode node=new ModelNode();
  node.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  final ModelNode attrs=node.get(ATTRIBUTES);
  populateAttribute(attrs,NAME,ModelType.STRING,false,null);
  attrs.get(NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  node.get(OPERATIONS).setEmptyObject();
  node.get(CHILDREN,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  node.get(CHILDREN,NAME,MIN_OCCURS).set(0);
  node.get(CHILDREN,NAME,MODEL_DESCRIPTION);
  return node;
}",0.6024734982332155
167877,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.RUNTIME_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      RuntimeMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.RUNTIME_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      RuntimeMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.RUNTIME_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      RuntimeMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.RUNTIME_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      RuntimeMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    final ModelNode store=result.get(PlatformMBeanConstants.OBJECT_NAME);
    RuntimeMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME,store);
  }
  context.completeStep();
}",0.8824809575625681
167878,"@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.THREADING_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.THREADING_READ_WRITE_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.THREADING_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  final ModelNode result=context.getResult();
  for (  String attribute : PlatformMBeanConstants.THREADING_READ_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.THREADING_READ_WRITE_ATTRIBUTES) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  for (  String attribute : PlatformMBeanConstants.THREADING_METRICS) {
    final ModelNode store=result.get(attribute);
    try {
      ThreadMXBeanAttributeHandler.storeResult(attribute,store);
    }
 catch (    SecurityException ignored) {
    }
catch (    UnsupportedOperationException ignored) {
    }
  }
  if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {
    final ModelNode store=result.get(PlatformMBeanConstants.OBJECT_NAME);
    ThreadMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME,store);
  }
  context.completeStep();
}",0.9136892814130873
167879,"public static void register(final ManagementResourceRegistration registration,final boolean server){
  registration.registerOperationHandler(JVMAddHandler.OPERATION_NAME,JVMAddHandler.INSTANCE,JVMAddHandler.INSTANCE,false);
  registration.registerOperationHandler(JVMRemoveHandler.OPERATION_NAME,JVMRemoveHandler.INSTANCE,JVMRemoveHandler.INSTANCE,false);
  registration.registerReadWriteAttribute(JVM_AGENT_LIB,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_AGENT_PATH,null,writeHandler,Storage.CONFIGURATION);
  if (server) {
    registration.registerReadWriteAttribute(JVM_DEBUG_ENABLED,null,booleanWriteHandler,Storage.CONFIGURATION);
    registration.registerReadWriteAttribute(JVM_DEBUG_OPTIONS,null,booleanWriteHandler,Storage.CONFIGURATION);
  }
  registration.registerReadWriteAttribute(JVM_ENV_CLASSPATH_IGNORED,null,booleanWriteHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_ENV_VARIABLES,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_HEAP,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_MAX_HEAP,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_JAVA_AGENT,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_JAVA_HOME,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_PERMGEN,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_MAX_PERMGEN,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_STACK,null,writeHandler,Storage.CONFIGURATION);
  registration.registerOperationHandler(JVMOptionAddHandler.OPERATION_NAME,JVMOptionAddHandler.INSTANCE,JVMOptionAddHandler.INSTANCE,false);
  registration.registerOperationHandler(JVMOptionRemoveHandler.OPERATION_NAME,JVMOptionRemoveHandler.INSTANCE,JVMOptionRemoveHandler.INSTANCE,false);
}","public static void register(final ManagementResourceRegistration registration,final boolean server){
  registration.registerOperationHandler(JVMAddHandler.OPERATION_NAME,JVMAddHandler.INSTANCE,JVMAddHandler.INSTANCE,false);
  registration.registerOperationHandler(JVMRemoveHandler.OPERATION_NAME,JVMRemoveHandler.INSTANCE,JVMRemoveHandler.INSTANCE,false);
  registration.registerReadWriteAttribute(JVM_AGENT_LIB,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_AGENT_PATH,null,writeHandler,Storage.CONFIGURATION);
  if (server) {
    registration.registerReadWriteAttribute(JVM_DEBUG_ENABLED,null,booleanWriteHandler,Storage.CONFIGURATION);
    registration.registerReadWriteAttribute(JVM_DEBUG_OPTIONS,null,writeHandler,Storage.CONFIGURATION);
  }
  registration.registerReadWriteAttribute(JVM_ENV_CLASSPATH_IGNORED,null,booleanWriteHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_ENV_VARIABLES,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_HEAP,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_MAX_HEAP,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_JAVA_AGENT,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_JAVA_HOME,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_PERMGEN,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_MAX_PERMGEN,null,writeHandler,Storage.CONFIGURATION);
  registration.registerReadWriteAttribute(JVM_STACK,null,writeHandler,Storage.CONFIGURATION);
  registration.registerOperationHandler(JVMOptionAddHandler.OPERATION_NAME,JVMOptionAddHandler.INSTANCE,JVMOptionAddHandler.INSTANCE,false);
  registration.registerOperationHandler(JVMOptionRemoveHandler.OPERATION_NAME,JVMOptionRemoveHandler.INSTANCE,JVMOptionRemoveHandler.INSTANCE,false);
}",0.997726698661278
167880,"void addToOptions(JvmElement jvmElement,List<String> command){
  String heap=jvmElement.getHeapSize();
  String maxHeap=jvmElement.getMaxHeap();
  if (maxHeap == null && heap != null) {
    maxHeap=heap;
  }
  if (heap == null && maxHeap != null) {
    heap=maxHeap;
  }
  addPermGen(jvmElement,command);
  if (heap != null) {
    command.add(""String_Node_Str"" + heap);
  }
  if (maxHeap != null) {
    command.add(""String_Node_Str"" + maxHeap);
  }
  if (jvmElement.getStack() != null) {
    command.add(""String_Node_Str"" + jvmElement.getStack());
  }
  if (jvmElement.getAgentPath() != null) {
    command.add(""String_Node_Str"" + jvmElement.getAgentPath());
  }
  if (jvmElement.getAgentLib() != null) {
    command.add(""String_Node_Str"" + jvmElement.getAgentLib());
  }
  if (jvmElement.getJavaagent() != null) {
    command.add(""String_Node_Str"" + jvmElement.getJavaagent());
  }
  if (jvmElement.isDebugEnabled() != null && jvmElement.isDebugEnabled() && jvmElement.getDebugOptions() != null) {
    command.add(jvmElement.getDebugOptions());
  }
  List<String> options=jvmElement.getJvmOptions().getOptions();
  if (options.size() > 0) {
    String jvmName=jvmElement.getName();
    for (    String option : options) {
      if (!checkOption(heap != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.HEAP.toString())) {
        continue;
      }
      if (!checkOption(maxHeap != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.HEAP.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getStack() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.STACK.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentPath() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_PATH.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentLib() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_LIB.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentLib() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_LIB.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.JAVA_AGENT.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.PERMGEN.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.PERMGEN.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.isDebugEnabled() != null && jvmElement.isDebugEnabled() && jvmElement.getDebugOptions() != null && option.startsWith(""String_Node_Str""),jvmName,option,Attribute.DEBUG_OPTIONS.toString())) {
        continue;
      }
      command.add(option);
    }
  }
}","void addToOptions(JvmElement jvmElement,List<String> command){
  String heap=jvmElement.getHeapSize();
  String maxHeap=jvmElement.getMaxHeap();
  if (maxHeap == null && heap != null) {
    maxHeap=heap;
  }
  if (heap == null && maxHeap != null) {
    heap=maxHeap;
  }
  addPermGen(jvmElement,command);
  if (heap != null) {
    command.add(""String_Node_Str"" + heap);
  }
  if (maxHeap != null) {
    command.add(""String_Node_Str"" + maxHeap);
  }
  if (jvmElement.getStack() != null) {
    command.add(""String_Node_Str"" + jvmElement.getStack());
  }
  if (jvmElement.getAgentPath() != null) {
    command.add(""String_Node_Str"" + jvmElement.getAgentPath());
  }
  if (jvmElement.getAgentLib() != null) {
    command.add(""String_Node_Str"" + jvmElement.getAgentLib());
  }
  if (jvmElement.getJavaagent() != null) {
    command.add(""String_Node_Str"" + jvmElement.getJavaagent());
  }
  if (jvmElement.isDebugEnabled() != null && jvmElement.isDebugEnabled() && jvmElement.getDebugOptions() != null) {
    String debugOptions=jvmElement.getDebugOptions();
    if (debugOptions != null) {
      if (!debugOptions.startsWith(""String_Node_Str"")) {
        debugOptions=""String_Node_Str"" + debugOptions;
      }
      command.add(debugOptions);
    }
  }
  List<String> options=jvmElement.getJvmOptions().getOptions();
  if (options.size() > 0) {
    String jvmName=jvmElement.getName();
    for (    String option : options) {
      if (!checkOption(heap != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.HEAP.toString())) {
        continue;
      }
      if (!checkOption(maxHeap != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.HEAP.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getStack() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.STACK.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentPath() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_PATH.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentLib() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_LIB.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getAgentLib() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.AGENT_LIB.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.JAVA_AGENT.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.PERMGEN.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.getJavaagent() != null && option.startsWith(""String_Node_Str""),jvmName,option,Element.PERMGEN.toString())) {
        continue;
      }
      if (!checkOption(jvmElement.isDebugEnabled() != null && jvmElement.isDebugEnabled() && jvmElement.getDebugOptions() != null && option.startsWith(""String_Node_Str""),jvmName,option,Attribute.DEBUG_OPTIONS.toString())) {
        continue;
      }
      command.add(option);
    }
  }
}",0.9637305699481864
167881,"/** 
 * The main method.
 * @param args the command-line arguments
 */
public static void main(String[] args) throws IOException {
  MDC.put(""String_Node_Str"",""String_Node_Str"");
  final InputStream in=System.in;
  final PrintStream out=System.out;
  final PrintStream err=System.err;
  final byte[] authKey=new byte[16];
  try {
    StreamUtils.readFully(System.in,authKey);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    System.exit(1);
    return;
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  create(args,in,out,err,authKey);
  while (in.read() != -1) {
  }
  System.exit(0);
}","/** 
 * The main method.
 * @param args the command-line arguments
 */
public static void main(String[] args) throws IOException {
  MDC.put(""String_Node_Str"",""String_Node_Str"");
  final InputStream in=System.in;
  final PrintStream out=System.out;
  final PrintStream err=System.err;
  final byte[] authKey=new byte[16];
  try {
    StreamUtils.readFully(System.in,authKey);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    System.exit(1);
    return;
  }
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  create(args,in,out,err,authKey);
  while (in.read() != -1) {
  }
  System.exit(0);
}",0.9272070211667528
167882,"/** 
 * Main entry point.  Reads and executes the command object from standard input.
 * @param args ignored
 */
public static void main(String[] args){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  new BridgeRepositorySelector().start();
  final InputStream initialInput=System.in;
  final PrintStream initialError=System.err;
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final byte[] authKey=new byte[16];
  try {
    org.jboss.as.process.protocol.StreamUtils.readFully(initialInput,authKey);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
    throw new IllegalStateException();
  }
  final MarshallerFactory factory=Marshalling.getMarshallerFactory(""String_Node_Str"",DomainServerMain.class.getClassLoader());
  final Unmarshaller unmarshaller;
  final ByteInput byteInput;
  final AsyncFuture<ServiceContainer> containerFuture;
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassResolver(new SimpleClassResolver(DomainServerMain.class.getClassLoader()));
    unmarshaller=factory.createUnmarshaller(configuration);
    byteInput=Marshalling.createByteInput(initialInput);
    unmarshaller.start(byteInput);
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    containerFuture=task.run(Arrays.<ServiceActivator>asList(new ServiceActivator(){
      @Override public void activate(      final ServiceActivatorContext serviceActivatorContext){
      }
    }
));
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(1);
    throw new IllegalStateException();
  }
 finally {
  }
  for (; ; )   try {
    String hostName=StreamUtils.readUTFZBytes(initialInput);
    int port=StreamUtils.readInt(initialInput);
    boolean managementSubsystemEndpoint=StreamUtils.readBoolean(initialInput);
    final CountDownLatch latch=new CountDownLatch(2);
    final UninstallListener connectionListener=new UninstallListener(latch,HostControllerConnectionService.SERVICE_NAME);
    final UninstallListener clientListener=new UninstallListener(latch,HostControllerServerClient.SERVICE_NAME);
    final ServiceContainer container=containerFuture.get();
    final ServiceController<?> client=container.getRequiredService(HostControllerServerClient.SERVICE_NAME);
    final String name=((HostControllerServerClient)client.getValue()).getServerName();
    final String processName=((HostControllerServerClient)client.getValue()).getServerProcessName();
    client.addListener(clientListener);
    client.setMode(ServiceController.Mode.REMOVE);
    final ServiceController<?> connection=container.getRequiredService(HostControllerConnectionService.SERVICE_NAME);
    connection.addListener(connectionListener);
    connection.setMode(ServiceController.Mode.REMOVE);
    latch.await();
    client.removeListener(clientListener);
    connection.removeListener(connectionListener);
    addCommunicationServices(container,name,processName,authKey,new InetSocketAddress(InetAddress.getByName(hostName),port),managementSubsystemEndpoint,true);
  }
 catch (  InterruptedIOException e) {
    Thread.interrupted();
  }
catch (  EOFException e) {
    break;
  }
catch (  Exception e) {
    e.printStackTrace();
    break;
  }
  System.exit(0);
  throw new IllegalStateException();
}","/** 
 * Main entry point.  Reads and executes the command object from standard input.
 * @param args ignored
 */
public static void main(String[] args){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  new BridgeRepositorySelector().start();
  final InputStream initialInput=System.in;
  final PrintStream initialError=System.err;
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  final byte[] authKey=new byte[16];
  try {
    org.jboss.as.process.protocol.StreamUtils.readFully(initialInput,authKey);
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
    throw new IllegalStateException();
  }
  final MarshallerFactory factory=Marshalling.getMarshallerFactory(""String_Node_Str"",DomainServerMain.class.getClassLoader());
  final Unmarshaller unmarshaller;
  final ByteInput byteInput;
  final AsyncFuture<ServiceContainer> containerFuture;
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    final MarshallingConfiguration configuration=new MarshallingConfiguration();
    configuration.setVersion(2);
    configuration.setClassResolver(new SimpleClassResolver(DomainServerMain.class.getClassLoader()));
    unmarshaller=factory.createUnmarshaller(configuration);
    byteInput=Marshalling.createByteInput(initialInput);
    unmarshaller.start(byteInput);
    final ServerTask task=unmarshaller.readObject(ServerTask.class);
    unmarshaller.finish();
    containerFuture=task.run(Arrays.<ServiceActivator>asList(new ServiceActivator(){
      @Override public void activate(      final ServiceActivatorContext serviceActivatorContext){
      }
    }
));
  }
 catch (  Exception e) {
    e.printStackTrace(initialError);
    System.exit(1);
    throw new IllegalStateException();
  }
 finally {
  }
  for (; ; )   try {
    String hostName=StreamUtils.readUTFZBytes(initialInput);
    int port=StreamUtils.readInt(initialInput);
    boolean managementSubsystemEndpoint=StreamUtils.readBoolean(initialInput);
    final CountDownLatch latch=new CountDownLatch(2);
    final UninstallListener connectionListener=new UninstallListener(latch,HostControllerConnectionService.SERVICE_NAME);
    final UninstallListener clientListener=new UninstallListener(latch,HostControllerServerClient.SERVICE_NAME);
    final ServiceContainer container=containerFuture.get();
    final ServiceController<?> client=container.getRequiredService(HostControllerServerClient.SERVICE_NAME);
    final String name=((HostControllerServerClient)client.getValue()).getServerName();
    final String processName=((HostControllerServerClient)client.getValue()).getServerProcessName();
    client.addListener(clientListener);
    client.setMode(ServiceController.Mode.REMOVE);
    final ServiceController<?> connection=container.getRequiredService(HostControllerConnectionService.SERVICE_NAME);
    connection.addListener(connectionListener);
    connection.setMode(ServiceController.Mode.REMOVE);
    latch.await();
    client.removeListener(clientListener);
    connection.removeListener(connectionListener);
    addCommunicationServices(container,name,processName,authKey,new InetSocketAddress(InetAddress.getByName(hostName),port),managementSubsystemEndpoint,true);
  }
 catch (  InterruptedIOException e) {
    Thread.interrupted();
  }
catch (  EOFException e) {
    break;
  }
catch (  Exception e) {
    e.printStackTrace();
    break;
  }
  System.exit(0);
  throw new IllegalStateException();
}",0.9819021948402002
167883,"/** 
 * The main method.
 * @param args the command-line arguments
 */
public static void main(String[] args){
  SecurityActions.setSystemProperty(""String_Node_Str"",""String_Node_Str"");
  new BridgeRepositorySelector().start();
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    ServerEnvironment serverEnvironment=determineEnvironment(args,new Properties(SecurityActions.getSystemProperties()),SecurityActions.getSystemEnvironment(),ServerEnvironment.LaunchType.STANDALONE);
    if (serverEnvironment == null) {
      abort(null);
    }
 else {
      final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
      final Bootstrap.Configuration configuration=new Bootstrap.Configuration();
      configuration.setServerEnvironment(serverEnvironment);
      configuration.setModuleLoader(Module.getBootModuleLoader());
      bootstrap.bootstrap(configuration,Collections.<ServiceActivator>emptyList()).get();
      return;
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}","/** 
 * The main method.
 * @param args the command-line arguments
 */
public static void main(String[] args){
  SecurityActions.setSystemProperty(""String_Node_Str"",""String_Node_Str"");
  new BridgeRepositorySelector().start();
  try {
    Class.forName(ConsoleHandler.class.getName(),true,ConsoleHandler.class.getClassLoader());
  }
 catch (  Throwable ignored) {
  }
  StdioContext.install();
  final StdioContext context=StdioContext.create(new NullInputStream(),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.INFO),new LoggingOutputStream(Logger.getLogger(""String_Node_Str""),Level.ERROR));
  StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context));
  try {
    Module.registerURLStreamHandlerFactoryModule(Module.getBootModuleLoader().loadModule(ModuleIdentifier.create(""String_Node_Str"")));
    ServerEnvironment serverEnvironment=determineEnvironment(args,new Properties(SecurityActions.getSystemProperties()),SecurityActions.getSystemEnvironment(),ServerEnvironment.LaunchType.STANDALONE);
    if (serverEnvironment == null) {
      abort(null);
    }
 else {
      final Bootstrap bootstrap=Bootstrap.Factory.newInstance();
      final Bootstrap.Configuration configuration=new Bootstrap.Configuration();
      configuration.setServerEnvironment(serverEnvironment);
      configuration.setModuleLoader(Module.getBootModuleLoader());
      bootstrap.bootstrap(configuration,Collections.<ServiceActivator>emptyList()).get();
      return;
    }
  }
 catch (  Throwable t) {
    abort(t);
  }
}",0.9519918283963228
167884,"@Override protected synchronized ManagementClientChannelStrategy getClientChannelStrategy() throws URISyntaxException, IOException {
  if (closed) {
    throw new IllegalStateException(String.format(""String_Node_Str"",ModelControllerClient.class.getSimpleName()));
  }
  if (strategy == null) {
    this.endpoint=Remoting.createEndpoint(""String_Node_Str"",executor,OptionMap.EMPTY);
    Xnio xnio=Xnio.getInstance();
    endpoint.addConnectionProvider(""String_Node_Str"",new RemoteConnectionProviderFactory(xnio),OptionMap.create(Options.SSL_ENABLED,false));
    strategy=ManagementClientChannelStrategy.create(hostName,port,endpoint,this,callbackHandler);
  }
  return strategy;
}","@Override protected synchronized ManagementClientChannelStrategy getClientChannelStrategy() throws URISyntaxException, IOException {
  if (closed) {
    throw new IllegalStateException(String.format(""String_Node_Str"",ModelControllerClient.class.getSimpleName()));
  }
  if (strategy == null) {
    endpoint=Remoting.createEndpoint(""String_Node_Str"",OptionMap.EMPTY);
    endpoint.addConnectionProvider(""String_Node_Str"",new RemoteConnectionProviderFactory(),OptionMap.create(Options.SSL_ENABLED,Boolean.FALSE));
    strategy=ManagementClientChannelStrategy.create(hostName,port,endpoint,this,callbackHandler);
  }
  return strategy;
}",0.9466463414634146
167885,"@Override public Collection<CommandArgument> getArguments(CommandContext ctx){
  ParsedCommandLine args=ctx.getParsedCommandLine();
  try {
    if (!name.isValueComplete(args)) {
      return staticArgs;
    }
  }
 catch (  CommandFormatException e) {
    return Collections.emptyList();
  }
  final String op=operation.getValue(args);
  if (op == null) {
    if (nodeProps == null) {
      final List<Property> propList=getNodeProperties(ctx);
      final Map<String,CommandArgument> argMap=new HashMap<String,CommandArgument>(propList.size());
      for (int i=0; i < propList.size(); ++i) {
        final Property prop=propList.get(i);
        final ModelNode propDescr=prop.getValue();
        if (propDescr.has(""String_Node_Str"") && ""String_Node_Str"".equals(propDescr.get(""String_Node_Str"").asString())) {
          ModelType type=null;
          CommandLineCompleter valueCompleter=null;
          ArgumentValueConverter valueConverter=ArgumentValueConverter.DEFAULT;
          if (propDescr.has(""String_Node_Str"")) {
            type=propDescr.get(""String_Node_Str"").asType();
            if (ModelType.BOOLEAN == type) {
              valueCompleter=SimpleTabCompleter.BOOLEAN;
            }
 else             if (prop.getName().endsWith(""String_Node_Str"")) {
              valueConverter=ArgumentValueConverter.PROPERTIES;
            }
 else             if (ModelType.LIST == type) {
              valueConverter=ArgumentValueConverter.LIST;
            }
          }
          final CommandArgument arg=new ArgumentWithValue(GenericTypeOperationHandler.this,valueCompleter,valueConverter,""String_Node_Str"" + prop.getName());
          argMap.put(arg.getFullName(),arg);
        }
      }
      nodeProps=argMap;
    }
    return nodeProps.values();
  }
 else {
    if (propsByOp == null) {
      propsByOp=new HashMap<String,Map<String,CommandArgument>>();
    }
    Map<String,CommandArgument> opProps=propsByOp.get(op);
    if (opProps == null) {
      final ModelNode descr;
      try {
        descr=getOperationDescription(ctx,op);
      }
 catch (      IOException e1) {
        return Collections.emptyList();
      }
      if (descr == null || !descr.has(""String_Node_Str"")) {
        opProps=Collections.emptyMap();
      }
 else {
        final List<Property> propList=descr.get(""String_Node_Str"").asPropertyList();
        opProps=new HashMap<String,CommandArgument>(propList.size());
        for (        Property prop : propList) {
          final ModelNode propDescr=prop.getValue();
          ModelType type=null;
          CommandLineCompleter valueCompleter=null;
          ArgumentValueConverter valueConverter=ArgumentValueConverter.DEFAULT;
          if (propDescr.has(""String_Node_Str"")) {
            type=propDescr.get(""String_Node_Str"").asType();
            if (ModelType.BOOLEAN == type) {
              valueCompleter=SimpleTabCompleter.BOOLEAN;
            }
 else             if (prop.getName().endsWith(""String_Node_Str"")) {
              valueConverter=ArgumentValueConverter.PROPERTIES;
            }
 else             if (ModelType.LIST == type) {
              valueConverter=ArgumentValueConverter.LIST;
            }
          }
          final CommandArgument arg=new ArgumentWithValue(GenericTypeOperationHandler.this,valueCompleter,valueConverter,""String_Node_Str"" + prop.getName());
          opProps.put(arg.getFullName(),arg);
        }
      }
      propsByOp.put(op,opProps);
    }
    return opProps.values();
  }
}","@Override public Collection<CommandArgument> getArguments(CommandContext ctx){
  ParsedCommandLine args=ctx.getParsedCommandLine();
  try {
    if (!name.isValueComplete(args)) {
      return staticArgs;
    }
  }
 catch (  CommandFormatException e) {
    return Collections.emptyList();
  }
  final String op=operation.getValue(args);
  return loadArguments(ctx,op).values();
}",0.1792673421667965
167886,"protected ModelNode buildOperationRequest(CommandContext ctx,final String operation) throws CommandFormatException {
  ParsedCommandLine args=ctx.getParsedCommandLine();
  DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
  if (ctx.isDomainMode()) {
    final String profile=this.profile.getValue(args);
    if (profile == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
    builder.addNode(""String_Node_Str"",profile);
  }
  final String name=this.name.getValue(ctx.getParsedCommandLine(),true);
  for (  OperationRequestAddress.Node node : nodePath) {
    builder.addNode(node.getType(),node.getName());
  }
  builder.addNode(type,name);
  builder.setOperationName(operation);
  getArguments(ctx);
  final Map<String,CommandArgument> argsMap=propsByOp.get(operation);
  for (  String argName : args.getPropertyNames()) {
    if (argName.equals(""String_Node_Str"")) {
      continue;
    }
    if (argsMap == null) {
      if (argName.equals(this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException(""String_Node_Str"" + operation + ""String_Node_Str""+ this.name.getFullName()+ ""String_Node_Str"");
    }
    final ArgumentWithValue arg=(ArgumentWithValue)argsMap.get(argName);
    if (arg == null) {
      if (argName.equals(this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException(""String_Node_Str"" + argName + ""String_Node_Str""+ operation+ ""String_Node_Str"");
    }
    final String propName;
    if (argName.charAt(1) == '-') {
      propName=argName.substring(2);
    }
 else {
      propName=argName.substring(1);
    }
    final String valueString=args.getPropertyValue(argName);
    ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
    builder.getModelNode().get(propName).set(nodeValue);
  }
  return builder.buildRequest();
}","protected ModelNode buildOperationRequest(CommandContext ctx,final String operation) throws CommandFormatException {
  ParsedCommandLine args=ctx.getParsedCommandLine();
  DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
  if (ctx.isDomainMode()) {
    final String profile=this.profile.getValue(args);
    if (profile == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
    builder.addNode(""String_Node_Str"",profile);
  }
  final String name=this.name.getValue(ctx.getParsedCommandLine(),true);
  for (  OperationRequestAddress.Node node : nodePath) {
    builder.addNode(node.getType(),node.getName());
  }
  builder.addNode(type,name);
  builder.setOperationName(operation);
  final Map<String,CommandArgument> argsMap=loadArguments(ctx,operation);
  for (  String argName : args.getPropertyNames()) {
    if (argName.equals(""String_Node_Str"")) {
      continue;
    }
    if (argsMap == null) {
      if (argName.equals(this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException(""String_Node_Str"" + operation + ""String_Node_Str""+ this.name.getFullName()+ ""String_Node_Str"");
    }
    final ArgumentWithValue arg=(ArgumentWithValue)argsMap.get(argName);
    if (arg == null) {
      if (argName.equals(this.name.getFullName())) {
        continue;
      }
      throw new CommandFormatException(""String_Node_Str"" + argName + ""String_Node_Str""+ operation+ ""String_Node_Str"");
    }
    final String propName;
    if (argName.charAt(1) == '-') {
      propName=argName.substring(2);
    }
 else {
      propName=argName.substring(1);
    }
    final String valueString=args.getPropertyValue(argName);
    ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
    builder.getModelNode().get(propName).set(nodeValue);
  }
  return builder.buildRequest();
}",0.985809906291834
167887,"protected ModelNode buildWritePropertyRequest(CommandContext ctx) throws CommandFormatException {
  final String name=this.name.getValue(ctx.getParsedCommandLine(),true);
  ModelNode composite=new ModelNode();
  composite.get(""String_Node_Str"").set(""String_Node_Str"");
  composite.get(""String_Node_Str"").setEmptyList();
  ModelNode steps=composite.get(""String_Node_Str"");
  ParsedCommandLine args=ctx.getParsedCommandLine();
  final String profile;
  if (ctx.isDomainMode()) {
    profile=this.profile.getValue(args);
    if (profile == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
  }
 else {
    profile=null;
  }
  if (nodeProps == null) {
    getArguments(ctx);
  }
  for (  String argName : args.getPropertyNames()) {
    if (argName.equals(""String_Node_Str"") || this.name.getFullName().equals(argName)) {
      continue;
    }
    final ArgumentWithValue arg=(ArgumentWithValue)nodeProps.get(argName);
    if (arg == null) {
      throw new CommandFormatException(""String_Node_Str"" + argName + ""String_Node_Str"");
    }
    DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
    if (profile != null) {
      builder.addNode(""String_Node_Str"",profile);
    }
    for (    OperationRequestAddress.Node node : nodePath) {
      builder.addNode(node.getType(),node.getName());
    }
    builder.addNode(type,name);
    builder.setOperationName(""String_Node_Str"");
    final String propName;
    if (argName.charAt(1) == '-') {
      propName=argName.substring(2);
    }
 else {
      propName=argName.substring(1);
    }
    builder.addProperty(""String_Node_Str"",propName);
    final String valueString=args.getPropertyValue(argName);
    ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
    builder.getModelNode().get(""String_Node_Str"").set(nodeValue);
    steps.add(builder.buildRequest());
  }
  return composite;
}","protected ModelNode buildWritePropertyRequest(CommandContext ctx) throws CommandFormatException {
  final String name=this.name.getValue(ctx.getParsedCommandLine(),true);
  ModelNode composite=new ModelNode();
  composite.get(""String_Node_Str"").set(""String_Node_Str"");
  composite.get(""String_Node_Str"").setEmptyList();
  ModelNode steps=composite.get(""String_Node_Str"");
  ParsedCommandLine args=ctx.getParsedCommandLine();
  final String profile;
  if (ctx.isDomainMode()) {
    profile=this.profile.getValue(args);
    if (profile == null) {
      throw new OperationFormatException(""String_Node_Str"");
    }
  }
 else {
    profile=null;
  }
  final Map<String,CommandArgument> nodeProps=loadArguments(ctx,null);
  for (  String argName : args.getPropertyNames()) {
    if (argName.equals(""String_Node_Str"") || this.name.getFullName().equals(argName)) {
      continue;
    }
    final ArgumentWithValue arg=(ArgumentWithValue)nodeProps.get(argName);
    if (arg == null) {
      throw new CommandFormatException(""String_Node_Str"" + argName + ""String_Node_Str"");
    }
    DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
    if (profile != null) {
      builder.addNode(""String_Node_Str"",profile);
    }
    for (    OperationRequestAddress.Node node : nodePath) {
      builder.addNode(node.getType(),node.getName());
    }
    builder.addNode(type,name);
    builder.setOperationName(""String_Node_Str"");
    final String propName;
    if (argName.charAt(1) == '-') {
      propName=argName.substring(2);
    }
 else {
      propName=argName.substring(1);
    }
    builder.addProperty(""String_Node_Str"",propName);
    final String valueString=args.getPropertyValue(argName);
    ModelNode nodeValue=arg.getValueConverter().fromString(valueString);
    builder.getModelNode().get(""String_Node_Str"").set(nodeValue);
    steps.add(builder.buildRequest());
  }
  return composite;
}",0.9808348647939092
167888,"/** 
 * Checks the   {@link ModelNode model}, represented my the model parameter, to see if the handler already exists.
 * @param handlerName      the name of the handler.
 * @param handlerAttribute the handler attribute definition.
 * @param model            the model.
 * @return {@code true} if the handler already exists in the handler listing.
 * @throws OperationFailedException if an operation failure occurs.
 */
protected boolean handlerExists(final String handlerName,final AttributeDefinition handlerAttribute,final ModelNode model) throws OperationFailedException {
  final ModelNode assignedHandlers=model.get(handlerAttribute.getName());
  return (assignedHandlers.isDefined() && assignedHandlers.asList().contains(model.get(handlerName)));
}","/** 
 * Checks the   {@link ModelNode model}, represented my the model parameter, to see if the handler already exists.
 * @param handlerName      the name of the handler.
 * @param handlerAttribute the handler attribute definition.
 * @param model            the model.
 * @return {@code true} if the handler already exists in the handler listing.
 * @throws OperationFailedException if an operation failure occurs.
 */
protected boolean handlerExists(final String handlerName,final AttributeDefinition handlerAttribute,final ModelNode model) throws OperationFailedException {
  final ModelNode assignedHandlers=model.get(handlerAttribute.getName());
  if (assignedHandlers.isDefined()) {
    final List<ModelNode> handlers=assignedHandlers.asList();
    for (    ModelNode handler : handlers) {
      if (handler.asString().equals(handlerName)) {
        return true;
      }
    }
  }
  return false;
}",0.876580373269115
167889,"/** 
 * Updates the handlers to be assigned. Checks to see if the handler already exists and throws an  {@link OperationFailedException exception} if it does.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForAssign(final AttributeDefinition handlerAttribute,ModelNode operation,ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  if (handlerExists(handlerName,handlerAttribute,operation)) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  getAssignedHandlers(operation).add(handlerName);
  handlerAttribute.validateAndSet(operation,model);
}","/** 
 * Updates the handlers to be assigned. Checks to see if the handler already exists and throws an  {@link OperationFailedException exception} if it does.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForAssign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  final ModelNode parent=getParent(model);
  if (handlerExists(handlerName,handlerAttribute,parent)) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  parent.get(handlerAttribute.getName()).add(handlerName);
}",0.8877928483353884
167890,"/** 
 * Updates the handlers to be unassigned. Checks to see if the handler exists and creates a new list of handlers removing the handler to be unassigned. If the handler to be unassigned does not exist an  {@link OperationFailedException exception} is thrown.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForUnassign(final AttributeDefinition handlerAttribute,ModelNode operation,ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  if (handlerExists(handlerName,handlerAttribute,operation)) {
    final ModelNode currentSubhandlers=getAssignedHandlers(model);
    final List<ModelNode> newSubhandlers=new ArrayList<ModelNode>();
    for (    ModelNode node : currentSubhandlers.asList()) {
      if (node.asString().equals(handlerName)) {
        continue;
      }
      newSubhandlers.add(node);
    }
    model.get(handlerAttribute.getName()).set(newSubhandlers);
  }
 else {
    throw createFailureMessage(MESSAGES.cannotUnassignHandler(handlerName));
  }
}","/** 
 * Updates the handlers to be unassigned. Checks to see if the handler exists and creates a new list of handlers removing the handler to be unassigned. If the handler to be unassigned does not exist an  {@link OperationFailedException exception} is thrown.
 * @param handlerAttribute the handler attribute.
 * @param operation        the operation.
 * @param model            the new model
 * @throws OperationFailedException if an error occurs.
 */
protected void updateHandlersForUnassign(final AttributeDefinition handlerAttribute,final ModelNode operation,final ModelNode model) throws OperationFailedException {
  final String handlerName=getHandlerName(operation);
  final ModelNode parent=getParent(model);
  if (handlerExists(handlerName,handlerAttribute,parent)) {
    final ModelNode currentSubhandlers=handlerAttribute.validateResolvedOperation(parent);
    final List<ModelNode> newSubhandlers=new ArrayList<ModelNode>();
    for (    ModelNode node : currentSubhandlers.asList()) {
      if (node.asString().equals(handlerName)) {
        continue;
      }
      newSubhandlers.add(node);
    }
    parent.get(handlerAttribute.getName()).set(newSubhandlers);
  }
 else {
    throw createFailureMessage(MESSAGES.cannotUnassignHandler(handlerName));
  }
}",0.9379310344827586
167891,"@Override protected void updateModel(ModelNode operation,ModelNode model) throws OperationFailedException {
  NAME.validateAndSet(operation,model);
  updateHandlersForAssign(SUBHANDLERS,operation,model);
}","@Override protected void updateModel(ModelNode operation,ModelNode model) throws OperationFailedException {
  updateHandlersForAssign(SUBHANDLERS,operation,model);
}",0.8918918918918919
167892,"@Override protected void updateModel(ModelNode operation,ModelNode model) throws OperationFailedException {
  NAME.validateAndSet(operation,model);
  updateHandlersForUnassign(SUBHANDLERS,operation,model);
}","@Override protected void updateModel(ModelNode operation,ModelNode model) throws OperationFailedException {
  updateHandlersForUnassign(SUBHANDLERS,operation,model);
}",0.893048128342246
167893,"@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  NAME.validateAndSet(operation,model);
  updateHandlersForAssign(HANDLERS,operation,model);
}","@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  updateHandlersForAssign(HANDLERS,operation,model);
}",0.8969072164948454
167894,"@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  String loggerName=getLoggerName(operation);
  String handlerName=getHandlerName(operation);
  final ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
  ServiceController<?> loggerHandlerController=serviceRegistry.getService(LogServices.loggerHandlerName(loggerName,handlerName));
  final ServiceController<Handler> handlerController=(ServiceController<Handler>)serviceRegistry.getService(LogServices.handlerName(handlerName));
  if (loggerHandlerController != null) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  if (handlerController == null)   throw createFailureMessage(MESSAGES.handlerNotFound(handlerName));
  ServiceTarget target=context.getServiceTarget();
  LoggerHandlerService service=new LoggerHandlerService(loggerName);
  ServiceBuilder<Logger> builder=target.addService(LogServices.loggerHandlerName(loggerName,handlerName),service);
  builder.addDependency(LogServices.loggerName(loggerName));
  builder.addDependency(LogServices.handlerName(handlerName),Handler.class,service.getHandlerInjector());
  builder.addListener(verificationHandler);
  newControllers.add(builder.install());
}","@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  String loggerName=getLoggerName(operation);
  String handlerName=getHandlerName(operation);
  final ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
  ServiceController<?> loggerHandlerController=serviceRegistry.getService(LogServices.loggerHandlerName(loggerName,handlerName));
  final ServiceController<Handler> handlerController=(ServiceController<Handler>)serviceRegistry.getService(LogServices.handlerName(handlerName));
  if (loggerHandlerController != null) {
    throw createFailureMessage(MESSAGES.handlerAlreadyDefined(handlerName));
  }
  if (handlerController == null) {
    throw createFailureMessage(MESSAGES.handlerNotFound(handlerName));
  }
  ServiceTarget target=context.getServiceTarget();
  LoggerHandlerService service=new LoggerHandlerService(loggerName);
  ServiceBuilder<Logger> builder=target.addService(LogServices.loggerHandlerName(loggerName,handlerName),service);
  builder.addDependency(LogServices.loggerName(loggerName));
  builder.addDependency(LogServices.handlerName(handlerName),Handler.class,service.getHandlerInjector());
  builder.addListener(verificationHandler);
  newControllers.add(builder.install());
}",0.9971771347918136
167895,"@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  NAME.validateAndSet(operation,model);
  updateHandlersForUnassign(HANDLERS,operation,model);
}","@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  updateHandlersForUnassign(HANDLERS,operation,model);
}",0.8979591836734694
167896,"@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  LEVEL.validateAndSet(operation.get(ROOT_LOGGER),model.get(ROOT_LOGGER));
}","@Override protected void updateModel(final ModelNode operation,final ModelNode model) throws OperationFailedException {
  LEVEL.validateAndSet(operation,model.get(ROOT_LOGGER));
}",0.9546666666666668
167897,"@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  final ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
  final ServiceController<Logger> controller=(ServiceController<Logger>)serviceRegistry.getService(LogServices.ROOT_LOGGER);
  final ModelNode level=LEVEL.validateResolvedOperation(model);
  if (controller != null && level.isDefined()) {
    controller.getValue().setLevel(Level.parse(level.asString()));
  }
}","@Override protected void performRuntime(final OperationContext context,final ModelNode operation,final ModelNode model,final ServiceVerificationHandler verificationHandler,final List<ServiceController<?>> newControllers) throws OperationFailedException {
  final ServiceRegistry serviceRegistry=context.getServiceRegistry(false);
  final ServiceController<Logger> controller=(ServiceController<Logger>)serviceRegistry.getService(LogServices.ROOT_LOGGER);
  final ModelNode level=LEVEL.validateResolvedOperation(model.get(ROOT_LOGGER));
  if (controller != null && level.isDefined()) {
    controller.getValue().setLevel(Level.parse(level.asString()));
  }
}",0.9868928296067848
167898,"/** 
 * {@inheritDoc} 
 */
@Override public void initializeParsers(ExtensionParsingContext context){
  context.setSubsystemXmlMapping(Namespace.CURRENT.getUriString(),NewRemotingSubsystemParser.INSTANCE);
}","/** 
 * {@inheritDoc}
 */
@Override public void initializeParsers(ExtensionParsingContext context){
  context.setSubsystemXmlMapping(Namespace.CURRENT.getUriString(),NewRemotingSubsystemParser.INSTANCE);
}",0.9975669099756692
167899,"/** 
 * {@inheritDoc} 
 */
@Override public void writeContent(XMLExtendedStreamWriter writer,SubsystemMarshallingContext context) throws XMLStreamException {
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  final ModelNode node=context.getModelNode();
  if (node.hasDefined(CONNECTOR)) {
    final ModelNode connector=node.get(CONNECTOR);
    for (    String name : connector.keys()) {
      writeConnector(writer,connector.require(name),name);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void writeContent(XMLExtendedStreamWriter writer,SubsystemMarshallingContext context) throws XMLStreamException {
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  final ModelNode node=context.getModelNode();
  if (node.hasDefined(CONNECTOR)) {
    final ModelNode connector=node.get(CONNECTOR);
    for (    String name : connector.keys()) {
      writeConnector(writer,connector.require(name),name);
    }
  }
  writer.writeEndElement();
}",0.970736629667003
167900,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + moduleClass + '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + moduleClass + ""String_Node_Str""+ moduleClass.getClassLoader()+ '}';
}",0.8108108108108109
167901,"/** 
 * Finds and returns a method corresponding to the passed <code>methodIdentifier</code>. The passed <code>classReflectionIndex</code> will be used to traverse the class hierarchy while finding the method. <p/> Returns null if no such method is found
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param methodIdentifier          The method identifier of the method being searched for
 * @return
 */
public static Method findMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final MethodIdentifier methodIdentifier){
  Method method=classReflectionIndex.getMethod(methodIdentifier);
  if (method != null) {
    return method;
  }
  Class<?> superClass=classReflectionIndex.getIndexedClass().getSuperclass();
  if (superClass != null) {
    ClassReflectionIndex<?> superClassIndex=deploymentReflectionIndex.getClassIndex(superClass);
    if (superClassIndex != null) {
      return findMethod(deploymentReflectionIndex,superClassIndex,methodIdentifier);
    }
  }
  return method;
}","/** 
 * Finds and returns a method corresponding to the passed <code>method</code>, which may be declared in the super class of the passed <code>classReflectionIndex</code>. <p/> <p/>
 * @param deploymentReflectionIndex The deployment reflection index
 * @param classReflectionIndex      The class reflection index which will be used to traverse the class hierarchy to find the method
 * @param method                    The method being searched for
 * @return
 */
public static Method findMethod(final DeploymentReflectionIndex deploymentReflectionIndex,final ClassReflectionIndex classReflectionIndex,final Method method){
  if (method == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  MethodIdentifier methodIdentifier=MethodIdentifier.getIdentifierForMethod(method);
  return findMethod(deploymentReflectionIndex,classReflectionIndex,methodIdentifier);
}",0.3797226207556193
167902,"@Override public void execute(OperationContext context,ModelNode operation){
  try {
    final String name=operation.require(NAME).asString();
    final boolean value=operation.get(VALUE).asBoolean();
    ModelNode valNode=context.readModelForUpdate(PathAddress.EMPTY_ADDRESS).get(name);
    boolean oldVal=valNode.asBoolean();
    valNode.set(value);
  }
 catch (  Exception e) {
    context.getFailureDescription().set(e.toString());
  }
  context.completeStep();
}","@Override public void execute(OperationContext context,ModelNode operation) throws OperationFailedException {
  validator.validateParameter(JVM_OPTION,operation.get(JVM_OPTION));
  final Resource resource=context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS);
  final ModelNode model=resource.getModel();
  final ModelNode option=operation.require(JVM_OPTION);
  if (model.hasDefined(JVM_OPTIONS)) {
    final ModelNode values=model.get(JVM_OPTIONS);
    model.get(JVM_OPTIONS).setEmptyList();
    for (    ModelNode value : values.asList()) {
      if (!value.equals(option)) {
        model.get(JVM_OPTIONS).add(value);
      }
    }
  }
  context.completeStep();
}",0.2550571679859278
167903,"private void parseServer(final XMLExtendedStreamReader reader,final ModelNode parentAddress,final List<ModelNode> list,final Set<String> serverNames) throws XMLStreamException {
  String name=null;
  String group=null;
  Boolean start=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (!serverNames.add(value)) {
            throw new XMLStreamException(""String_Node_Str"" + value,reader.getLocation());
          }
          name=value;
          break;
        }
case GROUP:
{
        group=value;
        break;
      }
case AUTO_START:
{
      start=Boolean.valueOf(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (group == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.GROUP));
}
final ModelNode address=parentAddress.clone().add(SERVER_CONFIG,name);
final ModelNode addUpdate=Util.getEmptyOperation(ADD,address);
addUpdate.get(GROUP).set(group);
if (start != null) {
addUpdate.get(AUTO_START).set(start.booleanValue());
}
list.add(addUpdate);
boolean sawJvm=false;
boolean sawSystemProperties=false;
boolean sawSocketBinding=false;
final Set<String> interfaceNames=new HashSet<String>();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INTERFACE_SPECS:
{
parseInterfaces(reader,interfaceNames,address,list,true);
break;
}
case JVM:
{
if (sawJvm) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseJvm(reader,address,list,new HashSet<String>());
sawJvm=true;
break;
}
case PATHS:
{
parsePaths(reader,address,list,true);
break;
}
case SOCKET_BINDING_GROUP:
{
if (sawSocketBinding) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseSocketBindingGroupRef(reader,address,list);
sawSocketBinding=true;
break;
}
case SYSTEM_PROPERTIES:
{
if (sawSystemProperties) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseSystemProperties(reader,address,list,false);
sawSystemProperties=true;
break;
}
default :
throw unexpectedElement(reader);
}
}
}","private void parseServer(final XMLExtendedStreamReader reader,final ModelNode parentAddress,final List<ModelNode> list,final Set<String> serverNames) throws XMLStreamException {
  String name=null;
  String group=null;
  Boolean start=null;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
          if (!serverNames.add(value)) {
            throw new XMLStreamException(""String_Node_Str"" + value,reader.getLocation());
          }
          name=value;
          break;
        }
case GROUP:
{
        group=value;
        break;
      }
case AUTO_START:
{
      start=Boolean.valueOf(value);
      break;
    }
default :
  throw unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));
}
if (group == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.GROUP));
}
final ModelNode address=parentAddress.clone().add(SERVER_CONFIG,name);
final ModelNode addUpdate=Util.getEmptyOperation(ADD,address);
addUpdate.get(GROUP).set(group);
if (start != null) {
addUpdate.get(AUTO_START).set(start.booleanValue());
}
list.add(addUpdate);
boolean sawJvm=false;
boolean sawSystemProperties=false;
boolean sawSocketBinding=false;
final Set<String> interfaceNames=new HashSet<String>();
while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
final Element element=Element.forName(reader.getLocalName());
switch (element) {
case INTERFACE_SPECS:
{
parseInterfaces(reader,interfaceNames,address,list,true);
break;
}
case JVM:
{
if (sawJvm) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseJvm(reader,address,list,new HashSet<String>(),true);
sawJvm=true;
break;
}
case PATHS:
{
parsePaths(reader,address,list,true);
break;
}
case SOCKET_BINDING_GROUP:
{
if (sawSocketBinding) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseSocketBindingGroupRef(reader,address,list);
sawSocketBinding=true;
break;
}
case SYSTEM_PROPERTIES:
{
if (sawSystemProperties) {
throw new XMLStreamException(element.getLocalName() + ""String_Node_Str"",reader.getLocation());
}
parseSystemProperties(reader,address,list,false);
sawSystemProperties=true;
break;
}
default :
throw unexpectedElement(reader);
}
}
}",0.9990371654149816
167904,"@Override protected void doHandle(CommandContext ctx) throws CommandFormatException {
  final String nodePath=this.nodePath.getValue(ctx.getParsedCommandLine());
  final OperationRequestAddress address;
  if (nodePath != null) {
    address=new DefaultOperationRequestAddress(ctx.getPrefix());
    CommandLineParser.CallbackHandler handler=new DefaultCallbackHandler(address);
    try {
      ctx.getCommandLineParser().parse(nodePath,handler);
    }
 catch (    CommandFormatException e) {
      ctx.printLine(e.getLocalizedMessage());
    }
  }
 else {
    address=new DefaultOperationRequestAddress(ctx.getPrefix());
  }
  final List<String> names;
  if (address.endsOnType()) {
    final String type=address.getNodeType();
    address.toParentNode();
    names=Util.getNodeNames(ctx.getModelControllerClient(),address,type);
  }
 else {
    names=Util.getNodeTypes(ctx.getModelControllerClient(),address);
  }
  printList(ctx,names,l.isPresent(ctx.getParsedCommandLine()));
}","@Override protected void doHandle(CommandContext ctx) throws CommandFormatException {
  final ParsedCommandLine parsedCmd=ctx.getParsedCommandLine();
  String nodePath=this.nodePath.getValue(parsedCmd);
  final OperationRequestAddress address;
  if (nodePath != null) {
    address=new DefaultOperationRequestAddress(ctx.getPrefix());
    CommandLineParser.CallbackHandler handler=new DefaultCallbackHandler(address);
    nodePath=ctx.getArgumentsString();
    if (l.isPresent(parsedCmd)) {
      nodePath=nodePath.trim();
      if (nodePath.startsWith(""String_Node_Str"")) {
        nodePath=nodePath.substring(3);
      }
 else {
        nodePath=nodePath.substring(0,nodePath.length() - 3);
      }
    }
    try {
      ctx.getCommandLineParser().parse(nodePath,handler);
    }
 catch (    CommandFormatException e) {
      ctx.printLine(e.getLocalizedMessage());
    }
  }
 else {
    address=new DefaultOperationRequestAddress(ctx.getPrefix());
  }
  final List<String> names;
  if (address.endsOnType()) {
    final String type=address.getNodeType();
    address.toParentNode();
    names=Util.getNodeNames(ctx.getModelControllerClient(),address,type);
  }
 else {
    names=Util.getNodeTypes(ctx.getModelControllerClient(),address);
  }
  printList(ctx,names,l.isPresent(parsedCmd));
}",0.8163804491413474
167905,"public LdapConnectionManagerService getValue() throws IllegalStateException, IllegalArgumentException {
  return this;
}","public synchronized LdapConnectionManagerService getValue() throws IllegalStateException, IllegalArgumentException {
  return this;
}",0.9486166007905138
167906,"public void stop(StopContext context){
  connectionOnlyProperties=null;
  fullProperties=null;
}","public synchronized void stop(StopContext context){
  connectionOnlyProperties=null;
  fullProperties=null;
}",0.9365853658536586
167907,"public void start(StartContext context) throws StartException {
  connectionOnlyProperties=new Properties();
  connectionOnlyProperties.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  String initialContextFactory=DEFAULT_INITIAL_CONTEXT;
  if (ldapConnection.has(INITIAL_CONTEXT_FACTORY)) {
    initialContextFactory=ldapConnection.require(INITIAL_CONTEXT_FACTORY).asString();
  }
  connectionOnlyProperties.put(Context.INITIAL_CONTEXT_FACTORY,initialContextFactory);
  String url=ldapConnection.require(URL).asString();
  connectionOnlyProperties.put(Context.PROVIDER_URL,url);
  fullProperties=(Properties)connectionOnlyProperties.clone();
  String searchDN=ldapConnection.require(SEARCH_DN).asString();
  String searchCredential=ldapConnection.require(SEARCH_CREDENTIAL).asString();
  fullProperties.put(Context.SECURITY_PRINCIPAL,searchDN);
  fullProperties.put(Context.SECURITY_CREDENTIALS,searchCredential);
}","public synchronized void start(StartContext context) throws StartException {
  connectionOnlyProperties=new Properties();
  connectionOnlyProperties.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
  String initialContextFactory=DEFAULT_INITIAL_CONTEXT;
  if (ldapConnection.has(INITIAL_CONTEXT_FACTORY)) {
    initialContextFactory=ldapConnection.require(INITIAL_CONTEXT_FACTORY).asString();
  }
  connectionOnlyProperties.put(Context.INITIAL_CONTEXT_FACTORY,initialContextFactory);
  String url=ldapConnection.require(URL).asString();
  connectionOnlyProperties.put(Context.PROVIDER_URL,url);
  fullProperties=(Properties)connectionOnlyProperties.clone();
  String searchDN=ldapConnection.require(SEARCH_DN).asString();
  String searchCredential=ldapConnection.require(SEARCH_CREDENTIAL).asString();
  fullProperties.put(Context.SECURITY_PRINCIPAL,searchDN);
  fullProperties.put(Context.SECURITY_CREDENTIALS,searchCredential);
}",0.9930220075147612
167908,"protected void stop(final StopContext context,final Logger logger){
  logger.setLevel(null);
  logger.setUseParentHandlers(true);
  logger.clearHandlers();
  for (  Handler handler : saved) {
    logger.addHandler(handler);
  }
}","protected synchronized void stop(final StopContext context,final Logger logger){
  logger.setLevel(null);
  logger.setUseParentHandlers(true);
  logger.clearHandlers();
  for (  Handler handler : saved) {
    logger.addHandler(handler);
  }
}",0.9723991507430998
167909,"protected void start(final StartContext context,final Logger logger) throws StartException {
  logger.setLevel(level);
  logger.setUseParentHandlers(useParentHandlers);
  saved=logger.clearHandlers();
}","protected synchronized void start(final StartContext context,final Logger logger) throws StartException {
  logger.setLevel(level);
  logger.setUseParentHandlers(useParentHandlers);
  saved=logger.clearHandlers();
}",0.9688249400479616
167910,"protected void stop(final StopContext context,final Logger logger){
  logger.setLevel(null);
  logger.setUseParentHandlers(true);
  logger.clearHandlers();
  for (  Handler handler : saved) {
    logger.addHandler(handler);
  }
  log.info(""String_Node_Str"");
}","protected synchronized void stop(final StopContext context,final Logger logger){
  logger.setLevel(null);
  logger.setUseParentHandlers(true);
  logger.clearHandlers();
  for (  Handler handler : saved) {
    logger.addHandler(handler);
  }
  log.info(""String_Node_Str"");
}",0.975609756097561
167911,"protected void start(final StartContext context,final Logger logger) throws StartException {
  logger.setLevel(level);
  log.info(""String_Node_Str"");
  saved=logger.clearHandlers();
}","protected synchronized void start(final StartContext context,final Logger logger) throws StartException {
  logger.setLevel(level);
  log.info(""String_Node_Str"");
  saved=logger.clearHandlers();
}",0.9656992084432716
167912,"public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getParent() == null) {
    return;
  }
  final List<DeploymentUnit> deploymentUnits=new ArrayList<DeploymentUnit>();
  deploymentUnits.add(deploymentUnit);
  deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS));
  for (  DeploymentUnit unit : deploymentUnits) {
    final ResourceRoot mainRoot=unit.getAttachment(Attachments.DEPLOYMENT_ROOT);
    if (mainRoot == null)     continue;
    VirtualFile root=mainRoot.getRoot();
    for (    String path : SEAM_FILES) {
      if (root.getChild(path).exists()) {
        final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
        final ModuleLoader moduleLoader=Module.getBootModuleLoader();
        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,VFS_MODULE,false,false,false));
        moduleSpecification.addResourceLoader(getSeamIntResourceLoader());
        return;
      }
    }
  }
}","public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getParent() != null) {
    return;
  }
  final List<DeploymentUnit> deploymentUnits=new ArrayList<DeploymentUnit>();
  deploymentUnits.add(deploymentUnit);
  deploymentUnits.addAll(deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS));
  for (  DeploymentUnit unit : deploymentUnits) {
    final ResourceRoot mainRoot=unit.getAttachment(Attachments.DEPLOYMENT_ROOT);
    if (mainRoot == null)     continue;
    VirtualFile root=mainRoot.getRoot();
    for (    String path : SEAM_FILES) {
      if (root.getChild(path).exists()) {
        final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
        final ModuleLoader moduleLoader=Module.getBootModuleLoader();
        moduleSpecification.addSystemDependency(new ModuleDependency(moduleLoader,VFS_MODULE,false,false,false));
        moduleSpecification.addResourceLoader(getSeamIntResourceLoader());
        return;
      }
    }
  }
}",0.9991212653778558
167913,"@Override protected ModelNode readResponse(final DataInput input) throws IOException {
  try {
    ProtocolUtils.expectHeader(input,NewModelControllerProtocol.PARAM_RESPONSE);
    ModelNode node=new ModelNode();
    node.readExternal(input);
    return node;
  }
  finally {
    ManagementBatchIdManager.DEFAULT.freeBatchId(getBatchId());
    activeRequests.remove(getCurrentRequestId());
  }
}","@Override protected ModelNode readResponse(final DataInput input) throws IOException {
  System.out.println(""String_Node_Str"" + getBatchId());
  try {
    ProtocolUtils.expectHeader(input,NewModelControllerProtocol.PARAM_RESPONSE);
    ModelNode node=new ModelNode();
    node.readExternal(input);
    return node;
  }
 catch (  Exception e) {
    super.setError(e);
    if (e instanceof IOException) {
      throw (IOException)e;
    }
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new IOException(e);
  }
 finally {
    ManagementBatchIdManager.DEFAULT.freeBatchId(getBatchId());
    activeRequests.remove(getCurrentRequestId());
    System.out.println(""String_Node_Str"" + getBatchId());
  }
}",0.6954986760812003
167914,"public OperationMessageHandler getMessageHandler(){
  return messageHandler;
}","OperationMessageHandler getMessageHandler(){
  return messageHandler;
}",0.953020134228188
167915,"@Override protected void readRequest(final DataInput input) throws IOException {
  int batchId=getContext().getHeader().getBatchId();
  ProtocolUtils.expectHeader(input,NewModelControllerProtocol.PARAM_INPUTSTREAM_INDEX);
  int index=input.readInt();
  ExecuteRequestContext requestContext=activeRequests.get(batchId);
  if (requestContext == null) {
    throw new IOException(""String_Node_Str"" + batchId);
  }
  InputStream in=requestContext.getAttachments().getInputStreams().get(index);
  attachmentInput=in != null ? new BufferedInputStream(in) : null;
}","@Override protected void readRequest(final DataInput input) throws IOException {
  int batchId=getContext().getHeader().getBatchId();
  System.out.println(""String_Node_Str"" + batchId);
  ProtocolUtils.expectHeader(input,NewModelControllerProtocol.PARAM_INPUTSTREAM_INDEX);
  int index=input.readInt();
  ExecuteRequestContext requestContext=activeRequests.get(batchId);
  if (requestContext == null) {
    throw new IOException(""String_Node_Str"" + batchId);
  }
  InputStream in=requestContext.getAttachments().getInputStreams().get(index);
  attachmentInput=in != null ? new BufferedInputStream(in) : null;
}",0.9562982005141388
167916,"@Override protected void writeResponse(final FlushableDataOutput output) throws IOException {
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  if (attachmentInput != null) {
    int i=attachmentInput.read();
    while (i != -1) {
      bout.write(i);
      i=attachmentInput.read();
    }
  }
  byte[] bytes=bout.toByteArray();
  output.write(NewModelControllerProtocol.PARAM_INPUTSTREAM_LENGTH);
  output.writeInt(bytes.length);
  output.write(NewModelControllerProtocol.PARAM_INPUTSTREAM_CONTENTS);
  output.write(bytes);
}","@Override protected void writeResponse(final FlushableDataOutput output) throws IOException {
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  if (attachmentInput != null) {
    int i=attachmentInput.read();
    while (i != -1) {
      bout.write(i);
      i=attachmentInput.read();
    }
  }
  byte[] bytes=bout.toByteArray();
  output.write(NewModelControllerProtocol.PARAM_INPUTSTREAM_LENGTH);
  output.writeInt(bytes.length);
  output.write(NewModelControllerProtocol.PARAM_INPUTSTREAM_CONTENTS);
  output.write(bytes);
  System.out.println(""String_Node_Str"" + getContext().getHeader().getBatchId());
}",0.9297484822202948
167917,"public OperationAttachments getAttachments(){
  return attachments;
}","OperationAttachments getAttachments(){
  return attachments;
}",0.9465648854961832
167918,"public ExecuteRequestContext(final OperationMessageHandler messageHandler,final OperationAttachments attachments){
  this.messageHandler=messageHandler;
  this.attachments=attachments;
}","ExecuteRequestContext(final OperationMessageHandler messageHandler,final OperationAttachments attachments){
  this.messageHandler=messageHandler;
  this.attachments=attachments;
}",0.9808219178082191
167919,"@Override protected void writeRequest(final int protocolVersion,final FlushableDataOutput output) throws IOException {
  activeRequests.put(getBatchId(),executeRequestContext);
  output.write(NewModelControllerProtocol.PARAM_OPERATION);
  operation.writeExternal(output);
  output.write(NewModelControllerProtocol.PARAM_INPUTSTREAMS_LENGTH);
  int inputStreamLength=0;
  if (executeRequestContext.getAttachments() != null) {
    List<InputStream> streams=executeRequestContext.getAttachments().getInputStreams();
    if (streams != null) {
      inputStreamLength=streams.size();
    }
  }
  output.writeInt(inputStreamLength);
}","@Override protected void writeRequest(final int protocolVersion,final FlushableDataOutput output) throws IOException {
  try {
    System.out.println(""String_Node_Str"" + getBatchId());
    activeRequests.put(getBatchId(),executeRequestContext);
    output.write(NewModelControllerProtocol.PARAM_OPERATION);
    operation.writeExternal(output);
    output.write(NewModelControllerProtocol.PARAM_INPUTSTREAMS_LENGTH);
    int inputStreamLength=0;
    if (executeRequestContext.getAttachments() != null) {
      List<InputStream> streams=executeRequestContext.getAttachments().getInputStreams();
      if (streams != null) {
        inputStreamLength=streams.size();
      }
    }
    output.writeInt(inputStreamLength);
  }
 catch (  Exception e) {
    super.setError(e);
    if (e instanceof IOException) {
      throw (IOException)e;
    }
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new IOException(e);
  }
}",0.7525252525252525
167920,"@Override protected void writeResponse(final FlushableDataOutput output) throws IOException {
  ModelNode result;
  try {
    result=controller.execute(operation,new OperationMessageHandlerProxy(getContext(),batchId),NewModelController.OperationTransactionControl.COMMIT,new OperationAttachmentsProxy(getContext(),batchId,attachmentsLength));
  }
 catch (  Exception e) {
    final ModelNode failure=new ModelNode();
    failure.get(OUTCOME).set(FAILED);
    failure.get(FAILURE_DESCRIPTION).set(e.getClass().getName() + ""String_Node_Str"" + e.getMessage());
    result=failure;
  }
  output.write(NewModelControllerProtocol.PARAM_RESPONSE);
  result.writeExternal(output);
}","@Override protected void writeResponse(final FlushableDataOutput output) throws IOException {
  ModelNode result;
  try {
    System.out.println(""String_Node_Str"" + batchId);
    result=controller.execute(operation,new OperationMessageHandlerProxy(getContext(),batchId),NewModelController.OperationTransactionControl.COMMIT,new OperationAttachmentsProxy(getContext(),batchId,attachmentsLength));
  }
 catch (  Exception e) {
    final ModelNode failure=new ModelNode();
    failure.get(OUTCOME).set(FAILED);
    failure.get(FAILURE_DESCRIPTION).set(e.getClass().getName() + ""String_Node_Str"" + e.getMessage());
    result=failure;
  }
  System.out.println(""String_Node_Str"" + batchId + ""String_Node_Str""+ result.get(OUTCOME).asString());
  output.write(NewModelControllerProtocol.PARAM_RESPONSE);
  result.writeExternal(output);
}",0.8962765957446809
167921,"private void handleRequest(final ManagementRequestHeader header,final DataInput input) throws IOException {
  final FlushableDataOutputImpl output=FlushableDataOutputImpl.create(writeMessage());
  Exception error=null;
  try {
    final ManagementRequestHandler requestHandler;
    try {
      requestHandler=getRequestHandler(header);
      requestHandler.setContext(new ManagementRequestContext(ManagementChannel.this,header));
      requestHandler.readRequest(input);
      expectHeader(input,ManagementProtocol.REQUEST_END);
    }
 catch (    Exception e) {
      error=e;
      throw e;
    }
 finally {
      writeResponseHeader(header,output,error);
      if (error != null) {
        output.writeByte(ManagementProtocol.RESPONSE_END);
      }
    }
    requestHandler.writeResponse(output);
    output.writeByte(ManagementProtocol.RESPONSE_END);
  }
 catch (  Exception e) {
    formatException(e);
  }
 finally {
    IoUtils.safeClose(output);
  }
}","private void handleRequest(final ManagementRequestHeader header,final DataInput input) throws IOException {
  final FlushableDataOutputImpl output=FlushableDataOutputImpl.create(writeMessage());
  Exception error=null;
  try {
    final ManagementRequestHandler requestHandler;
    try {
      requestHandler=getRequestHandler(header);
      requestHandler.setContext(new ManagementRequestContext(ManagementChannel.this,header));
      requestHandler.readRequest(input);
      expectHeader(input,ManagementProtocol.REQUEST_END);
    }
 catch (    Exception e) {
      error=e;
      throw e;
    }
 finally {
      writeResponseHeader(header,output,error);
      if (error != null) {
        output.writeByte(ManagementProtocol.RESPONSE_END);
      }
    }
    requestHandler.writeResponse(output);
    output.writeByte(ManagementProtocol.RESPONSE_END);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throwFormattedException(e);
  }
 finally {
    IoUtils.safeClose(output);
  }
}",0.9194458696767572
167922,"@Override public void start(StartContext context) throws StartException {
  try {
    endpointValue.getValue().registerService(channelName,this,optionMap);
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}","@Override public void start(StartContext context) throws StartException {
  try {
    System.out.println(""String_Node_Str"" + channelName);
    endpointValue.getValue().registerService(channelName,this,optionMap);
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
}",0.8866799204771372
167923,"@Override protected void doHandle(CommandContext ctx) throws CommandFormatException {
  ModelNode request;
  try {
    request=buildRequest(ctx);
  }
 catch (  CommandFormatException e1) {
    ctx.printLine(e1.getLocalizedMessage());
    return;
  }
  if (request == null) {
    ctx.printLine(""String_Node_Str"");
    return;
  }
  ModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode result;
  try {
    result=client.execute(request);
  }
 catch (  Exception e) {
    ctx.printLine(""String_Node_Str"" + e.getLocalizedMessage());
    return;
  }
  if (!Util.isSuccess(result)) {
    ctx.printLine(Util.getFailureDescription(result));
    return;
  }
}","@Override protected void doHandle(CommandContext ctx) throws CommandFormatException {
  ModelNode request;
  try {
    request=buildRequest(ctx);
  }
 catch (  CommandFormatException e1) {
    ctx.printLine(e1.getLocalizedMessage());
    return;
  }
  if (request == null) {
    ctx.printLine(""String_Node_Str"");
    return;
  }
  NewModelControllerClient client=ctx.getModelControllerClient();
  final ModelNode result;
  try {
    result=client.execute(request);
  }
 catch (  Exception e) {
    ctx.printLine(""String_Node_Str"" + e.getLocalizedMessage());
    return;
  }
  if (!Util.isSuccess(result)) {
    ctx.printLine(Util.getFailureDescription(result));
    return;
  }
}",0.9977859778597786
167924,"public ValueCompleter(final String attrName){
  super(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profileName == null) {
          return Collections.emptyList();
        }
        builder.addNode(""String_Node_Str"",profileName);
      }
      builder.addNode(""String_Node_Str"",""String_Node_Str"");
      final String dsName=jndiName.getValue(ctx.getParsedArguments());
      if (dsName == null) {
        return Collections.emptyList();
      }
      builder.addNode(dsType,dsName);
      builder.setOperationName(""String_Node_Str"");
      builder.addProperty(""String_Node_Str"",attrName);
      try {
        ModelNode result=client.execute(builder.buildRequest());
        if (!result.hasDefined(""String_Node_Str""))         return Collections.emptyList();
        return Collections.singletonList(result.get(""String_Node_Str"").asString());
      }
 catch (      Exception e) {
        return Collections.emptyList();
      }
    }
  }
);
}","public ValueCompleter(final String attrName){
  super(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      NewModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profileName == null) {
          return Collections.emptyList();
        }
        builder.addNode(""String_Node_Str"",profileName);
      }
      builder.addNode(""String_Node_Str"",""String_Node_Str"");
      final String dsName=jndiName.getValue(ctx.getParsedArguments());
      if (dsName == null) {
        return Collections.emptyList();
      }
      builder.addNode(dsType,dsName);
      builder.setOperationName(""String_Node_Str"");
      builder.addProperty(""String_Node_Str"",attrName);
      try {
        ModelNode result=client.execute(builder.buildRequest());
        if (!result.hasDefined(""String_Node_Str""))         return Collections.emptyList();
        return Collections.singletonList(result.get(""String_Node_Str"").asString());
      }
 catch (      Exception e) {
        return Collections.emptyList();
      }
    }
  }
);
}",0.9988851727982164
167925,"@Override public List<String> getAllCandidates(CommandContext ctx){
  ModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
  if (ctx.isDomainMode()) {
    final String profileName=profile.getValue(ctx.getParsedArguments());
    if (profileName == null) {
      return Collections.emptyList();
    }
    builder.addNode(""String_Node_Str"",profileName);
  }
  builder.addNode(""String_Node_Str"",""String_Node_Str"");
  final String dsName=jndiName.getValue(ctx.getParsedArguments());
  if (dsName == null) {
    return Collections.emptyList();
  }
  builder.addNode(dsType,dsName);
  builder.setOperationName(""String_Node_Str"");
  builder.addProperty(""String_Node_Str"",attrName);
  try {
    ModelNode result=client.execute(builder.buildRequest());
    if (!result.hasDefined(""String_Node_Str""))     return Collections.emptyList();
    return Collections.singletonList(result.get(""String_Node_Str"").asString());
  }
 catch (  Exception e) {
    return Collections.emptyList();
  }
}","@Override public List<String> getAllCandidates(CommandContext ctx){
  NewModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  DefaultOperationRequestBuilder builder=new DefaultOperationRequestBuilder();
  if (ctx.isDomainMode()) {
    final String profileName=profile.getValue(ctx.getParsedArguments());
    if (profileName == null) {
      return Collections.emptyList();
    }
    builder.addNode(""String_Node_Str"",profileName);
  }
  builder.addNode(""String_Node_Str"",""String_Node_Str"");
  final String dsName=jndiName.getValue(ctx.getParsedArguments());
  if (dsName == null) {
    return Collections.emptyList();
  }
  builder.addNode(dsType,dsName);
  builder.setOperationName(""String_Node_Str"");
  builder.addProperty(""String_Node_Str"",attrName);
  try {
    ModelNode result=client.execute(builder.buildRequest());
    if (!result.hasDefined(""String_Node_Str""))     return Collections.emptyList();
    return Collections.singletonList(result.get(""String_Node_Str"").asString());
  }
 catch (  Exception e) {
    return Collections.emptyList();
  }
}",0.9986708019494904
167926,"public NoArgDataSourceOperationHandler(String command,final String dsType,String operationName){
  super(command,true);
  this.dsType=dsType;
  this.operationName=operationName;
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,""String_Node_Str"");
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      final String profileArg;
      if (!ctx.isDomainMode()) {
        profileArg=null;
      }
 else {
        profileArg=profile.getValue(ctx.getParsedArguments());
        if (profileArg == null) {
          return Collections.emptyList();
        }
      }
      return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
}","public NoArgDataSourceOperationHandler(String command,final String dsType,String operationName){
  super(command,true);
  this.dsType=dsType;
  this.operationName=operationName;
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,""String_Node_Str"");
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      NewModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      final String profileArg;
      if (!ctx.isDomainMode()) {
        profileArg=null;
      }
 else {
        profileArg=profile.getValue(ctx.getParsedArguments());
        if (profileArg == null) {
          return Collections.emptyList();
        }
      }
      return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
}",0.9990794722307456
167927,"@Override public List<String> getAllCandidates(CommandContext ctx){
  ModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  final String profileArg;
  if (!ctx.isDomainMode()) {
    profileArg=null;
  }
 else {
    profileArg=profile.getValue(ctx.getParsedArguments());
    if (profileArg == null) {
      return Collections.emptyList();
    }
  }
  return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
}","@Override public List<String> getAllCandidates(CommandContext ctx){
  NewModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  final String profileArg;
  if (!ctx.isDomainMode()) {
    profileArg=null;
  }
 else {
    profileArg=profile.getValue(ctx.getParsedArguments());
    if (profileArg == null) {
      return Collections.emptyList();
    }
  }
  return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
}",0.997020854021847
167928,"public SimpleDataSourceOperationHandler(final String dsType){
  super(""String_Node_Str"",true);
  this.dsType=dsType;
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,""String_Node_Str"");
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      ModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      final String profileArg;
      if (!ctx.isDomainMode()) {
        profileArg=null;
      }
 else {
        profileArg=profile.getValue(ctx.getParsedArguments());
        if (profileArg == null) {
          return Collections.emptyList();
        }
      }
      return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final StringBuilder buf=new StringBuilder();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profile == null) {
          return -1;
        }
        buf.append(""String_Node_Str"").append(profileName);
      }
      buf.append(""String_Node_Str"").append(dsType).append('=');
      final String dsName=name.getValue(ctx.getParsedArguments());
      if (dsName == null) {
        return -1;
      }
      buf.append(Util.escapeString(dsName,OperationRequestCompleter.ESCAPE_SELECTOR)).append(':');
      final int addressLength=buf.length();
      cursor+=addressLength;
      buf.append(buffer);
      int result=OperationRequestCompleter.INSTANCE.complete(ctx,buf.toString(),cursor,candidates) - addressLength;
      return result;
    }
  }
,1,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addRequiredPreceding(name);
}","public SimpleDataSourceOperationHandler(final String dsType){
  super(""String_Node_Str"",true);
  this.dsType=dsType;
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,""String_Node_Str"");
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,new DefaultCompleter(new DefaultCompleter.CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      NewModelControllerClient client=ctx.getModelControllerClient();
      if (client == null) {
        return Collections.emptyList();
      }
      final String profileArg;
      if (!ctx.isDomainMode()) {
        profileArg=null;
      }
 else {
        profileArg=profile.getValue(ctx.getParsedArguments());
        if (profileArg == null) {
          return Collections.emptyList();
        }
      }
      return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
    }
  }
),0,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation=new ArgumentWithValue(this,new CommandLineCompleter(){
    @Override public int complete(    CommandContext ctx,    String buffer,    int cursor,    List<String> candidates){
      final StringBuilder buf=new StringBuilder();
      if (ctx.isDomainMode()) {
        final String profileName=profile.getValue(ctx.getParsedArguments());
        if (profile == null) {
          return -1;
        }
        buf.append(""String_Node_Str"").append(profileName);
      }
      buf.append(""String_Node_Str"").append(dsType).append('=');
      final String dsName=name.getValue(ctx.getParsedArguments());
      if (dsName == null) {
        return -1;
      }
      buf.append(Util.escapeString(dsName,OperationRequestCompleter.ESCAPE_SELECTOR)).append(':');
      final int addressLength=buf.length();
      cursor+=addressLength;
      buf.append(buffer);
      int result=OperationRequestCompleter.INSTANCE.complete(ctx,buf.toString(),cursor,candidates) - addressLength;
      return result;
    }
  }
,1,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  operation.addRequiredPreceding(name);
}",0.9994824909435917
167929,"@Override public List<String> getAllCandidates(CommandContext ctx){
  ModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  final String profileArg;
  if (!ctx.isDomainMode()) {
    profileArg=null;
  }
 else {
    profileArg=profile.getValue(ctx.getParsedArguments());
    if (profileArg == null) {
      return Collections.emptyList();
    }
  }
  return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
}","@Override public List<String> getAllCandidates(CommandContext ctx){
  NewModelControllerClient client=ctx.getModelControllerClient();
  if (client == null) {
    return Collections.emptyList();
  }
  final String profileArg;
  if (!ctx.isDomainMode()) {
    profileArg=null;
  }
 else {
    profileArg=profile.getValue(ctx.getParsedArguments());
    if (profileArg == null) {
      return Collections.emptyList();
    }
  }
  return Util.getDatasources(ctx.getModelControllerClient(),profileArg,dsType);
}",0.997020854021847
167930,"@Override public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {
}","@Override public boolean canAppearNext(CommandContext ctx) throws CommandFormatException {
  if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
    return false;
  }
  return super.canAppearNext(ctx);
}",0.580441640378549
167931,"public JmsQueueAddHandler(){
}","public JmsQueueAddHandler(){
  super(""String_Node_Str"",true);
  profile=new ArgumentWithValue(this,new DefaultCompleter(new CandidatesProvider(){
    @Override public List<String> getAllCandidates(    CommandContext ctx){
      return Util.getNodeNames(ctx.getModelControllerClient(),null,""String_Node_Str"");
    }
  }
),""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (!ctx.isDomainMode()) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  name=new ArgumentWithValue(this,""String_Node_Str""){
    @Override public boolean canAppearNext(    CommandContext ctx) throws CommandFormatException {
      if (ctx.isDomainMode() && !profile.isPresent(ctx.getParsedArguments())) {
        return false;
      }
      return super.canAppearNext(ctx);
    }
  }
;
  entries=new ArgumentWithValue(this,""String_Node_Str"");
  entries.addRequiredPreceding(name);
  selector=new ArgumentWithValue(this,""String_Node_Str"");
  selector.addRequiredPreceding(name);
  durable=new ArgumentWithValue(this,new SimpleTabCompleter(new String[]{""String_Node_Str"",""String_Node_Str""}),""String_Node_Str"");
  durable.addRequiredPreceding(name);
}",0.0476190476190476
167932,"private void writeServerDeployments(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> deploymentNames=modelNode.keys();
  if (deploymentNames.size() > 0) {
    boolean deploymentWritten=false;
    for (    String uniqueName : deploymentNames) {
      final ModelNode deployment=modelNode.get(uniqueName);
      if (!deployment.get(PERSISTENT).asBoolean()) {
        continue;
      }
      if (!deploymentWritten) {
        writer.writeStartElement(Element.DEPLOYMENTS.getLocalName());
        deploymentWritten=true;
      }
      final String runtimeName=deployment.get(RUNTIME_NAME).asString();
      boolean enabled=deployment.get(ENABLED).asBoolean();
      writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);
      if (!enabled) {
        writeAttribute(writer,Attribute.ENABLED,""String_Node_Str"");
      }
      final List<ModelNode> contentItems=deployment.require(CONTENT).asList();
      for (      ModelNode contentItem : contentItems) {
        writeContentItem(writer,contentItem);
      }
      writer.writeEndElement();
    }
    if (deploymentWritten) {
      writer.writeEndElement();
    }
  }
}","private void writeServerDeployments(final XMLExtendedStreamWriter writer,final ModelNode modelNode) throws XMLStreamException {
  Set<String> deploymentNames=modelNode.keys();
  if (deploymentNames.size() > 0) {
    boolean deploymentWritten=false;
    for (    String uniqueName : deploymentNames) {
      final ModelNode deployment=modelNode.get(uniqueName);
      if (deployment.hasDefined(PERSISTENT) && !deployment.get(PERSISTENT).asBoolean()) {
        continue;
      }
      if (!deploymentWritten) {
        writer.writeStartElement(Element.DEPLOYMENTS.getLocalName());
        deploymentWritten=true;
      }
      final String runtimeName=deployment.get(RUNTIME_NAME).asString();
      boolean enabled=deployment.get(ENABLED).asBoolean();
      writer.writeStartElement(Element.DEPLOYMENT.getLocalName());
      writeAttribute(writer,Attribute.NAME,uniqueName);
      writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);
      if (!enabled) {
        writeAttribute(writer,Attribute.ENABLED,""String_Node_Str"");
      }
      final List<ModelNode> contentItems=deployment.require(CONTENT).asList();
      for (      ModelNode contentItem : contentItems) {
        writeContentItem(writer,contentItem);
      }
      writer.writeEndElement();
    }
    if (deploymentWritten) {
      writer.writeEndElement();
    }
  }
}",0.9859582542694496
167933,"public static ModelNodeRegistration createHostRegistry(final ExtensibleConfigurationPersister configurationPersister,HostControllerEnvironment environment,DomainModelProxy domainModelProxy){
  final ModelNodeRegistration root=ModelNodeRegistration.Factory.create(HostDescriptionProviders.ROOT_PROVIDER);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(configurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,Storage.RUNTIME);
  ModelNodeRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  sysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration securityRealms=root.registerSubModel(PathElement.pathElement(MANAGEMENT,SECURITY_REALMS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration securityRealm=securityRealms.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
  ModelNodeRegistration connections=root.registerSubModel(PathElement.pathElement(MANAGEMENT,CONNECTIONS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration connection=connections.registerSubModel(PathElement.pathElement(CONNECTION),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,HTTP_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  HttpManagementAddHandler httpAddHandler=HttpManagementAddHandler.getInstance(environment);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,httpAddHandler,httpAddHandler,false);
  LocalDomainControllerAddHandler localDcAddHandler=LocalDomainControllerAddHandler.getInstance(domainModelProxy,environment);
  root.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,localDcAddHandler,localDcAddHandler,false);
  root.registerOperationHandler(LocalDomainControllerRemoveHandler.OPERATION_NAME,LocalDomainControllerRemoveHandler.INSTANCE,LocalDomainControllerRemoveHandler.INSTANCE,false);
  RemoteDomainControllerAddHandler remoteDcAddHandler=RemoteDomainControllerAddHandler.getInstance(domainModelProxy,environment);
  root.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,remoteDcAddHandler,remoteDcAddHandler,false);
  root.registerOperationHandler(RemoteDomainControllerRemoveHandler.OPERATION_NAME,RemoteDomainControllerRemoveHandler.INSTANCE,RemoteDomainControllerRemoveHandler.INSTANCE,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,null,configurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  final ModelNodeRegistration jvms=root.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(jvms);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  paths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration servers=root.registerSubModel(PathElement.pathElement(SERVER_CONFIG),HostDescriptionProviders.SERVER_PROVIDER);
  servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
  servers.registerOperationHandler(ServerRemoveHandler.OPERATION_NAME,ServerRemoveHandler.INSTANCE,ServerRemoveHandler.INSTANCE,false);
  servers.registerReadWriteAttribute(AUTO_START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  ModelNodeRegistration serverPaths=servers.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverPaths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  serverPaths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  serverInterfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration serverSysProps=servers.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SERVER_SYSTEM_PROPERTIES_PROVIDER);
  serverSysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  serverSysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  serverSysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  serverSysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
  final ModelNodeRegistration serverVMs=servers.registerSubModel(PathElement.pathElement(JVM),JVMHandlers.SERVER_MODEL_PROVIDER);
  JVMHandlers.register(serverVMs,true);
  return root;
}","public static ModelNodeRegistration createHostRegistry(final ExtensibleConfigurationPersister configurationPersister,HostControllerEnvironment environment,DomainModelProxy domainModelProxy){
  final ModelNodeRegistration root=ModelNodeRegistration.Factory.create(HostDescriptionProviders.ROOT_PROVIDER);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  XmlMarshallingHandler xmh=new XmlMarshallingHandler(configurationPersister);
  root.registerOperationHandler(XmlMarshallingHandler.OPERATION_NAME,xmh,xmh,false);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerReadWriteAttribute(NAME,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  root.registerReadOnlyAttribute(MASTER,IsMasterHandler.INSTANCE,Storage.RUNTIME);
  ModelNodeRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  sysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration securityRealms=root.registerSubModel(PathElement.pathElement(MANAGEMENT,SECURITY_REALMS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration securityRealm=securityRealms.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
  ModelNodeRegistration connections=root.registerSubModel(PathElement.pathElement(MANAGEMENT,CONNECTIONS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration connection=connections.registerSubModel(PathElement.pathElement(CONNECTION),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  NativeManagementAddHandler nmah=new NativeManagementAddHandler(new LocalHostControllerInfoImpl(new ControlledProcessState(false)));
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,nmah,nmah,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,HTTP_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  HttpManagementAddHandler httpAddHandler=HttpManagementAddHandler.getInstance(environment);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,httpAddHandler,httpAddHandler,false);
  LocalDomainControllerAddHandler localDcAddHandler=LocalDomainControllerAddHandler.getInstance(domainModelProxy,environment);
  root.registerOperationHandler(LocalDomainControllerAddHandler.OPERATION_NAME,localDcAddHandler,localDcAddHandler,false);
  root.registerOperationHandler(LocalDomainControllerRemoveHandler.OPERATION_NAME,LocalDomainControllerRemoveHandler.INSTANCE,LocalDomainControllerRemoveHandler.INSTANCE,false);
  RemoteDomainControllerAddHandler remoteDcAddHandler=RemoteDomainControllerAddHandler.getInstance(domainModelProxy,environment);
  root.registerOperationHandler(RemoteDomainControllerAddHandler.OPERATION_NAME,remoteDcAddHandler,remoteDcAddHandler,false);
  root.registerOperationHandler(RemoteDomainControllerRemoveHandler.OPERATION_NAME,RemoteDomainControllerRemoveHandler.INSTANCE,RemoteDomainControllerRemoveHandler.INSTANCE,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(configurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(configurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(configurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,null,configurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
  final ModelNodeRegistration jvms=root.registerSubModel(PathElement.pathElement(JVM),CommonProviders.JVM_PROVIDER);
  JVMHandlers.register(jvms);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  paths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration servers=root.registerSubModel(PathElement.pathElement(SERVER_CONFIG),HostDescriptionProviders.SERVER_PROVIDER);
  servers.registerOperationHandler(ServerAddHandler.OPERATION_NAME,ServerAddHandler.INSTANCE,ServerAddHandler.INSTANCE,false);
  servers.registerOperationHandler(ServerRemoveHandler.OPERATION_NAME,ServerRemoveHandler.INSTANCE,ServerRemoveHandler.INSTANCE,false);
  servers.registerReadWriteAttribute(AUTO_START,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_GROUP,null,WriteAttributeHandlers.WriteAttributeOperationHandler.INSTANCE,Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(SOCKET_BINDING_PORT_OFFSET,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(PRIORITY,null,new WriteAttributeHandlers.IntRangeValidatingHandler(0),Storage.CONFIGURATION);
  servers.registerReadWriteAttribute(CPU_AFFINITY,null,new WriteAttributeHandlers.StringLengthValidatingHandler(1),Storage.CONFIGURATION);
  ModelNodeRegistration serverPaths=servers.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverPaths.registerOperationHandler(PathAddHandler.OPERATION_NAME,PathAddHandler.SPECIFIED_INSTANCE,PathAddHandler.SPECIFIED_INSTANCE,false);
  serverPaths.registerOperationHandler(PathRemoveHandler.OPERATION_NAME,PathRemoveHandler.INSTANCE,PathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration serverInterfaces=servers.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  serverInterfaces.registerOperationHandler(InterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  serverInterfaces.registerOperationHandler(InterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration serverSysProps=servers.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),HostDescriptionProviders.SERVER_SYSTEM_PROPERTIES_PROVIDER);
  serverSysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITH_BOOTTIME,false);
  serverSysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  serverSysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  serverSysProps.registerReadWriteAttribute(BOOT_TIME,null,new WriteAttributeHandlers.ModelTypeValidatingHandler(ModelType.BOOLEAN),AttributeAccess.Storage.CONFIGURATION);
  final ModelNodeRegistration serverVMs=servers.registerSubModel(PathElement.pathElement(JVM),JVMHandlers.SERVER_MODEL_PROVIDER);
  JVMHandlers.register(serverVMs,true);
  return root;
}",0.8238448476181964
167934,"private static void installServices(final ServiceTarget serviceTarget,final NewAbstractModelControllerOperationHandlerService<?> operationHandlerService,final ServiceName modelControllerName,final ServiceName networkInterfaceBindingName,final int port,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers){
  final SimpleServerAuthenticationProvider provider=new SimpleServerAuthenticationProvider();
  provider.addUser(""String_Node_Str"",RemotingServices.ENDPOINT.getSimpleName(),""String_Node_Str"".toCharArray());
  final ConnectorService connectorService=new ConnectorService();
  connectorService.setOptionMap(OptionMap.create(Options.SASL_MECHANISMS,Sequence.of(""String_Node_Str"")));
  addController(newControllers,serviceTarget.addService(RemotingServices.connectorServiceName(""String_Node_Str""),connectorService).addDependency(RemotingServices.ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addInjection(connectorService.getAuthenticationProviderInjector(),provider).addListener(verificationHandler).setInitialMode(Mode.ACTIVE).install());
  final NetworkBindingStreamServerService streamServerService=new NetworkBindingStreamServerService(port);
  addController(newControllers,serviceTarget.addService(RemotingServices.serverServiceName(""String_Node_Str"",port),streamServerService).addDependency(RemotingServices.connectorServiceName(""String_Node_Str""),ChannelListener.class,streamServerService.getConnectorInjector()).addDependency(networkInterfaceBindingName,NetworkInterfaceBinding.class,streamServerService.getInterfaceBindingInjector()).addInjection(connectorService.getAuthenticationProviderInjector(),provider).addListener(verificationHandler).setInitialMode(Mode.ACTIVE).install());
  installChannelServices(serviceTarget,operationHandlerService,modelControllerName,""String_Node_Str"",verificationHandler,newControllers);
}","private static void installServices(final ServiceTarget serviceTarget,final NewAbstractModelControllerOperationHandlerService<?> operationHandlerService,final ServiceName modelControllerName,final ServiceName networkInterfaceBindingName,final int port,ServiceVerificationHandler verificationHandler,List<ServiceController<?>> newControllers){
  final SimpleServerAuthenticationProvider provider=new SimpleServerAuthenticationProvider();
  provider.addUser(""String_Node_Str"",RemotingServices.ENDPOINT.getSimpleName(),""String_Node_Str"".toCharArray());
  final ConnectorService connectorService=new ConnectorService();
  connectorService.setOptionMap(OptionMap.create(Options.SASL_MECHANISMS,Sequence.of(""String_Node_Str"")));
  addController(newControllers,serviceTarget.addService(RemotingServices.connectorServiceName(""String_Node_Str""),connectorService).addDependency(RemotingServices.ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addInjection(connectorService.getAuthenticationProviderInjector(),provider).addListener(verificationHandler).setInitialMode(Mode.ACTIVE).install());
  final NetworkBindingStreamServerService streamServerService=new NetworkBindingStreamServerService(port);
  addController(newControllers,serviceTarget.addService(RemotingServices.serverServiceName(""String_Node_Str"",port),streamServerService).addDependency(RemotingServices.connectorServiceName(""String_Node_Str""),ChannelListener.class,streamServerService.getConnectorInjector()).addDependency(networkInterfaceBindingName,NetworkInterfaceBinding.class,streamServerService.getInterfaceBindingInjector()).addListener(verificationHandler).setInitialMode(Mode.ACTIVE).install());
  installChannelServices(serviceTarget,operationHandlerService,modelControllerName,""String_Node_Str"",verificationHandler,newControllers);
}",0.9794705564559696
167935,"public static void addService(final ServiceTarget serviceTarget,final Bootstrap.Configuration configuration){
  ServerService service=new ServerService(null);
  ServiceBuilder<?> serviceBuilder=serviceTarget.addService(Services.JBOSS_SERVER_CONTROLLER,service);
  serviceBuilder.install();
}","public static void addService(final ServiceTarget serviceTarget,final Bootstrap.Configuration configuration){
  ServerService service=new ServerService(null,null);
  ServiceBuilder<?> serviceBuilder=serviceTarget.addService(Services.JBOSS_SERVER_CONTROLLER,service);
  serviceBuilder.install();
}",0.9914821124361158
167936,"/** 
 * Construct a new instance.
 * @param configurationPersister the configuration persister for this server
 */
ServerService(final ConfigurationPersister configurationPersister){
  super(NewOperationContext.Type.SERVER,configurationPersister,ServerDescriptionProviders.ROOT_PROVIDER,prepareStep);
}","/** 
 * Construct a new instance.
 * @param configurationPersister the configuration persister for this server
 */
ServerService(final ConfigurationPersister configurationPersister,final NewStepHandler prepareStep){
  super(NewOperationContext.Type.SERVER,configurationPersister,ServerDescriptionProviders.ROOT_PROVIDER,prepareStep);
}",0.9481946624803768
167937,"protected void boot(final StartContext context) throws ConfigurationPersistenceException {
  final EnumMap<Phase,Set<RegisteredProcessor>> deployers=new EnumMap<Phase,Set<RegisteredProcessor>>(Phase.class);
  for (  Phase phase : Phase.values()) {
    deployers.put(phase,new TreeSet<RegisteredProcessor>());
  }
  final ThreadLocal<DeploymentProcessorTarget> local=AbstractDeploymentChainStep.PROCESSOR_TARGET_THREAD_LOCAL;
  local.set(new DeploymentProcessorTarget(){
    public void addDeploymentProcessor(    final Phase phase,    final int priority,    final DeploymentUnitProcessor processor){
      deployers.get(phase).add(new RegisteredProcessor(priority,processor));
    }
  }
);
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MOUNT,new DeploymentRootMountProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ADDITIONAL_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SUB_DEPLOYMENT,new SubDeploymentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MODULE_IDENTIFIERS,new ModuleIdentifierProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ANNOTATION_INDEX,new AnnotationIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_STRUCTURE_DESCRIPTOR,new DeploymentStructureDescriptorParser()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_COMPOSITE_ANNOTATION_INDEX,new CompositeIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_ADDITIONAL_MODULES,new AdditionalModuleProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_CLASS_PATH,new ManifestClassPathProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_LIST,new ManifestExtensionListProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_NAME,new ManifestExtensionNameProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_SERVICE_LOADER_DEPLOYMENT,new ServiceLoaderProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_MODULE,new ModuleDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SAR_MODULE,new ServiceActivatorDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_CLASS_PATH,new ModuleClassPathProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_EXTENSION_LIST,new ModuleExtensionListProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor()));
  deployers.get(Phase.CONFIGURE_MODULE).add(new RegisteredProcessor(Phase.CONFIGURE_MODULE_SPEC,new ModuleSpecProcessor()));
  deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_INSTALL_EXTENSION,new ModuleExtensionNameProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_SERVICE_ACTIVATOR,new ServiceActivatorProcessor()));
  try {
    super.boot(context);
  }
  finally {
    local.set(null);
  }
  final EnumMap<Phase,List<DeploymentUnitProcessor>> finalDeployers=new EnumMap<Phase,List<DeploymentUnitProcessor>>(Phase.class);
  final List<DeploymentUnitProcessor> processorList=new ArrayList<DeploymentUnitProcessor>(256);
  for (  Phase phase : Phase.values()) {
    processorList.clear();
    final Set<RegisteredProcessor> processorSet=deployers.get(phase);
    for (    RegisteredProcessor processor : processorSet) {
      processorList.add(processor.getProcessor());
    }
    finalDeployers.put(phase,Arrays.asList(processorList.toArray(new DeploymentUnitProcessor[processorList.size()])));
  }
  DeployerChainsService.addService(context.getChildTarget(),finalDeployers);
}","protected void boot(final StartContext context) throws ConfigurationPersistenceException {
  final EnumMap<Phase,Set<RegisteredProcessor>> deployers=new EnumMap<Phase,Set<RegisteredProcessor>>(Phase.class);
  for (  Phase phase : Phase.values()) {
    deployers.put(phase,new TreeSet<RegisteredProcessor>());
  }
  final ThreadLocal<DeploymentProcessorTarget> local=AbstractDeploymentChainStep.PROCESSOR_TARGET_THREAD_LOCAL;
  local.set(new DeploymentProcessorTarget(){
    public void addDeploymentProcessor(    final Phase phase,    final int priority,    final DeploymentUnitProcessor processor){
      deployers.get(phase).add(new RegisteredProcessor(priority,processor));
    }
  }
);
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MOUNT,new DeploymentRootMountProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ADDITIONAL_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SUB_DEPLOYMENT,new SubDeploymentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MODULE_IDENTIFIERS,new ModuleIdentifierProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ANNOTATION_INDEX,new AnnotationIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_STRUCTURE_DESCRIPTOR,new DeploymentStructureDescriptorParser()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_COMPOSITE_ANNOTATION_INDEX,new CompositeIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_ADDITIONAL_MODULES,new AdditionalModuleProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_CLASS_PATH,new ManifestClassPathProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_LIST,new ManifestExtensionListProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_NAME,new ManifestExtensionNameProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_SERVICE_LOADER_DEPLOYMENT,new ServiceLoaderProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_MODULE,new ModuleDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SAR_MODULE,new ServiceActivatorDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_CLASS_PATH,new ModuleClassPathProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_EXTENSION_LIST,new ModuleExtensionListProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor()));
  deployers.get(Phase.CONFIGURE_MODULE).add(new RegisteredProcessor(Phase.CONFIGURE_MODULE_SPEC,new ModuleSpecProcessor()));
  deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_INSTALL_EXTENSION,new ModuleExtensionNameProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_SERVICE_ACTIVATOR,new ServiceActivatorProcessor()));
  try {
    super.boot(context);
  }
  finally {
    local.set(null);
  }
  final EnumMap<Phase,List<DeploymentUnitProcessor>> finalDeployers=new EnumMap<Phase,List<DeploymentUnitProcessor>>(Phase.class);
  final List<DeploymentUnitProcessor> processorList=new ArrayList<DeploymentUnitProcessor>(256);
  for (  Phase phase : Phase.values()) {
    processorList.clear();
    final Set<RegisteredProcessor> processorSet=deployers.get(phase);
    for (    RegisteredProcessor processor : processorSet) {
      processorList.add(processor.getProcessor());
    }
    finalDeployers.put(phase,Arrays.asList(processorList.toArray(new DeploymentUnitProcessor[processorList.size()])));
  }
  DeployerChainsService.addService(context.getChildTarget(),finalDeployers);
}",0.98444365277283
167938,"protected void writeSocketBindingGroup(XMLExtendedStreamWriter writer,ModelNode bindingGroup,boolean fromServer) throws XMLStreamException {
  writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
  ModelNode attr=bindingGroup.get(NAME);
  writeAttribute(writer,Attribute.NAME,attr.asString());
  attr=bindingGroup.get(DEFAULT_INTERFACE);
  writeAttribute(writer,Attribute.DEFAULT_INTERFACE,attr.asString());
  if (fromServer && bindingGroup.has(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() != 0) {
    attr=bindingGroup.get(PORT_OFFSET);
    writeAttribute(writer,Attribute.PORT_OFFSET,attr.asString());
  }
  if (!fromServer && bindingGroup.hasDefined(INCLUDES)) {
    for (    ModelNode include : bindingGroup.get(INCLUDES).asList()) {
      writer.writeStartElement(Element.INCLUDE.getLocalName());
      writeAttribute(writer,Attribute.SOCKET_BINDING_GROUP,include.asString());
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(SOCKET_BINDING)) {
    ModelNode bindings=bindingGroup.get(SOCKET_BINDING);
    for (    String bindingName : bindings.keys()) {
      ModelNode binding=bindings.get(bindingName);
      writer.writeStartElement(Element.SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,bindingName);
      attr=binding.get(PORT);
      writeAttribute(writer,Attribute.PORT,attr.asString());
      attr=binding.get(FIXED_PORT);
      if (attr.isDefined() && attr.asBoolean()) {
        writeAttribute(writer,Attribute.FIXED_PORT,attr.asString());
      }
      attr=binding.get(INTERFACE);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.INTERFACE,attr.asString());
      }
      attr=binding.get(MULTICAST_ADDRESS);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_ADDRESS,attr.asString());
      }
      attr=binding.get(MULTICAST_PORT);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString());
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}","protected void writeSocketBindingGroup(XMLExtendedStreamWriter writer,ModelNode bindingGroup,boolean fromServer) throws XMLStreamException {
  writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
  ModelNode attr=bindingGroup.get(NAME);
  writeAttribute(writer,Attribute.NAME,attr.asString());
  attr=bindingGroup.get(DEFAULT_INTERFACE);
  writeAttribute(writer,Attribute.DEFAULT_INTERFACE,attr.asString());
  if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {
    attr=bindingGroup.get(PORT_OFFSET);
    writeAttribute(writer,Attribute.PORT_OFFSET,attr.asString());
  }
  if (!fromServer && bindingGroup.hasDefined(INCLUDES)) {
    for (    ModelNode include : bindingGroup.get(INCLUDES).asList()) {
      writer.writeStartElement(Element.INCLUDE.getLocalName());
      writeAttribute(writer,Attribute.SOCKET_BINDING_GROUP,include.asString());
      writer.writeEndElement();
    }
  }
  if (bindingGroup.hasDefined(SOCKET_BINDING)) {
    ModelNode bindings=bindingGroup.get(SOCKET_BINDING);
    for (    String bindingName : bindings.keys()) {
      ModelNode binding=bindings.get(bindingName);
      writer.writeStartElement(Element.SOCKET_BINDING.getLocalName());
      writeAttribute(writer,Attribute.NAME,bindingName);
      attr=binding.get(PORT);
      writeAttribute(writer,Attribute.PORT,attr.asString());
      attr=binding.get(FIXED_PORT);
      if (attr.isDefined() && attr.asBoolean()) {
        writeAttribute(writer,Attribute.FIXED_PORT,attr.asString());
      }
      attr=binding.get(INTERFACE);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.INTERFACE,attr.asString());
      }
      attr=binding.get(MULTICAST_ADDRESS);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_ADDRESS,attr.asString());
      }
      attr=binding.get(MULTICAST_PORT);
      if (attr.isDefined()) {
        writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString());
      }
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}",0.997822405032664
167939,"protected void parseSocketBindingGroupRef(final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> updates) throws XMLStreamException {
  String name=null;
  int offset=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case REF:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          name=value;
          break;
        }
case PORT_OFFSET:
{
        try {
          if (offset != -1)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          offset=Integer.parseInt(value);
          if (offset < 0) {
            throw new XMLStreamException(offset + ""String_Node_Str"" + attribute.getLocalName()+ ""String_Node_Str"",reader.getLocation());
          }
        }
 catch (        final NumberFormatException e) {
          throw new XMLStreamException(offset + ""String_Node_Str"" + attribute.getLocalName(),reader.getLocation(),e);
        }
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.REF));
}
ParseUtils.requireNoContent(reader);
ModelNode update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name);
updates.add(update);
if (offset < 0) {
offset=0;
}
if (offset > 0) {
update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset);
}
updates.add(update);
}","protected void parseSocketBindingGroupRef(final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> updates) throws XMLStreamException {
  String name=null;
  int offset=-1;
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
    final String value=reader.getAttributeValue(i);
    if (!isNoNamespaceAttribute(reader,i)) {
      throw ParseUtils.unexpectedAttribute(reader,i);
    }
 else {
      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case REF:
{
          if (name != null)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          name=value;
          break;
        }
case PORT_OFFSET:
{
        try {
          if (offset != -1)           throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());
          offset=Integer.parseInt(value);
          if (offset < 0) {
            throw new XMLStreamException(offset + ""String_Node_Str"" + attribute.getLocalName()+ ""String_Node_Str"",reader.getLocation());
          }
        }
 catch (        final NumberFormatException e) {
          throw new XMLStreamException(offset + ""String_Node_Str"" + attribute.getLocalName(),reader.getLocation(),e);
        }
        break;
      }
default :
    throw ParseUtils.unexpectedAttribute(reader,i);
}
}
}
if (name == null) {
throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.REF));
}
ParseUtils.requireNoContent(reader);
ModelNode update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name);
updates.add(update);
if (offset < 0) {
offset=0;
}
if (offset >= 0) {
update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset);
}
updates.add(update);
}",0.999715343011671
167940,"public static final ModelNode getReplaceDeploymentOperation(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode root=new ModelNode();
  root.get(OPERATION_NAME).set(REPLACE_DEPLOYMENT);
  root.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,NAME,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,TO_REPLACE,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,NILLABLE).set(true);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,TYPE).set(ModelType.INT);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,MIN_VALUE).set(0);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,NILLABLE).set(true);
  root.get(REQUEST_PROPERTIES,HASH,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,HASH,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,HASH,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,HASH,MIN_LENGTH).set(20);
  root.get(REQUEST_PROPERTIES,HASH,MAX_LENGTH).set(20);
  root.get(REQUEST_PROPERTIES,HASH,NILLABLE).set(true);
  root.get(REQUEST_PROPERTIES,BYTES,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,BYTES,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,BYTES,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,BYTES,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,BYTES,NILLABLE).set(true);
  root.get(REQUEST_PROPERTIES,URL,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,URL,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,URL,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,URL,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,URL,NILLABLE).set(true);
  root.get(REPLY_PROPERTIES).setEmptyObject();
  return root;
}","public static final ModelNode getReplaceDeploymentOperation(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode root=new ModelNode();
  root.get(OPERATION_NAME).set(REPLACE_DEPLOYMENT);
  root.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,NAME,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,TO_REPLACE,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,TO_REPLACE,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,NILLABLE).set(true);
  root.get(REPLY_PROPERTIES).setEmptyObject();
  return root;
}",0.6636428741943184
167941,"public static final ModelNode getFullReplaceDeploymentOperation(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode root=new ModelNode();
  root.get(OPERATION_NAME).set(FULL_REPLACE_DEPLOYMENT);
  root.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,NAME,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,HASH,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,HASH,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,HASH,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,HASH,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,HASH,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,INPUT_STREAM_INDEX,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,BYTES,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,BYTES,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,BYTES,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,BYTES,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,BYTES,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,URL,TYPE).set(ModelType.BYTES);
  root.get(REQUEST_PROPERTIES,URL,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,URL,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,URL,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,URL,NILLABLE).set(false);
  root.get(REPLY_PROPERTIES).setEmptyObject();
  return root;
}","public static final ModelNode getFullReplaceDeploymentOperation(Locale locale){
  final ResourceBundle bundle=getResourceBundle(locale);
  final ModelNode root=new ModelNode();
  root.get(OPERATION_NAME).set(FULL_REPLACE_DEPLOYMENT);
  root.get(DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,NAME,REQUIRED).set(true);
  root.get(REQUEST_PROPERTIES,NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,NAME,NILLABLE).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,TYPE).set(ModelType.STRING);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,DESCRIPTION).set(bundle.getString(""String_Node_Str""));
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,REQUIRED).set(false);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,MIN_LENGTH).set(1);
  root.get(REQUEST_PROPERTIES,RUNTIME_NAME,NILLABLE).set(false);
  getDeploymentContentParamDescription(root,bundle);
  root.get(REPLY_PROPERTIES).setEmptyObject();
  return root;
}",0.6050755631593955
167942,"/** 
 * Requests that the content with the given unique name and hash be mounted in VFS at the given   {@code mountPoint}.
 * @param name unique name for the content as provided by the end user. Cannot be <code>null</code>
 * @param runtimeName the name the deployment file should be known as to the runtime. Cannot be <code>null</code>
 * @param deploymentContents the deployment contents. Cannot be <code>null</code>
 * @param mountPoint VFS location where the content should be mounted. Cannot be <code>null</code>
 * @param mountExpanded
 * @return {@link java.io.Closeable} that can be used to close the mount
 * @throws IOException
 */
Closeable mountDeploymentContent(String name,String runtimeName,VirtualFile deploymentContents,VirtualFile mountPoint,boolean mountExpanded) throws IOException ;","/** 
 * Requests that the content with the given unique name and hash be mounted in VFS at the given   {@code mountPoint}.
 * @param deploymentContents the deployment contents. Cannot be <code>null</code>
 * @param mountPoint VFS location where the content should be mounted. Cannot be <code>null</code>
 * @param mountExpanded
 * @return {@link java.io.Closeable} that can be used to close the mount
 * @throws IOException
 */
Closeable mountDeploymentContent(VirtualFile deploymentContents,VirtualFile mountPoint,boolean mountExpanded) throws IOException ;",0.8199853049228508
167943,"public static void addService(final ServiceTarget serviceTarget,final File repoRoot,final File systemDeployDir,final ContentRepositoryImpl contentRepository){
  serviceTarget.addService(ServerDeploymentRepository.SERVICE_NAME,new ServerDeploymentRepositoryImpl(repoRoot,systemDeployDir,contentRepository)).install();
}","public static void addService(final ServiceTarget serviceTarget,final ContentRepositoryImpl contentRepository){
  serviceTarget.addService(ServerDeploymentRepository.SERVICE_NAME,new ServerDeploymentRepositoryImpl(contentRepository)).install();
}",0.8723404255319149
167944,"/** 
 * Creates a new ServerDeploymentRepositoryImpl.
 */
public ServerDeploymentRepositoryImpl(final File repoRoot,final File systemDeployDir,final ContentRepositoryImpl contentRepository){
  this.systemDeployDir=systemDeployDir;
  this.contentRepository=contentRepository;
}","/** 
 * Creates a new ServerDeploymentRepositoryImpl.
 */
public ServerDeploymentRepositoryImpl(final ContentRepositoryImpl contentRepository){
  this.contentRepository=contentRepository;
}",0.8129032258064516
167945,"@Override public Closeable mountDeploymentContent(String name,String runtimeName,final VirtualFile contents,VirtualFile mountPoint,boolean mountExpanded) throws IOException {
  if (contents == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (mountExpanded) {
    return VFS.mountZipExpanded(contents,mountPoint,tempFileProvider);
  }
 else {
    return VFS.mountZip(contents,mountPoint,tempFileProvider);
  }
}","@Override public Closeable mountDeploymentContent(final VirtualFile contents,VirtualFile mountPoint,boolean mountExpanded) throws IOException {
  if (contents == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (mountExpanded) {
    return VFS.mountZipExpanded(contents,mountPoint,tempFileProvider);
  }
 else {
    return VFS.mountZip(contents,mountPoint,tempFileProvider);
  }
}",0.962605548854041
167946,"/** 
 * {@inheritDoc} 
 */
@Override public Closeable mountDeploymentContent(String name,String runtimeName,VirtualFile contents,VirtualFile mountPoint,boolean mountExploded) throws IOException {
  return new Closeable(){
    @Override public void close() throws IOException {
    }
  }
;
}","/** 
 * {@inheritDoc} 
 */
@Override public Closeable mountDeploymentContent(VirtualFile contents,VirtualFile mountPoint,boolean mountExploded) throws IOException {
  return new Closeable(){
    @Override public void close() throws IOException {
    }
  }
;
}",0.8706739526411658
167947,"public HostControllerEnvironment(Map<String,String> hostSystemProperties,boolean isRestart,InputStream stdin,PrintStream stdout,PrintStream stderr,String processName,InetAddress processControllerAddress,Integer processControllerPort,InetAddress hostControllerAddress,Integer hostControllerPort,String defaultJVM,String domainConfig,String hostConfig,boolean backupDomainFiles,boolean useCachedDc){
  if (hostSystemProperties == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.hostSystemProperties=Collections.unmodifiableMap(hostSystemProperties);
  if (stdin == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stdin=stdin;
  if (stdout == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stdout=stdout;
  if (stderr == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stderr=stderr;
  if (processName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (processControllerAddress == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (processControllerPort == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (hostControllerAddress == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (hostControllerPort == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.processName=processName;
  this.processControllerPort=processControllerPort;
  this.processControllerAddress=processControllerAddress;
  this.hostControllerAddress=hostControllerAddress;
  this.hostControllerPort=hostControllerPort;
  this.isRestart=isRestart;
  File home=getFileFromProperty(HOME_DIR);
  if (home == null) {
    home=new File(System.getProperty(""String_Node_Str""));
  }
  this.homeDir=home;
  System.setProperty(HOME_DIR,homeDir.getAbsolutePath());
  File tmp=getFileFromProperty(MODULES_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,""String_Node_Str"");
  }
  this.modulesDir=tmp;
  System.setProperty(MODULES_DIR,this.modulesDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_BASE_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,""String_Node_Str"");
  }
  this.domainBaseDir=tmp;
  System.setProperty(DOMAIN_BASE_DIR,this.domainBaseDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_CONFIG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainConfigurationDir=tmp;
  System.setProperty(DOMAIN_CONFIG_DIR,this.domainConfigurationDir.getAbsolutePath());
  hostConfigurationFile=new ConfigurationFile(domainConfigurationDir,""String_Node_Str"",hostConfig);
  domainConfigurationFile=new ConfigurationFile(domainConfigurationDir,""String_Node_Str"",domainConfig);
  tmp=getFileFromProperty(DOMAIN_DEPLOYMENT_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainDeploymentDir=tmp;
  System.setProperty(DOMAIN_DEPLOYMENT_DIR,this.domainDeploymentDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_SYSTEM_DEPLOYMENT_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainSystemDeploymentDir=tmp;
  System.setProperty(DOMAIN_DEPLOYMENT_DIR,this.domainDeploymentDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_DATA_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainDataDir=tmp;
  System.setProperty(DOMAIN_DATA_DIR,this.domainDataDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_LOG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainLogDir=tmp;
  System.setProperty(DOMAIN_LOG_DIR,this.domainLogDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_SERVERS_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainServersDir=tmp;
  System.setProperty(DOMAIN_SERVERS_DIR,this.domainServersDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_TEMP_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainTempDir=tmp;
  System.setProperty(DOMAIN_TEMP_DIR,this.domainTempDir.getAbsolutePath());
  if (defaultJVM != null) {
    if (defaultJVM.equals(""String_Node_Str"")) {
      defaultJVM=DefaultJvmUtils.findJavaExecutable(DefaultJvmUtils.getCurrentJvmHome());
    }
    this.defaultJVM=new File(defaultJVM);
  }
 else {
    this.defaultJVM=null;
  }
  this.backupDomainFiles=backupDomainFiles;
  this.useCachedDc=useCachedDc;
}","public HostControllerEnvironment(Map<String,String> hostSystemProperties,boolean isRestart,InputStream stdin,PrintStream stdout,PrintStream stderr,String processName,InetAddress processControllerAddress,Integer processControllerPort,InetAddress hostControllerAddress,Integer hostControllerPort,String defaultJVM,String domainConfig,String hostConfig,boolean backupDomainFiles,boolean useCachedDc){
  if (hostSystemProperties == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.hostSystemProperties=Collections.unmodifiableMap(hostSystemProperties);
  if (stdin == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stdin=stdin;
  if (stdout == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stdout=stdout;
  if (stderr == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.stderr=stderr;
  if (processName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (processControllerAddress == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (processControllerPort == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (hostControllerAddress == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (hostControllerPort == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.processName=processName;
  this.processControllerPort=processControllerPort;
  this.processControllerAddress=processControllerAddress;
  this.hostControllerAddress=hostControllerAddress;
  this.hostControllerPort=hostControllerPort;
  this.isRestart=isRestart;
  File home=getFileFromProperty(HOME_DIR);
  if (home == null) {
    home=new File(System.getProperty(""String_Node_Str""));
  }
  this.homeDir=home;
  System.setProperty(HOME_DIR,homeDir.getAbsolutePath());
  File tmp=getFileFromProperty(MODULES_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,""String_Node_Str"");
  }
  this.modulesDir=tmp;
  System.setProperty(MODULES_DIR,this.modulesDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_BASE_DIR);
  if (tmp == null) {
    tmp=new File(this.homeDir,""String_Node_Str"");
  }
  this.domainBaseDir=tmp;
  System.setProperty(DOMAIN_BASE_DIR,this.domainBaseDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_CONFIG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainConfigurationDir=tmp;
  System.setProperty(DOMAIN_CONFIG_DIR,this.domainConfigurationDir.getAbsolutePath());
  hostConfigurationFile=new ConfigurationFile(domainConfigurationDir,""String_Node_Str"",hostConfig);
  domainConfigurationFile=new ConfigurationFile(domainConfigurationDir,""String_Node_Str"",domainConfig);
  tmp=getFileFromProperty(DOMAIN_DEPLOYMENT_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainDeploymentDir=tmp;
  System.setProperty(DOMAIN_DEPLOYMENT_DIR,this.domainDeploymentDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_DATA_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainDataDir=tmp;
  System.setProperty(DOMAIN_DATA_DIR,this.domainDataDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_LOG_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainLogDir=tmp;
  System.setProperty(DOMAIN_LOG_DIR,this.domainLogDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_SERVERS_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainServersDir=tmp;
  System.setProperty(DOMAIN_SERVERS_DIR,this.domainServersDir.getAbsolutePath());
  tmp=getFileFromProperty(DOMAIN_TEMP_DIR);
  if (tmp == null) {
    tmp=new File(this.domainBaseDir,""String_Node_Str"");
  }
  this.domainTempDir=tmp;
  System.setProperty(DOMAIN_TEMP_DIR,this.domainTempDir.getAbsolutePath());
  if (defaultJVM != null) {
    if (defaultJVM.equals(""String_Node_Str"")) {
      defaultJVM=DefaultJvmUtils.findJavaExecutable(DefaultJvmUtils.getCurrentJvmHome());
    }
    this.defaultJVM=new File(defaultJVM);
  }
 else {
    this.defaultJVM=null;
  }
  this.backupDomainFiles=backupDomainFiles;
  this.useCachedDc=useCachedDc;
}",0.9699590350477924
167948,"/** 
 * Equivalent to default JAVA_OPTS in < AS 7 run.conf file TODO externalize this somewhere if doing this at all is the right thing
 * @param sysProps
 */
static void addStandardProperties(final String serverName,final HostControllerEnvironment environment,Map<String,String> sysProps){
  if (!sysProps.containsKey(""String_Node_Str"")) {
    sysProps.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (!sysProps.containsKey(""String_Node_Str"")) {
    sysProps.put(""String_Node_Str"",""String_Node_Str"");
  }
  sysProps.put(HostControllerEnvironment.HOME_DIR,environment.getHomeDir().getAbsolutePath());
  String key=ServerEnvironment.SERVER_BASE_DIR;
  if (sysProps.get(key) == null) {
    File serverBaseDir=new File(environment.getDomainServersDir(),serverName);
    sysProps.put(key,serverBaseDir.getAbsolutePath());
  }
  key=ServerEnvironment.SERVER_DEPLOY_DIR;
  if (sysProps.get(key) == null) {
    File serverDeploymentDir=environment.getDomainDeploymentDir();
    sysProps.put(key,serverDeploymentDir.getAbsolutePath());
  }
  key=ServerEnvironment.SERVER_SYSTEM_DEPLOY_DIR;
  if (sysProps.get(key) == null) {
    File serverDeploymentDir=environment.getDomainSystemDeploymentDir();
    sysProps.put(key,serverDeploymentDir.getAbsolutePath());
  }
}","/** 
 * Equivalent to default JAVA_OPTS in < AS 7 run.conf file TODO externalize this somewhere if doing this at all is the right thing
 * @param sysProps
 */
static void addStandardProperties(final String serverName,final HostControllerEnvironment environment,Map<String,String> sysProps){
  if (!sysProps.containsKey(""String_Node_Str"")) {
    sysProps.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (!sysProps.containsKey(""String_Node_Str"")) {
    sysProps.put(""String_Node_Str"",""String_Node_Str"");
  }
  sysProps.put(HostControllerEnvironment.HOME_DIR,environment.getHomeDir().getAbsolutePath());
  String key=ServerEnvironment.SERVER_BASE_DIR;
  if (sysProps.get(key) == null) {
    File serverBaseDir=new File(environment.getDomainServersDir(),serverName);
    sysProps.put(key,serverBaseDir.getAbsolutePath());
  }
  key=ServerEnvironment.SERVER_DEPLOY_DIR;
  if (sysProps.get(key) == null) {
    File serverDeploymentDir=environment.getDomainDeploymentDir();
    sysProps.put(key,serverDeploymentDir.getAbsolutePath());
  }
}",0.9028322440087146
167949,"@Override public synchronized void start(final StartContext context) throws StartException {
  final Bootstrap.Configuration configuration=this.configuration;
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  serverEnvironment.install();
  log.infof(""String_Node_Str"",Version.AS_VERSION,Version.AS_RELEASE_CODENAME);
  if (configLog.isDebugEnabled()) {
    final Properties properties=System.getProperties();
    final StringBuilder b=new StringBuilder(8192);
    b.append(""String_Node_Str"");
    for (    String property : new TreeSet<String>(properties.stringPropertyNames())) {
      b.append(""String_Node_Str"").append(property).append(""String_Node_Str"").append(properties.getProperty(property,""String_Node_Str""));
    }
    configLog.debug(b);
    if (configLog.isTraceEnabled()) {
      b.setLength(0);
      final Map<String,String> env=System.getenv();
      b.append(""String_Node_Str"");
      for (      String key : new TreeSet<String>(env.keySet())) {
        b.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(env.get(key));
      }
      configLog.trace(b);
    }
  }
  final ServiceTarget serviceTarget=context.getChildTarget();
  final ServiceController<?> myController=context.getController();
  final ServiceContainer container=myController.getServiceContainer();
  futureContainer=new FutureServiceContainer(container);
  long startTime=this.startTime;
  if (startTime == -1) {
    startTime=System.currentTimeMillis();
  }
 else {
    this.startTime=-1;
  }
  CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer());
  final BootstrapListener bootstrapListener=new BootstrapListener(container,startTime,serviceTarget,futureContainer,configuration);
  serviceTarget.addListener(bootstrapListener);
  myController.addListener(bootstrapListener);
  ContentRepositoryImpl contentRepository=ContentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir());
  ServerDeploymentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir(),serverEnvironment.getServerSystemDeployDir(),contentRepository);
  ServiceModuleLoader.addService(serviceTarget,configuration);
  ExternalModuleService.addService(serviceTarget);
  ModuleIndexService.addService(serviceTarget);
  ServerControllerService.addService(serviceTarget,configuration);
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    @Override public ServiceTarget getServiceTarget(){
      return serviceTarget;
    }
    @Override public ServiceRegistry getServiceRegistry(){
      return container;
    }
  }
;
  for (  ServiceActivator activator : extraServices) {
    activator.activate(serviceActivatorContext);
  }
  serviceTarget.addService(ShutdownHandler.SERVICE_NAME,new ShutdownHandlerImpl()).install();
  ServerEnvironmentService.addService(serverEnvironment,serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.HOME_DIR,serverEnvironment.getHomeDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_BASE_DIR,serverEnvironment.getServerBaseDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_CONFIG_DIR,serverEnvironment.getServerConfigurationDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_DATA_DIR,serverEnvironment.getServerDataDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_LOG_DIR,serverEnvironment.getServerLogDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_TEMP_DIR,serverEnvironment.getServerTempDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  if (log.isDebugEnabled()) {
    final long nanos=context.getElapsedTime();
    log.debugf(""String_Node_Str"",Long.valueOf(nanos / 1000000L),Long.valueOf(nanos % 1000000L));
  }
}","@Override public synchronized void start(final StartContext context) throws StartException {
  final Bootstrap.Configuration configuration=this.configuration;
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  serverEnvironment.install();
  log.infof(""String_Node_Str"",Version.AS_VERSION,Version.AS_RELEASE_CODENAME);
  if (configLog.isDebugEnabled()) {
    final Properties properties=System.getProperties();
    final StringBuilder b=new StringBuilder(8192);
    b.append(""String_Node_Str"");
    for (    String property : new TreeSet<String>(properties.stringPropertyNames())) {
      b.append(""String_Node_Str"").append(property).append(""String_Node_Str"").append(properties.getProperty(property,""String_Node_Str""));
    }
    configLog.debug(b);
    if (configLog.isTraceEnabled()) {
      b.setLength(0);
      final Map<String,String> env=System.getenv();
      b.append(""String_Node_Str"");
      for (      String key : new TreeSet<String>(env.keySet())) {
        b.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(env.get(key));
      }
      configLog.trace(b);
    }
  }
  final ServiceTarget serviceTarget=context.getChildTarget();
  final ServiceController<?> myController=context.getController();
  final ServiceContainer container=myController.getServiceContainer();
  futureContainer=new FutureServiceContainer(container);
  long startTime=this.startTime;
  if (startTime == -1) {
    startTime=System.currentTimeMillis();
  }
 else {
    this.startTime=-1;
  }
  CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer());
  final BootstrapListener bootstrapListener=new BootstrapListener(container,startTime,serviceTarget,futureContainer,configuration);
  serviceTarget.addListener(bootstrapListener);
  myController.addListener(bootstrapListener);
  ContentRepositoryImpl contentRepository=ContentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir());
  ServerDeploymentRepositoryImpl.addService(serviceTarget,contentRepository);
  ServiceModuleLoader.addService(serviceTarget,configuration);
  ExternalModuleService.addService(serviceTarget);
  ModuleIndexService.addService(serviceTarget);
  ServerControllerService.addService(serviceTarget,configuration);
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
    @Override public ServiceTarget getServiceTarget(){
      return serviceTarget;
    }
    @Override public ServiceRegistry getServiceRegistry(){
      return container;
    }
  }
;
  for (  ServiceActivator activator : extraServices) {
    activator.activate(serviceActivatorContext);
  }
  serviceTarget.addService(ShutdownHandler.SERVICE_NAME,new ShutdownHandlerImpl()).install();
  ServerEnvironmentService.addService(serverEnvironment,serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.HOME_DIR,serverEnvironment.getHomeDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_BASE_DIR,serverEnvironment.getServerBaseDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_CONFIG_DIR,serverEnvironment.getServerConfigurationDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_DATA_DIR,serverEnvironment.getServerDataDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_LOG_DIR,serverEnvironment.getServerLogDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(ServerEnvironment.SERVER_TEMP_DIR,serverEnvironment.getServerTempDir().getAbsolutePath(),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  AbsolutePathService.addService(""String_Node_Str"",System.getProperty(""String_Node_Str""),serviceTarget);
  if (log.isDebugEnabled()) {
    final long nanos=context.getElapsedTime();
    log.debugf(""String_Node_Str"",Long.valueOf(nanos / 1000000L),Long.valueOf(nanos % 1000000L));
  }
}",0.989983305509182
167950,"public static void initOperations(final ModelNodeRegistration root,final ContentRepository contentRepository,final ExtensibleConfigurationPersister extensibleConfigurationPersister,ServerEnvironment serverEnvironment){
  root.registerReadWriteAttribute(NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
  root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME,GlobalOperationHandlers.RESOLVE,GlobalOperationHandlers.RESOLVE,false,OperationEntry.EntryType.PRIVATE);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,DeploymentReplaceHandler.INSTANCE,DeploymentReplaceHandler.INSTANCE,false);
  DeploymentFullReplaceHandler dfrh=new DeploymentFullReplaceHandler(contentRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.SERVER_STATE,ServerStateAttributeHandler.INSTANCE,Storage.RUNTIME);
  root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME,ServerReloadHandler.INSTANCE,ServerReloadHandler.INSTANCE,false);
  if (serverEnvironment != null && serverEnvironment.isStandalone())   root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false);
  ModelNodeRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),ServerDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration securityRealms=root.registerSubModel(PathElement.pathElement(MANAGEMENT,SECURITY_REALMS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration securityRealm=securityRealms.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
  ModelNodeRegistration connections=root.registerSubModel(PathElement.pathElement(MANAGEMENT,CONNECTIONS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration connection=connections.registerSubModel(PathElement.pathElement(CONNECTION),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,HTTP_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(SpecifiedPathAddHandler.OPERATION_NAME,SpecifiedPathAddHandler.INSTANCE,SpecifiedPathAddHandler.INSTANCE,false);
  paths.registerOperationHandler(SpecifiedPathRemoveHandler.OPERATION_NAME,SpecifiedPathRemoveHandler.INSTANCE,SpecifiedPathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(BindingGroupAddHandler.OPERATION_NAME,BindingGroupAddHandler.INSTANCE,BindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(BindingGroupRemoveHandler.OPERATION_NAME,BindingGroupRemoveHandler.INSTANCE,BindingGroupRemoveHandler.INSTANCE,false);
  socketGroup.registerReadWriteAttribute(PORT_OFFSET,null,BindingGroupPortOffsetHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketGroup.registerReadWriteAttribute(DEFAULT_INTERFACE,null,BindingGroupDefaultInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(BindingAddHandler.OPERATION_NAME,BindingAddHandler.INSTANCE,BindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(BindingRemoveHandler.OPERATION_NAME,BindingRemoveHandler.INSTANCE,BindingRemoveHandler.INSTANCE,false);
  socketBinding.registerMetric(BindingMetricHandlers.BoundHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundAddressHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundAddressHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundPortHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundPortHandler.INSTANCE);
  socketBinding.registerReadWriteAttribute(INTERFACE,null,BindingInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(PORT,null,BindingPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(FIXED_PORT,null,BindingFixedPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_ADDRESS,null,BindingMulticastAddressHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_PORT,null,BindingMulticastPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(contentRepository);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,DeploymentDeployHandler.INSTANCE,DeploymentDeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,DeploymentUndeployHandler.INSTANCE,DeploymentUndeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,DeploymentRedeployHandler.INSTANCE,DeploymentRedeployHandler.INSTANCE,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,deployments,extensibleConfigurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
}","public static void initOperations(final ModelNodeRegistration root,final ContentRepository contentRepository,final ExtensibleConfigurationPersister extensibleConfigurationPersister,ServerEnvironment serverEnvironment){
  root.registerReadWriteAttribute(NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
  root.registerOperationHandler(GlobalOperationHandlers.ResolveAddressOperationHandler.OPERATION_NAME,GlobalOperationHandlers.RESOLVE,GlobalOperationHandlers.RESOLVE,false,OperationEntry.EntryType.PRIVATE);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,GlobalOperationHandlers.READ_RESOURCE,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,GlobalOperationHandlers.READ_ATTRIBUTE,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_TYPES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_TYPES,CommonProviders.READ_CHILDREN_TYPES_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_RESOURCES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_RESOURCES,CommonProviders.READ_CHILDREN_RESOURCES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,GlobalOperationHandlers.WRITE_ATTRIBUTE,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(contentRepository);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false);
  final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,drh,drh,false);
  DeploymentFullReplaceHandler dfrh=new DeploymentFullReplaceHandler(contentRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  SnapshotDeleteHandler snapshotDelete=new SnapshotDeleteHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotDeleteHandler.OPERATION_NAME,snapshotDelete,snapshotDelete,false);
  SnapshotListHandler snapshotList=new SnapshotListHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotListHandler.OPERATION_NAME,snapshotList,snapshotList,false);
  SnapshotTakeHandler snapshotTake=new SnapshotTakeHandler(extensibleConfigurationPersister);
  root.registerOperationHandler(SnapshotTakeHandler.OPERATION_NAME,snapshotTake,snapshotTake,false);
  root.registerReadOnlyAttribute(ServerDescriptionConstants.SERVER_STATE,ServerStateAttributeHandler.INSTANCE,Storage.RUNTIME);
  root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME,ServerReloadHandler.INSTANCE,ServerReloadHandler.INSTANCE,false);
  if (serverEnvironment != null && serverEnvironment.isStandalone())   root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false);
  ModelNodeRegistration sysProps=root.registerSubModel(PathElement.pathElement(SYSTEM_PROPERTY),ServerDescriptionProviders.SYSTEM_PROPERTIES_PROVIDER);
  sysProps.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,SystemPropertyAddHandler.INSTANCE_WITHOUT_BOOTTIME,false);
  sysProps.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  sysProps.registerReadWriteAttribute(VALUE,null,SystemPropertyValueWriteAttributeHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration securityRealms=root.registerSubModel(PathElement.pathElement(MANAGEMENT,SECURITY_REALMS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration securityRealm=securityRealms.registerSubModel(PathElement.pathElement(SECURITY_REALM),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  securityRealm.registerOperationHandler(SecurityRealmAddHandler.OPERATION_NAME,SecurityRealmAddHandler.INSTANCE,SecurityRealmAddHandler.INSTANCE,false);
  ModelNodeRegistration connections=root.registerSubModel(PathElement.pathElement(MANAGEMENT,CONNECTIONS),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  ModelNodeRegistration connection=connections.registerSubModel(PathElement.pathElement(CONNECTION),CommonProviders.NATIVE_MANAGEMENT_PROVIDER);
  connection.registerOperationHandler(ConnectionAddHandler.OPERATION_NAME,ConnectionAddHandler.INSTANCE,ConnectionAddHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,NATIVE_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT_INTERFACE,HTTP_INTERFACE),CommonProviders.MANAGEMENT_INTERFACE_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(SpecifiedPathAddHandler.OPERATION_NAME,SpecifiedPathAddHandler.INSTANCE,SpecifiedPathAddHandler.INSTANCE,false);
  paths.registerOperationHandler(SpecifiedPathRemoveHandler.OPERATION_NAME,SpecifiedPathRemoveHandler.INSTANCE,SpecifiedPathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(BindingGroupAddHandler.OPERATION_NAME,BindingGroupAddHandler.INSTANCE,BindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(BindingGroupRemoveHandler.OPERATION_NAME,BindingGroupRemoveHandler.INSTANCE,BindingGroupRemoveHandler.INSTANCE,false);
  socketGroup.registerReadWriteAttribute(PORT_OFFSET,null,BindingGroupPortOffsetHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketGroup.registerReadWriteAttribute(DEFAULT_INTERFACE,null,BindingGroupDefaultInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(BindingAddHandler.OPERATION_NAME,BindingAddHandler.INSTANCE,BindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(BindingRemoveHandler.OPERATION_NAME,BindingRemoveHandler.INSTANCE,BindingRemoveHandler.INSTANCE,false);
  socketBinding.registerMetric(BindingMetricHandlers.BoundHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundAddressHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundAddressHandler.INSTANCE);
  socketBinding.registerMetric(BindingMetricHandlers.BoundPortHandler.ATTRIBUTE_NAME,BindingMetricHandlers.BoundPortHandler.INSTANCE);
  socketBinding.registerReadWriteAttribute(INTERFACE,null,BindingInterfaceHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(PORT,null,BindingPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(FIXED_PORT,null,BindingFixedPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_ADDRESS,null,BindingMulticastAddressHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  socketBinding.registerReadWriteAttribute(MULTICAST_PORT,null,BindingMulticastPortHandler.INSTANCE,AttributeAccess.Storage.CONFIGURATION);
  ModelNodeRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(contentRepository);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,DeploymentDeployHandler.INSTANCE,DeploymentDeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,DeploymentUndeployHandler.INSTANCE,DeploymentUndeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,DeploymentRedeployHandler.INSTANCE,DeploymentRedeployHandler.INSTANCE,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,deployments,extensibleConfigurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
}",0.4034995625546806
167951,"void install(){
  SecurityActions.setSystemProperty(QUALIFIED_HOST_NAME,qualifiedHostName);
  SecurityActions.setSystemProperty(HOST_NAME,hostName);
  SecurityActions.setSystemProperty(SERVER_NAME,serverName);
  SecurityActions.setSystemProperty(NODE_NAME,nodeName);
  SecurityActions.setSystemProperty(HOME_DIR,homeDir.getAbsolutePath());
  SecurityActions.setSystemProperty(MODULES_DIR,modulesDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_BASE_DIR,serverBaseDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_CONFIG_DIR,serverConfigurationDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_DATA_DIR,serverDataDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_DEPLOY_DIR,serverDeployDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_SYSTEM_DEPLOY_DIR,serverSystemDeployDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_LOG_DIR,serverLogDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_TEMP_DIR,serverTempDir.getAbsolutePath());
}","void install(){
  SecurityActions.setSystemProperty(QUALIFIED_HOST_NAME,qualifiedHostName);
  SecurityActions.setSystemProperty(HOST_NAME,hostName);
  SecurityActions.setSystemProperty(SERVER_NAME,serverName);
  SecurityActions.setSystemProperty(NODE_NAME,nodeName);
  SecurityActions.setSystemProperty(HOME_DIR,homeDir.getAbsolutePath());
  SecurityActions.setSystemProperty(MODULES_DIR,modulesDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_BASE_DIR,serverBaseDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_CONFIG_DIR,serverConfigurationDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_DATA_DIR,serverDataDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_DEPLOY_DIR,serverDeployDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_LOG_DIR,serverLogDir.getAbsolutePath());
  SecurityActions.setSystemProperty(SERVER_TEMP_DIR,serverTempDir.getAbsolutePath());
}",0.9485257371314344
167952,"public ServerEnvironment(Properties props,Map<String,String> env,String serverConfig,boolean standalone){
  this.standalone=standalone;
  if (props == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hostName=props.getProperty(HOST_NAME);
  String qualifiedHostName=props.getProperty(QUALIFIED_HOST_NAME);
  if (qualifiedHostName == null) {
    qualifiedHostName=hostName;
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get(""String_Node_Str"");
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get(""String_Node_Str"");
    }
    if (qualifiedHostName == null) {
      try {
        qualifiedHostName=InetAddress.getLocalHost().getHostName();
      }
 catch (      UnknownHostException e) {
        qualifiedHostName=null;
      }
    }
    if (qualifiedHostName != null && qualifiedHostName.matches(""String_Node_Str"")) {
      qualifiedHostName=null;
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=""String_Node_Str"";
    }
    qualifiedHostName=qualifiedHostName.trim().toLowerCase();
  }
  this.qualifiedHostName=qualifiedHostName;
  if (hostName == null) {
    final int idx=qualifiedHostName.indexOf('.');
    hostName=idx == -1 ? qualifiedHostName : qualifiedHostName.substring(0,idx);
  }
  this.hostName=hostName;
  String serverName=props.getProperty(SERVER_NAME);
  if (serverName == null) {
    serverName=hostName;
  }
  this.serverName=serverName;
  String nodeName=props.getProperty(NODE_NAME);
  if (nodeName == null) {
    nodeName=serverName;
  }
  this.nodeName=nodeName;
  javaExtDirs=getFilesFromProperty(JAVA_EXT_DIRS,props);
  homeDir=getFileFromProperty(HOME_DIR,props);
  if (homeDir == null)   throw new IllegalStateException(""String_Node_Str"" + HOME_DIR);
  File tmp=getFileFromProperty(MODULES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,""String_Node_Str"");
  }
  modulesDir=tmp;
  tmp=getFileFromProperty(SERVER_BASE_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,standalone ? ""String_Node_Str"" : ""String_Node_Str"" + serverName);
  }
  serverBaseDir=tmp;
  tmp=getFileFromProperty(SERVER_CONFIG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverConfigurationDir=tmp;
  serverConfigurationFile=standalone ? new ConfigurationFile(serverConfigurationDir,""String_Node_Str"",serverConfig) : null;
  tmp=getFileFromProperty(SERVER_DATA_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverDataDir=tmp;
  tmp=getFileFromProperty(SERVER_DEPLOY_DIR,props);
  if (tmp == null) {
    tmp=new File(serverDataDir,""String_Node_Str"");
  }
  serverDeployDir=tmp;
  tmp=getFileFromProperty(SERVER_SYSTEM_DEPLOY_DIR,props);
  if (tmp == null) {
    tmp=new File(serverDataDir,""String_Node_Str"");
  }
  serverSystemDeployDir=tmp;
  tmp=getFileFromProperty(SERVER_LOG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverLogDir=tmp;
  tmp=getFileFromProperty(SERVER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverTempDir=tmp;
}","public ServerEnvironment(Properties props,Map<String,String> env,String serverConfig,boolean standalone){
  this.standalone=standalone;
  if (props == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hostName=props.getProperty(HOST_NAME);
  String qualifiedHostName=props.getProperty(QUALIFIED_HOST_NAME);
  if (qualifiedHostName == null) {
    qualifiedHostName=hostName;
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get(""String_Node_Str"");
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=env.get(""String_Node_Str"");
    }
    if (qualifiedHostName == null) {
      try {
        qualifiedHostName=InetAddress.getLocalHost().getHostName();
      }
 catch (      UnknownHostException e) {
        qualifiedHostName=null;
      }
    }
    if (qualifiedHostName != null && qualifiedHostName.matches(""String_Node_Str"")) {
      qualifiedHostName=null;
    }
    if (qualifiedHostName == null) {
      qualifiedHostName=""String_Node_Str"";
    }
    qualifiedHostName=qualifiedHostName.trim().toLowerCase();
  }
  this.qualifiedHostName=qualifiedHostName;
  if (hostName == null) {
    final int idx=qualifiedHostName.indexOf('.');
    hostName=idx == -1 ? qualifiedHostName : qualifiedHostName.substring(0,idx);
  }
  this.hostName=hostName;
  String serverName=props.getProperty(SERVER_NAME);
  if (serverName == null) {
    serverName=hostName;
  }
  this.serverName=serverName;
  String nodeName=props.getProperty(NODE_NAME);
  if (nodeName == null) {
    nodeName=serverName;
  }
  this.nodeName=nodeName;
  javaExtDirs=getFilesFromProperty(JAVA_EXT_DIRS,props);
  homeDir=getFileFromProperty(HOME_DIR,props);
  if (homeDir == null)   throw new IllegalStateException(""String_Node_Str"" + HOME_DIR);
  File tmp=getFileFromProperty(MODULES_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,""String_Node_Str"");
  }
  modulesDir=tmp;
  tmp=getFileFromProperty(SERVER_BASE_DIR,props);
  if (tmp == null) {
    tmp=new File(homeDir,standalone ? ""String_Node_Str"" : ""String_Node_Str"" + serverName);
  }
  serverBaseDir=tmp;
  tmp=getFileFromProperty(SERVER_CONFIG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverConfigurationDir=tmp;
  serverConfigurationFile=standalone ? new ConfigurationFile(serverConfigurationDir,""String_Node_Str"",serverConfig) : null;
  tmp=getFileFromProperty(SERVER_DATA_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverDataDir=tmp;
  tmp=getFileFromProperty(SERVER_DEPLOY_DIR,props);
  if (tmp == null) {
    tmp=new File(serverDataDir,""String_Node_Str"");
  }
  serverDeployDir=tmp;
  tmp=getFileFromProperty(SERVER_LOG_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverLogDir=tmp;
  tmp=getFileFromProperty(SERVER_TEMP_DIR,props);
  if (tmp == null) {
    tmp=new File(serverBaseDir,""String_Node_Str"");
  }
  serverTempDir=tmp;
}",0.9652459016393444
167953,"private static void addMethodByTypeName(Map<String,Map<ParamNameList,Map<String,Method>>> methodsByTypeName,Method method){
  final String name=method.getName();
  Map<ParamNameList,Map<String,Method>> nameMap=methodsByTypeName.get(name);
  if (nameMap == null) {
    methodsByTypeName.put(name,nameMap=new HashMap<ParamNameList,Map<String,Method>>());
  }
  final Class<?>[] types=method.getParameterTypes();
  final ParamNameList list=createParamNameList(types);
  Map<String,Method> paramsMap=nameMap.get(list);
  if (paramsMap == null) {
    nameMap.put(list,paramsMap=new HashMap<String,Method>());
  }
  paramsMap.put(method.getReturnType().getName(),method);
}","private static void addMethodByTypeName(Map<String,Map<ParamNameList,Map<String,Method>>> methodsByTypeName,Method method){
  final String name=method.getName();
  Map<ParamNameList,Map<String,Method>> nameMap=methodsByTypeName.get(name);
  if (nameMap == null) {
    methodsByTypeName.put(name,nameMap=new HashMap<ParamNameList,Map<String,Method>>());
  }
  final Class<?>[] types=method.getParameterTypes();
  final ParamNameList list=createParamNameList(types);
  Map<String,Method> paramsMap=nameMap.get(list);
  if (paramsMap == null) {
    nameMap.put(list,paramsMap=new HashMap<String,Method>());
  }
  if (!paramsMap.containsKey(method.getReturnType().getName())) {
    paramsMap.put(method.getReturnType().getName(),method);
  }
}",0.9331436699857752
167954,"@SuppressWarnings({""String_Node_Str""}) ClassReflectionIndex(final Class<T> indexedClass,final DeploymentReflectionIndex deploymentReflectionIndex){
  this.indexedClass=indexedClass;
  final Field[] declaredFields=indexedClass.getDeclaredFields();
  final Map<String,Field> fields=new HashMap<String,Field>();
  for (  Field field : declaredFields) {
    field.setAccessible(true);
    fields.put(field.getName(),field);
  }
  this.fields=fields;
  final Method[] declaredMethods=indexedClass.getDeclaredMethods();
  final Map<String,Map<ParamList,Map<Class<?>,Method>>> methods=new HashMap<String,Map<ParamList,Map<Class<?>,Method>>>();
  final Map<String,Map<ParamNameList,Map<String,Method>>> methodsByTypeName=new HashMap<String,Map<ParamNameList,Map<String,Method>>>();
  for (  Method method : declaredMethods) {
    method.setAccessible(true);
    addMethod(methods,method);
    addMethodByTypeName(methodsByTypeName,method);
  }
  Class<? super T> superClass=indexedClass.getSuperclass();
  if (superClass != null) {
    for (    Method method : deploymentReflectionIndex.getClassIndex(superClass).getMethods()) {
      int modifiers=method.getModifiers();
      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {
        addMethod(methods,method);
        addMethodByTypeName(methodsByTypeName,method);
      }
    }
  }
  for (  Class<?> iface : indexedClass.getInterfaces()) {
    for (    Method method : deploymentReflectionIndex.getClassIndex(iface).getMethods()) {
      int modifiers=method.getModifiers();
      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {
        addMethod(methods,method);
        addMethodByTypeName(methodsByTypeName,method);
      }
    }
  }
  this.methods=methods;
  this.methodsByTypeName=methodsByTypeName;
  final Constructor<T>[] declaredConstructors=(Constructor<T>[])indexedClass.getDeclaredConstructors();
  final Map<ParamNameList,Constructor<T>> constructorsByTypeName=new HashMap<ParamNameList,Constructor<T>>();
  final Map<ParamList,Constructor<T>> constructors=new HashMap<ParamList,Constructor<T>>();
  for (  Constructor<T> constructor : declaredConstructors) {
    constructor.setAccessible(true);
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    constructors.put(createParamList(parameterTypes),constructor);
    constructorsByTypeName.put(createParamNameList(parameterTypes),constructor);
  }
  this.constructorsByTypeName=constructorsByTypeName;
  this.constructors=constructors;
}","@SuppressWarnings({""String_Node_Str""}) ClassReflectionIndex(final Class<T> indexedClass,final DeploymentReflectionIndex deploymentReflectionIndex){
  this.indexedClass=indexedClass;
  final Field[] declaredFields=indexedClass.getDeclaredFields();
  final Map<String,Field> fields=new HashMap<String,Field>();
  for (  Field field : declaredFields) {
    field.setAccessible(true);
    fields.put(field.getName(),field);
  }
  this.fields=fields;
  final Method[] declaredMethods=indexedClass.getDeclaredMethods();
  final Map<String,Map<ParamList,Map<Class<?>,Method>>> methods=new HashMap<String,Map<ParamList,Map<Class<?>,Method>>>();
  final Map<String,Map<ParamNameList,Map<String,Method>>> methodsByTypeName=new HashMap<String,Map<ParamNameList,Map<String,Method>>>();
  for (  Method method : declaredMethods) {
    method.setAccessible(true);
    addMethod(methods,method);
    addMethodByTypeName(methodsByTypeName,method);
  }
  Class<? super T> superClass=indexedClass.getSuperclass();
  if (superClass != null) {
    for (    Method method : deploymentReflectionIndex.getClassIndex(superClass).getMethods()) {
      int modifiers=method.getModifiers();
      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {
        addMethod(methods,method);
        addMethodByTypeName(methodsByTypeName,method);
      }
    }
  }
  this.methods=methods;
  this.methodsByTypeName=methodsByTypeName;
  final Constructor<T>[] declaredConstructors=(Constructor<T>[])indexedClass.getDeclaredConstructors();
  final Map<ParamNameList,Constructor<T>> constructorsByTypeName=new HashMap<ParamNameList,Constructor<T>>();
  final Map<ParamList,Constructor<T>> constructors=new HashMap<ParamList,Constructor<T>>();
  for (  Constructor<T> constructor : declaredConstructors) {
    constructor.setAccessible(true);
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    constructors.put(createParamList(parameterTypes),constructor);
    constructorsByTypeName.put(createParamNameList(parameterTypes),constructor);
  }
  this.constructorsByTypeName=constructorsByTypeName;
  this.constructors=constructors;
}",0.9186851211072664
167955,"private static void addMethod(Map<String,Map<ParamList,Map<Class<?>,Method>>> methods,Method method){
  final String name=method.getName();
  Map<ParamList,Map<Class<?>,Method>> nameMap=methods.get(name);
  if (nameMap == null) {
    methods.put(name,nameMap=new HashMap<ParamList,Map<Class<?>,Method>>());
  }
  final Class<?>[] types=method.getParameterTypes();
  final ParamList list=createParamList(types);
  Map<Class<?>,Method> paramsMap=nameMap.get(list);
  if (paramsMap == null) {
    nameMap.put(list,paramsMap=new HashMap<Class<?>,Method>());
  }
  paramsMap.put(method.getReturnType(),method);
}","private static void addMethod(Map<String,Map<ParamList,Map<Class<?>,Method>>> methods,Method method){
  final String name=method.getName();
  Map<ParamList,Map<Class<?>,Method>> nameMap=methods.get(name);
  if (nameMap == null) {
    methods.put(name,nameMap=new HashMap<ParamList,Map<Class<?>,Method>>());
  }
  final Class<?>[] types=method.getParameterTypes();
  final ParamList list=createParamList(types);
  Map<Class<?>,Method> paramsMap=nameMap.get(list);
  if (paramsMap == null) {
    nameMap.put(list,paramsMap=new HashMap<Class<?>,Method>());
  }
  if (!paramsMap.containsKey(method.getReturnType())) {
    paramsMap.put(method.getReturnType(),method);
  }
}",0.915360501567398
167956,"public ModelNode getModelDescription(final Locale locale){
  return DeploymentSubsystemDescriptions.getScannerDescription(locale);
}","@Override public ModelNode getModelDescription(final Locale locale){
  return DeploymentSubsystemDescriptions.getScannerDescription(locale);
}",0.9635036496350364
167957,"/** 
 * {@inheritDoc} 
 */
@Override public void writeContent(XMLExtendedStreamWriter writer,SubsystemMarshallingContext context) throws XMLStreamException {
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode scanners=context.getModelNode();
  for (  final Property list : scanners.asPropertyList()) {
    final ModelNode node=list.getValue();
    for (    final Property scanner : node.asPropertyList()) {
      writer.writeEmptyElement(Element.DEPLOYMENT_SCANNER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),scanner.getName());
      ModelNode configuration=scanner.getValue();
      if (configuration.hasDefined(CommonAttributes.PATH)) {
        writer.writeAttribute(Attribute.PATH.getLocalName(),configuration.get(CommonAttributes.PATH).asString());
      }
      if (configuration.hasDefined(CommonAttributes.SCAN_ENABLED)) {
        writer.writeAttribute(Attribute.SCAN_ENABLED.getLocalName(),configuration.get(CommonAttributes.SCAN_ENABLED).asString());
      }
      if (configuration.hasDefined(CommonAttributes.SCAN_INTERVAL)) {
        writer.writeAttribute(Attribute.SCAN_INTERVAL.getLocalName(),configuration.get(CommonAttributes.SCAN_INTERVAL).asString());
      }
      if (configuration.hasDefined(CommonAttributes.RELATIVE_TO)) {
        writer.writeAttribute(Attribute.RELATIVE_TO.getLocalName(),configuration.get(CommonAttributes.RELATIVE_TO).asString());
      }
      if (configuration.hasDefined(CommonAttributes.AUTO_DEPLOY_ZIPPED)) {
        if (!configuration.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean()) {
          writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.FALSE.toString());
        }
      }
      if (configuration.hasDefined(CommonAttributes.AUTO_DEPLOY_EXPLODED)) {
        if (configuration.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean()) {
          writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.TRUE.toString());
        }
      }
      if (configuration.hasDefined(CommonAttributes.DEPLOYMENT_TIMEOUT)) {
        writer.writeAttribute(Attribute.DEPLOYMENT_TIMEOUT.getLocalName(),configuration.get(CommonAttributes.DEPLOYMENT_TIMEOUT).asString());
      }
    }
    writer.writeEndElement();
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void writeContent(XMLExtendedStreamWriter writer,SubsystemMarshallingContext context) throws XMLStreamException {
  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);
  ModelNode scanners=context.getModelNode();
  for (  final Property list : scanners.asPropertyList()) {
    final ModelNode node=list.getValue();
    for (    final Property scanner : node.asPropertyList()) {
      writer.writeEmptyElement(Element.DEPLOYMENT_SCANNER.getLocalName());
      writer.writeAttribute(Attribute.NAME.getLocalName(),scanner.getName());
      ModelNode configuration=scanner.getValue();
      if (configuration.hasDefined(CommonAttributes.PATH)) {
        writer.writeAttribute(Attribute.PATH.getLocalName(),configuration.get(CommonAttributes.PATH).asString());
      }
      if (configuration.hasDefined(CommonAttributes.SCAN_ENABLED)) {
        writer.writeAttribute(Attribute.SCAN_ENABLED.getLocalName(),configuration.get(CommonAttributes.SCAN_ENABLED).asString());
      }
      if (configuration.hasDefined(CommonAttributes.SCAN_INTERVAL)) {
        writer.writeAttribute(Attribute.SCAN_INTERVAL.getLocalName(),configuration.get(CommonAttributes.SCAN_INTERVAL).asString());
      }
      if (configuration.hasDefined(CommonAttributes.RELATIVE_TO)) {
        writer.writeAttribute(Attribute.RELATIVE_TO.getLocalName(),configuration.get(CommonAttributes.RELATIVE_TO).asString());
      }
      if (configuration.hasDefined(CommonAttributes.AUTO_DEPLOY_ZIPPED)) {
        if (!configuration.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean()) {
          writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.FALSE.toString());
        }
      }
      if (configuration.hasDefined(CommonAttributes.AUTO_DEPLOY_EXPLODED)) {
        if (configuration.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).asBoolean()) {
          writer.writeAttribute(Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(),Boolean.TRUE.toString());
        }
      }
      if (configuration.hasDefined(CommonAttributes.DEPLOYMENT_TIMEOUT)) {
        writer.writeAttribute(Attribute.DEPLOYMENT_TIMEOUT.getLocalName(),configuration.get(CommonAttributes.DEPLOYMENT_TIMEOUT).asString());
      }
    }
    writer.writeEndElement();
  }
}",0.9956024626209324
167958,"DeploymentScannerService(final Integer interval,final TimeUnit unit,final Boolean autoDeployZipped,final Boolean autoDeployExploded,final Boolean enabled,final Long deploymentTimeout){
  this.interval=interval == null ? DEFAULT_INTERVAL : interval.longValue();
  this.unit=unit;
  this.autoDeployZipped=autoDeployZipped == null ? true : autoDeployZipped.booleanValue();
  this.autoDeployExploded=autoDeployExploded == null ? true : autoDeployExploded.booleanValue();
  this.enabled=enabled == null ? true : enabled.booleanValue();
  this.deploymentTimeout=deploymentTimeout;
}","DeploymentScannerService(final Integer interval,final TimeUnit unit,final Boolean autoDeployZipped,final Boolean autoDeployExploded,final Boolean enabled,final Long deploymentTimeout){
  this.interval=interval == null ? DEFAULT_INTERVAL : interval.longValue();
  this.unit=unit;
  this.autoDeployZipped=autoDeployZipped == null ? true : autoDeployZipped.booleanValue();
  this.autoDeployExploded=autoDeployExploded == null ? false : autoDeployExploded.booleanValue();
  this.enabled=enabled == null ? true : enabled.booleanValue();
  this.deploymentTimeout=deploymentTimeout;
}",0.9939288811795316
167959,"/** 
 * Process the deployment root for module dependency information.
 * @param phaseContext the deployment unit context
 * @throws DeploymentUnitProcessingException
 */
public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=manifest.getMainAttributes().getValue(""String_Node_Str"");
    if (dependencyString == null)     continue;
    final String[] dependencyDefs=dependencyString.split(""String_Node_Str"");
    for (    String dependencyDef : dependencyDefs) {
      final String[] dependencyParts=dependencyDef.split(""String_Node_Str"");
      final int dependencyPartsLength=dependencyParts.length;
      if (dependencyPartsLength == 0)       throw new RuntimeException(""String_Node_Str"" + dependencyString);
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      boolean export=parseOptionalExportParams(dependencyParts,""String_Node_Str"");
      boolean optional=parseOptionalExportParams(dependencyParts,""String_Node_Str"");
      boolean services=parseOptionalExportParams(dependencyParts,""String_Node_Str"");
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith(""String_Node_Str"")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services);
      moduleSpecification.addDependency(dependency);
      deploymentUnit.addToAttachmentList(Attachments.MANIFEST_DEPENDENCIES,dependency);
    }
  }
  if (deploymentUnit.getParent() != null) {
    List<ModuleDependency> dependencies=deploymentUnit.getParent().getAttachmentList(Attachments.MANIFEST_DEPENDENCIES);
    moduleSpecification.addDependencies(dependencies);
  }
}","/** 
 * Process the deployment root for module dependency information.
 * @param phaseContext the deployment unit context
 * @throws DeploymentUnitProcessingException
 */
public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ServiceModuleLoader deploymentModuleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  for (  final ResourceRoot resourceRoot : allResourceRoots) {
    final Manifest manifest=resourceRoot.getAttachment(Attachments.MANIFEST);
    if (manifest == null)     continue;
    final String dependencyString=manifest.getMainAttributes().getValue(DEPENDENCIES_ATTR);
    if (dependencyString == null)     continue;
    final String[] dependencyDefs=dependencyString.split(""String_Node_Str"");
    for (    final String dependencyDef : dependencyDefs) {
      final String[] dependencyParts=dependencyDef.split(""String_Node_Str"");
      if (dependencyParts.length == 0) {
        throw new RuntimeException(""String_Node_Str"" + dependencyString);
      }
      final ModuleIdentifier dependencyId=ModuleIdentifier.fromString(dependencyParts[0]);
      final boolean export=containsParam(dependencyParts,EXPORT_PARAM);
      final boolean optional=containsParam(dependencyParts,OPTIONAL_PARAM);
      final boolean services=containsParam(dependencyParts,SERVICES_PARAM);
      final ModuleLoader dependencyLoader;
      if (dependencyId.getName().startsWith(""String_Node_Str"")) {
        dependencyLoader=deploymentModuleLoader;
      }
 else {
        dependencyLoader=Module.getBootModuleLoader();
      }
      final ModuleDependency dependency=new ModuleDependency(dependencyLoader,dependencyId,optional,export,services);
      moduleSpecification.addDependency(dependency);
      deploymentUnit.addToAttachmentList(Attachments.MANIFEST_DEPENDENCIES,dependency);
    }
  }
  if (deploymentUnit.getParent() != null) {
    final List<ModuleDependency> parentDependencies=deploymentUnit.getParent().getAttachmentList(Attachments.MANIFEST_DEPENDENCIES);
    moduleSpecification.addDependencies(parentDependencies);
  }
}",0.7125051931865393
167960,"private void getKnownImplementors(DotName name,Set<ClassInfo> allKnown,Set<DotName> subInterfacesToProcess,Set<DotName> processedClasses){
  for (  Index index : indexes) {
    final List<ClassInfo> list=index.getKnownDirectImplementors(name);
    if (list != null) {
      for (      final ClassInfo clazz : allKnown) {
        final DotName className=clazz.name();
        if (!processedClasses.contains(className)) {
          if (Modifier.isInterface(clazz.flags())) {
            subInterfacesToProcess.add(className);
          }
 else {
            if (!allKnown.contains(clazz)) {
              allKnown.add(clazz);
              processedClasses.add(className);
              getAllKnownSubClasses(className,allKnown,processedClasses);
            }
          }
        }
      }
    }
  }
}","private void getKnownImplementors(DotName name,Set<ClassInfo> allKnown,Set<DotName> subInterfacesToProcess,Set<DotName> processedClasses){
  for (  Index index : indexes) {
    final List<ClassInfo> list=index.getKnownDirectImplementors(name);
    if (list != null) {
      for (      final ClassInfo clazz : list) {
        final DotName className=clazz.name();
        if (!processedClasses.contains(className)) {
          if (Modifier.isInterface(clazz.flags())) {
            subInterfacesToProcess.add(className);
          }
 else {
            if (!allKnown.contains(clazz)) {
              allKnown.add(clazz);
              processedClasses.add(className);
              getAllKnownSubClasses(className,allKnown,processedClasses);
            }
          }
        }
      }
    }
  }
}",0.9924812030075189
167961,"private void getAllKnownSubClasses(DotName name,Set<ClassInfo> allKnown,Set<DotName> subClassesToProcess,Set<DotName> processedClasses){
  for (  Index index : indexes) {
    final List<ClassInfo> list=index.getKnownDirectSubclasses(name);
    if (list != null) {
      for (      final ClassInfo clazz : allKnown) {
        final DotName className=clazz.name();
        if (!processedClasses.contains(className)) {
          allKnown.add(clazz);
          subClassesToProcess.add(className);
        }
      }
    }
  }
}","private void getAllKnownSubClasses(DotName name,Set<ClassInfo> allKnown,Set<DotName> subClassesToProcess,Set<DotName> processedClasses){
  for (  Index index : indexes) {
    final List<ClassInfo> list=index.getKnownDirectSubclasses(name);
    if (list != null) {
      for (      final ClassInfo clazz : list) {
        final DotName className=clazz.name();
        if (!processedClasses.contains(className)) {
          allKnown.add(clazz);
          subClassesToProcess.add(className);
        }
      }
    }
  }
}",0.9884615384615384
167962,"/** 
 * {@inheritDoc} 
 */
public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final ServiceController<?> controller=phaseContext.getServiceRegistry().getRequiredService(Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX);
  final ExtensionIndex index=(ExtensionIndex)controller.getValue();
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  final Set<ServiceName> nextPhaseDeps=new HashSet<ServiceName>();
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    if (!ModuleRootMarker.isModuleRoot(resourceRoot))     continue;
    final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);
    if (entries != null) {
      for (      ExtensionListEntry entry : entries) {
        final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());
        if (extension != null) {
          moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));
          nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
          nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
        }
 else {
          log.warnf(""String_Node_Str"" + entry + ""String_Node_Str""+ resourceRoot);
        }
      }
    }
  }
  final List<AdditionalModuleSpecification> additionalModules=deploymentUnit.getAttachment(Attachments.ADDITIONAL_MODULES);
  if (additionalModules != null) {
    for (    AdditionalModuleSpecification additionalModule : additionalModules) {
      for (      ResourceRoot resourceRoot : additionalModule.getResourceRoots()) {
        final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);
        if (entries != null) {
          for (          ExtensionListEntry entry : entries) {
            final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());
            if (extension != null) {
              moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));
              nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
            }
 else {
              log.warnf(""String_Node_Str"" + entry + ""String_Node_Str""+ resourceRoot);
            }
          }
        }
      }
    }
  }
  for (  ServiceName dep : nextPhaseDeps) {
    phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,dep);
  }
}","/** 
 * {@inheritDoc} 
 */
public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ModuleLoader moduleLoader=deploymentUnit.getAttachment(Attachments.SERVICE_MODULE_LOADER);
  final ServiceController<?> controller=phaseContext.getServiceRegistry().getRequiredService(Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX);
  final ExtensionIndex index=(ExtensionIndex)controller.getValue();
  final List<ResourceRoot> allResourceRoots=DeploymentUtils.allResourceRoots(deploymentUnit);
  final Set<ServiceName> nextPhaseDeps=new HashSet<ServiceName>();
  for (  ResourceRoot resourceRoot : allResourceRoots) {
    final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);
    if (entries != null) {
      for (      ExtensionListEntry entry : entries) {
        final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());
        if (extension != null) {
          moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));
          nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
          nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
        }
 else {
          log.warnf(""String_Node_Str"" + entry + ""String_Node_Str""+ resourceRoot);
        }
      }
    }
  }
  final List<AdditionalModuleSpecification> additionalModules=deploymentUnit.getAttachment(Attachments.ADDITIONAL_MODULES);
  if (additionalModules != null) {
    for (    AdditionalModuleSpecification additionalModule : additionalModules) {
      for (      ResourceRoot resourceRoot : additionalModule.getResourceRoots()) {
        final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);
        if (entries != null) {
          for (          ExtensionListEntry entry : entries) {
            final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());
            if (extension != null) {
              moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));
              nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));
            }
 else {
              log.warnf(""String_Node_Str"" + entry + ""String_Node_Str""+ resourceRoot);
            }
          }
        }
      }
    }
  }
  for (  ServiceName dep : nextPhaseDeps) {
    phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,dep);
  }
}",0.9883760683760684
167963,"private void writeServerGroup(final XMLExtendedStreamWriter writer,final String groupName,final ModelNode group) throws XMLStreamException {
  writer.writeStartElement(Element.SERVER_GROUP.getLocalName());
  writer.writeAttribute(Attribute.NAME.getLocalName(),groupName);
  writer.writeAttribute(Attribute.PROFILE.getLocalName(),group.get(PROFILE).asString());
  if (group.hasDefined(JVM)) {
    for (    final Property jvm : group.get(JVM).asPropertyList()) {
      writeJVMElement(writer,jvm.getName(),jvm.getValue());
      break;
    }
  }
  String bindingGroupRef=group.hasDefined(SOCKET_BINDING_GROUP) ? group.get(SOCKET_BINDING_GROUP).asString() : null;
  String portOffset=group.hasDefined(SOCKET_BINDING_PORT_OFFSET) ? group.get(SOCKET_BINDING_PORT_OFFSET).asString() : null;
  if (bindingGroupRef != null || portOffset != null) {
    writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
    if (bindingGroupRef != null) {
      writeAttribute(writer,Attribute.REF,bindingGroupRef);
    }
    if (portOffset != null) {
      writeAttribute(writer,Attribute.PORT_OFFSET,portOffset);
    }
    writer.writeEndElement();
  }
  if (group.hasDefined(DEPLOYMENT)) {
    writeDomainDeployments(writer,group);
  }
  if (group.hasDefined(SYSTEM_PROPERTIES)) {
    writeProperties(writer,group,Element.SYSTEM_PROPERTIES);
  }
  writer.writeEndElement();
}","private void writeServerGroup(final XMLExtendedStreamWriter writer,final String groupName,final ModelNode group) throws XMLStreamException {
  writer.writeStartElement(Element.SERVER_GROUP.getLocalName());
  writer.writeAttribute(Attribute.NAME.getLocalName(),groupName);
  writer.writeAttribute(Attribute.PROFILE.getLocalName(),group.get(PROFILE).asString());
  if (group.hasDefined(JVM)) {
    for (    final Property jvm : group.get(JVM).asPropertyList()) {
      writeJVMElement(writer,jvm.getName(),jvm.getValue());
      break;
    }
  }
  String bindingGroupRef=group.hasDefined(SOCKET_BINDING_GROUP) ? group.get(SOCKET_BINDING_GROUP).asString() : null;
  String portOffset=group.hasDefined(SOCKET_BINDING_PORT_OFFSET) ? group.get(SOCKET_BINDING_PORT_OFFSET).asString() : null;
  if (bindingGroupRef != null || portOffset != null) {
    writer.writeStartElement(Element.SOCKET_BINDING_GROUP.getLocalName());
    if (bindingGroupRef != null) {
      writeAttribute(writer,Attribute.REF,bindingGroupRef);
    }
    if (portOffset != null) {
      writeAttribute(writer,Attribute.PORT_OFFSET,portOffset);
    }
    writer.writeEndElement();
  }
  if (group.hasDefined(DEPLOYMENT)) {
    writeDomainDeployments(writer,group.get(DEPLOYMENT));
  }
  if (group.hasDefined(SYSTEM_PROPERTIES)) {
    writeProperties(writer,group,Element.SYSTEM_PROPERTIES);
  }
  writer.writeEndElement();
}",0.9942028985507246
167964,"@Override public void writeContent(final XMLExtendedStreamWriter writer,final ModelMarshallingContext context) throws XMLStreamException {
  ModelNode modelNode=context.getModelNode();
  writer.writeStartDocument();
  writer.writeStartElement(Element.DOMAIN.getLocalName());
  writer.writeDefaultNamespace(Namespace.CURRENT.getUriString());
  writeNamespaces(writer,modelNode);
  writeSchemaLocation(writer,modelNode);
  if (modelNode.hasDefined(EXTENSION)) {
    writeExtensions(writer,modelNode.get(EXTENSION));
  }
  if (modelNode.hasDefined(PATH)) {
    writePaths(writer,modelNode.get(PATH));
  }
  if (modelNode.hasDefined(PROFILE)) {
    writer.writeStartElement(Element.PROFILES.getLocalName());
    for (    final Property profile : modelNode.get(PROFILE).asPropertyList()) {
      writeProfile(writer,profile.getName(),profile.getValue(),context);
    }
    writer.writeEndElement();
  }
  if (modelNode.hasDefined(INTERFACE)) {
    writeInterfaces(writer,modelNode.get(INTERFACE));
  }
  if (modelNode.hasDefined(SOCKET_BINDING_GROUP)) {
    writer.writeStartElement(Element.SOCKET_BINDING_GROUPS.getLocalName());
    for (    final Property property : modelNode.get(SOCKET_BINDING_GROUP).asPropertyList()) {
      writeSocketBindingGroup(writer,property.getValue(),false);
    }
    writer.writeEndElement();
  }
  if (modelNode.hasDefined(SYSTEM_PROPERTIES)) {
    writeProperties(writer,modelNode,Element.SYSTEM_PROPERTIES);
  }
  if (modelNode.hasDefined(DEPLOYMENT)) {
    writeDomainDeployments(writer,modelNode);
  }
  if (modelNode.hasDefined(SERVER_GROUP)) {
    writer.writeStartElement(Element.SERVER_GROUPS.getLocalName());
    for (    final Property property : modelNode.get(SERVER_GROUP).asPropertyList()) {
      writeServerGroup(writer,property.getName(),property.getValue());
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  writer.writeEndDocument();
}","@Override public void writeContent(final XMLExtendedStreamWriter writer,final ModelMarshallingContext context) throws XMLStreamException {
  ModelNode modelNode=context.getModelNode();
  writer.writeStartDocument();
  writer.writeStartElement(Element.DOMAIN.getLocalName());
  writer.writeDefaultNamespace(Namespace.CURRENT.getUriString());
  writeNamespaces(writer,modelNode);
  writeSchemaLocation(writer,modelNode);
  if (modelNode.hasDefined(EXTENSION)) {
    writeExtensions(writer,modelNode.get(EXTENSION));
  }
  if (modelNode.hasDefined(PATH)) {
    writePaths(writer,modelNode.get(PATH));
  }
  if (modelNode.hasDefined(PROFILE)) {
    writer.writeStartElement(Element.PROFILES.getLocalName());
    for (    final Property profile : modelNode.get(PROFILE).asPropertyList()) {
      writeProfile(writer,profile.getName(),profile.getValue(),context);
    }
    writer.writeEndElement();
  }
  if (modelNode.hasDefined(INTERFACE)) {
    writeInterfaces(writer,modelNode.get(INTERFACE));
  }
  if (modelNode.hasDefined(SOCKET_BINDING_GROUP)) {
    writer.writeStartElement(Element.SOCKET_BINDING_GROUPS.getLocalName());
    for (    final Property property : modelNode.get(SOCKET_BINDING_GROUP).asPropertyList()) {
      writeSocketBindingGroup(writer,property.getValue(),false);
    }
    writer.writeEndElement();
  }
  if (modelNode.hasDefined(SYSTEM_PROPERTIES)) {
    writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES);
  }
  if (modelNode.hasDefined(DEPLOYMENT)) {
    writeDomainDeployments(writer,modelNode.get(DEPLOYMENT));
  }
  if (modelNode.hasDefined(SERVER_GROUP)) {
    writer.writeStartElement(Element.SERVER_GROUPS.getLocalName());
    for (    final Property property : modelNode.get(SERVER_GROUP).asPropertyList()) {
      writeServerGroup(writer,property.getName(),property.getValue());
    }
    writer.writeEndElement();
  }
  writer.writeEndElement();
  writer.writeEndDocument();
}",0.9851755526657996
167965,"public static void initOperations(final ModelNodeRegistration root,final DeploymentRepository deploymentRepository,final ExtensibleConfigurationPersister extensibleConfigurationPersister){
  root.registerReadWriteAttribute(NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,ServerOperationHandlers.SERVER_READ_RESOURCE_HANDLER,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,ServerOperationHandlers.SERVER_READ_ATTRIBUTE_HANDLER,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,ServerOperationHandlers.SERVER_WRITE_ATTRIBUTE_HANDLER,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE,SystemPropertyAddHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,DeploymentReplaceHandler.INSTANCE,DeploymentReplaceHandler.INSTANCE,false);
  DeploymentFullReplaceHandler dfrh=new DeploymentFullReplaceHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME,ServerReloadHandler.INSTANCE,ServerReloadHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT,NATIVE_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT,HTTP_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(SpecifiedPathAddHandler.OPERATION_NAME,SpecifiedPathAddHandler.INSTANCE,SpecifiedPathAddHandler.INSTANCE,false);
  paths.registerOperationHandler(SpecifiedPathRemoveHandler.OPERATION_NAME,SpecifiedPathRemoveHandler.INSTANCE,SpecifiedPathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(SocketBindingGroupAddHandler.OPERATION_NAME,SocketBindingGroupAddHandler.INSTANCE,SocketBindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(SocketBindingGroupRemoveHandler.OPERATION_NAME,SocketBindingGroupRemoveHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(ServerSocketBindingAddHandler.OPERATION_NAME,ServerSocketBindingAddHandler.INSTANCE,ServerSocketBindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(ServerSocketBindingRemoveHandler.OPERATION_NAME,ServerSocketBindingRemoveHandler.INSTANCE,ServerSocketBindingRemoveHandler.INSTANCE,false);
  ModelNodeRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(deploymentRepository);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,DeploymentDeployHandler.INSTANCE,DeploymentDeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,DeploymentUndeployHandler.INSTANCE,DeploymentUndeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,DeploymentRedeployHandler.INSTANCE,DeploymentRedeployHandler.INSTANCE,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,deployments,extensibleConfigurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
}","public static void initOperations(final ModelNodeRegistration root,final DeploymentRepository deploymentRepository,final ExtensibleConfigurationPersister extensibleConfigurationPersister){
  root.registerReadWriteAttribute(NAME,null,new StringLengthValidatingHandler(1),AttributeAccess.Storage.CONFIGURATION);
  root.registerOperationHandler(READ_RESOURCE_OPERATION,ServerOperationHandlers.SERVER_READ_RESOURCE_HANDLER,CommonProviders.READ_RESOURCE_PROVIDER,true);
  root.registerOperationHandler(READ_ATTRIBUTE_OPERATION,ServerOperationHandlers.SERVER_READ_ATTRIBUTE_HANDLER,CommonProviders.READ_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(READ_RESOURCE_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_RESOURCE_DESCRIPTION,CommonProviders.READ_RESOURCE_DESCRIPTION_PROVIDER,true);
  root.registerOperationHandler(READ_CHILDREN_NAMES_OPERATION,GlobalOperationHandlers.READ_CHILDREN_NAMES,CommonProviders.READ_CHILDREN_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_NAMES_OPERATION,GlobalOperationHandlers.READ_OPERATION_NAMES,CommonProviders.READ_OPERATION_NAMES_PROVIDER,true);
  root.registerOperationHandler(READ_OPERATION_DESCRIPTION_OPERATION,GlobalOperationHandlers.READ_OPERATION_DESCRIPTION,CommonProviders.READ_OPERATION_PROVIDER,true);
  root.registerOperationHandler(WRITE_ATTRIBUTE_OPERATION,ServerOperationHandlers.SERVER_WRITE_ATTRIBUTE_HANDLER,CommonProviders.WRITE_ATTRIBUTE_PROVIDER,true);
  root.registerOperationHandler(NamespaceAddHandler.OPERATION_NAME,NamespaceAddHandler.INSTANCE,NamespaceAddHandler.INSTANCE,false);
  root.registerOperationHandler(NamespaceRemoveHandler.OPERATION_NAME,NamespaceRemoveHandler.INSTANCE,NamespaceRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationAddHandler.OPERATION_NAME,SchemaLocationAddHandler.INSTANCE,SchemaLocationAddHandler.INSTANCE,false);
  root.registerOperationHandler(SchemaLocationRemoveHandler.OPERATION_NAME,SchemaLocationRemoveHandler.INSTANCE,SchemaLocationRemoveHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyAddHandler.OPERATION_NAME,SystemPropertyAddHandler.INSTANCE,SystemPropertyAddHandler.INSTANCE,false);
  root.registerOperationHandler(SystemPropertyRemoveHandler.OPERATION_NAME,SystemPropertyRemoveHandler.INSTANCE,SystemPropertyRemoveHandler.INSTANCE,false);
  DeploymentUploadBytesHandler dubh=new DeploymentUploadBytesHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentUploadBytesHandler.OPERATION_NAME,dubh,dubh,false);
  DeploymentUploadURLHandler duuh=new DeploymentUploadURLHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentUploadURLHandler.OPERATION_NAME,duuh,duuh,false);
  DeploymentUploadStreamAttachmentHandler dush=new DeploymentUploadStreamAttachmentHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentUploadStreamAttachmentHandler.OPERATION_NAME,dush,dush,false);
  root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,DeploymentReplaceHandler.INSTANCE,DeploymentReplaceHandler.INSTANCE,false);
  DeploymentFullReplaceHandler dfrh=new DeploymentFullReplaceHandler(deploymentRepository);
  root.registerOperationHandler(DeploymentFullReplaceHandler.OPERATION_NAME,dfrh,dfrh,false);
  root.registerOperationHandler(ServerReloadHandler.OPERATION_NAME,ServerReloadHandler.INSTANCE,ServerReloadHandler.INSTANCE,false);
  ModelNodeRegistration managementNative=root.registerSubModel(PathElement.pathElement(MANAGEMENT,NATIVE_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementNative.registerOperationHandler(NativeManagementAddHandler.OPERATION_NAME,NativeManagementAddHandler.INSTANCE,NativeManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration managementHttp=root.registerSubModel(PathElement.pathElement(MANAGEMENT,HTTP_API),CommonProviders.MANAGEMENT_PROVIDER);
  managementHttp.registerOperationHandler(HttpManagementAddHandler.OPERATION_NAME,HttpManagementAddHandler.INSTANCE,HttpManagementAddHandler.INSTANCE,false);
  ModelNodeRegistration paths=root.registerSubModel(PathElement.pathElement(PATH),CommonProviders.SPECIFIED_PATH_PROVIDER);
  paths.registerOperationHandler(SpecifiedPathAddHandler.OPERATION_NAME,SpecifiedPathAddHandler.INSTANCE,SpecifiedPathAddHandler.INSTANCE,false);
  paths.registerOperationHandler(SpecifiedPathRemoveHandler.OPERATION_NAME,SpecifiedPathRemoveHandler.INSTANCE,SpecifiedPathRemoveHandler.INSTANCE,false);
  ModelNodeRegistration interfaces=root.registerSubModel(PathElement.pathElement(INTERFACE),CommonProviders.SPECIFIED_INTERFACE_PROVIDER);
  interfaces.registerOperationHandler(SpecifiedInterfaceAddHandler.OPERATION_NAME,SpecifiedInterfaceAddHandler.INSTANCE,SpecifiedInterfaceAddHandler.INSTANCE,false);
  interfaces.registerOperationHandler(SpecifiedInterfaceRemoveHandler.OPERATION_NAME,SpecifiedInterfaceRemoveHandler.INSTANCE,SpecifiedInterfaceRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketGroup=root.registerSubModel(PathElement.pathElement(SOCKET_BINDING_GROUP),ServerDescriptionProviders.SOCKET_BINDING_GROUP_PROVIDER);
  socketGroup.registerOperationHandler(SocketBindingGroupAddHandler.OPERATION_NAME,SocketBindingGroupAddHandler.INSTANCE,SocketBindingGroupAddHandler.INSTANCE,false);
  socketGroup.registerOperationHandler(SocketBindingGroupRemoveHandler.OPERATION_NAME,SocketBindingGroupRemoveHandler.INSTANCE,SocketBindingGroupRemoveHandler.INSTANCE,false);
  ModelNodeRegistration socketBinding=socketGroup.registerSubModel(PathElement.pathElement(SOCKET_BINDING),CommonProviders.SOCKET_BINDING_PROVIDER);
  socketBinding.registerOperationHandler(ServerSocketBindingAddHandler.OPERATION_NAME,ServerSocketBindingAddHandler.INSTANCE,ServerSocketBindingAddHandler.INSTANCE,false);
  socketBinding.registerOperationHandler(ServerSocketBindingRemoveHandler.OPERATION_NAME,ServerSocketBindingRemoveHandler.INSTANCE,ServerSocketBindingRemoveHandler.INSTANCE,false);
  ModelNodeRegistration deployments=root.registerSubModel(PathElement.pathElement(DEPLOYMENT),ServerDescriptionProviders.DEPLOYMENT_PROVIDER);
  DeploymentAddHandler dah=new DeploymentAddHandler(deploymentRepository);
  deployments.registerOperationHandler(DeploymentAddHandler.OPERATION_NAME,dah,dah,false);
  deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentDeployHandler.OPERATION_NAME,DeploymentDeployHandler.INSTANCE,DeploymentDeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentUndeployHandler.OPERATION_NAME,DeploymentUndeployHandler.INSTANCE,DeploymentUndeployHandler.INSTANCE,false);
  deployments.registerOperationHandler(DeploymentRedeployHandler.OPERATION_NAME,DeploymentRedeployHandler.INSTANCE,DeploymentRedeployHandler.INSTANCE,false);
  ModelNodeRegistration extensions=root.registerSubModel(PathElement.pathElement(EXTENSION),CommonProviders.EXTENSION_PROVIDER);
  ExtensionContext extensionContext=new ExtensionContextImpl(root,deployments,extensibleConfigurationPersister);
  ExtensionAddHandler addExtensionHandler=new ExtensionAddHandler(extensionContext);
  extensions.registerOperationHandler(ExtensionAddHandler.OPERATION_NAME,addExtensionHandler,addExtensionHandler,false);
  extensions.registerOperationHandler(ExtensionRemoveHandler.OPERATION_NAME,ExtensionRemoveHandler.INSTANCE,ExtensionRemoveHandler.INSTANCE,false);
}",0.5807464010370471
167966,"private byte[] uploadDeploymentContent(String name,String runtimeName,InputStream stream) throws IOException {
  byte[] bytes=streamToByteArray(stream);
  ModelNode op=new ModelNode();
  op.get(""String_Node_Str"").set(""String_Node_Str"");
  op.get(""String_Node_Str"").setEmptyList();
  op.get(""String_Node_Str"").set(name);
  op.get(""String_Node_Str"").set(runtimeName);
  op.get(""String_Node_Str"").set(bytes);
  try {
    try {
      ModelNode response=executeOperation(op).get();
      return response.asBytes();
    }
 catch (    ExecutionException e) {
      throw e.getCause();
    }
  }
 catch (  InterruptedException e) {
    IOException ioe=new InterruptedIOException();
    ioe.initCause(e);
    throw ioe;
  }
catch (  RuntimeException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  Error e) {
    throw e;
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}","private byte[] uploadDeploymentContent(String name,String runtimeName,InputStream stream) throws IOException {
  byte[] bytes=streamToByteArray(stream);
  ModelNode op=new ModelNode();
  op.get(""String_Node_Str"").set(DeploymentUploadBytesHandler.OPERATION_NAME);
  op.get(""String_Node_Str"").setEmptyList();
  op.get(""String_Node_Str"").set(name);
  op.get(""String_Node_Str"").set(runtimeName);
  op.get(""String_Node_Str"").set(bytes);
  try {
    try {
      ModelNode response=executeOperation(op).get();
      return response.asBytes();
    }
 catch (    ExecutionException e) {
      throw e.getCause();
    }
  }
 catch (  InterruptedException e) {
    IOException ioe=new InterruptedIOException();
    ioe.initCause(e);
    throw ioe;
  }
catch (  RuntimeException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  Error e) {
    throw e;
  }
catch (  Throwable e) {
    throw new RuntimeException(e);
  }
}",0.4130434782608695
167967,protected abstract Future<ModelNode> executeOperation(ModelNode operation);,protected abstract Future<ModelNode> executeOperation(ExecutionContext context);,0.7870967741935484
167968,"/** 
 * {@inheritDoc}
 */
@Override protected Future<ModelNode> executeOperation(ModelNode operation){
  Handler handler=new Handler();
  OperationResult c=client.execute(ExecutionContextBuilder.Factory.create(operation).build(),handler.resultHandler);
  handler.setCancellable(c.getCancellable());
  return handler;
}","/** 
 * {@inheritDoc}
 */
@Override protected Future<ModelNode> executeOperation(ExecutionContext executionContext){
  Handler handler=new Handler();
  OperationResult c=client.execute(executionContext,handler.resultHandler);
  handler.setCancellable(c.getCancellable());
  return handler;
}",0.6239737274220033
167969,"/** 
 * {@inheritDoc}
 */
@Override protected Future<ModelNode> executeOperation(ModelNode operation){
  Handler handler=new Handler();
  OperationResult c=client.execute(ExecutionContextBuilder.Factory.create(operation).build(),handler.resultHandler);
  handler.setCancellable(c.getCancellable());
  return handler;
}","/** 
 * {@inheritDoc}
 */
@Override protected Future<ModelNode> executeOperation(ExecutionContext executionContext){
  Handler handler=new Handler();
  OperationResult c=client.execute(executionContext,handler.resultHandler);
  handler.setCancellable(c.getCancellable());
  return handler;
}",0.6239737274220033
167970,"/** 
 * {@inheritDoc} 
 */
@Override public synchronized void start(final StartContext context) throws StartException {
  final ServiceContainer container=context.getController().getServiceContainer();
  final TrackingServiceTarget serviceTarget=new TrackingServiceTarget(container.subTarget());
  serviceTarget.addDependency(context.getController().getName());
  final Bootstrap.Configuration configuration=this.configuration;
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  final int threads=(int)(Runtime.getRuntime().availableProcessors() * 1.5f);
  final ExecutorService executor=new ThreadPoolExecutor(threads,threads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue<Runnable>());
  container.setExecutor(executor);
  final ExtensibleConfigurationPersister persister=configuration.getConfigurationPersister();
  final ServerControllerImpl serverController=new ServerControllerImpl(container,serverEnvironment,persister,injectedDeploymentRepository.getValue());
  serverController.init();
  final List<ModelNode> updates;
  try {
    updates=persister.load();
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
  log.info(""String_Node_Str"");
  final AtomicInteger count=new AtomicInteger(1);
  final ResultHandler resultHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
    }
    @Override public void handleResultComplete(    final ModelNode compensatingOperation){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleCancellation(){
      if (count.decrementAndGet() == 0) {
      }
    }
  }
;
  for (  ModelNode update : updates) {
    count.incrementAndGet();
    serverController.execute(update,resultHandler);
  }
  if (count.decrementAndGet() == 0) {
  }
  final EnumMap<Phase,SortedSet<RegisteredProcessor>> deployers=serverController.finishBoot();
  final File[] extDirs=serverEnvironment.getJavaExtDirs();
  final File[] newExtDirs=Arrays.copyOf(extDirs,extDirs.length + 1);
  newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),""String_Node_Str"");
  serviceTarget.addService(org.jboss.as.server.deployment.Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX,new ExtensionIndexService(newExtDirs)).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SERVICE_MODULE_LOADER,new DeploymentUnitProcessor(){
    @Override public void deploy(    DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
      phaseContext.getDeploymentUnit().putAttachment(Attachments.SERVICE_MODULE_LOADER,injectedModuleLoader.getValue());
      phaseContext.getDeploymentUnit().putAttachment(Attachments.EXTERNAL_MODULE_SERVICE,injectedExternalModuleServie.getValue());
    }
    @Override public void undeploy(    DeploymentUnit context){
      context.removeAttachment(Attachments.SERVICE_MODULE_LOADER);
    }
  }
));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MOUNT,new DeploymentRootMountProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SUB_DEPLOYMENT,new SubDeploymentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MODULE_IDENTIFIERS,new ModuleIdentifierProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ANNOTATION_INDEX,new AnnotationIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_STRUCTURE_DESCRIPTOR,new DeploymentStructureDescriptorParser()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_COMPOSITE_ANNOTATION_INDEX,new CompositeIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_ADDITIONAL_MODULES,new AdditionalModuleProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_CLASS_PATH,new ManifestClassPathProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_LIST,new ManifestExtensionListProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_SERVICE_LOADER_DEPLOYMENT,new ServiceLoaderProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_MODULE,new ModuleDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SAR_MODULE,new ServiceActivatorDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_CLASS_PATH,new ModuleClassPathProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_EXTENSION_LIST,new ModuleExtensionListProcessor()));
  deployers.get(Phase.CONFIGURE_MODULE).add(new RegisteredProcessor(Phase.CONFIGURE_MODULE_SPEC,new ModuleSpecProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_SERVICE_ACTIVATOR,new ServiceActivatorProcessor()));
  final EnumMap<Phase,List<DeploymentUnitProcessor>> finalDeployers=new EnumMap<Phase,List<DeploymentUnitProcessor>>(Phase.class);
  for (  Map.Entry<Phase,SortedSet<RegisteredProcessor>> entry : deployers.entrySet()) {
    final SortedSet<RegisteredProcessor> processorSet=entry.getValue();
    final List<DeploymentUnitProcessor> list=new ArrayList<DeploymentUnitProcessor>(processorSet.size());
    for (    RegisteredProcessor processor : processorSet) {
      list.add(processor.getProcessor());
    }
    finalDeployers.put(entry.getKey(),list);
  }
  DeployerChainsService.addService(serviceTarget,finalDeployers);
  this.serverController=serverController;
  bootServices=serviceTarget.getSet();
}","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void start(final StartContext context) throws StartException {
  final ServiceContainer container=context.getController().getServiceContainer();
  final TrackingServiceTarget serviceTarget=new TrackingServiceTarget(container.subTarget());
  serviceTarget.addDependency(context.getController().getName());
  final Bootstrap.Configuration configuration=this.configuration;
  final ServerEnvironment serverEnvironment=configuration.getServerEnvironment();
  final int threads=(int)(Runtime.getRuntime().availableProcessors() * 1.5f);
  final ExecutorService executor=new ThreadPoolExecutor(threads,threads,Long.MAX_VALUE,TimeUnit.NANOSECONDS,new LinkedBlockingQueue<Runnable>());
  container.setExecutor(executor);
  final ExtensibleConfigurationPersister persister=configuration.getConfigurationPersister();
  final ServerControllerImpl serverController=new ServerControllerImpl(container,serverEnvironment,persister,injectedDeploymentRepository.getValue());
  serverController.init();
  final List<ModelNode> updates;
  try {
    updates=persister.load();
  }
 catch (  Exception e) {
    throw new StartException(e);
  }
  log.info(""String_Node_Str"");
  final AtomicInteger count=new AtomicInteger(1);
  final ResultHandler resultHandler=new ResultHandler(){
    @Override public void handleResultFragment(    final String[] location,    final ModelNode result){
    }
    @Override public void handleResultComplete(    final ModelNode compensatingOperation){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleFailed(    final ModelNode failureDescription){
      if (count.decrementAndGet() == 0) {
      }
    }
    @Override public void handleCancellation(){
      if (count.decrementAndGet() == 0) {
      }
    }
  }
;
  for (  ModelNode update : updates) {
    count.incrementAndGet();
    serverController.execute(update,resultHandler);
  }
  if (count.decrementAndGet() == 0) {
  }
  final EnumMap<Phase,SortedSet<RegisteredProcessor>> deployers=serverController.finishBoot();
  final File[] extDirs=serverEnvironment.getJavaExtDirs();
  final File[] newExtDirs=Arrays.copyOf(extDirs,extDirs.length + 1);
  newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),""String_Node_Str"");
  serviceTarget.addService(org.jboss.as.server.deployment.Services.JBOSS_DEPLOYMENT_EXTENSION_INDEX,new ExtensionIndexService(newExtDirs)).setInitialMode(ServiceController.Mode.ON_DEMAND).install();
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SERVICE_MODULE_LOADER,new DeploymentUnitProcessor(){
    @Override public void deploy(    DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
      phaseContext.getDeploymentUnit().putAttachment(Attachments.SERVICE_MODULE_LOADER,injectedModuleLoader.getValue());
      phaseContext.getDeploymentUnit().putAttachment(Attachments.EXTERNAL_MODULE_SERVICE,injectedExternalModuleServie.getValue());
    }
    @Override public void undeploy(    DeploymentUnit context){
      context.removeAttachment(Attachments.SERVICE_MODULE_LOADER);
    }
  }
));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MOUNT,new DeploymentRootMountProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MANIFEST,new ManifestAttachmentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_SUB_DEPLOYMENT,new SubDeploymentProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_MODULE_IDENTIFIERS,new ModuleIdentifierProcessor()));
  deployers.get(Phase.STRUCTURE).add(new RegisteredProcessor(Phase.STRUCTURE_ANNOTATION_INDEX,new AnnotationIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_STRUCTURE_DESCRIPTOR,new DeploymentStructureDescriptorParser()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_COMPOSITE_ANNOTATION_INDEX,new CompositeIndexProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_ADDITIONAL_MODULES,new AdditionalModuleProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_CLASS_PATH,new ManifestClassPathProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_EXTENSION_LIST,new ManifestExtensionListProcessor()));
  deployers.get(Phase.PARSE).add(new RegisteredProcessor(Phase.PARSE_SERVICE_LOADER_DEPLOYMENT,new ServiceLoaderProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_MODULE,new ModuleDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SAR_MODULE,new ServiceActivatorDependencyProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_CLASS_PATH,new ModuleClassPathProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_EXTENSION_LIST,new ModuleExtensionListProcessor()));
  deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor()));
  deployers.get(Phase.CONFIGURE_MODULE).add(new RegisteredProcessor(Phase.CONFIGURE_MODULE_SPEC,new ModuleSpecProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor()));
  deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_SERVICE_ACTIVATOR,new ServiceActivatorProcessor()));
  final EnumMap<Phase,List<DeploymentUnitProcessor>> finalDeployers=new EnumMap<Phase,List<DeploymentUnitProcessor>>(Phase.class);
  for (  Map.Entry<Phase,SortedSet<RegisteredProcessor>> entry : deployers.entrySet()) {
    final SortedSet<RegisteredProcessor> processorSet=entry.getValue();
    final List<DeploymentUnitProcessor> list=new ArrayList<DeploymentUnitProcessor>(processorSet.size());
    for (    RegisteredProcessor processor : processorSet) {
      list.add(processor.getProcessor());
    }
    finalDeployers.put(entry.getKey(),list);
  }
  DeployerChainsService.addService(serviceTarget,finalDeployers);
  this.serverController=serverController;
  bootServices=serviceTarget.getSet();
}",0.9886610373944512
167971,"private ServiceName createModuleService(DeploymentPhaseContext phaseContext,final DeploymentUnit deploymentUnit,final List<ResourceRoot> resourceRoots,final ModuleSpecification moduleSpecification,final ModuleIdentifier moduleIdentifier) throws DeploymentUnitProcessingException {
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  final List<ModuleDependency> dependencies=moduleSpecification.getDependencies();
  for (  ResourceRoot resourceRoot : resourceRoots) {
    addResourceRoot(specBuilder,resourceRoot);
  }
  final boolean childFirst;
  if (moduleSpecification.getChildFirst() == null) {
    childFirst=false;
  }
 else {
    childFirst=moduleSpecification.getChildFirst();
  }
  if (childFirst) {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
  if (dependencies != null)   for (  ModuleDependency dependency : dependencies) {
    final List<FilterSpecification> importFilters=dependency.getImportFilters();
    final List<FilterSpecification> exportFilters=dependency.getExportFilters();
    final PathFilter importFilter;
    final PathFilter exportFilter;
    final MultiplePathFilterBuilder importBuilder=PathFilters.multiplePathFilterBuilder(true);
    for (    FilterSpecification filter : importFilters) {
      importBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
    }
    if (dependency.isImportServices()) {
      importBuilder.addFilter(PathFilters.getMetaInfServicesFilter(),true);
    }
    importBuilder.addFilter(PathFilters.getMetaInfSubdirectoriesFilter(),false);
    importBuilder.addFilter(PathFilters.getMetaInfFilter(),false);
    importFilter=importBuilder.create();
    if (exportFilters.isEmpty()) {
      exportFilter=PathFilters.acceptAll();
    }
 else {
      final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());
      for (      FilterSpecification filter : exportFilters) {
        exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
      }
      exportFilter=exportBuilder.create();
    }
    DependencySpec depSpec=DependencySpec.createModuleDependencySpec(importFilter,exportFilter,dependency.getModuleLoader(),dependency.getIdentifier(),dependency.isOptional());
    specBuilder.addDependency(depSpec);
    final String depName=dependency.getIdentifier().getName();
    if (depName.startsWith(ServiceModuleLoader.MODULE_PREFIX)) {
      phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleSpecServiceName(dependency.getIdentifier()));
    }
  }
  if (!childFirst) {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  final ValueService<ModuleSpec> moduleSpecService=new ValueService<ModuleSpec>(new ImmediateValue<ModuleSpec>(moduleSpec));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,dependencies);
}","private ServiceName createModuleService(DeploymentPhaseContext phaseContext,final DeploymentUnit deploymentUnit,final List<ResourceRoot> resourceRoots,final ModuleSpecification moduleSpecification,final ModuleIdentifier moduleIdentifier) throws DeploymentUnitProcessingException {
  final ModuleSpec.Builder specBuilder=ModuleSpec.build(moduleIdentifier);
  final List<ModuleDependency> dependencies=moduleSpecification.getDependencies();
  for (  ResourceRoot resourceRoot : resourceRoots) {
    addResourceRoot(specBuilder,resourceRoot);
  }
  final boolean childFirst;
  if (moduleSpecification.getChildFirst() == null) {
    childFirst=false;
  }
 else {
    childFirst=moduleSpecification.getChildFirst();
  }
  if (childFirst) {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
  if (dependencies != null)   for (  ModuleDependency dependency : dependencies) {
    final List<FilterSpecification> importFilters=dependency.getImportFilters();
    final List<FilterSpecification> exportFilters=dependency.getExportFilters();
    final PathFilter importFilter;
    final PathFilter exportFilter;
    final MultiplePathFilterBuilder importBuilder=PathFilters.multiplePathFilterBuilder(true);
    for (    FilterSpecification filter : importFilters) {
      importBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
    }
    if (dependency.isImportServices()) {
      importBuilder.addFilter(PathFilters.getMetaInfServicesFilter(),true);
    }
    importBuilder.addFilter(PathFilters.getMetaInfSubdirectoriesFilter(),false);
    importBuilder.addFilter(PathFilters.getMetaInfFilter(),false);
    importFilter=importBuilder.create();
    if (exportFilters.isEmpty()) {
      if (dependency.isExport()) {
        exportFilter=PathFilters.acceptAll();
      }
 else {
        exportFilter=PathFilters.rejectAll();
      }
    }
 else {
      final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());
      for (      FilterSpecification filter : exportFilters) {
        exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());
      }
      exportFilter=exportBuilder.create();
    }
    DependencySpec depSpec=DependencySpec.createModuleDependencySpec(importFilter,exportFilter,dependency.getModuleLoader(),dependency.getIdentifier(),dependency.isOptional());
    specBuilder.addDependency(depSpec);
    final String depName=dependency.getIdentifier().getName();
    if (depName.startsWith(ServiceModuleLoader.MODULE_PREFIX)) {
      phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,ServiceModuleLoader.moduleSpecServiceName(dependency.getIdentifier()));
    }
  }
  if (!childFirst) {
    specBuilder.addDependency(DependencySpec.createLocalDependencySpec());
  }
  final ModuleSpec moduleSpec=specBuilder.create();
  final ServiceName moduleSpecServiceName=ServiceModuleLoader.moduleSpecServiceName(moduleIdentifier);
  final ValueService<ModuleSpec> moduleSpecService=new ValueService<ModuleSpec>(new ImmediateValue<ModuleSpec>(moduleSpec));
  phaseContext.getServiceTarget().addService(moduleSpecServiceName,moduleSpecService).addDependencies(deploymentUnit.getServiceName()).addDependencies(phaseContext.getPhaseServiceName()).setInitialMode(Mode.ON_DEMAND).install();
  return ModuleLoadService.install(phaseContext.getServiceTarget(),moduleIdentifier,dependencies);
}",0.9839556155345628
167972,"public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getAttachment(MARKER) != null) {
    return;
  }
  deploymentUnit.putAttachment(MARKER,true);
  if (deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)) {
    return;
  }
  final ResourceRoot mainRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final List<ResourceRoot> additionalRoots=deploymentUnit.getAttachment(Attachments.RESOURCE_ROOTS);
  if (mainRoot == null) {
    return;
  }
  List<ResourceRoot> resourceRoots=new ArrayList<ResourceRoot>();
  if (ModuleRootMarker.isModuleRoot(mainRoot)) {
    resourceRoots.add(mainRoot);
  }
  if (additionalRoots != null)   for (  ResourceRoot additionalRoot : additionalRoots) {
    if (ModuleRootMarker.isModuleRoot(additionalRoot)) {
      resourceRoots.add(additionalRoot);
    }
  }
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ModuleIdentifier moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER);
  if (moduleIdentifier == null) {
    throw new DeploymentUnitProcessingException(""String_Node_Str"" + deploymentUnit.getName());
  }
  ServiceName moduleServiceName=createModuleService(phaseContext,deploymentUnit,resourceRoots,moduleSpecification,moduleIdentifier);
  phaseContext.addDeploymentDependency(moduleServiceName,Attachments.MODULE);
  final List<AdditionalModuleSpecification> additionalModules=deploymentUnit.getAttachment(Attachments.ADDITIONAL_MODULES);
  if (additionalModules == null) {
    return;
  }
  for (  AdditionalModuleSpecification module : additionalModules) {
    ServiceName additionalModuleServiceName=createModuleService(phaseContext,deploymentUnit,module.getResourceRoots(),module,module.getModuleIdentifier());
    phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,additionalModuleServiceName);
  }
}","public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getAttachment(MARKER) != null) {
    return;
  }
  deploymentUnit.putAttachment(MARKER,true);
  if (deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)) {
    return;
  }
  final ResourceRoot mainRoot=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final List<ResourceRoot> additionalRoots=deploymentUnit.getAttachment(Attachments.RESOURCE_ROOTS);
  if (mainRoot == null) {
    return;
  }
  List<ResourceRoot> resourceRoots=new ArrayList<ResourceRoot>();
  if (ModuleRootMarker.isModuleRoot(mainRoot)) {
    resourceRoots.add(mainRoot);
  }
  if (additionalRoots != null)   for (  ResourceRoot additionalRoot : additionalRoots) {
    if (ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot)) {
      resourceRoots.add(additionalRoot);
    }
  }
  final ModuleSpecification moduleSpecification=deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);
  final ModuleIdentifier moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER);
  if (moduleIdentifier == null) {
    throw new DeploymentUnitProcessingException(""String_Node_Str"" + deploymentUnit.getName());
  }
  ServiceName moduleServiceName=createModuleService(phaseContext,deploymentUnit,resourceRoots,moduleSpecification,moduleIdentifier);
  phaseContext.addDeploymentDependency(moduleServiceName,Attachments.MODULE);
  final List<AdditionalModuleSpecification> additionalModules=deploymentUnit.getAttachment(Attachments.ADDITIONAL_MODULES);
  if (additionalModules == null) {
    return;
  }
  for (  AdditionalModuleSpecification module : additionalModules) {
    ServiceName additionalModuleServiceName=createModuleService(phaseContext,deploymentUnit,module.getResourceRoots(),module,module.getModuleIdentifier());
    phaseContext.addToAttachmentList(Attachments.NEXT_PHASE_DEPS,additionalModuleServiceName);
  }
}",0.9862407862407864
167973,"@Override public void readElement(final XMLExtendedStreamReader reader,final List<ModelNode> operationList) throws XMLStreamException {
  final ModelNode address=new ModelNode().setEmptyList();
  if (reader.nextTag() != START_ELEMENT) {
    throw unexpectedEndElement(reader);
  }
  if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0 || Element.forName(reader.getLocalName()) != Element.SERVER) {
    throw unexpectedElement(reader);
  }
  readServerElement(reader,address,operationList);
}","@Override public void readElement(final XMLExtendedStreamReader reader,final List<ModelNode> operationList) throws XMLStreamException {
  final ModelNode address=new ModelNode().setEmptyList();
  if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0 || Element.forName(reader.getLocalName()) != Element.SERVER) {
    throw unexpectedElement(reader);
  }
  readServerElement(reader,address,operationList);
}",0.9067524115755627
167974,"private void readServerElement(final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case NONE:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            setServerName(address,list,value);
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      parseSchemaLocations(reader,address,list,i);
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
parseExtensions(reader,address,list);
element=nextElement(reader);
}
if (element == Element.PATHS) {
parsePaths(reader,address,list,true);
element=nextElement(reader);
}
if (element == Element.MANAGEMENT) {
parseManagementSocket(reader,address,list);
element=nextElement(reader);
}
if (element == Element.PROFILE) {
parseServerProfile(reader,list);
element=nextElement(reader);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,list,true);
element=nextElement(reader);
}
if (element == Element.SOCKET_BINDING_GROUP) {
parseSocketBindingGroup(reader,interfaceNames,address,list,false);
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
list.add(getWriteAttributeOperation(address,""String_Node_Str"",parseProperties(reader)));
element=nextElement(reader);
}
if (element == Element.DEPLOYMENTS) {
parseServerDeployments(reader,list);
element=nextElement(reader);
}
if (element != null) {
throw unexpectedElement(reader);
}
for (; ; ) {
switch (reader.nextTag()) {
case START_ELEMENT:
{
readHeadComment(reader,address,list);
if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {
throw unexpectedElement(reader);
}
switch (Element.forName(reader.getLocalName())) {
default :
throw unexpectedElement(reader);
}
}
case END_ELEMENT:
{
readTailComment(reader,address,list);
return;
}
default :
throw new IllegalStateException();
}
}
}","private void readServerElement(final XMLExtendedStreamReader reader,final ModelNode address,final List<ModelNode> list) throws XMLStreamException {
  parseNamespaces(reader,address,list);
  final int count=reader.getAttributeCount();
  for (int i=0; i < count; i++) {
switch (Namespace.forUri(reader.getAttributeNamespace(i))) {
case NONE:
{
        final String value=reader.getAttributeValue(i);
        final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));
switch (attribute) {
case NAME:
{
            setServerName(address,list,value);
            break;
          }
default :
        throw unexpectedAttribute(reader,i);
    }
    break;
  }
case XML_SCHEMA_INSTANCE:
{
switch (Attribute.forName(reader.getAttributeLocalName(i))) {
case SCHEMA_LOCATION:
{
      parseSchemaLocations(reader,address,list,i);
      break;
    }
case NO_NAMESPACE_SCHEMA_LOCATION:
{
    break;
  }
default :
{
  throw unexpectedAttribute(reader,i);
}
}
break;
}
default :
throw unexpectedAttribute(reader,i);
}
}
Element element=nextElement(reader);
if (element == Element.EXTENSIONS) {
parseExtensions(reader,address,list);
element=nextElement(reader);
}
if (element == Element.PATHS) {
parsePaths(reader,address,list,true);
element=nextElement(reader);
}
if (element == Element.MANAGEMENT) {
parseManagementSocket(reader,address,list);
element=nextElement(reader);
}
if (element == Element.PROFILE) {
parseServerProfile(reader,list);
element=nextElement(reader);
}
final Set<String> interfaceNames=new HashSet<String>();
if (element == Element.INTERFACES) {
parseInterfaces(reader,interfaceNames,address,list,true);
element=nextElement(reader);
}
if (element == Element.SOCKET_BINDING_GROUP) {
parseSocketBindingGroup(reader,interfaceNames,address,list,false);
element=nextElement(reader);
}
if (element == Element.SYSTEM_PROPERTIES) {
list.add(getWriteAttributeOperation(address,""String_Node_Str"",parseProperties(reader)));
element=nextElement(reader);
}
if (element == Element.DEPLOYMENTS) {
parseServerDeployments(reader,list);
element=nextElement(reader);
}
if (element != null) {
throw unexpectedElement(reader);
}
}",0.9095948827292112
167975,"public ModelNode getModelDescription(Locale locale){
  return new ModelNode();
}","@Override public ModelNode getModelDescription(final Locale locale){
  return new ModelNode();
}",0.9090909090909092
167976,"/** 
 * {@inheritDoc} 
 */
protected ModelNodeRegistration getRegistry(){
  return super.getRegistry();
}","/** 
 * {@inheritDoc} 
 */
@Override protected ModelNodeRegistration getRegistry(){
  return super.getRegistry();
}",0.9545454545454546
167977,"protected TestController(){
  super(model,new NullConfigurationPersister());
}","protected TestController(){
  super(model,new NullConfigurationPersister(),null);
}",0.968944099378882
167978,"public static void main(String[] args) throws Exception {
  ModelNodeRegistration reg=c.getRegistry().registerSubModel(PathElement.pathElement(""String_Node_Str"",""String_Node_Str""),NULL_PROVIDER);
  reg=reg.registerSubModel(PathElement.pathElement(""String_Node_Str"",""String_Node_Str""),NewRemotingSubsystemProviders.SUBSYSTEM);
  reg.registerOperationHandler(""String_Node_Str"",new NewRemotingSubsystemAdd(),NewRemotingSubsystemProviders.SUBSYSTEM_ADD,false);
  reg=reg.registerSubModel(PathElement.pathElement(""String_Node_Str""),NULL_PROVIDER);
  reg.registerOperationHandler(""String_Node_Str"",new NewConnectorAdd(),NewRemotingSubsystemProviders.CONNECTOR_ADD,false);
  reg.registerOperationHandler(""String_Node_Str"",new NewConnectorRemove(),NewRemotingSubsystemProviders.CONNECTOR_REMOVE,false);
  try {
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(subsystemRoot.clone());
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
    System.out.println(model);
    System.out.println(""String_Node_Str"");
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
    System.out.println(model);
    System.out.println(""String_Node_Str"");
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
  }
 catch (  OperationFailedException e) {
    e.printStackTrace();
    System.err.println(e.getFailureDescription());
  }
  System.out.println(model);
  System.out.println(""String_Node_Str"");
}","public static void main(final String[] args) throws Exception {
  ModelNodeRegistration reg=c.getRegistry().registerSubModel(PathElement.pathElement(""String_Node_Str"",""String_Node_Str""),NULL_PROVIDER);
  reg=reg.registerSubModel(PathElement.pathElement(""String_Node_Str"",""String_Node_Str""),NewRemotingSubsystemProviders.SUBSYSTEM);
  reg.registerOperationHandler(""String_Node_Str"",new NewRemotingSubsystemAdd(),NewRemotingSubsystemProviders.SUBSYSTEM_ADD,false);
  reg=reg.registerSubModel(PathElement.pathElement(""String_Node_Str""),NULL_PROVIDER);
  reg.registerOperationHandler(""String_Node_Str"",new NewConnectorAdd(),NewRemotingSubsystemProviders.CONNECTOR_ADD,false);
  reg.registerOperationHandler(""String_Node_Str"",new NewConnectorRemove(),NewRemotingSubsystemProviders.CONNECTOR_REMOVE,false);
  try {
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(subsystemRoot.clone());
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
    System.out.println(model);
    System.out.println(""String_Node_Str"");
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
    System.out.println(model);
    System.out.println(""String_Node_Str"");
{
      final ModelNode operation=new ModelNode();
      operation.get(ADDRESS).set(connectorRoot.clone().add(""String_Node_Str""));
      operation.get(OPERATION).set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"").set(""String_Node_Str"");
      operation.get(REQUEST_PROPERTIES,""String_Node_Str"");
      final ModelNode response=c.execute(operation);
    }
  }
 catch (  final OperationFailedException e) {
    e.printStackTrace();
    System.err.println(e.getFailureDescription());
  }
  System.out.println(model);
  System.out.println(""String_Node_Str"");
}",0.9981302586475538
167979,"Map<String,OperationHandler> getHandlers(final ListIterator<PathElement> iterator,final String child){
  final Map<String,OperationRegistry> snapshot=childRegistriesUpdater.get(this);
  final OperationRegistry childRegistry=snapshot.get(child);
  final OperationRegistry wildcardRegistry=snapshot.get(this);
  if (wildcardRegistry == null) {
    if (childRegistry == null) {
      return Collections.emptyMap();
    }
 else {
      return childRegistry.getHandlers(iterator);
    }
  }
 else {
    if (childRegistry == null) {
      return wildcardRegistry.getHandlers(iterator);
    }
 else {
      final Map<String,OperationHandler> wildcardHandlers=wildcardRegistry.getHandlers(iterator);
      final Map<String,OperationHandler> childHandlers=childRegistry.getHandlers(iterator);
      final FastCopyHashMap<String,OperationHandler> combined=new FastCopyHashMap<String,OperationHandler>(childHandlers);
      combined.putAll(wildcardHandlers);
      return combined;
    }
  }
}","private Map<String,OperationHandler> getHandlers(final ListIterator<PathElement> iterator,final String child){
  final Map<String,OperationRegistry> snapshot=childRegistriesUpdater.get(this);
  final OperationRegistry childRegistry=snapshot.get(child);
  final OperationRegistry wildcardRegistry=snapshot.get(this);
  if (wildcardRegistry == null) {
    if (childRegistry == null) {
      return Collections.emptyMap();
    }
 else {
      return childRegistry.getHandlers(iterator);
    }
  }
 else {
    if (childRegistry == null) {
      return wildcardRegistry.getHandlers(iterator);
    }
 else {
      final Map<String,OperationHandler> wildcardHandlers=wildcardRegistry.getHandlers(iterator);
      final Map<String,OperationHandler> childHandlers=childRegistry.getHandlers(iterator);
      final FastCopyHashMap<String,OperationHandler> combined=new FastCopyHashMap<String,OperationHandler>(childHandlers);
      combined.putAll(wildcardHandlers);
      return combined;
    }
  }
}",0.995943204868154
167980,"String getLocationString(){
  return parent.getLocationString() + ""String_Node_Str"" + keyName+ ""String_Node_Str"";
}","private String getLocationString(){
  return parent.getLocationString() + ""String_Node_Str"" + keyName+ ""String_Node_Str"";
}",0.9663865546218487
167981,"OperationHandler getHandler(final ListIterator<PathElement> iterator,final String child,final String operationName){
  final Map<String,OperationRegistry> snapshot=childRegistriesUpdater.get(this);
  final OperationRegistry childRegistry=snapshot.get(child);
  if (childRegistry != null) {
    return childRegistry.getHandler(iterator,operationName);
  }
 else {
    final OperationRegistry wildcardRegistry=snapshot.get(""String_Node_Str"");
    if (wildcardRegistry != null) {
      return wildcardRegistry.getHandler(iterator,operationName);
    }
 else {
      return null;
    }
  }
}","private OperationHandler getHandler(final ListIterator<PathElement> iterator,final String child,final String operationName){
  final Map<String,OperationRegistry> snapshot=childRegistriesUpdater.get(this);
  final OperationRegistry childRegistry=snapshot.get(child);
  if (childRegistry != null) {
    return childRegistry.getHandler(iterator,operationName);
  }
 else {
    final OperationRegistry wildcardRegistry=snapshot.get(""String_Node_Str"");
    if (wildcardRegistry != null) {
      return wildcardRegistry.getHandler(iterator,operationName);
    }
 else {
      return null;
    }
  }
}",0.9932318104906938
167982,"OperationRegistry(final String valueString,final OperationSubregistry parent){
  this.valueString=valueString;
  this.parent=parent;
  childrenUpdater.clear(this);
  handlersUpdater.clear(this);
}","private OperationRegistry(final String valueString,final Subregistry parent){
  this.valueString=valueString;
  this.parent=parent;
  childrenUpdater.clear(this);
  handlersUpdater.clear(this);
}",0.9565217391304348
167983,"void register(final String elementValue,final ListIterator<PathElement> iterator,final String operationName,final OperationHandler handler){
  OperationRegistry registry=childRegistriesUpdater.get(this,elementValue);
  if (registry == null) {
    final OperationRegistry newRegistry=new OperationRegistry(elementValue,this);
    final OperationRegistry appearingRegistry=childRegistriesUpdater.putIfAbsent(this,elementValue,newRegistry);
    registry=appearingRegistry != null ? appearingRegistry : newRegistry;
  }
  registry.register(iterator,operationName,handler);
}","private void register(final String elementValue,final ListIterator<PathElement> iterator,final String operationName,final OperationHandler handler){
  OperationRegistry registry=childRegistriesUpdater.get(this,elementValue);
  if (registry == null) {
    final OperationRegistry newRegistry=new OperationRegistry(elementValue,this);
    final OperationRegistry appearingRegistry=childRegistriesUpdater.putIfAbsent(this,elementValue,newRegistry);
    registry=appearingRegistry != null ? appearingRegistry : newRegistry;
  }
  registry.register(iterator,operationName,handler);
}",0.9930313588850174
167984,"/** 
 * Add the dependencies if the deployment contains a service activator loader entry.
 * @param phaseContext the deployment unit context
 * @throws DeploymentUnitProcessingException
 */
public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final ResourceRoot deploymentRoot=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT);
  if (deploymentRoot == null)   return;
  if (!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {
    phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);
  }
}","/** 
 * Add the dependencies if the deployment contains a service activator loader entry.
 * @param phaseContext the deployment unit context
 * @throws DeploymentUnitProcessingException
 */
public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final ResourceRoot deploymentRoot=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT);
  if (deploymentRoot == null)   return;
  final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES);
  if (servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {
    phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);
  }
}",0.9281396910678308
167985,"/** 
 * If the deployment has a module attached it will ask the module to load the ServiceActivator services.
 * @param phaseContext the deployment unit context
 */
public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  if (deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty())   return;
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   return;
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(phaseContext.getServiceTarget(),phaseContext.getServiceRegistry());
  for (  ServiceActivator serviceActivator : module.loadService(ServiceActivator.class)) {
    try {
      serviceActivator.activate(serviceActivatorContext);
    }
 catch (    ServiceRegistryException e) {
      throw new DeploymentUnitProcessingException(e);
    }
  }
}","/** 
 * If the deployment has a module attached it will ask the module to load the ServiceActivator services.
 * @param phaseContext the deployment unit context
 */
public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES);
  if (servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty())   return;
  final Module module=deploymentUnit.getAttachment(Attachments.MODULE);
  if (module == null)   return;
  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(phaseContext.getServiceTarget(),phaseContext.getServiceRegistry());
  for (  ServiceActivator serviceActivator : module.loadService(ServiceActivator.class)) {
    try {
      serviceActivator.activate(serviceActivatorContext);
    }
 catch (    ServiceRegistryException e) {
      throw new DeploymentUnitProcessingException(e);
    }
  }
}",0.9516129032258064
167986,"public void undeploy(DeploymentUnit context){
  final DeploymentModuleLoader deploymentModuleLoader=context.getAttachment(Attachments.DEPLOYMENT_MODULE_LOADER);
  if (deploymentModuleLoader == null) {
    return;
  }
  final Module module=context.getAttachment(Attachments.MODULE);
  if (module != null) {
    deploymentModuleLoader.removeModuleSpec(module.getIdentifier());
  }
}","public void undeploy(DeploymentUnit context){
  final DeploymentModuleLoader deploymentModuleLoader=context.getAttachment(Attachments.DEPLOYMENT_MODULE_LOADER);
  if (deploymentModuleLoader == null) {
    return;
  }
  final ModuleIdentifier identifier=context.getAttachment(Attachments.MODULE_IDENTIFIER);
  if (identifier != null) {
    deploymentModuleLoader.removeModuleSpec(identifier);
  }
}",0.888030888030888
167987,"public synchronized void stop(final StopContext context){
  final ServiceController<?> controller=context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME));
  controller.setMode(ServiceController.Mode.REMOVE);
  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);
  controller.addListener(listener);
  listener.done();
}","public synchronized void stop(final StopContext context){
  final ServiceController<?> controller=context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME));
  if (controller != null) {
    controller.setMode(ServiceController.Mode.REMOVE);
    final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);
    controller.addListener(listener);
    listener.done();
  }
}",0.8580931263858093
167988,"public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final ServerDeploymentRepository serverDeploymentRepository=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVER_DEPLOYMENT_REPOSITORY);
  if (serverDeploymentRepository == null) {
    throw new DeploymentUnitProcessingException(""String_Node_Str"");
  }
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final String deploymentName=deploymentUnit.getName();
  final String deploymentRuntimeName=deploymentUnit.getAttachment(Attachments.RUNTIME_NAME);
  final byte[] deploymentHash=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_HASH);
  final VirtualFile deploymentRoot=VFS.getChild(""String_Node_Str"" + deploymentRuntimeName);
  boolean failed=false;
  Closeable handle=null;
  try {
    handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentHash,deploymentRoot);
    final MountHandle mountHandle=new MountHandle(handle);
    final ResourceRoot resourceRoot=new ResourceRoot(deploymentRoot,mountHandle,false);
    deploymentUnit.putAttachment(Attachments.DEPLOYMENT_ROOT,resourceRoot);
    deploymentUnit.putAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE,mountHandle);
  }
 catch (  IOException e) {
    failed=true;
    throw new DeploymentUnitProcessingException(""String_Node_Str"");
  }
 finally {
    if (failed) {
      VFSUtils.safeClose(handle);
    }
  }
}","public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
  final ServerDeploymentRepository serverDeploymentRepository=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVER_DEPLOYMENT_REPOSITORY);
  if (serverDeploymentRepository == null) {
    throw new DeploymentUnitProcessingException(""String_Node_Str"");
  }
  final DeploymentUnit deploymentUnit=phaseContext.getDeploymentUnit();
  final String deploymentName=deploymentUnit.getName();
  final String deploymentRuntimeName=deploymentUnit.getAttachment(Attachments.RUNTIME_NAME);
  final byte[] deploymentHash=deploymentUnit.getAttachment(Attachments.DEPLOYMENT_HASH);
  final VirtualFile deploymentRoot=VFS.getChild(""String_Node_Str"" + deploymentRuntimeName);
  boolean failed=false;
  Closeable handle=null;
  try {
    handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentHash,deploymentRoot);
    final MountHandle mountHandle=new MountHandle(handle);
    final ResourceRoot resourceRoot=new ResourceRoot(deploymentRoot,mountHandle,false);
    deploymentUnit.putAttachment(Attachments.DEPLOYMENT_ROOT,resourceRoot);
    deploymentUnit.putAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE,mountHandle);
  }
 catch (  IOException e) {
    failed=true;
    throw new DeploymentUnitProcessingException(""String_Node_Str"",e);
  }
 finally {
    if (failed) {
      VFSUtils.safeClose(handle);
    }
  }
}",0.9993160054719562
167989,"public void undeploy(DeploymentUnit context){
  final ResourceRoot resourceRoot=context.getAttachment(Attachments.DEPLOYMENT_ROOT);
  final Closeable mountHandle=resourceRoot.getMountHandle();
  VFSUtils.safeClose(mountHandle);
}","public void undeploy(DeploymentUnit context){
  final ResourceRoot resourceRoot=context.getAttachment(Attachments.DEPLOYMENT_ROOT);
  if (resourceRoot != null) {
    final Closeable mountHandle=resourceRoot.getMountHandle();
    VFSUtils.safeClose(mountHandle);
  }
}",0.9233870967741936
167990,"@Override protected final void readRequest(final InputStream inputStream) throws IOException {
  final Unmarshaller unmarshaller=getUnmarshaller();
  unmarshaller.start(createByteInput(inputStream));
  unmarshaller.finish();
}","@Override protected void readRequest(InputStream input) throws IOException {
  super.readRequest(input);
}",0.6024096385542169
167991,"@Override protected void sendResponse(final OutputStream output) throws IOException {
  final Marshaller marshaller=getMarshaller();
  marshaller.start(createByteOutput(output));
  marshaller.writeObject(serverController.getValue().getServerModel());
  marshaller.finish();
}","@Override protected void sendResponse(final OutputStream output) throws IOException {
  ServerModel sm=serverController.getValue().getServerModel();
  final Marshaller marshaller=getMarshaller();
  marshaller.start(createByteOutput(output));
  marshaller.writeByte(DomainServerProtocol.RETURN_SERVER_MODEL);
  marshaller.writeObject(sm);
  marshaller.finish();
}",0.728414442700157
167992,"protected void writeElements(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  if (levelName != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",levelName);
  }
  if (formatter != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    final QName elementName=formatter.getElementName();
    streamWriter.writeStartElement(elementName.getNamespaceURI(),elementName.getLocalPart());
    formatter.writeContent(streamWriter);
    streamWriter.writeEndElement();
  }
  if (subhandlers != null && subhandlers.length > 0) {
    streamWriter.writeStartElement(""String_Node_Str"");
    for (    String name : subhandlers) {
      streamWriter.writeEmptyElement(""String_Node_Str"");
      streamWriter.writeAttribute(""String_Node_Str"",name);
    }
    streamWriter.writeEndElement();
  }
  if (properties != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
}","protected void writeElements(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {
  if (levelName != null) {
    streamWriter.writeEmptyElement(""String_Node_Str"");
    streamWriter.writeAttribute(""String_Node_Str"",levelName);
  }
  if (formatter != null) {
    streamWriter.writeStartElement(""String_Node_Str"");
    final QName elementName=formatter.getElementName();
    streamWriter.writeStartElement(elementName.getNamespaceURI(),elementName.getLocalPart());
    formatter.writeContent(streamWriter);
    streamWriter.writeEndElement();
  }
  if (subhandlers != null && subhandlers.length > 0) {
    streamWriter.writeStartElement(""String_Node_Str"");
    for (    String name : subhandlers) {
      streamWriter.writeEmptyElement(""String_Node_Str"");
      streamWriter.writeAttribute(""String_Node_Str"",name);
    }
    streamWriter.writeEndElement();
  }
  if (properties != null && properties.size() > 0) {
    streamWriter.writeStartElement(""String_Node_Str"");
    properties.writeContent(streamWriter);
  }
}",0.987751102400784
167993,"public ServerStartTask(final String serverName,final int portOffset,final Runnable logConfigurator,final List<ServiceActivator> startServices,final List<AbstractServerModelUpdate<?>> updates){
  this.serverName=serverName;
  this.portOffset=portOffset;
  this.logConfigurator=logConfigurator;
  this.startServices=startServices;
  this.updates=updates;
}","/** 
 * Constructor variant for use by StandaloneServer 
 */
public ServerStartTask(final String serverName,final int portOffset,final Runnable logConfigurator,final List<ServiceActivator> startServices,final List<AbstractServerModelUpdate<?>> updates,final ServerEnvironment environment){
  this.serverName=serverName;
  this.portOffset=portOffset;
  this.logConfigurator=logConfigurator;
  this.startServices=startServices;
  this.updates=updates;
  this.providedEnvironment=environment;
}",0.8378698224852071
167994,"public void start() throws ServerStartException {
  final File standalone=new File(environment.getServerConfigurationDir(),STANDALONE_XML);
  if (!standalone.isFile()) {
    throw new ServerStartException(""String_Node_Str"" + standalone.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!standalone.canWrite()) {
    throw new ServerStartException(""String_Node_Str"" + standalone.getAbsolutePath() + ""String_Node_Str"");
  }
  final List<AbstractServerModelUpdate<?>> updates=new ArrayList<AbstractServerModelUpdate<?>>();
  try {
    final XMLMapper mapper=XMLMapper.Factory.create();
    extensionRegistrar.registerStandardStandaloneReaders(mapper);
    mapper.parseDocument(updates,XMLInputFactory.newInstance().createXMLStreamReader(new BufferedReader(new FileReader(standalone))));
  }
 catch (  Exception e) {
    throw new ServerStartException(""String_Node_Str"",e);
  }
  final ServerStartTask startTask=new ServerStartTask(""String_Node_Str"",0,null,Collections.<ServiceActivator>emptyList(),updates);
  startTask.run(Collections.<ServiceActivator>emptyList());
  new Thread(){
{
      setName(""String_Node_Str"");
      setDaemon(false);
      setPriority(MIN_PRIORITY);
    }
    public void run(){
      for (; ; )       try {
        sleep(1000000L);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
.start();
}","public void start() throws ServerStartException {
  final File standalone=new File(environment.getServerConfigurationDir(),STANDALONE_XML);
  if (!standalone.isFile()) {
    throw new ServerStartException(""String_Node_Str"" + standalone.getAbsolutePath() + ""String_Node_Str"");
  }
  if (!standalone.canWrite()) {
    throw new ServerStartException(""String_Node_Str"" + standalone.getAbsolutePath() + ""String_Node_Str"");
  }
  final List<AbstractServerModelUpdate<?>> updates=new ArrayList<AbstractServerModelUpdate<?>>();
  try {
    final XMLMapper mapper=XMLMapper.Factory.create();
    extensionRegistrar.registerStandardStandaloneReaders(mapper);
    mapper.parseDocument(updates,XMLInputFactory.newInstance().createXMLStreamReader(new BufferedReader(new FileReader(standalone))));
  }
 catch (  Exception e) {
    throw new ServerStartException(""String_Node_Str"",e);
  }
  final ServerStartTask startTask=new ServerStartTask(""String_Node_Str"",0,null,Collections.<ServiceActivator>emptyList(),updates,environment);
  startTask.run(Collections.<ServiceActivator>emptyList());
  new Thread(){
{
      setName(""String_Node_Str"");
      setDaemon(false);
      setPriority(MIN_PRIORITY);
    }
    @Override public void run(){
      for (; ; )       try {
        sleep(1000000L);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
.start();
}",0.991851851851852
167995,"public void run(){
  for (; ; )   try {
    sleep(1000000L);
  }
 catch (  InterruptedException ignore) {
  }
}","@Override public void run(){
  for (; ; )   try {
    sleep(1000000L);
  }
 catch (  InterruptedException ignore) {
  }
}",0.956896551724138
167996,"@Override public void start(StartContext context) throws StartException {
  ServerEnvironment env;
  try {
    env=serverEnvironment.getValue();
  }
 catch (  IllegalStateException ise) {
    throw new StartException(ServerEnvironment.class.getSimpleName() + ""String_Node_Str"");
  }
  if (env.isStandalone()) {
    File configDir=serverEnvironment.getValue().getServerConfigurationDir();
    if (configDir.exists()) {
      if (!configDir.isDirectory()) {
        throw new StartException(configDir.getAbsolutePath() + ""String_Node_Str"");
      }
 else       if (!configDir.canWrite()) {
        throw new StartException(configDir.getAbsolutePath() + ""String_Node_Str"");
      }
    }
 else     if (!configDir.mkdirs()) {
      throw new StartException(""String_Node_Str"" + configDir.getAbsolutePath());
    }
    configFile=new File(configDir,""String_Node_Str"");
    if (configFile.exists()) {
      if (configFile.isDirectory()) {
        throw new StartException(configFile.getAbsolutePath() + ""String_Node_Str"");
      }
 else       if (!configDir.canWrite()) {
        throw new StartException(configFile.getAbsolutePath() + ""String_Node_Str"");
      }
    }
  }
}","@Override public void start(StartContext context) throws StartException {
  ServerEnvironment env;
  try {
    env=serverEnvironment.getValue();
  }
 catch (  IllegalStateException ise) {
    throw new StartException(ServerEnvironment.class.getSimpleName() + ""String_Node_Str"");
  }
  if (env.isStandalone()) {
    File configDir=env.getServerConfigurationDir();
    if (configDir.exists()) {
      if (!configDir.isDirectory()) {
        throw new StartException(configDir.getAbsolutePath() + ""String_Node_Str"");
      }
 else       if (!configDir.canWrite()) {
        throw new StartException(configDir.getAbsolutePath() + ""String_Node_Str"");
      }
    }
 else     if (!configDir.mkdirs()) {
      throw new StartException(""String_Node_Str"" + configDir.getAbsolutePath());
    }
    configFile=new File(configDir,""String_Node_Str"");
    if (configFile.exists()) {
      if (configFile.isDirectory()) {
        throw new StartException(configFile.getAbsolutePath() + ""String_Node_Str"");
      }
 else       if (!configDir.canWrite()) {
        throw new StartException(configFile.getAbsolutePath() + ""String_Node_Str"");
      }
    }
  }
}",0.9865858935525746
167997,"private UpdateResultHandler<R,P> getDelegate(){
  return this.delegate;
}","private UpdateResultHandler<? super R,P> getDelegate(){
  return this.delegate;
}",0.948051948051948
167998,"@Override public void handleRollbackFailure(Throwable cause,P param){
  rollbackFailed();
  if (delegate != null) {
    delegate.handleRollbackFailure(cause,param);
  }
}","@Override public void handleRollbackFailure(Throwable cause,P param){
  rollbackFailed();
  if (delegate != null) {
    delegate.handleRollbackFailure(cause,param);
  }
  logger.errorf(cause,""String_Node_Str"",param);
}",0.8762886597938144
167999,"/** 
 * Add a new update to the set of updates to be executed.
 * @param < R > the result type provided by the update
 * @param < P > the parameter type expected by the result handler
 * @param update the update. Cannot be {@code null}
 * @param resultHandler a handler for the update result. May be {@code null}
 * @param param parameter to pass to {@code resultHandler}. May be   {@code null}if   {@code <P>} is {@code Void} or {@code resultHandler} is{@code null}.
 * @throws IllegalStateException if {@link #getStatus()} is not {@link Status#PENDING}
 */
public <R,P>void addServerModelUpdate(AbstractServerModelUpdate<R> update,UpdateResultHandler<R,P> resultHandler,P param){
synchronized (this) {
    if (status != Status.PENDING)     throw new IllegalStateException(""String_Node_Str"");
    updates.add(new ServerModelUpdateTuple<R,P>(update,resultHandler,param));
  }
}","/** 
 * Add a new update to the set of updates to be executed.
 * @param < R > the result type provided by the update
 * @param < P > the parameter type expected by the result handler
 * @param update the update. Cannot be {@code null}
 * @param resultHandler a handler for the update result. May be {@code null}
 * @param param parameter to pass to {@code resultHandler}. May be   {@code null}if   {@code <P>} is {@code Void} or {@code resultHandler} is{@code null}.
 * @throws IllegalStateException if {@link #getStatus()} is not {@link Status#PENDING}
 */
public <R,P>void addServerModelUpdate(AbstractServerModelUpdate<R> update,UpdateResultHandler<? super R,P> resultHandler,P param){
synchronized (this) {
    if (status != Status.PENDING)     throw new IllegalStateException(""String_Node_Str"");
    updates.add(new ServerModelUpdateTuple<R,P>(update,resultHandler,param));
  }
}",0.9954597048808173
168000,"@Override public void handleFailure(Throwable cause,P param){
  updateFailed();
  if (delegate != null) {
    delegate.handleFailure(cause,param);
  }
}","@Override public void handleFailure(Throwable cause,P param){
  updateFailed();
  if (delegate != null) {
    delegate.handleFailure(cause,param);
  }
  logger.errorf(cause,""String_Node_Str"",param);
}",0.8636363636363636
