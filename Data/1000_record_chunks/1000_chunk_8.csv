record_number,buggy_code,fixed_code,code_similarity
7001,"public void testUploadFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",1232,false,false,null);
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo))+ ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo))+ ""String_Node_Str"",gson.toJson(new BrowserFileSet()));
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(fileInfo,""String_Node_Str"");
  CommandTask task=createCommandTask(server,params,stream,fileReader,true);
  task.run(new JstdTestCase(Collections.<FileInfo>emptyList(),Lists.newArrayList(fileInfo),java.util.Collections.<FileInfo>emptyList()));
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}","public void testUploadFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",1232,-1,false,false,null);
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo))+ ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo))+ ""String_Node_Str"",gson.toJson(new BrowserFileSet()));
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(fileInfo,""String_Node_Str"");
  CommandTask task=createCommandTask(server,params,stream,fileReader,true);
  task.run(new JstdTestCase(Collections.<FileInfo>emptyList(),Lists.newArrayList(fileInfo),java.util.Collections.<FileInfo>emptyList()));
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}",0.9989792446410344
7002,"public void testUploadServeOnlyFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo loadInfo=new FileInfo(""String_Node_Str"",0,false,false,null);
  String loadInfoContents=""String_Node_Str"";
  FileInfo serveInfo=new FileInfo(""String_Node_Str"",0,false,true,null);
  String serveInfoContents=""String_Node_Str"";
  List<FileInfo> fileSet=Arrays.asList(loadInfo,serveInfo);
  final BrowserFileSet browserFileSet=new BrowserFileSet(fileSet,Lists.<FileInfo>newArrayList());
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(loadInfo))+ ""String_Node_Str"",gson.toJson(browserFileSet));
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(fileSet)+ ""String_Node_Str"",""String_Node_Str"");
  JsonCommand cmd=new JsonCommand(CommandType.RESET,Collections.<String>emptyList());
  Map<String,String> resetParams=new LinkedHashMap<String,String>();
  resetParams.put(""String_Node_Str"",""String_Node_Str"");
  resetParams.put(""String_Node_Str"",gson.toJson(cmd));
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(new FileInfo(loadInfo.getFilePath(),loadInfo.getTimestamp(),loadInfo.isPatch(),loadInfo.isServeOnly(),loadInfoContents),new FileInfo(serveInfo.getFilePath(),serveInfo.getTimestamp(),serveInfo.isPatch(),serveInfo.isServeOnly(),serveInfoContents)))+ ""String_Node_Str"",""String_Node_Str"");
  String url=baseUrl + ""String_Node_Str"" + createLoadCommandString(""String_Node_Str"",CommandType.LOADTEST,Arrays.asList(fileInfoToFileSource(loadInfo)));
  server.expect(url,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + createLoadedFilesResponseString() + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(loadInfo,loadInfoContents);
  fileReader.addExpectation(serveInfo,serveInfoContents);
  CommandTask task=createCommandTask(server,params,stream,fileReader,true);
  task.run(new JstdTestCase(Collections.<FileInfo>emptyList(),fileSet,java.util.Collections.<FileInfo>emptyList()));
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(null,response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(0,response.getExecutionTime());
}","public void testUploadServeOnlyFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo loadInfo=new FileInfo(""String_Node_Str"",0,-1,false,false,null);
  String loadInfoContents=""String_Node_Str"";
  FileInfo serveInfo=new FileInfo(""String_Node_Str"",0,-1,false,true,null);
  String serveInfoContents=""String_Node_Str"";
  List<FileInfo> fileSet=Arrays.asList(loadInfo,serveInfo);
  final BrowserFileSet browserFileSet=new BrowserFileSet(fileSet,Lists.<FileInfo>newArrayList());
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(loadInfo))+ ""String_Node_Str"",gson.toJson(browserFileSet));
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(fileSet)+ ""String_Node_Str"",""String_Node_Str"");
  JsonCommand cmd=new JsonCommand(CommandType.RESET,Collections.<String>emptyList());
  Map<String,String> resetParams=new LinkedHashMap<String,String>();
  resetParams.put(""String_Node_Str"",""String_Node_Str"");
  resetParams.put(""String_Node_Str"",gson.toJson(cmd));
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(new FileInfo(loadInfo.getFilePath(),loadInfo.getTimestamp(),-1,loadInfo.isPatch(),loadInfo.isServeOnly(),loadInfoContents),new FileInfo(serveInfo.getFilePath(),serveInfo.getTimestamp(),-1,serveInfo.isPatch(),serveInfo.isServeOnly(),serveInfoContents)))+ ""String_Node_Str"",""String_Node_Str"");
  String url=baseUrl + ""String_Node_Str"" + createLoadCommandString(""String_Node_Str"",CommandType.LOADTEST,Arrays.asList(fileInfoToFileSource(loadInfo)));
  server.expect(url,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + createLoadedFilesResponseString() + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(loadInfo,loadInfoContents);
  fileReader.addExpectation(serveInfo,serveInfoContents);
  CommandTask task=createCommandTask(server,params,stream,fileReader,true);
  task.run(new JstdTestCase(Collections.<FileInfo>emptyList(),fileSet,java.util.Collections.<FileInfo>emptyList()));
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(null,response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(0,response.getExecutionTime());
}",0.99791738979521
7003,"public void testDirSubstringOfOtherDir() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}","public void testDirSubstringOfOtherDir() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}",0.9935760171306208
7004,"public void testFindLongestCommonPathForOneFile() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}","public void testFindLongestCommonPathForOneFile() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}",0.9960369881109644
7005,"public void testFindLongestCommonPath() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}","public void testFindLongestCommonPath() throws Exception {
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  files.add(new FileInfo(String.format(""String_Node_Str"",PATH_SEPARATOR),-1,-1,false,false,null));
  CommonPathResolver commonPathResolver=new CommonPathResolver(files);
  assertEquals(String.format(""String_Node_Str"",PATH_SEPARATOR),commonPathResolver.resolve());
}",0.8269742679680568
7006,"public void testIsWebAddress(){
  FileInfo httpFile=new FileInfo(""String_Node_Str"",0,false,false,null);
  FileInfo httpsFile=new FileInfo(""String_Node_Str"",0,false,false,null);
  FileInfo nonWebFile=new FileInfo(""String_Node_Str"",0,false,false,null);
  assertTrue(httpFile.isWebAddress());
  assertTrue(httpsFile.isWebAddress());
  assertFalse(nonWebFile.isWebAddress());
}","public void testIsWebAddress(){
  FileInfo httpFile=new FileInfo(""String_Node_Str"",0,-1,false,false,null);
  FileInfo httpsFile=new FileInfo(""String_Node_Str"",0,-1,false,false,null);
  FileInfo nonWebFile=new FileInfo(""String_Node_Str"",0,-1,false,false,null);
  assertTrue(httpFile.isWebAddress());
  assertTrue(httpsFile.isWebAddress());
  assertFalse(nonWebFile.isWebAddress());
}",0.9880794701986756
7007,"public void testFileInfoExpired() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,false,false,null));
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",11,false,false,null));
  assertEquals(newSet,new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}","public void testFileInfoExpired() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,-1,false,false,null));
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",11,-1,false,false,null));
  assertEquals(newSet,new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}",0.990909090909091
7008,"public void testFileInfoUnChanged() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,false,false,null));
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,false,false,null));
  assertEquals(Sets.newHashSet(),new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}","public void testFileInfoUnChanged() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,-1,false,false,null));
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",10,-1,false,false,null));
  assertEquals(Sets.newHashSet(),new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}",0.9912536443148688
7009,"public void testNoFileInfo() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet();
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",11,false,false,null));
  assertEquals(newSet,new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}","public void testNoFileInfo() throws Exception {
  Set<FileInfo> oldSet=Sets.newHashSet();
  Set<FileInfo> newSet=Sets.newHashSet(new FileInfo(""String_Node_Str"",11,-1,false,false,null));
  assertEquals(newSet,new FileSetCacheStrategy().createExpiredFileSet(newSet,oldSet));
}",0.9944954128440368
7010,"FileInfo createFile(FileInfo info,long timestamp){
  return new FileInfo(info.getFilePath(),timestamp,false,false,null);
}","FileInfo createFile(FileInfo info,long timestamp){
  return new FileInfo(info.getFilePath(),timestamp,-1,false,false,null);
}",0.9878542510121456
7011,"public List<FileInfo> loadFiles(Collection<FileInfo> filesToLoad,boolean shouldReset){
  List<FileInfo> loaded=new LinkedList<FileInfo>();
  for (  FileInfo info : filesToLoad) {
    CommandTaskTest.assertTrue(""String_Node_Str"" + info + ""String_Node_Str""+ expected.keySet(),expected.containsKey(info));
    loaded.add(new FileInfo(info.getFilePath(),info.getTimestamp(),info.isPatch(),info.isServeOnly(),expected.get(info)));
  }
  return loaded;
}","public List<FileInfo> loadFiles(Collection<FileInfo> filesToLoad,boolean shouldReset){
  List<FileInfo> loaded=new LinkedList<FileInfo>();
  for (  FileInfo info : filesToLoad) {
    CommandTaskTest.assertTrue(""String_Node_Str"" + info + ""String_Node_Str""+ expected.keySet(),expected.containsKey(info));
    loaded.add(new FileInfo(info.getFilePath(),info.getTimestamp(),-1,info.isPatch(),info.isServeOnly(),expected.get(info)));
  }
  return loaded;
}",0.996662958843159
7012,"public void testLoadFilesWithPostProcessor() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,false,true,null);
  final String infoData=""String_Node_Str"";
  final boolean shouldReset=false;
  final FileInfo expected=new FileInfo(""String_Node_Str"",4321,false,true,null);
  FileLoadPostProcessor processor=new FileLoadPostProcessor(){
    public FileInfo process(    FileInfo file){
      assertEquals(infoData,file.getData());
      assertEquals(info.getFilePath(),file.getFilePath());
      assertEquals(info.getTimestamp(),file.getTimestamp());
      assertEquals(info.isServeOnly(),file.isServeOnly());
      return expected;
    }
  }
;
  List<FileInfo> actual=new ProcessingFileLoader(new FileReaderStub(infoData,info),Collections.singleton(processor),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(expected,actual.get(0));
}","public void testLoadFilesWithPostProcessor() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,-1,false,true,null);
  final String infoData=""String_Node_Str"";
  final boolean shouldReset=false;
  final FileInfo expected=new FileInfo(""String_Node_Str"",4321,-1,false,true,null);
  FileLoadPostProcessor processor=new FileLoadPostProcessor(){
    public FileInfo process(    FileInfo file){
      assertEquals(infoData,file.getData());
      assertEquals(info.getFilePath(),file.getFilePath());
      assertEquals(info.getTimestamp(),file.getTimestamp());
      assertEquals(info.isServeOnly(),file.isServeOnly());
      return expected;
    }
  }
;
  List<FileInfo> actual=new ProcessingFileLoader(new FileReaderStub(infoData,info),Collections.singleton(processor),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(expected,actual.get(0));
}",0.9968684759916492
7013,"public void testRemoteLoadFiles() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",-1,false,false,""String_Node_Str"");
  final boolean shouldReset=false;
  List<FileInfo> actual=new ProcessingFileLoader(null,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(""String_Node_Str"",actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}","public void testRemoteLoadFiles() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",-1,-1,false,false,""String_Node_Str"");
  final boolean shouldReset=false;
  List<FileInfo> actual=new ProcessingFileLoader(null,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(""String_Node_Str"",actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}",0.9977324263038548
7014,"public void testLoadFiles() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,false,true,null);
  final String infoData=""String_Node_Str"";
  final boolean shouldReset=false;
  List<FileInfo> actual=new ProcessingFileLoader(new FileReader(){
    public String readFile(    String file){
      assertEquals(info.getAbsoluteFileName(new File(""String_Node_Str"")),file);
      return infoData;
    }
  }
,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(infoData,actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}","public void testLoadFiles() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,-1,false,true,null);
  final String infoData=""String_Node_Str"";
  final boolean shouldReset=false;
  List<FileInfo> actual=new ProcessingFileLoader(new FileReader(){
    public String readFile(    String file){
      assertEquals(info.getAbsoluteFileName(new File(""String_Node_Str"")),file);
      return infoData;
    }
  }
,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(infoData,actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}",0.998234255444379
7015,"public void testLoadFileWithPatches() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,false,true,null);
  FileInfo patch=new FileInfo(""String_Node_Str"",1234,false,true,null);
  info.addPatch(patch);
  final String infoData=""String_Node_Str"";
  final String patchData=""String_Node_Str"";
  final boolean shouldReset=false;
  MockFileReader mockFileReader=new MockFileReader();
  mockFileReader.expected(info.getAbsoluteFileName(new File(""String_Node_Str"")),infoData).expected(patch.getAbsoluteFileName(new File(""String_Node_Str"")),patchData);
  List<FileInfo> actual=new ProcessingFileLoader(mockFileReader,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(infoData + patchData,actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}","public void testLoadFileWithPatches() throws Exception {
  final FileInfo info=new FileInfo(""String_Node_Str"",1234,-1,false,true,null);
  FileInfo patch=new FileInfo(""String_Node_Str"",1234,-1,false,true,null);
  info.addPatch(patch);
  final String infoData=""String_Node_Str"";
  final String patchData=""String_Node_Str"";
  final boolean shouldReset=false;
  MockFileReader mockFileReader=new MockFileReader();
  mockFileReader.expected(info.getAbsoluteFileName(new File(""String_Node_Str"")),infoData).expected(patch.getAbsoluteFileName(new File(""String_Node_Str"")),patchData);
  List<FileInfo> actual=new ProcessingFileLoader(mockFileReader,Collections.<FileLoadPostProcessor>emptySet(),new File(""String_Node_Str""),new com.google.jstestdriver.util.NullStopWatch()).loadFiles(Collections.singleton(info),shouldReset);
  assertEquals(infoData + patchData,actual.get(0).getData());
  assertEquals(info.getFilePath(),actual.get(0).getFilePath());
  assertEquals(info.getTimestamp(),actual.get(0).getTimestamp());
  assertEquals(info.isServeOnly(),actual.get(0).isServeOnly());
}",0.997196261682243
7016,"public void testConvertRelativePathFromBaseDir() throws Exception {
  String baseDir=""String_Node_Str"";
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(""String_Node_Str"",-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,false,false,null));
  RelativePathConverter relativePathConverter=new RelativePathConverter(baseDir,files);
  List<FileInfo> relativePaths=relativePathConverter.convert();
  assertEquals(4,relativePaths.size());
  assertEquals(""String_Node_Str"",relativePaths.get(0).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(1).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(2).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(3).getFilePath());
}","public void testConvertRelativePathFromBaseDir() throws Exception {
  String baseDir=""String_Node_Str"";
  List<FileInfo> files=Lists.newLinkedList();
  files.add(new FileInfo(""String_Node_Str"",-1,-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,-1,false,false,null));
  files.add(new FileInfo(""String_Node_Str"",-1,-1,false,false,null));
  RelativePathConverter relativePathConverter=new RelativePathConverter(baseDir,files);
  List<FileInfo> relativePaths=relativePathConverter.convert();
  assertEquals(4,relativePaths.size());
  assertEquals(""String_Node_Str"",relativePaths.get(0).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(1).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(2).getFilePath());
  assertEquals(""String_Node_Str"",relativePaths.get(3).getFilePath());
}",0.8521836506159015
7017,"public Set<FileInfo> process(Set<FileInfo> files){
  Set<FileInfo> processed=Sets.newHashSet();
  for (  FileInfo fileInfo : files) {
    processed.add(new FileInfo(fileInfo.getFilePath(),code.lastModified(),false,true,null));
  }
  return processed;
}","public Set<FileInfo> process(Set<FileInfo> files){
  Set<FileInfo> processed=Sets.newHashSet();
  for (  FileInfo fileInfo : files) {
    processed.add(new FileInfo(fileInfo.getFilePath(),code.lastModified(),-1,false,true,null));
  }
  return processed;
}",0.9940828402366864
7018,"public void testParseConfigFileAndProcessAListOfFiles() throws Exception {
  File codeDir=createTmpSubDir(""String_Node_Str"");
  final String fileName=""String_Node_Str"";
  final File code=createTmpFile(codeDir,fileName);
  String configFile=""String_Node_Str"";
  ByteArrayInputStream bais=new ByteArrayInputStream(configFile.getBytes());
  YamlParser parser=new YamlParser();
  Configuration config=parser.parse(new InputStreamReader(bais)).resolvePaths(new PathResolver(tmpDir,Sets.<FileParsePostProcessor>newHashSet(new FileParsePostProcessor(){
    public Set<FileInfo> process(    Set<FileInfo> files){
      Set<FileInfo> processed=Sets.newHashSet();
      for (      FileInfo fileInfo : files) {
        processed.add(new FileInfo(fileInfo.getFilePath(),code.lastModified(),false,true,null));
      }
      return processed;
    }
  }
)),createFlags());
  Set<FileInfo> files=config.getFilesList();
  List<FileInfo> listFiles=new ArrayList<FileInfo>(files);
  assertEquals(1,files.size());
  assertTrue(listFiles.get(0).getFilePath().endsWith(""String_Node_Str""));
  assertTrue(listFiles.get(0).isServeOnly());
}","public void testParseConfigFileAndProcessAListOfFiles() throws Exception {
  File codeDir=createTmpSubDir(""String_Node_Str"");
  final String fileName=""String_Node_Str"";
  final File code=createTmpFile(codeDir,fileName);
  String configFile=""String_Node_Str"";
  ByteArrayInputStream bais=new ByteArrayInputStream(configFile.getBytes());
  YamlParser parser=new YamlParser();
  Configuration config=parser.parse(new InputStreamReader(bais)).resolvePaths(new PathResolver(tmpDir,Sets.<FileParsePostProcessor>newHashSet(new FileParsePostProcessor(){
    public Set<FileInfo> process(    Set<FileInfo> files){
      Set<FileInfo> processed=Sets.newHashSet();
      for (      FileInfo fileInfo : files) {
        processed.add(new FileInfo(fileInfo.getFilePath(),code.lastModified(),-1,false,true,null));
      }
      return processed;
    }
  }
)),createFlags());
  Set<FileInfo> files=config.getFilesList();
  List<FileInfo> listFiles=new ArrayList<FileInfo>(files);
  assertEquals(1,files.size());
  assertTrue(listFiles.get(0).getFilePath().endsWith(""String_Node_Str""));
  assertTrue(listFiles.get(0).isServeOnly());
}",0.9986565158978952
7019,"public void testSkipInstrument() throws Exception {
  FileInfo lcov=new FileInfo(""String_Node_Str"",0,true,false,""String_Node_Str"");
  FileInfo serveOnly=new FileInfo(""String_Node_Str"",0,true,true,""String_Node_Str"");
  FileInfo excluded=new FileInfo(""String_Node_Str"",0,true,false,""String_Node_Str"");
  FileInfo remote=new FileInfo(""String_Node_Str"",0,true,false,null);
  CoverageInstrumentingProcessor processor=new CoverageInstrumentingProcessor(null,Sets.<String>newHashSet(excluded.getFilePath()),null);
  assertSame(lcov,processor.process(lcov));
  assertSame(serveOnly,processor.process(serveOnly));
  assertSame(remote,processor.process(remote));
  assertSame(excluded,processor.process(excluded));
}","public void testSkipInstrument() throws Exception {
  FileInfo lcov=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo serveOnly=new FileInfo(""String_Node_Str"",0,-1,true,true,""String_Node_Str"");
  FileInfo excluded=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  FileInfo remote=new FileInfo(""String_Node_Str"",0,-1,true,false,null);
  CoverageInstrumentingProcessor processor=new CoverageInstrumentingProcessor(null,Sets.<String>newHashSet(excluded.getFilePath()),null);
  assertSame(lcov,processor.process(lcov));
  assertSame(serveOnly,processor.process(serveOnly));
  assertSame(remote,processor.process(remote));
  assertSame(excluded,processor.process(excluded));
}",0.9915730337078652
7020,"public void testInstrument() throws Exception {
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",0,true,false,""String_Node_Str"");
  String expected=""String_Node_Str"";
  Code code=new Code(fileInfo.getFilePath(),fileInfo.getData());
  CoverageAccumulator accumulator=new CoverageAccumulator();
  FileInfo decorated=new CoverageInstrumentingProcessor(new DecoratorStub(expected,code),Collections.<String>emptySet(),accumulator).process(fileInfo);
  assertEquals(expected,decorated.getData());
  assertEquals(fileInfo.getFilePath(),decorated.getFilePath());
  assertEquals(fileInfo.getTimestamp(),decorated.getTimestamp());
  assertEquals(fileInfo.isServeOnly(),decorated.isServeOnly());
}","public void testInstrument() throws Exception {
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",0,-1,true,false,""String_Node_Str"");
  String expected=""String_Node_Str"";
  Code code=new Code(fileInfo.getFilePath(),fileInfo.getData());
  CoverageAccumulator accumulator=new CoverageAccumulator();
  FileInfo decorated=new CoverageInstrumentingProcessor(new DecoratorStub(expected,code),Collections.<String>emptySet(),accumulator).process(fileInfo);
  assertEquals(expected,decorated.getData());
  assertEquals(fileInfo.getFilePath(),decorated.getFilePath());
  assertEquals(fileInfo.getTimestamp(),decorated.getTimestamp());
  assertEquals(fileInfo.isServeOnly(),decorated.isServeOnly());
}",0.997824510514866
7021,"public void testAddJs() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processDependencies(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
}","public void testAddJs() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
}",0.9808773903262092
7022,"public void testAddJsWithExistingFiles() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  FileInfo expected=new FileInfo(""String_Node_Str"",1,false,false,null);
  files.add(expected);
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processDependencies(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
  assertSame(expected,processed.get(1));
}","public void testAddJsWithExistingFiles() throws Exception {
  LinkedList<FileInfo> files=new LinkedList<FileInfo>();
  FileInfo expected=new FileInfo(""String_Node_Str"",1,-1,false,false,null);
  files.add(expected);
  String lcovSource=""String_Node_Str"";
  List<FileInfo> processed=new CoverageJsAdder(new FileLoaderStub(lcovSource)).processPlugins(files);
  FileInfo lcov=processed.get(0);
  assertEquals(new LoadedFileInfo(CoverageJsAdder.LCOV_JS,-1,false,false,lcovSource),lcov);
  assertEquals(lcovSource,lcov.getData());
  assertFalse(lcov.canLoad());
  assertSame(expected,processed.get(1));
}",0.98330550918197
7023,"private void doScriptTest(ScriptBuilder script){
  FileInfo test=new FileInfo(""String_Node_Str"",20,false,false,script.buildTest());
  FileInfo expected=new FileInfo(test.getFilePath(),test.getTimestamp(),test.isPatch(),test.isServeOnly(),script.buildExpect());
  FileInfo actual=new InlineHtmlProcessor(new HtmlDocParser(),new HtmlDocLexer()).process(test);
  assertEquals(expected.getFilePath(),actual.getFilePath());
  assertEquals(expected.getTimestamp(),actual.getTimestamp());
  assertEquals(expected.isPatch(),actual.isPatch());
  assertEquals(expected.isServeOnly(),actual.isServeOnly());
  assertEquals(expected.getData(),actual.getData());
}","private void doScriptTest(ScriptBuilder script){
  FileInfo test=new FileInfo(""String_Node_Str"",20,-1,false,false,script.buildTest());
  FileInfo expected=new FileInfo(test.getFilePath(),test.getTimestamp(),-1,test.isPatch(),test.isServeOnly(),script.buildExpect());
  FileInfo actual=new InlineHtmlProcessor(new HtmlDocParser(),new HtmlDocLexer()).process(test);
  assertEquals(expected.getFilePath(),actual.getFilePath());
  assertEquals(expected.getTimestamp(),actual.getTimestamp());
  assertEquals(expected.isPatch(),actual.isPatch());
  assertEquals(expected.isServeOnly(),actual.isServeOnly());
  assertEquals(expected.getData(),actual.getData());
}",0.9954058192955588
7024,"public void testCreateWithTests() throws Exception {
  List<FileInfo> files=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,false,false,null);
  files.add(one);
  files.add(two);
  files.add(three);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,false,false,null);
  List<FileInfo> tests=Lists.newArrayList(testOne,testTwo,testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),files,tests);
  assertEquals(1,testCases.size());
  JstdTestCase jstdTestCase=testCases.get(0);
  assertEquals(tests,jstdTestCase.getTests());
  assertEquals(Lists.newArrayList(files),jstdTestCase.getDependencies());
}","public void testCreateWithTests() throws Exception {
  List<FileInfo> files=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  files.add(one);
  files.add(two);
  files.add(three);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  List<FileInfo> tests=Lists.newArrayList(testOne,testTwo,testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),files,tests);
  assertEquals(1,testCases.size());
  JstdTestCase jstdTestCase=testCases.get(0);
  assertEquals(tests,jstdTestCase.getTests());
  assertEquals(Lists.newArrayList(files),jstdTestCase.getDependencies());
}",0.992153443766347
7025,"public void testCreateWithOutTests() throws Exception {
  List<FileInfo> fileSet=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,false,false,null);
  fileSet.add(one);
  fileSet.add(two);
  fileSet.add(three);
  fileSet.add(testOne);
  fileSet.add(testTwo);
  fileSet.add(testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),fileSet,Lists.<FileInfo>newArrayList());
  assertEquals(1,testCases.size());
  JstdTestCase jstdTestCase=testCases.get(0);
  assertTrue(jstdTestCase.getTests().isEmpty());
  assertEquals(Lists.newArrayList(fileSet),jstdTestCase.getDependencies());
}","public void testCreateWithOutTests() throws Exception {
  List<FileInfo> fileSet=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  fileSet.add(one);
  fileSet.add(two);
  fileSet.add(three);
  fileSet.add(testOne);
  fileSet.add(testTwo);
  fileSet.add(testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),fileSet,Lists.<FileInfo>newArrayList());
  assertEquals(1,testCases.size());
  JstdTestCase jstdTestCase=testCases.get(0);
  assertTrue(jstdTestCase.getTests().isEmpty());
  assertEquals(Lists.newArrayList(fileSet),jstdTestCase.getDependencies());
}",0.9924559932942164
7026,"public void testUpdateTestCasesFromRunData() throws Exception {
  FileInfo plugin=new FileInfo(""String_Node_Str"",1234,false,false,null);
  List<FileInfo> files=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,false,false,null);
  files.add(one);
  files.add(two);
  files.add(three);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,false,false,null);
  List<FileInfo> tests=Lists.newArrayList(testOne,testTwo,testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  final List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),files,tests);
  final Set<FileInfo> fileSet=new RunData(null,testCases,null).getFileSet();
  final Set<FileInfo> updatedFileSet=Sets.newLinkedHashSet();
  updatedFileSet.add(plugin);
  updatedFileSet.addAll(fileSet);
  List<JstdTestCase> updatedTestCases=testCaseFactory.updateCases(updatedFileSet,testCases);
  assertEquals(1,updatedTestCases.size());
  JstdTestCase jstdTestCase=updatedTestCases.get(0);
  assertEquals(tests,jstdTestCase.getTests());
  final List<FileInfo> expected=Lists.newArrayList(plugin);
  expected.addAll(files);
  assertEquals(expected,jstdTestCase.getDependencies());
}","public void testUpdateTestCasesFromRunData() throws Exception {
  FileInfo plugin=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  List<FileInfo> files=Lists.newArrayList();
  FileInfo one=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo two=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo three=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  files.add(one);
  files.add(two);
  files.add(three);
  FileInfo testOne=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testTwo=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  FileInfo testThree=new FileInfo(""String_Node_Str"",1234,-1,false,false,null);
  List<FileInfo> tests=Lists.newArrayList(testOne,testTwo,testThree);
  final JstdTestCaseFactory testCaseFactory=new JstdTestCaseFactory(Collections.<JstdTestCaseProcessor>emptySet(),Collections.<ResourceDependencyResolver>emptySet());
  final List<JstdTestCase> testCases=testCaseFactory.createCases(Collections.<FileInfo>emptyList(),files,tests);
  final Set<FileInfo> fileSet=new RunData(null,testCases,null).getFileSet();
  final Set<FileInfo> updatedFileSet=Sets.newLinkedHashSet();
  updatedFileSet.add(plugin);
  updatedFileSet.addAll(fileSet);
  List<JstdTestCase> updatedTestCases=testCaseFactory.updateCases(updatedFileSet,testCases);
  assertEquals(1,updatedTestCases.size());
  JstdTestCase jstdTestCase=updatedTestCases.get(0);
  assertEquals(tests,jstdTestCase.getTests());
  final List<FileInfo> expected=Lists.newArrayList(plugin);
  expected.addAll(files);
  assertEquals(expected,jstdTestCase.getDependencies());
}",0.9935085007727976
7027,"public void testFileCache() throws IOException, ServletException {
  HttpServletRequest request=EasyMock.createMock(HttpServletRequest.class);
  HttpServletResponse response=EasyMock.createMock(HttpServletResponse.class);
  FileCacheHandler handler=new FileCacheHandler(request,response);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintWriter writer=new PrintWriter(out);
  FileInfo info=new FileInfo(""String_Node_Str"",1,false,true,""String_Node_Str"");
  EasyMock.expect(request.getParameter(""String_Node_Str"")).andReturn(gson.toJson(new FileInfo[]{info}));
  EasyMock.expect(response.getWriter()).andReturn(writer);
  EasyMock.replay(request,response);
  handler.handleIt();
  writer.flush();
  Collection<FileInfo> infos=gson.fromJson(out.toString(),new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  assertEquals(info,infos.iterator().next());
  EasyMock.verify(request,response);
}","public void testFileCache() throws IOException, ServletException {
  HttpServletRequest request=EasyMock.createMock(HttpServletRequest.class);
  HttpServletResponse response=EasyMock.createMock(HttpServletResponse.class);
  FileCacheHandler handler=new FileCacheHandler(request,response,new Gson(),new HashSet<FileInfo>(),new FileSetCacheStrategy());
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintWriter writer=new PrintWriter(out);
  FileInfo info=new FileInfo(""String_Node_Str"",1,false,true,""String_Node_Str"");
  EasyMock.expect(request.getParameter(""String_Node_Str"")).andReturn(gson.toJson(new FileInfo[]{info}));
  EasyMock.expect(response.getWriter()).andReturn(writer);
  EasyMock.replay(request,response);
  handler.handleIt();
  writer.flush();
  Collection<FileInfo> infos=gson.fromJson(out.toString(),new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  assertEquals(info,infos.iterator().next());
  EasyMock.verify(request,response);
}",0.966986155484558
7028,"@Inject public FileCacheHandler(HttpServletRequest request,HttpServletResponse response){
  this.request=request;
  this.response=response;
}","@Inject public FileCacheHandler(HttpServletRequest request,HttpServletResponse response,Gson gson,Set<FileInfo> currentFiles,FileSetCacheStrategy strategy){
  this.request=request;
  this.response=response;
  this.gson=gson;
  this.currentFiles=currentFiles;
  this.strategy=strategy;
}",0.6604215456674473
7029,"@Override protected void configureHandlers(){
  serve(GET,""String_Node_Str"",HomeHandler.class);
  serve(POST,""String_Node_Str"",FileCacheHandler.class);
  serve(GET,""String_Node_Str"",CaptureHandler.class);
  serve(GET,""String_Node_Str"",CaptureHandler.class);
  serve(GET,""String_Node_Str"",CommandGetHandler.class);
  serve(POST,""String_Node_Str"",CommandPostHandler.class);
  serve(GET,""String_Node_Str"",FaviconHandler.class);
  serve(GET,""String_Node_Str"",FileSetGetHandler.class);
  serve(POST,""String_Node_Str"",FileSetPostHandler.class);
  serve(GET,""String_Node_Str"",HeartbeatGetHandler.class);
  serve(POST,""String_Node_Str"",HeartbeatPostHandler.class);
  serve(GET,""String_Node_Str"",AuthHandler.class);
  if (destination != null) {
    serve(GET,""String_Node_Str"",ProxyRequestHandler.class);
    serve(POST,""String_Node_Str"",ProxyRequestHandler.class);
  }
  serve(GET,""String_Node_Str"",HelloHandler.class);
  serve(POST,""String_Node_Str"",BrowserLoggingHandler.class);
  serve(POST,""String_Node_Str"",BrowserQueryResponseHandler.class);
  serve(GET,""String_Node_Str"",StandaloneRunnerHandler.class);
  serve(GET,""String_Node_Str"",SlaveResourceHandler.class);
  serve(GET,""String_Node_Str"",TestResourceHandler.class);
  bindConstant().annotatedWith(BaseResourceLocation.class).to(SlaveResourceService.RESOURCE_LOCATION);
  bindConstant().annotatedWith(BrowserTimeout.class).to(browserTimeout);
  bind(CapturedBrowsers.class).toInstance(capturedBrowsers);
  bind(FilesCache.class).toInstance(filesCache);
  bind(ForwardingMapper.class).toInstance(forwardingMapper);
  bind(new Key<ConcurrentMap<SlaveBrowser,List<String>>>(){
  }
).toInstance(new ConcurrentHashMap<SlaveBrowser,List<String>>());
  bind(new Key<ConcurrentMap<SlaveBrowser,Thread>>(){
  }
).toInstance(new ConcurrentHashMap<SlaveBrowser,Thread>());
  bind(new Key<Set<AuthStrategy>>(){
  }
).toInstance(authStrategies);
  bind(ServletConfig.class).annotatedWith(ProxyConfig.class).to(ProxyServletConfig.class);
  bind(StandaloneRunnerFilesFilter.class).to(StandaloneRunnerFilesFilterImpl.class);
  bind(URLTranslator.class).toInstance(urlTranslator);
  bind(URLRewriter.class).toInstance(urlRewriter);
}","@Override protected void configureHandlers(){
  serve(GET,""String_Node_Str"",HomeHandler.class);
  serve(POST,""String_Node_Str"",FileCacheHandler.class);
  serve(GET,""String_Node_Str"",CaptureHandler.class);
  serve(GET,""String_Node_Str"",CaptureHandler.class);
  serve(GET,""String_Node_Str"",CommandGetHandler.class);
  serve(POST,""String_Node_Str"",CommandPostHandler.class);
  serve(GET,""String_Node_Str"",FaviconHandler.class);
  serve(GET,""String_Node_Str"",FileSetGetHandler.class);
  serve(POST,""String_Node_Str"",FileSetPostHandler.class);
  serve(GET,""String_Node_Str"",HeartbeatGetHandler.class);
  serve(POST,""String_Node_Str"",HeartbeatPostHandler.class);
  serve(GET,""String_Node_Str"",AuthHandler.class);
  if (destination != null) {
    serve(GET,""String_Node_Str"",ProxyRequestHandler.class);
    serve(POST,""String_Node_Str"",ProxyRequestHandler.class);
  }
  serve(GET,""String_Node_Str"",HelloHandler.class);
  serve(POST,""String_Node_Str"",BrowserLoggingHandler.class);
  serve(POST,""String_Node_Str"",BrowserQueryResponseHandler.class);
  serve(GET,""String_Node_Str"",StandaloneRunnerHandler.class);
  serve(GET,""String_Node_Str"",SlaveResourceHandler.class);
  serve(GET,""String_Node_Str"",TestResourceHandler.class);
  bindConstant().annotatedWith(BaseResourceLocation.class).to(SlaveResourceService.RESOURCE_LOCATION);
  bindConstant().annotatedWith(BrowserTimeout.class).to(browserTimeout);
  bind(CapturedBrowsers.class).toInstance(capturedBrowsers);
  bind(FilesCache.class).toInstance(filesCache);
  bind(ForwardingMapper.class).toInstance(forwardingMapper);
  bind(new Key<ConcurrentMap<SlaveBrowser,List<String>>>(){
  }
).toInstance(new ConcurrentHashMap<SlaveBrowser,List<String>>());
  bind(new Key<ConcurrentMap<SlaveBrowser,Thread>>(){
  }
).toInstance(new ConcurrentHashMap<SlaveBrowser,Thread>());
  bind(new Key<Set<AuthStrategy>>(){
  }
).toInstance(authStrategies);
  bind(new Key<Set<FileInfo>>(){
  }
).toInstance(new HashSet<FileInfo>());
  bind(ServletConfig.class).annotatedWith(ProxyConfig.class).to(ProxyServletConfig.class);
  bind(StandaloneRunnerFilesFilter.class).to(StandaloneRunnerFilesFilterImpl.class);
  bind(URLTranslator.class).toInstance(urlTranslator);
  bind(URLRewriter.class).toInstance(urlRewriter);
}",0.9827742520398912
7030,"public void removeSlave(String id){
  slaves.remove(id);
}","public void removeSlave(String id){
  SlaveBrowser slave=slaves.remove(id);
  setChanged();
  notifyObservers(new BrowserCaptureEvent(Event.DISCONNECTED,slave));
}",0.5248868778280543
7031,"public void addSlave(SlaveBrowser slave){
  slaves.put(slave.getId(),slave);
  setChanged();
  notifyObservers(slave);
}","public void addSlave(SlaveBrowser slave){
  slaves.put(slave.getId(),slave);
  setChanged();
  notifyObservers(new BrowserCaptureEvent(Event.CONNECTED,slave));
}",0.8540925266903915
7032,"public void update(Observable o,Object arg){
  SlaveBrowser browser=(SlaveBrowser)arg;
  locks.put(browser.getId(),new Lock());
}","public void update(Observable o,Object arg){
  BrowserCaptureEvent captureEvent=(BrowserCaptureEvent)arg;
  if (captureEvent.event == Event.CONNECTED) {
    locks.put(captureEvent.getBrowser().getId(),new Lock());
  }
}",0.4482758620689655
7033,"public static void main(String[] args) throws IOException {
  String serverURL=args[0];
  String settingsFile=args[1];
  int port=Integer.parseInt(args[2]);
  Socket socket=new Socket();
  int retries=RETRIES;
  do {
    try {
      socket.connect(new InetSocketAddress(InetAddress.getLocalHost(),port),TIMEOUT_MILLIS);
      break;
    }
 catch (    ConnectException e) {
      retries--;
    }
  }
 while (retries > 0);
  new TestRunner(serverURL,settingsFile,new File(""String_Node_Str""),new ObjectOutputStream(socket.getOutputStream())).execute();
}","public static void main(String[] args) throws IOException {
  String serverURL=args[0];
  String settingsFile=args[1];
  int port=Integer.parseInt(args[2]);
  Socket socket=new Socket();
  int retries=RETRIES;
  do {
    try {
      socket.connect(new InetSocketAddress(InetAddress.getLocalHost(),port),TIMEOUT_MILLIS);
      break;
    }
 catch (    SocketException e) {
      retries--;
    }
  }
 while (retries > 0);
  new TestRunner(serverURL,settingsFile,new File(""String_Node_Str""),new ObjectOutputStream(socket.getOutputStream())).execute();
}",0.9900271985494108
7034,"public void update(Observable observable,Object o){
  SlaveBrowser slave=(SlaveBrowser)o;
  if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    firefoxLabel.setIcon(firefox.getColorIcon());
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    chromeLabel.setIcon(chrome.getColorIcon());
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    operaLabel.setIcon(opera.getColorIcon());
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    safariLabel.setIcon(safari.getColorIcon());
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    ieLabel.setIcon(ie.getColorIcon());
  }
}","public void update(Observable observable,Object o){
  BrowserCaptureEvent captureEvent=(BrowserCaptureEvent)o;
  SlaveBrowser slave=captureEvent.getBrowser();
  if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    firefoxLabel.setIcon(firefox.getIconForEvent(captureEvent.event));
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    chromeLabel.setIcon(chrome.getIconForEvent(captureEvent.event));
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    operaLabel.setIcon(opera.getIconForEvent(captureEvent.event));
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    safariLabel.setIcon(safari.getIconForEvent(captureEvent.event));
  }
 else   if (slave.getBrowserInfo().getName().contains(""String_Node_Str"")) {
    ieLabel.setIcon(ie.getIconForEvent(captureEvent.event));
  }
}",0.8072139303482587
7035,"public void update(Observable observable,Object event){
  if (observable instanceof JsTestDriverServer) {
switch ((JsTestDriverServer.Event)event) {
case STARTED:
      setStatus(Status.NO_BROWSERS);
    break;
case STOPPED:
  setStatus(Status.NOT_RUNNING);
break;
}
}
 else if (observable instanceof CapturedBrowsers) {
setStatus(Status.READY);
}
}","public void update(Observable observable,Object event){
  if (observable instanceof JsTestDriverServer) {
switch ((JsTestDriverServer.Event)event) {
case STARTED:
      setStatus(Status.NO_BROWSERS);
    break;
case STOPPED:
  setStatus(Status.NOT_RUNNING);
break;
}
}
 else if (observable instanceof CapturedBrowsers) {
if (((CapturedBrowsers)observable).getBrowsers().isEmpty()) {
setStatus(Status.NO_BROWSERS);
}
 else {
setStatus(Status.READY);
}
}
}",0.8692403486924035
7036,"/** 
 * Add the Browser startup and shutdown actions to the actions stack. 
 */
private void addBrowserControlActions(List<Action> actions){
  if (!browsers.isEmpty()) {
    BrowserStartupAction browserStartupAction=new BrowserStartupAction(browsers,remoteServerAddress,new SimpleProcessFactory(),new CountDownLatch(browsers.size()));
    capturedBrowsers.addObserver(browserStartupAction);
    actions.add(0,browserStartupAction);
    actions.add(new BrowserShutdownAction(browserStartupAction));
  }
}","/** 
 * Add the Browser startup and shutdown actions to the actions stack. 
 */
private void addBrowserControlActions(List<Action> actions){
  if (!browsers.isEmpty()) {
    BrowserStartupAction browserStartupAction=new BrowserStartupAction(browsers,remoteServerAddress,new SimpleProcessFactory(),new CountDownLatch(browsers.size()));
    capturedBrowsers.addObserver(browserStartupAction);
    actions.add(0,browserStartupAction);
    if (!leaveServerRunning()) {
      actions.add(new BrowserShutdownAction(browserStartupAction));
    }
  }
}",0.9608404966571156
7037,"@Override public void finished(){
  client=(Socket)getValue();
  try {
    in=new ObjectInputStream(client.getInputStream());
    while (true) {
      try {
        TestResultProtocolMessage message=(TestResultProtocolMessage)in.readObject();
        if (message.isDryRun()) {
          onTestStarted(message);
        }
 else {
          onTestFinished(message);
        }
      }
 catch (      EOFException e) {
        break;
      }
catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void finished(){
  final Socket client=(Socket)getValue();
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(client.getInputStream());
    while (true) {
      try {
        TestResultProtocolMessage message=(TestResultProtocolMessage)in.readObject();
        if (message.isDryRun()) {
          onTestStarted(message);
        }
 else {
          onTestFinished(message);
        }
      }
 catch (      EOFException e) {
        break;
      }
catch (      ClassNotFoundException e) {
        throw new RuntimeException(e);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    resultsLatch.countDown();
    try {
      if (client != null) {
        client.close();
      }
      if (in != null) {
        in.close();
      }
    }
 catch (    IOException e) {
    }
  }
}",0.8266850068775791
7038,"public void listen(final int port){
  SwingWorker worker=new SwingWorker(){
    public Object construct(){
      try {
        socket=new ServerSocket(port);
        return socket.accept();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void finished(){
      client=(Socket)getValue();
      try {
        in=new ObjectInputStream(client.getInputStream());
        while (true) {
          try {
            TestResultProtocolMessage message=(TestResultProtocolMessage)in.readObject();
            if (message.isDryRun()) {
              onTestStarted(message);
            }
 else {
              onTestFinished(message);
            }
          }
 catch (          EOFException e) {
            break;
          }
catch (          ClassNotFoundException e) {
            throw new RuntimeException(e);
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  worker.start();
}","public void listen(final int port){
  SwingWorker worker=new SwingWorker(){
    public Object construct(){
      try {
        socket=new ServerSocket(port);
        return socket.accept();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void finished(){
      final Socket client=(Socket)getValue();
      ObjectInputStream in=null;
      try {
        in=new ObjectInputStream(client.getInputStream());
        while (true) {
          try {
            TestResultProtocolMessage message=(TestResultProtocolMessage)in.readObject();
            if (message.isDryRun()) {
              onTestStarted(message);
            }
 else {
              onTestFinished(message);
            }
          }
 catch (          EOFException e) {
            break;
          }
catch (          ClassNotFoundException e) {
            throw new RuntimeException(e);
          }
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
 finally {
        resultsLatch.countDown();
        try {
          if (client != null) {
            client.close();
          }
          if (in != null) {
            in.close();
          }
        }
 catch (        IOException e) {
        }
      }
    }
  }
;
  worker.start();
}",0.8699397071490095
7039,"public void shutdown(){
  try {
    if (socket != null) {
      socket.close();
    }
    if (client != null) {
      client.close();
    }
    if (in != null) {
      in.close();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public void shutdown(){
  try {
    resultsLatch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (socket != null) {
    try {
      socket.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",0.5365853658536586
7040,"private Set<FileInfo> resolveFiles(List<String> files,boolean serveOnly){
  if (files != null) {
    Set<FileInfo> resolvedFiles=new LinkedHashSet<FileInfo>();
    for (    String f : files) {
      f=pathRewriter.rewrite(f);
      boolean isPatch=f.startsWith(""String_Node_Str"");
      if (isPatch) {
        String[] tokens=f.split(""String_Node_Str"",2);
        f=tokens[1].trim();
      }
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(new FileInfo(f,-1,false,false,null));
      }
 else {
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File testFile=file.getAbsoluteFile();
        File dir=testFile.getParentFile().getAbsoluteFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null || filteredFiles.length == 0) {
          String error=""String_Node_Str"" + f + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
          System.err.println(error);
          throw new RuntimeException(error);
        }
        Arrays.sort(filteredFiles,String.CASE_INSENSITIVE_ORDER);
        for (        String filteredFile : filteredFiles) {
          String resolvedFilePath=pathResolver.resolvePath(dir.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str""));
          File resolvedFile=new File(resolvedFilePath);
          resolvedFiles.add(new FileInfo(resolvedFilePath,resolvedFile.lastModified(),isPatch,serveOnly,null));
        }
      }
    }
    return resolvedFiles;
  }
  return Collections.emptySet();
}","private Set<FileInfo> resolveFiles(List<String> files,boolean serveOnly){
  if (files != null) {
    Set<FileInfo> resolvedFiles=new LinkedHashSet<FileInfo>();
    for (    String f : files) {
      f=pathRewriter.rewrite(f);
      boolean isPatch=f.startsWith(""String_Node_Str"");
      if (isPatch) {
        String[] tokens=f.split(""String_Node_Str"",2);
        f=tokens[1].trim();
      }
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(new FileInfo(f,-1,false,false,null));
      }
 else {
        File file=basePath != null ? new File(basePath.getAbsoluteFile(),f) : new File(f);
        File testFile=file.getAbsoluteFile();
        File dir=testFile.getParentFile().getAbsoluteFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null || filteredFiles.length == 0) {
          String error=""String_Node_Str"" + f + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
          System.err.println(error);
          throw new RuntimeException(error);
        }
        Arrays.sort(filteredFiles,String.CASE_INSENSITIVE_ORDER);
        for (        String filteredFile : filteredFiles) {
          String resolvedFilePath=pathResolver.resolvePath(dir.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str""));
          File resolvedFile=new File(resolvedFilePath);
          resolvedFiles.add(new FileInfo(resolvedFilePath,resolvedFile.lastModified(),isPatch,serveOnly,null));
        }
      }
    }
    return resolvedFiles;
  }
  return Collections.emptySet();
}",0.9949466591802358
7041,"public void close(){
  if (browsers.decrementAndGet() == 0) {
    out.println(String.format(""String_Node_Str"",(totalPasses.get() + totalFails.get() + totalErrors.get()),totalPasses.get(),totalFails.get(),totalErrors.get(),findMaxTime()));
    StringBuilder output=new StringBuilder();
    for (    Map.Entry<String,RunData> entry : browsersRunData.entrySet()) {
      RunData data=entry.getValue();
      out.println(String.format(""String_Node_Str"",entry.getKey(),(data.getPassed() + data.getFailed() + data.getErrors()),data.getPassed(),data.getFailed(),data.getErrors(),data.getTotalTime()));
      List<TestResult> problems=data.getProblems();
      for (      TestResult testResult : problems) {
        output.append(testResult.getLog() + NEW_LINE);
      }
    }
    if (output.length() > 0) {
      serializer.addOutput(output.toString());
    }
  }
  serializer.endTestSuite();
}","public void close(){
  if (browsers.decrementAndGet() == 0) {
    out.println(String.format(""String_Node_Str"",getTotalRan(),getTotalPassed(),getTotalFailed(),getTotalErrors(),findMaxTime()));
    StringBuilder output=new StringBuilder();
    for (    Map.Entry<String,RunData> entry : browsersRunData.entrySet()) {
      RunData data=entry.getValue();
      out.println(String.format(""String_Node_Str"",entry.getKey(),(data.getPassed() + data.getFailed() + data.getErrors()),data.getPassed(),data.getFailed(),data.getErrors(),data.getTotalTime()));
      List<TestResult> problems=data.getProblems();
      for (      TestResult testResult : problems) {
        output.append(testResult.getLog() + NEW_LINE);
      }
    }
    if (output.length() > 0) {
      serializer.addOutput(output.toString());
    }
  }
  serializer.endTestSuite();
}",0.9322524609148812
7042,"public void stop(){
  try {
    server.stop();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void stop(){
  try {
    server.stop();
    setChanged();
    notifyObservers(Event.STOPPED);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8111888111888111
7043,"public void start(){
  try {
    server.start();
    setChanged();
    notifyObservers();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public void start(){
  try {
    server.start();
    setChanged();
    notifyObservers(Event.STARTED);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9607250755287008
7044,"public void update(Observable observable,Object o){
  if (observable instanceof JsTestDriverServer) {
    setStatus(Status.NO_BROWSERS);
  }
 else   if (observable instanceof CapturedBrowsers) {
    setStatus(Status.READY);
  }
}","public void update(Observable observable,Object event){
  if (observable instanceof JsTestDriverServer) {
switch ((JsTestDriverServer.Event)event) {
case STARTED:
      setStatus(Status.NO_BROWSERS);
    break;
case STOPPED:
  setStatus(Status.NOT_RUNNING);
break;
}
}
 else if (observable instanceof CapturedBrowsers) {
setStatus(Status.READY);
}
}",0.7439446366782007
7045,"public ResponseStream getRunTestsActionResponseStream(String browserId){
  String testSuiteName=String.format(""String_Node_Str"",browserId);
  TestResultPrinter printer=responsePrinterFactory.getResponsePrinter(String.format(""String_Node_Str"",configFileName,testSuiteName));
  printer.open(testSuiteName);
  RunTestsActionResponseStream responseStream=new RunTestsActionResponseStream(new TestResultGenerator(),printer);
  return responseStream;
}","public ResponseStream getRunTestsActionResponseStream(String browserId){
  String testSuiteName=String.format(""String_Node_Str"",browserId);
  TestResultPrinter printer=responsePrinterFactory.getResponsePrinter(String.format(""String_Node_Str"",new File(configFileName).getName(),testSuiteName));
  printer.open(testSuiteName);
  RunTestsActionResponseStream responseStream=new RunTestsActionResponseStream(new TestResultGenerator(),printer);
  return responseStream;
}",0.9780701754385964
7046,"public void run(){
  Collection<BrowserInfo> browsers=client.listBrowsers();
  int browsersNumber=browsers.size();
  if (browsersNumber == 0) {
    System.err.println(""String_Node_Str"");
  }
  CountDownLatch latch=new CountDownLatch(browsersNumber);
  for (  BrowserInfo browserInfo : browsers) {
    executor.submit(new ThreadedActionRunner(browserInfo.getId().toString(),client,latch,actions));
  }
  executor.shutdown();
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    System.err.println(e);
    System.exit(1);
  }
}","public void run(){
  Collection<BrowserInfo> browsers=client.listBrowsers();
  int browsersNumber=browsers.size();
  if (browsersNumber == 0) {
    System.err.println(""String_Node_Str"");
  }
  CountDownLatch latch=new CountDownLatch(browsersNumber);
  for (  BrowserInfo browserInfo : browsers) {
    executor.submit(new ThreadedActionRunner(browserInfo.getId().toString(),client,latch,actions));
  }
  executor.shutdown();
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}",0.9404096834264432
7047,"public void testUploadServeOnlyFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo loadInfo=new FileInfo(""String_Node_Str"",1232,false,false,null);
  String loadInfoContents=""String_Node_Str"";
  FileInfo serveInfo=new FileInfo(""String_Node_Str"",1232,false,true,null);
  String serveInfoContents=""String_Node_Str"";
  List<FileInfo> fileSet=Arrays.asList(loadInfo,serveInfo);
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(fileSet)+ ""String_Node_Str"",gson.toJson(fileSet));
  JsonCommand cmd=new JsonCommand(CommandType.RESET,Collections.<String>emptyList());
  Map<String,String> resetParams=new LinkedHashMap<String,String>();
  resetParams.put(""String_Node_Str"",""String_Node_Str"");
  resetParams.put(""String_Node_Str"",gson.toJson(cmd));
  server.expect(baseUrl + ""String_Node_Str"" + resetParams,""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(new FileInfo(loadInfo.getFileName(),loadInfo.getTimestamp(),loadInfo.isPatch(),loadInfo.isServeOnly(),loadInfoContents),new FileInfo(serveInfo.getFileName(),serveInfo.getTimestamp(),serveInfo.isPatch(),serveInfo.isServeOnly(),serveInfoContents)))+ ""String_Node_Str"",""String_Node_Str"");
  String url=baseUrl + ""String_Node_Str"" + createLoadCommandString(""String_Node_Str"",CommandType.LOADTEST,Arrays.asList(CommandTask.fileInfoToFileSource(loadInfo)));
  server.expect(url,""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + createLoadedFilesResponseString() + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(loadInfo,loadInfoContents);
  fileReader.addExpectation(serveInfo,serveInfoContents);
  CommandTask task=createCommandTask(server,new LinkedHashSet<FileInfo>(fileSet),new LinkedHashSet<FileInfo>(Arrays.asList(serveInfo)),params,stream,fileReader,true);
  task.run();
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}","public void testUploadServeOnlyFiles() throws Exception {
  MockServer server=new MockServer();
  FileInfo loadInfo=new FileInfo(""String_Node_Str"",1232,false,false,null);
  String loadInfoContents=""String_Node_Str"";
  FileInfo serveInfo=new FileInfo(""String_Node_Str"",1232,false,true,null);
  String serveInfoContents=""String_Node_Str"";
  List<FileInfo> fileSet=Arrays.asList(loadInfo,serveInfo);
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(fileSet)+ ""String_Node_Str"",gson.toJson(fileSet));
  JsonCommand cmd=new JsonCommand(CommandType.RESET,Collections.<String>emptyList());
  Map<String,String> resetParams=new LinkedHashMap<String,String>();
  resetParams.put(""String_Node_Str"",""String_Node_Str"");
  resetParams.put(""String_Node_Str"",gson.toJson(cmd));
  server.expect(baseUrl + ""String_Node_Str"" + resetParams,""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"" + gson.toJson(Arrays.asList(new FileInfo(loadInfo.getFileName(),loadInfo.getTimestamp(),loadInfo.isPatch(),loadInfo.isServeOnly(),loadInfoContents),new FileInfo(serveInfo.getFileName(),serveInfo.getTimestamp(),serveInfo.isPatch(),serveInfo.isServeOnly(),serveInfoContents)))+ ""String_Node_Str"",""String_Node_Str"");
  String url=baseUrl + ""String_Node_Str"" + createLoadCommandString(""String_Node_Str"",CommandType.LOADTEST,Arrays.asList(CommandTask.fileInfoToFileSource(loadInfo)));
  server.expect(url,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + createLoadedFilesResponseString() + ""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"");
  server.expect(baseUrl + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileLoader fileReader=new MockFileLoader();
  fileReader.addExpectation(loadInfo,loadInfoContents);
  fileReader.addExpectation(serveInfo,serveInfoContents);
  CommandTask task=createCommandTask(server,new LinkedHashSet<FileInfo>(fileSet),new LinkedHashSet<FileInfo>(Arrays.asList(serveInfo)),params,stream,fileReader,true);
  task.run();
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}",0.9852289512555392
7048,"public void streamResponse(String id,PrintWriter writer){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  CommandResponse cmdResponse=browser.getResponse();
  String response=""String_Node_Str"" + cmdResponse.isLast() + ""String_Node_Str""+ cmdResponse.getResponse()+ ""String_Node_Str"";
  writer.write(response);
}","public void streamResponse(String id,PrintWriter writer){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  CommandResponse cmdResponse=getResponse(browser);
  String response=""String_Node_Str"" + cmdResponse.isLast() + ""String_Node_Str""+ cmdResponse.getResponse()+ ""String_Node_Str"";
  writer.write(response);
}",0.5007824726134585
7049,"private void uploadFileSet(){
  Map<String,String> fileSetParams=new LinkedHashMap<String,String>();
  fileSetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
  fileSetParams.put(""String_Node_Str"",gson.toJson(fileSet));
  String postResult=server.post(baseUrl + ""String_Node_Str"",fileSetParams);
  if (postResult.length() > 0) {
    Collection<FileInfo> filesToUpload=gson.fromJson(postResult,new TypeToken<Collection<FileInfo>>(){
    }
.getType());
    boolean shouldReset=sameFiles(filesToUpload,fileSet);
    Set<FileInfo> finalFilesToUpload=new LinkedHashSet<FileInfo>();
    if (shouldReset) {
      JsonCommand cmd=new JsonCommand(CommandType.RESET,EMPTY_ARRAYLIST);
      Map<String,String> resetParams=new LinkedHashMap<String,String>();
      resetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      resetParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",resetParams);
      server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
      finalFilesToUpload.addAll(filesToUpload);
    }
 else {
      for (      FileInfo file : filesToUpload) {
        finalFilesToUpload.addAll(findDependencies(file));
      }
    }
    List<FileInfo> loadedfiles=fileLoader.loadFiles(finalFilesToUpload,shouldReset);
    Map<String,String> uploadFileParams=new LinkedHashMap<String,String>();
    uploadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
    uploadFileParams.put(""String_Node_Str"",gson.toJson(loadedfiles));
    server.post(baseUrl + ""String_Node_Str"",uploadFileParams);
    List<FileSource> filesSrc=new LinkedList<FileSource>(filterFilesToLoad(loadedfiles));
    int numberOfFilesToLoad=filesSrc.size();
    for (int i=0; i < numberOfFilesToLoad; i+=CHUNK_SIZE) {
      int chunkEndIndex=Math.min(i + CHUNK_SIZE,numberOfFilesToLoad);
      List<String> loadParameters=new LinkedList<String>();
      List<FileSource> filesToLoad=filesSrc.subList(i,chunkEndIndex);
      loadParameters.add(gson.toJson(filesToLoad));
      loadParameters.add(""String_Node_Str"");
      JsonCommand cmd=new JsonCommand(CommandType.LOADTEST,loadParameters);
      Map<String,String> loadFileParams=new LinkedHashMap<String,String>();
      loadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      loadFileParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",loadFileParams);
      String jsonResponse=server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
      StreamMessage message=gson.fromJson(jsonResponse,StreamMessage.class);
      Response response=message.getResponse();
      LoadedFiles loadedFiles=gson.fromJson(response.getResponse(),LoadedFiles.class);
      if (loadedFiles.getLoadedFiles().isEmpty()) {
        System.err.println(""String_Node_Str"");
      }
 else {
        if (loadedFiles.hasError()) {
          for (          FileResult fileResult : loadedFiles.getLoadedFiles()) {
            if (!fileResult.isSuccess()) {
              System.err.println(fileResult.getMessage());
            }
          }
        }
      }
    }
  }
}","private void uploadFileSet(){
  Map<String,String> fileSetParams=new LinkedHashMap<String,String>();
  fileSetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
  fileSetParams.put(""String_Node_Str"",gson.toJson(fileSet));
  String postResult=server.post(baseUrl + ""String_Node_Str"",fileSetParams);
  if (postResult.length() > 0) {
    Collection<FileInfo> filesToUpload=gson.fromJson(postResult,new TypeToken<Collection<FileInfo>>(){
    }
.getType());
    boolean shouldReset=sameFiles(filesToUpload,fileSet);
    Set<FileInfo> finalFilesToUpload=new LinkedHashSet<FileInfo>();
    if (shouldReset) {
      JsonCommand cmd=new JsonCommand(CommandType.RESET,EMPTY_ARRAYLIST);
      Map<String,String> resetParams=new LinkedHashMap<String,String>();
      resetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      resetParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",resetParams);
      String jsonResponse=server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
      StreamMessage message=gson.fromJson(jsonResponse,StreamMessage.class);
      Response response=message.getResponse();
      shouldPanic(response.getResponse());
      finalFilesToUpload.addAll(filesToUpload);
    }
 else {
      for (      FileInfo file : filesToUpload) {
        finalFilesToUpload.addAll(findDependencies(file));
      }
    }
    List<FileInfo> loadedfiles=fileLoader.loadFiles(finalFilesToUpload,shouldReset);
    Map<String,String> uploadFileParams=new LinkedHashMap<String,String>();
    uploadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
    uploadFileParams.put(""String_Node_Str"",gson.toJson(loadedfiles));
    server.post(baseUrl + ""String_Node_Str"",uploadFileParams);
    List<FileSource> filesSrc=new LinkedList<FileSource>(filterFilesToLoad(loadedfiles));
    int numberOfFilesToLoad=filesSrc.size();
    for (int i=0; i < numberOfFilesToLoad; i+=CHUNK_SIZE) {
      int chunkEndIndex=Math.min(i + CHUNK_SIZE,numberOfFilesToLoad);
      List<String> loadParameters=new LinkedList<String>();
      List<FileSource> filesToLoad=filesSrc.subList(i,chunkEndIndex);
      loadParameters.add(gson.toJson(filesToLoad));
      loadParameters.add(""String_Node_Str"");
      JsonCommand cmd=new JsonCommand(CommandType.LOADTEST,loadParameters);
      Map<String,String> loadFileParams=new LinkedHashMap<String,String>();
      loadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      loadFileParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",loadFileParams);
      String jsonResponse=server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
      StreamMessage message=gson.fromJson(jsonResponse,StreamMessage.class);
      Response response=message.getResponse();
      if (response.getResponse().startsWith(""String_Node_Str"")) {
        throw new RuntimeException(response.getResponse());
      }
      LoadedFiles loadedFiles=gson.fromJson(response.getResponse(),LoadedFiles.class);
      if (loadedFiles.getLoadedFiles().isEmpty()) {
        System.err.println(""String_Node_Str"");
      }
 else {
        if (loadedFiles.hasError()) {
          for (          FileResult fileResult : loadedFiles.getLoadedFiles()) {
            if (!fileResult.isSuccess()) {
              System.err.println(fileResult.getMessage());
            }
          }
        }
      }
    }
  }
}",0.95125284738041
7050,"public void run(){
  heartBeatManager.startTimer();
  String browserId=params.get(""String_Node_Str"");
  String sessionId=null;
  try {
    sessionId=startSession();
    if (!sessionId.equals(""String_Node_Str"")) {
      heartBeatManager.startHeartBeat(baseUrl,browserId,sessionId);
    }
    if (!isBrowserAlive()) {
      return;
    }
    if (upload) {
      uploadFileSet();
    }
    server.post(baseUrl + ""String_Node_Str"",params);
    StreamMessage streamMessage=null;
    do {
      String response=server.fetch(baseUrl + ""String_Node_Str"" + browserId);
      streamMessage=gson.fromJson(response,StreamMessage.class);
      stream.stream(streamMessage.getResponse());
    }
 while (streamMessage != null && !streamMessage.isLast());
  }
  finally {
    stream.finish();
    heartBeatManager.cancelTimer();
    stopSession(sessionId);
  }
}","public void run(){
  heartBeatManager.startTimer();
  String browserId=params.get(""String_Node_Str"");
  String sessionId=null;
  try {
    sessionId=startSession();
    if (!sessionId.equals(""String_Node_Str"")) {
      heartBeatManager.startHeartBeat(baseUrl,browserId,sessionId);
    }
    if (!isBrowserAlive()) {
      return;
    }
    if (upload) {
      uploadFileSet();
    }
    server.post(baseUrl + ""String_Node_Str"",params);
    StreamMessage streamMessage=null;
    do {
      String response=server.fetch(baseUrl + ""String_Node_Str"" + browserId);
      streamMessage=gson.fromJson(response,StreamMessage.class);
      Response resObj=streamMessage.getResponse();
      shouldPanic(resObj.getResponse());
      stream.stream(resObj);
    }
 while (streamMessage != null && !streamMessage.isLast());
  }
  finally {
    stream.finish();
    heartBeatManager.cancelTimer();
    stopSession(sessionId);
  }
}",0.9438457175269428
7051,"public CommandResponse getResponse(){
  try {
    return responses.take();
  }
 catch (  InterruptedException e) {
    return null;
  }
}","public CommandResponse getResponse(){
  try {
    return responses.poll(POLL_RESPONSE_TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    return null;
  }
}",0.8525641025641025
7052,"public void testGetRunTestsActionResponseStream() throws Exception {
  CoverageResponseStreamFactory factory=new CoverageResponseStreamFactory(new DefaultResponseStreamFactory(new ResponsePrinterFactory(){
    public TestResultPrinter getResponsePrinter(    String xmlFile){
      return printer;
    }
  }
),null);
  ResponseStream responseStream=factory.getRunTestsActionResponseStream(""String_Node_Str"");
  assertNotNull(responseStream);
}","public void testGetRunTestsActionResponseStream() throws Exception {
  CoverageResponseStreamFactory factory=new CoverageResponseStreamFactory(new DefaultResponseStreamFactory(new ResponsePrinterFactory(){
    public TestResultPrinter getResponsePrinter(    String xmlFile){
      return printer;
    }
  }
,""String_Node_Str""),null);
  ResponseStream responseStream=factory.getRunTestsActionResponseStream(""String_Node_Str"");
  assertNotNull(responseStream);
}",0.9800443458980044
7053,"@Inject public DefaultResponseStreamFactory(ResponsePrinterFactory responsePrinterFactory){
  this.responsePrinterFactory=responsePrinterFactory;
}","@Inject public DefaultResponseStreamFactory(ResponsePrinterFactory responsePrinterFactory,@Named(""String_Node_Str"") String configFileName){
  this.responsePrinterFactory=responsePrinterFactory;
  this.configFileName=configFileName;
}",0.7736842105263158
7054,"public ResponseStream getRunTestsActionResponseStream(String browserId){
  String testSuiteName=String.format(""String_Node_Str"",browserId);
  TestResultPrinter printer=responsePrinterFactory.getResponsePrinter(String.format(""String_Node_Str"",testSuiteName));
  printer.open(testSuiteName);
  RunTestsActionResponseStream responseStream=new RunTestsActionResponseStream(new TestResultGenerator(),printer);
  return responseStream;
}","public ResponseStream getRunTestsActionResponseStream(String browserId){
  String testSuiteName=String.format(""String_Node_Str"",browserId);
  TestResultPrinter printer=responsePrinterFactory.getResponsePrinter(String.format(""String_Node_Str"",configFileName,testSuiteName));
  printer.open(testSuiteName);
  RunTestsActionResponseStream responseStream=new RunTestsActionResponseStream(new TestResultGenerator(),printer);
  return responseStream;
}",0.982896237172178
7055,"@Provides @Inject public CoverageWriter createCoverageWriter(@Named(""String_Node_Str"") String testOut,@Named(""String_Node_Str"") PrintStream out){
  if (testOut.length() > 0) {
    try {
      File testOutDir=new File(testOut);
      if (!testOutDir.exists()) {
        testOutDir.mkdirs();
      }
      File coverageFile=new File(testOutDir,""String_Node_Str"");
      if (coverageFile.exists()) {
        coverageFile.delete();
      }
      coverageFile.createNewFile();
      return new LcovWriter(new FileWriter(coverageFile));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return new SummaryCoverageWriter(out);
}","@Provides @Inject public CoverageWriter createCoverageWriter(@Named(""String_Node_Str"") String testOut,@Named(""String_Node_Str"") String configFileName,@Named(""String_Node_Str"") PrintStream out){
  if (testOut.length() > 0) {
    try {
      File testOutDir=new File(testOut);
      if (!testOutDir.exists()) {
        testOutDir.mkdirs();
      }
      File coverageFile=new File(testOutDir,String.format(""String_Node_Str"",configFileName));
      if (coverageFile.exists()) {
        coverageFile.delete();
      }
      coverageFile.createNewFile();
      return new LcovWriter(new FileWriter(coverageFile));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return new SummaryCoverageWriter(out);
}",0.9438040345821326
7056,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String id=req.getParameter(""String_Node_Str"");
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
  }
  resp.getWriter().flush();
}","/** 
 * Used by the browser to report if it is still alive.
 */
@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String id=req.getParameter(""String_Node_Str"");
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
  }
  resp.getWriter().flush();
}",0.9006211180124224
7057,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PrintWriter writer=resp.getWriter();
  String id=req.getParameter(""String_Node_Str"");
  if (id != null) {
    SlaveBrowser browser=capturedBrowsers.getBrowser(id);
    if (browser != null) {
      if ((time.now().getMillis() - browser.getLastHeartBeat().getMillis()) > TIMEOUT) {
        capturedBrowsers.removeSlave(id);
        writer.write(""String_Node_Str"");
      }
 else {
        writer.write(""String_Node_Str"");
      }
    }
 else {
      writer.write(""String_Node_Str"");
    }
  }
 else {
    writer.write(""String_Node_Str"");
  }
  writer.flush();
}","/** 
 * Used by the client to know if the browser is alive.
 */
@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PrintWriter writer=resp.getWriter();
  String id=req.getParameter(""String_Node_Str"");
  if (id != null) {
    SlaveBrowser browser=capturedBrowsers.getBrowser(id);
    if (browser != null) {
      if ((time.now().getMillis() - browser.getLastHeartBeat().getMillis()) > TIMEOUT) {
        capturedBrowsers.removeSlave(id);
        writer.write(""String_Node_Str"");
      }
 else {
        writer.write(""String_Node_Str"");
      }
    }
 else {
      writer.write(""String_Node_Str"");
    }
  }
 else {
    writer.write(""String_Node_Str"");
  }
  writer.flush();
}",0.9538904899135446
7058,"public void testProcessRun() throws Exception {
  CountDownLatchFake latch=new CountDownLatchFake(1,false,true);
  final String browserPath=""String_Node_Str"";
  final String serverAddress=""String_Node_Str"";
  final BrowserStartupAction action=new BrowserStartupAction(Arrays.asList(browserPath),serverAddress,new ProcessFactory(){
    public Process start(    String... commands) throws IOException {
      return new ProcessStub(commands);
    }
  }
,latch);
  action.run();
  assertFalse(action.getProcesses().isEmpty());
  assertEquals(new ProcessStub(new String[]{browserPath,serverAddress + ""String_Node_Str""}),action.getProcesses().get(0));
}","public void testProcessRun() throws Exception {
  CountDownLatchFake latch=new CountDownLatchFake(1,false,true);
  final String browserPath=""String_Node_Str"";
  final String serverAddress=""String_Node_Str"";
  final BrowserStartupAction action=new BrowserStartupAction(Arrays.asList(browserPath),serverAddress,new ProcessFactory(){
    public Process start(    String... commands){
      return new ProcessStub(commands);
    }
  }
,latch);
  action.run();
  assertFalse(action.getProcesses().isEmpty());
  assertEquals(new ProcessStub(new String[]{browserPath,serverAddress + ""String_Node_Str""}),action.getProcesses().get(0));
}",0.9843260188087776
7059,"@Override public boolean await(long timeoutPassed,TimeUnit unit) throws InterruptedException {
  return awaitResponse;
}","@Override public boolean await(long timeoutPassed,TimeUnit unit){
  return awaitResponse;
}",0.8625592417061612
7060,"@Override public int waitFor() throws InterruptedException {
  return 0;
}","@Override public int waitFor(){
  return 0;
}",0.7563025210084033
7061,"public void testRewriteUrls() throws Exception {
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  BrowserInfo browserInfo=new BrowserInfo();
  browserInfo.setId(1);
  SlaveBrowser slave=new SlaveBrowser(new TimeImpl(),""String_Node_Str"",browserInfo);
  capturedBrowsers.addSlave(slave);
  CommandServlet servlet=new CommandServlet(capturedBrowsers,new URLTranslator(new IdGenerator(){
    private int i=1;
    public String generate(){
      return Integer.toString(i++);
    }
  }
),new ForwardingMapper());
  List<String> parameters=Lists.newArrayList();
  List<FileSource> fileSources=Lists.newArrayList();
  fileSources.add(new FileSource(""String_Node_Str"",-1));
  fileSources.add(new FileSource(""String_Node_Str"",-1));
  parameters.add(gson.toJson(fileSources));
  parameters.add(""String_Node_Str"");
  JsonCommand command=new JsonCommand(CommandType.LOADTEST,parameters);
  servlet.service(""String_Node_Str"",gson.toJson(command));
  Command cmd=slave.dequeueCommand();
  command=gson.fromJson(cmd.getCommand(),JsonCommand.class);
  assertEquals(2,command.getParameters().size());
  List<FileSource> changedFileSources=gson.fromJson(command.getParameters().get(0),new TypeToken<List<FileSource>>(){
  }
.getType());
  assertEquals(2,changedFileSources.size());
  assertEquals(""String_Node_Str"",changedFileSources.get(0).getFileSrc());
  assertEquals(""String_Node_Str"",changedFileSources.get(0).getBasePath());
  assertEquals(""String_Node_Str"",changedFileSources.get(1).getFileSrc());
  assertEquals(""String_Node_Str"",changedFileSources.get(1).getBasePath());
}","public void testRewriteUrls() throws Exception {
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  BrowserInfo browserInfo=new BrowserInfo();
  browserInfo.setId(1);
  SlaveBrowser slave=new SlaveBrowser(new TimeImpl(),""String_Node_Str"",browserInfo);
  capturedBrowsers.addSlave(slave);
  CommandServlet servlet=new CommandServlet(capturedBrowsers,new URLTranslator(),new ForwardingMapper());
  List<String> parameters=Lists.newArrayList();
  List<FileSource> fileSources=Lists.newArrayList();
  fileSources.add(new FileSource(""String_Node_Str"",-1));
  fileSources.add(new FileSource(""String_Node_Str"",-1));
  parameters.add(gson.toJson(fileSources));
  parameters.add(""String_Node_Str"");
  JsonCommand command=new JsonCommand(CommandType.LOADTEST,parameters);
  servlet.service(""String_Node_Str"",gson.toJson(command));
  Command cmd=slave.dequeueCommand();
  command=gson.fromJson(cmd.getCommand(),JsonCommand.class);
  assertEquals(2,command.getParameters().size());
  List<FileSource> changedFileSources=gson.fromJson(command.getParameters().get(0),new TypeToken<List<FileSource>>(){
  }
.getType());
  assertEquals(2,changedFileSources.size());
  assertEquals(""String_Node_Str"",changedFileSources.get(0).getFileSrc());
  assertEquals(""String_Node_Str"",changedFileSources.get(0).getBasePath());
  assertEquals(""String_Node_Str"",changedFileSources.get(1).getFileSrc());
  assertEquals(""String_Node_Str"",changedFileSources.get(1).getBasePath());
}",0.9617918313570488
7062,"public void testUrlHasPort() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"",null).toString());
}","public void testUrlHasPort() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null).toString());
}",0.9774436090225564
7063,"public void testUrlHasIdAndNoReferer() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"",null).toString());
}","public void testUrlHasIdAndNoReferer() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null).toString());
}",0.9779951100244498
7064,"public void testMultipleLevelUrlRequest() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"",null).toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null,""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null,""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null,""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null,""String_Node_Str"").toString());
}","public void testMultipleLevelUrlRequest() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null).toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"").toString());
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"").toString());
}",0.9811881188118812
7065,"public void testUrlHasIdOnReferer() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",null,""String_Node_Str"").toString());
}","public void testUrlHasIdOnReferer() throws Exception {
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  forwardingMapper.addForwardingMapping(""String_Node_Str"",""String_Node_Str"");
  ForwardingServlet servlet=new ForwardingServlet(forwardingMapper);
  assertEquals(""String_Node_Str"",servlet.getForwardingUrl(""String_Node_Str"",""String_Node_Str"",42,""String_Node_Str"",""String_Node_Str"").toString());
}",0.993939393939394
7066,"public void testRetrieveOriginal() throws Exception {
  IdGenerator idGenerator=new FakeIdGenerator(ID);
  URLTranslator urlTranslator=new URLTranslator(idGenerator);
  urlTranslator.translate(ORIGINAL_URL);
  assertEquals(ORIGINAL_URL,urlTranslator.getOriginal(urlTranslator.getTranslation(ORIGINAL_URL)));
}","public void testRetrieveOriginal() throws Exception {
  URLTranslator urlTranslator=new URLTranslator();
  urlTranslator.translate(ORIGINAL_URL);
  assertEquals(ORIGINAL_URL,urlTranslator.getOriginal(urlTranslator.getTranslation(ORIGINAL_URL)));
}",0.7553956834532374
7067,"public void testClearUrlTranslatorCache() throws Exception {
  IdGenerator idGenerator=new FakeIdGenerator(ID);
  URLTranslator urlTranslator=new URLTranslator(idGenerator);
  urlTranslator.translate(ORIGINAL_URL);
  urlTranslator.clear();
  assertNull(urlTranslator.getOriginal(urlTranslator.getTranslation(ORIGINAL_URL)));
}","public void testClearUrlTranslatorCache() throws Exception {
  URLTranslator urlTranslator=new URLTranslator();
  urlTranslator.translate(ORIGINAL_URL);
  urlTranslator.clear();
  assertNull(urlTranslator.getOriginal(urlTranslator.getTranslation(ORIGINAL_URL)));
}",0.7694915254237288
7068,"public void testTranslateUrl() throws Exception {
  IdGenerator idGenerator=new FakeIdGenerator(ID);
  URLTranslator urlTranslator=new URLTranslator(idGenerator);
  urlTranslator.translate(ORIGINAL_URL);
  assertEquals(TRANSLATED_URL,urlTranslator.getTranslation(ORIGINAL_URL));
}","public void testTranslateUrl() throws Exception {
  URLTranslator urlTranslator=new URLTranslator();
  urlTranslator.translate(ORIGINAL_URL);
  assertEquals(TRANSLATED_URL,urlTranslator.getTranslation(ORIGINAL_URL));
}",0.7269076305220884
7069,"public void service(String id,String start,String response,String done,PrintWriter writer){
  SlaveBrowser browser=browsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
    if (response != null && browser.isCommandRunning()) {
      Response res=gson.fromJson(response,Response.class);
      if (res.getResponse().contains(""String_Node_Str"")) {
        LoadedFiles loadedFiles=gson.fromJson(res.getResponse(),LoadedFiles.class);
        Collection<FileResult> allLoadedFiles=loadedFiles.getLoadedFiles();
        if (!allLoadedFiles.isEmpty()) {
          LinkedHashSet<FileInfo> fileInfos=new LinkedHashSet<FileInfo>();
          Collection<FileSource> errorFiles=new LinkedHashSet<FileSource>();
          for (          FileResult fileResult : allLoadedFiles) {
            FileSource fileSource=fileResult.getFileSource();
            if (fileResult.isSuccess()) {
              String filePath=fileSource.getFileSrc();
              fileInfos.add(new FileInfo(fileSource.getBasePath(),fileSource.getTimestamp(),false,false,null));
            }
 else {
              errorFiles.add(fileSource);
            }
          }
          browser.addFiles(fileInfos);
          if (errorFiles.size() > 0) {
            browser.removeFiles(errorFiles);
          }
        }
        forwardingMapper.clear();
      }
      boolean isLast=done != null;
      browser.addResponse(response,isLast);
      if (!isLast) {
        writer.print(NOOP);
        writer.flush();
        return;
      }
    }
    Command command=null;
    if (start != null) {
      browser.resetFileSet();
      urlTranslator.clear();
      Command commandRunning=browser.getCommandRunning();
      if (commandRunning != null) {
        JsonCommand jsonCommand=gson.fromJson(commandRunning.getCommand(),JsonCommand.class);
        if (jsonCommand.getCommand().equals(JsonCommand.CommandType.RESET.getCommand())) {
          command=browser.getLastDequeuedCommand();
        }
      }
    }
 else {
      command=browser.dequeueCommand();
    }
    writer.print(command != null ? command.getCommand() : NOOP);
  }
  writer.flush();
}","public void service(String id,String start,String response,String done,PrintWriter writer){
  SlaveBrowser browser=browsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
    if (response != null && browser.isCommandRunning()) {
      Response res=gson.fromJson(response,Response.class);
      if (res.getResponse().contains(""String_Node_Str"")) {
        LoadedFiles loadedFiles=gson.fromJson(res.getResponse(),LoadedFiles.class);
        Collection<FileResult> allLoadedFiles=loadedFiles.getLoadedFiles();
        if (!allLoadedFiles.isEmpty()) {
          LinkedHashSet<FileInfo> fileInfos=new LinkedHashSet<FileInfo>();
          Collection<FileSource> errorFiles=new LinkedHashSet<FileSource>();
          for (          FileResult fileResult : allLoadedFiles) {
            FileSource fileSource=fileResult.getFileSource();
            if (fileResult.isSuccess()) {
              String filePath=fileSource.getFileSrc();
              fileInfos.add(new FileInfo(fileSource.getBasePath(),fileSource.getTimestamp(),false,false,null));
            }
 else {
              errorFiles.add(fileSource);
            }
          }
          browser.addFiles(fileInfos);
          if (errorFiles.size() > 0) {
            browser.removeFiles(errorFiles);
          }
        }
      }
      boolean isLast=done != null;
      browser.addResponse(response,isLast);
      if (!isLast) {
        writer.print(NOOP);
        writer.flush();
        return;
      }
    }
    Command command=null;
    if (start != null) {
      browser.resetFileSet();
      urlTranslator.clear();
      forwardingMapper.clear();
      Command commandRunning=browser.getCommandRunning();
      if (commandRunning != null) {
        JsonCommand jsonCommand=gson.fromJson(commandRunning.getCommand(),JsonCommand.class);
        if (jsonCommand.getCommand().equals(JsonCommand.CommandType.RESET.getCommand())) {
          command=browser.getLastDequeuedCommand();
        }
      }
    }
 else {
      command=browser.dequeueCommand();
    }
    writer.print(command != null ? command.getCommand() : NOOP);
  }
  writer.flush();
}",0.9844486333647502
7070,"private String translateUrls(String data){
  JsonCommand command=gson.fromJson(data,JsonCommand.class);
  if (command.getCommand().equals(JsonCommand.CommandType.LOADTEST.getCommand())) {
    List<String> parameters=command.getParameters();
    String fileSourcesList=parameters.get(0);
    List<FileSource> fileSources=gson.fromJson(fileSourcesList,new TypeToken<List<FileSource>>(){
    }
.getType());
    for (    FileSource fileSource : fileSources) {
      String url=fileSource.getFileSrc();
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        String translation=urlTranslator.getTranslation(url);
        if (translation == null) {
          urlTranslator.translate(url);
          translation=urlTranslator.getTranslation(url);
          URLQueryParser parser=new URLQueryParser(translation);
          parser.parse();
          forwardingMapper.addForwardingMapping(parser.getParameter(""String_Node_Str""),url);
        }
        fileSource.setBasePath(url);
        fileSource.setFileSource(translation);
      }
    }
    parameters.remove(0);
    parameters.add(0,gson.toJson(fileSources));
    return gson.toJson(command);
  }
  return data;
}","private String translateUrls(String data){
  JsonCommand command=gson.fromJson(data,JsonCommand.class);
  if (command.getCommand().equals(JsonCommand.CommandType.LOADTEST.getCommand())) {
    List<String> parameters=command.getParameters();
    String fileSourcesList=parameters.get(0);
    List<FileSource> fileSources=gson.fromJson(fileSourcesList,new TypeToken<List<FileSource>>(){
    }
.getType());
    for (    FileSource fileSource : fileSources) {
      String url=fileSource.getFileSrc();
      if (url.startsWith(""String_Node_Str"") || url.startsWith(""String_Node_Str"")) {
        String translation=urlTranslator.getTranslation(url);
        if (translation == null) {
          try {
            urlTranslator.translate(url);
            translation=urlTranslator.getTranslation(url);
            forwardingMapper.addForwardingMapping(translation,url);
          }
 catch (          MalformedURLException e) {
            LOGGER.warn(""String_Node_Str"" + url + ""String_Node_Str"",e);
            translation=url;
          }
        }
        fileSource.setBasePath(url);
        fileSource.setFileSource(translation);
      }
    }
    parameters.remove(0);
    parameters.add(0,gson.toJson(fileSources));
    return gson.toJson(command);
  }
  return data;
}",0.849025974025974
7071,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  service(req.getParameter(""String_Node_Str""),req.getParameter(""String_Node_Str""));
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp){
  service(req.getParameter(""String_Node_Str""),req.getParameter(""String_Node_Str""));
}",0.943502824858757
7072,"public URL getForwardingUrl(String scheme,String serverName,int serverPort,String uri,String jstdid,String referer) throws MalformedURLException {
  if (jstdid != null) {
    return new URL(forwardingMapper.getForwardTo(jstdid));
  }
  String incomingUrl=String.format(""String_Node_Str"",scheme,serverName,serverPort,uri);
  URL refererUrl=new URL(referer);
  URLQueryParser urlQueryParser=new URLQueryParser(refererUrl.getQuery());
  urlQueryParser.parse();
  jstdid=urlQueryParser.getParameter(""String_Node_Str"");
  if (jstdid != null) {
    String forwardTo=forwardingMapper.getForwardTo(jstdid);
    URL forwardUrl=new URL(forwardTo);
    StringBuilder sb=new StringBuilder();
    sb.append(forwardUrl.getProtocol());
    sb.append(""String_Node_Str"");
    sb.append(forwardUrl.getHost());
    int port=forwardUrl.getPort();
    if (port != -1) {
      sb.append(""String_Node_Str"");
      sb.append(Integer.toString(port));
    }
    String baseUrl=sb.toString();
    String finalUrl=baseUrl + uri;
    forwardingMapper.addForwardingMapping(incomingUrl,baseUrl);
    return new URL(finalUrl);
  }
 else {
    String baseUrl=forwardingMapper.getForwardTo(referer);
    forwardingMapper.addForwardingMapping(incomingUrl,baseUrl);
    return new URL(baseUrl + uri);
  }
}","public URL getForwardingUrl(String scheme,String serverName,int serverPort,String uri,String referer) throws MalformedURLException {
  String forwardTo=forwardingMapper.getForwardTo(uri);
  if (forwardTo != null) {
    return new URL(forwardTo);
  }
  String incomingUrl=String.format(""String_Node_Str"",scheme,serverName,serverPort,uri);
  URL refererUrl=new URL(referer);
  forwardTo=forwardingMapper.getForwardTo(refererUrl.getPath());
  if (forwardTo != null) {
    URL forwardUrl=new URL(forwardTo);
    StringBuilder sb=new StringBuilder();
    sb.append(forwardUrl.getProtocol());
    sb.append(""String_Node_Str"");
    sb.append(forwardUrl.getHost());
    int port=forwardUrl.getPort();
    if (port != -1) {
      sb.append(""String_Node_Str"");
      sb.append(Integer.toString(port));
    }
    String baseUrl=sb.toString();
    String finalUrl=baseUrl + uri;
    forwardingMapper.addForwardingMapping(incomingUrl,baseUrl);
    return new URL(finalUrl);
  }
 else {
    String baseUrl=forwardingMapper.getForwardTo(referer);
    forwardingMapper.addForwardingMapping(incomingUrl,baseUrl);
    return new URL(baseUrl + uri);
  }
}",0.3283458021612635
7073,"@Override protected URL proxyHttpURL(String scheme,String serverName,int serverPort,String uri) throws MalformedURLException {
  if (!uri.equals(""String_Node_Str"")) {
    HttpServletRequest request=threadLocal.get();
    return getForwardingUrl(scheme,serverName,serverPort,uri,request.getParameter(""String_Node_Str""),request.getHeader(""String_Node_Str""));
  }
 else {
    return super.proxyHttpURL(scheme,serverName,serverPort,uri);
  }
}","@Override protected URL proxyHttpURL(String scheme,String serverName,int serverPort,String uri) throws MalformedURLException {
  HttpServletRequest request=threadLocal.get();
  return getForwardingUrl(scheme,serverName,serverPort,uri,request.getHeader(""String_Node_Str""));
}",0.4375876577840112
7074,"private void initServlets(){
  URLTranslator urlTranslator=new URLTranslator(new UUIDIdGenerator());
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  addServlet(""String_Node_Str"",new HelloServlet());
  addServlet(""String_Node_Str"",new HeartbeatServlet(capturedBrowsers,new TimeImpl()));
  addServlet(""String_Node_Str"",new CaptureServlet(new BrowserHunter(capturedBrowsers)));
  addServlet(""String_Node_Str"",new StandaloneRunnerServlet(new BrowserHunter(capturedBrowsers),filesCache,new StandaloneRunnerFilesFilterImpl(),new SlaveResourceService(SlaveResourceService.RESOURCE_LOCATION)));
  addServlet(""String_Node_Str"",new SlaveResourceServlet(new SlaveResourceService(SlaveResourceService.RESOURCE_LOCATION)));
  addServlet(""String_Node_Str"",new CommandServlet(capturedBrowsers,urlTranslator,forwardingMapper));
  addServlet(""String_Node_Str"",new BrowserQueryResponseServlet(capturedBrowsers,urlTranslator,forwardingMapper));
  addServlet(""String_Node_Str"",new FileSetServlet(capturedBrowsers,filesCache));
  addServlet(""String_Node_Str"",new TestResourceServlet(filesCache));
  addServlet(""String_Node_Str"",new HomeServlet(capturedBrowsers));
  addServlet(""String_Node_Str"",new ForwardingServlet(forwardingMapper));
}","private void initServlets(){
  URLTranslator urlTranslator=new URLTranslator();
  ForwardingMapper forwardingMapper=new ForwardingMapper();
  addServlet(""String_Node_Str"",new HelloServlet());
  addServlet(""String_Node_Str"",new HeartbeatServlet(capturedBrowsers,new TimeImpl()));
  addServlet(""String_Node_Str"",new CaptureServlet(new BrowserHunter(capturedBrowsers)));
  addServlet(""String_Node_Str"",new StandaloneRunnerServlet(new BrowserHunter(capturedBrowsers),filesCache,new StandaloneRunnerFilesFilterImpl(),new SlaveResourceService(SlaveResourceService.RESOURCE_LOCATION)));
  addServlet(""String_Node_Str"",new SlaveResourceServlet(new SlaveResourceService(SlaveResourceService.RESOURCE_LOCATION)));
  addServlet(""String_Node_Str"",new CommandServlet(capturedBrowsers,urlTranslator,forwardingMapper));
  addServlet(""String_Node_Str"",new BrowserQueryResponseServlet(capturedBrowsers,urlTranslator,forwardingMapper));
  addServlet(""String_Node_Str"",new FileSetServlet(capturedBrowsers,filesCache));
  addServlet(""String_Node_Str"",new TestResourceServlet(filesCache));
  addServlet(""String_Node_Str"",new HomeServlet(capturedBrowsers));
  addServlet(""String_Node_Str"",new ForwardingServlet(forwardingMapper));
}",0.991396968455551
7075,"public static void main(String[] args){
  try {
    Flags flags=new FlagsParser().parseArgument(args);
    File config=new File(flags.getConfig());
    Set<FileInfo> fileSet=new LinkedHashSet<FileInfo>();
    List<Module> modules=new LinkedList<Module>();
    String serverAddress=flags.getServer();
    if (flags.hasWork()) {
      if (!config.exists()) {
        throw new RuntimeException(""String_Node_Str"" + flags.getConfig());
      }
      Reader configReader=new java.io.FileReader(flags.getConfig());
      ConfigurationParser configParser=new ConfigurationParser(config.getParentFile(),configReader);
      PluginLoader pluginLoader=new PluginLoader();
      configParser.parse();
      fileSet=configParser.getFilesList();
      if (serverAddress == null || serverAddress.length() == 0) {
        serverAddress=configParser.getServer();
      }
      modules.addAll(pluginLoader.load(configParser.getPlugins()));
    }
    if (serverAddress == null || serverAddress.length() == 0) {
      if (flags.getPort() == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      serverAddress=String.format(""String_Node_Str"",""String_Node_Str"",flags.getPort());
    }
    if (flags.getTestOutput().length() > 0) {
      modules.add(new XmlClientModule(System.out));
    }
 else {
      modules.add(new PrintStreamClientModule(System.out));
    }
    Injector injector=Guice.createInjector(new JsTestDriverModule(flags,fileSet,modules,serverAddress));
    injector.getInstance(ActionRunner.class).runActions();
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
  }
catch (  Exception e) {
    System.err.println(e);
    System.exit(1);
  }
}","public static void main(String[] args){
  try {
    Flags flags=new FlagsParser().parseArgument(args);
    File config=new File(flags.getConfig());
    Set<FileInfo> fileSet=new LinkedHashSet<FileInfo>();
    List<Module> modules=new LinkedList<Module>();
    String serverAddress=flags.getServer();
    if (flags.hasWork()) {
      if (!config.exists()) {
        throw new RuntimeException(""String_Node_Str"" + flags.getConfig());
      }
      Reader configReader=new java.io.FileReader(config);
      ConfigurationParser configParser=new ConfigurationParser(config.getParentFile(),configReader);
      PluginLoader pluginLoader=new PluginLoader();
      configParser.parse();
      fileSet=configParser.getFilesList();
      if (serverAddress == null || serverAddress.length() == 0) {
        serverAddress=configParser.getServer();
      }
      modules.addAll(pluginLoader.load(configParser.getPlugins()));
    }
    if (serverAddress == null || serverAddress.length() == 0) {
      if (flags.getPort() == -1) {
        throw new RuntimeException(""String_Node_Str"");
      }
      serverAddress=String.format(""String_Node_Str"",""String_Node_Str"",flags.getPort());
    }
    if (flags.getTestOutput().length() > 0) {
      modules.add(new XmlClientModule(System.out));
    }
 else {
      modules.add(new PrintStreamClientModule(System.out));
    }
    Injector injector=Guice.createInjector(new JsTestDriverModule(flags,fileSet,modules,serverAddress));
    injector.getInstance(ActionRunner.class).runActions();
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
  }
catch (  Exception e) {
    System.err.println(e);
    System.exit(1);
  }
}",0.9931445603576752
7076,"/** 
 * For each plugin, the specified jar is loaded, then the specified class is extracted from the Jar.
 * @return 
 */
@SuppressWarnings(""String_Node_Str"") public List<Module> load(List<Plugin> plugins){
  List<Module> modules=new LinkedList<Module>();
  for (  Plugin plugin : plugins) {
    try {
      URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{new URL(""String_Node_Str"" + plugin.getPathToJar() + ""String_Node_Str"")},getClass().getClassLoader());
      Class<?> module=Class.forName(plugin.getModuleName(),true,urlClassLoader);
      modules.add(((Class<? extends Module>)Module.class.asSubclass(module)).newInstance());
    }
 catch (    InstantiationException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    MalformedURLException e) {
      throw new RuntimeException(e);
    }
catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
  return modules;
}","/** 
 * For each plugin, the specified jar is loaded, then the specified class is extracted from the Jar.
 * @return a list of {@code Module}
 */
@SuppressWarnings(""String_Node_Str"") public List<Module> load(List<Plugin> plugins){
  List<Module> modules=new LinkedList<Module>();
  for (  Plugin plugin : plugins) {
    try {
      URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{new URL(""String_Node_Str"" + plugin.getPathToJar() + ""String_Node_Str"")},getClass().getClassLoader());
      Class<?> module=Class.forName(plugin.getModuleName(),true,urlClassLoader);
      modules.add(((Class<? extends Module>)Module.class.asSubclass(module)).newInstance());
    }
 catch (    InstantiationException e) {
      throw new RuntimeException(e);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
catch (    MalformedURLException e) {
      throw new RuntimeException(e);
    }
catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
  return modules;
}",0.9881422924901184
7077,"public void translate(String url){
  cache.put(url,""String_Node_Str"" + idGenerator.generate());
}","public void translate(String url) throws MalformedURLException {
  URL netUrl=new URL(url);
  String file=netUrl.getFile();
  if (file.length() == 0) {
    file=""String_Node_Str"";
  }
  cache.put(url,file);
}",0.360655737704918
7078,"@Override protected URL proxyHttpURL(String scheme,String serverName,int serverPort,String uri) throws MalformedURLException {
  HttpServletRequest request=threadLocal.get();
  return getForwardingUrl(scheme,serverName,serverPort,uri,request.getParameter(""String_Node_Str""),request.getHeader(""String_Node_Str""));
}","@Override protected URL proxyHttpURL(String scheme,String serverName,int serverPort,String uri) throws MalformedURLException {
  if (!uri.equals(""String_Node_Str"")) {
    HttpServletRequest request=threadLocal.get();
    return getForwardingUrl(scheme,serverName,serverPort,uri,request.getParameter(""String_Node_Str""),request.getHeader(""String_Node_Str""));
  }
 else {
    return super.proxyHttpURL(scheme,serverName,serverPort,uri);
  }
}",0.8339973439575034
7079,"@Override protected void configure(){
  bind(PrintStream.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(out);
  bind(ResponsePrinterFactory.class).to(XmlResponsePrinterFactory.class);
}","@Override protected void configure(){
  bind(PrintStream.class).annotatedWith(Names.named(""String_Node_Str"")).toInstance(out);
  bind(ResponsePrinterFactory.class).to(PrintStreamResponsePrinterFactory.class);
}",0.9660194174757282
7080,"public BrowserButtonPanel(Composite parent,int style){
  super(parent,style);
  icons=new Icons();
  IPreferenceStore preferenceStore=Activator.getDefault().getPreferenceStore();
  GridLayout gridLayout=new GridLayout(5,true);
  gridLayout.horizontalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginWidth=0;
  setLayout(gridLayout);
  GridData browserLayoutData=new GridData();
  browserLayoutData.grabExcessHorizontalSpace=true;
  browserLayoutData.horizontalAlignment=SWT.FILL;
  setLayoutData(browserLayoutData);
  GridData buttonGridData=new GridData();
  buttonGridData.horizontalAlignment=SWT.CENTER;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.minimumWidth=42;
  ffIcon=new Button(this,SWT.FLAT);
  ffIcon.setImage(icons.getFirefoxDisabledIcon());
  ffIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore.getString(WorkbenchPreferencePage.FIREFOX_PATH)));
  ffIcon.setLayoutData(buttonGridData);
  chromeIcon=new Button(this,SWT.FLAT);
  chromeIcon.setImage(icons.getChromeDisabledIcon());
  chromeIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore.getString(WorkbenchPreferencePage.CHROME_PATH)));
  chromeIcon.setLayoutData(buttonGridData);
  safariIcon=new Button(this,SWT.FLAT);
  safariIcon.setImage(icons.getSafariDisabledIcon());
  safariIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore.getString(WorkbenchPreferencePage.SAFARI_PATH)));
  safariIcon.setLayoutData(buttonGridData);
  ieIcon=new Button(this,SWT.FLAT);
  ieIcon.setImage(icons.getIEDisabledIcon());
  ieIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore.getString(WorkbenchPreferencePage.IE_PATH)));
  ieIcon.setLayoutData(buttonGridData);
  operaIcon=new Button(this,SWT.FLAT);
  operaIcon.setImage(icons.getOperaDisabledIcon());
  operaIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore.getString(WorkbenchPreferencePage.OPERA_PATH)));
  operaIcon.setLayoutData(buttonGridData);
}","public BrowserButtonPanel(Composite parent,int style){
  super(parent,style);
  icons=new Icons();
  IPreferenceStore preferenceStore=Activator.getDefault().getPreferenceStore();
  GridLayout gridLayout=new GridLayout(5,true);
  gridLayout.horizontalSpacing=0;
  gridLayout.makeColumnsEqualWidth=true;
  gridLayout.marginWidth=0;
  setLayout(gridLayout);
  GridData browserLayoutData=new GridData();
  browserLayoutData.grabExcessHorizontalSpace=true;
  browserLayoutData.horizontalAlignment=SWT.FILL;
  setLayoutData(browserLayoutData);
  GridData buttonGridData=new GridData();
  buttonGridData.horizontalAlignment=SWT.CENTER;
  buttonGridData.grabExcessHorizontalSpace=true;
  buttonGridData.minimumWidth=42;
  ffIcon=new Button(this,SWT.FLAT);
  ffIcon.setImage(icons.getFirefoxDisabledIcon());
  ffIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore,WorkbenchPreferencePage.FIREFOX_PATH));
  ffIcon.setLayoutData(buttonGridData);
  chromeIcon=new Button(this,SWT.FLAT);
  chromeIcon.setImage(icons.getChromeDisabledIcon());
  chromeIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore,WorkbenchPreferencePage.CHROME_PATH));
  chromeIcon.setLayoutData(buttonGridData);
  safariIcon=new Button(this,SWT.FLAT);
  safariIcon.setImage(icons.getSafariDisabledIcon());
  safariIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore,WorkbenchPreferencePage.SAFARI_PATH));
  safariIcon.setLayoutData(buttonGridData);
  ieIcon=new Button(this,SWT.FLAT);
  ieIcon.setImage(icons.getIEDisabledIcon());
  ieIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore,WorkbenchPreferencePage.IE_PATH));
  ieIcon.setLayoutData(buttonGridData);
  operaIcon=new Button(this,SWT.FLAT);
  operaIcon.setImage(icons.getOperaDisabledIcon());
  operaIcon.addSelectionListener(new BrowserLaunchCapableSelectionListener(preferenceStore,WorkbenchPreferencePage.OPERA_PATH));
  operaIcon.setLayoutData(buttonGridData);
}",0.9840803330884154
7081,"public void widgetSelected(SelectionEvent e){
  try {
    if (pathToBrowser == null || ""String_Node_Str"".equals(pathToBrowser.trim())) {
      return;
    }
    int port=Activator.getDefault().getPreferenceStore().getInt(WorkbenchPreferencePage.PREFERRED_SERVER_PORT);
    String serverUrl=format(Server.SERVER_CAPTURE_URL,port);
    String os=System.getProperty(""String_Node_Str"");
    if (os.toLowerCase().contains(""String_Node_Str"")) {
      String[] cmd=new String[]{""String_Node_Str"",""String_Node_Str"",pathToBrowser,serverUrl};
      Runtime.getRuntime().exec(cmd);
    }
 else {
      String[] cmd=new String[]{pathToBrowser,serverUrl};
      Runtime.getRuntime().exec(cmd);
    }
  }
 catch (  IOException ioe) {
  }
}","public void widgetSelected(SelectionEvent e){
  try {
    String pathToBrowser=preferenceStore.getString(browserName);
    if (pathToBrowser == null || ""String_Node_Str"".equals(pathToBrowser.trim())) {
      return;
    }
    int port=preferenceStore.getInt(WorkbenchPreferencePage.PREFERRED_SERVER_PORT);
    String serverUrl=format(Server.SERVER_CAPTURE_URL,port);
    String os=System.getProperty(""String_Node_Str"");
    if (os.toLowerCase().contains(""String_Node_Str"")) {
      String[] cmd=new String[]{""String_Node_Str"",""String_Node_Str"",pathToBrowser,serverUrl};
      Runtime.getRuntime().exec(cmd);
    }
 else {
      String[] cmd=new String[]{pathToBrowser,serverUrl};
      Runtime.getRuntime().exec(cmd);
    }
  }
 catch (  IOException ioe) {
  }
}",0.914593140551446
7082,"public BrowserLaunchCapableSelectionListener(String pathToBrowser){
  this.pathToBrowser=pathToBrowser;
}","public BrowserLaunchCapableSelectionListener(IPreferenceStore preferenceStore,String browserName){
  this.preferenceStore=preferenceStore;
  this.browserName=browserName;
}",0.628158844765343
7083,"public FileSource getFileSource(){
  return fileSource;
}","public FileSource getFileSource(){
  return file;
}",0.9444444444444444
7084,"public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<FileInfo> filesToRequest=new LinkedHashSet<FileInfo>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info);
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info);
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo);
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info);
      }
    }
    Set<FileInfo> filteredFilesToRequest=filterServeOnlyFiles(clientFileSet,filesToRequest);
    writer.write(gson.toJson(filteredFilesToRequest));
  }
  writer.flush();
}","public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<FileInfo> filesToRequest=new LinkedHashSet<FileInfo>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info);
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info);
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo);
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info);
      }
    }
    Set<FileInfo> filteredFilesToRequest=filterServeOnlyFiles(filesToRequest);
    writer.write(gson.toJson(filteredFilesToRequest));
  }
  writer.flush();
}",0.9955891619407689
7085,"private Set<FileInfo> filterServeOnlyFiles(Collection<FileInfo> clientFileSet,Set<FileInfo> filesToRequest){
  Set<FileInfo> filteredFilesToRequest=new LinkedHashSet<FileInfo>();
  Set<String> cachedFiles=filesCache.getAllFileNames();
  for (  FileInfo fileInfo : clientFileSet) {
    if (filesToRequest.contains(fileInfo)) {
      if (!fileInfo.isServeOnly() || !cachedFiles.contains(fileInfo.getFileName()) || filesCache.getFileInfo(fileInfo.getFileName()).getTimestamp() < fileInfo.getTimestamp()) {
        filteredFilesToRequest.add(fileInfo);
      }
    }
  }
  return filteredFilesToRequest;
}","private Set<FileInfo> filterServeOnlyFiles(Set<FileInfo> filesToRequest){
  Set<FileInfo> filteredFilesToRequest=new LinkedHashSet<FileInfo>();
  Set<String> cachedFiles=filesCache.getAllFileNames();
  for (  FileInfo fileInfo : filesToRequest) {
    if (!fileInfo.isServeOnly() || !cachedFiles.contains(fileInfo.getFileName()) || filesCache.getFileInfo(fileInfo.getFileName()).getTimestamp() < fileInfo.getTimestamp()) {
      filteredFilesToRequest.add(fileInfo);
    }
  }
  return filteredFilesToRequest;
}",0.918091809180918
7086,"public String getBasePath(){
  if (basePath.equals(""String_Node_Str"")) {
    basePath=fileSrc.substring(6);
  }
  return basePath;
}","public String getBasePath(){
  if (basePath == null) {
    basePath=fileSrc.substring(6);
  }
  return basePath;
}",0.8780487804878049
7087,"public void addFiles(Set<FileInfo> fileSet){
  this.fileSet.removeAll(fileSet);
  this.fileSet.addAll(fileSet);
}","public void addFiles(Collection<FileInfo> fileSet){
  this.fileSet.removeAll(fileSet);
  this.fileSet.addAll(fileSet);
}",0.96137339055794
7088,"private Set<FileInfo> resolveFiles(List<String> files,boolean serveOnly){
  if (files != null) {
    Set<FileInfo> resolvedFiles=new LinkedHashSet<FileInfo>();
    for (    String f : files) {
      boolean isPatch=f.startsWith(""String_Node_Str"");
      if (isPatch) {
        String[] tokens=f.split(""String_Node_Str"",2);
        f=tokens[1].trim();
      }
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(new FileInfo(f,-1,false,false));
      }
 else {
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File testFile=file.getAbsoluteFile();
        File dir=testFile.getParentFile().getAbsoluteFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null) {
          System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          System.exit(1);
        }
        Arrays.sort(filteredFiles,String.CASE_INSENSITIVE_ORDER);
        for (        String filteredFile : filteredFiles) {
          String resolvedFile=pathResolver.resolvePath(dir.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str""));
          resolvedFiles.add(new FileInfo(resolvedFile,file.lastModified(),isPatch,serveOnly));
        }
      }
    }
    return resolvedFiles;
  }
  return Collections.emptySet();
}","private Set<FileInfo> resolveFiles(List<String> files,boolean serveOnly){
  if (files != null) {
    Set<FileInfo> resolvedFiles=new LinkedHashSet<FileInfo>();
    for (    String f : files) {
      boolean isPatch=f.startsWith(""String_Node_Str"");
      if (isPatch) {
        String[] tokens=f.split(""String_Node_Str"",2);
        f=tokens[1].trim();
      }
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(new FileInfo(f,-1,false,false));
      }
 else {
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File testFile=file.getAbsoluteFile();
        File dir=testFile.getParentFile().getAbsoluteFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null) {
          System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          System.exit(1);
        }
        Arrays.sort(filteredFiles,String.CASE_INSENSITIVE_ORDER);
        for (        String filteredFile : filteredFiles) {
          String resolvedFilePath=pathResolver.resolvePath(dir.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str""));
          File resolvedFile=new File(resolvedFilePath);
          resolvedFiles.add(new FileInfo(resolvedFilePath,resolvedFile.lastModified(),isPatch,serveOnly));
        }
      }
    }
    return resolvedFiles;
  }
  return Collections.emptySet();
}",0.9730069052102952
7089,"public void testGetBrowserName() throws Exception {
  UserAgentParser parser=null;
  parser=new UserAgentParser();
  parser.parse(CHROME_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_LINUX);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_MACOS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(SAFARI_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(SAFARI_MACOS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(IE_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
}","public void testGetBrowserName() throws Exception {
  UserAgentParser parser=null;
  parser=new UserAgentParser();
  parser.parse(CHROME_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_LINUX);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(FIREFOX_MACOS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(SAFARI_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(SAFARI_MACOS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(IE_WINDOWS);
  assertEquals(""String_Node_Str"",parser.getName());
  parser=new UserAgentParser();
  parser.parse(""String_Node_Str"");
  assertEquals(""String_Node_Str"",parser.getName());
}",0.9372693726937268
7090,"private boolean sameFiles(Collection<FileInfo> filesToUpload,List<FileInfo> fileSet){
  if (filesToUpload.size() != fileSet.size()) {
    return false;
  }
  for (  FileInfo info : fileSet) {
    if (!filesToUpload.contains(info)) {
      return false;
    }
  }
  return true;
}","private boolean sameFiles(Collection<FileInfo> filesToUpload,List<FileInfo> fileSet){
  for (  FileInfo info : fileSet) {
    if (!info.isServeOnly() && !filesToUpload.contains(info)) {
      return false;
    }
  }
  return true;
}",0.6653620352250489
7091,"public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<FileInfo> filesToRequest=new LinkedHashSet<FileInfo>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info);
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info);
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo);
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info);
      }
    }
    Set<FileInfo> filteredFilesToRequest=filterServeOnlyFiles(clientFileSet,filesToRequest);
    writer.write(gson.toJson(filteredFilesToRequest));
  }
  writer.flush();
}","public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<FileInfo> filesToRequest=new LinkedHashSet<FileInfo>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info);
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info);
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo);
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"") || browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info);
      }
    }
    Set<FileInfo> filteredFilesToRequest=filterServeOnlyFiles(clientFileSet,filesToRequest);
    writer.write(gson.toJson(filteredFilesToRequest));
  }
  writer.flush();
}",0.9568062827225132
7092,"public static void main(String[] args){
  FlagsImpl flags=new FlagsImpl();
  CmdLineParser parser=new CmdLineParser(flags);
  if (args.length == 0) {
    parser.printUsage(System.out);
    System.exit(0);
  }
  try {
    parser.parseArgument(args);
    if (flags.getDisplayHelp()) {
      parser.printUsage(System.out);
      System.exit(0);
    }
    File config=new File(flags.getConfig());
    Set<FileInfo> fileSet=new LinkedHashSet<FileInfo>();
    List<Class<? extends Module>> plugins=null;
    String defaultServerAddress=null;
    if (flags.getTests().size() > 0 || flags.getReset() || !flags.getArguments().isEmpty() || flags.getPreloadFiles() || flags.getDryRun()) {
      if (config.exists()) {
        ConfigurationParser configParser=new ConfigurationParser(config.getParentFile());
        PluginLoader pluginLoader=new PluginLoader();
        try {
          configParser.parse(new FileInputStream(flags.getConfig()));
          fileSet=configParser.getFilesList();
          defaultServerAddress=configParser.getServer();
          plugins=pluginLoader.load(configParser.getPlugins());
        }
 catch (        FileNotFoundException e) {
          System.err.println(e);
          System.exit(1);
        }
      }
    }
    Guice.createInjector(new JsTestDriverModule(flags,fileSet,defaultServerAddress,plugins)).getInstance(ActionRunner.class).runActions();
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
    parser.printUsage(System.err);
  }
catch (  Exception e) {
    System.err.println(e);
    System.exit(1);
  }
}","public static void main(String[] args){
  FlagsImpl flags=new FlagsImpl();
  CmdLineParser parser=new CmdLineParser(flags);
  if (args.length == 0) {
    parser.printUsage(System.out);
    System.exit(0);
  }
  try {
    parser.parseArgument(args);
    if (flags.getDisplayHelp()) {
      parser.printUsage(System.out);
      System.exit(0);
    }
    File config=new File(flags.getConfig());
    Set<FileInfo> fileSet=new LinkedHashSet<FileInfo>();
    List<Class<? extends Module>> plugins=new LinkedList<Class<? extends Module>>();
    String defaultServerAddress=null;
    if (flags.getTests().size() > 0 || flags.getReset() || !flags.getArguments().isEmpty() || flags.getPreloadFiles() || flags.getDryRun()) {
      if (config.exists()) {
        ConfigurationParser configParser=new ConfigurationParser(config.getParentFile());
        PluginLoader pluginLoader=new PluginLoader();
        try {
          configParser.parse(new FileInputStream(flags.getConfig()));
          fileSet=configParser.getFilesList();
          defaultServerAddress=configParser.getServer();
          plugins=pluginLoader.load(configParser.getPlugins());
        }
 catch (        FileNotFoundException e) {
          System.err.println(e);
          System.exit(1);
        }
      }
    }
    Guice.createInjector(new JsTestDriverModule(flags,fileSet,defaultServerAddress,plugins)).getInstance(ActionRunner.class).runActions();
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
    parser.printUsage(System.err);
  }
catch (  Exception e) {
    System.err.println(e);
    System.exit(1);
  }
}",0.9864566929133858
7093,"public void parse(String userAgent){
  String lowerCaseUserAgent=userAgent.toLowerCase();
  if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
 else   if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
 else   if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
  if (userAgent.contains(""String_Node_Str"")) {
    userAgentName=""String_Node_Str"";
    Matcher matcher=CHROME_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentVersion=matcher.group(1);
    }
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    userAgentName=""String_Node_Str"";
    Matcher matcher=MSIE_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentVersion=matcher.group(1);
    }
  }
 else {
    Matcher matcher=BROWSER_NAME_AND_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentName=matcher.group(1);
      userAgentVersion=matcher.group(2);
    }
  }
}","public void parse(String userAgent){
  String lowerCaseUserAgent=userAgent.toLowerCase();
  if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
 else   if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
 else   if (lowerCaseUserAgent.contains(""String_Node_Str"")) {
    userAgentOs=""String_Node_Str"";
  }
  if (userAgent.contains(""String_Node_Str"")) {
    userAgentName=""String_Node_Str"";
    Matcher matcher=CHROME_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentVersion=matcher.group(1);
    }
  }
 else   if (userAgent.contains(""String_Node_Str"")) {
    userAgentName=""String_Node_Str"";
    Matcher matcher=MSIE_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentVersion=matcher.group(1);
    }
  }
 else {
    Matcher matcher=BROWSER_NAME_AND_VERSION.matcher(userAgent);
    if (matcher.find()) {
      userAgentName=matcher.group(1);
      userAgentVersion=matcher.group(2);
    }
 else {
      userAgentName=userAgent;
    }
  }
}",0.9782503624939584
7094,"public void testNoBrowsers() throws Exception {
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null),null);
  List<Action> actions=builder.addTests(tests(),""String_Node_Str"",false,false).withLocalServerPort(999).usingFiles(files,false).build();
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(BrowserStartupAction.class);
  expectedActions.add(ThreadedActionsRunner.class);
  expectedActions.add(BrowserShutdownAction.class);
  expectedActions.add(ServerShutdownAction.class);
  this.<Action>assertSequence(expectedActions,actions);
}","public void testNoBrowsers() throws Exception {
  ActionSequenceBuilder builder=new ActionSequenceBuilder(new ActionFactory(null),null);
  List<Action> actions=builder.addTests(tests(),""String_Node_Str"",false,false).withLocalServerPort(999).usingFiles(files,false).build();
  List<Class<? extends Action>> expectedActions=new ArrayList<Class<? extends Action>>();
  expectedActions.add(ServerStartupAction.class);
  expectedActions.add(ThreadedActionsRunner.class);
  expectedActions.add(ServerShutdownAction.class);
  this.<Action>assertSequence(expectedActions,actions);
}",0.9096722621902478
7095,"public void testUploadFiles() throws Exception {
  MockServer server=new MockServer();
  Gson gson=new Gson();
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",1232,false);
  server.expect(""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo)) + ""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileReader fileReader=new MockFileReader();
  fileReader.addExpectation(fileInfo.getFileName(),""String_Node_Str"");
  CommandTask task=new CommandTask(new ActionFactory.ActionFactoryFileFilter(),stream,new LinkedHashSet<FileInfo>(Arrays.asList(fileInfo)),new LinkedHashSet<String>(),""String_Node_Str"",server,params,fileReader);
  task.run();
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}","public void testUploadFiles() throws Exception {
  MockServer server=new MockServer();
  Gson gson=new Gson();
  FileInfo fileInfo=new FileInfo(""String_Node_Str"",1232,false,false);
  server.expect(""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"" + gson.toJson(Arrays.asList(fileInfo)) + ""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"",""String_Node_Str"");
  server.expect(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  Map<String,String> params=new LinkedHashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  FakeResponseStream stream=new FakeResponseStream();
  MockFileReader fileReader=new MockFileReader();
  fileReader.addExpectation(fileInfo.getFileName(),""String_Node_Str"");
  CommandTask task=new CommandTask(new ActionFactory.ActionFactoryFileFilter(),stream,new LinkedHashSet<FileInfo>(Arrays.asList(fileInfo)),new LinkedHashSet<String>(),""String_Node_Str"",server,params,fileReader);
  task.run();
  Response response=stream.getResponse();
  assertEquals(""String_Node_Str"",response.getResponse());
  assertEquals(""String_Node_Str"",response.getBrowser().getName());
  assertEquals(""String_Node_Str"",response.getError());
  assertEquals(123L,response.getExecutionTime());
}",0.99774943735934
7096,"public void testAddFilesNameAndDataToMap() throws Exception {
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  capturedBrowsers.addSlave(new SlaveBrowser(new MockTime(0),""String_Node_Str"",new BrowserInfo()));
  Map<String,String> files=new HashMap<String,String>();
  FilesCache filesCache=new FilesCache(files);
  FileSetServlet fileSetServlet=new FileSetServlet(capturedBrowsers,filesCache);
  fileSetServlet.uploadFiles(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  assertEquals(2,filesCache.getFilesNumber());
  assertEquals(""String_Node_Str"",filesCache.getFileContent(""String_Node_Str""));
  assertEquals(""String_Node_Str"",filesCache.getFileContent(""String_Node_Str""));
}","public void testAddFilesNameAndDataToMap() throws Exception {
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  capturedBrowsers.addSlave(new SlaveBrowser(new MockTime(0),""String_Node_Str"",new BrowserInfo()));
  Map<String,FileData> files=new HashMap<String,FileData>();
  FilesCache filesCache=new FilesCache(files);
  FileSetServlet fileSetServlet=new FileSetServlet(capturedBrowsers,filesCache);
  fileSetServlet.uploadFiles(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  assertEquals(2,filesCache.getFilesNumber());
  assertEquals(""String_Node_Str"",filesCache.getFileContent(""String_Node_Str""));
  assertEquals(""String_Node_Str"",filesCache.getFileContent(""String_Node_Str""));
}",0.9801136363636364
7097,"public void testCaptureAddFilesToLoadAndRun() throws Exception {
  Map<String,String> files=new LinkedHashMap<String,String>();
  files.put(""String_Node_Str"",""String_Node_Str"");
  files.put(""String_Node_Str"",""String_Node_Str"");
  files.put(""String_Node_Str"",""String_Node_Str"");
  files.put(""String_Node_Str"",""String_Node_Str"");
  FilesCache cache=new FilesCache(files);
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  StandaloneRunnerServlet runnerServlet=new StandaloneRunnerServlet(new BrowserHunter(capturedBrowsers),cache,new StandaloneRunnerFilesFilterImpl(),new SlaveResourceService(""String_Node_Str""));
  runnerServlet.service(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SlaveBrowser slaveBrowser=capturedBrowsers.getBrowser(""String_Node_Str"");
  assertNotNull(slaveBrowser.peekCommand());
  Command cmd=slaveBrowser.dequeueCommand();
  assertNotNull(cmd);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",cmd.getCommand());
  assertNotNull(slaveBrowser.peekCommand());
  cmd=slaveBrowser.dequeueCommand();
  assertNotNull(cmd);
  assertEquals(""String_Node_Str"",cmd.getCommand());
}","public void testCaptureAddFilesToLoadAndRun() throws Exception {
  Map<String,FileData> files=new LinkedHashMap<String,FileData>();
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",30));
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",5));
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",53));
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",1));
  FilesCache cache=new FilesCache(files);
  CapturedBrowsers capturedBrowsers=new CapturedBrowsers();
  StandaloneRunnerServlet runnerServlet=new StandaloneRunnerServlet(new BrowserHunter(capturedBrowsers),cache,new StandaloneRunnerFilesFilterImpl(),new SlaveResourceService(""String_Node_Str""));
  runnerServlet.service(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SlaveBrowser slaveBrowser=capturedBrowsers.getBrowser(""String_Node_Str"");
  assertNotNull(slaveBrowser.peekCommand());
  Command cmd=slaveBrowser.dequeueCommand();
  assertNotNull(cmd);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",cmd.getCommand());
  assertNotNull(slaveBrowser.peekCommand());
  cmd=slaveBrowser.dequeueCommand();
  assertNotNull(cmd);
  assertEquals(""String_Node_Str"",cmd.getCommand());
}",0.8792
7098,"public void testEmptyReturnWhenFileNotPresent() throws Exception {
  TestResourceServlet servlet=new TestResourceServlet(new FilesCache(new HashMap<String,String>()));
  servlet.service(""String_Node_Str"",writer);
  assertEquals(0,out.toString().length());
}","public void testEmptyReturnWhenFileNotPresent() throws Exception {
  TestResourceServlet servlet=new TestResourceServlet(new FilesCache(new HashMap<String,FileData>()));
  servlet.service(""String_Node_Str"",writer);
  assertEquals(0,out.toString().length());
}",0.9728682170542636
7099,"public void testServeFile() throws Exception {
  Map<String,String> files=new HashMap<String,String>();
  files.put(""String_Node_Str"",""String_Node_Str"");
  files.put(""String_Node_Str"",""String_Node_Str"");
  FilesCache filesCache=new FilesCache(files);
  TestResourceServlet resourceServlet=new TestResourceServlet(filesCache);
  resourceServlet.service(""String_Node_Str"",writer);
  assertEquals(""String_Node_Str"",out.toString());
  out.reset();
  resourceServlet.service(""String_Node_Str"",writer);
  assertEquals(""String_Node_Str"",out.toString());
}","public void testServeFile() throws Exception {
  Map<String,FileData> files=new HashMap<String,FileData>();
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",-1));
  files.put(""String_Node_Str"",new FileData(""String_Node_Str"",""String_Node_Str"",20));
  FilesCache filesCache=new FilesCache(files);
  TestResourceServlet resourceServlet=new TestResourceServlet(filesCache);
  resourceServlet.service(""String_Node_Str"",writer);
  assertEquals(""String_Node_Str"",out.toString());
  out.reset();
  resourceServlet.service(""String_Node_Str"",writer);
  assertEquals(""String_Node_Str"",out.toString());
}",0.8581196581196581
7100,"public JsTestDriverClient getJsTestDriverClient(Set<String> files,Set<String> filesToServe,String serverAddress){
  Set<FileInfo> filesInfo=new LinkedHashSet<FileInfo>();
  for (  String file : files) {
    boolean isPatch=file.startsWith(""String_Node_Str"");
    if (isPatch) {
      String[] tokens=file.split(""String_Node_Str"",2);
      file=tokens[1].trim();
    }
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified(),isPatch));
  }
  for (  String file : filesToServe) {
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified(),false));
  }
  return new JsTestDriverClientImpl(new CommandTaskFactory(new ActionFactoryFileFilter(),fileReader),filesInfo,filesToServe,serverAddress,new HttpServer());
}","public JsTestDriverClient getJsTestDriverClient(Set<String> files,Set<String> filesToServe,String serverAddress){
  Set<FileInfo> filesInfo=new LinkedHashSet<FileInfo>();
  for (  String file : files) {
    boolean isPatch=file.startsWith(""String_Node_Str"");
    if (isPatch) {
      String[] tokens=file.split(""String_Node_Str"",2);
      file=tokens[1].trim();
    }
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified(),isPatch,false));
  }
  for (  String file : filesToServe) {
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified(),false,true));
  }
  return new JsTestDriverClientImpl(new CommandTaskFactory(new ActionFactoryFileFilter(),fileReader),filesInfo,filesToServe,serverAddress,new HttpServer());
}",0.9938513135830072
7101,"/** 
 * Wraps the current sequence of actions with the server start and stop actions. 
 */
private void addServerActions(List<Action> actions,boolean leaveServerRunning){
  if (preloadFiles) {
    for (    String file : fileSet) {
      files.put(file,ActionSequenceBuilder.readFile(this,file));
    }
  }
  ServerStartupAction serverStartupAction=actionFactory.getServerStartupAction(localServerPort,capturedBrowsers,new FilesCache(files));
  actions.add(0,serverStartupAction);
  if (!leaveServerRunning) {
    actions.add(new ServerShutdownAction(serverStartupAction));
  }
}","/** 
 * Wraps the current sequence of actions with the server start and stop actions. 
 */
private void addServerActions(List<Action> actions,boolean leaveServerRunning){
  if (preloadFiles) {
    for (    String file : fileSet) {
      files.put(file,new FileData(file,ActionSequenceBuilder.readFile(this,file),new File(file).lastModified()));
    }
  }
  ServerStartupAction serverStartupAction=actionFactory.getServerStartupAction(localServerPort,capturedBrowsers,new FilesCache(files));
  actions.add(0,serverStartupAction);
  if (!leaveServerRunning) {
    actions.add(new ServerShutdownAction(serverStartupAction));
  }
}",0.9593360995850624
7102,"/** 
 * Add the Browser startup and shutdown actions to the actions stack. 
 */
private void addBrowserControlActions(List<Action> actions){
  BrowserStartupAction browserStartupAction=new BrowserStartupAction(browsers,getServerAddress());
  capturedBrowsers.addObserver(browserStartupAction);
  actions.add(0,browserStartupAction);
  actions.add(new BrowserShutdownAction(browserStartupAction));
}","/** 
 * Add the Browser startup and shutdown actions to the actions stack. 
 */
private void addBrowserControlActions(List<Action> actions){
  if (!browsers.isEmpty()) {
    BrowserStartupAction browserStartupAction=new BrowserStartupAction(browsers,getServerAddress());
    capturedBrowsers.addObserver(browserStartupAction);
    actions.add(0,browserStartupAction);
    actions.add(new BrowserShutdownAction(browserStartupAction));
  }
}",0.951015531660693
7103,"public void service(String id,String start,String response,String done,PrintWriter writer){
  SlaveBrowser browser=browsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
    if (response != null && browser.isCommandRunning()) {
      Response res=gson.fromJson(response,Response.class);
      if (res.getResponse().contains(""String_Node_Str"")) {
        LoadedFiles loadedFiles=gson.fromJson(res.getResponse(),LoadedFiles.class);
        Collection<FileSource> successFiles=loadedFiles.getSuccessFiles();
        LinkedHashSet<FileInfo> fileInfos=new LinkedHashSet<FileInfo>();
        for (        FileSource f : successFiles) {
          fileInfos.add(new FileInfo(f.getFileSrc().substring(6),f.getTimestamp(),false));
        }
        browser.addFiles(fileInfos);
        Collection<String> errorFiles=loadedFiles.getErrorFiles();
        if (errorFiles.size() > 0) {
          browser.removeFiles(errorFiles);
        }
 else         if (loadedFiles.getMessage().equals(""String_Node_Str"")) {
          browser.resetFileSet();
        }
      }
      boolean isLast=done != null;
      browser.addResponse(response,isLast);
      if (!isLast) {
        writer.print(NOOP);
        writer.flush();
        return;
      }
    }
    Command command=null;
    if (start != null) {
      browser.resetFileSet();
      Command commandRunning=browser.getCommandRunning();
      if (commandRunning != null) {
        JsonCommand jsonCommand=gson.fromJson(commandRunning.getCommand(),JsonCommand.class);
        if (jsonCommand.getCommand().equals(JsonCommand.CommandType.RESET.getCommand())) {
          command=browser.getLastDequeuedCommand();
        }
      }
    }
 else {
      command=browser.dequeueCommand();
    }
    writer.print(command != null ? command.getCommand() : NOOP);
  }
  writer.flush();
}","public void service(String id,String start,String response,String done,PrintWriter writer){
  SlaveBrowser browser=browsers.getBrowser(id);
  if (browser != null) {
    browser.heartBeat();
    if (response != null && browser.isCommandRunning()) {
      Response res=gson.fromJson(response,Response.class);
      if (res.getResponse().contains(""String_Node_Str"")) {
        LoadedFiles loadedFiles=gson.fromJson(res.getResponse(),LoadedFiles.class);
        Collection<FileSource> successFiles=loadedFiles.getSuccessFiles();
        LinkedHashSet<FileInfo> fileInfos=new LinkedHashSet<FileInfo>();
        for (        FileSource f : successFiles) {
          fileInfos.add(new FileInfo(f.getFileSrc().substring(6),f.getTimestamp(),false,false));
        }
        browser.addFiles(fileInfos);
        Collection<String> errorFiles=loadedFiles.getErrorFiles();
        if (errorFiles.size() > 0) {
          browser.removeFiles(errorFiles);
        }
 else         if (loadedFiles.getMessage().equals(""String_Node_Str"")) {
          browser.resetFileSet();
        }
      }
      boolean isLast=done != null;
      browser.addResponse(response,isLast);
      if (!isLast) {
        writer.print(NOOP);
        writer.flush();
        return;
      }
    }
    Command command=null;
    if (start != null) {
      browser.resetFileSet();
      Command commandRunning=browser.getCommandRunning();
      if (commandRunning != null) {
        JsonCommand jsonCommand=gson.fromJson(commandRunning.getCommand(),JsonCommand.class);
        if (jsonCommand.getCommand().equals(JsonCommand.CommandType.RESET.getCommand())) {
          command=browser.getLastDequeuedCommand();
        }
      }
    }
 else {
      command=browser.dequeueCommand();
    }
    writer.print(command != null ? command.getCommand() : NOOP);
  }
  writer.flush();
}",0.9983624454148472
7104,"public FileInfo(String fileName,long timestamp,boolean isPatch){
  this.fileName=fileName;
  this.timestamp=timestamp;
  this.isPatch=isPatch;
}","public FileInfo(String fileName,long timestamp,boolean isPatch,boolean serveOnly){
  this.fileName=fileName;
  this.timestamp=timestamp;
  this.isPatch=isPatch;
  this.serveOnly=serveOnly;
}",0.8622754491017964
7105,"public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<String> filesToRequest=new LinkedHashSet<String>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info.getFileName());
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info.getFileName());
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo.getFileName());
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info.getFileName());
      }
    }
    writer.write(gson.toJson(filesToRequest));
  }
  writer.flush();
}","public void checkFileSet(String fileSet,String browserId,PrintWriter writer){
  Collection<FileInfo> clientFileSet=gson.fromJson(fileSet,new TypeToken<Collection<FileInfo>>(){
  }
.getType());
  SlaveBrowser browser=capturedBrowsers.getBrowser(browserId);
  Set<FileInfo> browserFileSet=browser.getFileSet();
  Set<String> filesToRequest=new LinkedHashSet<String>();
  if (browserFileSet.isEmpty() || !clientFileSet.containsAll(browserFileSet)) {
    for (    FileInfo info : clientFileSet) {
      filesToRequest.add(info.getFileName());
    }
  }
 else {
    Set<FileInfo> diff=new LinkedHashSet<FileInfo>(clientFileSet);
    diff.removeAll(browserFileSet);
    for (    FileInfo info : diff) {
      filesToRequest.add(info.getFileName());
    }
    for (    FileInfo browserFileInfo : browserFileSet) {
      for (      FileInfo clientFileInfo : clientFileSet) {
        if (clientFileInfo.equals(browserFileInfo) && clientFileInfo.getTimestamp() > browserFileInfo.getTimestamp()) {
          filesToRequest.add(clientFileInfo.getFileName());
          break;
        }
      }
    }
  }
  if (!filesToRequest.isEmpty()) {
    if (browser.getBrowserInfo().getName().contains(""String_Node_Str"")) {
      filesToRequest.clear();
      for (      FileInfo info : clientFileSet) {
        filesToRequest.add(info.getFileName());
      }
    }
    Set<String> filteredFilesToRequest=filterServeOnlyFiles(clientFileSet,filesToRequest);
    writer.write(gson.toJson(filteredFilesToRequest));
  }
  writer.flush();
}",0.9476923076923076
7106,"public void uploadFiles(String id,String data){
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  for (  FileData f : filesData) {
    String path=f.getFile();
    String fileData=f.getData();
    filesCache.addFile(path,fileData);
  }
}","public void uploadFiles(String id,String data){
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  for (  FileData f : filesData) {
    String path=f.getFile();
    filesCache.addFile(path,f);
  }
}",0.927797833935018
7107,"public String getFileContent(String fileName){
  return files.get(fileName);
}","public String getFileContent(String fileName){
  FileData fileData=files.get(fileName);
  return fileData != null ? fileData.getData() : ""String_Node_Str"";
}",0.6297872340425532
7108,"public FilesCache(Map<String,String> files){
  this.files=files;
}","public FilesCache(Map<String,FileData> files){
  this.files=files;
}",0.9104477611940298
7109,"public void addFile(String path,String fileData){
  files.put(path,fileData);
}","public void addFile(String path,FileData fileData){
  files.put(path,fileData);
}",0.925
7110,"public JsTestDriverClient getJsTestDriverClient(Set<String> files,String serverAddress){
  Set<FileInfo> filesInfo=new LinkedHashSet<FileInfo>();
  for (  String file : files) {
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified()));
  }
  return new JsTestDriverClientImpl(new CommandTaskFactory(new JsTestDriverFileFilter(){
    public String filterFile(    String content,    boolean reload){
      return content;
    }
    public Set<String> resolveFilesDeps(    String file){
      Set<String> set=new LinkedHashSet<String>();
      set.add(file);
      return set;
    }
  }
),filesInfo,serverAddress,new HttpServer());
}","public JsTestDriverClient getJsTestDriverClient(Set<String> files,String serverAddress){
  Set<FileInfo> filesInfo=new LinkedHashSet<FileInfo>();
  for (  String file : files) {
    boolean isPatch=file.startsWith(""String_Node_Str"");
    if (isPatch) {
      String[] tokens=file.split(""String_Node_Str"");
      file=tokens[1].trim();
    }
    filesInfo.add(new FileInfo(file,(file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) ? -1 : new File(file).lastModified(),isPatch));
  }
  return new JsTestDriverClientImpl(new CommandTaskFactory(new JsTestDriverFileFilter(){
    public String filterFile(    String content,    boolean reload){
      return content;
    }
    public Set<String> resolveFilesDeps(    String file){
      Set<String> set=new LinkedHashSet<String>();
      set.add(file);
      return set;
    }
  }
),filesInfo,serverAddress,new HttpServer());
}",0.8534322820037106
7111,"private void uploadFileSet(){
  Map<String,String> fileSetParams=new LinkedHashMap<String,String>();
  fileSetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
  fileSetParams.put(""String_Node_Str"",gson.toJson(fileSet));
  String postResult=server.post(baseUrl + ""String_Node_Str"",fileSetParams);
  if (postResult.length() > 0) {
    Collection<String> filesToUpload=gson.fromJson(postResult,new TypeToken<Collection<String>>(){
    }
.getType());
    boolean shouldReset=sameFiles(filesToUpload,fileSet);
    if (shouldReset) {
      JsonCommand cmd=new JsonCommand(CommandType.RESET,EMPTY_ARRAYLIST);
      Map<String,String> resetParams=new LinkedHashMap<String,String>();
      resetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      resetParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",resetParams);
      server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
    }
    List<FileData> filesData=new ArrayList<FileData>();
    List<String> filesSrc=new ArrayList<String>();
    Set<String> finalFilesToUpload=new LinkedHashSet<String>();
    for (    String file : filesToUpload) {
      finalFilesToUpload.addAll(filter.resolveFilesDeps(file));
    }
    for (    String file : finalFilesToUpload) {
      String readFile=null;
      long timestamp=-1;
      if (file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) {
        filesSrc.add(file);
        readFile=""String_Node_Str"";
      }
 else {
        filesSrc.add(""String_Node_Str"" + file);
        readFile=filter.filterFile(readFile(file),!shouldReset);
        timestamp=getTimestamp(file);
      }
      filesData.add(new FileData(file,readFile,timestamp));
    }
    Map<String,String> loadFileParams=new LinkedHashMap<String,String>();
    loadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
    loadFileParams.put(""String_Node_Str"",gson.toJson(filesData));
    server.post(baseUrl + ""String_Node_Str"",loadFileParams);
    JsonCommand cmd=new JsonCommand(CommandType.LOADTEST,filesSrc);
    loadFileParams.put(""String_Node_Str"",gson.toJson(cmd));
    server.post(baseUrl + ""String_Node_Str"",loadFileParams);
    String jsonResponse=server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
    StreamMessage message=gson.fromJson(jsonResponse,StreamMessage.class);
    Response response=message.getResponse();
    LoadedFiles loadedFiles=gson.fromJson(response.getResponse(),LoadedFiles.class);
    String loadStatus=loadedFiles.getMessage();
    if (loadStatus.length() > 0) {
      System.err.println(loadStatus);
    }
  }
}","private void uploadFileSet(){
  Map<String,String> fileSetParams=new LinkedHashMap<String,String>();
  Map<String,List<String>> patchMap=new HashMap<String,List<String>>();
  List<FileInfo> patchLessFileSet=createPatchLessFileSet(fileSet,patchMap);
  fileSetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
  fileSetParams.put(""String_Node_Str"",gson.toJson(patchLessFileSet));
  String postResult=server.post(baseUrl + ""String_Node_Str"",fileSetParams);
  if (postResult.length() > 0) {
    Collection<String> filesToUpload=gson.fromJson(postResult,new TypeToken<Collection<String>>(){
    }
.getType());
    boolean shouldReset=sameFiles(filesToUpload,fileSet);
    if (shouldReset) {
      JsonCommand cmd=new JsonCommand(CommandType.RESET,EMPTY_ARRAYLIST);
      Map<String,String> resetParams=new LinkedHashMap<String,String>();
      resetParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
      resetParams.put(""String_Node_Str"",gson.toJson(cmd));
      server.post(baseUrl + ""String_Node_Str"",resetParams);
      server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
    }
    List<FileData> filesData=new ArrayList<FileData>();
    List<String> filesSrc=new ArrayList<String>();
    Set<String> finalFilesToUpload=new LinkedHashSet<String>();
    for (    String file : filesToUpload) {
      finalFilesToUpload.addAll(filter.resolveFilesDeps(file));
    }
    for (    String file : finalFilesToUpload) {
      StringBuilder fileContent=new StringBuilder();
      long timestamp=-1;
      if (file.startsWith(""String_Node_Str"") || file.startsWith(""String_Node_Str"")) {
        filesSrc.add(file);
        fileContent.append(""String_Node_Str"");
      }
 else {
        filesSrc.add(""String_Node_Str"" + file);
        fileContent.append(filter.filterFile(readFile(file),!shouldReset));
        List<String> patches=patchMap.get(file);
        if (patches != null) {
          for (          String patch : patches) {
            fileContent.append(readFile(patch));
          }
        }
        timestamp=getTimestamp(file);
      }
      filesData.add(new FileData(file,fileContent.toString(),timestamp));
    }
    Map<String,String> loadFileParams=new LinkedHashMap<String,String>();
    loadFileParams.put(""String_Node_Str"",params.get(""String_Node_Str""));
    loadFileParams.put(""String_Node_Str"",gson.toJson(filesData));
    server.post(baseUrl + ""String_Node_Str"",loadFileParams);
    JsonCommand cmd=new JsonCommand(CommandType.LOADTEST,filesSrc);
    loadFileParams.put(""String_Node_Str"",gson.toJson(cmd));
    server.post(baseUrl + ""String_Node_Str"",loadFileParams);
    String jsonResponse=server.fetch(baseUrl + ""String_Node_Str"" + params.get(""String_Node_Str""));
    StreamMessage message=gson.fromJson(jsonResponse,StreamMessage.class);
    Response response=message.getResponse();
    LoadedFiles loadedFiles=gson.fromJson(response.getResponse(),LoadedFiles.class);
    String loadStatus=loadedFiles.getMessage();
    if (loadStatus.length() > 0) {
      System.err.println(loadStatus);
    }
  }
}",0.9039270687237028
7112,"private Set<String> resolveFiles(List<String> files){
  if (files != null) {
    Set<String> resolvedFiles=new LinkedHashSet<String>();
    for (    String f : files) {
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(f);
      }
 else {
        File testFile=new File(f);
        String relativeDir=testFile.getParent() == null ? ""String_Node_Str"" : testFile.getParent();
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File dir=file.getParentFile() == null ? new File(""String_Node_Str"") : file.getParentFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null) {
          System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          System.exit(1);
        }
        String normalizedBasePath=basePath != null ? basePath.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"";
        for (        String filteredFile : filteredFiles) {
          String normalizedRelativeDir=relativeDir.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (normalizedRelativeDir.length() > 0) {
            normalizedRelativeDir+=""String_Node_Str"";
          }
          resolvedFiles.add(String.format(""String_Node_Str"",normalizedBasePath,normalizedRelativeDir,filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
      }
    }
    return resolvedFiles;
  }
  return EMPTY_SET;
}","private Set<String> resolveFiles(List<String> files){
  if (files != null) {
    Set<String> resolvedFiles=new LinkedHashSet<String>();
    for (    String f : files) {
      boolean isPatch=f.startsWith(""String_Node_Str"");
      if (isPatch) {
        String[] tokens=f.split(""String_Node_Str"");
        f=tokens[1].trim();
      }
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(f);
      }
 else {
        File testFile=new File(f);
        String relativeDir=testFile.getParent() == null ? ""String_Node_Str"" : testFile.getParent();
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File dir=file.getParentFile() == null ? new File(""String_Node_Str"") : file.getParentFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null) {
          System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          System.exit(1);
        }
        String normalizedBasePath=basePath != null ? basePath.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"";
        for (        String filteredFile : filteredFiles) {
          String normalizedRelativeDir=relativeDir.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (normalizedRelativeDir.length() > 0) {
            normalizedRelativeDir+=""String_Node_Str"";
          }
          String resolvedFile=String.format(""String_Node_Str"",normalizedBasePath,normalizedRelativeDir,filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str""));
          if (isPatch) {
            resolvedFile=""String_Node_Str"" + resolvedFile;
          }
          resolvedFiles.add(resolvedFile);
        }
      }
    }
    return resolvedFiles;
  }
  return EMPTY_SET;
}",0.9111361079865016
7113,"public FileInfo(String fileName,long timestamp){
  this.fileName=fileName;
  this.timestamp=timestamp;
}","public FileInfo(String fileName,long timestamp,boolean isPatch){
  this.fileName=fileName;
  this.timestamp=timestamp;
  this.isPatch=isPatch;
}",0.8387096774193549
7114,"public void uploadFiles(String id,String data){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  LinkedHashSet<FileInfo> filesUploaded=new LinkedHashSet<FileInfo>();
  for (  FileData f : filesData) {
    String path=f.getFile();
    String fileData=f.getData();
    files.put(path,fileData);
    files.put(resolvePath(path),fileData);
    filesUploaded.add(new FileInfo(f.getFile(),f.getTimestamp()));
  }
  browser.addFiles(filesUploaded);
}","public void uploadFiles(String id,String data){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  LinkedHashSet<FileInfo> filesUploaded=new LinkedHashSet<FileInfo>();
  for (  FileData f : filesData) {
    String path=f.getFile();
    String fileData=f.getData();
    files.put(path,fileData);
    files.put(resolvePath(path),fileData);
    filesUploaded.add(new FileInfo(f.getFile(),f.getTimestamp(),false));
  }
  browser.addFiles(filesUploaded);
}",0.994671403197158
7115,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  service(resp.getWriter());
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PrintWriter writer=resp.getWriter();
  if (""String_Node_Str"".equals(req.getRequestURI())) {
    service(writer);
  }
 else {
    resp.setStatus(204);
    writer.flush();
  }
}",0.5476772616136919
7116,"private Set<String> resolveFiles(List<String> files){
  if (files != null) {
    Set<String> resolvedFiles=new LinkedHashSet<String>();
    for (    String f : files) {
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(f);
      }
 else {
        File testFile=new File(f);
        String relativeDir=testFile.getParent() == null ? ""String_Node_Str"" : testFile.getParent();
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File dir=file.getParentFile() == null ? new File(""String_Node_Str"") : file.getParentFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        for (        String filteredFile : filteredFiles) {
          String normalizedRelativeDir=relativeDir.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (normalizedRelativeDir.length() > 0) {
            normalizedRelativeDir+=""String_Node_Str"";
          }
          resolvedFiles.add(String.format(""String_Node_Str"",normalizedRelativeDir,filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
      }
    }
    return resolvedFiles;
  }
  return EMPTY_SET;
}","private Set<String> resolveFiles(List<String> files){
  if (files != null) {
    Set<String> resolvedFiles=new LinkedHashSet<String>();
    for (    String f : files) {
      if (f.startsWith(""String_Node_Str"") || f.startsWith(""String_Node_Str"")) {
        resolvedFiles.add(f);
      }
 else {
        File testFile=new File(f);
        String relativeDir=testFile.getParent() == null ? ""String_Node_Str"" : testFile.getParent();
        File file=basePath != null ? new File(basePath,f) : new File(f);
        File dir=file.getParentFile() == null ? new File(""String_Node_Str"") : file.getParentFile();
        final String pattern=file.getName();
        String[] filteredFiles=dir.list(new GlobFilenameFilter(pattern,GlobCompiler.DEFAULT_MASK | GlobCompiler.CASE_INSENSITIVE_MASK));
        if (filteredFiles == null) {
          System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
          System.exit(1);
        }
        String normalizedBasePath=basePath != null ? basePath.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" : ""String_Node_Str"";
        for (        String filteredFile : filteredFiles) {
          String normalizedRelativeDir=relativeDir.replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (normalizedRelativeDir.length() > 0) {
            normalizedRelativeDir+=""String_Node_Str"";
          }
          resolvedFiles.add(String.format(""String_Node_Str"",normalizedBasePath,normalizedRelativeDir,filteredFile.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        }
      }
    }
    return resolvedFiles;
  }
  return EMPTY_SET;
}",0.8604810996563574
7117,"public void uploadFiles(String id,String data){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  LinkedHashSet<FileInfo> filesUploaded=new LinkedHashSet<FileInfo>();
  for (  FileData f : filesData) {
    files.put(f.getFile(),f.getData());
    filesUploaded.add(new FileInfo(f.getFile(),f.getTimestamp()));
  }
  browser.addFiles(filesUploaded);
}","public void uploadFiles(String id,String data){
  SlaveBrowser browser=capturedBrowsers.getBrowser(id);
  Collection<FileData> filesData=gson.fromJson(data,new TypeToken<Collection<FileData>>(){
  }
.getType());
  LinkedHashSet<FileInfo> filesUploaded=new LinkedHashSet<FileInfo>();
  for (  FileData f : filesData) {
    String path=f.getFile();
    String fileData=f.getData();
    files.put(path,fileData);
    files.put(resolvePath(path),fileData);
    filesUploaded.add(new FileInfo(f.getFile(),f.getTimestamp()));
  }
  browser.addFiles(filesUploaded);
}",0.8663414634146341
7118,"@Override public IObservable createObservable(Object target){
  if (target instanceof IObservableList) {
    return (IObservable)target;
  }
 else   if (target instanceof DeploymentRuntime) {
    return deployedExtensionsProperty.observe(deployedExtensionsProperty);
  }
  return null;
}","@Override public IObservable createObservable(Object target){
  if (target instanceof IObservableList) {
    return (IObservable)target;
  }
 else   if (target instanceof DeploymentRuntime) {
    return deployedExtensionsProperty.observe(target);
  }
  return null;
}",0.9422382671480144
7119,"public String execute(String instruction){
  JSONObject fileData=null;
switch (getCommand(instruction)) {
case REACHABLE_COMMAND:
    int service=RadioInfo.getActiveWAFs();
  int reachability=NOT_REACHABLE;
if ((service & RadioInfo.WAF_3GPP) != 0 || (service & RadioInfo.WAF_CDMA) != 0 || (service & RadioInfo.WAF_IDEN) != 0) {
  reachability=REACHABLE_VIA_CARRIER_DATA_NETWORK;
}
if ((service & RadioInfo.WAF_WLAN) != 0) {
reachability=REACHABLE_VIA_WIFI_NETWORK;
}
return ""String_Node_Str"" + reachability + ""String_Node_Str""+ reachability+ ""String_Node_Str"";
case XHR_UPLOAD_COMMAND:
int tildaIndex=instruction.lastIndexOf('~');
try {
JSONObject fileDetails=new JSONObject(instruction.substring(tildaIndex + 1));
instruction=instruction.substring(0,tildaIndex);
String filePath=fileDetails.getString(""String_Node_Str"");
String loggedinUser=fileDetails.getString(""String_Node_Str"");
fileData=readFileData(filePath);
String fileTargetPath=fileDetails.getString(""String_Node_Str"") + ""String_Node_Str"" + fileData.getString(""String_Node_Str"");
fileData.put(""String_Node_Str"",loggedinUser);
fileData.put(""String_Node_Str"",fileTargetPath);
}
 catch (Exception e) {
return ""String_Node_Str"";
}
case XHR_COMMAND:
String reqURL=instruction.substring(CODE.length() + 5);
String POSTdata=null;
int pipeIndex=reqURL.indexOf(""String_Node_Str"");
if (pipeIndex > -1) {
POSTdata=reqURL.substring(pipeIndex + 1);
reqURL=reqURL.substring(0,pipeIndex);
}
if (fileData != null) {
POSTdata+=""String_Node_Str"" + fileData.toString();
}
if (!DeviceInfo.isSimulator()) {
reqURL+=""String_Node_Str"";
}
if ((RadioInfo.getActiveWAFs() & RadioInfo.WAF_WLAN) != 0) {
if (CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_DIRECT,RadioInfo.WAF_WLAN,true)) {
reqURL+=""String_Node_Str"";
}
}
connThread.fetch(reqURL,POSTdata);
reqURL=null;
POSTdata=null;
break;
}
return null;
}","public String execute(String instruction){
  JSONObject fileData=null;
  String reqURL=null;
switch (getCommand(instruction)) {
case REACHABLE_COMMAND:
    int service=RadioInfo.getActiveWAFs();
  int reachability=NOT_REACHABLE;
if ((service & RadioInfo.WAF_3GPP) != 0 || (service & RadioInfo.WAF_CDMA) != 0 || (service & RadioInfo.WAF_IDEN) != 0) {
  reachability=REACHABLE_VIA_CARRIER_DATA_NETWORK;
}
if ((service & RadioInfo.WAF_WLAN) != 0) {
reachability=REACHABLE_VIA_WIFI_NETWORK;
}
return ""String_Node_Str"" + reachability + ""String_Node_Str""+ reachability+ ""String_Node_Str"";
case XHR_UPLOAD_COMMAND:
reqURL=instruction.substring(CODE.length() + 11);
int tildaIndex=instruction.lastIndexOf('~');
try {
JSONObject fileDetails=new JSONObject(instruction.substring(tildaIndex + 1));
instruction=instruction.substring(0,tildaIndex);
String filePath=fileDetails.getString(""String_Node_Str"");
String loggedinUser=fileDetails.getString(""String_Node_Str"");
fileData=readFileData(filePath);
String fileTargetPath=fileDetails.getString(""String_Node_Str"") + ""String_Node_Str"" + fileData.getString(""String_Node_Str"");
fileData.put(""String_Node_Str"",loggedinUser);
fileData.put(""String_Node_Str"",fileTargetPath);
}
 catch (Exception e) {
return ""String_Node_Str"";
}
case XHR_COMMAND:
reqURL=reqURL == null ? instruction.substring(CODE.length() + 5) : reqURL;
String POSTdata=null;
int pipeIndex=reqURL.indexOf(""String_Node_Str"");
if (pipeIndex > -1) {
POSTdata=reqURL.substring(pipeIndex + 1);
reqURL=reqURL.substring(0,pipeIndex);
}
if (fileData != null) {
POSTdata+=""String_Node_Str"" + fileData.toString();
}
if (!DeviceInfo.isSimulator()) {
reqURL+=""String_Node_Str"";
}
if ((RadioInfo.getActiveWAFs() & RadioInfo.WAF_WLAN) != 0) {
if (CoverageInfo.isCoverageSufficient(CoverageInfo.COVERAGE_DIRECT,RadioInfo.WAF_WLAN,true)) {
reqURL+=""String_Node_Str"";
}
}
connThread.fetch(reqURL,POSTdata);
reqURL=null;
POSTdata=null;
break;
}
return null;
}",0.9722882026920032
7120,"public EventRequest getRequest(String url){
  RequestQueryResult requestQueryResult=restTemplate.getForObject(getUrl() + VIEW_ALL + ""String_Node_Str"",RequestQueryResult.class,url);
  return requestQueryResult.getRows().get(0).getValue();
}","public EventRequest getRequest(String locationKey,String date,String userid){
  String view=getUrl() + VIEW_ALL + ""String_Node_Str"";
  RequestQueryResult requestQueryResult=restTemplate.getForObject(view,RequestQueryResult.class,locationKey,date,userid);
  return requestQueryResult.getRows().get(0).getValue();
}",0.5869565217391305
7121,"public Collection<EventRequest> getRequestsByLocation(String location){
  return queryRequestView(VIEW_BY_LOCATION,location);
}","public Collection<EventRequest> getRequestsByLocation(String location){
  return queryRequestView(VIEW_BY_LOCATION,location.toLowerCase());
}",0.9477611940298508
7122,"public Collection<EventRequest> getRequestsByLocationAndDate(String location,String date){
  return queryRequestView(VIEW_BY_LOCATION_DATE,location,date);
}","public Collection<EventRequest> getRequestsByLocationAndDate(String location,String date){
  return queryRequestView(VIEW_BY_LOCATION_DATE,location.toLowerCase(),date);
}",0.9570552147239264
7123,public EventRequest getRequest(String url);,"public EventRequest getRequest(String locationKey,String date,String userid);",0.7
7124,"@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) public @ResponseBody EventRequest getRequest(@PathVariable String location,@PathVariable String date,@PathVariable String user) throws EventNotFoundException {
  String url=createUrl(location,date,user);
  EventRequest eventRequest=dao.getRequest(url);
  if (eventRequest == null) {
    throw new EventNotFoundException(url);
  }
  return eventRequest;
}","@RequestMapping(value=""String_Node_Str"",method={RequestMethod.GET}) public @ResponseBody EventRequest getRequest(@PathVariable String location,@PathVariable String date,@PathVariable String user) throws EventNotFoundException {
  EventRequest eventRequest=dao.getRequest(location,date,user);
  if (eventRequest == null) {
    throw new EventNotFoundException(createUrl(location,date,user));
  }
  return eventRequest;
}",0.8252080856123662
7125,"/** 
 * Get closest Edge within a specified distance in meters.
 * @param point The point to search from.
 * @param radius The maximum distance an Edge can be at to be accepted.
 * @param eval An evaluator to eliminate roads that can't be traveled by the given travel mode
 * @return The closest edge within the maximum search distance.
 * @throws NothingCloseException If there are no edges within the maximum search distance.
 */
public KrakEdge getClosestEdge(Point2D.Double point,double radius,Evaluator eval) throws NothingCloseException {
  Rectangle2D.Double search_area=new Rectangle2D.Double(point.x - radius,point.y - radius,2 * radius,2 * radius);
  List<KrakEdge> all=query(search_area);
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  for (  KrakEdge edge : all) {
    if (edge.roadname.length() > 1) {
      double cur_dist=edge.getLine().ptSegDist(point);
      try {
        eval.evaluate(edge);
        if (cur_dist < distance) {
          distance=cur_dist;
          closest=edge;
        }
      }
 catch (      NotPassableException e) {
      }
    }
  }
  if (closest != null && distance < radius) {
    return closest;
  }
 else {
    throw new NothingCloseException(""String_Node_Str"" + Model.ROAD_SEARCH_DISTANCE);
  }
}","/** 
 * Get closest Edge within a specified distance in meters.
 * @param point The point to search from.
 * @param radius The maximum distance an Edge can be at to be accepted.
 * @param eval An evaluator to eliminate roads that can't be traveled by the given travel mode
 * @return The closest edge within the maximum search distance.
 * @throws NothingCloseException If there are no edges within the maximum search distance.
 */
public KrakEdge getClosestEdge(Point2D.Double point,double radius,Evaluator eval) throws NothingCloseException {
  Rectangle2D.Double search_area=new Rectangle2D.Double(point.x - radius,point.y - radius,2 * radius,2 * radius);
  List<KrakEdge> all=query(search_area);
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  for (  KrakEdge edge : all) {
    double cur_dist=edge.getLine().ptSegDist(point);
    try {
      eval.evaluate(edge);
      if (cur_dist < distance) {
        distance=cur_dist;
        closest=edge;
      }
    }
 catch (    NotPassableException e) {
    }
  }
  if (closest != null && distance < radius) {
    return closest;
  }
 else {
    throw new NothingCloseException(""String_Node_Str"" + Model.ROAD_SEARCH_DISTANCE);
  }
}",0.9511400651465798
7126,"/** 
 * Gives the name of the closest road from a given point.
 * @param point the point to search from
 * @return the name of the closest road. If there is no path it will return a String of one whitespace.
 */
public String getClosestRoadname(Point2D.Double point){
  KrakEdge road;
  try {
    road=getClosestEdge(point,Model.ROAD_SEARCH_DISTANCE,Evaluator.ANYTHING);
    return road.roadname;
  }
 catch (  NothingCloseException e) {
    return ""String_Node_Str"";
  }
}","/** 
 * Gives the name of the closest road from a given point.
 * @param point the point to search from
 * @return the name of the closest road. If there is no path it will return a String of one whitespace.
 */
public String getClosestRoadname(Point2D.Double point){
  KrakEdge road;
  try {
    road=getClosestEdge(point,Model.ROAD_SEARCH_DISTANCE,Evaluator.HAS_NAME);
    return road.roadname;
  }
 catch (  NothingCloseException e) {
    return ""String_Node_Str"";
  }
}",0.9873150105708244
7127,"/** 
 * Finds the best path between two points with respect to the given Evaluator.
 * @param G	The graph in which to look for the path.
 * @param startNode The Node to start searching from.
 * @param targetNode The Node we search a best path to.
 * @param eval The evaluator to evaluate the visited Nodes.
 * @return A list of KrakEdges representing the path from startNode to targetNode.
 * @throws NoPathException If there is no legal path between the startNode and the targetNode (with respect to the Evaluator).
 */
public static List<KrakEdge> findPath(Graph<KrakEdge,KrakNode> G,KrakNode startNode,KrakNode targetNode,Evaluator eval) throws NoPathException {
  HashMap<KrakNode,KrakEdge> edgeTo=new HashMap<KrakNode,KrakEdge>();
  HashMap<KrakNode,Float> distTo=new HashMap<KrakNode,Float>();
  IndexMinPQ<Float> pq=new IndexMinPQ<Float>(G.getNodeCount());
  distTo.put(startNode,0.0f);
  pq.insert(startNode.getIndex(),0.0f);
  while (!pq.isEmpty()) {
    KrakNode cur=G.getNode(pq.delMin());
    Iterator<KrakEdge> edgesOut=G.outGoingEdges(cur);
    while (edgesOut.hasNext()) {
      KrakEdge edge=edgesOut.next();
      relax(cur,targetNode,edge,distTo,edgeTo,pq,eval);
      if (edge.getOtherEnd(cur) == targetNode && edgeTo.containsKey(targetNode)) {
        Stack<KrakEdge> stack=new Stack<KrakEdge>();
        KrakNode path=targetNode;
        while (edgeTo.containsKey(path)) {
          KrakEdge cur_edge=edgeTo.get(path);
          stack.add(cur_edge);
          path=cur_edge.getOtherEnd(path);
        }
        return new ArrayList<KrakEdge>(stack);
      }
    }
  }
  throw new NoPathException(""String_Node_Str"" + startNode.index + ""String_Node_Str""+ targetNode.index);
}","/** 
 * Finds the best path between two points with respect to the given Evaluator.
 * @param G	The graph in which to look for the path.
 * @param startNode The Node to start searching from.
 * @param targetNode The Node we search a best path to.
 * @param eval The evaluator to evaluate the visited Nodes.
 * @return A list of KrakEdges representing the path from startNode to targetNode.
 * @throws NoPathException If there is no legal path between the startNode and the targetNode (with respect to the Evaluator).
 */
public static List<KrakEdge> findPath(Graph<KrakEdge,KrakNode> G,KrakNode startNode,KrakNode targetNode,Evaluator eval) throws NoPathException {
  HashMap<KrakNode,KrakEdge> edgeTo=new HashMap<KrakNode,KrakEdge>();
  HashMap<KrakNode,Float> distTo=new HashMap<KrakNode,Float>();
  IndexMinPQ<Float> pq=new IndexMinPQ<Float>(G.getNodeCount());
  distTo.put(startNode,0.0f);
  pq.insert(startNode.getIndex(),0.0f);
  while (!pq.isEmpty()) {
    KrakNode cur=G.getNode(pq.delMin());
    if (cur == targetNode) {
      Stack<KrakEdge> stack=new Stack<KrakEdge>();
      KrakNode path=targetNode;
      while (edgeTo.containsKey(path)) {
        KrakEdge cur_edge=edgeTo.get(path);
        stack.add(cur_edge);
        path=cur_edge.getOtherEnd(path);
      }
      return new ArrayList<KrakEdge>(stack);
    }
    Iterator<KrakEdge> edgesOut=G.outGoingEdges(cur);
    while (edgesOut.hasNext()) {
      KrakEdge edge=edgesOut.next();
      relax(cur,targetNode,edge,distTo,edgeTo,pq,eval);
    }
  }
  throw new NoPathException(""String_Node_Str"" + startNode.index + ""String_Node_Str""+ targetNode.index);
}",0.781664656212304
7128,"/** 
 * Used to find the path between two points - opens dialog window in view if problems occur.
 * @param start What pin the start point is at.
 * @param end What pin the end point is at.
 */
private void findPath(int start,int end){
  Evaluator<KrakEdge> eval=null;
  if (view.isCarChoiceSelected()) {
    eval=Evaluator.CAR;
    System.out.println(""String_Node_Str"");
  }
 else   if (view.isBikeChoiceSelected()) {
    eval=Evaluator.BIKE;
    System.out.println(""String_Node_Str"");
  }
  try {
    model.findPath(model.getClosestNode(pins.get(start)),model.getClosestNode(pins.get(end)),eval);
  }
 catch (  NothingCloseException e1) {
    view.displayDialog(""String_Node_Str"",""String_Node_Str"");
  }
catch (  NoPathException e2) {
    view.displayDialog(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Used to find the path between two points - opens dialog window in view if problems occur.
 * @param start What pin the start point is at.
 * @param end What pin the end point is at.
 */
private void findPath(int start,int end){
  Evaluator<KrakEdge> eval=null;
  if (view.isCarChoiceSelected()) {
    eval=Evaluator.CAR;
  }
 else   if (view.isBikeChoiceSelected()) {
    eval=Evaluator.BIKE;
  }
  try {
    model.findPath(model.getClosestNode(pins.get(start)),model.getClosestNode(pins.get(end)),eval);
  }
 catch (  NothingCloseException e1) {
    view.displayDialog(""String_Node_Str"",""String_Node_Str"");
  }
catch (  NoPathException e2) {
    view.displayDialog(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9434210526315788
7129,"/** 
 * Finds the closest node within 200 meters from a given point
 * @param point the given point
 * @return the closest node from the point
 * @throws NothingCloseException If there are no nodes within the maximum search distance.
 */
public KrakNode getClosestNode(Point2D.Double point) throws NothingCloseException {
  float curDistance=Model.ROAD_SEARCH_DISTANCE;
  KrakEdge edge=null;
  while (edge == null) {
    try {
      edge=getClosestEdge(point,curDistance);
    }
 catch (    NothingCloseException e) {
      if (2 * curDistance > maxBounds.width && 2 * curDistance > maxBounds.height) {
        throw e;
      }
      curDistance*=2;
    }
  }
  System.out.println(""String_Node_Str"" + edge.roadname);
  KrakNode first=edge.getEnd();
  KrakNode second=edge.getOtherEnd(first);
  if (first.getPoint().distance(point) < second.getPoint().distance(point)) {
    return first;
  }
  return second;
}","/** 
 * Finds the closest node within 200 meters from a given point
 * @param point the given point
 * @return the closest node from the point
 * @throws NothingCloseException If there are no nodes within the maximum search distance.
 */
public KrakNode getClosestNode(Point2D.Double point) throws NothingCloseException {
  float curDistance=Model.ROAD_SEARCH_DISTANCE;
  KrakEdge edge=null;
  while (edge == null) {
    try {
      edge=getClosestEdge(point,curDistance);
    }
 catch (    NothingCloseException e) {
      if (2 * curDistance > maxBounds.width && 2 * curDistance > maxBounds.height) {
        throw e;
      }
      curDistance*=2;
    }
  }
  KrakNode first=edge.getEnd();
  KrakNode second=edge.getOtherEnd(first);
  if (first.getPoint().distance(point) < second.getPoint().distance(point)) {
    return first;
  }
  return second;
}",0.9676687464549064
7130,"@Override public void mouseClicked(MouseEvent e){
  pins.add(PointMethods.pixelToUTM(e.getPoint(),model,view));
  if (pins.size() > 1) {
    for (int i=0; i < pins.size() - 1; i++) {
      try {
        model.findPath(model.getClosestNode(pins.get(i)),model.getClosestNode(pins.get(i + 1)));
      }
 catch (      NothingCloseException e1) {
        view.displayDialog(""String_Node_Str"",""String_Node_Str"");
      }
catch (      NoPathException e2) {
        view.displayDialog(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  repaint();
}","@Override public void mouseClicked(MouseEvent e){
  pins.add(PointMethods.pixelToUTM(e.getPoint(),model,view));
  if (pins.size() > 1) {
    try {
      model.findPath(model.getClosestNode(pins.get(pins.size() - 2)),model.getClosestNode(pins.get(pins.size() - 1)));
    }
 catch (    NothingCloseException e1) {
      view.displayDialog(""String_Node_Str"",""String_Node_Str"");
    }
catch (    NoPathException e2) {
      view.displayDialog(""String_Node_Str"",""String_Node_Str"");
    }
  }
  repaint();
}",0.8015267175572519
7131,"/** 
 * Adds mouseListeners in View.
 */
private void addMouseListeners(){
  view.addCanvasMouseListener(new MouseAdapter(){
    private Point a_mouseZoom=null;
    private Point b_mouseZoom=null;
    @Override public void mousePressed(    MouseEvent e){
      if (e == null)       return;
      a_mouseZoom=e.getPoint();
      PointMethods.pointOutOfBounds(a_mouseZoom,view);
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (a_mouseZoom == null || e == null)       return;
      b_mouseZoom=e.getPoint();
      PointMethods.pointOutOfBounds(b_mouseZoom,view);
      if (Math.abs(b_mouseZoom.x - a_mouseZoom.x) < view.getCanvasWidth() / 100 || Math.abs(b_mouseZoom.y - a_mouseZoom.y) < view.getCanvasHeight() / 100) {
        return;
      }
      model.updateBounds(RectangleMethods.mouseZoom(a_mouseZoom,b_mouseZoom,model,view));
      repaint();
    }
    @Override public void mouseClicked(    MouseEvent e){
      pins.add(PointMethods.pixelToUTM(e.getPoint(),model,view));
      if (pins.size() > 1) {
        for (int i=0; i < pins.size() - 1; i++) {
          try {
            model.findPath(model.getClosestNode(pins.get(i)),model.getClosestNode(pins.get(i + 1)));
          }
 catch (          NothingCloseException e1) {
            view.displayDialog(""String_Node_Str"",""String_Node_Str"");
          }
catch (          NoPathException e2) {
            view.displayDialog(""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
      repaint();
    }
    @Override public void mouseMoved(    MouseEvent e){
      Point2D.Double p=PointMethods.pixelToUTM(e.getPoint(),model,view);
      String roadName=model.getClosestRoadname(p);
      view.setLabel(roadName);
    }
  }
);
}","/** 
 * Adds mouseListeners in View.
 */
private void addMouseListeners(){
  view.addCanvasMouseListener(new MouseAdapter(){
    private Point a_mouseZoom=null;
    private Point b_mouseZoom=null;
    @Override public void mousePressed(    MouseEvent e){
      if (e == null)       return;
      a_mouseZoom=e.getPoint();
      PointMethods.pointOutOfBounds(a_mouseZoom,view);
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (a_mouseZoom == null || e == null)       return;
      b_mouseZoom=e.getPoint();
      PointMethods.pointOutOfBounds(b_mouseZoom,view);
      if (Math.abs(b_mouseZoom.x - a_mouseZoom.x) < view.getCanvasWidth() / 100 || Math.abs(b_mouseZoom.y - a_mouseZoom.y) < view.getCanvasHeight() / 100) {
        return;
      }
      model.updateBounds(RectangleMethods.mouseZoom(a_mouseZoom,b_mouseZoom,model,view));
      repaint();
    }
    @Override public void mouseClicked(    MouseEvent e){
      pins.add(PointMethods.pixelToUTM(e.getPoint(),model,view));
      if (pins.size() > 1) {
        try {
          model.findPath(model.getClosestNode(pins.get(pins.size() - 2)),model.getClosestNode(pins.get(pins.size() - 1)));
        }
 catch (        NothingCloseException e1) {
          view.displayDialog(""String_Node_Str"",""String_Node_Str"");
        }
catch (        NoPathException e2) {
          view.displayDialog(""String_Node_Str"",""String_Node_Str"");
        }
      }
      repaint();
    }
    @Override public void mouseMoved(    MouseEvent e){
      Point2D.Double p=PointMethods.pixelToUTM(e.getPoint(),model,view);
      String roadName=model.getClosestRoadname(p);
      view.setLabel(roadName);
    }
  }
);
}",0.9175985874043556
7132,"@Override public void run(){
  try {
    BufferedInputStream bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
    ObjectInputStream ois=new ObjectInputStream(bin);
    qt.add((QuadTree<KrakEdge>)ois.readObject());
    ois.close();
    bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
    ois=new ObjectInputStream(bin);
    qt.add((QuadTree<KrakEdge>)ois.readObject());
    ois.close();
    if (loadGraph) {
      bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
      ois=new ObjectInputStream(bin);
      graph=(Graph<KrakEdge,KrakNode>)ois.readObject();
      ois.close();
    }
  }
 catch (  Exception e) {
    System.exit(0);
  }
}","@Override public void run(){
  Stopwatch sw=new Stopwatch(""String_Node_Str"");
  try {
    BufferedInputStream bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
    ObjectInputStream ois=new ObjectInputStream(bin);
    qt.add((QuadTree<KrakEdge>)ois.readObject());
    ois.close();
    bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
    ois=new ObjectInputStream(bin);
    qt.add((QuadTree<KrakEdge>)ois.readObject());
    ois.close();
    if (loadGraph) {
      bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
      ois=new ObjectInputStream(bin);
      graph=(Graph<KrakEdge,KrakNode>)ois.readObject();
      ois.close();
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    System.exit(0);
  }
  sw.printTime();
}",0.9329153605015674
7133,"private void loadSerializedFromFiles(final boolean loadGraph) throws IOException, ClassNotFoundException {
  BufferedInputStream bin;
  bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
  ObjectInputStream ois=new ObjectInputStream(bin);
  qt.add((QuadTree<KrakEdge>)ois.readObject());
  ois.close();
  bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
  ois=new ObjectInputStream(bin);
  maxBounds=(Rectangle2D.Double)ois.readObject();
  bounds=originalBounds();
  ois.close();
  new Thread(){
    @Override public void run(){
      try {
        BufferedInputStream bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
        ObjectInputStream ois=new ObjectInputStream(bin);
        qt.add((QuadTree<KrakEdge>)ois.readObject());
        ois.close();
        bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
        ois=new ObjectInputStream(bin);
        qt.add((QuadTree<KrakEdge>)ois.readObject());
        ois.close();
        if (loadGraph) {
          bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
          ois=new ObjectInputStream(bin);
          graph=(Graph<KrakEdge,KrakNode>)ois.readObject();
          ois.close();
        }
      }
 catch (      Exception e) {
        System.exit(0);
      }
    }
  }
.start();
}","private void loadSerializedFromFiles(final boolean loadGraph) throws IOException, ClassNotFoundException {
  BufferedInputStream bin;
  bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
  ObjectInputStream ois=new ObjectInputStream(bin);
  qt.add((QuadTree<KrakEdge>)ois.readObject());
  ois.close();
  bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
  ois=new ObjectInputStream(bin);
  maxBounds=(Rectangle2D.Double)ois.readObject();
  bounds=originalBounds();
  ois.close();
  new Thread(){
    @Override public void run(){
      Stopwatch sw=new Stopwatch(""String_Node_Str"");
      try {
        BufferedInputStream bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
        ObjectInputStream ois=new ObjectInputStream(bin);
        qt.add((QuadTree<KrakEdge>)ois.readObject());
        ois.close();
        bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
        ois=new ObjectInputStream(bin);
        qt.add((QuadTree<KrakEdge>)ois.readObject());
        ois.close();
        if (loadGraph) {
          bin=new BufferedInputStream(new FileInputStream(Properties.get(""String_Node_Str"")));
          ois=new ObjectInputStream(bin);
          graph=(Graph<KrakEdge,KrakNode>)ois.readObject();
          ois.close();
        }
      }
 catch (      Exception e) {
        System.out.println(e.getMessage());
        System.exit(0);
      }
      sw.printTime();
    }
  }
.start();
}",0.9594824651004428
7134,"/** 
 * Create a new DijkstraSP from the startNode, and finds the path to the endNode. The path is returned as an arraylist of lines
 * @throws NoPathException 
 */
public void findPath(KrakNode startNode,KrakNode endNode) throws NothingCloseException, NoPathException {
  if (startNode == null)   throw new NothingCloseException(""String_Node_Str"");
  if (endNode == null)   throw new NothingCloseException(""String_Node_Str"");
  path.addAll(Dijkstra.findPath(graph,startNode,endNode));
}","/** 
 * Create a new DijkstraSP from the startNode, and finds the path to the endNode. The path is returned as an arraylist of lines
 * @throws NoPathException 
 */
public void findPath(KrakNode startNode,KrakNode endNode) throws NothingCloseException, NoPathException {
  while (graph == null)   Thread.yield();
  if (startNode == null)   throw new NothingCloseException(""String_Node_Str"");
  if (endNode == null)   throw new NothingCloseException(""String_Node_Str"");
  path.addAll(Dijkstra.findPath(graph,startNode,endNode));
}",0.9586614173228346
7135,"public static String getMD5Checksum(String filename) throws Exception {
  byte[] b=createChecksum(filename);
  String result=""String_Node_Str"";
  for (int i=0; i < b.length; i++) {
    result.concat(Integer.toString((b[i] & 0xff) + 0x100,16).substring(1));
  }
  return result;
}","public static String getMD5Checksum(String filename) throws Exception {
  byte[] b=createChecksum(filename);
  String result=""String_Node_Str"";
  for (int i=0; i < b.length; i++) {
    result=result.concat(Integer.toString((b[i] & 0xff) + 0x100,16).substring(1));
  }
  return result;
}",0.9876106194690264
7136,"@Override public void keyReleased(KeyEvent e){
  if (e.getKeyCode() == 27) {
    m.resetView();
    v.repaint(m.getLines());
  }
}","@Override public void keyReleased(KeyEvent e){
  if (e.getKeyCode() == 27) {
    Rectangle2D.Double temp=(Double)m.originalView().clone();
    fixRatio(temp,m.getBounds());
    m.updateBounds(temp);
    v.repaint(m.getLines());
  }
}",0.6776859504132231
7137,"private void addListeners(){
  v.addUpListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y + (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addDownListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y - (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addLeftListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x - (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addRightListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x + (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addInListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,true,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addOutListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,false,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addCanvasMouseListener(new MouseAdapter(){
    private Point a=null;
    private Point b=null;
    private Rectangle2D.Double p=null;
    public void mousePressed(    MouseEvent e){
      a=e.getPoint();
    }
    public void mouseReleased(    MouseEvent e){
      if (a == null)       return;
      b=e.getPoint();
      if (Math.abs(b.x - a.x) < v.getCanvasWidth() / 100 || Math.abs(b.y - a.y) < v.getCanvasHeight() / 100)       return;
      p=point2DToRectangle(pixelToUTM(a),pixelToUTM(b));
      fixRatio(p,m.getBounds());
      m.updateBounds(p);
      v.repaint(m.getLines());
    }
    @Override public void mouseMoved(    MouseEvent e){
      v.setLabel(m.getClosestRoad(pixelToUTM(e.getPoint())));
    }
  }
);
  v.addCanvasComponentListener(new ComponentAdapter(){
    private int oldWidth=v.getCanvasWidth();
    private int oldHeight=v.getCanvasHeight();
    @Override public void componentResized(    ComponentEvent e){
      Stopwatch timer=new Stopwatch(""String_Node_Str"");
      Rectangle2D.Double map=m.getBounds();
      int newWidth=v.getCanvasWidth();
      int newHeight=v.getCanvasHeight();
      float x_adjust=(float)(map.width * (((float)newWidth - oldWidth) / oldWidth));
      float y_adjust=(float)(map.height * (((float)newHeight - oldHeight) / oldHeight));
      m.updateBounds(new Rectangle2D.Double(map.x,map.y - y_adjust,map.width + x_adjust,map.height + y_adjust));
      oldWidth=newWidth;
      oldHeight=newHeight;
      timer.printTime();
      v.repaint(m.getLines());
    }
  }
);
  v.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == 27) {
        m.resetView();
        v.repaint(m.getLines());
      }
    }
  }
);
}","private void addListeners(){
  v.addUpListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y + (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addDownListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y - (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addLeftListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x - (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addRightListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x + (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addInListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,true,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addOutListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,false,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addCanvasMouseListener(new MouseAdapter(){
    private Point a=null;
    private Point b=null;
    private Rectangle2D.Double p=null;
    public void mousePressed(    MouseEvent e){
      a=e.getPoint();
    }
    public void mouseReleased(    MouseEvent e){
      if (a == null)       return;
      b=e.getPoint();
      if (Math.abs(b.x - a.x) < v.getCanvasWidth() / 100 || Math.abs(b.y - a.y) < v.getCanvasHeight() / 100)       return;
      p=point2DToRectangle(pixelToUTM(a),pixelToUTM(b));
      fixRatio(p,m.getBounds());
      m.updateBounds(p);
      v.repaint(m.getLines());
    }
    @Override public void mouseMoved(    MouseEvent e){
      v.setLabel(m.getClosestRoad(pixelToUTM(e.getPoint())));
    }
  }
);
  v.addCanvasComponentListener(new ComponentAdapter(){
    private int oldWidth=v.getCanvasWidth();
    private int oldHeight=v.getCanvasHeight();
    @Override public void componentResized(    ComponentEvent e){
      Stopwatch timer=new Stopwatch(""String_Node_Str"");
      Rectangle2D.Double map=m.getBounds();
      int newWidth=v.getCanvasWidth();
      int newHeight=v.getCanvasHeight();
      float x_adjust=(float)(map.width * (((float)newWidth - oldWidth) / oldWidth));
      float y_adjust=(float)(map.height * (((float)newHeight - oldHeight) / oldHeight));
      m.updateBounds(new Rectangle2D.Double(map.x,map.y - y_adjust,map.width + x_adjust,map.height + y_adjust));
      oldWidth=newWidth;
      oldHeight=newHeight;
      timer.printTime();
      v.repaint(m.getLines());
    }
  }
);
  v.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == 27) {
        Rectangle2D.Double temp=(Double)m.originalView().clone();
        fixRatio(temp,m.getBounds());
        m.updateBounds(temp);
        v.repaint(m.getLines());
      }
    }
  }
);
}",0.9820942558372726
7138,"/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea){
  double area=(qarea.width / 1000) * (qarea.height / 1000);
  System.out.println(""String_Node_Str"" + area + ""String_Node_Str"");
  Set<T> total;
  total=root1.query(qarea);
  if (area < 50000) {
    System.out.println(""String_Node_Str"");
    total.addAll(root2.query(qarea));
    if (area < 5000) {
      System.out.println(""String_Node_Str"");
      total.addAll(root3.query(qarea));
    }
  }
  return total;
}","/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea){
  double area=(qarea.width / 1000) * (qarea.height / 1000);
  Set<T> total;
  total=root1.query(qarea);
  if (area < CENTER_LEVEL) {
    total.addAll(root2.query(qarea));
    if (area < INNER_LEVEL) {
      total.addAll(root3.query(qarea));
    }
  }
  return total;
}",0.6523235800344234
7139,"/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea){
  if (!isEmpty()) {
    Set<T> results=new HashSet<T>();
    for (    QuadTreeNode<T> item : nodes) {
      if (item.getBounds().intersects(qarea)) {
        Set<T> temp=item.query(qarea);
        if (temp.size() > 0) {
          if (results.size() == 0) {
            results=item.query(qarea);
          }
 else {
            results.addAll(item.query(qarea));
          }
        }
      }
    }
    return results;
  }
 else {
    return contents;
  }
}","/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea){
  if (!isEmpty()) {
    Set<T> results=new HashSet<T>();
    for (    QuadTreeNode<T> item : nodes) {
      if (item.getBounds().intersects(qarea)) {
        results.addAll(item.query(qarea));
      }
    }
    return results;
  }
 else {
    return contents;
  }
}",0.7280265339966833
7140,"public String getClosestRoad(Point2D.Double point){
  System.out.println(""String_Node_Str"");
  Set<KrakEdge> all=qt.query(new Rectangle2D.Double(point.x - this.ROAD_SEARCH_DISTANCE,point.y - this.ROAD_SEARCH_DISTANCE,point.x + this.ROAD_SEARCH_DISTANCE,point.x + this.ROAD_SEARCH_DISTANCE));
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  for (  KrakEdge edge : all) {
    double cur_dist=edge.getLine().ptLineDist(point);
    if (cur_dist < distance) {
      distance=cur_dist;
      closest=edge;
    }
  }
  if (closest != null) {
    return closest.roadname;
  }
  return ""String_Node_Str"";
}","public String getClosestRoad(Point2D.Double point){
  System.out.println(""String_Node_Str"");
  Set<KrakEdge> all=qt.query(new Rectangle2D.Double(point.x - Map.ROAD_SEARCH_DISTANCE,point.y - Map.ROAD_SEARCH_DISTANCE,point.x + Map.ROAD_SEARCH_DISTANCE,point.y + Map.ROAD_SEARCH_DISTANCE));
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  System.out.println(all.size() + ""String_Node_Str"");
  for (  KrakEdge edge : all) {
    double cur_dist=edge.getLine().ptLineDist(point);
    if (cur_dist < distance) {
      distance=cur_dist;
      closest=edge;
    }
  }
  if (closest != null) {
    return closest.roadname;
  }
  return ""String_Node_Str"";
}",0.9341692789968652
7141,"private void addListeners(){
  v.addUpListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y + (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addDownListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y - (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addLeftListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x - (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addRightListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x + (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addInListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,true,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addOutListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,false,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addCanvasMouseListener(new MouseAdapter(){
    private Point a=null;
    private Point b=null;
    private Rectangle2D.Double p=null;
    public void mousePressed(    MouseEvent e){
      a=e.getPoint();
    }
    public void mouseReleased(    MouseEvent e){
      if (a == null)       return;
      b=e.getPoint();
      if (Math.abs(b.x - a.x) < v.getCanvasWidth() / 100 || Math.abs(b.y - a.y) < v.getCanvasHeight() / 100)       return;
      p=point2DToRectangle(pixelToUTM(a),pixelToUTM(b));
      fixRatio(p,m.getBounds());
      m.updateBounds(p);
      v.repaint(m.getLines());
    }
    public void mouseClicked(    MouseEvent e){
      System.out.println(""String_Node_Str"");
      v.setLabel(m.getClosestRoad(pixelToUTM(e.getPoint())));
    }
  }
);
  v.addCanvasComponentListener(new ComponentAdapter(){
    private int oldWidth=v.getCanvasWidth();
    private int oldHeight=v.getCanvasHeight();
    @Override public void componentResized(    ComponentEvent e){
      Stopwatch timer=new Stopwatch(""String_Node_Str"");
      Rectangle2D.Double map=m.getBounds();
      int newWidth=v.getCanvasWidth();
      int newHeight=v.getCanvasHeight();
      double x_adjust=map.width * (((double)newWidth - oldWidth) / oldWidth);
      double y_adjust=map.height * (((double)newHeight - oldHeight) / oldHeight);
      m.updateBounds(new Rectangle2D.Double(map.x,map.y - y_adjust,map.width + x_adjust,map.height + y_adjust));
      oldWidth=newWidth;
      oldHeight=newHeight;
      timer.printTime();
      v.repaint(m.getLines());
    }
  }
);
}","private void addListeners(){
  v.addUpListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y + (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addDownListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x,old.y - (1 * old.getHeight() * MOVE_LENGTH),old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addLeftListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x - (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addRightListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(new Rectangle2D.Double(old.x + (1 * old.width * MOVE_LENGTH),old.y,old.width,old.height));
      v.repaint(m.getLines());
    }
  }
);
  v.addInListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,true,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addOutListener(new ActionListener(){
    public void actionPerformed(    ActionEvent arg0){
      Rectangle2D.Double old=m.getBounds();
      m.updateBounds(zoomRect(ZOOM_LENGTH,false,old));
      v.repaint(m.getLines());
    }
  }
);
  v.addCanvasMouseListener(new MouseAdapter(){
    private Point a=null;
    private Point b=null;
    private Rectangle2D.Double p=null;
    public void mousePressed(    MouseEvent e){
      a=e.getPoint();
    }
    public void mouseReleased(    MouseEvent e){
      if (a == null)       return;
      b=e.getPoint();
      if (Math.abs(b.x - a.x) < v.getCanvasWidth() / 100 || Math.abs(b.y - a.y) < v.getCanvasHeight() / 100)       return;
      p=point2DToRectangle(pixelToUTM(a),pixelToUTM(b));
      fixRatio(p,m.getBounds());
      m.updateBounds(p);
      v.repaint(m.getLines());
    }
    @Override public void mouseMoved(    MouseEvent e){
      v.setLabel(m.getClosestRoad(pixelToUTM(e.getPoint())));
    }
  }
);
  v.addCanvasComponentListener(new ComponentAdapter(){
    private int oldWidth=v.getCanvasWidth();
    private int oldHeight=v.getCanvasHeight();
    @Override public void componentResized(    ComponentEvent e){
      Stopwatch timer=new Stopwatch(""String_Node_Str"");
      Rectangle2D.Double map=m.getBounds();
      int newWidth=v.getCanvasWidth();
      int newHeight=v.getCanvasHeight();
      double x_adjust=map.width * (((double)newWidth - oldWidth) / oldWidth);
      double y_adjust=map.height * (((double)newHeight - oldHeight) / oldHeight);
      m.updateBounds(new Rectangle2D.Double(map.x,map.y - y_adjust,map.width + x_adjust,map.height + y_adjust));
      oldWidth=newWidth;
      oldHeight=newHeight;
      timer.printTime();
      v.repaint(m.getLines());
    }
  }
);
}",0.9828518461300788
7142,"/** 
 * @param point
 * @return
 */
public String getClosestRoad(Point2D.Double point){
  System.out.println(""String_Node_Str"");
  Set<KrakEdge> all=qt.query(new Rectangle2D.Double(point.x - this.ROAD_SEARCH_DISTANCE,point.y - this.ROAD_SEARCH_DISTANCE,point.x + this.ROAD_SEARCH_DISTANCE,point.x + this.ROAD_SEARCH_DISTANCE),zoomLevel());
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  System.out.println(all.size() + ""String_Node_Str"");
  for (  KrakEdge edge : all) {
    double cur_dist=edge.getLine().ptLineDist(point);
    if (cur_dist < distance) {
      distance=cur_dist;
      closest=edge;
    }
  }
  if (closest != null) {
    System.out.printf(""String_Node_Str"" + closest.roadname + ""String_Node_Str"",distance);
    return closest.roadname;
  }
  return ""String_Node_Str"";
}","/** 
 * @param point
 * @return
 */
public String getClosestRoad(Point2D.Double point){
  Rectangle2D.Double search_area=new Rectangle2D.Double(point.x - Map.ROAD_SEARCH_DISTANCE,point.y - Map.ROAD_SEARCH_DISTANCE,2 * Map.ROAD_SEARCH_DISTANCE,2 * Map.ROAD_SEARCH_DISTANCE);
  Set<KrakEdge> all=qt.query(search_area);
  double distance=Integer.MAX_VALUE;
  KrakEdge closest=null;
  for (  KrakEdge edge : all) {
    if (edge.roadname.length() > 1) {
      double cur_dist=edge.getLine().ptSegDist(point);
      if (cur_dist < distance) {
        distance=cur_dist;
        closest=edge;
      }
    }
  }
  if (closest != null && distance < 200) {
    return closest.roadname;
  }
  return ""String_Node_Str"";
}",0.3474240422721268
7143,"/** 
 * Get all lines corresponding to the edges shown in the map. 
 * @return All the lines.
 */
public Collection<Line> getLines(){
  Stopwatch timer=new Stopwatch(""String_Node_Str"");
  HashSet<Line> lines=new HashSet<Line>();
  for (  KrakEdge e : qt.query(bounds,zoomLevel())) {
    Point2D.Double firstPoint=relativePoint(new Point2D.Double(e.getStart().getX(),e.getStart().getY()));
    Point2D.Double secondPoint=relativePoint(new Point2D.Double(e.getEnd().getX(),e.getEnd().getY()));
    Color roadColor=new Color(0x000000);
    int thickness=1;
switch (e.type) {
case 1:
      roadColor=Color.RED;
    thickness=3;
  break;
case 2:
roadColor=Color.RED;
break;
case 3:
roadColor=Color.YELLOW;
break;
case 4:
roadColor=Color.YELLOW;
break;
case 5:
roadColor=Color.ORANGE;
break;
case 6:
roadColor=Color.ORANGE;
break;
case 8:
roadColor=Color.GRAY;
break;
case 10:
roadColor=Color.ORANGE;
break;
case 11:
roadColor=Color.GRAY;
break;
case 21:
roadColor=Color.BLUE;
break;
case 22:
roadColor=Color.BLUE;
break;
case 23:
roadColor=Color.BLUE;
break;
case 24:
roadColor=Color.BLUE;
break;
case 25:
roadColor=Color.BLUE;
break;
case 26:
roadColor=Color.BLUE;
break;
case 28:
roadColor=Color.BLUE;
break;
case 31:
roadColor=Color.RED;
break;
case 32:
roadColor=Color.RED;
break;
case 33:
roadColor=Color.YELLOW;
break;
case 34:
roadColor=Color.YELLOW;
break;
case 35:
roadColor=Color.YELLOW;
break;
case 41:
roadColor=Color.RED;
break;
case 42:
roadColor=Color.RED;
break;
}
lines.add(new Line(firstPoint,secondPoint,roadColor,thickness));
}
timer.printTime();
return lines;
}","/** 
 * Get all lines corresponding to the edges shown in the map. 
 * @return All the lines.
 */
public Collection<Line> getLines(){
  Stopwatch timer=new Stopwatch(""String_Node_Str"");
  HashSet<Line> lines=new HashSet<Line>();
  for (  KrakEdge e : qt.query(bounds)) {
    Point2D.Double firstPoint=relativePoint(new Point2D.Double(e.getStart().getX(),e.getStart().getY()));
    Point2D.Double secondPoint=relativePoint(new Point2D.Double(e.getEnd().getX(),e.getEnd().getY()));
    Color roadColor=new Color(0x000000);
    int thickness=1;
switch (e.type) {
case 1:
      roadColor=Color.RED;
    thickness=3;
  break;
case 2:
roadColor=Color.RED;
break;
case 3:
roadColor=Color.YELLOW;
break;
case 4:
roadColor=Color.YELLOW;
break;
case 5:
roadColor=Color.ORANGE;
break;
case 6:
roadColor=Color.ORANGE;
break;
case 8:
roadColor=Color.GRAY;
break;
case 10:
roadColor=Color.ORANGE;
break;
case 11:
roadColor=Color.GRAY;
break;
case 21:
roadColor=Color.BLUE;
break;
case 22:
roadColor=Color.BLUE;
break;
case 23:
roadColor=Color.BLUE;
break;
case 24:
roadColor=Color.BLUE;
break;
case 25:
roadColor=Color.BLUE;
break;
case 26:
roadColor=Color.BLUE;
break;
case 28:
roadColor=Color.BLUE;
break;
case 31:
roadColor=Color.RED;
break;
case 32:
roadColor=Color.RED;
break;
case 33:
roadColor=Color.YELLOW;
break;
case 34:
roadColor=Color.YELLOW;
break;
case 35:
roadColor=Color.YELLOW;
break;
case 41:
roadColor=Color.RED;
break;
case 42:
roadColor=Color.RED;
break;
}
lines.add(new Line(firstPoint,secondPoint,roadColor,thickness));
}
timer.printTime();
return lines;
}",0.9961807765754296
7144,"/** 
 * Constructor Initialize variables.  Set the map to look at the entire graph.
 */
public Map(Graph<KrakEdge,KrakNode> graph){
  System.out.println(graph);
  bounds=outerBounds(graph.getNodes());
  this.qt=new QuadTree<KrakEdge>(bounds,graph.getAllEdges());
}","/** 
 * Constructor Initialize variables.  Set the map to look at the entire graph.
 */
public Map(Graph<KrakEdge,KrakNode> graph){
  bounds=outerBounds(graph.getNodes());
  this.qt=new QuadTree<KrakEdge>(bounds,graph.getAllEdges());
}",0.9418837675350702
7145,"public QuadTree(Rectangle2D.Double bounds,Set<T> content){
  System.out.print(""String_Node_Str"");
  Stopwatch timer=new Stopwatch();
  int zoomLevel=0;
  QuadTree.content=(Set<KrakEdge>)content;
  root=new QuadTreeNode<T>(bounds,content,zoomLevel);
  System.out.printf(""String_Node_Str"",timer.getTime());
}","public QuadTree(Rectangle2D.Double bounds,Set<T> content){
  Stopwatch timer=new Stopwatch(""String_Node_Str"");
  root=new QuadTreeNode<T>(bounds,content);
  timer.printTime();
}",0.6625258799171843
7146,"/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea,int zoomLevel){
  return root.query(qarea,zoomLevel);
}","/** 
 * Querries the node for KrakEdges with a specific rectangle
 * @param qarea The rectangle for which to find all KrakEdges
 * @return A Set with all KrakEdges within the given Rectangle
 */
public Set<T> query(Rectangle2D.Double qarea){
  return root.query(qarea);
}",0.9575971731448764
7147,"/** 
 * Move the bounds in a specified direction. The length is how far to move in percentage of the screen.
 * @param d	The direction to move (4 directions)
 * @param length	The length to move (in percentage of the screen)
 */
public void move(Direction d,double length){
  double horizontalChange=d.coordinatepoint().getX() * bounds.getWidth() * length;
  double verticalChange=d.coordinatepoint().getY() * bounds.getHeight() * length;
  bounds.setRect(bounds.getX() + horizontalChange,bounds.getY() + verticalChange,bounds.getWidth(),bounds.getHeight());
  updateEdges();
}","/** 
 * Move the bounds in a specified direction. The length is how far to move in percentage of the screen.
 * @param d	The direction to move (4 directions)
 * @param length	The length to move (in percentage of the screen)
 */
public void move(Direction d,double length){
  double horizontalChange=d.coordinatepoint().getX() * bounds.getWidth() * length;
  double verticalChange=d.coordinatepoint().getY() * bounds.getHeight() * length;
  bounds.setRect(bounds.getX() + horizontalChange,bounds.getY() + verticalChange,bounds.getWidth(),bounds.getHeight());
}",0.985022026431718
7148,"/** 
 * Zoom in or out of the graph
 * @param view The rectangle of the view to zoom to.
 */
public void zoom(Rectangle2D bounds){
  this.bounds=bounds;
}","/** 
 * Zoom in or out of the graph
 * @param view The rectangle of the view to zoom to.
 */
public void zoom(Rectangle2D.Double bounds){
  this.bounds=bounds;
}",0.9777777777777776
7149,"public void startRecording(int outputfileformat,String extension){
  stop();
  if (mSampleFile == null) {
    File sampleDir=Environment.getExternalStorageDirectory();
    if (!sampleDir.canWrite())     sampleDir=new File(""String_Node_Str"");
    try {
      mSampleFile=File.createTempFile(SAMPLE_PREFIX,extension,sampleDir);
    }
 catch (    IOException e) {
      setError(SDCARD_ACCESS_ERROR);
      return;
    }
  }
  mRecorder=new MediaRecorder();
  mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  mRecorder.setOutputFormat(outputfileformat);
  mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
  mRecorder.setOutputFile(mSampleFile.getAbsolutePath());
  try {
    mRecorder.prepare();
  }
 catch (  IOException exception) {
    setError(INTERNAL_ERROR);
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  mRecorder.start();
  mSampleStart=System.currentTimeMillis();
  setState(RECORDING_STATE);
}","public void startRecording(int outputfileformat,String extension,Context context){
  stop();
  if (mSampleFile == null) {
    File sampleDir=Environment.getExternalStorageDirectory();
    if (!sampleDir.canWrite())     sampleDir=new File(""String_Node_Str"");
    try {
      mSampleFile=File.createTempFile(SAMPLE_PREFIX,extension,sampleDir);
    }
 catch (    IOException e) {
      setError(SDCARD_ACCESS_ERROR);
      return;
    }
  }
  mRecorder=new MediaRecorder();
  mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  mRecorder.setOutputFormat(outputfileformat);
  mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
  mRecorder.setOutputFile(mSampleFile.getAbsolutePath());
  try {
    mRecorder.prepare();
  }
 catch (  IOException exception) {
    setError(INTERNAL_ERROR);
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  try {
    mRecorder.start();
  }
 catch (  RuntimeException exception) {
    AudioManager audioMngr=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
    boolean isInCall=audioMngr.getMode() == AudioManager.MODE_IN_CALL;
    if (isInCall) {
      setError(IN_CALL_RECORD_ERROR);
    }
 else {
      setError(INTERNAL_ERROR);
    }
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  mSampleStart=System.currentTimeMillis();
  setState(RECORDING_STATE);
}",0.803913228413441
7150,"public void onClick(View button){
  if (!button.isEnabled())   return;
switch (button.getId()) {
case R.id.recordButton:
    mRemainingTimeCalculator.reset();
  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.insert_sd_card);
    updateUi();
  }
 else   if (!mRemainingTimeCalculator.diskSpaceAvailable()) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.storage_is_full);
    updateUi();
  }
 else {
    stopAudioPlayback();
    if (AUDIO_AMR.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_AMR);
      mRecorder.startRecording(MediaRecorder.OutputFormat.AMR_NB,""String_Node_Str"");
    }
 else     if (AUDIO_3GPP.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_3GPP);
      mRecorder.startRecording(MediaRecorder.OutputFormat.THREE_GPP,""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (mMaxFileSize != -1) {
      mRemainingTimeCalculator.setFileSizeLimit(mRecorder.sampleFile(),mMaxFileSize);
    }
  }
break;
case R.id.playButton:
mRecorder.startPlayback();
break;
case R.id.stopButton:
mRecorder.stop();
break;
case R.id.acceptButton:
mRecorder.stop();
saveSample();
finish();
break;
case R.id.discardButton:
mRecorder.delete();
finish();
break;
}
}","public void onClick(View button){
  if (!button.isEnabled())   return;
switch (button.getId()) {
case R.id.recordButton:
    mRemainingTimeCalculator.reset();
  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.insert_sd_card);
    updateUi();
  }
 else   if (!mRemainingTimeCalculator.diskSpaceAvailable()) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.storage_is_full);
    updateUi();
  }
 else {
    stopAudioPlayback();
    if (AUDIO_AMR.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_AMR);
      mRecorder.startRecording(MediaRecorder.OutputFormat.AMR_NB,""String_Node_Str"",this);
    }
 else     if (AUDIO_3GPP.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_3GPP);
      mRecorder.startRecording(MediaRecorder.OutputFormat.THREE_GPP,""String_Node_Str"",this);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (mMaxFileSize != -1) {
      mRemainingTimeCalculator.setFileSizeLimit(mRecorder.sampleFile(),mMaxFileSize);
    }
  }
break;
case R.id.playButton:
mRecorder.startPlayback();
break;
case R.id.stopButton:
mRecorder.stop();
break;
case R.id.acceptButton:
mRecorder.stop();
saveSample();
finish();
break;
case R.id.discardButton:
mRecorder.delete();
finish();
break;
}
}",0.9964887640449438
7151,"public void onError(int error){
  Resources res=getResources();
  String message=null;
switch (error) {
case Recorder.SDCARD_ACCESS_ERROR:
    message=res.getString(R.string.error_sdcard_access);
  break;
case Recorder.INTERNAL_ERROR:
message=res.getString(R.string.error_app_internal);
break;
}
if (message != null) {
new AlertDialog.Builder(this).setTitle(R.string.app_name).setMessage(message).setPositiveButton(R.string.button_ok,null).setCancelable(false).show();
}
}","public void onError(int error){
  Resources res=getResources();
  String message=null;
switch (error) {
case Recorder.SDCARD_ACCESS_ERROR:
    message=res.getString(R.string.error_sdcard_access);
  break;
case Recorder.IN_CALL_RECORD_ERROR:
case Recorder.INTERNAL_ERROR:
message=res.getString(R.string.error_app_internal);
break;
}
if (message != null) {
new AlertDialog.Builder(this).setTitle(R.string.app_name).setMessage(message).setPositiveButton(R.string.button_ok,null).setCancelable(false).show();
}
}",0.963265306122449
7152,"public void startRecording(int outputfileformat,String extension){
  stop();
  if (mSampleFile == null) {
    File sampleDir=Environment.getExternalStorageDirectory();
    if (!sampleDir.canWrite())     sampleDir=new File(""String_Node_Str"");
    try {
      mSampleFile=File.createTempFile(SAMPLE_PREFIX,extension,sampleDir);
    }
 catch (    IOException e) {
      setError(SDCARD_ACCESS_ERROR);
      return;
    }
  }
  mRecorder=new MediaRecorder();
  mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  mRecorder.setOutputFormat(outputfileformat);
  mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
  mRecorder.setOutputFile(mSampleFile.getAbsolutePath());
  try {
    mRecorder.prepare();
  }
 catch (  IOException exception) {
    setError(INTERNAL_ERROR);
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  mRecorder.start();
  mSampleStart=System.currentTimeMillis();
  setState(RECORDING_STATE);
}","public void startRecording(int outputfileformat,String extension,Context context){
  stop();
  if (mSampleFile == null) {
    File sampleDir=Environment.getExternalStorageDirectory();
    if (!sampleDir.canWrite())     sampleDir=new File(""String_Node_Str"");
    try {
      mSampleFile=File.createTempFile(SAMPLE_PREFIX,extension,sampleDir);
    }
 catch (    IOException e) {
      setError(SDCARD_ACCESS_ERROR);
      return;
    }
  }
  mRecorder=new MediaRecorder();
  mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
  mRecorder.setOutputFormat(outputfileformat);
  mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
  mRecorder.setOutputFile(mSampleFile.getAbsolutePath());
  try {
    mRecorder.prepare();
  }
 catch (  IOException exception) {
    setError(INTERNAL_ERROR);
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  try {
    mRecorder.start();
  }
 catch (  RuntimeException exception) {
    AudioManager audioMngr=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
    boolean isInCall=audioMngr.getMode() == AudioManager.MODE_IN_CALL;
    if (isInCall) {
      setError(IN_CALL_RECORD_ERROR);
    }
 else {
      setError(INTERNAL_ERROR);
    }
    mRecorder.reset();
    mRecorder.release();
    mRecorder=null;
    return;
  }
  mSampleStart=System.currentTimeMillis();
  setState(RECORDING_STATE);
}",0.803913228413441
7153,"public void onClick(View button){
  if (!button.isEnabled())   return;
switch (button.getId()) {
case R.id.recordButton:
    mRemainingTimeCalculator.reset();
  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.insert_sd_card);
    updateUi();
  }
 else   if (!mRemainingTimeCalculator.diskSpaceAvailable()) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.storage_is_full);
    updateUi();
  }
 else {
    stopAudioPlayback();
    if (AUDIO_AMR.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_AMR);
      mRecorder.startRecording(MediaRecorder.OutputFormat.AMR_NB,""String_Node_Str"");
    }
 else     if (AUDIO_3GPP.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_3GPP);
      mRecorder.startRecording(MediaRecorder.OutputFormat.THREE_GPP,""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (mMaxFileSize != -1) {
      mRemainingTimeCalculator.setFileSizeLimit(mRecorder.sampleFile(),mMaxFileSize);
    }
  }
break;
case R.id.playButton:
mRecorder.startPlayback();
break;
case R.id.stopButton:
mRecorder.stop();
break;
case R.id.acceptButton:
mRecorder.stop();
saveSample();
finish();
break;
case R.id.discardButton:
mRecorder.delete();
finish();
break;
}
}","public void onClick(View button){
  if (!button.isEnabled())   return;
switch (button.getId()) {
case R.id.recordButton:
    mRemainingTimeCalculator.reset();
  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.insert_sd_card);
    updateUi();
  }
 else   if (!mRemainingTimeCalculator.diskSpaceAvailable()) {
    mSampleInterrupted=true;
    mErrorUiMessage=getResources().getString(R.string.storage_is_full);
    updateUi();
  }
 else {
    stopAudioPlayback();
    if (AUDIO_AMR.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_AMR);
      mRecorder.startRecording(MediaRecorder.OutputFormat.AMR_NB,""String_Node_Str"",this);
    }
 else     if (AUDIO_3GPP.equals(mRequestedType)) {
      mRemainingTimeCalculator.setBitRate(BITRATE_3GPP);
      mRecorder.startRecording(MediaRecorder.OutputFormat.THREE_GPP,""String_Node_Str"",this);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (mMaxFileSize != -1) {
      mRemainingTimeCalculator.setFileSizeLimit(mRecorder.sampleFile(),mMaxFileSize);
    }
  }
break;
case R.id.playButton:
mRecorder.startPlayback();
break;
case R.id.stopButton:
mRecorder.stop();
break;
case R.id.acceptButton:
mRecorder.stop();
saveSample();
finish();
break;
case R.id.discardButton:
mRecorder.delete();
finish();
break;
}
}",0.9964887640449438
7154,"public void onError(int error){
  Resources res=getResources();
  String message=null;
switch (error) {
case Recorder.SDCARD_ACCESS_ERROR:
    message=res.getString(R.string.error_sdcard_access);
  break;
case Recorder.INTERNAL_ERROR:
message=res.getString(R.string.error_app_internal);
break;
}
if (message != null) {
new AlertDialog.Builder(this).setTitle(R.string.app_name).setMessage(message).setPositiveButton(R.string.button_ok,null).setCancelable(false).show();
}
}","public void onError(int error){
  Resources res=getResources();
  String message=null;
switch (error) {
case Recorder.SDCARD_ACCESS_ERROR:
    message=res.getString(R.string.error_sdcard_access);
  break;
case Recorder.IN_CALL_RECORD_ERROR:
case Recorder.INTERNAL_ERROR:
message=res.getString(R.string.error_app_internal);
break;
}
if (message != null) {
new AlertDialog.Builder(this).setTitle(R.string.app_name).setMessage(message).setPositiveButton(R.string.button_ok,null).setCancelable(false).show();
}
}",0.963265306122449
7155,"public PagingCellTablePanel(CellTable<T> table,AbstractPager pager){
  this.table=table;
  this.pager=pager;
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  pager.setDisplay(table);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
  table.setEmptyTableWidget(noDataAvailable);
}","public PagingCellTablePanel(CellTable<T> table,AbstractPager pager){
  UIClientBundle.INSTANCE.getUICssResource().ensureInjected();
  this.table=table;
  this.pager=pager;
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  pager.setDisplay(table);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
  table.setEmptyTableWidget(noDataAvailable);
}",0.9378084896347484
7156,"@Override protected void dispatch(Handler<T> handler){
  handler.onRemoteChange(this);
}","@Override protected void dispatch(Handler<T> handler){
  if (handler == null) {
    return;
  }
  handler.onRemoteChange(this);
}",0.8110599078341014
7157,"public void show(final String message){
  super.show(message);
  this.currentMessage=message;
  Scheduler.get().scheduleFixedDelay(new RepeatingCommand(){
    @Override public boolean execute(){
      if (message.equals(currentMessage)) {
        Window.alert(""String_Node_Str"");
        hideNow();
      }
      return false;
    }
  }
,HIDE_DELAY);
}","public void show(final String message){
  super.show(message);
  this.currentMessage=message;
  Scheduler.get().scheduleFixedDelay(new RepeatingCommand(){
    @Override public boolean execute(){
      if (message.equals(currentMessage)) {
        hideNow();
      }
      return false;
    }
  }
,HIDE_DELAY);
}",0.93815987933635
7158,"@Override public boolean execute(){
  if (message.equals(currentMessage)) {
    Window.alert(""String_Node_Str"");
    hideNow();
  }
  return false;
}","@Override public boolean execute(){
  if (message.equals(currentMessage)) {
    hideNow();
  }
  return false;
}",0.8582375478927203
7159,"/** 
 * Default constructor.
 */
public Notifier(){
  css.ensureInjected();
  addStyleName(css.notifications());
  setAnimationDuration(500);
}","/** 
 * Default constructor.
 */
public Notifier(){
  css.ensureInjected();
  addStyleName(css.notifications());
}",0.8871595330739299
7160,"@Override public void onProxyChange(EntityProxyChange<T> event){
  if (event.getWriteOperation() == WriteOperation.PERSIST) {
    logger.fine(""String_Node_Str"" + event.getWriteOperation().toString() + ""String_Node_Str""+ entityClass.getName()+ ""String_Node_Str"");
    reload();
  }
}","@Override public void onProxyChange(EntityProxyChange<T> event){
  if (event.getWriteOperation() == WriteOperation.PERSIST || event.getWriteOperation() == WriteOperation.UPDATE) {
    logger.fine(""String_Node_Str"" + event.getWriteOperation().toString() + ""String_Node_Str""+ entityClass.getName()+ ""String_Node_Str"");
    reload();
  }
}",0.912621359223301
7161,"public void initialize(final CellTable<T> table,RequestFactory requestFactory,EventBus eventBus){
  this.table=table;
  requestFactory.initialize(eventBus);
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  toolbar.setVisible(false);
  initializePagination(pager);
  initializeSorting();
  EntityProxyChange.registerForProxyType(eventBus,entityClass,new EntityProxyChange.Handler<T>(){
    @Override public void onProxyChange(    EntityProxyChange<T> event){
      if (event.getWriteOperation() == WriteOperation.PERSIST) {
        logger.fine(""String_Node_Str"" + event.getWriteOperation().toString() + ""String_Node_Str""+ entityClass.getName()+ ""String_Node_Str"");
        reload();
      }
    }
  }
);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
}","public void initialize(final CellTable<T> table,RequestFactory requestFactory,EventBus eventBus){
  this.table=table;
  requestFactory.initialize(eventBus);
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  toolbar.setVisible(false);
  initializePagination(pager);
  initializeSorting();
  EntityProxyChange.registerForProxyType(eventBus,entityClass,new EntityProxyChange.Handler<T>(){
    @Override public void onProxyChange(    EntityProxyChange<T> event){
      if (event.getWriteOperation() == WriteOperation.PERSIST || event.getWriteOperation() == WriteOperation.UPDATE) {
        logger.fine(""String_Node_Str"" + event.getWriteOperation().toString() + ""String_Node_Str""+ entityClass.getName()+ ""String_Node_Str"");
        reload();
      }
    }
  }
);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
}",0.9723360655737704
7162,"@Override public Date getValue(){
  String value=textbox.getValue();
  if (value == null || value.isEmpty()) {
    return null;
  }
  try {
    Date d=format.parse(value);
    LOG.finer(""String_Node_Str"" + value);
    return d;
  }
 catch (  Exception e) {
    LOG.warning(""String_Node_Str"" + value);
    return null;
  }
}","@Override public Date getValue(){
  String value=textbox.getValue();
  if (value == null || value.isEmpty()) {
    return null;
  }
  try {
    Date d=format.parse(value);
    return d;
  }
 catch (  Exception e) {
    LOG.warning(""String_Node_Str"" + value);
    return null;
  }
}",0.7284768211920529
7163,"/** 
 * Get a Date in the browser local time.
 * @return The browser local time specified by user.
 */
@Override public Date getValue(){
  Date day=date.getValue();
  if (day == null) {
    return null;
  }
  Date time=this.time.getValue();
  if (time == null) {
    return day;
  }
  LOG.finer(""String_Node_Str"" + time.getTime());
  long timeMillis=time.getTime() % (24 * 60 * 60* 1000);
  int offsetMillis=new Date().getTimezoneOffset() * 60 * 1000;
  if (timeMillis < offsetMillis) {
    timeMillis+=24 * 60 * 60* 1000 - offsetMillis;
  }
  LOG.finer(""String_Node_Str"" + timeMillis);
  Date d=new Date(day.getTime() + timeMillis);
  return d;
}","/** 
 * Get a Date in the browser local time.
 * @return The browser local time specified by user.
 */
@Override public Date getValue(){
  Date day=date.getValue();
  if (day == null) {
    return null;
  }
  Date time=this.time.getValue();
  if (time == null) {
    return day;
  }
  LOG.finer(""String_Node_Str"" + time.getTime());
  long timeMillis=time.getTime() % (24 * 60 * 60* 1000);
  int offsetMillis=new Date().getTimezoneOffset() * 60 * 1000;
  int dayMillis=24 * 60 * 60* 1000;
  if (timeMillis < offsetMillis) {
    timeMillis+=dayMillis;
  }
 else   if (timeMillis + offsetMillis > dayMillis) {
    timeMillis-=dayMillis;
  }
  timeMillis-=offsetMillis;
  LOG.finer(""String_Node_Str"" + timeMillis);
  Date d=new Date(day.getTime() + timeMillis);
  return d;
}",0.8349788434414669
7164,"@Override public Date getValue(){
  Date day=date.getValue();
  Date time=this.time.getValue();
  if (time == null) {
    return day;
  }
  long timeMillis=time.getTime() % (24 * 60 * 60* 1000);
  Date d=new Date(day.getTime() + timeMillis);
  return d;
}","/** 
 * Get a Date in the browser local time.
 * @return The browser local time specified by user.
 */
@Override public Date getValue(){
  Date day=date.getValue();
  if (day == null) {
    return null;
  }
  Date time=this.time.getValue();
  if (time == null) {
    return day;
  }
  LOG.finer(""String_Node_Str"" + time.getTime());
  long timeMillis=time.getTime() % (24 * 60 * 60* 1000);
  int offsetMillis=new Date().getTimezoneOffset() * 60 * 1000;
  if (timeMillis < offsetMillis) {
    timeMillis+=24 * 60 * 60* 1000 - offsetMillis;
  }
  LOG.finer(""String_Node_Str"" + timeMillis);
  Date d=new Date(day.getTime() + timeMillis);
  return d;
}",0.565410199556541
7165,"@Override public void onModuleLoad(){
  demoEditorPanel();
}","@Override public void onModuleLoad(){
  demoCellTableDialog();
  demoEditorPanel();
}",0.8275862068965517
7166,"public AbstractCellTable<T> getTable(){
  return table;
}","public HasSorting<T> getTable(){
  return table;
}",0.7850467289719626
7167,"public PagingCellTablePanel(AbstractCellTable<T> table,AbstractPager pager){
  UIClientBundle.INSTANCE.getUICssResource().ensureInjected();
  this.table=table;
  this.pager=pager;
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  pager.setDisplay(table);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
  table.setEmptyTableWidget(noDataAvailable);
}","public PagingCellTablePanel(CellTable<T> table,AbstractPager pager){
  UIClientBundle.INSTANCE.getUICssResource().ensureInjected();
  this.table=table;
  this.pager=pager;
  Binder binder=GWT.create(Binder.class);
  initWidget(binder.createAndBindUi(this));
  body.setWidget(table);
  footer.setWidget(pager);
  pager.setDisplay(table);
  noDataAvailable=new Label(UIConstants.INSTANCE.noDataAvailable());
  noDataAvailable.addStyleName(UIClientBundle.INSTANCE.getUICssResource().noData());
  table.setEmptyTableWidget(noDataAvailable);
}",0.992619926199262
7168,"@Override public Set<T> getValue(){
  Set<T> results=new HashSet<T>();
  for (int i=0; i < getItemCount(); i++) {
    if (isItemSelected(i)) {
      results.add(values.get(getValue(i)));
    }
  }
  lazySelectValues=null;
  LOG.fine(""String_Node_Str"" + results.toString());
  return results;
}","@Override public Set<T> getValue(){
  Set<T> results=new HashSet<T>();
  for (int i=0; i < getItemCount(); i++) {
    if (isItemSelected(i)) {
      results.add(values.get(getValue(i)));
    }
  }
  if (getItemCount() == 0 && lazySelectValues != null) {
    return lazySelectValues;
  }
  lazySelectValues=null;
  return results;
}",0.6923076923076923
7169,"/** 
 * Convert this value to a simple String. Should be unique per item given.
 * @param item
 * @return
 */
protected String valueOf(T item){
  if (item == null) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"" + item.hashCode();
}","/** 
 * Convert this value to a simple String. Should be unique per item given.
 * @param item
 * @return
 */
protected String valueOf(T item){
  if (item == null) {
    return ""String_Node_Str"";
  }
  return item.toString();
}",0.9240506329113924
7170,"/** 
 * The default implementation will display, but not consume, received errors whose   {@link EditorError#getEditor() getEditor()} method returns theEditor passed into  {@link #setEditor}.
 * @param errors a List of  {@link EditorError} instances
 */
public void showErrors(List<EditorError> errors){
  StringBuilder sb=new StringBuilder();
  for (  EditorError error : errors) {
    if (error.getEditor().equals(editor)) {
      sb.append(""String_Node_Str"").append(error.getMessage());
    }
  }
  if (sb.length() == 0) {
    errorLabel.setInnerText(""String_Node_Str"");
    errorLabel.getStyle().setDisplay(Display.NONE);
    return;
  }
  errorLabel.setInnerText(sb.substring(1));
  errorLabel.getStyle().setDisplay(Display.INLINE_BLOCK);
}","/** 
 * The default implementation will display, but not consume, received errors whose   {@link EditorError#getEditor() getEditor()} method returns theEditor passed into  {@link #setEditor}.
 * @param errors a List of  {@link EditorError} instances
 */
public void showErrors(List<EditorError> errors){
  StringBuilder sb=new StringBuilder();
  for (  EditorError error : errors) {
    if (error.getEditor().equals(editor)) {
      sb.append(""String_Node_Str"").append(error.getMessage());
    }
  }
  if (sb.length() == 0) {
    errorLabel.setInnerText(""String_Node_Str"");
    errorLabel.getStyle().setDisplay(Display.NONE);
    return;
  }
  errorLabel.setInnerText(sb.substring(1));
  errorLabel.getStyle().setDisplay(Display.INLINE_BLOCK);
  addStyleName(""String_Node_Str"");
}",0.9770491803278688
7171,"public MigrationDifference(Release release,Integer currentMigration,Integer targetMigration){
  this.release=release;
  this.currentMigration=currentMigration == null ? 0 : currentMigration;
  this.targetMigration=targetMigration == null ? release.getMaxScriptNumber() : targetMigration;
}","public MigrationDifference(Release release,Integer currentMigration,Integer targetMigration){
  this.release=release;
  this.currentMigration=currentMigration == null ? 0 : currentMigration;
  this.targetMigration=targetMigration == null ? release.getMaxScriptNumber() : targetMigration;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"" + release.getNumber() + ""String_Node_Str""+ currentMigration+ ""String_Node_Str""+ targetMigration);
  }
}",0.7789757412398922
7172,"private MigrationDifference createDifference(int current,int target,int... scriptNumbers){
  Release release=new Mock.Release(1,scriptNumbers);
  return new MigrationDifference(release,current,target);
}","private MigrationDifference createDifference(Integer current,Integer target,int... scriptNumbers){
  Release release=new Mock.Release(1,scriptNumbers);
  return new MigrationDifference(release,current,target);
}",0.9082125603864736
7173,"private Table massageTableForOracle(Table table){
  if (hasAutomaticPrimaryKey(table)) {
    table.getPrimaryKeyColumns()[0].setAutoIncrement(false);
  }
  return table;
}","private static Table massageTableForOracle(Table table){
  Table massaged=cloneTable(table);
  if (hasAutomaticPrimaryKey(massaged)) {
    massaged.getPrimaryKeyColumns()[0].setAutoIncrement(false);
  }
  return table;
}",0.8235294117647058
7174,"private boolean hasAutomaticPrimaryKey(Table table){
  if (table.getPrimaryKeyColumns().length == 1) {
    Column pk=table.getPrimaryKeyColumns()[0];
    return pk.isAutoIncrement();
  }
 else {
    return false;
  }
}","private static boolean hasAutomaticPrimaryKey(Table table){
  if (table.getPrimaryKeyColumns().length == 1) {
    Column pk=table.getPrimaryKeyColumns()[0];
    return pk.isAutoIncrement();
  }
 else {
    return false;
  }
}",0.984198645598194
7175,"private static Table massageTableForOracle(Table table){
  Table massaged=cloneTable(table);
  if (hasAutomaticPrimaryKey(massaged)) {
    massaged.getPrimaryKeyColumns()[0].setAutoIncrement(false);
  }
  return table;
}","static Table massageTableForOracle(Table table){
  Table massaged=cloneTable(table);
  if (hasAutomaticPrimaryKey(massaged)) {
    massaged.getPrimaryKeyColumns()[0].setAutoIncrement(false);
  }
  return massaged;
}",0.9517241379310344
7176,"private static Table cloneTable(Table table){
  Table massaged;
  try {
    massaged=(Table)table.clone();
    while (massaged.getColumnCount() > 0) {
      massaged.removeColumn(0);
    }
    for (    Column column : table.getColumns()) {
      massaged.addColumn((Column)column.clone());
    }
  }
 catch (  CloneNotSupportedException e) {
    throw new Error(""String_Node_Str"",e);
  }
  return massaged;
}","private static Table cloneTable(Table table){
  Table clone;
  try {
    clone=(Table)table.clone();
    while (clone.getColumnCount() > 0) {
      clone.removeColumn(0);
    }
    for (    Column column : table.getColumns()) {
      clone.addColumn((Column)column.clone());
    }
  }
 catch (  CloneNotSupportedException e) {
    throw new Error(""String_Node_Str"",e);
  }
  return clone;
}",0.6165413533834586
7177,"public void draw(Graphics g){
  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < MAX_FINGER_BLOBS; i++) {
    Finger f=blobs[i];
    if (f != null)     bloblist.add(f);
    for (    Finger blob : bloblist) {
      if (blob != null && blob.getState() == FingerState.PRESSED) {
        int x=(int)(width * (blob.getX()));
        int y=(int)(height * (1 - blob.getY()));
        int xsize=(int)(10 * blob.getSize() * (blob.getMajorAxis() / 2));
        int ysize=(int)(10 * blob.getSize() * (blob.getMinorAxis() / 2));
        int ang=blob.getAngle();
        Color pitchcolor=new Color((int)Math.floor((x / 800.0) * 255),255 - (int)Math.floor((y / 600.0) * 255),0);
        g.setColor(pitchcolor);
        Ellipse2D ellipse=new Ellipse2D.Float(0,0,xsize,ysize);
        AffineTransform at=AffineTransform.getTranslateInstance(0,0);
        at.translate(x - xsize / 2,y - ysize / 2);
        at.rotate((Math.PI / 180) * -ang,xsize / 2,ysize / 2);
        ((Graphics2D)g).fill(at.createTransformedShape(ellipse));
        g.setColor(Color.DARK_GRAY);
      }
    }
    if (bloblist.size() > 10)     bloblist.remove(0);
  }
}","public void draw(Graphics g){
  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < MAX_FINGER_BLOBS; i++) {
    Finger f=blobs[i];
    if (f != null)     bloblist.add(f);
    for (    Finger blob : bloblist) {
      if (blob != null && blob.getState() == FingerState.PRESSED) {
        int x=(int)(width * (blob.getX()));
        int y=(int)(height * (1 - blob.getY()));
        int xsize=(int)(10 * blob.getSize() * (blob.getMajorAxis() / 2));
        int ysize=(int)(10 * blob.getSize() * (blob.getMinorAxis() / 2));
        int ang=blob.getAngle();
        if (x > 0 && y > 0) {
          Color pitchcolor=new Color((int)Math.floor((x / 800.0) * 255),255 - (int)Math.floor((y / 600.0) * 255),0);
          g.setColor(pitchcolor);
          Ellipse2D ellipse=new Ellipse2D.Float(0,0,xsize,ysize);
          AffineTransform at=AffineTransform.getTranslateInstance(0,0);
          at.translate(x - xsize / 2,y - ysize / 2);
          at.rotate((Math.PI / 180) * -ang,xsize / 2,ysize / 2);
          ((Graphics2D)g).fill(at.createTransformedShape(ellipse));
          g.setColor(Color.DARK_GRAY);
        }
      }
    }
    if (bloblist.size() > 10)     bloblist.remove(0);
  }
}",0.9770679770679772
7178,"public void changeInstrument(int id){
  if (init)   filter.input.disconnect();
  CURRENT_INSTRUMENT.stop();
switch (id) {
case KaossTest.INSTRUMENT_SINE:
    CURRENT_INSTRUMENT=SINE;
  break;
case KaossTest.INSTRUMENT_TRIANGLE:
CURRENT_INSTRUMENT=TRIANGLE;
CURRENT_INSTRUMENT.resetEnvelope();
break;
case KaossTest.INSTRUMENT_SQUARE:
CURRENT_INSTRUMENT=SQUARE;
break;
case KaossTest.INSTRUMENT_REDNOISE:
CURRENT_INSTRUMENT=REDNOISE;
break;
case KaossTest.INSTRUMENT_SAWTOOTH:
CURRENT_INSTRUMENT=SAWTOOTH;
break;
case KaossTest.INSTRUMENT_SINGINGSAW:
CURRENT_INSTRUMENT=SINGINGSAW;
break;
case KaossTest.INSTRUMENT_CUOMO:
CURRENT_INSTRUMENT=CUOMO;
break;
case KaossTest.INSTRUMENT_GONG:
CURRENT_INSTRUMENT=GONG;
break;
case KaossTest.INSTRUMENT_MESSIER:
CURRENT_INSTRUMENT=MESSIER;
break;
case KaossTest.INSTRUMENT_SQUOISE:
CURRENT_INSTRUMENT=SQUOISE;
break;
}
SynthMixer instrumentMix=CURRENT_INSTRUMENT.getMixer();
instrumentMix.start();
updateLFO();
if (init) instrumentMix.connectOutput(0,filter.input,0);
}","public void changeInstrument(int id){
  if (init)   inputAdder.inputA.disconnect();
  CURRENT_INSTRUMENT.stop();
switch (id) {
case KaossTest.INSTRUMENT_SINE:
    CURRENT_INSTRUMENT=SINE;
  break;
case KaossTest.INSTRUMENT_TRIANGLE:
CURRENT_INSTRUMENT=TRIANGLE;
CURRENT_INSTRUMENT.resetEnvelope();
break;
case KaossTest.INSTRUMENT_SQUARE:
CURRENT_INSTRUMENT=SQUARE;
break;
case KaossTest.INSTRUMENT_REDNOISE:
CURRENT_INSTRUMENT=REDNOISE;
break;
case KaossTest.INSTRUMENT_SAWTOOTH:
CURRENT_INSTRUMENT=SAWTOOTH;
break;
case KaossTest.INSTRUMENT_SINGINGSAW:
CURRENT_INSTRUMENT=SINGINGSAW;
break;
case KaossTest.INSTRUMENT_CUOMO:
CURRENT_INSTRUMENT=CUOMO;
break;
case KaossTest.INSTRUMENT_GONG:
CURRENT_INSTRUMENT=GONG;
break;
case KaossTest.INSTRUMENT_MESSIER:
CURRENT_INSTRUMENT=MESSIER;
break;
case KaossTest.INSTRUMENT_SQUOISE:
CURRENT_INSTRUMENT=SQUOISE;
break;
}
SynthMixer instrumentMix=CURRENT_INSTRUMENT.getMixer();
instrumentMix.start();
updateLFO();
if (init) instrumentMix.connectOutput(0,inputAdder.inputA,0);
}",0.98128078817734
7179,"public void updatePan(double pan){
  controller.pan(pan);
  display.updatePanKnob(pan);
}","public void updatePan(double pan){
  controller.pan(pan);
  if (display != null)   display.updatePanKnob(pan);
}",0.8855721393034826
7180,"public void updateModDepth(int depth){
  controller.updateModDepth(depth);
  display.updateDepthKnob(depth);
}","public void updateModDepth(int depth){
  controller.updateModDepth(depth);
  if (display != null)   display.updateDepthKnob(depth);
}",0.9053497942386832
7181,"public void updateModRate(int rate){
  controller.updateModRate(rate);
  display.updateRateKnob(rate);
}","public void updateModRate(int rate){
  controller.updateModRate(rate);
  if (display != null)   display.updateRateKnob(rate);
}",0.9004329004329005
7182,"public void updateFrequency(int y){
  controller.changeFrequency(y);
  display.updatePitchKnob(y);
}","public void updateFrequency(int y){
  controller.changeFrequency(y);
  if (display != null)   display.updatePitchKnob(y);
}",0.8968609865470852
7183,"public void updateLowpass(int lowpass){
  controller.lowpass(lowpass);
  display.updateLoKnob(lowpass);
}","public void updateLowpass(int lowpass){
  controller.lowpass(lowpass);
  if (display != null)   display.updateLoKnob(lowpass);
}",0.9012875536480688
7184,"public void run(){
  while (true) {
    surfaceUpdate();
    repaint();
    try {
      Thread.sleep(UPDATE_PERIOD);
    }
 catch (    InterruptedException ex) {
    }
  }
}","public void run(){
  while (true) {
    requestFocus();
    requestFocusInWindow();
    surfaceUpdate();
    repaint();
    try {
      Thread.sleep(UPDATE_PERIOD);
    }
 catch (    InterruptedException ex) {
    }
  }
}",0.8781725888324873
7185,"public void updatePanKnob(double pan){
  panKnob.setValue((float)(pan + 1.0));
}","public void updatePanKnob(double pan){
  panKnob.setValue((float)(pan + 1.0) / 2.0f);
}",0.9580838323353292
7186,"public void surfaceStart(){
  fingers=new Fingers(SURFACE_WIDTH,SURFACE_HEIGHT);
  Thread surfaceThread=new Thread(){
    public void run(){
      while (true) {
        surfaceUpdate();
        repaint();
        try {
          Thread.sleep(UPDATE_PERIOD);
        }
 catch (        InterruptedException ex) {
        }
      }
    }
  }
;
  surfaceThread.start();
}","public void surfaceStart(){
  fingers=new Fingers(SURFACE_WIDTH,SURFACE_HEIGHT);
  Thread surfaceThread=new Thread(){
    public void run(){
      while (true) {
        requestFocus();
        requestFocusInWindow();
        surfaceUpdate();
        repaint();
        try {
          Thread.sleep(UPDATE_PERIOD);
        }
 catch (        InterruptedException ex) {
        }
      }
    }
  }
;
  surfaceThread.start();
}",0.9292929292929292
7187,"public SwingTest(KaossTest kaoss,SynthScope scope){
  this.kaoss=kaoss;
  this.setFocusable(true);
  this.addKeyListener(this);
  container=new JPanel();
  container.setPreferredSize(new Dimension(SURFACE_WIDTH + 250,SURFACE_HEIGHT + 400));
  container.setLayout(new BorderLayout());
  makeControls();
  content=new JPanel();
  content.setPreferredSize(new Dimension(SURFACE_WIDTH,SURFACE_HEIGHT + 400));
  content.setLayout(new BorderLayout());
  surface=new SurfaceCanvas();
  surface.setPreferredSize(new Dimension(SURFACE_WIDTH,SURFACE_HEIGHT));
  surface.setBackground(bgColor);
  content.add(surface,BorderLayout.CENTER);
  newScope(scope);
  container.add(content,BorderLayout.CENTER);
  container.add(controls,BorderLayout.WEST);
  this.setContentPane(container);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  this.pack();
  this.setTitle(""String_Node_Str"");
  this.setVisible(true);
  surfaceStart();
}","public SwingTest(KaossTest kaoss,SynthScope scope){
  this.kaoss=kaoss;
  this.setFocusable(true);
  this.addKeyListener(this);
  container=new JPanel();
  container.setPreferredSize(new Dimension(SURFACE_WIDTH + 250,SURFACE_HEIGHT + 450));
  container.setLayout(new BorderLayout());
  content=new JPanel();
  content.setPreferredSize(new Dimension(SURFACE_WIDTH,SURFACE_HEIGHT + 450));
  content.setLayout(new BorderLayout());
  extraControls=new JPanel();
  extraControls.setPreferredSize(new Dimension(0,50));
  extraControls.setLayout(new BoxLayout(extraControls,BoxLayout.X_AXIS));
  extraControls.setBackground(bgColor);
  makeControls();
  surface=new SurfaceCanvas();
  surface.setPreferredSize(new Dimension(SURFACE_WIDTH,SURFACE_HEIGHT));
  surface.setBackground(bgColor);
  content.add(surface,BorderLayout.CENTER);
  newScope(scope);
  container.add(content,BorderLayout.CENTER);
  container.add(controls,BorderLayout.WEST);
  content.add(extraControls,BorderLayout.SOUTH);
  this.setContentPane(container);
  this.setDefaultCloseOperation(EXIT_ON_CLOSE);
  this.pack();
  this.setTitle(""String_Node_Str"");
  this.setVisible(true);
  surfaceStart();
}",0.8383060635226179
7188,"public void keyPressed(KeyEvent e){
  System.out.println(""String_Node_Str"" + Synth.getObjectCount());
  int code=e.getKeyCode();
switch (code) {
case KeyEvent.VK_N:
    kaoss.changeScale(Instrument.minorScale);
  break;
case KeyEvent.VK_M:
kaoss.changeScale(Instrument.majorScale);
break;
case KeyEvent.VK_C:
kaoss.changeScale(Instrument.chromaticScale);
break;
case KeyEvent.VK_B:
kaoss.changeScale(Instrument.minorBluesScale);
break;
case KeyEvent.VK_D:
kaoss.toggleDelay();
break;
case KeyEvent.VK_R:
kaoss.toggleReverb();
break;
case KeyEvent.VK_S:
kaoss.sauceBoss();
break;
case KeyEvent.VK_UP:
kaoss.changePitch(1);
break;
case KeyEvent.VK_DOWN:
kaoss.changePitch(-1);
break;
default :
int id=Character.getNumericValue(e.getKeyChar());
if (id > -1) {
kaoss.changeInstrument(id);
updateControls(id);
}
}
System.out.println(""String_Node_Str"" + Synth.getObjectCount());
}","public void keyPressed(KeyEvent e){
  System.out.println(""String_Node_Str"" + Synth.getObjectCount());
  int code=e.getKeyCode();
switch (code) {
case KeyEvent.VK_N:
    kaoss.changeScale(Instrument.minorScale);
  for (  JLabel label : scaleLabels)   label.setForeground(scaleText);
minorLabel.setForeground(scaleSelText);
break;
case KeyEvent.VK_M:
kaoss.changeScale(Instrument.majorScale);
for (JLabel label : scaleLabels) label.setForeground(scaleText);
majorLabel.setForeground(scaleSelText);
break;
case KeyEvent.VK_C:
kaoss.changeScale(Instrument.chromaticScale);
for (JLabel label : scaleLabels) label.setForeground(scaleText);
chromaticLabel.setForeground(scaleSelText);
break;
case KeyEvent.VK_B:
kaoss.changeScale(Instrument.minorBluesScale);
for (JLabel label : scaleLabels) label.setForeground(scaleText);
bluesLabel.setForeground(scaleSelText);
break;
case KeyEvent.VK_D:
kaoss.toggleDelay();
fxEnabled=!fxEnabled;
if (fxEnabled) delayLabel.setForeground(effectSelText);
 else delayLabel.setForeground(effectText);
break;
case KeyEvent.VK_R:
kaoss.toggleReverb();
reverbEnabled=!reverbEnabled;
if (reverbEnabled) reverbLabel.setForeground(effectSelText);
 else reverbLabel.setForeground(effectText);
break;
case KeyEvent.VK_S:
kaoss.sauceBoss();
break;
case KeyEvent.VK_UP:
kaoss.changePitch(1);
break;
case KeyEvent.VK_DOWN:
kaoss.changePitch(-1);
break;
default :
int id=Character.getNumericValue(e.getKeyChar());
if (id > -1) {
kaoss.changeInstrument(id);
updateControls(id);
}
}
System.out.println(""String_Node_Str"" + Synth.getObjectCount());
}",0.7181594083812654
7189,"public void makeControls(){
  controls=new JPanel();
  instruments=new JPanel();
  controls.add(instruments);
  controls.setPreferredSize(new Dimension(250,SURFACE_HEIGHT + 400));
  controls.setLayout(new BoxLayout(controls,BoxLayout.Y_AXIS));
  controls.setBackground(bgColor);
  instruments.setPreferredSize(new Dimension(250,350));
  instruments.setLayout(new GridLayout(0,1));
  instruments.setBackground(bgColor);
  header.setFont(headerFont);
  header.setForeground(fgText);
  header.setAlignmentX(Component.LEFT_ALIGNMENT);
  instruments.add(header);
  instruments.add(Box.createVerticalGlue());
  int i=1;
  for (  JLabel label : instrumLabels) {
    label.setFont(instrumFont);
    if (KaossTest.INSTRUMENT_DEFAULT == i)     label.setForeground(instrumSelText);
 else     label.setForeground(instrumText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
    instruments.add(label);
    instruments.add(Box.createVerticalGlue());
    i++;
  }
  knobs=new JPanel();
  knobs.setPreferredSize(new Dimension(250,300));
  knobs.setLayout(new GridLayout(0,2));
  knobs.setBackground(bgColor);
  controls.add(knobs);
  for (  JLabel label : knobLabels) {
    label.setFont(knobFont);
    label.setForeground(knobText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
  }
  knobs.add(loKnob=new DKnob());
  knobs.add(lowpassLabel);
  knobs.add(pitchKnob=new DKnob());
  knobs.add(pitchLabel);
  knobs.add(panKnob=new DKnob());
  knobs.add(panLabel);
  knobs.add(depthKnob=new DKnob());
  knobs.add(depthLabel);
  knobs.add(rateKnob=new DKnob());
  knobs.add(rateLabel);
}","public void makeControls(){
  controls=new JPanel();
  instruments=new JPanel();
  controls.add(instruments);
  controls.setPreferredSize(new Dimension(250,SURFACE_HEIGHT + 400));
  controls.setLayout(new BoxLayout(controls,BoxLayout.Y_AXIS));
  controls.setBackground(bgColor);
  instruments.setPreferredSize(new Dimension(250,350));
  instruments.setLayout(new GridLayout(0,1));
  instruments.setBackground(bgColor);
  header.setFont(headerFont);
  header.setForeground(fgText);
  header.setAlignmentX(Component.LEFT_ALIGNMENT);
  instruments.add(header);
  instruments.add(Box.createVerticalGlue());
  int i=1;
  for (  JLabel label : instrumLabels) {
    label.setFont(instrumFont);
    if (KaossTest.INSTRUMENT_DEFAULT == i)     label.setForeground(instrumSelText);
 else     label.setForeground(instrumText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
    instruments.add(label);
    instruments.add(Box.createVerticalGlue());
    i++;
  }
  knobs=new JPanel();
  knobs.setPreferredSize(new Dimension(250,300));
  knobs.setLayout(new GridLayout(0,2));
  knobs.setBackground(bgColor);
  controls.add(knobs);
  for (  JLabel label : knobLabels) {
    label.setFont(knobFont);
    label.setForeground(knobText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
  }
  knobs.add(loKnob=new DKnob());
  knobs.add(lowpassLabel);
  knobs.add(pitchKnob=new DKnob());
  knobs.add(pitchLabel);
  knobs.add(panKnob=new DKnob());
  knobs.add(panLabel);
  knobs.add(depthKnob=new DKnob());
  knobs.add(depthLabel);
  knobs.add(rateKnob=new DKnob());
  knobs.add(rateLabel);
  for (  JLabel label : scaleLabels) {
    label.setFont(scaleFont);
    label.setForeground(scaleText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
    extraControls.add(label);
    extraControls.add(Box.createHorizontalGlue());
  }
  for (  JLabel label : effectLabels) {
    label.setFont(effectFont);
    label.setForeground(effectText);
    label.setAlignmentX(Component.LEFT_ALIGNMENT);
    extraControls.add(label);
    extraControls.add(Box.createHorizontalGlue());
  }
  majorLabel.setForeground(scaleSelText);
}",0.8568323825047541
7190,"public void draw(Graphics g){
  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < MAX_FINGER_BLOBS; i++) {
    Finger f=blobs[i];
    if (f != null)     bloblist.add(f);
    for (    Finger blob : bloblist) {
      if (blob != null && blob.getState() == FingerState.PRESSED) {
        int x=(int)(width * (blob.getX()));
        int y=(int)(height * (1 - blob.getY()));
        int xsize=(int)(10 * blob.getSize() * (blob.getMajorAxis() / 2));
        int ysize=(int)(10 * blob.getSize() * (blob.getMinorAxis() / 2));
        int ang=blob.getAngle();
        if (x > 0 && y > 0) {
          Color pitchcolor=new Color((int)Math.floor((x / 800.0) * 255),255 - (int)Math.floor((y / 600.0) * 255),0);
          g.setColor(pitchcolor);
          Ellipse2D ellipse=new Ellipse2D.Float(0,0,xsize,ysize);
          AffineTransform at=AffineTransform.getTranslateInstance(0,0);
          at.translate(x - xsize / 2,y - ysize / 2);
          at.rotate((Math.PI / 180) * -ang,xsize / 2,ysize / 2);
          ((Graphics2D)g).fill(at.createTransformedShape(ellipse));
          g.setColor(Color.DARK_GRAY);
        }
      }
    }
    if (bloblist.size() > 10)     bloblist.remove(0);
  }
}","public void draw(Graphics g){
  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  for (int i=0; i < MAX_FINGER_BLOBS; i++) {
    Finger f=blobs[i];
    if (f != null)     bloblist.add(f);
    for (    Finger blob : bloblist) {
      if (blob != null && blob.getState() == FingerState.PRESSED) {
        int x=(int)(width * (blob.getX()));
        int y=(int)(height * (1 - blob.getY()));
        int xsize=(int)(10 * blob.getSize() * (blob.getMajorAxis() / 2));
        int ysize=(int)(10 * blob.getSize() * (blob.getMinorAxis() / 2));
        int ang=blob.getAngle();
        if (x > 0 && y > 0 && x < SwingTest.SURFACE_WIDTH && y < SwingTest.SURFACE_HEIGHT) {
          Color pitchcolor=new Color((int)Math.floor((x / (float)SwingTest.SURFACE_WIDTH) * 255),255 - (int)Math.floor((y / (float)SwingTest.SURFACE_HEIGHT) * 255),0);
          g.setColor(pitchcolor);
          Ellipse2D ellipse=new Ellipse2D.Float(0,0,xsize,ysize);
          AffineTransform at=AffineTransform.getTranslateInstance(0,0);
          at.translate(x - xsize / 2,y - ysize / 2);
          at.rotate((Math.PI / 180) * -ang,xsize / 2,ysize / 2);
          ((Graphics2D)g).fill(at.createTransformedShape(ellipse));
          g.setColor(Color.DARK_GRAY);
        }
      }
    }
    if (bloblist.size() > 10)     bloblist.remove(0);
  }
}",0.9486983154670752
7191,"public void newScope(SynthScope scope){
  if (this.scope != null)   content.remove(this.scope);
  this.scope=scope;
  setupScope();
  content.add(this.scope,BorderLayout.SOUTH);
  content.validate();
}","public void newScope(SynthScope scope){
  if (this.scope != null)   content.remove(this.scope);
  this.scope=scope;
  setupScope();
  content.add(this.scope,BorderLayout.SOUTH);
  content.add(extraControls,BorderLayout.SOUTH);
  content.validate();
}",0.8913525498891353
7192,"public void changeInstrument(int id){
  if (init)   filter.input.disconnect();
switch (id) {
case KaossTest.INSTRUMENT_SINE:
    CURRENT_INSTRUMENT=SINE;
  break;
case KaossTest.INSTRUMENT_TRIANGLE:
CURRENT_INSTRUMENT=TRIANGLE;
break;
case KaossTest.INSTRUMENT_SQUARE:
CURRENT_INSTRUMENT=SQUARE;
break;
case KaossTest.INSTRUMENT_REDNOISE:
CURRENT_INSTRUMENT=REDNOISE;
break;
case KaossTest.INSTRUMENT_SAWTOOTH:
CURRENT_INSTRUMENT=SAWTOOTH;
break;
case KaossTest.INSTRUMENT_CUOMO:
CURRENT_INSTRUMENT=CUOMO;
break;
case KaossTest.INSTRUMENT_SINGINGSAW:
CURRENT_INSTRUMENT=SINGINGSAW;
break;
}
SynthMixer instrumentMix=CURRENT_INSTRUMENT.getMixer();
instrumentMix.start();
updateLFO();
if (init) instrumentMix.connectOutput(0,filter.input,0);
}","public void changeInstrument(int id){
  if (init)   filter.input.disconnect();
switch (id) {
case KaossTest.INSTRUMENT_SINE:
    CURRENT_INSTRUMENT=SINE;
  break;
case KaossTest.INSTRUMENT_TRIANGLE:
CURRENT_INSTRUMENT=TRIANGLE;
break;
case KaossTest.INSTRUMENT_SQUARE:
CURRENT_INSTRUMENT=SQUARE;
break;
case KaossTest.INSTRUMENT_REDNOISE:
CURRENT_INSTRUMENT=REDNOISE;
break;
case KaossTest.INSTRUMENT_SAWTOOTH:
CURRENT_INSTRUMENT=SAWTOOTH;
break;
case KaossTest.INSTRUMENT_SINGINGSAW:
CURRENT_INSTRUMENT=SINGINGSAW;
break;
case KaossTest.INSTRUMENT_CUOMO:
CURRENT_INSTRUMENT=CUOMO;
break;
}
SynthMixer instrumentMix=CURRENT_INSTRUMENT.getMixer();
instrumentMix.start();
updateLFO();
if (init) instrumentMix.connectOutput(0,filter.input,0);
}",0.9109311740890688
7193,"public int getInstrumentIdFromChar(char c){
  if (c == Character.forDigit(KaossTest.INSTRUMENT_SAWTOOTH,10))   return KaossTest.INSTRUMENT_SAWTOOTH;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_SINE,10))   return KaossTest.INSTRUMENT_SINE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_TRIANGLE,10))   return KaossTest.INSTRUMENT_TRIANGLE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_SQUARE,10))   return KaossTest.INSTRUMENT_SQUARE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_REDNOISE,10))   return KaossTest.INSTRUMENT_REDNOISE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_CUOMO,10))   return KaossTest.INSTRUMENT_CUOMO;
 else   return KaossTest.INSTRUMENT_CUOMO;
}","public int getInstrumentIdFromChar(char c){
  if (c == Character.forDigit(KaossTest.INSTRUMENT_SINE,10))   return KaossTest.INSTRUMENT_SINE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_TRIANGLE,10))   return KaossTest.INSTRUMENT_TRIANGLE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_SQUARE,10))   return KaossTest.INSTRUMENT_SQUARE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_REDNOISE,10))   return KaossTest.INSTRUMENT_REDNOISE;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_SAWTOOTH,10))   return KaossTest.INSTRUMENT_SAWTOOTH;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_SINGINGSAW,10))   return KaossTest.INSTRUMENT_SINGINGSAW;
 else   if (c == Character.forDigit(KaossTest.INSTRUMENT_CUOMO,10))   return KaossTest.INSTRUMENT_CUOMO;
 else   return KaossTest.INSTRUMENT_CUOMO;
}",0.5003174603174603
7194,"public void onClick(View v){
switch (v.getId()) {
case R.id.backbutton:
    finish();
  break;
case R.id.homebutton:
Intent j=new Intent(this,TabWidget.class);
startActivity(j);
break;
}
}","public void onClick(View v){
switch (v.getId()) {
case R.id.backbutton:
    Intent i=new Intent(this,Marketplace.class);
  startActivity(i);
break;
case R.id.homebutton:
Intent j=new Intent(this,TabWidget.class);
startActivity(j);
break;
}
}",0.8205128205128205
7195,"public View getView(int position,View convertView,ViewGroup parent){
  View v;
  if (convertView == null) {
    LayoutInflater li=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    v=li.inflate(R.layout.icon,null);
    TextView tv=(TextView)v.findViewById(R.id.icon_text);
    tv.setText(robots[position]);
    ImageView iv=(ImageView)v.findViewById(R.id.icon_image);
    iv.setImageResource(mThumbIds[position]);
    TextView number=(TextView)v.findViewById(R.id.icon_number);
    number.setText(quantity[position]);
  }
 else {
    v=convertView;
  }
  return v;
}","public View getView(int position,View convertView,ViewGroup parent){
  this.setQuantity();
  View v;
  if (convertView == null) {
    LayoutInflater li=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    v=li.inflate(R.layout.icon,null);
    TextView tv=(TextView)v.findViewById(R.id.icon_text);
    tv.setText(robots[position]);
    ImageView iv=(ImageView)v.findViewById(R.id.icon_image);
    iv.setImageResource(mThumbIds[position]);
    TextView number=(TextView)v.findViewById(R.id.icon_number);
    number.setText(quantity[position]);
  }
 else {
    v=convertView;
  }
  return v;
}",0.9818481848184818
7196,"@Override public String toString(){
  return String.format(""String_Node_Str"",items.get(id),slot,amount,damage);
}","@Override public String toString(){
  if (items.get(id) != null) {
    return String.format(""String_Node_Str"",items.get(id),slot,amount,damage);
  }
 else {
    return String.format(""String_Node_Str"",id,slot,amount,damage);
  }
}",0.5789473684210527
7197,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.hosts);
  registerForContextMenu(getListView());
  startActivityForResult(new Intent(this,SplashActivity.class),SPLASH_REQUEST_REQ);
  initializeHostList();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.hosts);
  registerForContextMenu(getListView());
  if (savedInstanceState == null || !savedInstanceState.getBoolean(INITIALIZED_KEY)) {
    startActivityForResult(new Intent(this,SplashActivity.class),SPLASH_REQUEST_REQ);
  }
  initializeHostList();
}",0.859304084720121
7198,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  initializeListView();
  registerForContextMenu(getListView());
  if (!_adapterInitialized && _adapter != null) {
    _adapterInitialized=true;
    _adapter.home();
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  restoreCMIS(savedInstanceState);
  initializeListView();
  registerForContextMenu(getListView());
  if (!_adapterInitialized && _adapter != null && _adapter.getCmis() != null) {
    _adapterInitialized=true;
    _adapter.home();
  }
}",0.908835904628331
7199,"protected void initializeListView(){
  CMISApplication app=(CMISApplication)getApplication();
  CMIS cmis=app.getCMIS();
  if (cmis != null && cmis.getNetworkStatus() == NetworkStatus.OK) {
    setContentView(R.layout.nodes);
  }
 else {
    setContentView(R.layout.nodes_offline);
  }
  _adapter=new CMISAdapter(this,R.layout.node_ref_item,R.id.node_ref_label);
  _adapter.setCmis(app.getCMIS());
  setListAdapter(_adapter);
  if (cmis != null) {
    Resources res=getResources();
    StringBuilder title=new StringBuilder(res.getString(R.string.app_name)).append(""String_Node_Str"").append(cmis.getPrefs().getHostname());
    setTitle(title.toString());
  }
}","protected void initializeListView(){
  CMISApplication app=(CMISApplication)getApplication();
  CMIS cmis=app.getCMIS();
  if (cmis != null && cmis.getNetworkStatus() == NetworkStatus.OK) {
    setContentView(R.layout.nodes);
  }
 else {
    setContentView(R.layout.nodes_offline);
  }
  _adapter=new CMISAdapter(this,R.layout.node_ref_item,R.id.node_ref_label);
  _adapter.setCmis(cmis);
  setListAdapter(_adapter);
  if (cmis != null) {
    Resources res=getResources();
    StringBuilder title=new StringBuilder(res.getString(R.string.app_name)).append(""String_Node_Str"").append(cmis.getPrefs().getHostname());
    setTitle(title.toString());
  }
}",0.9870327993897788
7200,"public void emailContent(int position){
  final NodeRef ref=getItem(position);
  downloadContent(ref,new Handler(){
    public void handleMessage(    Message msg){
      Context context=getContext();
      boolean done=msg.getData().getBoolean(""String_Node_Str"");
      if (done && _progressDlg != null) {
        _progressDlg.dismiss();
        int bytes=(Integer)_dlThread.getResult();
        if (bytes > 0) {
          Resources res=context.getResources();
          File file=context.getFileStreamPath(ref.getName());
          Uri uri=Uri.fromFile(file);
          Intent emailIntent=new Intent(Intent.ACTION_SEND);
          emailIntent.putExtra(Intent.EXTRA_STREAM,uri);
          emailIntent.putExtra(Intent.EXTRA_SUBJECT,ref.getName());
          emailIntent.putExtra(Intent.EXTRA_TEXT,res.getString(R.string.email_text));
          emailIntent.setType(ref.getContentType());
          try {
            context.startActivity(Intent.createChooser(emailIntent,res.getString(R.string.email_title)));
          }
 catch (          ActivityNotFoundException e) {
            String text=""String_Node_Str"" + ref.getContentType();
            int duration=Toast.LENGTH_SHORT;
            Toast toast=Toast.makeText(context,text,duration);
            toast.show();
          }
        }
      }
    }
  }
);
}","public void emailContent(int position){
  final NodeRef ref=getItem(position);
  downloadContent(ref,new Handler(){
    public void handleMessage(    Message msg){
      Context context=getContext();
      boolean done=msg.getData().getBoolean(""String_Node_Str"");
      if (done && _progressDlg != null) {
        _progressDlg.dismiss();
        File file=(File)_dlThread.getResult();
        if (file != null) {
          Resources res=context.getResources();
          Uri uri=Uri.fromFile(file);
          Intent emailIntent=new Intent(Intent.ACTION_SEND);
          emailIntent.putExtra(Intent.EXTRA_STREAM,uri);
          emailIntent.putExtra(Intent.EXTRA_SUBJECT,ref.getName());
          emailIntent.putExtra(Intent.EXTRA_TEXT,res.getString(R.string.email_text));
          emailIntent.setType(ref.getContentType());
          try {
            context.startActivity(Intent.createChooser(emailIntent,res.getString(R.string.email_title)));
          }
 catch (          ActivityNotFoundException e) {
            String text=""String_Node_Str"" + ref.getContentType();
            int duration=Toast.LENGTH_SHORT;
            Toast toast=Toast.makeText(context,text,duration);
            toast.show();
          }
        }
      }
    }
  }
);
}",0.9563182527301092
7201,"public static void main(String... args) throws Exception {
  final String host=args[0];
  final int port=Integer.parseInt(args[1]);
  final int backlog=Integer.parseInt(args[2]);
  final int size=Integer.parseInt(args[3]);
  final String acceptorType=args[4];
  final String handlerType=args[5];
  final String schedulerType=args[6];
  final int thread=Integer.getInteger(""String_Node_Str"",Runtime.getRuntime().availableProcessors() * 2);
  final SocketAddress address=new InetSocketAddress(host,port);
  Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
    @Override public void run(){
      running=false;
    }
  }
);
  System.out.println(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ backlog+ ""String_Node_Str""+ size+ ""String_Node_Str"");
  final Acceptor acceptor=AcceptorType.valueOf(acceptorType.toUpperCase()).build(address,size,backlog);
  final Handler handler=Handler.valueOf(handlerType.toUpperCase());
  final Scheduler scheduler=SchedulerType.valueOf(schedulerType.toUpperCase()).builder(thread,backlog);
  while (running) {
    try {
      scheduler.schedule(acceptor.accept(),handler);
    }
 catch (    SocketTimeoutException e) {
    }
  }
  silentClose(acceptor);
  scheduler.shutdown();
  System.out.println(""String_Node_Str"");
}","public static void main(String... args) throws Exception {
  final String host=args[0];
  final int port=Integer.parseInt(args[1]);
  final int backlog=Integer.parseInt(args[2]);
  final int size=Integer.parseInt(args[3]);
  final String acceptorType=args[4];
  final String handlerType=args[5];
  final String schedulerType=args[6];
  final int thread=Integer.getInteger(""String_Node_Str"",Runtime.getRuntime().availableProcessors() * 2);
  final SocketAddress address=new InetSocketAddress(host,port);
  Runtime.getRuntime().addShutdownHook(new Thread(""String_Node_Str""){
    @Override public void run(){
      running=false;
    }
  }
);
  System.out.println(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ backlog+ ""String_Node_Str""+ size+ ""String_Node_Str"");
  final Acceptor acceptor=AcceptorType.valueOf(acceptorType.toUpperCase()).build(address,size,backlog);
  final Handler handler=Handler.valueOf(handlerType.toUpperCase());
  final Scheduler scheduler=SchedulerType.valueOf(schedulerType.toUpperCase()).builder(thread,(backlog > 0 ? backlog : Integer.MAX_VALUE));
  while (running) {
    try {
      scheduler.schedule(acceptor.accept(),handler);
    }
 catch (    SocketTimeoutException e) {
    }
  }
  silentClose(acceptor);
  scheduler.shutdown();
  System.out.println(""String_Node_Str"");
}",0.9862595419847328
7202,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(@Self Object obj){
  vars.put(obj,System.nanoTime());
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(@Self Object obj,Object... args){
  vars.put(obj,System.nanoTime());
}",0.9606299212598424
7203,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(@Self Object obj){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(obj));
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(@Self Object obj,Object... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(obj));
}",0.9680170575692963
7204,"@OnTimer(1000) public static void print(){
  final long c=count.get();
  if (c == 0)   return;
  String status=MessageFormat.format(""String_Node_Str"",c,(durations.get() / c),registered.get(),daemonThreadCount(),(elapse.get() / c));
  System.out.println(status);
}","@OnTimer(1000) public static void print(){
  final long c=count.get();
  if (c == 0)   return;
  String status=MessageFormat.format(""String_Node_Str"",c,(durations.get() / c),registered.get(),daemonThreadCount(),(elapse.get() / c));
  println(status);
}",0.9786407766990292
7205,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(AnyType... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(args[0]));
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(AnyType... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.remove(args[0]));
}",0.980561555075594
7206,"@Override public void run(){
  try {
    accept.setTcpNoDelay(true);
    accept.setSendBufferSize(1 * 1024);
    final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
    inputStream.read(BUFFER);
    inputStream.close();
    final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
    outputStream.write(RESPONSE);
    outputStream.close();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    silentClose(accept);
  }
}","@Override public void run(){
  try {
    accept.setTcpNoDelay(true);
    accept.setSendBufferSize(1 * 1024);
    final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
    final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
    inputStream.read(BUFFER);
    outputStream.write(RESPONSE);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    silentClose(accept);
  }
}",0.7662203913491246
7207,"private static void handle(final Socket accept){
  SERVICE.execute(new Runnable(){
    @Override public void run(){
      try {
        accept.setTcpNoDelay(true);
        accept.setSendBufferSize(1 * 1024);
        final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
        inputStream.read(BUFFER);
        inputStream.close();
        final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
        outputStream.write(RESPONSE);
        outputStream.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        silentClose(accept);
      }
    }
  }
);
}","private static void handle(final Socket accept){
  SERVICE.execute(new Runnable(){
    @Override public void run(){
      try {
        accept.setTcpNoDelay(true);
        accept.setSendBufferSize(1 * 1024);
        final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
        final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
        inputStream.read(BUFFER);
        outputStream.write(RESPONSE);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        silentClose(accept);
      }
    }
  }
);
}",0.8106001558846454
7208,"private void read(final SelectionKey key){
  uninterest(OP_READ,key);
  service.execute(new Runnable(){
    @Override public void run(){
      final SocketChannel channel=(SocketChannel)key.channel();
      try {
        channel.read(BUFFER);
        channel.write(OK_200);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"" + channel,e);
      }
 finally {
        silentClose(channel);
      }
    }
  }
);
}","private void read(final SelectionKey key){
  uninterest(OP_READ,key);
  service.execute(new Runnable(){
    @Override public void run(){
      final SocketChannel channel=(SocketChannel)key.channel();
      try {
        channel.read(ByteBuffer.allocate(1024));
        channel.write(OK_200.asReadOnlyBuffer());
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"" + channel,e);
      }
 finally {
        silentClose(channel);
      }
    }
  }
);
}",0.9473684210526316
7209,"@Override public void run(){
  final SocketChannel channel=(SocketChannel)key.channel();
  try {
    channel.read(BUFFER);
    channel.write(OK_200);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + channel,e);
  }
 finally {
    silentClose(channel);
  }
}","@Override public void run(){
  final SocketChannel channel=(SocketChannel)key.channel();
  try {
    channel.read(ByteBuffer.allocate(1024));
    channel.write(OK_200.asReadOnlyBuffer());
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + channel,e);
  }
 finally {
    silentClose(channel);
  }
}",0.91864406779661
7210,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(@Self Object obj,Object... args){
  vars.put(obj,System.nanoTime());
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(@Self Object obj,AnyType... args){
  vars.put(obj,System.nanoTime());
}",0.9722921914357684
7211,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(@Self Object obj,Object... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(obj));
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(@Self Object obj,AnyType... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(obj));
}",0.9731958762886598
7212,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void registered(@Self Object obj,int result){
  registered.set(result);
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void registered(@Self Object obj,@Return int result){
  registered.set(result);
}",0.9781420765027322
7213,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(@Self Object obj,AnyType... args){
  vars.put(obj,System.nanoTime());
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.ENTRY)) public static void readAndWriteEnter(AnyType... args){
  vars.put(args[0],System.nanoTime());
}",0.9298701298701298
7214,"@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(@Self Object obj,AnyType... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(obj));
}","@OnMethod(clazz=""String_Node_Str"",method=""String_Node_Str"",location=@Location(Kind.RETURN)) public static void readAndWriteExit(AnyType... args){
  long current=System.nanoTime();
  elapse.addAndGet(current - vars.get(args[0]));
}",0.9429175475687104
7215,"@OnTimer(1000) public static void print(){
  if (count.get() == 0)   return;
  String status=String.format(""String_Node_Str"",count.get(),(durations.get() / count.get()),registered.get());
  System.out.println(status);
}","@OnTimer(1000) public static void print(){
  if (count.get() == 0)   return;
  String status=MessageFormat.format(""String_Node_Str"",count.get(),(durations.get() / count.get()),registered.get());
  System.out.println(status);
}",0.9573033707865168
7216,"public ChannelAcceptor(SocketAddress address,int size,int backlog) throws IOException {
  this.selector=Selector.open();
  this.channel=ServerSocketChannel.open();
  channel.socket().setReceiveBufferSize(Utils.kb(size));
  channel.socket().setReuseAddress(true);
  channel.socket().bind(address,backlog);
  channel.configureBlocking(false);
}","public ChannelAcceptor(SocketAddress address,int size,int backlog) throws IOException {
  this.selector=Selector.open();
  this.channel=ServerSocketChannel.open();
  channel.socket().setReceiveBufferSize(Utils.kb(size));
  channel.socket().setReuseAddress(true);
  channel.socket().bind(address,backlog);
  channel.configureBlocking(false);
  channel.register(selector,SelectionKey.OP_ACCEPT);
}",0.9280868385345996
7217,"@Override public void run(){
  try {
    accept.setTcpNoDelay(true);
    accept.setSendBufferSize(1 * 1024);
    final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
    final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
    inputStream.read(BUFFER);
    outputStream.write(RESPONSE);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    silentClose(accept);
  }
}","@Override public void run(){
  try {
    accept.setTcpNoDelay(true);
    accept.setSendBufferSize(1 * 1024);
    final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
    final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
    inputStream.read(BUFFER);
    outputStream.write(RESPONSE);
    outputStream.close();
    inputStream.close();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    silentClose(accept);
  }
}",0.9474768280123584
7218,"public static void handle(final Socket accept){
  SERVICE.execute(new Runnable(){
    @Override public void run(){
      try {
        accept.setTcpNoDelay(true);
        accept.setSendBufferSize(1 * 1024);
        final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
        final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
        inputStream.read(BUFFER);
        outputStream.write(RESPONSE);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        silentClose(accept);
      }
    }
  }
);
}","public static void handle(final Socket accept){
  SERVICE.execute(new Runnable(){
    @Override public void run(){
      try {
        accept.setTcpNoDelay(true);
        accept.setSendBufferSize(1 * 1024);
        final InputStream inputStream=new BufferedInputStream(accept.getInputStream());
        final OutputStream outputStream=new BufferedOutputStream(accept.getOutputStream());
        inputStream.read(BUFFER);
        outputStream.write(RESPONSE);
        outputStream.close();
        inputStream.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        silentClose(accept);
      }
    }
  }
);
}",0.9539422326307572
7219,"private void select() throws Exception {
  final int selected=selector.select(500L);
  final int registered=selector.keys().size();
  if (registered == 0 && thenShutdown())   return;
  if (selected > 0) {
    SelectionKey acceptableKey=null;
    final Iterator<SelectionKey> iterator=selector.selectedKeys().iterator();
    while (iterator.hasNext()) {
      final SelectionKey key=iterator.next();
      iterator.remove();
      if (key.isAcceptable())       acceptableKey=key;
      if (key.isReadable())       read(key);
      if (key.isWritable())       write(key);
    }
    if (acceptableKey == null)     return;
    accept(acceptableKey,selector);
  }
}","private void select() throws Exception {
  final int selected=selector.select(500L);
  final int registered=selector.keys().size();
  if (registered == 0 && thenShutdown())   return;
  if (selected > 0) {
    SelectionKey acceptableKey=null;
    final Iterator<SelectionKey> iterator=selector.selectedKeys().iterator();
    while (iterator.hasNext()) {
      final SelectionKey key=iterator.next();
      iterator.remove();
      if (key.isAcceptable())       acceptableKey=key;
 else       if (key.isReadable())       read(key);
 else       if (key.isWritable())       write(key);
    }
    if (acceptableKey == null)     return;
    accept(acceptableKey,selector);
  }
}",0.990990990990991
7220,"private void read(final SelectionKey key){
  uninterest(OP_READ,key);
  service.execute(new Runnable(){
    @Override public void run(){
      final SocketChannel channel=(SocketChannel)key.channel();
      try {
        channel.read(BUFFER);
        channel.write(OK_200);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"" + channel,e);
        silentClose(channel);
      }
    }
  }
);
}","private void read(final SelectionKey key){
  uninterest(OP_READ,key);
  service.execute(new Runnable(){
    @Override public void run(){
      final SocketChannel channel=(SocketChannel)key.channel();
      try {
        channel.read(BUFFER);
        channel.write(OK_200);
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"" + channel,e);
      }
 finally {
        silentClose(channel);
      }
    }
  }
);
}",0.9777777777777776
7221,"@Override public void run(){
  final SocketChannel channel=(SocketChannel)key.channel();
  try {
    channel.read(BUFFER);
    channel.write(OK_200);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + channel,e);
    silentClose(channel);
  }
}","@Override public void run(){
  final SocketChannel channel=(SocketChannel)key.channel();
  try {
    channel.read(BUFFER);
    channel.write(OK_200);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + channel,e);
  }
 finally {
    silentClose(channel);
  }
}",0.9720670391061452
7222,"public Void call() throws Exception {
  ISession api=ISessionPool.getInstance().getPool().borrowObject(serverConfig);
  LOGGER.fine(""String_Node_Str"" + openFileHandler.get());
  if (openFileHandler.get() >= CHECKOUT_TRESHOLD) {
    LOGGER.fine(""String_Node_Str"" + api.toString() + ""String_Node_Str"");
    api.refreshAPISession();
    openFileHandler.set(1);
  }
  LOGGER.fine(""String_Node_Str"" + api.toString());
  try {
    IntegrityCMMember.checkout(api,configPath,memberID,memberRev,memberTimestamp,targetFile,restoreTimestamp,lineTerminator);
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    throw new Exception(eh.getMessage());
  }
 finally {
    if (null != api)     ISessionPool.getInstance().getPool().returnObject(serverConfig,api);
  }
  openFileHandler.set(openFileHandler.get() + 1);
  if (calculateChecksum) {
    checksumHash.put(memberName,IntegrityCMMember.getMD5Checksum(targetFile));
  }
  return null;
}","public Void call() throws Exception {
  ISessionPool.getInstance().getPoolConfig().setTestOnBorrow(false);
  ISession api=ISessionPool.getInstance().getPool().borrowObject(serverConfig);
  LOGGER.fine(""String_Node_Str"" + openFileHandler.get());
  if (openFileHandler.get() >= CHECKOUT_TRESHOLD) {
    LOGGER.fine(""String_Node_Str"" + api.toString() + ""String_Node_Str"");
    api.refreshAPISession();
    openFileHandler.set(1);
  }
  LOGGER.fine(""String_Node_Str"" + api.toString());
  try {
    IntegrityCMMember.checkout(api,configPath,memberID,memberRev,memberTimestamp,targetFile,restoreTimestamp,lineTerminator);
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    throw new Exception(eh.getMessage());
  }
 finally {
    if (null != api)     ISessionPool.getInstance().getPool().returnObject(serverConfig,api);
    ISessionPool.getInstance().getPoolConfig().setTestOnBorrow(true);
  }
  openFileHandler.set(openFileHandler.get() + 1);
  if (calculateChecksum) {
    checksumHash.put(memberName,IntegrityCMMember.getMD5Checksum(targetFile));
  }
  return null;
}",0.9410767274268758
7223,"@Override public String toString(){
  StringBuilder str=new StringBuilder();
  str.append(""String_Node_Str"" + name);
  str.append(""String_Node_Str"" + secure);
  str.append(""String_Node_Str"" + ipHostName);
  str.append(""String_Node_Str"" + ipPort);
  return str.toString();
}","@Override public String toString(){
  StringBuilder str=new StringBuilder();
  str.append(""String_Node_Str"" + name + ""String_Node_Str"");
  str.append(""String_Node_Str"" + secure + ""String_Node_Str"");
  str.append(""String_Node_Str"" + ipHostName + ""String_Node_Str"");
  str.append(""String_Node_Str"" + ipPort + ""String_Node_Str"");
  return str.toString();
}",0.8722044728434505
7224,"/** 
 * Primes the Integrity Project Member metadata information
 * @return response Integrity API Response
 * @throws APIException
 * @throws SQLException
 * @throws AbortException
 * @throws ExecutionException
 * @throws InterruptedException
 */
private Response initializeCMProjectMembers() throws APIException, SQLException, AbortException, InterruptedException, ExecutionException {
  IntegrityCMProject siProject=getIntegrityProject();
  IAPICommand command=CommandFactory.createCommand(IAPICommand.VIEW_PROJECT_COMMAND,DescriptorImpl.INTEGRITY_DESCRIPTOR.getConfiguration(serverConfig));
  command.addOption(new APIOption(IAPIOption.PROJECT,siProject.getConfigurationPath()));
  MultiValue mv=APIUtils.createMultiValueField(IAPIFields.FIELD_SEPARATOR,IAPIFields.NAME,IAPIFields.CONTEXT,IAPIFields.CP_ID,IAPIFields.MEMBER_REV,IAPIFields.MEMBER_TIMESTAMP,IAPIFields.MEMBER_DESCRIPTION,IAPIFields.TYPE);
  command.addOption(new APIOption(IAPIOption.FIELDS,mv));
  applyMemberFilters(command);
  LOGGER.fine(""String_Node_Str"" + siProject.getConfigurationPath());
  Response viewRes=command.execute();
  siProject.parseProject(viewRes.getWorkItems());
  command.terminateAPI();
  return viewRes;
}","/** 
 * Primes the Integrity Project Member metadata information
 * @return response Integrity API Response
 * @throws APIException
 * @throws SQLException
 * @throws AbortException
 * @throws ExecutionException
 * @throws InterruptedException
 */
private Response initializeCMProjectMembers() throws APIException, SQLException, AbortException, InterruptedException, ExecutionException {
  IntegrityCMProject siProject=getIntegrityProject();
  IAPICommand command=CommandFactory.createCommand(IAPICommand.VIEW_PROJECT_COMMAND,DescriptorImpl.INTEGRITY_DESCRIPTOR.getConfiguration(serverConfig));
  command.addOption(new APIOption(IAPIOption.PROJECT,siProject.getConfigurationPath()));
  MultiValue mv=APIUtils.createMultiValueField(IAPIFields.FIELD_SEPARATOR,IAPIFields.NAME,IAPIFields.CONTEXT,IAPIFields.CP_ID,IAPIFields.MEMBER_REV,IAPIFields.MEMBER_TIMESTAMP,IAPIFields.MEMBER_DESCRIPTION,IAPIFields.TYPE);
  command.addOption(new APIOption(IAPIOption.FIELDS,mv));
  applyMemberFilters(command);
  LOGGER.fine(""String_Node_Str"" + siProject.getConfigurationPath());
  Response viewRes=command.execute();
  siProject.parseProject(viewRes.getWorkItems());
  try {
    command.terminateAPI();
  }
 catch (  Exception e) {
    LOGGER.log(Level.FINE,""String_Node_Str"");
  }
  return viewRes;
}",0.9585846401286692
7225,"/** 
 * A credentials validation helper
 * @param hostName
 * @param port
 * @param userName
 * @param password
 * @param secure
 * @param ipHostName
 * @param ipPort
 * @return
 * @throws IOException
 * @throws ServletException
 */
public FormValidation doTestConnection(@QueryParameter(""String_Node_Str"") final String hostName,@QueryParameter(""String_Node_Str"") final int port,@QueryParameter(""String_Node_Str"") final String userName,@QueryParameter(""String_Node_Str"") final String password,@QueryParameter(""String_Node_Str"") final boolean secure,@QueryParameter(""String_Node_Str"") final String ipHostName,@QueryParameter(""String_Node_Str"") final int ipPort) throws IOException, ServletException {
  LOGGER.fine(""String_Node_Str"");
  LOGGER.fine(""String_Node_Str"" + hostName);
  LOGGER.fine(""String_Node_Str"" + port);
  LOGGER.fine(""String_Node_Str"" + userName);
  LOGGER.fine(""String_Node_Str"" + Secret.fromString(password).getEncryptedValue());
  LOGGER.fine(""String_Node_Str"" + secure);
  LOGGER.fine(""String_Node_Str"" + ipHostName);
  LOGGER.fine(""String_Node_Str"" + ipPort);
  IntegrityConfigurable ic=new IntegrityConfigurable(""String_Node_Str"",ipHostName,ipPort,hostName,port,secure,userName,password);
  ISession api=APISession.create(ic);
  if (null != api) {
    api.terminate();
    return FormValidation.ok(""String_Node_Str"");
  }
 else {
    return FormValidation.error(""String_Node_Str"");
  }
}","/** 
 * A credentials validation helper
 * @param hostName
 * @param port
 * @param userName
 * @param password
 * @param secure
 * @param ipHostName
 * @param ipPort
 * @return
 * @throws IOException
 * @throws ServletException
 */
public FormValidation doTestConnection(@QueryParameter(""String_Node_Str"") final String hostName,@QueryParameter(""String_Node_Str"") final int port,@QueryParameter(""String_Node_Str"") final String userName,@QueryParameter(""String_Node_Str"") final String password,@QueryParameter(""String_Node_Str"") final boolean secure,@QueryParameter(""String_Node_Str"") final String ipHostName,@QueryParameter(""String_Node_Str"") final int ipPort) throws IOException, ServletException {
  LOGGER.fine(""String_Node_Str"");
  LOGGER.fine(""String_Node_Str"" + hostName);
  LOGGER.fine(""String_Node_Str"" + port);
  LOGGER.fine(""String_Node_Str"" + userName);
  LOGGER.fine(""String_Node_Str"" + Secret.fromString(password).getEncryptedValue());
  LOGGER.fine(""String_Node_Str"" + secure);
  LOGGER.fine(""String_Node_Str"" + ipHostName);
  LOGGER.fine(""String_Node_Str"" + ipPort);
  IntegrityConfigurable ic=new IntegrityConfigurable(null,ipHostName,ipPort,hostName,port,secure,userName,password);
  ISession api=APISession.create(ic);
  if (null != api) {
    api.terminate();
    return FormValidation.ok(""String_Node_Str"");
  }
 else {
    return FormValidation.error(""String_Node_Str"");
  }
}",0.9925187032418952
7226,"@Override public void terminateAPI(){
  if (runCommandWithInterim && api != null) {
    LOGGER.log(Level.FINEST,""String_Node_Str"" + api.toString());
    api.terminate();
  }
}","@Override public void terminateAPI() throws Exception {
  if (runCommandWithInterim && api != null) {
    LOGGER.log(Level.FINEST,""String_Node_Str"" + api.toString());
    api.terminate();
    ISessionPool.getInstance().getPool().invalidateObject(serverConfig,api);
  }
}",0.7865168539325843
7227,"@Override public Response execute() throws APIException, AbortException {
  if (null == serverConfig) {
    LOGGER.severe(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str"");
    throw new AbortException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str"");
  }
  Response res;
  KeyedObjectPool<IntegrityConfigurable,ISession> pool=ISessionPool.getInstance().getPool();
  try {
    LOGGER.log(Level.FINEST,""String_Node_Str"" + serverConfig.getName() + ""String_Node_Str""+ cmd.getCommandName());
    api=pool.borrowObject(serverConfig);
    res=execute(api);
  }
 catch (  NoSuchElementException e) {
    try {
      pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
catch (  IllegalStateException e) {
    try {
      pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    try {
      pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
 finally {
    try {
      if (null != api && !runCommandWithInterim) {
        LOGGER.log(Level.FINEST,""String_Node_Str"" + serverConfig.getName());
        pool.returnObject(serverConfig,api);
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e);
    }
  }
  return res;
}","@Override public Response execute() throws APIException, AbortException {
  if (null == serverConfig) {
    LOGGER.severe(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str"");
    throw new AbortException(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str"");
  }
  Response res;
  KeyedObjectPool<IntegrityConfigurable,ISession> pool=ISessionPool.getInstance().getPool();
  try {
    LOGGER.log(Level.FINEST,""String_Node_Str"" + serverConfig.getName() + ""String_Node_Str""+ cmd.getCommandName());
    api=pool.borrowObject(serverConfig);
    res=execute(api);
  }
 catch (  NoSuchElementException e) {
    try {
      if (api != null)       pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      if (api != null)       api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
catch (  IllegalStateException e) {
    try {
      if (api != null)       pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      if (api != null)       api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    try {
      if (api != null)       pool.invalidateObject(serverConfig,api);
    }
 catch (    Exception e1) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e1);
      if (api != null)       api=null;
    }
    api=null;
    LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage(),e);
    throw new AbortException(""String_Node_Str"" + serverConfig.getHostName() + ""String_Node_Str""+ serverConfig.getPort()+ ""String_Node_Str""+ cmd.getCommandName()+ ""String_Node_Str""+ e.getMessage());
  }
 finally {
    try {
      if (null != api && !runCommandWithInterim) {
        LOGGER.log(Level.FINEST,""String_Node_Str"" + serverConfig.getName());
        pool.returnObject(serverConfig,api);
      }
    }
 catch (    Exception e) {
      LOGGER.log(Level.SEVERE,""String_Node_Str"" + serverConfig.getName(),e);
    }
  }
  return res;
}",0.9761904761904762
7228,"/** 
 * Function to explicitly terminate/return sessions to Session Pool for WITH_INTERIM commands
 */
public void terminateAPI();","/** 
 * Function to explicitly terminate/return sessions to Session Pool for WITH_INTERIM commands
 * @throws Exception
 */
public void terminateAPI() throws Exception ;",0.8695652173913043
7229,"/** 
 * Default way to execute the command using an auto-generated Integrity Session API
 * @return
 * @throws APICommandException
 * @throws AbortException 
 */
public Response execute() throws APIException, AbortException ;","/** 
 * Default way to execute the command using an auto-generated Integrity Session API
 * @return
 * @throws APICommandException
 * @throws AbortException
 */
public Response execute() throws APIException, AbortException ;",0.9977728285077953
7230,"/** 
 * Executes the actual Integrity Delete Non Members operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  AbstractProject<?,?> rootProject=getRootProject(build.getProject());
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  IntegritySCM scm=IntegritySCM.class.cast(rootProject.getScm());
  IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,scm.getAlternateWorkspace(),scm.getIntegrityProject());
  if (!build.getWorkspace().act(deleteNonMembers)) {
    return false;
  }
  return true;
}","/** 
 * Executes the actual Integrity Delete Non Members operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  AbstractProject<?,?> rootProject=build.getProject().getRootProject();
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  IntegritySCM scm=IntegritySCM.class.cast(rootProject.getScm());
  IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,scm.getAlternateWorkspace(),scm.getIntegrityProject());
  if (!build.getWorkspace().act(deleteNonMembers)) {
    return false;
  }
  return true;
}",0.9756738987508218
7231,"public Boolean invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  AbstractProject<?,?> rootProject=getRootProject(build.getProject());
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  try {
    deleteNonMembers(build,listener);
  }
 catch (  SQLException e) {
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(e.getMessage());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  return true;
}","public Boolean invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  AbstractProject<?,?> rootProject=build.getProject().getRootProject();
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  try {
    deleteNonMembers(build,listener);
  }
 catch (  SQLException e) {
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(e.getMessage());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  return true;
}",0.9696969696969696
7232,"/** 
 * Adds Integrity CM Project info to the build variables  
 */
@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  LOGGER.fine(""String_Node_Str"");
  IntegrityConfigurable ic=((DescriptorImpl)this.getDescriptor()).getConfiguration(serverConfig);
  env.put(""String_Node_Str"",IntegrityCheckpointAction.evalGroovyExpression(env,configPath));
  env.put(""String_Node_Str"",ic.getHostName());
  env.put(""String_Node_Str"",String.valueOf(ic.getPort()));
  env.put(""String_Node_Str"",ic.getUserName());
  IntegrityCMProject siProject=getIntegrityProject();
  if (null != siProject && siProject.isBuild()) {
    env.put(""String_Node_Str"",getIntegrityProject().getProjectRevision());
  }
}","/** 
 * Adds Integrity CM Project info to the build variables  
 */
@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  LOGGER.fine(""String_Node_Str"");
  IntegrityConfigurable ic=((DescriptorImpl)this.getDescriptor()).getConfiguration(serverConfig);
  env.put(""String_Node_Str"",IntegrityCheckpointAction.evalGroovyExpression(env,configPath));
  env.put(""String_Node_Str"",ic.getHostName());
  env.put(""String_Node_Str"",String.valueOf(ic.getPort()));
  env.put(""String_Node_Str"",userName);
  IntegrityCMProject siProject=getIntegrityProject();
  if (null != siProject && siProject.isBuild()) {
    env.put(""String_Node_Str"",getIntegrityProject().getProjectRevision());
  }
}",0.9932795698924732
7233,"/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  LOGGER.fine(""String_Node_Str"");
  String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),configPath);
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  IntegrityConfigurable desSettings=DescriptorImpl.INTEGRITY_DESCRIPTOR.getConfiguration(serverConfig);
  IntegrityConfigurable coSettings=new IntegrityConfigurable(""String_Node_Str"",desSettings.getIpHostName(),desSettings.getIpPort(),desSettings.getHostName(),desSettings.getPort(),desSettings.getSecure(),userName,password.getPlainText());
  APISession api=APISession.create(coSettings);
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(changeLogFile),""String_Node_Str""));
  try {
    String projectCacheTable=DerbyUtils.registerProjectCache(((DescriptorImpl)this.getDescriptor()).getDataSource(),((AbstractProject<?,?>)build.getProject()).getName(),configurationName,build.getNumber());
    listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
    initializeCMProject(api,projectCacheTable,resolvedConfigPath);
    IntegrityCMProject siProject=getIntegrityProject();
    if (checkpointBeforeBuild) {
      if (!siProject.isBuild()) {
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
        Response res=siProject.checkpoint(api,IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),checkpointLabel));
        LOGGER.fine(res.getCommandString() + ""String_Node_Str"" + res.getExitCode());
        WorkItem wi=res.getWorkItem(siProject.getConfigurationPath());
        String chkpt=wi.getResult().getField(""String_Node_Str"").getItem().getId();
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath() + ""String_Node_Str""+ chkpt);
        Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",siProject.getConfigurationPath() + ""String_Node_Str"" + chkpt));
        Response infoRes=api.runCommand(siProjectInfoCmd);
        siProject.initializeProject(infoRes.getWorkItems().next());
      }
 else {
        listener.getLogger().println(""String_Node_Str"");
      }
    }
    listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousBuild();
    String prevProjectCache=null;
    while (null != previousBuild) {
      prevProjectCache=DerbyUtils.getProjectCache(((DescriptorImpl)this.getDescriptor()).getDataSource(),((AbstractProject<?,?>)build.getProject()).getName(),configurationName,previousBuild.getNumber());
      if (null != prevProjectCache && prevProjectCache.length() > 0) {
        LOGGER.fine(""String_Node_Str"" + previousBuild.getNumber());
        break;
      }
      previousBuild=previousBuild.getPreviousBuild();
    }
    if (null != prevProjectCache && prevProjectCache.length() > 0) {
      DerbyUtils.compareBaseline(prevProjectCache,projectCacheTable,skipAuthorInfo,api);
    }
 else {
      LOGGER.fine(""String_Node_Str"");
      if (!skipAuthorInfo) {
        DerbyUtils.primeAuthorInformation(projectCacheTable,api);
      }
    }
    List<Hashtable<CM_PROJECT,Object>> projectMembersList=DerbyUtils.viewProject(projectCacheTable);
    List<String> dirList=DerbyUtils.getDirList(projectCacheTable);
    IntegrityCheckoutTask coTask=null;
    if (null == prevProjectCache || prevProjectCache.length() == 0) {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,true,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener,((DescriptorImpl)this.getDescriptor()).getConfiguration(serverConfig));
    }
 else {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,cleanCopy,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener,((DescriptorImpl)this.getDescriptor()).getConfiguration(serverConfig));
    }
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      if (fetchChangedWorkspaceFiles) {
        DerbyUtils.updateChecksum(projectCacheTable,coTask.getChecksumUpdates());
      }
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),projectMembersList));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
      if (deleteNonMembers) {
        IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,alternateWorkspace,getIntegrityProject());
        if (!workspace.act(deleteNonMembers)) {
          return false;
        }
      }
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    return false;
  }
catch (  SQLException sqlex) {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(sqlex.getMessage());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",sqlex);
    return false;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
    api.Terminate();
  }
  return true;
}","/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  LOGGER.fine(""String_Node_Str"");
  String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),configPath);
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  IntegrityConfigurable desSettings=DescriptorImpl.INTEGRITY_DESCRIPTOR.getConfiguration(serverConfig);
  IntegrityConfigurable coSettings=new IntegrityConfigurable(""String_Node_Str"",desSettings.getIpHostName(),desSettings.getIpPort(),desSettings.getHostName(),desSettings.getPort(),desSettings.getSecure(),userName,password.getPlainText());
  APISession api=APISession.create(coSettings);
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(changeLogFile),""String_Node_Str""));
  try {
    String projectCacheTable=DerbyUtils.registerProjectCache(((DescriptorImpl)this.getDescriptor()).getDataSource(),((AbstractProject<?,?>)build.getProject()).getName(),configurationName,build.getNumber());
    listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
    initializeCMProject(api,projectCacheTable,resolvedConfigPath);
    IntegrityCMProject siProject=getIntegrityProject();
    if (checkpointBeforeBuild) {
      if (!siProject.isBuild()) {
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
        Response res=siProject.checkpoint(api,IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),checkpointLabel));
        LOGGER.fine(res.getCommandString() + ""String_Node_Str"" + res.getExitCode());
        WorkItem wi=res.getWorkItem(siProject.getConfigurationPath());
        String chkpt=wi.getResult().getField(""String_Node_Str"").getItem().getId();
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath() + ""String_Node_Str""+ chkpt);
        Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",siProject.getConfigurationPath() + ""String_Node_Str"" + chkpt));
        Response infoRes=api.runCommand(siProjectInfoCmd);
        siProject.initializeProject(infoRes.getWorkItems().next());
      }
 else {
        listener.getLogger().println(""String_Node_Str"");
      }
    }
    listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousBuild();
    String prevProjectCache=null;
    while (null != previousBuild) {
      prevProjectCache=DerbyUtils.getProjectCache(((DescriptorImpl)this.getDescriptor()).getDataSource(),((AbstractProject<?,?>)build.getProject()).getName(),configurationName,previousBuild.getNumber());
      if (null != prevProjectCache && prevProjectCache.length() > 0) {
        LOGGER.fine(""String_Node_Str"" + previousBuild.getNumber());
        break;
      }
      previousBuild=previousBuild.getPreviousBuild();
    }
    if (null != prevProjectCache && prevProjectCache.length() > 0) {
      DerbyUtils.compareBaseline(prevProjectCache,projectCacheTable,skipAuthorInfo,api);
    }
 else {
      LOGGER.fine(""String_Node_Str"");
      if (!skipAuthorInfo) {
        DerbyUtils.primeAuthorInformation(projectCacheTable,api);
      }
    }
    List<Hashtable<CM_PROJECT,Object>> projectMembersList=DerbyUtils.viewProject(projectCacheTable);
    List<String> dirList=DerbyUtils.getDirList(projectCacheTable);
    IntegrityCheckoutTask coTask=null;
    if (null == prevProjectCache || prevProjectCache.length() == 0) {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,true,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener,coSettings);
    }
 else {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,cleanCopy,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener,coSettings);
    }
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      if (fetchChangedWorkspaceFiles) {
        DerbyUtils.updateChecksum(projectCacheTable,coTask.getChecksumUpdates());
      }
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),projectMembersList));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
      if (deleteNonMembers) {
        IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,alternateWorkspace,getIntegrityProject());
        if (!workspace.act(deleteNonMembers)) {
          return false;
        }
      }
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    return false;
  }
catch (  SQLException sqlex) {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(sqlex.getMessage());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",sqlex);
    return false;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
    api.Terminate();
  }
  return true;
}",0.9878685503685504
7234,"/** 
 * Executes the actual Integrity Update Item operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  boolean success=true;
  AbstractProject<?,?> rootProject=getRootProject(build.getProject());
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  APISession api=APISession.create(getProjectSettings(build));
  if (null != api) {
    try {
      int intBuildItemID=0;
      int intTestSessionID=0;
      String buildItemID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intBuildItemID=Integer.parseInt(buildItemID);
      }
 catch (      NumberFormatException nfe) {
        intBuildItemID=0;
      }
      String testSessionID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intTestSessionID=Integer.parseInt(testSessionID);
      }
 catch (      NumberFormatException nfe) {
        intTestSessionID=0;
      }
      if (intBuildItemID <= 0) {
        if (queryDefinition.length() > 0) {
          Command issues=new Command(Command.IM,""String_Node_Str"");
          issues.addOption(new Option(""String_Node_Str"",""String_Node_Str""));
          issues.addOption(new Option(""String_Node_Str"",queryDefinition));
          Response issuesResponse=api.runCommand(issues);
          if (null != issuesResponse) {
            WorkItemIterator wit=issuesResponse.getWorkItems();
            if (wit.hasNext()) {
              buildItemID=wit.next().getField(""String_Node_Str"").getValueAsString();
              try {
                intBuildItemID=Integer.parseInt(buildItemID);
              }
 catch (              NumberFormatException nfe) {
                intBuildItemID=0;
              }
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return false;
            }
          }
 else {
            listener.getLogger().println(""String_Node_Str"");
            return false;
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
        }
      }
      AbstractTestResultAction<?> testResult=build.getAction(AbstractTestResultAction.class);
      if (null != testResult && testResult.getTotalCount() > 0) {
        if (intTestSessionID <= 0 && testSessionField.length() > 0 && intBuildItemID > 0) {
          Command walk=new Command(Command.IM,""String_Node_Str"");
          walk.addOption(new Option(""String_Node_Str"",testSessionStateField));
          walk.addOption(new Option(""String_Node_Str"",testSessionField));
          walk.addSelection(buildItemID);
          Response walkResponse=api.runCommand(walk);
          if (null != walkResponse) {
            Field testSessionFld=walkResponse.getWorkItem(buildItemID).getField(testSessionField);
            if (null != testSessionFld && null != testSessionFld.getList()) {
              @SuppressWarnings(""String_Node_Str"") List<Item> sessionList=testSessionFld.getList();
              for (              Item session : sessionList) {
                Field stateField=null;
                try {
                  stateField=session.getField(testSessionStateField);
                }
 catch (                NoSuchElementException nsee) {
                  stateField=walkResponse.getWorkItem(session.getId()).getField(testSessionStateField);
                }
                if (null != stateField && testSessionActiveState.equals(stateField.getValueAsString())) {
                  testSessionID=session.getId();
                  try {
                    intTestSessionID=Integer.parseInt(testSessionID);
                  }
 catch (                  NumberFormatException nfe) {
                    intTestSessionID=0;
                  }
                  break;
                }
              }
            }
          }
        }
        if (intTestSessionID > 0) {
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
          success=collectTestResults(build.getAction(AggregatedTestResultAction.class),listener,api,testSessionID);
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
        }
      }
      if (intBuildItemID > 0) {
        listener.getLogger().println(""String_Node_Str"" + buildItemID + ""String_Node_Str"");
        success=editBuildItem(build,listener,api,buildItemID);
      }
    }
 catch (    APIException aex) {
      LOGGER.severe(""String_Node_Str"");
      ExceptionHandler eh=new ExceptionHandler(aex);
      aex.printStackTrace(listener.fatalError(aex.getMessage()));
      LOGGER.severe(eh.getMessage());
      LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
      return false;
    }
 finally {
      api.Terminate();
    }
  }
 else {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  return success;
}","/** 
 * Executes the actual Integrity Update Item operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  boolean success=true;
  AbstractProject<?,?> rootProject=build.getProject().getRootProject();
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  APISession api=APISession.create(getProjectSettings(build));
  if (null != api) {
    try {
      int intBuildItemID=0;
      int intTestSessionID=0;
      String buildItemID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intBuildItemID=Integer.parseInt(buildItemID);
      }
 catch (      NumberFormatException nfe) {
        intBuildItemID=0;
      }
      String testSessionID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intTestSessionID=Integer.parseInt(testSessionID);
      }
 catch (      NumberFormatException nfe) {
        intTestSessionID=0;
      }
      if (intBuildItemID <= 0) {
        if (queryDefinition.length() > 0) {
          Command issues=new Command(Command.IM,""String_Node_Str"");
          issues.addOption(new Option(""String_Node_Str"",""String_Node_Str""));
          issues.addOption(new Option(""String_Node_Str"",queryDefinition));
          Response issuesResponse=api.runCommand(issues);
          if (null != issuesResponse) {
            WorkItemIterator wit=issuesResponse.getWorkItems();
            if (wit.hasNext()) {
              buildItemID=wit.next().getField(""String_Node_Str"").getValueAsString();
              try {
                intBuildItemID=Integer.parseInt(buildItemID);
              }
 catch (              NumberFormatException nfe) {
                intBuildItemID=0;
              }
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return false;
            }
          }
 else {
            listener.getLogger().println(""String_Node_Str"");
            return false;
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
        }
      }
      AbstractTestResultAction<?> testResult=build.getAction(AbstractTestResultAction.class);
      if (null != testResult && testResult.getTotalCount() > 0) {
        if (intTestSessionID <= 0 && testSessionField.length() > 0 && intBuildItemID > 0) {
          Command walk=new Command(Command.IM,""String_Node_Str"");
          walk.addOption(new Option(""String_Node_Str"",testSessionStateField));
          walk.addOption(new Option(""String_Node_Str"",testSessionField));
          walk.addSelection(buildItemID);
          Response walkResponse=api.runCommand(walk);
          if (null != walkResponse) {
            Field testSessionFld=walkResponse.getWorkItem(buildItemID).getField(testSessionField);
            if (null != testSessionFld && null != testSessionFld.getList()) {
              @SuppressWarnings(""String_Node_Str"") List<Item> sessionList=testSessionFld.getList();
              for (              Item session : sessionList) {
                Field stateField=null;
                try {
                  stateField=session.getField(testSessionStateField);
                }
 catch (                NoSuchElementException nsee) {
                  stateField=walkResponse.getWorkItem(session.getId()).getField(testSessionStateField);
                }
                if (null != stateField && testSessionActiveState.equals(stateField.getValueAsString())) {
                  testSessionID=session.getId();
                  try {
                    intTestSessionID=Integer.parseInt(testSessionID);
                  }
 catch (                  NumberFormatException nfe) {
                    intTestSessionID=0;
                  }
                  break;
                }
              }
            }
          }
        }
        if (intTestSessionID > 0) {
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
          success=collectTestResults(build.getAction(AggregatedTestResultAction.class),listener,api,testSessionID);
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
        }
      }
      if (intBuildItemID > 0) {
        listener.getLogger().println(""String_Node_Str"" + buildItemID + ""String_Node_Str"");
        success=editBuildItem(build,listener,api,buildItemID);
      }
    }
 catch (    APIException aex) {
      LOGGER.severe(""String_Node_Str"");
      ExceptionHandler eh=new ExceptionHandler(aex);
      aex.printStackTrace(listener.fatalError(aex.getMessage()));
      LOGGER.severe(eh.getMessage());
      LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
      return false;
    }
 finally {
      api.Terminate();
    }
  }
 else {
    LOGGER.severe(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  return success;
}",0.9963478432533808
7235,"@DataBoundConstructor public IntegrityConfigurable(String ipHostName,int ipPort,String hostName,int port,boolean secure,String userName,String password){
  this.ipHostName=ipHostName;
  this.ipPort=ipPort;
  this.hostName=hostName;
  this.port=port;
  this.userName=userName;
  this.password=Secret.fromString(password);
  this.name=String.format(""String_Node_Str"",userName,hostName,port);
}","@DataBoundConstructor public IntegrityConfigurable(String ipHostName,int ipPort,String hostName,int port,boolean secure,String userName,String password){
  this.ipHostName=ipHostName;
  this.ipPort=ipPort;
  this.hostName=hostName;
  this.port=port;
  this.secure=secure;
  this.userName=userName;
  this.password=Secret.fromString(password);
  this.name=String.format(""String_Node_Str"",userName,hostName,port);
}",0.972636815920398
7236,"/** 
 * Creates an authenticated API Session against the Integrity Server
 * @return An authenticated API Session
 */
public static APISession create(IntegrityConfigurable settings){
  try {
    LOGGER.fine(""String_Node_Str"");
    return new APISession(settings.getIpHostName(),settings.getIpPort(),settings.getHostName(),settings.getPort(),settings.getUserName(),settings.getPasswordInPlainText(),settings.getSecure());
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",aex);
    return null;
  }
}","/** 
 * Creates an authenticated API Session against the Integrity Server
 * @return An authenticated API Session
 */
public static synchronized APISession create(IntegrityConfigurable settings){
  try {
    LOGGER.fine(""String_Node_Str"");
    return new APISession(settings.getIpHostName(),settings.getIpPort(),settings.getHostName(),settings.getPort(),settings.getUserName(),settings.getPasswordInPlainText(),settings.getSecure());
  }
 catch (  APIException aex) {
    LOGGER.severe(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    LOGGER.severe(eh.getMessage());
    LOGGER.fine(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    LOGGER.log(Level.SEVERE,""String_Node_Str"",aex);
    return null;
  }
}",0.9911383776414452
7237,"/** 
 * Recursively update the Test Results for all Test Cases that have an 'External ID' populated
 * @param testResult AbstractTestResultAction object
 * @param listener BuildListener
 * @param api Integrity API Session
 * @param testSessionID Integrity Test Session ID
 * @param testCaseList A list of Integrity Test Cases
 * @throws APIException
 */
@SuppressWarnings(""String_Node_Str"") private void updateTestResult(TestResult testResult,BuildListener listener,APISession api,String testSessionID,List<Item> testCaseList) throws APIException {
  for (  Item test : testCaseList) {
    Field testCaseIDFld=test.getField(testCaseTestNameField);
    if (null != testCaseIDFld && null != testCaseIDFld.getValueAsString()) {
      String testCaseID=testCaseIDFld.getValueAsString();
      String junitTestName=getJUnitID(testCaseID);
      Logger.debug(""String_Node_Str"" + testCaseID + ""String_Node_Str""+ junitTestName);
      TestResult caseResult=testResult.findCorrespondingResult(junitTestName);
      if (null != caseResult) {
        Logger.debug(""String_Node_Str"" + junitTestName);
        editTestResult(api,(caseResult.isPassed() ? ""String_Node_Str"" + caseResult.getId() + ""String_Node_Str"" : caseResult.getErrorDetails()),(caseResult.isPassed() ? testPassedVerdictName : testFailedVerdictName),testSessionID,test.getId());
      }
 else {
        Logger.warn(""String_Node_Str"" + junitTestName);
        editTestResult(api,""String_Node_Str"" + getJUnitID(testCaseID) + ""String_Node_Str"",testSkippedVerdictName,testSessionID,test.getId());
      }
    }
    Field containsFld=test.getField(testSuiteContainsField);
    if (null != containsFld && null != containsFld.getList()) {
      updateTestResult(testResult,listener,api,testSessionID,containsFld.getList());
    }
  }
}","/** 
 * Recursively update the Test Results for all Test Cases that have an 'External ID' populated
 * @param testResult AbstractTestResultAction object
 * @param listener BuildListener
 * @param api Integrity API Session
 * @param testSessionID Integrity Test Session ID
 * @param testCaseList A list of Integrity Test Cases
 * @throws APIException
 */
@SuppressWarnings(""String_Node_Str"") private void updateTestResult(TestResult testResult,BuildListener listener,APISession api,String testSessionID,Response walkResponse,List<Item> testCaseList) throws APIException {
  for (  Item test : testCaseList) {
    Field testCaseIDFld=null;
    Field containsFld=null;
    try {
      testCaseIDFld=test.getField(testCaseTestNameField);
      containsFld=test.getField(testSuiteContainsField);
    }
 catch (    NoSuchElementException nsee) {
      testCaseIDFld=walkResponse.getWorkItem(test.getId()).getField(testCaseTestNameField);
      containsFld=walkResponse.getWorkItem(test.getId()).getField(testSuiteContainsField);
    }
    if (null != testCaseIDFld && null != testCaseIDFld.getValueAsString()) {
      String testCaseID=testCaseIDFld.getValueAsString();
      String junitTestName=getJUnitID(testCaseID);
      Logger.debug(""String_Node_Str"" + testCaseID + ""String_Node_Str""+ junitTestName);
      TestResult caseResult=testResult.findCorrespondingResult(junitTestName);
      if (null != caseResult) {
        Logger.debug(""String_Node_Str"" + junitTestName);
        editTestResult(api,(caseResult.isPassed() ? ""String_Node_Str"" + caseResult.getId() + ""String_Node_Str"" : caseResult.getErrorDetails()),(caseResult.isPassed() ? testPassedVerdictName : testFailedVerdictName),testSessionID,test.getId());
      }
 else {
        Logger.warn(""String_Node_Str"" + junitTestName);
        editTestResult(api,""String_Node_Str"" + getJUnitID(testCaseID) + ""String_Node_Str"",testSkippedVerdictName,testSessionID,test.getId());
      }
    }
    if (null != containsFld && null != containsFld.getList()) {
      updateTestResult(testResult,listener,api,testSessionID,walkResponse,containsFld.getList());
    }
  }
}",0.8832435206569156
7238,"/** 
 * Collects the Test Results based on the list of Tests contained within an Integrity Test Session
 * @param testResultAction AggregatedTestResultAction
 * @param listener BuildListener
 * @param api Integrity API Session
 * @param testSessionID Integrity Test Session ID
 * @return
 * @throws APIException
 */
@SuppressWarnings(""String_Node_Str"") private boolean collectTestResults(AggregatedTestResultAction testResultAction,BuildListener listener,APISession api,String testSessionID) throws APIException {
  Command walk=new Command(Command.IM,""String_Node_Str"");
  walk.addOption(new Option(""String_Node_Str"",testCaseTestNameField));
  MultiValue traverseFields=new MultiValue(""String_Node_Str"");
  traverseFields.add(testSessionTestsField);
  traverseFields.add(testSuiteContainsField);
  walk.addOption(new Option(""String_Node_Str"",traverseFields));
  walk.addSelection(testSessionID);
  Response walkResponse=api.runCommand(walk);
  if (null != walkResponse) {
    Field testSessionFld=walkResponse.getWorkItem(testSessionID).getField(testSessionTestsField);
    if (null != testSessionFld && null != testSessionFld.getList()) {
      updateTestResult(getTestResult(testResultAction),listener,api,testSessionID,testSessionFld.getList());
    }
  }
  return true;
}","/** 
 * Collects the Test Results based on the list of Tests contained within an Integrity Test Session
 * @param testResultAction AggregatedTestResultAction
 * @param listener BuildListener
 * @param api Integrity API Session
 * @param testSessionID Integrity Test Session ID
 * @return
 * @throws APIException
 */
@SuppressWarnings(""String_Node_Str"") private boolean collectTestResults(AggregatedTestResultAction testResultAction,BuildListener listener,APISession api,String testSessionID) throws APIException {
  Command walk=new Command(Command.IM,""String_Node_Str"");
  walk.addOption(new Option(""String_Node_Str"",testCaseTestNameField));
  MultiValue traverseFields=new MultiValue(""String_Node_Str"");
  traverseFields.add(testSessionTestsField);
  traverseFields.add(testSuiteContainsField);
  walk.addOption(new Option(""String_Node_Str"",traverseFields));
  walk.addSelection(testSessionID);
  Response walkResponse=api.runCommand(walk);
  if (null != walkResponse) {
    Field testSessionFld=walkResponse.getWorkItem(testSessionID).getField(testSessionTestsField);
    if (null != testSessionFld && null != testSessionFld.getList()) {
      updateTestResult(getTestResult(testResultAction),listener,api,testSessionID,walkResponse,testSessionFld.getList());
    }
  }
  return true;
}",0.9949317738791424
7239,"/** 
 * Executes the actual Integrity Update Item operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  boolean success=true;
  AbstractProject<?,?> rootProject=getRootProject(build.getProject());
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  APISession api=APISession.create(this);
  if (null != api) {
    try {
      int intBuildItemID=0;
      int intTestSessionID=0;
      String buildItemID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intBuildItemID=Integer.parseInt(buildItemID);
      }
 catch (      NumberFormatException nfe) {
        intBuildItemID=0;
      }
      String testSessionID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intTestSessionID=Integer.parseInt(testSessionID);
      }
 catch (      NumberFormatException nfe) {
        intTestSessionID=0;
      }
      if (intBuildItemID <= 0) {
        if (queryDefinition.length() > 0) {
          Command issues=new Command(Command.IM,""String_Node_Str"");
          issues.addOption(new Option(""String_Node_Str"",""String_Node_Str""));
          issues.addOption(new Option(""String_Node_Str"",queryDefinition));
          Response issuesResponse=api.runCommand(issues);
          if (null != issuesResponse) {
            WorkItemIterator wit=issuesResponse.getWorkItems();
            if (wit.hasNext()) {
              buildItemID=wit.next().getField(""String_Node_Str"").getValueAsString();
              try {
                intBuildItemID=Integer.parseInt(buildItemID);
              }
 catch (              NumberFormatException nfe) {
                intBuildItemID=0;
              }
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return false;
            }
          }
 else {
            listener.getLogger().println(""String_Node_Str"");
            return false;
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
        }
      }
      AbstractTestResultAction<?> testResult=build.getAction(AbstractTestResultAction.class);
      if (null != testResult && testResult.getTotalCount() > 0) {
        if (intTestSessionID <= 0 && testSessionField.length() > 0 && intBuildItemID > 0) {
          Command walk=new Command(Command.IM,""String_Node_Str"");
          walk.addOption(new Option(""String_Node_Str"",testSessionStateField));
          walk.addOption(new Option(""String_Node_Str"",testSessionField));
          walk.addSelection(buildItemID);
          Response walkResponse=api.runCommand(walk);
          if (null != walkResponse) {
            Field testSessionFld=walkResponse.getWorkItem(buildItemID).getField(testSessionField);
            if (null != testSessionFld && null != testSessionFld.getList()) {
              @SuppressWarnings(""String_Node_Str"") List<Item> sessionList=testSessionFld.getList();
              for (              Item session : sessionList) {
                if (null != session.getField(testSessionStateField) && session.getField(testSessionStateField).getValueAsString().equals(testSessionActiveState)) {
                  testSessionID=session.getId();
                  try {
                    intTestSessionID=Integer.parseInt(testSessionID);
                  }
 catch (                  NumberFormatException nfe) {
                    intTestSessionID=0;
                  }
                  break;
                }
              }
            }
          }
        }
        if (intTestSessionID > 0) {
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
          success=collectTestResults(build.getAction(AggregatedTestResultAction.class),listener,api,testSessionID);
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
        }
      }
      if (intBuildItemID > 0) {
        listener.getLogger().println(""String_Node_Str"" + buildItemID + ""String_Node_Str"");
        success=editBuildItem(build,listener,api,buildItemID);
      }
    }
 catch (    APIException aex) {
      Logger.error(""String_Node_Str"");
      ExceptionHandler eh=new ExceptionHandler(aex);
      aex.printStackTrace(listener.fatalError(aex.getMessage()));
      Logger.error(eh.getMessage());
      Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
      return false;
    }
 finally {
      api.Terminate();
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  return success;
}","/** 
 * Executes the actual Integrity Update Item operation
 */
public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  boolean success=true;
  AbstractProject<?,?> rootProject=getRootProject(build.getProject());
  if (!(rootProject.getScm() instanceof IntegritySCM)) {
    listener.getLogger().println(""String_Node_Str"" + rootProject.getScm() + ""String_Node_Str"");
    return true;
  }
  APISession api=APISession.create(this);
  if (null != api) {
    try {
      int intBuildItemID=0;
      int intTestSessionID=0;
      String buildItemID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intBuildItemID=Integer.parseInt(buildItemID);
      }
 catch (      NumberFormatException nfe) {
        intBuildItemID=0;
      }
      String testSessionID=build.getEnvironment(listener).get(""String_Node_Str"",""String_Node_Str"");
      try {
        intTestSessionID=Integer.parseInt(testSessionID);
      }
 catch (      NumberFormatException nfe) {
        intTestSessionID=0;
      }
      if (intBuildItemID <= 0) {
        if (queryDefinition.length() > 0) {
          Command issues=new Command(Command.IM,""String_Node_Str"");
          issues.addOption(new Option(""String_Node_Str"",""String_Node_Str""));
          issues.addOption(new Option(""String_Node_Str"",queryDefinition));
          Response issuesResponse=api.runCommand(issues);
          if (null != issuesResponse) {
            WorkItemIterator wit=issuesResponse.getWorkItems();
            if (wit.hasNext()) {
              buildItemID=wit.next().getField(""String_Node_Str"").getValueAsString();
              try {
                intBuildItemID=Integer.parseInt(buildItemID);
              }
 catch (              NumberFormatException nfe) {
                intBuildItemID=0;
              }
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return false;
            }
          }
 else {
            listener.getLogger().println(""String_Node_Str"");
            return false;
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
        }
      }
      AbstractTestResultAction<?> testResult=build.getAction(AbstractTestResultAction.class);
      if (null != testResult && testResult.getTotalCount() > 0) {
        if (intTestSessionID <= 0 && testSessionField.length() > 0 && intBuildItemID > 0) {
          Command walk=new Command(Command.IM,""String_Node_Str"");
          walk.addOption(new Option(""String_Node_Str"",testSessionStateField));
          walk.addOption(new Option(""String_Node_Str"",testSessionField));
          walk.addSelection(buildItemID);
          Response walkResponse=api.runCommand(walk);
          if (null != walkResponse) {
            Field testSessionFld=walkResponse.getWorkItem(buildItemID).getField(testSessionField);
            if (null != testSessionFld && null != testSessionFld.getList()) {
              @SuppressWarnings(""String_Node_Str"") List<Item> sessionList=testSessionFld.getList();
              for (              Item session : sessionList) {
                Field stateField=null;
                try {
                  stateField=session.getField(testSessionStateField);
                }
 catch (                NoSuchElementException nsee) {
                  stateField=walkResponse.getWorkItem(session.getId()).getField(testSessionStateField);
                }
                if (null != stateField && testSessionActiveState.equals(stateField.getValueAsString())) {
                  testSessionID=session.getId();
                  try {
                    intTestSessionID=Integer.parseInt(testSessionID);
                  }
 catch (                  NumberFormatException nfe) {
                    intTestSessionID=0;
                  }
                  break;
                }
              }
            }
          }
        }
        if (intTestSessionID > 0) {
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
          success=collectTestResults(build.getAction(AggregatedTestResultAction.class),listener,api,testSessionID);
          listener.getLogger().println(""String_Node_Str"" + testSessionID + ""String_Node_Str"");
        }
      }
      if (intBuildItemID > 0) {
        listener.getLogger().println(""String_Node_Str"" + buildItemID + ""String_Node_Str"");
        success=editBuildItem(build,listener,api,buildItemID);
      }
    }
 catch (    APIException aex) {
      Logger.error(""String_Node_Str"");
      ExceptionHandler eh=new ExceptionHandler(aex);
      aex.printStackTrace(listener.fatalError(aex.getMessage()));
      Logger.error(eh.getMessage());
      Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
      return false;
    }
 finally {
      api.Terminate();
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  return success;
}",0.9529339853300732
7240,"/** 
 * Terminate the API Session and Integration Point
 */
public void Terminate(){
  boolean CommandRunnerKilled=false;
  boolean SessionKilled=false;
  boolean IntegrationPointKilled=false;
  if (!terminated) {
    try {
      if (null != icr) {
        if (!icr.isFinished()) {
          icr.interrupt();
        }
        icr.release();
        CommandRunnerKilled=true;
      }
 else {
        CommandRunnerKilled=true;
      }
    }
 catch (    APIException aex) {
      Logger.debug(""String_Node_Str"");
      aex.printStackTrace();
    }
    try {
      if (null != session) {
        session.release(true);
        SessionKilled=true;
      }
 else {
        SessionKilled=true;
      }
    }
 catch (    APIException aex) {
      Logger.debug(""String_Node_Str"");
      aex.printStackTrace();
    }
catch (    IOException ioe) {
      Logger.debug(""String_Node_Str"");
      ioe.printStackTrace();
    }
    if (null != ip) {
      ip.release();
      IntegrationPointKilled=true;
    }
 else {
      IntegrationPointKilled=true;
    }
    if (CommandRunnerKilled && SessionKilled && IntegrationPointKilled) {
      terminated=true;
      Logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ port);
    }
  }
}","/** 
 * Terminate the API Session and Integration Point
 */
public void Terminate(){
  boolean cmdRunnerKilled=false;
  boolean sessionKilled=false;
  boolean intPointKilled=false;
  if (!terminated) {
    try {
      if (null != icr) {
        if (!icr.isFinished()) {
          icr.interrupt();
        }
        icr.release();
        cmdRunnerKilled=true;
      }
 else {
        cmdRunnerKilled=true;
      }
    }
 catch (    APIException aex) {
      Logger.debug(""String_Node_Str"");
      aex.printStackTrace();
    }
    try {
      if (null != session) {
        session.release(true);
        sessionKilled=true;
      }
 else {
        sessionKilled=true;
      }
    }
 catch (    APIException aex) {
      Logger.debug(""String_Node_Str"");
      aex.printStackTrace();
    }
catch (    IOException ioe) {
      Logger.debug(""String_Node_Str"");
      ioe.printStackTrace();
    }
    if (null != ip) {
      ip.release();
      intPointKilled=true;
    }
 else {
      intPointKilled=true;
    }
    if (cmdRunnerKilled && sessionKilled && intPointKilled) {
      terminated=true;
      Logger.debug(""String_Node_Str"" + userName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ port);
    }
 else {
      Logger.warn(""String_Node_Str"" + userName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ port);
    }
  }
}",0.8831269349845201
7241,"/** 
 * Compares this version of the project to a previous/new version to determine what are the updates and what was deleted
 * @param baselineProjectDB The previous baseline (build) for this Integrity CM Project
 * @param api The current Integrity API Session to obtain the author information
 * @param return The total number of changes found in the comparison
 * @throws SQLException 
 * @throws IOException 
 */
public int compareBaseline(File baselineProjectDB,APISession api) throws SQLException, IOException {
  changeCount=0;
  Connection baselineDB=DerbyUtils.createDBConnection(baselineProjectDB,dbName);
  Connection db=openProjectDB();
  Statement baselineSelect=null;
  Statement pjSelect=null;
  ResultSet baselineRS=null;
  ResultSet rs=null;
  try {
    baselineSelect=baselineDB.createStatement();
    Logger.debug(""String_Node_Str"" + DerbyUtils.BASELINE_SELECT);
    baselineRS=baselineSelect.executeQuery(DerbyUtils.BASELINE_SELECT);
    Hashtable<String,Hashtable<CM_PROJECT,Object>> baselinePJ=new Hashtable<String,Hashtable<CM_PROJECT,Object>>();
    while (baselineRS.next()) {
      Hashtable<CM_PROJECT,Object> rowHash=DerbyUtils.getRowData(baselineRS);
      Hashtable<CM_PROJECT,Object> memberInfo=new Hashtable<CM_PROJECT,Object>();
      memberInfo.put(CM_PROJECT.MEMBER_ID,(null == rowHash.get(CM_PROJECT.MEMBER_ID) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.MEMBER_ID).toString()));
      memberInfo.put(CM_PROJECT.TIMESTAMP,(null == rowHash.get(CM_PROJECT.TIMESTAMP) ? ""String_Node_Str"" : (Date)rowHash.get(CM_PROJECT.TIMESTAMP)));
      memberInfo.put(CM_PROJECT.DESCRIPTION,(null == rowHash.get(CM_PROJECT.DESCRIPTION) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.DESCRIPTION).toString()));
      memberInfo.put(CM_PROJECT.AUTHOR,(null == rowHash.get(CM_PROJECT.AUTHOR) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.AUTHOR).toString()));
      memberInfo.put(CM_PROJECT.CONFIG_PATH,(null == rowHash.get(CM_PROJECT.CONFIG_PATH) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.CONFIG_PATH).toString()));
      memberInfo.put(CM_PROJECT.REVISION,(null == rowHash.get(CM_PROJECT.REVISION) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.REVISION).toString()));
      memberInfo.put(CM_PROJECT.RELATIVE_FILE,(null == rowHash.get(CM_PROJECT.RELATIVE_FILE) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.RELATIVE_FILE).toString()));
      memberInfo.put(CM_PROJECT.CHECKSUM,(null == rowHash.get(CM_PROJECT.CHECKSUM) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.CHECKSUM).toString()));
      baselinePJ.put(rowHash.get(CM_PROJECT.NAME).toString(),memberInfo);
    }
    pjSelect=db.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
    Logger.debug(""String_Node_Str"" + DerbyUtils.DELTA_SELECT);
    rs=pjSelect.executeQuery(DerbyUtils.DELTA_SELECT);
    for (int i=1; i <= DerbyUtils.getRowCount(rs); i++) {
      rs.absolute(i);
      Hashtable<CM_PROJECT,Object> rowHash=DerbyUtils.getRowData(rs);
      String memberName=rowHash.get(CM_PROJECT.NAME).toString();
      Logger.debug(""String_Node_Str"" + memberName);
      Hashtable<CM_PROJECT,Object> baselineMemberInfo=baselinePJ.get(memberName);
      if (null != baselineMemberInfo) {
        String oldRevision=baselineMemberInfo.get(CM_PROJECT.REVISION).toString();
        if (!rowHash.get(CM_PROJECT.REVISION).toString().equals(oldRevision)) {
          rs.updateString(CM_PROJECT.OLD_REVISION.toString(),oldRevision);
          if (!skipAuthorInfo) {
            rs.updateString(CM_PROJECT.AUTHOR.toString(),IntegrityCMMember.getAuthor(api,rowHash.get(CM_PROJECT.CONFIG_PATH).toString(),rowHash.get(CM_PROJECT.MEMBER_ID).toString(),rowHash.get(CM_PROJECT.REVISION).toString()));
          }
          rs.updateShort(CM_PROJECT.DELTA.toString(),(short)2);
          changeCount++;
        }
 else {
          if (null != baselineMemberInfo.get(CM_PROJECT.AUTHOR)) {
            rs.updateString(CM_PROJECT.AUTHOR.toString(),baselineMemberInfo.get(CM_PROJECT.AUTHOR).toString());
          }
          if (null != baselineMemberInfo.get(CM_PROJECT.CHECKSUM)) {
            rs.updateString(CM_PROJECT.CHECKSUM.toString(),baselineMemberInfo.get(CM_PROJECT.CHECKSUM).toString());
          }
          rs.updateShort(CM_PROJECT.DELTA.toString(),(short)0);
        }
        baselinePJ.remove(memberName);
      }
 else {
        if (!skipAuthorInfo) {
          rs.updateString(CM_PROJECT.AUTHOR.toString(),IntegrityCMMember.getAuthor(api,rowHash.get(CM_PROJECT.CONFIG_PATH).toString(),rowHash.get(CM_PROJECT.MEMBER_ID).toString(),rowHash.get(CM_PROJECT.REVISION).toString()));
        }
        rs.updateShort(CM_PROJECT.DELTA.toString(),(short)1);
        changeCount++;
      }
      rs.updateRow();
    }
    Enumeration<String> deletedMembers=baselinePJ.keys();
    while (deletedMembers.hasMoreElements()) {
      changeCount++;
      String memberName=deletedMembers.nextElement();
      Hashtable<CM_PROJECT,Object> memberInfo=baselinePJ.get(memberName);
      rs.moveToInsertRow();
      rs.updateShort(CM_PROJECT.TYPE.toString(),(short)0);
      rs.updateString(CM_PROJECT.NAME.toString(),memberName);
      rs.updateString(CM_PROJECT.MEMBER_ID.toString(),memberInfo.get(CM_PROJECT.MEMBER_ID).toString());
      if (memberInfo.get(CM_PROJECT.TIMESTAMP) instanceof java.util.Date) {
        Timestamp ts=new Timestamp(((Date)memberInfo.get(CM_PROJECT.TIMESTAMP)).getTime());
        rs.updateTimestamp(CM_PROJECT.TIMESTAMP.toString(),ts);
      }
      rs.updateString(CM_PROJECT.DESCRIPTION.toString(),memberInfo.get(CM_PROJECT.DESCRIPTION).toString());
      rs.updateString(CM_PROJECT.AUTHOR.toString(),memberInfo.get(CM_PROJECT.AUTHOR).toString());
      rs.updateString(CM_PROJECT.CONFIG_PATH.toString(),memberInfo.get(CM_PROJECT.CONFIG_PATH).toString());
      rs.updateString(CM_PROJECT.REVISION.toString(),memberInfo.get(CM_PROJECT.REVISION).toString());
      rs.updateString(CM_PROJECT.RELATIVE_FILE.toString(),memberInfo.get(CM_PROJECT.RELATIVE_FILE).toString());
      rs.updateShort(CM_PROJECT.DELTA.toString(),(short)3);
      rs.insertRow();
      rs.moveToCurrentRow();
    }
    db.commit();
  }
  finally {
    if (null != baselineRS) {
      baselineRS.close();
    }
    if (null != rs) {
      rs.close();
    }
    if (null != baselineSelect) {
      baselineSelect.close();
    }
    if (null != pjSelect) {
      pjSelect.close();
    }
    if (null != baselineDB) {
      baselineDB.close();
    }
    if (null != db) {
      db.close();
    }
    DerbyUtils.shutdownDB(baselineProjectDB,dbName);
  }
  return changeCount;
}","/** 
 * Compares this version of the project to a previous/new version to determine what are the updates and what was deleted
 * @param baselineProjectDB The previous baseline (build) for this Integrity CM Project
 * @param api The current Integrity API Session to obtain the author information
 * @param return The total number of changes found in the comparison
 * @throws SQLException 
 * @throws IOException 
 */
public int compareBaseline(File baselineProjectDB,APISession api) throws SQLException, IOException {
  changeCount=0;
  Connection baselineDB=DerbyUtils.createDBConnection(baselineProjectDB,dbName);
  Connection db=openProjectDB();
  Statement baselineSelect=null;
  Statement pjSelect=null;
  ResultSet baselineRS=null;
  ResultSet rs=null;
  try {
    baselineSelect=baselineDB.createStatement();
    Logger.debug(""String_Node_Str"" + DerbyUtils.BASELINE_SELECT);
    baselineRS=baselineSelect.executeQuery(DerbyUtils.BASELINE_SELECT);
    Hashtable<String,Hashtable<CM_PROJECT,Object>> baselinePJ=new Hashtable<String,Hashtable<CM_PROJECT,Object>>();
    while (baselineRS.next()) {
      Hashtable<CM_PROJECT,Object> rowHash=DerbyUtils.getRowData(baselineRS);
      Hashtable<CM_PROJECT,Object> memberInfo=new Hashtable<CM_PROJECT,Object>();
      memberInfo.put(CM_PROJECT.MEMBER_ID,(null == rowHash.get(CM_PROJECT.MEMBER_ID) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.MEMBER_ID).toString()));
      memberInfo.put(CM_PROJECT.TIMESTAMP,(null == rowHash.get(CM_PROJECT.TIMESTAMP) ? ""String_Node_Str"" : (Date)rowHash.get(CM_PROJECT.TIMESTAMP)));
      memberInfo.put(CM_PROJECT.DESCRIPTION,(null == rowHash.get(CM_PROJECT.DESCRIPTION) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.DESCRIPTION).toString()));
      memberInfo.put(CM_PROJECT.AUTHOR,(null == rowHash.get(CM_PROJECT.AUTHOR) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.AUTHOR).toString()));
      memberInfo.put(CM_PROJECT.CONFIG_PATH,(null == rowHash.get(CM_PROJECT.CONFIG_PATH) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.CONFIG_PATH).toString()));
      memberInfo.put(CM_PROJECT.REVISION,(null == rowHash.get(CM_PROJECT.REVISION) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.REVISION).toString()));
      memberInfo.put(CM_PROJECT.RELATIVE_FILE,(null == rowHash.get(CM_PROJECT.RELATIVE_FILE) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.RELATIVE_FILE).toString()));
      memberInfo.put(CM_PROJECT.CHECKSUM,(null == rowHash.get(CM_PROJECT.CHECKSUM) ? ""String_Node_Str"" : rowHash.get(CM_PROJECT.CHECKSUM).toString()));
      baselinePJ.put(rowHash.get(CM_PROJECT.NAME).toString(),memberInfo);
    }
    pjSelect=db.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
    Logger.debug(""String_Node_Str"" + DerbyUtils.DELTA_SELECT);
    rs=pjSelect.executeQuery(DerbyUtils.DELTA_SELECT);
    for (int i=1; i <= DerbyUtils.getRowCount(rs); i++) {
      rs.absolute(i);
      Hashtable<CM_PROJECT,Object> rowHash=DerbyUtils.getRowData(rs);
      String memberName=rowHash.get(CM_PROJECT.NAME).toString();
      Logger.debug(""String_Node_Str"" + memberName);
      Hashtable<CM_PROJECT,Object> baselineMemberInfo=baselinePJ.get(memberName);
      if (null != baselineMemberInfo) {
        String oldRevision=baselineMemberInfo.get(CM_PROJECT.REVISION).toString();
        if (!rowHash.get(CM_PROJECT.REVISION).toString().equals(oldRevision)) {
          rs.updateString(CM_PROJECT.OLD_REVISION.toString(),oldRevision);
          if (!skipAuthorInfo) {
            rs.updateString(CM_PROJECT.AUTHOR.toString(),IntegrityCMMember.getAuthor(api,rowHash.get(CM_PROJECT.CONFIG_PATH).toString(),rowHash.get(CM_PROJECT.MEMBER_ID).toString(),rowHash.get(CM_PROJECT.REVISION).toString()));
          }
          rs.updateShort(CM_PROJECT.DELTA.toString(),(short)2);
          Logger.debug(""String_Node_Str"" + memberName + ""String_Node_Str""+ rowHash.get(CM_PROJECT.REVISION).toString());
          changeCount++;
        }
 else {
          if (null != baselineMemberInfo.get(CM_PROJECT.AUTHOR)) {
            rs.updateString(CM_PROJECT.AUTHOR.toString(),baselineMemberInfo.get(CM_PROJECT.AUTHOR).toString());
          }
          if (null != baselineMemberInfo.get(CM_PROJECT.CHECKSUM)) {
            rs.updateString(CM_PROJECT.CHECKSUM.toString(),baselineMemberInfo.get(CM_PROJECT.CHECKSUM).toString());
          }
          rs.updateShort(CM_PROJECT.DELTA.toString(),(short)0);
        }
        baselinePJ.remove(memberName);
      }
 else {
        if (!skipAuthorInfo) {
          rs.updateString(CM_PROJECT.AUTHOR.toString(),IntegrityCMMember.getAuthor(api,rowHash.get(CM_PROJECT.CONFIG_PATH).toString(),rowHash.get(CM_PROJECT.MEMBER_ID).toString(),rowHash.get(CM_PROJECT.REVISION).toString()));
        }
        rs.updateShort(CM_PROJECT.DELTA.toString(),(short)1);
        Logger.debug(""String_Node_Str"" + memberName + ""String_Node_Str""+ rowHash.get(CM_PROJECT.REVISION).toString());
        changeCount++;
      }
      rs.updateRow();
    }
    Enumeration<String> deletedMembers=baselinePJ.keys();
    while (deletedMembers.hasMoreElements()) {
      changeCount++;
      String memberName=deletedMembers.nextElement();
      Hashtable<CM_PROJECT,Object> memberInfo=baselinePJ.get(memberName);
      rs.moveToInsertRow();
      rs.updateShort(CM_PROJECT.TYPE.toString(),(short)0);
      rs.updateString(CM_PROJECT.NAME.toString(),memberName);
      rs.updateString(CM_PROJECT.MEMBER_ID.toString(),memberInfo.get(CM_PROJECT.MEMBER_ID).toString());
      if (memberInfo.get(CM_PROJECT.TIMESTAMP) instanceof java.util.Date) {
        Timestamp ts=new Timestamp(((Date)memberInfo.get(CM_PROJECT.TIMESTAMP)).getTime());
        rs.updateTimestamp(CM_PROJECT.TIMESTAMP.toString(),ts);
      }
      rs.updateString(CM_PROJECT.DESCRIPTION.toString(),memberInfo.get(CM_PROJECT.DESCRIPTION).toString());
      rs.updateString(CM_PROJECT.AUTHOR.toString(),memberInfo.get(CM_PROJECT.AUTHOR).toString());
      rs.updateString(CM_PROJECT.CONFIG_PATH.toString(),memberInfo.get(CM_PROJECT.CONFIG_PATH).toString());
      rs.updateString(CM_PROJECT.REVISION.toString(),memberInfo.get(CM_PROJECT.REVISION).toString());
      rs.updateString(CM_PROJECT.RELATIVE_FILE.toString(),memberInfo.get(CM_PROJECT.RELATIVE_FILE).toString());
      rs.updateShort(CM_PROJECT.DELTA.toString(),(short)3);
      rs.insertRow();
      rs.moveToCurrentRow();
      Logger.debug(""String_Node_Str"" + memberName + ""String_Node_Str""+ memberInfo.get(CM_PROJECT.REVISION).toString());
    }
    db.commit();
  }
  finally {
    if (null != baselineRS) {
      baselineRS.close();
    }
    if (null != rs) {
      rs.close();
    }
    if (null != baselineSelect) {
      baselineSelect.close();
    }
    if (null != pjSelect) {
      pjSelect.close();
    }
    if (null != baselineDB) {
      baselineDB.close();
    }
    if (null != db) {
      db.close();
    }
    DerbyUtils.shutdownDB(baselineProjectDB,dbName);
  }
  return changeCount;
}",0.973293768545994
7242,"public Void call() throws IOException, APIException {
  APISession api=apiSession.get();
  Logger.debug(""String_Node_Str"" + openFileHandler.get());
  if (openFileHandler.get() >= CHECKOUT_TRESHOLD) {
    Logger.debug(""String_Node_Str"" + api.toString() + ""String_Node_Str"");
    api.refreshAPISession();
    openFileHandler.set(1);
  }
  Logger.debug(""String_Node_Str"" + api.toString());
  IntegrityCMMember.checkout(api,configPath,memberID,memberRev,targetFile,restoreTimestamp,lineTerminator);
  openFileHandler.set(openFileHandler.get() + 1);
  if (calculateChecksum) {
    checksumHash.put(memberName,IntegrityCMMember.getMD5Checksum(targetFile));
  }
  return null;
}","public Void call() throws Exception {
  APISession api=apiSession.get();
  if (null != api) {
    Logger.debug(""String_Node_Str"" + openFileHandler.get());
    if (openFileHandler.get() >= CHECKOUT_TRESHOLD) {
      Logger.debug(""String_Node_Str"" + api.toString() + ""String_Node_Str"");
      api.refreshAPISession();
      openFileHandler.set(1);
    }
    Logger.debug(""String_Node_Str"" + api.toString());
    try {
      IntegrityCMMember.checkout(api,configPath,memberID,memberRev,targetFile,restoreTimestamp,lineTerminator);
    }
 catch (    APIException aex) {
      Logger.error(""String_Node_Str"");
      ExceptionHandler eh=new ExceptionHandler(aex);
      Logger.error(eh.getMessage());
      Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
      throw new Exception(eh.getMessage());
    }
    openFileHandler.set(openFileHandler.get() + 1);
    if (calculateChecksum) {
      checksumHash.put(memberName,IntegrityCMMember.getMD5Checksum(targetFile));
    }
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
  return null;
}",0.706221198156682
7243,"/** 
 * This task wraps around the code necessary to checkout Integrity CM Members on remote machines
 */
public Boolean invoke(File workspaceFile,VirtualChannel channel) throws IOException {
  File checkOutDir=(null != alternateWorkspaceDir && alternateWorkspaceDir.length() > 0) ? new File(alternateWorkspaceDir) : workspaceFile;
  FilePath workspace=new FilePath(checkOutDir.isAbsolute() ? checkOutDir : new File(workspaceFile.getAbsolutePath() + IntegritySCM.FS + checkOutDir.getPath()));
  listener.getLogger().println(""String_Node_Str"" + workspace);
  final ThreadLocalAPISession generateAPISession=new ThreadLocalAPISession(integrityConfig);
  final ThreadLocalOpenFileHandler openFileHandler=new ThreadLocalOpenFileHandler();
  ExecutorService executor=Executors.newFixedThreadPool(checkoutThreadPoolSize);
  @SuppressWarnings(""String_Node_Str"") final List<Future> coThreads=new ArrayList<Future>();
  try {
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + workspace);
      Logger.debug(""String_Node_Str"" + workspace);
      workspace.deleteContents();
      listener.getLogger().println(""String_Node_Str"");
    }
    createFolderStructure(workspace);
    for (Iterator<Hashtable<CM_PROJECT,Object>> it=projectMembersList.iterator(); it.hasNext(); ) {
      Hashtable<CM_PROJECT,Object> memberInfo=it.next();
      short deltaFlag=(null == memberInfo.get(CM_PROJECT.DELTA) ? -1 : Short.valueOf(memberInfo.get(CM_PROJECT.DELTA).toString()));
      File targetFile=new File(workspace + memberInfo.get(CM_PROJECT.RELATIVE_FILE).toString());
      String memberName=memberInfo.get(CM_PROJECT.NAME).toString();
      String memberID=memberInfo.get(CM_PROJECT.MEMBER_ID).toString();
      String memberRev=memberInfo.get(CM_PROJECT.REVISION).toString();
      String configPath=memberInfo.get(CM_PROJECT.CONFIG_PATH).toString();
      String checksum=(null == memberInfo.get(CM_PROJECT.CHECKSUM) ? ""String_Node_Str"" : memberInfo.get(CM_PROJECT.CHECKSUM).toString());
      if (cleanCopy && deltaFlag != 3) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
      }
 else       if (deltaFlag == 0 && fetchChangedWorkspaceFiles && checksum.length() > 0) {
        if (!checksum.equals(IntegrityCMMember.getMD5Checksum(targetFile))) {
          Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
          coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,false)));
          fetchCount++;
        }
      }
 else       if (deltaFlag == 1) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
        addCount++;
      }
 else       if (deltaFlag == 2) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
        updateCount++;
      }
 else       if (deltaFlag == 3) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        dropCount++;
        if (targetFile.exists() && !targetFile.delete()) {
          listener.getLogger().println(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str"");
          return false;
        }
      }
    }
    int checkoutMembers=0;
    int previousCount=0;
    int canceledMembers=0;
    int totalMembers=coThreads.size();
    while (!coThreads.isEmpty()) {
      @SuppressWarnings(""String_Node_Str"") Iterator<Future> iter=coThreads.iterator();
      while (iter.hasNext()) {
        Future<?> future=iter.next();
        if (future.isCancelled()) {
          listener.getLogger().println(""String_Node_Str"" + future.toString() + ""String_Node_Str"");
          canceledMembers++;
          iter.remove();
        }
 else         if (future.isDone()) {
          checkoutMembers++;
          iter.remove();
        }
      }
      if (previousCount != (checkoutMembers + canceledMembers)) {
        Logger.debug(""String_Node_Str"" + checkoutMembers + ""String_Node_Str""+ totalMembers+ (canceledMembers > 0 ? ""String_Node_Str"" + canceledMembers + ""String_Node_Str"" : ""String_Node_Str""));
      }
      previousCount=checkoutMembers + canceledMembers;
      Thread.sleep(2000);
    }
    executor.shutdown();
    executor.awaitTermination(2,TimeUnit.MINUTES);
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + projectMembersList.size() + ""String_Node_Str"");
    }
 else {
      listener.getLogger().println(""String_Node_Str"" + (addCount + updateCount) + ""String_Node_Str""+ dropCount+ ""String_Node_Str"");
      if (fetchChangedWorkspaceFiles && fetchCount > 0) {
        listener.getLogger().println(""String_Node_Str"" + fetchCount + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException iex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    Logger.error(iex.getMessage());
    listener.getLogger().println(iex.getMessage());
    listener.getLogger().println(""String_Node_Str"" + workspace + ""String_Node_Str"");
    return false;
  }
 finally {
    if (generateAPISession != null) {
      generateAPISession.remove();
    }
  }
  return true;
}","/** 
 * This task wraps around the code necessary to checkout Integrity CM Members on remote machines
 */
public Boolean invoke(File workspaceFile,VirtualChannel channel) throws IOException {
  File checkOutDir=(null != alternateWorkspaceDir && alternateWorkspaceDir.length() > 0) ? new File(alternateWorkspaceDir) : workspaceFile;
  FilePath workspace=new FilePath(checkOutDir.isAbsolute() ? checkOutDir : new File(workspaceFile.getAbsolutePath() + IntegritySCM.FS + checkOutDir.getPath()));
  listener.getLogger().println(""String_Node_Str"" + workspace);
  final ThreadLocalAPISession generateAPISession=new ThreadLocalAPISession(integrityConfig);
  final ThreadLocalOpenFileHandler openFileHandler=new ThreadLocalOpenFileHandler();
  ExecutorService executor=Executors.newFixedThreadPool(checkoutThreadPoolSize);
  @SuppressWarnings(""String_Node_Str"") final List<Future> coThreads=new ArrayList<Future>();
  try {
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + workspace);
      Logger.debug(""String_Node_Str"" + workspace);
      workspace.deleteContents();
      listener.getLogger().println(""String_Node_Str"");
    }
    createFolderStructure(workspace);
    for (Iterator<Hashtable<CM_PROJECT,Object>> it=projectMembersList.iterator(); it.hasNext(); ) {
      Hashtable<CM_PROJECT,Object> memberInfo=it.next();
      short deltaFlag=(null == memberInfo.get(CM_PROJECT.DELTA) ? -1 : Short.valueOf(memberInfo.get(CM_PROJECT.DELTA).toString()));
      File targetFile=new File(workspace + memberInfo.get(CM_PROJECT.RELATIVE_FILE).toString());
      String memberName=memberInfo.get(CM_PROJECT.NAME).toString();
      String memberID=memberInfo.get(CM_PROJECT.MEMBER_ID).toString();
      String memberRev=memberInfo.get(CM_PROJECT.REVISION).toString();
      String configPath=memberInfo.get(CM_PROJECT.CONFIG_PATH).toString();
      String checksum=(null == memberInfo.get(CM_PROJECT.CHECKSUM) ? ""String_Node_Str"" : memberInfo.get(CM_PROJECT.CHECKSUM).toString());
      if (cleanCopy && deltaFlag != 3) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
      }
 else       if (deltaFlag == 0 && fetchChangedWorkspaceFiles && checksum.length() > 0) {
        if (!checksum.equals(IntegrityCMMember.getMD5Checksum(targetFile))) {
          Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
          coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,false)));
          fetchCount++;
        }
      }
 else       if (deltaFlag == 1) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
        addCount++;
      }
 else       if (deltaFlag == 2) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        coThreads.add(executor.submit(new CheckOutTask(generateAPISession,openFileHandler,memberName,configPath,memberID,memberRev,targetFile,fetchChangedWorkspaceFiles)));
        updateCount++;
      }
 else       if (deltaFlag == 3) {
        Logger.debug(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str""+ memberRev);
        dropCount++;
        if (targetFile.exists() && !targetFile.delete()) {
          listener.getLogger().println(""String_Node_Str"" + targetFile.getAbsolutePath() + ""String_Node_Str"");
          return false;
        }
      }
    }
    int checkoutMembers=0;
    int previousCount=0;
    int canceledMembers=0;
    int totalMembers=coThreads.size();
    while (!coThreads.isEmpty()) {
      @SuppressWarnings(""String_Node_Str"") Iterator<Future> iter=coThreads.iterator();
      while (iter.hasNext()) {
        Future<?> future=iter.next();
        if (future.isCancelled()) {
          listener.getLogger().println(""String_Node_Str"" + future.toString() + ""String_Node_Str"");
          canceledMembers++;
          iter.remove();
        }
 else         if (future.isDone()) {
          try {
            future.get();
          }
 catch (          ExecutionException e) {
            listener.getLogger().println(e.getMessage());
            Logger.error(e);
            StackTraceElement[] st=e.getStackTrace();
            for (int i=0; i < st.length; i++) {
              Logger.error(""String_Node_Str"" + st[i].getClassName() + ""String_Node_Str""+ st[i].getMethodName()+ ""String_Node_Str""+ st[i].getFileName()+ ""String_Node_Str""+ st[i].getLineNumber()+ ""String_Node_Str"");
            }
            return false;
          }
          checkoutMembers++;
          iter.remove();
        }
      }
      if (previousCount != (checkoutMembers + canceledMembers)) {
        Logger.debug(""String_Node_Str"" + checkoutMembers + ""String_Node_Str""+ totalMembers+ (canceledMembers > 0 ? ""String_Node_Str"" + canceledMembers + ""String_Node_Str"" : ""String_Node_Str""));
      }
      previousCount=checkoutMembers + canceledMembers;
      Thread.sleep(2000);
    }
    executor.shutdown();
    executor.awaitTermination(2,TimeUnit.MINUTES);
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + projectMembersList.size() + ""String_Node_Str"");
    }
 else {
      listener.getLogger().println(""String_Node_Str"" + (addCount + updateCount) + ""String_Node_Str""+ dropCount+ ""String_Node_Str"");
      if (fetchChangedWorkspaceFiles && fetchCount > 0) {
        listener.getLogger().println(""String_Node_Str"" + fetchCount + ""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException iex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    Logger.error(iex.getMessage());
    listener.getLogger().println(iex.getMessage());
    listener.getLogger().println(""String_Node_Str"" + workspace + ""String_Node_Str"");
    return false;
  }
 finally {
    if (generateAPISession != null) {
      generateAPISession.remove();
    }
  }
  return true;
}",0.9543609707612026
7244,"/** 
 * Returns an initial APISession for this thread
 */
@Override protected APISession initialValue(){
  APISession api=APISession.create(integrityConfig);
  sessions.add(api);
  return api;
}","/** 
 * Returns an initial APISession for this thread
 */
@Override protected APISession initialValue(){
  APISession api=APISession.create(integrityConfig);
  if (null != api) {
    sessions.add(api);
    return api;
  }
 else {
    return null;
  }
}",0.8161434977578476
7245,"/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  IntegrityRevisionState baseline;
  IntegrityCMProject siProject=getIntegrityProject();
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastBuild=project.getLastBuild();
    if (null == lastBuild) {
      Logger.debug(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastBuild,launcher,listener);
      if (null != baseline && null != baseline.getProjectDB()) {
        APISession api=APISession.create(this);
        if (null != api) {
          try {
            String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(project.getCharacteristicEnvVars(),configPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProject(api,new File(lastBuild.getRootDir(),""String_Node_Str""),resolvedConfigPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProjectMembers(api);
            File projectDB=baseline.getProjectDB();
            int changeCount=siProject.compareBaseline(projectDB,api);
            if (changeCount > 0) {
              listener.getLogger().println(""String_Node_Str"" + changeCount + ""String_Node_Str"");
              return PollingResult.SIGNIFICANT;
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return PollingResult.NO_CHANGES;
            }
          }
 catch (          APIException aex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            ExceptionHandler eh=new ExceptionHandler(aex);
            Logger.error(eh.getMessage());
            listener.getLogger().println(eh.getMessage());
            Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            aex.printStackTrace();
            return PollingResult.NO_CHANGES;
          }
catch (          SQLException sqlex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            listener.getLogger().println(sqlex.getMessage());
            Logger.fatal(sqlex);
            return PollingResult.NO_CHANGES;
          }
 finally {
            api.Terminate();
            siProject.closeProjectDB();
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
          return PollingResult.NO_CHANGES;
        }
      }
 else {
        Logger.debug(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}","/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  IntegrityRevisionState baseline;
  IntegrityCMProject siProject=null;
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastBuild=project.getLastBuild();
    if (null == lastBuild) {
      Logger.debug(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastBuild,launcher,listener);
      if (null != baseline && null != baseline.getProjectDB()) {
        APISession api=APISession.create(this);
        if (null != api) {
          try {
            String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(project.getCharacteristicEnvVars(),configPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProject(api,new File(lastBuild.getRootDir(),""String_Node_Str""),resolvedConfigPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProjectMembers(api);
            siProject=getIntegrityProject();
            File projectDB=baseline.getProjectDB();
            int changeCount=siProject.compareBaseline(projectDB,api);
            if (changeCount > 0) {
              listener.getLogger().println(""String_Node_Str"" + changeCount + ""String_Node_Str"");
              return PollingResult.SIGNIFICANT;
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return PollingResult.NO_CHANGES;
            }
          }
 catch (          APIException aex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            ExceptionHandler eh=new ExceptionHandler(aex);
            Logger.error(eh.getMessage());
            listener.getLogger().println(eh.getMessage());
            Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            aex.printStackTrace();
            return PollingResult.NO_CHANGES;
          }
catch (          SQLException sqlex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            listener.getLogger().println(sqlex.getMessage());
            Logger.fatal(sqlex);
            return PollingResult.NO_CHANGES;
          }
 finally {
            api.Terminate();
            if (null != siProject) {
              siProject.closeProjectDB();
            }
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
          return PollingResult.NO_CHANGES;
        }
      }
 else {
        Logger.debug(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}",0.9822741028966708
7246,"/** 
 * Toggles whether or not this needs to run after build is finalized
 */
@Override public boolean needsToRunAfterFinalized(){
  return true;
}","/** 
 * Toggles whether or not this needs to run after build is finalized Returning false, so that a check-in failure will cause a failed build
 */
@Override public boolean needsToRunAfterFinalized(){
  return false;
}",0.7890410958904109
7247,"protected DescriptorImpl(){
  super(IntegritySCM.class,IntegrityRepositoryBrowser.class);
  defaultHostName=Util.getHostName();
  defaultIPHostName=""String_Node_Str"";
  defaultPort=7001;
  defaultIPPort=0;
  defaultSecure=false;
  defaultUserName=""String_Node_Str"";
  defaultPassword=""String_Node_Str"";
  load();
  DerbyUtils.setDerbySystemDir(Hudson.getInstance().getRootDir());
  DerbyUtils.loadDerbyDriver();
  Logger.debug(""String_Node_Str"");
}","protected DescriptorImpl(){
  super(IntegritySCM.class,IntegrityRepositoryBrowser.class);
  defaultHostName=Util.getHostName();
  defaultIPHostName=""String_Node_Str"";
  defaultPort=7001;
  defaultIPPort=0;
  defaultSecure=false;
  defaultUserName=""String_Node_Str"";
  defaultPassword=""String_Node_Str"";
  defaultTagName=""String_Node_Str"";
  load();
  DerbyUtils.setDerbySystemDir(Hudson.getInstance().getRootDir());
  DerbyUtils.loadDerbyDriver();
  Logger.debug(""String_Node_Str"");
}",0.96137339055794
7248,"/** 
 * Adds Integrity CM Project info to the build variables  
 */
@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  Logger.debug(""String_Node_Str"");
  env.put(""String_Node_Str"",configPath);
  env.put(""String_Node_Str"",hostName);
  env.put(""String_Node_Str"",String.valueOf(port));
  env.put(""String_Node_Str"",userName);
}","/** 
 * Adds Integrity CM Project info to the build variables  
 */
@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  Logger.debug(""String_Node_Str"");
  env.put(""String_Node_Str"",IntegrityCheckpointAction.evalGroovyExpression(env,configPath));
  env.put(""String_Node_Str"",hostName);
  env.put(""String_Node_Str"",String.valueOf(port));
  env.put(""String_Node_Str"",userName);
}",0.937799043062201
7249,"/** 
 * Primes the Integrity Project Member metadata information
 * @param api Integrity API Session
 * @return response Integrity API Response
 * @throws APIException
 * @throws SQLException 
 */
private Response initializeCMProjectMembers(APISession api) throws APIException, SQLException {
  Command siViewProjectCmd=new Command(Command.SI,""String_Node_Str"");
  siViewProjectCmd.addOption(new Option(""String_Node_Str""));
  siViewProjectCmd.addOption(new Option(""String_Node_Str"",siProject.getConfigurationPath()));
  MultiValue mvFields=new MultiValue(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  siViewProjectCmd.addOption(new Option(""String_Node_Str"",mvFields));
  Logger.debug(""String_Node_Str"" + siProject.getConfigurationPath());
  Response viewRes=api.runCommandWithInterim(siViewProjectCmd);
  siProject.parseProject(viewRes.getWorkItems());
  return viewRes;
}","/** 
 * Primes the Integrity Project Member metadata information
 * @param api Integrity API Session
 * @return response Integrity API Response
 * @throws APIException
 * @throws SQLException 
 */
private Response initializeCMProjectMembers(APISession api) throws APIException, SQLException {
  Command siViewProjectCmd=new Command(Command.SI,""String_Node_Str"");
  siViewProjectCmd.addOption(new Option(""String_Node_Str""));
  siViewProjectCmd.addOption(new Option(""String_Node_Str"",siProject.getConfigurationPath()));
  MultiValue mvFields=new MultiValue(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  mvFields.add(""String_Node_Str"");
  siViewProjectCmd.addOption(new Option(""String_Node_Str"",mvFields));
  if (null != includeList && includeList.length() > 0) {
    siViewProjectCmd.addOption(new Option(""String_Node_Str"",parseIncludeExcludeList(includeList,true)));
  }
  if (null != excludeList && excludeList.length() > 0) {
    siViewProjectCmd.addOption(new Option(""String_Node_Str"",parseIncludeExcludeList(excludeList,false)));
  }
  Logger.debug(""String_Node_Str"" + siProject.getConfigurationPath());
  Response viewRes=api.runCommandWithInterim(siViewProjectCmd);
  siProject.parseProject(viewRes.getWorkItems());
  return viewRes;
}",0.8678046843985708
7250,"/** 
 * Create a constructor that takes non-transient fields, and add the annotation @DataBoundConstructor to it.  Using the annotation helps the Stapler class to find which constructor that should be used when  automatically copying values from a web form to a class.
 */
@DataBoundConstructor public IntegritySCM(IntegrityRepositoryBrowser browser,String hostName,int port,boolean secure,String configPath,String userName,String password,String ipHostName,int ipPort,boolean cleanCopy,String lineTerminator,boolean restoreTimestamp,boolean skipAuthorInfo,boolean checkpointBeforeBuild,String alternateWorkspace,boolean fetchChangedWorkspaceFiles,boolean deleteNonMembers,int checkoutThreadPoolSize){
  Logger.debug(""String_Node_Str"");
  this.ciServerURL=Hudson.getInstance().getRootUrlFromRequest();
  this.browser=browser;
  this.ipHostName=ipHostName;
  this.hostName=hostName;
  this.ipPort=ipPort;
  this.port=port;
  this.secure=secure;
  this.configPath=configPath;
  this.userName=userName;
  this.password=Base64.encode(password);
  this.cleanCopy=cleanCopy;
  this.lineTerminator=lineTerminator;
  this.restoreTimestamp=restoreTimestamp;
  this.skipAuthorInfo=skipAuthorInfo;
  this.checkpointBeforeBuild=checkpointBeforeBuild;
  this.alternateWorkspace=alternateWorkspace;
  this.fetchChangedWorkspaceFiles=fetchChangedWorkspaceFiles;
  this.deleteNonMembers=deleteNonMembers;
  this.checkoutThreadPoolSize=(checkoutThreadPoolSize > 0 ? checkoutThreadPoolSize : DEFAULT_THREAD_POOL_SIZE);
  initIntegrityURL();
  Logger.debug(""String_Node_Str"" + this.ciServerURL);
  Logger.debug(""String_Node_Str"" + this.integrityURL);
  Logger.debug(""String_Node_Str"" + this.ipHostName);
  Logger.debug(""String_Node_Str"" + this.hostName);
  Logger.debug(""String_Node_Str"" + this.ipPort);
  Logger.debug(""String_Node_Str"" + this.port);
  Logger.debug(""String_Node_Str"" + this.userName);
  Logger.debug(""String_Node_Str"" + DigestUtils.md5Hex(this.password));
  Logger.debug(""String_Node_Str"" + this.secure);
  Logger.debug(""String_Node_Str"" + this.configPath);
  Logger.debug(""String_Node_Str"" + this.lineTerminator);
  Logger.debug(""String_Node_Str"" + this.restoreTimestamp);
  Logger.debug(""String_Node_Str"" + this.cleanCopy);
  Logger.debug(""String_Node_Str"" + this.skipAuthorInfo);
  Logger.debug(""String_Node_Str"" + this.checkpointBeforeBuild);
  Logger.debug(""String_Node_Str"" + this.alternateWorkspace);
  Logger.debug(""String_Node_Str"" + this.fetchChangedWorkspaceFiles);
  Logger.debug(""String_Node_Str"" + this.deleteNonMembers);
  Logger.debug(""String_Node_Str"" + this.checkoutThreadPoolSize);
}","/** 
 * Create a constructor that takes non-transient fields, and add the annotation @DataBoundConstructor to it.  Using the annotation helps the Stapler class to find which constructor that should be used when  automatically copying values from a web form to a class.
 */
@DataBoundConstructor public IntegritySCM(IntegrityRepositoryBrowser browser,String hostName,int port,boolean secure,String configPath,String includeList,String excludeList,String userName,String password,String ipHostName,int ipPort,boolean cleanCopy,String lineTerminator,boolean restoreTimestamp,boolean skipAuthorInfo,boolean checkpointBeforeBuild,String tagName,String alternateWorkspace,boolean fetchChangedWorkspaceFiles,boolean deleteNonMembers,int checkoutThreadPoolSize){
  Logger.debug(""String_Node_Str"");
  this.ciServerURL=Hudson.getInstance().getRootUrlFromRequest();
  this.browser=browser;
  this.ipHostName=ipHostName;
  this.hostName=hostName;
  this.ipPort=ipPort;
  this.port=port;
  this.secure=secure;
  this.configPath=configPath;
  this.includeList=includeList;
  this.excludeList=excludeList;
  this.userName=userName;
  this.password=Base64.encode(password);
  this.cleanCopy=cleanCopy;
  this.lineTerminator=lineTerminator;
  this.restoreTimestamp=restoreTimestamp;
  this.skipAuthorInfo=skipAuthorInfo;
  this.checkpointBeforeBuild=checkpointBeforeBuild;
  this.tagName=tagName;
  this.alternateWorkspace=alternateWorkspace;
  this.fetchChangedWorkspaceFiles=fetchChangedWorkspaceFiles;
  this.deleteNonMembers=deleteNonMembers;
  this.checkoutThreadPoolSize=(checkoutThreadPoolSize > 0 ? checkoutThreadPoolSize : DEFAULT_THREAD_POOL_SIZE);
  initIntegrityURL();
  Logger.debug(""String_Node_Str"" + this.ciServerURL);
  Logger.debug(""String_Node_Str"" + this.integrityURL);
  Logger.debug(""String_Node_Str"" + this.ipHostName);
  Logger.debug(""String_Node_Str"" + this.hostName);
  Logger.debug(""String_Node_Str"" + this.ipPort);
  Logger.debug(""String_Node_Str"" + this.port);
  Logger.debug(""String_Node_Str"" + configPath);
  Logger.debug(""String_Node_Str"" + this.includeList);
  Logger.debug(""String_Node_Str"" + this.excludeList);
  Logger.debug(""String_Node_Str"" + this.userName);
  Logger.debug(""String_Node_Str"" + DigestUtils.md5Hex(this.password));
  Logger.debug(""String_Node_Str"" + this.secure);
  Logger.debug(""String_Node_Str"" + this.lineTerminator);
  Logger.debug(""String_Node_Str"" + this.restoreTimestamp);
  Logger.debug(""String_Node_Str"" + this.cleanCopy);
  Logger.debug(""String_Node_Str"" + this.skipAuthorInfo);
  Logger.debug(""String_Node_Str"" + this.checkpointBeforeBuild);
  Logger.debug(""String_Node_Str"" + this.tagName);
  Logger.debug(""String_Node_Str"" + this.alternateWorkspace);
  Logger.debug(""String_Node_Str"" + this.fetchChangedWorkspaceFiles);
  Logger.debug(""String_Node_Str"" + this.deleteNonMembers);
  Logger.debug(""String_Node_Str"" + this.checkoutThreadPoolSize);
}",0.7488168911539862
7251,"/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  IntegrityRevisionState baseline;
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastBuild=project.getLastBuild();
    if (null == lastBuild) {
      Logger.debug(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastBuild,launcher,listener);
      if (null != baseline && null != baseline.getProjectDB()) {
        File projectDB=baseline.getProjectDB().getParentFile();
        APISession api=createAPISession();
        if (null != api) {
          try {
            listener.getLogger().println(""String_Node_Str"" + configPath);
            initializeCMProject(api,new File(lastBuild.getRootDir(),""String_Node_Str""));
            listener.getLogger().println(""String_Node_Str"" + configPath);
            initializeCMProjectMembers(api);
            int changeCount=siProject.compareBaseline(projectDB,api);
            if (changeCount > 0) {
              listener.getLogger().println(""String_Node_Str"" + changeCount + ""String_Node_Str"");
              return PollingResult.SIGNIFICANT;
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return PollingResult.NO_CHANGES;
            }
          }
 catch (          APIException aex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            ExceptionHandler eh=new ExceptionHandler(aex);
            Logger.error(eh.getMessage());
            listener.getLogger().println(eh.getMessage());
            Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            aex.printStackTrace();
            return PollingResult.NO_CHANGES;
          }
catch (          SQLException sqlex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            listener.getLogger().println(sqlex.getMessage());
            Logger.fatal(sqlex);
            return PollingResult.NO_CHANGES;
          }
 finally {
            api.Terminate();
            DerbyUtils.shutdownDB(projectDB);
            siProject.closeProjectDB();
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
          return PollingResult.NO_CHANGES;
        }
      }
 else {
        Logger.debug(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}","/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  IntegrityRevisionState baseline;
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastBuild=project.getLastBuild();
    if (null == lastBuild) {
      Logger.debug(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastBuild,launcher,listener);
      if (null != baseline && null != baseline.getProjectDB()) {
        File projectDB=baseline.getProjectDB().getParentFile();
        APISession api=createAPISession();
        if (null != api) {
          try {
            String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(project.getCharacteristicEnvVars(),configPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProject(api,new File(lastBuild.getRootDir(),""String_Node_Str""),resolvedConfigPath);
            listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
            initializeCMProjectMembers(api);
            int changeCount=siProject.compareBaseline(projectDB,api);
            if (changeCount > 0) {
              listener.getLogger().println(""String_Node_Str"" + changeCount + ""String_Node_Str"");
              return PollingResult.SIGNIFICANT;
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return PollingResult.NO_CHANGES;
            }
          }
 catch (          APIException aex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            ExceptionHandler eh=new ExceptionHandler(aex);
            Logger.error(eh.getMessage());
            listener.getLogger().println(eh.getMessage());
            Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            aex.printStackTrace();
            return PollingResult.NO_CHANGES;
          }
catch (          SQLException sqlex) {
            Logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            listener.getLogger().println(sqlex.getMessage());
            Logger.fatal(sqlex);
            return PollingResult.NO_CHANGES;
          }
 finally {
            api.Terminate();
            DerbyUtils.shutdownDB(projectDB);
            siProject.closeProjectDB();
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
          return PollingResult.NO_CHANGES;
        }
      }
 else {
        Logger.debug(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    Logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}",0.9742822966507176
7252,"/** 
 * Primes the Integrity Project metadata information
 * @param api Integrity API Session
 * @return response Integrity API Response
 * @throws APIException
 */
private Response initializeCMProject(APISession api,File projectDB) throws APIException {
  Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
  siProjectInfoCmd.addOption(new Option(""String_Node_Str"",configPath));
  Logger.debug(""String_Node_Str"" + configPath);
  Response infoRes=api.runCommand(siProjectInfoCmd);
  Logger.debug(infoRes.getCommandString() + ""String_Node_Str"" + infoRes.getExitCode());
  siProject=new IntegrityCMProject(infoRes.getWorkItems().next(),projectDB);
  siProject.setLineTerminator(lineTerminator);
  siProject.setRestoreTimestamp(restoreTimestamp);
  siProject.setSkipAuthorInfo(skipAuthorInfo);
  return infoRes;
}","/** 
 * Primes the Integrity Project metadata information
 * @param api Integrity API Session
 * @return response Integrity API Response
 * @throws APIException
 */
private Response initializeCMProject(APISession api,File projectDB,String resolvedConfigPath) throws APIException {
  Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
  siProjectInfoCmd.addOption(new Option(""String_Node_Str"",resolvedConfigPath));
  Logger.debug(""String_Node_Str"" + resolvedConfigPath);
  Response infoRes=api.runCommand(siProjectInfoCmd);
  Logger.debug(infoRes.getCommandString() + ""String_Node_Str"" + infoRes.getExitCode());
  siProject=new IntegrityCMProject(infoRes.getWorkItems().next(),projectDB);
  siProject.setLineTerminator(lineTerminator);
  siProject.setRestoreTimestamp(restoreTimestamp);
  siProject.setSkipAuthorInfo(skipAuthorInfo);
  return infoRes;
}",0.972877358490566
7253,"/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  APISession api=createAPISession();
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(changeLogFile),""String_Node_Str""));
  try {
    listener.getLogger().println(""String_Node_Str"" + configPath);
    initializeCMProject(api,build.getRootDir());
    if (checkpointBeforeBuild) {
      if (!siProject.isBuild()) {
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
        Response res=siProject.checkpoint(api,""String_Node_Str"");
        Logger.debug(res.getCommandString() + ""String_Node_Str"" + res.getExitCode());
        WorkItem wi=res.getWorkItem(siProject.getConfigurationPath());
        String chkpt=wi.getResult().getField(""String_Node_Str"").getItem().getId();
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath() + ""String_Node_Str""+ chkpt);
        Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",siProject.getProjectName()));
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",chkpt));
        Response infoRes=api.runCommand(siProjectInfoCmd);
        siProject.initializeProject(infoRes.getWorkItems().next());
      }
 else {
        listener.getLogger().println(""String_Node_Str"");
      }
    }
    listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousBuild();
    for (AbstractBuild<?,?> b=build.getPreviousBuild(); null != b; b=b.getPreviousBuild()) {
      File prevProjectDB=new File(build.getRootDir(),DerbyUtils.DERBY_DB_FOLDER);
      if (prevProjectDB.isDirectory()) {
        Logger.debug(""String_Node_Str"" + b.getNumber());
        previousBuild=b;
        break;
      }
    }
    File prevProjectDB=getIntegrityCMProjectDB(previousBuild);
    if (null != prevProjectDB && prevProjectDB.isDirectory()) {
      siProject.compareBaseline(prevProjectDB.getParentFile(),api);
    }
 else {
      Logger.debug(""String_Node_Str"");
      if (!skipAuthorInfo) {
        siProject.primeAuthorInformation(api);
      }
    }
    List<Hashtable<CM_PROJECT,Object>> projectMembersList=siProject.viewProject();
    List<String> dirList=siProject.getDirList();
    IntegrityCheckoutTask coTask=null;
    if (null == prevProjectDB) {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,true,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener);
    }
 else {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,cleanCopy,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener);
    }
    coTask.initAPIVariables(ipHostName,ipPort,hostName,port,secure,userName,password);
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      if (fetchChangedWorkspaceFiles) {
        siProject.updateChecksum(coTask.getChecksumUpdates());
      }
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),projectMembersList));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
      if (deleteNonMembers) {
        IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,alternateWorkspace,getIntegrityProject());
        if (!workspace.act(deleteNonMembers)) {
          return false;
        }
      }
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    Logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    Logger.fatal(aex);
    return false;
  }
catch (  SQLException sqlex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(sqlex.getMessage());
    Logger.fatal(sqlex);
    return false;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
    if (siProject != null) {
      siProject.closeProjectDB();
    }
    api.Terminate();
  }
  return true;
}","/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  Logger.debug(""String_Node_Str"");
  String resolvedConfigPath=IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),configPath);
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  listener.getLogger().println(""String_Node_Str"" + ciServerURL + build.getUrl()+ ""String_Node_Str"");
  APISession api=createAPISession();
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(changeLogFile),""String_Node_Str""));
  try {
    listener.getLogger().println(""String_Node_Str"" + resolvedConfigPath);
    initializeCMProject(api,build.getRootDir(),resolvedConfigPath);
    if (checkpointBeforeBuild) {
      if (!siProject.isBuild()) {
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
        Response res=siProject.checkpoint(api,IntegrityCheckpointAction.evalGroovyExpression(build.getEnvironment(listener),tagName));
        Logger.debug(res.getCommandString() + ""String_Node_Str"" + res.getExitCode());
        WorkItem wi=res.getWorkItem(siProject.getConfigurationPath());
        String chkpt=wi.getResult().getField(""String_Node_Str"").getItem().getId();
        listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath() + ""String_Node_Str""+ chkpt);
        Command siProjectInfoCmd=new Command(Command.SI,""String_Node_Str"");
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",siProject.getProjectName()));
        siProjectInfoCmd.addOption(new Option(""String_Node_Str"",chkpt));
        Response infoRes=api.runCommand(siProjectInfoCmd);
        siProject.initializeProject(infoRes.getWorkItems().next());
      }
 else {
        listener.getLogger().println(""String_Node_Str"");
      }
    }
    listener.getLogger().println(""String_Node_Str"" + siProject.getConfigurationPath());
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousBuild();
    while (null != previousBuild) {
      File prevProjectDB=new File(previousBuild.getRootDir(),DerbyUtils.DERBY_DB_FOLDER);
      if (prevProjectDB.isDirectory()) {
        Logger.debug(""String_Node_Str"" + previousBuild.getNumber());
        break;
      }
      previousBuild=previousBuild.getPreviousBuild();
    }
    File prevProjectDB=getIntegrityCMProjectDB(previousBuild);
    if (null != prevProjectDB && prevProjectDB.isDirectory()) {
      siProject.compareBaseline(prevProjectDB.getParentFile(),api);
    }
 else {
      Logger.debug(""String_Node_Str"");
      if (!skipAuthorInfo) {
        siProject.primeAuthorInformation(api);
      }
    }
    List<Hashtable<CM_PROJECT,Object>> projectMembersList=siProject.viewProject();
    List<String> dirList=siProject.getDirList();
    IntegrityCheckoutTask coTask=null;
    if (null == prevProjectDB) {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,true,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener);
    }
 else {
      coTask=new IntegrityCheckoutTask(projectMembersList,dirList,alternateWorkspace,lineTerminator,restoreTimestamp,cleanCopy,fetchChangedWorkspaceFiles,checkoutThreadPoolSize,listener);
    }
    coTask.initAPIVariables(ipHostName,ipPort,hostName,port,secure,userName,password);
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      if (fetchChangedWorkspaceFiles) {
        siProject.updateChecksum(coTask.getChecksumUpdates());
      }
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),projectMembersList));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
      if (deleteNonMembers) {
        IntegrityDeleteNonMembersTask deleteNonMembers=new IntegrityDeleteNonMembersTask(build,listener,alternateWorkspace,getIntegrityProject());
        if (!workspace.act(deleteNonMembers)) {
          return false;
        }
      }
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    Logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    Logger.debug(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    Logger.fatal(aex);
    return false;
  }
catch (  SQLException sqlex) {
    Logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    listener.getLogger().println(sqlex.getMessage());
    Logger.fatal(sqlex);
    return false;
  }
 finally {
    if (writer != null) {
      writer.close();
    }
    if (siProject != null) {
      siProject.closeProjectDB();
    }
    api.Terminate();
  }
  return true;
}",0.958270576769735
7254,"/** 
 * This task wraps around the code necessary to checkout Integrity CM Members on remote machines
 */
public Boolean invoke(File workspaceFile,VirtualChannel channel) throws IOException {
  FilePath workspace=new FilePath(workspaceFile);
  APISession api=scm.createAPISession();
  try {
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + workspace);
      logger.info(""String_Node_Str"" + workspace);
      workspace.deleteContents();
      listener.getLogger().println(""String_Node_Str"");
      List<IntegrityCMMember> projectMembers=siProject.getProjectMembers();
      for (Iterator<IntegrityCMMember> it=projectMembers.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      listener.getLogger().println(""String_Node_Str"" + projectMembers.size() + ""String_Node_Str"");
    }
 else {
      List<IntegrityCMMember> newMembersList=siProject.getAddedMembers();
      for (Iterator<IntegrityCMMember> it=newMembersList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      List<IntegrityCMMember> updatedMembersList=siProject.getUpdatedMembers();
      for (Iterator<IntegrityCMMember> it=updatedMembersList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      List<IntegrityCMMember> memberDropList=siProject.getDroppedMembers();
      for (Iterator<IntegrityCMMember> it=memberDropList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        File dropFile=new File(siMember.getTargetFilePath());
        if (dropFile.exists() && !dropFile.delete()) {
          listener.getLogger().println(""String_Node_Str"" + dropFile.getAbsolutePath() + ""String_Node_Str"");
          return false;
        }
      }
      listener.getLogger().println(""String_Node_Str"" + (newMembersList.size() + updatedMembersList.size()) + ""String_Node_Str""+ memberDropList.size()+ ""String_Node_Str"");
    }
  }
 catch (  APIException aex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    aex.printStackTrace();
    return false;
  }
catch (  InterruptedException iex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    logger.error(iex.getMessage());
    listener.getLogger().println(iex.getMessage());
    listener.getLogger().println(""String_Node_Str"" + workspace + ""String_Node_Str"");
    return false;
  }
 finally {
    api.Terminate();
  }
  return true;
}","/** 
 * This task wraps around the code necessary to checkout Integrity CM Members on remote machines
 */
public Boolean invoke(File workspaceFile,VirtualChannel channel) throws IOException {
  FilePath workspace=new FilePath(workspaceFile);
  APISession api=scm.createAPISession();
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  try {
    if (cleanCopy) {
      listener.getLogger().println(""String_Node_Str"" + workspace);
      logger.info(""String_Node_Str"" + workspace);
      workspace.deleteContents();
      listener.getLogger().println(""String_Node_Str"");
      List<IntegrityCMMember> projectMembers=siProject.getProjectMembers();
      for (Iterator<IntegrityCMMember> it=projectMembers.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      listener.getLogger().println(""String_Node_Str"" + projectMembers.size() + ""String_Node_Str"");
    }
 else {
      List<IntegrityCMMember> newMembersList=siProject.getAddedMembers();
      for (Iterator<IntegrityCMMember> it=newMembersList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      List<IntegrityCMMember> updatedMembersList=siProject.getUpdatedMembers();
      for (Iterator<IntegrityCMMember> it=updatedMembersList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        siMember.checkout(api);
      }
      List<IntegrityCMMember> memberDropList=siProject.getDroppedMembers();
      for (Iterator<IntegrityCMMember> it=memberDropList.iterator(); it.hasNext(); ) {
        IntegrityCMMember siMember=it.next();
        siMember.setWorkspaceDir(""String_Node_Str"" + workspace);
        logger.info(""String_Node_Str"" + siMember.getTargetFilePath() + ""String_Node_Str""+ siMember.getRevision());
        File dropFile=new File(siMember.getTargetFilePath());
        if (dropFile.exists() && !dropFile.delete()) {
          listener.getLogger().println(""String_Node_Str"" + dropFile.getAbsolutePath() + ""String_Node_Str"");
          return false;
        }
      }
      listener.getLogger().println(""String_Node_Str"" + (newMembersList.size() + updatedMembersList.size()) + ""String_Node_Str""+ memberDropList.size()+ ""String_Node_Str"");
    }
  }
 catch (  APIException aex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    aex.printStackTrace();
    return false;
  }
catch (  InterruptedException iex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    logger.error(iex.getMessage());
    listener.getLogger().println(iex.getMessage());
    listener.getLogger().println(""String_Node_Str"" + workspace + ""String_Node_Str"");
    return false;
  }
 finally {
    api.Terminate();
  }
  return true;
}",0.9868565169769988
7255,"/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  IntegrityRevisionState baseline;
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastSuccessfulBuild=project.getLastSuccessfulBuild();
    if (null == lastSuccessfulBuild) {
      logger.info(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastSuccessfulBuild,launcher,listener);
      if (null != baseline && null != baseline.getSIProject()) {
        IntegrityCMProject oldProject=baseline.getSIProject();
        APISession api=createAPISession();
        try {
          listener.getLogger().println(""String_Node_Str"" + configPath);
          initializeCMProject(api);
          listener.getLogger().println(""String_Node_Str"" + configPath);
          initializeCMProjectMembers(api);
          siProject.compareBaseline(oldProject);
          if (siProject.hasProjectChanged()) {
            listener.getLogger().println(""String_Node_Str"" + siProject.getChangeCount() + ""String_Node_Str"");
            return PollingResult.SIGNIFICANT;
          }
 else {
            listener.getLogger().println(""String_Node_Str"");
            return PollingResult.NO_CHANGES;
          }
        }
 catch (        APIException aex) {
          logger.error(""String_Node_Str"");
          listener.getLogger().println(""String_Node_Str"");
          ExceptionHandler eh=new ExceptionHandler(aex);
          logger.error(eh.getMessage());
          listener.getLogger().println(eh.getMessage());
          logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
          listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
          aex.printStackTrace();
          return PollingResult.NO_CHANGES;
        }
 finally {
          api.Terminate();
        }
      }
 else {
        logger.info(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}","/** 
 * Overridden compareRemoteRevisionWith function Loads up the previous project configuration and compares  that against the current to determine if the project has changed
 * @see hudson.scm.SCM#compareRemoteRevisionWith(hudson.model.AbstractProject,hudson.Launcher,hudson.FilePath,hudson.model.TaskListener,hudson.scm.SCMRevisionState)
 */
@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,final TaskListener listener,SCMRevisionState _baseline) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  IntegrityRevisionState baseline;
  if (_baseline instanceof IntegrityRevisionState) {
    baseline=(IntegrityRevisionState)_baseline;
    AbstractBuild<?,?> lastSuccessfulBuild=project.getLastSuccessfulBuild();
    if (null == lastSuccessfulBuild) {
      logger.info(""String_Node_Str"");
      return PollingResult.BUILD_NOW;
    }
 else {
      baseline=(IntegrityRevisionState)calcRevisionsFromBuild(lastSuccessfulBuild,launcher,listener);
      if (null != baseline && null != baseline.getSIProject()) {
        IntegrityCMProject oldProject=baseline.getSIProject();
        APISession api=createAPISession();
        if (null != api) {
          try {
            listener.getLogger().println(""String_Node_Str"" + configPath);
            initializeCMProject(api);
            listener.getLogger().println(""String_Node_Str"" + configPath);
            initializeCMProjectMembers(api);
            siProject.compareBaseline(oldProject);
            if (siProject.hasProjectChanged()) {
              listener.getLogger().println(""String_Node_Str"" + siProject.getChangeCount() + ""String_Node_Str"");
              return PollingResult.SIGNIFICANT;
            }
 else {
              listener.getLogger().println(""String_Node_Str"");
              return PollingResult.NO_CHANGES;
            }
          }
 catch (          APIException aex) {
            logger.error(""String_Node_Str"");
            listener.getLogger().println(""String_Node_Str"");
            ExceptionHandler eh=new ExceptionHandler(aex);
            logger.error(eh.getMessage());
            listener.getLogger().println(eh.getMessage());
            logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
            aex.printStackTrace();
            return PollingResult.NO_CHANGES;
          }
 finally {
            api.Terminate();
          }
        }
 else {
          listener.getLogger().println(""String_Node_Str"");
          return PollingResult.NO_CHANGES;
        }
      }
 else {
        logger.info(""String_Node_Str"");
        return PollingResult.BUILD_NOW;
      }
    }
  }
 else {
    logger.error(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
}",0.9227987705659012
7256,"/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  APISession api=createAPISession();
  PrintWriter writer=new PrintWriter(new FileWriter(changeLogFile));
  try {
    listener.getLogger().println(""String_Node_Str"" + configPath);
    initializeCMProject(api);
    listener.getLogger().println(""String_Node_Str"" + configPath);
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousSuccessfulBuild();
    if (null == previousBuild) {
      logger.info(""String_Node_Str"");
    }
    for (AbstractBuild<?,?> b=build.getPreviousSuccessfulBuild(); null != b; b=b.getPreviousSuccessfulBuild()) {
      if (getViewProjectResponseFile(b).exists()) {
        logger.info(""String_Node_Str"" + b.getNumber());
        previousBuild=b;
        break;
      }
    }
    Object obj=getIntegrityCMProjectState(previousBuild);
    if (obj instanceof IntegrityCMProject && null != obj) {
      IntegrityCMProject oldProject=(IntegrityCMProject)obj;
      siProject.compareBaseline(oldProject);
    }
 else {
      logger.info(""String_Node_Str"");
    }
    IntegrityCheckoutTask coTask=null;
    if (null == obj) {
      coTask=new IntegrityCheckoutTask(this,siProject,true,listener);
    }
 else {
      coTask=new IntegrityCheckoutTask(this,siProject,cleanCopy,listener);
    }
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      printViewProjectResponse(build,listener,siProject);
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),api));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    aex.printStackTrace();
    return false;
  }
 finally {
    writer.close();
    api.Terminate();
  }
  return true;
}","/** 
 * Overridden checkout function This is the real invocation of this plugin. Currently, we will do a project info and determine the true nature of the project Subsequent to that we will run a view project command and cache the information on each member, so that we can execute project checkout commands.  This obviously eliminates the need for a sandbox and can wily nilly delete the workspace directory as needed
 * @see hudson.scm.SCM#checkout(hudson.model.AbstractBuild,hudson.Launcher,hudson.FilePath,hudson.model.BuildListener,java.io.File)
 */
@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changeLogFile) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  APISession api=createAPISession();
  if (null == api) {
    listener.getLogger().println(""String_Node_Str"");
    return false;
  }
  PrintWriter writer=new PrintWriter(new FileWriter(changeLogFile));
  try {
    listener.getLogger().println(""String_Node_Str"" + configPath);
    initializeCMProject(api);
    listener.getLogger().println(""String_Node_Str"" + configPath);
    initializeCMProjectMembers(api);
    AbstractBuild<?,?> previousBuild=build.getPreviousSuccessfulBuild();
    if (null == previousBuild) {
      logger.info(""String_Node_Str"");
    }
    for (AbstractBuild<?,?> b=build.getPreviousSuccessfulBuild(); null != b; b=b.getPreviousSuccessfulBuild()) {
      if (getViewProjectResponseFile(b).exists()) {
        logger.info(""String_Node_Str"" + b.getNumber());
        previousBuild=b;
        break;
      }
    }
    Object obj=getIntegrityCMProjectState(previousBuild);
    if (obj instanceof IntegrityCMProject && null != obj) {
      IntegrityCMProject oldProject=(IntegrityCMProject)obj;
      siProject.compareBaseline(oldProject);
    }
 else {
      logger.info(""String_Node_Str"");
    }
    IntegrityCheckoutTask coTask=null;
    if (null == obj) {
      coTask=new IntegrityCheckoutTask(this,siProject,true,listener);
    }
 else {
      coTask=new IntegrityCheckoutTask(this,siProject,cleanCopy,listener);
    }
    if (workspace.act(coTask)) {
      listener.getLogger().println(""String_Node_Str"");
      printViewProjectResponse(build,listener,siProject);
      listener.getLogger().println(""String_Node_Str"");
      writer.println(siProject.getChangeLog(String.valueOf(build.getNumber()),api));
      listener.getLogger().println(""String_Node_Str"" + changeLogFile.getAbsolutePath());
    }
 else {
      return false;
    }
  }
 catch (  APIException aex) {
    logger.error(""String_Node_Str"");
    listener.getLogger().println(""String_Node_Str"");
    ExceptionHandler eh=new ExceptionHandler(aex);
    logger.error(eh.getMessage());
    listener.getLogger().println(eh.getMessage());
    logger.info(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    listener.getLogger().println(eh.getCommand() + ""String_Node_Str"" + eh.getExitCode());
    aex.printStackTrace();
    return false;
  }
 finally {
    writer.close();
    api.Terminate();
  }
  return true;
}",0.984137475214805
7257,"public XBeeAddress queryRemoteDestination(XBeeAddress destination,int attempts) throws IOException {
  final XBeeAddress[] result=new XBeeAddress[1];
  int status;
  do {
    status=queryRemoteDestination(destination,new XBeeTerminatingDestinationVisitor(){
      @Override public boolean isTerminated(){
        return result[0] != null;
      }
      @Override public void visitNodeDestination(      XBeeAddress node,      XBeeAddress nodeDestination){
        result[0]=nodeDestination;
      }
    }
);
  }
 while (result[0] != null && --attempts > 0);
  if (status != XBeeAtResponseFrame.STATUS_OK)   throw new XBeeException(XBeeUtil.formatStatus(status));
  return result[0];
}","public XBeeAddress queryRemoteDestination(XBeeAddress destination,int attempts) throws IOException {
  final XBeeAddress[] result=new XBeeAddress[1];
  int status;
  do {
    status=queryRemoteDestination(destination,new XBeeTerminatingDestinationVisitor(){
      @Override public boolean isTerminated(){
        return result[0] != null;
      }
      @Override public void visitNodeDestination(      XBeeAddress node,      XBeeAddress nodeDestination){
        result[0]=nodeDestination;
      }
    }
);
  }
 while (result[0] == null && --attempts > 0);
  if (status != XBeeAtResponseFrame.STATUS_OK)   throw new XBeeException(XBeeUtil.formatStatus(status));
  return result[0];
}",0.9985358711566618
7258,"public void split(){
  leaf=false;
  physEnable();
  if (type != Block.WATER && type != Block.EMPTY) {
    world.remove(body);
    physDisable();
  }
  for (int i=0; i < 4; i++) {
    children[i]=new Node(level + 1,tree,world);
    children[i].parent=this;
    children[i].type=type;
  }
  children[0].physrect.setLocation(physrect.getX(),physrect.getY());
  children[1].physrect.setLocation(physrect.getX() + physrect.getWidth() * 0.5f,physrect.getY());
  children[2].physrect.setLocation(physrect.getX(),physrect.getY() + physrect.getHeight() * 0.5f);
  children[3].physrect.setLocation(physrect.getX() + physrect.getWidth() * 0.5f,physrect.getY() + physrect.getHeight() * 0.5f);
  children[0].rect.setLocation(rect.getX(),rect.getY());
  children[1].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].rect.setLocation(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  for (  Node child : children) {
  }
  for (int i=0; i < 4; i++) {
    if (children[i].type == Block.EMPTY || children[i].type == Block.WATER) {
      physDisable();
    }
 else {
      physEnable();
    }
  }
}","public void split(){
  leaf=false;
  physEnable();
  if (type != Block.WATER && type != Block.ACID && type != Block.EMPTY) {
    world.remove(body);
    physDisable();
  }
  for (int i=0; i < 4; i++) {
    children[i]=new Node(level + 1,tree,world);
    children[i].parent=this;
    children[i].type=type;
  }
  children[0].physrect.setLocation(physrect.getX(),physrect.getY());
  children[1].physrect.setLocation(physrect.getX() + physrect.getWidth() * 0.5f,physrect.getY());
  children[2].physrect.setLocation(physrect.getX(),physrect.getY() + physrect.getHeight() * 0.5f);
  children[3].physrect.setLocation(physrect.getX() + physrect.getWidth() * 0.5f,physrect.getY() + physrect.getHeight() * 0.5f);
  children[0].rect.setLocation(rect.getX(),rect.getY());
  children[1].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].rect.setLocation(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  for (  Node child : children) {
  }
  for (int i=0; i < 4; i++) {
    if (children[i].type == Block.EMPTY || children[i].type == Block.WATER || children[i].type == Block.ACID) {
      physDisable();
    }
 else {
      physEnable();
    }
  }
}",0.977635782747604
7259,"public void update(int delta){
  if (enabled) {
    if (musicPlaying == null) {
      musicDelay-=delta;
      if (musicDelay <= 0) {
        musicPlaying=music.get((int)(Math.random() * music.size()));
        musicPlaying.playAsMusic(1.0f,1.0f,false);
        soundStore.setSoundVolume(0.75f);
      }
    }
 else     if (!soundStore.isMusicPlaying()) {
      musicPlaying.stop();
      musicDelay=(int)(Math.random() * 90000) + 30000;
      musicPlaying=null;
      soundStore.setSoundVolume(1.0f);
    }
    if (ambientMusic == null) {
      ambientMusicDelay-=delta;
      if (ambientMusicDelay <= 0) {
        ambientMusicPlaying=ambientMusic.get((int)(Math.random() * ambientMusic.size()));
        ambientMusicPlaying.playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientMusicPlaying.isPlaying()) {
      ambientMusicPlaying.stop();
      ambientMusicDelay=(int)(Math.random() * 6000) + 1000;
      ambientMusicPlaying=null;
    }
    if (ambientNoisePlaying[0] == null) {
      ambientNoiseDelay[0]-=delta;
      if (ambientNoiseDelay[0] <= 0) {
        ambientNoisePlaying[0]=ambientNoise.get((int)(Math.random() * ambientNoise.size()));
        ambientNoisePlaying[0].playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientNoisePlaying[0].isPlaying()) {
      ambientNoisePlaying[0].stop();
      ambientNoiseDelay[0]=(int)(Math.random() * 16000) + 1000;
      ambientNoisePlaying[0]=null;
    }
    if (ambientNoisePlaying[1] == null) {
      ambientNoiseDelay[1]-=delta;
      if (ambientNoiseDelay[1] <= 0) {
        ambientNoisePlaying[1]=ambientNoise.get((int)(Math.random() * ambientNoise.size()));
        ambientNoisePlaying[1].playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientNoisePlaying[1].isPlaying()) {
      ambientNoisePlaying[1].stop();
      ambientNoiseDelay[1]=(int)(Math.random() * 16000) + 1000;
      ambientNoisePlaying[1]=null;
    }
    soundStore.poll(delta);
  }
}","public void update(int delta){
  if (enabled) {
    if (musicPlaying == null) {
      musicDelay-=delta;
      if (musicDelay <= 0) {
        musicPlaying=music.get((int)(Math.random() * music.size()));
        musicPlaying.playAsMusic(1.0f,1.0f,false);
        soundStore.setSoundVolume(0.75f);
      }
    }
 else     if (!soundStore.isMusicPlaying()) {
      musicPlaying.stop();
      musicDelay=(int)(Math.random() * 90000) + 30000;
      musicPlaying=null;
      soundStore.setSoundVolume(1.0f);
    }
    if (ambientMusicPlaying == null) {
      ambientMusicDelay-=delta;
      if (ambientMusicDelay <= 0) {
        ambientMusicPlaying=ambientMusic.get((int)(Math.random() * ambientMusic.size()));
        ambientMusicPlaying.playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientMusicPlaying.isPlaying()) {
      ambientMusicPlaying.stop();
      ambientMusicDelay=(int)(Math.random() * 6000) + 1000;
      ambientMusicPlaying=null;
    }
    if (ambientNoisePlaying[0] == null) {
      ambientNoiseDelay[0]-=delta;
      if (ambientNoiseDelay[0] <= 0) {
        ambientNoisePlaying[0]=ambientNoise.get((int)(Math.random() * ambientNoise.size()));
        ambientNoisePlaying[0].playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientNoisePlaying[0].isPlaying()) {
      ambientNoisePlaying[0].stop();
      ambientNoiseDelay[0]=(int)(Math.random() * 16000) + 1000;
      ambientNoisePlaying[0]=null;
    }
    if (ambientNoisePlaying[1] == null) {
      ambientNoiseDelay[1]-=delta;
      if (ambientNoiseDelay[1] <= 0) {
        ambientNoisePlaying[1]=ambientNoise.get((int)(Math.random() * ambientNoise.size()));
        ambientNoisePlaying[1].playAsSoundEffect(1.0f,(float)Math.random() * 0.2f + 1f,false);
      }
    }
 else     if (!ambientNoisePlaying[1].isPlaying()) {
      ambientNoisePlaying[1].stop();
      ambientNoiseDelay[1]=(int)(Math.random() * 16000) + 1000;
      ambientNoisePlaying[1]=null;
    }
    soundStore.poll(delta);
  }
}",0.9982914327556748
7260,"public void update(){
  for (int i=0; i < waternodes.size(); i++) {
    float x=waternodes.get(i).physrect.getX();
    float y=waternodes.get(i).physrect.getY();
    float width=waternodes.get(i).physrect.getWidth();
    float height=waternodes.get(i).physrect.getHeight();
    Node leaf=getLeaf(x,y + height);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x,y + height,Block.WATER);
        emptyCell(x,y);
      }
 else       if (getLeaf(x + width,y).type == Block.EMPTY) {
        fillCell(x + width,y,Block.WATER);
        emptyCell(x,y);
      }
 else       if (getLeaf(x - width,y).type == Block.EMPTY) {
        fillCell(x - width,y,Block.WATER);
        emptyCell(x,y);
      }
    }
  }
  for (int i=0; i < acidnodes.size(); i++) {
    float x=acidnodes.get(i).physrect.getX();
    float y=acidnodes.get(i).physrect.getY();
    float width=acidnodes.get(i).physrect.getWidth();
    float height=acidnodes.get(i).physrect.getHeight();
    Node leaf=getLeaf(x,y + height);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x,y + height,Block.ACID);
        emptyCell(x,y);
      }
 else       if (getLeaf(x + width,y).type == Block.EMPTY) {
        fillCell(x + width,y,Block.ACID);
        emptyCell(x,y);
      }
 else       if (getLeaf(x - width,y).type == Block.EMPTY) {
        fillCell(x - width,y,Block.ACID);
        emptyCell(x,y);
      }
    }
  }
}","public void update(){
  for (int i=0; i < waternodes.size(); i++) {
    float x=waternodes.get(i).physrect.getX();
    float y=waternodes.get(i).physrect.getY();
    float width=waternodes.get(i).physrect.getWidth();
    float height=waternodes.get(i).physrect.getHeight();
    Node leaf=getLeaf(x,y + height);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x,y + height,Block.WATER);
        emptyCell(x,y);
        continue;
      }
    }
    leaf=getLeaf(x + width,y);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x + width,y,Block.WATER);
        emptyCell(x,y);
        continue;
      }
    }
    leaf=getLeaf(x - width,y);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x - width,y,Block.WATER);
        emptyCell(x,y);
        continue;
      }
    }
  }
  for (int i=0; i < acidnodes.size(); i++) {
    float x=acidnodes.get(i).physrect.getX();
    float y=acidnodes.get(i).physrect.getY();
    float width=acidnodes.get(i).physrect.getWidth();
    float height=acidnodes.get(i).physrect.getHeight();
    Node leaf=getLeaf(x,y + height);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x,y + height,Block.ACID);
        emptyCell(x,y);
        continue;
      }
    }
    leaf=getLeaf(x + width,y);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x + width,y,Block.ACID);
        emptyCell(x,y);
        continue;
      }
    }
    leaf=getLeaf(x - width,y);
    if (leaf != null) {
      if (leaf.type == Block.EMPTY) {
        fillCell(x - width,y,Block.ACID);
        emptyCell(x,y);
        continue;
      }
    }
  }
}",0.8770019218449712
7261,"public void update(GameContainer container,StateBasedGame game,int delta){
  if (Main.KEYDOWN[Input.KEY_Q] && !blockSelected) {
    inventory.prev();
    blockSelected=true;
  }
  if (Main.KEYDOWN[Input.KEY_E] && !blockSelected) {
    inventory.next();
    blockSelected=true;
  }
  if (!Main.KEYDOWN[Input.KEY_Q] && !Main.KEYDOWN[Input.KEY_E] && blockSelected) {
    blockSelected=false;
  }
  if (Main.KEYDOWN[Input.KEY_UP] || Main.KEYDOWN[Input.KEY_W] || Main.KEYDOWN[Input.KEY_SPACE]) {
    if (character.grounded) {
      character.applyForce(0,-Main.GU * 1600f);
    }
  }
  if (Main.KEYDOWN[Input.KEY_LEFT] || Main.KEYDOWN[Input.KEY_A]) {
    character.applyForce(-Main.GU * 200,0);
  }
  if (Main.KEYDOWN[Input.KEY_RIGHT] || Main.KEYDOWN[Input.KEY_D]) {
    character.applyForce(Main.GU * 200,0);
  }
  if (Main.MOUSEDOWN[0]) {
    Block out=inventory.peek();
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
    if (out != null && character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type == Block.EMPTY) {
      inventory.pop();
      character.gameworld.terrain.fillCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY(),out);
    }
  }
  if (Main.MOUSEDOWN[1]) {
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
switch (character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type) {
case ROCK:
case RUBBER:
case WATER:
      inventory.push(character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type);
case EARTH:
    character.gameworld.terrain.emptyCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY());
  break;
default :
break;
}
}
if (character.body.getPosition().getY() > Main.GU * 48 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
if (character.body.getPosition().getY() < Main.GU * 16 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 16));
}
if (character.body.getPosition().getX() > Main.GU * 100 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 100,character.gameworld.getViewportPosition().getY()));
}
if (character.body.getPosition().getX() < Main.GU * 16 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 16,character.gameworld.getViewportPosition().getY()));
}
if (character.grounded) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
}","public void update(GameContainer container,StateBasedGame game,int delta){
  if (Main.KEYDOWN[Input.KEY_Q] && !blockSelected) {
    inventory.prev();
    blockSelected=true;
  }
  if (Main.KEYDOWN[Input.KEY_E] && !blockSelected) {
    inventory.next();
    blockSelected=true;
  }
  if (!Main.KEYDOWN[Input.KEY_Q] && !Main.KEYDOWN[Input.KEY_E] && blockSelected) {
    blockSelected=false;
  }
  if (Main.KEYDOWN[Input.KEY_UP] || Main.KEYDOWN[Input.KEY_W] || Main.KEYDOWN[Input.KEY_SPACE]) {
    if (character.grounded) {
      character.applyForce(0,-Main.GU * 1600f);
    }
  }
  if (Main.KEYDOWN[Input.KEY_LEFT] || Main.KEYDOWN[Input.KEY_A]) {
    character.applyForce(-Main.GU * 200,0);
  }
  if (Main.KEYDOWN[Input.KEY_RIGHT] || Main.KEYDOWN[Input.KEY_D]) {
    character.applyForce(Main.GU * 200,0);
  }
  if (Main.MOUSEDOWN[0]) {
    Block out=inventory.peek();
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
    if (out != null && character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type == Block.EMPTY) {
      inventory.pop();
      character.gameworld.terrain.fillCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY(),out);
    }
  }
  if (Main.MOUSEDOWN[1]) {
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
switch (character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type) {
case ROCK:
case RUBBER:
case WATER:
      inventory.push(character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type);
case EARTH:
    character.gameworld.terrain.emptyCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY());
  break;
default :
break;
}
}
if (character.body.getPosition().getY() > Main.GU * 48 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
if (character.body.getPosition().getY() < Main.GU * 16 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 16));
}
if (character.body.getPosition().getX() > Main.GU * 100 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 100,character.gameworld.getViewportPosition().getY()));
}
if (character.body.getPosition().getX() < Main.GU * 16 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 16,character.gameworld.getViewportPosition().getY()));
}
if (character.grounded) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.viewportgoal.getX(),character.body.getPosition().getY() - Main.GU * 48));
}
}",0.9954626701498692
7262,"public void init(GameContainer container,StateBasedGame game) throws SlickException {
  gameworld=new GameWorld(""String_Node_Str"");
  player=new Player(gameworld,Main.GU,Main.GU,Main.GU * 5,Main.GU * 5,1);
  gameworld.add(player.getCharacter());
  gameworld.add(player.getBody());
  timer=0;
}","public void init(GameContainer container,StateBasedGame game) throws SlickException {
  gameworld=new GameWorld(""String_Node_Str"");
  player=new Player(gameworld,Main.GU,Main.GU,Main.GU * 3,Main.GU * 4,1);
  gameworld.add(player.getCharacter());
  gameworld.add(player.getBody());
  timer=0;
}",0.9931740614334472
7263,"public void update(GameContainer container,StateBasedGame game,int delta){
  timer+=delta;
  while (timer > 20) {
    this.game=game;
    if (Main.KEYDOWN[Input.KEY_ESCAPE]) {
      game.enterState(0);
    }
    player.update(container,game,1);
    gameworld.update(container,game,1);
    timer-=20;
  }
}","public void update(GameContainer container,StateBasedGame game,int delta){
  timer+=delta;
  while (timer > 20) {
    this.game=game;
    if (Main.KEYDOWN[Input.KEY_ESCAPE]) {
      game.enterState(0);
    }
    player.update(container,game,delta);
    gameworld.update(container,game,delta);
    timer-=20;
  }
}",0.9805825242718448
7264,"public void update(GameContainer container,StateBasedGame game,int delta){
  terrain.update();
  world.step();
  for (  GameEntity entity : entities) {
    entity.update(container,game,delta);
  }
  if (viewportgoal.getX() != viewport.getX() || viewportgoal.getY() != viewport.getY()) {
    viewport.setLocation(viewport.getX() - (viewport.getX() - viewportgoal.getX()) * 0.5f,viewport.getY() - (viewport.getY() - viewportgoal.getY()) * 0.5f);
  }
}","public void update(GameContainer container,StateBasedGame game,int delta){
  terrain.update();
  world.step();
  System.out.println(""String_Node_Str"" + terrain.getNumberOfNodes());
  System.out.println(""String_Node_Str"" + terrain.getNumberOfLeaves());
  System.out.println(""String_Node_Str"" + world.getBodies().size());
  for (  GameEntity entity : entities) {
    entity.update(container,game,delta);
  }
  if (viewportgoal.getX() != viewport.getX() || viewportgoal.getY() != viewport.getY()) {
    viewport.setLocation(viewport.getX() - (viewport.getX() - viewportgoal.getX()) * 0.5f,viewport.getY() - (viewport.getY() - viewportgoal.getY()) * 0.5f);
  }
}",0.8112014453477868
7265,"public GameWorld(String level) throws SlickException {
  world=new World(Main.GRAVITY,Main.ITERATIONS);
  bg=new Image(""String_Node_Str"");
  terrain=new QuadTree(0,0,1280 * Main.GU,8,world);
  load(level);
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  viewportgoal=new Vector2f(viewport.getX(),viewport.getY());
  viewportzoom=1;
  entities=new ArrayList<GameEntity>();
  music=new Music(""String_Node_Str"");
}","public GameWorld(String level) throws SlickException {
  world=new World(Main.GRAVITY,Main.ITERATIONS,new QuadSpaceStrategy(16,4));
  bg=new Image(""String_Node_Str"");
  terrain=new QuadTree(0,0,320 * Main.GU,6,world);
  load(level);
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  viewportgoal=new Vector2f(viewport.getX(),viewport.getY());
  viewportzoom=1;
  entities=new ArrayList<GameEntity>();
}",0.9151732377538828
7266,"public void load(String s){
  BufferedReader bufferedReader;
  try {
    bufferedReader=new BufferedReader(new FileReader(s));
    String level=bufferedReader.readLine();
    for (    String node : level.split(""String_Node_Str"")) {
      String[] n=node.split(""String_Node_Str"");
      terrain.fillCell(Float.parseFloat(n[0]),Float.parseFloat(n[1]),Block.valueOf(n[2]));
    }
    bufferedReader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void load(String s){
  BufferedReader bufferedReader;
  try {
    bufferedReader=new BufferedReader(new FileReader(s));
    String level=bufferedReader.readLine();
    for (    String node : level.split(""String_Node_Str"")) {
      String[] n=node.split(""String_Node_Str"");
      terrain.fillCell(Float.parseFloat(n[0]),Float.parseFloat(n[1]),Block.valueOf(n[3]),Integer.parseInt(n[2]));
    }
    bufferedReader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9758149316508938
7267,"public void leave(){
  music.stop();
}","public void leave(){
}",0.7333333333333333
7268,"public void reset(){
  for (  GameEntity e : entities) {
    e.reset();
  }
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  music.play();
  viewportzoom=1;
}","public void reset(){
  for (  GameEntity e : entities) {
    e.reset();
  }
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  viewportzoom=1;
}",0.9506172839506172
7269,"public Character(GameWorld gw,float _x,float _y,float _width,float _height,float _mass){
  super.init(gw,_x,_y,_width,_height,_mass);
  body.setCanRest(false);
  try {
    runningAnimation=new Animation(new SpriteSheet(""String_Node_Str"",50,50),0,0,4,0,true,50,true);
  }
 catch (  SlickException e) {
    e.printStackTrace();
  }
}","public Character(GameWorld gw,float _x,float _y,float _width,float _height,float _mass){
  super.init(gw,_x,_y,_width,_height,_mass);
  body.setCanRest(true);
  try {
    runningLeftAnimation=new Animation(new SpriteSheet(""String_Node_Str"",50,50),0,0,4,0,true,50,true);
    runningRightAnimation=new Animation(new SpriteSheet(""String_Node_Str"",50,50),0,0,4,0,true,50,true);
  }
 catch (  SlickException e) {
    e.printStackTrace();
  }
}",0.8504551365409623
7270,"public void render(Graphics g){
  g.pushTransform();
  g.translate(-gameworld.viewport.getX(),-gameworld.viewport.getY());
  runningAnimation.draw(boundingBox.getX(),boundingBox.getY());
  g.popTransform();
  super.render(g);
}","public void render(Graphics g){
  g.pushTransform();
  g.translate(-gameworld.viewport.getX(),-gameworld.viewport.getY());
  if (facingRight)   runningRightAnimation.draw(boundingBox.getX(),boundingBox.getY());
 else   runningLeftAnimation.draw(boundingBox.getX(),boundingBox.getY());
  g.popTransform();
  super.render(g);
}",0.7971014492753623
7271,"public void init(GameWorld gw,float _x,float _y,float _width,float _height,float _mass){
  body=new Body(new Box(_width,_height),_mass);
  body.setUserData(this);
  body.setRestitution(0);
  body.setFriction(Main.mu);
  body.setRotatable(false);
  body.setPosition(_x + _width * 0.5f,_y + _height * 0.5f);
  gameworld=gw;
  boundingBox=new Rectangle(_x,_y,_width,_height);
}","public void init(GameWorld gw,float _x,float _y,float _width,float _height,float _mass){
  body=new Body(new Box(_width,_height),_mass);
  body.setUserData(this);
  body.setRestitution(0);
  body.setFriction(Main.mu);
  body.setMaxVelocity(40 * Main.GU,80 * Main.GU);
  body.setRotatable(false);
  body.setPosition(_x + _width * 0.5f,_y + _height * 0.5f);
  gameworld=gw;
  boundingBox=new Rectangle(_x,_y,_width,_height);
}",0.93734335839599
7272,"public void update(GameContainer container,StateBasedGame game,int delta){
  boundingBox.setLocation(body.getPosition().getX() - boundingBox.getWidth() * 0.5f,body.getPosition().getY() - boundingBox.getHeight() * 0.5f);
}","public void update(GameContainer container,StateBasedGame game,int delta){
  grounded=onGroundImpl(body);
  if (grounded && body.getVelocity().getY() > 0) {
    body.adjustVelocity(new net.phys2d.math.Vector2f(0,-body.getVelocity().getY()));
  }
  if (grounded && !moving) {
    body.adjustVelocity(new net.phys2d.math.Vector2f(-body.getVelocity().getY() * 0.1f,0));
  }
  boundingBox.setLocation(body.getPosition().getX() - boundingBox.getWidth() * 0.5f,body.getPosition().getY() - boundingBox.getHeight() * 0.5f);
  moving=false;
}",0.5862068965517241
7273,"public void update(GameContainer container,StateBasedGame game,int delta){
  if (Main.KEYDOWN[Input.KEY_Q] && !blockSelected) {
    inventory.prev();
    blockSelected=true;
  }
  if (Main.KEYDOWN[Input.KEY_E] && !blockSelected) {
    inventory.next();
    blockSelected=true;
  }
  if (!Main.KEYDOWN[Input.KEY_Q] && !Main.KEYDOWN[Input.KEY_E] && blockSelected) {
    blockSelected=false;
  }
  if (Main.KEYDOWN[Input.KEY_UP] || Main.KEYDOWN[Input.KEY_W] || Main.KEYDOWN[Input.KEY_SPACE]) {
    if (character.grounded) {
      character.body.addForce((new Vector2f(0,-Main.GU * 8f)));
    }
  }
  if (Main.KEYDOWN[Input.KEY_LEFT] || Main.KEYDOWN[Input.KEY_A]) {
    character.body.addForce((new Vector2f(-Main.GU * 200,0)));
  }
  if (Main.KEYDOWN[Input.KEY_RIGHT] || Main.KEYDOWN[Input.KEY_D]) {
    character.body.addForce((new Vector2f(Main.GU * 200,0)));
  }
  if (Main.KEYDOWN[Input.KEY_DOWN] || Main.KEYDOWN[Input.KEY_S]) {
    character.body.addForce((new Vector2f(0,Main.GU * 1000)));
  }
  if (Main.KEYDOWN[Input.KEY_UP] || Main.KEYDOWN[Input.KEY_W]) {
    character.body.addForce((new Vector2f(0,-Main.GU * 1000)));
  }
  if (Main.MOUSEDOWN[0]) {
    Block out=inventory.peek();
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
    if (out != null && character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type == Block.EMPTY) {
      inventory.pop();
      character.gameworld.terrain.fillCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY(),out);
    }
  }
  if (Main.MOUSEDOWN[1]) {
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
switch (character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type) {
case ROCK:
case RUBBER:
case WATER:
      inventory.push(character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type);
case EARTH:
    character.gameworld.terrain.emptyCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY());
  break;
default :
break;
}
}
if (character.body.getPosition().getY() > Main.GU * 48 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
if (character.body.getPosition().getY() < Main.GU * 16 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 16));
}
if (character.body.getPosition().getX() > Main.GU * 100 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 100,character.gameworld.getViewportPosition().getY()));
}
if (character.body.getPosition().getX() < Main.GU * 16 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 16,character.gameworld.getViewportPosition().getY()));
}
if (character.grounded) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
}","public void update(GameContainer container,StateBasedGame game,int delta){
  if (Main.KEYDOWN[Input.KEY_Q] && !blockSelected) {
    inventory.prev();
    blockSelected=true;
  }
  if (Main.KEYDOWN[Input.KEY_E] && !blockSelected) {
    inventory.next();
    blockSelected=true;
  }
  if (!Main.KEYDOWN[Input.KEY_Q] && !Main.KEYDOWN[Input.KEY_E] && blockSelected) {
    blockSelected=false;
  }
  if (Main.KEYDOWN[Input.KEY_UP] || Main.KEYDOWN[Input.KEY_W] || Main.KEYDOWN[Input.KEY_SPACE]) {
    if (character.grounded) {
      character.applyForce(0,-Main.GU * 1600f);
    }
  }
  if (Main.KEYDOWN[Input.KEY_LEFT] || Main.KEYDOWN[Input.KEY_A]) {
    character.applyForce(-Main.GU * 200,0);
  }
  if (Main.KEYDOWN[Input.KEY_RIGHT] || Main.KEYDOWN[Input.KEY_D]) {
    character.applyForce(Main.GU * 200,0);
  }
  if (Main.MOUSEDOWN[0]) {
    Block out=inventory.peek();
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
    if (out != null && character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type == Block.EMPTY) {
      inventory.pop();
      character.gameworld.terrain.fillCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY(),out);
    }
  }
  if (Main.MOUSEDOWN[1]) {
    fireVector.set(Main.MOUSEX + character.gameworld.viewport.getX() - character.boundingBox.getCenterX(),Main.MOUSEY + character.gameworld.viewport.getY() - character.boundingBox.getCenterY());
    fireVector.normalise();
    fireVector.scale(Main.GU * 6);
switch (character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type) {
case ROCK:
case RUBBER:
case WATER:
      inventory.push(character.gameworld.terrain.getLeaf(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY()).type);
case EARTH:
    character.gameworld.terrain.emptyCell(character.boundingBox.getCenterX() + fireVector.getX(),character.boundingBox.getCenterY() + fireVector.getY());
  break;
default :
break;
}
}
if (character.body.getPosition().getY() > Main.GU * 48 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
if (character.body.getPosition().getY() < Main.GU * 16 + character.gameworld.getViewportPosition().getY()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 16));
}
if (character.body.getPosition().getX() > Main.GU * 100 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 100,character.gameworld.getViewportPosition().getY()));
}
if (character.body.getPosition().getX() < Main.GU * 16 + character.gameworld.getViewportPosition().getX()) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.body.getPosition().getX() - Main.GU * 16,character.gameworld.getViewportPosition().getY()));
}
if (character.grounded) {
character.gameworld.setViewportPositionGoal(new Vector2f(character.gameworld.getViewportPosition().getX(),character.body.getPosition().getY() - Main.GU * 48));
}
}",0.9533079047744312
7274,"public void split(){
  leaf=false;
  body.setEnabled(false);
  for (int i=0; i < 4; i++) {
    children[i]=new Node(level + 1,tree,world);
    children[i].parent=this;
    children[i].type=type;
    if (children[i].type == Block.EMPTY || children[i].type == Block.WATER)     children[i].body.setEnabled(false);
 else     children[i].body.setEnabled(true);
  }
  children[0].body.setPosition(rect.getX(),rect.getY());
  children[1].body.setPosition(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].body.setPosition(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].body.setPosition(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  children[0].rect.setLocation(rect.getX(),rect.getY());
  children[1].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].rect.setLocation(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  for (  Node child : children) {
    child.body.adjustPosition(new Vector2f(child.rect.getWidth() * 0.5f,child.rect.getHeight() * 0.5f));
  }
}","public void split(){
  leaf=false;
  body.setEnabled(false);
  world.remove(body);
  for (int i=0; i < 4; i++) {
    children[i]=new Node(level + 1,tree,world);
    children[i].parent=this;
    children[i].type=type;
    if (children[i].type == Block.EMPTY || children[i].type == Block.WATER)     children[i].body.setEnabled(false);
 else     children[i].body.setEnabled(true);
    if (children[i].type == Block.RUBBER)     children[i].body.setRestitution(1);
 else     children[i].body.setRestitution(0);
  }
  children[0].body.setPosition(rect.getX(),rect.getY());
  children[1].body.setPosition(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].body.setPosition(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].body.setPosition(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  children[0].rect.setLocation(rect.getX(),rect.getY());
  children[1].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY());
  children[2].rect.setLocation(rect.getX(),rect.getY() + rect.getHeight() * 0.5f);
  children[3].rect.setLocation(rect.getX() + rect.getWidth() * 0.5f,rect.getY() + rect.getHeight() * 0.5f);
  for (  Node child : children) {
    child.body.adjustPosition(new Vector2f(child.rect.getWidth() * 0.5f,child.rect.getHeight() * 0.5f));
  }
}",0.9394673123486684
7275,"public String toString(){
  String returnstring=""String_Node_Str"";
  if (leaf && type != Block.EMPTY) {
    returnstring=returnstring + ""String_Node_Str"" + body.getPosition().getX()+ ""String_Node_Str""+ body.getPosition().getY()+ ""String_Node_Str""+ type;
  }
  if (children[0] != null) {
    for (    Node c : children) {
      returnstring=returnstring + c.toString();
    }
  }
  return returnstring;
}","public String toString(){
  String returnstring=""String_Node_Str"";
  if (leaf && type != Block.EMPTY) {
    returnstring=returnstring + ""String_Node_Str"" + body.getPosition().getX()+ ""String_Node_Str""+ body.getPosition().getY()+ ""String_Node_Str""+ level+ ""String_Node_Str""+ type;
  }
  if (children[0] != null) {
    for (    Node c : children) {
      returnstring=returnstring + c.toString();
    }
  }
  return returnstring;
}",0.96875
7276,"public void reset(){
  for (  GameEntity e : entities) {
    e.reset();
  }
  player.reset();
  viewport=new Rectangle(0,0,128 * Main.GU,72 * Main.GU);
  viewportzoom=1;
}","public void reset(){
  for (  GameEntity e : entities) {
    e.reset();
  }
  player.reset();
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  viewportzoom=1;
}",0.9096209912536444
7277,"public GameWorld() throws SlickException {
  terrain=new QuadTree(0,0,1280 * Main.GU,8);
  viewport=new Rectangle(0,0,128 * Main.GU,72 * Main.GU);
  viewportgoal=new Vector2f(viewport.getX(),viewport.getY());
  viewportzoom=1;
  player=new Player(this);
  entities=new ArrayList<GameEntity>();
  entities.add(player.getCharacter());
}","public GameWorld() throws SlickException {
  terrain=new QuadTree(0,0,1280 * Main.GU,8);
  viewport=new Rectangle(0,0,Main.SCREEN_W,Main.SCREEN_H);
  viewportgoal=new Vector2f(viewport.getX(),viewport.getY());
  viewportzoom=1;
  player=new Player(this);
  entities=new ArrayList<GameEntity>();
  entities.add(player.getCharacter());
}",0.9506726457399104
7278,"public boolean collide(GameEntity ge){
  ge.grounded=false;
  Node[] nodes=new Node[5];
  ArrayList<Node> collnodes=new ArrayList<Node>();
  nodes[0]=getLeaf(ge.boundingBox.getX(),ge.boundingBox.getY());
  nodes[1]=getLeaf(ge.boundingBox.getX() + ge.boundingBox.getWidth(),ge.boundingBox.getY());
  nodes[2]=getLeaf(ge.boundingBox.getX(),ge.boundingBox.getY() + ge.boundingBox.getHeight());
  nodes[3]=getLeaf(ge.boundingBox.getX() + ge.boundingBox.getWidth(),ge.boundingBox.getY() + ge.boundingBox.getHeight());
  boolean collision=false;
  float points[]=ge.boundingBox.getPoints();
  forwards[0]=new Polygon();
  forwards[0].addPoint(points[0],points[1]);
  forwards[0].addPoint(points[2],points[3]);
  forwards[0].addPoint(points[2] + ge.velocity.getX(),points[3] + ge.velocity.getY());
  forwards[0].addPoint(points[0] + ge.velocity.getX(),points[1] + ge.velocity.getY());
  forwards[0].setClosed(true);
  forwards[1]=new Polygon();
  forwards[1].addPoint(points[2],points[3]);
  forwards[1].addPoint(points[4],points[5]);
  forwards[1].addPoint(points[4] + ge.velocity.getX(),points[5] + ge.velocity.getY());
  forwards[1].addPoint(points[2] + ge.velocity.getX(),points[3] + ge.velocity.getY());
  forwards[1].setClosed(true);
  forwards[2]=new Polygon();
  forwards[2].addPoint(points[4],points[5]);
  forwards[2].addPoint(points[6],points[7]);
  forwards[2].addPoint(points[6] + ge.velocity.getX(),points[7] + ge.velocity.getY());
  forwards[2].addPoint(points[4] + ge.velocity.getX(),points[5] + ge.velocity.getY());
  forwards[2].setClosed(true);
  forwards[3]=new Polygon();
  forwards[3].addPoint(points[6],points[7]);
  forwards[3].addPoint(points[0],points[1]);
  forwards[3].addPoint(points[6] + ge.velocity.getX(),points[7] + ge.velocity.getY());
  forwards[3].addPoint(points[0] + ge.velocity.getX(),points[1] + ge.velocity.getY());
  forwards[3].setClosed(true);
  for (  Polygon forward : forwards) {
    for (    Node n : nodes) {
      if (n != null && n.filled && (forward.contains(n.rect) || forward.intersects(n.rect) || n.rect.contains(forward)) && !collnodes.contains(n)) {
        collnodes.add(n);
      }
    }
  }
  Vector2f target=null;
  for (  Node n : collnodes) {
    if (Math.abs(n.rect.getCenterX() - ge.boundingBox.getCenterX()) >= Math.abs(n.rect.getCenterY() - ge.boundingBox.getCenterY())) {
      if (ge.velocity.getX() > 0 && ge.position.getX() != n.rect.getMaxX()) {
        target=new Vector2f(n.rect.getX() - ge.boundingBox.getWidth(),ge.position.getY());
      }
 else       if (ge.velocity.getX() < 0) {
        target=new Vector2f(n.rect.getMaxX(),ge.position.getY());
      }
      ge.velocity.set(0,ge.velocity.getY());
      System.out.println(""String_Node_Str"");
    }
 else {
      if (ge.velocity.getY() < 0) {
        target=new Vector2f(ge.position.getX(),n.rect.getMaxY());
        ge.velocity.add(new Vector2f(ge.velocity.getX(),Main.GRAVITY.getY()));
      }
 else       if (ge.velocity.getY() > 0 && ge.position.getY() != n.rect.getMaxY()) {
        target=new Vector2f(ge.position.getX(),n.rect.getY() - ge.boundingBox.getHeight());
        ge.grounded=true;
        ge.velocity.set(ge.velocity.getX(),0);
        System.out.println(""String_Node_Str"");
      }
    }
  }
  if (target != null) {
    ge.position.set(target);
    ge.boundingBox.setLocation(ge.position);
  }
  if (collnodes.size() > 0) {
    System.out.println(""String_Node_Str"");
    return true;
  }
  return false;
}","public boolean collide(GameEntity ge){
}",0.0229489386115892
7279,"public void render(Graphics g,Rectangle viewport){
  dummy=0;
  depth=0;
  g.pushTransform();
  g.translate(-viewport.getX(),-viewport.getY());
  g.setDrawMode(g.MODE_NORMAL);
  g.setColor(Color.black);
  g.fill(viewport);
  traverseTree(startNode,g,viewport);
  if (Main.DEBUG) {
    g.setColor(Color.red);
    for (    Line n : nodelines) {
      if (n != null)       g.draw(n);
    }
    for (    Line m : movelines) {
      if (m != null)       g.draw(m);
    }
    for (    Polygon p : forwards) {
      if (p != null)       g.draw(p);
    }
    g.setColor(Color.white);
  }
  g.popTransform();
}","public void render(Graphics g,Rectangle viewport){
  dummy=0;
  depth=0;
  g.pushTransform();
  g.translate(-viewport.getX(),-viewport.getY());
  g.setDrawMode(g.MODE_NORMAL);
  g.setColor(Color.black);
  g.fill(viewport);
  traverseTree(startNode,g,viewport);
  if (Main.DEBUG) {
    g.setColor(Color.red);
    g.draw(viewport);
    for (    Line n : nodelines) {
      if (n != null)       g.draw(n);
    }
    for (    Line m : movelines) {
      if (m != null)       g.draw(m);
    }
    for (    Polygon p : forwards) {
      if (p != null)       g.draw(p);
    }
    g.setColor(Color.white);
  }
  g.popTransform();
}",0.9820261437908496
7280,"/** 
 * Method to play the game of placing the queens
 */
public void play(){
  for (int j=0; j < cols; j++) {
    board[0][j]=1;
    playRecursive(1);
    board[0][j]=0;
  }
}","/** 
 * Method to place the queens on the board
 */
public void play(){
  for (int j=0; j < cols; j++) {
    board[0][j]=1;
    playRecursive(1);
    board[0][j]=0;
  }
}",0.9017341040462428
7281,"private void playRecursive(int queenNum){
  if (queenNum >= rows)   return;
  for (int j=0; j < cols; j++) {
    board[queenNum][j]=1;
    if (isBoardSafe()) {
      if (queenNum == rows - 1) {
        System.out.println();
        System.out.println(""String_Node_Str"" + ++numSolutions);
        printBoard();
      }
 else       playRecursive(queenNum + 1);
    }
    board[queenNum][j]=0;
  }
}","/** 
 * Method implementing recursion
 */
private void playRecursive(int queenNum){
  if (queenNum >= rows)   return;
  for (int j=0; j < cols; j++) {
    board[queenNum][j]=1;
    if (isBoardSafe()) {
      if (queenNum == rows - 1) {
        System.out.println();
        System.out.println(""String_Node_Str"" + ++numSolutions);
        printBoard();
      }
 else       playRecursive(queenNum + 1);
    }
    board[queenNum][j]=0;
  }
}",0.9496402877697842
7282,"/** 
 * Method to play the game of placing the queens
 */
public void play(){
  for (int i=0; i < rows; i++)   board[i][0]=1;
  placeQueen(0);
}","/** 
 * Method to play the game of placing the queens
 */
public void play(){
  for (int j=0; j < cols; j++) {
    board[0][j]=1;
    playRecursive(1);
    board[0][j]=0;
  }
}",0.81875
7283,"/** 
 * Display current state of the board
 */
public void printBoard(){
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      if (board[i][j] > 0)       System.out.print(""String_Node_Str"");
 else       System.out.print(""String_Node_Str"");
    }
    System.out.println();
  }
}","/** 
 * Display current state of the board
 */
public void printBoard(){
  System.out.println(""String_Node_Str"" + ++numSolutions);
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      if (board[i][j] > 0)       System.out.print(""String_Node_Str"");
 else       System.out.print(""String_Node_Str"");
    }
    System.out.println();
  }
}",0.911042944785276
7284,"public void findPaths(){
  int writePos=1;
  path[0]=matrix[0][0];
  findPathRec(writePos,1,0);
  findPathRec(writePos,0,1);
}","public void findPaths(){
  System.out.println(""String_Node_Str"");
  int writePos=1;
  path[0]=matrix[0][0];
  if (rows > 1)   findPathRec(writePos,1,0);
  if (cols > 1)   findPathRec(writePos,0,1);
}",0.7753846153846153
7285,"public synchronized void stop(){
  if (null == m_processStream || null == m_thread) {
    return;
  }
  Thread t=m_thread;
  m_thread=null;
  t.interrupt();
}","public synchronized void stop(){
  if (null == m_processStream || null == m_thread) {
    return;
  }
  try {
    byte[] cbuf=new byte[READ_BUFFER];
    while (m_in.available() != 0) {
      if (!readAndFlush(cbuf)) {
        break;
      }
      ;
    }
  }
 catch (  IOException e) {
  }
  Thread t=m_thread;
  m_thread=null;
  t.interrupt();
}",0.626984126984127
7286,"public void run(){
  byte[] cbuf=new byte[8192];
  while (Thread.currentThread() == m_thread) {
    try {
      if (m_in.available() == 0) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
        continue;
      }
      int bytesRead=m_in.read(cbuf,0,8192);
      if (bytesRead == -1) {
        break;
      }
      m_out.write(cbuf,0,bytesRead);
      m_out.flush();
    }
 catch (    IOException e) {
      if (Thread.currentThread() == m_thread) {
        e.printStackTrace();
      }
    }
  }
  try {
    if (m_in == m_processStream) {
      m_in.close();
    }
  }
 catch (  IOException e) {
  }
 finally {
    m_processStream=null;
  }
}","public void run(){
  byte[] cbuf=new byte[READ_BUFFER];
  while (Thread.currentThread() == m_thread) {
    try {
      if (m_in.available() == 0) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
        continue;
      }
      if (!readAndFlush(cbuf)) {
        break;
      }
    }
 catch (    IOException e) {
      if (Thread.currentThread() == m_thread) {
        e.printStackTrace();
      }
    }
  }
  try {
    if (m_in == m_processStream) {
      m_in.close();
    }
  }
 catch (  IOException e) {
  }
 finally {
    m_processStream=null;
  }
}",0.884996191926885
7287,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  mReadOnlySourcesCnt=0;
  mWritableSourcesCnt=0;
  mAllRestricted=true;
  mPrimaryPhoneUri=null;
  mWritableRawContactIds.clear();
  final Context context=this;
  final Sources sources=Sources.getInstance(context);
  if (mLookupUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      final boolean isRestricted=entValues.getAsInteger(RawContacts.IS_RESTRICTED) != 0;
      if (!isRestricted)       mAllRestricted=false;
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      ContactsSource contactsSource=sources.getInflatedSource(accountType,ContactsSource.LEVEL_SUMMARY);
      if (contactsSource != null && contactsSource.readOnly) {
        mReadOnlySourcesCnt+=1;
      }
 else {
        mWritableSourcesCnt+=1;
        mWritableRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final long dataId=entryValues.getAsLong(Data._ID);
        final String mimeType=entryValues.getAsString(Data.MIMETYPE);
        if (mimeType == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimeType,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final ViewEntry entry=ViewEntry.fromValues(context,mimeType,kind,rawContactId,dataId,entryValues);
        final boolean hasData=!TextUtils.isEmpty(entry.data);
        final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
        if (Phone.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          mNumPhoneNumbers++;
          entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(Constants.SCHEME_TEL,entry.data,null));
          entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_SMSTO,entry.data,null));
          if (isSuperPrimary)           mPrimaryPhoneUri=entry.uri;
          entry.isPrimary=isSuperPrimary;
          mPhoneEntries.add(entry);
          Integer type;
          try {
            type=entryValues.getAsInteger(Phone.TYPE);
          }
 catch (          NullPointerException e) {
            type=CommonDataKinds.Phone.TYPE_HOME;
          }
          if (type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
        }
 else         if (Email.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_MAILTO,entry.data,null));
          entry.isPrimary=isSuperPrimary;
          mEmailEntries.add(entry);
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            final String imMime=Im.CONTENT_ITEM_TYPE;
            final DataKind imKind=sources.getKindOrFallback(accountType,imMime,this,ContactsSource.LEVEL_MIMETYPES);
            final ViewEntry imEntry=ViewEntry.fromValues(context,imMime,imKind,rawContactId,dataId,entryValues);
            imEntry.intent=ContactsUtils.buildImIntent(entryValues);
            imEntry.applyStatus(status,false);
            mImEntries.add(imEntry);
          }
        }
 else         if (StructuredPostal.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.maxLines=4;
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          Intent i=startNavigation(entry.data);
          if (i != null) {
            entry.secondaryIntent=i;
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
          mPostalEntries.add(entry);
        }
 else         if (Im.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=ContactsUtils.buildImIntent(entryValues);
          if (TextUtils.isEmpty(entry.label)) {
            entry.label=getString(R.string.chat).toLowerCase();
          }
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            entry.applyStatus(status,false);
          }
          mImEntries.add(entry);
        }
 else         if (Organization.CONTENT_ITEM_TYPE.equals(mimeType) && (hasData || !TextUtils.isEmpty(entry.label))) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.ORGANIZATION && (!hasData || TextUtils.isEmpty(entry.label));
          if (!duplicatesTitle) {
            entry.uri=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=entry.data;
              entry.data=""String_Node_Str"";
            }
            mOrganizationEntries.add(entry);
          }
        }
 else         if (Nickname.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.NICKNAME;
          if (!duplicatesTitle) {
            entry.uri=null;
            mNicknameEntries.add(entry);
          }
        }
 else         if (Note.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=100;
          mOtherEntries.add(entry);
        }
 else         if (Website.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=10;
          try {
            WebAddress webAddress=new WebAddress(entry.data);
            entry.intent=new Intent(Intent.ACTION_VIEW,Uri.parse(webAddress.toString()));
          }
 catch (          ParseException e) {
            Log.e(TAG,""String_Node_Str"" + entry.data);
          }
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          final DataStatus status=mStatuses.get(entry.id);
          final boolean hasSocial=kind.actionBodySocial && status != null;
          if (hasSocial) {
            entry.applyStatus(status,true);
          }
          if (hasSocial || hasData) {
            mOtherEntries.add(entry);
          }
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  mReadOnlySourcesCnt=0;
  mWritableSourcesCnt=0;
  mAllRestricted=true;
  mPrimaryPhoneUri=null;
  mWritableRawContactIds.clear();
  final Context context=this;
  final Sources sources=Sources.getInstance(context);
  if (mLookupUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      final boolean isRestricted=entValues.getAsInteger(RawContacts.IS_RESTRICTED) != 0;
      if (!isRestricted)       mAllRestricted=false;
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      ContactsSource contactsSource=sources.getInflatedSource(accountType,ContactsSource.LEVEL_SUMMARY);
      if (contactsSource != null && contactsSource.readOnly) {
        mReadOnlySourcesCnt+=1;
      }
 else {
        mWritableSourcesCnt+=1;
        mWritableRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final long dataId=entryValues.getAsLong(Data._ID);
        final String mimeType=entryValues.getAsString(Data.MIMETYPE);
        if (mimeType == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimeType,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final ViewEntry entry=ViewEntry.fromValues(context,mimeType,kind,rawContactId,dataId,entryValues);
        final boolean hasData=!TextUtils.isEmpty(entry.data);
        final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
        if (Phone.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          mNumPhoneNumbers++;
          entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(Constants.SCHEME_TEL,entry.data,null));
          entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_SMSTO,entry.data,null));
          if (isSuperPrimary)           mPrimaryPhoneUri=entry.uri;
          entry.isPrimary=isSuperPrimary;
          mPhoneEntries.add(entry);
          Integer type=entryValues.getAsInteger(Phone.TYPE);
          if (type.intValue() == (CommonDataKinds.Phone.TYPE_MOBILE) || mShowSmsLinksForAllPhones) {
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
        }
 else         if (Email.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_MAILTO,entry.data,null));
          entry.isPrimary=isSuperPrimary;
          mEmailEntries.add(entry);
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            final String imMime=Im.CONTENT_ITEM_TYPE;
            final DataKind imKind=sources.getKindOrFallback(accountType,imMime,this,ContactsSource.LEVEL_MIMETYPES);
            final ViewEntry imEntry=ViewEntry.fromValues(context,imMime,imKind,rawContactId,dataId,entryValues);
            imEntry.intent=ContactsUtils.buildImIntent(entryValues);
            imEntry.applyStatus(status,false);
            mImEntries.add(imEntry);
          }
        }
 else         if (StructuredPostal.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.maxLines=4;
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          Intent i=startNavigation(entry.data);
          if (i != null) {
            entry.secondaryIntent=i;
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
          mPostalEntries.add(entry);
        }
 else         if (Im.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=ContactsUtils.buildImIntent(entryValues);
          if (TextUtils.isEmpty(entry.label)) {
            entry.label=getString(R.string.chat).toLowerCase();
          }
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            entry.applyStatus(status,false);
          }
          mImEntries.add(entry);
        }
 else         if (Organization.CONTENT_ITEM_TYPE.equals(mimeType) && (hasData || !TextUtils.isEmpty(entry.label))) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.ORGANIZATION && (!hasData || TextUtils.isEmpty(entry.label));
          if (!duplicatesTitle) {
            entry.uri=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=entry.data;
              entry.data=""String_Node_Str"";
            }
            mOrganizationEntries.add(entry);
          }
        }
 else         if (Nickname.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.NICKNAME;
          if (!duplicatesTitle) {
            entry.uri=null;
            mNicknameEntries.add(entry);
          }
        }
 else         if (Note.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=100;
          mOtherEntries.add(entry);
        }
 else         if (Website.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=10;
          try {
            WebAddress webAddress=new WebAddress(entry.data);
            entry.intent=new Intent(Intent.ACTION_VIEW,Uri.parse(webAddress.toString()));
          }
 catch (          ParseException e) {
            Log.e(TAG,""String_Node_Str"" + entry.data);
          }
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          final DataStatus status=mStatuses.get(entry.id);
          final boolean hasSocial=kind.actionBodySocial && status != null;
          if (hasSocial) {
            entry.applyStatus(status,true);
          }
          if (hasSocial || hasData) {
            mOtherEntries.add(entry);
          }
        }
      }
    }
  }
}",0.9861635220125786
7288,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  mReadOnlySourcesCnt=0;
  mWritableSourcesCnt=0;
  mAllRestricted=true;
  mPrimaryPhoneUri=null;
  mWritableRawContactIds.clear();
  final Context context=this;
  final Sources sources=Sources.getInstance(context);
  if (mLookupUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      final boolean isRestricted=entValues.getAsInteger(RawContacts.IS_RESTRICTED) != 0;
      if (!isRestricted)       mAllRestricted=false;
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      ContactsSource contactsSource=sources.getInflatedSource(accountType,ContactsSource.LEVEL_SUMMARY);
      if (contactsSource != null && contactsSource.readOnly) {
        mReadOnlySourcesCnt+=1;
      }
 else {
        mWritableSourcesCnt+=1;
        mWritableRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final long dataId=entryValues.getAsLong(Data._ID);
        final String mimeType=entryValues.getAsString(Data.MIMETYPE);
        if (mimeType == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimeType,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final ViewEntry entry=ViewEntry.fromValues(context,mimeType,kind,rawContactId,dataId,entryValues);
        final boolean hasData=!TextUtils.isEmpty(entry.data);
        final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
        if (Phone.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          mNumPhoneNumbers++;
          entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(Constants.SCHEME_TEL,entry.data,null));
          entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_SMSTO,entry.data,null));
          if (isSuperPrimary)           mPrimaryPhoneUri=entry.uri;
          entry.isPrimary=isSuperPrimary;
          mPhoneEntries.add(entry);
          final Integer type=entryValues.getAsInteger(Phone.TYPE);
          if (type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
        }
 else         if (Email.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_MAILTO,entry.data,null));
          entry.isPrimary=isSuperPrimary;
          mEmailEntries.add(entry);
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            final String imMime=Im.CONTENT_ITEM_TYPE;
            final DataKind imKind=sources.getKindOrFallback(accountType,imMime,this,ContactsSource.LEVEL_MIMETYPES);
            final ViewEntry imEntry=ViewEntry.fromValues(context,imMime,imKind,rawContactId,dataId,entryValues);
            imEntry.intent=ContactsUtils.buildImIntent(entryValues);
            imEntry.applyStatus(status,false);
            mImEntries.add(imEntry);
          }
        }
 else         if (StructuredPostal.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.maxLines=4;
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          Intent i=startNavigation(entry.data);
          if (i != null) {
            entry.secondaryIntent=i;
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
          mPostalEntries.add(entry);
        }
 else         if (Im.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=ContactsUtils.buildImIntent(entryValues);
          if (TextUtils.isEmpty(entry.label)) {
            entry.label=getString(R.string.chat).toLowerCase();
          }
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            entry.applyStatus(status,false);
          }
          mImEntries.add(entry);
        }
 else         if (Organization.CONTENT_ITEM_TYPE.equals(mimeType) && (hasData || !TextUtils.isEmpty(entry.label))) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.ORGANIZATION && (!hasData || TextUtils.isEmpty(entry.label));
          if (!duplicatesTitle) {
            entry.uri=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=entry.data;
              entry.data=""String_Node_Str"";
            }
            mOrganizationEntries.add(entry);
          }
        }
 else         if (Nickname.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.NICKNAME;
          if (!duplicatesTitle) {
            entry.uri=null;
            mNicknameEntries.add(entry);
          }
        }
 else         if (Note.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=100;
          mOtherEntries.add(entry);
        }
 else         if (Website.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=10;
          try {
            WebAddress webAddress=new WebAddress(entry.data);
            entry.intent=new Intent(Intent.ACTION_VIEW,Uri.parse(webAddress.toString()));
          }
 catch (          ParseException e) {
            Log.e(TAG,""String_Node_Str"" + entry.data);
          }
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          final DataStatus status=mStatuses.get(entry.id);
          final boolean hasSocial=kind.actionBodySocial && status != null;
          if (hasSocial) {
            entry.applyStatus(status,true);
          }
          if (hasSocial || hasData) {
            mOtherEntries.add(entry);
          }
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  mReadOnlySourcesCnt=0;
  mWritableSourcesCnt=0;
  mAllRestricted=true;
  mPrimaryPhoneUri=null;
  mWritableRawContactIds.clear();
  final Context context=this;
  final Sources sources=Sources.getInstance(context);
  if (mLookupUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      final boolean isRestricted=entValues.getAsInteger(RawContacts.IS_RESTRICTED) != 0;
      if (!isRestricted)       mAllRestricted=false;
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      ContactsSource contactsSource=sources.getInflatedSource(accountType,ContactsSource.LEVEL_SUMMARY);
      if (contactsSource != null && contactsSource.readOnly) {
        mReadOnlySourcesCnt+=1;
      }
 else {
        mWritableSourcesCnt+=1;
        mWritableRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final long dataId=entryValues.getAsLong(Data._ID);
        final String mimeType=entryValues.getAsString(Data.MIMETYPE);
        if (mimeType == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimeType,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final ViewEntry entry=ViewEntry.fromValues(context,mimeType,kind,rawContactId,dataId,entryValues);
        final boolean hasData=!TextUtils.isEmpty(entry.data);
        final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
        if (Phone.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          mNumPhoneNumbers++;
          entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(Constants.SCHEME_TEL,entry.data,null));
          entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_SMSTO,entry.data,null));
          if (isSuperPrimary)           mPrimaryPhoneUri=entry.uri;
          entry.isPrimary=isSuperPrimary;
          mPhoneEntries.add(entry);
          Integer type;
          try {
            type=entryValues.getAsInteger(Phone.TYPE);
          }
 catch (          NullPointerException e) {
            type=CommonDataKinds.Phone.TYPE_HOME;
          }
          if (type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
        }
 else         if (Email.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(Constants.SCHEME_MAILTO,entry.data,null));
          entry.isPrimary=isSuperPrimary;
          mEmailEntries.add(entry);
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            final String imMime=Im.CONTENT_ITEM_TYPE;
            final DataKind imKind=sources.getKindOrFallback(accountType,imMime,this,ContactsSource.LEVEL_MIMETYPES);
            final ViewEntry imEntry=ViewEntry.fromValues(context,imMime,imKind,rawContactId,dataId,entryValues);
            imEntry.intent=ContactsUtils.buildImIntent(entryValues);
            imEntry.applyStatus(status,false);
            mImEntries.add(imEntry);
          }
        }
 else         if (StructuredPostal.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.maxLines=4;
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          Intent i=startNavigation(entry.data);
          if (i != null) {
            entry.secondaryIntent=i;
            if (kind.iconAltRes > 0) {
              entry.secondaryActionIcon=kind.iconAltRes;
            }
          }
          mPostalEntries.add(entry);
        }
 else         if (Im.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.intent=ContactsUtils.buildImIntent(entryValues);
          if (TextUtils.isEmpty(entry.label)) {
            entry.label=getString(R.string.chat).toLowerCase();
          }
          final DataStatus status=mStatuses.get(entry.id);
          if (status != null) {
            entry.applyStatus(status,false);
          }
          mImEntries.add(entry);
        }
 else         if (Organization.CONTENT_ITEM_TYPE.equals(mimeType) && (hasData || !TextUtils.isEmpty(entry.label))) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.ORGANIZATION && (!hasData || TextUtils.isEmpty(entry.label));
          if (!duplicatesTitle) {
            entry.uri=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=entry.data;
              entry.data=""String_Node_Str"";
            }
            mOrganizationEntries.add(entry);
          }
        }
 else         if (Nickname.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          final boolean isNameRawContact=(mNameRawContactId == rawContactId);
          final boolean duplicatesTitle=isNameRawContact && mDisplayNameSource == DisplayNameSources.NICKNAME;
          if (!duplicatesTitle) {
            entry.uri=null;
            mNicknameEntries.add(entry);
          }
        }
 else         if (Note.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=100;
          mOtherEntries.add(entry);
        }
 else         if (Website.CONTENT_ITEM_TYPE.equals(mimeType) && hasData) {
          entry.uri=null;
          entry.maxLines=10;
          try {
            WebAddress webAddress=new WebAddress(entry.data);
            entry.intent=new Intent(Intent.ACTION_VIEW,Uri.parse(webAddress.toString()));
          }
 catch (          ParseException e) {
            Log.e(TAG,""String_Node_Str"" + entry.data);
          }
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,entry.uri);
          final DataStatus status=mStatuses.get(entry.id);
          final boolean hasSocial=kind.actionBodySocial && status != null;
          if (hasSocial) {
            entry.applyStatus(status,true);
          }
          if (hasSocial || hasData) {
            mOtherEntries.add(entry);
          }
        }
      }
    }
  }
}",0.9883032277169084
7289,"public void onClick(DialogInterface dialog,int which){
  dialog.dismiss();
  final ValuesDelta structuredName=allNames.get(which);
  structuredName.put(Data.IS_PRIMARY,1);
  structuredName.put(Data.IS_SUPER_PRIMARY,1);
}","public void onClick(DialogInterface dialog,int which){
  dialog.dismiss();
  final Account account=accountAdapter.getItem(which);
  createContact(account);
}",0.6047745358090185
7290,"@Override protected AlertDialog.Builder doInBackground(final EditContactActivity target,Void... params){
  final Sources sources=Sources.getInstance(target);
  final Context dialogContext=new ContextThemeWrapper(target,android.R.style.Theme_Light);
  final LayoutInflater dialogInflater=(LayoutInflater)dialogContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final ArrayList<Account> writable=sources.getAccounts(true);
  if (writable.isEmpty()) {
    selectAccount(null);
    return null;
  }
  if (writable.size() == 1) {
    selectAccount(writable.get(0));
    return null;
  }
  final ArrayAdapter<Account> accountAdapter=new ArrayAdapter<Account>(target,android.R.layout.simple_list_item_2,writable){
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      if (convertView == null) {
        convertView=dialogInflater.inflate(android.R.layout.simple_list_item_2,parent,false);
      }
      final TextView text1=(TextView)convertView.findViewById(android.R.id.text1);
      final TextView text2=(TextView)convertView.findViewById(android.R.id.text2);
      final Account account=this.getItem(position);
      final ContactsSource source=sources.getInflatedSource(account.type,ContactsSource.LEVEL_SUMMARY);
      text1.setText(account.name);
      text2.setText(source.getDisplayLabel(target));
      return convertView;
    }
  }
;
  final DialogInterface.OnClickListener clickListener=new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      final Account account=accountAdapter.getItem(which);
      selectAccount(account);
      EditContactActivity target=mTarget.get();
      if (target != null) {
        target.bindEditors();
      }
    }
  }
;
  final DialogInterface.OnCancelListener cancelListener=new DialogInterface.OnCancelListener(){
    public void onCancel(    DialogInterface dialog){
      if (!target.hasValidState()) {
        target.finish();
      }
    }
  }
;
  final AlertDialog.Builder builder=new AlertDialog.Builder(target);
  builder.setTitle(R.string.dialog_new_contact_account);
  builder.setSingleChoiceItems(accountAdapter,0,clickListener);
  builder.setOnCancelListener(cancelListener);
  return builder;
}","@Override protected ArrayList<Account> doInBackground(final EditContactActivity target,Void... params){
  return Sources.getInstance(target).getAccounts(true);
}",0.1178878428162095
7291,"@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  if (result != null) {
    target.showAndManageDialog(result.create());
  }
 else {
    target.bindEditors();
  }
}","@Override protected void onPostExecute(final EditContactActivity target,ArrayList<Account> accounts){
  target.selectAccountAndCreateContact(accounts);
}",0.5494505494505495
7292,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=dialogInflater.inflate(android.R.layout.simple_list_item_1,parent,false);
  }
  final ValuesDelta structuredName=this.getItem(position);
  final String displayName=structuredName.getAsString(StructuredName.DISPLAY_NAME);
  ((TextView)convertView).setText(displayName);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=dialogInflater.inflate(android.R.layout.simple_list_item_2,parent,false);
  }
  final TextView text1=(TextView)convertView.findViewById(android.R.id.text1);
  final TextView text2=(TextView)convertView.findViewById(android.R.id.text2);
  final Account account=this.getItem(position);
  final ContactsSource source=sources.getInflatedSource(account.type,ContactsSource.LEVEL_SUMMARY);
  text1.setText(account.name);
  text2.setText(source.getDisplayLabel(EditContactActivity.this));
  return convertView;
}",0.3521531100478469
7293,"public void onCancel(DialogInterface dialog){
  if (!target.hasValidState()) {
    target.finish();
  }
}","public void onCancel(DialogInterface dialog){
  if (!hasValidState()) {
    finish();
  }
}",0.9285714285714286
7294,"/** 
 * Return   {@link ContactsSource} for the given account type.
 */
public ContactsSource getInflatedSource(String accountType,int inflateLevel){
  ContactsSource source=mSources.get(accountType);
  if (source == null)   source=mFallbackSource;
  if (source.isInflated(inflateLevel)) {
    return source;
  }
 else {
    source.ensureInflated(mApplicationContext,inflateLevel);
    return source;
  }
}","/** 
 * Return   {@link ContactsSource} for the given account type.
 */
public ContactsSource getInflatedSource(String accountType,int inflateLevel){
  ContactsSource source=mSources.get(accountType);
  if (source == null)   source=mFallbackSource;
  if (source.isInflated(inflateLevel)) {
    return source;
  }
 else {
    source.ensureInflated(mContext,inflateLevel);
    return source;
  }
}",0.9862671660424468
7295,"public void readFromParcel(Parcel source){
  final int size=source.readInt();
  for (int i=0; i < size; i++) {
    this.add(source.<EntityDelta>readParcelable(null));
  }
}","public void readFromParcel(Parcel source){
  final ClassLoader loader=getClass().getClassLoader();
  final int size=source.readInt();
  for (int i=0; i < size; i++) {
    this.add(source.<EntityDelta>readParcelable(loader));
  }
}",0.835820895522388
7296,"@Override public Object getItem(int pos){
  if (mSuggestionsCursorCount != 0 && pos <= mSuggestionsCursorCount) {
    mSuggestionsCursor.moveToPosition(getRealPosition(pos));
    return mSuggestionsCursor;
  }
 else {
    return super.getItem(getRealPosition(pos));
  }
}","@Override public Object getItem(int pos){
  if (mSuggestionsCursorCount != 0 && pos <= mSuggestionsCursorCount) {
    mSuggestionsCursor.moveToPosition(getRealPosition(pos));
    return mSuggestionsCursor;
  }
 else   if (isSearchAllContactsItemPosition(pos)) {
    return null;
  }
 else {
    return super.getItem(getRealPosition(pos));
  }
}",0.8813008130081301
7297,"@Override public long getItemId(int pos){
  if (mSuggestionsCursorCount != 0 && pos < mSuggestionsCursorCount + 2) {
    if (mSuggestionsCursor.moveToPosition(pos - 1)) {
      return mSuggestionsCursor.getLong(mRowIDColumn);
    }
 else {
      return 0;
    }
  }
  return super.getItemId(getRealPosition(pos));
}","@Override public long getItemId(int pos){
  if (mSuggestionsCursorCount != 0 && pos < mSuggestionsCursorCount + 2) {
    if (mSuggestionsCursor.moveToPosition(pos - 1)) {
      return mSuggestionsCursor.getLong(mRowIDColumn);
    }
 else {
      return 0;
    }
  }
 else   if (isSearchAllContactsItemPosition(pos)) {
    return 0;
  }
  return super.getItemId(getRealPosition(pos));
}",0.9
7298,"/** 
 * @param contactUri In most cases, this should be a lookup {@link Uri}, possibly generated through   {@link Contacts#getLookupUri(long,String)}.
 */
private void returnPickerResult(Cursor c,String name,Uri contactUri){
  final Intent intent=new Intent();
  if (mShortcutAction != null) {
    Intent shortcutIntent;
    if (Intent.ACTION_VIEW.equals(mShortcutAction)) {
      shortcutIntent=new Intent(ContactsContract.QuickContact.ACTION_QUICK_CONTACT);
      shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      shortcutIntent.setData(contactUri);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_MODE,ContactsContract.QuickContact.MODE_LARGE);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_EXCLUDE_MIMES,(String[])null);
      final Bitmap icon=framePhoto(loadContactPhoto(contactUri,null));
      if (icon != null) {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,scaleToAppIconSize(icon));
      }
 else {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(this,R.drawable.ic_launcher_shortcut_contact));
      }
    }
 else {
      String number=c.getString(PHONE_NUMBER_COLUMN_INDEX);
      int type=c.getInt(PHONE_TYPE_COLUMN_INDEX);
      String scheme;
      int resid;
      if (Intent.ACTION_CALL.equals(mShortcutAction)) {
        scheme=Constants.SCHEME_TEL;
        resid=R.drawable.badge_action_call;
      }
 else {
        scheme=Constants.SCHEME_SMSTO;
        resid=R.drawable.badge_action_sms;
      }
      Uri phoneUri=Uri.fromParts(scheme,number,null);
      shortcutIntent=new Intent(mShortcutAction,phoneUri);
      intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,generatePhoneNumberIcon(contactUri,type,resid));
    }
    shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent);
  }
 else {
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent.setData(contactUri));
  }
  finish();
}","/** 
 * @param selectedUri In most cases, this should be a lookup {@link Uri}, possibly generated through   {@link Contacts#getLookupUri(long,String)}.
 */
private void returnPickerResult(Cursor c,String name,Uri selectedUri){
  final Intent intent=new Intent();
  if (mShortcutAction != null) {
    Intent shortcutIntent;
    if (Intent.ACTION_VIEW.equals(mShortcutAction)) {
      shortcutIntent=new Intent(ContactsContract.QuickContact.ACTION_QUICK_CONTACT);
      shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      shortcutIntent.setData(selectedUri);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_MODE,ContactsContract.QuickContact.MODE_LARGE);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_EXCLUDE_MIMES,(String[])null);
      final Bitmap icon=framePhoto(loadContactPhoto(selectedUri,null));
      if (icon != null) {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,scaleToAppIconSize(icon));
      }
 else {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(this,R.drawable.ic_launcher_shortcut_contact));
      }
    }
 else {
      String number=c.getString(PHONE_NUMBER_COLUMN_INDEX);
      int type=c.getInt(PHONE_TYPE_COLUMN_INDEX);
      String scheme;
      int resid;
      if (Intent.ACTION_CALL.equals(mShortcutAction)) {
        scheme=Constants.SCHEME_TEL;
        resid=R.drawable.badge_action_call;
      }
 else {
        scheme=Constants.SCHEME_SMSTO;
        resid=R.drawable.badge_action_sms;
      }
      Uri phoneUri=Uri.fromParts(scheme,number,null);
      shortcutIntent=new Intent(mShortcutAction,phoneUri);
      intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,generatePhoneNumberIcon(selectedUri,type,resid));
    }
    shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent);
  }
 else {
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent.setData(selectedUri));
  }
  finish();
}",0.9793008279668812
7299,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  hideSoftKeyboard();
  if (mSearchMode && mAdapter.isSearchAllContactsItemPosition(position)) {
    doSearch();
  }
 else   if (mMode == MODE_INSERT_OR_EDIT_CONTACT || mMode == MODE_QUERY_PICK_TO_EDIT) {
    Intent intent;
    if (position == 0 && !mSearchMode && mMode != MODE_QUERY_PICK_TO_EDIT) {
      intent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    }
 else {
      intent=new Intent(Intent.ACTION_EDIT,getSelectedUri(position));
    }
    intent.setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    Bundle extras=getIntent().getExtras();
    if (extras != null) {
      intent.putExtras(extras);
    }
    intent.putExtra(KEY_PICKER_MODE,(mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER);
    startActivity(intent);
    finish();
  }
 else   if ((mMode & MODE_MASK_CREATE_NEW) == MODE_MASK_CREATE_NEW && position == 0) {
    Intent newContact=new Intent(Intents.Insert.ACTION,Contacts.CONTENT_URI);
    startActivityForResult(newContact,SUBACTIVITY_NEW_CONTACT);
  }
 else   if (mMode == MODE_JOIN_CONTACT && id == JOIN_MODE_SHOW_ALL_CONTACTS_ID) {
    mJoinModeShowAllContacts=false;
    startQuery();
  }
 else   if (id > 0) {
    final Uri uri=getSelectedUri(position);
    if ((mMode & MODE_MASK_PICKER) == 0) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivityForResult(intent,SUBACTIVITY_VIEW_CONTACT);
    }
 else     if (mMode == MODE_JOIN_CONTACT) {
      returnPickerResult(null,null,uri);
    }
 else     if (mMode == MODE_QUERY_PICK_TO_VIEW) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivity(intent);
      finish();
    }
 else     if (mMode == MODE_PICK_PHONE || mMode == MODE_QUERY_PICK_PHONE) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      long contactId=c.getLong(PHONE_CONTACT_ID_COLUMN_INDEX);
      returnPickerResult(c,c.getString(PHONE_DISPLAY_NAME_COLUMN_INDEX),ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId));
    }
 else     if ((mMode & MODE_MASK_PICKER) != 0) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(getSummaryDisplayNameColumnIndex()),uri);
    }
 else     if (mMode == MODE_PICK_POSTAL || mMode == MODE_LEGACY_PICK_POSTAL || mMode == MODE_LEGACY_PICK_PHONE) {
      returnPickerResult(null,null,uri);
    }
  }
 else {
    signalError();
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  hideSoftKeyboard();
  if (mSearchMode && mAdapter.isSearchAllContactsItemPosition(position)) {
    doSearch();
  }
 else   if (mMode == MODE_INSERT_OR_EDIT_CONTACT || mMode == MODE_QUERY_PICK_TO_EDIT) {
    Intent intent;
    if (position == 0 && !mSearchMode && mMode != MODE_QUERY_PICK_TO_EDIT) {
      intent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    }
 else {
      intent=new Intent(Intent.ACTION_EDIT,getSelectedUri(position));
    }
    intent.setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    Bundle extras=getIntent().getExtras();
    if (extras != null) {
      intent.putExtras(extras);
    }
    intent.putExtra(KEY_PICKER_MODE,(mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER);
    startActivity(intent);
    finish();
  }
 else   if ((mMode & MODE_MASK_CREATE_NEW) == MODE_MASK_CREATE_NEW && position == 0) {
    Intent newContact=new Intent(Intents.Insert.ACTION,Contacts.CONTENT_URI);
    startActivityForResult(newContact,SUBACTIVITY_NEW_CONTACT);
  }
 else   if (mMode == MODE_JOIN_CONTACT && id == JOIN_MODE_SHOW_ALL_CONTACTS_ID) {
    mJoinModeShowAllContacts=false;
    startQuery();
  }
 else   if (id > 0) {
    final Uri uri=getSelectedUri(position);
    if ((mMode & MODE_MASK_PICKER) == 0) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivityForResult(intent,SUBACTIVITY_VIEW_CONTACT);
    }
 else     if (mMode == MODE_JOIN_CONTACT) {
      returnPickerResult(null,null,uri);
    }
 else     if (mMode == MODE_QUERY_PICK_TO_VIEW) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivity(intent);
      finish();
    }
 else     if (mMode == MODE_PICK_PHONE || mMode == MODE_QUERY_PICK_PHONE) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(PHONE_DISPLAY_NAME_COLUMN_INDEX),uri);
    }
 else     if ((mMode & MODE_MASK_PICKER) != 0) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(getSummaryDisplayNameColumnIndex()),uri);
    }
 else     if (mMode == MODE_PICK_POSTAL || mMode == MODE_LEGACY_PICK_POSTAL || mMode == MODE_LEGACY_PICK_PHONE) {
      returnPickerResult(null,null,uri);
    }
  }
 else {
    signalError();
  }
}",0.8985999151463725
7300,"private Bitmap loadContactPhoto(Uri lookupUri,BitmapFactory.Options options){
  Cursor cursor=null;
  Bitmap bm=null;
  try {
    Uri contactUri=Contacts.lookupContact(getContentResolver(),lookupUri);
    Uri photoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.CONTENT_DIRECTORY);
    cursor=getContentResolver().query(photoUri,new String[]{Photo.PHOTO},null,null,null);
    if (cursor != null && cursor.moveToFirst()) {
      bm=ContactsUtils.loadContactPhoto(cursor,0,options);
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (bm == null) {
    final int[] fallbacks={R.drawable.ic_contact_picture,R.drawable.ic_contact_picture_2,R.drawable.ic_contact_picture_3};
    bm=BitmapFactory.decodeResource(getResources(),fallbacks[new Random().nextInt(fallbacks.length)]);
  }
  return bm;
}","private Bitmap loadContactPhoto(Uri selectedUri,BitmapFactory.Options options){
  Uri contactUri=null;
  if (Contacts.CONTENT_ITEM_TYPE.equals(getContentResolver().getType(selectedUri))) {
    contactUri=Contacts.lookupContact(getContentResolver(),selectedUri);
  }
 else {
    Cursor cursor=getContentResolver().query(selectedUri,new String[]{Data.CONTACT_ID},null,null,null);
    try {
      if (cursor != null && cursor.moveToFirst()) {
        final long contactId=cursor.getLong(0);
        contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId);
      }
    }
  finally {
      if (cursor != null)       cursor.close();
    }
  }
  Cursor cursor=null;
  Bitmap bm=null;
  try {
    Uri photoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.CONTENT_DIRECTORY);
    cursor=getContentResolver().query(photoUri,new String[]{Photo.PHOTO},null,null,null);
    if (cursor != null && cursor.moveToFirst()) {
      bm=ContactsUtils.loadContactPhoto(cursor,0,options);
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (bm == null) {
    final int[] fallbacks={R.drawable.ic_contact_picture,R.drawable.ic_contact_picture_2,R.drawable.ic_contact_picture_3};
    bm=BitmapFactory.decodeResource(getResources(),fallbacks[new Random().nextInt(fallbacks.length)]);
  }
  return bm;
}",0.6703806870937791
7301,"/** 
 * @param contactUri In most cases, this should be a lookup {@link Uri}, possibly generated through   {@link Contacts#getLookupUri(long,String)}.
 */
private void returnPickerResult(Cursor c,String name,Uri contactUri){
  final Intent intent=new Intent();
  if (mShortcutAction != null) {
    Intent shortcutIntent;
    if (Intent.ACTION_VIEW.equals(mShortcutAction)) {
      shortcutIntent=new Intent(ContactsContract.QuickContact.ACTION_QUICK_CONTACT);
      shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      shortcutIntent.setData(contactUri);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_MODE,ContactsContract.QuickContact.MODE_LARGE);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_EXCLUDE_MIMES,(String[])null);
      final Bitmap icon=framePhoto(loadContactPhoto(contactUri,null));
      if (icon != null) {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,scaleToAppIconSize(icon));
      }
 else {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(this,R.drawable.ic_launcher_shortcut_contact));
      }
    }
 else {
      String number=c.getString(PHONE_NUMBER_COLUMN_INDEX);
      int type=c.getInt(PHONE_TYPE_COLUMN_INDEX);
      String scheme;
      int resid;
      if (Intent.ACTION_CALL.equals(mShortcutAction)) {
        scheme=Constants.SCHEME_TEL;
        resid=R.drawable.badge_action_call;
      }
 else {
        scheme=Constants.SCHEME_SMSTO;
        resid=R.drawable.badge_action_sms;
      }
      Uri phoneUri=Uri.fromParts(scheme,number,null);
      shortcutIntent=new Intent(mShortcutAction,phoneUri);
      intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,generatePhoneNumberIcon(contactUri,type,resid));
    }
    shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent);
  }
 else {
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent.setData(contactUri));
  }
  finish();
}","/** 
 * @param selectedUri In most cases, this should be a lookup {@link Uri}, possibly generated through   {@link Contacts#getLookupUri(long,String)}.
 */
private void returnPickerResult(Cursor c,String name,Uri selectedUri){
  final Intent intent=new Intent();
  if (mShortcutAction != null) {
    Intent shortcutIntent;
    if (Intent.ACTION_VIEW.equals(mShortcutAction)) {
      shortcutIntent=new Intent(ContactsContract.QuickContact.ACTION_QUICK_CONTACT);
      shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      shortcutIntent.setData(selectedUri);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_MODE,ContactsContract.QuickContact.MODE_LARGE);
      shortcutIntent.putExtra(ContactsContract.QuickContact.EXTRA_EXCLUDE_MIMES,(String[])null);
      final Bitmap icon=framePhoto(loadContactPhoto(selectedUri,null));
      if (icon != null) {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,scaleToAppIconSize(icon));
      }
 else {
        intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(this,R.drawable.ic_launcher_shortcut_contact));
      }
    }
 else {
      String number=c.getString(PHONE_NUMBER_COLUMN_INDEX);
      int type=c.getInt(PHONE_TYPE_COLUMN_INDEX);
      String scheme;
      int resid;
      if (Intent.ACTION_CALL.equals(mShortcutAction)) {
        scheme=Constants.SCHEME_TEL;
        resid=R.drawable.badge_action_call;
      }
 else {
        scheme=Constants.SCHEME_SMSTO;
        resid=R.drawable.badge_action_sms;
      }
      Uri phoneUri=Uri.fromParts(scheme,number,null);
      shortcutIntent=new Intent(mShortcutAction,phoneUri);
      intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,generatePhoneNumberIcon(selectedUri,type,resid));
    }
    shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent);
  }
 else {
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
    setResult(RESULT_OK,intent.setData(selectedUri));
  }
  finish();
}",0.9793008279668812
7302,"@Override protected void onListItemClick(ListView l,View v,int position,long id){
  hideSoftKeyboard();
  if (mSearchMode && mAdapter.isSearchAllContactsItemPosition(position)) {
    doSearch();
  }
 else   if (mMode == MODE_INSERT_OR_EDIT_CONTACT || mMode == MODE_QUERY_PICK_TO_EDIT) {
    Intent intent;
    if (position == 0 && !mSearchMode && mMode != MODE_QUERY_PICK_TO_EDIT) {
      intent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    }
 else {
      intent=new Intent(Intent.ACTION_EDIT,getSelectedUri(position));
    }
    intent.setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    Bundle extras=getIntent().getExtras();
    if (extras != null) {
      intent.putExtras(extras);
    }
    intent.putExtra(KEY_PICKER_MODE,(mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER);
    startActivity(intent);
    finish();
  }
 else   if ((mMode & MODE_MASK_CREATE_NEW) == MODE_MASK_CREATE_NEW && position == 0) {
    Intent newContact=new Intent(Intents.Insert.ACTION,Contacts.CONTENT_URI);
    startActivityForResult(newContact,SUBACTIVITY_NEW_CONTACT);
  }
 else   if (mMode == MODE_JOIN_CONTACT && id == JOIN_MODE_SHOW_ALL_CONTACTS_ID) {
    mJoinModeShowAllContacts=false;
    startQuery();
  }
 else   if (id > 0) {
    final Uri uri=getSelectedUri(position);
    if ((mMode & MODE_MASK_PICKER) == 0) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivityForResult(intent,SUBACTIVITY_VIEW_CONTACT);
    }
 else     if (mMode == MODE_JOIN_CONTACT) {
      returnPickerResult(null,null,uri);
    }
 else     if (mMode == MODE_QUERY_PICK_TO_VIEW) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivity(intent);
      finish();
    }
 else     if (mMode == MODE_PICK_PHONE || mMode == MODE_QUERY_PICK_PHONE) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      long contactId=c.getLong(PHONE_CONTACT_ID_COLUMN_INDEX);
      returnPickerResult(c,c.getString(PHONE_DISPLAY_NAME_COLUMN_INDEX),ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId));
    }
 else     if ((mMode & MODE_MASK_PICKER) != 0) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(getSummaryDisplayNameColumnIndex()),uri);
    }
 else     if (mMode == MODE_PICK_POSTAL || mMode == MODE_LEGACY_PICK_POSTAL || mMode == MODE_LEGACY_PICK_PHONE) {
      returnPickerResult(null,null,uri);
    }
  }
 else {
    signalError();
  }
}","@Override protected void onListItemClick(ListView l,View v,int position,long id){
  hideSoftKeyboard();
  if (mSearchMode && mAdapter.isSearchAllContactsItemPosition(position)) {
    doSearch();
  }
 else   if (mMode == MODE_INSERT_OR_EDIT_CONTACT || mMode == MODE_QUERY_PICK_TO_EDIT) {
    Intent intent;
    if (position == 0 && !mSearchMode && mMode != MODE_QUERY_PICK_TO_EDIT) {
      intent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    }
 else {
      intent=new Intent(Intent.ACTION_EDIT,getSelectedUri(position));
    }
    intent.setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    Bundle extras=getIntent().getExtras();
    if (extras != null) {
      intent.putExtras(extras);
    }
    intent.putExtra(KEY_PICKER_MODE,(mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER);
    startActivity(intent);
    finish();
  }
 else   if ((mMode & MODE_MASK_CREATE_NEW) == MODE_MASK_CREATE_NEW && position == 0) {
    Intent newContact=new Intent(Intents.Insert.ACTION,Contacts.CONTENT_URI);
    startActivityForResult(newContact,SUBACTIVITY_NEW_CONTACT);
  }
 else   if (mMode == MODE_JOIN_CONTACT && id == JOIN_MODE_SHOW_ALL_CONTACTS_ID) {
    mJoinModeShowAllContacts=false;
    startQuery();
  }
 else   if (id > 0) {
    final Uri uri=getSelectedUri(position);
    if ((mMode & MODE_MASK_PICKER) == 0) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivityForResult(intent,SUBACTIVITY_VIEW_CONTACT);
    }
 else     if (mMode == MODE_JOIN_CONTACT) {
      returnPickerResult(null,null,uri);
    }
 else     if (mMode == MODE_QUERY_PICK_TO_VIEW) {
      final Intent intent=new Intent(Intent.ACTION_VIEW,uri);
      startActivity(intent);
      finish();
    }
 else     if (mMode == MODE_PICK_PHONE || mMode == MODE_QUERY_PICK_PHONE) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(PHONE_DISPLAY_NAME_COLUMN_INDEX),uri);
    }
 else     if ((mMode & MODE_MASK_PICKER) != 0) {
      Cursor c=(Cursor)mAdapter.getItem(position);
      returnPickerResult(c,c.getString(getSummaryDisplayNameColumnIndex()),uri);
    }
 else     if (mMode == MODE_PICK_POSTAL || mMode == MODE_LEGACY_PICK_POSTAL || mMode == MODE_LEGACY_PICK_PHONE) {
      returnPickerResult(null,null,uri);
    }
  }
 else {
    signalError();
  }
}",0.8985999151463725
7303,"private Bitmap loadContactPhoto(Uri lookupUri,BitmapFactory.Options options){
  Cursor cursor=null;
  Bitmap bm=null;
  try {
    Uri contactUri=Contacts.lookupContact(getContentResolver(),lookupUri);
    Uri photoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.CONTENT_DIRECTORY);
    cursor=getContentResolver().query(photoUri,new String[]{Photo.PHOTO},null,null,null);
    if (cursor != null && cursor.moveToFirst()) {
      bm=ContactsUtils.loadContactPhoto(cursor,0,options);
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (bm == null) {
    final int[] fallbacks={R.drawable.ic_contact_picture,R.drawable.ic_contact_picture_2,R.drawable.ic_contact_picture_3};
    bm=BitmapFactory.decodeResource(getResources(),fallbacks[new Random().nextInt(fallbacks.length)]);
  }
  return bm;
}","private Bitmap loadContactPhoto(Uri selectedUri,BitmapFactory.Options options){
  Uri contactUri=null;
  if (Contacts.CONTENT_ITEM_TYPE.equals(getContentResolver().getType(selectedUri))) {
    contactUri=Contacts.lookupContact(getContentResolver(),selectedUri);
  }
 else {
    Cursor cursor=getContentResolver().query(selectedUri,new String[]{Data.CONTACT_ID},null,null,null);
    try {
      if (cursor != null && cursor.moveToFirst()) {
        final long contactId=cursor.getLong(0);
        contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,contactId);
      }
    }
  finally {
      if (cursor != null)       cursor.close();
    }
  }
  Cursor cursor=null;
  Bitmap bm=null;
  try {
    Uri photoUri=Uri.withAppendedPath(contactUri,Contacts.Photo.CONTENT_DIRECTORY);
    cursor=getContentResolver().query(photoUri,new String[]{Photo.PHOTO},null,null,null);
    if (cursor != null && cursor.moveToFirst()) {
      bm=ContactsUtils.loadContactPhoto(cursor,0,options);
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  if (bm == null) {
    final int[] fallbacks={R.drawable.ic_contact_picture,R.drawable.ic_contact_picture_2,R.drawable.ic_contact_picture_3};
    bm=BitmapFactory.decodeResource(getResources(),fallbacks[new Random().nextInt(fallbacks.length)]);
  }
  return bm;
}",0.6703806870937791
7304,"private void sendFetchImageMessage(ImageView view){
  final PhotoInfo info=(PhotoInfo)view.getTag();
  if (info == null) {
    return;
  }
  final long photoId=info.photoId;
  if (photoId == 0) {
    return;
  }
  mImageFetcher=new ImageDbFetcher(photoId,view);
synchronized (ContactsListActivity.this) {
    if (sImageFetchThreadPool == null) {
      sImageFetchThreadPool=Executors.newFixedThreadPool(3);
    }
    sImageFetchThreadPool.execute(mImageFetcher);
  }
}","private void sendFetchImageMessage(ImageView view){
  final PhotoInfo info=(PhotoInfo)view.getTag();
  if (info == null) {
    return;
  }
  final long photoId=info.photoId;
  if (photoId == 0) {
    return;
  }
  mImageFetcher=new ImageDbFetcher(photoId,view);
synchronized (ContactsListActivity.this) {
    if (sImageFetchThreadPool == null) {
      sImageFetchThreadPool=Executors.newFixedThreadPool(1);
    }
    sImageFetchThreadPool.execute(mImageFetcher);
  }
}",0.997863247863248
7305,"private void sendFetchImageMessage(ImageView view){
  final PhotoInfo info=(PhotoInfo)view.getTag();
  if (info == null) {
    return;
  }
  final long photoId=info.photoId;
  if (photoId == 0) {
    return;
  }
  mImageFetcher=new ImageDbFetcher(photoId,view);
synchronized (ContactsListActivity.this) {
    if (sImageFetchThreadPool == null) {
      sImageFetchThreadPool=Executors.newFixedThreadPool(3);
    }
    sImageFetchThreadPool.execute(mImageFetcher);
  }
}","private void sendFetchImageMessage(ImageView view){
  final PhotoInfo info=(PhotoInfo)view.getTag();
  if (info == null) {
    return;
  }
  final long photoId=info.photoId;
  if (photoId == 0) {
    return;
  }
  mImageFetcher=new ImageDbFetcher(photoId,view);
synchronized (ContactsListActivity.this) {
    if (sImageFetchThreadPool == null) {
      sImageFetchThreadPool=Executors.newFixedThreadPool(1);
    }
    sImageFetchThreadPool.execute(mImageFetcher);
  }
}",0.997863247863248
7306,"/** 
 * @return true if the widget with the phone number digits is empty.
 */
private boolean isDigitsEmpty(){
  return mDigits.length() != 0;
}","/** 
 * @return true if the widget with the phone number digits is empty.
 */
private boolean isDigitsEmpty(){
  return mDigits.length() == 0;
}",0.9930555555555556
7307,"/** 
 * Set the visibility of secondary sections, along with header icon. <p>If the source is read-only and there's no secondary fields, the entire secondary section will be hidden.
 */
private void setSecondaryVisible(boolean makeVisible){
  mSecondaryVisible=makeVisible;
  if (!mIsSourceReadOnly && mSecondary.getChildCount() > 0) {
    mSecondary.setVisibility(makeVisible ? View.VISIBLE : View.GONE);
    mSecondaryHeader.setCompoundDrawablesWithIntrinsicBounds(makeVisible ? mSecondaryOpen : mSecondaryClosed,null,null,null);
  }
 else {
    mSecondaryHeader.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
  }
}","/** 
 * Set the visibility of secondary sections, along with header icon. <p>If the source is read-only and there's no secondary fields, the entire secondary section will be hidden.
 */
private void setSecondaryVisible(boolean makeVisible){
  mSecondaryVisible=makeVisible;
  if (!mIsSourceReadOnly && mSecondary.getChildCount() > 0) {
    mSecondaryHeader.setVisibility(View.VISIBLE);
    mSecondaryHeader.setCompoundDrawablesWithIntrinsicBounds(makeVisible ? mSecondaryOpen : mSecondaryClosed,null,null,null);
    mSecondary.setVisibility(makeVisible ? View.VISIBLE : View.GONE);
  }
 else {
    mSecondaryHeader.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
  }
}",0.7280966767371602
7308,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}",0.9533394327538884
7309,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}",0.9533394327538884
7310,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}",0.9533394327538884
7311,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}",0.9533394327538884
7312,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_RING,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
}",0.9958988380041012
7313,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_RING,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}",0.9941348973607038
7314,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(DIAL_TONE_STREAM_TYPE,TONE_RELATIVE_VOLUME);
        setVolumeControlStream(DIAL_TONE_STREAM_TYPE);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
  updateDialAndDeleteButtonStateEnabledAttr();
}",0.9533394327538884
7315,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
7316,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
7317,"@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  if (!mDataValid) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (position == 0 && (mMode & MODE_MASK_SHOW_NUMBER_OF_CONTACTS) != 0) {
    return getTotalContactCountView(parent);
  }
  if (isShowAllContactsItemPosition(position)) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    return inflater.inflate(R.layout.contacts_list_show_all_item,parent,false);
  }
  int separatorId=getSeparatorId(position);
  if (separatorId != 0) {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    TextView view=(TextView)inflater.inflate(R.layout.list_separator,parent,false);
    view.setText(separatorId);
    return view;
  }
  boolean showingSuggestion;
  Cursor cursor;
  if (mSuggestionsCursorCount != 0 && position < mSuggestionsCursorCount + 2) {
    showingSuggestion=true;
    cursor=mSuggestionsCursor;
  }
 else {
    showingSuggestion=false;
    cursor=mCursor;
  }
  int realPosition=getRealPosition(position);
  if (!cursor.moveToPosition(realPosition)) {
    throw new IllegalStateException(""String_Node_Str"" + position);
  }
  View v;
  if (convertView == null || convertView.getTag() == null) {
    v=newView(mContext,cursor,parent);
  }
 else {
    v=convertView;
  }
  bindView(v,mContext,cursor);
  bindSectionHeader(v,realPosition,mDisplaySectionHeaders && !showingSuggestion);
  return v;
}",0.9893262174783188
7318,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
7319,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
7320,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
7321,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
7322,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
7323,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
7324,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
7325,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
7326,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
7327,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
7328,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
7329,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
7330,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
7331,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
7332,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
7333,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
7334,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
7335,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
7336,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
7337,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
7338,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
7339,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
7340,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
7341,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
7342,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
7343,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
7344,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
7345,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
7346,"String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}","String[] getProjectionForQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_STREQUENT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_QUERY:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_GROUP:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return CONTACTS_SUMMARY_PROJECTION;
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return LEGACY_PEOPLE_PROJECTION;
  }
case MODE_PICK_PHONE:
{
  return PHONES_PROJECTION;
}
case MODE_LEGACY_PICK_PHONE:
{
return LEGACY_PHONES_PROJECTION;
}
case MODE_PICK_POSTAL:
{
return POSTALS_PROJECTION;
}
case MODE_LEGACY_PICK_POSTAL:
{
return LEGACY_POSTALS_PROJECTION;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return CONTACTS_SUMMARY_PROJECTION_FROM_EMAIL;
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return PHONES_PROJECTION;
}
break;
}
}
return CONTACTS_SUMMARY_PROJECTION;
}",0.9940054495912808
7347,"Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return Contacts.CONTENT_URI;
    }
case MODE_STREQUENT:
{
    return Contacts.CONTENT_STREQUENT_URI;
  }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
  return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
}
return null;
}","Uri getUriToQuery(){
switch (mMode) {
case MODE_JOIN_CONTACT:
    return getJoinSuggestionsUri(null);
case MODE_FREQUENT:
case MODE_STARRED:
case MODE_DEFAULT:
case MODE_INSERT_OR_EDIT_CONTACT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
    return Contacts.CONTENT_URI;
  }
case MODE_STREQUENT:
{
  return Contacts.CONTENT_STREQUENT_URI;
}
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
return People.CONTENT_URI;
}
case MODE_PICK_PHONE:
{
return Phone.CONTENT_URI;
}
case MODE_LEGACY_PICK_PHONE:
{
return Phones.CONTENT_URI;
}
case MODE_PICK_POSTAL:
{
return StructuredPostal.CONTENT_URI;
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContactMethods.CONTENT_URI;
}
case MODE_QUERY_PICK_TO_VIEW:
{
if (mQueryMode == QUERY_MODE_MAILTO) {
return Uri.withAppendedPath(Email.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
 else if (mQueryMode == QUERY_MODE_TEL) {
return Uri.withAppendedPath(Phone.CONTENT_FILTER_URI,Uri.encode(mQueryData));
}
}
case MODE_QUERY:
{
return getContactFilterUri(mQueryData);
}
case MODE_GROUP:
{
return mGroupUri;
}
default :
{
throw new IllegalStateException(""String_Node_Str"");
}
}
}",0.7986736144007579
7348,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
    }
    mMode=MODE_QUERY;
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Intent intent=getIntent();
  String title=intent.getStringExtra(UI.TITLE_EXTRA_KEY);
  if (title != null) {
    setTitle(title);
  }
  final String action=intent.getAction();
  mMode=MODE_UNKNOWN;
  Log.i(TAG,""String_Node_Str"" + action);
  if (UI.LIST_DEFAULT.equals(action)) {
    mMode=MODE_DEFAULT;
  }
 else   if (UI.LIST_GROUP_ACTION.equals(action)) {
    mMode=MODE_GROUP;
    String groupName=intent.getStringExtra(UI.GROUP_NAME_EXTRA_KEY);
    if (TextUtils.isEmpty(groupName)) {
      finish();
      return;
    }
    buildUserGroupUri(groupName);
  }
 else   if (UI.LIST_ALL_CONTACTS_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=false;
  }
 else   if (UI.LIST_STARRED_ACTION.equals(action)) {
    mMode=MODE_STARRED;
  }
 else   if (UI.LIST_FREQUENT_ACTION.equals(action)) {
    mMode=MODE_FREQUENT;
  }
 else   if (UI.LIST_STREQUENT_ACTION.equals(action)) {
    mMode=MODE_STREQUENT;
  }
 else   if (UI.LIST_CONTACTS_WITH_PHONES_ACTION.equals(action)) {
    mMode=MODE_CUSTOM;
    mDisplayOnlyPhones=true;
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_CONTACT;
    }
 else     if (People.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PERSON;
    }
 else     if (Phone.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
  }
 else   if (Intent.ACTION_CREATE_SHORTCUT.equals(action)) {
    if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_CALL;
      setTitle(R.string.callShortcutActivityTitle);
    }
 else     if (intent.getComponent().getClassName().equals(""String_Node_Str"")) {
      mMode=MODE_PICK_PHONE;
      mShortcutAction=Intent.ACTION_SENDTO;
      setTitle(R.string.messageShortcutActivityTitle);
    }
 else {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
      mShortcutAction=Intent.ACTION_VIEW;
      setTitle(R.string.shortcutActivityTitle);
    }
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    final String type=intent.resolveType(this);
    if (Contacts.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_OR_CREATE_CONTACT;
    }
 else     if (Phone.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_PHONE;
    }
 else     if (Phones.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_PHONE;
    }
 else     if (StructuredPostal.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_PICK_POSTAL;
    }
 else     if (ContactMethods.CONTENT_POSTAL_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_POSTAL;
    }
 else     if (People.CONTENT_ITEM_TYPE.equals(type)) {
      mMode=MODE_LEGACY_PICK_OR_CREATE_PERSON;
    }
  }
 else   if (Intent.ACTION_INSERT_OR_EDIT.equals(action)) {
    mMode=MODE_INSERT_OR_EDIT_CONTACT;
  }
 else   if (Intent.ACTION_SEARCH.equals(action)) {
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG))) {
      String query=intent.getStringExtra(SearchManager.QUERY);
      if (!TextUtils.isEmpty(query)) {
        Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",query,null));
        startActivity(newIntent);
      }
      finish();
      return;
    }
    if (intent.hasExtra(Insert.EMAIL)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_MAILTO;
      mQueryData=intent.getStringExtra(Insert.EMAIL);
    }
 else     if (intent.hasExtra(Insert.PHONE)) {
      mMode=MODE_QUERY_PICK_TO_VIEW;
      mQueryMode=QUERY_MODE_TEL;
      mQueryData=intent.getStringExtra(Insert.PHONE);
    }
 else {
      mMode=MODE_QUERY;
      mQueryData=getIntent().getStringExtra(SearchManager.QUERY);
    }
  }
 else   if (Intents.SEARCH_SUGGESTION_CLICKED.equals(action)) {
    Uri data=intent.getData();
    Uri telUri=null;
    if (sContactsIdMatcher.match(data) == CONTACTS_ID) {
      long contactId=Long.valueOf(data.getLastPathSegment());
      final Cursor cursor=queryPhoneNumbers(contactId);
      if (cursor != null) {
        if (cursor.getCount() == 1 && cursor.moveToFirst()) {
          int phoneNumberIndex=cursor.getColumnIndex(Phone.NUMBER);
          String phoneNumber=cursor.getString(phoneNumberIndex);
          telUri=Uri.parse(""String_Node_Str"" + phoneNumber);
        }
        cursor.close();
      }
    }
    Intent newIntent;
    if (""String_Node_Str"".equals(intent.getStringExtra(SearchManager.ACTION_MSG)) && telUri != null) {
      newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,telUri);
    }
 else {
      newIntent=new Intent(Intent.ACTION_VIEW,data);
    }
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.equals(action)) {
    Intent newIntent=new Intent(Intent.ACTION_CALL_PRIVILEGED,intent.getData());
    startActivity(newIntent);
    finish();
    return;
  }
 else   if (Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.equals(action)) {
    String number=intent.getData().getSchemeSpecificPart();
    Intent newIntent=new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
    newIntent.putExtra(Intents.Insert.PHONE,number);
    startActivity(newIntent);
    finish();
    return;
  }
  if (JOIN_AGGREGATE.equals(action)) {
    mMode=MODE_JOIN_CONTACT;
    mQueryAggregateId=intent.getLongExtra(EXTRA_AGGREGATE_ID,-1);
    if (mQueryAggregateId == -1) {
      Log.e(TAG,""String_Node_Str"" + action + ""String_Node_Str""+ EXTRA_AGGREGATE_ID);
      setResult(RESULT_CANCELED);
      finish();
    }
  }
  if (mMode == MODE_UNKNOWN) {
    mMode=MODE_DEFAULT;
  }
  if (mMode == MODE_JOIN_CONTACT) {
    setContentView(R.layout.contacts_list_content_join);
    TextView blurbView=(TextView)findViewById(R.id.join_contact_blurb);
    String contactName=intent.getStringExtra(EXTRA_AGGREGATE_NAME);
    if (contactName == null) {
      contactName=""String_Node_Str"";
    }
    String blurb=getString(R.string.blurbJoinContactDataWith,contactName);
    blurbView.setText(blurb);
    mJoinModeShowAllContacts=true;
  }
 else {
    setContentView(R.layout.contacts_list_content);
  }
  final ListView list=getListView();
  list.setDividerHeight(0);
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  if ((mMode & MODE_MASK_NO_FILTER) != MODE_MASK_NO_FILTER) {
    list.setTextFilterEnabled(true);
  }
  if ((mMode & MODE_MASK_CREATE_NEW) != 0) {
    final LayoutInflater inflater=getLayoutInflater();
    View header=inflater.inflate(R.layout.create_new_contact,list,false);
    list.addHeaderView(header);
  }
  setEmptyText();
  mAdapter=new ContactItemListAdapter(this);
  setListAdapter(mAdapter);
  getListView().setOnScrollListener(mAdapter);
  list.setSaveEnabled(false);
  mQueryHandler=new QueryHandler(this);
  mJustCreated=true;
  mSyncEnabled=true;
}",0.994565974641215
7349,"void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,mGroupUri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQuery=getIntent().getStringExtra(SearchManager.QUERY);
mQueryHandler.startQuery(QUERY_TOKEN,null,getContactFilterUri(mQuery),projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,getUriToQuery(),projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,getJoinSuggestionsUri(null),projection,null,null,null);
break;
}
}","void startQuery(){
  mAdapter.setLoading(true);
  mQueryHandler.cancelOperation(QUERY_TOKEN);
  mQueryHandler.setLoadingJoinSuggestions(false);
  String[] projection=getProjectionForQuery();
  String callingPackage=getCallingPackage();
  Uri uri=getUriToQuery();
  if (!TextUtils.isEmpty(callingPackage)) {
    uri=uri.buildUpon().appendQueryParameter(ContactsContract.REQUESTING_PACKAGE_PARAM_KEY,callingPackage).build();
  }
switch (mMode) {
case MODE_GROUP:
    mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
  break;
case MODE_DEFAULT:
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_INSERT_OR_EDIT_CONTACT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,getContactSelection(),null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_QUERY:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_QUERY_PICK_TO_VIEW:
{
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
}
case MODE_STARRED:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.STARRED + ""String_Node_Str"",null,getSortOrder(projection));
break;
case MODE_FREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,Contacts.TIMES_CONTACTED + ""String_Node_Str"",null,Contacts.TIMES_CONTACTED + ""String_Node_Str"" + getSortOrder(projection));
break;
case MODE_STREQUENT:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,getSortOrder(projection));
break;
case MODE_LEGACY_PICK_POSTAL:
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,ContactMethods.KIND + ""String_Node_Str"" + android.provider.Contacts.KIND_POSTAL,null,getSortOrder(projection));
break;
case MODE_JOIN_CONTACT:
mQueryHandler.setLoadingJoinSuggestions(true);
mQueryHandler.startQuery(QUERY_TOKEN,null,uri,projection,null,null,null);
break;
}
}",0.9575353871773522
7350,"@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQuery),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}","@Override protected void onQueryComplete(int token,Object cookie,Cursor cursor){
  final ContactsListActivity activity=mActivity.get();
  if (activity != null && !activity.isFinishing()) {
    if (cursor != null && mLoadingJoinSuggestions) {
      mLoadingJoinSuggestions=false;
      if (cursor.getCount() > 0) {
        activity.mAdapter.setSuggestionsCursor(cursor);
      }
 else {
        cursor.close();
        activity.mAdapter.setSuggestionsCursor(null);
      }
      if (activity.mAdapter.mSuggestionsCursorCount == 0 || !activity.mJoinModeShowAllContacts) {
        startQuery(QUERY_TOKEN,null,activity.getContactFilterUri(activity.mQueryData),CONTACTS_SUMMARY_PROJECTION,Contacts._ID + ""String_Node_Str"" + activity.mQueryAggregateId+ ""String_Node_Str""+ CLAUSE_ONLY_VISIBLE,null,getSortOrder(CONTACTS_SUMMARY_PROJECTION));
        return;
      }
      cursor=activity.getShowAllContactsLabelCursor(CONTACTS_SUMMARY_PROJECTION);
    }
    activity.mAdapter.setLoading(false);
    activity.getListView().clearTextFilter();
    activity.mAdapter.changeCursor(cursor);
    if (activity.mListState != null) {
      activity.mList.onRestoreInstanceState(activity.mListState);
      if (activity.mListHasFocus) {
        activity.mList.requestFocus();
      }
      activity.mListHasFocus=false;
      activity.mListState=null;
    }
  }
 else {
    cursor.close();
  }
}",0.9985454545454544
7351,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
7352,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
7353,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
7354,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      Bitmap photo=mBitmapCache.get(photoId).get();
      if (photo == null) {
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      final ImageView imageView=(ImageView)message.obj;
      if (imageView == null) {
        break;
      }
      final PhotoInfo info=(PhotoInfo)imageView.getTag();
      if (info == null) {
        break;
      }
      final long photoId=info.photoId;
      if (photoId == 0) {
        break;
      }
      SoftReference<Bitmap> photoRef=mBitmapCache.get(photoId);
      if (photoRef == null) {
        break;
      }
      Bitmap photo=photoRef.get();
      if (photo == null) {
        mBitmapCache.remove(photoId);
        break;
      }
synchronized (imageView) {
        final PhotoInfo updatedInfo=(PhotoInfo)imageView.getTag();
        long currentPhotoId=updatedInfo.photoId;
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.8978102189781022
7355,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
7356,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
7357,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
7358,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
7359,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
7360,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
7361,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
7362,"@Override protected Dialog onCreateDialog(int id){
switch (id) {
case R.string.import_from_sim:
case R.string.import_from_sdcard:
{
      return AccountSelectionUtil.getSelectAccountDialog(this,id);
    }
case R.id.dialog_sdcard_not_found:
{
    return new AlertDialog.Builder(this).setTitle(R.string.no_sdcard_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.no_sdcard_message).setPositiveButton(android.R.string.ok,null).create();
  }
case R.id.dialog_delete_contact_confirmation:
{
  return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.deleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_readonly_contact_hide_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactWarning).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_readonly_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
case R.id.dialog_multiple_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.multipleContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener(mSelectedContactUri)).create();
}
}
return super.onCreateDialog(id);
}","@Override protected Dialog onCreateDialog(int id){
switch (id) {
case R.string.import_from_sim:
case R.string.import_from_sdcard:
{
      return AccountSelectionUtil.getSelectAccountDialog(this,id);
    }
case R.id.dialog_sdcard_not_found:
{
    return new AlertDialog.Builder(this).setTitle(R.string.no_sdcard_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.no_sdcard_message).setPositiveButton(android.R.string.ok,null).create();
  }
case R.id.dialog_delete_contact_confirmation:
{
  return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.deleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_readonly_contact_hide_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactWarning).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_readonly_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.readOnlyContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
case R.id.dialog_multiple_contact_delete_confirmation:
{
return new AlertDialog.Builder(this).setTitle(R.string.deleteConfirmation_title).setIcon(android.R.drawable.ic_dialog_alert).setMessage(R.string.multipleContactDeleteConfirmation).setNegativeButton(android.R.string.cancel,null).setPositiveButton(android.R.string.ok,new DeleteClickListener()).create();
}
}
return super.onCreateDialog(id);
}",0.9568345323741008
7363,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  mRawContactIdRequestingPhoto=savedInstanceState.getLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO);
  bindEditors();
  super.onRestoreInstanceState(savedInstanceState);
}",0.8181818181818182
7364,"/** 
 * {@inheritDoc} 
 */
public void onRequest(int request){
  if (!hasValidState())   return;
switch (request) {
case EditorListener.REQUEST_PICK_PHOTO:
{
      doPickPhotoAction();
      break;
    }
case EditorListener.FIELD_CHANGED:
{
    break;
  }
}
}","public void onRequest(int request){
  if (!hasValidState())   return;
  if (request == EditorListener.REQUEST_PICK_PHOTO) {
    doPickPhotoAction(rawContactId);
  }
}",0.691764705882353
7365,"/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}","/** 
 * {@inheritDoc} 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode != RESULT_OK)   return;
switch (requestCode) {
case PHOTO_PICKED_WITH_DATA:
{
      ContactEditorView requestingEditor=null;
      if (mRawContactIdRequestingPhoto > 0) {
        for (int i=0; i < mContent.getChildCount(); i++) {
          View childView=mContent.getChildAt(i);
          if (childView instanceof ContactEditorView) {
            ContactEditorView editor=(ContactEditorView)childView;
            if (editor.getRawContactId() == mRawContactIdRequestingPhoto) {
              requestingEditor=editor;
              break;
            }
          }
        }
      }
      if (requestingEditor != null) {
        final Bitmap photo=data.getParcelableExtra(""String_Node_Str"");
        requestingEditor.setPhotoBitmap(photo);
        mRawContactIdRequestingPhoto=-1;
      }
 else {
      }
      break;
    }
case REQUEST_JOIN_CONTACT:
{
    if (resultCode == RESULT_OK && data != null) {
      final long contactId=ContentUris.parseId(data.getData());
      joinAggregate(contactId);
    }
  }
}
}",0.5223012281835812
7366,"/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  mEntities=new EntityDelta[mState.size()];
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    mContent.addView(editor);
    editor.setState(entity,source);
    mEntities[i]=entity;
  }
  mContent.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild the editors to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindEditors(){
  if (!hasValidState())   return;
  final LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  final Sources sources=Sources.getInstance(this);
  mContent.removeAllViews();
  int size=mState.size();
  for (int i=0; i < size; i++) {
    EntityDelta entity=mState.get(i);
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final long rawContactId=values.getAsLong(RawContacts._ID);
    ContactEditorView editor=(ContactEditorView)inflater.inflate(R.layout.item_contact_editor,mContent,false);
    editor.getPhotoEditor().setEditorListener(new EditorListener(){
      public void onDeleted(      Editor editor){
      }
      public void onRequest(      int request){
        if (!hasValidState())         return;
        if (request == EditorListener.REQUEST_PICK_PHOTO) {
          doPickPhotoAction(rawContactId);
        }
      }
    }
);
    mContent.addView(editor);
    editor.setState(entity,source);
  }
  mContent.setVisibility(View.VISIBLE);
}",0.8076616121308858
7367,"/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}","/** 
 * Pick a specific photo to be added under the currently selected tab.
 */
private boolean doPickPhotoAction(long rawContactId){
  if (!hasValidState())   return false;
  try {
    final Intent intent=ContactsUtils.getPhotoPickIntent();
    startActivityForResult(intent,PHOTO_PICKED_WITH_DATA);
    mRawContactIdRequestingPhoto=rawContactId;
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.photoPickerNotFoundText,Toast.LENGTH_LONG).show();
  }
  return true;
}",0.9311827956989248
7368,"@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  super.onSaveInstanceState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (hasValidState()) {
    outState.putParcelable(KEY_EDIT_STATE,mState);
  }
  outState.putLong(KEY_RAW_CONTACT_ID_REQUESTING_PHOTO,mRawContactIdRequestingPhoto);
  super.onSaveInstanceState(outState);
}",0.6637168141592921
7369,"/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}","/** 
 * Set the internal state for this view, given a current  {@link EntityDelta} state and the {@link ContactsSource} thatapply to that state.
 */
public void setState(EntityDelta state,ContactsSource source){
  mGeneral.removeAllViews();
  mSecondary.removeAllViews();
  if (state == null || source == null)   return;
  EntityModifier.ensureKindExists(state,source,StructuredName.CONTENT_ITEM_TYPE);
  mHeader.setBackgroundColor(source.getHeaderColor(mContext));
  mSideBar.setBackgroundColor(source.getSideBarColor(mContext));
  ValuesDelta values=state.getValues();
  String accountName=values.getAsString(RawContacts.ACCOUNT_NAME);
  if (TextUtils.isEmpty(accountName)) {
    accountName=""String_Node_Str"";
  }
  mHeaderAccountName.setText(accountName);
  mHeaderAccountType.setText(source.getDisplayLabel(mContext));
  mHeaderIcon.setImageDrawable(source.getDisplayIcon(mContext));
  mRawContactId=values.getAsLong(RawContacts._ID);
  EntityModifier.ensureKindExists(state,source,Photo.CONTENT_ITEM_TYPE);
  mHasPhotoEditor=(source.getKindForMimetype(Photo.CONTENT_ITEM_TYPE) != null);
  mPhoto.setVisibility(mHasPhotoEditor ? View.VISIBLE : View.GONE);
  mPhoto.setEnabled(!source.readOnly);
  mName.setEnabled(!source.readOnly);
  boolean readOnly=source.readOnly;
  if (readOnly) {
    mGeneral.setVisibility(View.GONE);
    mSecondary.setVisibility(View.GONE);
    mSecondaryHeader.setVisibility(View.GONE);
  }
 else {
    mReadOnly.setVisibility(View.GONE);
  }
  for (  DataKind kind : source.getSortedDataKinds()) {
    if (!kind.editable)     continue;
    final String mimeType=kind.mimeType;
    if (StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mName.setValues(kind,primary,state,source.readOnly);
    }
 else     if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
      final ValuesDelta primary=state.getPrimaryEntry(mimeType);
      mPhoto.setValues(kind,primary,state,source.readOnly);
    }
 else     if (!readOnly) {
      if (kind.fieldList == null)       continue;
      final ViewGroup parent=kind.secondary ? mSecondary : mGeneral;
      final KindSectionView section=(KindSectionView)mInflater.inflate(R.layout.item_kind_section,parent,false);
      section.setState(kind,state,source.readOnly);
      section.setId(kind.weight);
      parent.addView(section);
    }
  }
  final int secondaryVisibility=mSecondary.getChildCount() > 0 ? View.VISIBLE : View.GONE;
  mSecondary.setVisibility(secondaryVisibility);
  mSecondaryHeader.setVisibility(secondaryVisibility);
}",0.989986255645003
7370,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
7371,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
7372,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
7373,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
7374,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  final View view=super.newView(context,cursor,parent);
  final ContactListItemCache cache=new ContactListItemCache();
  cache.header=(TextView)view.findViewById(R.id.header);
  cache.divider=view.findViewById(R.id.list_divider);
  cache.nameView=(TextView)view.findViewById(R.id.name);
  cache.callView=view.findViewById(R.id.call_view);
  cache.callButton=(ImageView)view.findViewById(R.id.call_button);
  if (cache.callButton != null) {
    cache.callButton.setOnClickListener(ContactsListActivity.this);
  }
  cache.labelView=(TextView)view.findViewById(R.id.label);
  cache.dataView=(TextView)view.findViewById(R.id.data);
  cache.presenceView=(ImageView)view.findViewById(R.id.presence);
  cache.photoView=(FasttrackBadgeWidget)view.findViewById(R.id.photo);
  if (cache.photoView != null) {
    cache.photoView.setExcludeMimes(new String[]{Contacts.CONTENT_ITEM_TYPE});
  }
  cache.nonFastTrackPhotoView=(ImageView)view.findViewById(R.id.noFastTrackphoto);
  view.setTag(cache);
  return view;
}",0.981629769194536
7375,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
7376,"/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (!mRawContactIds.contains(entry.contactId)) {
          mRawContactIds.add(entry.contactId);
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}","/** 
 * Build up the entries to display on the screen.
 * @param personCursor the URI for the contact being displayed
 */
private final void buildEntries(){
  final int numSections=mSections.size();
  for (int i=0; i < numSections; i++) {
    mSections.get(i).clear();
  }
  mRawContactIds.clear();
  Sources sources=Sources.getInstance(this);
  if (mUri != null) {
    for (    Entity entity : mEntities) {
      final ContentValues entValues=entity.getEntityValues();
      final String accountType=entValues.getAsString(RawContacts.ACCOUNT_TYPE);
      final long rawContactId=entValues.getAsLong(RawContacts._ID);
      if (!mRawContactIds.contains(rawContactId)) {
        mRawContactIds.add(rawContactId);
      }
      for (      NamedContentValues subValue : entity.getSubValues()) {
        ViewEntry entry=new ViewEntry();
        final ContentValues entryValues=subValue.values;
        entryValues.put(Data.RAW_CONTACT_ID,rawContactId);
        final String mimetype=entryValues.getAsString(Data.MIMETYPE);
        if (mimetype == null)         continue;
        final DataKind kind=sources.getKindOrFallback(accountType,mimetype,this,ContactsSource.LEVEL_MIMETYPES);
        if (kind == null)         continue;
        final long id=entryValues.getAsLong(Data._ID);
        final Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,id);
        entry.contactId=rawContactId;
        entry.id=id;
        entry.uri=uri;
        entry.mimetype=mimetype;
        entry.label=buildActionString(kind,entryValues,false);
        entry.data=buildDataString(kind,entryValues);
        if (kind.typeColumn != null && entryValues.containsKey(kind.typeColumn)) {
          entry.type=entryValues.getAsInteger(kind.typeColumn);
        }
        if (kind.iconRes > 0) {
          entry.resPackageName=kind.resPackageName;
          entry.actionIcon=kind.iconRes;
        }
        if (TextUtils.isEmpty(entry.data)) {
          continue;
        }
        if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype) || CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)|| CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
          final boolean isSuperPrimary=entryValues.getAsInteger(Data.IS_SUPER_PRIMARY) != 0;
          if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimetype)) {
            mNumPhoneNumbers++;
            entry.intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.secondaryIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.data=PhoneNumberUtils.stripSeparators(entry.data);
            if (TextUtils.isEmpty(entry.data)) {
              Log.w(TAG,""String_Node_Str"" + id);
              continue;
            }
            entry.isPrimary=isSuperPrimary;
            mPhoneEntries.add(entry);
            if (entry.type == CommonDataKinds.Phone.TYPE_MOBILE || mShowSmsLinksForAllPhones) {
              if (kind.iconAltRes > 0) {
                entry.secondaryActionIcon=kind.iconAltRes;
              }
            }
          }
 else           if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.intent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",entry.data,null));
            entry.isPrimary=isSuperPrimary;
            mEmailEntries.add(entry);
          }
 else           if (CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE.equals(mimetype)) {
            entry.maxLines=4;
            entry.intent=new Intent(Intent.ACTION_VIEW,uri);
            mPostalEntries.add(entry);
          }
 else           if (CommonDataKinds.Im.CONTENT_ITEM_TYPE.equals(mimetype)) {
            Object protocolObj=entryValues.getAsInteger(Data.DATA5);
            String host=null;
            if (TextUtils.isEmpty(entry.label)) {
              entry.label=getString(R.string.chat).toLowerCase();
            }
            if (protocolObj instanceof Number) {
              int protocol=((Number)protocolObj).intValue();
              host=ContactsUtils.lookupProviderNameFromId(protocol);
              if (protocol == CommonDataKinds.Im.PROTOCOL_GOOGLE_TALK || protocol == CommonDataKinds.Im.PROTOCOL_MSN) {
                entry.maxLabelLines=2;
              }
            }
 else             if (protocolObj != null) {
              String providerName=(String)protocolObj;
              host=providerName.toLowerCase();
            }
            if (!TextUtils.isEmpty(host)) {
              entry.intent=new Intent(Intent.ACTION_SENDTO,constructImToUrl(host.toLowerCase(),entry.data));
            }
            mImEntries.add(entry);
          }
        }
 else         if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimetype)) {
          mOrganizationEntries.add(entry);
        }
 else         if (CommonDataKinds.Note.CONTENT_ITEM_TYPE.equals(mimetype)) {
          entry.id=0;
          entry.uri=null;
          entry.intent=null;
          entry.maxLines=10;
          mOtherEntries.add(entry);
        }
 else {
          entry.intent=new Intent(Intent.ACTION_VIEW,uri);
          mOtherEntries.add(entry);
        }
      }
    }
  }
}",0.9794089609151572
7377,"/** 
 * Detect if the given   {@link MotionEvent} is outside the boundaries of thiswindow, which usually means we should dismiss.
 */
protected void detectEventOutside(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    mDecor.getHitRect(mRect);
    final int x=(int)event.getX();
    final int y=(int)event.getY();
    if (!mRect.contains(x,y)) {
      event.setAction(MotionEvent.ACTION_OUTSIDE);
    }
  }
}","/** 
 * Detect if the given   {@link MotionEvent} is outside the boundaries of thiswindow, which usually means we should dismiss.
 */
protected void detectEventOutside(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    mDecor.getHitRect(mRect);
    mRect.top=mRect.top + mDecor.getPaddingTop();
    mRect.bottom=mRect.bottom - mDecor.getPaddingBottom();
    final int x=(int)event.getX();
    final int y=(int)event.getY();
    if (!mRect.contains(x,y)) {
      event.setAction(MotionEvent.ACTION_OUTSIDE);
    }
  }
}",0.8888888888888888
7378,"/** 
 * Format the given phone number using  {@link PhoneNumberUtils#formatNumber(android.text.Editable,int)}. This helper method uses   {@link #sEditable} and {@link #sFormattingType} toprevent allocations between multiple calls. <p> Because of the shared  {@link #sEditable} builder, <b>this method is notthread safe</b>, and should only be called from the GUI thread. <p> If the given String object is null or empty, return an empty String.
 */
private String formatPhoneNumber(String number){
  if (!TextUtils.isEmpty(number)) {
    return ""String_Node_Str"";
  }
  if (sFormattingType == FORMATTING_TYPE_INVALID) {
    sFormattingType=PhoneNumberUtils.getFormatTypeForLocale(Locale.getDefault());
  }
  sEditable.clear();
  sEditable.append(number);
  PhoneNumberUtils.formatNumber(sEditable,sFormattingType);
  return sEditable.toString();
}","/** 
 * Format the given phone number using  {@link PhoneNumberUtils#formatNumber(android.text.Editable,int)}. This helper method uses   {@link #sEditable} and {@link #sFormattingType} toprevent allocations between multiple calls. <p> Because of the shared  {@link #sEditable} builder, <b>this method is notthread safe</b>, and should only be called from the GUI thread. <p> If the given String object is null or empty, return an empty String.
 */
private String formatPhoneNumber(String number){
  if (TextUtils.isEmpty(number)) {
    return ""String_Node_Str"";
  }
  if (sFormattingType == FORMATTING_TYPE_INVALID) {
    sFormattingType=PhoneNumberUtils.getFormatTypeForLocale(Locale.getDefault());
  }
  sEditable.clear();
  sEditable.append(number);
  PhoneNumberUtils.formatNumber(sEditable,sFormattingType);
  return sEditable.toString();
}",0.9994086339444116
7379,"/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final CharSequence customType=extras.getCharSequence(typeExtra);
    child.put(editType.customColumn,customType.toString());
  }
}","/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final String customType=extras.getString(typeExtra);
    child.put(editType.customColumn,customType);
  }
}",0.9201080663836356
7380,"/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (count == exactValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}","/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (exactValue == type.rawValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}",0.987192118226601
7381,"/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    return delta.getValues().getAsLong(RawContacts._ID);
  }
 else {
    return 0;
  }
}","/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    final ValuesDelta values=delta.getValues();
    if (values.isVisible()) {
      return values.getAsLong(RawContacts._ID);
    }
  }
  return 0;
}",0.8
7382,"/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}","/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(Long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}",0.9967532467532468
7383,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final Long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}",0.9973614775725592
7384,"/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  if (tabIndex < 0 || tabIndex >= mState.size())   return;
  final EntityDelta entity=mState.get(tabIndex);
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}","/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  final EntityDelta entity=this.getSelectedEntityDelta();
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}",0.8636363636363636
7385,"/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  this.createPhotoDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createPhotoDialog());
}",0.9052631578947368
7386,"/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(long rawContactId){
  final int index=mState.indexOfRawContactId(rawContactId);
  mTabWidget.setCurrentTab(index);
}","/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(Long rawContactId){
  int tabIndex=0;
  final int size=mTabRawContacts.size();
  for (int i=0; i < size; i++) {
    if (mTabRawContacts.valueAt(i) == rawContactId) {
      tabIndex=i;
      break;
    }
  }
  mTabWidget.setCurrentTab(tabIndex);
  this.onTabSelectionChanged(tabIndex,false);
}",0.5652173913043478
7387,"@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  result.create().show();
}","@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  target.showAndManageDialog(result.create());
}",0.8754716981132076
7388,"private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final int index=mTabWidget.getCurrentTab();
      final EntityDelta delta=mState.get(index);
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}","private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final EntityDelta delta=getSelectedEntityDelta();
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}",0.6359048305695746
7389,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  if (Intent.ACTION_EDIT.equals(action) && icicle == null) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && icicle == null) {
    doAddAction();
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  final boolean hasIncomingState=icicle != null && icicle.containsKey(KEY_EDIT_STATE);
  if (Intent.ACTION_EDIT.equals(action) && !hasIncomingState) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && !hasIncomingState) {
    doAddAction();
  }
}",0.9305361305361304
7390,"/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  int selectedTab=0;
  mTabWidget.removeAllTabs();
  for (  EntityDelta entity : mState) {
    ValuesDelta values=entity.getValues();
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
  }
  if (mState.size() > 0) {
    mTabWidget.setCurrentTab(selectedTab);
    this.onTabSelectionChanged(selectedTab,false);
  }
  mEditor.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  final Long selectedRawContactId=this.getSelectedRawContactId();
  mTabWidget.removeAllTabs();
  mTabRawContacts.clear();
  for (  EntityDelta entity : mState) {
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final int tabIndex=mTabWidget.getTabCount();
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
    mTabRawContacts.put(tabIndex,rawContactId);
  }
  final boolean hasActiveTabs=mTabWidget.getTabCount() > 0;
  if (hasActiveTabs) {
    this.setSelectedRawContactId(selectedRawContactId);
  }
 else {
    this.doSaveAction();
  }
  mEditor.setVisibility(View.VISIBLE);
}",0.7734553775743707
7391,"/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  this.createDeleteDialog().show();
  return true;
}","/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  showAndManageDialog(createDeleteDialog());
  return true;
}",0.8752475247524752
7392,"/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected long getSelectedRawContactId(){
  final int index=mTabWidget.getCurrentTab();
  return mState.getRawContactId(index);
}","/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected Long getSelectedRawContactId(){
  final int tabIndex=mTabWidget.getCurrentTab();
  return this.mTabRawContacts.get(tabIndex);
}",0.9154929577464788
7393,"/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  this.createNameDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createNameDialog());
}",0.9084745762711864
7394,"/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final int selectedTab=mTabWidget.getCurrentTab();
  final long rawContactId=mState.getRawContactId(selectedTab);
  if (rawContactId != -1) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}","/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final Long rawContactId=this.getSelectedRawContactId();
  if (rawContactId != null) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,(long)rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}",0.8963623884694578
7395,"/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final CharSequence customType=extras.getCharSequence(typeExtra);
    child.put(editType.customColumn,customType.toString());
  }
}","/** 
 * Parse a specific entry from the given   {@link Bundle} and insert into thegiven  {@link EntityDelta}. Silently skips the insert when missing value or no valid   {@link EditType} found.
 * @param typeExtra {@link Bundle} key that holds the incoming{@link EditType#rawValue} value.
 * @param valueExtra {@link Bundle} key that holds the incoming value.
 * @param valueColumn Column to write value into {@link ValuesDelta}.
 */
public static void parseExtras(EntityDelta state,DataKind kind,Bundle extras,String typeExtra,String valueExtra,String valueColumn){
  final CharSequence value=extras.getCharSequence(valueExtra);
  if (kind == null)   return;
  final boolean canInsert=EntityModifier.canInsert(state,kind);
  final boolean validValue=(value != null && TextUtils.isGraphic(value));
  if (!validValue || !canInsert)   return;
  final int typeValue=extras.getInt(typeExtra,BaseTypes.TYPE_CUSTOM);
  final EditType editType=EntityModifier.getBestValidType(state,kind,true,typeValue);
  final ValuesDelta child=EntityModifier.insertChild(state,kind,editType);
  child.put(valueColumn,value.toString());
  if (editType != null && editType.customColumn != null) {
    final String customType=extras.getString(typeExtra);
    child.put(editType.customColumn,customType);
  }
}",0.9201080663836356
7396,"/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (count == exactValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}","/** 
 * Find the best   {@link EditType} for a potential insert. The ""best"" is thefirst primary type that doesn't already exist. When all valid types exist, we pick the last valid option.
 */
public static EditType getBestValidType(EntityDelta state,DataKind kind,boolean includeSecondary,int exactValue){
  if (kind.typeColumn == null)   return null;
  final SparseIntArray typeCount=getTypeFrequencies(state,kind);
  final ArrayList<EditType> validTypes=getValidTypes(state,kind,null,includeSecondary,typeCount);
  if (validTypes.size() == 0)   return null;
  final EditType lastType=validTypes.get(validTypes.size() - 1);
  Iterator<EditType> iterator=validTypes.iterator();
  while (iterator.hasNext()) {
    final EditType type=iterator.next();
    final int count=typeCount.get(type.rawValue);
    if (exactValue == type.rawValue) {
      return type;
    }
    if (count > 0) {
      iterator.remove();
    }
  }
  if (validTypes.size() > 0) {
    return validTypes.get(0);
  }
 else {
    return lastType;
  }
}",0.987192118226601
7397,"/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    return delta.getValues().getAsLong(RawContacts._ID);
  }
 else {
    return 0;
  }
}","/** 
 * Find   {@link RawContacts#_ID} of the requested {@link EntityDelta}.
 */
public long getRawContactId(int index){
  if (index >= 0 && index < this.size()) {
    final EntityDelta delta=this.get(index);
    final ValuesDelta values=delta.getValues();
    if (values.isVisible()) {
      return values.getAsLong(RawContacts._ID);
    }
  }
  return 0;
}",0.8
7398,"/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}","/** 
 * Find index of given   {@link RawContacts#_ID} when present.
 */
public int indexOfRawContactId(Long rawContactId){
  final int size=this.size();
  for (int i=0; i < size; i++) {
    final long currentId=getRawContactId(i);
    if (currentId == rawContactId) {
      return i;
    }
  }
  return -1;
}",0.9967532467532468
7399,"@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}","@Override protected void onRestoreInstanceState(Bundle savedInstanceState){
  mState=savedInstanceState.<EntitySet>getParcelable(KEY_EDIT_STATE);
  bindTabs();
  bindHeader();
  if (hasValidState()) {
    final Long selectedId=savedInstanceState.getLong(KEY_SELECTED_RAW_CONTACT);
    setSelectedRawContactId(selectedId);
  }
  super.onRestoreInstanceState(savedInstanceState);
}",0.9973614775725592
7400,"/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  if (tabIndex < 0 || tabIndex >= mState.size())   return;
  final EntityDelta entity=mState.get(tabIndex);
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}","/** 
 * {@inheritDoc} 
 */
public void onTabSelectionChanged(int tabIndex,boolean clicked){
  if (!hasValidState())   return;
  final EntityDelta entity=this.getSelectedEntityDelta();
  final String accountType=entity.getValues().getAsString(RawContacts.ACCOUNT_TYPE);
  final Sources sources=Sources.getInstance(this);
  final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
  mEditor.setState(entity,source);
}",0.8636363636363636
7401,"/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  this.createPhotoDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onPhotoLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createPhotoDialog());
}",0.9052631578947368
7402,"/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(long rawContactId){
  final int index=mState.indexOfRawContactId(rawContactId);
  mTabWidget.setCurrentTab(index);
}","/** 
 * Set the selected tab based on the given   {@link RawContacts#_ID}.
 */
protected void setSelectedRawContactId(Long rawContactId){
  int tabIndex=0;
  final int size=mTabRawContacts.size();
  for (int i=0; i < size; i++) {
    if (mTabRawContacts.valueAt(i) == rawContactId) {
      tabIndex=i;
      break;
    }
  }
  mTabWidget.setCurrentTab(tabIndex);
  this.onTabSelectionChanged(tabIndex,false);
}",0.5652173913043478
7403,"@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  result.create().show();
}","@Override protected void onPostExecute(EditContactActivity target,AlertDialog.Builder result){
  target.showAndManageDialog(result.create());
}",0.8754716981132076
7404,"private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final int index=mTabWidget.getCurrentTab();
      final EntityDelta delta=mState.get(index);
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}","private Dialog createDeleteDialog(){
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.deleteConfirmation_title);
  builder.setIcon(android.R.drawable.ic_dialog_alert);
  builder.setMessage(R.string.deleteConfirmation);
  builder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final EntityDelta delta=getSelectedEntityDelta();
      delta.markDeleted();
      bindTabs();
      bindHeader();
    }
  }
);
  builder.setNegativeButton(android.R.string.cancel,null);
  builder.setCancelable(false);
  return builder.create();
}",0.6359048305695746
7405,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  if (Intent.ACTION_EDIT.equals(action) && icicle == null) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && icicle == null) {
    doAddAction();
  }
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  final Context context=this;
  final LayoutInflater inflater=this.getLayoutInflater();
  final Intent intent=getIntent();
  final String action=intent.getAction();
  final Bundle extras=intent.getExtras();
  setContentView(R.layout.act_edit);
  mHeader=(ContactHeaderWidget)this.findViewById(R.id.contact_header_widget);
  mHeader.setContactHeaderListener(this);
  mHeader.showStar(true);
  mTabWidget=(ScrollingTabWidget)this.findViewById(R.id.tab_widget);
  mTabWidget.setTabSelectionListener(this);
  mEditor=(ContactEditorView)this.findViewById(android.R.id.tabcontent);
  mEditor.getPhotoEditor().setEditorListener(this);
  findViewById(R.id.btn_done).setOnClickListener(this);
  findViewById(R.id.btn_discard).setOnClickListener(this);
  final boolean hasIncomingState=icicle != null && icicle.containsKey(KEY_EDIT_STATE);
  if (Intent.ACTION_EDIT.equals(action) && !hasIncomingState) {
    new QueryEntitiesTask(this).execute(intent);
  }
 else   if (Intent.ACTION_INSERT.equals(action) && !hasIncomingState) {
    doAddAction();
  }
}",0.9305361305361304
7406,"/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  int selectedTab=0;
  mTabWidget.removeAllTabs();
  for (  EntityDelta entity : mState) {
    ValuesDelta values=entity.getValues();
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
  }
  if (mState.size() > 0) {
    mTabWidget.setCurrentTab(selectedTab);
    this.onTabSelectionChanged(selectedTab,false);
  }
  mEditor.setVisibility(View.VISIBLE);
}","/** 
 * Rebuild tabs to match our underlying   {@link #mState} object, usuallycalled once we've parsed  {@link Entity} data or have inserted a new{@link RawContacts}.
 */
protected void bindTabs(){
  if (!hasValidState())   return;
  final Sources sources=Sources.getInstance(this);
  final Long selectedRawContactId=this.getSelectedRawContactId();
  mTabWidget.removeAllTabs();
  mTabRawContacts.clear();
  for (  EntityDelta entity : mState) {
    final ValuesDelta values=entity.getValues();
    if (!values.isVisible())     continue;
    final String accountType=values.getAsString(RawContacts.ACCOUNT_TYPE);
    final Long rawContactId=values.getAsLong(RawContacts._ID);
    final ContactsSource source=sources.getInflatedSource(accountType,ContactsSource.LEVEL_CONSTRAINTS);
    final int tabIndex=mTabWidget.getTabCount();
    final View tabView=ContactsUtils.createTabIndicatorView(mTabWidget.getTabParent(),source);
    mTabWidget.addTab(tabView);
    mTabRawContacts.put(tabIndex,rawContactId);
  }
  final boolean hasActiveTabs=mTabWidget.getTabCount() > 0;
  if (hasActiveTabs) {
    this.setSelectedRawContactId(selectedRawContactId);
  }
 else {
    this.doSaveAction();
  }
  mEditor.setVisibility(View.VISIBLE);
}",0.7734553775743707
7407,"/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  this.createDeleteDialog().show();
  return true;
}","/** 
 * Delete the entire contact currently being edited, which usually asks for user confirmation before continuing.
 */
private boolean doDeleteAction(){
  if (!hasValidState())   return false;
  showAndManageDialog(createDeleteDialog());
  return true;
}",0.8752475247524752
7408,"/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected long getSelectedRawContactId(){
  final int index=mTabWidget.getCurrentTab();
  return mState.getRawContactId(index);
}","/** 
 * Return the   {@link RawContacts#_ID} of the currently selected tab.
 */
protected Long getSelectedRawContactId(){
  final int tabIndex=mTabWidget.getCurrentTab();
  return this.mTabRawContacts.get(tabIndex);
}",0.9154929577464788
7409,"/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  this.createNameDialog().show();
}","/** 
 * {@inheritDoc} 
 */
public void onDisplayNameLongClick(View view){
  if (!hasValidState())   return;
  showAndManageDialog(createNameDialog());
}",0.9084745762711864
7410,"/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final int selectedTab=mTabWidget.getCurrentTab();
  final long rawContactId=mState.getRawContactId(selectedTab);
  if (rawContactId != -1) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}","/** 
 * Saves or creates the contact based on the mode, and if successful finishes the activity.
 */
private boolean doSaveAction(){
  if (!hasValidState())   return false;
  final Long rawContactId=this.getSelectedRawContactId();
  if (rawContactId != null) {
    final Intent intent=new Intent();
    intent.putExtra(ViewContactActivity.RAW_CONTACT_ID_EXTRA,(long)rawContactId);
    setResult(RESULT_OK,intent);
  }
  try {
    final PersistTask task=new PersistTask(this);
    task.execute(mState);
    task.get(TIMEOUT_PERSIST,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
  }
catch (  TimeoutException e) {
  }
catch (  ExecutionException e) {
  }
  this.finish();
  return true;
}",0.8963623884694578
7411,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
7412,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
7413,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
7414,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
7415,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
7416,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
7417,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
cache.photoView.setTag(photoId);
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  mItemsMissingImages.add(cache.photoView);
  if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {
    sendFetchImageMessage(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9454042847270214
7418,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
{
      ImageView imageView=(ImageView)message.obj;
      long photoId=(Long)imageView.getTag();
      if (photoId == 0) {
        break;
      }
      Bitmap photo=null;
      try {
        photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
      }
 catch (      OutOfMemoryError e) {
      }
      if (photo == null) {
        break;
      }
      mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
synchronized (imageView) {
        long currentPhotoId=(Long)imageView.getTag();
        if (currentPhotoId == photoId) {
          imageView.setImageBitmap(photo);
          mItemsMissingImages.remove(imageView);
        }
      }
      break;
    }
}
}",0.5904486251808972
7419,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState == OnScrollListener.SCROLL_STATE_FLING) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9785575048732944
7420,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
7421,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
7422,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
7423,"public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  return validString ? context.getText(type.actionAltRes) : null;
}","public CharSequence inflateUsing(Context context,ContentValues values){
  final EditType type=EntityModifier.getCurrentType(values,mKind);
  final boolean validString=(type != null && type.actionAltRes != 0);
  CharSequence actionString;
  if (type.customColumn != null) {
    final String customLabel=values.getAsString(type.customColumn);
    actionString=String.format(context.getString(type.actionAltRes),customLabel);
  }
 else {
    actionString=context.getText(type.actionAltRes);
  }
  return validString ? actionString : null;
}",0.5781057810578106
7424,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
int pos=cursor.getPosition();
Bitmap photo=null;
cache.photoView.setImageBitmap(null);
cache.photoView.setTag(pos);
SoftReference<Bitmap> ref=mBitmapCache.get(pos);
if (ref != null) {
photo=ref.get();
}
if (photo != null) {
cache.photoView.setImageBitmap(photo);
}
 else {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
  sendFetchImageMessage(cache.photoView);
}
 else {
  mItemsMissingImages.add(cache.photoView);
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ContactListItemCache cache=(ContactListItemCache)view.getTag();
  TextView dataView=cache.dataView;
  TextView labelView=cache.labelView;
  int typeColumnIndex;
  int dataColumnIndex;
  int labelColumnIndex;
  int defaultType;
  int nameColumnIndex;
  boolean displayAdditionalData=mDisplayAdditionalData;
switch (mMode) {
case MODE_PICK_PHONE:
case MODE_LEGACY_PICK_PHONE:
{
      nameColumnIndex=PHONE_DISPLAY_NAME_COLUMN_INDEX;
      dataColumnIndex=PHONE_NUMBER_COLUMN_INDEX;
      typeColumnIndex=PHONE_TYPE_COLUMN_INDEX;
      labelColumnIndex=PHONE_LABEL_COLUMN_INDEX;
      defaultType=Phone.TYPE_HOME;
      break;
    }
case MODE_PICK_POSTAL:
case MODE_LEGACY_PICK_POSTAL:
{
    nameColumnIndex=POSTAL_DISPLAY_NAME_COLUMN_INDEX;
    dataColumnIndex=POSTAL_ADDRESS_COLUMN_INDEX;
    typeColumnIndex=POSTAL_TYPE_COLUMN_INDEX;
    labelColumnIndex=POSTAL_LABEL_COLUMN_INDEX;
    defaultType=StructuredPostal.TYPE_HOME;
    break;
  }
default :
{
  nameColumnIndex=SUMMARY_NAME_COLUMN_INDEX;
  dataColumnIndex=-1;
  typeColumnIndex=-1;
  labelColumnIndex=-1;
  defaultType=Phone.TYPE_HOME;
  displayAdditionalData=false;
}
}
cursor.copyStringToBuffer(nameColumnIndex,cache.nameBuffer);
int size=cache.nameBuffer.sizeCopied;
if (size != 0) {
cache.nameView.setText(cache.nameBuffer.data,0,size);
}
 else {
cache.nameView.setText(mUnknownNameText);
}
if (mDisplayPhotos) {
long photoId=0;
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
photoId=cursor.getLong(SUMMARY_PHOTO_ID_COLUMN_INDEX);
}
if (photoId == 0) {
cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
}
 else {
cache.photoView.setImageBitmap(null);
Bitmap photo=null;
SoftReference<Bitmap> ref=mBitmapCache.get(photoId);
if (ref != null) {
  photo=ref.get();
  if (photo == null) {
    mBitmapCache.remove(photoId);
  }
}
if (photo != null) {
  cache.photoView.setImageBitmap(photo);
}
 else {
  cache.photoView.setTag(photoId);
  cache.photoView.setImageResource(R.drawable.ic_contact_list_picture);
  if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
    sendFetchImageMessage(cache.photoView);
  }
 else {
    mItemsMissingImages.add(cache.photoView);
  }
}
}
}
if (!displayAdditionalData) {
cache.dataView.setVisibility(View.GONE);
cache.labelView.setVisibility(View.GONE);
cache.presenceView.setVisibility(View.GONE);
return;
}
cursor.copyStringToBuffer(dataColumnIndex,cache.dataBuffer);
size=cache.dataBuffer.sizeCopied;
if (size != 0) {
dataView.setText(cache.dataBuffer.data,0,size);
dataView.setVisibility(View.VISIBLE);
}
 else {
dataView.setVisibility(View.GONE);
}
if (!cursor.isNull(typeColumnIndex)) {
labelView.setVisibility(View.VISIBLE);
int type=cursor.getInt(typeColumnIndex);
if (type != CommonDataKinds.BaseTypes.TYPE_CUSTOM) {
try {
  labelView.setText(mLocalizedLabels[type - 1]);
}
 catch (ArrayIndexOutOfBoundsException e) {
  labelView.setText(mLocalizedLabels[defaultType - 1]);
}
}
 else {
cursor.copyStringToBuffer(labelColumnIndex,cache.labelBuffer);
labelView.setText(cache.labelBuffer.data,0,cache.labelBuffer.sizeCopied);
}
}
 else {
labelView.setVisibility(View.GONE);
}
ImageView presenceView=cache.presenceView;
if ((mMode & MODE_MASK_NO_PRESENCE) == 0) {
int serverStatus;
if (!cursor.isNull(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX)) {
serverStatus=cursor.getInt(SUMMARY_PRESENCE_STATUS_COLUMN_INDEX);
presenceView.setImageResource(Presence.getPresenceIconResourceId(serverStatus));
presenceView.setVisibility(View.VISIBLE);
}
 else {
presenceView.setVisibility(View.GONE);
}
}
 else {
presenceView.setVisibility(View.GONE);
}
}",0.9241753534199628
7425,"private void processMissingImageItems(AbsListView view){
  for (  ImageView iv : mItemsMissingImages) {
    int pos=(Integer)iv.getTag();
    sendFetchImageMessage(iv);
  }
}","private void processMissingImageItems(AbsListView view){
  for (  ImageView iv : mItemsMissingImages) {
    sendFetchImageMessage(iv);
  }
}",0.89171974522293
7426,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  long photoId=(Long)imageView.getTag();
Bitmap photo=null;
try {
photo=ContactsUtils.loadContactPhoto(mContext,photoId,null);
if (photo != null) {
  mBitmapCache.put(photoId,new SoftReference<Bitmap>(photo));
  imageView.setImageBitmap(photo);
}
}
 catch (OutOfMemoryError e) {
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.5516201959306707
7427,"public ContactItemListAdapter(Context context){
  super(context,R.layout.contacts_list_item,null,false);
  mHandler=new ImageFetchHandler();
  mAlphabet=context.getString(com.android.internal.R.string.fast_scroll_alphabet);
  mUnknownNameText=context.getText(android.R.string.unknownName);
  mLocalizedLabels=context.getResources().getStringArray(android.R.array.phoneTypes);
  if (mQueryMode != QUERY_MODE_NONE) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_NO_DATA) == MODE_MASK_NO_DATA) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_SHOW_PHOTOS) == MODE_MASK_SHOW_PHOTOS) {
    mDisplayPhotos=true;
    setViewResource(R.layout.contacts_list_item_photo);
    mBitmapCache=new SparseArray<SoftReference<Bitmap>>();
    mItemsMissingImages=new HashSet<ImageView>();
  }
  if (mMode == MODE_STREQUENT || mMode == MODE_FREQUENT) {
    mDisplaySectionHeaders=false;
  }
}","public ContactItemListAdapter(Context context){
  super(context,R.layout.contacts_list_item,null,false);
  mHandler=new ImageFetchHandler();
  mAlphabet=context.getString(com.android.internal.R.string.fast_scroll_alphabet);
  mUnknownNameText=context.getText(android.R.string.unknownName);
  mLocalizedLabels=context.getResources().getStringArray(android.R.array.phoneTypes);
  if (mQueryMode != QUERY_MODE_NONE) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_NO_DATA) == MODE_MASK_NO_DATA) {
    mDisplayAdditionalData=false;
  }
  if ((mMode & MODE_MASK_SHOW_PHOTOS) == MODE_MASK_SHOW_PHOTOS) {
    mDisplayPhotos=true;
    setViewResource(R.layout.contacts_list_item_photo);
    mBitmapCache=new HashMap<Long,SoftReference<Bitmap>>();
    mItemsMissingImages=new HashSet<ImageView>();
  }
  if (mMode == MODE_STREQUENT || mMode == MODE_FREQUENT) {
    mDisplaySectionHeaders=false;
  }
}",0.98732782369146
7428,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
7429,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
7430,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
7431,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
7432,"@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneStopper.removeMessages(STOP_TONE);
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_NONE);
synchronized (mToneGeneratorLock) {
    if (mToneGenerator != null) {
      mToneGenerator.release();
      mToneGenerator=null;
    }
  }
}",0.904639175257732
7433,"/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneStopper.removeMessages(STOP_TONE);
    mToneGenerator.startTone(tone);
    mToneStopper.sendEmptyMessageDelayed(STOP_TONE,TONE_LENGTH_MS);
  }
}","/** 
 * Plays the specified tone for TONE_LENGTH_MS milliseconds. The tone is played locally, using the audio stream for phone calls. Tones are played only if the ""Audible touch tones"" user preference is checked, and are NOT played if the device is in silent mode.
 * @param tone a tone code from {@link ToneGenerator}
 */
void playTone(int tone){
  if (!mDTMFToneEnabled) {
    return;
  }
  AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  int ringerMode=audioManager.getRingerMode();
  if ((ringerMode == AudioManager.RINGER_MODE_SILENT) || (ringerMode == AudioManager.RINGER_MODE_VIBRATE)) {
    return;
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      Log.w(TAG,""String_Node_Str"" + tone);
      return;
    }
    mToneGenerator.startTone(tone,TONE_LENGTH_MS);
  }
}",0.9190718732314658
7434,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
7435,"@Override protected void onResume(){
  super.onResume();
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}","@Override protected void onResume(){
  super.onResume();
  mScrollState=OnScrollListener.SCROLL_STATE_IDLE;
  boolean runQuery=true;
  Activity parent=getParent();
  if (mMode == MODE_DEFAULT) {
    setDefaultMode();
  }
  if (parent != null && parent instanceof DialtactsActivity) {
    String filterText=((DialtactsActivity)parent).getAndClearFilterText();
    if (filterText != null && filterText.length() > 0) {
      getListView().setFilterText(filterText);
      runQuery=false;
    }
 else     if (mJustCreated) {
      getListView().clearTextFilter();
    }
  }
  if (mJustCreated && runQuery) {
    startQuery();
  }
  mJustCreated=false;
}",0.959101844426624
7436,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri aggUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,aggUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,aggUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  long rawContactId=ContactsUtils.queryForRawContactId(getContentResolver(),id);
  Uri rawContactUri=ContentUris.withAppendedId(RawContacts.CONTENT_URI,rawContactId);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,contactUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,rawContactUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}",0.9185667752442996
7437,"/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      long dataId=cursor.getLong(ID_COLUMN_INDEX);
      if (dataId == 0) {
        signalError();
        return false;
      }
      Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,dataId);
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,uri);
      startActivity(intent);
      return true;
    }
  }
  return false;
}","/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      boolean hasPhone=cursor.getInt(SUMMARY_HAS_PHONE_COLUMN_INDEX) != 0;
      if (!hasPhone) {
        signalError();
        return false;
      }
      String phone=ContactsUtils.querySuperPrimaryPhone(getContentResolver(),cursor.getLong(ID_COLUMN_INDEX));
      if (phone == null) {
        signalError();
        return false;
      }
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",phone,null));
      startActivity(intent);
      return true;
    }
  }
  return false;
}",0.7281831187410587
7438,"Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}","Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_JOIN_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}",0.9833333333333332
7439,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri aggUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,aggUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,aggUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri contactUri=ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
  long rawContactId=ContactsUtils.queryForRawContactId(getContentResolver(),id);
  Uri rawContactUri=ContentUris.withAppendedId(RawContacts.CONTENT_URI,rawContactId);
  menu.setHeaderTitle(cursor.getString(SUMMARY_NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,contactUri));
  int starState=cursor.getInt(SUMMARY_STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
  menu.add(0,MENU_ITEM_EDIT,0,R.string.menu_editContact).setIntent(new Intent(Intent.ACTION_EDIT,rawContactUri));
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_deleteContact);
}",0.9185667752442996
7440,"/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      long dataId=cursor.getLong(ID_COLUMN_INDEX);
      if (dataId == 0) {
        signalError();
        return false;
      }
      Uri uri=ContentUris.withAppendedId(Data.CONTENT_URI,dataId);
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,uri);
      startActivity(intent);
      return true;
    }
  }
  return false;
}","/** 
 * Calls the currently selected list item.
 * @return true if the call was initiated, false otherwise
 */
boolean callSelection(){
  ListView list=getListView();
  if (list.hasFocus()) {
    Cursor cursor=(Cursor)list.getSelectedItem();
    if (cursor != null) {
      boolean hasPhone=cursor.getInt(SUMMARY_HAS_PHONE_COLUMN_INDEX) != 0;
      if (!hasPhone) {
        signalError();
        return false;
      }
      String phone=ContactsUtils.querySuperPrimaryPhone(getContentResolver(),cursor.getLong(ID_COLUMN_INDEX));
      if (phone == null) {
        signalError();
        return false;
      }
      Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,Uri.fromParts(""String_Node_Str"",phone,null));
      startActivity(intent);
      return true;
    }
  }
  return false;
}",0.7281831187410587
7441,"Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}","Uri getPickerResultUri(long id){
switch (mMode) {
case MODE_PICK_CONTACT:
case MODE_PICK_OR_CREATE_CONTACT:
case MODE_JOIN_CONTACT:
{
      return ContentUris.withAppendedId(Contacts.CONTENT_URI,id);
    }
case MODE_LEGACY_PICK_PERSON:
case MODE_LEGACY_PICK_OR_CREATE_PERSON:
{
    return ContentUris.withAppendedId(People.CONTENT_URI,id);
  }
case MODE_PICK_PHONE:
{
  return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_PHONE:
{
return ContentUris.withAppendedId(Phones.CONTENT_URI,id);
}
case MODE_PICK_POSTAL:
{
return ContentUris.withAppendedId(Data.CONTENT_URI,id);
}
case MODE_LEGACY_PICK_POSTAL:
{
return ContentUris.withAppendedId(ContactMethods.CONTENT_URI,id);
}
default :
{
return null;
}
}
}",0.9833333333333332
7442,"@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}","@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  mAdapter.clearImageFetching();
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}",0.9420035149384886
7443,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.9883870967741936
7444,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    mHandler.clearImageFecthing();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9750479846449136
7445,"@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}","@Override protected void onStop(){
  super.onStop();
  mAdapter.setLoading(true);
  mAdapter.changeCursor(null);
  mAdapter.clearImageFetching();
  if (mMode == MODE_QUERY) {
    SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
    searchManager.stopSearch();
  }
}",0.9420035149384886
7446,"@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (!cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}","@Override public void handleMessage(Message message){
  if (ContactsListActivity.this.isFinishing()) {
    return;
  }
switch (message.what) {
case FETCH_IMAGE_MSG:
    ImageView imageView=(ImageView)message.obj;
  int pos=(Integer)imageView.getTag();
Cursor cursor=(Cursor)getItem(pos);
if (cursor != null && !cursor.isNull(SUMMARY_PHOTO_ID_COLUMN_INDEX)) {
try {
  Bitmap photo=ContactsUtils.loadContactPhoto(mContext,cursor.getInt(SUMMARY_PHOTO_ID_COLUMN_INDEX),null);
  mBitmapCache.put(pos,new SoftReference<Bitmap>(photo));
  if (photo != null) {
    imageView.setImageBitmap(photo);
  }
}
 catch (OutOfMemoryError e) {
}
}
if (imageView.getDrawable() == null) {
imageView.setImageResource(R.drawable.ic_contact_list_picture);
}
mItemsMissingImages.remove(imageView);
break;
}
}",0.9883870967741936
7447,"public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    mHandler.clearImageFecthing();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}","public void onScrollStateChanged(AbsListView view,int scrollState){
  mScrollState=scrollState;
  if (scrollState != OnScrollListener.SCROLL_STATE_IDLE) {
    clearImageFetching();
  }
 else   if (mDisplayPhotos) {
    processMissingImageItems(view);
  }
}",0.9750479846449136
7448,"private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null && info != ContactInfo.EMPTY) {
    updateCallLog(ciq,info);
  }
}","private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null) {
    updateCallLog(ciq,info);
  }
}",0.9881873727087576
7449,"/** 
 * Overridden by subclasses to control the resource used by the content view. 
 */
protected int getContentViewResource(){
  return R.layout.twelve_key_dialer;
}","/** 
 * Overridden by subclasses to control the resource used by the content view.
 */
protected int getContentViewResource(){
  return R.layout.twelve_key_dialer;
}",0.9969788519637462
7450,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  mVibrateOn=r.getBoolean(R.bool.config_enable_dialer_key_vibration);
  mVibrateDuration=(long)r.getInteger(R.integer.config_dialer_key_vibrate_duration);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(getContentViewResource());
  Resources r=getResources();
  mDigitsBackground=r.getDrawable(R.drawable.btn_dial_textfield_active);
  mDigitsEmptyBackground=r.getDrawable(R.drawable.btn_dial_textfield);
  mDeleteBackground=r.getDrawable(R.drawable.btn_dial_delete_active);
  mDeleteEmptyBackground=r.getDrawable(R.drawable.btn_dial_delete);
  mDigits=(EditText)findViewById(R.id.digits);
  mDigits.setKeyListener(DialerKeyListener.getInstance());
  mDigits.setOnClickListener(this);
  mDigits.setOnKeyListener(this);
  maybeAddNumberFormatting();
  View view=findViewById(R.id.one);
  if (view != null) {
    setupKeypad();
  }
  view=findViewById(R.id.backspace);
  view.setOnClickListener(this);
  view.setOnLongClickListener(this);
  mDelete=view;
  mDigitsAndBackspace=(View)findViewById(R.id.digitsAndBackspace);
  mDialpad=(View)findViewById(R.id.dialpad);
  mDialpadChooser=(ListView)findViewById(R.id.dialpadChooser);
  mDialpadChooser.setOnItemClickListener(this);
  if (!resolveIntent() && icicle != null) {
    super.onRestoreInstanceState(icicle);
  }
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  mVibrateOn=r.getBoolean(R.bool.config_enable_dialer_key_vibration);
  mVibrateDuration=(long)r.getInteger(R.integer.config_dialer_key_vibrate_duration);
}",0.9956736711990112
7451,"@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_VOICE_CALL,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}","@Override protected void onResume(){
  super.onResume();
  mDTMFToneEnabled=Settings.System.getInt(getContentResolver(),Settings.System.DTMF_TONE_WHEN_DIALING,1) == 1;
synchronized (mToneGeneratorLock) {
    if (mToneGenerator == null) {
      try {
        mToneGenerator=new ToneGenerator(AudioManager.STREAM_DTMF,TONE_RELATIVE_VOLUME);
      }
 catch (      RuntimeException e) {
        Log.w(TAG,""String_Node_Str"" + e);
        mToneGenerator=null;
      }
    }
  }
  Activity parent=getParent();
  if (parent != null && parent instanceof DialtactsActivity) {
    Uri dialUri=((DialtactsActivity)parent).getAndClearDialUri();
    if (dialUri != null) {
      resolveIntent();
    }
  }
  TelephonyManager telephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  telephonyManager.listen(mPhoneStateListener,PhoneStateListener.LISTEN_CALL_STATE);
  if (phoneIsInUse()) {
    mDigits.setHint(R.string.dialerDialpadHintText);
  }
 else {
    mDigits.setHint(null);
    showDialpadChooser(false);
  }
}",0.9931573802541545
7452,"private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null && info != ContactInfo.EMPTY) {
    updateCallLog(ciq,info);
  }
}","private void queryContactInfo(CallerInfoQuery ciq){
  ContactInfo info=mContactInfo.get(ciq.number);
  if (info != null && info != ContactInfo.EMPTY) {
synchronized (mRequests) {
      if (mRequests.isEmpty()) {
        mHandler.sendEmptyMessage(REDRAW);
      }
    }
  }
 else {
    Cursor phonesCursor=RecentCallsListActivity.this.getContentResolver().query(Uri.withAppendedPath(Phones.CONTENT_FILTER_URL,Uri.encode(ciq.number)),PHONES_PROJECTION,null,null,null);
    if (phonesCursor != null) {
      if (phonesCursor.moveToFirst()) {
        info=new ContactInfo();
        info.personId=phonesCursor.getLong(PERSON_ID_COLUMN_INDEX);
        info.name=phonesCursor.getString(NAME_COLUMN_INDEX);
        info.type=phonesCursor.getInt(PHONE_TYPE_COLUMN_INDEX);
        info.label=phonesCursor.getString(LABEL_COLUMN_INDEX);
        info.number=phonesCursor.getString(MATCHED_NUMBER_COLUMN_INDEX);
        info.formattedNumber=null;
        mContactInfo.put(ciq.number,info);
synchronized (mRequests) {
          if (mRequests.isEmpty()) {
            mHandler.sendEmptyMessage(REDRAW);
          }
        }
      }
      phonesCursor.close();
    }
  }
  if (info != null) {
    updateCallLog(ciq,info);
  }
}",0.9881873727087576
7453,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri dataUri=Uri.withAppendedPath(Aggregates.CONTENT_URI,id + ""String_Node_Str"");
  menu.setHeaderTitle(cursor.getString(NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,dataUri));
  long phoneId=cursor.getLong(PRIMARY_PHONE_ID_COLUMN_INDEX);
  if (phoneId > 0) {
    CharSequence label=cursor.getString(PRIMARY_PHONE_LABEL_COLUMN_INDEX);
    int type=cursor.getInt(PRIMARY_PHONE_TYPE_COLUMN_INDEX);
    label=ContactsUtils.getDisplayLabel(this,CommonDataKinds.Phone.CONTENT_ITEM_TYPE,type,label);
    Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,ContentUris.withAppendedId(Data.CONTENT_URI,id));
    menu.add(0,MENU_ITEM_CALL,0,String.format(getString(R.string.menu_callNumber),label)).setIntent(intent);
    menu.add(0,MENU_ITEM_SEND_SMS,0,R.string.menu_sendSMS).setIntent(new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",cursor.getString(PRIMARY_PHONE_NUMBER_COLUMN_INDEX),null)));
  }
  int starState=cursor.getInt(STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  if ((mMode & MODE_MASK_PICKER) == MODE_MASK_PICKER) {
    return;
  }
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long id=info.id;
  Uri dataUri=ContentUris.withAppendedId(Aggregates.CONTENT_URI,id);
  menu.setHeaderTitle(cursor.getString(NAME_COLUMN_INDEX));
  menu.add(0,MENU_ITEM_VIEW_CONTACT,0,R.string.menu_viewContact).setIntent(new Intent(Intent.ACTION_VIEW,dataUri));
  long phoneId=cursor.getLong(PRIMARY_PHONE_ID_COLUMN_INDEX);
  if (phoneId > 0) {
    CharSequence label=cursor.getString(PRIMARY_PHONE_LABEL_COLUMN_INDEX);
    int type=cursor.getInt(PRIMARY_PHONE_TYPE_COLUMN_INDEX);
    label=ContactsUtils.getDisplayLabel(this,CommonDataKinds.Phone.CONTENT_ITEM_TYPE,type,label);
    Intent intent=new Intent(Intent.ACTION_CALL_PRIVILEGED,ContentUris.withAppendedId(Data.CONTENT_URI,id));
    menu.add(0,MENU_ITEM_CALL,0,String.format(getString(R.string.menu_callNumber),label)).setIntent(intent);
    menu.add(0,MENU_ITEM_SEND_SMS,0,R.string.menu_sendSMS).setIntent(new Intent(Intent.ACTION_SENDTO,Uri.fromParts(""String_Node_Str"",cursor.getString(PRIMARY_PHONE_NUMBER_COLUMN_INDEX),null)));
  }
  int starState=cursor.getInt(STARRED_COLUMN_INDEX);
  if (starState == 0) {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_addStar);
  }
 else {
    menu.add(0,MENU_ITEM_TOGGLE_STAR,0,R.string.menu_removeStar);
  }
}",0.972877358490566
7454,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.view_contact);
  getListView().setOnCreateContextMenuListener(this);
  mNameView=(TextView)findViewById(R.id.name);
  mPhoneticNameView=(TextView)findViewById(R.id.phonetic_name);
  mPhotoView=(ImageView)findViewById(R.id.photo);
  mStarView=(CheckBox)findViewById(R.id.star);
  mStarView.setOnClickListener(this);
  long now=SystemClock.elapsedRealtime();
  int num=(int)now & 0xf;
  if (num < 9) {
    mNoPhotoResource=R.drawable.ic_contact_picture;
  }
 else   if (num < 14) {
    mNoPhotoResource=R.drawable.ic_contact_picture_2;
  }
 else {
    mNoPhotoResource=R.drawable.ic_contact_picture_3;
  }
  mUri=getIntent().getData();
  mResolver=getContentResolver();
  mSections.add(mPhoneEntries);
  mSections.add(mSmsEntries);
  mSections.add(mEmailEntries);
  mSections.add(mImEntries);
  mSections.add(mPostalEntries);
  mSections.add(mOrganizationEntries);
  mSections.add(mGroupEntries);
  mSections.add(mOtherEntries);
  mShowSmsLinksForAllPhones=true;
  mCursor=mResolver.query(mUri,AGGREGATE_PROJECTION,null,null,null);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.view_contact);
  getListView().setOnCreateContextMenuListener(this);
  mNameView=(TextView)findViewById(R.id.name);
  mPhoneticNameView=(TextView)findViewById(R.id.phonetic_name);
  mPhotoView=(ImageView)findViewById(R.id.photo);
  mStarView=(CheckBox)findViewById(R.id.star);
  mStarView.setOnClickListener(this);
  long now=SystemClock.elapsedRealtime();
  int num=(int)now & 0xf;
  if (num < 9) {
    mNoPhotoResource=R.drawable.ic_contact_picture;
  }
 else   if (num < 14) {
    mNoPhotoResource=R.drawable.ic_contact_picture_2;
  }
 else {
    mNoPhotoResource=R.drawable.ic_contact_picture_3;
  }
  mUri=Uri.withAppendedPath(getIntent().getData(),""String_Node_Str"");
  mResolver=getContentResolver();
  mSections.add(mPhoneEntries);
  mSections.add(mSmsEntries);
  mSections.add(mEmailEntries);
  mSections.add(mImEntries);
  mSections.add(mPostalEntries);
  mSections.add(mOrganizationEntries);
  mSections.add(mGroupEntries);
  mSections.add(mOtherEntries);
  mShowSmsLinksForAllPhones=true;
  mCursor=mResolver.query(mUri,AGGREGATE_PROJECTION,null,null,null);
}",0.9826539462272332
7455,"@Override protected void onRestart(){
  super.onRestart();
  if (TextUtils.isEmpty(getListView().getTextFilter())) {
    startQuery();
  }
 else {
    ((ContactItemListAdapter)getListView().getAdapter()).onContentChanged();
  }
}","@Override protected void onRestart(){
  super.onRestart();
  if (TextUtils.isEmpty(getListView().getTextFilter())) {
    startQuery();
  }
 else {
    ((ContactItemListAdapter)getListAdapter()).onContentChanged();
  }
}",0.9776785714285714
7456,"public boolean onChildClick(ExpandableListView parent,View v,int groupPosition,int childPosition,long id){
  EditEntry entry=null;
  dismissDialog(LABEL_PICKER_ALL_TYPES_DIALOG);
switch (groupPosition) {
case LABEL_PICKER_PHONES_POSITION:
{
      String[] labels=getLabelsForKind(this,Contacts.KIND_PHONE);
      final int type=getTypeFromLabelPosition(labels,childPosition);
      entry=EditEntry.newPhoneEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.Phones.CONTENT_DIRECTORY),0);
      if (type == Phones.TYPE_CUSTOM) {
        createCustomPicker(entry,mPhoneEntries);
        return true;
      }
 else {
        mPhoneEntries.add(entry);
      }
      break;
    }
case LABEL_PICKER_EMAIL_POSITION:
{
    String[] labels=getLabelsForKind(this,Contacts.KIND_EMAIL);
    final int type=getTypeFromLabelPosition(labels,childPosition);
    entry=EditEntry.newEmailEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
    if (type == ContactMethods.TYPE_CUSTOM) {
      createCustomPicker(entry,mEmailEntries);
      return true;
    }
 else {
      mEmailEntries.add(entry);
    }
    break;
  }
case LABEL_PICKER_IM_POSITION:
{
  String[] labels=getLabelsForKind(this,Contacts.KIND_IM);
  entry=EditEntry.newImEntry(EditContactActivity.this,labels[childPosition],childPosition,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
  mImEntries.add(entry);
  break;
}
case LABEL_PICKER_POSTAL_POSITION:
{
String[] labels=getLabelsForKind(this,Contacts.KIND_POSTAL);
final int type=getTypeFromLabelPosition(labels,childPosition);
entry=EditEntry.newPostalEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
if (type == ContactMethods.TYPE_CUSTOM) {
  createCustomPicker(entry,mPostalEntries);
  return true;
}
 else {
  mPostalEntries.add(entry);
}
break;
}
case LABEL_PICKER_OTHER_POSITION:
{
switch (childPosition) {
case OTHER_ORGANIZATION:
entry=EditEntry.newOrganizationEntry(EditContactActivity.this,Uri.withAppendedPath(mUri,Organizations.CONTENT_DIRECTORY),ContactMethods.TYPE_WORK);
mOtherEntries.add(entry);
break;
case OTHER_NOTE:
entry=EditEntry.newNotesEntry(EditContactActivity.this,null,mUri);
mOtherEntries.add(entry);
break;
default :
entry=null;
}
break;
}
default :
entry=null;
}
if (entry != null) {
buildViews();
View dataView=entry.view.findViewById(R.id.data);
if (dataView == null) {
entry.view.requestFocus();
}
 else {
dataView.requestFocus();
}
}
return true;
}","public boolean onChildClick(ExpandableListView parent,View v,int groupPosition,int childPosition,long id){
  EditEntry entry=null;
  dismissDialog(LABEL_PICKER_ALL_TYPES_DIALOG);
switch (groupPosition) {
case LABEL_PICKER_PHONES_POSITION:
{
      String[] labels=getLabelsForKind(this,Contacts.KIND_PHONE);
      final int type=getTypeFromLabelPosition(labels,childPosition);
      entry=EditEntry.newPhoneEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.Phones.CONTENT_DIRECTORY),0);
      if (type == Phones.TYPE_CUSTOM) {
        createCustomPicker(entry,mPhoneEntries);
        return true;
      }
 else {
        mPhoneEntries.add(entry);
      }
      break;
    }
case LABEL_PICKER_EMAIL_POSITION:
{
    String[] labels=getLabelsForKind(this,Contacts.KIND_EMAIL);
    final int type=getTypeFromLabelPosition(labels,childPosition);
    entry=EditEntry.newEmailEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
    if (type == ContactMethods.TYPE_CUSTOM) {
      createCustomPicker(entry,mEmailEntries);
      return true;
    }
 else {
      mEmailEntries.add(entry);
    }
    break;
  }
case LABEL_PICKER_IM_POSITION:
{
  String[] labels=getLabelsForKind(this,Contacts.KIND_IM);
  entry=EditEntry.newImEntry(EditContactActivity.this,labels[childPosition],childPosition,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
  mImEntries.add(entry);
  break;
}
case LABEL_PICKER_POSTAL_POSITION:
{
String[] labels=getLabelsForKind(this,Contacts.KIND_POSTAL);
final int type=getTypeFromLabelPosition(labels,childPosition);
entry=EditEntry.newPostalEntry(EditContactActivity.this,labels[childPosition],type,null,Uri.withAppendedPath(mUri,People.ContactMethods.CONTENT_DIRECTORY),0);
if (type == ContactMethods.TYPE_CUSTOM) {
  createCustomPicker(entry,mPostalEntries);
  return true;
}
 else {
  mPostalEntries.add(entry);
}
break;
}
case LABEL_PICKER_OTHER_POSITION:
{
switch (childPosition) {
case OTHER_ORGANIZATION:
entry=EditEntry.newOrganizationEntry(EditContactActivity.this,Uri.withAppendedPath(mUri,Organizations.CONTENT_DIRECTORY),Organizations.TYPE_WORK);
mOtherEntries.add(entry);
break;
case OTHER_NOTE:
entry=EditEntry.newNotesEntry(EditContactActivity.this,null,mUri);
mOtherEntries.add(entry);
break;
default :
entry=null;
}
break;
}
default :
entry=null;
}
if (entry != null) {
buildViews();
View dataView=entry.view.findViewById(R.id.data);
if (dataView == null) {
entry.view.requestFocus();
}
 else {
dataView.requestFocus();
}
}
return true;
}",0.9952317375548352
7457,"/** 
 * Compiles the script code. This will be done automatically the first time the procedure is run, but may be practical to do at other times as well in order to detect errors.
 * @throws ProcedureException if the script couldn't be compiledcorrectly
 */
public void compile() throws ProcedureException {
  JsErrorHandler errorHandler=new JsErrorHandler();
  Context cx;
  String[] lines;
  String str;
  StringBuffer code=new StringBuffer();
  int idx;
  cx=Context.enter();
  try {
    cx.setLanguageVersion(Context.VERSION_ES6);
    cx.setErrorReporter(errorHandler);
    str=(String)getBindings().getValue(BINDING_CODE);
    lines=str.split(""String_Node_Str"");
    idx=lines.length - 1;
    while (idx >= 0 && lines[idx].trim().length() <= 0) {
      idx--;
    }
    if (idx >= 0) {
      str=lines[idx];
      if (!str.contains(""String_Node_Str"")) {
        lines[idx]=""String_Node_Str"" + str;
      }
    }
    code.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      code.append(lines[i]);
      code.append(""String_Node_Str"");
    }
    code.append(""String_Node_Str"");
    script=cx.compileString(code.toString(),getName(),0,null);
    if (errorHandler.getErrorCount() > 0) {
      throw new ProcedureException(errorHandler.getErrorText());
    }
  }
 catch (  Exception e) {
    script=null;
    if (errorHandler.getErrorCount() > 0) {
      throw new ProcedureException(errorHandler.getErrorText());
    }
    throw createException(e);
  }
 finally {
    Context.exit();
  }
}","/** 
 * Compiles the script code. This will be done automatically the first time the procedure is run, but may be practical to do at other times as well in order to detect errors.
 * @throws ProcedureException if the script couldn't be compiledcorrectly
 */
public void compile() throws ProcedureException {
  JsErrorHandler errorHandler=new JsErrorHandler();
  Context cx;
  String[] lines;
  String str;
  StringBuffer code=new StringBuffer();
  int idx;
  cx=Context.enter();
  try {
    cx.setLanguageVersion(Context.VERSION_ES6);
    cx.setErrorReporter(errorHandler);
    str=(String)getBindings().getValue(BINDING_CODE);
    lines=str.split(""String_Node_Str"");
    idx=lines.length - 1;
    while (idx >= 0 && lines[idx].trim().length() <= 0) {
      idx--;
    }
    if (idx >= 0) {
      str=lines[idx];
      if (!str.contains(""String_Node_Str"") && !str.contains(""String_Node_Str"")) {
        lines[idx]=""String_Node_Str"" + str;
      }
    }
    code.append(""String_Node_Str"");
    for (int i=0; i < lines.length; i++) {
      code.append(lines[i]);
      code.append(""String_Node_Str"");
    }
    code.append(""String_Node_Str"");
    script=cx.compileString(code.toString(),getName(),0,null);
    if (errorHandler.getErrorCount() > 0) {
      throw new ProcedureException(errorHandler.getErrorText());
    }
  }
 catch (  Exception e) {
    script=null;
    if (errorHandler.getErrorCount() > 0) {
      throw new ProcedureException(errorHandler.getErrorText());
    }
    throw createException(e);
  }
 finally {
    Context.exit();
  }
}",0.9882506527415144
7458,"/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Dict and Array to replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Any Dict or Array object encountered will be traversed and copied recursively. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else   if (obj instanceof DataWrapper) {
    return unwrap(((DataWrapper)obj).getData());
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Array) {
    Array oldArr=(Array)obj;
    Array newArr=new Array(oldArr.size());
    for (int i=0; i < oldArr.size(); i++) {
      newArr.set(i,unwrap(oldArr.get(i)));
    }
    return newArr;
  }
 else   if (obj instanceof Dict) {
    Dict oldDict=(Dict)obj;
    Dict newDict=new Dict(oldDict.size());
    String[] keys=oldDict.keys();
    for (int i=0; i < keys.length; i++) {
      String key=keys[i].toString();
      newDict.set(key,unwrap(oldDict.get(key)));
    }
    return newDict;
  }
 else {
    return obj;
  }
}","/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Dict and Array to replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Any Dict or Array object encountered will be traversed and copied recursively. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else   if (obj instanceof DataWrapper) {
    return unwrap(((DataWrapper)obj).getData());
  }
 else   if (obj instanceof ConsString) {
    return obj.toString();
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Array) {
    Array oldArr=(Array)obj;
    Array newArr=new Array(oldArr.size());
    for (int i=0; i < oldArr.size(); i++) {
      newArr.set(i,unwrap(oldArr.get(i)));
    }
    return newArr;
  }
 else   if (obj instanceof Dict) {
    Dict oldDict=(Dict)obj;
    Dict newDict=new Dict(oldDict.size());
    String[] keys=oldDict.keys();
    for (int i=0; i < keys.length; i++) {
      String key=keys[i].toString();
      newDict.set(key,unwrap(oldDict.get(key)));
    }
    return newDict;
  }
 else {
    return obj;
  }
}",0.9828326180257512
7459,"/** 
 * Binds the specified object value to this field.
 * @param value      the value to bind
 * @param params     the array of SQL parameters
 * @return the new SQL text for the field
 */
public String bind(Object value,ArrayList params){
  if (value == null) {
    return bindNull();
  }
 else   if (value instanceof String && ((String)value).length() < 100) {
    return cond(column,operator,literal((String)value));
  }
 else   if (value instanceof Array) {
    return bindData((Array)value,params);
  }
 else   if (value instanceof Date) {
    params.add(new java.sql.Timestamp(((Date)value).getTime()));
    return cond(column,operator,""String_Node_Str"");
  }
 else {
    params.add(value);
    return cond(column,operator,""String_Node_Str"");
  }
}","/** 
 * Binds the specified object value to this field.
 * @param value      the value to bind
 * @param params     the array of SQL parameters
 * @return the new SQL text for the field
 */
public String bind(Object value,ArrayList params){
  if (value == null) {
    return bindNull();
  }
 else   if (value instanceof Array) {
    return bindData((Array)value,params);
  }
 else   if (value instanceof Date) {
    params.add(new java.sql.Timestamp(((Date)value).getTime()));
    return cond(column,operator,""String_Node_Str"");
  }
 else {
    params.add(value);
    return cond(column,operator,""String_Node_Str"");
  }
}",0.9026162790697676
7460,"/** 
 * Returns the host name in the request.
 * @return the host name
 */
public String getHost(){
  if (requestHost == null) {
    String str1=request.getHeader(""String_Node_Str"");
    String str2=request.getHeader(""String_Node_Str"");
    str1=RegexUtil.firstMatch(RE_HEADER_VALUE,str1);
    str2=RegexUtil.firstMatch(RE_HEADER_VALUE,str2);
    str2=StringUtils.substringBefore(str2,""String_Node_Str"");
    String str3=StringUtils.defaultIfEmpty(str1,str2);
    String str4=request.getServerName();
    requestHost=StringUtils.defaultIfEmpty(str3,str4);
  }
  return requestHost;
}","/** 
 * Returns the host name in the request.
 * @return the host name
 */
public String getHost(){
  if (requestHost == null) {
    String str1=request.getHeader(""String_Node_Str"");
    String str2=request.getHeader(""String_Node_Str"");
    str1=RegexUtil.firstMatch(RE_HEADER_VALUE,str1);
    str2=RegexUtil.firstMatch(RE_HEADER_VALUE,str2);
    str2=StringUtils.substringBefore(str2,""String_Node_Str"");
    String str3=StringUtils.defaultIfEmpty(str1,str2);
    String str4;
    try {
      str4=request.getServerName();
    }
 catch (    NumberFormatException ignore) {
      str4=""String_Node_Str"";
    }
    requestHost=StringUtils.defaultIfEmpty(str3,str4);
  }
  return requestHost;
}",0.9152276295133438
7461,"/** 
 * Unmounts a storage from the specified path. The path must have previously been used to mount a storage, which will also be destroyed by this operation.
 * @param path           the mount path
 * @throws StorageException if the storage couldn't be unmounted
 */
public void unmount(Path path) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  String msg;
  if (storage == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  updateStorageCache(path,null);
  mountedStorages.remove(mountedStorages.indexOf(storage));
  updateStorageMetadata(storage,false);
  storage.destroy();
}","/** 
 * Unmounts a storage from the specified path. The path must have previously been used to mount a storage, which will also be destroyed by this operation.
 * @param path           the mount path
 * @throws StorageException if the storage couldn't be unmounted
 */
public synchronized void unmount(Path path) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  String msg;
  if (storage == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  updateStorageCache(path,null);
  mountedStorages.remove(mountedStorages.indexOf(storage));
  updateStorageMetadata(storage,false);
  storage.destroy();
}",0.990877192982456
7462,"/** 
 * Destroys all cached objects. The objects will first be passivated and thereafter queried for their status. All modified objects will be stored persistently if possible, but errors will only be logged. If the force clean flag is set, all objects in the cache will be destroyed. Otherwise only inactive objects.<p> This method is called regularly from a background job in order to destroy inactive objects.
 * @param force          the forced clean flag
 */
public void cacheClean(boolean force){
  Iterator iter=cacheStorages.values().iterator();
  while (iter.hasNext()) {
    cacheRemove((MemoryStorage)iter.next(),Path.ROOT,true,force);
  }
}","/** 
 * Destroys all cached objects. The objects will first be passivated and thereafter queried for their status. All modified objects will be stored persistently if possible, but errors will only be logged. If the force clean flag is set, all objects in the cache will be destroyed. Otherwise only inactive objects.<p> This method is called regularly from a background job in order to destroy inactive objects.
 * @param force          the forced clean flag
 */
public synchronized void cacheClean(boolean force){
  Iterator iter=cacheStorages.values().iterator();
  while (iter.hasNext()) {
    cacheRemove((MemoryStorage)iter.next(),Path.ROOT,true,force);
  }
}",0.9901290812452544
7463,"/** 
 * Mounts a storage to a unique path. The path may not collide with a previously mounted storage, such that it would hide or be hidden by the other storage. Overlapping parent indices will be merged automatically. In addition to adding the storage to the specified path, it's contents may also be overlaid directly on the root path.
 * @param storage        the storage to mount
 * @param path           the mount path
 * @param readWrite      the read write flag
 * @param overlay        the root overlay path
 * @param prio           the root overlay search priority (higher numbersare searched before lower numbers)
 * @throws StorageException if the storage couldn't be mounted
 */
public void mount(Storage storage,Path path,boolean readWrite,Path overlay,int prio) throws StorageException {
  String msg;
  if (!path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!path.startsWith(PATH_STORAGE)) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (metadata.lookup(path) != null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  storage.setMountInfo(path,readWrite,overlay,prio);
  updateStorageMetadata(storage,true);
  mountedStorages.add(storage);
  mountedStorages.sort();
  updateStorageCache(path,overlay);
}","/** 
 * Mounts a storage to a unique path. The path may not collide with a previously mounted storage, such that it would hide or be hidden by the other storage. Overlapping parent indices will be merged automatically. In addition to adding the storage to the specified path, it's contents may also be overlaid directly on the root path.
 * @param storage        the storage to mount
 * @param path           the mount path
 * @param readWrite      the read write flag
 * @param overlay        the root overlay path
 * @param prio           the root overlay search priority (higher numbersare searched before lower numbers)
 * @throws StorageException if the storage couldn't be mounted
 */
public synchronized void mount(Storage storage,Path path,boolean readWrite,Path overlay,int prio) throws StorageException {
  String msg;
  if (!path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!path.startsWith(PATH_STORAGE)) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (metadata.lookup(path) != null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  storage.setMountInfo(path,readWrite,overlay,prio);
  updateStorageMetadata(storage,true);
  mountedStorages.add(storage);
  mountedStorages.sort();
  updateStorageCache(path,overlay);
}",0.995540308747856
7464,"/** 
 * Remounts a storage for a unique path. The path or the storage are not modified, but only the mounting options.
 * @param path           the mount path
 * @param readWrite      the read write flag
 * @param overlay        the root overlay path
 * @param prio           the root overlay search priority (higher numbersare searched before lower numbers)
 * @throws StorageException if the storage couldn't be remounted
 */
public void remount(Path path,boolean readWrite,Path overlay,int prio) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  if (storage == null) {
    String msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  updateStorageMetadata(storage,false);
  storage.setMountInfo(storage.path(),readWrite,overlay,prio);
  updateStorageMetadata(storage,true);
  mountedStorages.sort();
  updateStorageCache(path,overlay);
}","/** 
 * Remounts a storage for a unique path. The path or the storage are not modified, but only the mounting options.
 * @param path           the mount path
 * @param readWrite      the read write flag
 * @param overlay        the root overlay path
 * @param prio           the root overlay search priority (higher numbersare searched before lower numbers)
 * @throws StorageException if the storage couldn't be remounted
 */
public synchronized void remount(Path path,boolean readWrite,Path overlay,int prio) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  if (storage == null) {
    String msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  LOG.fine(""String_Node_Str"" + storage);
  updateStorageMetadata(storage,false);
  storage.setMountInfo(storage.path(),readWrite,overlay,prio);
  updateStorageMetadata(storage,true);
  mountedStorages.sort();
  updateStorageCache(path,overlay);
}",0.9931901519119958
7465,"/** 
 * Unmounts and destroys all mounted storages.
 */
public void unmountAll(){
  Storage storage;
  String msg;
  while (mountedStorages.size() > 0) {
    storage=(Storage)mountedStorages.get(mountedStorages.size() - 1);
    try {
      unmount(storage.path());
    }
 catch (    Exception e) {
      msg=""String_Node_Str"" + storage.path();
      LOG.log(Level.WARNING,msg,e);
    }
  }
}","/** 
 * Unmounts and destroys all mounted storages.
 */
public synchronized void unmountAll(){
  Storage storage;
  String msg;
  while (mountedStorages.size() > 0) {
    storage=(Storage)mountedStorages.get(mountedStorages.size() - 1);
    try {
      unmount(storage.path());
    }
 catch (    Exception e) {
      msg=""String_Node_Str"" + storage.path();
      LOG.log(Level.WARNING,msg,e);
    }
  }
}",0.9836477987421384
7466,"/** 
 * Destroys this storage. Note that the objects in the storage will NOT be destroyed by this method.
 */
public void destroy(){
  objects.clear();
  meta.clear();
  objects=null;
  meta=null;
}","/** 
 * Destroys this storage. Note that the objects in the storage will NOT be destroyed by this method.
 */
public synchronized void destroy(){
  objects.clear();
  meta.clear();
  objects=null;
  meta=null;
}",0.9682151589242054
7467,"/** 
 * Stores an object at the specified location. The path must locate a particular object or file, since direct manipulation of indices is not supported. Any previous data at the specified path will be overwritten or removed.
 * @param path           the storage location
 * @param data           the data to store
 * @throws StorageException if the data couldn't be written
 */
public void store(Path path,Object data) throws StorageException {
  String msg;
  if (path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (data == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isReadWrite()) {
    msg=""String_Node_Str"" + path();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isStorable(data)) {
    msg=""String_Node_Str"" + path() + ""String_Node_Str""+ data.getClass().getName();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  if (objects.containsKey(path)) {
    remove(path);
  }
  objects.put(path,data);
  meta.put(path,new Metadata(data.getClass(),path,path(),-1));
  indexInsert(path);
}","/** 
 * Stores an object at the specified location. The path must locate a particular object or file, since direct manipulation of indices is not supported. Any previous data at the specified path will be overwritten or removed.
 * @param path           the storage location
 * @param data           the data to store
 * @throws StorageException if the data couldn't be written
 */
public synchronized void store(Path path,Object data) throws StorageException {
  String msg;
  if (path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (data == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isReadWrite()) {
    msg=""String_Node_Str"" + path();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isStorable(data)) {
    msg=""String_Node_Str"" + path() + ""String_Node_Str""+ data.getClass().getName();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  if (objects.containsKey(path)) {
    remove(path);
  }
  objects.put(path,data);
  meta.put(path,new Metadata(data.getClass(),path,path(),-1));
  indexInsert(path);
}",0.994544691565254
7468,"/** 
 * Destroys all cached objects. The objects will first be passivated and thereafter queried for their status. All modified objects will be stored persistently if possible, but errors will only be logged. If the force clean flag is set, all objects in the cache will be destroyed. Otherwise only inactive objects.<p> This method is called regularly from a background job in order to destroy inactive objects.
 * @param force          the forced clean flag
 */
public synchronized void cacheClean(boolean force){
  Iterator iter=cacheStorages.values().iterator();
  while (iter.hasNext()) {
    cacheRemove((MemoryStorage)iter.next(),Path.ROOT,true,force);
  }
}","/** 
 * Destroys all cached objects. The objects will first be passivated and thereafter queried for their status. All modified objects will be stored persistently if possible, but errors will only be logged. If the force clean flag is set, all objects in the cache will be destroyed. Otherwise only inactive objects.<p> This method is called regularly from a background job in order to destroy inactive objects.
 * @param force          the forced clean flag
 */
public void cacheClean(boolean force){
  Iterator iter=cacheStorages.values().iterator();
  while (iter.hasNext()) {
    cacheRemove((MemoryStorage)iter.next(),Path.ROOT,true,force);
  }
}",0.9901290812452544
7469,"/** 
 * Checks if the request input matches one of the specified MIME types. The input MIME type is read from the 'Content-Type' HTTP header, not from the data stream itself.
 * @param request        the request to analyze
 * @param mimes          the MIME types to check for
 * @return true if one of the MIME types match, orfalse otherwise
 */
public static boolean isInputMatch(Request request,String[] mimes){
  return isMatch(request.getContentType(),mimes);
}","/** 
 * Checks if the request input matches one of the specified MIME types. The input MIME type is read from the 'Content-Type' HTTP header, not from the data stream itself.
 * @param request        the request to analyze
 * @param mimes          the MIME types to check for
 * @return true if one of the MIME types match, orfalse otherwise
 */
public static boolean isInputMatch(Request request,String[] mimes){
  if (request.getContentType() == null) {
    return false;
  }
 else {
    return isMatch(request.getContentType(),mimes);
  }
}",0.9226190476190476
7470,"/** 
 * Converts a string into an approximate value type. The strings ""true"" and ""false"" will be converted into boolean values. Any numeric strings will be converted into an integer. All remaining string values will be returned as-is.
 * @param value          the string to convert
 * @return the converted value
 */
private static Object toValue(String value){
  if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
    return Boolean.valueOf(value);
  }
 else   if (StringUtils.isNumeric(value)) {
    return Integer.valueOf(value);
  }
 else   if (value.startsWith(""String_Node_Str"") && StringUtils.isNumeric(value.substring(1))) {
    return new Date(Long.parseLong(value.substring(1)));
  }
 else {
    return value;
  }
}","/** 
 * Converts a string into an approximate value type. The strings ""true"" and ""false"" will be converted into boolean values. Any numeric strings will be converted into an integer. All remaining string values will be returned as-is.
 * @param value          the string to convert
 * @return the converted value
 */
private static Object toValue(String value){
  if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
    return Boolean.valueOf(value);
  }
 else   if (value.length() > 0 && StringUtils.isNumeric(value)) {
    return Integer.valueOf(value);
  }
 else   if (value.startsWith(""String_Node_Str"") && StringUtils.isNumeric(value.substring(1))) {
    return new Date(Long.parseLong(value.substring(1)));
  }
 else {
    return value;
  }
}",0.9855072463768116
7471,"/** 
 * Converts a string to an array index. The string must only consist of ASCII numbers for the conversion to succeed.
 * @param str            the string to convert
 * @return the array index, or-1 if the conversion failed
 */
private static int toIndex(String str){
  int index=-1;
  if (StringUtils.isNumeric(str)) {
    try {
      index=Integer.parseInt(str);
    }
 catch (    NumberFormatException ignore) {
    }
  }
  return str.equals(String.valueOf(index)) ? index : -1;
}","/** 
 * Converts a string to an array index. The string must only consist of ASCII numbers for the conversion to succeed.
 * @param str            the string to convert
 * @return the array index, or-1 if the conversion failed
 */
private static int toIndex(String str){
  int index=-1;
  if (str.length() > 0 && StringUtils.isNumeric(str)) {
    try {
      index=Integer.parseInt(str);
    }
 catch (    NumberFormatException ignore) {
    }
  }
  return str.equals(String.valueOf(index)) ? index : -1;
}",0.9798387096774194
7472,"/** 
 * Replaces any parameters with the corresponding argument value from the bindings.
 * @param data           the data string to process
 * @param bindings       the bindings to use
 * @return the processed data string
 * @throws ProcedureException if some parameter couldn't be found
 */
private static String replaceArguments(String data,Bindings bindings) throws ProcedureException {
  String[] names=bindings.getNames();
  for (int i=0; i < names.length; i++) {
    if (bindings.getType(names[i]) == Bindings.ARGUMENT) {
      Object value=bindings.getValue(names[i],null);
      if (value == null) {
        value=""String_Node_Str"";
      }
      data=data.replaceAll(""String_Node_Str"" + names[i],value.toString());
    }
  }
  return data;
}","/** 
 * Replaces any parameters with the corresponding argument value from the bindings.
 * @param data           the data string to process
 * @param bindings       the bindings to use
 * @return the processed data string
 * @throws ProcedureException if some parameter couldn't be found
 */
private static String replaceArguments(String data,Bindings bindings) throws ProcedureException {
  String[] names=bindings.getNames();
  for (int i=0; i < names.length; i++) {
    if (bindings.getType(names[i]) == Bindings.ARGUMENT) {
      Object value=bindings.getValue(names[i],null);
      if (value == null) {
        value=""String_Node_Str"";
      }
      data=StringUtils.replace(data,""String_Node_Str"" + names[i],value.toString());
    }
  }
  return data;
}",0.9834546657842488
7473,"/** 
 * Replaces any parameters with the corresponding argument value from the bindings.
 * @param data           the data string to process
 * @param bindings       the bindings to use
 * @return the processed data string
 * @throws ProcedureException if some parameter couldn't be found
 */
private static String replaceArguments(String data,Bindings bindings) throws ProcedureException {
  String[] names=bindings.getNames();
  Object value;
  for (int i=0; i < names.length; i++) {
    if (bindings.getType(names[i]) == Bindings.ARGUMENT) {
      value=bindings.getValue(names[i],null);
      if (value == null) {
        value=""String_Node_Str"";
      }
      data=data.replaceAll(""String_Node_Str"" + names[i],value.toString());
    }
  }
  return data;
}","/** 
 * Replaces any parameters with the corresponding argument value from the bindings.
 * @param data           the data string to process
 * @param bindings       the bindings to use
 * @return the processed data string
 * @throws ProcedureException if some parameter couldn't be found
 */
private static String replaceArguments(String data,Bindings bindings) throws ProcedureException {
  String[] names=bindings.getNames();
  Object value;
  for (int i=0; i < names.length; i++) {
    if (bindings.getType(names[i]) == Bindings.ARGUMENT) {
      value=bindings.getValue(names[i],null);
      if (value == null) {
        value=""String_Node_Str"";
      }
      data=StringUtils.replace(data,""String_Node_Str"" + names[i],value.toString());
    }
  }
  return data;
}",0.9836494440810988
7474,"/** 
 * Verifies that the specified authentication token is valid for this user.
 * @param token          the authentication token
 * @return true if the token is valid, orfalse otherwise
 */
public boolean verifyAuthToken(String token){
  String[] parts=User.decodeAuthToken(token);
  long expiry=Long.parseLong(parts[1]);
  boolean isExpired=expiry < System.currentTimeMillis();
  return isEnabled() && !isExpired && createAuthToken(expiry).equals(token);
}","/** 
 * Verifies that the specified authentication token is valid for this user.
 * @param token          the authentication token
 * @return true if the token is valid, orfalse otherwise
 */
public boolean verifyAuthToken(String token){
  String[] parts=User.decodeAuthToken(token);
  long expiry=parts.length <= 1 ? 0L : Long.parseLong(parts[1]);
  boolean isExpired=expiry < System.currentTimeMillis();
  return isEnabled() && !isExpired && createAuthToken(expiry).equals(token);
}",0.9734888653234358
7475,"/** 
 * Encodes a byte array to a string with hexadecimal numbers.
 * @param data           the byte array
 * @return the hexadecimal string with the converted data
 */
public static String encodeHexString(byte[] data){
  StringBuffer hexString=new StringBuffer();
  for (int i=0; i < data.length; i++) {
    hexString.append(Character.forDigit(data[i] & 0xF0 >> 4,16));
    hexString.append(Character.forDigit(data[i] & 0x0F,16));
  }
  return hexString.toString();
}","/** 
 * Encodes a byte array to a string with hexadecimal numbers.
 * @param data           the byte array
 * @return the hexadecimal string with the converted data
 */
public static String encodeHexString(byte[] data){
  StringBuffer hexString=new StringBuffer();
  for (int i=0; i < data.length; i++) {
    hexString.append(Character.forDigit((data[i] & 0xF0) >> 4,16));
    hexString.append(Character.forDigit(data[i] & 0x0F,16));
  }
  return hexString.toString();
}",0.997867803837953
7476,"/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Dict and Array to replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Any Dict or Array object encountered will be traversed and copied recursively. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof DataWrapper) {
    return ((DataWrapper)obj).getData();
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else   if (obj instanceof Array) {
    Array oldArr=(Array)obj;
    Array newArr=new Array(oldArr.size());
    for (int i=0; i < oldArr.size(); i++) {
      newArr.set(i,unwrap(oldArr.get(i)));
    }
    return newArr;
  }
 else   if (obj instanceof Dict) {
    Dict oldDict=(Dict)obj;
    Dict newDict=new Dict(oldDict.size());
    String[] keys=oldDict.keys();
    for (int i=0; i < keys.length; i++) {
      String key=keys[i].toString();
      newDict.set(key,unwrap(oldDict.get(key)));
    }
    return newDict;
  }
 else {
    return obj;
  }
}","/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Dict and Array to replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Any Dict or Array object encountered will be traversed and copied recursively. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else   if (obj instanceof DataWrapper) {
    return unwrap(((DataWrapper)obj).getData());
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Array) {
    Array oldArr=(Array)obj;
    Array newArr=new Array(oldArr.size());
    for (int i=0; i < oldArr.size(); i++) {
      newArr.set(i,unwrap(oldArr.get(i)));
    }
    return newArr;
  }
 else   if (obj instanceof Dict) {
    Dict oldDict=(Dict)obj;
    Dict newDict=new Dict(oldDict.size());
    String[] keys=oldDict.keys();
    for (int i=0; i < keys.length; i++) {
      String key=keys[i].toString();
      newDict.set(key,unwrap(oldDict.get(key)));
    }
    return newDict;
  }
 else {
    return obj;
  }
}",0.4890617403986388
7477,"/** 
 * Searches for a specific connection in the storage.
 * @param storage        the storage to search in
 * @param id             the connection identifier
 * @return the connection found, ornull if not found
 */
public static Connection find(Storage storage,String id){
  Object obj=storage.load(PATH.descendant(new Path(id)));
  return (obj instanceof Connection) ? (Connection)obj : null;
}","/** 
 * Searches for a specific connection in the storage.
 * @param storage        the storage to search in
 * @param id             the connection identifier
 * @return the connection found, ornull if not found
 */
public static Connection find(Storage storage,String id){
  Object obj=storage.load(new Path(PATH,id));
  return (obj instanceof Connection) ? (Connection)obj : null;
}",0.9539641943734016
7478,"/** 
 * Searches for a specific environment in the storage.
 * @param storage        the storage to search in
 * @param id             the environment identifier
 * @return the environment found, ornull if not found
 */
public static Environment find(Storage storage,String id){
  Object obj=storage.load(PATH.descendant(new Path(id)));
  return (obj instanceof Environment) ? (Environment)obj : null;
}","/** 
 * Searches for a specific environment in the storage.
 * @param storage        the storage to search in
 * @param id             the environment identifier
 * @return the environment found, ornull if not found
 */
public static Environment find(Storage storage,String id){
  Object obj=storage.load(new Path(PATH,id));
  return (obj instanceof Environment) ? (Environment)obj : null;
}",0.9546599496221664
7479,"/** 
 * Removes the specified session id from the provided storage.
 * @param storage        the storage to use
 * @param id             the session id to remove
 */
public static void remove(Storage storage,String id){
  try {
    storage.remove(PATH.child(id,false));
  }
 catch (  StorageException e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + id,e);
  }
}","/** 
 * Removes the specified session id from the provided storage.
 * @param storage        the storage to use
 * @param id             the session id to remove
 */
public static void remove(Storage storage,String id){
  try {
    storage.remove(new Path(PATH,id));
  }
 catch (  StorageException e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + id,e);
  }
}",0.9655172413793104
7480,"/** 
 * Searches for a specific session in the storage.
 * @param storage        the storage to search in
 * @param id             the session identifier
 * @return the session found, ornull if not found
 */
public static Session find(Storage storage,String id){
  Object obj=storage.load(PATH.child(id,false));
  return (obj instanceof Session) ? (Session)obj : null;
}","/** 
 * Searches for a specific session in the storage.
 * @param storage        the storage to search in
 * @param id             the session identifier
 * @return the session found, ornull if not found
 */
public static Session find(Storage storage,String id){
  Object obj=storage.load(new Path(PATH,id));
  return (obj instanceof Session) ? (Session)obj : null;
}",0.966078697421981
7481,"/** 
 * Stores the specified session in the provided storage.
 * @param storage        the storage to use
 * @param session        the session to store
 * @throws StorageException if the session couldn't be stored
 */
public static void store(Storage storage,Session session) throws StorageException {
  storage.store(PATH.child(session.id(),false),session);
}","/** 
 * Stores the specified session in the provided storage.
 * @param storage        the storage to use
 * @param session        the session to store
 * @throws StorageException if the session couldn't be stored
 */
public static void store(Storage storage,Session session) throws StorageException {
  storage.store(session.path(),session);
}",0.9460227272727272
7482,"/** 
 * Searches for a specific type in the storage.
 * @param storage        the storage to search in
 * @param id             the type identifier
 * @return the type found, ornull if not found
 */
public static Type find(Storage storage,String id){
  Object obj=storage.load(PATH.descendant(new Path(id)));
  return (obj instanceof Type) ? (Type)obj : null;
}","/** 
 * Searches for a specific type in the storage.
 * @param storage        the storage to search in
 * @param id             the type identifier
 * @return the type found, ornull if not found
 */
public static Type find(Storage storage,String id){
  Object obj=storage.load(new Path(PATH,id));
  return (obj instanceof Type) ? (Type)obj : null;
}",0.9492957746478872
7483,"/** 
 * Stores the specified used in the provided storage.
 * @param storage        the storage to use
 * @param user           the user to store
 * @throws StorageException if the user couldn't be stored
 */
public static void store(Storage storage,User user) throws StorageException {
  storage.store(PATH.child(user.id(),false),user);
}","/** 
 * Stores the specified used in the provided storage.
 * @param storage        the storage to use
 * @param user           the user to store
 * @throws StorageException if the user couldn't be stored
 */
public static void store(Storage storage,User user) throws StorageException {
  storage.store(user.path(),user);
}",0.9516616314199396
7484,"/** 
 * Searches for a specific user in the storage.
 * @param storage        the storage to search in
 * @param id             the user identifier
 * @return the user found, ornull if not found
 */
public static User find(Storage storage,String id){
  Object obj=storage.load(PATH.descendant(new Path(id)));
  return (obj instanceof User) ? (User)obj : null;
}","/** 
 * Searches for a specific user in the storage.
 * @param storage        the storage to search in
 * @param id             the user identifier
 * @return the user found, ornull if not found
 */
public static User find(Storage storage,String id){
  Object obj=storage.load(new Path(PATH,id));
  return (obj instanceof User) ? (User)obj : null;
}",0.9492957746478872
7485,"/** 
 * Copies a storage object to a new destination.
 * @param src            the source object path
 * @param dst            the destination object path
 * @param updateOnly     the copy-only-on-newer flag
 * @return true if the data was successfully copied, orfalse otherwise
 */
public static boolean delete(Path path){
  Storage storage=ApplicationContext.getInstance().getStorage();
  try {
    storage.remove(path);
    return true;
  }
 catch (  Exception e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + path,e);
    return false;
  }
}","/** 
 * Deletes a storage object or path.
 * @param path           the storage path to remove
 * @return true if the data was successfully removed, orfalse otherwise
 */
public static boolean delete(Path path){
  Storage storage=ApplicationContext.getInstance().getStorage();
  try {
    storage.remove(path);
    return true;
  }
 catch (  Exception e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + path,e);
    return false;
  }
}",0.6523955147808359
7486,"/** 
 * Copies a storage object to a new destination.
 * @param src            the source object path
 * @param dst            the destination object path
 * @param updateOnly     the copy-only-on-newer flag
 * @return true if the data was successfully copied, orfalse otherwise
 */
public static boolean store(Path path,Object data){
  Storage storage=ApplicationContext.getInstance().getStorage();
  try {
    storage.store(path,data);
    return true;
  }
 catch (  Exception e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + path,e);
    return false;
  }
}","/** 
 * Writes a data object to the storage.
 * @param path           the storage path
 * @param data           the data object
 * @return true if the data was successfully written, orfalse otherwise
 */
public static boolean store(Path path,Object data){
  Storage storage=ApplicationContext.getInstance().getStorage();
  try {
    storage.store(path,data);
    return true;
  }
 catch (  Exception e) {
    LOG.log(Level.WARNING,""String_Node_Str"" + path,e);
    return false;
  }
}",0.6698564593301436
7487,"/** 
 * Creates a new binary string wrapper.
 * @param file           the file to encapsulate
 */
public BinaryString(String data){
  this.data=data;
}","/** 
 * Creates a new binary string wrapper.
 * @param data           the string to encapsulate
 */
public BinaryString(String data){
  this.data=data;
}",0.9473684210526316
7488,"/** 
 * Serializes an array into an XML representation.
 * @param id             the data identifier
 * @param arr            the array to convert
 * @param buffer         the string buffer to append into
 */
private static void serialize(String id,Array arr,int indent,StringBuilder buffer){
  tagStart(id,""String_Node_Str"",buffer);
  for (int i=0; i < arr.size(); i++) {
    buffer.append(""String_Node_Str"");
    buffer.append(StringUtils.repeat(""String_Node_Str"",indent + 1));
    serialize(""String_Node_Str"",arr.get(i),indent + 1,buffer);
  }
  buffer.append(""String_Node_Str"");
  buffer.append(StringUtils.repeat(""String_Node_Str"",indent));
  tagEnd(id,buffer);
}","/** 
 * Serializes an array into an XML representation.
 * @param id             the data identifier
 * @param arr            the array to convert
 * @param indent         the current indentation level
 * @param buffer         the string buffer to append into
 */
private static void serialize(String id,Array arr,int indent,StringBuilder buffer){
  tagStart(id,""String_Node_Str"",buffer);
  for (int i=0; i < arr.size(); i++) {
    buffer.append(""String_Node_Str"");
    buffer.append(StringUtils.repeat(""String_Node_Str"",indent + 1));
    serialize(""String_Node_Str"",arr.get(i),indent + 1,buffer);
  }
  buffer.append(""String_Node_Str"");
  buffer.append(StringUtils.repeat(""String_Node_Str"",indent));
  tagEnd(id,buffer);
}",0.9604601006470166
7489,"/** 
 * Processes a file upload request. This is used when files are POST:ed to the special upload URL.
 * @param request        the request to process
 */
protected void processUpload(Request request){
  Session session=(Session)Session.activeSession.get();
  FileItemStream stream;
  String fileId=request.getPath();
  String fileName;
  File file;
  if (session == null) {
    errorUnauthorized(request);
    return;
  }
  try {
    stream=request.getNextFile();
    if (stream == null) {
      errorBadRequest(request,""String_Node_Str"");
      return;
    }
    fileName=stream.getName();
    if (fileName.lastIndexOf(""String_Node_Str"") >= 0) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (fileName.lastIndexOf(""String_Node_Str"") >= 0) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    while (fileId != null && fileId.startsWith(""String_Node_Str"")) {
      fileId=fileId.substring(1);
    }
    if (fileId == null || fileId.trim().length() == 0) {
      fileId=fileName;
    }
    file=FileUtil.tempFile(fileName);
    FileUtil.copy(stream.openStream(),file);
    session.addFile(fileId,file);
    request.sendText(Mime.TEXT[0],""String_Node_Str"" + fileId + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
    errorBadRequest(request,e.getMessage());
  }
}","/** 
 * Processes a file upload request. This is used when files are POST:ed to the special upload URL.
 * @param request        the request to process
 */
protected void processUpload(Request request){
  Session session=(Session)Session.activeSession.get();
  FileItemStream stream;
  String fileId=request.getPath();
  String fileName;
  File file;
  if (session == null) {
    errorUnauthorized(request);
    return;
  }
  try {
    stream=request.getNextFile();
    if (stream == null) {
      errorBadRequest(request,""String_Node_Str"");
      return;
    }
    fileName=stream.getName();
    if (fileName.lastIndexOf(""String_Node_Str"") >= 0) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (fileName.lastIndexOf(""String_Node_Str"") >= 0) {
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    while (fileId != null && fileId.startsWith(""String_Node_Str"")) {
      fileId=fileId.substring(1);
    }
    if (fileId == null || fileId.trim().length() == 0) {
      fileId=fileName;
    }
    session.removeFile(fileId);
    file=FileUtil.tempFile(fileName);
    FileUtil.copy(stream.openStream(),file);
    session.addFile(fileId,file);
    request.sendText(Mime.TEXT[0],""String_Node_Str"" + fileId + ""String_Node_Str"");
  }
 catch (  IOException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
    errorBadRequest(request,e.getMessage());
  }
}",0.9887085391672548
7490,"/** 
 * Parses a string with HTTP headers into a result value map.
 * @param map            the result name and value map
 * @param data           the unparsed header string
 */
private static void parseHeaders(LinkedHashMap map,String data){
  StringTokenizer st1;
  StringTokenizer st2;
  st1=new StringTokenizer(data,""String_Node_Str"");
  while (st1.hasMoreTokens()) {
    st2=new StringTokenizer(st1.nextToken(),""String_Node_Str"");
    map.put(st2.nextToken().trim(),st2.nextToken().trim());
  }
}","/** 
 * Parses a string with HTTP headers into a result value map.
 * @param map            the result name and value map
 * @param data           the unparsed header string
 */
private static void parseHeaders(LinkedHashMap map,String data){
  for (  String line : data.split(""String_Node_Str"")) {
    String[] parts=line.split(""String_Node_Str"",2);
    if (parts.length == 2) {
      map.put(parts[0].trim(),parts[1].trim());
    }
  }
}",0.6829787234042554
7491,"/** 
 * Finds all binary files of a specified type from the storage. Only binary files in the named subdirectory (i.e. ""files/css"") with the specified type as suffix (i.e. ""*.css"") will be returned.
 * @param type           the file type to find
 * @return a sorted list of all matching files (relative paths)found in storage
 */
protected static Array findFileResources(String type){
  ApplicationContext ctx=ApplicationContext.getInstance();
  String root=FileRequestHandler.PATH_FILES.toString();
  Path path=FileRequestHandler.PATH_FILES.child(type,true);
  Metadata[] meta;
  String file;
  Array res=new Array();
  meta=ctx.getStorage().lookupAll(path);
  for (int i=0; i < meta.length; i++) {
    file=StringUtils.removeStart(meta[i].path().toString(),root);
    if (meta[i].isBinary() && file.endsWith(""String_Node_Str"" + type)) {
      res.add(file);
    }
  }
  res.sort();
  return res;
}","/** 
 * Finds all binary files of a specified type from the storage. Only binary files in the named subdirectory (i.e. ""files/css"") with the specified type as suffix (i.e. ""*.css"") will be returned.
 * @param type           the file type to find
 * @return a sorted list of all matching files (relative paths)found in storage
 */
protected static Array findFileResources(String type){
  ApplicationContext ctx=ApplicationContext.getInstance();
  String root=FileRequestHandler.PATH_FILES.toString();
  Path path=FileRequestHandler.PATH_FILES.child(type,true);
  Dict dict;
  Metadata[] meta;
  String file;
  Array res=new Array();
  dict=(Dict)ctx.getStorage().load(PluginManager.PATH_INFO);
  meta=ctx.getStorage().lookupAll(path);
  for (int i=0; i < meta.length; i++) {
    file=StringUtils.removeStart(meta[i].path().toString(),root);
    if (meta[i].isBinary() && file.endsWith(""String_Node_Str"" + type)) {
      res.add(file + ""String_Node_Str"" + dict.getString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  res.sort();
  return res;
}",0.9239465570400822
7492,"/** 
 * Processes an HTML app launcher request. This method loads the app launcher template from storage and replaces all template variables with their corresponding search results and values.
 * @param request        the request to process
 * @param appId          the app identifier to launch (or null)
 * @throws StorageException if the app template couln't be found
 * @throws IOException if the template file couldn't be read properly
 */
protected static void processApp(Request request,String appId) throws StorageException, IOException {
  ApplicationContext ctx=ApplicationContext.getInstance();
  Path path;
  Binary template;
  InputStreamReader is;
  BufferedReader reader;
  String line;
  Array files;
  Object obj;
  StringBuilder res=new StringBuilder();
  path=FileRequestHandler.PATH_FILES.child(""String_Node_Str"",false);
  obj=ctx.getStorage().load(path);
  if (obj instanceof Binary) {
    template=(Binary)obj;
  }
 else {
    throw new StorageException(""String_Node_Str"");
  }
  is=new InputStreamReader(template.openStream(),""String_Node_Str"");
  reader=new BufferedReader(is);
  while ((line=reader.readLine()) != null) {
    if (line.contains(""String_Node_Str"")) {
      res.append(line.replace(""String_Node_Str"",JsSerializer.serialize(appId)));
      res.append(""String_Node_Str"");
    }
 else     if (line.contains(""String_Node_Str"")) {
      res.append(line.replace(""String_Node_Str"",request.getRootUrl()));
      res.append(""String_Node_Str"");
    }
 else     if (line.contains(""String_Node_Str"")) {
      files=findFileResources(""String_Node_Str"");
      for (int i=0; i < files.size(); i++) {
        res.append(line.replace(""String_Node_Str"",files.getString(i,""String_Node_Str"")));
        res.append(""String_Node_Str"");
      }
    }
 else     if (line.contains(""String_Node_Str"")) {
      files=findFileResources(""String_Node_Str"");
      for (int i=0; i < files.size(); i++) {
        res.append(line.replace(""String_Node_Str"",files.getString(i,""String_Node_Str"")));
        res.append(""String_Node_Str"");
      }
    }
 else {
      res.append(line);
      res.append(""String_Node_Str"");
    }
  }
  reader.close();
  request.sendText(Mime.HTML[0],res.toString());
}","/** 
 * Processes an HTML app launcher request. This method loads the app launcher template from storage and replaces all template variables with their corresponding search results and values.
 * @param request        the request to process
 * @param appId          the app identifier to launch (or null)
 * @throws StorageException if the app template couln't be found
 * @throws IOException if the template file couldn't be read properly
 */
protected static void processApp(Request request,String appId) throws StorageException, IOException {
  ApplicationContext ctx=ApplicationContext.getInstance();
  Path path;
  Binary template;
  InputStreamReader is;
  BufferedReader reader;
  String line;
  Array files;
  Object obj;
  StringBuilder res=new StringBuilder();
  path=FileRequestHandler.PATH_FILES.child(""String_Node_Str"",false);
  obj=ctx.getStorage().load(path);
  if (obj instanceof Binary) {
    template=(Binary)obj;
  }
 else {
    throw new StorageException(""String_Node_Str"");
  }
  is=new InputStreamReader(template.openStream(),""String_Node_Str"");
  reader=new BufferedReader(is);
  while ((line=reader.readLine()) != null) {
    if (line.contains(""String_Node_Str"")) {
      if (appId == null) {
        res.append(line.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        res.append(line.replace(""String_Node_Str"",""String_Node_Str"" + appId + ""String_Node_Str""));
      }
      res.append(""String_Node_Str"");
    }
 else     if (line.contains(""String_Node_Str"")) {
      res.append(line.replace(""String_Node_Str"",request.getRootUrl()));
      res.append(""String_Node_Str"");
    }
 else     if (line.contains(""String_Node_Str"")) {
      files=findFileResources(""String_Node_Str"");
      for (int i=0; i < files.size(); i++) {
        res.append(line.replace(""String_Node_Str"",files.getString(i,""String_Node_Str"")));
        res.append(""String_Node_Str"");
      }
    }
 else     if (line.contains(""String_Node_Str"")) {
      files=findFileResources(""String_Node_Str"");
      for (int i=0; i < files.size(); i++) {
        res.append(line.replace(""String_Node_Str"",files.getString(i,""String_Node_Str"")));
        res.append(""String_Node_Str"");
      }
    }
 else {
      res.append(line);
      res.append(""String_Node_Str"");
    }
  }
  reader.close();
  request.sendText(Mime.HTML[0],res.toString());
}",0.957306338028169
7493,"/** 
 * Unmounts a storage from the specified path. The path must have previously been used to mount a storage, which will also be destroyed by this operation.
 * @param path           the mount path
 * @throws StorageException if the storage couldn't be unmounted
 */
public void unmount(Path path) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  String msg;
  if (storage == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  updateStorageCache(path,false);
  mountedStorages.remove(mountedStorages.indexOf(storage));
  setMountedStorage(path,null);
}","/** 
 * Unmounts a storage from the specified path. The path must have previously been used to mount a storage, which will also be destroyed by this operation.
 * @param path           the mount path
 * @throws StorageException if the storage couldn't be unmounted
 */
public void unmount(Path path) throws StorageException {
  Storage storage=getMountedStorage(path,true);
  String msg;
  if (storage == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  updateStorageCache(path,false);
  mountedStorages.remove(mountedStorages.indexOf(storage));
  setMountedStorage(path,null);
  storage.destroy();
}",0.9837837837837838
7494,"/** 
 * Locates the file references by the specified path. If no file is named exactly as the last path name, the properties file extension is appended to the name.
 * @param path           the storage location
 * @return the file referenced by the path, ornull if no existing file was found
 */
private File locateFile(Path path){
  File dir=locateDir(path);
  File file=dir;
  if (!path.isIndex()) {
    file=new File(dir,path.name());
    if (!file.canRead()) {
      file=new File(dir,path.name() + SUFFIX_PROPS);
    }
  }
  return file.canRead() ? file : null;
}","/** 
 * Locates the file references by the specified path. If no file is named exactly as the last path name, the properties file extension is appended to the name.
 * @param path           the storage location
 * @return the file referenced by the path, ornull if no existing file was found
 */
private File locateFile(Path path){
  File dir=locateDir(path);
  File file=dir;
  if (!path.isIndex()) {
    file=new File(dir,path.name());
    if (!file.canRead()) {
      file=new File(dir,path.name() + SUFFIX_PROPS);
    }
  }
  if (file.isDirectory() != path.isIndex()) {
    return null;
  }
 else {
    return file.canRead() ? file : null;
  }
}",0.933442892358258
7495,"/** 
 * Stores an object at the specified location. The path must locate a particular object or file, since direct manipulation of indices is not supported. Any previous data at the specified path will be overwritten or removed. Note that only dictionaries and files can be stored in a file storage.
 * @param path           the storage location
 * @param data           the data to store
 * @throws StorageException if the data couldn't be written
 */
public void store(Path path,Object data) throws StorageException {
  String msg;
  File file;
  if (path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (data == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isReadWrite()) {
    msg=""String_Node_Str"" + path();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (PATH_STORAGEINFO.equals(path)) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  if (data instanceof StorableObject) {
    data=((StorableObject)data).serialize();
  }
  if (data instanceof Dict) {
    file=locateDir(path);
    file.mkdirs();
    file=new File(file,path.name() + SUFFIX_PROPS);
    try {
      PropertiesSerializer.write(file,(Dict)data);
    }
 catch (    IOException e) {
      msg=""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage();
      LOG.warning(msg);
      throw new StorageException(msg);
    }
  }
 else   if (data instanceof File) {
    file=locateDir(path);
    file.mkdirs();
    file=new File(file,path.name());
    ((File)data).renameTo(file);
  }
 else {
    throw new StorageException(""String_Node_Str"");
  }
}","/** 
 * Stores an object at the specified location. The path must locate a particular object or file, since direct manipulation of indices is not supported. Any previous data at the specified path will be overwritten or removed. Note that only dictionaries and files can be stored in a file storage.
 * @param path           the storage location
 * @param data           the data to store
 * @throws StorageException if the data couldn't be written
 */
public void store(Path path,Object data) throws StorageException {
  String msg;
  File file;
  if (path.isIndex()) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (data == null) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (!isReadWrite()) {
    msg=""String_Node_Str"" + path();
    LOG.warning(msg);
    throw new StorageException(msg);
  }
 else   if (PATH_STORAGEINFO.equals(path)) {
    msg=""String_Node_Str"" + path;
    LOG.warning(msg);
    throw new StorageException(msg);
  }
  if (data instanceof StorableObject) {
    data=((StorableObject)data).serialize();
  }
  if (data instanceof Dict) {
    file=locateDir(path);
    file.mkdirs();
    file=new File(file,path.name() + SUFFIX_PROPS);
    try {
      PropertiesSerializer.write(file,(Dict)data);
    }
 catch (    IOException e) {
      msg=""String_Node_Str"" + file + ""String_Node_Str""+ e.getMessage();
      LOG.warning(msg);
      throw new StorageException(msg);
    }
  }
 else   if (data instanceof File) {
    file=locateDir(path);
    file.mkdirs();
    file=new File(file,path.name());
    if (!((File)data).renameTo(file)) {
      msg=""String_Node_Str"" + data + ""String_Node_Str""+ file;
      LOG.warning(msg);
      throw new StorageException(msg);
    }
  }
 else {
    throw new StorageException(""String_Node_Str"");
  }
}",0.9557766721945826
7496,"/** 
 * Executes a call of this procedure in the specified context and with the specified call bindings. The semantics of what the procedure actually does, is up to each implementation. Note that the call bindings are normally inherited from the procedure bindings with arguments bound to their call values.
 * @param cx             the procedure call context
 * @param bindings       the call bindings to use
 * @return the result of the call, ornull if the call produced no result
 * @throws ProcedureException if the call execution caused anerror
 */
public Object call(CallContext cx,Bindings bindings) throws ProcedureException {
  Library library=cx.getLibrary();
  String[] names;
  Array list;
  names=library.getProcedureNames();
  list=new Array(names.length);
  for (int i=0; i < names.length; i++) {
    if (SecurityContext.hasAccess(""String_Node_Str"",names[i],""String_Node_Str"")) {
      list.add(names[i]);
    }
  }
  list.sort();
  return list;
}","/** 
 * Executes a call of this procedure in the specified context and with the specified call bindings. The semantics of what the procedure actually does, is up to each implementation. Note that the call bindings are normally inherited from the procedure bindings with arguments bound to their call values.
 * @param cx             the procedure call context
 * @param bindings       the call bindings to use
 * @return the result of the call, ornull if the call produced no result
 * @throws ProcedureException if the call execution caused anerror
 */
public Object call(CallContext cx,Bindings bindings) throws ProcedureException {
  Library library=cx.getLibrary();
  String[] names;
  Array list;
  names=library.getProcedureNames();
  list=new Array(names.length);
  for (int i=0; i < names.length; i++) {
    if (library.hasBuiltIn(names[i])) {
      if (SecurityContext.hasAccess(library.getProcedure(names[i]))) {
        list.add(names[i]);
      }
    }
 else     if (SecurityContext.hasAccess(""String_Node_Str"",names[i],""String_Node_Str"")) {
      list.add(names[i]);
    }
  }
  list.sort();
  return list;
}",0.9236677868458952
7497,"/** 
 * Prepares an SQL statement.
 * @param sql            the SQL statement to prepare
 * @param params         the optional list of parameters
 * @return the prepared SQL statement
 * @throws ConnectionException if the statement couldn't be prepared
 */
protected PreparedStatement prepare(String sql,ArrayList params) throws ConnectionException {
  PreparedStatement stmt;
  Object obj;
  String str;
  try {
    stmt=con.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,ResultSet.CLOSE_CURSORS_AT_COMMIT);
    for (int i=0; params != null && i < params.size(); i++) {
      obj=params.get(i);
      if (obj instanceof String && ((String)obj).length() > 255) {
        str=(String)params.get(i);
        stmt.setCharacterStream(i + 1,new StringReader(str),str.length());
      }
 else {
        stmt.setObject(i + 1,obj);
      }
    }
    stmt.setQueryTimeout(timeout);
    stmt.setFetchSize(Integer.MIN_VALUE);
    return stmt;
  }
 catch (  SQLException e) {
    str=""String_Node_Str"" + e.getMessage();
    throw new ConnectionException(str);
  }
}","/** 
 * Prepares an SQL statement.
 * @param sql            the SQL statement to prepare
 * @param params         the optional list of parameters
 * @return the prepared SQL statement
 * @throws ConnectionException if the statement couldn't be prepared
 */
protected PreparedStatement prepare(String sql,ArrayList params) throws ConnectionException {
  PreparedStatement stmt;
  Object obj;
  String str;
  try {
    stmt=con.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,ResultSet.CLOSE_CURSORS_AT_COMMIT);
    for (int i=0; params != null && i < params.size(); i++) {
      obj=params.get(i);
      if (obj instanceof String && ((String)obj).length() > 255) {
        str=(String)params.get(i);
        stmt.setCharacterStream(i + 1,new StringReader(str),str.length());
      }
 else {
        stmt.setObject(i + 1,obj);
      }
    }
    stmt.setQueryTimeout(timeout);
    return stmt;
  }
 catch (  SQLException e) {
    str=""String_Node_Str"" + e.getMessage();
    throw new ConnectionException(str);
  }
}",0.9802073515551368
7498,"/** 
 * Unloads all plug-ins. All plug-in classes will be destroyed and the plug-in file storages will be hidden from the root overlay. Note that the built-in plug-ins will be unaffected by this.
 */
public void unloadAll(){
  Object[] objs;
  String pluginId;
  objs=storage.loadAll(PATH_PLUGIN);
  for (int i=0; i < objs.length; i++) {
    if (objs[i] instanceof Plugin) {
      pluginId=((Plugin)objs[i]).id();
      try {
        unload(pluginId);
      }
 catch (      PluginException e) {
        LOG.warning(""String_Node_Str"" + pluginId + ""String_Node_Str"");
      }
    }
  }
  classLoader=new PluginClassLoader();
}","/** 
 * Unloads all plug-ins. All plug-in classes will be destroyed and the plug-in file storages will be hidden from the root overlay. Note that the built-in plug-ins will be unaffected by this.
 */
public void unloadAll(){
  Object[] objs;
  String pluginId;
  objs=storage.loadAll(PATH_PLUGIN);
  for (int i=0; i < objs.length; i++) {
    if (objs[i] instanceof Plugin) {
      pluginId=((Plugin)objs[i]).id();
      try {
        unload(pluginId);
      }
 catch (      PluginException e) {
        LOG.warning(""String_Node_Str"" + pluginId + ""String_Node_Str"");
      }
    }
  }
  storage.flush(null);
  classLoader=new PluginClassLoader();
}",0.981904012588513
7499,"/** 
 * Loads an object from the specified storage. The storage cache will be used primarily, if it exists. If an object is found in the storage that can be cached, it will be initialized and cached by this method.
 * @param storage        the storage to load from
 * @param path           the storage location
 * @return the data read, ornull if not found
 */
private Object loadObject(Storage storage,Path path){
  MemoryStorage cache;
  Object res=null;
  String id;
  String msg;
  cache=(MemoryStorage)cacheStorages.get(storage.path());
  if (cache != null) {
    res=cache.load(path);
    if (res instanceof StorableObject) {
      return res;
    }
  }
  res=storage.load(path);
  if (cache != null && res instanceof Dict) {
    id=StringUtils.removeStart(path.subPath(1).toString(),""String_Node_Str"");
    res=initialize(id,(Dict)res);
    if (res instanceof StorableObject) {
      try {
        cache.store(path,res);
      }
 catch (      StorageException e) {
        msg=""String_Node_Str"" + cache.path();
        LOG.log(Level.WARNING,msg,e);
      }
    }
  }
  return res;
}","/** 
 * Loads an object from the specified storage. The storage cache will be used primarily, if it exists. If an object is found in the storage that can be cached, it will be initialized and cached by this method.
 * @param storage        the storage to load from
 * @param path           the storage location
 * @return the data read, ornull if not found
 */
private Object loadObject(Storage storage,Path path){
  MemoryStorage cache;
  Object res=null;
  String id;
  String msg;
  LOG.fine(""String_Node_Str"" + path + ""String_Node_Str""+ storage.path());
  cache=(MemoryStorage)cacheStorages.get(storage.path());
  if (cache != null) {
    res=cache.load(path);
    if (res instanceof StorableObject && !(res instanceof Index)) {
      LOG.fine(""String_Node_Str"" + path + ""String_Node_Str""+ res);
      return res;
    }
  }
  res=storage.load(path);
  LOG.fine(""String_Node_Str"" + path + ""String_Node_Str""+ res);
  if (cache != null && res instanceof Dict) {
    id=StringUtils.removeStart(path.subPath(1).toString(),""String_Node_Str"");
    res=initialize(id,(Dict)res);
    if (res instanceof StorableObject) {
      try {
        cache.store(path,res);
        LOG.fine(""String_Node_Str"" + path + ""String_Node_Str""+ res);
      }
 catch (      StorageException e) {
        msg=""String_Node_Str"" + cache.path();
        LOG.log(Level.WARNING,msg,e);
      }
    }
  }
  return res;
}",0.8789346246973365
7500,"/** 
 * Compares two storages with one another.
 * @param o1             the first object
 * @param o2             the second object
 * @return a negative integer, zero, or a positive integer asthe first argument is less than, equal to, or greater than the second
 * @throws ClassCastException if the values were not comparable
 */
public int compare(Object o1,Object o2){
  Storage s1=(Storage)o1;
  Storage s2=(Storage)o2;
  int cmp1=prio(s1) - prio(s2);
  int cmp2=mountTime(s2).compareTo(mountTime(s2));
  return (cmp1 != 0) ? -cmp1 : cmp2;
}","/** 
 * Compares two storages with one another.
 * @param o1             the first object
 * @param o2             the second object
 * @return a negative integer, zero, or a positive integer asthe first argument is less than, equal to, or greater than the second
 * @throws ClassCastException if the values were not comparable
 */
public int compare(Object o1,Object o2){
  Storage s1=(Storage)o1;
  Storage s2=(Storage)o2;
  int cmp1=prio(s1) - prio(s2);
  int cmp2=s1.mountTime().compareTo(s2.mountTime());
  return (cmp1 != 0) ? -cmp1 : cmp2;
}",0.9908592321755028
7501,"/** 
 * Sets an indexed property in this object.
 * @param index          the index of the property
 * @param start          the object in which the lookup began
 * @param value          the value to set
 */
public void put(int index,Scriptable start,Object value){
  if (data instanceof Array) {
    ((Array)data).set(index,JsSerializer.unwrap(value));
  }
}","/** 
 * Sets an indexed property in this object.
 * @param index          the index of the property
 * @param start          the object in which the lookup began
 * @param value          the value to set
 */
public void put(int index,Scriptable start,Object value){
  if (data instanceof Array) {
    ((Array)data).set(index,value);
  }
}",0.9555236728837876
7502,"/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Data replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof DataWrapper) {
    return ((DataWrapper)obj).getData();
  }
 else   if (obj instanceof ConnectionWrapper) {
    return ((ConnectionWrapper)obj).getConnection();
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else {
    return obj;
  }
}","/** 
 * Removes all JavaScript classes and replaces them with the corresponding Java objects. This method will use instances of Dict and Array to replace native JavaScript objects and arrays. Also, it will replace both JavaScript ""null"" and ""undefined"" with null. Any Dict or Array object encountered will be traversed and modified in-place recursively. Other objects will be returned as-is.
 * @param obj            the object to unwrap
 * @return the unwrapped object
 * @see org.rapidcontext.core.data.Array
 * @see org.rapidcontext.core.data.Dict
 */
public static Object unwrap(Object obj){
  if (obj instanceof DataWrapper) {
    return ((DataWrapper)obj).getData();
  }
 else   if (obj instanceof ConnectionWrapper) {
    return ((ConnectionWrapper)obj).getConnection();
  }
 else   if (obj instanceof NativeArray) {
    NativeArray nativeArr=(NativeArray)obj;
    int length=(int)nativeArr.getLength();
    Array arr=new Array(length);
    for (int i=0; i < length; i++) {
      arr.set(i,unwrap(nativeArr.get(i,nativeArr)));
    }
    return arr;
  }
 else   if (obj instanceof Scriptable) {
    Scriptable scr=(Scriptable)obj;
    Object[] keys=scr.getIds();
    Dict dict=new Dict(keys.length);
    for (int i=0; i < keys.length; i++) {
      String str=keys[i].toString();
      Object value=null;
      if (keys[i] instanceof Integer) {
        value=scr.get(((Integer)keys[i]).intValue(),scr);
      }
 else {
        value=scr.get(str,scr);
      }
      dict.set(str,unwrap(value));
    }
    return dict;
  }
 else   if (obj instanceof Undefined || obj == Scriptable.NOT_FOUND) {
    return null;
  }
 else   if (obj instanceof Array) {
    Array arr=(Array)obj;
    for (int i=0; i < arr.size(); i++) {
      arr.set(i,unwrap(arr.get(i)));
    }
    return arr;
  }
 else   if (obj instanceof Dict) {
    Dict dict=(Dict)obj;
    String[] keys=dict.keys();
    for (int i=0; i < keys.length; i++) {
      String key=keys[i].toString();
      dict.set(key,unwrap(dict.get(key)));
    }
    return dict;
  }
 else {
    return obj;
  }
}",0.8501529051987767
7503,"/** 
 * Installs a plug-in from the specified file. If an existing plug-in with the same id already exists, it will be replaced without warning. Note that the new plug-in will NOT be loaded.
 * @param file           the plug-in ZIP file
 * @return the unique plug-in id
 * @throws PluginException if the plug-in couldn't be installedcorrectly
 */
public String install(File file) throws PluginException {
  ZipFile zip=null;
  ZipEntry entry;
  InputStream is;
  Properties props;
  String pluginId;
  File dir;
  String msg;
  try {
    zip=new ZipFile(file);
    entry=zip.getEntry(""String_Node_Str"");
    if (entry == null) {
      msg=""String_Node_Str"" + file.getName();
      LOG.warning(msg);
      throw new PluginException(msg);
    }
    is=zip.getInputStream(entry);
    props=new Properties();
    try {
      props.load(is);
    }
  finally {
      try {
        is.close();
      }
 catch (      Exception ignore) {
      }
    }
    pluginId=props.getProperty(Plugin.KEY_ID);
    if (pluginId == null || pluginId.trim().length() < 0) {
      msg=""String_Node_Str"";
      throw new PluginException(msg);
    }
    dir=new File(pluginDir,pluginId);
    if (dir.exists()) {
      unload(pluginId);
      destroyStorage(pluginId);
      FileUtil.delete(dir);
    }
    FileUtil.unpackZip(zip,dir);
  }
 catch (  IOException e) {
    msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getMessage();
    LOG.warning(msg);
    throw new PluginException(msg);
  }
 finally {
    if (zip != null) {
      try {
        zip.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  createStorage(pluginDir,pluginId);
  return pluginId;
}","/** 
 * Installs a plug-in from the specified file. If an existing plug-in with the same id already exists, it will be replaced without warning. Note that the new plug-in will NOT be loaded.
 * @param file           the plug-in ZIP file
 * @return the unique plug-in id
 * @throws PluginException if the plug-in couldn't be installedcorrectly
 */
public String install(File file) throws PluginException {
  ZipFile zip=null;
  ZipEntry entry;
  InputStream is;
  Properties props;
  String pluginId;
  File dir;
  String msg;
  try {
    zip=new ZipFile(file);
    entry=zip.getEntry(""String_Node_Str"");
    if (entry == null) {
      msg=""String_Node_Str"" + file.getName();
      LOG.warning(msg);
      throw new PluginException(msg);
    }
    is=zip.getInputStream(entry);
    props=new Properties();
    try {
      props.load(is);
    }
  finally {
      try {
        is.close();
      }
 catch (      Exception ignore) {
      }
    }
    pluginId=props.getProperty(Plugin.KEY_ID);
    if (pluginId == null || pluginId.trim().length() < 0) {
      msg=""String_Node_Str"";
      throw new PluginException(msg);
    }
    if (isAvailable(pluginId)) {
      unload(pluginId);
      destroyStorage(pluginId);
    }
    dir=new File(pluginDir,pluginId);
    if (dir.exists()) {
      FileUtil.delete(dir);
    }
    FileUtil.unpackZip(zip,dir);
  }
 catch (  IOException e) {
    msg=""String_Node_Str"" + file.getName() + ""String_Node_Str""+ e.getMessage();
    LOG.warning(msg);
    throw new PluginException(msg);
  }
 finally {
    if (zip != null) {
      try {
        zip.close();
      }
 catch (      IOException ignore) {
      }
    }
  }
  createStorage(pluginDir,pluginId);
  return pluginId;
}",0.9617551141417136
7504,"/** 
 * Loads an object from the specified location. The path may locate either an index or a specific object. In case of an index, the data returned is an index dictionary listing of all objects in it.
 * @param path           the storage location
 * @return the data read, ornull if not found
 */
public Object load(Path path){
  File file=locateFile(path);
  String msg;
  if (file == null) {
    return path.isIndex() ? new Index() : null;
  }
 else   if (path.isIndex()) {
    Index idx=new Index();
    File[] files=file.listFiles();
    for (int i=0; i < files.length; i++) {
      String name=files[i].getName();
      if (files[i].isDirectory()) {
        idx.addIndex(name);
      }
 else {
        idx.addObject(StringUtils.removeEnd(name,SUFFIX_PROPS));
      }
    }
    idx.updateLastModified(new Date(file.lastModified()));
    return idx;
  }
 else   if (file.getName().endsWith(SUFFIX_PROPS)) {
    try {
      return PropertiesSerializer.read(file);
    }
 catch (    FileNotFoundException e) {
      msg=""String_Node_Str"" + file.toString();
      LOG.log(Level.SEVERE,msg,e);
      return null;
    }
catch (    IOException e) {
      msg=""String_Node_Str"" + file.toString();
      LOG.log(Level.SEVERE,msg,e);
      return null;
    }
  }
 else {
    return file;
  }
}","/** 
 * Loads an object from the specified location. The path may locate either an index or a specific object. In case of an index, the data returned is an index dictionary listing of all objects in it.
 * @param path           the storage location
 * @return the data read, ornull if not found
 */
public Object load(Path path){
  File file=locateFile(path);
  String msg;
  if (file == null) {
    return null;
  }
 else   if (path.isIndex()) {
    Index idx=new Index();
    File[] files=file.listFiles();
    for (int i=0; i < files.length; i++) {
      String name=files[i].getName();
      if (files[i].isDirectory()) {
        idx.addIndex(name);
      }
 else {
        idx.addObject(StringUtils.removeEnd(name,SUFFIX_PROPS));
      }
    }
    idx.updateLastModified(new Date(file.lastModified()));
    return idx;
  }
 else   if (file.getName().endsWith(SUFFIX_PROPS)) {
    try {
      return PropertiesSerializer.read(file);
    }
 catch (    FileNotFoundException e) {
      msg=""String_Node_Str"" + file.toString();
      LOG.log(Level.SEVERE,msg,e);
      return null;
    }
catch (    IOException e) {
      msg=""String_Node_Str"" + file.toString();
      LOG.log(Level.SEVERE,msg,e);
      return null;
    }
  }
 else {
    return file;
  }
}",0.9878288182175108
7505,"/** 
 * Processes a query API servlet request.
 * @param request        the request to process
 * @param path           the query path
 */
private void processQuery(Request request,String path){
  DataQuery query=new DataQuery(path);
  Data res=null;
  Data dir=null;
  Data obj=null;
  String[] list;
  try {
    if (!SecurityContext.hasAdmin()) {
      LOG.info(""String_Node_Str"" + request.getRemoteAddr() + ""String_Node_Str""+ SecurityContext.currentUser());
      throw new ProcedureException(""String_Node_Str"");
    }
    if (query.isRoot()) {
      dir=new Data();
      list=ctx.getDataStore().findTypes();
      for (int i=0; i < list.length; i++) {
        dir.add(""String_Node_Str"" + list[i] + ""String_Node_Str"");
      }
      obj=new Data();
      list=ctx.getDataStore().findDataIds(null);
      for (int i=0; i < list.length; i++) {
        obj.add(""String_Node_Str"" + list[i]);
      }
      res=new Data();
      res.set(""String_Node_Str"",dir);
      res.set(""String_Node_Str"",obj);
    }
 else     if (query.isIndex) {
      obj=new Data();
      list=ctx.getDataStore().findDataIds(query.path[0]);
      for (int i=0; i < list.length; i++) {
        obj.add(""String_Node_Str"" + list[i]);
      }
      res=new Data();
      res.set(""String_Node_Str"",obj);
    }
 else     if (query.path.length == 1) {
      res=ctx.getDataStore().readData(null,query.path[0]);
    }
 else {
      res=ctx.getDataStore().readData(query.path[0],query.path[1]);
    }
    if (isMimeMatch(request,MIME_JSON)) {
      request.sendData(""String_Node_Str"",JsSerializer.serialize(res));
    }
 else     if (isMimeMatch(request,MIME_XML)) {
      request.sendData(""String_Node_Str"",XmlSerializer.serialize(res));
    }
 else {
      StringBuffer html=new StringBuffer();
      html.append(""String_Node_Str"");
      html.append(request.getRootPath());
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      if (query.isRoot()) {
        html.append(""String_Node_Str"");
      }
 else {
        html.append(""String_Node_Str"");
        html.append(StringUtils.repeat(""String_Node_Str"",query.depth()));
        html.append(""String_Node_Str"");
      }
      for (int i=0; i < query.path.length; i++) {
        if (i + 1 < query.path.length) {
          html.append(""String_Node_Str"");
          html.append(""String_Node_Str"");
          html.append(StringUtils.repeat(""String_Node_Str"",query.depth() - i - 1));
          html.append(""String_Node_Str"");
          html.append(query.path[i]);
          html.append(""String_Node_Str"");
        }
 else {
          html.append(""String_Node_Str"");
          html.append(""String_Node_Str"");
          html.append(query.path[i]);
        }
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(HtmlSerializer.serialize(res));
      html.append(""String_Node_Str"");
      request.sendData(""String_Node_Str"",html.toString());
    }
  }
 catch (  Exception e) {
    res=new Data();
    res.set(""String_Node_Str"",e.getMessage());
    if (isMimeMatch(request,MIME_JSON)) {
      request.sendData(""String_Node_Str"",JsSerializer.serialize(res));
    }
 else     if (isMimeMatch(request,MIME_XML)) {
      request.sendData(""String_Node_Str"",XmlSerializer.serialize(res));
    }
 else {
      request.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",e.getMessage());
    }
  }
}","/** 
 * Processes a query API servlet request.
 * @param request        the request to process
 * @param path           the query path
 */
private void processQuery(Request request,String path){
  DataQuery query=new DataQuery(path);
  Data res=null;
  Data dir=null;
  Data obj=null;
  String[] list;
  boolean createLinks;
  try {
    if (!SecurityContext.hasAdmin()) {
      LOG.info(""String_Node_Str"" + request.getRemoteAddr() + ""String_Node_Str""+ SecurityContext.currentUser());
      throw new ProcedureException(""String_Node_Str"");
    }
    createLinks=!isMimeMatch(request,MIME_JSON) && !isMimeMatch(request,MIME_XML);
    if (query.isRoot()) {
      dir=new Data();
      list=ctx.getDataStore().findTypes();
      for (int i=0; i < list.length; i++) {
        if (createLinks) {
          dir.add(""String_Node_Str"" + list[i] + ""String_Node_Str"");
        }
 else {
          dir.add(list[i]);
        }
      }
      obj=new Data();
      list=ctx.getDataStore().findDataIds(null);
      for (int i=0; i < list.length; i++) {
        if (createLinks) {
          obj.add(""String_Node_Str"" + list[i]);
        }
 else {
          obj.add(list[i]);
        }
      }
      res=new Data();
      res.set(""String_Node_Str"",dir);
      res.set(""String_Node_Str"",obj);
    }
 else     if (query.isIndex) {
      obj=new Data();
      list=ctx.getDataStore().findDataIds(query.path[0]);
      for (int i=0; i < list.length; i++) {
        if (createLinks) {
          obj.add(""String_Node_Str"" + list[i]);
        }
 else {
          obj.add(list[i]);
        }
      }
      res=new Data();
      res.set(""String_Node_Str"",obj);
    }
 else     if (query.path.length == 1) {
      res=ctx.getDataStore().readData(null,query.path[0]);
    }
 else {
      res=ctx.getDataStore().readData(query.path[0],query.path[1]);
    }
    if (isMimeMatch(request,MIME_JSON)) {
      request.sendData(""String_Node_Str"",JsSerializer.serialize(res));
    }
 else     if (isMimeMatch(request,MIME_XML)) {
      request.sendData(""String_Node_Str"",XmlSerializer.serialize(res));
    }
 else {
      StringBuffer html=new StringBuffer();
      html.append(""String_Node_Str"");
      html.append(request.getRootPath());
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      if (query.isRoot()) {
        html.append(""String_Node_Str"");
      }
 else {
        html.append(""String_Node_Str"");
        html.append(StringUtils.repeat(""String_Node_Str"",query.depth()));
        html.append(""String_Node_Str"");
      }
      for (int i=0; i < query.path.length; i++) {
        if (i + 1 < query.path.length) {
          html.append(""String_Node_Str"");
          html.append(""String_Node_Str"");
          html.append(StringUtils.repeat(""String_Node_Str"",query.depth() - i - 1));
          html.append(""String_Node_Str"");
          html.append(query.path[i]);
          html.append(""String_Node_Str"");
        }
 else {
          html.append(""String_Node_Str"");
          html.append(""String_Node_Str"");
          html.append(query.path[i]);
        }
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(HtmlSerializer.serialize(res));
      html.append(""String_Node_Str"");
      request.sendData(""String_Node_Str"",html.toString());
    }
  }
 catch (  Exception e) {
    res=new Data();
    res.set(""String_Node_Str"",e.getMessage());
    if (isMimeMatch(request,MIME_JSON)) {
      request.sendData(""String_Node_Str"",JsSerializer.serialize(res));
    }
 else     if (isMimeMatch(request,MIME_XML)) {
      request.sendData(""String_Node_Str"",XmlSerializer.serialize(res));
    }
 else {
      request.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"",e.getMessage());
    }
  }
}",0.951602091433168
7506,"/** 
 * Converts the query result set into an array of row data objects.
 * @param meta           the result set meta-data
 * @param rs             the result set to convert
 * @param flags          the processing and mapping flags
 * @return the data array object with all the result data
 * @throws AdapterException if the result data couldn't be read
 */
protected Data createRowData(ResultSetMetaData meta,ResultSet rs,String flags) throws AdapterException {
  boolean flagColumnNames=hasFlag(flags,""String_Node_Str"",true);
  boolean flagNativeTypes=hasFlag(flags,""String_Node_Str"",true);
  boolean flagSingleRow=hasFlag(flags,""String_Node_Str"",false);
  int colCount;
  Data rows=new Data(10);
  Data obj;
  Object value;
  try {
    colCount=meta.getColumnCount();
    while (rs.next()) {
      obj=flagColumnNames ? new Data() : new Data(colCount);
      for (int i=0; i < colCount; i++) {
        value=createValue(meta,rs,i + 1,flagNativeTypes);
        if (flagColumnNames) {
          obj.add(meta.getColumnName(i + 1).toLowerCase(),value);
        }
 else {
          obj.add(value);
        }
      }
      rows.add(obj);
    }
  }
 catch (  SQLException e) {
    throw new AdapterException(""String_Node_Str"" + e.getMessage());
  }
  if (flagSingleRow) {
    if (rows.arraySize() < 1) {
      return null;
    }
 else     if (rows.arraySize() == 1) {
      return rows.getData(0);
    }
 else {
      throw new AdapterException(""String_Node_Str"" + ""String_Node_Str"" + rows.arraySize());
    }
  }
  return rows;
}","/** 
 * Converts the query result set into an array of row data objects.
 * @param meta           the result set meta-data
 * @param rs             the result set to convert
 * @param flags          the processing and mapping flags
 * @return the data array object with all the result data
 * @throws AdapterException if the result data couldn't be read
 */
protected Data createRowData(ResultSetMetaData meta,ResultSet rs,String flags) throws AdapterException {
  boolean flagColumnNames=hasFlag(flags,""String_Node_Str"",true);
  boolean flagNativeTypes=hasFlag(flags,""String_Node_Str"",true);
  boolean flagSingleRow=hasFlag(flags,""String_Node_Str"",false);
  int colCount;
  Data rows=new Data(10);
  Data obj;
  Object value;
  try {
    colCount=meta.getColumnCount();
    while (rs.next()) {
      obj=flagColumnNames ? new Data() : new Data(colCount);
      for (int i=0; i < colCount; i++) {
        value=createValue(meta,rs,i + 1,flagNativeTypes);
        if (flagColumnNames) {
          obj.add(meta.getColumnLabel(i + 1).toLowerCase(),value);
        }
 else {
          obj.add(value);
        }
      }
      rows.add(obj);
    }
  }
 catch (  SQLException e) {
    throw new AdapterException(""String_Node_Str"" + e.getMessage());
  }
  if (flagSingleRow) {
    if (rows.arraySize() < 1) {
      return null;
    }
 else     if (rows.arraySize() == 1) {
      return rows.getData(0);
    }
 else {
      throw new AdapterException(""String_Node_Str"" + ""String_Node_Str"" + rows.arraySize());
    }
  }
  return rows;
}",0.9970520799213888
7507,"/** 
 * Converts the query meta-data into an array of column data objects.
 * @param meta           the result set meta-data to convert
 * @param flags          the processing and mapping flags
 * @return the data array object with all the column information
 * @throws AdapterException if the result data couldn't be read
 */
protected Data createColumnData(ResultSetMetaData meta,String flags) throws AdapterException {
  Data cols;
  Data obj;
  int colCount;
  try {
    colCount=meta.getColumnCount();
    cols=new Data(colCount);
    for (int i=0; i < colCount; i++) {
      obj=new Data();
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1).toLowerCase());
      obj.set(""String_Node_Str"",meta.getCatalogName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnTypeName(i + 1));
      obj.setInt(""String_Node_Str"",meta.getColumnType(i + 1));
      obj.set(""String_Node_Str"",meta.getSchemaName(i + 1));
      obj.set(""String_Node_Str"",meta.getTableName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1));
      cols.add(obj);
    }
  }
 catch (  SQLException e) {
    throw new AdapterException(""String_Node_Str"" + e.getMessage());
  }
  return cols;
}","/** 
 * Converts the query meta-data into an array of column data objects.
 * @param meta           the result set meta-data to convert
 * @param flags          the processing and mapping flags
 * @return the data array object with all the column information
 * @throws AdapterException if the result data couldn't be read
 */
protected Data createColumnData(ResultSetMetaData meta,String flags) throws AdapterException {
  Data cols;
  Data obj;
  int colCount;
  try {
    colCount=meta.getColumnCount();
    cols=new Data(colCount);
    for (int i=0; i < colCount; i++) {
      obj=new Data();
      obj.set(""String_Node_Str"",meta.getColumnLabel(i + 1).toLowerCase());
      obj.set(""String_Node_Str"",meta.getCatalogName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnTypeName(i + 1));
      obj.setInt(""String_Node_Str"",meta.getColumnType(i + 1));
      obj.set(""String_Node_Str"",meta.getSchemaName(i + 1));
      obj.set(""String_Node_Str"",meta.getTableName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1));
      cols.add(obj);
    }
  }
 catch (  SQLException e) {
    throw new AdapterException(""String_Node_Str"" + e.getMessage());
  }
  return cols;
}",0.9962041332770982
7508,"/** 
 * Converts a specific row column value to a scriptable object. Normally this means returning a simple string containing the value. If the native types flag is set, SQL types will be converted into their native Java object types by the JDBC driver.
 * @param meta           the result set meta-data
 * @param rs             the result set to convert
 * @param column         the column index
 * @param nativeTypes    the native value types flag
 * @return the scriptable object with the column value
 * @throws AdapterException if the result data couldn't be read
 */
protected Object createValue(ResultSetMetaData meta,ResultSet rs,int column,boolean nativeTypes) throws AdapterException {
  try {
switch (meta.getColumnType(column)) {
case Types.DATE:
case Types.TIMESTAMP:
      try {
        return DateUtil.formatIsoDateTime(rs.getTimestamp(column));
      }
 catch (      SQLException e) {
        return null;
      }
default :
    if (nativeTypes) {
      return rs.getObject(column);
    }
 else {
      return rs.getString(column);
    }
}
}
 catch (SQLException e) {
throw new AdapterException(""String_Node_Str"" + ""String_Node_Str"" + column + ""String_Node_Str""+ e.getMessage());
}
}","/** 
 * Converts a specific row column value to a scriptable object. Normally this means returning a simple string containing the value. If the native types flag is set, SQL types will be converted into their native Java object types by the JDBC driver.
 * @param meta           the result set meta-data
 * @param rs             the result set to convert
 * @param column         the column index
 * @param nativeTypes    the native value types flag
 * @return the scriptable object with the column value
 * @throws AdapterException if the result data couldn't be read
 */
protected Object createValue(ResultSetMetaData meta,ResultSet rs,int column,boolean nativeTypes) throws AdapterException {
  try {
switch (meta.getColumnType(column)) {
case Types.DATE:
case Types.TIMESTAMP:
      try {
        return DateUtil.formatIsoDateTime(rs.getTimestamp(column));
      }
 catch (      SQLException e) {
        return null;
      }
default :
    if (nativeTypes) {
      Object value=rs.getObject(column);
      return isNativeValue(value) ? value : rs.getString(column);
    }
 else {
      return rs.getString(column);
    }
}
}
 catch (SQLException e) {
throw new AdapterException(""String_Node_Str"" + ""String_Node_Str"" + column + ""String_Node_Str""+ e.getMessage());
}
}",0.960291734197731
7509,"/** 
 * Converts a query result set to a data object.
 * @param rs             the result set to convert
 * @param mapMetadata    the meta-data mapping flag
 * @param mapColumnName  the column name to property mapping flag
 * @return the data object with all the result data
 * @throws AdapterException if the result data couldn't be read
 */
private Data createResults(ResultSet rs,boolean mapMetadata,boolean mapColumnName) throws AdapterException {
  Data res=new Data();
  Data cols;
  Data rows=new Data(10);
  Data obj;
  ResultSetMetaData meta;
  int colCount;
  String value;
  try {
    meta=rs.getMetaData();
    colCount=meta.getColumnCount();
    cols=new Data(colCount);
    for (int i=0; i < colCount; i++) {
      obj=new Data();
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1).toLowerCase());
      obj.set(""String_Node_Str"",meta.getCatalogName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnTypeName(i + 1));
      obj.setInt(""String_Node_Str"",meta.getColumnType(i + 1));
      obj.set(""String_Node_Str"",meta.getSchemaName(i + 1));
      obj.set(""String_Node_Str"",meta.getTableName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1));
      cols.add(obj);
    }
    while (rs.next()) {
      obj=mapColumnName ? new Data() : new Data(colCount);
      for (int i=0; i < colCount; i++) {
switch (meta.getColumnType(i + 1)) {
case Types.DATE:
case Types.TIMESTAMP:
          value=DateUtil.formatIsoDateTime(rs.getTimestamp(i + 1));
        break;
default :
      value=rs.getString(i + 1);
  }
  if (mapColumnName) {
    obj.set(meta.getColumnName(i + 1).toLowerCase(),value);
  }
 else {
    obj.set(i,value);
  }
}
rows.add(obj);
}
res.set(""String_Node_Str"",cols);
res.set(""String_Node_Str"",rows);
}
 catch (SQLException e) {
throw new AdapterException(""String_Node_Str"" + e.getMessage());
}
return mapMetadata ? res : rows;
}","/** 
 * Converts a query result set to a data object.
 * @param rs             the result set to convert
 * @param mapMetadata    the meta-data mapping flag
 * @param mapColumnName  the column name to property mapping flag
 * @return the data object with all the result data
 * @throws AdapterException if the result data couldn't be read
 */
private Data createResults(ResultSet rs,boolean mapMetadata,boolean mapColumnName) throws AdapterException {
  Data res=new Data();
  Data cols;
  Data rows=new Data(10);
  Data obj;
  ResultSetMetaData meta;
  int colCount;
  String value;
  try {
    meta=rs.getMetaData();
    colCount=meta.getColumnCount();
    cols=new Data(colCount);
    for (int i=0; i < colCount; i++) {
      obj=new Data();
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1).toLowerCase());
      obj.set(""String_Node_Str"",meta.getCatalogName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnTypeName(i + 1));
      obj.setInt(""String_Node_Str"",meta.getColumnType(i + 1));
      obj.set(""String_Node_Str"",meta.getSchemaName(i + 1));
      obj.set(""String_Node_Str"",meta.getTableName(i + 1));
      obj.set(""String_Node_Str"",meta.getColumnName(i + 1));
      cols.add(obj);
    }
    while (rs.next()) {
      obj=mapColumnName ? new Data() : new Data(colCount);
      for (int i=0; i < colCount; i++) {
switch (meta.getColumnType(i + 1)) {
case Types.DATE:
case Types.TIMESTAMP:
          try {
            value=DateUtil.formatIsoDateTime(rs.getTimestamp(i + 1));
          }
 catch (          SQLException e) {
            value=null;
          }
        break;
default :
      value=rs.getString(i + 1);
  }
  if (mapColumnName) {
    obj.set(meta.getColumnName(i + 1).toLowerCase(),value);
  }
 else {
    obj.set(i,value);
  }
}
rows.add(obj);
}
res.set(""String_Node_Str"",cols);
res.set(""String_Node_Str"",rows);
}
 catch (SQLException e) {
throw new AdapterException(""String_Node_Str"" + e.getMessage());
}
return mapMetadata ? res : rows;
}",0.8314315352697096
7510,"public void transform(XmlConfiguration configuration){
  InputStream in=null;
  Document doc=null;
  String xmlFile=configuration.getFileName();
  try {
    displayMessageln(xmlFile);
    in=new BufferedInputStream(new FileInputStream(xmlFile));
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    doc=docBuilder.parse(in);
    applyTransformation(configuration,doc);
  }
 catch (  SAXException ex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  ParserConfigurationException ex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ioex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ioex);
  }
 finally {
    IOUtils.closeQuietly(in);
  }
  if (doc != null) {
    saveDoc(xmlFile,doc);
  }
}","public void transform(XmlConfiguration configuration){
  InputStream in=null;
  Document doc=null;
  String xmlFile=configuration.getFileName();
  try {
    displayMessageln(xmlFile);
    in=new BufferedInputStream(new FileInputStream(xmlFile));
    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
    docFactory.setValidating(false);
    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
    docBuilder.setEntityResolver(new ClasspathEntityResolver(null));
    doc=docBuilder.parse(in);
    applyTransformation(configuration,doc);
  }
 catch (  SAXException ex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  ParserConfigurationException ex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  IOException ioex) {
    Logger.getLogger(XPathTransformer.class.getName()).log(Level.SEVERE,null,ioex);
  }
 finally {
    IOUtils.closeQuietly(in);
  }
  if (doc != null) {
    saveDoc(xmlFile,doc);
  }
}",0.9456967213114754
7511,"/** 
 * Create a new node (element or attribute) to be inserted into the target node as a child or attribute.
 * @param doc DOM document
 * @param target the target ode
 * @param value the value for creating the new node.
 */
public void createNewNode(Document doc,Node target,Value value){
  if (value.getLocation().startsWith(""String_Node_Str"")) {
    Attr result=doc.createAttribute(value.getLocation().substring(1));
    result.setValue(value.getValue());
    target.getAttributes().setNamedItem(result);
  }
 else {
    Element result=doc.createElement(value.getLocation());
    result.setNodeValue(value.getValue());
    target.appendChild(result);
  }
}","/** 
 * Create a new node (element or attribute) to be inserted into the target node as a child or attribute.
 * @param doc DOM document
 * @param target the target ode
 * @param value the value for creating the new node.
 */
public void createNewNode(Document doc,Node target,Value value){
  if (value.getLocation().startsWith(""String_Node_Str"")) {
    Attr newAttribute=doc.createAttribute(value.getLocation().substring(1));
    newAttribute.setValue(value.getValue());
    target.getAttributes().setNamedItem(newAttribute);
  }
 else {
    Element newElement=doc.createElement(value.getLocation());
    newElement.setTextContent(value.getValue());
    target.appendChild(newElement);
  }
}",0.9068047337278108
7512,"public XmlConfiguration(String dir,Element eltConfigFile,GestionVariables gv) throws IOException {
  fileName=gv.resolveAndEvalString(dir + eltConfigFile.getAttributeValue(FILE_NAME_ATTRIB));
  parameters=new ArrayList<Parameter>();
  @SuppressWarnings(""String_Node_Str"") List<Element> eltParameters=eltConfigFile.getChildren(PARAMETER_TAG);
  for (  Element eltParameter : eltParameters) {
    Parameter parameter=new Parameter(gv.resolveAndEvalString(eltParameter.getAttributeValue(PARAMETER_KEY_ATTRIB)),getXmlMode(eltParameter.getAttributeValue(XPATH_MODE_ATTRIB)));
    if (eltParameter.getChildren() != null && !eltParameter.getChildren().isEmpty()) {
      @SuppressWarnings(""String_Node_Str"") List<Element> eltValues=eltParameter.getChildren(VALUE_TAG);
      if (eltValues == null || eltValues.isEmpty()) {
        parameter.addValue(new Value(null,null,gv.resolveAndEvalString(eltParameter.getTextTrim()),parameter.getMode()));
      }
      for (      Element eltValue : eltValues) {
        String relativePath=eltValue.getAttributeValue(RELATIVE_VALUE_ATTRIB);
        if (relativePath != null && !""String_Node_Str"".equals(relativePath)) {
          relativePath=gv.resolveAndEvalString(relativePath);
        }
        String location=eltValue.getAttributeValue(VALUE_LOCATION_ATTRIB);
        if (location != null && !""String_Node_Str"".equals(location)) {
          location=gv.resolveAndEvalString(location);
        }
        parameter.addValue(new Value(location,relativePath,gv.resolveAndEvalString(eltValue.getTextTrim()),getXmlMode(eltValue.getAttributeValue(XPATH_MODE_ATTRIB))));
      }
    }
 else {
      parameter.addValue(new Value(null,null,gv.resolveAndEvalString(eltParameter.getTextTrim()),parameter.getMode()));
    }
    parameters.add(parameter);
  }
}","public XmlConfiguration(String dir,Element eltConfigFile,GestionVariables gv) throws IOException {
  fileName=gv.resolveAndEvalString(dir + eltConfigFile.getAttributeValue(FILE_NAME_ATTRIB));
  parameters=new ArrayList<Parameter>();
  @SuppressWarnings(""String_Node_Str"") List<Element> eltParameters=eltConfigFile.getChildren(PARAMETER_TAG);
  for (  Element eltParameter : eltParameters) {
    Parameter parameter=new Parameter(gv.resolveAndEvalString(eltParameter.getAttributeValue(PARAMETER_KEY_ATTRIB)),getXmlMode(eltParameter.getAttributeValue(XPATH_MODE_ATTRIB)));
    if (eltParameter.getChildren() != null && !eltParameter.getChildren().isEmpty()) {
      @SuppressWarnings(""String_Node_Str"") List<Element> eltValues=eltParameter.getChildren(VALUE_TAG);
      if (eltValues == null || eltValues.isEmpty()) {
        parameter.addValue(new Value(null,null,gv.resolveAndEvalString(eltParameter.getTextTrim()),parameter.getMode()));
      }
      for (      Element eltValue : eltValues) {
        String relativePath=eltValue.getAttributeValue(RELATIVE_VALUE_ATTRIB);
        if (relativePath != null && !""String_Node_Str"".equals(relativePath)) {
          relativePath=gv.resolveAndEvalString(relativePath);
        }
        String location=eltValue.getAttributeValue(VALUE_LOCATION_ATTRIB);
        if (location != null && !""String_Node_Str"".equals(location)) {
          location=gv.resolveAndEvalString(location);
        }
        parameter.addValue(new Value(location,relativePath,gv.resolveAndEvalString(eltValue.getTextTrim()),parameter.getMode()));
      }
    }
 else {
      parameter.addValue(new Value(null,null,gv.resolveAndEvalString(eltParameter.getTextTrim()),parameter.getMode()));
    }
    parameters.add(parameter);
  }
}",0.9819004524886876
7513,"/** 
 * Transform the DOM tree using the configuration.
 * @param configuration the transformation configuration.
 * @param doc the DOM tree to be updated.
 */
protected void applyTransformation(XmlConfiguration configuration,Document doc){
  List<Parameter> parameters=configuration.getParameters();
  for (  Parameter parameter : parameters) {
    displayMessageln(""String_Node_Str"" + parameter.getKey() + ""String_Node_Str""+ parameter.getMode()+ ""String_Node_Str"");
    Node rootXpathNode=getMatchingNode(parameter.getKey(),doc);
    if (rootXpathNode != null) {
      for (      Value value : parameter.getValues()) {
switch (value.getMode()) {
case XmlTreeHandler.MODE_INSERT:
{
            createNewNode(doc,rootXpathNode,value);
          }
        break;
case XmlTreeHandler.MODE_DELETE:
{
        Node deletedNode=getMatchingNode(value.getLocation(),rootXpathNode);
        rootXpathNode.removeChild(deletedNode);
      }
    break;
case XmlTreeHandler.MODE_UPDATE:
{
    Node oldNode=getMatchingNode(value.getLocation(),rootXpathNode);
    if (oldNode == null) {
      createNewNode(doc,rootXpathNode,value);
    }
 else {
      Node newNode=oldNode.cloneNode(true);
      if (newNode instanceof Element) {
        ((Element)newNode).setNodeValue(value.getValue());
        rootXpathNode.replaceChild(oldNode,newNode);
      }
 else {
        ((Attr)newNode).setValue(value.getValue());
        rootXpathNode.getAttributes().setNamedItem(newNode);
      }
    }
    break;
  }
}
}
}
}
}","/** 
 * Transform the DOM tree using the configuration.
 * @param configuration the transformation configuration.
 * @param doc the DOM tree to be updated.
 */
protected void applyTransformation(XmlConfiguration configuration,Document doc){
  List<Parameter> parameters=configuration.getParameters();
  for (  Parameter parameter : parameters) {
    displayMessageln(""String_Node_Str"" + parameter.getKey() + ""String_Node_Str""+ parameter.getMode()+ ""String_Node_Str"");
    Node rootXpathNode=getMatchingNode(parameter.getKey(),doc);
    if (rootXpathNode != null) {
      for (      Value value : parameter.getValues()) {
switch (value.getMode()) {
case XmlTreeHandler.MODE_INSERT:
{
            createNewNode(doc,rootXpathNode,value);
          }
        break;
case XmlTreeHandler.MODE_DELETE:
{
        Node deletedNode=getMatchingNode(value.getLocation(),rootXpathNode);
        rootXpathNode.removeChild(deletedNode);
      }
    break;
case XmlTreeHandler.MODE_UPDATE:
{
    Node oldNode=getMatchingNode(value.getLocation(),rootXpathNode);
    if (oldNode == null) {
      createNewNode(doc,rootXpathNode,value);
    }
 else {
      Node newNode=oldNode.cloneNode(true);
      if (oldNode instanceof Element) {
        ((Element)newNode).setTextContent(value.getValue());
        rootXpathNode.replaceChild(newNode,oldNode);
      }
 else {
        ((Attr)newNode).setValue(value.getValue());
        rootXpathNode.getAttributes().setNamedItem(newNode);
      }
    }
    break;
  }
}
}
}
}
}",0.8683155080213903
7514,"public void loadArray(SlaveArray array){
  int startPort=(int)array.getStartPort();
  int portCount=(int)array.getCount();
  int statusCount=(int)array.getPointWidth().getStatus();
  int analogCount=(int)array.getPointWidth().getAnalog();
  int counterCount=(int)array.getPointWidth().getCounter();
  StackConfig config=new StackConfig(statusCount,analogCount,counterCount);
  for (int i=0; i < portCount; i++) {
    int port=startPort + i;
    String portName=""String_Node_Str"" + port;
    stacks.addPort(portName,port);
    stacks.addStack(""String_Node_Str"" + port,portName,config);
  }
}","public void loadArray(SlaveArray array){
  int startPort=(int)array.getStartPort();
  int portCount=(int)array.getCount();
  int statusCount=(int)array.getPointWidth().getStatus();
  int analogCount=(int)array.getPointWidth().getAnalog();
  int counterCount=(int)array.getPointWidth().getCounter();
  StackConfig config=new StackConfig(statusCount,analogCount,counterCount);
  for (int i=0; i < portCount; i++) {
    int port=startPort + i;
    System.out.println(""String_Node_Str"" + port);
    String portName=""String_Node_Str"" + port;
    stacks.addPort(portName,port);
    stacks.addStack(""String_Node_Str"" + port,portName,config);
  }
}",0.8569105691056911
7515,"public static void main(String[] args){
  StackSet set=new StackSet();
  StackConfig config=new StackConfig(5,5,5);
  set.addPort(""String_Node_Str"",50000);
  set.addStack(""String_Node_Str"",""String_Node_Str"",config);
  System.out.println(""String_Node_Str"");
  try {
    System.in.read();
  }
 catch (  IOException ex) {
    System.out.println(""String_Node_Str"" + ex);
  }
  set.removeAllStacks();
  set.removeAllPorts();
  set.stop();
}","public static void main(String[] args) throws Exception {
  if (args.length < 1) {
    throw new Exception(""String_Node_Str"");
  }
  SimNode config=loadXml(args[0]);
  if (config == null)   throw new RuntimeException(""String_Node_Str"");
  SimulationManager mgr=new SimulationManager(config);
  mgr.start();
  System.out.println(""String_Node_Str"");
  try {
    System.in.read();
  }
 catch (  IOException ex) {
    System.out.println(""String_Node_Str"" + ex);
  }
  mgr.stop();
}",0.4956140350877193
7516,"public StackSet(){
  dnp.AddLogHook(new ConsoleLogAdapter());
}","public StackSet(){
  dnp.AddLogHook(logAdapter);
}",0.8849557522123894
7517,"public void addStack(String name,String portName,StackConfig config){
  CommandAcceptor cmdAcceptor=new CommandAcceptor();
  IDataObserver obs=dnp.AddSlave(portName,name,FilterLevel.LEV_INFO,cmdAcceptor,config.buildConfig());
  stackMap.put(name,obs);
}","public void addStack(String name,String portName,StackConfig config){
  CommandAcceptor cmdAcceptor=new CommandAcceptor();
  SlaveStackConfig cfg=config.buildConfig();
  IDataObserver obs=dnp.AddSlave(portName,name,FilterLevel.LEV_DEBUG,cmdAcceptor,cfg);
  stackMap.put(name,new StackItems(obs,cmdAcceptor));
}",0.6820603907637656
7518,"public void addPort(String name,int port){
  PhysLayerSettings phys=new PhysLayerSettings(FilterLevel.LEV_INFO,5000);
  dnp.AddTCPServer(name,phys,""String_Node_Str"",port);
}","public void addPort(String name,int port){
  PhysLayerSettings phys=new PhysLayerSettings(FilterLevel.LEV_DEBUG,5000);
  dnp.AddTCPServer(name,phys,""String_Node_Str"",port);
}",0.9740634005763688
7519,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  if (!HelperFunctions.isAdmin(player)) {
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  World world=sender.getServer().getWorld(""String_Node_Str"");
  List<LivingEntity> mobs=world.getLivingEntities();
  for (Iterator<LivingEntity> iterator=mobs.iterator(); iterator.hasNext(); ) {
    LivingEntity m=iterator.next();
    if (isAnimal(m)) {
      m.setHealth(0);
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  if (!HelperFunctions.isAdmin(player)) {
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  World world=sender.getServer().getWorld(""String_Node_Str"");
  List<LivingEntity> mobs=world.getLivingEntities();
  for (Iterator<LivingEntity> iterator=mobs.iterator(); iterator.hasNext(); ) {
    LivingEntity m=iterator.next();
    if (isAnimal(m)) {
      if (m instanceof Wolf) {
        m.setHealth(100);
      }
      m.setHealth(0);
    }
  }
  return true;
}",0.9380993897122928
7520,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  Block chestToLock=player.getTargetBlock(null,5);
  if (chestToLock.getTypeId() == 54) {
    String owner=chestFunctions.getOwner(chestToLock.getLocation());
    if (owner.equalsIgnoreCase(player.getName())) {
      ChestData myChest=chestFunctions.getChest(chestToLock.getLocation());
      myChest.setName(""String_Node_Str"");
      chestFunctions.plugin.getDatabase().save(myChest);
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  Block chestToLock=player.getTargetBlock(null,5);
  if (chestToLock.getTypeId() == 54) {
    String owner=chestFunctions.getOwner(chestToLock.getLocation());
    if (owner.equalsIgnoreCase(player.getName()) || HelperFunctions.isAdmin(player)) {
      ChestData myChest=chestFunctions.getChest(chestToLock.getLocation());
      myChest.setName(""String_Node_Str"");
      chestFunctions.plugin.getDatabase().save(myChest);
      player.sendMessage(""String_Node_Str"");
    }
  }
  return true;
}",0.9316239316239316
7521,"@Override public void onBlockBreak(BlockBreakEvent event){
switch (event.getBlock().getType()) {
case CHEST:
    if (plugin.chestFunctions.doesUserOwnChest(""String_Node_Str"",event.getBlock().getLocation())) {
      System.out.println(""String_Node_Str"" + event.getBlock().getLocation().toString());
      return;
    }
 else     if (plugin.chestFunctions.doesUserOwnChest(event.getPlayer().getName(),event.getBlock().getLocation())) {
      System.out.println(""String_Node_Str"" + event.getBlock().getLocation().toString());
      return;
    }
 else {
      event.setCancelled(true);
      event.getPlayer().sendMessage(""String_Node_Str"");
      return;
    }
default :
  return;
}
}","@Override public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled()) {
    return;
  }
switch (event.getBlock().getType()) {
case CHEST:
    Player player=event.getPlayer();
  if (HelperFunctions.isAdmin(player)) {
    player.sendMessage(""String_Node_Str"" + plugin.chestFunctions.getOwner(event.getBlock().getLocation()) + ""String_Node_Str"");
    return;
  }
if (plugin.chestFunctions.isPublicChest(event.getBlock().getLocation())) {
  System.out.println(""String_Node_Str"" + event.getBlock().getLocation().toString());
  return;
}
if (plugin.chestFunctions.doesUserOwnChest(event.getPlayer().getName(),event.getBlock().getLocation())) {
System.out.println(""String_Node_Str"" + event.getBlock().getLocation().toString());
return;
}
event.setCancelled(true);
event.getPlayer().sendMessage(""String_Node_Str"");
return;
default :
return;
}
}",0.6088657105606258
7522,"@Override public void onPlayerInteract(PlayerInteractEvent event){
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
    Block myBlock=event.getClickedBlock();
  if (myBlock.getTypeId() == 54) {
    Player player=event.getPlayer();
    if (plugin.rankFunctions.getRank(player.getName()) >= 5) {
      player.sendMessage(""String_Node_Str"" + plugin.chestFunctions.getOwner(myBlock.getLocation()) + ""String_Node_Str"");
      return;
    }
    if (plugin.chestFunctions.isPublicChest(myBlock.getLocation())) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
 else     if (plugin.chestFunctions.doesUserOwnChest(player.getName(),event.getClickedBlock().getLocation())) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
 else {
      player.sendMessage(""String_Node_Str"" + plugin.chestFunctions.getOwner(myBlock.getLocation()));
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
  }
default :
return;
}
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
switch (event.getAction()) {
case RIGHT_CLICK_BLOCK:
    Block myBlock=event.getClickedBlock();
  if (myBlock.getTypeId() == 54) {
    Player player=event.getPlayer();
    if (HelperFunctions.isAdmin(player)) {
      player.sendMessage(""String_Node_Str"" + plugin.chestFunctions.getOwner(myBlock.getLocation()) + ""String_Node_Str"");
      return;
    }
    if (plugin.chestFunctions.isPublicChest(myBlock.getLocation())) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
 else     if (plugin.chestFunctions.doesUserOwnChest(player.getName(),event.getClickedBlock().getLocation())) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
 else {
      player.sendMessage(""String_Node_Str"" + plugin.chestFunctions.getOwner(myBlock.getLocation()));
      player.sendMessage(""String_Node_Str"");
      event.setCancelled(true);
      return;
    }
  }
default :
return;
}
}",0.9691358024691358
7523,"public boolean isNewPlayer(Player player){
  String name=player.getName();
  RankData playerRank=plugin.getDatabase().find(RankData.class).where().ieq(""String_Node_Str"",name).ieq(""String_Node_Str"",player.getName()).findUnique();
  if (playerRank == null) {
    playerRank=new RankData();
    playerRank.setPlayer(player);
    playerRank.setName(name);
    playerRank.setRank(0);
    BankData newAccount=new BankData();
    newAccount.setPlayer(player);
    newAccount.setPlayerName(name);
    newAccount.setBalance(500);
    plugin.getDatabase().save(playerRank);
    plugin.getDatabase().save(newAccount);
    plugin.getServer().broadcastMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"" + player.getName());
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  return false;
}","public boolean isNewPlayer(Player player){
  String name=player.getName();
  RankData playerRank=plugin.getDatabase().find(RankData.class).where().ieq(""String_Node_Str"",name).ieq(""String_Node_Str"",player.getName()).findUnique();
  if (playerRank == null) {
    playerRank=new RankData();
    playerRank.setPlayer(player);
    playerRank.setName(name);
    playerRank.setRank(0);
    BankData newAccount=new BankData();
    newAccount.setPlayer(player);
    newAccount.setPlayerName(name);
    newAccount.setBalance(500);
    plugin.getDatabase().save(playerRank);
    plugin.getDatabase().save(newAccount);
    plugin.getServer().broadcastMessage(""String_Node_Str"" + player.getName() + ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"" + player.getName());
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  BankData bankAccount=plugin.getDatabase().find(BankData.class).where().ieq(""String_Node_Str"",name).ieq(""String_Node_Str"",player.getName()).findUnique();
  if (bankAccount == null) {
    BankData newAccount=new BankData();
    newAccount.setPlayer(player);
    newAccount.setPlayerName(name);
    newAccount.setBalance(500);
    plugin.getDatabase().save(newAccount);
    player.sendMessage(""String_Node_Str"");
  }
  return false;
}",0.8201790073230268
7524,"@Override public void onBlockBurn(BlockBurnEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (event.getBlock().getTypeId() == 18) {
    event.setCancelled(true);
    return;
  }
}","@Override public void onBlockBurn(BlockBurnEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (event.getBlock().getType() == Material.LEAVES) {
    event.setCancelled(true);
    return;
  }
}",0.9521410579345088
7525,"protected void backup(){
  String startBackupMessage=""String_Node_Str"";
  System.out.println(startBackupMessage);
  server.broadcastMessage(startBackupMessage);
  ConsoleCommandSender ccs=new ConsoleCommandSender(server);
  server.dispatchCommand(ccs,""String_Node_Str"");
  server.dispatchCommand(ccs,""String_Node_Str"");
  server.savePlayers();
  try {
    boolean hasToZIP=true;
    for (    World world : server.getWorlds()) {
      String backupDir=""String_Node_Str"".concat(""String_Node_Str"").concat(world.getName());
      backupDir=backupDir.concat(this.getDate());
      world.save();
      FileUtils.copyDirectory(new File(world.getName()),new File(backupDir));
      String targetName=world.getName();
      String targetDir=""String_Node_Str"".concat(""String_Node_Str"");
      if (backupName != null) {
        targetName=backupName;
        targetDir=targetDir.concat(""String_Node_Str"").concat(""String_Node_Str"");
      }
      if (hasToZIP) {
        FileUtils.zipDirectory(backupDir,targetDir.concat(targetName).concat(getDate()));
        FileUtils.deleteDirectory(new File(backupDir));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace(System.out);
  }
  server.dispatchCommand(ccs,""String_Node_Str"");
  String completedBackupMessage=""String_Node_Str"";
  server.broadcastMessage(completedBackupMessage);
  System.out.println(completedBackupMessage);
  deleteOldBackups();
  backupName=null;
}","protected void backup(){
  String startBackupMessage=""String_Node_Str"";
  System.out.println(startBackupMessage);
  server.broadcastMessage(startBackupMessage);
  ConsoleCommandSender ccs=new ConsoleCommandSender(server);
  server.dispatchCommand(ccs,""String_Node_Str"");
  server.dispatchCommand(ccs,""String_Node_Str"");
  server.savePlayers();
  try {
    World world=server.getWorld(""String_Node_Str"");
    String backupDir=""String_Node_Str"".concat(FILE_SEPARATOR).concat(world.getName());
    world.save();
    FileUtils.copyDirectory(new File(world.getName()),new File(backupDir));
    String targetName=world.getName();
    String targetDir=""String_Node_Str"".concat(FILE_SEPARATOR);
    if (backupName != null) {
      targetName=backupName;
      targetDir=targetDir.concat(FILE_SEPARATOR);
    }
    FileUtils.zipDirectory(backupDir,targetDir.concat(targetName).concat(getDate()));
    FileUtils.deleteDirectory(new File(backupDir));
  }
 catch (  Exception e) {
    e.printStackTrace(System.out);
  }
  server.dispatchCommand(ccs,""String_Node_Str"");
  String completedBackupMessage=""String_Node_Str"";
  server.broadcastMessage(completedBackupMessage);
  System.out.println(completedBackupMessage);
  deleteOldBackups();
  backupName=null;
}",0.526829268292683
7526,"@Override public void onEnable(){
  File backupDir=new File(""String_Node_Str"".concat(FILE_SEPARATOR).concat(""String_Node_Str""));
  if (!backupDir.exists())   backupDir.mkdirs();
  backupDir=new File(""String_Node_Str"");
  if (!backupDir.exists())   backupDir.mkdirs();
  backupDir=new File(""String_Node_Str"".concat(FILE_SEPARATOR).concat(""String_Node_Str""));
  if (!backupDir.exists())   backupDir.mkdirs();
  @SuppressWarnings(""String_Node_Str"") int saveTaskID=this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new AutoSaveThread(this),120 * 21L,1100 * 21L);
  @SuppressWarnings(""String_Node_Str"") int backupTaskID=this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new BackupTask(this.getServer()),1800 * 21L,1800 * 21L);
  System.out.println(""String_Node_Str"");
  setupDatabase();
  registerEvents();
  getCommand(""String_Node_Str"").setExecutor(new RestoreInventoryCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new GetDirection());
  getCommand(""String_Node_Str"").setExecutor(new MakeCartTunnelCommand());
  getCommand(""String_Node_Str"").setExecutor(new GiveTrackCommand());
  getCommand(""String_Node_Str"").setExecutor(new RegenChunkCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new WallChunkCommand());
  getCommand(""String_Node_Str"").setExecutor(new StoreCommand(shopFunctions));
  getCommand(""String_Node_Str"").setExecutor(new BuyCommand(bankFunctions,shopFunctions));
  getCommand(""String_Node_Str"").setExecutor(new ChallangeCommand());
  getCommand(""String_Node_Str"").setExecutor(new DieCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new BankCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new SetCompassCommand());
  getCommand(""String_Node_Str"").setExecutor(new SetSpawnLocationCommand());
  getCommand(""String_Node_Str"").setExecutor(new KillFarmAnimalsCommand());
  getCommand(""String_Node_Str"").setExecutor(new KillHostileMobsCommand());
  getCommand(""String_Node_Str"").setExecutor(new SpawnMobCommand());
  getCommand(""String_Node_Str"").setExecutor(new WhoCommand());
  getCommand(""String_Node_Str"").setExecutor(new TeleportCommand());
  getCommand(""String_Node_Str"").setExecutor(new SetRankCommand(rankFunctions));
  getCommand(""String_Node_Str"").setExecutor(new ChestHelpCommand());
  getCommand(""String_Node_Str"").setExecutor(new GetChestCountCommand(chestFunctions));
  getCommand(""String_Node_Str"").setExecutor(new UnlockChestCommand(chestFunctions));
  PluginDescriptionFile pdfFile=this.getDescription();
  deathevents.put(""String_Node_Str"",getConfiguration().getStringList(""String_Node_Str"",null));
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (!PluginFile.exists()) {
    try {
      new File(maindirectory).mkdir();
      PluginFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (!shopFile.exists()) {
    try {
      new File(maindirectory).mkdir();
      shopFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void onEnable(){
  File backupDir=new File(""String_Node_Str"".concat(FILE_SEPARATOR).concat(""String_Node_Str""));
  if (!backupDir.exists())   backupDir.mkdirs();
  backupDir=new File(""String_Node_Str"");
  if (!backupDir.exists())   backupDir.mkdirs();
  backupDir=new File(""String_Node_Str"".concat(FILE_SEPARATOR).concat(""String_Node_Str""));
  if (!backupDir.exists())   backupDir.mkdirs();
  @SuppressWarnings(""String_Node_Str"") int saveTaskID=this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new AutoSaveThread(this),120 * 21L,1100 * 21L);
  @SuppressWarnings(""String_Node_Str"") int backupTaskID=this.getServer().getScheduler().scheduleSyncRepeatingTask(this,new BackupTask(this.getServer()),3800 * 21L,3400 * 21L);
  System.out.println(""String_Node_Str"");
  setupDatabase();
  registerEvents();
  getCommand(""String_Node_Str"").setExecutor(new RestoreInventoryCommand());
  getCommand(""String_Node_Str"").setExecutor(new GetDirection());
  getCommand(""String_Node_Str"").setExecutor(new MakeCartTunnelCommand());
  getCommand(""String_Node_Str"").setExecutor(new GiveTrackCommand());
  getCommand(""String_Node_Str"").setExecutor(new RegenChunkCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new WallChunkCommand());
  getCommand(""String_Node_Str"").setExecutor(new StoreCommand(shopFunctions));
  getCommand(""String_Node_Str"").setExecutor(new BuyCommand(bankFunctions,shopFunctions));
  getCommand(""String_Node_Str"").setExecutor(new ChallangeCommand());
  getCommand(""String_Node_Str"").setExecutor(new DieCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new BankCommand(this));
  getCommand(""String_Node_Str"").setExecutor(new SetCompassCommand());
  getCommand(""String_Node_Str"").setExecutor(new SetSpawnLocationCommand());
  getCommand(""String_Node_Str"").setExecutor(new KillFarmAnimalsCommand());
  getCommand(""String_Node_Str"").setExecutor(new KillHostileMobsCommand());
  getCommand(""String_Node_Str"").setExecutor(new SpawnMobCommand());
  getCommand(""String_Node_Str"").setExecutor(new WhoCommand());
  getCommand(""String_Node_Str"").setExecutor(new TeleportCommand());
  getCommand(""String_Node_Str"").setExecutor(new SetRankCommand(rankFunctions));
  getCommand(""String_Node_Str"").setExecutor(new ChestHelpCommand());
  getCommand(""String_Node_Str"").setExecutor(new GetChestCountCommand(chestFunctions));
  getCommand(""String_Node_Str"").setExecutor(new UnlockChestCommand(chestFunctions));
  PluginDescriptionFile pdfFile=this.getDescription();
  deathevents.put(""String_Node_Str"",getConfiguration().getStringList(""String_Node_Str"",null));
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  if (!PluginFile.exists()) {
    try {
      new File(maindirectory).mkdir();
      PluginFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (!shopFile.exists()) {
    try {
      new File(maindirectory).mkdir();
      shopFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.99836867862969
7527,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  Block chestToLock=player.getTargetBlock(null,5);
  if (chestToLock.getTypeId() == 54) {
    String owner=chestFunctions.getOwner(chestToLock.getLocation());
    if (owner.equalsIgnoreCase(player.getName()) || HelperFunctions.isAdmin(player)) {
      ChestData myChest=chestFunctions.getChest(chestToLock.getLocation());
      myChest.setName(""String_Node_Str"");
      chestFunctions.plugin.getDatabase().save(myChest);
      player.sendMessage(""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player player=(Player)sender;
  Block chestToLock=player.getTargetBlock(null,5);
  if (chestToLock.getTypeId() == 54) {
    String owner=chestFunctions.getOwner(chestToLock.getLocation());
    if (owner.equalsIgnoreCase(player.getName())) {
      ChestData myChest=chestFunctions.getChest(chestToLock.getLocation());
      myChest.setName(""String_Node_Str"");
      chestFunctions.plugin.getDatabase().save(myChest);
      BlockFace[] faces=new BlockFace[]{BlockFace.NORTH,BlockFace.SOUTH,BlockFace.EAST,BlockFace.WEST};
      for (      BlockFace blockFace : faces) {
        Block face=chestToLock.getFace(blockFace);
        if (face.getTypeId() == 54) {
          ChestData thatChest=chestFunctions.getChest(face.getLocation());
          thatChest.setName(""String_Node_Str"");
          chestFunctions.plugin.getDatabase().save(thatChest);
        }
      }
      player.sendMessage(ChatColor.DARK_PURPLE + ""String_Node_Str"");
    }
  }
  return true;
}",0.666270783847981
7528,"@Override public void onPlayerRespawn(PlayerRespawnEvent event){
  ItemStack item=new ItemStack(Material.GOLD_AXE,1);
  event.getPlayer().setItemInHand(item);
}","@Override public void onPlayerRespawn(PlayerRespawnEvent event){
  Player p=event.getPlayer();
  p.sendMessage(""String_Node_Str"");
}",0.684931506849315
7529,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled()) {
    return;
  }
  Player player=event.getPlayer();
  Block myBlock=event.getClickedBlock();
  if (myBlock.getTypeId() == 54 && plugin.chestMachine.openChest(player,myBlock) == true) {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return;
  }
 else   if (event.getClickedBlock().getTypeId() == 54) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if ((event.getClickedBlock().getType() != Material.CHEST && event.getClickedBlock().getType() != Material.WORKBENCH && event.getClickedBlock().getType() != Material.FURNACE && event.getClickedBlock().getType() != Material.DISPENSER && event.getClickedBlock().getType() != Material.STONE_BUTTON && event.getClickedBlock().getType() != Material.LEVER && event.getClickedBlock().getType() != Material.WOODEN_DOOR && event.getClickedBlock().getType() != Material.IRON_DOOR_BLOCK && event.getClickedBlock().getType() != Material.FIRE && event.getClickedBlock().getType() != Material.CAKE_BLOCK)) {
    if (!event.hasItem()) {
      return;
    }
    if (event.getItem().getType() == Material.FENCE) {
      Block b=event.getClickedBlock().getFace(event.getBlockFace(),1);
      if (b.getTypeId() == 0) {
        BlockState oldState=b.getState();
        b.setType(event.getItem().getType());
        BlockPlaceEvent placeEvent=new BlockPlaceEvent(b,oldState,event.getClickedBlock(),event.getItem(),event.getPlayer(),true);
        plugin.getServer().getPluginManager().callEvent(placeEvent);
        if (placeEvent.isCancelled() || !placeEvent.canBuild()) {
          b.setType(oldState.getType());
          b.setData(oldState.getData().getData());
        }
 else {
          int amnt=event.getItem().getAmount();
          if (amnt > 1)           event.getItem().setAmount(amnt - 1);
 else           event.getPlayer().getInventory().remove(event.getItem());
        }
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled()) {
    return;
  }
  Player player=event.getPlayer();
  Block myBlock=event.getClickedBlock();
  if (myBlock.getTypeId() == 54 && plugin.chestMachine.openChest(player,myBlock) == true) {
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return;
  }
 else   if (event.getClickedBlock().getTypeId() == 54) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if ((event.getClickedBlock().getType() != Material.CHEST && event.getClickedBlock().getType() != Material.WORKBENCH && event.getClickedBlock().getType() != Material.FURNACE && event.getClickedBlock().getType() != Material.DISPENSER && event.getClickedBlock().getType() != Material.STONE_BUTTON && event.getClickedBlock().getType() != Material.LEVER && event.getClickedBlock().getType() != Material.WOODEN_DOOR && event.getClickedBlock().getType() != Material.IRON_DOOR_BLOCK && event.getClickedBlock().getType() != Material.FIRE && event.getClickedBlock().getType() != Material.CAKE_BLOCK)) {
      if (!event.hasItem()) {
        return;
      }
      if (event.getItem().getType() == Material.FENCE) {
        Block b=event.getClickedBlock().getFace(event.getBlockFace(),1);
        if (b.getTypeId() == 0) {
          BlockState oldState=b.getState();
          b.setType(event.getItem().getType());
          BlockPlaceEvent placeEvent=new BlockPlaceEvent(b,oldState,event.getClickedBlock(),event.getItem(),event.getPlayer(),true);
          plugin.getServer().getPluginManager().callEvent(placeEvent);
          if (placeEvent.isCancelled() || !placeEvent.canBuild()) {
            b.setType(oldState.getType());
            b.setData(oldState.getData().getData());
          }
 else {
            int amnt=event.getItem().getAmount();
            if (amnt > 1)             event.getItem().setAmount(amnt - 1);
 else             event.getPlayer().getInventory().remove(event.getItem());
          }
        }
      }
    }
  }
}",0.9634966378482228
7530,"@Override public void onEnable(){
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockListener,Priority.Lowest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","@Override public void onEnable(){
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_CHAT,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.PLAYER_LOGIN,this.playerListener,Priority.Low,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_INTERACT,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,this.blockListener,Priority.Lowest,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,this.blockListener,Priority.Lowest,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
  chestMachine.Load();
  rankMachine.Load();
}",0.9709114414996768
7531,"@Override public void onDisable(){
  System.out.println(""String_Node_Str"");
}","@Override public void onDisable(){
  chestMachine.Save();
  rankMachine.Save();
  System.out.println(""String_Node_Str"");
}",0.7738693467336684
7532,"@Override public void onBlockPlace(BlockPlaceEvent event){
  Player p=event.getPlayer();
  if (ARGAntiPirate.rankMachine.getRank(p) <= 0) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
 else {
    Block placedBlock=event.getBlock();
    Location chestLocation=placedBlock.getLocation();
    if ((event.getItemInHand().getTypeId() == 54 && event.getBlockReplacedState().getTypeId() == 78)) {
      double Ypos=placedBlock.getLocation().getY();
      chestLocation.setY(Ypos - 1);
    }
 else     if (placedBlock.getTypeId() == 54) {
      placedBlock=placedBlock.getWorld().getBlockAt(chestLocation);
      ARGAntiPirate.chestMachine.lockIt(p,placedBlock);
    }
  }
}","@Override public void onBlockPlace(BlockPlaceEvent event){
  Player p=event.getPlayer();
  if (ARGAntiPirate.rankMachine.getRank(p) <= 0) {
    p.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
    return;
  }
  Block placedBlock=event.getBlock();
  Location chestLocation=placedBlock.getLocation();
  if (placedBlock.getTypeId() == 54) {
    if (ARGAntiPirate.chestMachine.lockIt(p,placedBlock)) {
      return;
    }
 else {
      event.setCancelled(true);
    }
  }
 else   if ((event.getItemInHand().getTypeId() == 54 && event.getBlockReplacedState().getTypeId() == 78)) {
    double Ypos=placedBlock.getLocation().getY();
    chestLocation.setY(Ypos - 1);
    placedBlock=placedBlock.getWorld().getBlockAt(chestLocation);
    if (ARGAntiPirate.chestMachine.lockIt(p,placedBlock)) {
      return;
    }
 else {
      event.setCancelled(true);
    }
  }
}",0.484472049689441
7533,"@Override public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  int myRank=ARGAntiPirate.rankMachine.getRank(player);
switch (myRank) {
case 0:
    player.setDisplayName(ChatColor.RED + player.getName() + ChatColor.WHITE);
  return;
case 1:
player.setDisplayName(ChatColor.GRAY + player.getName() + ChatColor.WHITE);
return;
case 2:
player.setDisplayName(ChatColor.DARK_GRAY + player.getName() + ChatColor.WHITE);
return;
case 3:
player.setDisplayName(ChatColor.DARK_PURPLE + player.getName() + ChatColor.WHITE);
return;
case 4:
player.setDisplayName(ChatColor.GREEN + player.getName() + ChatColor.WHITE);
return;
case 5:
player.setDisplayName(ChatColor.GOLD + player.getName() + ChatColor.WHITE);
return;
}
player.setDisplayName(ChatColor.RED + player.getName() + ChatColor.WHITE);
}","@Override public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  int myRank=ARGAntiPirate.rankMachine.getRank(player);
  if (player.getName().equalsIgnoreCase(""String_Node_Str"")) {
    player.setDisplayName(ChatColor.DARK_PURPLE + player.getName() + ChatColor.WHITE);
  }
 else {
switch (myRank) {
case 0:
      player.setDisplayName(ChatColor.RED + player.getName() + ChatColor.WHITE);
    return;
case 1:
  player.setDisplayName(ChatColor.GRAY + player.getName() + ChatColor.WHITE);
return;
case 2:
player.setDisplayName(ChatColor.DARK_GRAY + player.getName() + ChatColor.WHITE);
return;
case 3:
player.setDisplayName(ChatColor.DARK_PURPLE + player.getName() + ChatColor.WHITE);
return;
case 4:
player.setDisplayName(ChatColor.GREEN + player.getName() + ChatColor.WHITE);
return;
case 5:
player.setDisplayName(ChatColor.GOLD + player.getName() + ChatColor.WHITE);
return;
}
player.setDisplayName(ChatColor.RED + player.getName() + ChatColor.WHITE);
}
}",0.7418101054969461
7534,"public boolean openChest(Player player,Block targetChest){
  String myOwner=ARGAntiPirate.chestMachine.getOwner(targetChest.getLocation());
  if (myOwner.equals(player.getName()) || ARGAntiPirate.rankMachine.getRank(player) > 4) {
    player.sendMessage(""String_Node_Str"" + myOwner);
    return true;
  }
 else   if (myOwner.equals(""String_Node_Str"") || myOwner.equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  return false;
}","public boolean openChest(Player player,Block targetChest){
  String myOwner=ARGAntiPirate.chestMachine.getOwner(targetChest.getLocation());
  player.sendMessage(""String_Node_Str"" + myOwner);
  if (myOwner.equals(player.getName()) || ARGAntiPirate.rankMachine.getRank(player) > 4) {
    return true;
  }
 else   if (myOwner.equals(""String_Node_Str"") || myOwner.equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(""String_Node_Str"");
    return true;
  }
  return false;
}",0.8918918918918919
7535,"public boolean next(){
  frame this_frame=null;
  if (on_time < frames.size()) {
    ++on_time;
    this_frame=frames.get(on_time);
    output(on_time,this_frame);
    p.getServer().broadcastMessage(""String_Node_Str"" + (on_time + 1) + ""String_Node_Str""+ this_frame.frame_blocks_data.size()+ ""String_Node_Str"");
    this_frame.draw();
    return true;
  }
 else {
    return false;
  }
}","public boolean next(){
  frame this_frame=null;
  if (on_time + 1 < frames.size()) {
    ++on_time;
    this_frame=frames.get(on_time);
    output(on_time,this_frame);
    p.getServer().broadcastMessage(""String_Node_Str"" + (on_time + 1) + ""String_Node_Str""+ this_frame.frame_blocks_data.size()+ ""String_Node_Str"");
    this_frame.draw();
    return true;
  }
 else {
    return false;
  }
}",0.9948453608247424
7536,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  Player player=null;
  String commandName=command.getName();
  if (sender instanceof Player) {
    player=(Player)sender;
  }
 else {
    log.info(""String_Node_Str"");
    return false;
  }
  Animator animator=getAnimator(player.getName());
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation == null) {
          createNewAnimation(args[0],player);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (!animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      animator.closeAnimation();
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation != null) {
          animator.openAnimation(animation);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (!open_anime.isAreaSet()) {
        if (animator.locationsSet()) {
          Area area=new Area(this,player.getWorld(),animator.getLoc1(),animator.getLoc2());
          open_anime.setArea(area);
          player.sendMessage(""String_Node_Str"" + area.get_blocks().size());
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        frameset this_frameset=open_anime.getFrames();
        if (this_frameset.frames.size() == 0) {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          for (          Location location : open_anime.getArea().get_blocks()) {
            blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_data);
          open_anime.setLastFrameTypes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_type);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
 else {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          Map<Location,Material> jprevtype=open_anime.getLastFrameTypes();
          Map<Location,Byte> jprevbyte=open_anime.getLastFrameBytes();
          for (          Location location : open_anime.getArea().get_blocks()) {
            if (this_frameset.this_world.getBlockAt(location).getType() != jprevtype.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevtype.put(location,this_frameset.this_world.getBlockAt(location).getType());
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
 else             if (this_frameset.this_world.getBlockAt(location).getData() != jprevbyte.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(jprevbyte);
          open_anime.setLastFrameTypes(jprevtype);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (!open_anime.isPlaying()) {
          Thread animation_player=null;
          if (args.length == 1) {
            if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
              animation_player=new play(this,open_anime);
            }
 else {
              open_anime.setRepeat(false);
              animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
            }
          }
 else           if (args.length == 2) {
            if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
            }
            animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
          }
 else {
            open_anime.setRepeat(false);
            animation_player=new play(this,open_anime);
          }
          animation_player.start();
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (open_anime.isPlaying()) {
          if (open_anime.isRepeat()) {
            player.sendMessage(""String_Node_Str"");
            open_anime.setRepeat(false);
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (args.length == 1) {
          if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            Integer hi=0;
            while (hi < g.frames.size()) {
              g.gt(hi);
              hi++;
            }
            player.sendMessage(""String_Node_Str"" + g.frames.size() + ""String_Node_Str"");
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            g.gt(0);
            player.sendMessage(""String_Node_Str"");
          }
 else           if (is_integer(args[0])) {
            frameset g=open_anime.getFrames();
            if (g.frames.size() >= Integer.valueOf(args[0])) {
              Integer hi=0;
              while (hi < Integer.valueOf(args[0])) {
                g.gt(hi);
                hi++;
              }
              player.sendMessage(""String_Node_Str"" + (Integer.valueOf(args[0]) + 1) + ""String_Node_Str"");
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  Player player=null;
  String commandName=command.getName();
  if (sender instanceof Player) {
    player=(Player)sender;
  }
 else {
    log.info(""String_Node_Str"");
    return false;
  }
  Animator animator=getAnimator(player.getName());
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation == null) {
          createNewAnimation(args[0],player);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (!animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      animator.closeAnimation();
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation != null) {
          animator.openAnimation(animation);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (!open_anime.isAreaSet()) {
        if (animator.locationsSet()) {
          Area area=new Area(this,player.getWorld(),animator.getLoc1(),animator.getLoc2());
          open_anime.setArea(area);
          player.sendMessage(""String_Node_Str"" + area.get_blocks().size());
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        frameset this_frameset=open_anime.getFrames();
        if (this_frameset.frames.size() == 0) {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          for (          Location location : open_anime.getArea().get_blocks()) {
            blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
          }
          this_frameset.add_frame(blocks);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
 else {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          Map<Location,Material> jprevtype=this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_type;
          Map<Location,Byte> jprevbyte=this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_data;
          for (          Location location : open_anime.getArea().get_blocks()) {
            if (this_frameset.this_world.getBlockAt(location).getType() != jprevtype.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
            }
 else             if (this_frameset.this_world.getBlockAt(location).getData() != jprevbyte.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
            }
          }
          this_frameset.add_frame(blocks);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (!open_anime.isPlaying()) {
          Thread animation_player=null;
          if (args.length == 1) {
            if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
              animation_player=new play(this,open_anime);
            }
 else {
              open_anime.setRepeat(false);
              animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
            }
          }
 else           if (args.length == 2) {
            if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
            }
            animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
          }
 else {
            open_anime.setRepeat(false);
            animation_player=new play(this,open_anime);
          }
          animation_player.start();
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (open_anime.isPlaying()) {
          if (open_anime.isRepeat()) {
            player.sendMessage(""String_Node_Str"");
            open_anime.setRepeat(false);
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (args.length == 1) {
          if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            Integer hi=0;
            while (hi < g.frames.size()) {
              g.gt(hi);
              hi++;
            }
            player.sendMessage(""String_Node_Str"" + g.frames.size() + ""String_Node_Str"");
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            g.gt(0);
            player.sendMessage(""String_Node_Str"");
          }
 else           if (is_integer(args[0])) {
            frameset g=open_anime.getFrames();
            if (g.frames.size() >= Integer.valueOf(args[0])) {
              Integer hi=0;
              while (hi < Integer.valueOf(args[0])) {
                g.gt(hi);
                hi++;
              }
              player.sendMessage(""String_Node_Str"" + (Integer.valueOf(args[0]) + 1) + ""String_Node_Str"");
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.934469767154592
7537,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  Player player=null;
  String commandName=command.getName();
  if (sender instanceof Player) {
    player=(Player)sender;
  }
 else {
    log.info(""String_Node_Str"");
    return false;
  }
  Animator animator=getAnimator(player.getName());
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation == null) {
          createNewAnimation(args[0],player);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (!animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      animator.closeAnimation();
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation == null) {
          animator.openAnimation(animation);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (!open_anime.isAreaSet()) {
        if (animator.locationsSet()) {
          Area area=new Area(this,player.getWorld(),animator.getLoc1(),animator.getLoc2());
          open_anime.setArea(area);
          player.sendMessage(""String_Node_Str"" + area.get_blocks().size());
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        frameset this_frameset=open_anime.getFrames();
        if (this_frameset.frames.size() == 0) {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          for (          Location location : open_anime.getArea().get_blocks()) {
            blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_data);
          open_anime.setLastFrameTypes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_type);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
 else {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          Map<Location,Material> jprevtype=open_anime.getLastFrameTypes();
          Map<Location,Byte> jprevbyte=open_anime.getLastFrameBytes();
          for (          Location location : open_anime.getArea().get_blocks()) {
            if (this_frameset.this_world.getBlockAt(location).getType() != jprevtype.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevtype.put(location,this_frameset.this_world.getBlockAt(location).getType());
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
 else             if (this_frameset.this_world.getBlockAt(location).getData() != jprevbyte.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(jprevbyte);
          open_anime.setLastFrameTypes(jprevtype);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (!open_anime.isPlaying()) {
          Thread animation_player=null;
          if (args.length == 1) {
            if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
              animation_player=new play(this,open_anime);
            }
 else {
              open_anime.setRepeat(false);
              animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
            }
          }
 else           if (args.length == 2) {
            if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
            }
            animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
          }
 else {
            open_anime.setRepeat(false);
            animation_player=new play(this,open_anime);
          }
          animation_player.start();
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (open_anime.isPlaying()) {
          if (open_anime.isRepeat()) {
            player.sendMessage(""String_Node_Str"");
            open_anime.setRepeat(false);
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (args.length == 1) {
          if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            Integer hi=0;
            while (hi < g.frames.size()) {
              g.gt(hi);
              hi++;
            }
            player.sendMessage(""String_Node_Str"" + g.frames.size() + ""String_Node_Str"");
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            g.gt(0);
            player.sendMessage(""String_Node_Str"");
          }
 else           if (is_integer(args[0])) {
            frameset g=open_anime.getFrames();
            if (g.frames.size() >= Integer.valueOf(args[0])) {
              Integer hi=0;
              while (hi < Integer.valueOf(args[0])) {
                g.gt(hi);
                hi++;
              }
              player.sendMessage(""String_Node_Str"" + (Integer.valueOf(args[0]) + 1) + ""String_Node_Str"");
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  Player player=null;
  String commandName=command.getName();
  if (sender instanceof Player) {
    player=(Player)sender;
  }
 else {
    log.info(""String_Node_Str"");
    return false;
  }
  Animator animator=getAnimator(player.getName());
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation == null) {
          createNewAnimation(args[0],player);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (!animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      animator.closeAnimation();
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      player.sendMessage(""String_Node_Str"");
    }
 else {
      if (args.length == 1) {
        Animation animation=getAnimation(args[0]);
        if (animation != null) {
          animator.openAnimation(animation);
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (!open_anime.isAreaSet()) {
        if (animator.locationsSet()) {
          Area area=new Area(this,player.getWorld(),animator.getLoc1(),animator.getLoc2());
          open_anime.setArea(area);
          player.sendMessage(""String_Node_Str"" + area.get_blocks().size());
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        frameset this_frameset=open_anime.getFrames();
        if (this_frameset.frames.size() == 0) {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          for (          Location location : open_anime.getArea().get_blocks()) {
            blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_data);
          open_anime.setLastFrameTypes(this_frameset.frames.get((this_frameset.frames.size() - 1)).frame_blocks_type);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
 else {
          Hashtable<Integer,Block> blocks=new Hashtable<Integer,Block>();
          Map<Location,Material> jprevtype=open_anime.getLastFrameTypes();
          Map<Location,Byte> jprevbyte=open_anime.getLastFrameBytes();
          for (          Location location : open_anime.getArea().get_blocks()) {
            if (this_frameset.this_world.getBlockAt(location).getType() != jprevtype.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevtype.put(location,this_frameset.this_world.getBlockAt(location).getType());
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
 else             if (this_frameset.this_world.getBlockAt(location).getData() != jprevbyte.get(location)) {
              blocks.put(blocks.size(),this_frameset.this_world.getBlockAt(location));
              jprevbyte.put(location,this_frameset.this_world.getBlockAt(location).getData());
            }
          }
          this_frameset.add_frame(blocks);
          open_anime.setLastFrameBytes(jprevbyte);
          open_anime.setLastFrameTypes(jprevtype);
          player.sendMessage(""String_Node_Str"" + blocks.size() + ""String_Node_Str""+ this_frameset.frames.size());
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (!open_anime.isPlaying()) {
          Thread animation_player=null;
          if (args.length == 1) {
            if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
              animation_player=new play(this,open_anime);
            }
 else {
              open_anime.setRepeat(false);
              animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
            }
          }
 else           if (args.length == 2) {
            if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
              open_anime.setRepeat(true);
            }
            animation_player=new play(this,open_anime,Integer.valueOf(args[0]));
          }
 else {
            open_anime.setRepeat(false);
            animation_player=new play(this,open_anime);
          }
          animation_player.start();
          player.sendMessage(""String_Node_Str"");
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (open_anime.isPlaying()) {
          if (open_anime.isRepeat()) {
            player.sendMessage(""String_Node_Str"");
            open_anime.setRepeat(false);
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
 else   if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    if (animator.hasOpenAnimation()) {
      Animation open_anime=animator.getOpenAnimation();
      if (open_anime.isAreaSet()) {
        if (args.length == 1) {
          if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            Integer hi=0;
            while (hi < g.frames.size()) {
              g.gt(hi);
              hi++;
            }
            player.sendMessage(""String_Node_Str"" + g.frames.size() + ""String_Node_Str"");
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            frameset g=open_anime.getFrames();
            g.gt(0);
            player.sendMessage(""String_Node_Str"");
          }
 else           if (is_integer(args[0])) {
            frameset g=open_anime.getFrames();
            if (g.frames.size() >= Integer.valueOf(args[0])) {
              Integer hi=0;
              while (hi < Integer.valueOf(args[0])) {
                g.gt(hi);
                hi++;
              }
              player.sendMessage(""String_Node_Str"" + (Integer.valueOf(args[0]) + 1) + ""String_Node_Str"");
            }
 else {
              player.sendMessage(""String_Node_Str"");
            }
          }
 else {
            player.sendMessage(""String_Node_Str"");
          }
        }
 else {
          player.sendMessage(""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  return false;
}",0.9998803970816889
7538,"/** 
 * {@inheritDoc} 
 */
public List<XMLObject> getOrderedChildren(){
  ArrayList<XMLObject> children=new ArrayList<XMLObject>();
  if (getSignature() != null) {
    children.add(getSignature());
  }
  if (getExpires() != null) {
    children.add(getExpires());
  }
  if (getSubject() != null) {
    children.add(getSubject());
  }
  children.addAll(getAliases());
  children.addAll(getTypes());
  children.addAll(getLinks());
  children.addAll(getUnknownXMLObjects());
  return Collections.unmodifiableList(children);
}","/** 
 * {@inheritDoc} 
 */
public List<XMLObject> getOrderedChildren(){
  ArrayList<XMLObject> children=new ArrayList<XMLObject>();
  if (getExpires() != null) {
    children.add(getExpires());
  }
  if (getSubject() != null) {
    children.add(getSubject());
  }
  children.addAll(getAliases());
  children.addAll(getTypes());
  children.addAll(getLinks());
  children.addAll(getUnknownXMLObjects());
  if (getSignature() != null) {
    children.add(getSignature());
  }
  return Collections.unmodifiableList(children);
}",0.8659003831417624
7539,"/** 
 * {@inheritDoc} 
 */
protected void marshallAttributes(XMLObject xmlObject,Element domElement) throws MarshallingException {
  XRD xrd=(XRD)xmlObject;
  if (xrd.getID() != null) {
    domElement.setAttributeNS(XRD.ID_ATTRIB_NAME.getNamespaceURI(),XRD.ID_ATTRIB_NAME.getLocalPart(),xrd.getID());
  }
  super.marshallAttributes(xmlObject,domElement);
}","/** 
 * {@inheritDoc} 
 */
protected void marshallAttributes(XMLObject xmlObject,Element domElement) throws MarshallingException {
  XRD xrd=(XRD)xmlObject;
  if (xrd.getID() != null) {
    domElement.setAttributeNS(XRD.ID_ATTRIB_NAME.getNamespaceURI(),XRD.ID_ATTRIB_NAME.getPrefix() + ""String_Node_Str"" + XRD.ID_ATTRIB_NAME.getLocalPart(),xrd.getID());
  }
  super.marshallAttributes(xmlObject,domElement);
}",0.930718954248366
7540,"/** 
 * Sign the XRD.
 * @param xrd XRD to sign
 */
public void addSignature(XRD xrd) throws Exception {
  QName qname=new QName(XMLConstants.XMLSIG_NS,Signature.DEFAULT_ELEMENT_LOCAL_NAME,XMLConstants.XMLSIG_PREFIX);
  Signature signature=(Signature)buildXMLObject(qname);
  KeyPair keyPair=SecurityHelper.generateKeyPair(""String_Node_Str"",1024,null);
  BasicCredential credential=SecurityHelper.getSimpleCredential(keyPair.getPublic(),keyPair.getPrivate());
  signature.setSigningCredential(credential);
  signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);
  signature.setSignatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA);
  xrd.setSignature(signature);
}","/** 
 * Sign the XRD.
 * @param xrd XRD to sign
 * @throws Exception if something breaks
 */
public void addSignature(XRD xrd) throws Exception {
  Signature signature=(Signature)buildXMLObject(Signature.DEFAULT_ELEMENT_NAME);
  Credential credential=getCredential();
  signature.setSigningCredential(credential);
  SecurityHelper.prepareSignatureParams(signature,credential,null,null);
  xrd.setSignature(signature);
}",0.3226950354609929
7541,"/** 
 * Test XRD building.
 * @throws Exception
 */
public void testXRD() throws Exception {
  QName qname=new QName(XRDConstants.XRD_NS,XRD.DEFAULT_ELEMENT_LOCAL_NAME,XRDConstants.XRD_PREFIX);
  XRD xrd=(XRD)buildXMLObject(qname);
  xrd.setID(""String_Node_Str"");
  addSignature(xrd);
  Marshaller marshaller=Configuration.getMarshallerFactory().getMarshaller(xrd);
  marshaller.marshall(xrd);
  Signer.signObject(xrd.getSignature());
  printXRD(xrd);
  System.out.println(""String_Node_Str"");
  printXRD2(xrd);
}","/** 
 * Test XRD building.
 * @throws Exception if something breaks
 */
public void testXRD() throws Exception {
  XRD xrd=(XRD)buildXMLObject(XRD.DEFAULT_ELEMENT_NAME);
  xrd.setID(""String_Node_Str"");
  Subject subject=(Subject)buildXMLObject(Subject.DEFAULT_ELEMENT_NAME);
  subject.setValue(""String_Node_Str"");
  xrd.setSubject(subject);
  addSignature(xrd);
  Configuration.getMarshallerFactory().getMarshaller(xrd).marshall(xrd);
  Signer.signObject(xrd.getSignature());
  System.out.println(XMLHelper.nodeToString(xrd.getDOM()));
}",0.2688274547187798
7542,"/** 
 * Match given link against media type values.
 * @param link link to match
 * @return true if link matches media type values for this filter
 */
protected boolean matchMediaTypes(Link link){
  if (link.getMediaTypes().size() != 0 && mediaTypes.size() != 0) {
    Set<String> linkMediaTypes=new HashSet<String>();
    for (    MediaType type : link.getMediaTypes()) {
      linkMediaTypes.add(type.getValue());
    }
    for (    String typeValue : mediaTypes) {
      if (!linkMediaTypes.contains(typeValue)) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * Match given link against media type values.
 * @param link link to match
 * @return true if link matches media type values for this filter
 */
protected boolean matchMediaTypes(Link link){
  if (mediaTypes.size() != 0) {
    Set<String> linkMediaTypes=new HashSet<String>();
    for (    MediaType type : link.getMediaTypes()) {
      linkMediaTypes.add(type.getValue());
    }
    for (    String typeValue : mediaTypes) {
      if (!linkMediaTypes.contains(typeValue)) {
        return false;
      }
    }
  }
  return true;
}",0.9495495495495496
7543,"/** 
 * Match given link against rel values.
 * @param link link to match
 * @return true if link matches rel values for this filter
 */
protected boolean matchRels(Link link){
  if (link.getRels().size() != 0 && rels.size() != 0) {
    Set<String> linkRels=new HashSet<String>();
    for (    Rel rel : link.getRels()) {
      linkRels.add(rel.getValue());
    }
    for (    String relValue : rels) {
      if (!linkRels.contains(relValue)) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * Match given link against rel values.
 * @param link link to match
 * @return true if link matches rel values for this filter
 */
protected boolean matchRels(Link link){
  if (rels.size() != 0) {
    Set<String> linkRels=new HashSet<String>();
    for (    Rel rel : link.getRels()) {
      linkRels.add(rel.getValue());
    }
    for (    String relValue : rels) {
      if (!linkRels.contains(relValue)) {
        return false;
      }
    }
  }
  return true;
}",0.9609053497942388
7544,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  HttpEntity entity=null;
  if (method == HttpMethod.GET) {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    String queryString=URLEncodedUtils.format(params,""String_Node_Str"");
    if (queryString != null && !queryString.isEmpty()) {
      url=url.contains(""String_Node_Str"") ? url + ""String_Node_Str"" + queryString : url + ""String_Node_Str"" + queryString;
    }
  }
 else {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    entity=new UrlEncodedFormEntity(params,""String_Node_Str"");
  }
  readGetParameters(url);
  HttpClient httpClient=new DefaultHttpClient();
  HttpUriRequest request=getRequest(method,url);
  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,connectTimeoutMillis);
  httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,readTimeoutMillis);
  httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT,USER_AGENT);
  httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  if (entity != null) {
    if (method == HttpMethod.POST) {
      HttpPost postRequest=(HttpPost)request;
      postRequest.setEntity(entity);
    }
 else     if (method == HttpMethod.PUT) {
      HttpPut putRequest=(HttpPut)request;
      putRequest.setEntity(entity);
    }
  }
  org.apache.http.HttpResponse apacheHCResponse=httpClient.execute(request);
  if (apacheHCResponse.getStatusLine().getStatusCode() >= 400) {
    HttpResponse httpResponse=toReturnValue(apacheHCResponse,charset);
    throw new HttpException(apacheHCResponse.getStatusLine().getReasonPhrase(),httpResponse);
  }
  return toReturnValue(apacheHCResponse,charset);
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  HttpEntity entity=null;
  if (method == HttpMethod.GET) {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    String queryString=URLEncodedUtils.format(params,""String_Node_Str"");
    if (queryString != null && !queryString.isEmpty()) {
      url=url.contains(""String_Node_Str"") ? url + ""String_Node_Str"" + queryString : url + ""String_Node_Str"" + queryString;
    }
  }
 else {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    entity=new UrlEncodedFormEntity(params,""String_Node_Str"");
  }
  readQueryStringAndAddToSignatureBaseString(url);
  HttpClient httpClient=new DefaultHttpClient();
  HttpUriRequest request=getRequest(method,url);
  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,connectTimeoutMillis);
  httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,readTimeoutMillis);
  httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT,USER_AGENT);
  httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  if (entity != null) {
    if (method == HttpMethod.POST) {
      HttpPost postRequest=(HttpPost)request;
      postRequest.setEntity(entity);
    }
 else     if (method == HttpMethod.PUT) {
      HttpPut putRequest=(HttpPut)request;
      putRequest.setEntity(entity);
    }
  }
  org.apache.http.HttpResponse apacheHCResponse=httpClient.execute(request);
  if (apacheHCResponse.getStatusLine().getStatusCode() >= 400) {
    HttpResponse httpResponse=toReturnValue(apacheHCResponse,charset);
    throw new HttpException(apacheHCResponse.getStatusLine().getReasonPhrase(),httpResponse);
  }
  return toReturnValue(apacheHCResponse,charset);
}",0.9889586490582376
7545,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  Request request=new Request(url);
  request.setEnableThrowingIOException(true);
  request.setUserAgent(USER_AGENT);
  request.setConnectTimeoutMillis(connectTimeoutMillis);
  request.setReadTimeoutMillis(readTimeoutMillis);
  request.setCharset(charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  if (method == HttpMethod.GET) {
    request.setQueryParams(requestParameters);
  }
 else {
    request.setFormParams(requestParameters);
  }
  readGetParameters(request.getUrl());
  readGetParameters(request.getQueryParams().toString());
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  try {
    Response response=HTTP.request(new Method(method.name()),request);
    return toReturnValue(response);
  }
 catch (  HTTPIOException ex) {
    HttpResponse httpResponse=toReturnValue(ex.getResponse());
    throw new HttpException(ex.getMessage(),httpResponse);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  Request request=new Request(url);
  request.setEnableThrowingIOException(true);
  request.setUserAgent(USER_AGENT);
  request.setConnectTimeoutMillis(connectTimeoutMillis);
  request.setReadTimeoutMillis(readTimeoutMillis);
  request.setCharset(charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  if (method == HttpMethod.GET) {
    request.setQueryParams(requestParameters);
  }
 else {
    request.setFormParams(requestParameters);
  }
  readQueryStringAndAddToSignatureBaseString(request.getUrl());
  readQueryStringAndAddToSignatureBaseString(request.getQueryParams().toString());
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  try {
    Response response=HTTP.request(new Method(method.name()),request);
    return toReturnValue(response);
  }
 catch (  HTTPIOException ex) {
    HttpResponse httpResponse=toReturnValue(ex.getResponse());
    throw new HttpException(ex.getMessage(),httpResponse);
  }
}",0.9643356643356644
7546,"public static boolean verifyPOST(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,Object> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  for (  String key : formParams.keySet()) {
    Object value=formParams.get(key);
    if (value != null) {
      elements.put(key,value.toString());
    }
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,HttpMethod.POST,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verifyPOST(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,String> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  for (  String key : formParams.keySet()) {
    String value=formParams.get(key);
    if (value != null) {
      elements.put(key,value);
    }
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,HttpMethod.POST,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}",0.5864962045545346
7547,"public static boolean verifyHMacGetRequest(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken){
  return verify(url,authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
}","public static boolean verifyHMacGetRequest(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken){
  return verify(url,queryString,authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
}",0.9393346379647748
7548,"public static boolean verify(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  if (httpMethod.equals(HttpMethod.POST)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verify(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  if (httpMethod.equals(HttpMethod.POST)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}",0.9258635214827295
7549,"public static boolean verifyHMacPostRequest(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken){
  return verify(url,authorizationHeader,consumer,accessToken,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
}","public static boolean verifyHMacPostRequest(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken){
  return verify(url,queryString,authorizationHeader,consumer,accessToken,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
}",0.9398058252427184
7550,"@Test public void verifyPOST_A$String$OAuthConsumer$OSignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> formParams=new HashMap<String,Object>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",authorizationHeader,consumer,accessToken,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verifyPOST_A$String$OAuthConsumer$OSignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> formParams=new HashMap<String,String>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,accessToken,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.972972972972973
7551,"@Test public void verifyPOST_A$String$OAuthConsumer$OAuthAccessToken$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> formParams=new HashMap<String,Object>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",authorizationHeader,consumer,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verifyPOST_A$String$OAuthConsumer$OAuthAccessToken$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> formParams=new HashMap<String,String>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9678407350689128
7552,"@Test public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9828897338403042
7553,"@Test public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod_AdditionalParameters() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod_AdditionalParameters() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9840989399293286
7554,"@Test public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9864457831325302
7555,"@Test(expected=IllegalArgumentException.class) public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod_POST() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test(expected=IllegalArgumentException.class) public void verify_A$String$OAuthConsumer$HttpMethod$SignatureMethod_POST() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9842931937172776
7556,"@Test public void verifyPOST_A$String$OAuthConsumer$OAuthAccessToken$SignatureMethod_empty() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> formParams=new HashMap<String,Object>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",authorizationHeader,consumer,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verifyPOST_A$String$OAuthConsumer$OAuthAccessToken$SignatureMethod_empty() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> formParams=new HashMap<String,String>();
  formParams.put(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verifyPOST(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,SignatureMethod.HMAC_SHA1,formParams);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9681335356600912
7557,"@Test(expected=IllegalArgumentException.class) public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod_POST() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
}","@Test(expected=IllegalArgumentException.class) public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod_POST() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.POST,SignatureMethod.HMAC_SHA1);
}",0.9858934169278996
7558,"@Test public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod_AdditionalParameters() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}","@Test public void verify_A$String$OAuthConsumer$OAuthAccessToken$HttpMethod$SignatureMethod_AdditionalParameters() throws Exception {
  String authorizationHeader=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
  boolean actual=SignedRequestVerifier.verify(""String_Node_Str"",""String_Node_Str"",authorizationHeader,consumer,accessToken,HttpMethod.GET,SignatureMethod.HMAC_SHA1);
  boolean expected=true;
  assertEquals(expected,actual);
}",0.9872159090909092
7559,"public static void main(String[] args) throws Exception {
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  additionalParams.put(""String_Node_Str"",""String_Node_Str"");
  String url=""String_Node_Str"";
  HttpMethod httpMethod=HttpMethod.GET;
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  String oAuthNonce=""String_Node_Str"";
  Long oAuthTimestamp=1272026745L;
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,authorizationHeader,consumer,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,accessToken,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,authorizationHeader,consumer,accessToken,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public static void main(String[] args) throws Exception {
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  additionalParams.put(""String_Node_Str"",""String_Node_Str"");
  String url=""String_Node_Str"";
  String queryString=null;
  HttpMethod httpMethod=HttpMethod.GET;
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  String oAuthNonce=""String_Node_Str"";
  Long oAuthTimestamp=1272026745L;
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,queryString,authorizationHeader,consumer,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,accessToken,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,queryString,authorizationHeader,consumer,accessToken,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.984540769930282
7560,"public void _handle(Boolean isAllowed,HttpMethod method,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws Exception {
  boolean isValid=false;
  if (method.equals(HttpMethod.POST)) {
    isValid=SignedRequestVerifier.verifyPOST(""String_Node_Str"",request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,SignatureMethod.HMAC_SHA1,request.getParameterMap());
  }
 else {
    isValid=SignedRequestVerifier.verify(""String_Node_Str"",request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,method,SignatureMethod.HMAC_SHA1);
  }
  if (isAllowed && isValid) {
    response.setStatus(HttpServletResponse.SC_OK);
  }
 else {
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
  }
  response.getWriter().print(""String_Node_Str"");
  baseRequest.setHandled(true);
}","public void _handle(Boolean isAllowed,HttpMethod method,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws Exception {
  boolean isValid=false;
  if (method.equals(HttpMethod.POST)) {
    isValid=SignedRequestVerifier.verifyPOST(""String_Node_Str"",request.getQueryString(),request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,SignatureMethod.HMAC_SHA1,request.getParameterMap());
  }
 else {
    isValid=SignedRequestVerifier.verify(""String_Node_Str"",request.getQueryString(),request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,method,SignatureMethod.HMAC_SHA1);
  }
  if (isAllowed && isValid) {
    response.setStatus(HttpServletResponse.SC_OK);
  }
 else {
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
  }
  response.getWriter().print(""String_Node_Str"");
  baseRequest.setHandled(true);
}",0.9705188679245284
7561,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  HttpEntity entity=null;
  if (method == HttpMethod.GET) {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    String queryString=URLEncodedUtils.format(params,""String_Node_Str"");
    if (queryString != null && !queryString.isEmpty()) {
      url=url.contains(""String_Node_Str"") ? url + ""String_Node_Str"" + queryString : url + ""String_Node_Str"" + queryString;
    }
  }
 else {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    entity=new UrlEncodedFormEntity(params,""String_Node_Str"");
  }
  HttpClient httpClient=new DefaultHttpClient();
  HttpUriRequest request=getRequest(method,url);
  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,connectTimeoutMillis);
  httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,readTimeoutMillis);
  httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT,USER_AGENT);
  httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  if (entity != null) {
    if (method == HttpMethod.POST) {
      HttpPost postRequest=(HttpPost)request;
      postRequest.setEntity(entity);
    }
 else     if (method == HttpMethod.PUT) {
      HttpPut putRequest=(HttpPut)request;
      putRequest.setEntity(entity);
    }
  }
  org.apache.http.HttpResponse apacheHCResponse=httpClient.execute(request);
  if (apacheHCResponse.getStatusLine().getStatusCode() >= 400) {
    HttpResponse httpResponse=toReturnValue(apacheHCResponse,charset);
    throw new HttpException(apacheHCResponse.getStatusLine().getReasonPhrase(),httpResponse);
  }
  return toReturnValue(apacheHCResponse,charset);
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  HttpEntity entity=null;
  if (method == HttpMethod.GET) {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    String queryString=URLEncodedUtils.format(params,""String_Node_Str"");
    if (queryString != null && !queryString.isEmpty()) {
      url=url.contains(""String_Node_Str"") ? url + ""String_Node_Str"" + queryString : url + ""String_Node_Str"" + queryString;
    }
  }
 else {
    List<NameValuePair> params=toNameValuePairList(requestParameters);
    entity=new UrlEncodedFormEntity(params,""String_Node_Str"");
  }
  readGetParameters(url);
  HttpClient httpClient=new DefaultHttpClient();
  HttpUriRequest request=getRequest(method,url);
  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,connectTimeoutMillis);
  httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,readTimeoutMillis);
  httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT,USER_AGENT);
  httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  if (entity != null) {
    if (method == HttpMethod.POST) {
      HttpPost postRequest=(HttpPost)request;
      postRequest.setEntity(entity);
    }
 else     if (method == HttpMethod.PUT) {
      HttpPut putRequest=(HttpPut)request;
      putRequest.setEntity(entity);
    }
  }
  org.apache.http.HttpResponse apacheHCResponse=httpClient.execute(request);
  if (apacheHCResponse.getStatusLine().getStatusCode() >= 400) {
    HttpResponse httpResponse=toReturnValue(apacheHCResponse,charset);
    throw new HttpException(apacheHCResponse.getStatusLine().getReasonPhrase(),httpResponse);
  }
  return toReturnValue(apacheHCResponse,charset);
}",0.99430823117338
7562,"List<Parameter> getNormalizedParameters(String oAuthNonce,Long oAuthTimestamp){
  List<Parameter> params=new ArrayList<Parameter>();
  params.add(new Parameter(""String_Node_Str"",consumer.getConsumerKey()));
  if (accessToken != null) {
    params.add(new Parameter(""String_Node_Str"",accessToken.getToken()));
  }
  params.add(new Parameter(""String_Node_Str"",oAuthNonce));
  params.add(new Parameter(""String_Node_Str"",signatureMethod));
  params.add(new Parameter(""String_Node_Str"",oAuthTimestamp));
  params.add(new Parameter(""String_Node_Str"",oAuthVersion));
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      Object parameter=additionalParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  if (postParameters != null && postParameters.size() > 0) {
    for (    String key : postParameters.keySet()) {
      Object parameter=postParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  Collections.sort(params,new Comparator<Parameter>(){
    public int compare(    Parameter p1,    Parameter p2){
      return p1.getKey().compareTo(p2.getKey());
    }
  }
);
  return params;
}","protected List<Parameter> getNormalizedParameters(String oAuthNonce,Long oAuthTimestamp){
  List<Parameter> params=new ArrayList<Parameter>();
  params.add(new Parameter(""String_Node_Str"",consumer.getConsumerKey()));
  if (accessToken != null) {
    params.add(new Parameter(""String_Node_Str"",accessToken.getToken()));
  }
  params.add(new Parameter(""String_Node_Str"",oAuthNonce));
  params.add(new Parameter(""String_Node_Str"",signatureMethod));
  params.add(new Parameter(""String_Node_Str"",oAuthTimestamp));
  params.add(new Parameter(""String_Node_Str"",oAuthVersion));
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      Object parameter=additionalParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  if (getParameters != null && getParameters.size() > 0) {
    for (    String key : getParameters.keySet()) {
      Object parameter=getParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  if (postParameters != null && postParameters.size() > 0) {
    for (    String key : postParameters.keySet()) {
      Object parameter=postParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  Collections.sort(params,new Comparator<Parameter>(){
    public int compare(    Parameter p1,    Parameter p2){
      return p1.getKey().compareTo(p2.getKey());
    }
  }
);
  return params;
}",0.8948605979173665
7563,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  Request request=new Request(url);
  request.setEnableThrowingIOException(true);
  request.setUserAgent(USER_AGENT);
  request.setConnectTimeoutMillis(connectTimeoutMillis);
  request.setReadTimeoutMillis(readTimeoutMillis);
  request.setCharset(charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  if (method == HttpMethod.GET) {
    request.setQueryParams(requestParameters);
  }
 else {
    request.setFormParams(requestParameters);
  }
  try {
    Response response=HTTP.request(new Method(method.name()),request);
    return toReturnValue(response);
  }
 catch (  HTTPIOException ex) {
    HttpResponse httpResponse=toReturnValue(ex.getResponse());
    throw new HttpException(ex.getMessage(),httpResponse);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  Request request=new Request(url);
  request.setEnableThrowingIOException(true);
  request.setUserAgent(USER_AGENT);
  request.setConnectTimeoutMillis(connectTimeoutMillis);
  request.setReadTimeoutMillis(readTimeoutMillis);
  request.setCharset(charset);
  for (  String name : headersToOverwrite.keySet()) {
    request.setHeader(name,headersToOverwrite.get(name));
  }
  if (method == HttpMethod.GET) {
    request.setQueryParams(requestParameters);
  }
 else {
    request.setFormParams(requestParameters);
  }
  readGetParameters(request.getUrl());
  readGetParameters(request.getQueryParams().toString());
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  request.setHeader(""String_Node_Str"",authorizationHeader);
  try {
    Response response=HTTP.request(new Method(method.name()),request);
    return toReturnValue(response);
  }
 catch (  HTTPIOException ex) {
    HttpResponse httpResponse=toReturnValue(ex.getResponse());
    throw new HttpException(ex.getMessage(),httpResponse);
  }
}",0.8588278658311832
7564,"@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth_GET() throws Exception {
  try {
    OAuthRealm realm=new OAuthRealm(""String_Node_Str"");
    Properties props=new Properties();
    props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
    String consumerKey=(String)props.get(""String_Node_Str"");
    String consumerSecret=(String)props.get(""String_Node_Str"");
    OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
    String token=(String)props.get(""String_Node_Str"");
    String tokenSecret=(String)props.get(""String_Node_Str"");
    OAuthAccessToken accessToken=new OAuthAccessToken(token,tokenSecret);
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,accessToken,signatureMethod);
    String url=""String_Node_Str"";
    HttpMethod method=HttpMethod.GET;
    String charset=""String_Node_Str"";
    HttpResponse actual=target.doRequest(url,method,new HashMap<String,Object>(),charset);
    assertNotNull(actual);
    assertThat(actual.getStatusCode(),is(200));
    System.out.println(actual.getHeaders());
    System.out.println(actual.getTextBody());
  }
 catch (  NullPointerException e) {
    System.out.println(""String_Node_Str"");
  }
}","@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth_GET() throws Exception {
  try {
    OAuthRealm realm=new OAuthRealm(""String_Node_Str"");
    Properties props=new Properties();
    props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
    String consumerKey=(String)props.get(""String_Node_Str"");
    String consumerSecret=(String)props.get(""String_Node_Str"");
    OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
    String token=(String)props.get(""String_Node_Str"");
    String tokenSecret=(String)props.get(""String_Node_Str"");
    OAuthAccessToken accessToken=new OAuthAccessToken(token,tokenSecret);
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,accessToken,signatureMethod);
    String url=""String_Node_Str"";
    HttpMethod method=HttpMethod.GET;
    String charset=""String_Node_Str"";
    HttpResponse actual=target.doRequest(url,method,new HashMap<String,Object>(),charset);
    assertNotNull(actual);
    assertThat(actual.getStatusCode(),is(200));
    System.out.println(actual.getHeaders());
  }
 catch (  NullPointerException e) {
    System.out.println(""String_Node_Str"");
  }
}",0.982101167315175
7565,"public static String encode(Object obj){
  String encoded=""String_Node_Str"";
  try {
    encoded=URLEncoder.encode(obj.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ignore) {
  }
  return encoded;
}","public static String encode(Object obj){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  String encoded=obj.toString();
  try {
    encoded=URLEncoder.encode(obj.toString(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ignore) {
  }
  return encoded;
}",0.8527131782945736
7566,"public static String decode(String encoded){
  String decoded=""String_Node_Str"";
  try {
    decoded=URLDecoder.decode(encoded,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ignore) {
  }
  return decoded;
}","public static String decode(String encoded){
  if (encoded == null) {
    return ""String_Node_Str"";
  }
  String decoded=encoded;
  try {
    decoded=URLDecoder.decode(encoded,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ignore) {
  }
catch (  IllegalArgumentException ignore) {
  }
  return decoded;
}",0.7697974217311234
7567,"public static boolean verifyPOST(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,String> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  if (formParams != null) {
    for (    String key : formParams.keySet()) {
      String value=formParams.get(key);
      if (value != null) {
        elements.put(key,value);
      }
    }
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,HttpMethod.POST,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verifyPOST(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,String> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> urlDecodedElements=parseAuthorizationHeader(authorizationHeader);
  if (formParams != null) {
    for (    String key : formParams.keySet()) {
      String value=formParams.get(key);
      if (value != null) {
        urlDecodedElements.put(key,value);
      }
    }
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : urlDecodedElements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,urlDecodedElements.get(name));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,HttpMethod.POST,urlDecodedElements.get(""String_Node_Str""),Long.valueOf(urlDecodedElements.get(""String_Node_Str"")));
  return signature.equals(urlDecodedElements.get(""String_Node_Str""));
}",0.9318018664752332
7568,"@Deprecated public static boolean verifyLegacyUncorrected(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","@Deprecated public static boolean verifyLegacyUncorrected(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> urlDecodedElements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : urlDecodedElements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,urlDecodedElements.get(name));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,urlDecodedElements.get(""String_Node_Str""),Long.valueOf(urlDecodedElements.get(""String_Node_Str"")));
  return signature.equals(urlDecodedElements.get(""String_Node_Str""));
}",0.913508260447036
7569,"public static boolean verify(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  if (httpMethod.equals(HttpMethod.POST)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verify(String url,String queryString,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  if (httpMethod.equals(HttpMethod.POST)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,String> urlDecodedElements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : urlDecodedElements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,urlDecodedElements.get(name));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  if (queryString == null) {
    queryString=""String_Node_Str"";
  }
  req.readQueryStringAndAddToSignatureBaseString(url + ""String_Node_Str"" + queryString);
  String signature=req.getSignature(url,httpMethod,urlDecodedElements.get(""String_Node_Str""),Long.valueOf(urlDecodedElements.get(""String_Node_Str"")));
  return signature.equals(urlDecodedElements.get(""String_Node_Str""));
}",0.930631332813718
7570,"public static Map<String,String> parseAuthorizationHeader(String authorizationHeader){
  Map<String,String> elements=new HashMap<String,String>();
  String[] keyAndValueArray=authorizationHeader.split(""String_Node_Str"");
  for (  String keyAndValue : keyAndValueArray) {
    String[] arr=keyAndValue.split(""String_Node_Str"");
    String key=arr[0].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    String value=arr[1].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    elements.put(key,value);
  }
  return elements;
}","public static Map<String,String> parseAuthorizationHeader(String authorizationHeader){
  Map<String,String> elements=new HashMap<String,String>();
  String[] keyAndValueArray=authorizationHeader.split(""String_Node_Str"");
  for (  String keyAndValue : keyAndValueArray) {
    String[] arr=keyAndValue.split(""String_Node_Str"");
    String key=arr[0].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    String value=arr[1].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    elements.put(key,OAuthEncoding.decode(value));
  }
  return elements;
}",0.97992700729927
7571,"public HttpException(java.lang.String message,HttpResponse response){
  setMessage(message);
  setResponse(response);
}","public HttpException(String message,HttpResponse response){
  setMessage(message);
  setResponse(response);
}",0.956140350877193
7572,"public static boolean verify(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verify(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}",0.7630922693266833
7573,"public static void main(String[] args) throws Exception {
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  additionalParams.put(""String_Node_Str"",""String_Node_Str"");
  SignedRequest signedRequest=SignedRequestFactory.create(new OAuthConsumer(""String_Node_Str"",""String_Node_Str""),new OAuthAccessToken(""String_Node_Str"",""String_Node_Str""),additionalParams);
  String signature=signedRequest.getSignature(""String_Node_Str"",HttpMethod.GET,""String_Node_Str"",1272026745L);
  if (""String_Node_Str"".equals(signature)) {
    System.out.println(""String_Node_Str"");
  }
}","public static void main(String[] args) throws Exception {
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  additionalParams.put(""String_Node_Str"",""String_Node_Str"");
  String url=""String_Node_Str"";
  HttpMethod httpMethod=HttpMethod.GET;
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  String oAuthNonce=""String_Node_Str"";
  Long oAuthTimestamp=1272026745L;
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,authorizationHeader,consumer,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
  OAuthAccessToken accessToken=new OAuthAccessToken(""String_Node_Str"",""String_Node_Str"");
{
    SignedRequest signedRequest=SignedRequestFactory.create(consumer,accessToken,additionalParams);
    String signature=signedRequest.getSignature(url,httpMethod,oAuthNonce,oAuthTimestamp);
    String authorizationHeader=signedRequest.getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
    System.out.println(authorizationHeader);
    boolean isValid=SignedRequestVerifier.verify(url,authorizationHeader,consumer,accessToken,httpMethod,signatureMethod);
    if (isValid) {
      System.out.println(""String_Node_Str"");
    }
  }
}",0.2820861678004535
7574,"public static boolean verify(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verify(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,HttpMethod httpMethod,SignatureMethod signatureMethod){
  if (authorizationHeader == null) {
    return false;
  }
  if (httpMethod.equals(HttpMethod.POST)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,httpMethod,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}",0.94882831181253
7575,"@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth_POST() throws Exception {
  try {
    OAuthRealm realm=new OAuthRealm(""String_Node_Str"");
    Properties props=new Properties();
    props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
    String consumerKey=(String)props.get(""String_Node_Str"");
    String consumerSecret=(String)props.get(""String_Node_Str"");
    OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
    String token=(String)props.get(""String_Node_Str"");
    String tokenSecret=(String)props.get(""String_Node_Str"");
    OAuthAccessToken accessToken=new OAuthAccessToken(token,tokenSecret);
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,accessToken,signatureMethod);
    String createUrl=""String_Node_Str"";
    HttpMethod method=HttpMethod.POST;
    String charset=""String_Node_Str"";
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",""String_Node_Str"");
    HttpResponse actual=target.doPost(createUrl,params,charset);
    assertNotNull(actual);
    assertThat(actual.getStatusCode(),is(200));
    System.out.println(actual.getHeaders());
    System.out.println(actual.getTextBody());
    String destroyUrl=""String_Node_Str"";
    HttpResponse actual2=target.doPost(destroyUrl,params,charset);
    assertNotNull(actual2);
    assertThat(actual2.getStatusCode(),is(200));
    System.out.println(actual2.getHeaders());
    System.out.println(actual2.getTextBody());
  }
 catch (  NullPointerException e) {
    System.out.println(""String_Node_Str"");
  }
}","@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth_POST() throws Exception {
  try {
    OAuthRealm realm=new OAuthRealm(""String_Node_Str"");
    Properties props=new Properties();
    props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
    String consumerKey=(String)props.get(""String_Node_Str"");
    String consumerSecret=(String)props.get(""String_Node_Str"");
    OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
    String token=(String)props.get(""String_Node_Str"");
    String tokenSecret=(String)props.get(""String_Node_Str"");
    OAuthAccessToken accessToken=new OAuthAccessToken(token,tokenSecret);
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,accessToken,signatureMethod);
    String createUrl=""String_Node_Str"";
    HttpMethod method=HttpMethod.POST;
    String charset=""String_Node_Str"";
    Map<String,Object> params=new HashMap<String,Object>();
    try {
      HttpResponse actual=target.doPost(createUrl,params,charset);
      assertNotNull(actual);
      assertThat(actual.getStatusCode(),is(200));
      System.out.println(actual.getHeaders());
      System.out.println(actual.getTextBody());
    }
 catch (    HttpException e) {
      System.out.println(e.getResponse().getTextBody());
    }
    String destroyUrl=""String_Node_Str"";
    HttpResponse actual2=target.doPost(destroyUrl,params,charset);
    assertNotNull(actual2);
    assertThat(actual2.getStatusCode(),is(200));
    System.out.println(actual2.getHeaders());
    System.out.println(actual2.getTextBody());
  }
 catch (  NullPointerException e) {
    System.out.println(""String_Node_Str"");
  }
}",0.8999708369787109
7576,"List<Parameter> getNormalizedParameters(String oAuthNonce,Long oAuthTimestamp){
  List<Parameter> params=new ArrayList<Parameter>();
  params.add(new Parameter(""String_Node_Str"",consumer.getConsumerKey()));
  if (accessToken != null) {
    params.add(new Parameter(""String_Node_Str"",accessToken.getToken()));
  }
  params.add(new Parameter(""String_Node_Str"",oAuthNonce));
  params.add(new Parameter(""String_Node_Str"",signatureMethod));
  params.add(new Parameter(""String_Node_Str"",oAuthTimestamp));
  params.add(new Parameter(""String_Node_Str"",oAuthVersion));
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      params.add(new Parameter(key,OAuthEncoding.encode(additionalParameters.get(key))));
    }
  }
  Collections.sort(params,new Comparator<Parameter>(){
    public int compare(    Parameter p1,    Parameter p2){
      return p1.getKey().compareTo(p2.getKey());
    }
  }
);
  return params;
}","List<Parameter> getNormalizedParameters(String oAuthNonce,Long oAuthTimestamp){
  List<Parameter> params=new ArrayList<Parameter>();
  params.add(new Parameter(""String_Node_Str"",consumer.getConsumerKey()));
  if (accessToken != null) {
    params.add(new Parameter(""String_Node_Str"",accessToken.getToken()));
  }
  params.add(new Parameter(""String_Node_Str"",oAuthNonce));
  params.add(new Parameter(""String_Node_Str"",signatureMethod));
  params.add(new Parameter(""String_Node_Str"",oAuthTimestamp));
  params.add(new Parameter(""String_Node_Str"",oAuthVersion));
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      Object parameter=additionalParameters.get(key);
      if (parameter != null) {
        params.add(new Parameter(key,OAuthEncoding.encode(parameter)));
      }
    }
  }
  Collections.sort(params,new Comparator<Parameter>(){
    public int compare(    Parameter p1,    Parameter p2){
      return p1.getKey().compareTo(p2.getKey());
    }
  }
);
  return params;
}",0.9311187103077676
7577,"public static boolean verifyPOST(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,Object> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  for (  String key : formParams.keySet()) {
    elements.put(key,formParams.get(key).toString());
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,HttpMethod.POST,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}","public static boolean verifyPOST(String url,String authorizationHeader,OAuthConsumer consumer,OAuthAccessToken accessToken,SignatureMethod signatureMethod,Map<String,Object> formParams){
  if (authorizationHeader == null) {
    return false;
  }
  Map<String,String> elements=parseAuthorizationHeader(authorizationHeader);
  for (  String key : formParams.keySet()) {
    Object value=formParams.get(key);
    if (value != null) {
      elements.put(key,value.toString());
    }
  }
  SignedRequest req=SignedRequestFactory.create(consumer,accessToken,signatureMethod);
  Map<String,Object> additionalParams=new HashMap<String,Object>();
  for (  String name : elements.keySet()) {
    String _name=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    if (!oAuthElementNames.contains(_name)) {
      additionalParams.put(name,OAuthEncoding.decode(elements.get(name)));
    }
  }
  req.setAdditionalAuthorizationHeaderParams(additionalParams);
  String signature=req.getSignature(url,HttpMethod.POST,elements.get(""String_Node_Str""),Long.valueOf(elements.get(""String_Node_Str"")));
  return OAuthEncoding.encode(signature).equals(elements.get(""String_Node_Str""));
}",0.8224462954844366
7578,"public static Map<String,String> parseAuthorizationHeader(String authorizationHeader){
  Map<String,String> elements=new HashMap<String,String>();
  String[] keyAndValueArray=authorizationHeader.split(""String_Node_Str"");
  for (  String keyAndValue : keyAndValueArray) {
    String[] arr=keyAndValue.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    elements.put(arr[0].trim(),arr[1].trim());
  }
  return elements;
}","public static Map<String,String> parseAuthorizationHeader(String authorizationHeader){
  Map<String,String> elements=new HashMap<String,String>();
  String[] keyAndValueArray=authorizationHeader.split(""String_Node_Str"");
  for (  String keyAndValue : keyAndValueArray) {
    String[] arr=keyAndValue.split(""String_Node_Str"");
    String key=arr[0].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    String value=arr[1].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    elements.put(key,value);
  }
  return elements;
}",0.7576374745417516
7579,"@Test public void doRequest_A$String$HttpMethod$Map$String() throws Exception {
  OAuthRealm realm=null;
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  Map<String,Object> requestParameters=new HashMap<String,Object>();
  requestParameters.put(""String_Node_Str"",""String_Node_Str"");
  String charset=""String_Node_Str"";
  HttpResponse actual=target.doRequest(url,method,requestParameters,charset);
  assertNotNull(actual);
}","@Test public void doRequest_A$String$HttpMethod$Map$String() throws Exception {
  OAuthRealm realm=null;
  OAuthConsumer consumer=new OAuthConsumer(""String_Node_Str"",""String_Node_Str"");
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestApacheHCImpl target=new SignedRequestApacheHCImpl(realm,consumer,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  Map<String,Object> requestParameters=new HashMap<String,Object>();
  requestParameters.put(""String_Node_Str"",""String_Node_Str"");
  requestParameters.put(""String_Node_Str"",null);
  String charset=""String_Node_Str"";
  HttpResponse actual=target.doRequest(url,method,requestParameters,charset);
  assertNotNull(actual);
}",0.9654199011997178
7580,"public void _handle(Boolean isAllowed,HttpMethod method,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws Exception {
  boolean isValid=SignedRequestVerifier.verify(""String_Node_Str"",request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,method,SignatureMethod.HMAC_SHA1);
  if (isAllowed && isValid) {
    response.setStatus(HttpServletResponse.SC_OK);
  }
 else {
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
  }
  response.getWriter().print(""String_Node_Str"");
  baseRequest.setHandled(true);
}","public void _handle(Boolean isAllowed,HttpMethod method,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws Exception {
  boolean isValid=false;
  if (method.equals(HttpMethod.POST)) {
    isValid=SignedRequestVerifier.verifyPOST(""String_Node_Str"",request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,SignatureMethod.HMAC_SHA1,request.getParameterMap());
  }
 else {
    isValid=SignedRequestVerifier.verify(""String_Node_Str"",request.getHeader(""String_Node_Str""),HttpServerSpec.SINGLETON_CONSUMER,method,SignatureMethod.HMAC_SHA1);
  }
  if (isAllowed && isValid) {
    response.setStatus(HttpServletResponse.SC_OK);
  }
 else {
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
  }
  response.getWriter().print(""String_Node_Str"");
  baseRequest.setHandled(true);
}",0.7997107736804049
7581,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + ""String_Node_Str"" + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  HttpResponse response=new HttpResponse();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  try {
    response.setContent(getResponseCotent(conn,charset));
  }
 catch (  IOException e) {
    throw e;
  }
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + ""String_Node_Str"" + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(""String_Node_Str"");
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  HttpResponse response=new HttpResponse();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  try {
    response.setContent(getResponseCotent(conn,charset));
  }
 catch (  IOException e) {
    throw e;
  }
  return response;
}",0.9868585732165206
7582,"@Test public void doPut_A$String() throws Exception {
  final HttpServer deleteServer=new HttpServer(new PutHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        deleteServer.start();
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER(),signatureMethod);
    request.doPut(""String_Node_Str"");
  }
  finally {
    deleteServer.stop();
  }
}","@Test public void doPut_A$String() throws Exception {
  final HttpServer server=new HttpServer(new PutHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          server.start();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER,signatureMethod);
    request.doPut(""String_Node_Str"");
  }
  finally {
    server.stop();
  }
}",0.8970099667774086
7583,"@Override public void run(){
  deleteServer.start();
}","@Override public void run(){
  try {
    server.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.5647058823529412
7584,"@Test public void doTrace_A$String() throws Exception {
  final HttpServer deleteServer=new HttpServer(new TraceHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        deleteServer.start();
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER(),signatureMethod);
    request.doTrace(""String_Node_Str"");
  }
  finally {
    deleteServer.stop();
  }
}","@Test public void doTrace_A$String() throws Exception {
  final HttpServer server=new HttpServer(new TraceHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          server.start();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER,signatureMethod);
    request.doTrace(""String_Node_Str"");
  }
  finally {
    server.stop();
  }
}",0.8980263157894737
7585,"@Test public void doDelete_A$String() throws Exception {
  final HttpServer deleteServer=new HttpServer(new DeleteHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        deleteServer.start();
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER(),signatureMethod);
    request.doDelete(""String_Node_Str"");
  }
  finally {
    deleteServer.stop();
  }
}","@Test public void doDelete_A$String() throws Exception {
  final HttpServer server=new HttpServer(new DeleteHandler());
  try {
    Runnable runnable=new Runnable(){
      @Override public void run(){
        try {
          server.start();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    new Thread(runnable).start();
    OAuthRealm realm=null;
    SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
    SignedRequest request=new SignedRequestImpl(realm,HttpServerSpec.SINGLETON_CONSUMER,signatureMethod);
    request.doDelete(""String_Node_Str"");
  }
  finally {
    server.stop();
  }
}",0.8985270049099836
7586,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + ""String_Node_Str"" + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  conn.connect();
  HttpResponse response=new HttpResponse();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  try {
    response.setContent(getResponseCotent(conn,charset));
  }
 catch (  IOException e) {
    throw e;
  }
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + ""String_Node_Str"" + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  HttpResponse response=new HttpResponse();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  try {
    response.setContent(getResponseCotent(conn,charset));
  }
 catch (  IOException e) {
    throw e;
  }
  return response;
}",0.9943253467843632
7587,"/** 
 * {@inheritDoc}
 */
@Override public HttpURLConnection getHttpURLConnection(String url,HttpMethod method) throws IOException {
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis();
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  conn.setConnectTimeout(3000);
  conn.setReadTimeout(10000);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestMethod(method.toString());
  conn.setRequestProperty(""String_Node_Str"",authorizationHeader);
  return conn;
}","/** 
 * {@inheritDoc}
 */
@Override public HttpURLConnection getHttpURLConnection(String url,HttpMethod method) throws IOException {
  String oAuthNonce=String.valueOf(new SecureRandom().nextLong());
  Long oAuthTimestamp=System.currentTimeMillis() / 1000;
  String signature=getSignature(url,method,oAuthNonce,oAuthTimestamp);
  String authorizationHeader=getAuthorizationHeader(signature,oAuthNonce,oAuthTimestamp);
  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
  conn.setConnectTimeout(3000);
  conn.setReadTimeout(10000);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestMethod(method.toString());
  conn.setRequestProperty(""String_Node_Str"",authorizationHeader);
  return conn;
}",0.99527983816588
7588,"@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth() throws Exception {
  String realm=""String_Node_Str"";
  Properties props=new Properties();
  props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
  String consumerKey=(String)props.get(""String_Node_Str"");
  String consumerSecret=(String)props.get(""String_Node_Str"");
  OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
  String token=(String)props.get(""String_Node_Str"");
  String tokenSecret=(String)props.get(""String_Node_Str"");
  OAuthToken accessToken=new OAuthToken(token,tokenSecret);
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestImpl target=new SignedRequestImpl(realm,consumer,accessToken,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  String charset=""String_Node_Str"";
}","@Test public void doRequest_A$String$HttpMethod$Map$String_TwitterOAuth() throws Exception {
  String realm=""String_Node_Str"";
  Properties props=new Properties();
  props.load(this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str""));
  String consumerKey=(String)props.get(""String_Node_Str"");
  String consumerSecret=(String)props.get(""String_Node_Str"");
  OAuthConsumer consumer=new OAuthConsumer(consumerKey,consumerSecret);
  String token=(String)props.get(""String_Node_Str"");
  String tokenSecret=(String)props.get(""String_Node_Str"");
  OAuthToken accessToken=new OAuthToken(token,tokenSecret);
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestImpl target=new SignedRequestImpl(realm,consumer,accessToken,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  String charset=""String_Node_Str"";
  HttpResponse actual=target.doRequest(url,method,null,charset);
  assertNotNull(actual);
  System.out.println(actual.getHeaders());
  System.out.println(actual.getContent());
}",0.908713692946058
7589,"String getResponseCotent(HttpURLConnection conn,String charset) throws IOException {
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=conn.getInputStream();
    br=new BufferedReader(new InputStreamReader(is,charset));
    StringBuilder buf=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      buf.append(line);
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception e2) {
      }
    }
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}","String getResponseCotent(HttpURLConnection conn,String charset) throws IOException {
  InputStream is=null;
  BufferedReader br=null;
  try {
    is=conn.getInputStream();
    Reader isr=(charset != null) ? new InputStreamReader(is,charset) : new InputStreamReader(is);
    br=new BufferedReader(isr);
    StringBuilder buf=new StringBuilder();
    String line=null;
    while ((line=br.readLine()) != null) {
      buf.append(line);
      buf.append(""String_Node_Str"");
    }
    return buf.toString();
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception e2) {
      }
    }
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception e2) {
      }
    }
  }
}",0.9288762446657184
7590,"String getAuthorizationHeader(String signature,String oAuthNonce,Long oAuthTimestamp){
  StringBuilder buf=new StringBuilder();
  buf.append(""String_Node_Str"");
  if (realm != null) {
    buf.append(""String_Node_Str"" + realm + ""String_Node_Str"");
  }
  buf.append(""String_Node_Str"" + consumerKey + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + signatureMethod + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + signature + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthTimestamp + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthNonce + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthVersion + ""String_Node_Str"");
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      buf.append(key + ""String_Node_Str"" + additionalParameters.get(key)+ ""String_Node_Str"");
    }
  }
  return buf.toString();
}","String getAuthorizationHeader(String signature,String oAuthNonce,Long oAuthTimestamp){
  StringBuilder buf=new StringBuilder();
  buf.append(""String_Node_Str"");
  if (realm != null) {
    buf.append(""String_Node_Str"" + realm + ""String_Node_Str"");
  }
  if (token != null) {
    buf.append(""String_Node_Str"" + token + ""String_Node_Str"");
  }
  buf.append(""String_Node_Str"" + consumerKey + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + signatureMethod + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + signature + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthTimestamp + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthNonce + ""String_Node_Str"");
  buf.append(""String_Node_Str"" + oAuthVersion + ""String_Node_Str"");
  if (additionalParameters != null && additionalParameters.size() > 0) {
    for (    String key : additionalParameters.keySet()) {
      buf.append(key + ""String_Node_Str"" + additionalParameters.get(key)+ ""String_Node_Str"");
    }
  }
  return buf.toString();
}",0.9533678756476685
7591,"/** 
 * Do HTTP request and returns Http response
 * @param url               Request URL
 * @param method            HTTP Method
 * @param requestParameters Request parameters(OPTIONAL)
 * @param charset           Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException ;","/** 
 * Do HTTP request and returns Http response
 * @param url Request URL
 * @param method HTTP Method
 * @param requestParameters Request parameters(OPTIONAL)
 * @param charset Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException ;",0.954248366013072
7592,"/** 
 * Do POST / HTTP/1.1 request and returns Http response
 * @param url               Request URL
 * @param requestParameters Request parameters
 * @param charset           Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doPostRequest(String url,Map<String,Object> requestParameters,String charset) throws IOException ;","/** 
 * Do POST / HTTP/1.1 request and returns Http response
 * @param url Request URL
 * @param requestParameters Request parameters
 * @param charset Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doPostRequest(String url,Map<String,Object> requestParameters,String charset) throws IOException ;",0.964179104477612
7593,"/** 
 * Returns Signed   {@link HttpURLConnection} instance.
 * @param url    Request URL
 * @param method HTTP Method
 * @return Signed {@link HttpURLConnection} instance
 * @throws IOException
 */
HttpURLConnection getHttpURLConnection(String url,HttpMethod method) throws IOException ;","/** 
 * Returns Signed   {@link HttpURLConnection} instance.
 * @param url Request URL
 * @param method HTTP Method
 * @return Signed {@link HttpURLConnection} instance
 * @throws IOException
 */
HttpURLConnection getHttpURLConnection(String url,HttpMethod method) throws IOException ;",0.9947643979057592
7594,"/** 
 * Do GET / HTTP/1.1 request and returns Http response
 * @param url     Request URL
 * @param charset Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doGetRequest(String url,String charset) throws IOException ;","/** 
 * Do GET / HTTP/1.1 request and returns Http response
 * @param url Request URL
 * @param charset Charset
 * @return HTTP Response
 * @throws IOException
 */
HttpResponse doGetRequest(String url,String charset) throws IOException ;",0.99163179916318
7595,"/** 
 * Returns OAuth Signature.
 * @param url            Request URL
 * @param method         HTTP Method
 * @param oAuthNonce     OAuth Nonce Value
 * @param oAuthTimestamp OAuth Timestamp Value
 * @return OAuth Signature
 */
String getSignature(String url,HttpMethod method,String oAuthNonce,Long oAuthTimestamp);","/** 
 * Returns OAuth Signature.
 * @param url Request URL
 * @param method HTTP Method
 * @param oAuthNonce OAuth Nonce Value
 * @param oAuthTimestamp OAuth Timestamp Value
 * @return OAuth Signature
 */
String getSignature(String url,HttpMethod method,String oAuthNonce,Long oAuthTimestamp);",0.9622331691297208
7596,"/** 
 * Returns   {@link SignedRequest} instance.
 * @param realm realm(nullable)
 * @param consumer OAuth consumer
 * @param signatureMethod Signature Method
 * @param additionalParameters Additional parameters(optional)
 * @return {@link SignedRequest} instance.
 */
public static SignedRequest getInstance(String realm,OAuthConsumer consumer,SignatureMethod signatureMethod,Map<String,String> additionalParameters){
  return new SignedRequestImpl(realm,consumer,signatureMethod,additionalParameters);
}","/** 
 * Returns   {@link SignedRequest} instance.
 * @param realm realm(nullable)
 * @param consumer OAuth consumer
 * @param signatureMethod Signature Method
 * @param additionalParameters Additional parameters(optional)
 * @return {@link SignedRequest} instance.
 */
public static SignedRequest getInstance(String realm,OAuthConsumer consumer,SignatureMethod signatureMethod,Map<String,Object> additionalParameters){
  return new SignedRequestImpl(realm,consumer,signatureMethod,additionalParameters);
}",0.988118811881188
7597,"/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  HttpResponse response=new HttpResponse();
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  conn.connect();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  response.setContent(getResponseCotent(conn,charset));
  return response;
}","/** 
 * {@inheritDoc}
 */
@Override public HttpResponse doRequest(String url,HttpMethod method,Map<String,Object> requestParameters,String charset) throws IOException {
  if (method == HttpMethod.GET && requestParameters != null && requestParameters.size() > 0) {
    for (    String key : requestParameters.keySet()) {
      String param=key + ""String_Node_Str"" + requestParameters.get(key);
      url+=(url.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + param;
    }
  }
  HttpURLConnection conn=getHttpURLConnection(url,method);
  if (method == HttpMethod.POST && requestParameters != null && requestParameters.size() > 0) {
    OutputStream os=null;
    OutputStreamWriter writer=null;
    try {
      conn.setDoOutput(true);
      os=conn.getOutputStream();
      writer=new OutputStreamWriter(os);
      for (      String key : requestParameters.keySet()) {
        writer.append(key);
        writer.append(""String_Node_Str"");
        writer.append(requestParameters.get(key).toString());
      }
    }
  finally {
      if (writer != null) {
        try {
          writer.close();
        }
 catch (        Exception e) {
        }
      }
      if (os != null) {
        try {
          os.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  conn.connect();
  HttpResponse response=new HttpResponse();
  response.setStatusCode(conn.getResponseCode());
  response.setHeaders(conn.getHeaderFields());
  response.setContent(getResponseCotent(conn,charset));
  return response;
}",0.3732809430255402
7598,"@Test public void doRequest_A$String$HttpMethod$Map$String() throws Exception {
  String realm=null;
  OAuthConsumer consumer=new OAuthConsumer();
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestImpl target=new SignedRequestImpl(realm,consumer,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  Map<String,Object> requestParameters=new HashMap<String,Object>();
  String charset=""String_Node_Str"";
  HttpResponse actual=target.doRequest(url,method,requestParameters,charset);
  assertNotNull(actual);
}","@Test public void doRequest_A$String$HttpMethod$Map$String() throws Exception {
  String realm=null;
  OAuthConsumer consumer=new OAuthConsumer();
  SignatureMethod signatureMethod=SignatureMethod.HMAC_SHA1;
  SignedRequestImpl target=new SignedRequestImpl(realm,consumer,signatureMethod);
  String url=""String_Node_Str"";
  HttpMethod method=HttpMethod.GET;
  Map<String,Object> requestParameters=new HashMap<String,Object>();
  requestParameters.put(""String_Node_Str"",""String_Node_Str"");
  String charset=""String_Node_Str"";
  HttpResponse actual=target.doRequest(url,method,requestParameters,charset);
  assertNotNull(actual);
}",0.9230769230769232
7599,"/** 
 * Prepare the destination file to receive data.  If the file already exists, we'll set up appropriately for resumption.
 */
private void setupDestinationFile(State state,InnerState innerState) throws StopRequest {
  if (state.mFilename != null) {
    if (!Helpers.isFilenameValid(state.mFilename)) {
      throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"");
    }
    File f=new File(state.mFilename);
    if (f.exists()) {
      long fileLength=f.length();
      if (fileLength == 0) {
        f.delete();
        state.mFilename=null;
      }
 else       if (mInfo.mETag == null && !mInfo.mNoIntegrity) {
        f.delete();
        throw new StopRequest(Downloads.Impl.STATUS_CANNOT_RESUME,""String_Node_Str"");
      }
 else {
        try {
          state.mStream=new FileOutputStream(state.mFilename,true);
        }
 catch (        FileNotFoundException exc) {
          throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"" + exc.toString(),exc);
        }
        innerState.mBytesSoFar=(int)fileLength;
        if (mInfo.mTotalBytes != -1) {
          innerState.mHeaderContentLength=Long.toString(mInfo.mTotalBytes);
        }
        innerState.mHeaderETag=mInfo.mETag;
        innerState.mContinuingDownload=true;
      }
    }
  }
  if (state.mStream != null && mInfo.mDestination == Downloads.Impl.DESTINATION_EXTERNAL && !isDrmFile(state)) {
    closeDestination(state);
  }
}","/** 
 * Prepare the destination file to receive data.  If the file already exists, we'll set up appropriately for resumption.
 */
private void setupDestinationFile(State state,InnerState innerState) throws StopRequest {
  if (TextUtils.isEmpty(state.mFilename)) {
    if (!Helpers.isFilenameValid(state.mFilename)) {
      throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"");
    }
    File f=new File(state.mFilename);
    if (f.exists()) {
      long fileLength=f.length();
      if (fileLength == 0) {
        f.delete();
        state.mFilename=null;
      }
 else       if (mInfo.mETag == null && !mInfo.mNoIntegrity) {
        f.delete();
        throw new StopRequest(Downloads.Impl.STATUS_CANNOT_RESUME,""String_Node_Str"");
      }
 else {
        try {
          state.mStream=new FileOutputStream(state.mFilename,true);
        }
 catch (        FileNotFoundException exc) {
          throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"" + exc.toString(),exc);
        }
        innerState.mBytesSoFar=(int)fileLength;
        if (mInfo.mTotalBytes != -1) {
          innerState.mHeaderContentLength=Long.toString(mInfo.mTotalBytes);
        }
        innerState.mHeaderETag=mInfo.mETag;
        innerState.mContinuingDownload=true;
      }
    }
  }
  if (state.mStream != null && mInfo.mDestination == Downloads.Impl.DESTINATION_EXTERNAL && !isDrmFile(state)) {
    closeDestination(state);
  }
}",0.980256321440942
7600,"/** 
 * Creates the table that'll hold the download information.
 */
private void createDownloadsTable(SQLiteDatabase db){
  try {
    db.execSQL(""String_Node_Str"" + DB_TABLE);
    db.execSQL(""String_Node_Str"" + DB_TABLE + ""String_Node_Str""+ Downloads.Impl._ID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_URI+ ""String_Node_Str""+ Constants.RETRY_AFTER_X_REDIRECT_COUNT+ ""String_Node_Str""+ Downloads.Impl.COLUMN_APP_DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NO_INTEGRITY+ ""String_Node_Str""+ Downloads.Impl.COLUMN_FILE_NAME_HINT+ ""String_Node_Str""+ Constants.OTA_UPDATE+ ""String_Node_Str""+ Downloads.Impl._DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_MIME_TYPE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_DESTINATION+ ""String_Node_Str""+ Constants.NO_SYSTEM_FILES+ ""String_Node_Str""+ Downloads.Impl.COLUMN_VISIBILITY+ ""String_Node_Str""+ Downloads.Impl.COLUMN_CONTROL+ ""String_Node_Str""+ Downloads.Impl.COLUMN_STATUS+ ""String_Node_Str""+ Constants.FAILED_CONNECTIONS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_LAST_MODIFICATION+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_CLASS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_COOKIE_DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_USER_AGENT+ ""String_Node_Str""+ Downloads.Impl.COLUMN_REFERER+ ""String_Node_Str""+ Downloads.Impl.COLUMN_TOTAL_BYTES+ ""String_Node_Str""+ Downloads.Impl.COLUMN_CURRENT_BYTES+ ""String_Node_Str""+ Constants.ETAG+ ""String_Node_Str""+ Constants.UID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_OTHER_UID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_TITLE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_DESCRIPTION+ ""String_Node_Str""+ Constants.MEDIA_SCANNED+ ""String_Node_Str""+ Downloads.Impl.COLUMN_MEDIAPROVIDER_URI+ ""String_Node_Str""+ Downloads.Impl.COLUMN_DELETED+ ""String_Node_Str"");
  }
 catch (  SQLException ex) {
    Log.e(Constants.TAG,""String_Node_Str"");
    throw ex;
  }
}","/** 
 * Creates the table that'll hold the download information.
 */
private void createDownloadsTable(SQLiteDatabase db){
  try {
    db.execSQL(""String_Node_Str"" + DB_TABLE);
    db.execSQL(""String_Node_Str"" + DB_TABLE + ""String_Node_Str""+ Downloads.Impl._ID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_URI+ ""String_Node_Str""+ Constants.RETRY_AFTER_X_REDIRECT_COUNT+ ""String_Node_Str""+ Downloads.Impl.COLUMN_APP_DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NO_INTEGRITY+ ""String_Node_Str""+ Downloads.Impl.COLUMN_FILE_NAME_HINT+ ""String_Node_Str""+ Constants.OTA_UPDATE+ ""String_Node_Str""+ Downloads.Impl._DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_MIME_TYPE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_DESTINATION+ ""String_Node_Str""+ Constants.NO_SYSTEM_FILES+ ""String_Node_Str""+ Downloads.Impl.COLUMN_VISIBILITY+ ""String_Node_Str""+ Downloads.Impl.COLUMN_CONTROL+ ""String_Node_Str""+ Downloads.Impl.COLUMN_STATUS+ ""String_Node_Str""+ Constants.FAILED_CONNECTIONS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_LAST_MODIFICATION+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_CLASS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS+ ""String_Node_Str""+ Downloads.Impl.COLUMN_COOKIE_DATA+ ""String_Node_Str""+ Downloads.Impl.COLUMN_USER_AGENT+ ""String_Node_Str""+ Downloads.Impl.COLUMN_REFERER+ ""String_Node_Str""+ Downloads.Impl.COLUMN_TOTAL_BYTES+ ""String_Node_Str""+ Downloads.Impl.COLUMN_CURRENT_BYTES+ ""String_Node_Str""+ Constants.ETAG+ ""String_Node_Str""+ Constants.UID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_OTHER_UID+ ""String_Node_Str""+ Downloads.Impl.COLUMN_TITLE+ ""String_Node_Str""+ Downloads.Impl.COLUMN_DESCRIPTION+ ""String_Node_Str""+ Constants.MEDIA_SCANNED+ ""String_Node_Str"");
  }
 catch (  SQLException ex) {
    Log.e(Constants.TAG,""String_Node_Str"");
    throw ex;
  }
}",0.971294363256785
7601,"/** 
 * Prepare the destination file to receive data.  If the file already exists, we'll set up appropriately for resumption.
 */
private void setupDestinationFile(State state,InnerState innerState) throws StopRequest {
  if (state.mFilename != null) {
    if (!Helpers.isFilenameValid(state.mFilename)) {
      throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"");
    }
    File f=new File(state.mFilename);
    if (f.exists()) {
      long fileLength=f.length();
      if (fileLength == 0) {
        f.delete();
        state.mFilename=null;
      }
 else       if (mInfo.mETag == null && !mInfo.mNoIntegrity) {
        f.delete();
        throw new StopRequest(Downloads.Impl.STATUS_CANNOT_RESUME,""String_Node_Str"");
      }
 else {
        try {
          state.mStream=new FileOutputStream(state.mFilename,true);
        }
 catch (        FileNotFoundException exc) {
          throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"" + exc.toString(),exc);
        }
        innerState.mBytesSoFar=(int)fileLength;
        if (mInfo.mTotalBytes != -1) {
          innerState.mHeaderContentLength=Long.toString(mInfo.mTotalBytes);
        }
        innerState.mHeaderETag=mInfo.mETag;
        innerState.mContinuingDownload=true;
      }
    }
  }
  if (state.mStream != null && mInfo.mDestination == Downloads.Impl.DESTINATION_EXTERNAL && !isDrmFile(state)) {
    closeDestination(state);
  }
}","/** 
 * Prepare the destination file to receive data.  If the file already exists, we'll set up appropriately for resumption.
 */
private void setupDestinationFile(State state,InnerState innerState) throws StopRequest {
  if (TextUtils.isEmpty(state.mFilename)) {
    if (!Helpers.isFilenameValid(state.mFilename)) {
      throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"");
    }
    File f=new File(state.mFilename);
    if (f.exists()) {
      long fileLength=f.length();
      if (fileLength == 0) {
        f.delete();
        state.mFilename=null;
      }
 else       if (mInfo.mETag == null && !mInfo.mNoIntegrity) {
        f.delete();
        throw new StopRequest(Downloads.Impl.STATUS_CANNOT_RESUME,""String_Node_Str"");
      }
 else {
        try {
          state.mStream=new FileOutputStream(state.mFilename,true);
        }
 catch (        FileNotFoundException exc) {
          throw new StopRequest(Downloads.Impl.STATUS_FILE_ERROR,""String_Node_Str"" + exc.toString(),exc);
        }
        innerState.mBytesSoFar=(int)fileLength;
        if (mInfo.mTotalBytes != -1) {
          innerState.mHeaderContentLength=Long.toString(mInfo.mTotalBytes);
        }
        innerState.mHeaderETag=mInfo.mETag;
        innerState.mContinuingDownload=true;
      }
    }
  }
  if (state.mStream != null && mInfo.mDestination == Downloads.Impl.DESTINATION_EXTERNAL && !isDrmFile(state)) {
    closeDestination(state);
  }
}",0.980256321440942
7602,"private void updateCompletedNotification(List<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      return;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.Impl.CONTENT_URI + ""String_Node_Str"" + id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}","private void updateCompletedNotification(List<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      continue;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.Impl.CONTENT_URI + ""String_Node_Str"" + id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}",0.996273291925466
7603,"private void updateCompletedNotification(List<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      return;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.Impl.CONTENT_URI + ""String_Node_Str"" + id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}","private void updateCompletedNotification(List<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      continue;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.Impl.CONTENT_URI + ""String_Node_Str"" + id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}",0.996273291925466
7604,"/** 
 * Updates the local copy of the info about a download.
 */
private void updateDownload(Cursor cursor,int arrayPos,long now){
  DownloadInfo info=(DownloadInfo)mDownloads.get(arrayPos);
  int statusColumn=cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_STATUS);
  int failedColumn=cursor.getColumnIndexOrThrow(Constants.FAILED_CONNECTIONS);
  info.mId=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl._ID));
  info.mUri=stringFromCursor(info.mUri,cursor,Downloads.Impl.COLUMN_URI);
  info.mNoIntegrity=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NO_INTEGRITY)) == 1;
  info.mHint=stringFromCursor(info.mHint,cursor,Downloads.Impl.COLUMN_FILE_NAME_HINT);
  info.mFileName=stringFromCursor(info.mFileName,cursor,Downloads.Impl._DATA);
  info.mMimeType=stringFromCursor(info.mMimeType,cursor,Downloads.Impl.COLUMN_MIME_TYPE);
  info.mDestination=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_DESTINATION));
  int newVisibility=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_VISIBILITY));
  if (info.mVisibility == Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED && newVisibility != Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED && Downloads.Impl.isStatusCompleted(info.mStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mVisibility=newVisibility;
synchronized (info) {
    info.mControl=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CONTROL));
  }
  int newStatus=cursor.getInt(statusColumn);
  if (!Downloads.Impl.isStatusCompleted(info.mStatus) && Downloads.Impl.isStatusCompleted(newStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mStatus=newStatus;
  info.mNumFailed=cursor.getInt(failedColumn);
  int retryRedirect=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.RETRY_AFTER_X_REDIRECT_COUNT));
  info.mRetryAfter=retryRedirect & 0xfffffff;
  info.mRedirectCount=retryRedirect >> 28;
  info.mLastMod=cursor.getLong(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_LAST_MODIFICATION));
  info.mPackage=stringFromCursor(info.mPackage,cursor,Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE);
  info.mClass=stringFromCursor(info.mClass,cursor,Downloads.Impl.COLUMN_NOTIFICATION_CLASS);
  info.mCookies=stringFromCursor(info.mCookies,cursor,Downloads.Impl.COLUMN_COOKIE_DATA);
  info.mUserAgent=stringFromCursor(info.mUserAgent,cursor,Downloads.Impl.COLUMN_USER_AGENT);
  info.mReferer=stringFromCursor(info.mReferer,cursor,Downloads.Impl.COLUMN_REFERER);
  info.mTotalBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_TOTAL_BYTES));
  info.mCurrentBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CURRENT_BYTES));
  info.mETag=stringFromCursor(info.mETag,cursor,Constants.ETAG);
  info.mMediaScanned=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.MEDIA_SCANNED)) == 1;
  info.startIfReady(now);
}","/** 
 * Updates the local copy of the info about a download.
 */
private void updateDownload(Cursor cursor,int arrayPos,long now){
  DownloadInfo info=(DownloadInfo)mDownloads.get(arrayPos);
  int statusColumn=cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_STATUS);
  int failedColumn=cursor.getColumnIndexOrThrow(Constants.FAILED_CONNECTIONS);
  info.mId=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl._ID));
  info.mUri=stringFromCursor(info.mUri,cursor,Downloads.Impl.COLUMN_URI);
  info.mNoIntegrity=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NO_INTEGRITY)) == 1;
  info.mHint=stringFromCursor(info.mHint,cursor,Downloads.Impl.COLUMN_FILE_NAME_HINT);
  info.mFileName=stringFromCursor(info.mFileName,cursor,Downloads.Impl._DATA);
  info.mMimeType=stringFromCursor(info.mMimeType,cursor,Downloads.Impl.COLUMN_MIME_TYPE);
  info.mDestination=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_DESTINATION));
  int newVisibility=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_VISIBILITY));
  if (info.mVisibility == Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED && newVisibility != Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED && Downloads.Impl.isStatusCompleted(info.mStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mVisibility=newVisibility;
synchronized (info) {
    info.mControl=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CONTROL));
  }
  int newStatus=cursor.getInt(statusColumn);
  if (!Downloads.Impl.isStatusCompleted(info.mStatus) && Downloads.Impl.isStatusCompleted(newStatus)) {
    mNotifier.mNotificationMgr.cancel(info.mId);
  }
  info.mStatus=newStatus;
  info.mNumFailed=cursor.getInt(failedColumn);
  int retryRedirect=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.RETRY_AFTER_X_REDIRECT_COUNT));
  info.mRetryAfter=retryRedirect & 0xfffffff;
  info.mRedirectCount=retryRedirect >> 28;
  info.mLastMod=cursor.getLong(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_LAST_MODIFICATION));
  info.mPackage=stringFromCursor(info.mPackage,cursor,Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE);
  info.mClass=stringFromCursor(info.mClass,cursor,Downloads.Impl.COLUMN_NOTIFICATION_CLASS);
  info.mCookies=stringFromCursor(info.mCookies,cursor,Downloads.Impl.COLUMN_COOKIE_DATA);
  info.mUserAgent=stringFromCursor(info.mUserAgent,cursor,Downloads.Impl.COLUMN_USER_AGENT);
  info.mReferer=stringFromCursor(info.mReferer,cursor,Downloads.Impl.COLUMN_REFERER);
  info.mTotalBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_TOTAL_BYTES));
  info.mCurrentBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CURRENT_BYTES));
  info.mETag=stringFromCursor(info.mETag,cursor,Constants.ETAG);
  info.mMediaScanned=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.MEDIA_SCANNED)) == 1;
  if (info.isReadyToRestart(now)) {
    info.start(now);
  }
}",0.987794395736634
7605,"/** 
 * Keeps a local copy of the info about a download, and initiates the download if appropriate.
 */
private void insertDownload(Cursor cursor,int arrayPos,long now){
  DownloadInfo info=new DownloadInfo(this,mSystemFacade,cursor);
  if (Constants.LOGVV) {
    Log.v(Constants.TAG,""String_Node_Str"");
    Log.v(Constants.TAG,""String_Node_Str"" + info.mId);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mUri != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mNoIntegrity);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mHint);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mFileName);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mMimeType);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mDestination);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mVisibility);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mControl);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mStatus);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mNumFailed);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mRetryAfter);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mRedirectCount);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mLastMod);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mPackage);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mClass);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mCookies != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mUserAgent);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mReferer != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mTotalBytes);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mCurrentBytes);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mETag);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mMediaScanned);
  }
  mDownloads.add(arrayPos,info);
  if (info.mStatus == 0 && (info.mDestination == Downloads.Impl.DESTINATION_EXTERNAL || info.mDestination == Downloads.Impl.DESTINATION_CACHE_PARTITION_PURGEABLE) && info.mMimeType != null && !DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING.equalsIgnoreCase(info.mMimeType)) {
    Intent mimetypeIntent=new Intent(Intent.ACTION_VIEW);
    mimetypeIntent.setDataAndType(Uri.fromParts(""String_Node_Str"",""String_Node_Str"",null),info.mMimeType);
    ResolveInfo ri=getPackageManager().resolveActivity(mimetypeIntent,PackageManager.MATCH_DEFAULT_ONLY);
    if (ri == null) {
      if (Config.LOGD) {
        Log.d(Constants.TAG,""String_Node_Str"" + info.mMimeType);
      }
      info.mStatus=Downloads.Impl.STATUS_NOT_ACCEPTABLE;
      Uri uri=ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI,info.mId);
      ContentValues values=new ContentValues();
      values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_NOT_ACCEPTABLE);
      getContentResolver().update(uri,values,null,null);
      info.sendIntentIfRequested(uri);
      return;
    }
  }
  info.startIfReady(now);
}","/** 
 * Keeps a local copy of the info about a download, and initiates the download if appropriate.
 */
private void insertDownload(Cursor cursor,int arrayPos,long now){
  DownloadInfo info=new DownloadInfo(this,mSystemFacade,cursor);
  if (Constants.LOGVV) {
    Log.v(Constants.TAG,""String_Node_Str"");
    Log.v(Constants.TAG,""String_Node_Str"" + info.mId);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mUri != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mNoIntegrity);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mHint);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mFileName);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mMimeType);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mDestination);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mVisibility);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mControl);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mStatus);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mNumFailed);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mRetryAfter);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mRedirectCount);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mLastMod);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mPackage);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mClass);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mCookies != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mUserAgent);
    Log.v(Constants.TAG,""String_Node_Str"" + ((info.mReferer != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    Log.v(Constants.TAG,""String_Node_Str"" + info.mTotalBytes);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mCurrentBytes);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mETag);
    Log.v(Constants.TAG,""String_Node_Str"" + info.mMediaScanned);
  }
  mDownloads.add(arrayPos,info);
  if (info.mStatus == 0 && (info.mDestination == Downloads.Impl.DESTINATION_EXTERNAL || info.mDestination == Downloads.Impl.DESTINATION_CACHE_PARTITION_PURGEABLE) && info.mMimeType != null && !DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING.equalsIgnoreCase(info.mMimeType)) {
    Intent mimetypeIntent=new Intent(Intent.ACTION_VIEW);
    mimetypeIntent.setDataAndType(Uri.fromParts(""String_Node_Str"",""String_Node_Str"",null),info.mMimeType);
    ResolveInfo ri=getPackageManager().resolveActivity(mimetypeIntent,PackageManager.MATCH_DEFAULT_ONLY);
    if (ri == null) {
      if (Config.LOGD) {
        Log.d(Constants.TAG,""String_Node_Str"" + info.mMimeType);
      }
      info.mStatus=Downloads.Impl.STATUS_NOT_ACCEPTABLE;
      Uri uri=ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI,info.mId);
      ContentValues values=new ContentValues();
      values.put(Downloads.Impl.COLUMN_STATUS,Downloads.Impl.STATUS_NOT_ACCEPTABLE);
      getContentResolver().update(uri,values,null,null);
      info.sendIntentIfRequested(uri);
      return;
    }
  }
  if (info.isReadyToStart(now)) {
    info.start(now);
  }
}",0.9901420217209692
7606,"/** 
 * Close the destination output stream.
 */
private void closeDestination(State state){
  try {
    if (state.mStream != null) {
      state.mStream.close();
    }
  }
 catch (  IOException ex) {
    if (Constants.LOGV) {
      Log.v(Constants.TAG,""String_Node_Str"" + ex);
    }
  }
}","/** 
 * Close the destination output stream.
 */
private void closeDestination(State state){
  try {
    if (state.mStream != null) {
      state.mStream.close();
      state.mStream=null;
    }
  }
 catch (  IOException ex) {
    if (Constants.LOGV) {
      Log.v(Constants.TAG,""String_Node_Str"" + ex);
    }
  }
}",0.956953642384106
7607,"/** 
 * Checks whether the filename looks legitimate
 */
public static boolean isFilenameValid(String filename){
  File dir=new File(filename).getParentFile();
  return dir.equals(Environment.getDownloadCacheDirectory()) || dir.equals(new File(Environment.getExternalStorageDirectory() + Constants.DEFAULT_DL_SUBDIR));
}","/** 
 * Checks whether the filename looks legitimate
 */
public static boolean isFilenameValid(String filename){
  filename=filename.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  return filename.startsWith(Environment.getDownloadCacheDirectory().toString()) || filename.startsWith(Environment.getExternalStorageDirectory().toString());
}",0.6686746987951807
7608,"public void testDestination() throws Exception {
  enqueueResponse(HTTP_OK,FILE_CONTENT);
  Uri destination=Uri.fromFile(mTestDirectory).buildUpon().appendPath(""String_Node_Str"").build();
  Download download=enqueueRequest(getRequest().setDestinationUri(destination));
  download.runUntilStatus(DownloadManager.STATUS_SUCCESSFUL);
  Uri localUri=Uri.parse(download.getStringField(DownloadManager.COLUMN_LOCAL_URI));
  assertEquals(destination,localUri);
  InputStream stream=new FileInputStream(destination.getSchemeSpecificPart());
  try {
    assertEquals(FILE_CONTENT,readStream(stream));
  }
  finally {
    stream.close();
  }
}","public void testDestination() throws Exception {
  enqueueResponse(HTTP_OK,FILE_CONTENT);
  Uri destination=getExternalUri();
  Download download=enqueueRequest(getRequest().setDestinationUri(destination));
  download.runUntilStatus(DownloadManager.STATUS_SUCCESSFUL);
  Uri localUri=Uri.parse(download.getStringField(DownloadManager.COLUMN_LOCAL_URI));
  assertEquals(destination,localUri);
  InputStream stream=new FileInputStream(destination.getSchemeSpecificPart());
  try {
    assertEquals(FILE_CONTENT,readStream(stream));
  }
  finally {
    stream.close();
  }
}",0.925249169435216
7609,"private void readRequestHeaders(long downloadId){
  Uri headerUri=Uri.withAppendedPath(getAllDownloadsUri(),Downloads.Impl.RequestHeaders.URI_SEGMENT);
  Cursor cursor=mContext.getContentResolver().query(headerUri,null,null,null,null);
  try {
    int headerIndex=cursor.getColumnIndexOrThrow(Downloads.Impl.RequestHeaders.COLUMN_HEADER);
    int valueIndex=cursor.getColumnIndexOrThrow(Downloads.Impl.RequestHeaders.COLUMN_VALUE);
    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
      mRequestHeaders.put(cursor.getString(headerIndex),cursor.getString(valueIndex));
    }
  }
  finally {
    cursor.close();
  }
  if (mCookies != null) {
    mRequestHeaders.put(""String_Node_Str"",mCookies);
  }
  if (mReferer != null) {
    mRequestHeaders.put(""String_Node_Str"",mReferer);
  }
}","private void readRequestHeaders(DownloadInfo info){
  info.mRequestHeaders.clear();
  Uri headerUri=Uri.withAppendedPath(info.getAllDownloadsUri(),Downloads.Impl.RequestHeaders.URI_SEGMENT);
  Cursor cursor=mResolver.query(headerUri,null,null,null,null);
  try {
    int headerIndex=cursor.getColumnIndexOrThrow(Downloads.Impl.RequestHeaders.COLUMN_HEADER);
    int valueIndex=cursor.getColumnIndexOrThrow(Downloads.Impl.RequestHeaders.COLUMN_VALUE);
    for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
      info.mRequestHeaders.put(cursor.getString(headerIndex),cursor.getString(valueIndex));
    }
  }
  finally {
    cursor.close();
  }
  if (info.mCookies != null) {
    info.mRequestHeaders.put(""String_Node_Str"",info.mCookies);
  }
  if (info.mReferer != null) {
    info.mRequestHeaders.put(""String_Node_Str"",info.mReferer);
  }
}",0.9354066985645934
7610,"public void sendIntentIfRequested(){
  if (mPackage == null) {
    return;
  }
  Intent intent;
  if (mIsPublicApi) {
    intent=new Intent(DownloadManager.ACTION_DOWNLOAD_COMPLETE);
    intent.setPackage(mPackage);
    intent.putExtra(DownloadManager.EXTRA_DOWNLOAD_ID,(long)mId);
  }
 else {
    if (mClass == null) {
      return;
    }
    intent=new Intent(Downloads.Impl.ACTION_DOWNLOAD_COMPLETED);
    intent.setClassName(mPackage,mClass);
    if (mExtras != null) {
      intent.putExtra(Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS,mExtras);
    }
    intent.setData(getMyDownloadsUri());
  }
  mSystemFacade.sendBroadcast(intent);
}","public void sendIntentIfRequested(){
  if (mPackage == null) {
    return;
  }
  Intent intent;
  if (mIsPublicApi) {
    intent=new Intent(DownloadManager.ACTION_DOWNLOAD_COMPLETE);
    intent.setPackage(mPackage);
    intent.putExtra(DownloadManager.EXTRA_DOWNLOAD_ID,mId);
  }
 else {
    if (mClass == null) {
      return;
    }
    intent=new Intent(Downloads.Impl.ACTION_DOWNLOAD_COMPLETED);
    intent.setClassName(mPackage,mClass);
    if (mExtras != null) {
      intent.putExtra(Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS,mExtras);
    }
    intent.setData(getMyDownloadsUri());
  }
  mSystemFacade.sendBroadcast(intent);
}",0.9952830188679244
7611,"public DownloadInfo(Context context,SystemFacade systemFacade,Cursor cursor){
  mContext=context;
  mSystemFacade=systemFacade;
  int retryRedirect=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.RETRY_AFTER_X_REDIRECT_COUNT));
  mId=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl._ID));
  mUri=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_URI));
  mNoIntegrity=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NO_INTEGRITY)) == 1;
  mHint=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_FILE_NAME_HINT));
  mFileName=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl._DATA));
  mMimeType=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_MIME_TYPE));
  mDestination=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_DESTINATION));
  mVisibility=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_VISIBILITY));
  mControl=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CONTROL));
  mStatus=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_STATUS));
  mNumFailed=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.FAILED_CONNECTIONS));
  mRetryAfter=retryRedirect & 0xfffffff;
  mRedirectCount=retryRedirect >> 28;
  mLastMod=cursor.getLong(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_LAST_MODIFICATION));
  mPackage=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE));
  mClass=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NOTIFICATION_CLASS));
  mExtras=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS));
  mCookies=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_COOKIE_DATA));
  mUserAgent=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_USER_AGENT));
  mReferer=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_REFERER));
  mTotalBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_TOTAL_BYTES));
  mCurrentBytes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_CURRENT_BYTES));
  mETag=cursor.getString(cursor.getColumnIndexOrThrow(Constants.ETAG));
  mMediaScanned=cursor.getInt(cursor.getColumnIndexOrThrow(Constants.MEDIA_SCANNED)) == 1;
  mIsPublicApi=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_IS_PUBLIC_API)) != 0;
  mAllowedNetworkTypes=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_ALLOWED_NETWORK_TYPES));
  mAllowRoaming=cursor.getInt(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_ALLOW_ROAMING)) != 0;
  mTitle=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_TITLE));
  mDescription=cursor.getString(cursor.getColumnIndexOrThrow(Downloads.Impl.COLUMN_DESCRIPTION));
  mFuzz=Helpers.sRandom.nextInt(1001);
  readRequestHeaders(mId);
}","private DownloadInfo(Context context,SystemFacade systemFacade){
  mContext=context;
  mSystemFacade=systemFacade;
  mFuzz=Helpers.sRandom.nextInt(1001);
}",0.0986193293885601
7612,"private void updateCompletedNotification(List<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      continue;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI,id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}","private void updateCompletedNotification(Collection<DownloadInfo> downloads){
  for (  DownloadInfo download : downloads) {
    if (!isCompleteAndVisible(download)) {
      continue;
    }
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=ContentUris.withAppendedId(Downloads.Impl.ALL_DOWNLOADS_CONTENT_URI,id);
    String caption;
    Intent intent;
    if (Downloads.Impl.isStatusError(download.mStatus)) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (download.mDestination == Downloads.Impl.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=download.mLastMod;
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(download.mId,n);
  }
}",0.9913366336633664
7613,"public void updateNotification(List<DownloadInfo> downloads){
  updateActiveNotification(downloads);
  updateCompletedNotification(downloads);
}","public void updateNotification(Collection<DownloadInfo> downloads){
  updateActiveNotification(downloads);
  updateCompletedNotification(downloads);
}",0.9591836734693876
7614,"private void updateActiveNotification(List<DownloadInfo> downloads){
  mNotifications.clear();
  for (  DownloadInfo download : downloads) {
    if (!isActiveAndVisible(download)) {
      continue;
    }
    String packageName=download.mPackage;
    long max=download.mTotalBytes;
    long progress=download.mCurrentBytes;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    NotificationItem item;
    if (mNotifications.containsKey(packageName)) {
      item=mNotifications.get(packageName);
      item.addItem(title,progress,max);
    }
 else {
      item=new NotificationItem();
      item.mId=(int)id;
      item.mPackageName=packageName;
      item.mDescription=download.mDescription;
      String className=download.mClass;
      item.addItem(title,progress,max);
      mNotifications.put(packageName,item);
    }
    if (hasPausedReason(download) && item.mPausedText == null) {
      item.mPausedText=download.mPausedReason;
    }
  }
  for (  NotificationItem item : mNotifications.values()) {
    Notification n=new Notification();
    boolean hasPausedText=(item.mPausedText != null);
    int iconResource=android.R.drawable.stat_sys_download;
    if (hasPausedText) {
      iconResource=android.R.drawable.stat_sys_warning;
    }
    n.icon=iconResource;
    n.flags|=Notification.FLAG_ONGOING_EVENT;
    RemoteViews expandedView=new RemoteViews(""String_Node_Str"",R.layout.status_bar_ongoing_event_progress_bar);
    StringBuilder title=new StringBuilder(item.mTitles[0]);
    if (item.mTitleCount > 1) {
      title.append(mContext.getString(R.string.notification_filename_separator));
      title.append(item.mTitles[1]);
      n.number=item.mTitleCount;
      if (item.mTitleCount > 2) {
        title.append(mContext.getString(R.string.notification_filename_extras,new Object[]{Integer.valueOf(item.mTitleCount - 2)}));
      }
    }
 else {
      expandedView.setTextViewText(R.id.description,item.mDescription);
    }
    expandedView.setTextViewText(R.id.title,title);
    if (hasPausedText) {
      expandedView.setViewVisibility(R.id.progress_bar,View.GONE);
      expandedView.setTextViewText(R.id.paused_text,item.mPausedText);
    }
 else {
      expandedView.setViewVisibility(R.id.paused_text,View.GONE);
      expandedView.setProgressBar(R.id.progress_bar,(int)item.mTotalTotal,(int)item.mTotalCurrent,item.mTotalTotal == -1);
    }
    expandedView.setTextViewText(R.id.progress_text,getDownloadingText(item.mTotalTotal,item.mTotalCurrent));
    expandedView.setImageViewResource(R.id.appIcon,iconResource);
    n.contentView=expandedView;
    Intent intent=new Intent(Constants.ACTION_LIST);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI,item.mId));
    intent.putExtra(""String_Node_Str"",item.mTitleCount > 1);
    n.contentIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(item.mId,n);
  }
}","private void updateActiveNotification(Collection<DownloadInfo> downloads){
  mNotifications.clear();
  for (  DownloadInfo download : downloads) {
    if (!isActiveAndVisible(download)) {
      continue;
    }
    String packageName=download.mPackage;
    long max=download.mTotalBytes;
    long progress=download.mCurrentBytes;
    long id=download.mId;
    String title=download.mTitle;
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    NotificationItem item;
    if (mNotifications.containsKey(packageName)) {
      item=mNotifications.get(packageName);
      item.addItem(title,progress,max);
    }
 else {
      item=new NotificationItem();
      item.mId=(int)id;
      item.mPackageName=packageName;
      item.mDescription=download.mDescription;
      item.addItem(title,progress,max);
      mNotifications.put(packageName,item);
    }
    if (hasPausedReason(download) && item.mPausedText == null) {
      item.mPausedText=download.mPausedReason;
    }
  }
  for (  NotificationItem item : mNotifications.values()) {
    Notification n=new Notification();
    boolean hasPausedText=(item.mPausedText != null);
    int iconResource=android.R.drawable.stat_sys_download;
    if (hasPausedText) {
      iconResource=android.R.drawable.stat_sys_warning;
    }
    n.icon=iconResource;
    n.flags|=Notification.FLAG_ONGOING_EVENT;
    RemoteViews expandedView=new RemoteViews(""String_Node_Str"",R.layout.status_bar_ongoing_event_progress_bar);
    StringBuilder title=new StringBuilder(item.mTitles[0]);
    if (item.mTitleCount > 1) {
      title.append(mContext.getString(R.string.notification_filename_separator));
      title.append(item.mTitles[1]);
      n.number=item.mTitleCount;
      if (item.mTitleCount > 2) {
        title.append(mContext.getString(R.string.notification_filename_extras,new Object[]{Integer.valueOf(item.mTitleCount - 2)}));
      }
    }
 else {
      expandedView.setTextViewText(R.id.description,item.mDescription);
    }
    expandedView.setTextViewText(R.id.title,title);
    if (hasPausedText) {
      expandedView.setViewVisibility(R.id.progress_bar,View.GONE);
      expandedView.setTextViewText(R.id.paused_text,item.mPausedText);
    }
 else {
      expandedView.setViewVisibility(R.id.paused_text,View.GONE);
      expandedView.setProgressBar(R.id.progress_bar,(int)item.mTotalTotal,(int)item.mTotalCurrent,item.mTotalTotal == -1);
    }
    expandedView.setTextViewText(R.id.progress_text,getDownloadingText(item.mTotalTotal,item.mTotalCurrent));
    expandedView.setImageViewResource(R.id.appIcon,iconResource);
    n.contentView=expandedView;
    Intent intent=new Intent(Constants.ACTION_LIST);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(ContentUris.withAppendedId(Downloads.Impl.ALL_DOWNLOADS_CONTENT_URI,item.mId));
    intent.putExtra(""String_Node_Str"",item.mTitleCount > 1);
    n.contentIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mSystemFacade.postNotification(item.mId,n);
  }
}",0.9890357949048694
7615,"/** 
 * Updates a row in the database
 */
@Override public int update(final Uri uri,final ContentValues values,final String where,final String[] whereArgs){
  Helpers.validateSelection(where,sAppReadableColumnsSet);
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count;
  boolean startService=false;
  ContentValues filteredValues;
  if (Binder.getCallingPid() != Process.myPid()) {
    filteredValues=new ContentValues();
    copyString(Downloads.Impl.COLUMN_APP_DATA,values,filteredValues);
    copyInteger(Downloads.Impl.COLUMN_VISIBILITY,values,filteredValues);
    Integer i=values.getAsInteger(Downloads.Impl.COLUMN_CONTROL);
    if (i != null) {
      filteredValues.put(Downloads.Impl.COLUMN_CONTROL,i);
      startService=true;
    }
    copyInteger(Downloads.Impl.COLUMN_CONTROL,values,filteredValues);
    copyString(Downloads.Impl.COLUMN_TITLE,values,filteredValues);
    copyString(Downloads.Impl.COLUMN_DESCRIPTION,values,filteredValues);
  }
 else {
    filteredValues=values;
    String filename=values.getAsString(Downloads.Impl._DATA);
    if (filename != null) {
      Cursor c=query(uri,new String[]{Downloads.Impl.COLUMN_TITLE},null,null,null);
      if (!c.moveToFirst() || c.getString(0) == null) {
        values.put(Downloads.Impl.COLUMN_TITLE,new File(filename).getName());
      }
      c.close();
    }
    Integer status=values.getAsInteger(Downloads.Impl.COLUMN_STATUS);
    boolean isRestart=status != null && status == Downloads.Impl.STATUS_PENDING;
    if (isRestart) {
      startService=true;
    }
  }
  int match=sURIMatcher.match(uri);
switch (match) {
case MY_DOWNLOADS:
case MY_DOWNLOADS_ID:
case ALL_DOWNLOADS:
case ALL_DOWNLOADS_ID:
    String fullWhere=getWhereClause(uri,where,match);
  if (filteredValues.size() > 0) {
    count=db.update(DB_TABLE,filteredValues,fullWhere,whereArgs);
  }
 else {
    count=0;
  }
break;
default :
Log.d(Constants.TAG,""String_Node_Str"" + uri);
throw new UnsupportedOperationException(""String_Node_Str"" + uri);
}
notifyContentChanged(uri,match);
if (startService) {
Context context=getContext();
context.startService(new Intent(context,DownloadService.class));
}
return count;
}","/** 
 * Updates a row in the database
 */
@Override public int update(final Uri uri,final ContentValues values,final String where,final String[] whereArgs){
  Helpers.validateSelection(where,sAppReadableColumnsSet);
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  int count;
  boolean startService=false;
  ContentValues filteredValues;
  if (Binder.getCallingPid() != Process.myPid()) {
    filteredValues=new ContentValues();
    copyString(Downloads.Impl.COLUMN_APP_DATA,values,filteredValues);
    copyInteger(Downloads.Impl.COLUMN_VISIBILITY,values,filteredValues);
    Integer i=values.getAsInteger(Downloads.Impl.COLUMN_CONTROL);
    if (i != null) {
      filteredValues.put(Downloads.Impl.COLUMN_CONTROL,i);
      startService=true;
    }
    copyInteger(Downloads.Impl.COLUMN_CONTROL,values,filteredValues);
    copyString(Downloads.Impl.COLUMN_TITLE,values,filteredValues);
    copyString(Downloads.Impl.COLUMN_DESCRIPTION,values,filteredValues);
  }
 else {
    filteredValues=values;
    String filename=values.getAsString(Downloads.Impl._DATA);
    if (filename != null) {
      Cursor c=query(uri,new String[]{Downloads.Impl.COLUMN_TITLE},null,null,null);
      if (!c.moveToFirst() || c.getString(0).isEmpty()) {
        values.put(Downloads.Impl.COLUMN_TITLE,new File(filename).getName());
      }
      c.close();
    }
    Integer status=values.getAsInteger(Downloads.Impl.COLUMN_STATUS);
    boolean isRestart=status != null && status == Downloads.Impl.STATUS_PENDING;
    if (isRestart) {
      startService=true;
    }
  }
  int match=sURIMatcher.match(uri);
switch (match) {
case MY_DOWNLOADS:
case MY_DOWNLOADS_ID:
case ALL_DOWNLOADS:
case ALL_DOWNLOADS_ID:
    String fullWhere=getWhereClause(uri,where,match);
  if (filteredValues.size() > 0) {
    count=db.update(DB_TABLE,filteredValues,fullWhere,whereArgs);
  }
 else {
    count=0;
  }
break;
default :
Log.d(Constants.TAG,""String_Node_Str"" + uri);
throw new UnsupportedOperationException(""String_Node_Str"" + uri);
}
notifyContentChanged(uri,match);
if (startService) {
Context context=getContext();
context.startService(new Intent(context,DownloadService.class));
}
return count;
}",0.995852534562212
7616,"private void updateCompletedNotification(){
  Cursor c=mContext.getContentResolver().query(Downloads.CONTENT_URI,new String[]{Downloads._ID,Downloads.COLUMN_TITLE,Downloads.COLUMN_DESCRIPTION,Downloads.COLUMN_NOTIFICATION_PACKAGE,Downloads.COLUMN_NOTIFICATION_CLASS,Downloads.COLUMN_CURRENT_BYTES,Downloads.COLUMN_TOTAL_BYTES,Downloads.COLUMN_STATUS,Downloads._DATA,Downloads.COLUMN_LAST_MODIFICATION,Downloads.COLUMN_DESTINATION},WHERE_COMPLETED,null,Downloads._ID);
  if (c == null) {
    return;
  }
  final int idColumn=0;
  final int titleColumn=1;
  final int descColumn=2;
  final int ownerColumn=3;
  final int classOwnerColumn=4;
  final int currentBytesColumn=5;
  final int totalBytesColumn=6;
  final int statusColumn=7;
  final int filenameColumnId=8;
  final int lastModColumnId=9;
  final int destinationColumnId=10;
  for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    String title=c.getString(titleColumn);
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.CONTENT_URI + ""String_Node_Str"" + c.getInt(idColumn));
    String caption;
    Intent intent;
    if (Downloads.isStatusError(c.getInt(statusColumn))) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (c.getInt(destinationColumnId) == Downloads.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    n.when=c.getLong(lastModColumnId);
    mNotificationMgr.notify(c.getInt(idColumn),n);
  }
  c.close();
}","private void updateCompletedNotification(){
  Cursor c=mContext.getContentResolver().query(Downloads.CONTENT_URI,new String[]{Downloads._ID,Downloads.COLUMN_TITLE,Downloads.COLUMN_DESCRIPTION,Downloads.COLUMN_NOTIFICATION_PACKAGE,Downloads.COLUMN_NOTIFICATION_CLASS,Downloads.COLUMN_CURRENT_BYTES,Downloads.COLUMN_TOTAL_BYTES,Downloads.COLUMN_STATUS,Downloads._DATA,Downloads.COLUMN_LAST_MODIFICATION,Downloads.COLUMN_DESTINATION},WHERE_COMPLETED,null,Downloads._ID);
  if (c == null) {
    return;
  }
  final int idColumn=0;
  final int titleColumn=1;
  final int descColumn=2;
  final int ownerColumn=3;
  final int classOwnerColumn=4;
  final int currentBytesColumn=5;
  final int totalBytesColumn=6;
  final int statusColumn=7;
  final int filenameColumnId=8;
  final int lastModColumnId=9;
  final int destinationColumnId=10;
  for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
    Notification n=new Notification();
    n.icon=android.R.drawable.stat_sys_download_done;
    String title=c.getString(titleColumn);
    if (title == null || title.length() == 0) {
      title=mContext.getResources().getString(R.string.download_unknown_title);
    }
    Uri contentUri=Uri.parse(Downloads.CONTENT_URI + ""String_Node_Str"" + c.getInt(idColumn));
    String caption;
    Intent intent;
    if (Downloads.isStatusError(c.getInt(statusColumn))) {
      caption=mContext.getResources().getString(R.string.notification_download_failed);
      intent=new Intent(Constants.ACTION_LIST);
    }
 else {
      caption=mContext.getResources().getString(R.string.notification_download_complete);
      if (c.getInt(destinationColumnId) == Downloads.DESTINATION_EXTERNAL) {
        intent=new Intent(Constants.ACTION_OPEN);
      }
 else {
        intent=new Intent(Constants.ACTION_LIST);
      }
    }
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.when=c.getLong(lastModColumnId);
    n.setLatestEventInfo(mContext,title,caption,PendingIntent.getBroadcast(mContext,0,intent,0));
    intent=new Intent(Constants.ACTION_HIDE);
    intent.setClassName(""String_Node_Str"",DownloadReceiver.class.getName());
    intent.setData(contentUri);
    n.deleteIntent=PendingIntent.getBroadcast(mContext,0,intent,0);
    mNotificationMgr.notify(c.getInt(idColumn),n);
  }
  c.close();
}",0.9777682770414708
7617,"public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_FILE,escapedVideoFileName);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}","public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,BackupTubeCommon.escapeReplaceAllText(clientType));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,BackupTubeCommon.escapeReplaceAllText(clientVersion));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.escapeReplaceAllText(BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime())));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_TITLE,BackupTubeCommon.escapeReplaceAllText(getTitle() + ""String_Node_Str"" + getUploader()));
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_FILE,BackupTubeCommon.escapeReplaceAllText(escapedVideoFileName));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,BackupTubeCommon.escapeReplaceAllText(getTitle()));
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}",0.8938861560084329
7618,"public YouTubeVideo getResponseVideo(){
  return responseVideo;
}","public YouTubeVideo getResponseVideo(){
  findResponseInfo();
  return responseVideo;
}",0.8552631578947368
7619,"private void findResponseInfo(){
  if (!hasFoundResponseInfo() && source.indexOf(""String_Node_Str"") > (-1)) {
    try {
      String vid=BackupHelper.between(source,""String_Node_Str"",""String_Node_Str"");
      System.err.println(""String_Node_Str"" + vid);
      URL videoURL=new URL(""String_Node_Str"" + URLEncoder.encode(vid,""String_Node_Str"") + ""String_Node_Str"");
      URLConnection connection=videoURL.openConnection();
      YouTubeVideoWithEntry videoEntry=new Gson().fromJson(new InputStreamReader(connection.getInputStream()),YouTubeVideoWithEntry.class);
      responseVideo=videoEntry.getVideo();
      responseVideo.init();
    }
 catch (    Exception ex) {
    }
  }
  hasFoundResponseInfo=true;
}","private void findResponseInfo(){
  if (!hasFoundResponseInfo() && source.indexOf(""String_Node_Str"") > (-1)) {
    try {
      String vid=BackupHelper.between(source,""String_Node_Str"",""String_Node_Str"");
      URL videoURL=new URL(""String_Node_Str"" + URLEncoder.encode(vid,""String_Node_Str"") + ""String_Node_Str"");
      URLConnection connection=videoURL.openConnection();
      YouTubeVideoWithEntry videoEntry=new Gson().fromJson(new InputStreamReader(connection.getInputStream()),YouTubeVideoWithEntry.class);
      responseVideo=videoEntry.getVideo();
      responseVideo.init();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  hasFoundResponseInfo=true;
}",0.9432063263838965
7620,"public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replace(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replace(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_FILE,escapedVideoFileName);
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}","public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replace(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replace(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_FILE,escapedVideoFileName);
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replace(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}",0.9988340458608628
7621,"public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,BackupTubeCommon.escapeReplaceAllText(clientType));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,BackupTubeCommon.escapeReplaceAllText(clientVersion));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.escapeReplaceAllText(BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime())));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_TITLE,BackupTubeCommon.escapeReplaceAllText(getTitle() + ""String_Node_Str"" + getUploader()));
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_FILE,BackupTubeCommon.escapeReplaceAllText(escapedVideoFileName));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,BackupTubeCommon.escapeReplaceAllText(getTitle()));
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}","public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replace(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replace(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replace(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_FILE,escapedVideoFileName);
  html=html.replace(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}",0.8387553041018387
7622,"@Override public void initInfoTable(){
  setInfoTableTitle(""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",""String_Node_Str"" + getUrl() + ""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",getUploader());
  addInfoTableEntry(""String_Node_Str"",getPublishedOn());
  addInfoTableEntry(""String_Node_Str"",getDownloadedOn());
  addInfoTableEntry(""String_Node_Str"",getDescription());
}","@Override public void initInfoTable(){
  setInfoTableTitle(""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",""String_Node_Str"" + BackupTubeCommon.escapeURL(getUrl()) + ""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",getUploader());
  addInfoTableEntry(""String_Node_Str"",getPublishedOn());
  addInfoTableEntry(""String_Node_Str"",getDownloadedOn());
  addInfoTableEntry(""String_Node_Str"",getDescription());
}",0.9511002444987776
7623,"public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_FILE,videoFileName);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}","public void saveHTML(File file,String videoFileName,String clientType,String clientVersion) throws FileNotFoundException {
  String html=BackupTubeCommon.getHTMLTemplate();
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_TYPE,clientType);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_CLIENT_VERSION,clientVersion);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_GEN_DATE,BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_TITLE,getTitle() + ""String_Node_Str"" + getUploader());
  String escapedVideoFileName=videoFileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_FILE,escapedVideoFileName);
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_VIDEO_TITLE,getTitle());
  String info=""String_Node_Str"";
  LinkedList<VideoInfoModule> infoModules=new LinkedList();
  infoModules.add(this);
  for (  VideoInfoModule module : getExtraModules()) {
    infoModules.add(module);
  }
  infoModules.add(getSiteInfo());
  for (  VideoInfoModule moduleToShow : infoModules) {
    info+=moduleToShow.getHTML() + ""String_Node_Str"";
  }
  html=html.replaceAll(BackupTubeCommon.TEMPLATE_INFO,info);
  PrintWriter writer=new PrintWriter(file);
  writer.write(html);
  writer.close();
}",0.9593949044585988
7624,"@Override public void initInfoTable(){
  setInfoTableTitle(""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",""String_Node_Str"" + getUrl() + ""String_Node_Str""+ getTitle()+ ""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",getUser());
}","@Override public void initInfoTable(){
  setInfoTableTitle(""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",""String_Node_Str"" + BackupTubeCommon.escapeURL(getUrl()) + ""String_Node_Str""+ getTitle()+ ""String_Node_Str"");
  addInfoTableEntry(""String_Node_Str"",getUser());
}",0.9242424242424242
7625,"public static void main(String[] args){
  boolean isError=false;
  boolean showHelp=false;
  String user=null;
  String saveDir=null;
  String expecting=null;
  String site=null;
  for (  String arg : args) {
    if (expecting != null) {
      if (expecting.equals(""String_Node_Str"")) {
        user=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        saveDir=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        site=arg;
      }
 else {
        System.err.println(""String_Node_Str"" + arg);
        isError=true;
        break;
      }
      expecting=null;
      continue;
    }
    if (arg.equals(""String_Node_Str"")) {
      showHelp=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        user=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        saveDir=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        site=arg.substring(2);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else {
      System.err.println(""String_Node_Str"" + arg);
      isError=true;
      break;
    }
  }
  if (isError || showHelp) {
    showHelp(isError ? System.err : System.out);
    System.exit(0);
  }
  InputStreamReader inreader=new InputStreamReader(System.in);
  BufferedReader reader=new BufferedReader(inreader);
  if (site == null) {
    try {
      site=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  if (user == null) {
    try {
      user=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  boolean success=false;
  if (saveDir != null) {
    saveDir=BackupTubeCommon.fixDir(saveDir);
    success=BackupTubeCommon.isGoodSaveDir(saveDir);
    sendMessageIfBadSaveDir(success);
  }
  while (!success) {
    try {
      saveDir=getLineFromConsole(reader,""String_Node_Str"");
      saveDir=BackupTubeCommon.fixDir(saveDir);
      success=BackupTubeCommon.isGoodSaveDir(saveDir);
      sendMessageIfBadSaveDir(success);
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  File dataFeedFile=new File(saveDir + BackupTubeCommon.LOCATION_DATAFILE);
  try {
    BackupTubeDataFile prevDataFile=getDataFile(dataFeedFile);
    for (    ListedVideo video : prevDataFile.getVideos()) {
      if (video.hasBeenDeleted()) {
        System.out.println(""String_Node_Str"" + video.getFolderName());
      }
    }
  }
 catch (  FileNotFoundException ex) {
  }
  BackupHelper helper=new BackupHelper(site);
  helper.setUser(user);
  LinkedList<DownloadableVideo> videos=null;
  try {
    videos=helper.getVideos();
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
    System.exit(0);
  }
catch (  UnableToOpenURLConnectionException ex) {
    System.err.println(""String_Node_Str"");
    ex.printStackTrace();
    System.exit(0);
  }
  try {
    int videoCount=0;
    int totalVideoCount=videos.size();
    for (    DownloadableVideo video : videos) {
      for (int downloadTry=0; downloadTry < 3; downloadTry++) {
        try {
          video.init();
          String downloadURL=video.getDownloadURL();
          FileDownloader d=null;
          String safeVideoTitle=BackupTubeCommon.escapeFileName(video.getTitle());
          SimpleDateFormat published=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date(video.getPublished());
          String videoFolder=published.format(date) + ""String_Node_Str"" + safeVideoTitle;
          String videoSaveLocation=saveDir + videoFolder + ""String_Node_Str""+ safeVideoTitle+ ""String_Node_Str""+ video.getExtension();
          File videoFile=new File(videoSaveLocation);
          if (videoFile.exists()) {
            videoFile.delete();
          }
          try {
            d=new FileDownloader(new URL(downloadURL),videoSaveLocation);
          }
 catch (          FileAlreadyExistsException ex) {
            System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            break;
          }
          d.startDownload();
          boolean hasError=false;
          while (!d.isFinished()) {
            if (d.hasError()) {
              hasError=true;
              break;
            }
            double progress=d.getProgress();
            progress*=10000;
            progress=Math.round(progress);
            progress/=100;
            String progressMessage=""String_Node_Str"" + videoCount + ""String_Node_Str""+ totalVideoCount+ ""String_Node_Str""+ video.getTitle()+ ""String_Node_Str""+ progress+ ""String_Node_Str"";
            System.out.print(progressMessage);
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException ex) {
            }
          }
          if (hasError) {
            if (downloadTry == 2) {
              System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            }
 else {
              System.err.println(""String_Node_Str"");
            }
            continue;
          }
          System.out.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
          File singleVideoDataFeedFile=new File(saveDir + videoFolder + ""String_Node_Str""+ BackupTubeCommon.LOCATION_VIDEO_DATAFILE);
          if (singleVideoDataFeedFile.exists()) {
            singleVideoDataFeedFile.delete();
          }
          StoredVideo storedVideo;
          StoredVideoSiteInfo siteInfo=new StoredVideoSiteInfo();
          siteInfo.setSiteID(video.getSiteID());
          siteInfo.setVideoID(video.getVideoID());
          if (video.getSiteID().equals(BackupHelper.SITE_YOUTUBE)) {
            storedVideo=new StoredYouTubeVideo();
            storedVideo.setCategory(video.getCategory());
            storedVideo.setTags(video.getTags());
            storedVideo.setVideoResponse(videoResponse);
          }
 else {
            storedVideo=new StoredVideo();
          }
          storedVideo.setDescription(video.getDescription());
          storedVideo.setDownloadedOn(BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
          storedVideo.setHasBeenDeleted(false);
          storedVideo.setPublishedOn(BackupTubeCommon.getTimeString(video.getPublished()));
          storedVideo.setSiteInfo(siteInfo);
          storedVideo.setTitle(video.getTitle());
          storedVideo.setUploader(video.getUploader());
          saveDataFile(singleVideoDataFeedFile,video);
          ListedVideo listedVideo;
          if (video.getSiteID().equals(BackupHelper.SITE_YOUTUBE)) {
            listedVideo=new ListedYouTubeVideo();
          }
 else {
            listedVideo=new ListedVideo();
          }
          listedVideo.setTitle(video.getTitle());
          listedVideo.setDownloadedTime(BackupTubeCommon.getCurrentTime());
          listedVideo.setFolderName(videoFolder);
          listedVideo.setSiteID(video.getSiteID());
          listedVideo.setVideoID(video.getVideoID());
          BackupTubeDataFile dataFile;
          try {
            dataFile=getDataFile(dataFeedFile);
          }
 catch (          FileNotFoundException ex) {
            dataFile=new BackupTubeDataFile();
          }
          LinkedList<ListedVideo> storedVideos=dataFile.getVideos();
          if (storedVideos == null) {
            storedVideos=new LinkedList();
          }
          storedVideos.add(listedVideo);
          dataFile.setLastUpdated(BackupTubeCommon.getCurrentTime());
          dataFile.setVideos(storedVideos);
          saveDataFile(dataFeedFile,dataFile);
          break;
        }
 catch (        BadVideoException ex) {
          ex.printStackTrace();
        }
catch (        MalformedURLException ex) {
          ex.printStackTrace();
        }
      }
      videoCount++;
    }
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
  }
}","public static void main(String[] args){
  boolean isError=false;
  boolean showHelp=false;
  String user=null;
  String saveDir=null;
  String expecting=null;
  String site=null;
  for (  String arg : args) {
    if (expecting != null) {
      if (expecting.equals(""String_Node_Str"")) {
        user=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        saveDir=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        site=arg;
      }
 else {
        System.err.println(""String_Node_Str"" + arg);
        isError=true;
        break;
      }
      expecting=null;
      continue;
    }
    if (arg.equals(""String_Node_Str"")) {
      showHelp=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        user=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        saveDir=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        site=arg.substring(2);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else {
      System.err.println(""String_Node_Str"" + arg);
      isError=true;
      break;
    }
  }
  if (isError || showHelp) {
    showHelp(isError ? System.err : System.out);
    System.exit(0);
  }
  InputStreamReader inreader=new InputStreamReader(System.in);
  BufferedReader reader=new BufferedReader(inreader);
  if (site == null) {
    try {
      site=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  if (user == null) {
    try {
      user=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  boolean success=false;
  if (saveDir != null) {
    saveDir=BackupTubeCommon.fixDir(saveDir);
    success=BackupTubeCommon.isGoodSaveDir(saveDir);
    sendMessageIfBadSaveDir(success);
  }
  while (!success) {
    try {
      saveDir=getLineFromConsole(reader,""String_Node_Str"");
      saveDir=BackupTubeCommon.fixDir(saveDir);
      success=BackupTubeCommon.isGoodSaveDir(saveDir);
      sendMessageIfBadSaveDir(success);
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  File dataFeedFile=new File(saveDir + BackupTubeCommon.LOCATION_DATAFILE);
  try {
    BackupTubeDataFile prevDataFile=getDataFile(dataFeedFile);
    for (    ListedVideo video : prevDataFile.getVideos()) {
      if (video.hasBeenDeleted()) {
        System.out.println(""String_Node_Str"" + video.getFolderName());
      }
    }
  }
 catch (  FileNotFoundException ex) {
  }
  BackupHelper helper=new BackupHelper(site);
  helper.setUser(user);
  LinkedList<DownloadableVideo> videos=null;
  try {
    videos=helper.getVideos();
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
    System.exit(0);
  }
catch (  UnableToOpenURLConnectionException ex) {
    System.err.println(""String_Node_Str"");
    ex.printStackTrace();
    System.exit(0);
  }
  try {
    int videoCount=0;
    int totalVideoCount=videos.size();
    for (    DownloadableVideo video : videos) {
      for (int downloadTry=0; downloadTry < 3; downloadTry++) {
        try {
          video.init();
          String downloadURL=video.getDownloadURL();
          FileDownloader d=null;
          String safeVideoTitle=BackupTubeCommon.escapeFileName(video.getTitle());
          SimpleDateFormat published=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date(video.getPublished());
          String videoFolder=published.format(date) + ""String_Node_Str"" + safeVideoTitle;
          String videoSaveLocation=saveDir + videoFolder + ""String_Node_Str""+ safeVideoTitle+ ""String_Node_Str""+ video.getExtension();
          File videoFile=new File(videoSaveLocation);
          if (videoFile.exists()) {
            videoFile.delete();
          }
          try {
            d=new FileDownloader(new URL(downloadURL),videoSaveLocation);
          }
 catch (          FileAlreadyExistsException ex) {
            System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            break;
          }
          d.startDownload();
          boolean hasError=false;
          while (!d.isFinished()) {
            if (d.hasError()) {
              hasError=true;
              break;
            }
            double progress=d.getProgress();
            progress*=10000;
            progress=Math.round(progress);
            progress/=100;
            String progressMessage=""String_Node_Str"" + videoCount + ""String_Node_Str""+ totalVideoCount+ ""String_Node_Str""+ video.getTitle()+ ""String_Node_Str""+ progress+ ""String_Node_Str"";
            System.out.print(progressMessage);
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException ex) {
            }
          }
          if (hasError) {
            if (downloadTry == 2) {
              System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            }
 else {
              System.err.println(""String_Node_Str"");
            }
            continue;
          }
          System.out.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
          File singleVideoDataFeedFile=new File(saveDir + videoFolder + ""String_Node_Str""+ BackupTubeCommon.LOCATION_VIDEO_DATAFILE);
          if (singleVideoDataFeedFile.exists()) {
            singleVideoDataFeedFile.delete();
          }
          StoredVideo storedVideo;
          StoredVideoSiteInfo siteInfo=new StoredVideoSiteInfo();
          siteInfo.setSiteID(video.getSiteID());
          siteInfo.setVideoID(video.getVideoID());
          if (video.getSiteID().equals(BackupHelper.SITE_YOUTUBE)) {
            storedVideo=new StoredYouTubeVideo();
            YouTubeVideo siteVideo=(YouTubeVideo)video;
            StoredYouTubeVideo storedSiteVideo=(StoredYouTubeVideo)storedVideo;
            storedSiteVideo.setCategory(siteVideo.getCategory());
            storedSiteVideo.setTags(siteVideo.getTags());
          }
 else {
            storedVideo=new StoredVideo();
          }
          storedVideo.setDescription(video.getDescription());
          storedVideo.setDownloadedOn(BackupTubeCommon.getTimeString(BackupTubeCommon.getCurrentTime()));
          storedVideo.setHasBeenDeleted(false);
          storedVideo.setPublishedOn(BackupTubeCommon.getTimeString(video.getPublished()));
          storedVideo.setSiteInfo(siteInfo);
          storedVideo.setTitle(video.getTitle());
          storedVideo.setUploader(video.getUploader());
          storedVideo.setUrl(video.getURL());
          saveDataFile(singleVideoDataFeedFile,storedVideo);
          ListedVideo listedVideo;
          if (video.getSiteID().equals(BackupHelper.SITE_YOUTUBE)) {
            listedVideo=new ListedYouTubeVideo();
          }
 else {
            listedVideo=new ListedVideo();
          }
          listedVideo.setTitle(video.getTitle());
          listedVideo.setDownloadedTime(BackupTubeCommon.getCurrentTime());
          listedVideo.setFolderName(videoFolder);
          listedVideo.setSiteID(video.getSiteID());
          listedVideo.setVideoID(video.getVideoID());
          BackupTubeDataFile dataFile;
          try {
            dataFile=getDataFile(dataFeedFile);
          }
 catch (          FileNotFoundException ex) {
            dataFile=new BackupTubeDataFile();
          }
          LinkedList<ListedVideo> storedVideos=dataFile.getVideos();
          if (storedVideos == null) {
            storedVideos=new LinkedList();
          }
          storedVideos.add(listedVideo);
          dataFile.setLastUpdated(BackupTubeCommon.getCurrentTime());
          dataFile.setVideos(storedVideos);
          saveDataFile(dataFeedFile,dataFile);
          break;
        }
 catch (        BadVideoException ex) {
          ex.printStackTrace();
        }
catch (        MalformedURLException ex) {
          ex.printStackTrace();
        }
      }
      videoCount++;
    }
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
  }
}",0.9838774456365827
7626,"public static void saveDataFile(File dataFeedFile,BackupTubeDataFile dataFile){
  if (dataFeedFile.exists()) {
    dataFeedFile.delete();
  }
  try {
    String json=new Gson().toJson(dataFile,BackupTubeDataFile.class);
    PrintWriter writer=new PrintWriter(dataFeedFile);
    writer.write(json);
    writer.close();
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(0);
  }
}","public static void saveDataFile(File dataFeedFile,BackupTubeDataFile dataFile){
  if (dataFeedFile.exists()) {
    dataFeedFile.delete();
  }
  try {
    String json=BackupTubeCommon.getPrettyGson().toJson(dataFile,BackupTubeDataFile.class);
    PrintWriter writer=new PrintWriter(dataFeedFile);
    writer.write(json);
    writer.close();
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.exit(0);
  }
}",0.965034965034965
7627,"public static void main(String[] args){
  boolean isError=false;
  boolean showHelp=false;
  String user=null;
  String saveDir=null;
  String expecting=null;
  String site=null;
  for (  String arg : args) {
    if (expecting != null) {
      if (expecting.equals(""String_Node_Str"")) {
        user=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        saveDir=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        site=arg;
      }
 else {
        System.err.println(""String_Node_Str"" + arg);
        isError=true;
        break;
      }
      expecting=null;
      continue;
    }
    if (arg.equals(""String_Node_Str"")) {
      showHelp=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        user=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        saveDir=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        site=arg.substring(2);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else {
      System.err.println(""String_Node_Str"" + arg);
      isError=true;
      break;
    }
  }
  if (isError || showHelp) {
    showHelp(isError ? System.err : System.out);
    System.exit(0);
  }
  InputStreamReader inreader=new InputStreamReader(System.in);
  BufferedReader reader=new BufferedReader(inreader);
  if (site == null) {
    try {
      site=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  if (user == null) {
    try {
      user=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  boolean success=false;
  if (saveDir != null) {
    saveDir=BackupTubeCommon.fixDir(saveDir);
    success=BackupTubeCommon.isGoodSaveDir(saveDir);
    sendMessageIfBadSaveDir(success);
  }
  while (!success) {
    try {
      saveDir=getLineFromConsole(reader,""String_Node_Str"");
      saveDir=BackupTubeCommon.fixDir(saveDir);
      success=BackupTubeCommon.isGoodSaveDir(saveDir);
      sendMessageIfBadSaveDir(success);
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  File dataFeedFile=new File(saveDir + BackupTubeCommon.LOCATION_DATAFILE);
  try {
    BackupTubeDataFile prevDataFile=getDataFile(dataFeedFile);
    for (    StoredVideo video : prevDataFile.getVideos()) {
      if (video.hasBeenDeleted()) {
        System.out.println(""String_Node_Str"" + video.getFolderName());
      }
    }
  }
 catch (  FileNotFoundException ex) {
  }
  BackupHelper helper=new BackupHelper(site);
  helper.setUser(user);
  LinkedList<DownloadableVideo> videos=null;
  try {
    videos=helper.getVideos();
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
    System.exit(0);
  }
catch (  UnableToOpenURLConnectionException ex) {
    System.err.println(""String_Node_Str"");
    ex.printStackTrace();
    System.exit(0);
  }
  try {
    int videoCount=0;
    int totalVideoCount=videos.size();
    for (    DownloadableVideo video : videos) {
      for (int downloadTry=0; downloadTry < 3; downloadTry++) {
        try {
          video.init();
          String downloadURL=video.getDownloadURL();
          FileDownloader d=null;
          String safeVideoTitle=BackupTubeCommon.escapeFileName(video.getTitle());
          SimpleDateFormat published=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date(video.getPublished());
          String videoFolder=published.format(date) + ""String_Node_Str"" + safeVideoTitle;
          try {
            d=new FileDownloader(new URL(downloadURL),saveDir + videoFolder + ""String_Node_Str""+ safeVideoTitle+ ""String_Node_Str""+ video.getExtension());
          }
 catch (          FileAlreadyExistsException ex) {
            System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            break;
          }
          d.startDownload();
          boolean hasError=false;
          while (!d.isFinished()) {
            if (d.hasError()) {
              hasError=true;
              break;
            }
            double progress=d.getProgress();
            progress*=10000;
            progress=Math.round(progress);
            progress/=100;
            String progressMessage=""String_Node_Str"" + videoCount + ""String_Node_Str""+ totalVideoCount+ ""String_Node_Str""+ video.getTitle()+ ""String_Node_Str""+ progress+ ""String_Node_Str"";
            System.out.print(progressMessage);
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException ex) {
            }
          }
          if (hasError) {
            if (downloadTry == 2) {
              System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            }
 else {
              System.err.println(""String_Node_Str"");
            }
            continue;
          }
          System.out.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
          StoredYouTubeVideo storedVideo=new StoredYouTubeVideo();
          storedVideo.setTitle(video.getTitle());
          storedVideo.setDownloadedTime(BackupTubeCommon.getCurrentTime());
          storedVideo.setFolderName(videoFolder);
          storedVideo.setSiteID(video.getSiteID());
          storedVideo.setVideoID(video.getVideoID());
          BackupTubeDataFile dataFile;
          try {
            dataFile=getDataFile(dataFeedFile);
          }
 catch (          FileNotFoundException ex) {
            dataFile=new BackupTubeDataFile();
          }
          LinkedList<StoredVideo> storedVideos=null;
          if (storedVideos == null) {
            storedVideos=new LinkedList();
          }
          storedVideos.add(storedVideo);
          dataFile.setLastUpdated(BackupTubeCommon.getCurrentTime());
          dataFile.setVideos(storedVideos);
          saveDataFile(dataFeedFile,dataFile);
          break;
        }
 catch (        BadVideoException ex) {
          ex.printStackTrace();
        }
catch (        MalformedURLException ex) {
          ex.printStackTrace();
        }
      }
      videoCount++;
    }
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
  }
}","public static void main(String[] args){
  boolean isError=false;
  boolean showHelp=false;
  String user=null;
  String saveDir=null;
  String expecting=null;
  String site=null;
  for (  String arg : args) {
    if (expecting != null) {
      if (expecting.equals(""String_Node_Str"")) {
        user=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        saveDir=arg;
      }
 else       if (expecting.equals(""String_Node_Str"")) {
        site=arg;
      }
 else {
        System.err.println(""String_Node_Str"" + arg);
        isError=true;
        break;
      }
      expecting=null;
      continue;
    }
    if (arg.equals(""String_Node_Str"")) {
      showHelp=true;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        user=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        saveDir=arg.substring(2);
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      if (arg.equals(""String_Node_Str"")) {
        expecting=""String_Node_Str"";
      }
 else {
        site=arg.substring(2);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else     if (arg.equals(""String_Node_Str"")) {
      expecting=""String_Node_Str"";
    }
 else {
      System.err.println(""String_Node_Str"" + arg);
      isError=true;
      break;
    }
  }
  if (isError || showHelp) {
    showHelp(isError ? System.err : System.out);
    System.exit(0);
  }
  InputStreamReader inreader=new InputStreamReader(System.in);
  BufferedReader reader=new BufferedReader(inreader);
  if (site == null) {
    try {
      site=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  if (user == null) {
    try {
      user=getLineFromConsole(reader,""String_Node_Str"");
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  boolean success=false;
  if (saveDir != null) {
    saveDir=BackupTubeCommon.fixDir(saveDir);
    success=BackupTubeCommon.isGoodSaveDir(saveDir);
    sendMessageIfBadSaveDir(success);
  }
  while (!success) {
    try {
      saveDir=getLineFromConsole(reader,""String_Node_Str"");
      saveDir=BackupTubeCommon.fixDir(saveDir);
      success=BackupTubeCommon.isGoodSaveDir(saveDir);
      sendMessageIfBadSaveDir(success);
    }
 catch (    UnableToReadFromConsoleException ex) {
      ex.printStackTrace();
      System.exit(0);
    }
  }
  File dataFeedFile=new File(saveDir + BackupTubeCommon.LOCATION_DATAFILE);
  try {
    BackupTubeDataFile prevDataFile=getDataFile(dataFeedFile);
    for (    StoredVideo video : prevDataFile.getVideos()) {
      if (video.hasBeenDeleted()) {
        System.out.println(""String_Node_Str"" + video.getFolderName());
      }
    }
  }
 catch (  FileNotFoundException ex) {
  }
  BackupHelper helper=new BackupHelper(site);
  helper.setUser(user);
  LinkedList<DownloadableVideo> videos=null;
  try {
    videos=helper.getVideos();
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
    System.exit(0);
  }
catch (  UnableToOpenURLConnectionException ex) {
    System.err.println(""String_Node_Str"");
    ex.printStackTrace();
    System.exit(0);
  }
  try {
    int videoCount=0;
    int totalVideoCount=videos.size();
    for (    DownloadableVideo video : videos) {
      for (int downloadTry=0; downloadTry < 3; downloadTry++) {
        try {
          video.init();
          String downloadURL=video.getDownloadURL();
          FileDownloader d=null;
          String safeVideoTitle=BackupTubeCommon.escapeFileName(video.getTitle());
          SimpleDateFormat published=new SimpleDateFormat(""String_Node_Str"");
          Date date=new Date(video.getPublished());
          String videoFolder=published.format(date) + ""String_Node_Str"" + safeVideoTitle;
          try {
            d=new FileDownloader(new URL(downloadURL),saveDir + videoFolder + ""String_Node_Str""+ safeVideoTitle+ ""String_Node_Str""+ video.getExtension());
          }
 catch (          FileAlreadyExistsException ex) {
            System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            break;
          }
          d.startDownload();
          boolean hasError=false;
          while (!d.isFinished()) {
            if (d.hasError()) {
              hasError=true;
              break;
            }
            double progress=d.getProgress();
            progress*=10000;
            progress=Math.round(progress);
            progress/=100;
            String progressMessage=""String_Node_Str"" + videoCount + ""String_Node_Str""+ totalVideoCount+ ""String_Node_Str""+ video.getTitle()+ ""String_Node_Str""+ progress+ ""String_Node_Str"";
            System.out.print(progressMessage);
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException ex) {
            }
          }
          if (hasError) {
            if (downloadTry == 2) {
              System.err.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
            }
 else {
              System.err.println(""String_Node_Str"");
            }
            continue;
          }
          System.out.println(""String_Node_Str"" + video.getTitle() + ""String_Node_Str"");
          StoredYouTubeVideo storedVideo=new StoredYouTubeVideo();
          storedVideo.setTitle(video.getTitle());
          storedVideo.setDownloadedTime(BackupTubeCommon.getCurrentTime());
          storedVideo.setFolderName(videoFolder);
          storedVideo.setSiteID(video.getSiteID());
          storedVideo.setVideoID(video.getVideoID());
          BackupTubeDataFile dataFile;
          try {
            dataFile=getDataFile(dataFeedFile);
          }
 catch (          FileNotFoundException ex) {
            dataFile=new BackupTubeDataFile();
          }
          LinkedList<StoredVideo> storedVideos=dataFile.getVideos();
          if (storedVideos == null) {
            storedVideos=new LinkedList();
          }
          storedVideos.add(storedVideo);
          dataFile.setLastUpdated(BackupTubeCommon.getCurrentTime());
          dataFile.setVideos(storedVideos);
          saveDataFile(dataFeedFile,dataFile);
          break;
        }
 catch (        BadVideoException ex) {
          ex.printStackTrace();
        }
catch (        MalformedURLException ex) {
          ex.printStackTrace();
        }
      }
      videoCount++;
    }
  }
 catch (  FatalBackupException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    ex.printStackTrace();
  }
}",0.998277594373475
7628,"public boolean testMove(BlockPosition pos){
  World world=pos.getWorld();
  Block block=world.getBlockAt(pos.toLocation());
  if (block != null) {
    if (!isEmptyBlock(block)) {
      MagnetBlockBlock mblock=getBlock(new BlockPosition(block));
      if (mblock.getStructure() != null && mblock.getStructure().equals(structure)) {
        return true;
      }
 else {
        plugin.log.log(Level.INFO,""String_Node_Str"" + structure);
      }
      plugin.log.log(Level.INFO,""String_Node_Str"" + block.getType().toString() + ""String_Node_Str"");
      return false;
    }
  }
  return true;
}","public boolean testMove(BlockPosition pos){
  World world=pos.getWorld();
  Block block=world.getBlockAt(pos.toLocation());
  if (block != null) {
    if (!isEmptyBlock(block)) {
      MagnetBlockBlock mblock=getBlock(new BlockPosition(block));
      block=mblock.getBlock();
      if (mblock.getStructure() != null && mblock.getStructure().equals(structure)) {
        return true;
      }
 else       if (mblock.getStructure() == null) {
        return true;
      }
 else {
        plugin.log.log(Level.INFO,""String_Node_Str"" + structure);
      }
      plugin.log.log(Level.INFO,""String_Node_Str"" + block.getType().toString() + ""String_Node_Str"");
      return false;
    }
  }
  return true;
}",0.9153069153069152
7629,"public StructureAnimation(MagnetBlockStructure structure,BlockPosition targetPos){
  this.structure=structure;
  targetPosition=targetPos;
  toPos=targetPos.toLocation().toVector();
  currentPos=structure.getOrigin().toLocation().toVector();
}","public StructureAnimation(MagnetBlockStructure structure,BlockPosition targetPos){
  this.structure=structure;
  targetPosition=targetPos;
  toPos=targetPos.toLocation().toVector();
  currentPos=structure.getOrigin().toLocation().toVector();
  Vector v=toPos.clone().subtract(currentPos).normalize();
  v.setX(Math.round(v.getX()));
  v.setY(Math.round(v.getY()));
  v.setZ(Math.round(v.getZ()));
  neededsteps=(int)(toPos.clone().subtract(currentPos.clone()).length() / v.length());
}",0.6675824175824175
7630,"public boolean isSolidBlock(){
  Material t=getBlock().getType();
  if (t.equals(Material.BED_BLOCK) || t.equals(Material.IRON_DOOR_BLOCK) || t.equals(Material.WOOD_DOOR)|| t.equals(Material.WOOD_PLATE)|| t.equals(Material.STONE_PLATE)|| t.equals(Material.TORCH)|| t.equals(Material.REDSTONE_WIRE)|| t.equals(Material.REDSTONE_TORCH_OFF)|| t.equals(Material.REDSTONE_TORCH_ON)|| t.equals(Material.RED_MUSHROOM)|| t.equals(Material.YELLOW_FLOWER)|| t.equals(Material.LADDER)|| t.equals(Material.SIGN)|| t.equals(Material.WALL_SIGN)|| t.equals(Material.SIGN_POST)|| t.equals(Material.LEVER)|| t.equals(Material.BROWN_MUSHROOM)|| t.equals(Material.CACTUS)|| t.equals(Material.CROPS)|| t.equals(Material.DIODE_BLOCK_OFF)|| t.equals(Material.DIODE_BLOCK_ON)|| t.equals(Material.PORTAL)|| t.equals(Material.RAILS)|| t.equals(Material.SAPLING)|| t.equals(Material.SNOW)|| t.equals(Material.SUGAR_CANE_BLOCK)|| t.equals(Material.WALL_SIGN)|| t.equals(Material.RED_ROSE)) {
    return false;
  }
  return true;
}","public boolean isSolidBlock(){
  Material t=getBlock().getType();
  if (t.equals(Material.BED_BLOCK) || t.equals(Material.IRON_DOOR_BLOCK) || t.equals(Material.WOOD_DOOR)|| t.equals(Material.WOOD_PLATE)|| t.equals(Material.STONE_PLATE)|| t.equals(Material.TORCH)|| t.equals(Material.REDSTONE_WIRE)|| t.equals(Material.REDSTONE_TORCH_OFF)|| t.equals(Material.REDSTONE_TORCH_ON)|| t.equals(Material.RED_MUSHROOM)|| t.equals(Material.YELLOW_FLOWER)|| t.equals(Material.LADDER)|| t.equals(Material.SIGN)|| t.equals(Material.WALL_SIGN)|| t.equals(Material.SIGN_POST)|| t.equals(Material.LEVER)|| t.equals(Material.BROWN_MUSHROOM)|| t.equals(Material.CACTUS)|| t.equals(Material.CROPS)|| t.equals(Material.DIODE_BLOCK_OFF)|| t.equals(Material.DIODE_BLOCK_ON)|| t.equals(Material.PORTAL)|| t.equals(Material.RAILS)|| t.equals(Material.SAPLING)|| t.equals(Material.SNOW)|| t.equals(Material.SUGAR_CANE_BLOCK)|| t.equals(Material.WALL_SIGN)|| t.equals(Material.RED_ROSE)|| t.equals(Material.COBBLESTONE_STAIRS)|| t.equals(Material.REDSTONE_ORE)|| t.equals(Material.GLOWING_REDSTONE_ORE)|| t.equals(Material.STONE_BUTTON)|| t.equals(Material.FIRE)|| t.equals(Material.SUGAR_CANE)|| t.equals(Material.SUGAR_CANE_BLOCK)|| t.equals(Material.POWERED_RAIL)|| t.equals(Material.DETECTOR_RAIL)|| t.equals(Material.BURNING_FURNACE)|| t.equals(Material.PUMPKIN_STEM)|| t.equals(Material.MELON_STEM)|| t.equals(Material.PISTON_MOVING_PIECE)|| t.equals(Material.TRAP_DOOR)|| t.equals(Material.FENCE_GATE)) {
    return false;
  }
  return true;
}",0.7935126582278481
7631,"public void moveTo(BlockPosition pos,int step){
switch (step) {
case 0:
    typeid=world.getBlockTypeIdAt(block.getLocation());
  material=Material.getMaterial(typeid);
data=block.getData();
if (material.equals(Material.AIR)) {
plugin.log.log(Level.SEVERE,""String_Node_Str"");
block=block.getWorld().getBlockAt(block.getLocation());
material=Material.COBBLESTONE;
data=0;
}
if (material.toString().contains(""String_Node_Str"")) {
Sign s=(Sign)block.getState();
for (int i=0; i < s.getLines().length; i++) {
signText.add(s.getLine(i));
}
}
break;
case 1:
block.setType(Material.AIR);
if (block.getRelative(BlockFace.DOWN).getType().equals(Material.WOOD_PLATE)) {
block.getRelative(BlockFace.DOWN).setData((byte)0);
}
break;
case 2:
block=pos.getWorld().getBlockAt(pos.toLocation());
block.setTypeId(typeid);
block.setData(data);
if (material.toString().contains(""String_Node_Str"")) {
Sign s=(Sign)block.getState();
int i=0;
for (String line : signText) {
s.setLine(i,line);
i++;
}
signText.clear();
}
break;
}
}","public void moveTo(BlockPosition pos,int step){
  BlockState state;
switch (step) {
case 0:
    typeid=world.getBlockTypeIdAt(block.getLocation());
  material=Material.getMaterial(typeid);
data=block.getData();
state=block.getState();
if (material.equals(Material.AIR)) {
plugin.log.log(Level.SEVERE,""String_Node_Str"");
block=block.getWorld().getBlockAt(block.getLocation());
material=Material.COBBLESTONE;
data=0;
}
if (state instanceof Sign) {
Sign s=(Sign)state;
for (int i=0; i < s.getLines().length; i++) {
signText.add(s.getLine(i));
}
}
if (state instanceof Chest) {
Chest chest=(Chest)state;
inventory=InventoryCopy(chest.getInventory().getContents());
chest.getInventory().clear();
}
if (state instanceof Dispenser) {
Dispenser dispenser=(Dispenser)state;
inventory=InventoryCopy(dispenser.getInventory().getContents());
dispenser.getInventory().clear();
}
if (state instanceof Furnace) {
Furnace furnace=(Furnace)state;
burnTime=furnace.getBurnTime();
cookTime=furnace.getCookTime();
inventory=InventoryCopy(furnace.getInventory().getContents());
furnace.getInventory().clear();
furnace.setCookTime((short)0);
furnace.setBurnTime((short)0);
}
if (state instanceof CreatureSpawner) {
CreatureSpawner spawner=(CreatureSpawner)state;
creature=spawner.getCreatureType();
delay=spawner.getDelay();
}
if (state instanceof Jukebox) {
Jukebox jukebox=(Jukebox)state;
record=jukebox.getPlaying();
}
if (state instanceof NoteBlock) {
NoteBlock noteBlock=(NoteBlock)state;
note=noteBlock.getNote();
}
break;
case 1:
block.setType(Material.AIR);
if (block.getRelative(BlockFace.DOWN).getType().equals(Material.WOOD_PLATE)) {
block.getRelative(BlockFace.DOWN).setData((byte)0);
}
break;
case 2:
block=pos.getWorld().getBlockAt(pos.toLocation());
block.setTypeId(typeid);
block.setData(data);
state=block.getState();
if (state instanceof Sign) {
Sign s=(Sign)block.getState();
int i=0;
for (String line : signText) {
s.setLine(i,line);
i++;
}
signText.clear();
}
if (state instanceof Chest) {
Chest chest=(Chest)block.getState();
chest.getInventory().setContents(InventoryCopy(inventory));
}
if (state instanceof Dispenser) {
Dispenser dispenser=(Dispenser)block.getState();
dispenser.getInventory().setContents(InventoryCopy(inventory));
}
if (state instanceof Furnace) {
Furnace furnace=(Furnace)block.getState();
furnace.setBurnTime(burnTime);
furnace.setCookTime(cookTime);
furnace.getInventory().setContents(InventoryCopy(inventory));
}
if (state instanceof CreatureSpawner) {
CreatureSpawner spawner=(CreatureSpawner)state;
spawner.setCreatureType(creature);
spawner.setDelay(delay);
}
if (state instanceof Jukebox) {
Jukebox jukebox=(Jukebox)state;
jukebox.setPlaying(record);
}
if (state instanceof NoteBlock) {
NoteBlock noteBlock=(NoteBlock)state;
noteBlock.setNote(note);
}
break;
}
}",0.4622269018162674
7632,"@Override public void configure() throws Exception {
  from(""String_Node_Str"").choice().when(header(""String_Node_Str"").isEqualTo(LoginReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(ViewProfileReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetEventsReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetMarketReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetMarketPricesReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(PlaceBetsReq.class.toString())).to(""String_Node_Str"").otherwise().to(""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(loginThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(viewProfileThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getEventsThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getMarketThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getMarketPricesThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(placeBetsThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
}","@Override public void configure() throws Exception {
  from(""String_Node_Str"").setHeader(""String_Node_Str"",new Expression(){
    @Override public <T>T evaluate(    Exchange arg0,    Class<T> arg1){
      return null;
    }
  }
).choice().when(header(""String_Node_Str"").isEqualTo(LoginReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(ViewProfileReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetEventsReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetMarketReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(GetMarketPricesReq.class.toString())).to(""String_Node_Str"").when(header(""String_Node_Str"").isEqualTo(PlaceBetsReq.class.toString())).to(""String_Node_Str"").otherwise().to(""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(loginThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(viewProfileThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getEventsThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getMarketThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(getMarketPricesThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
  from(""String_Node_Str"").throttle(placeBetsThrottle).timePeriodMillis(60000).beanRef(""String_Node_Str"",""String_Node_Str"").end();
}",0.9520153550863724
7633,"@Override @Transactional public void placeBet(Bet bet){
  PlaceBetsReq placeBetsReq=new PlaceBetsReq();
  placeBetsReq.setBets(new ArrayOfPlaceBets());
  Strategy strategy=bet.getStrategy();
  BigDecimal liability=strategy.getLiability().divide(new BigDecimal(bet.getTimings().size()));
  Pricing bestPricing=BettingUtil.bestPrice(bet.getHorse().getPrices(),strategy.getAspect());
  if (bestPricing.getPrice().compareTo(strategy.getMaxOdds()) <= 0 && bestPricing.getPrice().compareTo(strategy.getMinOdds()) >= 0) {
    if (strategy.getChasePriceByTick() == 0) {
      if (bestPricing.getAmountAvailable().compareTo(liability) >= 0) {
        placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,liability,bestPricing.getPrice()));
      }
 else {
        placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,bestPricing.getAmountAvailable(),bestPricing.getPrice()));
        placeBetsReq.getBets().getPlaceBets().add(createLimitedSPBet(bet,liability.subtract(bestPricing.getAmountAvailable())));
      }
    }
 else {
      placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,liability,BettingUtil.findChasePrice(bestPricing.getPrice(),strategy.getChasePriceByTick(),strategy.getAspect())));
    }
  }
 else {
    placeBetsReq.getBets().getPlaceBets().add(createLimitedSPBet(bet,liability));
  }
  sendRequest(placeBetsReq);
}","@Override @Transactional public void placeBet(Bet bet){
  PlaceBetsReq placeBetsReq=new PlaceBetsReq();
  placeBetsReq.setBets(new ArrayOfPlaceBets());
  Strategy strategy=bet.getStrategy();
  BigDecimal liability=strategy.getLiability().divide(new BigDecimal(bet.getNumberOfSplits()),BigDecimal.ROUND_HALF_UP);
  Pricing bestPricing=BettingUtil.bestPrice(bet.getHorse().getPrices(),strategy.getAspect());
  if (bestPricing.getPrice().compareTo(strategy.getMaxOdds()) <= 0 && bestPricing.getPrice().compareTo(strategy.getMinOdds()) >= 0) {
    if (strategy.getChasePriceByTick() == 0) {
      if (bestPricing.getAmountAvailable().compareTo(liability) >= 0) {
        placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,liability,bestPricing.getPrice()));
      }
 else {
        placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,bestPricing.getAmountAvailable(),bestPricing.getPrice()));
        placeBetsReq.getBets().getPlaceBets().add(createLimitedSPBet(bet,liability.subtract(bestPricing.getAmountAvailable())));
      }
    }
 else {
      placeBetsReq.getBets().getPlaceBets().add(createMOCExchangeBet(bet,liability,BettingUtil.findChasePrice(bestPricing.getPrice(),strategy.getChasePriceByTick(),strategy.getAspect())));
    }
  }
 else {
    placeBetsReq.getBets().getPlaceBets().add(createLimitedSPBet(bet,liability));
  }
  sendRequest(placeBetsReq);
}",0.979370249728556
7634,"public static BigDecimal findChasePrice(BigDecimal price,int ticks,BettingAspect aspect){
  return aspect == BettingAspect.BACK ? PRICE_TICKS.get(PRICE_TICKS.indexOf(price) + ticks) : PRICE_TICKS.get(PRICE_TICKS.indexOf(price) - ticks);
}","public static BigDecimal findChasePrice(BigDecimal price,int ticks,BettingAspect aspect){
  return aspect == BettingAspect.BACK ? PRICE_TICKS.get(PRICE_TICKS.indexOf(price.stripTrailingZeros()) + ticks) : PRICE_TICKS.get(PRICE_TICKS.indexOf(price.stripTrailingZeros()) - ticks);
}",0.918918918918919
7635,"public static BigDecimal libilityToStake(BigDecimal liability,BigDecimal price){
  return liability.divide(price.subtract(BigDecimal.ONE));
}","public static BigDecimal libilityToStake(BigDecimal liability,BigDecimal price){
  return liability.divide(price.subtract(BigDecimal.ONE),BigDecimal.ROUND_HALF_UP);
}",0.9185667752442996
7636,"/** 
 * @param args
 * @throws Exception 
 * @throws CamelExecutionException 
 */
public static void main(String[] args) throws CamelExecutionException, Exception {
  final ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  final ScheduledService scheduledService=(ScheduledService)applicationContext.getBean(""String_Node_Str"");
  scheduledService.getAllRacePrices();
}","/** 
 * @param args
 * @throws Exception 
 * @throws CamelExecutionException 
 */
public static void main(String[] args) throws CamelExecutionException, Exception {
  final ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
}",0.7852941176470588
7637,"/** 
 * M�todo para levantar os servi�os do OpenORB de mapa de nomes e f�brica de canais de eventos
 */
private void riseOpenORB(){
  Runtime r=Runtime.getRuntime();
  try {
    Process p;
    BufferedReader bfr;
    String msg;
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    p=r.exec(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getInputStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    p=r.exec(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getInputStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Método para levantar os serviços do OpenORB de mapa de nomes e fábrica de canais de eventos
 */
private void riseOpenORB(){
  Runtime r=Runtime.getRuntime();
  try {
    Process p;
    BufferedReader bfr;
    String msg;
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    p=r.exec(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getInputStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    p=r.exec(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getInputStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
    bfr=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((msg=bfr.readLine()) != null) {
      System.out.println(msg);
    }
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9978386167146974
7638,"@Override public void setTimingHandler(TimingHandler h){
  handler=h;
  animationTimer=new SeqTimer(handler);
}","@Override public void setTimingHandler(TimingHandler h){
  handler=h;
  handler.registerAnimatable(this);
  animationTimer=new SeqTimer(handler);
}",0.8604651162790697
7639,"/** 
 * public void handle(GenericEvent event) { if(event == null)	return;		 if(updateGrabber(event)) return;		 if(event instanceof GenericMotionEvent && event instanceof Duoble<?>) { ((GenericMotionEvent)event).modulate(sens); if (deviceGrabber() != null ) scene.enqueueEvent(new EventGrabberTuple(event, frameProfile().handle((Duoble<?>)event), deviceGrabber())); else scene.enqueueEvent(new EventGrabberTuple(event, cameraProfile().handle((Duoble<?>)event), null)); } }
 */
@Override public void handle(THEvent event){
  if (event == null || !handler.isAgentRegistered(this))   return;
  if (event instanceof Duoble<?>) {
    if (event instanceof THClickEvent)     handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,clickProfile().handle((Duoble<?>)event),grabber()));
 else     if (event instanceof THMotionEvent) {
      ((THMotionEvent)event).modulate(sens);
      if (trackedGrabber() != null)       if (event instanceof DOF1Event)       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,frameWheelProfile().handle((Duoble<?>)event),trackedGrabber()));
 else       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,frameProfile().handle((Duoble<?>)event),trackedGrabber()));
 else       if (event instanceof DOF1Event)       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,wheelProfile().handle((Duoble<?>)event),defaultGrabber()));
 else       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,cameraProfile().handle((Duoble<?>)event),defaultGrabber()));
    }
  }
}","/** 
 * public void handle(GenericEvent event) { if(event == null)	return;		 if(updateGrabber(event)) return;		 if(event instanceof GenericMotionEvent && event instanceof Duoble<?>) { ((GenericMotionEvent)event).modulate(sens); if (deviceGrabber() != null ) scene.enqueueEvent(new EventGrabberTuple(event, frameProfile().handle((Duoble<?>)event), deviceGrabber())); else scene.enqueueEvent(new EventGrabberTuple(event, cameraProfile().handle((Duoble<?>)event), null)); } }
 */
@Override public void handle(THEvent event){
  if (event == null || !handler.isAgentRegistered(this))   return;
  if (event instanceof Duoble<?>) {
    if (event instanceof THClickEvent)     handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,clickProfile().handle((Duoble<?>)event),grabber()));
 else     if (event instanceof THMotionEvent) {
      ((THMotionEvent)event).modulate(sens);
      if (trackedGrabber() != null)       if (event instanceof GenericDOF1Event)       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,frameWheelProfile().handle((Duoble<?>)event),trackedGrabber()));
 else       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,frameProfile().handle((Duoble<?>)event),trackedGrabber()));
 else       if (event instanceof GenericDOF1Event)       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,wheelProfile().handle((Duoble<?>)event),defaultGrabber()));
 else       handler.enqueueEventTuple(new EventGrabberDuobleTuple(event,cameraProfile().handle((Duoble<?>)event),defaultGrabber()));
    }
  }
}",0.9954308093994778
7640,"@Override public DOF6Event feed(){
  return null;
}","@Override public GenericDOF6Event<Constants.DOF_6Action> feed(){
  return null;
}",0.7727272727272727
7641,"@Override public DOF2Event feed(){
  return null;
}","@Override public GenericDOF2Event<Constants.DOF_2Action> feed(){
  return null;
}",0.7727272727272727
7642,"public P5KeyboardAgent(AbstractScene scn,String n){
  super(new GenericKeyboardProfile<Constants.DOF_0Action>(),scn.terseHandler(),n);
  setDefaultGrabber(scn);
  keyboardProfile().setShortcut('a',DOF_0Action.DRAW_AXIS);
  keyboardProfile().setShortcut('f',DOF_0Action.DRAW_FRAME_SELECTION_HINT);
  keyboardProfile().setShortcut('g',DOF_0Action.DRAW_GRID);
  keyboardProfile().setShortcut('i',DOF_0Action.FOCUS_INTERACTIVE_FRAME);
  keyboardProfile().setShortcut(' ',DOF_0Action.CAMERA_PROFILE);
  keyboardProfile().setShortcut('e',DOF_0Action.CAMERA_TYPE);
  keyboardProfile().setShortcut('h',DOF_0Action.GLOBAL_HELP);
  keyboardProfile().setShortcut('H',DOF_0Action.CURRENT_CAMERA_PROFILE_HELP);
  keyboardProfile().setShortcut('r',DOF_0Action.EDIT_CAMERA_PATH);
  keyboardProfile().setShortcut('s',DOF_0Action.INTERPOLATE_TO_FIT_SCENE);
  keyboardProfile().setShortcut('S',DOF_0Action.SHOW_ALL);
  keyboardProfile().setShortcut(KeyboardEvent.TH_RIGHT,DOF_0Action.MOVE_CAMERA_RIGHT);
  keyboardProfile().setShortcut(KeyboardEvent.TH_LEFT,DOF_0Action.MOVE_CAMERA_LEFT);
  keyboardProfile().setShortcut(KeyboardEvent.TH_UP,DOF_0Action.MOVE_CAMERA_UP);
  keyboardProfile().setShortcut(KeyboardEvent.TH_DOWN,DOF_0Action.MOVE_CAMERA_DOWN);
  keyboardProfile().setShortcut((KeyboardEvent.TH_ALT | KeyboardEvent.TH_SHIFT),'l',DOF_0Action.MOVE_CAMERA_LEFT);
}","public P5KeyboardAgent(AbstractScene scn,String n){
  super(new GenericKeyboardProfile<Constants.DOF_0Action>(),scn.terseHandler(),n);
  setDefaultGrabber(scn);
  keyboardProfile().setShortcut('a',DOF_0Action.DRAW_AXIS);
  keyboardProfile().setShortcut('f',DOF_0Action.DRAW_FRAME_SELECTION_HINT);
  keyboardProfile().setShortcut('g',DOF_0Action.DRAW_GRID);
  keyboardProfile().setShortcut('i',DOF_0Action.FOCUS_INTERACTIVE_FRAME);
  keyboardProfile().setShortcut(' ',DOF_0Action.CAMERA_PROFILE);
  keyboardProfile().setShortcut('e',DOF_0Action.CAMERA_TYPE);
  keyboardProfile().setShortcut('h',DOF_0Action.GLOBAL_HELP);
  keyboardProfile().setShortcut('H',DOF_0Action.CURRENT_CAMERA_PROFILE_HELP);
  keyboardProfile().setShortcut('r',DOF_0Action.EDIT_CAMERA_PATH);
  keyboardProfile().setShortcut('s',DOF_0Action.INTERPOLATE_TO_FIT_SCENE);
  keyboardProfile().setShortcut('S',DOF_0Action.SHOW_ALL);
  keyboardProfile().setShortcut(GenericKeyboardEvent.TH_RIGHT,DOF_0Action.MOVE_CAMERA_RIGHT);
  keyboardProfile().setShortcut(GenericKeyboardEvent.TH_LEFT,DOF_0Action.MOVE_CAMERA_LEFT);
  keyboardProfile().setShortcut(GenericKeyboardEvent.TH_UP,DOF_0Action.MOVE_CAMERA_UP);
  keyboardProfile().setShortcut(GenericKeyboardEvent.TH_DOWN,DOF_0Action.MOVE_CAMERA_DOWN);
  keyboardProfile().setShortcut((GenericKeyboardEvent.TH_ALT | GenericKeyboardEvent.TH_SHIFT),'l',DOF_0Action.MOVE_CAMERA_LEFT);
}",0.9847161572052402
7643,"@Override public KeyboardEvent feed(){
  return null;
}","@Override public GenericKeyboardEvent<Constants.DOF_0Action> feed(){
  return null;
}",0.7857142857142857
7644,"@Override public boolean checkIfGrabsInput(THEvent event){
  return (event instanceof KeyboardEvent || event instanceof ClickEvent);
}","@Override public boolean checkIfGrabsInput(THEvent event){
  return (event instanceof GenericKeyboardEvent || event instanceof GenericClickEvent);
}",0.950354609929078
7645,"/** 
 * Internal method. Handles the different global keyboard actions.
 */
@Override public void performInteraction(THEvent event){
  if (!(event instanceof ClickEvent) && !(event instanceof KeyboardEvent))   return;
  Actionable<DLAction> a=null;
  if (event instanceof ClickEvent)   a=((ClickEvent)event).getAction();
  if (event instanceof KeyboardEvent)   a=((KeyboardEvent)event).getAction();
  if (a == null)   return;
  DLAction id=a.action();
  if (!id.is2D() && this.is2D())   return;
  Vec trans;
switch (id) {
case DRAW_AXIS:
    toggleAxisIsDrawn();
  break;
case DRAW_GRID:
toggleGridIsDrawn();
break;
case CAMERA_PROFILE:
break;
case CAMERA_TYPE:
toggleCameraType();
break;
case CAMERA_KIND:
toggleCameraKind();
break;
case ANIMATION:
toggleAnimation();
break;
case GLOBAL_HELP:
displayGlobalHelp();
break;
case CURRENT_CAMERA_PROFILE_HELP:
displayCurrentCameraProfileHelp();
break;
case EDIT_CAMERA_PATH:
toggleCameraPathsAreDrawn();
break;
case FOCUS_INTERACTIVE_FRAME:
break;
case DRAW_FRAME_SELECTION_HINT:
toggleFrameSelectionHintIsDrawn();
break;
case CONSTRAIN_FRAME:
break;
case INTERPOLATE_TO_ZOOM_ON_PIXEL:
if (this.is3D()) {
Camera.WorldPoint wP=camera().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
if (wP.found) {
pupVec=wP.point;
pupFlag=true;
timerFx.runOnce(1000);
}
}
 else {
viewWindow().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
pupVec=viewWindow().unprojectedCoordinatesOf(new Vec((float)cursorX,(float)cursorY,0.5f));
pupFlag=true;
timerFx.runOnce(1000);
}
break;
case INTERPOLATE_TO_FIT_SCENE:
pinhole().interpolateToFitScene();
break;
case SHOW_ALL:
showAll();
break;
case MOVE_CAMERA_LEFT:
trans=new Vec(-10.0f * pinhole().flySpeed(),0.0f,0.0f);
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(pinhole().frame().inverseTransformOf(trans));
break;
case MOVE_CAMERA_RIGHT:
trans=new Vec(10.0f * pinhole().flySpeed(),0.0f,0.0f);
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(pinhole().frame().inverseTransformOf(trans));
break;
case MOVE_CAMERA_UP:
trans=pinhole().frame().inverseTransformOf(new Vec(0.0f,isRightHanded() ? 10.0f : -10.0f * pinhole().flySpeed(),0.0f));
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(trans);
break;
case MOVE_CAMERA_DOWN:
trans=pinhole().frame().inverseTransformOf(new Vec(0.0f,isRightHanded() ? -10.0f : 10.0f * pinhole().flySpeed(),0.0f));
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(trans);
break;
case INCREASE_ROTATION_SENSITIVITY:
pinhole().setRotationSensitivity(pinhole().rotationSensitivity() * 1.2f);
break;
case DECREASE_ROTATION_SENSITIVITY:
pinhole().setRotationSensitivity(pinhole().rotationSensitivity() / 1.2f);
break;
case INCREASE_CAMERA_FLY_SPEED:
((Camera)pinhole()).setFlySpeed(((Camera)pinhole()).flySpeed() * 1.2f);
break;
case DECREASE_CAMERA_FLY_SPEED:
((Camera)pinhole()).setFlySpeed(((Camera)pinhole()).flySpeed() / 1.2f);
break;
case INCREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() * 1.2f);
break;
case DECREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() / 1.2f);
break;
case INCREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() + PI / 64);
break;
case DECREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() - PI / 64);
break;
case INCREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() + PI / 64);
break;
case DECREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() - PI / 64);
break;
case INCREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() + radius() / 50);
break;
case DECREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() - radius() / 50);
break;
case ZOOM_ON_PIXEL:
if (this.is2D()) {
viewWindow().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
pupVec=viewWindow().unprojectedCoordinatesOf(new Vec((float)cursorX,(float)cursorY,0.5f));
pupFlag=true;
timerFx.runOnce(1000);
}
 else {
Camera.WorldPoint wP=camera().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
if (wP.found) {
pupVec=wP.point;
pupFlag=true;
timerFx.runOnce(1000);
}
}
break;
case ZOOM_TO_FIT:
pinhole().interpolateToFitScene();
break;
case ARP_FROM_PIXEL:
if (setArcballReferencePointFromPixel(new Point(cursorX,cursorY))) {
arpFlag=true;
timerFx.runOnce(1000);
}
break;
case RESET_ARP:
pinhole().setArcballReferencePoint(new Vec(0,0,0));
arpFlag=true;
timerFx.runOnce(1000);
break;
case CENTER_FRAME:
break;
case CENTER_SCENE:
pinhole().centerScene();
break;
case ALIGN_FRAME:
break;
case ALIGN_CAMERA:
pinhole().frame().alignWithFrame(null,true);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}","/** 
 * Internal method. Handles the different global keyboard actions.
 */
@Override public void performInteraction(THEvent event){
  if (!(event instanceof GenericClickEvent) && !(event instanceof GenericKeyboardEvent))   return;
  Actionable<DLAction> a=null;
  if (event instanceof GenericClickEvent<?>)   a=(DOF_0Action)((GenericClickEvent<?>)event).getAction();
  if (event instanceof GenericKeyboardEvent<?>)   a=(DOF_0Action)((GenericKeyboardEvent<?>)event).getAction();
  if (a == null)   return;
  DLAction id=a.action();
  if (!id.is2D() && this.is2D())   return;
  Vec trans;
switch (id) {
case DRAW_AXIS:
    toggleAxisIsDrawn();
  break;
case DRAW_GRID:
toggleGridIsDrawn();
break;
case CAMERA_PROFILE:
break;
case CAMERA_TYPE:
toggleCameraType();
break;
case CAMERA_KIND:
toggleCameraKind();
break;
case ANIMATION:
toggleAnimation();
break;
case GLOBAL_HELP:
displayGlobalHelp();
break;
case CURRENT_CAMERA_PROFILE_HELP:
displayCurrentCameraProfileHelp();
break;
case EDIT_CAMERA_PATH:
toggleCameraPathsAreDrawn();
break;
case FOCUS_INTERACTIVE_FRAME:
break;
case DRAW_FRAME_SELECTION_HINT:
toggleFrameSelectionHintIsDrawn();
break;
case CONSTRAIN_FRAME:
break;
case INTERPOLATE_TO_ZOOM_ON_PIXEL:
if (this.is3D()) {
Camera.WorldPoint wP=camera().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
if (wP.found) {
pupVec=wP.point;
pupFlag=true;
timerFx.runOnce(1000);
}
}
 else {
viewWindow().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
pupVec=viewWindow().unprojectedCoordinatesOf(new Vec((float)cursorX,(float)cursorY,0.5f));
pupFlag=true;
timerFx.runOnce(1000);
}
break;
case INTERPOLATE_TO_FIT_SCENE:
pinhole().interpolateToFitScene();
break;
case SHOW_ALL:
showAll();
break;
case MOVE_CAMERA_LEFT:
trans=new Vec(-10.0f * pinhole().flySpeed(),0.0f,0.0f);
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(pinhole().frame().inverseTransformOf(trans));
break;
case MOVE_CAMERA_RIGHT:
trans=new Vec(10.0f * pinhole().flySpeed(),0.0f,0.0f);
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(pinhole().frame().inverseTransformOf(trans));
break;
case MOVE_CAMERA_UP:
trans=pinhole().frame().inverseTransformOf(new Vec(0.0f,isRightHanded() ? 10.0f : -10.0f * pinhole().flySpeed(),0.0f));
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(trans);
break;
case MOVE_CAMERA_DOWN:
trans=pinhole().frame().inverseTransformOf(new Vec(0.0f,isRightHanded() ? -10.0f : 10.0f * pinhole().flySpeed(),0.0f));
if (this.is3D()) trans.div(camera().frame().magnitude());
pinhole().frame().translate(trans);
break;
case INCREASE_ROTATION_SENSITIVITY:
pinhole().setRotationSensitivity(pinhole().rotationSensitivity() * 1.2f);
break;
case DECREASE_ROTATION_SENSITIVITY:
pinhole().setRotationSensitivity(pinhole().rotationSensitivity() / 1.2f);
break;
case INCREASE_CAMERA_FLY_SPEED:
((Camera)pinhole()).setFlySpeed(((Camera)pinhole()).flySpeed() * 1.2f);
break;
case DECREASE_CAMERA_FLY_SPEED:
((Camera)pinhole()).setFlySpeed(((Camera)pinhole()).flySpeed() / 1.2f);
break;
case INCREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() * 1.2f);
break;
case DECREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() / 1.2f);
break;
case INCREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() + PI / 64);
break;
case DECREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() - PI / 64);
break;
case INCREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() + PI / 64);
break;
case DECREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() - PI / 64);
break;
case INCREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() + radius() / 50);
break;
case DECREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() - radius() / 50);
break;
case ZOOM_ON_PIXEL:
if (this.is2D()) {
viewWindow().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
pupVec=viewWindow().unprojectedCoordinatesOf(new Vec((float)cursorX,(float)cursorY,0.5f));
pupFlag=true;
timerFx.runOnce(1000);
}
 else {
Camera.WorldPoint wP=camera().interpolateToZoomOnPixel(new Point(cursorX,cursorY));
if (wP.found) {
pupVec=wP.point;
pupFlag=true;
timerFx.runOnce(1000);
}
}
break;
case ZOOM_TO_FIT:
pinhole().interpolateToFitScene();
break;
case ARP_FROM_PIXEL:
if (setArcballReferencePointFromPixel(new Point(cursorX,cursorY))) {
arpFlag=true;
timerFx.runOnce(1000);
}
break;
case RESET_ARP:
pinhole().setArcballReferencePoint(new Vec(0,0,0));
arpFlag=true;
timerFx.runOnce(1000);
break;
case CENTER_FRAME:
break;
case CENTER_SCENE:
pinhole().centerScene();
break;
case ALIGN_FRAME:
break;
case ALIGN_CAMERA:
pinhole().frame().alignWithFrame(null,true);
break;
default :
System.out.println(""String_Node_Str"");
break;
}
}",0.9925558312655088
7646,"@Override protected void execAction3D(THMotionEvent e){
  Actionable<DLAction> a=null;
  if (e instanceof DOF1Event)   a=((DOF1Event)e).getAction();
  if (e instanceof DOF2Event)   a=((DOF2Event)e).getAction();
  if (e instanceof DOF3Event)   a=((DOF3Event)e).getAction();
  if (e instanceof DOF6Event)   a=((DOF6Event)e).getAction();
  if (a == null)   return;
  DLAction id=a.action();
  DOF2Event event;
  DOF6Event event6;
  Vec t=new Vec();
  Quat q=new Quat();
switch (id) {
case ZOOM:
{
      float wheelSensitivityCoef=8E-4f;
      float coef=0;
      Vec trans=new Vec();
      if (e instanceof DOF1Event) {
        coef=Math.max(Math.abs((coordinatesOf(scene.camera().arcballReferencePoint())).vec[2] * magnitude().z()),0.2f * scene.camera().sceneRadius());
        trans=new Vec(0.0f,0.0f,coef * ((DOF1Event)e).getX() * -wheelSensitivity()* wheelSensitivityCoef);
      }
 else {
        event=(DOF2Event)e;
        coef=Math.max(Math.abs((coordinatesOf(scene.camera().arcballReferencePoint())).vec[2] * magnitude().z()),0.2f * scene.camera().sceneRadius());
        trans=new Vec(0.0f,0.0f,-coef * ((int)(event.getY() - event.getPrevY())) / scene.camera().screenHeight());
      }
      Vec mag=magnitude();
      trans.div(mag);
      translate(inverseTransformOf(trans));
      break;
    }
case ROTATE:
{
    event=(DOF2Event)e;
    Vec trans=scene.camera().projectedCoordinatesOf(arcballReferencePoint());
    Quat rot=deformedBallQuaternion(event,trans.vec[0],trans.vec[1],scene.camera());
    setSpinningQuaternion(rot);
    startSpinning(event);
    break;
  }
case TRANSLATE:
{
  event=(DOF2Event)e;
  Point delta=new Point(-event.getDX(),scene.isRightHanded() ? -event.getDY() : event.getDY());
  Vec trans=new Vec((int)delta.x,(int)-delta.y,0.0f);
switch (scene.camera().type()) {
case PERSPECTIVE:
    trans.mult(2.0f * (float)Math.tan(scene.camera().fieldOfView() / 2.0f) * Math.abs(coordinatesOf(arcballReferencePoint()).vec[2] * magnitude().z()) / scene.camera().screenHeight());
  break;
case ORTHOGRAPHIC:
float[] wh=scene.camera().getOrthoWidthHeight();
trans.vec[0]*=2.0f * wh[0] / scene.camera().screenWidth();
trans.vec[1]*=2.0f * wh[1] / scene.camera().screenHeight();
break;
}
translate(inverseTransformOf(Vec.mult(trans,translationSensitivity()),false));
break;
}
case GOOGLE_EARTH:
event6=(DOF6Event)e;
float magic=0.01f;
t=Vec.mult(position(),-event6.getZ() * (magic));
translate(t);
q.fromEulerAngles(-event6.getY() * (magic),event6.getX() * (magic),0);
rotateAroundPoint(q,scene.camera().arcballReferencePoint());
q.fromEulerAngles(0,0,event6.yaw());
rotateAroundPoint(q,scene.camera().arcballReferencePoint());
q.fromEulerAngles(-event6.roll(),0,0);
rotate(q);
break;
case NATURAL:
event6=(DOF6Event)e;
translate(localInverseTransformOf(new Vec(event6.getX(),event6.getY(),-event6.getZ()),false));
q.fromEulerAngles(-event6.roll(),-event6.pitch(),event6.yaw());
rotate(q);
break;
default :
break;
}
}","@Override protected void execAction3D(THMotionEvent e){
  Actionable<DLAction> a=null;
  if (e instanceof GenericDOF1Event)   a=(DOF_1Action)((GenericDOF1Event<?>)e).getAction();
  if (e instanceof GenericDOF2Event)   a=(DOF_2Action)((GenericDOF2Event<?>)e).getAction();
  if (e instanceof GenericDOF3Event)   a=(DOF_3Action)((GenericDOF3Event<?>)e).getAction();
  if (e instanceof GenericDOF6Event)   a=(DOF_6Action)((GenericDOF6Event<?>)e).getAction();
  if (a == null)   return;
  DLAction id=a.action();
  GenericDOF2Event<?> event;
  GenericDOF6Event<?> event6;
  Vec t=new Vec();
  Quat q=new Quat();
switch (id) {
case ZOOM:
{
      float wheelSensitivityCoef=8E-4f;
      float coef=0;
      Vec trans=new Vec();
      if (e instanceof GenericDOF1Event) {
        coef=Math.max(Math.abs((coordinatesOf(scene.camera().arcballReferencePoint())).vec[2] * magnitude().z()),0.2f * scene.camera().sceneRadius());
        trans=new Vec(0.0f,0.0f,coef * ((GenericDOF1Event<?>)e).getX() * -wheelSensitivity()* wheelSensitivityCoef);
      }
 else {
        event=(GenericDOF2Event<?>)e;
        coef=Math.max(Math.abs((coordinatesOf(scene.camera().arcballReferencePoint())).vec[2] * magnitude().z()),0.2f * scene.camera().sceneRadius());
        trans=new Vec(0.0f,0.0f,-coef * ((int)(event.getY() - event.getPrevY())) / scene.camera().screenHeight());
      }
      Vec mag=magnitude();
      trans.div(mag);
      translate(inverseTransformOf(trans));
      break;
    }
case ROTATE:
{
    event=(GenericDOF2Event<?>)e;
    Vec trans=scene.camera().projectedCoordinatesOf(arcballReferencePoint());
    Quat rot=deformedBallQuaternion(event,trans.vec[0],trans.vec[1],scene.camera());
    setSpinningQuaternion(rot);
    startSpinning(event);
    break;
  }
case TRANSLATE:
{
  event=(GenericDOF2Event<?>)e;
  Point delta=new Point(-event.getDX(),scene.isRightHanded() ? -event.getDY() : event.getDY());
  Vec trans=new Vec((int)delta.x,(int)-delta.y,0.0f);
switch (scene.camera().type()) {
case PERSPECTIVE:
    trans.mult(2.0f * (float)Math.tan(scene.camera().fieldOfView() / 2.0f) * Math.abs(coordinatesOf(arcballReferencePoint()).vec[2] * magnitude().z()) / scene.camera().screenHeight());
  break;
case ORTHOGRAPHIC:
float[] wh=scene.camera().getOrthoWidthHeight();
trans.vec[0]*=2.0f * wh[0] / scene.camera().screenWidth();
trans.vec[1]*=2.0f * wh[1] / scene.camera().screenHeight();
break;
}
translate(inverseTransformOf(Vec.mult(trans,translationSensitivity()),false));
break;
}
case GOOGLE_EARTH:
event6=(GenericDOF6Event<?>)e;
float magic=0.01f;
t=Vec.mult(position(),-event6.getZ() * (magic));
translate(t);
q.fromEulerAngles(-event6.getY() * (magic),event6.getX() * (magic),0);
rotateAroundPoint(q,scene.camera().arcballReferencePoint());
q.fromEulerAngles(0,0,event6.yaw());
rotateAroundPoint(q,scene.camera().arcballReferencePoint());
q.fromEulerAngles(-event6.roll(),0,0);
rotate(q);
break;
case NATURAL:
event6=(GenericDOF6Event<?>)e;
translate(localInverseTransformOf(new Vec(event6.getX(),event6.getY(),-event6.getZ()),false));
q.fromEulerAngles(-event6.roll(),-event6.pitch(),event6.yaw());
rotate(q);
break;
default :
break;
}
}",0.9613931329061935
7647,"/** 
 * Returns a Quaternion computed according to mouse motion. The Quaternion is computed as composition of two rotations (quaternions): 1. Mouse motion along the screen X Axis rotates the camera along the   {@link #getCADAxis()}. 2. Mouse motion along the screen Y axis rotates the camera along its X axis.
 * @see #getCADAxis()
 */
protected Quat computeCADQuaternion(DOF2Event event,float cx,float cy,Pinhole camera){
  if (!(camera instanceof Camera))   throw new RuntimeException(""String_Node_Str"");
  float x=event.getX();
  float y=event.getY();
  float prevX=event.getPrevX();
  float prevY=event.getPrevY();
  float px=rotationSensitivity() * ((int)prevX - cx) / camera.screenWidth();
  float py=rotationSensitivity() * (scene.isLeftHanded() ? ((int)prevY - cy) : ((cy - (int)prevY))) / camera.screenHeight();
  float dx=rotationSensitivity() * (x - cx) / camera.screenWidth();
  float dy=rotationSensitivity() * (scene.isLeftHanded() ? (y - cy) : (cy - y)) / camera.screenHeight();
  Vec axisX=new Vec(1,0,0);
  Vec world2camAxis=camera.frame().transformOf(worldAxis);
  float angleWorldAxis=rotationSensitivity() * (scene.isLeftHanded() ? (dx - px) : (px - dx));
  float angleX=rotationSensitivity() * (dy - py);
  Quat quatWorld=new Quat(world2camAxis,angleWorldAxis);
  Quat quatX=new Quat(axisX,angleX);
  return Quat.multiply(quatWorld,quatX);
}","/** 
 * Returns a Quaternion computed according to mouse motion. The Quaternion is computed as composition of two rotations (quaternions): 1. Mouse motion along the screen X Axis rotates the camera along the   {@link #getCADAxis()}. 2. Mouse motion along the screen Y axis rotates the camera along its X axis.
 * @see #getCADAxis()
 */
protected Quat computeCADQuaternion(GenericDOF2Event<?> event,float cx,float cy,Pinhole camera){
  if (!(camera instanceof Camera))   throw new RuntimeException(""String_Node_Str"");
  float x=event.getX();
  float y=event.getY();
  float prevX=event.getPrevX();
  float prevY=event.getPrevY();
  float px=rotationSensitivity() * ((int)prevX - cx) / camera.screenWidth();
  float py=rotationSensitivity() * (scene.isLeftHanded() ? ((int)prevY - cy) : ((cy - (int)prevY))) / camera.screenHeight();
  float dx=rotationSensitivity() * (x - cx) / camera.screenWidth();
  float dy=rotationSensitivity() * (scene.isLeftHanded() ? (y - cy) : (cy - y)) / camera.screenHeight();
  Vec axisX=new Vec(1,0,0);
  Vec world2camAxis=camera.frame().transformOf(worldAxis);
  float angleWorldAxis=rotationSensitivity() * (scene.isLeftHanded() ? (dx - px) : (px - dx));
  float angleX=rotationSensitivity() * (dy - py);
  Quat quatWorld=new Quat(world2camAxis,angleWorldAxis);
  Quat quatX=new Quat(axisX,angleX);
  return Quat.multiply(quatWorld,quatX);
}",0.9963423555230432
7648,"/** 
 * Returns a Quaternion that is a rotation around current camera Y, proportional to the horizontal mouse position.
 */
protected final Quat turnQuaternion(DOF1Event event,Camera camera){
  float x=event.getX();
  float prevX=event.getPrevX();
  return new Quat(new Vec(0.0f,1.0f,0.0f),rotationSensitivity() * ((int)prevX - x) / camera.screenWidth());
}","/** 
 * Returns a Quaternion that is a rotation around current camera Y, proportional to the horizontal mouse position.
 */
protected final Quat turnQuaternion(GenericDOF1Event<?> event,Camera camera){
  float x=event.getX();
  float prevX=event.getPrevX();
  return new Quat(new Vec(0.0f,1.0f,0.0f),rotationSensitivity() * ((int)prevX - x) / camera.screenWidth());
}",0.9861878453038674
7649,"/** 
 * Returns a Quaternion that is the composition of two rotations, inferred from the mouse pitch (X axis) and yaw (  {@link #flyUpVector()} axis).
 */
protected final Quat pitchYawQuaternion(DOF2Event event,Camera camera){
  float x=event.getX();
  float y=event.getY();
  float prevX=event.getPrevX();
  float prevY=event.getPrevY();
  int deltaY;
  if (scene.isRightHanded())   deltaY=(int)(prevY - y);
 else   deltaY=(int)(y - prevY);
  Quat rotX=new Quat(new Vec(1.0f,0.0f,0.0f),rotationSensitivity() * deltaY / camera.screenHeight());
  Quat rotY=new Quat(transformOf(flyUpVector(),false),rotationSensitivity() * ((int)prevX - x) / camera.screenWidth());
  return Quat.multiply(rotY,rotX);
}","/** 
 * Returns a Quaternion that is the composition of two rotations, inferred from the mouse pitch (X axis) and yaw (  {@link #flyUpVector()} axis).
 */
protected final Quat pitchYawQuaternion(GenericDOF2Event<?> event,Camera camera){
  float x=event.getX();
  float y=event.getY();
  float prevX=event.getPrevX();
  float prevY=event.getPrevY();
  int deltaY;
  if (scene.isRightHanded())   deltaY=(int)(prevY - y);
 else   deltaY=(int)(y - prevY);
  Quat rotX=new Quat(new Vec(1.0f,0.0f,0.0f),rotationSensitivity() * deltaY / camera.screenHeight());
  Quat rotY=new Quat(transformOf(flyUpVector(),false),rotationSensitivity() * ((int)prevX - x) / camera.screenWidth());
  return Quat.multiply(rotY,rotX);
}",0.9929078014184396
7650,"protected void execAction3D(MotionEvent<?> e){
  DLAction a=e.getAction();
  DOF2Event event;
  float delta=0;
switch (a) {
case ZOOM:
{
      if (e instanceof DOF1Event) {
        delta=((DOF1Event)e).getX() * wheelSensitivity();
      }
 else {
        event=(DOF2Event)e;
        delta=event.getDY();
        ;
      }
      if (delta >= 0)       scale(1 + Math.abs(delta) / (float)scene.height());
 else       inverseScale(1 + Math.abs(delta) / (float)scene.height());
      break;
    }
case ROTATE:
{
    event=(DOF2Event)e;
    DLVector trans=scene.camera().projectedCoordinatesOf(position());
    Quaternion rot=deformedBallQuaternion(event,trans.x(),trans.y(),scene.camera());
    rot=iFrameQuaternion(rot,scene.camera());
    setSpinningQuaternion(rot);
    startSpinning(event);
    break;
  }
case TRANSLATE:
{
  event=(DOF2Event)e;
  DLVector trans=new DLVector(event.getDX(),scene.isRightHanded() ? -event.getDY() : event.getDY(),0.0f);
switch (scene.camera().type()) {
case PERSPECTIVE:
    trans.mult(2.0f * (float)Math.tan(scene.camera().fieldOfView() / 2.0f) * Math.abs((scene.camera().frame().coordinatesOf(position())).vec[2] * magnitude().z()) / scene.camera().screenHeight());
  break;
case ORTHOGRAPHIC:
{
  float[] wh=scene.camera().getOrthoWidthHeight();
  trans.vec[0]*=2.0 * wh[0] / scene.camera().screenWidth();
  trans.vec[1]*=2.0 * wh[1] / scene.camera().screenHeight();
  break;
}
}
trans=scene.camera().frame().orientation().rotate(DLVector.mult(trans,translationSensitivity()));
if (referenceFrame() != null) trans=referenceFrame().transformOf(trans);
translate(trans);
break;
}
case NATURAL:
{
DOF6Event event6=(DOF6Event)e;
DLVector t=new DLVector();
Quaternion q=new Quaternion();
t=scene.camera().frame().inverseTransformOf(new DLVector(event6.getX(),event6.getY(),-event6.getZ()),false);
if (referenceFrame() != null) t=referenceFrame().transformOf(t,false);
translate(t);
t=scene.camera().projectedCoordinatesOf(position());
q.fromEulerAngles(event6.roll(),event6.pitch(),-event6.yaw());
t.set(-q.x(),-q.y(),-q.z());
t=scene.camera().frame().orientation().rotate(t);
t=transformOf(t,false);
q.x(t.x());
q.y(t.y());
q.z(t.z());
rotate(q);
break;
}
default :
break;
}
}","protected void execAction3D(MotionEvent<?> e){
  DLAction a=e.getAction();
  DOF2Event event;
  float delta=0;
switch (a) {
case ZOOM:
{
      if (e instanceof DOF1Event) {
        delta=((DOF1Event)e).getX() * wheelSensitivity();
      }
 else {
        event=(DOF2Event)e;
        delta=event.getDY();
        ;
      }
      if (delta >= 0)       scale(1 + Math.abs(delta) / (float)scene.height());
 else       inverseScale(1 + Math.abs(delta) / (float)scene.height());
      break;
    }
case ROTATE:
{
    event=(DOF2Event)e;
    DLVector trans=scene.camera().projectedCoordinatesOf(position());
    Quaternion rot=deformedBallQuaternion(event,trans.x(),trans.y(),scene.camera());
    rot=iFrameQuaternion(rot,scene.camera());
    setSpinningQuaternion(rot);
    startSpinning(event);
    break;
  }
case TRANSLATE:
{
  event=(DOF2Event)e;
  DLVector trans=new DLVector(event.getDX(),scene.isRightHanded() ? -event.getDY() : event.getDY(),0.0f);
switch (scene.camera().type()) {
case PERSPECTIVE:
    trans.mult(2.0f * (float)Math.tan(scene.camera().fieldOfView() / 2.0f) * Math.abs((scene.camera().frame().coordinatesOf(position())).vec[2] * scene.camera().frame().magnitude().z()) / scene.camera().screenHeight());
  break;
case ORTHOGRAPHIC:
{
  float[] wh=scene.camera().getOrthoWidthHeight();
  trans.vec[0]*=2.0 * wh[0] / scene.camera().screenWidth();
  trans.vec[1]*=2.0 * wh[1] / scene.camera().screenHeight();
  break;
}
}
trans=scene.camera().frame().orientation().rotate(DLVector.mult(trans,translationSensitivity()));
if (referenceFrame() != null) trans=referenceFrame().transformOf(trans);
translate(trans);
break;
}
case NATURAL:
{
DOF6Event event6=(DOF6Event)e;
DLVector t=new DLVector();
Quaternion q=new Quaternion();
t=scene.camera().frame().inverseTransformOf(new DLVector(event6.getX(),event6.getY(),-event6.getZ()),false);
if (referenceFrame() != null) t=referenceFrame().transformOf(t,false);
translate(t);
t=scene.camera().projectedCoordinatesOf(position());
q.fromEulerAngles(event6.roll(),event6.pitch(),-event6.yaw());
t.set(-q.x(),-q.y(),-q.z());
t=scene.camera().frame().orientation().rotate(t);
t=transformOf(t,false);
q.x(t.x());
q.y(t.y());
q.z(t.z());
rotate(q);
break;
}
default :
break;
}
}",0.9948139797068772
7651,"protected void modified(){
  kernel().modified();
}","/** 
 * Resets the cache of all KeyFrameInterpolators' associated with this Frame.
 */
protected void modified(){
  if (VFrame.this instanceof InteractiveCameraFrame)   ((InteractiveCameraFrame)VFrame.this).pinhole().lastFrameUpdate=((InteractiveCameraFrame)VFrame.this).scene.frameCount();
  Iterator<KeyFrameInterpolator> it=list.iterator();
  while (it.hasNext()) {
    it.next().invalidateValues();
  }
}",0.1568627450980392
7652,"/** 
 * Internal method. Handles the different camera keyboard actions.
 */
protected void handleCameraKeyboardAction(CameraKeyboardAction id,Point p){
switch (id) {
case INTERPOLATE_TO_ZOOM_ON_PIXEL:
    if (Camera.class == camera().getClass())     System.out.println(""String_Node_Str"" + ""String_Node_Str"");
 else {
      Camera.WorldPoint wP=interpolateToZoomOnPixel(p);
      if (wP.found) {
        pupVec=wP.point;
        pupFlag=true;
        if (timerFx.timer() != null)         timerFx.timer().runTimerOnce(1000);
      }
    }
  break;
case INTERPOLATE_TO_FIT_SCENE:
camera().interpolateToFitScene();
break;
case SHOW_ALL:
showAll();
break;
case MOVE_CAMERA_LEFT:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(-10.0f * camera().flySpeed(),0.0f,0.0f)));
break;
case MOVE_CAMERA_RIGHT:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(10.0f * camera().flySpeed(),0.0f,0.0f)));
break;
case MOVE_CAMERA_UP:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(0.0f,-10.0f * camera().flySpeed(),0.0f)));
break;
case MOVE_CAMERA_DOWN:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(0.0f,10.0f * camera().flySpeed(),0.0f)));
break;
case INCREASE_ROTATION_SENSITIVITY:
camera().setRotationSensitivity(camera().rotationSensitivity() * 1.2f);
break;
case DECREASE_ROTATION_SENSITIVITY:
camera().setRotationSensitivity(camera().rotationSensitivity() / 1.2f);
break;
case INCREASE_CAMERA_FLY_SPEED:
camera().setFlySpeed(camera().flySpeed() * 1.2f);
break;
case DECREASE_CAMERA_FLY_SPEED:
camera().setFlySpeed(camera().flySpeed() / 1.2f);
break;
case INCREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() * 1.2f);
break;
case DECREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() / 1.2f);
break;
case INCREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() + PApplet.PI / 64);
break;
case DECREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() - PApplet.PI / 64);
break;
case INCREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() + PApplet.PI / 64);
break;
case DECREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() - PApplet.PI / 64);
break;
case INCREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() + radius() / 50);
break;
case DECREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() - radius() / 50);
break;
}
}","/** 
 * Internal method. Handles the different camera keyboard actions.
 */
protected void handleCameraKeyboardAction(CameraKeyboardAction id,Point p){
switch (id) {
case INTERPOLATE_TO_ZOOM_ON_PIXEL:
    if (Camera.class == camera().getClass())     System.out.println(""String_Node_Str"" + ""String_Node_Str"");
 else {
      Camera.WorldPoint wP=interpolateToZoomOnPixel(p);
      if (wP.found) {
        pupVec=wP.point;
        pupFlag=true;
        if (timerFx.timer() != null)         timerFx.timer().runTimerOnce(1000);
      }
    }
  break;
case INTERPOLATE_TO_FIT_SCENE:
camera().interpolateToFitScene();
break;
case SHOW_ALL:
showAll();
break;
case MOVE_CAMERA_LEFT:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(-10.0f * camera().flySpeed(),0.0f,0.0f)));
break;
case MOVE_CAMERA_RIGHT:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(10.0f * camera().flySpeed(),0.0f,0.0f)));
break;
case MOVE_CAMERA_UP:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(0.0f,-10.0f * camera().flySpeed(),0.0f)));
break;
case MOVE_CAMERA_DOWN:
camera().frame().translate(camera().frame().inverseTransformOf(new Vector3D(0.0f,10.0f * camera().flySpeed(),0.0f)));
break;
case INCREASE_ROTATION_SENSITIVITY:
camera().setRotationSensitivity(camera().rotationSensitivity() * 1.2f);
break;
case DECREASE_ROTATION_SENSITIVITY:
camera().setRotationSensitivity(camera().rotationSensitivity() / 1.2f);
break;
case INCREASE_CAMERA_FLY_SPEED:
camera().setFlySpeed(camera().flySpeed() * 1.2f);
break;
case DECREASE_CAMERA_FLY_SPEED:
camera().setFlySpeed(camera().flySpeed() / 1.2f);
break;
case INCREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() * 1.2f);
break;
case DECREASE_AVATAR_FLY_SPEED:
if (avatar() != null) if (avatarIsInteractiveDrivableFrame) ((InteractiveDrivableFrame)avatar()).setFlySpeed(((InteractiveDrivableFrame)avatar()).flySpeed() / 1.2f);
break;
case INCREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() + (float)Math.PI / 64);
break;
case DECREASE_AZYMUTH:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setAzimuth(((InteractiveAvatarFrame)avatar()).azimuth() - (float)Math.PI / 64);
break;
case INCREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() + (float)Math.PI / 64);
break;
case DECREASE_INCLINATION:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setInclination(((InteractiveAvatarFrame)avatar()).inclination() - (float)Math.PI / 64);
break;
case INCREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() + radius() / 50);
break;
case DECREASE_TRACKING_DISTANCE:
if (avatar() != null) if (avatarIsInteractiveAvatarFrame) ((InteractiveAvatarFrame)avatar()).setTrackingDistance(((InteractiveAvatarFrame)avatar()).trackingDistance() - radius() / 50);
break;
}
}",0.9892312294346396
7653,"/** 
 * Internal method. Handles the different mouse click actions.
 */
protected void handleClickAction(ClickAction action,Point p){
switch (action) {
case NO_CLICK_ACTION:
    break;
case ZOOM_ON_PIXEL:
  if (Camera.class == camera().getClass())   System.out.println(""String_Node_Str"" + ""String_Node_Str"");
 else {
    Camera.WorldPoint wP=interpolateToZoomOnPixel(p);
    if (wP.found) {
      pupVec=wP.point;
      pupFlag=true;
      if (timerFx.timer() != null)       timerFx.timer().runTimerOnce(1000);
    }
  }
break;
case ZOOM_TO_FIT:
camera().interpolateToFitScene();
break;
case ARP_FROM_PIXEL:
if (Camera.class == camera().getClass()) PApplet.println(""String_Node_Str"" + ""String_Node_Str"");
 else if (setArcballReferencePointFromPixel(p)) {
arpFlag=true;
if (timerFx.timer() != null) timerFx.timer().runTimerOnce(1000);
}
break;
case RESET_ARP:
camera().setArcballReferencePoint(new Vector3D(0,0,0));
arpFlag=true;
if (timerFx.timer() != null) timerFx.timer().runTimerOnce(1000);
break;
case CENTER_FRAME:
if (interactiveFrame() != null) interactiveFrame().projectOnLine(camera().position(),camera().viewDirection());
break;
case CENTER_SCENE:
camera().centerScene();
break;
case SHOW_ALL:
camera().showEntireScene();
break;
case ALIGN_FRAME:
if (interactiveFrame() != null) interactiveFrame().alignWithFrame(camera().frame());
break;
case ALIGN_CAMERA:
camera().frame().alignWithFrame(null,true);
break;
}
}","/** 
 * Internal method. Handles the different mouse click actions.
 */
protected void handleClickAction(ClickAction action,Point p){
switch (action) {
case NO_CLICK_ACTION:
    break;
case ZOOM_ON_PIXEL:
  if (Camera.class == camera().getClass())   System.out.println(""String_Node_Str"" + ""String_Node_Str"");
 else {
    Camera.WorldPoint wP=interpolateToZoomOnPixel(p);
    if (wP.found) {
      pupVec=wP.point;
      pupFlag=true;
      if (timerFx.timer() != null)       timerFx.timer().runTimerOnce(1000);
    }
  }
break;
case ZOOM_TO_FIT:
camera().interpolateToFitScene();
break;
case ARP_FROM_PIXEL:
if (Camera.class == camera().getClass()) System.out.println(""String_Node_Str"" + ""String_Node_Str"");
 else if (setArcballReferencePointFromPixel(p)) {
arpFlag=true;
if (timerFx.timer() != null) timerFx.timer().runTimerOnce(1000);
}
break;
case RESET_ARP:
camera().setArcballReferencePoint(new Vector3D(0,0,0));
arpFlag=true;
if (timerFx.timer() != null) timerFx.timer().runTimerOnce(1000);
break;
case CENTER_FRAME:
if (interactiveFrame() != null) interactiveFrame().projectOnLine(camera().position(),camera().viewDirection());
break;
case CENTER_SCENE:
camera().centerScene();
break;
case SHOW_ALL:
camera().showEntireScene();
break;
case ALIGN_FRAME:
if (interactiveFrame() != null) interactiveFrame().alignWithFrame(camera().frame());
break;
case ALIGN_CAMERA:
camera().frame().alignWithFrame(null,true);
break;
}
}",0.9947312961011592
7654,"/** 
 * Unselect the currently selected POI for a given player.
 * @param player
 */
public void unselectPoi(Player player){
  this._selectedPOIs.remove(player);
  PointsOfInterest.notifyListeners(PoiEvent.unselectEvent(player));
}","/** 
 * Unselect the currently selected POI for a given player if it matches the given id.
 * @param player
 */
public void unselectPoi(Player player,int poiID){
  if (_selectedPOIs.containsKey(player) && _selectedPOIs.get(player).getId() == poiID) {
    unselectPoi(player);
  }
}",0.6015625
7655,"/** 
 * EventHandler for player putting a compass in their hand.
 */
@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onEquipCompass(PlayerItemHeldEvent event){
  try {
    Player player=event.getPlayer();
    if (player.getInventory().getItem(event.getNewSlot()).getType().equals(Material.COMPASS)) {
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
 catch (  Exception ignore) {
  }
}","/** 
 * EventHandler for player putting a compass in their hand.
 */
@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onEquipCompass(PlayerItemHeldEvent event){
  try {
    Player player=event.getPlayer();
    if (player.hasPermission(""String_Node_Str"") && player.getInventory().getItem(event.getNewSlot()).getType().equals(Material.COMPASS)) {
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GOLD+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    }
  }
 catch (  Exception ignore) {
  }
}",0.8585526315789473
7656,"/** 
 * EventHandler for left-clicking a compass.
 */
@EventHandler(priority=EventPriority.HIGHEST) public void onCompassUse(PlayerInteractEvent event){
  Action action=event.getAction();
  if (action == Action.RIGHT_CLICK_BLOCK) {
    Poi poi=_poiManager.getPoiAt(event.getClickedBlock().getLocation());
    if (poi != null) {
      event.getPlayer().sendMessage(""String_Node_Str"" + poi.getName() + ""String_Node_Str""+ poi.getOwner()+ ""String_Node_Str"");
      return;
    }
  }
  if (event.hasItem() && event.getItem().getType() == Material.COMPASS && (action == Action.LEFT_CLICK_AIR || action == Action.RIGHT_CLICK_AIR)) {
    final Player player=event.getPlayer();
    if (_pendingSummaries.containsKey(player)) {
      BukkitTask pendingSummary=_pendingSummaries.get(player);
      pendingSummary.cancel();
      _pendingSummaries.remove(player);
      event.setUseInteractedBlock(Event.Result.DENY);
      Poi poi=_findNextPoi(player);
      if (poi == null) {
        _poiManager.unselectPoi(player);
      }
 else {
        _poiManager.selectPOI(poi,player);
      }
      this._setCompass(player);
    }
 else {
      _pendingSummaries.put(player,player.getServer().getScheduler().runTaskLater(_plugin,new Runnable(){
        @Override public void run(){
          Poi summaryPoi=_poiManager.getSelectedPoi(player);
          if (summaryPoi == null && player.getCompassTarget() != null) {
            player.sendMessage(""String_Node_Str"");
            player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            player.sendMessage(PointsOfInterest.getDirections(player.getLocation().toVector(),player.getCompassTarget().toVector(),ChatColor.WHITE));
          }
 else {
            player.sendMessage(""String_Node_Str"");
            player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            SummaryAction.sendSummary(player,summaryPoi);
          }
          _pendingSummaries.remove(player);
        }
      }
,10));
    }
  }
}","/** 
 * EventHandler for left-clicking a compass.
 */
@EventHandler(priority=EventPriority.HIGHEST) public void onCompassUse(PlayerInteractEvent event){
  Action action=event.getAction();
  if (action == Action.RIGHT_CLICK_BLOCK) {
    Poi poi=_poiManager.getPoiAt(event.getClickedBlock().getLocation());
    if (poi != null) {
      event.getPlayer().sendMessage(""String_Node_Str"" + poi.getName() + ""String_Node_Str""+ poi.getOwner()+ ""String_Node_Str"");
      return;
    }
  }
  final Player player=event.getPlayer();
  if (!player.hasPermission(""String_Node_Str"")) {
    return;
  }
  if (event.hasItem() && event.getItem().getType() == Material.COMPASS && action == Action.RIGHT_CLICK_AIR) {
    if (_pendingSummaries.containsKey(player)) {
      BukkitTask pendingSummary=_pendingSummaries.get(player);
      pendingSummary.cancel();
      _pendingSummaries.remove(player);
      event.setUseInteractedBlock(Event.Result.DENY);
      Poi poi=_findNextPoi(player);
      if (poi == null) {
        _poiManager.unselectPoi(player);
      }
 else {
        _poiManager.selectPOI(poi,player);
      }
      this._setCompass(player);
    }
 else {
      _pendingSummaries.put(player,player.getServer().getScheduler().runTaskLater(_plugin,new Runnable(){
        @Override public void run(){
          Poi summaryPoi=_poiManager.getSelectedPoi(player);
          if (summaryPoi == null && player.getCompassTarget() != null) {
            player.sendMessage(""String_Node_Str"");
            player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            player.sendMessage(PointsOfInterest.getDirections(player.getLocation().toVector(),player.getCompassTarget().toVector(),ChatColor.WHITE));
          }
 else {
            player.sendMessage(""String_Node_Str"");
            player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
            SummaryAction.sendSummary(player,summaryPoi);
          }
          _pendingSummaries.remove(player);
        }
      }
,10));
    }
  }
}",0.9505953889029642
7657,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onSignBreak(BlockBreakEvent event){
  if (Config.isWorldSupported(event.getBlock().getWorld().getName())) {
    Poi poi=_isPoiSign(event.getBlock());
    if (poi == null) {
      if (_hasAttachedPoiSign(event.getBlock()) != null) {
        event.setCancelled(true);
      }
      return;
    }
    Player player=event.getPlayer();
    if (poi.getOwner().equals(event.getPlayer().getName())) {
      try {
        if (!player.hasPermission(""String_Node_Str"")) {
          player.sendMessage(""String_Node_Str"");
          event.setCancelled(true);
          return;
        }
        _poiManager.removePOI(poi.getId(),poi.getName());
        event.getPlayer().sendMessage(""String_Node_Str"");
      }
 catch (      PoiException e) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      event.setCancelled(true);
    }
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onSignBreak(BlockBreakEvent event){
  if (Config.isWorldSupported(event.getBlock().getWorld().getName())) {
    Poi poi=_isPoiSign(event.getBlock());
    if (poi == null) {
      if (_hasAttachedPoiSign(event.getBlock()) != null) {
        event.setCancelled(true);
      }
      return;
    }
    Player player=event.getPlayer();
    if (poi.getOwner().equals(event.getPlayer().getName())) {
      try {
        if (!player.hasPermission(""String_Node_Str"")) {
          player.sendMessage(""String_Node_Str"");
          event.setCancelled(true);
          return;
        }
        _poiManager.removePOI(poi.getId(),poi.getName());
        _poiManager.unselectPoi(player,poi.getId());
        event.getPlayer().sendMessage(""String_Node_Str"");
      }
 catch (      PoiException e) {
        event.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      event.setCancelled(true);
    }
  }
}",0.9728065674704977
7658,"/** 
 * Maximum number of search results when a player does an area search.
 * @return
 */
public static int getMaxSearchResults(){
  return _maxSearchResults;
}","/** 
 * Maximum number of search results when a player does an area search.
 * @return
 */
public static int getMaxSearchResults(){
  return _instance._maxSearchResults;
}",0.9698795180722892
7659,"/** 
 * Dictates minimum distance between POIs.  
 * @return
 */
public static int getMinPoiGap(){
  return _minPoiGap;
}","/** 
 * Dictates minimum distance between POIs.  
 * @return
 */
public static int getMinPoiGap(){
  return _instance._minPoiGap;
}",0.9603174603174603
7660,"/** 
 * Reloads the config from the file.
 * @return
 */
public static boolean reload(){
  try {
    return Config.load(Config._dataFolder,Config._log);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"");
    ex.printStackTrace();
    return false;
  }
}","/** 
 * Reloads the config from the file.
 * @return
 */
public static boolean reload(){
  if (_instance == null) {
    _log.severe(""String_Node_Str"");
    return false;
  }
  Config previous=_instance;
  if (!_load(_dataFolder,_log)) {
    _log.severe(""String_Node_Str"");
    _instance=previous;
    return false;
  }
  return true;
}",0.5016393442622951
7661,"/** 
 * Maximum number of POIs a player can create in each world.
 * @return
 */
public static int getMaxPlayerPoiPerWorld(){
  return _maxPlayerPoiPerWorld;
}","/** 
 * Maximum number of POIs a player can create in each world.
 * @return
 */
public static int getMaxPlayerPoiPerWorld(){
  return _instance._maxPlayerPoiPerWorld;
}",0.9695121951219512
7662,"/** 
 * Loads the configuration file located in the specified data folder.
 * @param dataFolder Where to look for the config file
 * @param log Where to log problems - stack traces go to standard error out.
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public static boolean load(File dataFolder,Logger log){
  DumperOptions options=new DumperOptions();
  options.setDefaultFlowStyle(FlowStyle.BLOCK);
  options.setDefaultScalarStyle(ScalarStyle.PLAIN);
  Yaml yaml=new Yaml(options);
  File dataFile=new File(dataFolder,""String_Node_Str"");
  if (!dataFile.exists()) {
    try {
      dataFile.createNewFile();
    }
 catch (    IOException e) {
      log.severe(""String_Node_Str"");
      e.printStackTrace();
      return false;
    }
  }
 else {
    FileInputStream input=null;
    try {
      input=new FileInputStream(dataFile);
      if (!_processConfigMap((Map<String,Object>)yaml.load(input),log)) {
        return false;
      }
    }
 catch (    Exception e) {
      log.severe(""String_Node_Str"");
      e.printStackTrace();
      return false;
    }
 finally {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  FileWriter writer=null;
  InputStream templateInput=(new Config()).getClass().getResourceAsStream(""String_Node_Str"");
  String output;
  try {
    InputStreamReader reader=new InputStreamReader(templateInput,""String_Node_Str"");
    char[] buffer=new char[1024];
    Integer read=0;
    StringBuilder stringBuilder=new StringBuilder();
    do {
      read=reader.read(buffer,0,buffer.length);
      if (read > 0) {
        stringBuilder.append(buffer,0,read);
      }
    }
 while (read >= 0);
    HashMap<String,Object> configMap=new HashMap<String,Object>();
    configMap.put(""String_Node_Str"",Config._distanceThreshold);
    output=stringBuilder.toString().replace(""String_Node_Str"",yaml.dump(configMap));
    configMap.clear();
    configMap.put(""String_Node_Str"",Config._minPoiGap);
    output=output.replace(""String_Node_Str"",yaml.dump(configMap));
    configMap.clear();
    configMap.put(""String_Node_Str"",Config._maxSearchResults);
    output=output.replace(""String_Node_Str"",yaml.dump(configMap));
    configMap.clear();
    configMap.put(""String_Node_Str"",Config._maxPlayerPoiPerWorld);
    output=output.replace(""String_Node_Str"",yaml.dump(configMap));
    configMap.clear();
    configMap.put(""String_Node_Str"",Config._worldBlackList);
    output=output.replace(""String_Node_Str"",yaml.dump(configMap));
    output=output.replace(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    writer=new FileWriter(dataFile,false);
    writer.write(output);
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    try {
      writer.close();
    }
 catch (    Exception e) {
    }
  }
  Config._dataFolder=dataFolder;
  Config._log=log;
  return true;
}","/** 
 * Loads the configuration file located in the specified data folder.
 * @param dataFolder Where to look for the config file
 * @param log Where to log problems - stack traces go to standard error out.
 * @return
 */
public static boolean load(File dataFolder,Logger log){
  if (!_load(dataFolder,log)) {
    _instance=new Config();
    return false;
  }
  return true;
}",0.1826539993870671
7663,"/** 
 * List of worlds in which POIs are not supported.
 */
public static boolean isWorldSupported(String world){
  return _worldBlackList == null || !_worldBlackList.contains(world.toLowerCase());
}","/** 
 * List of worlds in which POIs are not supported.
 */
public static boolean isWorldSupported(String world){
  return _instance._worldBlackList == null || !_instance._worldBlackList.contains(world.toLowerCase());
}",0.9521531100478468
7664,"/** 
 * Dictates how far to search and maximum distance a player can be from a POI and still get directions
 * @return 
 */
public static int getDistanceThreshold(){
  return _distanceThreshold;
}","/** 
 * Dictates how far to search and maximum distance a player can be from a POI and still get directions
 * @return 
 */
public static int getDistanceThreshold(){
  return _instance._distanceThreshold;
}",0.9751243781094528
7665,"/** 
 * Receives the entire configuration in as a map and populates properties as appropriate.
 * @param map The configuration values parsed from the config file.
 * @param log Where to log problems - stack traces go to standard error out.
 * @return
 */
private static boolean _processConfigMap(Map<String,Object> map,Logger log){
  if (map == null) {
    return true;
  }
  boolean success=true;
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _restrictAddToOps=(Boolean)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _distanceThreshold=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _minPoiGap=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _maxSearchResults=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _maxPlayerPoiPerWorld=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  _worldBlackList=new ArrayList<String>();
  if (map.containsKey(""String_Node_Str"")) {
    try {
      @SuppressWarnings(""String_Node_Str"") ArrayList<String> tmp=(ArrayList<String>)map.get(""String_Node_Str"");
      if (tmp != null) {
        for (        String world : tmp) {
          _worldBlackList.add(world.toLowerCase());
        }
      }
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  return success;
}","/** 
 * Receives the entire configuration in as a map and populates properties as appropriate.
 * @param map The configuration values parsed from the config file.
 * @param log Where to log problems - stack traces go to standard error out.
 * @return
 */
private static boolean _processConfigMap(Map<String,Object> map,Logger log){
  if (map == null) {
    return true;
  }
  boolean success=true;
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _instance._distanceThreshold=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _instance._minPoiGap=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _instance._maxSearchResults=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  if (map.containsKey(""String_Node_Str"")) {
    try {
      _instance._maxPlayerPoiPerWorld=(Integer)map.get(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  _instance._worldBlackList=new ArrayList<String>();
  if (map.containsKey(""String_Node_Str"")) {
    try {
      @SuppressWarnings(""String_Node_Str"") ArrayList<String> tmp=(ArrayList<String>)map.get(""String_Node_Str"");
      if (tmp != null) {
        for (        String world : tmp) {
          _instance._worldBlackList.add(world.toLowerCase());
        }
      }
    }
 catch (    Exception ex) {
      log.severe(""String_Node_Str"");
      success=false;
    }
  }
  return success;
}",0.7463245121625234
7666,"/** 
 * Returns a list of messages which form the general help.
 * @return
 */
private ArrayList<String> _generalHelp(boolean isOp){
  ArrayList<String> messages=new ArrayList<String>();
  ArrayList<String> alternation=new ArrayList<String>();
  alternation.add(""String_Node_Str"");
  alternation.add(""String_Node_Str"");
  alternation.add(""String_Node_Str"");
  messages.add(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ this._required(""String_Node_Str"")+ this._optional(""String_Node_Str"")+ this._alternation(alternation,true));
  messages.add(""String_Node_Str"");
  messages.add(this._select(true).get(0));
  messages.add(this._summary(true).get(0));
  if (isOp || !Config.isAddRestrictedToOps()) {
    messages.add(this._add(true).get(0));
  }
  messages.add(this._remove(true).get(0));
  messages.add(this._search(true).get(0));
  messages.add(this._list(true).get(0));
  messages.add(this._page(true).get(0));
  messages.add(this._action(PoiCommand.ACTION_HELP) + this._optional(""String_Node_Str"") + this._shortDescription(""String_Node_Str""));
  return messages;
}","/** 
 * Returns a list of messages which form the general help.
 * @return
 */
private ArrayList<String> _generalHelp(boolean isOp){
  ArrayList<String> messages=new ArrayList<String>();
  ArrayList<String> alternation=new ArrayList<String>();
  alternation.add(""String_Node_Str"");
  alternation.add(""String_Node_Str"");
  alternation.add(""String_Node_Str"");
  messages.add(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ this._required(""String_Node_Str"")+ this._optional(""String_Node_Str"")+ this._alternation(alternation,true));
  messages.add(""String_Node_Str"");
  messages.add(this._select(true).get(0));
  messages.add(this._summary(true).get(0));
  messages.add(this._add(true).get(0));
  messages.add(this._remove(true).get(0));
  messages.add(this._search(true).get(0));
  messages.add(this._list(true).get(0));
  messages.add(this._page(true).get(0));
  messages.add(this._action(PoiCommand.ACTION_HELP) + this._optional(""String_Node_Str"") + this._shortDescription(""String_Node_Str""));
  return messages;
}",0.9746478873239436
7667,"@Override protected IStatus run(IProgressMonitor monitor){
  waitForWorkspaceLock();
  if (monitor.isCanceled())   return Status.CANCEL_STATUS;
  lock.lock();
  try {
    long startTime=System.currentTimeMillis();
    IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
    if (monitor.isCanceled())     return Status.CANCEL_STATUS;
    indexDiffData=result;
    if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
      long time=System.currentTimeMillis() - startTime;
      StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
      GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
    }
    notifyListeners();
    return Status.OK_STATUS;
  }
 catch (  RuntimeException e) {
    if (GitTraceLocation.INDEXDIFFCACHE.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
    scheduleReloadJob(""String_Node_Str"");
    return Status.OK_STATUS;
  }
 finally {
    lock.unlock();
  }
}","@Override protected IStatus run(IProgressMonitor monitor){
  waitForWorkspaceLock(monitor);
  if (monitor.isCanceled())   return Status.CANCEL_STATUS;
  lock.lock();
  try {
    long startTime=System.currentTimeMillis();
    IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
    if (monitor.isCanceled())     return Status.CANCEL_STATUS;
    indexDiffData=result;
    if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
      long time=System.currentTimeMillis() - startTime;
      StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
      GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
    }
    notifyListeners();
    return Status.OK_STATUS;
  }
 catch (  RuntimeException e) {
    if (GitTraceLocation.INDEXDIFFCACHE.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
    scheduleReloadJob(""String_Node_Str"");
    return Status.OK_STATUS;
  }
 finally {
    lock.unlock();
  }
}",0.9969578444154716
7668,"private void scheduleReloadJob(final String trigger){
  if (reloadJob != null)   reloadJob.cancel();
  if (!checkRepository())   return;
  reloadJob=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock();
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiff result=calcIndexDiff(monitor,getName());
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=new IndexDiffData(result);
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(getTraceMessage(time));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    private String getTraceMessage(    long time){
      return NLS.bind(""String_Node_Str"",new Object[]{Long.valueOf(time),trigger,repository.getWorkTree().getName()});
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  reloadJob.schedule();
}","private void scheduleReloadJob(final String trigger){
  if (reloadJob != null)   reloadJob.cancel();
  if (!checkRepository())   return;
  reloadJob=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock(monitor);
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiff result=calcIndexDiff(monitor,getName());
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=new IndexDiffData(result);
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(getTraceMessage(time));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    private String getTraceMessage(    long time){
      return NLS.bind(""String_Node_Str"",new Object[]{Long.valueOf(time),trigger,repository.getWorkTree().getName()});
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  reloadJob.schedule();
}",0.997997138769671
7669,"private void scheduleUpdateJob(final Collection<String> filesToUpdate,final Collection<IResource> resourcesToUpdate){
  if (!checkRepository())   return;
  Job job=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock();
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=result;
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  job.schedule();
}","private void scheduleUpdateJob(final Collection<String> filesToUpdate,final Collection<IResource> resourcesToUpdate){
  if (!checkRepository())   return;
  Job job=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock(monitor);
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=result;
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  job.schedule();
}",0.9979035639412998
7670,"private void waitForWorkspaceLock(){
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
      }
    }
,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new RuntimeException(e);
  }
}","private void waitForWorkspaceLock(IProgressMonitor monitor){
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor innerMonitor) throws CoreException {
      }
    }
,monitor);
  }
 catch (  OperationCanceledException e) {
    return;
  }
catch (  CoreException e) {
    throw new RuntimeException(e);
  }
}",0.7181008902077152
7671,"@Override protected IStatus run(IProgressMonitor monitor){
  waitForWorkspaceLock();
  if (monitor.isCanceled())   return Status.CANCEL_STATUS;
  lock.lock();
  try {
    long startTime=System.currentTimeMillis();
    IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
    if (monitor.isCanceled())     return Status.CANCEL_STATUS;
    indexDiffData=result;
    if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
      long time=System.currentTimeMillis() - startTime;
      StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
      GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
    }
    notifyListeners();
    return Status.OK_STATUS;
  }
 catch (  RuntimeException e) {
    if (GitTraceLocation.INDEXDIFFCACHE.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
    scheduleReloadJob(""String_Node_Str"");
    return Status.OK_STATUS;
  }
 finally {
    lock.unlock();
  }
}","@Override protected IStatus run(IProgressMonitor monitor){
  waitForWorkspaceLock(monitor);
  if (monitor.isCanceled())   return Status.CANCEL_STATUS;
  lock.lock();
  try {
    long startTime=System.currentTimeMillis();
    IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
    if (monitor.isCanceled())     return Status.CANCEL_STATUS;
    indexDiffData=result;
    if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
      long time=System.currentTimeMillis() - startTime;
      StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
      GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
    }
    notifyListeners();
    return Status.OK_STATUS;
  }
 catch (  RuntimeException e) {
    if (GitTraceLocation.INDEXDIFFCACHE.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
    scheduleReloadJob(""String_Node_Str"");
    return Status.OK_STATUS;
  }
 finally {
    lock.unlock();
  }
}",0.9969578444154716
7672,"private void scheduleReloadJob(final String trigger){
  if (reloadJob != null)   reloadJob.cancel();
  if (!checkRepository())   return;
  reloadJob=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock();
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiff result=calcIndexDiff(monitor,getName());
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=new IndexDiffData(result);
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(getTraceMessage(time));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    private String getTraceMessage(    long time){
      return NLS.bind(""String_Node_Str"",new Object[]{Long.valueOf(time),trigger,repository.getWorkTree().getName()});
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  reloadJob.schedule();
}","private void scheduleReloadJob(final String trigger){
  if (reloadJob != null)   reloadJob.cancel();
  if (!checkRepository())   return;
  reloadJob=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock(monitor);
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiff result=calcIndexDiff(monitor,getName());
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=new IndexDiffData(result);
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(getTraceMessage(time));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    private String getTraceMessage(    long time){
      return NLS.bind(""String_Node_Str"",new Object[]{Long.valueOf(time),trigger,repository.getWorkTree().getName()});
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  reloadJob.schedule();
}",0.997997138769671
7673,"private void scheduleUpdateJob(final Collection<String> filesToUpdate,final Collection<IResource> resourcesToUpdate){
  if (!checkRepository())   return;
  Job job=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock();
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=result;
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  job.schedule();
}","private void scheduleUpdateJob(final Collection<String> filesToUpdate,final Collection<IResource> resourcesToUpdate){
  if (!checkRepository())   return;
  Job job=new Job(getReloadJobName()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      waitForWorkspaceLock(monitor);
      if (monitor.isCanceled())       return Status.CANCEL_STATUS;
      lock.lock();
      try {
        long startTime=System.currentTimeMillis();
        IndexDiffData result=calcIndexDiffData(monitor,getName(),filesToUpdate,resourcesToUpdate);
        if (monitor.isCanceled())         return Status.CANCEL_STATUS;
        indexDiffData=result;
        if (GitTraceLocation.INDEXDIFFCACHE.isActive()) {
          long time=System.currentTimeMillis() - startTime;
          StringBuilder message=new StringBuilder(NLS.bind(""String_Node_Str"",Integer.valueOf(resourcesToUpdate.size()),Long.valueOf(time)));
          GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),message.append(indexDiffData.toString()).toString());
        }
        notifyListeners();
        return Status.OK_STATUS;
      }
 catch (      RuntimeException e) {
        if (GitTraceLocation.INDEXDIFFCACHE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.INDEXDIFFCACHE.getLocation(),""String_Node_Str"",e);
        scheduleReloadJob(""String_Node_Str"");
        return Status.OK_STATUS;
      }
 finally {
        lock.unlock();
      }
    }
    @Override public boolean belongsTo(    Object family){
      if (family.equals(JobFamilies.INDEX_DIFF_CACHE_UPDATE))       return true;
      return super.belongsTo(family);
    }
  }
;
  job.schedule();
}",0.9979035639412998
7674,"private void waitForWorkspaceLock(){
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
      }
    }
,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    throw new RuntimeException(e);
  }
}","private void waitForWorkspaceLock(IProgressMonitor monitor){
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor innerMonitor) throws CoreException {
      }
    }
,monitor);
  }
 catch (  OperationCanceledException e) {
    return;
  }
catch (  CoreException e) {
    throw new RuntimeException(e);
  }
}",0.7181008902077152
7675,"@BeforeClass public static void disableSecureStoragePasswordProviders(){
  List availableModules=PasswordProviderSelector.getInstance().findAvailableModules(null);
  StringBuffer tmp=new StringBuffer();
  for (  Object module : availableModules) {
    ExtStorageModule storageModule=(ExtStorageModule)module;
    tmp.append(storageModule.moduleID).append(""String_Node_Str"");
  }
  IEclipsePreferences node=ConfigurationScope.INSTANCE.getNode(""String_Node_Str"");
  node.put(IStorageConstants.DISABLED_PROVIDERS_KEY,tmp.toString());
}","@BeforeClass public static void disableSecureStoragePasswordProviders(){
  List availableModules=PasswordProviderSelector.getInstance().findAvailableModules(null);
  StringBuffer tmp=new StringBuffer();
  for (  Object module : availableModules) {
    ExtStorageModule storageModule=(ExtStorageModule)module;
    tmp.append(storageModule.moduleID).append(""String_Node_Str"");
  }
  IEclipsePreferences node=new ConfigurationScope().getNode(""String_Node_Str"");
  node.put(IStorageConstants.DISABLED_PROVIDERS_KEY,tmp.toString());
}",0.9858623939679548
7676,"@Override protected Control createCustomArea(Composite parent){
  if (result.getStatus() != Status.STOPPED) {
    createToggleButton(parent);
    return null;
  }
  Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().indent(0,0).grab(true,true).applyTo(main);
  Group commitGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(commitGroup);
  commitGroup.setText(UIText.RebaseResultDialog_DetailsGroup);
  commitGroup.setLayout(new GridLayout(1,false));
  Label commitIdLabel=new Label(commitGroup,SWT.NONE);
  commitIdLabel.setText(UIText.RebaseResultDialog_CommitIdLabel);
  Text commitId=new Text(commitGroup,SWT.READ_ONLY | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commitId);
  Label commitMessageLabel=new Label(commitGroup,SWT.NONE);
  commitMessageLabel.setText(UIText.RebaseResultDialog_CommitMessageLabel);
  TextViewer commitMessage=new TextViewer(commitGroup,SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI| SWT.BORDER| SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,60).applyTo(commitMessage.getControl());
  boolean conflictListFailure=false;
  DirCache dc=null;
  RevWalk rw=null;
  try {
    rw=new RevWalk(repo);
    RevCommit commit=rw.parseCommit(result.getCurrentCommit());
    commitMessage.getTextWidget().setText(commit.getFullMessage());
    commitId.setText(commit.name());
    dc=repo.lockDirCache();
    for (int i=0; i < dc.getEntryCount(); i++) {
      if (dc.getEntry(i).getStage() > 0)       conflictPaths.add(dc.getEntry(i).getPathString());
    }
    if (conflictPaths.size() > 0) {
      message=NLS.bind(UIText.RebaseResultDialog_Conflicting,Integer.valueOf(conflictPaths.size()));
      messageLabel.setText(message);
    }
  }
 catch (  IOException e) {
    conflictListFailure=true;
  }
 finally {
    if (rw != null)     rw.release();
    if (dc != null)     dc.unlock();
  }
  if (conflictListFailure) {
    Label failureLabel=new Label(main,SWT.NONE);
    failureLabel.setText(UIText.RebaseResultDialog_ConflictListFailureMessage);
  }
 else {
    Label conflictListLabel=new Label(main,SWT.NONE);
    conflictListLabel.setText(UIText.RebaseResultDialog_DiffDetailsLabel);
    TableViewer conflictList=new TableViewer(main,SWT.BORDER);
    GridDataFactory.fillDefaults().span(2,1).grab(true,true).applyTo(conflictList.getTable());
    conflictList.setContentProvider(ArrayContentProvider.getInstance());
    conflictList.setInput(conflictPaths);
  }
  Group actionGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(actionGroup);
  actionGroup.setText(UIText.RebaseResultDialog_ActionGroupTitle);
  actionGroup.setLayout(new GridLayout(1,false));
  nextStepsGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(nextStepsGroup);
  nextStepsGroup.setText(UIText.RebaseResultDialog_NextSteps);
  nextStepsGroup.setLayout(new GridLayout(1,false));
  final TextViewer nextSteps=new TextViewer(nextStepsGroup,SWT.MULTI | SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,60).applyTo(nextSteps.getControl());
  nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsAfterResolveConflicts);
  startMergeButton=new Button(actionGroup,SWT.RADIO);
  startMergeButton.setText(UIText.RebaseResultDialog_StartMergeRadioText);
  startMergeButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (startMergeButton.getSelection()) {
        nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsAfterResolveConflicts);
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  skipCommitButton=new Button(actionGroup,SWT.RADIO);
  skipCommitButton.setText(UIText.RebaseResultDialog_SkipCommitButton);
  skipCommitButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (skipCommitButton.getSelection())       nextSteps.getTextWidget().setText(""String_Node_Str"");
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  abortRebaseButton=new Button(actionGroup,SWT.RADIO);
  abortRebaseButton.setText(UIText.RebaseResultDialog_AbortRebaseRadioText);
  abortRebaseButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (abortRebaseButton.getSelection())       nextSteps.getTextWidget().setText(""String_Node_Str"");
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  doNothingButton=new Button(actionGroup,SWT.RADIO);
  doNothingButton.setText(UIText.RebaseResultDialog_DoNothingRadioText);
  doNothingButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (doNothingButton.getSelection())       nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsDoNothing);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  startMergeButton.setSelection(true);
  commitGroup.pack();
  applyDialogFont(main);
  return main;
}","@Override protected Control createCustomArea(Composite parent){
  if (result.getStatus() != Status.STOPPED) {
    createToggleButton(parent);
    return null;
  }
  Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().indent(0,0).grab(true,true).applyTo(main);
  Group commitGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(commitGroup);
  commitGroup.setText(UIText.RebaseResultDialog_DetailsGroup);
  commitGroup.setLayout(new GridLayout(1,false));
  Label commitIdLabel=new Label(commitGroup,SWT.NONE);
  commitIdLabel.setText(UIText.RebaseResultDialog_CommitIdLabel);
  Text commitId=new Text(commitGroup,SWT.READ_ONLY | SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commitId);
  Label commitMessageLabel=new Label(commitGroup,SWT.NONE);
  commitMessageLabel.setText(UIText.RebaseResultDialog_CommitMessageLabel);
  TextViewer commitMessage=new TextViewer(commitGroup,SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI| SWT.BORDER| SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,60).applyTo(commitMessage.getControl());
  boolean conflictListFailure=false;
  DirCache dc=null;
  RevWalk rw=null;
  try {
    rw=new RevWalk(repo);
    RevCommit commit=rw.parseCommit(result.getCurrentCommit());
    commitMessage.getTextWidget().setText(commit.getFullMessage());
    commitId.setText(commit.name());
    dc=repo.lockDirCache();
    for (int i=0; i < dc.getEntryCount(); i++) {
      if (dc.getEntry(i).getStage() > 0)       conflictPaths.add(dc.getEntry(i).getPathString());
    }
    if (conflictPaths.size() > 0) {
      message=NLS.bind(UIText.RebaseResultDialog_Conflicting,Integer.valueOf(conflictPaths.size()));
      messageLabel.setText(message);
    }
  }
 catch (  IOException e) {
    conflictListFailure=true;
  }
 finally {
    if (rw != null)     rw.release();
    if (dc != null)     dc.unlock();
  }
  boolean mergeToolAvailable=true;
  final CheckResult checkResult;
  if (!conflictListFailure) {
    checkResult=FileChecker.checkFiles(repo,conflictPaths);
    mergeToolAvailable=checkResult.isOk();
  }
 else {
    checkResult=null;
    mergeToolAvailable=false;
  }
  if (conflictListFailure) {
    Label failureLabel=new Label(main,SWT.NONE);
    failureLabel.setText(UIText.RebaseResultDialog_ConflictListFailureMessage);
  }
 else {
    if (checkResult != null && !checkResult.isOk()) {
      Label failureLabel=new Label(main,SWT.NONE);
      failureLabel.setText(getProblemDescription(checkResult));
    }
    Label conflictListLabel=new Label(main,SWT.NONE);
    conflictListLabel.setText(UIText.RebaseResultDialog_DiffDetailsLabel);
    TableViewer conflictList=new TableViewer(main,SWT.BORDER);
    GridDataFactory.fillDefaults().span(2,1).grab(true,true).applyTo(conflictList.getTable());
    conflictList.setContentProvider(ArrayContentProvider.getInstance());
    conflictList.setInput(conflictPaths);
    conflictList.setLabelProvider(new LabelProvider(){
      @Override public String getText(      Object element){
        String path=(String)element;
        if (checkResult != null && !checkResult.isOk()) {
          CheckResultEntry entry=checkResult.getEntry(path);
          if (entry != null) {
            if (!entry.inWorkspace)             return UIText.RebaseResultDialog_notInWorkspace + SPACE + path;
            if (!entry.shared)             return UIText.RebaseResultDialog_notShared + SPACE + path;
          }
        }
        return super.getText(element);
      }
    }
);
  }
  Group actionGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(actionGroup);
  actionGroup.setText(UIText.RebaseResultDialog_ActionGroupTitle);
  actionGroup.setLayout(new GridLayout(1,false));
  nextStepsGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(nextStepsGroup);
  nextStepsGroup.setText(UIText.RebaseResultDialog_NextSteps);
  nextStepsGroup.setLayout(new GridLayout(1,false));
  final TextViewer nextSteps=new TextViewer(nextStepsGroup,SWT.MULTI | SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,60).applyTo(nextSteps.getControl());
  nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsAfterResolveConflicts);
  startMergeButton=new Button(actionGroup,SWT.RADIO);
  startMergeButton.setText(UIText.RebaseResultDialog_StartMergeRadioText);
  startMergeButton.setEnabled(mergeToolAvailable);
  startMergeButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (startMergeButton.getSelection()) {
        nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsAfterResolveConflicts);
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  skipCommitButton=new Button(actionGroup,SWT.RADIO);
  skipCommitButton.setText(UIText.RebaseResultDialog_SkipCommitButton);
  skipCommitButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (skipCommitButton.getSelection())       nextSteps.getTextWidget().setText(""String_Node_Str"");
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  abortRebaseButton=new Button(actionGroup,SWT.RADIO);
  abortRebaseButton.setText(UIText.RebaseResultDialog_AbortRebaseRadioText);
  abortRebaseButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (abortRebaseButton.getSelection())       nextSteps.getTextWidget().setText(""String_Node_Str"");
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  doNothingButton=new Button(actionGroup,SWT.RADIO);
  doNothingButton.setText(UIText.RebaseResultDialog_DoNothingRadioText);
  doNothingButton.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      if (doNothingButton.getSelection())       nextSteps.getTextWidget().setText(UIText.RebaseResultDialog_NextStepsDoNothing);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  if (mergeToolAvailable)   startMergeButton.setSelection(true);
 else   doNothingButton.setSelection(true);
  commitGroup.pack();
  applyDialogFont(main);
  return main;
}",0.8975501113585747
7677,"/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}","/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}",0.9888617223580548
7678,"/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}","/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  pm.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}",0.9981167608286252
7679,"/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}","/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  pm.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}",0.9981167608286252
7680,"/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}","/** 
 * Find directories containing .project files recursively starting at given directory
 * @param files
 * @param directory
 * @param visistedDirs
 * @param monitor
 * @return true if projects files found, false otherwise
 */
public static boolean findProjectFiles(final Collection<File> files,final File directory,final Set<String> visistedDirs,final IProgressMonitor monitor){
  if (directory == null)   return false;
  IProgressMonitor pm=monitor;
  if (pm == null)   pm=new NullProgressMonitor();
 else   if (pm.isCanceled())   return false;
  monitor.subTask(NLS.bind(CoreText.ProjectUtil_taskCheckingDirectory,directory.getPath()));
  final File[] contents=directory.listFiles();
  if (contents == null || contents.length == 0)   return false;
  Set<String> directoriesVisited;
  if (visistedDirs == null) {
    directoriesVisited=new HashSet<String>();
    try {
      directoriesVisited.add(directory.getCanonicalPath());
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
  }
 else   directoriesVisited=visistedDirs;
  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;
  for (int i=0; i < contents.length; i++) {
    File file=contents[i];
    if (file.isFile() && file.getName().equals(dotProject)) {
      files.add(file);
      return true;
    }
  }
  for (int i=0; i < contents.length; i++) {
    if (!contents[i].isDirectory())     continue;
    if (contents[i].getName().equals(METADATA_FOLDER))     continue;
    try {
      String canonicalPath=contents[i].getCanonicalPath();
      if (!directoriesVisited.add(canonicalPath)) {
        continue;
      }
    }
 catch (    IOException exception) {
      Activator.logError(exception.getLocalizedMessage(),exception);
    }
    findProjectFiles(files,contents[i],directoriesVisited,pm);
  }
  return true;
}",0.9888617223580548
7681,"/** 
 * Creates a wizard which is used to export the changes introduced by a commit.
 * @param commit
 * @param db
 */
public GitCreatePatchWizard(RevCommit commit,Repository db){
  this.commit=commit;
  this.db=db;
  setDialogSettings(DialogSettings.getOrCreateSection(Activator.getDefault().getDialogSettings(),""String_Node_Str""));
}","/** 
 * Creates a wizard which is used to export the changes introduced by a commit.
 * @param commit
 * @param db
 */
public GitCreatePatchWizard(RevCommit commit,Repository db){
  this.commit=commit;
  this.db=db;
  setDialogSettings(getOrCreateSection(Activator.getDefault().getDialogSettings(),""String_Node_Str""));
}",0.9770992366412212
7682,"private void reactOnSelection(ISelection selection){
  if (selection instanceof StructuredSelection) {
    StructuredSelection ssel=(StructuredSelection)selection;
    if (ssel.size() != 1)     return;
    if (ssel.getFirstElement() instanceof IResource)     showResource((IResource)ssel.getFirstElement());
    if (ssel.getFirstElement() instanceof IAdaptable) {
      IResource adapted=(IResource)((IAdaptable)ssel.getFirstElement()).getAdapter(IResource.class);
      if (adapted != null)       showResource(adapted);
    }
 else     if (ssel.getFirstElement() instanceof RepositoryTreeNode) {
      RepositoryTreeNode repoNode=(RepositoryTreeNode)ssel.getFirstElement();
      reload(repoNode.getRepository());
    }
  }
}","private void reactOnSelection(ISelection selection){
  if (selection instanceof StructuredSelection) {
    StructuredSelection ssel=(StructuredSelection)selection;
    if (ssel.size() != 1)     return;
    Object firstElement=ssel.getFirstElement();
    if (firstElement instanceof IResource)     showResource((IResource)firstElement);
 else     if (firstElement instanceof RepositoryTreeNode) {
      RepositoryTreeNode repoNode=(RepositoryTreeNode)firstElement;
      reload(repoNode.getRepository());
    }
 else     if (firstElement instanceof IAdaptable) {
      IResource adapted=(IResource)((IAdaptable)firstElement).getAdapter(IResource.class);
      if (adapted != null)       showResource(adapted);
    }
  }
}",0.5408022130013831
7683,"GitFileHistory(final IResource rsrc,final int flags,final IProgressMonitor monitor){
  resource=rsrc;
  final RepositoryMapping rm=RepositoryMapping.getMapping(resource);
  if (rm == null) {
    Activator.logError(NLS.bind(CoreText.GitFileHistory_gitNotAttached,resource.getProject().getName()),null);
    db=null;
    walk=null;
  }
 else {
    db=rm.getRepository();
    walk=new KidWalk(db);
    gitPath=rm.getRepoRelativePath(resource);
    walk.setTreeFilter(AndTreeFilter.create(PathFilterGroup.createFromStrings(Collections.singleton(gitPath)),TreeFilter.ANY_DIFF));
  }
  revisions=buildRevisions(monitor,flags);
}","GitFileHistory(final IResource rsrc,final int flags,final IProgressMonitor monitor){
  resource=rsrc;
  final RepositoryMapping rm=RepositoryMapping.getMapping(resource);
  if (rm == null) {
    Activator.logError(NLS.bind(CoreText.GitFileHistory_gitNotAttached,resource.getProject().getName()),null);
    db=null;
    walk=null;
  }
 else {
    db=rm.getRepository();
    walk=new KidWalk(db);
    gitPath=rm.getRepoRelativePath(resource);
    if (gitPath == null || gitPath.isEmpty()) {
      walk.setTreeFilter(TreeFilter.ANY_DIFF);
    }
 else {
      walk.setTreeFilter(AndTreeFilter.create(PathFilterGroup.createFromStrings(Collections.singleton(gitPath)),TreeFilter.ANY_DIFF));
    }
  }
  revisions=buildRevisions(monitor,flags);
}",0.7832476120499633
7684,"public boolean moveFolder(final IResourceTree tree,final IFolder srcf,final IFolder dstf,final int updateFlags,final IProgressMonitor monitor){
  final boolean force=(updateFlags & IResource.FORCE) == IResource.FORCE;
  if (!force && !tree.isSynchronized(srcf,IResource.DEPTH_ZERO))   return false;
  final RepositoryMapping srcm=RepositoryMapping.getMapping(srcf);
  if (srcm == null)   return false;
  final RepositoryMapping dstm=RepositoryMapping.getMapping(dstf);
  try {
    final String sPath=srcm.getRepoRelativePath(srcf);
    if (dstm != null && dstm.getRepository() == srcm.getRepository()) {
      final String dPath=srcm.getRepoRelativePath(dstf) + ""String_Node_Str"";
      MoveResult result=moveIndexContent(dPath,srcm,sPath);
switch (result) {
case SUCCESS:
        break;
case FAILED:
      tree.failed(new Status(IStatus.ERROR,Activator.getPluginId(),0,CoreText.MoveDeleteHook_operationError,null));
    break;
case UNTRACKED:
  return FINISH_FOR_ME;
}
tree.standardMoveFolder(srcf,dstf,updateFlags,monitor);
}
}
 catch (IOException e) {
tree.failed(new Status(IStatus.ERROR,Activator.getPluginId(),0,CoreText.MoveDeleteHook_operationError,e));
}
return true;
}","public boolean moveFolder(final IResourceTree tree,final IFolder srcf,final IFolder dstf,final int updateFlags,final IProgressMonitor monitor){
  final boolean force=(updateFlags & IResource.FORCE) == IResource.FORCE;
  if (!force && !tree.isSynchronized(srcf,IResource.DEPTH_ZERO))   return false;
  final RepositoryMapping srcm=RepositoryMapping.getMapping(srcf);
  if (srcm == null)   return false;
  final RepositoryMapping dstm=RepositoryMapping.getMapping(dstf);
  try {
    final String sPath=srcm.getRepoRelativePath(srcf);
    if (dstm != null && dstm.getRepository() == srcm.getRepository()) {
      final String dPath=srcm.getRepoRelativePath(dstf) + ""String_Node_Str"";
      MoveResult result=moveIndexContent(dPath,srcm,sPath);
switch (result) {
case SUCCESS:
        break;
case FAILED:
      tree.failed(new Status(IStatus.ERROR,Activator.getPluginId(),0,CoreText.MoveDeleteHook_operationError,null));
    return I_AM_DONE;
case UNTRACKED:
  return FINISH_FOR_ME;
}
}
tree.standardMoveFolder(srcf,dstf,updateFlags,monitor);
}
 catch (IOException e) {
tree.failed(new Status(IStatus.ERROR,Activator.getPluginId(),0,CoreText.MoveDeleteHook_operationError,e));
}
return true;
}",0.9894381073088298
7685,"@Override public IProject[] addToWorkspace(final String[] referenceStrings,final ProjectSetSerializationContext context,final IProgressMonitor monitor) throws TeamException {
  final Map<URIish,Map<String,Set<ProjectReference>>> repositories=new LinkedHashMap<URIish,Map<String,Set<ProjectReference>>>();
  for (  final String reference : referenceStrings) {
    try {
      final ProjectReference projectReference=new ProjectReference(reference);
      Map<String,Set<ProjectReference>> repositoryBranches=repositories.get(projectReference.repository);
      if (repositoryBranches == null) {
        repositoryBranches=new HashMap<String,Set<ProjectReference>>();
        repositories.put(projectReference.repository,repositoryBranches);
      }
      Set<ProjectReference> projectReferences=repositoryBranches.get(projectReference.branch);
      if (projectReferences == null) {
        projectReferences=new TreeSet<ProjectReference>(new ProjectReferenceComparator());
        repositoryBranches.put(projectReference.branch,projectReferences);
      }
      projectReferences.add(projectReference);
    }
 catch (    final IllegalArgumentException e) {
      throw new TeamException(reference,e);
    }
catch (    final URISyntaxException e) {
      throw new TeamException(reference,e);
    }
  }
  final ArrayList<IProject> importedProjects=new ArrayList<IProject>();
  for (  final URIish gitUrl : repositories.keySet()) {
    Map<String,Set<ProjectReference>> branches=repositories.get(gitUrl);
    for (    final String branch : branches.keySet()) {
      final Set<ProjectReference> projects=branches.get(branch);
      try {
        final IPath workDir=getWorkingDir(gitUrl,branch,branches.keySet());
        if (workDir.toFile().exists()) {
          final Collection<String> projectNames=new LinkedList<String>();
          for (          final ProjectReference projectReference : projects)           projectNames.add(projectReference.projectDir);
          throw new TeamException(NLS.bind(CoreText.GitProjectSetCapability_CloneToExistingDirectory,new Object[]{workDir,projectNames,gitUrl}));
        }
        int timeout=60;
        String refName=Constants.R_HEADS + branch;
        final CloneOperation cloneOperation=new CloneOperation(gitUrl,true,null,workDir.toFile(),refName,Constants.DEFAULT_REMOTE_NAME,timeout);
        cloneOperation.run(monitor);
        final File repositoryPath=workDir.append(Constants.DOT_GIT_EXT).toFile();
        Activator.getDefault().getRepositoryUtil().addConfiguredRepository(repositoryPath);
        final IWorkspace workspace=ResourcesPlugin.getWorkspace();
        final IWorkspaceRoot root=workspace.getRoot();
        for (        final ProjectReference projectToImport : projects) {
          final IPath projectDir=workDir.append(projectToImport.projectDir);
          final IProjectDescription projectDescription=workspace.loadProjectDescription(projectDir.append(IProjectDescription.DESCRIPTION_FILE_NAME));
          final IProject project=root.getProject(projectDescription.getName());
          project.create(projectDescription,monitor);
          importedProjects.add(project);
          project.open(monitor);
          final ConnectProviderOperation connectProviderOperation=new ConnectProviderOperation(project,repositoryPath);
          connectProviderOperation.execute(monitor);
        }
      }
 catch (      final InvocationTargetException e) {
        throw TeamException.asTeamException(e);
      }
catch (      final CoreException e) {
        throw TeamException.asTeamException(e);
      }
catch (      final InterruptedException e) {
        return new IProject[0];
      }
    }
  }
  final IProject[] result=importedProjects.toArray(new IProject[importedProjects.size()]);
  return result;
}","@Override public IProject[] addToWorkspace(final String[] referenceStrings,final ProjectSetSerializationContext context,final IProgressMonitor monitor) throws TeamException {
  final Map<URIish,Map<String,Set<ProjectReference>>> repositories=new LinkedHashMap<URIish,Map<String,Set<ProjectReference>>>();
  for (  final String reference : referenceStrings) {
    try {
      final ProjectReference projectReference=new ProjectReference(reference);
      Map<String,Set<ProjectReference>> repositoryBranches=repositories.get(projectReference.repository);
      if (repositoryBranches == null) {
        repositoryBranches=new HashMap<String,Set<ProjectReference>>();
        repositories.put(projectReference.repository,repositoryBranches);
      }
      Set<ProjectReference> projectReferences=repositoryBranches.get(projectReference.branch);
      if (projectReferences == null) {
        projectReferences=new TreeSet<ProjectReference>(new ProjectReferenceComparator());
        repositoryBranches.put(projectReference.branch,projectReferences);
      }
      projectReferences.add(projectReference);
    }
 catch (    final IllegalArgumentException e) {
      throw new TeamException(reference,e);
    }
catch (    final URISyntaxException e) {
      throw new TeamException(reference,e);
    }
  }
  final ArrayList<IProject> importedProjects=new ArrayList<IProject>();
  for (  final Map.Entry<URIish,Map<String,Set<ProjectReference>>> entry : repositories.entrySet()) {
    final URIish gitUrl=entry.getKey();
    final Map<String,Set<ProjectReference>> branches=entry.getValue();
    for (    final Map.Entry<String,Set<ProjectReference>> branchEntry : branches.entrySet()) {
      final String branch=branchEntry.getKey();
      final Set<ProjectReference> projects=branchEntry.getValue();
      try {
        final IPath workDir=getWorkingDir(gitUrl,branch,branches.keySet());
        if (workDir.toFile().exists()) {
          final Collection<String> projectNames=new LinkedList<String>();
          for (          final ProjectReference projectReference : projects)           projectNames.add(projectReference.projectDir);
          throw new TeamException(NLS.bind(CoreText.GitProjectSetCapability_CloneToExistingDirectory,new Object[]{workDir,projectNames,gitUrl}));
        }
        int timeout=60;
        String refName=Constants.R_HEADS + branch;
        final CloneOperation cloneOperation=new CloneOperation(gitUrl,true,null,workDir.toFile(),refName,Constants.DEFAULT_REMOTE_NAME,timeout);
        cloneOperation.run(monitor);
        final File repositoryPath=workDir.append(Constants.DOT_GIT_EXT).toFile();
        Activator.getDefault().getRepositoryUtil().addConfiguredRepository(repositoryPath);
        final IWorkspace workspace=ResourcesPlugin.getWorkspace();
        final IWorkspaceRoot root=workspace.getRoot();
        for (        final ProjectReference projectToImport : projects) {
          final IPath projectDir=workDir.append(projectToImport.projectDir);
          final IProjectDescription projectDescription=workspace.loadProjectDescription(projectDir.append(IProjectDescription.DESCRIPTION_FILE_NAME));
          final IProject project=root.getProject(projectDescription.getName());
          project.create(projectDescription,monitor);
          importedProjects.add(project);
          project.open(monitor);
          final ConnectProviderOperation connectProviderOperation=new ConnectProviderOperation(project,repositoryPath);
          connectProviderOperation.execute(monitor);
        }
      }
 catch (      final InvocationTargetException e) {
        throw TeamException.asTeamException(e);
      }
catch (      final CoreException e) {
        throw TeamException.asTeamException(e);
      }
catch (      final InterruptedException e) {
        return new IProject[0];
      }
    }
  }
  final IProject[] result=importedProjects.toArray(new IProject[importedProjects.size()]);
  return result;
}",0.9417551126067822
7686,"@SuppressWarnings(""String_Node_Str"") ProjectReference(final String reference) throws URISyntaxException, IllegalArgumentException {
  final String[] tokens=reference.split(Pattern.quote(SEPARATOR));
  if (tokens.length != 4)   throw new IllegalArgumentException(NLS.bind(CoreText.GitProjectSetCapability_InvalidTokensCount,new Object[]{4,tokens.length,tokens}));
  this.version=tokens[0];
  this.repository=new URIish(tokens[1]);
  if (!""String_Node_Str"".equals(tokens[2]))   this.branch=tokens[2];
  this.projectDir=tokens[3];
}","@SuppressWarnings(""String_Node_Str"") ProjectReference(final String reference) throws URISyntaxException, IllegalArgumentException {
  final String[] tokens=reference.split(Pattern.quote(SEPARATOR));
  if (tokens.length != 4)   throw new IllegalArgumentException(NLS.bind(CoreText.GitProjectSetCapability_InvalidTokensCount,new Object[]{4,tokens.length,tokens}));
  this.repository=new URIish(tokens[1]);
  if (!""String_Node_Str"".equals(tokens[2]))   this.branch=tokens[2];
  this.projectDir=tokens[3];
}",0.9748062015503876
7687,"private ITypedElement getHeadTypedElement(final IFile baseFile) throws IOException {
  final RepositoryMapping mapping=RepositoryMapping.getMapping(baseFile.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(baseFile);
  DirCache dc=repository.lockDirCache();
  final DirCacheEntry entry=dc.getEntry(gitPath);
  dc.unlock();
  if (entry == null) {
    return new GitCompareFileRevisionEditorInput.EmptyTypedElement(NLS.bind(UIText.CompareWithIndexAction_FileNotInIndex,baseFile.getName()));
  }
  IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  String encoding=CompareUtils.getResourceEncoding(baseFile);
  final EditableRevision next=new EditableRevision(nextFile,encoding);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      DirCache cache=null;
      try {
        cache=repository.lockDirCache();
        DirCacheEditor editor=cache.editor();
        editor.add(new PathEdit(gitPath){
          @Override public void apply(          DirCacheEntry ent){
            ent.copyMetaData(entry);
            ObjectInserter inserter=repository.newObjectInserter();
            ent.copyMetaData(entry);
            ent.setLength(newContent.length);
            ent.setLastModified(System.currentTimeMillis());
            InputStream in=new ByteArrayInputStream(newContent);
            try {
              ent.setObjectId(inserter.insert(Constants.OBJ_BLOB,newContent.length,in));
              inserter.flush();
            }
 catch (            IOException ex) {
              throw new RuntimeException(ex);
            }
 finally {
              try {
                in.close();
              }
 catch (              IOException e) {
              }
            }
          }
        }
);
        try {
          editor.commit();
        }
 catch (        RuntimeException e) {
          if (e.getCause() instanceof IOException)           throw (IOException)e.getCause();
 else           throw e;
        }
      }
 catch (      IOException e) {
        Activator.handleError(UIText.CompareWithIndexAction_errorOnAddToIndex,e,true);
      }
 finally {
        if (cache != null)         cache.unlock();
      }
    }
  }
;
  next.addContentChangeListener(listener);
  return next;
}","private ITypedElement getHeadTypedElement(final IFile baseFile) throws IOException {
  final RepositoryMapping mapping=RepositoryMapping.getMapping(baseFile.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(baseFile);
  DirCache dc=repository.lockDirCache();
  final DirCacheEntry entry=dc.getEntry(gitPath);
  dc.unlock();
  if (entry == null) {
    return new GitCompareFileRevisionEditorInput.EmptyTypedElement(NLS.bind(UIText.CompareWithIndexAction_FileNotInIndex,baseFile.getName()));
  }
  IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  String encoding=CompareCoreUtils.getResourceEncoding(baseFile);
  final EditableRevision next=new EditableRevision(nextFile,encoding);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      DirCache cache=null;
      try {
        cache=repository.lockDirCache();
        DirCacheEditor editor=cache.editor();
        editor.add(new PathEdit(gitPath){
          @Override public void apply(          DirCacheEntry ent){
            ent.copyMetaData(entry);
            ObjectInserter inserter=repository.newObjectInserter();
            ent.copyMetaData(entry);
            ent.setLength(newContent.length);
            ent.setLastModified(System.currentTimeMillis());
            InputStream in=new ByteArrayInputStream(newContent);
            try {
              ent.setObjectId(inserter.insert(Constants.OBJ_BLOB,newContent.length,in));
              inserter.flush();
            }
 catch (            IOException ex) {
              throw new RuntimeException(ex);
            }
 finally {
              try {
                in.close();
              }
 catch (              IOException e) {
              }
            }
          }
        }
);
        try {
          editor.commit();
        }
 catch (        RuntimeException e) {
          if (e.getCause() instanceof IOException)           throw (IOException)e.getCause();
 else           throw e;
        }
      }
 catch (      IOException e) {
        Activator.handleError(UIText.CompareWithIndexAction_errorOnAddToIndex,e,true);
      }
 finally {
        if (cache != null)         cache.unlock();
      }
    }
  }
;
  next.addContentChangeListener(listener);
  return next;
}",0.9991738950846758
7688,"/** 
 * Get styled text
 * @return styled string
 */
public StyledString getStyledText(Object object){
  StyledString styled=new StyledString();
  final String remote=getDstRefName();
  final String local=getSrcRefName();
  styled.append(shortenRef(remote));
  if (!tag) {
    styled.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
    styled.append(shortenRef(local),StyledString.QUALIFIER_STYLER);
  }
  styled.append(' ');
  if (result.getURIs().size() > 1)   styled.append(MessageFormat.format(UIText.RefUpdateElement_UrisDecoration,uri.toString()),StyledString.QUALIFIER_STYLER);
  styled.append(' ');
switch (getStatus()) {
case OK:
    if (update.isDelete())     styled.append(UIText.PushResultTable_statusOkDeleted,StyledString.DECORATIONS_STYLER);
 else {
      final Ref oldRef=getAdvertisedRemoteRef();
      if (oldRef == null) {
        if (tag)         styled.append(UIText.PushResultTable_statusOkNewTag,StyledString.DECORATIONS_STYLER);
 else         styled.append(UIText.PushResultTable_statusOkNewBranch,StyledString.DECORATIONS_STYLER);
      }
 else {
        String separator=update.isFastForward() ? ""String_Node_Str"" : ""String_Node_Str"";
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitRangeDecoration,update.getNewObjectId().abbreviate(7).name(),separator,oldRef.getObjectId().abbreviate(7).name()),StyledString.DECORATIONS_STYLER);
        styled.append(' ');
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitCountDecoration,Integer.valueOf(getChildren(this).length)),StyledString.COUNTER_STYLER);
      }
    }
  break;
case UP_TO_DATE:
styled.append(UIText.PushResultTable_statusUpToDate,StyledString.DECORATIONS_STYLER);
break;
case NON_EXISTING:
styled.append(UIText.PushResultTable_statusNoMatch,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_NODELETE:
case REJECTED_NONFASTFORWARD:
case REJECTED_REMOTE_CHANGED:
styled.append(UIText.PushResultTable_statusRejected,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_OTHER_REASON:
styled.append(UIText.PushResultTable_statusRemoteRejected,StyledString.DECORATIONS_STYLER);
break;
default :
break;
}
return styled;
}","/** 
 * Get styled text
 * @param object
 * @return styled string
 */
public StyledString getStyledText(Object object){
  StyledString styled=new StyledString();
  final String remote=getDstRefName();
  final String local=getSrcRefName();
  styled.append(shortenRef(remote));
  if (!tag) {
    styled.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
    styled.append(shortenRef(local),StyledString.QUALIFIER_STYLER);
  }
  styled.append(' ');
  if (result.getURIs().size() > 1)   styled.append(MessageFormat.format(UIText.RefUpdateElement_UrisDecoration,uri.toString()),StyledString.QUALIFIER_STYLER);
  styled.append(' ');
switch (getStatus()) {
case OK:
    if (update.isDelete())     styled.append(UIText.PushResultTable_statusOkDeleted,StyledString.DECORATIONS_STYLER);
 else {
      final Ref oldRef=getAdvertisedRemoteRef();
      if (oldRef == null) {
        if (tag)         styled.append(UIText.PushResultTable_statusOkNewTag,StyledString.DECORATIONS_STYLER);
 else         styled.append(UIText.PushResultTable_statusOkNewBranch,StyledString.DECORATIONS_STYLER);
      }
 else {
        String separator=update.isFastForward() ? ""String_Node_Str"" : ""String_Node_Str"";
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitRangeDecoration,update.getNewObjectId().abbreviate(7).name(),separator,oldRef.getObjectId().abbreviate(7).name()),StyledString.DECORATIONS_STYLER);
        styled.append(' ');
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitCountDecoration,Integer.valueOf(getChildren(this).length)),StyledString.COUNTER_STYLER);
      }
    }
  break;
case UP_TO_DATE:
styled.append(UIText.PushResultTable_statusUpToDate,StyledString.DECORATIONS_STYLER);
break;
case NON_EXISTING:
styled.append(UIText.PushResultTable_statusNoMatch,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_NODELETE:
case REJECTED_NONFASTFORWARD:
case REJECTED_REMOTE_CHANGED:
styled.append(UIText.PushResultTable_statusRejected,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_OTHER_REASON:
styled.append(UIText.PushResultTable_statusRemoteRejected,StyledString.DECORATIONS_STYLER);
break;
default :
break;
}
return styled;
}",0.9960874568469504
7689,"/** 
 * Get styled text
 * @return styled string
 */
public StyledString getStyledText(Object object){
  StyledString styled=new StyledString();
  final String remote=getDstRefName();
  final String local=getSrcRefName();
  styled.append(shortenRef(remote));
  if (!tag) {
    styled.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
    styled.append(shortenRef(local),StyledString.QUALIFIER_STYLER);
  }
  styled.append(' ');
  if (result.getURIs().size() > 1)   styled.append(MessageFormat.format(UIText.RefUpdateElement_UrisDecoration,uri.toString()),StyledString.QUALIFIER_STYLER);
  styled.append(' ');
switch (getStatus()) {
case OK:
    if (update.isDelete())     styled.append(UIText.PushResultTable_statusOkDeleted,StyledString.DECORATIONS_STYLER);
 else {
      final Ref oldRef=getAdvertisedRemoteRef();
      if (oldRef == null) {
        if (tag)         styled.append(UIText.PushResultTable_statusOkNewTag,StyledString.DECORATIONS_STYLER);
 else         styled.append(UIText.PushResultTable_statusOkNewBranch,StyledString.DECORATIONS_STYLER);
      }
 else {
        String separator=update.isFastForward() ? ""String_Node_Str"" : ""String_Node_Str"";
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitRangeDecoration,update.getNewObjectId().abbreviate(7).name(),separator,oldRef.getObjectId().abbreviate(7).name()),StyledString.DECORATIONS_STYLER);
        styled.append(' ');
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitCountDecoration,Integer.valueOf(getChildren(this).length)),StyledString.COUNTER_STYLER);
      }
    }
  break;
case UP_TO_DATE:
styled.append(UIText.PushResultTable_statusUpToDate,StyledString.DECORATIONS_STYLER);
break;
case NON_EXISTING:
styled.append(UIText.PushResultTable_statusNoMatch,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_NODELETE:
case REJECTED_NONFASTFORWARD:
case REJECTED_REMOTE_CHANGED:
styled.append(UIText.PushResultTable_statusRejected,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_OTHER_REASON:
styled.append(UIText.PushResultTable_statusRemoteRejected,StyledString.DECORATIONS_STYLER);
break;
default :
break;
}
return styled;
}","/** 
 * Get styled text
 * @param object
 * @return styled string
 */
public StyledString getStyledText(Object object){
  StyledString styled=new StyledString();
  final String remote=getDstRefName();
  final String local=getSrcRefName();
  styled.append(shortenRef(remote));
  if (!tag) {
    styled.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
    styled.append(shortenRef(local),StyledString.QUALIFIER_STYLER);
  }
  styled.append(' ');
  if (result.getURIs().size() > 1)   styled.append(MessageFormat.format(UIText.RefUpdateElement_UrisDecoration,uri.toString()),StyledString.QUALIFIER_STYLER);
  styled.append(' ');
switch (getStatus()) {
case OK:
    if (update.isDelete())     styled.append(UIText.PushResultTable_statusOkDeleted,StyledString.DECORATIONS_STYLER);
 else {
      final Ref oldRef=getAdvertisedRemoteRef();
      if (oldRef == null) {
        if (tag)         styled.append(UIText.PushResultTable_statusOkNewTag,StyledString.DECORATIONS_STYLER);
 else         styled.append(UIText.PushResultTable_statusOkNewBranch,StyledString.DECORATIONS_STYLER);
      }
 else {
        String separator=update.isFastForward() ? ""String_Node_Str"" : ""String_Node_Str"";
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitRangeDecoration,update.getNewObjectId().abbreviate(7).name(),separator,oldRef.getObjectId().abbreviate(7).name()),StyledString.DECORATIONS_STYLER);
        styled.append(' ');
        styled.append(MessageFormat.format(UIText.RefUpdateElement_CommitCountDecoration,Integer.valueOf(getChildren(this).length)),StyledString.COUNTER_STYLER);
      }
    }
  break;
case UP_TO_DATE:
styled.append(UIText.PushResultTable_statusUpToDate,StyledString.DECORATIONS_STYLER);
break;
case NON_EXISTING:
styled.append(UIText.PushResultTable_statusNoMatch,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_NODELETE:
case REJECTED_NONFASTFORWARD:
case REJECTED_REMOTE_CHANGED:
styled.append(UIText.PushResultTable_statusRejected,StyledString.DECORATIONS_STYLER);
break;
case REJECTED_OTHER_REASON:
styled.append(UIText.PushResultTable_statusRemoteRejected,StyledString.DECORATIONS_STYLER);
break;
default :
break;
}
return styled;
}",0.9960874568469504
7690,"/** 
 * @param pm the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
public void run(final IProgressMonitor pm) throws InvocationTargetException, InterruptedException {
  final IProgressMonitor monitor;
  if (pm == null)   monitor=new NullProgressMonitor();
 else   monitor=pm;
  EclipseGitProgressTransformer gitMonitor=new EclipseGitProgressTransformer(monitor);
  Repository repository=null;
  try {
    monitor.beginTask(NLS.bind(CoreText.CloneOperation_title,uri),5000);
    CloneCommand cloneRepository=Git.cloneRepository();
    cloneRepository.setCredentialsProvider(credentialsProvider);
    if (refName != null)     cloneRepository.setBranch(refName);
    cloneRepository.setDirectory(workdir);
    cloneRepository.setProgressMonitor(gitMonitor);
    cloneRepository.setRemote(remoteName);
    cloneRepository.setURI(uri.toString());
    cloneRepository.setTimeout(timeout);
    cloneRepository.setCloneAllBranches(allSelected);
    if (selectedBranches != null) {
      List<String> branches=new ArrayList<String>();
      for (      Ref branch : selectedBranches)       branches.add(branch.getName());
      cloneRepository.setBranchesToClone(branches);
    }
    Git git=cloneRepository.call();
    repository=git.getRepository();
    if (postCloneTasks != null)     for (    PostCloneTask task : postCloneTasks)     task.execute(git.getRepository(),monitor);
  }
 catch (  final Exception e) {
    try {
      if (repository != null)       repository.close();
      FileUtils.delete(workdir,FileUtils.RECURSIVE);
    }
 catch (    IOException ioe) {
      throw new InvocationTargetException(ioe);
    }
    if (monitor.isCanceled())     throw new InterruptedException();
 else     throw new InvocationTargetException(e);
  }
 finally {
    monitor.done();
    if (repository != null)     repository.close();
  }
}","/** 
 * @param pm the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
public void run(final IProgressMonitor pm) throws InvocationTargetException, InterruptedException {
  final IProgressMonitor monitor;
  if (pm == null)   monitor=new NullProgressMonitor();
 else   monitor=pm;
  EclipseGitProgressTransformer gitMonitor=new EclipseGitProgressTransformer(monitor);
  Repository repository=null;
  try {
    monitor.beginTask(NLS.bind(CoreText.CloneOperation_title,uri),5000);
    CloneCommand cloneRepository=Git.cloneRepository();
    cloneRepository.setCredentialsProvider(credentialsProvider);
    if (refName != null)     cloneRepository.setBranch(refName);
    cloneRepository.setDirectory(workdir);
    cloneRepository.setProgressMonitor(gitMonitor);
    cloneRepository.setRemote(remoteName);
    cloneRepository.setURI(uri.toString());
    cloneRepository.setTimeout(timeout);
    cloneRepository.setCloneAllBranches(allSelected);
    if (selectedBranches != null) {
      List<String> branches=new ArrayList<String>();
      for (      Ref branch : selectedBranches)       branches.add(branch.getName());
      cloneRepository.setBranchesToClone(branches);
    }
    Git git=cloneRepository.call();
    repository=git.getRepository();
synchronized (this) {
      if (postCloneTasks != null)       for (      PostCloneTask task : postCloneTasks)       task.execute(git.getRepository(),monitor);
    }
  }
 catch (  final Exception e) {
    try {
      if (repository != null)       repository.close();
      FileUtils.delete(workdir,FileUtils.RECURSIVE);
    }
 catch (    IOException ioe) {
      throw new InvocationTargetException(ioe);
    }
    if (monitor.isCanceled())     throw new InterruptedException();
 else     throw new InvocationTargetException(e);
  }
 finally {
    monitor.done();
    if (repository != null)     repository.close();
  }
}",0.9909319899244332
7691,"public Object execute(ExecutionEvent event) throws ExecutionException {
  Repository repo=getRepository(event);
  BasicConfigurationDialog.show(repo);
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  RevertCommand revert;
  Git git=new Git(repo);
  try {
    revert=git.revert().include(commit.getId());
    newHead=revert.call();
    if (newHead != null && revert.getRevertedRefs().isEmpty())     MessageDialog.openWarning(getPart(event).getSite().getShell(),UIText.RevertHandler_NoRevertTitle,UIText.RevertHandler_AlreadyRevertedMessae);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.RevertOperation_InternalError,e);
  }
  if (newHead == null)   throw new ExecutionException(UIText.RevertOperation_Failed);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  Repository repo=getRepository(event);
  BasicConfigurationDialog.show(repo);
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  RevertCommand revert;
  Git git=new Git(repo);
  try {
    revert=git.revert().include(commit.getId());
    newHead=revert.call();
    if (newHead != null && revert.getRevertedRefs().isEmpty())     MessageDialog.openWarning(getPart(event).getSite().getShell(),UIText.RevertHandler_NoRevertTitle,UIText.RevertHandler_AlreadyRevertedMessae);
  }
 catch (  Exception e) {
    Activator.handleError(UIText.RevertOperation_InternalError,e,true);
    return null;
  }
  if (newHead == null)   Activator.showError(UIText.RevertOperation_Failed,null);
  return null;
}",0.9270118527760448
7692,"public Object execute(ExecutionEvent event) throws ExecutionException {
  Repository repo=getRepository(event);
  BasicConfigurationDialog.show(repo);
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  RevertCommand revert;
  Git git=new Git(repo);
  try {
    revert=git.revert().include(commit.getId());
    newHead=revert.call();
    if (newHead != null && revert.getRevertedRefs().isEmpty())     MessageDialog.openWarning(getPart(event).getSite().getShell(),UIText.RevertHandler_NoRevertTitle,UIText.RevertHandler_AlreadyRevertedMessae);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.RevertOperation_InternalError,e);
  }
  if (newHead == null)   throw new ExecutionException(UIText.RevertOperation_Failed);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  Repository repo=getRepository(event);
  BasicConfigurationDialog.show(repo);
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  RevertCommand revert;
  Git git=new Git(repo);
  try {
    revert=git.revert().include(commit.getId());
    newHead=revert.call();
    if (newHead != null && revert.getRevertedRefs().isEmpty())     MessageDialog.openWarning(getPart(event).getSite().getShell(),UIText.RevertHandler_NoRevertTitle,UIText.RevertHandler_AlreadyRevertedMessae);
  }
 catch (  Exception e) {
    Activator.handleError(UIText.RevertOperation_InternalError,e,true);
    return null;
  }
  if (newHead == null)   Activator.showError(UIText.RevertOperation_Failed,null);
  return null;
}",0.9270118527760448
7693,"/** 
 * @param pm the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
public void run(final IProgressMonitor pm) throws InvocationTargetException, InterruptedException {
  final IProgressMonitor monitor;
  if (pm == null)   monitor=new NullProgressMonitor();
 else   monitor=pm;
  EclipseGitProgressTransformer gitMonitor=new EclipseGitProgressTransformer(monitor);
  Repository repository=null;
  try {
    monitor.beginTask(NLS.bind(CoreText.CloneOperation_title,uri),5000);
    CloneCommand cloneRepository=Git.cloneRepository();
    cloneRepository.setCredentialsProvider(credentialsProvider);
    if (refName != null)     cloneRepository.setBranch(refName);
    cloneRepository.setDirectory(workdir);
    cloneRepository.setProgressMonitor(gitMonitor);
    cloneRepository.setRemote(remoteName);
    cloneRepository.setURI(uri.toString());
    cloneRepository.setTimeout(timeout);
    cloneRepository.setCloneAllBranches(allSelected);
    if (selectedBranches != null) {
      List<String> branches=new ArrayList<String>();
      for (      Ref branch : selectedBranches)       branches.add(branch.getName());
      cloneRepository.setBranchesToClone(branches);
    }
    Git git=cloneRepository.call();
    repository=git.getRepository();
    if (postCloneTasks != null)     for (    PostCloneTask task : postCloneTasks)     task.execute(git.getRepository(),monitor);
  }
 catch (  final Exception e) {
    try {
      if (repository != null)       repository.close();
      FileUtils.delete(workdir,FileUtils.RECURSIVE);
    }
 catch (    IOException ioe) {
      throw new InvocationTargetException(ioe);
    }
    if (monitor.isCanceled())     throw new InterruptedException();
 else     throw new InvocationTargetException(e);
  }
 finally {
    monitor.done();
    if (repository != null)     repository.close();
  }
}","/** 
 * @param pm the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException
 * @throws InterruptedException
 */
public void run(final IProgressMonitor pm) throws InvocationTargetException, InterruptedException {
  final IProgressMonitor monitor;
  if (pm == null)   monitor=new NullProgressMonitor();
 else   monitor=pm;
  EclipseGitProgressTransformer gitMonitor=new EclipseGitProgressTransformer(monitor);
  Repository repository=null;
  try {
    monitor.beginTask(NLS.bind(CoreText.CloneOperation_title,uri),5000);
    CloneCommand cloneRepository=Git.cloneRepository();
    cloneRepository.setCredentialsProvider(credentialsProvider);
    if (refName != null)     cloneRepository.setBranch(refName);
    cloneRepository.setDirectory(workdir);
    cloneRepository.setProgressMonitor(gitMonitor);
    cloneRepository.setRemote(remoteName);
    cloneRepository.setURI(uri.toString());
    cloneRepository.setTimeout(timeout);
    cloneRepository.setCloneAllBranches(allSelected);
    if (selectedBranches != null) {
      List<String> branches=new ArrayList<String>();
      for (      Ref branch : selectedBranches)       branches.add(branch.getName());
      cloneRepository.setBranchesToClone(branches);
    }
    Git git=cloneRepository.call();
    repository=git.getRepository();
synchronized (this) {
      if (postCloneTasks != null)       for (      PostCloneTask task : postCloneTasks)       task.execute(git.getRepository(),monitor);
    }
  }
 catch (  final Exception e) {
    try {
      if (repository != null)       repository.close();
      FileUtils.delete(workdir,FileUtils.RECURSIVE);
    }
 catch (    IOException ioe) {
      throw new InvocationTargetException(ioe);
    }
    if (monitor.isCanceled())     throw new InterruptedException();
 else     throw new InvocationTargetException(e);
  }
 finally {
    monitor.done();
    if (repository != null)     repository.close();
  }
}",0.9909319899244332
7694,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelBlob && !(obj instanceof GitModelCacheFile) && !(obj instanceof GitModelWorkingFile)) {
    GitModelBlob objBlob=(GitModelBlob)obj;
    boolean equalsRemoteId;
    ObjectId objRemoteId=objBlob.remoteId;
    if (objRemoteId != null)     equalsRemoteId=objRemoteId.equals(remoteId);
 else     equalsRemoteId=remoteId == null;
    return objBlob.baseId.equals(baseId) && equalsRemoteId && objBlob.location.equals(location);
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelBlob objBlob=(GitModelBlob)obj;
  boolean equalsRemoteId;
  ObjectId objRemoteId=objBlob.remoteId;
  if (objRemoteId != null)   equalsRemoteId=objRemoteId.equals(remoteId);
 else   equalsRemoteId=remoteId == null;
  return objBlob.baseId.equals(baseId) && equalsRemoteId && objBlob.location.equals(location);
}",0.1949806949806949
7695,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelCacheFile) {
    GitModelCacheFile objBlob=(GitModelCacheFile)obj;
    return objBlob.baseId.equals(baseId) && objBlob.remoteId.equals(remoteId) && objBlob.getLocation().equals(getLocation());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelCacheFile objBlob=(GitModelCacheFile)obj;
  return objBlob.baseId.equals(baseId) && objBlob.remoteId.equals(remoteId) && objBlob.getLocation().equals(getLocation());
}",0.7488721804511278
7696,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelCacheTree) {
    GitModelCacheTree objTree=(GitModelCacheTree)obj;
    return objTree.getLocation().equals(getLocation()) && objTree.getBaseId().equals(getBaseId());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelCacheTree objTree=(GitModelCacheTree)obj;
  return objTree.getLocation().equals(getLocation()) && objTree.getBaseId().equals(getBaseId());
}",0.7266775777414075
7697,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelCommit && !(obj instanceof GitModelTree) && !(obj instanceof GitModelBlob)) {
    GitModelCommit objCommit=(GitModelCommit)obj;
    return objCommit.getBaseCommit().equals(baseCommit) && objCommit.getParent().equals(getParent());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelCommit objCommit=(GitModelCommit)obj;
  return objCommit.getBaseCommit().equals(baseCommit) && objCommit.getParent().equals(getParent());
}",0.3887240356083086
7698,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelTree && !(obj instanceof GitModelCacheTree)) {
    GitModelTree objTree=(GitModelTree)obj;
    return objTree.location.equals(location) && objTree.baseCommit.equals(baseCommit);
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelTree objTree=(GitModelTree)obj;
  return objTree.location.equals(location) && objTree.baseCommit.equals(baseCommit);
}",0.3826955074875208
7699,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelWorkingFile)   return ((GitModelWorkingFile)obj).getLocation().equals(getLocation());
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  return ((GitModelWorkingFile)obj).getLocation().equals(getLocation());
}",0.6740576496674058
7700,"@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj instanceof GitModelWorkingTree) {
    GitModelCache left=(GitModelCache)obj;
    return left.getParent().equals(getParent());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == this)   return true;
  if (obj == null)   return false;
  if (obj.getClass() != getClass())   return false;
  GitModelCache left=(GitModelCache)obj;
  return left.getParent().equals(getParent());
}",0.6476578411405295
7701,"public Object execute(ExecutionEvent event) throws ExecutionException {
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  Repository repo=getRepository(event);
  CherryPickResult cherryPickResult;
  Git git=new Git(repo);
  Shell parent=getPart(event).getSite().getShell();
  try {
    cherryPickResult=git.cherryPick().include(commit.getId()).call();
    newHead=cherryPickResult.getNewHead();
    if (newHead != null && cherryPickResult.getCherryPickedRefs().isEmpty())     MessageDialog.openWarning(parent,UIText.CherryPickHandler_NoCherryPickPerformedTitle,UIText.CherryPickHandler_NoCherryPickPerformedMessage);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.CherryPickOperation_InternalError,e);
  }
  if (newHead == null)   if (cherryPickResult.getStatus() == CherryPickStatus.CONFLICTING)   MessageDialog.openWarning(parent,UIText.CherryPickHandler_CherryPickConflictsTitle,UIText.CherryPickHandler_CherryPickConflictsMessage);
 else   throw new ExecutionException(UIText.CherryPickOperation_Failed);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  Repository repo=getRepository(event);
  CherryPickResult cherryPickResult;
  Git git=new Git(repo);
  Shell parent=getPart(event).getSite().getShell();
  try {
    cherryPickResult=git.cherryPick().include(commit.getId()).call();
    newHead=cherryPickResult.getNewHead();
    if (newHead != null && cherryPickResult.getCherryPickedRefs().isEmpty())     MessageDialog.openWarning(parent,UIText.CherryPickHandler_NoCherryPickPerformedTitle,UIText.CherryPickHandler_NoCherryPickPerformedMessage);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.CherryPickOperation_InternalError,e);
  }
  if (newHead == null) {
    CherryPickStatus status=cherryPickResult.getStatus();
switch (status) {
case CONFLICTING:
      MessageDialog.openWarning(parent,UIText.CherryPickHandler_CherryPickConflictsTitle,UIText.CherryPickHandler_CherryPickConflictsMessage);
    break;
case FAILED:
  IStatus details=getErrorList(cherryPickResult.getFailingPaths());
Activator.showErrorStatus(UIText.CherryPickHandler_CherryPickFailedMessage,details);
break;
case OK:
break;
}
}
return null;
}",0.853855986365573
7702,"public Object execute(ExecutionEvent event) throws ExecutionException {
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  Repository repo=getRepository(event);
  CherryPickResult cherryPickResult;
  Git git=new Git(repo);
  Shell parent=getPart(event).getSite().getShell();
  try {
    cherryPickResult=git.cherryPick().include(commit.getId()).call();
    newHead=cherryPickResult.getNewHead();
    if (newHead != null && cherryPickResult.getCherryPickedRefs().isEmpty())     MessageDialog.openWarning(parent,UIText.CherryPickHandler_NoCherryPickPerformedTitle,UIText.CherryPickHandler_NoCherryPickPerformedMessage);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.CherryPickOperation_InternalError,e);
  }
  if (newHead == null)   if (cherryPickResult.getStatus() == CherryPickStatus.CONFLICTING)   MessageDialog.openWarning(parent,UIText.CherryPickHandler_CherryPickConflictsTitle,UIText.CherryPickHandler_CherryPickConflictsMessage);
 else   throw new ExecutionException(UIText.CherryPickOperation_Failed);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  RevCommit commit=(RevCommit)getSelection(getPage()).getFirstElement();
  RevCommit newHead;
  Repository repo=getRepository(event);
  CherryPickResult cherryPickResult;
  Git git=new Git(repo);
  Shell parent=getPart(event).getSite().getShell();
  try {
    cherryPickResult=git.cherryPick().include(commit.getId()).call();
    newHead=cherryPickResult.getNewHead();
    if (newHead != null && cherryPickResult.getCherryPickedRefs().isEmpty())     MessageDialog.openWarning(parent,UIText.CherryPickHandler_NoCherryPickPerformedTitle,UIText.CherryPickHandler_NoCherryPickPerformedMessage);
  }
 catch (  Exception e) {
    throw new ExecutionException(UIText.CherryPickOperation_InternalError,e);
  }
  if (newHead == null) {
    CherryPickStatus status=cherryPickResult.getStatus();
switch (status) {
case CONFLICTING:
      MessageDialog.openWarning(parent,UIText.CherryPickHandler_CherryPickConflictsTitle,UIText.CherryPickHandler_CherryPickConflictsMessage);
    break;
case FAILED:
  IStatus details=getErrorList(cherryPickResult.getFailingPaths());
Activator.showErrorStatus(UIText.CherryPickHandler_CherryPickFailedMessage,details);
break;
case OK:
break;
}
}
return null;
}",0.853855986365573
7703,"/** 
 * @return state
 */
public CommitMessageComponentState getState(){
  updateStateFromUI();
  CommitMessageComponentState state=new CommitMessageComponentState();
  state.setAmend(isAmending());
  state.setAuthor(getAuthor());
  state.setCommitMessage(getCommitMessage());
  state.setCommitter(getCommitter());
  state.setHeadCommit(getHeadCommit());
  return state;
}","/** 
 * @return state
 */
public CommitMessageComponentState getState(){
  updateStateFromUI();
  CommitMessageComponentState state=new CommitMessageComponentState();
  state.setAmend(isAmending());
  state.setAuthor(getAuthor());
  state.setCommitMessage(commitText.getText());
  state.setCommitter(getCommitter());
  state.setHeadCommit(getHeadCommit());
  return state;
}",0.9544235924932976
7704,"/** 
 * @param shell
 * @param repository
 * @param config
 */
private SimpleConfigureFetchDialog(Shell shell,Repository repository,RemoteConfig config){
  super(shell);
  setHelpAvailable(false);
  this.repository=repository;
  this.config=config;
}","/** 
 * @param shell
 * @param repository
 * @param config
 */
private SimpleConfigureFetchDialog(Shell shell,Repository repository,RemoteConfig config){
  super(shell);
  setHelpAvailable(false);
  setShellStyle(getShellStyle() | SWT.SHELL_TRIM);
  this.repository=repository;
  this.config=config;
}",0.8929219600725953
7705,"@Override protected Control createDialogArea(Composite parent){
  boolean advancedMode=Activator.getDefault().getPreferenceStore().getBoolean(ADVANCED_MODE_PREFERENCE);
  final Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Composite repositoryGroup=new Composite(main,SWT.SHADOW_ETCHED_IN);
  repositoryGroup.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryGroup);
  Label repositoryLabel=new Label(repositoryGroup,SWT.NONE);
  repositoryLabel.setText(UIText.SimpleConfigureFetchDialog_RepositoryLabel);
  Text repositoryText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryText);
  repositoryText.setText(Activator.getDefault().getRepositoryUtil().getRepositoryName(repository));
  Label branchLabel=new Label(repositoryGroup,SWT.NONE);
  branchLabel.setText(UIText.SimpleConfigureFetchDialog_BranchLabel);
  String branch;
  try {
    branch=repository.getBranch();
  }
 catch (  IOException e2) {
    branch=null;
  }
  if (branch == null || ObjectId.isId(branch)) {
    branch=UIText.SimpleConfigureFetchDialog_DetachedHeadMessage;
  }
  Text branchText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(branchText);
  branchText.setText(branch);
  Group remoteGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  remoteGroup.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(remoteGroup);
  remoteGroup.setText(NLS.bind(UIText.SimpleConfigureFetchDialog_RemoteGroupHeader,config.getName()));
  addDefaultOriginWarningIfNeeded(remoteGroup);
  final Composite sameUriDetails=new Composite(remoteGroup,SWT.NONE);
  sameUriDetails.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sameUriDetails);
  Label commonUriLabel=new Label(sameUriDetails,SWT.NONE);
  commonUriLabel.setText(UIText.SimpleConfigureFetchDialog_UriLabel);
  commonUriText=new Text(sameUriDetails,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commonUriText);
  changeCommonUri=new Button(sameUriDetails,SWT.PUSH);
  changeCommonUri.setText(UIText.SimpleConfigureFetchDialog_ChangeUriButton);
  changeCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz;
      if (commonUriText.getText().length() > 0)       wiz=new SelectUriWizard(false,commonUriText.getText());
 else       wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        if (commonUriText.getText().length() > 0)         try {
          config.removeURI(new URIish(commonUriText.getText()));
        }
 catch (        URISyntaxException ex) {
          Activator.handleError(ex.getMessage(),ex,true);
        }
        config.addURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button deleteCommonUri=new Button(sameUriDetails,SWT.PUSH);
  deleteCommonUri.setText(UIText.SimpleConfigureFetchDialog_DeleteUriButton);
  deleteCommonUri.setEnabled(false);
  deleteCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      config.removeURI(config.getURIs().get(0));
      updateControls();
    }
  }
);
  commonUriText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      deleteCommonUri.setEnabled(commonUriText.getText().length() > 0);
    }
  }
);
  final Group refSpecGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(refSpecGroup);
  refSpecGroup.setText(UIText.SimpleConfigureFetchDialog_RefMappingGroup);
  refSpecGroup.setLayout(new GridLayout(5,false));
  ExpandableComposite advanced=new ExpandableComposite(refSpecGroup,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
  if (advancedMode)   advanced.setExpanded(true);
  advanced.setText(UIText.SimpleConfigureFetchDialog_AdvancedCompositeButton);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(5,1).grab(true,false).applyTo(advanced);
  advanced.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      Activator.getDefault().getPreferenceStore().setValue(ADVANCED_MODE_PREFERENCE,e.getState());
      GridData data=(GridData)changeRefSpec.getLayoutData();
      data.exclude=!e.getState();
      changeRefSpec.setVisible(!data.exclude);
      refSpecGroup.layout(true);
    }
  }
);
  Label refSpecLabel=new Label(refSpecGroup,SWT.NONE);
  refSpecLabel.setText(UIText.SimpleConfigureFetchDialog_RefSpecLabel);
  GridDataFactory.fillDefaults().span(5,1).applyTo(refSpecLabel);
  specViewer=new TableViewer(refSpecGroup,SWT.BORDER | SWT.MULTI);
  specViewer.setContentProvider(ArrayContentProvider.getInstance());
  GridDataFactory.fillDefaults().hint(SWT.DEFAULT,150).span(5,1).grab(true,true).applyTo(specViewer.getTable());
  specViewer.getTable().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.stateMask == SWT.MOD1 && e.keyCode == 'v') {
        doPaste();
      }
    }
  }
);
  addRefSpec=new Button(refSpecGroup,SWT.PUSH);
  addRefSpec.setText(UIText.SimpleConfigureFetchDialog_AddRefSpecButton);
  addRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SimpleFetchRefSpecWizard wiz=new SimpleFetchRefSpecWizard(repository,config);
      WizardDialog dlg=new WizardDialog(getShell(),wiz);
      if (dlg.open() == Window.OK) {
        config.addFetchRefSpec(wiz.getSpec());
      }
      updateControls();
    }
  }
);
  changeRefSpec=new Button(refSpecGroup,SWT.PUSH);
  changeRefSpec.setText(UIText.SimpleConfigureFetchDialog_ChangeRefSpecButton);
  changeRefSpec.setEnabled(false);
  GridDataFactory.fillDefaults().exclude(!advancedMode).applyTo(changeRefSpec);
  changeRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpec oldSpec=(RefSpec)((IStructuredSelection)specViewer.getSelection()).getFirstElement();
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,oldSpec,false);
      if (dlg.open() == Window.OK) {
        config.removeFetchRefSpec(oldSpec);
        config.addFetchRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  final Button deleteRefSpec=new Button(refSpecGroup,SWT.PUSH);
  deleteRefSpec.setText(UIText.SimpleConfigureFetchDialog_DeleteRefSpecButton);
  deleteRefSpec.setEnabled(false);
  deleteRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      Object spec : ((IStructuredSelection)specViewer.getSelection()).toArray()) {
        config.removeFetchRefSpec((RefSpec)spec);
      }
      updateControls();
    }
  }
);
  final Button copySpec=new Button(refSpecGroup,SWT.PUSH);
  copySpec.setText(UIText.SimpleConfigureFetchDialog_CopyRefSpecButton);
  copySpec.setEnabled(false);
  copySpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String toCopy=((IStructuredSelection)specViewer.getSelection()).getFirstElement().toString();
      Clipboard clipboard=new Clipboard(getShell().getDisplay());
      try {
        clipboard.setContents(new String[]{toCopy},new TextTransfer[]{TextTransfer.getInstance()});
      }
  finally {
        clipboard.dispose();
      }
    }
  }
);
  final Button pasteSpec=new Button(refSpecGroup,SWT.PUSH);
  pasteSpec.setText(UIText.SimpleConfigureFetchDialog_PateRefSpecButton);
  pasteSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      doPaste();
    }
  }
);
  addRefSpecAdvanced=new Button(advanced,SWT.PUSH);
  advanced.setClient(addRefSpecAdvanced);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).applyTo(addRefSpecAdvanced);
  addRefSpecAdvanced.setText(UIText.SimpleConfigureFetchDialog_EditAdvancedButton);
  addRefSpecAdvanced.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (new WizardDialog(getShell(),new RefSpecWizard(repository,config,false)).open() == Window.OK)       updateControls();
    }
  }
);
  specViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)specViewer.getSelection();
      copySpec.setEnabled(sel.size() == 1);
      changeRefSpec.setEnabled(sel.size() == 1);
      deleteRefSpec.setEnabled(!sel.isEmpty());
    }
  }
);
  applyDialogFont(main);
  return main;
}","@Override protected Control createDialogArea(Composite parent){
  boolean advancedMode=Activator.getDefault().getPreferenceStore().getBoolean(ADVANCED_MODE_PREFERENCE);
  final Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Composite repositoryGroup=new Composite(main,SWT.SHADOW_ETCHED_IN);
  repositoryGroup.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryGroup);
  Label repositoryLabel=new Label(repositoryGroup,SWT.NONE);
  repositoryLabel.setText(UIText.SimpleConfigureFetchDialog_RepositoryLabel);
  Text repositoryText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryText);
  repositoryText.setText(Activator.getDefault().getRepositoryUtil().getRepositoryName(repository));
  Label branchLabel=new Label(repositoryGroup,SWT.NONE);
  branchLabel.setText(UIText.SimpleConfigureFetchDialog_BranchLabel);
  String branch;
  try {
    branch=repository.getBranch();
  }
 catch (  IOException e2) {
    branch=null;
  }
  if (branch == null || ObjectId.isId(branch)) {
    branch=UIText.SimpleConfigureFetchDialog_DetachedHeadMessage;
  }
  Text branchText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(branchText);
  branchText.setText(branch);
  Group remoteGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  remoteGroup.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(remoteGroup);
  remoteGroup.setText(NLS.bind(UIText.SimpleConfigureFetchDialog_RemoteGroupHeader,config.getName()));
  addDefaultOriginWarningIfNeeded(remoteGroup);
  final Composite sameUriDetails=new Composite(remoteGroup,SWT.NONE);
  sameUriDetails.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sameUriDetails);
  Label commonUriLabel=new Label(sameUriDetails,SWT.NONE);
  commonUriLabel.setText(UIText.SimpleConfigureFetchDialog_UriLabel);
  commonUriText=new Text(sameUriDetails,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commonUriText);
  changeCommonUri=new Button(sameUriDetails,SWT.PUSH);
  changeCommonUri.setText(UIText.SimpleConfigureFetchDialog_ChangeUriButton);
  changeCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz;
      if (commonUriText.getText().length() > 0)       wiz=new SelectUriWizard(false,commonUriText.getText());
 else       wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        if (commonUriText.getText().length() > 0)         try {
          config.removeURI(new URIish(commonUriText.getText()));
        }
 catch (        URISyntaxException ex) {
          Activator.handleError(ex.getMessage(),ex,true);
        }
        config.addURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button deleteCommonUri=new Button(sameUriDetails,SWT.PUSH);
  deleteCommonUri.setText(UIText.SimpleConfigureFetchDialog_DeleteUriButton);
  deleteCommonUri.setEnabled(false);
  deleteCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      config.removeURI(config.getURIs().get(0));
      updateControls();
    }
  }
);
  commonUriText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      deleteCommonUri.setEnabled(commonUriText.getText().length() > 0);
    }
  }
);
  final Group refSpecGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(refSpecGroup);
  refSpecGroup.setText(UIText.SimpleConfigureFetchDialog_RefMappingGroup);
  refSpecGroup.setLayout(new GridLayout(5,false));
  ExpandableComposite advanced=new ExpandableComposite(refSpecGroup,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
  if (advancedMode)   advanced.setExpanded(true);
  advanced.setText(UIText.SimpleConfigureFetchDialog_AdvancedCompositeButton);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(5,1).grab(true,false).applyTo(advanced);
  advanced.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      Activator.getDefault().getPreferenceStore().setValue(ADVANCED_MODE_PREFERENCE,e.getState());
      GridData data=(GridData)changeRefSpec.getLayoutData();
      data.exclude=!e.getState();
      changeRefSpec.setVisible(!data.exclude);
      refSpecGroup.layout(true);
    }
  }
);
  Label refSpecLabel=new Label(refSpecGroup,SWT.NONE);
  refSpecLabel.setText(UIText.SimpleConfigureFetchDialog_RefSpecLabel);
  GridDataFactory.fillDefaults().span(5,1).applyTo(refSpecLabel);
  specViewer=new TableViewer(refSpecGroup,SWT.BORDER | SWT.MULTI);
  specViewer.setContentProvider(ArrayContentProvider.getInstance());
  GridDataFactory.fillDefaults().hint(SWT.DEFAULT,150).minSize(SWT.DEFAULT,30).span(5,1).grab(true,true).applyTo(specViewer.getTable());
  specViewer.getTable().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.stateMask == SWT.MOD1 && e.keyCode == 'v') {
        doPaste();
      }
    }
  }
);
  addRefSpec=new Button(refSpecGroup,SWT.PUSH);
  addRefSpec.setText(UIText.SimpleConfigureFetchDialog_AddRefSpecButton);
  addRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SimpleFetchRefSpecWizard wiz=new SimpleFetchRefSpecWizard(repository,config);
      WizardDialog dlg=new WizardDialog(getShell(),wiz);
      if (dlg.open() == Window.OK) {
        config.addFetchRefSpec(wiz.getSpec());
      }
      updateControls();
    }
  }
);
  changeRefSpec=new Button(refSpecGroup,SWT.PUSH);
  changeRefSpec.setText(UIText.SimpleConfigureFetchDialog_ChangeRefSpecButton);
  changeRefSpec.setEnabled(false);
  GridDataFactory.fillDefaults().exclude(!advancedMode).applyTo(changeRefSpec);
  changeRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpec oldSpec=(RefSpec)((IStructuredSelection)specViewer.getSelection()).getFirstElement();
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,oldSpec,false);
      if (dlg.open() == Window.OK) {
        config.removeFetchRefSpec(oldSpec);
        config.addFetchRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  final Button deleteRefSpec=new Button(refSpecGroup,SWT.PUSH);
  deleteRefSpec.setText(UIText.SimpleConfigureFetchDialog_DeleteRefSpecButton);
  deleteRefSpec.setEnabled(false);
  deleteRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      Object spec : ((IStructuredSelection)specViewer.getSelection()).toArray()) {
        config.removeFetchRefSpec((RefSpec)spec);
      }
      updateControls();
    }
  }
);
  final Button copySpec=new Button(refSpecGroup,SWT.PUSH);
  copySpec.setText(UIText.SimpleConfigureFetchDialog_CopyRefSpecButton);
  copySpec.setEnabled(false);
  copySpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String toCopy=((IStructuredSelection)specViewer.getSelection()).getFirstElement().toString();
      Clipboard clipboard=new Clipboard(getShell().getDisplay());
      try {
        clipboard.setContents(new String[]{toCopy},new TextTransfer[]{TextTransfer.getInstance()});
      }
  finally {
        clipboard.dispose();
      }
    }
  }
);
  final Button pasteSpec=new Button(refSpecGroup,SWT.PUSH);
  pasteSpec.setText(UIText.SimpleConfigureFetchDialog_PateRefSpecButton);
  pasteSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      doPaste();
    }
  }
);
  addRefSpecAdvanced=new Button(advanced,SWT.PUSH);
  advanced.setClient(addRefSpecAdvanced);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).applyTo(addRefSpecAdvanced);
  addRefSpecAdvanced.setText(UIText.SimpleConfigureFetchDialog_EditAdvancedButton);
  addRefSpecAdvanced.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (new WizardDialog(getShell(),new RefSpecWizard(repository,config,false)).open() == Window.OK)       updateControls();
    }
  }
);
  specViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)specViewer.getSelection();
      copySpec.setEnabled(sel.size() == 1);
      changeRefSpec.setEnabled(sel.size() == 1);
      deleteRefSpec.setEnabled(!sel.isEmpty());
    }
  }
);
  applyDialogFont(main);
  return main;
}",0.9986674069961132
7706,"@Override protected Control createDialogArea(Composite parent){
  boolean advancedMode=Activator.getDefault().getPreferenceStore().getBoolean(ADVANCED_MODE_PREFERENCE);
  final Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Composite repositoryGroup=new Composite(main,SWT.SHADOW_ETCHED_IN);
  repositoryGroup.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(repositoryGroup);
  Label repositoryLabel=new Label(repositoryGroup,SWT.NONE);
  repositoryLabel.setText(UIText.SimpleConfigurePushDialog_RepositoryLabel);
  Text repositoryText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryText);
  repositoryText.setText(Activator.getDefault().getRepositoryUtil().getRepositoryName(repository));
  Label branchLabel=new Label(repositoryGroup,SWT.NONE);
  branchLabel.setText(UIText.SimpleConfigurePushDialog_BranchLabel);
  String branch;
  try {
    branch=repository.getBranch();
  }
 catch (  IOException e2) {
    branch=null;
  }
  if (branch == null || ObjectId.isId(branch)) {
    branch=UIText.SimpleConfigurePushDialog_DetachedHeadMessage;
  }
  Text branchText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(branchText);
  branchText.setText(branch);
  Group remoteGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  remoteGroup.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(remoteGroup);
  remoteGroup.setText(NLS.bind(UIText.SimpleConfigurePushDialog_RemoteGroupTitle,config.getName()));
  addDefaultOriginWarningIfNeeded(remoteGroup);
  Group uriGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  uriGroup.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(uriGroup);
  uriGroup.setText(UIText.SimpleConfigurePushDialog_UriGroup);
  final Composite sameUriDetails=new Composite(uriGroup,SWT.NONE);
  sameUriDetails.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sameUriDetails);
  Label commonUriLabel=new Label(sameUriDetails,SWT.NONE);
  commonUriLabel.setText(UIText.SimpleConfigurePushDialog_URILabel);
  commonUriText=new Text(sameUriDetails,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commonUriText);
  changeCommonUri=new Button(sameUriDetails,SWT.PUSH);
  changeCommonUri.setText(UIText.SimpleConfigurePushDialog_ChangeUriButton);
  changeCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz;
      if (commonUriText.getText().length() > 0)       wiz=new SelectUriWizard(false,commonUriText.getText());
 else       wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        if (commonUriText.getText().length() > 0)         try {
          config.removeURI(new URIish(commonUriText.getText()));
        }
 catch (        URISyntaxException ex) {
          Activator.handleError(ex.getMessage(),ex,true);
        }
        config.addURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  deleteCommonUri=new Button(sameUriDetails,SWT.PUSH);
  deleteCommonUri.setText(UIText.SimpleConfigurePushDialog_DeleteUriButton);
  deleteCommonUri.setEnabled(false);
  deleteCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      config.removeURI(config.getURIs().get(0));
      updateControls();
    }
  }
);
  commonUriText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      deleteCommonUri.setEnabled(commonUriText.getText().length() > 0);
    }
  }
);
  final Composite pushUriDetails=new Composite(uriGroup,SWT.NONE);
  pushUriDetails.setLayout(new GridLayout(3,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(pushUriDetails);
  Label urisLabel=new Label(pushUriDetails,SWT.NONE);
  urisLabel.setText(UIText.SimpleConfigurePushDialog_PushUrisLabel);
  GridDataFactory.fillDefaults().span(3,1).applyTo(urisLabel);
  uriViewer=new TableViewer(pushUriDetails,SWT.BORDER | SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,true).span(3,1).applyTo(uriViewer.getTable());
  uriViewer.setContentProvider(ArrayContentProvider.getInstance());
  Button addUri=new Button(pushUriDetails,SWT.PUSH);
  addUri.setText(UIText.SimpleConfigurePushDialog_AddPushUriButton);
  addUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        config.addPushURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button changeUri=new Button(pushUriDetails,SWT.PUSH);
  changeUri.setText(UIText.SimpleConfigurePushDialog_ChangePushUriButton);
  changeUri.setEnabled(false);
  changeUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      URIish uri=(URIish)((IStructuredSelection)uriViewer.getSelection()).getFirstElement();
      SelectUriWizard wiz=new SelectUriWizard(false,uri.toPrivateString());
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        config.removePushURI(uri);
        config.addPushURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button deleteUri=new Button(pushUriDetails,SWT.PUSH);
  deleteUri.setText(UIText.SimpleConfigurePushDialog_DeletePushUriButton);
  deleteUri.setEnabled(false);
  deleteUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      URIish uri=(URIish)((IStructuredSelection)uriViewer.getSelection()).getFirstElement();
      config.removePushURI(uri);
      updateControls();
    }
  }
);
  uriViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      deleteUri.setEnabled(!uriViewer.getSelection().isEmpty());
      changeUri.setEnabled(((IStructuredSelection)uriViewer.getSelection()).size() == 1);
    }
  }
);
  final Group refSpecGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(refSpecGroup);
  refSpecGroup.setText(UIText.SimpleConfigurePushDialog_RefMappingGroup);
  refSpecGroup.setLayout(new GridLayout(5,false));
  ExpandableComposite advanced=new ExpandableComposite(refSpecGroup,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
  if (advancedMode)   advanced.setExpanded(true);
  advanced.setText(UIText.SimpleConfigurePushDialog_AdvancedButton);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(5,1).grab(true,false).applyTo(advanced);
  advanced.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      Activator.getDefault().getPreferenceStore().setValue(ADVANCED_MODE_PREFERENCE,e.getState());
      GridData data=(GridData)changeRefSpec.getLayoutData();
      data.exclude=!e.getState();
      changeRefSpec.setVisible(!data.exclude);
      refSpecGroup.layout(true);
    }
  }
);
  Label refSpecLabel=new Label(refSpecGroup,SWT.NONE);
  refSpecLabel.setText(UIText.SimpleConfigurePushDialog_RefSpecLabel);
  GridDataFactory.fillDefaults().span(5,1).applyTo(refSpecLabel);
  specViewer=new TableViewer(refSpecGroup,SWT.BORDER | SWT.MULTI);
  specViewer.setContentProvider(ArrayContentProvider.getInstance());
  GridDataFactory.fillDefaults().span(5,1).grab(true,true).applyTo(specViewer.getTable());
  specViewer.getTable().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.stateMask == SWT.MOD1 && e.keyCode == 'v') {
        doPaste();
      }
    }
  }
);
  addRefSpec=new Button(refSpecGroup,SWT.PUSH);
  addRefSpec.setText(UIText.SimpleConfigurePushDialog_AddRefSpecButton);
  addRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,true);
      if (dlg.open() == Window.OK) {
        config.addPushRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  changeRefSpec=new Button(refSpecGroup,SWT.PUSH);
  changeRefSpec.setText(UIText.SimpleConfigurePushDialog_ChangeRefSpecButton);
  changeRefSpec.setEnabled(false);
  GridDataFactory.fillDefaults().exclude(!advancedMode).applyTo(changeRefSpec);
  changeRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpec oldSpec=(RefSpec)((IStructuredSelection)specViewer.getSelection()).getFirstElement();
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,oldSpec,true);
      if (dlg.open() == Window.OK) {
        config.removePushRefSpec(oldSpec);
        config.addPushRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  final Button deleteRefSpec=new Button(refSpecGroup,SWT.PUSH);
  deleteRefSpec.setText(UIText.SimpleConfigurePushDialog_DeleteRefSpecButton);
  deleteRefSpec.setEnabled(false);
  deleteRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      Object spec : ((IStructuredSelection)specViewer.getSelection()).toArray()) {
        config.removePushRefSpec((RefSpec)spec);
      }
      updateControls();
    }
  }
);
  final Button copySpec=new Button(refSpecGroup,SWT.PUSH);
  copySpec.setText(UIText.SimpleConfigurePushDialog_CopyRefSpecButton);
  copySpec.setEnabled(false);
  copySpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String toCopy=((IStructuredSelection)specViewer.getSelection()).getFirstElement().toString();
      Clipboard clipboard=new Clipboard(getShell().getDisplay());
      try {
        clipboard.setContents(new String[]{toCopy},new TextTransfer[]{TextTransfer.getInstance()});
      }
  finally {
        clipboard.dispose();
      }
    }
  }
);
  final Button pasteSpec=new Button(refSpecGroup,SWT.PUSH);
  pasteSpec.setText(UIText.SimpleConfigurePushDialog_PasteRefSpecButton);
  pasteSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      doPaste();
    }
  }
);
  addRefSpecAdvanced=new Button(advanced,SWT.PUSH);
  advanced.setClient(addRefSpecAdvanced);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(3,1).applyTo(addRefSpecAdvanced);
  addRefSpecAdvanced.setText(UIText.SimpleConfigurePushDialog_EditAdvancedButton);
  addRefSpecAdvanced.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (new WizardDialog(getShell(),new RefSpecWizard(repository,config,true)).open() == Window.OK)       updateControls();
    }
  }
);
  specViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)specViewer.getSelection();
      copySpec.setEnabled(sel.size() == 1);
      changeRefSpec.setEnabled(sel.size() == 1);
      deleteRefSpec.setEnabled(!sel.isEmpty());
    }
  }
);
  applyDialogFont(main);
  return main;
}","@Override protected Control createDialogArea(Composite parent){
  boolean advancedMode=Activator.getDefault().getPreferenceStore().getBoolean(ADVANCED_MODE_PREFERENCE);
  final Composite main=new Composite(parent,SWT.NONE);
  main.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(main);
  Composite repositoryGroup=new Composite(main,SWT.SHADOW_ETCHED_IN);
  repositoryGroup.setLayout(new GridLayout(2,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(repositoryGroup);
  Label repositoryLabel=new Label(repositoryGroup,SWT.NONE);
  repositoryLabel.setText(UIText.SimpleConfigurePushDialog_RepositoryLabel);
  Text repositoryText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(repositoryText);
  repositoryText.setText(Activator.getDefault().getRepositoryUtil().getRepositoryName(repository));
  Label branchLabel=new Label(repositoryGroup,SWT.NONE);
  branchLabel.setText(UIText.SimpleConfigurePushDialog_BranchLabel);
  String branch;
  try {
    branch=repository.getBranch();
  }
 catch (  IOException e2) {
    branch=null;
  }
  if (branch == null || ObjectId.isId(branch)) {
    branch=UIText.SimpleConfigurePushDialog_DetachedHeadMessage;
  }
  Text branchText=new Text(repositoryGroup,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(branchText);
  branchText.setText(branch);
  Group remoteGroup=new Group(main,SWT.SHADOW_ETCHED_IN);
  remoteGroup.setLayout(new GridLayout());
  GridDataFactory.fillDefaults().grab(true,true).applyTo(remoteGroup);
  remoteGroup.setText(NLS.bind(UIText.SimpleConfigurePushDialog_RemoteGroupTitle,config.getName()));
  addDefaultOriginWarningIfNeeded(remoteGroup);
  Group uriGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  uriGroup.setLayout(new GridLayout(1,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(uriGroup);
  uriGroup.setText(UIText.SimpleConfigurePushDialog_UriGroup);
  final Composite sameUriDetails=new Composite(uriGroup,SWT.NONE);
  sameUriDetails.setLayout(new GridLayout(4,false));
  GridDataFactory.fillDefaults().grab(true,false).applyTo(sameUriDetails);
  Label commonUriLabel=new Label(sameUriDetails,SWT.NONE);
  commonUriLabel.setText(UIText.SimpleConfigurePushDialog_URILabel);
  commonUriText=new Text(sameUriDetails,SWT.BORDER | SWT.READ_ONLY);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commonUriText);
  changeCommonUri=new Button(sameUriDetails,SWT.PUSH);
  changeCommonUri.setText(UIText.SimpleConfigurePushDialog_ChangeUriButton);
  changeCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz;
      if (commonUriText.getText().length() > 0)       wiz=new SelectUriWizard(false,commonUriText.getText());
 else       wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        if (commonUriText.getText().length() > 0)         try {
          config.removeURI(new URIish(commonUriText.getText()));
        }
 catch (        URISyntaxException ex) {
          Activator.handleError(ex.getMessage(),ex,true);
        }
        config.addURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  deleteCommonUri=new Button(sameUriDetails,SWT.PUSH);
  deleteCommonUri.setText(UIText.SimpleConfigurePushDialog_DeleteUriButton);
  deleteCommonUri.setEnabled(false);
  deleteCommonUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      config.removeURI(config.getURIs().get(0));
      updateControls();
    }
  }
);
  commonUriText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      deleteCommonUri.setEnabled(commonUriText.getText().length() > 0);
    }
  }
);
  final Composite pushUriDetails=new Composite(uriGroup,SWT.NONE);
  pushUriDetails.setLayout(new GridLayout(3,false));
  GridDataFactory.fillDefaults().grab(true,true).applyTo(pushUriDetails);
  Label urisLabel=new Label(pushUriDetails,SWT.NONE);
  urisLabel.setText(UIText.SimpleConfigurePushDialog_PushUrisLabel);
  GridDataFactory.fillDefaults().span(3,1).applyTo(urisLabel);
  uriViewer=new TableViewer(pushUriDetails,SWT.BORDER | SWT.MULTI);
  GridDataFactory.fillDefaults().grab(true,true).span(3,1).minSize(SWT.DEFAULT,30).applyTo(uriViewer.getTable());
  uriViewer.setContentProvider(ArrayContentProvider.getInstance());
  Button addUri=new Button(pushUriDetails,SWT.PUSH);
  addUri.setText(UIText.SimpleConfigurePushDialog_AddPushUriButton);
  addUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      SelectUriWizard wiz=new SelectUriWizard(false);
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        config.addPushURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button changeUri=new Button(pushUriDetails,SWT.PUSH);
  changeUri.setText(UIText.SimpleConfigurePushDialog_ChangePushUriButton);
  changeUri.setEnabled(false);
  changeUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      URIish uri=(URIish)((IStructuredSelection)uriViewer.getSelection()).getFirstElement();
      SelectUriWizard wiz=new SelectUriWizard(false,uri.toPrivateString());
      if (new WizardDialog(getShell(),wiz).open() == Window.OK) {
        config.removePushURI(uri);
        config.addPushURI(wiz.getUri());
        updateControls();
      }
    }
  }
);
  final Button deleteUri=new Button(pushUriDetails,SWT.PUSH);
  deleteUri.setText(UIText.SimpleConfigurePushDialog_DeletePushUriButton);
  deleteUri.setEnabled(false);
  deleteUri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      URIish uri=(URIish)((IStructuredSelection)uriViewer.getSelection()).getFirstElement();
      config.removePushURI(uri);
      updateControls();
    }
  }
);
  uriViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      deleteUri.setEnabled(!uriViewer.getSelection().isEmpty());
      changeUri.setEnabled(((IStructuredSelection)uriViewer.getSelection()).size() == 1);
    }
  }
);
  final Group refSpecGroup=new Group(remoteGroup,SWT.SHADOW_ETCHED_IN);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(refSpecGroup);
  refSpecGroup.setText(UIText.SimpleConfigurePushDialog_RefMappingGroup);
  refSpecGroup.setLayout(new GridLayout(5,false));
  ExpandableComposite advanced=new ExpandableComposite(refSpecGroup,ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
  if (advancedMode)   advanced.setExpanded(true);
  advanced.setText(UIText.SimpleConfigurePushDialog_AdvancedButton);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(5,1).grab(true,false).applyTo(advanced);
  advanced.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      Activator.getDefault().getPreferenceStore().setValue(ADVANCED_MODE_PREFERENCE,e.getState());
      GridData data=(GridData)changeRefSpec.getLayoutData();
      data.exclude=!e.getState();
      changeRefSpec.setVisible(!data.exclude);
      refSpecGroup.layout(true);
    }
  }
);
  Label refSpecLabel=new Label(refSpecGroup,SWT.NONE);
  refSpecLabel.setText(UIText.SimpleConfigurePushDialog_RefSpecLabel);
  GridDataFactory.fillDefaults().span(5,1).applyTo(refSpecLabel);
  specViewer=new TableViewer(refSpecGroup,SWT.BORDER | SWT.MULTI);
  specViewer.setContentProvider(ArrayContentProvider.getInstance());
  GridDataFactory.fillDefaults().span(5,1).grab(true,true).minSize(SWT.DEFAULT,30).applyTo(specViewer.getTable());
  specViewer.getTable().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.stateMask == SWT.MOD1 && e.keyCode == 'v') {
        doPaste();
      }
    }
  }
);
  addRefSpec=new Button(refSpecGroup,SWT.PUSH);
  addRefSpec.setText(UIText.SimpleConfigurePushDialog_AddRefSpecButton);
  addRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,true);
      if (dlg.open() == Window.OK) {
        config.addPushRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  changeRefSpec=new Button(refSpecGroup,SWT.PUSH);
  changeRefSpec.setText(UIText.SimpleConfigurePushDialog_ChangeRefSpecButton);
  changeRefSpec.setEnabled(false);
  GridDataFactory.fillDefaults().exclude(!advancedMode).applyTo(changeRefSpec);
  changeRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      RefSpec oldSpec=(RefSpec)((IStructuredSelection)specViewer.getSelection()).getFirstElement();
      RefSpecDialog dlg=new RefSpecDialog(getShell(),repository,config,oldSpec,true);
      if (dlg.open() == Window.OK) {
        config.removePushRefSpec(oldSpec);
        config.addPushRefSpec(dlg.getSpec());
      }
      updateControls();
    }
  }
);
  final Button deleteRefSpec=new Button(refSpecGroup,SWT.PUSH);
  deleteRefSpec.setText(UIText.SimpleConfigurePushDialog_DeleteRefSpecButton);
  deleteRefSpec.setEnabled(false);
  deleteRefSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      Object spec : ((IStructuredSelection)specViewer.getSelection()).toArray()) {
        config.removePushRefSpec((RefSpec)spec);
      }
      updateControls();
    }
  }
);
  final Button copySpec=new Button(refSpecGroup,SWT.PUSH);
  copySpec.setText(UIText.SimpleConfigurePushDialog_CopyRefSpecButton);
  copySpec.setEnabled(false);
  copySpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String toCopy=((IStructuredSelection)specViewer.getSelection()).getFirstElement().toString();
      Clipboard clipboard=new Clipboard(getShell().getDisplay());
      try {
        clipboard.setContents(new String[]{toCopy},new TextTransfer[]{TextTransfer.getInstance()});
      }
  finally {
        clipboard.dispose();
      }
    }
  }
);
  final Button pasteSpec=new Button(refSpecGroup,SWT.PUSH);
  pasteSpec.setText(UIText.SimpleConfigurePushDialog_PasteRefSpecButton);
  pasteSpec.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      doPaste();
    }
  }
);
  addRefSpecAdvanced=new Button(advanced,SWT.PUSH);
  advanced.setClient(addRefSpecAdvanced);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.FILL).span(3,1).applyTo(addRefSpecAdvanced);
  addRefSpecAdvanced.setText(UIText.SimpleConfigurePushDialog_EditAdvancedButton);
  addRefSpecAdvanced.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (new WizardDialog(getShell(),new RefSpecWizard(repository,config,true)).open() == Window.OK)       updateControls();
    }
  }
);
  specViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection sel=(IStructuredSelection)specViewer.getSelection();
      copySpec.setEnabled(sel.size() == 1);
      changeRefSpec.setEnabled(sel.size() == 1);
      deleteRefSpec.setEnabled(!sel.isEmpty());
    }
  }
);
  applyDialogFont(main);
  return main;
}",0.9979288919571973
7707,"private SimpleConfigurePushDialog(Shell shell,Repository repository,RemoteConfig config){
  super(shell);
  setHelpAvailable(false);
  this.repository=repository;
  this.config=config;
}","private SimpleConfigurePushDialog(Shell shell,Repository repository,RemoteConfig config){
  super(shell);
  setHelpAvailable(false);
  setShellStyle(getShellStyle() | SWT.SHELL_TRIM);
  this.repository=repository;
  this.config=config;
}",0.8794326241134752
7708,"/** 
 * {@link RevWalk#markStart(RevCommit)} all refs with given prefix to markstart of graph traversal using currentWalker
 * @param prefix prefix of refs to be marked
 * @throws IOException
 * @throws MissingObjectException
 * @throws IncorrectObjectTypeException
 */
private void markStartAllRefs(String prefix) throws IOException, MissingObjectException, IncorrectObjectTypeException {
  for (  Entry<String,Ref> refEntry : input.getRepository().getRefDatabase().getRefs(prefix).entrySet()) {
    Ref ref=refEntry.getValue();
    if (ref.isSymbolic())     continue;
    currentWalk.markStart(currentWalk.parseCommit(ref.getObjectId()));
  }
}","/** 
 * {@link RevWalk#markStart(RevCommit)} all refs with given prefix to markstart of graph traversal using currentWalker
 * @param prefix prefix of refs to be marked
 * @throws IOException
 * @throws MissingObjectException
 * @throws IncorrectObjectTypeException
 */
private void markStartAllRefs(String prefix) throws IOException, MissingObjectException, IncorrectObjectTypeException {
  for (  Entry<String,Ref> refEntry : input.getRepository().getRefDatabase().getRefs(prefix).entrySet()) {
    Ref ref=refEntry.getValue();
    if (ref.isSymbolic())     continue;
    Object refTarget=currentWalk.parseAny(ref.getObjectId());
    if (refTarget instanceof RevCommit)     currentWalk.markStart((RevCommit)refTarget);
  }
}",0.892128279883382
7709,"private void setWalkStartPoints(Repository db,AnyObjectId headId){
  try {
    if (store.getBoolean(UIPreferences.RESOURCEHISTORY_SHOW_ALL_BRANCHES)) {
      markStartAllRefs(Constants.R_HEADS);
      markStartAllRefs(Constants.R_REMOTES);
      markStartAllRefs(Constants.R_TAGS);
    }
 else     currentWalk.markStart(currentWalk.parseCommit(headId));
  }
 catch (  IOException e) {
    throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_errorReadingHeadCommit,headId,db.getDirectory().getAbsolutePath()),e);
  }
}","private void setWalkStartPoints(Repository db,AnyObjectId headId){
  try {
    if (store.getBoolean(UIPreferences.RESOURCEHISTORY_SHOW_ALL_BRANCHES)) {
      markStartAllRefs(Constants.R_HEADS);
      markStartAllRefs(Constants.R_REMOTES);
      markStartAllRefs(Constants.R_TAGS);
    }
 else     currentWalk.markStart(currentWalk.parseCommit(headId));
  }
 catch (  IOException e) {
    throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_errorSettingStartPoints,Activator.getDefault().getRepositoryUtil().getRepositoryName(db)),e);
  }
}",0.8674698795180723
7710,"private void showTag(Ref ref,Repository repo){
  RevWalk rw=new RevWalk(repo);
  try {
    RevCommit c=null;
    RevObject any=rw.parseAny(ref.getLeaf().getObjectId());
    if (any instanceof RevCommit) {
      c=(RevCommit)any;
    }
 else     if (any instanceof RevTag) {
      RevTag t=rw.parseTag(any);
      c=rw.parseCommit(t.getObject());
    }
    if (c != null)     graph.selectCommit(c);
  }
 catch (  IOException e) {
    Activator.handleError(e.getMessage(),e,true);
  }
}","private void showTag(Ref ref,Repository repo){
  RevWalk rw=new RevWalk(repo);
  try {
    RevCommit c=null;
    RevObject any=rw.parseAny(ref.getLeaf().getObjectId());
    if (any instanceof RevCommit) {
      c=(RevCommit)any;
    }
 else     if (any instanceof RevTag) {
      RevTag t=rw.parseTag(any);
      Object anyCommit=rw.parseAny(t.getObject());
      if (anyCommit instanceof RevCommit)       c=(RevCommit)anyCommit;
    }
    if (c != null)     graph.selectCommit(c);
  }
 catch (  IOException e) {
    Activator.handleError(e.getMessage(),e,true);
  }
}",0.8726235741444867
7711,"/** 
 * {@link RevWalk#markStart(RevCommit)} all refs with given prefix to markstart of graph traversal using currentWalker
 * @param prefix prefix of refs to be marked
 * @throws IOException
 * @throws MissingObjectException
 * @throws IncorrectObjectTypeException
 */
private void markStartAllRefs(String prefix) throws IOException, MissingObjectException, IncorrectObjectTypeException {
  for (  Entry<String,Ref> refEntry : input.getRepository().getRefDatabase().getRefs(prefix).entrySet()) {
    Ref ref=refEntry.getValue();
    if (ref.isSymbolic())     continue;
    currentWalk.markStart(currentWalk.parseCommit(ref.getObjectId()));
  }
}","/** 
 * {@link RevWalk#markStart(RevCommit)} all refs with given prefix to markstart of graph traversal using currentWalker
 * @param prefix prefix of refs to be marked
 * @throws IOException
 * @throws MissingObjectException
 * @throws IncorrectObjectTypeException
 */
private void markStartAllRefs(String prefix) throws IOException, MissingObjectException, IncorrectObjectTypeException {
  for (  Entry<String,Ref> refEntry : input.getRepository().getRefDatabase().getRefs(prefix).entrySet()) {
    Ref ref=refEntry.getValue();
    if (ref.isSymbolic())     continue;
    Object refTarget=currentWalk.parseAny(ref.getObjectId());
    if (refTarget instanceof RevCommit)     currentWalk.markStart((RevCommit)refTarget);
  }
}",0.892128279883382
7712,"private void setWalkStartPoints(Repository db,AnyObjectId headId){
  try {
    if (store.getBoolean(UIPreferences.RESOURCEHISTORY_SHOW_ALL_BRANCHES)) {
      markStartAllRefs(Constants.R_HEADS);
      markStartAllRefs(Constants.R_REMOTES);
      markStartAllRefs(Constants.R_TAGS);
    }
 else     currentWalk.markStart(currentWalk.parseCommit(headId));
  }
 catch (  IOException e) {
    throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_errorReadingHeadCommit,headId,db.getDirectory().getAbsolutePath()),e);
  }
}","private void setWalkStartPoints(Repository db,AnyObjectId headId){
  try {
    if (store.getBoolean(UIPreferences.RESOURCEHISTORY_SHOW_ALL_BRANCHES)) {
      markStartAllRefs(Constants.R_HEADS);
      markStartAllRefs(Constants.R_REMOTES);
      markStartAllRefs(Constants.R_TAGS);
    }
 else     currentWalk.markStart(currentWalk.parseCommit(headId));
  }
 catch (  IOException e) {
    throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_errorSettingStartPoints,Activator.getDefault().getRepositoryUtil().getRepositoryName(db)),e);
  }
}",0.8674698795180723
7713,"private void showTag(Ref ref,Repository repo){
  RevWalk rw=new RevWalk(repo);
  try {
    RevCommit c=null;
    RevObject any=rw.parseAny(ref.getLeaf().getObjectId());
    if (any instanceof RevCommit) {
      c=(RevCommit)any;
    }
 else     if (any instanceof RevTag) {
      RevTag t=rw.parseTag(any);
      c=rw.parseCommit(t.getObject());
    }
    if (c != null)     graph.selectCommit(c);
  }
 catch (  IOException e) {
    Activator.handleError(e.getMessage(),e,true);
  }
}","private void showTag(Ref ref,Repository repo){
  RevWalk rw=new RevWalk(repo);
  try {
    RevCommit c=null;
    RevObject any=rw.parseAny(ref.getLeaf().getObjectId());
    if (any instanceof RevCommit) {
      c=(RevCommit)any;
    }
 else     if (any instanceof RevTag) {
      RevTag t=rw.parseTag(any);
      Object anyCommit=rw.parseAny(t.getObject());
      if (anyCommit instanceof RevCommit)       c=(RevCommit)anyCommit;
    }
    if (c != null)     graph.selectCommit(c);
  }
 catch (  IOException e) {
    Activator.handleError(e.getMessage(),e,true);
  }
}",0.8726235741444867
7714,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelBlob && !(e2 instanceof GitModelBlob))   return 1;
  if (e2 instanceof GitModelBlob && !(e1 instanceof GitModelBlob))   return -1;
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if ((e1 instanceof GitModelTree && e1 instanceof GitModelTree) || (e1 instanceof GitModelBlob && e1 instanceof GitModelBlob))   return super.compare(viewer,e1,e2);
  if (e1 instanceof GitModelTree && e2 instanceof GitModelCommit)   return 1;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelBlob && !(e2 instanceof GitModelBlob))   return 1;
  if (e2 instanceof GitModelBlob && !(e1 instanceof GitModelBlob))   return -1;
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if ((e1 instanceof GitModelTree && e2 instanceof GitModelTree) || (e1 instanceof GitModelBlob && e2 instanceof GitModelBlob))   return super.compare(viewer,e1,e2);
  if (e1 instanceof GitModelTree && e2 instanceof GitModelCommit)   return 1;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}",0.9978925184404636
7715,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelBlob && !(e2 instanceof GitModelBlob))   return 1;
  if (e2 instanceof GitModelBlob && !(e1 instanceof GitModelBlob))   return -1;
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if ((e1 instanceof GitModelTree && e1 instanceof GitModelTree) || (e1 instanceof GitModelBlob && e1 instanceof GitModelBlob))   return super.compare(viewer,e1,e2);
  if (e1 instanceof GitModelTree && e2 instanceof GitModelCommit)   return 1;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelBlob && !(e2 instanceof GitModelBlob))   return 1;
  if (e2 instanceof GitModelBlob && !(e1 instanceof GitModelBlob))   return -1;
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if ((e1 instanceof GitModelTree && e2 instanceof GitModelTree) || (e1 instanceof GitModelBlob && e2 instanceof GitModelBlob))   return super.compare(viewer,e1,e2);
  if (e1 instanceof GitModelTree && e2 instanceof GitModelCommit)   return 1;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}",0.9978925184404636
7716,"@Test public void testCheckOut() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertEquals(Constants.MASTER,repo.getBranch());
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  table.getTableItem(1).select();
  final RevCommit[] commit=new RevCommit[1];
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      TableItem tableItem=table.widget.getSelection()[0];
      ensureTableItemLoaded(tableItem);
      commit[0]=(RevCommit)tableItem.getData();
    }
  }
);
  ContextMenuHelper.clickContextMenu(table,UIText.GitHistoryPage_CheckoutMenuLabel);
  TestUtil.joinJobs(JobFamilies.CHECKOUT);
  assertEquals(commit[0].getId().name(),repo.getBranch());
}","@Test public void testCheckOut() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertEquals(Constants.MASTER,repo.getBranch());
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  final RevCommit[] commit=checkoutLine(table,1);
  assertEquals(commit[0].getId().name(),repo.getBranch());
}",0.5350444225074038
7717,"void initAndStartRevWalk(boolean forceNewWalk) throws IllegalStateException {
  try {
    if (trace)     GitTraceLocation.getTrace().traceEntry(GitTraceLocation.HISTORYVIEW.getLocation());
    cancelRefreshJob();
    Repository db=input.getRepository();
    AnyObjectId headId=resolveHead(db,false);
    List<String> paths=buildFilterPaths(input.getItems(),input.getFileList(),db);
    boolean pathChange=pathChange(pathFilters,paths);
    boolean headChange=!headId.equals(currentHeadId);
    boolean repoChange=false;
    if (!db.equals(currentRepo)) {
      repoChange=true;
      currentRepo=db;
    }
    if (forceNewWalk || pathChange || currentWalk == null || headChange || repoChange) {
      createNewWalk(db,headId);
      setWalkStartPoints(db,headId);
      setupFileViewer(db,paths);
      setupCommentViewer(db);
      scheduleNewGenerateHistoryJob();
    }
 else     graph.setHistoryPageInput(input);
  }
  finally {
    if (trace)     GitTraceLocation.getTrace().traceExit(GitTraceLocation.HISTORYVIEW.getLocation());
  }
}","void initAndStartRevWalk(boolean forceNewWalk) throws IllegalStateException {
  try {
    if (trace)     GitTraceLocation.getTrace().traceEntry(GitTraceLocation.HISTORYVIEW.getLocation());
    cancelRefreshJob();
    Repository db=input.getRepository();
    AnyObjectId headId=resolveHead(db,false);
    List<String> paths=buildFilterPaths(input.getItems(),input.getFileList(),db);
    if (forceNewWalk || shouldRedraw(db,headId,paths)) {
      createNewWalk(db,headId);
      setWalkStartPoints(db,headId);
      setupFileViewer(db,paths);
      setupCommentViewer(db);
      scheduleNewGenerateHistoryJob();
    }
 else     graph.setHistoryPageInput(input);
  }
  finally {
    if (trace)     GitTraceLocation.getTrace().traceExit(GitTraceLocation.HISTORYVIEW.getLocation());
  }
}",0.827661909989023
7718,"/** 
 * Shared implementation to be called from an implementation of  {@link org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands.ExecutionEvent)}<p> Perform a rebase operation, moving the commits from the branch tip <code>commit</code> onto the currently checked out branch. The actual operation is deferred to a   {@link RebaseOperation} executedas a  {@link Job}. <p>
 * @param repository
 * @param jobname
 * @param ref
 */
public static void runRebaseJob(final Repository repository,String jobname,Ref ref){
  final RebaseOperation rebase=new RebaseOperation(repository,ref);
  Job job=new Job(jobname){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        rebase.execute(monitor);
      }
 catch (      final CoreException e) {
        try {
          new RebaseOperation(repository,Operation.ABORT).execute(monitor);
        }
 catch (        CoreException e1) {
          return e1.getStatus();
        }
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.setRule(rebase.getSchedulingRule());
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent cevent){
      IStatus result=cevent.getJob().getResult();
      if (result.getSeverity() == IStatus.CANCEL) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            MessageDialog.openInformation(shell,UIText.RebaseCurrentRefCommand_RebaseCanceledTitle,UIText.RebaseCurrentRefCommand_RebaseCanceledMessage);
          }
        }
);
      }
 else       if (result.isOK()) {
        RebaseResultDialog.show(rebase.getResult(),repository);
      }
    }
  }
);
  job.schedule();
}","/** 
 * Shared implementation to be called from an implementation of  {@link org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands.ExecutionEvent)}<p> Perform a rebase operation, moving the commits from the branch tip <code>commit</code> onto the currently checked out branch. The actual operation is deferred to a   {@link RebaseOperation} executedas a  {@link Job}. <p>
 * @param repository
 * @param jobname
 * @param ref
 */
public static void runRebaseJob(final Repository repository,String jobname,Ref ref){
  final RebaseOperation rebase=new RebaseOperation(repository,ref);
  Job job=new Job(jobname){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        rebase.execute(monitor);
      }
 catch (      final CoreException e) {
        if (!repository.getRepositoryState().equals(RepositoryState.SAFE)) {
          try {
            new RebaseOperation(repository,Operation.ABORT).execute(monitor);
          }
 catch (          CoreException e1) {
            return createMultiStatus(e,e1);
          }
        }
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.setRule(rebase.getSchedulingRule());
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent cevent){
      IStatus result=cevent.getJob().getResult();
      if (result.getSeverity() == IStatus.CANCEL) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            MessageDialog.openInformation(shell,UIText.RebaseCurrentRefCommand_RebaseCanceledTitle,UIText.RebaseCurrentRefCommand_RebaseCanceledMessage);
          }
        }
);
      }
 else       if (result.isOK()) {
        RebaseResultDialog.show(rebase.getResult(),repository);
      }
    }
  }
);
  job.schedule();
}",0.961149547631719
7719,"/** 
 * Executes this directly, without showing a confirmation dialog
 * @param monitor
 * @return the result of the operation
 * @throws CoreException
 */
public PushOperationResult execute(IProgressMonitor monitor) throws CoreException {
  if (spec == null) {
    spec=new PushOperationSpecification();
    List<URIish> urisToPush=new ArrayList<URIish>();
    for (    URIish uri : config.getPushURIs())     urisToPush.add(uri);
    if (urisToPush.isEmpty() && !config.getURIs().isEmpty())     urisToPush.add(config.getURIs().get(0));
    List<RefSpec> pushRefSpecs=new ArrayList<RefSpec>();
    pushRefSpecs.addAll(config.getPushRefSpecs());
    if (pushRefSpecs.isEmpty())     pushRefSpecs.add(DEFAULT_PUSH_REF_SPEC);
    for (    URIish uri : urisToPush) {
      try {
        spec.addURIRefUpdates(uri,Transport.open(repository,uri).findRemoteRefUpdatesFor(pushRefSpecs));
      }
 catch (      NotSupportedException e) {
        throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
      }
catch (      IOException e) {
        throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
      }
    }
  }
  op=new PushOperation(repository,spec,dryRun,timeout);
  if (credentialsProvider != null)   op.setCredentialsProvider(credentialsProvider);
  try {
    op.run(monitor);
    return op.getOperationResult();
  }
 catch (  InvocationTargetException e) {
    throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
  }
}","/** 
 * Executes this directly, without showing a confirmation dialog
 * @param monitor
 * @return the result of the operation
 * @throws CoreException
 */
public PushOperationResult execute(IProgressMonitor monitor) throws CoreException {
  if (spec == null) {
    spec=new PushOperationSpecification();
    List<URIish> urisToPush=new ArrayList<URIish>();
    for (    URIish uri : config.getPushURIs())     urisToPush.add(uri);
    if (urisToPush.isEmpty() && !config.getURIs().isEmpty())     urisToPush.add(config.getURIs().get(0));
    List<RefSpec> pushRefSpecs=new ArrayList<RefSpec>();
    pushRefSpecs.addAll(config.getPushRefSpecs());
    if (pushRefSpecs.isEmpty())     pushRefSpecs.add(DEFAULT_PUSH_REF_SPEC);
    for (    URIish uri : urisToPush) {
      try {
        spec.addURIRefUpdates(uri,Transport.open(repository,uri).findRemoteRefUpdatesFor(pushRefSpecs));
      }
 catch (      NotSupportedException e) {
        throw new CoreException(Activator.createErrorStatus(e.getMessage(),e));
      }
catch (      IOException e) {
        throw new CoreException(Activator.createErrorStatus(e.getMessage(),e));
      }
    }
  }
  op=new PushOperation(repository,spec,dryRun,timeout);
  if (credentialsProvider != null)   op.setCredentialsProvider(credentialsProvider);
  try {
    op.run(monitor);
    return op.getOperationResult();
  }
 catch (  InvocationTargetException e) {
    throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
  }
}",0.9855263157894736
7720,"/** 
 * Executes this directly, without showing a confirmation dialog
 * @param monitor
 * @return the result of the operation
 * @throws CoreException
 */
public PushOperationResult execute(IProgressMonitor monitor) throws CoreException {
  if (spec == null) {
    spec=new PushOperationSpecification();
    List<URIish> urisToPush=new ArrayList<URIish>();
    for (    URIish uri : config.getPushURIs())     urisToPush.add(uri);
    if (urisToPush.isEmpty() && !config.getURIs().isEmpty())     urisToPush.add(config.getURIs().get(0));
    List<RefSpec> pushRefSpecs=new ArrayList<RefSpec>();
    pushRefSpecs.addAll(config.getPushRefSpecs());
    if (pushRefSpecs.isEmpty())     pushRefSpecs.add(DEFAULT_PUSH_REF_SPEC);
    for (    URIish uri : urisToPush) {
      try {
        spec.addURIRefUpdates(uri,Transport.open(repository,uri).findRemoteRefUpdatesFor(pushRefSpecs));
      }
 catch (      NotSupportedException e) {
        throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
      }
catch (      IOException e) {
        throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
      }
    }
  }
  op=new PushOperation(repository,spec,dryRun,timeout);
  if (credentialsProvider != null)   op.setCredentialsProvider(credentialsProvider);
  try {
    op.run(monitor);
    return op.getOperationResult();
  }
 catch (  InvocationTargetException e) {
    throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
  }
}","/** 
 * Executes this directly, without showing a confirmation dialog
 * @param monitor
 * @return the result of the operation
 * @throws CoreException
 */
public PushOperationResult execute(IProgressMonitor monitor) throws CoreException {
  if (spec == null) {
    spec=new PushOperationSpecification();
    List<URIish> urisToPush=new ArrayList<URIish>();
    for (    URIish uri : config.getPushURIs())     urisToPush.add(uri);
    if (urisToPush.isEmpty() && !config.getURIs().isEmpty())     urisToPush.add(config.getURIs().get(0));
    List<RefSpec> pushRefSpecs=new ArrayList<RefSpec>();
    pushRefSpecs.addAll(config.getPushRefSpecs());
    if (pushRefSpecs.isEmpty())     pushRefSpecs.add(DEFAULT_PUSH_REF_SPEC);
    for (    URIish uri : urisToPush) {
      try {
        spec.addURIRefUpdates(uri,Transport.open(repository,uri).findRemoteRefUpdatesFor(pushRefSpecs));
      }
 catch (      NotSupportedException e) {
        throw new CoreException(Activator.createErrorStatus(e.getMessage(),e));
      }
catch (      IOException e) {
        throw new CoreException(Activator.createErrorStatus(e.getMessage(),e));
      }
    }
  }
  op=new PushOperation(repository,spec,dryRun,timeout);
  if (credentialsProvider != null)   op.setCredentialsProvider(credentialsProvider);
  try {
    op.run(monitor);
    return op.getOperationResult();
  }
 catch (  InvocationTargetException e) {
    throw new CoreException(Activator.createErrorStatus(e.getCause().getMessage(),e.getCause()));
  }
}",0.9855263157894736
7721,"private boolean prepareTrees(IFile[] selectedItems,HashMap<Repository,Tree> treeMap,IProgressMonitor monitor) throws IOException, UnsupportedEncodingException {
  if (selectedItems.length == 0) {
    for (    Repository repo : repos) {
      treeMap.put(repo,repo.mapTree(Constants.HEAD));
    }
  }
  for (  IFile file : selectedItems) {
    if (monitor.isCanceled())     return false;
    monitor.worked(1);
    IProject project=file.getProject();
    RepositoryMapping repositoryMapping=RepositoryMapping.getMapping(project);
    Repository repository=repositoryMapping.getRepository();
    Tree projTree=treeMap.get(repository);
    if (projTree == null) {
      projTree=repository.mapTree(Constants.HEAD);
      if (projTree == null)       projTree=new Tree(repository);
      treeMap.put(repository,projTree);
      if (GitTraceLocation.CORE.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"" + projTree.getId());
    }
    GitIndex index=repository.getIndex();
    String repoRelativePath=repositoryMapping.getRepoRelativePath(file);
    String string=repoRelativePath;
    TreeEntry treeMember=projTree.findBlobMember(repoRelativePath);
    Tree treeWithDeletedEntry=null;
    if (treeMember != null) {
      treeWithDeletedEntry=treeMember.getParent();
      treeMember.delete();
    }
    Entry idxEntry=index.getEntry(string);
    if (notIndexed.contains(file)) {
      File thisfile=new File(repositoryMapping.getWorkTree(),idxEntry.getName());
      if (!thisfile.isFile()) {
        index.remove(repositoryMapping.getWorkTree(),thisfile);
        if (GitTraceLocation.CORE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"");
        while (treeWithDeletedEntry.memberCount() == 0) {
          Tree toDelete=treeWithDeletedEntry;
          treeWithDeletedEntry=treeWithDeletedEntry.getParent();
          toDelete.delete();
        }
        continue;
      }
 else {
        idxEntry.update(thisfile);
      }
    }
    if (notTracked.contains(file)) {
      idxEntry=index.add(repositoryMapping.getWorkTree(),new File(repositoryMapping.getWorkTree(),repoRelativePath));
    }
    if (idxEntry != null) {
      projTree.addFile(repoRelativePath);
      TreeEntry newMember=projTree.findBlobMember(repoRelativePath);
      newMember.setId(idxEntry.getObjectId());
      if (GitTraceLocation.CORE.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"" + repoRelativePath + ""String_Node_Str""+ newMember.getId()+ ""String_Node_Str""+ idxEntry.getObjectId());
    }
  }
  return true;
}","private boolean prepareTrees(IFile[] selectedItems,HashMap<Repository,Tree> treeMap,IProgressMonitor monitor) throws IOException, UnsupportedEncodingException {
  if (selectedItems.length == 0) {
    for (    Repository repo : repos) {
      treeMap.put(repo,repo.mapTree(Constants.HEAD));
    }
  }
  for (  IFile file : selectedItems) {
    if (monitor.isCanceled())     return false;
    monitor.worked(1);
    IProject project=file.getProject();
    RepositoryMapping repositoryMapping=RepositoryMapping.getMapping(project);
    Repository repository=repositoryMapping.getRepository();
    Tree projTree=treeMap.get(repository);
    if (projTree == null) {
      projTree=repository.mapTree(Constants.HEAD);
      if (projTree == null)       projTree=new Tree(repository);
      treeMap.put(repository,projTree);
      if (GitTraceLocation.CORE.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"" + projTree.getId());
    }
    GitIndex index=repository.getIndex();
    String repoRelativePath=repositoryMapping.getRepoRelativePath(file);
    String string=repoRelativePath;
    TreeEntry treeMember=projTree.findBlobMember(repoRelativePath);
    Tree treeWithDeletedEntry=null;
    if (treeMember != null) {
      treeWithDeletedEntry=treeMember.getParent();
      treeMember.delete();
    }
    Entry idxEntry=index.getEntry(string);
    if (notIndexed.contains(file)) {
      File thisfile=new File(repositoryMapping.getWorkTree(),idxEntry.getName());
      if (!thisfile.isFile()) {
        index.remove(repositoryMapping.getWorkTree(),thisfile);
        if (GitTraceLocation.CORE.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"");
        while (treeWithDeletedEntry.memberCount() == 0) {
          Tree toDelete=treeWithDeletedEntry;
          treeWithDeletedEntry=treeWithDeletedEntry.getParent();
          toDelete.delete();
        }
        continue;
      }
 else {
        idxEntry.update(thisfile);
      }
    }
    if (notTracked.contains(file)) {
      idxEntry=index.add(repositoryMapping.getWorkTree(),new File(repositoryMapping.getWorkTree(),repoRelativePath));
    }
    if (idxEntry != null) {
      projTree.addFile(repoRelativePath);
      TreeEntry newMember=projTree.findBlobMember(repoRelativePath);
      newMember.setId(idxEntry.getObjectId());
      if (newMember instanceof FileTreeEntry)       ((FileTreeEntry)newMember).setExecutable((idxEntry.getModeBits() & FileMode.EXECUTABLE_FILE.getBits()) == FileMode.EXECUTABLE_FILE.getBits());
      if (GitTraceLocation.CORE.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.CORE.getLocation(),""String_Node_Str"" + repoRelativePath + ""String_Node_Str""+ newMember.getId()+ ""String_Node_Str""+ idxEntry.getObjectId());
    }
  }
  return true;
}",0.964616222101252
7722,"/** 
 * @param parent
 * @param baseCommit
 * @param fileFactory
 * @throws IOException
 */
protected GitModelCache(GitModelObject parent,RevCommit baseCommit,FileModelFactory fileFactory) throws IOException {
  super(parent,baseCommit,RIGHT);
  this.fileFactory=fileFactory;
  cacheTreeMap=new HashMap<IPath,GitModelCacheTree>();
}","/** 
 * @param parent
 * @param baseCommit
 * @param fileFactory
 * @throws IOException
 */
protected GitModelCache(GitModelObject parent,RevCommit baseCommit,FileModelFactory fileFactory) throws IOException {
  super(parent,baseCommit,RIGHT);
  this.fileFactory=fileFactory;
  cacheTreeMap=new HashMap<String,GitModelCacheTree>();
  location=new Path(getRepository().getWorkTree().toString());
}",0.8653846153846154
7723,"@Override public IPath getLocation(){
  return new Path(getRepository().getWorkTree().toString());
}","@Override public IPath getLocation(){
  return location;
}",0.6835443037974683
7724,"private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    IPath path=getLocation().append(tw.getPathString());
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.getFileExtension() == null)     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,baseCommit,repoId,cacheId,path);
  }
  return null;
}","private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    String path=tw.getPathString();
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.contains(""String_Node_Str""))     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,baseCommit,repoId,cacheId,getLocation().append(path));
  }
  return null;
}",0.9001468428781204
7725,"private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,IPath path) throws IOException {
  GitModelCacheTree cacheTree=cacheTreeMap.get(path);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,baseCommit,repoId,cacheId,path,fileFactory);
    cacheTreeMap.put(path,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path);
  return cacheTree;
}","private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  int firstSlash=path.indexOf(""String_Node_Str"");
  String pathKey=path.substring(0,firstSlash);
  GitModelCacheTree cacheTree=cacheTreeMap.get(pathKey);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,baseCommit,repoId,cacheId,getLocation().append(pathKey),fileFactory);
    cacheTreeMap.put(pathKey,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path.substring(firstSlash + 1));
  return cacheTree;
}",0.7925356750823271
7726,"/** 
 * @param parent parent object
 * @param commit last  {@link RevCommit} in repository
 * @param repoId {@link ObjectId} of blob in repository
 * @param cacheId {@link ObjectId} of blob in cache
 * @param location resource location
 * @param factory
 * @throws IOException
 */
public GitModelCacheTree(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,IPath location,FileModelFactory factory) throws IOException {
  super(parent,commit,null,repoId,repoId,cacheId,location);
  this.factory=factory;
  cacheTreeMap=new HashMap<IPath,GitModelObject>();
}","/** 
 * @param parent parent object
 * @param commit last  {@link RevCommit} in repository
 * @param repoId {@link ObjectId} of blob in repository
 * @param cacheId {@link ObjectId} of blob in cache
 * @param location resource location
 * @param factory
 * @throws IOException
 */
public GitModelCacheTree(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,IPath location,FileModelFactory factory) throws IOException {
  super(parent,commit,null,repoId,repoId,cacheId,location);
  this.factory=factory;
  cacheTreeMap=new HashMap<String,GitModelObject>();
}",0.990622335890878
7727,"void addChild(ObjectId repoId,ObjectId cacheId,IPath path) throws IOException {
  if (path.getFileExtension() == null) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(path);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,baseCommit,repoId,cacheId,path,factory);
      cacheTreeMap.put(path,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path);
  }
 else   cacheTreeMap.put(path,factory.createFileModel(this,baseCommit,repoId,cacheId,path));
}","void addChild(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String pathKey;
  int firstSlash=path.indexOf(""String_Node_Str"");
  if (firstSlash > -1)   pathKey=path.substring(0,firstSlash);
 else   pathKey=path;
  IPath fullPath=getLocation().append(pathKey);
  if (path.contains(""String_Node_Str"")) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(pathKey);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,baseCommit,repoId,cacheId,fullPath,factory);
      cacheTreeMap.put(pathKey,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path.substring(firstSlash + 1));
  }
 else   cacheTreeMap.put(pathKey,factory.createFileModel(this,baseCommit,repoId,cacheId,fullPath));
}",0.5846645367412141
7728,"private void fillOptionsMapFromOptions(){
  Map<String,String> oldValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  optionsMap.clear();
  for (  PluginNode plugin : PLUGIN_LIST) {
    Properties props=new Properties();
    try {
      InputStream is=Platform.getBundle(plugin.getPlugin()).getResource(""String_Node_Str"").openStream();
      props.load(is);
    }
 catch (    IOException e) {
      Activator.handleError(e.getMessage(),e,true);
    }
    optionsMap.put(plugin,props);
  }
  Map<String,String> newValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  boolean dirty=false;
  if (oldValues.keySet().containsAll(newValues.keySet()) && newValues.keySet().containsAll(oldValues.keySet())) {
    for (    String key : oldValues.keySet()) {
      if (!oldValues.get(key).equals(newValues.get(key))) {
        dirty=true;
        break;
      }
    }
  }
 else {
    dirty=true;
  }
  if (dirty)   setDirty(true);
}","private void fillOptionsMapFromOptions(){
  Map<String,String> oldValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  optionsMap.clear();
  for (  PluginNode plugin : PLUGIN_LIST) {
    Properties props=new Properties();
    try {
      InputStream is=Platform.getBundle(plugin.getPlugin()).getResource(""String_Node_Str"").openStream();
      props.load(is);
    }
 catch (    IOException e) {
      Activator.handleError(e.getMessage(),e,true);
    }
    optionsMap.put(plugin,props);
  }
  Map<String,String> newValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  boolean dirty=false;
  if (oldValues.keySet().containsAll(newValues.keySet()) && newValues.keySet().containsAll(oldValues.keySet())) {
    for (    Entry<String,String> oldValueEntry : oldValues.entrySet()) {
      String key=oldValueEntry.getKey();
      String newValue=newValues.get(key);
      if (!oldValueEntry.getValue().equals(newValue)) {
        dirty=true;
        break;
      }
    }
  }
 else {
    dirty=true;
  }
  if (dirty)   setDirty(true);
}",0.9369024856596558
7729,"@Override public boolean performFinish(){
  GitSynchronizeDataSet gsdSet=new GitSynchronizeDataSet();
  Map<Repository,String> branches=page.getSelectedBranches();
  for (  Repository repo : branches.keySet())   try {
    gsdSet.add(new GitSynchronizeData(repo,Constants.HEAD,branches.get(repo),false));
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  new GitSynchronize(gsdSet);
  return true;
}","@Override public boolean performFinish(){
  GitSynchronizeDataSet gsdSet=new GitSynchronizeDataSet();
  Map<Repository,String> branches=page.getSelectedBranches();
  for (  Entry<Repository,String> branchesEntry : branches.entrySet())   try {
    gsdSet.add(new GitSynchronizeData(branchesEntry.getKey(),Constants.HEAD,branchesEntry.getValue(),false));
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  new GitSynchronize(gsdSet);
  return true;
}",0.901439645625692
7730,"private void createCompareInput(){
  if (compareInput == null) {
    ComparisonDataSource baseData=new ComparisonDataSource(baseCommit,baseId);
    ComparisonDataSource remoteData=new ComparisonDataSource(remoteCommit,remoteId);
    ComparisonDataSource ancestorData=new ComparisonDataSource(getAncestorCommit(),ancestorId);
    compareInput=getCompareInput(baseData,remoteData,ancestorData);
  }
}","private void createCompareInput(){
  if (compareInput == null) {
    ComparisonDataSource baseData=new ComparisonDataSource(baseCommit,baseId);
    ComparisonDataSource remoteData=new ComparisonDataSource(remoteCommit,remoteId);
    ComparisonDataSource ancestorData=new ComparisonDataSource(ancestorCommit,ancestorId);
    compareInput=getCompareInput(baseData,remoteData,ancestorData);
  }
}",0.7661188369152971
7731,"/** 
 * @param parent parent of this object
 * @param commit remote commit
 * @param ancestorId common ancestor id
 * @param baseId id of base object variant
 * @param remoteId id of remote object variants
 * @param name human readable blob name (file name)
 * @throws IOException
 */
public GitModelBlob(GitModelObjectContainer parent,RevCommit commit,ObjectId ancestorId,ObjectId baseId,ObjectId remoteId,String name) throws IOException {
  super(parent,commit,parent.getKind() & (LEFT | RIGHT));
  this.name=name;
  this.baseId=baseId;
  this.remoteId=remoteId;
  this.ancestorId=ancestorId;
  location=getParent().getLocation().append(name);
  gitPath=Repository.stripWorkDir(getRepository().getWorkTree(),getLocation().toFile());
}","/** 
 * @param parent parent of this object
 * @param commit remote commit
 * @param ancestorCommit TODO
 * @param ancestorId common ancestor id
 * @param baseId id of base object variant
 * @param remoteId id of remote object variants
 * @param name human readable blob name (file name)
 * @throws IOException
 */
public GitModelBlob(GitModelObjectContainer parent,RevCommit commit,RevCommit ancestorCommit,ObjectId ancestorId,ObjectId baseId,ObjectId remoteId,String name) throws IOException {
  super(parent,commit,ancestorCommit,parent.getKind() & (LEFT | RIGHT));
  this.name=name;
  this.baseId=baseId;
  this.remoteId=remoteId;
  this.ancestorId=ancestorId;
  location=getParent().getLocation().append(name);
  gitPath=Repository.stripWorkDir(getRepository().getWorkTree(),getLocation().toFile());
}",0.9546044098573282
7732,"public GitModelCacheFile(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,String name) throws IOException {
  super(parent,commit,repoId,repoId,cacheId,name);
}","public GitModelCacheFile(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,String name) throws IOException {
  super(parent,commit,null,repoId,repoId,cacheId,name);
}",0.987146529562982
7733,"/** 
 * @param parent parent object
 * @param commit last  {@link RevCommit} in repository
 * @param repoId {@link ObjectId} of blob in repository
 * @param cacheId {@link ObjectId} of blob in cache
 * @param name name of tree
 * @param factory
 * @throws IOException
 */
public GitModelCacheTree(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,String name,FileModelFactory factory) throws IOException {
  super(parent,commit,repoId,repoId,cacheId,name);
  this.factory=factory;
  cacheTreeMap=new HashMap<String,GitModelObject>();
}","/** 
 * @param parent parent object
 * @param commit last  {@link RevCommit} in repository
 * @param repoId {@link ObjectId} of blob in repository
 * @param cacheId {@link ObjectId} of blob in cache
 * @param name name of tree
 * @param factory
 * @throws IOException
 */
public GitModelCacheTree(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,ObjectId cacheId,String name,FileModelFactory factory) throws IOException {
  super(parent,commit,null,repoId,repoId,cacheId,name);
  this.factory=factory;
  cacheTreeMap=new HashMap<String,GitModelObject>();
}",0.9956024626209324
7734,"/** 
 * Constructor for child classes.
 * @param parent instance of repository model object that is parent for this commit
 * @param commit instance of commit that will be associated with this model object
 * @param direction use  {@link Differencer#LEFT} and {@link Differencer#RIGHT} todeterminate commit direction (is it incoming or outgoing)
 * @throws IOException
 */
protected GitModelCommit(GitModelObject parent,RevCommit commit,int direction) throws IOException {
  super(parent,commit,direction);
}","/** 
 * Constructor for child classes.
 * @param parent instance of repository model object that is parent for this commit
 * @param commit instance of commit that will be associated with this model object
 * @param ancestorCommit common ancestor commit for object that is wrapped
 * @param direction use  {@link Differencer#LEFT} and {@link Differencer#RIGHT} todeterminate commit direction (is it incoming or outgoing)
 * @throws IOException
 */
protected GitModelCommit(GitModelObject parent,RevCommit commit,RevCommit ancestorCommit,int direction) throws IOException {
  super(parent,commit,direction);
  this.ancestorCommit=ancestorCommit;
}",0.8804159445407279
7735,"@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=baseCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (remoteCommit != null)     baseNth=tw.addTree(remoteCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}","@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=baseCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (remoteCommit != null)     baseNth=tw.addTree(remoteCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorCommit,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}",0.9892627057981388
7736,"/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId;
  if (ancestorNth > -1)   objAncestorId=tw.getObjectId(ancestorNth);
 else   objAncestorId=ObjectId.zeroId();
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}","/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorCommit TODO
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,RevCommit ancestorCommit,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId;
  if (ancestorNth > -1)   objAncestorId=tw.getObjectId(ancestorNth);
 else   objAncestorId=ObjectId.zeroId();
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getBaseCommit(),ancestorCommit,objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getBaseCommit(),ancestorCommit,objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}",0.96
7737,"/** 
 * @param parent parent of this tree
 * @param commit commit associated with this tree
 * @param ancestorId id of common ancestor tree for this on
 * @param baseId id of base tree
 * @param remoteId this tree id
 * @param name name resource associated with this tree
 * @throws IOException
 */
public GitModelTree(GitModelObjectContainer parent,RevCommit commit,ObjectId ancestorId,ObjectId baseId,ObjectId remoteId,String name) throws IOException {
  super(parent,commit,parent.getKind() & (LEFT | RIGHT));
  this.name=name;
  this.baseId=baseId;
  this.remoteId=remoteId;
  this.ancestorId=ancestorId;
}","/** 
 * @param parent parent of this tree
 * @param commit commit associated with this tree
 * @param ancestorCommit common ancestor commit associated with this tree
 * @param ancestorId id of common ancestor tree for this on
 * @param baseId id of base tree
 * @param remoteId this tree id
 * @param name name resource associated with this tree
 * @throws IOException
 */
public GitModelTree(GitModelObjectContainer parent,RevCommit commit,RevCommit ancestorCommit,ObjectId ancestorId,ObjectId baseId,ObjectId remoteId,String name) throws IOException {
  super(parent,commit,ancestorCommit,parent.getKind() & (LEFT | RIGHT));
  this.name=name;
  this.baseId=baseId;
  this.remoteId=remoteId;
  this.ancestorId=ancestorId;
}",0.9145427286356822
7738,"protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    int remoteNth=tw.addTree(remoteId);
    int baseNth=-1;
    if (!baseId.equals(zeroId()))     baseNth=tw.addTree(baseId);
    int ancestorNth=-1;
    if (!ancestorId.equals(zeroId()))     ancestorNth=tw.addTree(ancestorId);
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,remoteNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}","protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    int remoteNth=tw.addTree(remoteId);
    int baseNth=-1;
    if (!baseId.equals(zeroId()))     baseNth=tw.addTree(baseId);
    int ancestorNth=-1;
    if (!ancestorId.equals(zeroId()))     ancestorNth=tw.addTree(ancestorId);
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorCommit,ancestorNth,baseNth,remoteNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}",0.9888641425389756
7739,"public GitModelWorkingFile(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,String name) throws IOException {
  super(parent,commit,repoId,repoId,null,name);
}","public GitModelWorkingFile(GitModelObjectContainer parent,RevCommit commit,ObjectId repoId,String name) throws IOException {
  super(parent,commit,null,repoId,repoId,null,name);
}",0.9858356940509916
7740,"private void fillTreeItemWithGitDirectory(RepositoryMapping m,TreeItem treeItem2,boolean isAlternative){
  if (m.getGitDir() == null)   treeItem2.setText(2,UIText.ExistingOrNewPage_SymbolicValueEmptyMapping);
 else {
    IPath container=m.getContainerPath();
    if (!container.isEmpty())     container=Path.fromOSString(""String_Node_Str"");
    IPath relativePath=container.append(m.getGitDir());
    if (isAlternative) {
      IPath withoutLastSegment=relativePath.removeLastSegments(1);
      IPath path;
      if (withoutLastSegment.isEmpty())       path=Path.fromPortableString(""String_Node_Str"");
 else       path=withoutLastSegment;
      treeItem2.setText(0,path.toString());
    }
    treeItem2.setText(2,relativePath.toString());
    try {
      IProject project=m.getContainer().getProject();
      FileRepository repo=new FileRepository(m.getGitDirAbsolutePath().toFile());
      File workTree=repo.getWorkTree();
      IPath workTreePath=Path.fromOSString(workTree.getAbsolutePath());
      if (workTreePath.isPrefixOf(project.getLocation())) {
        IPath makeRelativeTo=project.getLocation().makeRelativeTo(workTreePath);
        String repoRelativePath=makeRelativeTo.append(""String_Node_Str"").toPortableString();
        ObjectId headCommitId=repo.resolve(Constants.HEAD);
        if (headCommitId != null) {
          RevWalk revWalk=new RevWalk(repo);
          RevCommit headCommit=revWalk.parseCommit(headCommitId);
          RevTree headTree=headCommit.getTree();
          TreeWalk projectInRepo=TreeWalk.forPath(repo,repoRelativePath,headTree);
          if (projectInRepo != null) {
            treeItem2.setChecked(true);
          }
          revWalk.dispose();
        }
      }
      repo.close();
    }
 catch (    IOException e1) {
      Activator.logError(""String_Node_Str"",e1);
    }
  }
}","private void fillTreeItemWithGitDirectory(RepositoryMapping m,TreeItem treeItem,boolean isAlternative){
  if (m.getGitDir() == null)   treeItem.setText(2,UIText.ExistingOrNewPage_SymbolicValueEmptyMapping);
 else {
    IPath container=m.getContainerPath();
    if (!container.isEmpty())     container=Path.fromOSString(""String_Node_Str"");
    IPath relativePath=container.append(m.getGitDir());
    if (isAlternative) {
      IPath withoutLastSegment=relativePath.removeLastSegments(1);
      IPath path;
      if (withoutLastSegment.isEmpty())       path=Path.fromPortableString(""String_Node_Str"");
 else       path=withoutLastSegment;
      treeItem.setText(0,path.toString());
    }
    treeItem.setText(2,relativePath.toOSString());
    try {
      IProject project=m.getContainer().getProject();
      FileRepository repo=new FileRepository(m.getGitDirAbsolutePath().toFile());
      File workTree=repo.getWorkTree();
      IPath workTreePath=Path.fromOSString(workTree.getAbsolutePath());
      if (workTreePath.isPrefixOf(project.getLocation())) {
        IPath makeRelativeTo=project.getLocation().makeRelativeTo(workTreePath);
        String repoRelativePath=makeRelativeTo.append(""String_Node_Str"").toPortableString();
        ObjectId headCommitId=repo.resolve(Constants.HEAD);
        if (headCommitId != null) {
          RevWalk revWalk=new RevWalk(repo);
          RevCommit headCommit=revWalk.parseCommit(headCommitId);
          RevTree headTree=headCommit.getTree();
          TreeWalk projectInRepo=TreeWalk.forPath(repo,repoRelativePath,headTree);
          if (projectInRepo != null) {
            treeItem.setChecked(true);
          }
          revWalk.dispose();
        }
      }
      repo.close();
    }
 catch (    IOException e1) {
      Activator.logError(""String_Node_Str"",e1);
    }
  }
}",0.9980785067252264
7741,"private void fillTreeItemWithGitDirectory(RepositoryMapping m,TreeItem treeItem2,boolean isAlternative){
  if (m.getGitDir() == null)   treeItem2.setText(2,UIText.ExistingOrNewPage_SymbolicValueEmptyMapping);
 else {
    IPath container=m.getContainerPath();
    if (!container.isEmpty())     container=Path.fromOSString(""String_Node_Str"");
    IPath relativePath=container.append(m.getGitDir());
    if (isAlternative) {
      IPath withoutLastSegment=relativePath.removeLastSegments(1);
      IPath path;
      if (withoutLastSegment.isEmpty())       path=Path.fromPortableString(""String_Node_Str"");
 else       path=withoutLastSegment;
      treeItem2.setText(0,path.toString());
    }
    treeItem2.setText(2,relativePath.toString());
    try {
      IProject project=m.getContainer().getProject();
      FileRepository repo=new FileRepository(m.getGitDirAbsolutePath().toFile());
      File workTree=repo.getWorkTree();
      IPath workTreePath=Path.fromOSString(workTree.getAbsolutePath());
      if (workTreePath.isPrefixOf(project.getLocation())) {
        IPath makeRelativeTo=project.getLocation().makeRelativeTo(workTreePath);
        String repoRelativePath=makeRelativeTo.append(""String_Node_Str"").toPortableString();
        ObjectId headCommitId=repo.resolve(Constants.HEAD);
        if (headCommitId != null) {
          RevWalk revWalk=new RevWalk(repo);
          RevCommit headCommit=revWalk.parseCommit(headCommitId);
          RevTree headTree=headCommit.getTree();
          TreeWalk projectInRepo=TreeWalk.forPath(repo,repoRelativePath,headTree);
          if (projectInRepo != null) {
            treeItem2.setChecked(true);
          }
          revWalk.dispose();
        }
      }
      repo.close();
    }
 catch (    IOException e1) {
      Activator.logError(""String_Node_Str"",e1);
    }
  }
}","private void fillTreeItemWithGitDirectory(RepositoryMapping m,TreeItem treeItem,boolean isAlternative){
  if (m.getGitDir() == null)   treeItem.setText(2,UIText.ExistingOrNewPage_SymbolicValueEmptyMapping);
 else {
    IPath container=m.getContainerPath();
    if (!container.isEmpty())     container=Path.fromOSString(""String_Node_Str"");
    IPath relativePath=container.append(m.getGitDir());
    if (isAlternative) {
      IPath withoutLastSegment=relativePath.removeLastSegments(1);
      IPath path;
      if (withoutLastSegment.isEmpty())       path=Path.fromPortableString(""String_Node_Str"");
 else       path=withoutLastSegment;
      treeItem.setText(0,path.toString());
    }
    treeItem.setText(2,relativePath.toOSString());
    try {
      IProject project=m.getContainer().getProject();
      FileRepository repo=new FileRepository(m.getGitDirAbsolutePath().toFile());
      File workTree=repo.getWorkTree();
      IPath workTreePath=Path.fromOSString(workTree.getAbsolutePath());
      if (workTreePath.isPrefixOf(project.getLocation())) {
        IPath makeRelativeTo=project.getLocation().makeRelativeTo(workTreePath);
        String repoRelativePath=makeRelativeTo.append(""String_Node_Str"").toPortableString();
        ObjectId headCommitId=repo.resolve(Constants.HEAD);
        if (headCommitId != null) {
          RevWalk revWalk=new RevWalk(repo);
          RevCommit headCommit=revWalk.parseCommit(headCommitId);
          RevTree headTree=headCommit.getTree();
          TreeWalk projectInRepo=TreeWalk.forPath(repo,repoRelativePath,headTree);
          if (projectInRepo != null) {
            treeItem.setChecked(true);
          }
          revWalk.dispose();
        }
      }
      repo.close();
    }
 catch (    IOException e1) {
      Activator.logError(""String_Node_Str"",e1);
    }
  }
}",0.9980785067252264
7742,"private void fillOptionsMapFromOptions(){
  Map<String,String> oldValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  optionsMap.clear();
  for (  PluginNode plugin : PLUGIN_LIST) {
    Properties props=new Properties();
    try {
      InputStream is=Platform.getBundle(plugin.getPlugin()).getResource(""String_Node_Str"").openStream();
      props.load(is);
    }
 catch (    IOException e) {
      Activator.handleError(e.getMessage(),e,true);
    }
    optionsMap.put(plugin,props);
  }
  Map<String,String> newValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  boolean dirty=false;
  if (oldValues.keySet().containsAll(newValues.keySet()) && newValues.keySet().containsAll(oldValues.keySet())) {
    for (    String key : oldValues.keySet()) {
      if (!oldValues.get(key).equals(newValues.get(key))) {
        dirty=true;
        break;
      }
    }
  }
 else {
    dirty=true;
  }
  if (dirty)   setDirty(true);
}","private void fillOptionsMapFromOptions(){
  Map<String,String> oldValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  optionsMap.clear();
  for (  PluginNode plugin : PLUGIN_LIST) {
    Properties props=new Properties();
    try {
      InputStream is=Platform.getBundle(plugin.getPlugin()).getResource(""String_Node_Str"").openStream();
      props.load(is);
    }
 catch (    IOException e) {
      Activator.handleError(e.getMessage(),e,true);
    }
    optionsMap.put(plugin,props);
  }
  Map<String,String> newValues=new HashMap<String,String>();
  for (  Properties props : optionsMap.values())   for (  Object keyObject : props.keySet()) {
    String key=(String)keyObject;
    oldValues.put(key,props.getProperty(key));
  }
  boolean dirty=false;
  if (oldValues.keySet().containsAll(newValues.keySet()) && newValues.keySet().containsAll(oldValues.keySet())) {
    for (    Entry<String,String> oldValueEntry : oldValues.entrySet()) {
      String key=oldValueEntry.getKey();
      String newValue=newValues.get(key);
      if (!oldValueEntry.getValue().equals(newValue)) {
        dirty=true;
        break;
      }
    }
  }
 else {
    dirty=true;
  }
  if (dirty)   setDirty(true);
}",0.9369024856596558
7743,"@Override public boolean performFinish(){
  GitSynchronizeDataSet gsdSet=new GitSynchronizeDataSet();
  Map<Repository,String> branches=page.getSelectedBranches();
  for (  Repository repo : branches.keySet())   try {
    gsdSet.add(new GitSynchronizeData(repo,Constants.HEAD,branches.get(repo),false));
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  new GitSynchronize(gsdSet);
  return true;
}","@Override public boolean performFinish(){
  GitSynchronizeDataSet gsdSet=new GitSynchronizeDataSet();
  Map<Repository,String> branches=page.getSelectedBranches();
  for (  Entry<Repository,String> branchesEntry : branches.entrySet())   try {
    gsdSet.add(new GitSynchronizeData(branchesEntry.getKey(),Constants.HEAD,branchesEntry.getValue(),false));
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  new GitSynchronize(gsdSet);
  return true;
}",0.901439645625692
7744,"/** 
 * @return the calculated commit message
 */
private String calculateCommitMessage(){
  if (commitMessage != null) {
    return commitMessage;
  }
  String calculatedCommitMessage=null;
  Set<IResource> resources=new HashSet<IResource>();
  for (  CommitItem item : items) {
    IResource resource=item.file.getProject();
    resources.add(resource);
  }
  try {
    ICommitMessageProvider messageProvider=getCommitMessageProvider();
    if (messageProvider != null) {
      IResource[] resourcesArray=resources.toArray(new IResource[0]);
      calculatedCommitMessage=messageProvider.getMessage(resourcesArray);
    }
  }
 catch (  CoreException coreException) {
    Activator.error(coreException.getLocalizedMessage(),coreException);
  }
  return calculatedCommitMessage;
}","/** 
 * @return the calculated commit message
 */
private String calculateCommitMessage(){
  String calculatedCommitMessage=null;
  Set<IResource> resources=new HashSet<IResource>();
  for (  CommitItem item : items) {
    IResource resource=item.file.getProject();
    resources.add(resource);
  }
  try {
    ICommitMessageProvider messageProvider=getCommitMessageProvider();
    if (messageProvider != null) {
      IResource[] resourcesArray=resources.toArray(new IResource[0]);
      calculatedCommitMessage=messageProvider.getMessage(resourcesArray);
    }
  }
 catch (  CoreException coreException) {
    Activator.error(coreException.getLocalizedMessage(),coreException);
  }
  return calculatedCommitMessage;
}",0.9593062041360908
7745,"private void saveOriginalChangeId(){
  int changeIdOffset=findOffsetOfChangeIdLine(previousCommitMessage);
  if (changeIdOffset > 0) {
    int endOfChangeId=findNextEOL(changeIdOffset,previousCommitMessage);
    int sha1Offset=changeIdOffset + ""String_Node_Str"".length();
    try {
      originalChangeId=ObjectId.fromString(previousCommitMessage.substring(sha1Offset,endOfChangeId));
    }
 catch (    IllegalArgumentException e) {
      originalChangeId=null;
    }
  }
 else   originalChangeId=null;
}","private void saveOriginalChangeId(){
  int changeIdOffset=findOffsetOfChangeIdLine(previousCommitMessage);
  if (changeIdOffset > 0) {
    int endOfChangeId=findNextEOL(changeIdOffset,previousCommitMessage);
    if (endOfChangeId < 0)     endOfChangeId=previousCommitMessage.length() - 1;
    int sha1Offset=changeIdOffset + ""String_Node_Str"".length();
    try {
      originalChangeId=ObjectId.fromString(previousCommitMessage.substring(sha1Offset,endOfChangeId));
    }
 catch (    IllegalArgumentException e) {
      originalChangeId=null;
    }
  }
 else   originalChangeId=null;
}",0.9256198347107438
7746,"@Test public void testTagDialogShowExistingTags() throws Exception {
  SWTBotShell tagDialog=openTagDialog();
  int index=tagDialog.bot().tableWithLabel(UIText.CreateTagDialog_existingTags).indexOf(""String_Node_Str"");
  assertTrue(""String_Node_Str"",index >= 0);
}","@Test public void testTagDialogShowExistingTags() throws Exception {
  SWTBotShell tagDialog=openTagDialog();
  SWTBotTable table=tagDialog.bot().tableWithLabel(UIText.CreateTagDialog_existingTags);
  TestUtil.waitUntilTableHasRowWithText(tagDialog.bot(),table,""String_Node_Str"",10000);
}",0.7295825771324864
7747,"@Test public void testCloneRepoButton() throws Exception {
  clearView();
  refreshAndWait();
  assertEmpty();
  getOrOpenView().toolbarButton(myUtil.getPluginLocalizedValue(""String_Node_Str"")).click();
  SWTBotShell shell=bot.shell(UIText.GitCloneWizard_title).activate();
  shell.bot().textInGroup(UIText.RepositorySelectionPage_groupLocation,0).setText(repositoryFile.getPath());
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  SWTBotText pathText=shell.bot().text(0);
  pathText.setText(pathText.getText() + ""String_Node_Str"");
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  refreshAndWait();
  assertHasClonedRepo();
}","@Test public void testCloneRepoButton() throws Exception {
  clearView();
  refreshAndWait();
  assertEmpty();
  getOrOpenView().toolbarButton(myUtil.getPluginLocalizedValue(""String_Node_Str"")).click();
  SWTBotShell shell=bot.shell(UIText.GitCloneWizard_title).activate();
  shell.bot().textInGroup(UIText.RepositorySelectionPage_groupLocation,0).setText(repositoryFile.getPath());
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  SWTBotText pathText=shell.bot().text(0);
  pathText.setText(pathText.getText() + ""String_Node_Str"");
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  assertHasClonedRepo();
}",0.9906166219839142
7748,"private void assertHasClonedRepo() throws Exception {
  final SWTBotTree tree=getOrOpenView().bot().tree();
  final SWTBotTreeItem[] items=tree.getAllItems();
  boolean found=false;
  for (  SWTBotTreeItem item : items) {
    if (item.getText().startsWith(repositoryFile.getParentFile().getName() + ""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertTrue(""String_Node_Str"",found);
}","private void assertHasClonedRepo() throws Exception {
  final SWTBotTree tree=getOrOpenView().bot().tree();
  String text=repositoryFile.getParentFile().getName() + ""String_Node_Str"";
  TestUtil.waitUntilTreeHasNodeWithText(bot,tree,text,10000);
}",0.551617873651772
7749,"@Test public void testDeleteSingleBranch() throws Exception {
  SWTBotTree tree=getOrOpenView().bot().tree();
  refreshAndWait();
  SWTBotTreeItem localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  SWTBotTreeItem masterNode=localBranchesItem.getNode(""String_Node_Str"");
  masterNode.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  TestUtil.joinJobs(JobFamilies.CHECKOUT);
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell createBranchShell=bot.shell(UIText.CreateBranchWizard_NewBranchTitle);
  createBranchShell.bot().textWithId(""String_Node_Str"").setText(""String_Node_Str"");
  createBranchShell.bot().checkBox().deselect();
  createBranchShell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  localBranchesItem.getNode(""String_Node_Str"").select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  refreshAndWait();
  SWTBotTreeItem[] items=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).getItems();
  assertEquals(""String_Node_Str"",2,items.length);
  assertEquals(""String_Node_Str"",items[0].getText());
  assertEquals(""String_Node_Str"",items[1].getText());
}","@Test public void testDeleteSingleBranch() throws Exception {
  SWTBotTree tree=getOrOpenView().bot().tree();
  refreshAndWait();
  SWTBotTreeItem localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  SWTBotTreeItem masterNode=localBranchesItem.getNode(""String_Node_Str"");
  masterNode.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  TestUtil.joinJobs(JobFamilies.CHECKOUT);
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell createBranchShell=bot.shell(UIText.CreateBranchWizard_NewBranchTitle);
  createBranchShell.bot().textWithId(""String_Node_Str"").setText(""String_Node_Str"");
  createBranchShell.bot().checkBox().deselect();
  createBranchShell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  localBranchesItem.getNode(""String_Node_Str"").select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  refreshAndWait();
  SWTBotTreeItem[] items=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).getItems();
  assertEquals(""String_Node_Str"",2,items.length);
  assertEquals(""String_Node_Str"",items[0].getText());
  assertEquals(""String_Node_Str"",items[1].getText());
}",0.9675009338812104
7750,"/** 
 * Import wizard golden path test
 * @throws Exception
 */
@Test public void testImportWizard() throws Exception {
  deleteAllProjects();
  assertProjectExistence(PROJ1,false);
  SWTBotTree tree=getOrOpenView().bot().tree();
  SWTBotTreeItem item=myRepoViewUtil.getRootItem(tree,repositoryFile);
  String wizardTitle=NLS.bind(UIText.GitCreateProjectViaWizardWizard_WizardTitle,repositoryFile.getPath());
  item.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell shell=bot.shell(wizardTitle);
  bot.radio(UIText.GitSelectWizardPage_ImportExistingButton).click();
  bot.radio(UIText.GitSelectWizardPage_AutoShareButton).click();
  TableCollection selected=shell.bot().tree().selection();
  String wizardNode=selected.get(0,0);
  assertEquals(myRepoViewUtil.getWorkdirItem(tree,repositoryFile).getText(),wizardNode);
  waitInUI();
  shell.close();
  myRepoViewUtil.getWorkdirItem(tree,repositoryFile).expand().getNode(Constants.DOT_GIT).select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  shell=bot.shell(wizardTitle);
  selected=shell.bot().tree().selection();
  wizardNode=selected.get(0,0);
  assertEquals(Constants.DOT_GIT,wizardNode);
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 0);
  shell.bot().button(IDialogConstants.BACK_LABEL).click();
  shell.bot().tree().getAllItems()[0].getNode(PROJ1).select();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 1);
  assertTrue(!shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(UIText.WizardProjectsImportPage_selectAll).click();
  assertTrue(shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  assertProjectExistence(PROJ1,true);
}","/** 
 * Import wizard golden path test
 * @throws Exception
 */
@Test public void testImportWizard() throws Exception {
  deleteAllProjects();
  assertProjectExistence(PROJ1,false);
  SWTBotTree tree=getOrOpenView().bot().tree();
  SWTBotTreeItem item=myRepoViewUtil.getRootItem(tree,repositoryFile);
  String wizardTitle=NLS.bind(UIText.GitCreateProjectViaWizardWizard_WizardTitle,repositoryFile.getPath());
  item.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell shell=bot.shell(wizardTitle);
  bot.radio(UIText.GitSelectWizardPage_ImportExistingButton).click();
  bot.radio(UIText.GitSelectWizardPage_AutoShareButton).click();
  TableCollection selected=shell.bot().tree().selection();
  String wizardNode=selected.get(0,0);
  assertEquals(myRepoViewUtil.getWorkdirItem(tree,repositoryFile).getText(),wizardNode);
  waitInUI();
  shell.close();
  myRepoViewUtil.getWorkdirItem(tree,repositoryFile).expand().getNode(Constants.DOT_GIT).select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  shell=bot.shell(wizardTitle);
  selected=shell.bot().tree().selection();
  wizardNode=selected.get(0,0);
  assertEquals(Constants.DOT_GIT,wizardNode);
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  shell.bot().label(""String_Node_Str"");
  assertTrue(shell.bot().tree().getAllItems().length == 0);
  shell.bot().button(IDialogConstants.BACK_LABEL).click();
  shell.bot().tree().getAllItems()[0].getNode(PROJ1).select();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 1);
  assertTrue(!shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(UIText.WizardProjectsImportPage_selectAll).click();
  assertTrue(shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  assertProjectExistence(PROJ1,true);
}",0.9890329012961117
7751,"@Test public void shouldReturnListOfChanges() throws Exception {
  resetRepository(PROJ1);
  changeFilesInProject();
  showDialog(PROJ1,""String_Node_Str"",""String_Node_Str"");
  bot.shell(""String_Node_Str"" + REPO1 + File.separator+ ""String_Node_Str"").activate();
  bot.comboBox(0).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(1).setSelection(HEAD);
  bot.comboBox(2).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(3).setSelection(MASTER);
  bot.checkBox(""String_Node_Str"").click();
  bot.button(IDialogConstants.OK_LABEL).click();
  bot.sleep(1000);
  SWTBotTree syncViewTree=bot.viewByTitle(""String_Node_Str"").bot().tree();
  assertEquals(1,syncViewTree.getAllItems().length);
  SWTBotTreeItem[] syncItems=syncViewTree.getAllItems();
  assertEquals(UIText.GitModelWorkingTree_workingTree,syncItems[0].getText());
}","@Test public void shouldReturnListOfChanges() throws Exception {
  resetRepository(PROJ1);
  changeFilesInProject();
  showDialog(PROJ1,""String_Node_Str"",""String_Node_Str"");
  bot.shell(""String_Node_Str"" + REPO1 + File.separator+ ""String_Node_Str"").activate();
  bot.comboBox(0).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(1).setSelection(HEAD);
  bot.comboBox(2).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(3).setSelection(MASTER);
  bot.checkBox(""String_Node_Str"").click();
  bot.button(IDialogConstants.OK_LABEL).click();
  bot.sleep(1000);
  SWTBotTree syncViewTree=bot.viewByTitle(""String_Node_Str"").bot().tree();
  bot.waitUntil(Conditions.treeHasRows(syncViewTree,1),10000);
  SWTBotTreeItem[] syncItems=syncViewTree.getAllItems();
  assertEquals(UIText.GitModelWorkingTree_workingTree,syncItems[0].getText());
}",0.8681192660550459
7752,"@Test public void testTagDialogShowExistingTags() throws Exception {
  SWTBotShell tagDialog=openTagDialog();
  int index=tagDialog.bot().tableWithLabel(UIText.CreateTagDialog_existingTags).indexOf(""String_Node_Str"");
  assertTrue(""String_Node_Str"",index >= 0);
}","@Test public void testTagDialogShowExistingTags() throws Exception {
  SWTBotShell tagDialog=openTagDialog();
  SWTBotTable table=tagDialog.bot().tableWithLabel(UIText.CreateTagDialog_existingTags);
  TestUtil.waitUntilTableHasRowWithText(tagDialog.bot(),table,""String_Node_Str"",10000);
}",0.7295825771324864
7753,"@Test public void testCloneRepoButton() throws Exception {
  clearView();
  refreshAndWait();
  assertEmpty();
  getOrOpenView().toolbarButton(myUtil.getPluginLocalizedValue(""String_Node_Str"")).click();
  SWTBotShell shell=bot.shell(UIText.GitCloneWizard_title).activate();
  shell.bot().textInGroup(UIText.RepositorySelectionPage_groupLocation,0).setText(repositoryFile.getPath());
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  SWTBotText pathText=shell.bot().text(0);
  pathText.setText(pathText.getText() + ""String_Node_Str"");
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  refreshAndWait();
  assertHasClonedRepo();
}","@Test public void testCloneRepoButton() throws Exception {
  clearView();
  refreshAndWait();
  assertEmpty();
  getOrOpenView().toolbarButton(myUtil.getPluginLocalizedValue(""String_Node_Str"")).click();
  SWTBotShell shell=bot.shell(UIText.GitCloneWizard_title).activate();
  shell.bot().textInGroup(UIText.RepositorySelectionPage_groupLocation,0).setText(repositoryFile.getPath());
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  SWTBotText pathText=shell.bot().text(0);
  pathText.setText(pathText.getText() + ""String_Node_Str"");
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  assertHasClonedRepo();
}",0.9906166219839142
7754,"private void assertHasClonedRepo() throws Exception {
  final SWTBotTree tree=getOrOpenView().bot().tree();
  final SWTBotTreeItem[] items=tree.getAllItems();
  boolean found=false;
  for (  SWTBotTreeItem item : items) {
    if (item.getText().startsWith(repositoryFile.getParentFile().getName() + ""String_Node_Str"")) {
      found=true;
      break;
    }
  }
  assertTrue(""String_Node_Str"",found);
}","private void assertHasClonedRepo() throws Exception {
  final SWTBotTree tree=getOrOpenView().bot().tree();
  String text=repositoryFile.getParentFile().getName() + ""String_Node_Str"";
  TestUtil.waitUntilTreeHasNodeWithText(bot,tree,text,10000);
}",0.551617873651772
7755,"@Test public void testDeleteSingleBranch() throws Exception {
  SWTBotTree tree=getOrOpenView().bot().tree();
  refreshAndWait();
  SWTBotTreeItem localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  SWTBotTreeItem masterNode=localBranchesItem.getNode(""String_Node_Str"");
  masterNode.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  TestUtil.joinJobs(JobFamilies.CHECKOUT);
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell createBranchShell=bot.shell(UIText.CreateBranchWizard_NewBranchTitle);
  createBranchShell.bot().textWithId(""String_Node_Str"").setText(""String_Node_Str"");
  createBranchShell.bot().checkBox().deselect();
  createBranchShell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  localBranchesItem.getNode(""String_Node_Str"").select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  refreshAndWait();
  SWTBotTreeItem[] items=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).getItems();
  assertEquals(""String_Node_Str"",2,items.length);
  assertEquals(""String_Node_Str"",items[0].getText());
  assertEquals(""String_Node_Str"",items[1].getText());
}","@Test public void testDeleteSingleBranch() throws Exception {
  SWTBotTree tree=getOrOpenView().bot().tree();
  refreshAndWait();
  SWTBotTreeItem localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  SWTBotTreeItem masterNode=localBranchesItem.getNode(""String_Node_Str"");
  masterNode.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  TestUtil.joinJobs(JobFamilies.CHECKOUT);
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell createBranchShell=bot.shell(UIText.CreateBranchWizard_NewBranchTitle);
  createBranchShell.bot().textWithId(""String_Node_Str"").setText(""String_Node_Str"");
  createBranchShell.bot().checkBox().deselect();
  createBranchShell.bot().button(IDialogConstants.FINISH_LABEL).click();
  refreshAndWait();
  localBranchesItem=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).expand();
  localBranchesItem.getNode(""String_Node_Str"").select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  refreshAndWait();
  SWTBotTreeItem[] items=myRepoViewUtil.getLocalBranchesItem(tree,repositoryFile).getItems();
  assertEquals(""String_Node_Str"",2,items.length);
  assertEquals(""String_Node_Str"",items[0].getText());
  assertEquals(""String_Node_Str"",items[1].getText());
}",0.9675009338812104
7756,"/** 
 * Import wizard golden path test
 * @throws Exception
 */
@Test public void testImportWizard() throws Exception {
  deleteAllProjects();
  assertProjectExistence(PROJ1,false);
  SWTBotTree tree=getOrOpenView().bot().tree();
  SWTBotTreeItem item=myRepoViewUtil.getRootItem(tree,repositoryFile);
  String wizardTitle=NLS.bind(UIText.GitCreateProjectViaWizardWizard_WizardTitle,repositoryFile.getPath());
  item.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell shell=bot.shell(wizardTitle);
  bot.radio(UIText.GitSelectWizardPage_ImportExistingButton).click();
  bot.radio(UIText.GitSelectWizardPage_AutoShareButton).click();
  TableCollection selected=shell.bot().tree().selection();
  String wizardNode=selected.get(0,0);
  assertEquals(myRepoViewUtil.getWorkdirItem(tree,repositoryFile).getText(),wizardNode);
  waitInUI();
  shell.close();
  myRepoViewUtil.getWorkdirItem(tree,repositoryFile).expand().getNode(Constants.DOT_GIT).select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  shell=bot.shell(wizardTitle);
  selected=shell.bot().tree().selection();
  wizardNode=selected.get(0,0);
  assertEquals(Constants.DOT_GIT,wizardNode);
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 0);
  shell.bot().button(IDialogConstants.BACK_LABEL).click();
  shell.bot().tree().getAllItems()[0].getNode(PROJ1).select();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 1);
  assertTrue(!shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(UIText.WizardProjectsImportPage_selectAll).click();
  assertTrue(shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  assertProjectExistence(PROJ1,true);
}","/** 
 * Import wizard golden path test
 * @throws Exception
 */
@Test public void testImportWizard() throws Exception {
  deleteAllProjects();
  assertProjectExistence(PROJ1,false);
  SWTBotTree tree=getOrOpenView().bot().tree();
  SWTBotTreeItem item=myRepoViewUtil.getRootItem(tree,repositoryFile);
  String wizardTitle=NLS.bind(UIText.GitCreateProjectViaWizardWizard_WizardTitle,repositoryFile.getPath());
  item.select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  SWTBotShell shell=bot.shell(wizardTitle);
  bot.radio(UIText.GitSelectWizardPage_ImportExistingButton).click();
  bot.radio(UIText.GitSelectWizardPage_AutoShareButton).click();
  TableCollection selected=shell.bot().tree().selection();
  String wizardNode=selected.get(0,0);
  assertEquals(myRepoViewUtil.getWorkdirItem(tree,repositoryFile).getText(),wizardNode);
  waitInUI();
  shell.close();
  myRepoViewUtil.getWorkdirItem(tree,repositoryFile).expand().getNode(Constants.DOT_GIT).select();
  ContextMenuHelper.clickContextMenu(tree,myUtil.getPluginLocalizedValue(""String_Node_Str""));
  shell=bot.shell(wizardTitle);
  selected=shell.bot().tree().selection();
  wizardNode=selected.get(0,0);
  assertEquals(Constants.DOT_GIT,wizardNode);
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  shell.bot().label(""String_Node_Str"");
  assertTrue(shell.bot().tree().getAllItems().length == 0);
  shell.bot().button(IDialogConstants.BACK_LABEL).click();
  shell.bot().tree().getAllItems()[0].getNode(PROJ1).select();
  shell.bot().button(IDialogConstants.NEXT_LABEL).click();
  waitInUI();
  assertTrue(shell.bot().tree().getAllItems().length == 1);
  assertTrue(!shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(UIText.WizardProjectsImportPage_selectAll).click();
  assertTrue(shell.bot().button(IDialogConstants.FINISH_LABEL).isEnabled());
  shell.bot().button(IDialogConstants.FINISH_LABEL).click();
  waitInUI();
  assertProjectExistence(PROJ1,true);
}",0.9890329012961117
7757,"@Test public void shouldReturnListOfChanges() throws Exception {
  resetRepository(PROJ1);
  changeFilesInProject();
  showDialog(PROJ1,""String_Node_Str"",""String_Node_Str"");
  bot.shell(""String_Node_Str"" + REPO1 + File.separator+ ""String_Node_Str"").activate();
  bot.comboBox(0).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(1).setSelection(HEAD);
  bot.comboBox(2).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(3).setSelection(MASTER);
  bot.checkBox(""String_Node_Str"").click();
  bot.button(IDialogConstants.OK_LABEL).click();
  bot.sleep(1000);
  SWTBotTree syncViewTree=bot.viewByTitle(""String_Node_Str"").bot().tree();
  assertEquals(1,syncViewTree.getAllItems().length);
  SWTBotTreeItem[] syncItems=syncViewTree.getAllItems();
  assertEquals(UIText.GitModelWorkingTree_workingTree,syncItems[0].getText());
}","@Test public void shouldReturnListOfChanges() throws Exception {
  resetRepository(PROJ1);
  changeFilesInProject();
  showDialog(PROJ1,""String_Node_Str"",""String_Node_Str"");
  bot.shell(""String_Node_Str"" + REPO1 + File.separator+ ""String_Node_Str"").activate();
  bot.comboBox(0).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(1).setSelection(HEAD);
  bot.comboBox(2).setSelection(UIText.SynchronizeWithAction_localRepoName);
  bot.comboBox(3).setSelection(MASTER);
  bot.checkBox(""String_Node_Str"").click();
  bot.button(IDialogConstants.OK_LABEL).click();
  bot.sleep(1000);
  SWTBotTree syncViewTree=bot.viewByTitle(""String_Node_Str"").bot().tree();
  bot.waitUntil(Conditions.treeHasRows(syncViewTree,1),10000);
  SWTBotTreeItem[] syncItems=syncViewTree.getAllItems();
  assertEquals(UIText.GitModelWorkingTree_workingTree,syncItems[0].getText());
}",0.8681192660550459
7758,"private void saveOriginalChangeId(){
  int changeIdOffset=findOffsetOfChangeIdLine(previousCommitMessage);
  if (changeIdOffset > 0) {
    int endOfChangeId=findNextEOL(changeIdOffset,previousCommitMessage);
    int sha1Offset=changeIdOffset + ""String_Node_Str"".length();
    try {
      originalChangeId=ObjectId.fromString(previousCommitMessage.substring(sha1Offset,endOfChangeId));
    }
 catch (    IllegalArgumentException e) {
      originalChangeId=null;
    }
  }
 else   originalChangeId=null;
}","private void saveOriginalChangeId(){
  int changeIdOffset=findOffsetOfChangeIdLine(previousCommitMessage);
  if (changeIdOffset > 0) {
    int endOfChangeId=findNextEOL(changeIdOffset,previousCommitMessage);
    if (endOfChangeId < 0)     endOfChangeId=previousCommitMessage.length() - 1;
    int sha1Offset=changeIdOffset + ""String_Node_Str"".length();
    try {
      originalChangeId=ObjectId.fromString(previousCommitMessage.substring(sha1Offset,endOfChangeId));
    }
 catch (    IllegalArgumentException e) {
      originalChangeId=null;
    }
  }
 else   originalChangeId=null;
}",0.9256198347107438
7759,"@Override public boolean inputSet(){
  try {
    if (trace)     GitTraceLocation.getTrace().traceEntry(GitTraceLocation.HISTORYVIEW.getLocation());
    if (this.input != null)     return true;
    cancelRefreshJob();
    setErrorMessage(null);
    Object o=super.getInput();
    if (o == null) {
      setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
      return false;
    }
    if (o instanceof IResource) {
      RepositoryMapping mapping=RepositoryMapping.getMapping((IResource)o);
      if (mapping != null) {
        Repository repo=mapping.getRepository();
        input=new HistoryPageInput(repo,new IResource[]{(IResource)o});
      }
    }
 else     if (o instanceof RepositoryTreeNode) {
      RepositoryTreeNode repoNode=(RepositoryTreeNode)o;
switch (repoNode.getType()) {
case FILE:
        File file=((FileNode)repoNode).getObject();
      input=new HistoryPageInput(repoNode.getRepository(),new File[]{file});
    break;
case FOLDER:
  File folder=((FolderNode)repoNode).getObject();
input=new HistoryPageInput(repoNode.getRepository(),new File[]{folder});
break;
default :
input=new HistoryPageInput(repoNode.getRepository());
}
}
 else if (o instanceof HistoryPageInput) input=(HistoryPageInput)o;
 else if (o instanceof IAdaptable) {
IResource resource=(IResource)((IAdaptable)o).getAdapter(IResource.class);
if (resource != null) {
RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
Repository repo=mapping.getRepository();
input=new HistoryPageInput(repo,new IResource[]{resource});
}
}
if (input == null) {
this.name=""String_Node_Str"";
setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
return false;
}
final IResource[] inResources=input.getItems();
final File[] inFiles=input.getFileList();
if (inResources != null && inResources.length == 0) {
this.name=""String_Node_Str"";
setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
return false;
}
this.name=calculateName(input);
boolean filtersActive=inResources != null || inFiles != null;
actions.showAllRepoVersionsAction.setEnabled(filtersActive);
actions.showAllProjectVersionsAction.setEnabled(filtersActive);
actions.showAllFolderVersionsAction.setEnabled(inResources != null);
actions.showAllResourceVersionsAction.setEnabled(filtersActive);
try {
initAndStartRevWalk(true);
}
 catch (IllegalStateException e) {
Activator.handleError(e.getMessage(),e.getCause(),true);
return false;
}
return true;
}
  finally {
if (trace) GitTraceLocation.getTrace().traceExit(GitTraceLocation.HISTORYVIEW.getLocation());
}
}","@Override public boolean inputSet(){
  try {
    if (trace)     GitTraceLocation.getTrace().traceEntry(GitTraceLocation.HISTORYVIEW.getLocation());
    if (this.input != null)     return true;
    cancelRefreshJob();
    setErrorMessage(null);
    Object o=super.getInput();
    if (o == null) {
      setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
      return false;
    }
    if (o instanceof IResource) {
      RepositoryMapping mapping=RepositoryMapping.getMapping((IResource)o);
      if (mapping != null) {
        Repository repo=mapping.getRepository();
        input=new HistoryPageInput(repo,new IResource[]{(IResource)o});
      }
    }
 else     if (o instanceof RepositoryTreeNode) {
      RepositoryTreeNode repoNode=(RepositoryTreeNode)o;
switch (repoNode.getType()) {
case FILE:
        File file=((FileNode)repoNode).getObject();
      input=new HistoryPageInput(repoNode.getRepository(),new File[]{file});
    break;
case FOLDER:
  File folder=((FolderNode)repoNode).getObject();
input=new HistoryPageInput(repoNode.getRepository(),new File[]{folder});
break;
default :
input=new HistoryPageInput(repoNode.getRepository());
}
}
 else if (o instanceof HistoryPageInput) input=(HistoryPageInput)o;
 else if (o instanceof IAdaptable) {
IResource resource=(IResource)((IAdaptable)o).getAdapter(IResource.class);
if (resource != null) {
RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
Repository repo=mapping.getRepository();
input=new HistoryPageInput(repo,new IResource[]{resource});
}
}
if (input == null) {
this.name=""String_Node_Str"";
setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
return false;
}
final IResource[] inResources=input.getItems();
final File[] inFiles=input.getFileList();
if (inResources != null && inResources.length == 0) {
this.name=""String_Node_Str"";
setErrorMessage(UIText.GitHistoryPage_NoInputMessage);
return false;
}
this.name=calculateName(input);
boolean filtersActive=inResources != null || inFiles != null;
actions.showAllRepoVersionsAction.setEnabled(filtersActive);
actions.showAllProjectVersionsAction.setEnabled(filtersActive);
actions.showAllFolderVersionsAction.setEnabled(inResources != null);
actions.showAllResourceVersionsAction.setEnabled(filtersActive);
try {
initAndStartRevWalk(true);
}
 catch (IllegalStateException e) {
Activator.handleError(e.getMessage(),e,true);
return false;
}
return true;
}
  finally {
if (trace) GitTraceLocation.getTrace().traceExit(GitTraceLocation.HISTORYVIEW.getLocation());
}
}",0.9978083283522614
7760,"void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    if (tw == null) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}","void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    if (tw == null) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId.getName(),baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId.getName(),baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}",0.9972051425377306
7761,"void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}","void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    if (tw == null) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}",0.9551976573938508
7762,"void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}","void populate() throws IOException {
  if (GitTraceLocation.QUICKDIFF.isActive())   GitTraceLocation.getTrace().traceEntry(GitTraceLocation.QUICKDIFF.getLocation(),resource);
  TreeWalk tw=null;
  RevWalk rw=null;
  try {
    RepositoryMapping mapping=RepositoryMapping.getMapping(resource);
    if (mapping == null) {
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    final String gitPath=mapping.getRepoRelativePath(resource);
    final Repository repository=mapping.getRepository();
    String baseline=GitQuickDiffProvider.baseline.get(repository);
    if (baseline == null)     baseline=Constants.HEAD;
    ObjectId commitId=repository.resolve(baseline);
    if (commitId != null) {
      if (commitId.equals(lastCommit)) {
        if (GitTraceLocation.QUICKDIFF.isActive())         GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
        return;
      }
    }
 else {
      String msg=NLS.bind(UIText.GitDocument_errorResolveQuickdiff,new Object[]{baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    rw=new RevWalk(repository);
    RevCommit baselineCommit;
    try {
      baselineCommit=rw.parseCommit(commitId);
    }
 catch (    IOException err) {
      String msg=NLS.bind(UIText.GitDocument_errorLoadCommit,new Object[]{commitId,baseline,resource,repository});
      Activator.logError(msg,err);
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    RevTree treeId=baselineCommit.getTree();
    if (treeId.equals(lastTree)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
      return;
    }
    tw=TreeWalk.forPath(repository,gitPath,treeId);
    if (tw == null) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    ObjectId id=tw.getObjectId(0);
    if (id.equals(ObjectId.zeroId())) {
      setResolved(null,null,null,""String_Node_Str"");
      String msg=NLS.bind(UIText.GitDocument_errorLoadTree,new Object[]{treeId,baseline,resource,repository});
      Activator.logError(msg,new Throwable());
      setResolved(null,null,null,""String_Node_Str"");
      return;
    }
    if (!id.equals(lastBlob)) {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + baseline);
      ObjectLoader loader=repository.open(id,Constants.OBJ_BLOB);
      byte[] bytes=loader.getBytes();
      String charset;
      charset=CompareUtils.getResourceEncoding(resource);
      String s=new String(bytes,charset);
      setResolved(commitId,treeId,id,s);
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"" + s.length() + ""String_Node_Str"");
    }
 else {
      if (GitTraceLocation.QUICKDIFF.isActive())       GitTraceLocation.getTrace().trace(GitTraceLocation.QUICKDIFF.getLocation(),""String_Node_Str"");
    }
  }
  finally {
    if (tw != null)     tw.release();
    if (rw != null)     rw.release();
    if (GitTraceLocation.QUICKDIFF.isActive())     GitTraceLocation.getTrace().traceExit(GitTraceLocation.QUICKDIFF.getLocation());
  }
}",0.9551976573938508
7763,"/** 
 * Check internal state for page completion status.
 */
private void checkPage(){
  final String dstpath=directoryText.getText();
  if (dstpath.length() == 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptDirectory));
    setPageComplete(false);
    return;
  }
  final File absoluteFile=new File(dstpath).getAbsoluteFile();
  if (!isEmptyDir(absoluteFile)) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_errorNotEmptyDir,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!canCreateSubdir(absoluteFile.getParentFile())) {
    setErrorMessage(NLS.bind(UIText.GitCloneWizard_errorCannotCreate,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!availableRefs.isEmpty() && initialBranch.getSelectionIndex() < 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptInitialBranch));
    setPageComplete(false);
    return;
  }
  if (remoteText.getText().length() == 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptRemoteName));
    setPageComplete(false);
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
}","/** 
 * Check internal state for page completion status.
 */
private void checkPage(){
  final String dstpath=directoryText.getText();
  if (dstpath.length() == 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorDirectoryRequired);
    setPageComplete(false);
    return;
  }
  final File absoluteFile=new File(dstpath).getAbsoluteFile();
  if (!isEmptyDir(absoluteFile)) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_errorNotEmptyDir,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!canCreateSubdir(absoluteFile.getParentFile())) {
    setErrorMessage(NLS.bind(UIText.GitCloneWizard_errorCannotCreate,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!availableRefs.isEmpty() && initialBranch.getSelectionIndex() < 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorInitialBranchRequired);
    setPageComplete(false);
    return;
  }
  if (remoteText.getText().length() == 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorRemoteNameRequired);
    setPageComplete(false);
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
}",0.3092352695361471
7764,"/** 
 * Check internal state for page completion status.
 */
private void checkPage(){
  final String dstpath=directoryText.getText();
  if (dstpath.length() == 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptDirectory));
    setPageComplete(false);
    return;
  }
  final File absoluteFile=new File(dstpath).getAbsoluteFile();
  if (!isEmptyDir(absoluteFile)) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_errorNotEmptyDir,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!canCreateSubdir(absoluteFile.getParentFile())) {
    setErrorMessage(NLS.bind(UIText.GitCloneWizard_errorCannotCreate,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!availableRefs.isEmpty() && initialBranch.getSelectionIndex() < 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptInitialBranch));
    setPageComplete(false);
    return;
  }
  if (remoteText.getText().length() == 0) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_fieldRequired,UIText.CloneDestinationPage_promptRemoteName));
    setPageComplete(false);
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
}","/** 
 * Check internal state for page completion status.
 */
private void checkPage(){
  final String dstpath=directoryText.getText();
  if (dstpath.length() == 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorDirectoryRequired);
    setPageComplete(false);
    return;
  }
  final File absoluteFile=new File(dstpath).getAbsoluteFile();
  if (!isEmptyDir(absoluteFile)) {
    setErrorMessage(NLS.bind(UIText.CloneDestinationPage_errorNotEmptyDir,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!canCreateSubdir(absoluteFile.getParentFile())) {
    setErrorMessage(NLS.bind(UIText.GitCloneWizard_errorCannotCreate,absoluteFile.getPath()));
    setPageComplete(false);
    return;
  }
  if (!availableRefs.isEmpty() && initialBranch.getSelectionIndex() < 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorInitialBranchRequired);
    setPageComplete(false);
    return;
  }
  if (remoteText.getText().length() == 0) {
    setErrorMessage(UIText.CloneDestinationPage_errorRemoteNameRequired);
    setPageComplete(false);
    return;
  }
  setErrorMessage(null);
  setPageComplete(true);
}",0.3092352695361471
7765,"public final void selectionChanged(IAction action,ISelection selection){
  mySelection=selection;
  handler.setSelection(mySelection);
  action.setEnabled(isEnabled());
}","public final void selectionChanged(IAction action,ISelection selection){
  mySelection=selection;
  handler.setSelection(mySelection);
  if (action != null)   action.setEnabled(isEnabled());
}",0.9392265193370166
7766,"public final void selectionChanged(IAction action,ISelection selection){
  mySelection=selection;
  handler.setSelection(mySelection);
  action.setEnabled(isEnabled());
}","public final void selectionChanged(IAction action,ISelection selection){
  mySelection=selection;
  handler.setSelection(mySelection);
  if (action != null)   action.setEnabled(isEnabled());
}",0.9392265193370166
7767,"public ITypedElement getRight(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,baseCommit,repo,baseId);
}","public ITypedElement getRight(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,remoteCommit,repo,baseId);
}",0.9661016949152542
7768,"public ITypedElement getLeft(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,remoteCommit,repo,remoteId);
}","public ITypedElement getLeft(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,baseCommit,repo,remoteId);
}",0.9663865546218487
7769,"private String getAbbreviatedId(GitModelCommit commit){
  RevCommit remoteCommit=commit.getRemoteCommit();
  ObjectReader reader=commit.getRepository().newObjectReader();
  ObjectId commitId=remoteCommit.getId();
  AbbreviatedObjectId shortId;
  try {
    shortId=reader.abbreviate(commitId,6);
  }
 catch (  IOException e) {
    shortId=AbbreviatedObjectId.fromObjectId(ObjectId.zeroId());
    Activator.logError(e.getMessage(),e);
  }
 finally {
    reader.release();
  }
  return shortId.name();
}","private String getAbbreviatedId(GitModelCommit commit){
  RevCommit remoteCommit=commit.getBaseCommit();
  ObjectReader reader=commit.getRepository().newObjectReader();
  ObjectId commitId=remoteCommit.getId();
  AbbreviatedObjectId shortId;
  try {
    shortId=reader.abbreviate(commitId,6);
  }
 catch (  IOException e) {
    shortId=AbbreviatedObjectId.fromObjectId(ObjectId.zeroId());
    Activator.logError(e.getMessage(),e);
  }
 finally {
    reader.release();
  }
  return shortId.name();
}",0.9919839679358716
7770,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getRemoteCommit();
    RevCommit rc2=((GitModelCommit)e2).getRemoteCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}",0.9854014598540146
7771,"@Override public ResourceTraversal[] getTraversals(ResourceMappingContext context,IProgressMonitor monitor) throws CoreException {
  Repository repo=gitRepo.getRepository();
  List<ResourceTraversal> result=new ArrayList<ResourceTraversal>();
  for (  GitModelObject obj : gitRepo.getChildren())   if (obj instanceof GitModelCommit || obj instanceof GitModelCache) {
    RevCommit revCommit;
    if (obj instanceof GitModelCommit)     revCommit=((GitModelCommit)obj).getRemoteCommit();
 else     revCommit=((GitModelCache)obj).getRemoteCommit();
    result.add(new GitTreeTraversal(repo,revCommit));
  }
  return result.toArray(new ResourceTraversal[result.size()]);
}","@Override public ResourceTraversal[] getTraversals(ResourceMappingContext context,IProgressMonitor monitor) throws CoreException {
  Repository repo=gitRepo.getRepository();
  List<ResourceTraversal> result=new ArrayList<ResourceTraversal>();
  for (  GitModelObject obj : gitRepo.getChildren())   if (obj instanceof GitModelCommit || obj instanceof GitModelCache) {
    RevCommit revCommit;
    if (obj instanceof GitModelCommit)     revCommit=((GitModelCommit)obj).getBaseCommit();
 else     revCommit=((GitModelCache)obj).getBaseCommit();
    result.add(new GitTreeTraversal(repo,revCommit));
  }
  return result.toArray(new ResourceTraversal[result.size()]);
}",0.987987987987988
7772,"private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    String path=new String(tw.getRawPath());
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.split(""String_Node_Str"").length > 1)     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,remoteCommit,repoId,cacheId,path);
  }
  return null;
}","private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    String path=new String(tw.getRawPath());
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.split(""String_Node_Str"").length > 1)     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,baseCommit,repoId,cacheId,path);
  }
  return null;
}",0.9941002949852508
7773,"private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String pathKey=path.split(""String_Node_Str"")[0];
  GitModelCacheTree cacheTree=cacheTreeMap.get(pathKey);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,remoteCommit,repoId,cacheId,pathKey,fileFactory);
    cacheTreeMap.put(pathKey,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  return cacheTree;
}","private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String pathKey=path.split(""String_Node_Str"")[0];
  GitModelCacheTree cacheTree=cacheTreeMap.get(pathKey);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,baseCommit,repoId,cacheId,pathKey,fileFactory);
    cacheTreeMap.put(pathKey,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  return cacheTree;
}",0.9915433403805496
7774,"void addChild(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String[] entrys=path.split(""String_Node_Str"");
  String pathKey=entrys[0];
  if (entrys.length > 1) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(pathKey);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,remoteCommit,repoId,cacheId,pathKey,factory);
      cacheTreeMap.put(pathKey,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  }
 else   cacheTreeMap.put(pathKey,factory.createFileModel(this,remoteCommit,repoId,cacheId,pathKey));
}","void addChild(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String[] entrys=path.split(""String_Node_Str"");
  String pathKey=entrys[0];
  if (entrys.length > 1) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(pathKey);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,baseCommit,repoId,cacheId,pathKey,factory);
      cacheTreeMap.put(pathKey,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  }
 else   cacheTreeMap.put(pathKey,factory.createFileModel(this,baseCommit,repoId,cacheId,pathKey));
}",0.987034035656402
7775,"@Override public int hashCode(){
  int result=getLocation().hashCode() ^ remoteCommit.hashCode();
  if (baseCommit != null)   result^=baseCommit.hashCode();
  return result;
}","@Override public int hashCode(){
  int result=getLocation().hashCode() ^ baseCommit.hashCode();
  if (remoteCommit != null)   result^=remoteCommit.hashCode();
  return result;
}",0.9318181818181818
7776,"@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=remoteCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (baseCommit != null)     baseNth=tw.addTree(baseCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}","@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=baseCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (remoteCommit != null)     baseNth=tw.addTree(remoteCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}",0.982608695652174
7777,"@Override public String getName(){
  if (name == null)   name=remoteCommit.getShortMessage();
  return name;
}","@Override public String getName(){
  if (name == null)   name=baseCommit.getShortMessage();
  return name;
}",0.963302752293578
7778,"/** 
 * @param parent instance of parent object
 * @param commit commit connected with this container
 * @param direction indicate change direction
 * @throws IOException
 */
protected GitModelObjectContainer(GitModelObject parent,RevCommit commit,int direction) throws IOException {
  super(parent);
  kind=direction;
  remoteCommit=commit;
  ancestorCommit=calculateAncestor(remoteCommit);
  RevCommit[] parents=remoteCommit.getParents();
  if (parents != null && parents.length > 0)   baseCommit=remoteCommit.getParent(0);
 else {
    baseCommit=null;
  }
}","/** 
 * @param parent instance of parent object
 * @param commit commit connected with this container
 * @param direction indicate change direction
 * @throws IOException
 */
protected GitModelObjectContainer(GitModelObject parent,RevCommit commit,int direction) throws IOException {
  super(parent);
  kind=direction;
  baseCommit=commit;
  ancestorCommit=calculateAncestor(baseCommit);
  RevCommit[] parents=baseCommit.getParents();
  if (parents != null && parents.length > 0)   remoteCommit=baseCommit.getParent(0);
 else {
    remoteCommit=null;
  }
}",0.942652329749104
7779,"private void calculateKind(){
  ObjectId base=baseCommit != null ? baseCommit.getId() : zeroId();
  if (base.equals(zeroId()))   kind=kind | ADDITION;
 else   if (remoteCommit.equals(zeroId()))   kind=kind | DELETION;
 else   kind=kind | CHANGE;
}","private void calculateKind(){
  ObjectId remote=remoteCommit != null ? remoteCommit.getId() : zeroId();
  if (remote.equals(zeroId()))   kind=kind | ADDITION;
 else   if (baseCommit.equals(zeroId()))   kind=kind | DELETION;
 else   kind=kind | CHANGE;
}",0.912
7780,"/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId=tw.getObjectId(ancestorNth);
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getRemoteCommit(),objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getRemoteCommit(),objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}","/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId=tw.getObjectId(ancestorNth);
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}",0.952127659574468
7781,"public Object execute(ExecutionEvent event) throws ExecutionException {
  boolean compareMode=Boolean.TRUE.toString().equals(event.getParameter(HistoryViewCommands.COMPARE_MODE_PARAM));
  IStructuredSelection selection=getSelection(getPage());
  if (selection.size() < 1)   return null;
  Object input=getPage().getInputInternal().getSingleFile();
  if (input == null)   return null;
  boolean errorOccured=false;
  List<ObjectId> ids=new ArrayList<ObjectId>();
  String gitPath=null;
  if (input instanceof IFile) {
    IFile resource=(IFile)input;
    final RepositoryMapping map=RepositoryMapping.getMapping(resource);
    gitPath=map.getRepoRelativePath(resource);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,map.getRepository(),null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,map.getRepository());
          final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(SaveableCompareEditorInput.createFileElement(resource),right,null);
          try {
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (input instanceof File) {
    File fileInput=(File)input;
    Repository repo=getRepository(event);
    gitPath=getRepoRelativePath(repo,fileInput);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,repo,null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          try {
            ITypedElement left=CompareUtils.getFileRevisionTypedElement(gitPath,new RevWalk(repo).parseCommit(repo.resolve(Constants.HEAD)),repo);
            ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,repo);
            final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(left,right,null);
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (errorOccured)   Activator.showError(UIText.GitHistoryPage_openFailed,null);
  if (ids.size() > 0) {
    String idList=""String_Node_Str"";
    for (    ObjectId objectId : ids) {
      idList+=objectId.getName() + ""String_Node_Str"";
    }
    MessageDialog.openError(getPart(event).getSite().getShell(),UIText.GitHistoryPage_fileNotFound,NLS.bind(UIText.GitHistoryPage_notContainedInCommits,gitPath,idList));
  }
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  boolean compareMode=Boolean.TRUE.toString().equals(event.getParameter(HistoryViewCommands.COMPARE_MODE_PARAM));
  IStructuredSelection selection=getSelection(getPage());
  if (selection.size() < 1)   return null;
  Object input=getPage().getInputInternal().getSingleFile();
  if (input == null)   return null;
  boolean errorOccured=false;
  List<ObjectId> ids=new ArrayList<ObjectId>();
  String gitPath=null;
  if (input instanceof IFile) {
    IFile resource=(IFile)input;
    final RepositoryMapping map=RepositoryMapping.getMapping(resource);
    gitPath=map.getRepoRelativePath(resource);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,map.getRepository(),null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,map.getRepository());
          final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(SaveableCompareEditorInput.createFileElement(resource),right,null);
          try {
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (input instanceof File) {
    File fileInput=(File)input;
    Repository repo=getRepository(event);
    gitPath=getRepoRelativePath(repo,fileInput);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,repo,null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          try {
            ITypedElement left=CompareUtils.getFileRevisionTypedElement(gitPath,new RevWalk(repo).parseCommit(repo.resolve(Constants.HEAD)),repo);
            ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,repo);
            final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(left,right,null);
            openInCompare(event,in);
          }
 catch (          IOException e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (errorOccured)   Activator.showError(UIText.GitHistoryPage_openFailed,null);
  if (ids.size() > 0) {
    String idList=""String_Node_Str"";
    for (    ObjectId objectId : ids) {
      idList+=objectId.getName() + ""String_Node_Str"";
    }
    MessageDialog.openError(getPart(event).getSite().getShell(),UIText.GitHistoryPage_fileNotFound,NLS.bind(UIText.GitHistoryPage_notContainedInCommits,gitPath,idList));
  }
  return null;
}",0.9997395833333332
7782,"public Object execute(ExecutionEvent event) throws ExecutionException {
  boolean compareMode=Boolean.TRUE.toString().equals(event.getParameter(HistoryViewCommands.COMPARE_MODE_PARAM));
  IStructuredSelection selection=getSelection(getPage());
  if (selection.size() < 1)   return null;
  Object input=getPage().getInputInternal().getSingleFile();
  if (input == null)   return null;
  boolean errorOccured=false;
  List<ObjectId> ids=new ArrayList<ObjectId>();
  String gitPath=null;
  if (input instanceof IFile) {
    IFile resource=(IFile)input;
    final RepositoryMapping map=RepositoryMapping.getMapping(resource);
    gitPath=map.getRepoRelativePath(resource);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,map.getRepository(),null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,map.getRepository());
          final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(SaveableCompareEditorInput.createFileElement(resource),right,null);
          try {
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (input instanceof File) {
    File fileInput=(File)input;
    Repository repo=getRepository(event);
    gitPath=getRepoRelativePath(repo,fileInput);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,repo,null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          try {
            ITypedElement left=CompareUtils.getFileRevisionTypedElement(gitPath,new RevWalk(repo).parseCommit(repo.resolve(Constants.HEAD)),repo);
            ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,repo);
            final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(left,right,null);
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (errorOccured)   Activator.showError(UIText.GitHistoryPage_openFailed,null);
  if (ids.size() > 0) {
    String idList=""String_Node_Str"";
    for (    ObjectId objectId : ids) {
      idList+=objectId.getName() + ""String_Node_Str"";
    }
    MessageDialog.openError(getPart(event).getSite().getShell(),UIText.GitHistoryPage_fileNotFound,NLS.bind(UIText.GitHistoryPage_notContainedInCommits,gitPath,idList));
  }
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  boolean compareMode=Boolean.TRUE.toString().equals(event.getParameter(HistoryViewCommands.COMPARE_MODE_PARAM));
  IStructuredSelection selection=getSelection(getPage());
  if (selection.size() < 1)   return null;
  Object input=getPage().getInputInternal().getSingleFile();
  if (input == null)   return null;
  boolean errorOccured=false;
  List<ObjectId> ids=new ArrayList<ObjectId>();
  String gitPath=null;
  if (input instanceof IFile) {
    IFile resource=(IFile)input;
    final RepositoryMapping map=RepositoryMapping.getMapping(resource);
    gitPath=map.getRepoRelativePath(resource);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,map.getRepository(),null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,map.getRepository());
          final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(SaveableCompareEditorInput.createFileElement(resource),right,null);
          try {
            openInCompare(event,in);
          }
 catch (          Exception e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (input instanceof File) {
    File fileInput=(File)input;
    Repository repo=getRepository(event);
    gitPath=getRepoRelativePath(repo,fileInput);
    Iterator<?> it=selection.iterator();
    while (it.hasNext()) {
      RevCommit commit=(RevCommit)it.next();
      IFileRevision rev=null;
      try {
        rev=CompareUtils.getFileRevision(gitPath,commit,repo,null);
      }
 catch (      IOException e) {
        Activator.logError(NLS.bind(UIText.GitHistoryPage_errorLookingUpPath,gitPath,commit.getId()),e);
        errorOccured=true;
      }
      if (rev != null) {
        if (compareMode) {
          try {
            ITypedElement left=CompareUtils.getFileRevisionTypedElement(gitPath,new RevWalk(repo).parseCommit(repo.resolve(Constants.HEAD)),repo);
            ITypedElement right=CompareUtils.getFileRevisionTypedElement(gitPath,commit,repo);
            final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(left,right,null);
            openInCompare(event,in);
          }
 catch (          IOException e) {
            errorOccured=true;
          }
        }
 else {
          try {
            EgitUiEditorUtils.openEditor(getPart(event).getSite().getPage(),rev,new NullProgressMonitor());
          }
 catch (          CoreException e) {
            Activator.logError(UIText.GitHistoryPage_openFailed,e);
            errorOccured=true;
          }
        }
      }
 else {
        ids.add(commit.getId());
      }
    }
  }
  if (errorOccured)   Activator.showError(UIText.GitHistoryPage_openFailed,null);
  if (ids.size() > 0) {
    String idList=""String_Node_Str"";
    for (    ObjectId objectId : ids) {
      idList+=objectId.getName() + ""String_Node_Str"";
    }
    MessageDialog.openError(getPart(event).getSite().getShell(),UIText.GitHistoryPage_fileNotFound,NLS.bind(UIText.GitHistoryPage_notContainedInCommits,gitPath,idList));
  }
  return null;
}",0.9997395833333332
7783,"public ITypedElement getRight(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,baseCommit,repo,baseId);
}","public ITypedElement getRight(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,remoteCommit,repo,baseId);
}",0.9661016949152542
7784,"public ITypedElement getLeft(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,remoteCommit,repo,remoteId);
}","public ITypedElement getLeft(){
  return CompareUtils.getFileRevisionTypedElement(gitPath,baseCommit,repo,remoteId);
}",0.9663865546218487
7785,"private String getAbbreviatedId(GitModelCommit commit){
  RevCommit remoteCommit=commit.getRemoteCommit();
  ObjectReader reader=commit.getRepository().newObjectReader();
  ObjectId commitId=remoteCommit.getId();
  AbbreviatedObjectId shortId;
  try {
    shortId=reader.abbreviate(commitId,6);
  }
 catch (  IOException e) {
    shortId=AbbreviatedObjectId.fromObjectId(ObjectId.zeroId());
    Activator.logError(e.getMessage(),e);
  }
 finally {
    reader.release();
  }
  return shortId.name();
}","private String getAbbreviatedId(GitModelCommit commit){
  RevCommit remoteCommit=commit.getBaseCommit();
  ObjectReader reader=commit.getRepository().newObjectReader();
  ObjectId commitId=remoteCommit.getId();
  AbbreviatedObjectId shortId;
  try {
    shortId=reader.abbreviate(commitId,6);
  }
 catch (  IOException e) {
    shortId=AbbreviatedObjectId.fromObjectId(ObjectId.zeroId());
    Activator.logError(e.getMessage(),e);
  }
 finally {
    reader.release();
  }
  return shortId.name();
}",0.9919839679358716
7786,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getRemoteCommit();
    RevCommit rc2=((GitModelCommit)e2).getRemoteCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 instanceof GitModelWorkingTree)   return -1;
  if (e2 instanceof GitModelWorkingTree)   return 1;
  if (e1 instanceof GitModelCache)   return -2;
  if (e2 instanceof GitModelCache)   return 2;
  if (e1 instanceof GitModelCommit && e2 instanceof GitModelCommit) {
    RevCommit rc1=((GitModelCommit)e1).getBaseCommit();
    RevCommit rc2=((GitModelCommit)e2).getBaseCommit();
    return rc2.getCommitTime() - rc1.getCommitTime();
  }
  return super.compare(viewer,e1,e2);
}",0.9854014598540146
7787,"@Override public ResourceTraversal[] getTraversals(ResourceMappingContext context,IProgressMonitor monitor) throws CoreException {
  Repository repo=gitRepo.getRepository();
  List<ResourceTraversal> result=new ArrayList<ResourceTraversal>();
  for (  GitModelObject obj : gitRepo.getChildren())   if (obj instanceof GitModelCommit || obj instanceof GitModelCache) {
    RevCommit revCommit;
    if (obj instanceof GitModelCommit)     revCommit=((GitModelCommit)obj).getRemoteCommit();
 else     revCommit=((GitModelCache)obj).getRemoteCommit();
    result.add(new GitTreeTraversal(repo,revCommit));
  }
  return result.toArray(new ResourceTraversal[result.size()]);
}","@Override public ResourceTraversal[] getTraversals(ResourceMappingContext context,IProgressMonitor monitor) throws CoreException {
  Repository repo=gitRepo.getRepository();
  List<ResourceTraversal> result=new ArrayList<ResourceTraversal>();
  for (  GitModelObject obj : gitRepo.getChildren())   if (obj instanceof GitModelCommit || obj instanceof GitModelCache) {
    RevCommit revCommit;
    if (obj instanceof GitModelCommit)     revCommit=((GitModelCommit)obj).getBaseCommit();
 else     revCommit=((GitModelCache)obj).getBaseCommit();
    result.add(new GitTreeTraversal(repo,revCommit));
  }
  return result.toArray(new ResourceTraversal[result.size()]);
}",0.987987987987988
7788,"private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    String path=new String(tw.getRawPath());
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.split(""String_Node_Str"").length > 1)     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,remoteCommit,repoId,cacheId,path);
  }
  return null;
}","private GitModelObject extractFromCache(TreeWalk tw) throws IOException {
  DirCacheIterator cacheIterator=tw.getTree(dirCacheIteratorNth,DirCacheIterator.class);
  if (cacheIterator == null)   return null;
  DirCacheEntry cacheEntry=cacheIterator.getDirCacheEntry();
  if (cacheEntry == null)   return null;
  if (shouldIncludeEntry(tw)) {
    String path=new String(tw.getRawPath());
    ObjectId repoId=tw.getObjectId(BASE_NTH);
    ObjectId cacheId=tw.getObjectId(REMOTE_NTH);
    if (path.split(""String_Node_Str"").length > 1)     return handleCacheTree(repoId,cacheId,path);
    return fileFactory.createFileModel(this,baseCommit,repoId,cacheId,path);
  }
  return null;
}",0.9941002949852508
7789,"private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String pathKey=path.split(""String_Node_Str"")[0];
  GitModelCacheTree cacheTree=cacheTreeMap.get(pathKey);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,remoteCommit,repoId,cacheId,pathKey,fileFactory);
    cacheTreeMap.put(pathKey,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  return cacheTree;
}","private GitModelObject handleCacheTree(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String pathKey=path.split(""String_Node_Str"")[0];
  GitModelCacheTree cacheTree=cacheTreeMap.get(pathKey);
  if (cacheTree == null) {
    cacheTree=new GitModelCacheTree(this,baseCommit,repoId,cacheId,pathKey,fileFactory);
    cacheTreeMap.put(pathKey,cacheTree);
  }
  cacheTree.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  return cacheTree;
}",0.9915433403805496
7790,"void addChild(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String[] entrys=path.split(""String_Node_Str"");
  String pathKey=entrys[0];
  if (entrys.length > 1) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(pathKey);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,remoteCommit,repoId,cacheId,pathKey,factory);
      cacheTreeMap.put(pathKey,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  }
 else   cacheTreeMap.put(pathKey,factory.createFileModel(this,remoteCommit,repoId,cacheId,pathKey));
}","void addChild(ObjectId repoId,ObjectId cacheId,String path) throws IOException {
  String[] entrys=path.split(""String_Node_Str"");
  String pathKey=entrys[0];
  if (entrys.length > 1) {
    GitModelCacheTree cacheEntry=(GitModelCacheTree)cacheTreeMap.get(pathKey);
    if (cacheEntry == null) {
      cacheEntry=new GitModelCacheTree(this,baseCommit,repoId,cacheId,pathKey,factory);
      cacheTreeMap.put(pathKey,cacheEntry);
    }
    cacheEntry.addChild(repoId,cacheId,path.substring(path.indexOf('/') + 1));
  }
 else   cacheTreeMap.put(pathKey,factory.createFileModel(this,baseCommit,repoId,cacheId,pathKey));
}",0.987034035656402
7791,"@Override public int hashCode(){
  int result=getLocation().hashCode() ^ remoteCommit.hashCode();
  if (baseCommit != null)   result^=baseCommit.hashCode();
  return result;
}","@Override public int hashCode(){
  int result=getLocation().hashCode() ^ baseCommit.hashCode();
  if (remoteCommit != null)   result^=remoteCommit.hashCode();
  return result;
}",0.9318181818181818
7792,"@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=remoteCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (baseCommit != null)     baseNth=tw.addTree(baseCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}","@Override protected GitModelObject[] getChildrenImpl(){
  TreeWalk tw=createTreeWalk();
  List<GitModelObject> result=new ArrayList<GitModelObject>();
  try {
    RevTree actualTree=baseCommit.getTree();
    int actualNth=tw.addTree(actualTree);
    int baseNth=-1;
    if (remoteCommit != null)     baseNth=tw.addTree(remoteCommit.getTree());
    int ancestorNth=tw.addTree(ancestorCommit.getTree());
    while (tw.next()) {
      GitModelObject obj=getModelObject(tw,ancestorNth,baseNth,actualNth);
      if (obj != null)       result.add(obj);
    }
  }
 catch (  IOException e) {
    Activator.logError(e.getMessage(),e);
  }
  return result.toArray(new GitModelObject[result.size()]);
}",0.982608695652174
7793,"@Override public String getName(){
  if (name == null)   name=remoteCommit.getShortMessage();
  return name;
}","@Override public String getName(){
  if (name == null)   name=baseCommit.getShortMessage();
  return name;
}",0.963302752293578
7794,"/** 
 * @param parent instance of parent object
 * @param commit commit connected with this container
 * @param direction indicate change direction
 * @throws IOException
 */
protected GitModelObjectContainer(GitModelObject parent,RevCommit commit,int direction) throws IOException {
  super(parent);
  kind=direction;
  remoteCommit=commit;
  ancestorCommit=calculateAncestor(remoteCommit);
  RevCommit[] parents=remoteCommit.getParents();
  if (parents != null && parents.length > 0)   baseCommit=remoteCommit.getParent(0);
 else {
    baseCommit=null;
  }
}","/** 
 * @param parent instance of parent object
 * @param commit commit connected with this container
 * @param direction indicate change direction
 * @throws IOException
 */
protected GitModelObjectContainer(GitModelObject parent,RevCommit commit,int direction) throws IOException {
  super(parent);
  kind=direction;
  baseCommit=commit;
  ancestorCommit=calculateAncestor(baseCommit);
  RevCommit[] parents=baseCommit.getParents();
  if (parents != null && parents.length > 0)   remoteCommit=baseCommit.getParent(0);
 else {
    remoteCommit=null;
  }
}",0.942652329749104
7795,"private void calculateKind(){
  ObjectId base=baseCommit != null ? baseCommit.getId() : zeroId();
  if (base.equals(zeroId()))   kind=kind | ADDITION;
 else   if (remoteCommit.equals(zeroId()))   kind=kind | DELETION;
 else   kind=kind | CHANGE;
}","private void calculateKind(){
  ObjectId remote=remoteCommit != null ? remoteCommit.getId() : zeroId();
  if (remote.equals(zeroId()))   kind=kind | ADDITION;
 else   if (baseCommit.equals(zeroId()))   kind=kind | DELETION;
 else   kind=kind | CHANGE;
}",0.912
7796,"/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId=tw.getObjectId(ancestorNth);
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getRemoteCommit(),objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getRemoteCommit(),objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}","/** 
 * @param tw instance of {@link TreeWalk} that should be used
 * @param ancestorNth
 * @param baseNth
 * @param actualNth
 * @return {@link GitModelObject} instance of given parameters
 * @throws IOException
 */
protected GitModelObject getModelObject(TreeWalk tw,int ancestorNth,int baseNth,int actualNth) throws IOException {
  String objName=tw.getNameString();
  ObjectId objBaseId;
  if (baseNth > -1)   objBaseId=tw.getObjectId(baseNth);
 else   objBaseId=ObjectId.zeroId();
  ObjectId objRemoteId=tw.getObjectId(actualNth);
  ObjectId objAncestorId=tw.getObjectId(ancestorNth);
  int objectType=tw.getFileMode(actualNth).getObjectType();
  if (objectType == Constants.OBJ_BLOB)   return new GitModelBlob(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
 else   if (objectType == Constants.OBJ_TREE)   return new GitModelTree(this,getBaseCommit(),objAncestorId,objBaseId,objRemoteId,objName);
  return null;
}",0.952127659574468
7797,"/** 
 * Allows access to the localized values of the EGit UI Plug-in <p>
 * @param key see  {@link #getPluginLocalizedValue(String)}
 * @param keepAmpersands if <code>true</code>, ampersands will be kept
 * @return see {@link #getPluginLocalizedValue(String)}
 * @throws MissingResourceException see  {@link #getPluginLocalizedValue(String)}
 */
public synchronized String getPluginLocalizedValue(String key,boolean keepAmpersands) throws MissingResourceException {
  if (myBundle == null) {
    ServiceTracker localizationTracker;
    BundleContext context=Activator.getDefault().getBundle().getBundleContext();
    localizationTracker=new ServiceTracker(context,BundleLocalization.class.getName(),null);
    localizationTracker.open();
    BundleLocalization location=(BundleLocalization)localizationTracker.getService();
    if (location != null)     myBundle=location.getLocalization(Activator.getDefault().getBundle(),Locale.getDefault().toString());
  }
  String raw=myBundle.getString(key);
  if (keepAmpersands || raw.indexOf(AMPERSAND) < 0)   return raw;
  StringBuilder sb=new StringBuilder(raw.length());
  for (int i=0; i < raw.length(); i++) {
    char c=raw.charAt(i);
    if (c != AMPERSAND)     sb.append(c);
  }
  return sb.toString();
}","/** 
 * Allows access to the localized values of the EGit UI Plug-in <p>
 * @param key see  {@link #getPluginLocalizedValue(String)}
 * @param keepAmpersands if <code>true</code>, ampersands will be kept
 * @return see {@link #getPluginLocalizedValue(String)}
 * @throws MissingResourceException see  {@link #getPluginLocalizedValue(String)}
 */
public synchronized String getPluginLocalizedValue(String key,boolean keepAmpersands) throws MissingResourceException {
  if (myBundle == null) {
    ServiceTracker localizationTracker;
    BundleContext context=Activator.getDefault().getBundle().getBundleContext();
    localizationTracker=new ServiceTracker(context,BundleLocalization.class.getName(),null);
    localizationTracker.open();
    BundleLocalization location=(BundleLocalization)localizationTracker.getService();
    if (location != null)     myBundle=location.getLocalization(Activator.getDefault().getBundle(),Locale.getDefault().toString());
  }
  if (myBundle != null) {
    String raw=myBundle.getString(key);
    if (keepAmpersands || raw.indexOf(AMPERSAND) < 0)     return raw;
    StringBuilder sb=new StringBuilder(raw.length());
    for (int i=0; i < raw.length(); i++) {
      char c=raw.charAt(i);
      if (c != AMPERSAND)       sb.append(c);
    }
    return sb.toString();
  }
  return null;
}",0.974737660318694
7798,"private ArrayList<String> buildFilterPaths(final IResource[] inResources,final File[] inFiles,final Repository db) throws IllegalStateException {
  final ArrayList<String> paths;
  if (inResources != null) {
    paths=new ArrayList<String>(inResources.length);
    for (    final IResource r : inResources) {
      final RepositoryMapping map=RepositoryMapping.getMapping(r);
      if (map == null)       continue;
      if (db != map.getRepository()) {
        throw new IllegalStateException(UIText.AbstractHistoryCommanndHandler_NoUniqueRepository);
      }
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        final String path=map.getRepoRelativePath(r.getParent());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT) {
        final String path=map.getRepoRelativePath(r.getProject());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLREPO) {
      }
 else {
        final String path=map.getRepoRelativePath(r);
        if (path != null && path.length() > 0)         paths.add(path);
      }
    }
  }
 else   if (inFiles != null) {
    IPath workdirPath=new Path(db.getWorkTree().getPath());
    IPath gitDirPath=new Path(db.getDirectory().getPath());
    int segmentCount=workdirPath.segmentCount();
    paths=new ArrayList<String>(inFiles.length);
    for (    File file : inFiles) {
      IPath filePath;
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        filePath=new Path(file.getParentFile().getPath());
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT || showAllFilter == ShowFilter.SHOWALLREPO) {
        continue;
      }
 else {
        filePath=new Path(file.getPath());
      }
      if (gitDirPath.isPrefixOf(filePath)) {
        throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_FileOrFolderPartOfGitDirMessage,filePath.toOSString()));
      }
      IPath pathToAdd=filePath.removeFirstSegments(segmentCount).setDevice(null);
      if (!pathToAdd.isEmpty()) {
        paths.add(pathToAdd.toString());
      }
    }
  }
 else {
    paths=new ArrayList<String>(0);
  }
  return paths;
}","private ArrayList<String> buildFilterPaths(final IResource[] inResources,final File[] inFiles,final Repository db) throws IllegalStateException {
  final ArrayList<String> paths;
  if (inResources != null) {
    paths=new ArrayList<String>(inResources.length);
    for (    final IResource r : inResources) {
      final RepositoryMapping map=RepositoryMapping.getMapping(r);
      if (map == null)       continue;
      if (db != map.getRepository()) {
        throw new IllegalStateException(UIText.AbstractHistoryCommanndHandler_NoUniqueRepository);
      }
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        final String path;
        if (r.getParent() instanceof IWorkspaceRoot)         path=map.getRepoRelativePath(r.getProject());
 else         path=map.getRepoRelativePath(r.getParent());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT) {
        final String path=map.getRepoRelativePath(r.getProject());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLREPO) {
      }
 else {
        final String path=map.getRepoRelativePath(r);
        if (path != null && path.length() > 0)         paths.add(path);
      }
    }
  }
 else   if (inFiles != null) {
    IPath workdirPath=new Path(db.getWorkTree().getPath());
    IPath gitDirPath=new Path(db.getDirectory().getPath());
    int segmentCount=workdirPath.segmentCount();
    paths=new ArrayList<String>(inFiles.length);
    for (    File file : inFiles) {
      IPath filePath;
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        filePath=new Path(file.getParentFile().getPath());
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT || showAllFilter == ShowFilter.SHOWALLREPO) {
        continue;
      }
 else {
        filePath=new Path(file.getPath());
      }
      if (gitDirPath.isPrefixOf(filePath)) {
        throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_FileOrFolderPartOfGitDirMessage,filePath.toOSString()));
      }
      IPath pathToAdd=filePath.removeFirstSegments(segmentCount).setDevice(null);
      if (!pathToAdd.isEmpty()) {
        paths.add(pathToAdd.toString());
      }
    }
  }
 else {
    paths=new ArrayList<String>(0);
  }
  return paths;
}",0.972313058643994
7799,"private ArrayList<String> buildFilterPaths(final IResource[] inResources,final File[] inFiles,final Repository db) throws IllegalStateException {
  final ArrayList<String> paths;
  if (inResources != null) {
    paths=new ArrayList<String>(inResources.length);
    for (    final IResource r : inResources) {
      final RepositoryMapping map=RepositoryMapping.getMapping(r);
      if (map == null)       continue;
      if (db != map.getRepository()) {
        throw new IllegalStateException(UIText.AbstractHistoryCommanndHandler_NoUniqueRepository);
      }
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        final String path=map.getRepoRelativePath(r.getParent());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT) {
        final String path=map.getRepoRelativePath(r.getProject());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLREPO) {
      }
 else {
        final String path=map.getRepoRelativePath(r);
        if (path != null && path.length() > 0)         paths.add(path);
      }
    }
  }
 else   if (inFiles != null) {
    IPath workdirPath=new Path(db.getWorkTree().getPath());
    IPath gitDirPath=new Path(db.getDirectory().getPath());
    int segmentCount=workdirPath.segmentCount();
    paths=new ArrayList<String>(inFiles.length);
    for (    File file : inFiles) {
      IPath filePath;
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        filePath=new Path(file.getParentFile().getPath());
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT || showAllFilter == ShowFilter.SHOWALLREPO) {
        continue;
      }
 else {
        filePath=new Path(file.getPath());
      }
      if (gitDirPath.isPrefixOf(filePath)) {
        throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_FileOrFolderPartOfGitDirMessage,filePath.toOSString()));
      }
      IPath pathToAdd=filePath.removeFirstSegments(segmentCount).setDevice(null);
      if (!pathToAdd.isEmpty()) {
        paths.add(pathToAdd.toString());
      }
    }
  }
 else {
    paths=new ArrayList<String>(0);
  }
  return paths;
}","private ArrayList<String> buildFilterPaths(final IResource[] inResources,final File[] inFiles,final Repository db) throws IllegalStateException {
  final ArrayList<String> paths;
  if (inResources != null) {
    paths=new ArrayList<String>(inResources.length);
    for (    final IResource r : inResources) {
      final RepositoryMapping map=RepositoryMapping.getMapping(r);
      if (map == null)       continue;
      if (db != map.getRepository()) {
        throw new IllegalStateException(UIText.AbstractHistoryCommanndHandler_NoUniqueRepository);
      }
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        final String path;
        if (r.getParent() instanceof IWorkspaceRoot)         path=map.getRepoRelativePath(r.getProject());
 else         path=map.getRepoRelativePath(r.getParent());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT) {
        final String path=map.getRepoRelativePath(r.getProject());
        if (path != null && path.length() > 0)         paths.add(path);
      }
 else       if (showAllFilter == ShowFilter.SHOWALLREPO) {
      }
 else {
        final String path=map.getRepoRelativePath(r);
        if (path != null && path.length() > 0)         paths.add(path);
      }
    }
  }
 else   if (inFiles != null) {
    IPath workdirPath=new Path(db.getWorkTree().getPath());
    IPath gitDirPath=new Path(db.getDirectory().getPath());
    int segmentCount=workdirPath.segmentCount();
    paths=new ArrayList<String>(inFiles.length);
    for (    File file : inFiles) {
      IPath filePath;
      if (showAllFilter == ShowFilter.SHOWALLFOLDER) {
        filePath=new Path(file.getParentFile().getPath());
      }
 else       if (showAllFilter == ShowFilter.SHOWALLPROJECT || showAllFilter == ShowFilter.SHOWALLREPO) {
        continue;
      }
 else {
        filePath=new Path(file.getPath());
      }
      if (gitDirPath.isPrefixOf(filePath)) {
        throw new IllegalStateException(NLS.bind(UIText.GitHistoryPage_FileOrFolderPartOfGitDirMessage,filePath.toOSString()));
      }
      IPath pathToAdd=filePath.removeFirstSegments(segmentCount).setDevice(null);
      if (!pathToAdd.isEmpty()) {
        paths.add(pathToAdd.toString());
      }
    }
  }
 else {
    paths=new ArrayList<String>(0);
  }
  return paths;
}",0.972313058643994
7800,"/** 
 * Creates a new branch
 * @param refName starting point for the new branch
 * @param newRefName
 * @throws IOException
 */
public void createBranch(String refName,String newRefName) throws IOException {
  RefUpdate updateRef;
  updateRef=repository.updateRef(newRefName);
  Ref startRef=repository.getRef(refName);
  ObjectId startAt=repository.resolve(refName);
  String startBranch;
  if (startRef != null)   startBranch=refName;
 else   startBranch=startAt.name();
  startBranch=repository.shortenRefName(startBranch);
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}","/** 
 * Creates a new branch
 * @param refName starting point for the new branch
 * @param newRefName
 * @throws IOException
 */
public void createBranch(String refName,String newRefName) throws IOException {
  RefUpdate updateRef;
  updateRef=repository.updateRef(newRefName);
  Ref startRef=repository.getRef(refName);
  ObjectId startAt=repository.resolve(refName);
  String startBranch;
  if (startRef != null)   startBranch=refName;
 else   startBranch=startAt.name();
  startBranch=Repository.shortenRefName(startBranch);
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}",0.9984779299847792
7801,"protected static void createStableBranch(Repository myRepository) throws IOException {
  String newRefName=""String_Node_Str"";
  RefUpdate updateRef=myRepository.updateRef(newRefName);
  Ref sourceBranch=myRepository.getRef(""String_Node_Str"");
  ObjectId startAt=sourceBranch.getObjectId();
  String startBranch=myRepository.shortenRefName(sourceBranch.getName());
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}","protected static void createStableBranch(Repository myRepository) throws IOException {
  String newRefName=""String_Node_Str"";
  RefUpdate updateRef=myRepository.updateRef(newRefName);
  Ref sourceBranch=myRepository.getRef(""String_Node_Str"");
  ObjectId startAt=sourceBranch.getObjectId();
  String startBranch=Repository.shortenRefName(sourceBranch.getName());
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}",0.9979674796747968
7802,"protected static void createStableBranch(Repository myRepository) throws IOException {
  String newRefName=""String_Node_Str"";
  RefUpdate updateRef=myRepository.updateRef(newRefName);
  Ref sourceBranch=myRepository.getRef(""String_Node_Str"");
  ObjectId startAt=sourceBranch.getObjectId();
  String startBranch=myRepository.shortenRefName(sourceBranch.getName());
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}","protected static void createStableBranch(Repository myRepository) throws IOException {
  String newRefName=""String_Node_Str"";
  RefUpdate updateRef=myRepository.updateRef(newRefName);
  Ref sourceBranch=myRepository.getRef(""String_Node_Str"");
  ObjectId startAt=sourceBranch.getObjectId();
  String startBranch=Repository.shortenRefName(sourceBranch.getName());
  updateRef.setNewObjectId(startAt);
  updateRef.setRefLogMessage(""String_Node_Str"" + startBranch,false);
  updateRef.update();
}",0.9979674796747968
7803,"public StyledString getStyledText(Object element){
  if (!(element instanceof RepositoryTreeNode))   return null;
  RepositoryTreeNode node=(RepositoryTreeNode)element;
  try {
switch (node.getType()) {
case REPO:
      Repository repository=(Repository)node.getObject();
    File directory=repository.getDirectory();
  StyledString string=new StyledString(directory.getParentFile().getName());
string.append(""String_Node_Str"" + directory.getAbsolutePath(),StyledString.QUALIFIER_STYLER);
string.append(""String_Node_Str"" + repository.getBranch() + ""String_Node_Str"",StyledString.DECORATIONS_STYLER);
return string;
case ADDITIONALREF:
Ref ref=(Ref)node.getObject();
StyledString refName=new StyledString(node.getRepository().shortenRefName(ref.getName()));
if (ref.isSymbolic()) {
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ref.getLeaf().getName(),StyledString.QUALIFIER_STYLER);
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ObjectId.toString(ref.getLeaf().getObjectId()),StyledString.QUALIFIER_STYLER);
}
 else {
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ObjectId.toString(ref.getObjectId()),StyledString.QUALIFIER_STYLER);
}
return refName;
case WORKINGDIR:
StyledString dirString=new StyledString(UIText.RepositoriesView_WorkingDir_treenode);
dirString.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
if (node.getRepository().isBare()) {
dirString.append(UIText.RepositoriesViewLabelProvider_BareRepositoryMessage,StyledString.QUALIFIER_STYLER);
}
 else {
dirString.append(node.getRepository().getWorkTree().getAbsolutePath(),StyledString.QUALIFIER_STYLER);
}
return dirString;
case PUSH:
case FETCH:
case FILE:
case FOLDER:
case BRANCHES:
case LOCAL:
case REMOTETRACKING:
case BRANCHHIERARCHY:
case TAGS:
case ADDITIONALREFS:
case REMOTES:
case REMOTE:
case ERROR:
case REF:
case TAG:
{
String label=getSimpleText(node);
if (label != null) return new StyledString(label);
}
}
}
 catch (IOException e) {
Activator.logError(e.getMessage(),e);
}
return null;
}","public StyledString getStyledText(Object element){
  if (!(element instanceof RepositoryTreeNode))   return null;
  RepositoryTreeNode node=(RepositoryTreeNode)element;
  try {
switch (node.getType()) {
case REPO:
      Repository repository=(Repository)node.getObject();
    File directory=repository.getDirectory();
  StyledString string=new StyledString(directory.getParentFile().getName());
string.append(""String_Node_Str"" + directory.getAbsolutePath(),StyledString.QUALIFIER_STYLER);
string.append(""String_Node_Str"" + repository.getBranch() + ""String_Node_Str"",StyledString.DECORATIONS_STYLER);
return string;
case ADDITIONALREF:
Ref ref=(Ref)node.getObject();
StyledString refName=new StyledString(Repository.shortenRefName(ref.getName()));
if (ref.isSymbolic()) {
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ref.getLeaf().getName(),StyledString.QUALIFIER_STYLER);
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ObjectId.toString(ref.getLeaf().getObjectId()),StyledString.QUALIFIER_STYLER);
}
 else {
refName.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
refName.append(ObjectId.toString(ref.getObjectId()),StyledString.QUALIFIER_STYLER);
}
return refName;
case WORKINGDIR:
StyledString dirString=new StyledString(UIText.RepositoriesView_WorkingDir_treenode);
dirString.append(""String_Node_Str"",StyledString.QUALIFIER_STYLER);
if (node.getRepository().isBare()) {
dirString.append(UIText.RepositoriesViewLabelProvider_BareRepositoryMessage,StyledString.QUALIFIER_STYLER);
}
 else {
dirString.append(node.getRepository().getWorkTree().getAbsolutePath(),StyledString.QUALIFIER_STYLER);
}
return dirString;
case PUSH:
case FETCH:
case FILE:
case FOLDER:
case BRANCHES:
case LOCAL:
case REMOTETRACKING:
case BRANCHHIERARCHY:
case TAGS:
case ADDITIONALREFS:
case REMOTES:
case REMOTE:
case ERROR:
case REF:
case TAG:
{
String label=getSimpleText(node);
if (label != null) return new StyledString(label);
}
}
}
 catch (IOException e) {
Activator.logError(e.getMessage(),e);
}
return null;
}",0.9927710843373494
7804,"private String getSimpleText(RepositoryTreeNode node){
switch (node.getType()) {
case REPO:
    File directory=((Repository)node.getObject()).getDirectory();
  StringBuilder sb=new StringBuilder();
sb.append(directory.getParentFile().getName());
sb.append(""String_Node_Str"");
sb.append(directory.getAbsolutePath());
return sb.toString();
case FILE:
case FOLDER:
return ((File)node.getObject()).getName();
case BRANCHES:
return UIText.RepositoriesView_Branches_Nodetext;
case LOCAL:
return UIText.RepositoriesViewLabelProvider_LocalNodetext;
case REMOTETRACKING:
return UIText.RepositoriesViewLabelProvider_RemoteTrackingNodetext;
case BRANCHHIERARCHY:
IPath fullPath=(IPath)node.getObject();
return fullPath.lastSegment();
case TAGS:
return UIText.RepositoriesViewLabelProvider_TagsNodeText;
case ADDITIONALREFS:
return UIText.RepositoriesViewLabelProvider_SymbolicRefNodeText;
case REMOTES:
return UIText.RepositoriesView_RemotesNodeText;
case REF:
case TAG:
{
Ref ref=(Ref)node.getObject();
String refName=node.getRepository().shortenRefName(ref.getName());
if (node.getParent().getType() == RepositoryTreeNodeType.BRANCHHIERARCHY) {
int index=refName.lastIndexOf('/');
refName=refName.substring(index + 1);
}
return refName;
}
case ADDITIONALREF:
{
Ref ref=(Ref)node.getObject();
String refName=node.getRepository().shortenRefName(ref.getName());
if (ref.isSymbolic()) {
refName=refName + ""String_Node_Str"" + ref.getLeaf().getName()+ ""String_Node_Str""+ ObjectId.toString(ref.getLeaf().getObjectId());
}
 else {
refName=refName + ""String_Node_Str"" + ObjectId.toString(ref.getObjectId());
}
return refName;
}
case WORKINGDIR:
if (node.getRepository().isBare()) return UIText.RepositoriesView_WorkingDir_treenode + ""String_Node_Str"" + UIText.RepositoriesViewLabelProvider_BareRepositoryMessage;
 else return UIText.RepositoriesView_WorkingDir_treenode + ""String_Node_Str"" + node.getRepository().getWorkTree().getAbsolutePath();
case REMOTE:
case PUSH:
case FETCH:
case ERROR:
return (String)node.getObject();
}
return null;
}","private String getSimpleText(RepositoryTreeNode node){
switch (node.getType()) {
case REPO:
    File directory=((Repository)node.getObject()).getDirectory();
  StringBuilder sb=new StringBuilder();
sb.append(directory.getParentFile().getName());
sb.append(""String_Node_Str"");
sb.append(directory.getAbsolutePath());
return sb.toString();
case FILE:
case FOLDER:
return ((File)node.getObject()).getName();
case BRANCHES:
return UIText.RepositoriesView_Branches_Nodetext;
case LOCAL:
return UIText.RepositoriesViewLabelProvider_LocalNodetext;
case REMOTETRACKING:
return UIText.RepositoriesViewLabelProvider_RemoteTrackingNodetext;
case BRANCHHIERARCHY:
IPath fullPath=(IPath)node.getObject();
return fullPath.lastSegment();
case TAGS:
return UIText.RepositoriesViewLabelProvider_TagsNodeText;
case ADDITIONALREFS:
return UIText.RepositoriesViewLabelProvider_SymbolicRefNodeText;
case REMOTES:
return UIText.RepositoriesView_RemotesNodeText;
case REF:
case TAG:
{
Ref ref=(Ref)node.getObject();
String refName=Repository.shortenRefName(ref.getName());
if (node.getParent().getType() == RepositoryTreeNodeType.BRANCHHIERARCHY) {
int index=refName.lastIndexOf('/');
refName=refName.substring(index + 1);
}
return refName;
}
case ADDITIONALREF:
{
Ref ref=(Ref)node.getObject();
String refName=Repository.shortenRefName(ref.getName());
if (ref.isSymbolic()) {
refName=refName + ""String_Node_Str"" + ref.getLeaf().getName()+ ""String_Node_Str""+ ObjectId.toString(ref.getLeaf().getObjectId());
}
 else {
refName=refName + ""String_Node_Str"" + ObjectId.toString(ref.getObjectId());
}
return refName;
}
case WORKINGDIR:
if (node.getRepository().isBare()) return UIText.RepositoriesView_WorkingDir_treenode + ""String_Node_Str"" + UIText.RepositoriesViewLabelProvider_BareRepositoryMessage;
 else return UIText.RepositoriesView_WorkingDir_treenode + ""String_Node_Str"" + node.getRepository().getWorkTree().getAbsolutePath();
case REMOTE:
case PUSH:
case FETCH:
case ERROR:
return (String)node.getObject();
}
return null;
}",0.9950372208436724
7805,"public Object execute(ExecutionEvent event) throws ExecutionException {
  final List<RefNode> nodes=getSelectedNodes(event);
  RefNode refNode=nodes.get(0);
  Shell shell=getShell(event);
  String oldName=refNode.getObject().getName();
  String prefix;
  if (oldName.startsWith(Constants.R_HEADS))   prefix=Constants.R_HEADS;
 else   if (oldName.startsWith(Constants.R_REMOTES))   prefix=Constants.R_REMOTES;
 else   throw new ExecutionException(NLS.bind(UIText.RenameBranchCommand_WrongNameMessage,oldName));
  Repository db=refNode.getRepository();
  IInputValidator inputValidator=ValidationUtils.getRefNameInputValidator(db,prefix,true);
  String defaultValue=db.shortenRefName(oldName);
  InputDialog newNameDialog=new InputDialog(shell,UIText.RepositoriesView_RenameBranchTitle,NLS.bind(UIText.RepositoriesView_RenameBranchMessage,defaultValue),defaultValue,inputValidator);
  if (newNameDialog.open() == Window.OK) {
    try {
      String newName=newNameDialog.getValue();
      new RenameBranchOperation(db,refNode.getObject(),newName).execute(null);
    }
 catch (    CoreException e) {
      Activator.handleError(UIText.RepositoriesView_RenameBranchFailure,e,true);
    }
  }
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  final List<RefNode> nodes=getSelectedNodes(event);
  RefNode refNode=nodes.get(0);
  Shell shell=getShell(event);
  String oldName=refNode.getObject().getName();
  String prefix;
  if (oldName.startsWith(Constants.R_HEADS))   prefix=Constants.R_HEADS;
 else   if (oldName.startsWith(Constants.R_REMOTES))   prefix=Constants.R_REMOTES;
 else   throw new ExecutionException(NLS.bind(UIText.RenameBranchCommand_WrongNameMessage,oldName));
  Repository db=refNode.getRepository();
  IInputValidator inputValidator=ValidationUtils.getRefNameInputValidator(db,prefix,true);
  String defaultValue=Repository.shortenRefName(oldName);
  InputDialog newNameDialog=new InputDialog(shell,UIText.RepositoriesView_RenameBranchTitle,NLS.bind(UIText.RepositoriesView_RenameBranchMessage,defaultValue),defaultValue,inputValidator);
  if (newNameDialog.open() == Window.OK) {
    try {
      String newName=newNameDialog.getValue();
      new RenameBranchOperation(db,refNode.getObject(),newName).execute(null);
    }
 catch (    CoreException e) {
      Activator.handleError(UIText.RepositoriesView_RenameBranchFailure,e,true);
    }
  }
  return null;
}",0.9950331125827816
7806,"private List<IPath> getPathList() throws IOException {
  List<IPath> result=new ArrayList<IPath>();
  Set<String> children=getRepository().getRefDatabase().getRefs(getObject().toPortableString()).keySet();
  for (  String pathEntry : children) {
    result.add(getObject().append(new Path(pathEntry)));
  }
  return result;
}","private List<IPath> getPathList() throws IOException {
  List<IPath> result=new ArrayList<IPath>();
  Map<String,Ref> refsMap=getRepository().getRefDatabase().getRefs(getObject().toPortableString());
  for (  Map.Entry<String,Ref> entry : refsMap.entrySet()) {
    if (entry.getValue().isSymbolic())     continue;
    result.add(getObject().append(new Path(entry.getKey())));
  }
  return result;
}",0.710926694329184
7807,"/** 
 * Remove or delete the repository
 * @param event
 * @param delete if <code>true</code>, the repository will be deleted from disk
 */
protected void removeRepository(final ExecutionEvent event,final boolean delete){
  IWorkbenchSite activeSite=HandlerUtil.getActiveSite(event);
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)activeSite.getService(IWorkbenchSiteProgressService.class);
  if (delete)   try {
    List<RepositoryNode> selectedNodes=getSelectedNodes(event);
    String title=UIText.RemoveCommand_DeleteConfirmTitle;
    if (selectedNodes.size() > 1) {
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmSingleMessage,Integer.valueOf(selectedNodes.size()));
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
 else     if (selectedNodes.size() == 1) {
      String name=org.eclipse.egit.core.Activator.getDefault().getRepositoryUtil().getRepositoryName(selectedNodes.get(0).getObject());
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmMultiMessage,name);
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
  }
 catch (  ExecutionException e) {
    Activator.handleError(e.getMessage(),e,false);
    return;
  }
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      final List<IProject> projectsToDelete=new ArrayList<IProject>();
      monitor.setTaskName(UIText.RepositoriesView_DeleteRepoDeterminProjectsMessage);
      List<RepositoryNode> selectedNodes;
      try {
        selectedNodes=getSelectedNodes(event);
      }
 catch (      ExecutionException e) {
        Activator.logError(e.getMessage(),e);
        return new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e);
      }
      for (      RepositoryNode node : selectedNodes) {
        if (node.getRepository().isBare())         continue;
        File workDir=node.getRepository().getWorkTree();
        final IPath wdPath=new Path(workDir.getAbsolutePath());
        for (        IProject prj : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
          if (monitor.isCanceled())           return Status.OK_STATUS;
          if (wdPath.isPrefixOf(prj.getLocation())) {
            projectsToDelete.add(prj);
          }
        }
      }
      final boolean[] confirmedCanceled=new boolean[]{false,false};
      if (!projectsToDelete.isEmpty()) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            try {
              confirmedCanceled[0]=confirmProjectDeletion(projectsToDelete,event);
            }
 catch (            OperationCanceledException e) {
              confirmedCanceled[1]=true;
            }
          }
        }
);
      }
      if (confirmedCanceled[1]) {
        return Status.OK_STATUS;
      }
      if (confirmedCanceled[0]) {
        IWorkspaceRunnable wsr=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor actMonitor) throws CoreException {
            for (            IProject prj : projectsToDelete)             prj.delete(false,false,actMonitor);
          }
        }
;
        try {
          ResourcesPlugin.getWorkspace().run(wsr,ResourcesPlugin.getWorkspace().getRoot(),IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e1) {
          Activator.logError(e1.getMessage(),e1);
        }
      }
      for (      RepositoryNode node : selectedNodes) {
        util.removeDir(node.getRepository().getDirectory());
      }
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          RepositoriesView view;
          try {
            view=getView(event);
            view.getCommonViewer().refresh();
          }
 catch (          ExecutionException e) {
            Activator.logError(e.getMessage(),e);
          }
        }
      }
);
      if (delete) {
        try {
          for (          RepositoryNode node : selectedNodes) {
            Repository repo=node.getRepository();
            if (!repo.isBare())             deleteRecursive(repo.getWorkTree());
            deleteRecursive(repo.getDirectory());
          }
        }
 catch (        IOException e) {
          return Activator.createErrorStatus(e.getMessage(),e);
        }
      }
      return Status.OK_STATUS;
    }
    private void deleteRecursive(    File fileToDelete) throws IOException {
      if (fileToDelete == null)       return;
      if (fileToDelete.exists()) {
        if (fileToDelete.isDirectory()) {
          for (          File file : fileToDelete.listFiles()) {
            deleteRecursive(file);
          }
        }
        if (!fileToDelete.delete())         throw new IOException(NLS.bind(UIText.RemoveCommand_DeleteFailureMessage,fileToDelete.getAbsolutePath()));
      }
    }
  }
;
  service.schedule(job);
}","/** 
 * Remove or delete the repository
 * @param event
 * @param delete if <code>true</code>, the repository will be deleted from disk
 */
protected void removeRepository(final ExecutionEvent event,final boolean delete){
  IWorkbenchSite activeSite=HandlerUtil.getActiveSite(event);
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)activeSite.getService(IWorkbenchSiteProgressService.class);
  final List<RepositoryNode> selectedNodes;
  try {
    selectedNodes=getSelectedNodes(event);
  }
 catch (  ExecutionException e) {
    Activator.handleError(e.getMessage(),e,true);
    return;
  }
  if (delete) {
    String title=UIText.RemoveCommand_DeleteConfirmTitle;
    if (selectedNodes.size() > 1) {
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmSingleMessage,Integer.valueOf(selectedNodes.size()));
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
 else     if (selectedNodes.size() == 1) {
      String name=org.eclipse.egit.core.Activator.getDefault().getRepositoryUtil().getRepositoryName(selectedNodes.get(0).getObject());
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmMultiMessage,name);
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
  }
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      final List<IProject> projectsToDelete=new ArrayList<IProject>();
      monitor.setTaskName(UIText.RepositoriesView_DeleteRepoDeterminProjectsMessage);
      for (      RepositoryNode node : selectedNodes) {
        if (node.getRepository().isBare())         continue;
        File workDir=node.getRepository().getWorkTree();
        final IPath wdPath=new Path(workDir.getAbsolutePath());
        for (        IProject prj : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
          if (monitor.isCanceled())           return Status.OK_STATUS;
          if (wdPath.isPrefixOf(prj.getLocation())) {
            projectsToDelete.add(prj);
          }
        }
      }
      final boolean[] confirmedCanceled=new boolean[]{false,false};
      if (!projectsToDelete.isEmpty()) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            try {
              confirmedCanceled[0]=confirmProjectDeletion(projectsToDelete,event);
            }
 catch (            OperationCanceledException e) {
              confirmedCanceled[1]=true;
            }
          }
        }
);
      }
      if (confirmedCanceled[1]) {
        return Status.OK_STATUS;
      }
      if (confirmedCanceled[0]) {
        IWorkspaceRunnable wsr=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor actMonitor) throws CoreException {
            for (            IProject prj : projectsToDelete)             prj.delete(false,false,actMonitor);
          }
        }
;
        try {
          ResourcesPlugin.getWorkspace().run(wsr,ResourcesPlugin.getWorkspace().getRoot(),IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e1) {
          Activator.logError(e1.getMessage(),e1);
        }
      }
      for (      RepositoryNode node : selectedNodes) {
        util.removeDir(node.getRepository().getDirectory());
      }
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          RepositoriesView view;
          try {
            view=getView(event);
            view.getCommonViewer().refresh();
          }
 catch (          ExecutionException e) {
            Activator.logError(e.getMessage(),e);
          }
        }
      }
);
      if (delete) {
        try {
          for (          RepositoryNode node : selectedNodes) {
            Repository repo=node.getRepository();
            if (!repo.isBare())             deleteRecursive(repo.getWorkTree());
            deleteRecursive(repo.getDirectory());
          }
        }
 catch (        IOException e) {
          return Activator.createErrorStatus(e.getMessage(),e);
        }
      }
      return Status.OK_STATUS;
    }
    private void deleteRecursive(    File fileToDelete) throws IOException {
      if (fileToDelete == null)       return;
      if (fileToDelete.exists()) {
        if (fileToDelete.isDirectory()) {
          for (          File file : fileToDelete.listFiles()) {
            deleteRecursive(file);
          }
        }
        if (!fileToDelete.delete())         throw new IOException(NLS.bind(UIText.RemoveCommand_DeleteFailureMessage,fileToDelete.getAbsolutePath()));
      }
    }
  }
;
  service.schedule(job);
}",0.940828402366864
7808,"public void run(){
  commit[0]=(RevCommit)table.widget.getSelection()[0].getData();
}","public void run(){
  TableItem tableItem=table.widget.getSelection()[0];
  ensureTableItemLoaded(tableItem);
  commit[0]=(RevCommit)tableItem.getData();
}",0.5606694560669456
7809,"@Test public void testAddTag() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertNull(repo.resolve(Constants.R_TAGS + ""String_Node_Str""));
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  table.getTableItem(0).select();
  final RevCommit[] commit=new RevCommit[1];
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      commit[0]=(RevCommit)table.widget.getSelection()[0].getData();
    }
  }
);
  ContextMenuHelper.clickContextMenu(table,UIText.GitHistoryPage_CreateTagMenuLabel);
  SWTBotShell dialog=bot.shell(UIText.CreateTagDialog_NewTag);
  dialog.bot().textWithLabel(UIText.CreateTagDialog_tagName).setText(""String_Node_Str"");
  dialog.bot().textWithLabel(UIText.CreateTagDialog_tagMessage).setText(""String_Node_Str"");
  dialog.bot().button(IDialogConstants.OK_LABEL).click();
  waitInUI();
  assertNotNull(repo.resolve(Constants.R_TAGS + ""String_Node_Str""));
}","@Test public void testAddTag() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertNull(repo.resolve(Constants.R_TAGS + ""String_Node_Str""));
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  table.getTableItem(0).select();
  final RevCommit[] commit=new RevCommit[1];
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      TableItem tableItem=table.widget.getSelection()[0];
      ensureTableItemLoaded(tableItem);
      commit[0]=(RevCommit)tableItem.getData();
    }
  }
);
  ContextMenuHelper.clickContextMenu(table,UIText.GitHistoryPage_CreateTagMenuLabel);
  SWTBotShell dialog=bot.shell(UIText.CreateTagDialog_NewTag);
  dialog.bot().textWithLabel(UIText.CreateTagDialog_tagName).setText(""String_Node_Str"");
  dialog.bot().textWithLabel(UIText.CreateTagDialog_tagMessage).setText(""String_Node_Str"");
  dialog.bot().button(IDialogConstants.OK_LABEL).click();
  waitInUI();
  assertNotNull(repo.resolve(Constants.R_TAGS + ""String_Node_Str""));
}",0.9337506520605112
7810,"@Test public void testCheckOut() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertEquals(Constants.MASTER,repo.getBranch());
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  table.getTableItem(1).select();
  final RevCommit[] commit=new RevCommit[1];
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      commit[0]=(RevCommit)table.widget.getSelection()[0].getData();
    }
  }
);
  ContextMenuHelper.clickContextMenu(table,UIText.GitHistoryPage_CheckoutMenuLabel);
  waitInUI();
  assertEquals(commit[0].getId().name(),repo.getBranch());
}","@Test public void testCheckOut() throws Exception {
  Repository repo=lookupRepository(repoFile);
  assertEquals(Constants.MASTER,repo.getBranch());
  final SWTBotTable table=getHistoryViewTable(PROJ1);
  table.getTableItem(1).select();
  final RevCommit[] commit=new RevCommit[1];
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      TableItem tableItem=table.widget.getSelection()[0];
      ensureTableItemLoaded(tableItem);
      commit[0]=(RevCommit)tableItem.getData();
    }
  }
);
  ContextMenuHelper.clickContextMenu(table,UIText.GitHistoryPage_CheckoutMenuLabel);
  waitInUI();
  assertEquals(commit[0].getId().name(),repo.getBranch());
}",0.6229249011857707
7811,"/** 
 * Remove or delete the repository
 * @param event
 * @param delete if <code>true</code>, the repository will be deleted from disk
 */
protected void removeRepository(final ExecutionEvent event,final boolean delete){
  IWorkbenchSite activeSite=HandlerUtil.getActiveSite(event);
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)activeSite.getService(IWorkbenchSiteProgressService.class);
  if (delete)   try {
    List<RepositoryNode> selectedNodes=getSelectedNodes(event);
    String title=UIText.RemoveCommand_DeleteConfirmTitle;
    if (selectedNodes.size() > 1) {
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmSingleMessage,Integer.valueOf(selectedNodes.size()));
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
 else     if (selectedNodes.size() == 1) {
      String name=org.eclipse.egit.core.Activator.getDefault().getRepositoryUtil().getRepositoryName(selectedNodes.get(0).getObject());
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmMultiMessage,name);
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
  }
 catch (  ExecutionException e) {
    Activator.handleError(e.getMessage(),e,false);
    return;
  }
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      final List<IProject> projectsToDelete=new ArrayList<IProject>();
      monitor.setTaskName(UIText.RepositoriesView_DeleteRepoDeterminProjectsMessage);
      List<RepositoryNode> selectedNodes;
      try {
        selectedNodes=getSelectedNodes(event);
      }
 catch (      ExecutionException e) {
        Activator.logError(e.getMessage(),e);
        return new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e);
      }
      for (      RepositoryNode node : selectedNodes) {
        if (node.getRepository().isBare())         continue;
        File workDir=node.getRepository().getWorkTree();
        final IPath wdPath=new Path(workDir.getAbsolutePath());
        for (        IProject prj : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
          if (monitor.isCanceled())           return Status.OK_STATUS;
          if (wdPath.isPrefixOf(prj.getLocation())) {
            projectsToDelete.add(prj);
          }
        }
      }
      final boolean[] confirmedCanceled=new boolean[]{false,false};
      if (!projectsToDelete.isEmpty()) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            try {
              confirmedCanceled[0]=confirmProjectDeletion(projectsToDelete,event);
            }
 catch (            OperationCanceledException e) {
              confirmedCanceled[1]=true;
            }
          }
        }
);
      }
      if (confirmedCanceled[1]) {
        return Status.OK_STATUS;
      }
      if (confirmedCanceled[0]) {
        IWorkspaceRunnable wsr=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor actMonitor) throws CoreException {
            for (            IProject prj : projectsToDelete)             prj.delete(false,false,actMonitor);
          }
        }
;
        try {
          ResourcesPlugin.getWorkspace().run(wsr,ResourcesPlugin.getWorkspace().getRoot(),IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e1) {
          Activator.logError(e1.getMessage(),e1);
        }
      }
      for (      RepositoryNode node : selectedNodes) {
        util.removeDir(node.getRepository().getDirectory());
      }
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          RepositoriesView view;
          try {
            view=getView(event);
            view.getCommonViewer().refresh();
          }
 catch (          ExecutionException e) {
            Activator.logError(e.getMessage(),e);
          }
        }
      }
);
      if (delete) {
        try {
          for (          RepositoryNode node : selectedNodes) {
            Repository repo=node.getRepository();
            if (!repo.isBare())             deleteRecursive(repo.getWorkTree());
            deleteRecursive(repo.getDirectory());
          }
        }
 catch (        IOException e) {
          return Activator.createErrorStatus(e.getMessage(),e);
        }
      }
      return Status.OK_STATUS;
    }
    private void deleteRecursive(    File fileToDelete) throws IOException {
      if (fileToDelete == null)       return;
      if (fileToDelete.exists()) {
        if (fileToDelete.isDirectory()) {
          for (          File file : fileToDelete.listFiles()) {
            deleteRecursive(file);
          }
        }
        if (!fileToDelete.delete())         throw new IOException(NLS.bind(UIText.RemoveCommand_DeleteFailureMessage,fileToDelete.getAbsolutePath()));
      }
    }
  }
;
  service.schedule(job);
}","/** 
 * Remove or delete the repository
 * @param event
 * @param delete if <code>true</code>, the repository will be deleted from disk
 */
protected void removeRepository(final ExecutionEvent event,final boolean delete){
  IWorkbenchSite activeSite=HandlerUtil.getActiveSite(event);
  IWorkbenchSiteProgressService service=(IWorkbenchSiteProgressService)activeSite.getService(IWorkbenchSiteProgressService.class);
  final List<RepositoryNode> selectedNodes;
  try {
    selectedNodes=getSelectedNodes(event);
  }
 catch (  ExecutionException e) {
    Activator.handleError(e.getMessage(),e,true);
    return;
  }
  if (delete) {
    String title=UIText.RemoveCommand_DeleteConfirmTitle;
    if (selectedNodes.size() > 1) {
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmSingleMessage,Integer.valueOf(selectedNodes.size()));
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
 else     if (selectedNodes.size() == 1) {
      String name=org.eclipse.egit.core.Activator.getDefault().getRepositoryUtil().getRepositoryName(selectedNodes.get(0).getObject());
      String message=NLS.bind(UIText.RemoveCommand_DeleteConfirmMultiMessage,name);
      if (!MessageDialog.openConfirm(getShell(event),title,message))       return;
    }
  }
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      final List<IProject> projectsToDelete=new ArrayList<IProject>();
      monitor.setTaskName(UIText.RepositoriesView_DeleteRepoDeterminProjectsMessage);
      for (      RepositoryNode node : selectedNodes) {
        if (node.getRepository().isBare())         continue;
        File workDir=node.getRepository().getWorkTree();
        final IPath wdPath=new Path(workDir.getAbsolutePath());
        for (        IProject prj : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
          if (monitor.isCanceled())           return Status.OK_STATUS;
          if (wdPath.isPrefixOf(prj.getLocation())) {
            projectsToDelete.add(prj);
          }
        }
      }
      final boolean[] confirmedCanceled=new boolean[]{false,false};
      if (!projectsToDelete.isEmpty()) {
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            try {
              confirmedCanceled[0]=confirmProjectDeletion(projectsToDelete,event);
            }
 catch (            OperationCanceledException e) {
              confirmedCanceled[1]=true;
            }
          }
        }
);
      }
      if (confirmedCanceled[1]) {
        return Status.OK_STATUS;
      }
      if (confirmedCanceled[0]) {
        IWorkspaceRunnable wsr=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor actMonitor) throws CoreException {
            for (            IProject prj : projectsToDelete)             prj.delete(false,false,actMonitor);
          }
        }
;
        try {
          ResourcesPlugin.getWorkspace().run(wsr,ResourcesPlugin.getWorkspace().getRoot(),IWorkspace.AVOID_UPDATE,monitor);
        }
 catch (        CoreException e1) {
          Activator.logError(e1.getMessage(),e1);
        }
      }
      for (      RepositoryNode node : selectedNodes) {
        util.removeDir(node.getRepository().getDirectory());
      }
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          RepositoriesView view;
          try {
            view=getView(event);
            view.getCommonViewer().refresh();
          }
 catch (          ExecutionException e) {
            Activator.logError(e.getMessage(),e);
          }
        }
      }
);
      if (delete) {
        try {
          for (          RepositoryNode node : selectedNodes) {
            Repository repo=node.getRepository();
            if (!repo.isBare())             deleteRecursive(repo.getWorkTree());
            deleteRecursive(repo.getDirectory());
          }
        }
 catch (        IOException e) {
          return Activator.createErrorStatus(e.getMessage(),e);
        }
      }
      return Status.OK_STATUS;
    }
    private void deleteRecursive(    File fileToDelete) throws IOException {
      if (fileToDelete == null)       return;
      if (fileToDelete.exists()) {
        if (fileToDelete.isDirectory()) {
          for (          File file : fileToDelete.listFiles()) {
            deleteRecursive(file);
          }
        }
        if (!fileToDelete.delete())         throw new IOException(NLS.bind(UIText.RemoveCommand_DeleteFailureMessage,fileToDelete.getAbsolutePath()));
      }
    }
  }
;
  service.schedule(job);
}",0.940828402366864
7812,"private void outputEclipseDiff(final StringBuilder d,final Repository db,final ObjectReader reader,final DiffFormatter diffFmt) throws IOException {
  if (!(getBlobs().length == 2))   throw new UnsupportedOperationException(""String_Node_Str"");
  String projectRelativePath=getProjectRelativePath(db,getPath());
  d.append(""String_Node_Str"").append(projectRelativePath).append(""String_Node_Str"").append(projectRelativePath).append(""String_Node_Str"");
  final ObjectId id1=getBlobs()[0];
  final ObjectId id2=getBlobs()[1];
  final FileMode mode1=getModes()[0];
  final FileMode mode2=getModes()[1];
  if (id1.equals(ObjectId.zeroId())) {
    d.append(""String_Node_Str"" + mode2).append(""String_Node_Str"");
  }
 else   if (id2.equals(ObjectId.zeroId())) {
    d.append(""String_Node_Str"" + mode1).append(""String_Node_Str"");
  }
 else   if (!mode1.equals(mode2)) {
    d.append(""String_Node_Str"" + mode1);
    d.append(""String_Node_Str"" + mode2).append(""String_Node_Str"");
  }
  d.append(""String_Node_Str"").append(reader.abbreviate(id1).name()).append(""String_Node_Str"").append(reader.abbreviate(id2).name()).append(mode1.equals(mode2) ? ""String_Node_Str"" + mode1 : ""String_Node_Str"").append(""String_Node_Str"");
  if (id1.equals(ObjectId.zeroId()))   d.append(""String_Node_Str"");
 else {
    d.append(""String_Node_Str"");
    d.append(getProjectRelativePath(db,getPath()));
    d.append(""String_Node_Str"");
  }
  if (id2.equals(ObjectId.zeroId()))   d.append(""String_Node_Str"");
 else {
    d.append(""String_Node_Str"");
    d.append(getProjectRelativePath(db,getPath()));
    d.append(""String_Node_Str"");
  }
  final RawText a=getRawText(id1,reader);
  final RawText b=getRawText(id2,reader);
  final MyersDiff diff=new MyersDiff(RawTextComparator.DEFAULT,a,b);
  diffFmt.format(diff.getEdits(),a,b);
}","private void outputEclipseDiff(final StringBuilder d,final Repository db,final ObjectReader reader,final DiffFormatter diffFmt) throws IOException {
  if (!(getBlobs().length == 2))   throw new UnsupportedOperationException(""String_Node_Str"");
  String projectRelativePath=getProjectRelativePath(db,getPath());
  d.append(""String_Node_Str"").append(projectRelativePath).append(""String_Node_Str"").append(projectRelativePath).append(""String_Node_Str"");
  final ObjectId id1=getBlobs()[0];
  final ObjectId id2=getBlobs()[1];
  final FileMode mode1=getModes()[0];
  final FileMode mode2=getModes()[1];
  if (id1.equals(ObjectId.zeroId())) {
    d.append(""String_Node_Str"" + mode2).append(""String_Node_Str"");
  }
 else   if (id2.equals(ObjectId.zeroId())) {
    d.append(""String_Node_Str"" + mode1).append(""String_Node_Str"");
  }
 else   if (!mode1.equals(mode2)) {
    d.append(""String_Node_Str"" + mode1);
    d.append(""String_Node_Str"" + mode2).append(""String_Node_Str"");
  }
  d.append(""String_Node_Str"").append(reader.abbreviate(id1).name()).append(""String_Node_Str"").append(reader.abbreviate(id2).name()).append(mode1.equals(mode2) ? ""String_Node_Str"" + mode1 : ""String_Node_Str"").append(""String_Node_Str"");
  if (id1.equals(ObjectId.zeroId()))   d.append(""String_Node_Str"");
 else {
    d.append(""String_Node_Str"");
    d.append(getProjectRelativePath(db,getPath()));
    d.append(""String_Node_Str"");
  }
  if (id2.equals(ObjectId.zeroId()))   d.append(""String_Node_Str"");
 else {
    d.append(""String_Node_Str"");
    d.append(getProjectRelativePath(db,getPath()));
    d.append(""String_Node_Str"");
  }
  final RawText a=getRawText(id1,reader);
  final RawText b=getRawText(id2,reader);
  EditList editList=MyersDiff.INSTANCE.diff(RawTextComparator.DEFAULT,a,b);
  diffFmt.format(editList,a,b);
}",0.9793986636971048
7813,"private List<IPath> getPathList() throws IOException {
  List<IPath> result=new ArrayList<IPath>();
  Set<String> children=getRepository().getRefDatabase().getRefs(getObject().toPortableString()).keySet();
  for (  String pathEntry : children) {
    result.add(getObject().append(new Path(pathEntry)));
  }
  return result;
}","private List<IPath> getPathList() throws IOException {
  List<IPath> result=new ArrayList<IPath>();
  Map<String,Ref> refsMap=getRepository().getRefDatabase().getRefs(getObject().toPortableString());
  for (  Map.Entry<String,Ref> entry : refsMap.entrySet()) {
    if (entry.getValue().isSymbolic())     continue;
    result.add(getObject().append(new Path(entry.getKey())));
  }
  return result;
}",0.710926694329184
7814,"@Test @Ignore public void testPushToPushDestination() throws Exception {
  pushTo(""String_Node_Str"",true);
  pushTo(""String_Node_Str"",false);
}","@Test public void testPushToPushDestination() throws Exception {
  pushTo(""String_Node_Str"",true);
  pushTo(""String_Node_Str"",false);
}",0.9712230215827338
7815,"private void revalidateImpl(final RepositorySelection newRepoSelection){
  final ListRemoteOperation listRemotesOp;
  try {
    final URIish uri;
    uri=newRepoSelection.getURI();
    listRemotesOp=new ListRemoteOperation(local,uri);
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        listRemotesOp.run(monitor);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    transportError(cause.getMessage());
    ErrorDialog.openError(getShell(),UIText.RefSpecPage_errorTransportDialogTitle,UIText.RefSpecPage_errorTransportDialogMessage,new Status(IStatus.ERROR,Activator.getPluginId(),0,cause.getMessage(),cause));
    return;
  }
catch (  InterruptedException e) {
    transportError(UIText.RefSpecPage_operationCancelled);
    return;
  }
  this.validatedRepoSelection=newRepoSelection;
  final String actRemoteName;
  if (configName == null)   actRemoteName=validatedRepoSelection.getConfigName();
 else   actRemoteName=configName;
  specsPanel.setAssistanceData(local,listRemotesOp.getRemoteRefs(),actRemoteName);
  if (newRepoSelection.isConfigSelected()) {
    saveButton.setVisible(true);
    saveButton.setText(NLS.bind(UIText.RefSpecPage_saveSpecifications,actRemoteName));
    saveButton.getParent().layout();
    if (!pushPage) {
      tagsAutoFollowButton.setSelection(false);
      tagsFetchTagsButton.setSelection(false);
      tagsNoTagsButton.setSelection(false);
      final TagOpt tagOpt=newRepoSelection.getConfig().getTagOpt();
switch (tagOpt) {
case AUTO_FOLLOW:
        tagsAutoFollowButton.setSelection(true);
      break;
case FETCH_TAGS:
    tagsFetchTagsButton.setSelection(true);
  break;
case NO_TAGS:
tagsNoTagsButton.setSelection(true);
break;
}
}
}
 else if (!pushPage) tagsAutoFollowButton.setSelection(true);
checkPage();
}","private void revalidateImpl(final RepositorySelection newRepoSelection){
  final ListRemoteOperation listRemotesOp;
  try {
    final URIish uri;
    uri=newRepoSelection.getURI(pushPage);
    listRemotesOp=new ListRemoteOperation(local,uri);
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        listRemotesOp.run(monitor);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    transportError(cause.getMessage());
    ErrorDialog.openError(getShell(),UIText.RefSpecPage_errorTransportDialogTitle,UIText.RefSpecPage_errorTransportDialogMessage,new Status(IStatus.ERROR,Activator.getPluginId(),0,cause.getMessage(),cause));
    return;
  }
catch (  InterruptedException e) {
    transportError(UIText.RefSpecPage_operationCancelled);
    return;
  }
  this.validatedRepoSelection=newRepoSelection;
  final String actRemoteName;
  if (configName == null)   actRemoteName=validatedRepoSelection.getConfigName();
 else   actRemoteName=configName;
  specsPanel.setAssistanceData(local,listRemotesOp.getRemoteRefs(),actRemoteName);
  if (newRepoSelection.isConfigSelected()) {
    saveButton.setVisible(true);
    saveButton.setText(NLS.bind(UIText.RefSpecPage_saveSpecifications,actRemoteName));
    saveButton.getParent().layout();
    if (!pushPage) {
      tagsAutoFollowButton.setSelection(false);
      tagsFetchTagsButton.setSelection(false);
      tagsNoTagsButton.setSelection(false);
      final TagOpt tagOpt=newRepoSelection.getConfig().getTagOpt();
switch (tagOpt) {
case AUTO_FOLLOW:
        tagsAutoFollowButton.setSelection(true);
      break;
case FETCH_TAGS:
    tagsFetchTagsButton.setSelection(true);
  break;
case NO_TAGS:
tagsNoTagsButton.setSelection(true);
break;
}
}
}
 else if (!pushPage) tagsAutoFollowButton.setSelection(true);
checkPage();
}",0.997937080969572
7816,"/** 
 * @return list of all selected URIs - either the one specified as customURI or all URIs from selected configuration. May be null in case of no valid selection.
 */
public List<URIish> getPushURIs(){
  if (isURISelected())   return Collections.singletonList(uri);
  if (isConfigSelected())   return config.getPushURIs();
  return null;
}","/** 
 * @return list of all push URIs - either the one specified as custom URI orall push URIs of the selected configuration; if not push URIs were specified, the first URI is returned
 */
public List<URIish> getPushURIs(){
  if (isURISelected())   return Collections.singletonList(uri);
  if (isConfigSelected()) {
    List<URIish> pushUris=new ArrayList<URIish>();
    pushUris.addAll(config.getPushURIs());
    if (pushUris.isEmpty())     pushUris.add(config.getURIs().get(0));
    return pushUris;
  }
  return null;
}",0.5115740740740741
7817,"/** 
 * @return the selected URI (if specified by user as valid custom URI) orfirst URI from selected configuration (if specified by user as May be null if there is no valid selection.
 */
public URIish getURI(){
  if (isConfigSelected())   return config.getURIs().get(0);
  return uri;
}","/** 
 * @return the selected URI, <code>null</code> if a configuration wasselected
 */
public URIish getURI(){
  if (isConfigSelected())   return null;
  return uri;
}",0.6241758241758242
7818,"private String getSourceString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  if (repoSelection.isConfigSelected())   return repoSelection.getConfigName();
  return repoSelection.getURI().toString();
}","private String getSourceString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  if (repoSelection.isConfigSelected())   return repoSelection.getConfigName();
  return repoSelection.getURI(false).toString();
}",0.9890590809628008
7819,"@Override public boolean performFinish(){
  if (repoPage.getSelection().isConfigSelected() && refSpecPage.isSaveRequested())   saveConfig();
  final Transport transport;
  final RepositorySelection repoSelection=repoPage.getSelection();
  try {
    if (repoSelection.isConfigSelected())     transport=Transport.open(localDb,repoSelection.getConfig());
 else     transport=Transport.open(localDb,repoSelection.getURI());
  }
 catch (  final NotSupportedException e) {
    ErrorDialog.openError(getShell(),UIText.FetchWizard_transportNotSupportedTitle,UIText.FetchWizard_transportNotSupportedMessage,new Status(IStatus.ERROR,org.eclipse.egit.ui.Activator.getPluginId(),e.getMessage(),e));
    return false;
  }
  transport.setTagOpt(refSpecPage.getTagOpt());
  final Job fetchJob=new FetchJob(transport,refSpecPage.getRefSpecs(),getSourceString());
  fetchJob.setUser(true);
  fetchJob.schedule();
  repoPage.saveUriInPrefs();
  return true;
}","@Override public boolean performFinish(){
  if (repoPage.getSelection().isConfigSelected() && refSpecPage.isSaveRequested())   saveConfig();
  final Transport transport;
  final RepositorySelection repoSelection=repoPage.getSelection();
  try {
    if (repoSelection.isConfigSelected())     transport=Transport.open(localDb,repoSelection.getConfig());
 else     transport=Transport.open(localDb,repoSelection.getURI(false));
  }
 catch (  final NotSupportedException e) {
    ErrorDialog.openError(getShell(),UIText.FetchWizard_transportNotSupportedTitle,UIText.FetchWizard_transportNotSupportedMessage,new Status(IStatus.ERROR,org.eclipse.egit.ui.Activator.getPluginId(),e.getMessage(),e));
    return false;
  }
  transport.setTagOpt(refSpecPage.getTagOpt());
  final Job fetchJob=new FetchJob(transport,refSpecPage.getRefSpecs(),getSourceString());
  fetchJob.setUser(true);
  fetchJob.schedule();
  repoPage.saveUriInPrefs();
  return true;
}",0.9973502914679384
7820,"private void revalidateImpl(){
  if (getControl().isDisposed() || !isCurrentPage())   return;
  final List<RefSpec> fetchSpecs;
  if (displayedRepoSelection.isConfigSelected())   fetchSpecs=displayedRepoSelection.getConfig().getPushRefSpecs();
 else   fetchSpecs=null;
  final PushOperation operation;
  try {
    final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(local,displayedRefSpecs,fetchSpecs);
    if (updates.isEmpty()) {
      setErrorMessage(UIText.ConfirmationPage_errorRefsChangedNoMatch);
      setPageComplete(false);
      return;
    }
    final PushOperationSpecification spec=new PushOperationSpecification();
    for (    final URIish uri : displayedRepoSelection.getAllURIs())     spec.addURIRefUpdates(uri,copyUpdates(updates));
    operation=new PushOperation(local,spec,true,displayedRepoSelection.getConfig());
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        operation.run(monitor);
      }
    }
);
  }
 catch (  final IOException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorCantResolveSpecs,e.getMessage()));
    return;
  }
catch (  final InvocationTargetException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorUnexpected,e.getCause().getMessage()));
    return;
  }
catch (  final InterruptedException e) {
    setErrorMessage(UIText.ConfirmationPage_errorInterrupted);
    setPageComplete(true);
    displayedRefSpecs=null;
    displayedRepoSelection=null;
    return;
  }
  final PushOperationResult result=operation.getOperationResult();
  resultPanel.setData(local,result);
  if (result.isSuccessfulConnectionForAnyURI()) {
    setPageComplete(true);
    confirmedResult=result;
  }
 else {
    final String message=NLS.bind(UIText.ConfirmationPage_cantConnectToAny,result.getErrorStringForAllURis());
    setErrorMessage(message);
    ErrorDialog.openError(getShell(),UIText.ConfirmationPage_cantConnectToAnyTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),message));
  }
}","private void revalidateImpl(){
  if (getControl().isDisposed() || !isCurrentPage())   return;
  final List<RefSpec> fetchSpecs;
  if (displayedRepoSelection.isConfigSelected())   fetchSpecs=displayedRepoSelection.getConfig().getPushRefSpecs();
 else   fetchSpecs=null;
  final PushOperation operation;
  try {
    final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(local,displayedRefSpecs,fetchSpecs);
    if (updates.isEmpty()) {
      setErrorMessage(UIText.ConfirmationPage_errorRefsChangedNoMatch);
      setPageComplete(false);
      return;
    }
    final PushOperationSpecification spec=new PushOperationSpecification();
    for (    final URIish uri : displayedRepoSelection.getPushURIs())     spec.addURIRefUpdates(uri,copyUpdates(updates));
    operation=new PushOperation(local,spec,true,displayedRepoSelection.getConfig());
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        operation.run(monitor);
      }
    }
);
  }
 catch (  final IOException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorCantResolveSpecs,e.getMessage()));
    return;
  }
catch (  final InvocationTargetException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorUnexpected,e.getCause().getMessage()));
    return;
  }
catch (  final InterruptedException e) {
    setErrorMessage(UIText.ConfirmationPage_errorInterrupted);
    setPageComplete(true);
    displayedRefSpecs=null;
    displayedRepoSelection=null;
    return;
  }
  final PushOperationResult result=operation.getOperationResult();
  resultPanel.setData(local,result);
  if (result.isSuccessfulConnectionForAnyURI()) {
    setPageComplete(true);
    confirmedResult=result;
  }
 else {
    final String message=NLS.bind(UIText.ConfirmationPage_cantConnectToAny,result.getErrorStringForAllURis());
    setErrorMessage(message);
    ErrorDialog.openError(getShell(),UIText.ConfirmationPage_cantConnectToAnyTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),message));
  }
}",0.9983431952662722
7821,"private String getDestinationString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  final String destination;
  if (repoSelection.isConfigSelected())   destination=repoSelection.getConfigName();
 else   destination=repoSelection.getURI().toString();
  return destination;
}","private String getDestinationString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  final String destination;
  if (repoSelection.isConfigSelected())   destination=repoSelection.getConfigName();
 else   destination=repoSelection.getURI(true).toString();
  return destination;
}",0.9297658862876256
7822,"private PushOperation createPushOperation(){
  try {
    final PushOperationSpecification spec;
    final RemoteConfig config=repoPage.getSelection().getConfig();
    if (confirmPage.isConfirmed()) {
      final PushOperationResult confirmedResult=confirmPage.getConfirmedResult();
      spec=confirmedResult.deriveSpecification(confirmPage.isRequireUnchangedSelected());
    }
 else {
      final Collection<RefSpec> fetchSpecs;
      if (config != null)       fetchSpecs=config.getPushRefSpecs();
 else       fetchSpecs=null;
      final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(localDb,refSpecPage.getRefSpecs(),fetchSpecs);
      if (updates.isEmpty()) {
        ErrorDialog.openError(getShell(),UIText.PushWizard_missingRefsTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),UIText.PushWizard_missingRefsMessage));
        return null;
      }
      spec=new PushOperationSpecification();
      for (      final URIish uri : repoPage.getSelection().getAllURIs())       spec.addURIRefUpdates(uri,ConfirmationPage.copyUpdates(updates));
    }
    return new PushOperation(localDb,spec,false,config);
  }
 catch (  final IOException e) {
    ErrorDialog.openError(getShell(),UIText.PushWizard_cantPrepareUpdatesTitle,UIText.PushWizard_cantPrepareUpdatesMessage,new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e));
    return null;
  }
}","private PushOperation createPushOperation(){
  try {
    final PushOperationSpecification spec;
    final RemoteConfig config=repoPage.getSelection().getConfig();
    if (confirmPage.isConfirmed()) {
      final PushOperationResult confirmedResult=confirmPage.getConfirmedResult();
      spec=confirmedResult.deriveSpecification(confirmPage.isRequireUnchangedSelected());
    }
 else {
      final Collection<RefSpec> fetchSpecs;
      if (config != null)       fetchSpecs=config.getPushRefSpecs();
 else       fetchSpecs=null;
      final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(localDb,refSpecPage.getRefSpecs(),fetchSpecs);
      if (updates.isEmpty()) {
        ErrorDialog.openError(getShell(),UIText.PushWizard_missingRefsTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),UIText.PushWizard_missingRefsMessage));
        return null;
      }
      spec=new PushOperationSpecification();
      for (      final URIish uri : repoPage.getSelection().getPushURIs())       spec.addURIRefUpdates(uri,ConfirmationPage.copyUpdates(updates));
    }
    return new PushOperation(localDb,spec,false,config);
  }
 catch (  final IOException e) {
    ErrorDialog.openError(getShell(),UIText.PushWizard_cantPrepareUpdatesTitle,UIText.PushWizard_cantPrepareUpdatesMessage,new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e));
    return null;
  }
}",0.9974865350089768
7823,"public void run(){
  try {
    MessageDialog.openInformation(getActiveShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
  }
 catch (  ExecutionException e) {
    Activator.handleError(op.getResult().toString(),null,true);
  }
}","public void run(){
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
}",0.5274725274725275
7824,"public Object execute(final ExecutionEvent event) throws ExecutionException {
  RepositoryTreeNode node=getSelectedNodes(event).get(0);
  final Repository repository=node.getRepository();
  if (!canMerge(repository))   return null;
  String targetRef;
  if (node instanceof RefNode) {
    String refName=((RefNode)node).getObject().getName();
    try {
      if (repository.getFullBranch().equals(refName))       targetRef=null;
 else       targetRef=refName;
    }
 catch (    IOException e) {
      targetRef=null;
    }
  }
 else   if (node instanceof TagNode)   targetRef=((TagNode)node).getObject().getName();
 else   targetRef=null;
  final String refName;
  if (targetRef != null)   refName=targetRef;
 else {
    MergeTargetSelectionDialog mergeTargetSelectionDialog=new MergeTargetSelectionDialog(getShell(event),repository);
    if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
      refName=mergeTargetSelectionDialog.getRefName();
    }
 else {
      return null;
    }
  }
  String jobname=NLS.bind(UIText.MergeAction_JobNameMerge,refName);
  final MergeOperation op=new MergeOperation(repository,refName);
  Job job=new Job(jobname){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        op.execute(monitor);
      }
 catch (      final CoreException e) {
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent jobEvent){
      IStatus result=jobEvent.getJob().getResult();
      if (result.getSeverity() == IStatus.CANCEL) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            try {
              MessageDialog.openInformation(getActiveShell(event),UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
            }
 catch (            ExecutionException e) {
              Activator.handleError(UIText.MergeAction_MergeCanceledMessage,null,true);
            }
          }
        }
);
      }
 else       if (!result.isOK()) {
        Activator.handleError(result.getMessage(),result.getException(),true);
      }
 else {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            try {
              MessageDialog.openInformation(getActiveShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
            }
 catch (            ExecutionException e) {
              Activator.handleError(op.getResult().toString(),null,true);
            }
          }
        }
);
      }
    }
  }
);
  job.schedule();
  return null;
}","public Object execute(final ExecutionEvent event) throws ExecutionException {
  RepositoryTreeNode node=getSelectedNodes(event).get(0);
  final Repository repository=node.getRepository();
  if (!canMerge(repository))   return null;
  String targetRef;
  if (node instanceof RefNode) {
    String refName=((RefNode)node).getObject().getName();
    try {
      if (repository.getFullBranch().equals(refName))       targetRef=null;
 else       targetRef=refName;
    }
 catch (    IOException e) {
      targetRef=null;
    }
  }
 else   if (node instanceof TagNode)   targetRef=((TagNode)node).getObject().getName();
 else   targetRef=null;
  final String refName;
  if (targetRef != null)   refName=targetRef;
 else {
    MergeTargetSelectionDialog mergeTargetSelectionDialog=new MergeTargetSelectionDialog(getShell(event),repository);
    if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
      refName=mergeTargetSelectionDialog.getRefName();
    }
 else {
      return null;
    }
  }
  String jobname=NLS.bind(UIText.MergeAction_JobNameMerge,refName);
  final MergeOperation op=new MergeOperation(repository,refName);
  Job job=new Job(jobname){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        op.execute(monitor);
      }
 catch (      final CoreException e) {
        return e.getStatus();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.setRule(op.getSchedulingRule());
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent jobEvent){
      IStatus result=jobEvent.getJob().getResult();
      if (result.getSeverity() == IStatus.CANCEL) {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            MessageDialog.openInformation(shell,UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
          }
        }
);
      }
 else       if (!result.isOK()) {
        Activator.handleError(result.getMessage(),result.getException(),true);
      }
 else {
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
          }
        }
);
      }
    }
  }
);
  job.schedule();
  return null;
}",0.7543961352657005
7825,"@Override public void done(IJobChangeEvent jobEvent){
  IStatus result=jobEvent.getJob().getResult();
  if (result.getSeverity() == IStatus.CANCEL) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          MessageDialog.openInformation(getActiveShell(event),UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
        }
 catch (        ExecutionException e) {
          Activator.handleError(UIText.MergeAction_MergeCanceledMessage,null,true);
        }
      }
    }
);
  }
 else   if (!result.isOK()) {
    Activator.handleError(result.getMessage(),result.getException(),true);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          MessageDialog.openInformation(getActiveShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
        }
 catch (        ExecutionException e) {
          Activator.handleError(op.getResult().toString(),null,true);
        }
      }
    }
);
  }
}","@Override public void done(IJobChangeEvent jobEvent){
  IStatus result=jobEvent.getJob().getResult();
  if (result.getSeverity() == IStatus.CANCEL) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
        MessageDialog.openInformation(shell,UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
      }
    }
);
  }
 else   if (!result.isOK()) {
    Activator.handleError(result.getMessage(),result.getException(),true);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
        MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
      }
    }
);
  }
}",0.5116033755274262
7826,"@Test @Ignore public void testPushToPushDestination() throws Exception {
  pushTo(""String_Node_Str"",true);
  pushTo(""String_Node_Str"",false);
}","@Test public void testPushToPushDestination() throws Exception {
  pushTo(""String_Node_Str"",true);
  pushTo(""String_Node_Str"",false);
}",0.9712230215827338
7827,"private void revalidateImpl(final RepositorySelection newRepoSelection){
  final ListRemoteOperation listRemotesOp;
  try {
    final URIish uri;
    uri=newRepoSelection.getURI();
    listRemotesOp=new ListRemoteOperation(local,uri);
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        listRemotesOp.run(monitor);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    transportError(cause.getMessage());
    ErrorDialog.openError(getShell(),UIText.RefSpecPage_errorTransportDialogTitle,UIText.RefSpecPage_errorTransportDialogMessage,new Status(IStatus.ERROR,Activator.getPluginId(),0,cause.getMessage(),cause));
    return;
  }
catch (  InterruptedException e) {
    transportError(UIText.RefSpecPage_operationCancelled);
    return;
  }
  this.validatedRepoSelection=newRepoSelection;
  final String actRemoteName;
  if (configName == null)   actRemoteName=validatedRepoSelection.getConfigName();
 else   actRemoteName=configName;
  specsPanel.setAssistanceData(local,listRemotesOp.getRemoteRefs(),actRemoteName);
  if (newRepoSelection.isConfigSelected()) {
    saveButton.setVisible(true);
    saveButton.setText(NLS.bind(UIText.RefSpecPage_saveSpecifications,actRemoteName));
    saveButton.getParent().layout();
    if (!pushPage) {
      tagsAutoFollowButton.setSelection(false);
      tagsFetchTagsButton.setSelection(false);
      tagsNoTagsButton.setSelection(false);
      final TagOpt tagOpt=newRepoSelection.getConfig().getTagOpt();
switch (tagOpt) {
case AUTO_FOLLOW:
        tagsAutoFollowButton.setSelection(true);
      break;
case FETCH_TAGS:
    tagsFetchTagsButton.setSelection(true);
  break;
case NO_TAGS:
tagsNoTagsButton.setSelection(true);
break;
}
}
}
 else if (!pushPage) tagsAutoFollowButton.setSelection(true);
checkPage();
}","private void revalidateImpl(final RepositorySelection newRepoSelection){
  final ListRemoteOperation listRemotesOp;
  try {
    final URIish uri;
    uri=newRepoSelection.getURI(pushPage);
    listRemotesOp=new ListRemoteOperation(local,uri);
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        listRemotesOp.run(monitor);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    transportError(cause.getMessage());
    ErrorDialog.openError(getShell(),UIText.RefSpecPage_errorTransportDialogTitle,UIText.RefSpecPage_errorTransportDialogMessage,new Status(IStatus.ERROR,Activator.getPluginId(),0,cause.getMessage(),cause));
    return;
  }
catch (  InterruptedException e) {
    transportError(UIText.RefSpecPage_operationCancelled);
    return;
  }
  this.validatedRepoSelection=newRepoSelection;
  final String actRemoteName;
  if (configName == null)   actRemoteName=validatedRepoSelection.getConfigName();
 else   actRemoteName=configName;
  specsPanel.setAssistanceData(local,listRemotesOp.getRemoteRefs(),actRemoteName);
  if (newRepoSelection.isConfigSelected()) {
    saveButton.setVisible(true);
    saveButton.setText(NLS.bind(UIText.RefSpecPage_saveSpecifications,actRemoteName));
    saveButton.getParent().layout();
    if (!pushPage) {
      tagsAutoFollowButton.setSelection(false);
      tagsFetchTagsButton.setSelection(false);
      tagsNoTagsButton.setSelection(false);
      final TagOpt tagOpt=newRepoSelection.getConfig().getTagOpt();
switch (tagOpt) {
case AUTO_FOLLOW:
        tagsAutoFollowButton.setSelection(true);
      break;
case FETCH_TAGS:
    tagsFetchTagsButton.setSelection(true);
  break;
case NO_TAGS:
tagsNoTagsButton.setSelection(true);
break;
}
}
}
 else if (!pushPage) tagsAutoFollowButton.setSelection(true);
checkPage();
}",0.997937080969572
7828,"/** 
 * @return list of all selected URIs - either the one specified as customURI or all URIs from selected configuration. May be null in case of no valid selection.
 */
public List<URIish> getPushURIs(){
  if (isURISelected())   return Collections.singletonList(uri);
  if (isConfigSelected())   return config.getPushURIs();
  return null;
}","/** 
 * @return list of all push URIs - either the one specified as custom URI orall push URIs of the selected configuration; if not push URIs were specified, the first URI is returned
 */
public List<URIish> getPushURIs(){
  if (isURISelected())   return Collections.singletonList(uri);
  if (isConfigSelected()) {
    List<URIish> pushUris=new ArrayList<URIish>();
    pushUris.addAll(config.getPushURIs());
    if (pushUris.isEmpty())     pushUris.add(config.getURIs().get(0));
    return pushUris;
  }
  return null;
}",0.5115740740740741
7829,"/** 
 * @return the selected URI (if specified by user as valid custom URI) orfirst URI from selected configuration (if specified by user as May be null if there is no valid selection.
 */
public URIish getURI(){
  if (isConfigSelected())   return config.getURIs().get(0);
  return uri;
}","/** 
 * @return the selected URI, <code>null</code> if a configuration wasselected
 */
public URIish getURI(){
  if (isConfigSelected())   return null;
  return uri;
}",0.6241758241758242
7830,"private String getSourceString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  if (repoSelection.isConfigSelected())   return repoSelection.getConfigName();
  return repoSelection.getURI().toString();
}","private String getSourceString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  if (repoSelection.isConfigSelected())   return repoSelection.getConfigName();
  return repoSelection.getURI(false).toString();
}",0.9890590809628008
7831,"@Override public boolean performFinish(){
  if (repoPage.getSelection().isConfigSelected() && refSpecPage.isSaveRequested())   saveConfig();
  final Transport transport;
  final RepositorySelection repoSelection=repoPage.getSelection();
  try {
    if (repoSelection.isConfigSelected())     transport=Transport.open(localDb,repoSelection.getConfig());
 else     transport=Transport.open(localDb,repoSelection.getURI());
  }
 catch (  final NotSupportedException e) {
    ErrorDialog.openError(getShell(),UIText.FetchWizard_transportNotSupportedTitle,UIText.FetchWizard_transportNotSupportedMessage,new Status(IStatus.ERROR,org.eclipse.egit.ui.Activator.getPluginId(),e.getMessage(),e));
    return false;
  }
  transport.setTagOpt(refSpecPage.getTagOpt());
  final Job fetchJob=new FetchJob(transport,refSpecPage.getRefSpecs(),getSourceString());
  fetchJob.setUser(true);
  fetchJob.schedule();
  repoPage.saveUriInPrefs();
  return true;
}","@Override public boolean performFinish(){
  if (repoPage.getSelection().isConfigSelected() && refSpecPage.isSaveRequested())   saveConfig();
  final Transport transport;
  final RepositorySelection repoSelection=repoPage.getSelection();
  try {
    if (repoSelection.isConfigSelected())     transport=Transport.open(localDb,repoSelection.getConfig());
 else     transport=Transport.open(localDb,repoSelection.getURI(false));
  }
 catch (  final NotSupportedException e) {
    ErrorDialog.openError(getShell(),UIText.FetchWizard_transportNotSupportedTitle,UIText.FetchWizard_transportNotSupportedMessage,new Status(IStatus.ERROR,org.eclipse.egit.ui.Activator.getPluginId(),e.getMessage(),e));
    return false;
  }
  transport.setTagOpt(refSpecPage.getTagOpt());
  final Job fetchJob=new FetchJob(transport,refSpecPage.getRefSpecs(),getSourceString());
  fetchJob.setUser(true);
  fetchJob.schedule();
  repoPage.saveUriInPrefs();
  return true;
}",0.9973502914679384
7832,"private void revalidateImpl(){
  if (getControl().isDisposed() || !isCurrentPage())   return;
  final List<RefSpec> fetchSpecs;
  if (displayedRepoSelection.isConfigSelected())   fetchSpecs=displayedRepoSelection.getConfig().getPushRefSpecs();
 else   fetchSpecs=null;
  final PushOperation operation;
  try {
    final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(local,displayedRefSpecs,fetchSpecs);
    if (updates.isEmpty()) {
      setErrorMessage(UIText.ConfirmationPage_errorRefsChangedNoMatch);
      setPageComplete(false);
      return;
    }
    final PushOperationSpecification spec=new PushOperationSpecification();
    for (    final URIish uri : displayedRepoSelection.getAllURIs())     spec.addURIRefUpdates(uri,copyUpdates(updates));
    operation=new PushOperation(local,spec,true,displayedRepoSelection.getConfig());
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        operation.run(monitor);
      }
    }
);
  }
 catch (  final IOException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorCantResolveSpecs,e.getMessage()));
    return;
  }
catch (  final InvocationTargetException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorUnexpected,e.getCause().getMessage()));
    return;
  }
catch (  final InterruptedException e) {
    setErrorMessage(UIText.ConfirmationPage_errorInterrupted);
    setPageComplete(true);
    displayedRefSpecs=null;
    displayedRepoSelection=null;
    return;
  }
  final PushOperationResult result=operation.getOperationResult();
  resultPanel.setData(local,result);
  if (result.isSuccessfulConnectionForAnyURI()) {
    setPageComplete(true);
    confirmedResult=result;
  }
 else {
    final String message=NLS.bind(UIText.ConfirmationPage_cantConnectToAny,result.getErrorStringForAllURis());
    setErrorMessage(message);
    ErrorDialog.openError(getShell(),UIText.ConfirmationPage_cantConnectToAnyTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),message));
  }
}","private void revalidateImpl(){
  if (getControl().isDisposed() || !isCurrentPage())   return;
  final List<RefSpec> fetchSpecs;
  if (displayedRepoSelection.isConfigSelected())   fetchSpecs=displayedRepoSelection.getConfig().getPushRefSpecs();
 else   fetchSpecs=null;
  final PushOperation operation;
  try {
    final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(local,displayedRefSpecs,fetchSpecs);
    if (updates.isEmpty()) {
      setErrorMessage(UIText.ConfirmationPage_errorRefsChangedNoMatch);
      setPageComplete(false);
      return;
    }
    final PushOperationSpecification spec=new PushOperationSpecification();
    for (    final URIish uri : displayedRepoSelection.getPushURIs())     spec.addURIRefUpdates(uri,copyUpdates(updates));
    operation=new PushOperation(local,spec,true,displayedRepoSelection.getConfig());
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        operation.run(monitor);
      }
    }
);
  }
 catch (  final IOException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorCantResolveSpecs,e.getMessage()));
    return;
  }
catch (  final InvocationTargetException e) {
    setErrorMessage(NLS.bind(UIText.ConfirmationPage_errorUnexpected,e.getCause().getMessage()));
    return;
  }
catch (  final InterruptedException e) {
    setErrorMessage(UIText.ConfirmationPage_errorInterrupted);
    setPageComplete(true);
    displayedRefSpecs=null;
    displayedRepoSelection=null;
    return;
  }
  final PushOperationResult result=operation.getOperationResult();
  resultPanel.setData(local,result);
  if (result.isSuccessfulConnectionForAnyURI()) {
    setPageComplete(true);
    confirmedResult=result;
  }
 else {
    final String message=NLS.bind(UIText.ConfirmationPage_cantConnectToAny,result.getErrorStringForAllURis());
    setErrorMessage(message);
    ErrorDialog.openError(getShell(),UIText.ConfirmationPage_cantConnectToAnyTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),message));
  }
}",0.9983431952662722
7833,"private String getDestinationString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  final String destination;
  if (repoSelection.isConfigSelected())   destination=repoSelection.getConfigName();
 else   destination=repoSelection.getURI().toString();
  return destination;
}","private String getDestinationString(){
  final RepositorySelection repoSelection=repoPage.getSelection();
  final String destination;
  if (repoSelection.isConfigSelected())   destination=repoSelection.getConfigName();
 else   destination=repoSelection.getURI(true).toString();
  return destination;
}",0.9297658862876256
7834,"private PushOperation createPushOperation(){
  try {
    final PushOperationSpecification spec;
    final RemoteConfig config=repoPage.getSelection().getConfig();
    if (confirmPage.isConfirmed()) {
      final PushOperationResult confirmedResult=confirmPage.getConfirmedResult();
      spec=confirmedResult.deriveSpecification(confirmPage.isRequireUnchangedSelected());
    }
 else {
      final Collection<RefSpec> fetchSpecs;
      if (config != null)       fetchSpecs=config.getPushRefSpecs();
 else       fetchSpecs=null;
      final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(localDb,refSpecPage.getRefSpecs(),fetchSpecs);
      if (updates.isEmpty()) {
        ErrorDialog.openError(getShell(),UIText.PushWizard_missingRefsTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),UIText.PushWizard_missingRefsMessage));
        return null;
      }
      spec=new PushOperationSpecification();
      for (      final URIish uri : repoPage.getSelection().getAllURIs())       spec.addURIRefUpdates(uri,ConfirmationPage.copyUpdates(updates));
    }
    return new PushOperation(localDb,spec,false,config);
  }
 catch (  final IOException e) {
    ErrorDialog.openError(getShell(),UIText.PushWizard_cantPrepareUpdatesTitle,UIText.PushWizard_cantPrepareUpdatesMessage,new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e));
    return null;
  }
}","private PushOperation createPushOperation(){
  try {
    final PushOperationSpecification spec;
    final RemoteConfig config=repoPage.getSelection().getConfig();
    if (confirmPage.isConfirmed()) {
      final PushOperationResult confirmedResult=confirmPage.getConfirmedResult();
      spec=confirmedResult.deriveSpecification(confirmPage.isRequireUnchangedSelected());
    }
 else {
      final Collection<RefSpec> fetchSpecs;
      if (config != null)       fetchSpecs=config.getPushRefSpecs();
 else       fetchSpecs=null;
      final Collection<RemoteRefUpdate> updates=Transport.findRemoteRefUpdatesFor(localDb,refSpecPage.getRefSpecs(),fetchSpecs);
      if (updates.isEmpty()) {
        ErrorDialog.openError(getShell(),UIText.PushWizard_missingRefsTitle,null,new Status(IStatus.ERROR,Activator.getPluginId(),UIText.PushWizard_missingRefsMessage));
        return null;
      }
      spec=new PushOperationSpecification();
      for (      final URIish uri : repoPage.getSelection().getPushURIs())       spec.addURIRefUpdates(uri,ConfirmationPage.copyUpdates(updates));
    }
    return new PushOperation(localDb,spec,false,config);
  }
 catch (  final IOException e) {
    ErrorDialog.openError(getShell(),UIText.PushWizard_cantPrepareUpdatesTitle,UIText.PushWizard_cantPrepareUpdatesMessage,new Status(IStatus.ERROR,Activator.getPluginId(),e.getMessage(),e));
    return null;
  }
}",0.9974865350089768
7835,"public void run(){
  try {
    MessageDialog.openInformation(getShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
  }
 catch (  ExecutionException e) {
    Activator.handleError(op.getResult().toString(),null,true);
  }
}","public void run(){
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
}",0.534521158129176
7836,"public Object execute(final ExecutionEvent event) throws ExecutionException {
  final Repository repository=getRepository(true,event);
  if (repository == null)   return null;
  if (!canMerge(repository,event))   return null;
  MergeTargetSelectionDialog mergeTargetSelectionDialog=new MergeTargetSelectionDialog(getShell(event),repository);
  if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
    final String refName=mergeTargetSelectionDialog.getRefName();
    String jobname=NLS.bind(UIText.MergeAction_JobNameMerge,refName);
    final MergeOperation op=new MergeOperation(repository,refName);
    Job job=new Job(jobname){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          op.execute(monitor);
        }
 catch (        final CoreException e) {
          return e.getStatus();
        }
        return Status.OK_STATUS;
      }
    }
;
    job.setUser(true);
    job.addJobChangeListener(new JobChangeAdapter(){
      @Override public void done(      IJobChangeEvent cevent){
        IStatus result=cevent.getJob().getResult();
        if (result.getSeverity() == IStatus.CANCEL) {
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              try {
                MessageDialog.openInformation(getShell(event),UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
              }
 catch (              ExecutionException e) {
                Activator.handleError(UIText.MergeAction_MergeCanceledMessage,null,true);
              }
            }
          }
);
        }
 else         if (!result.isOK()) {
          Activator.handleError(result.getMessage(),result.getException(),true);
        }
 else {
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              try {
                MessageDialog.openInformation(getShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
              }
 catch (              ExecutionException e) {
                Activator.handleError(op.getResult().toString(),null,true);
              }
            }
          }
);
        }
      }
    }
);
    job.schedule();
  }
  return null;
}","public Object execute(final ExecutionEvent event) throws ExecutionException {
  final Repository repository=getRepository(true,event);
  if (repository == null)   return null;
  if (!canMerge(repository,event))   return null;
  MergeTargetSelectionDialog mergeTargetSelectionDialog=new MergeTargetSelectionDialog(getShell(event),repository);
  if (mergeTargetSelectionDialog.open() == IDialogConstants.OK_ID) {
    final String refName=mergeTargetSelectionDialog.getRefName();
    String jobname=NLS.bind(UIText.MergeAction_JobNameMerge,refName);
    final MergeOperation op=new MergeOperation(repository,refName);
    Job job=new Job(jobname){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          op.execute(monitor);
        }
 catch (        final CoreException e) {
          return e.getStatus();
        }
        return Status.OK_STATUS;
      }
    }
;
    job.setUser(true);
    job.setRule(op.getSchedulingRule());
    job.addJobChangeListener(new JobChangeAdapter(){
      @Override public void done(      IJobChangeEvent cevent){
        IStatus result=cevent.getJob().getResult();
        if (result.getSeverity() == IStatus.CANCEL) {
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
              MessageDialog.openInformation(shell,UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
            }
          }
);
        }
 else         if (!result.isOK()) {
          Activator.handleError(result.getMessage(),result.getException(),true);
        }
 else {
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
              MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
            }
          }
);
        }
      }
    }
);
    job.schedule();
  }
  return null;
}",0.7053883834849545
7837,"@Override public void done(IJobChangeEvent cevent){
  IStatus result=cevent.getJob().getResult();
  if (result.getSeverity() == IStatus.CANCEL) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          MessageDialog.openInformation(getShell(event),UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
        }
 catch (        ExecutionException e) {
          Activator.handleError(UIText.MergeAction_MergeCanceledMessage,null,true);
        }
      }
    }
);
  }
 else   if (!result.isOK()) {
    Activator.handleError(result.getMessage(),result.getException(),true);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        try {
          MessageDialog.openInformation(getShell(event),UIText.MergeAction_MergeResultTitle,op.getResult().toString());
        }
 catch (        ExecutionException e) {
          Activator.handleError(op.getResult().toString(),null,true);
        }
      }
    }
);
  }
}","@Override public void done(IJobChangeEvent cevent){
  IStatus result=cevent.getJob().getResult();
  if (result.getSeverity() == IStatus.CANCEL) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
        MessageDialog.openInformation(shell,UIText.MergeAction_MergeCanceledTitle,UIText.MergeAction_MergeCanceledMessage);
      }
    }
);
  }
 else   if (!result.isOK()) {
    Activator.handleError(result.getMessage(),result.getException(),true);
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
        MessageDialog.openInformation(shell,UIText.MergeAction_MergeResultTitle,op.getResult().toString());
      }
    }
);
  }
}",0.5127931769722814
7838,"private void openFileInEditor(FileDiff d){
  try {
    IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IFileRevision rev=CompareUtils.getFileRevision(d.path,d.commit,db,d.blobs[1]);
    if (rev != null)     EgitUiEditorUtils.openEditor(page,rev,new NullProgressMonitor());
 else {
      String message=NLS.bind(UIText.CommitFileDiffViewer_notContainedInCommit,d.path,d.commit.getId().getName());
      Activator.showError(message,null);
    }
  }
 catch (  IOException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
catch (  CoreException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
}","private void openFileInEditor(FileDiff d){
  try {
    IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IFileRevision rev=CompareUtils.getFileRevision(d.path,d.change.equals(""String_Node_Str"") ? d.commit.getParent(0) : d.commit,db,d.change.equals(""String_Node_Str"") ? d.blobs[0] : d.blobs[1]);
    if (rev != null)     EgitUiEditorUtils.openEditor(page,rev,new NullProgressMonitor());
 else {
      String message=NLS.bind(UIText.CommitFileDiffViewer_notContainedInCommit,d.path,d.commit.getId().getName());
      Activator.showError(message,null);
    }
  }
 catch (  IOException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
catch (  CoreException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
}",0.9380925822643614
7839,"private void openFileInEditor(FileDiff d){
  try {
    IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IFileRevision rev=CompareUtils.getFileRevision(d.path,d.commit,db,d.blobs[1]);
    if (rev != null)     EgitUiEditorUtils.openEditor(page,rev,new NullProgressMonitor());
 else {
      String message=NLS.bind(UIText.CommitFileDiffViewer_notContainedInCommit,d.path,d.commit.getId().getName());
      Activator.showError(message,null);
    }
  }
 catch (  IOException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
catch (  CoreException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
}","private void openFileInEditor(FileDiff d){
  try {
    IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IFileRevision rev=CompareUtils.getFileRevision(d.path,d.change.equals(""String_Node_Str"") ? d.commit.getParent(0) : d.commit,db,d.change.equals(""String_Node_Str"") ? d.blobs[0] : d.blobs[1]);
    if (rev != null)     EgitUiEditorUtils.openEditor(page,rev,new NullProgressMonitor());
 else {
      String message=NLS.bind(UIText.CommitFileDiffViewer_notContainedInCommit,d.path,d.commit.getId().getName());
      Activator.showError(message,null);
    }
  }
 catch (  IOException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
catch (  CoreException e) {
    Activator.logError(UIText.GitHistoryPage_openFailed,e);
    Activator.showError(UIText.GitHistoryPage_openFailed,null);
  }
}",0.9380925822643614
7840,"/** 
 * Comparing two folders that have different path should return false.
 * @throws Exception
 */
@Test @SuppressWarnings(""String_Node_Str"") public void shouldReturnFalseWhenComparingContainerAndContainer() throws Exception {
  GitResourceVariantComparator grvc=new GitResourceVariantComparator(null);
  IPath localPath=createMock(IPath.class);
  replay(localPath);
  IContainer local=createMock(IContainer.class);
  expect(local.exists()).andReturn(true);
  expect(local.getFullPath()).andReturn(localPath);
  replay(local);
  File file=testRepo.createFile(iProject,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  RevCommit commit=testRepo.addAndCommit(iProject,file,""String_Node_Str"");
  String path=Repository.stripWorkDir(repo.getWorkTree(),file);
  GitFolderResourceVariant remote=new GitFolderResourceVariant(repo,commit.getTree(),path);
  assertFalse(grvc.compare(local,remote));
  verify(local,localPath);
}","/** 
 * Comparing two folders that have different path should return false.
 * @throws Exception
 */
@Test @SuppressWarnings(""String_Node_Str"") public void shouldReturnFalseWhenComparingContainerAndContainer() throws Exception {
  GitResourceVariantComparator grvc=new GitResourceVariantComparator(null);
  IPath localPath=createMock(IPath.class);
  replay(localPath);
  IContainer local=createMock(IContainer.class);
  expect(local.exists()).andReturn(true).times(2);
  expect(local.getFullPath()).andReturn(localPath);
  replay(local);
  File file=testRepo.createFile(iProject,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  RevCommit commit=testRepo.addAndCommit(iProject,file,""String_Node_Str"");
  String path=Repository.stripWorkDir(repo.getWorkTree(),file);
  GitFolderResourceVariant remote=new GitFolderResourceVariant(repo,commit.getTree(),path);
  assertFalse(grvc.compare(local,remote));
  verify(local,localPath);
}",0.995179432244242
7841,"/** 
 * When comparing two folders that have same path, compare() method should return true.
 * @throws Exception
 */
@Test @SuppressWarnings(""String_Node_Str"") public void shouldReturnTrueWhenComparingContainerAndContainer() throws Exception {
  GitResourceVariantComparator grvc=new GitResourceVariantComparator(null);
  File file=testRepo.createFile(iProject,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  RevCommit commit=testRepo.addAndCommit(iProject,file,""String_Node_Str"");
  String path=Repository.stripWorkDir(repo.getWorkTree(),file);
  IPath iPath=new Path(File.separator + path);
  IContainer local=createMock(IContainer.class);
  expect(local.exists()).andReturn(true);
  expect(local.getFullPath()).andReturn(iPath).anyTimes();
  replay(local);
  GitFolderResourceVariant remote=new GitFolderResourceVariant(repo,commit.getTree(),path);
  assertTrue(grvc.compare(local,remote));
  verify(local);
}","/** 
 * When comparing two folders that have same path, compare() method should return true.
 * @throws Exception
 */
@Test @SuppressWarnings(""String_Node_Str"") public void shouldReturnTrueWhenComparingContainerAndContainer() throws Exception {
  GitResourceVariantComparator grvc=new GitResourceVariantComparator(null);
  File file=testRepo.createFile(iProject,""String_Node_Str"" + File.separator + ""String_Node_Str"");
  RevCommit commit=testRepo.addAndCommit(iProject,file,""String_Node_Str"");
  String path=Repository.stripWorkDir(repo.getWorkTree(),file);
  IPath iPath=new Path(File.separator + path);
  IContainer local=createMock(IContainer.class);
  expect(local.exists()).andReturn(true).times(2);
  expect(local.getFullPath()).andReturn(iPath).anyTimes();
  replay(local);
  GitFolderResourceVariant remote=new GitFolderResourceVariant(repo,commit.getTree(),path);
  assertTrue(grvc.compare(local,remote));
  verify(local);
}",0.9951534733441034
7842,"/** 
 * Execute operation and store result. Operation is executed independently on each remote repository. <p>
 * @param actMonitor the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException Cause of this exceptions may include {@link TransportException},   {@link NotSupportedException} orsome unexpected  {@link RuntimeException}.
 */
public void run(IProgressMonitor actMonitor) throws InvocationTargetException {
  if (operationResult != null)   throw new IllegalStateException(CoreText.OperationAlreadyExecuted);
  for (  URIish uri : this.specification.getURIs()) {
    for (    RemoteRefUpdate update : this.specification.getRefUpdates(uri))     if (update.getStatus() != Status.NOT_ATTEMPTED)     throw new IllegalStateException(CoreText.RemoteRefUpdateCantBeReused);
  }
  IProgressMonitor monitor;
  if (actMonitor == null)   monitor=new NullProgressMonitor();
 else   monitor=actMonitor;
  final int totalWork=specification.getURIsNumber() * WORK_UNITS_PER_TRANSPORT;
  if (dryRun)   monitor.beginTask(CoreText.PushOperation_taskNameDryRun,totalWork);
 else   monitor.beginTask(CoreText.PushOperation_taskNameNormalRun,totalWork);
  operationResult=new PushOperationResult();
  for (  final URIish uri : specification.getURIs()) {
    final SubProgressMonitor subMonitor=new SubProgressMonitor(monitor,WORK_UNITS_PER_TRANSPORT,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
    Transport transport=null;
    try {
      if (monitor.isCanceled()) {
        operationResult.addOperationResult(uri,CoreText.PushOperation_resultCancelled);
        continue;
      }
      transport=Transport.open(localDb,uri);
      if (rc != null)       transport.applyConfig(rc);
      transport.setDryRun(dryRun);
      final EclipseGitProgressTransformer gitSubMonitor=new EclipseGitProgressTransformer(subMonitor);
      final PushResult pr=transport.push(gitSubMonitor,specification.getRefUpdates(uri));
      operationResult.addOperationResult(uri,pr);
    }
 catch (    final NoRemoteRepositoryException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultNoServiceError,e.getMessage()));
    }
catch (    final TransportException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultTransportError,e.getMessage()));
    }
catch (    final NotSupportedException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultNotSupported,e.getMessage()));
    }
 finally {
      if (transport != null) {
        transport.close();
      }
      subMonitor.beginTask(""String_Node_Str"",WORK_UNITS_PER_TRANSPORT);
      subMonitor.done();
      subMonitor.done();
    }
  }
  monitor.done();
}","/** 
 * Execute operation and store result. Operation is executed independently on each remote repository. <p>
 * @param actMonitor the monitor to be used for reporting progress and responding to cancellation. The monitor is never <code>null</code>
 * @throws InvocationTargetException Cause of this exceptions may include {@link TransportException},   {@link NotSupportedException} orsome unexpected  {@link RuntimeException}.
 */
public void run(IProgressMonitor actMonitor) throws InvocationTargetException {
  if (operationResult != null)   throw new IllegalStateException(CoreText.OperationAlreadyExecuted);
  for (  URIish uri : this.specification.getURIs()) {
    for (    RemoteRefUpdate update : this.specification.getRefUpdates(uri))     if (update.getStatus() != Status.NOT_ATTEMPTED)     throw new IllegalStateException(CoreText.RemoteRefUpdateCantBeReused);
  }
  IProgressMonitor monitor;
  if (actMonitor == null)   monitor=new NullProgressMonitor();
 else   monitor=actMonitor;
  final int totalWork=specification.getURIsNumber() * WORK_UNITS_PER_TRANSPORT;
  if (dryRun)   monitor.beginTask(CoreText.PushOperation_taskNameDryRun,totalWork);
 else   monitor.beginTask(CoreText.PushOperation_taskNameNormalRun,totalWork);
  operationResult=new PushOperationResult();
  for (  final URIish uri : specification.getURIs()) {
    final SubProgressMonitor subMonitor=new SubProgressMonitor(monitor,WORK_UNITS_PER_TRANSPORT,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
    Transport transport=null;
    try {
      if (monitor.isCanceled()) {
        operationResult.addOperationResult(uri,CoreText.PushOperation_resultCancelled);
        continue;
      }
      transport=Transport.open(localDb,uri);
      if (rc != null)       transport.applyConfig(rc);
      transport.setDryRun(dryRun);
      final EclipseGitProgressTransformer gitSubMonitor=new EclipseGitProgressTransformer(subMonitor);
      final PushResult pr=transport.push(gitSubMonitor,specification.getRefUpdates(uri));
      operationResult.addOperationResult(uri,pr);
      monitor.worked(WORK_UNITS_PER_TRANSPORT);
    }
 catch (    final NoRemoteRepositoryException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultNoServiceError,e.getMessage()));
    }
catch (    final TransportException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultTransportError,e.getMessage()));
    }
catch (    final NotSupportedException e) {
      operationResult.addOperationResult(uri,NLS.bind(CoreText.PushOperation_resultNotSupported,e.getMessage()));
    }
 finally {
      if (transport != null) {
        transport.close();
      }
      subMonitor.beginTask(""String_Node_Str"",WORK_UNITS_PER_TRANSPORT);
      subMonitor.done();
      subMonitor.done();
    }
  }
  monitor.done();
}",0.7685185185185185
7843,"private void checkPage(){
  String projectName=projectText.getText();
  setErrorMessage(null);
  try {
    if (!myDirectory.exists()) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_DirNotExistMessage,myDirectory.getPath()));
      return;
    }
    if (!myDirectory.isDirectory()) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_FileNotDirMessage,myDirectory.getPath()));
      return;
    }
    if (myDirectory.list(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        if (name.equals(""String_Node_Str""))         return true;
        return false;
      }
    }
).length > 0) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_FileExistsInDirMessage,""String_Node_Str"",myDirectory.getPath()));
      return;
    }
    if (projectName.length() == 0) {
      setErrorMessage(UIText.GitCreateGeneralProjectPage_EnterProjectNameMessage);
      return;
    }
    IStatus result=ResourcesPlugin.getWorkspace().validateName(projectName,IResource.PROJECT);
    if (!result.isOK()) {
      setErrorMessage(result.getMessage());
      return;
    }
    if (isProjectInWorkspace(projectName)) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_PorjectAlreadyExistsMessage,projectName));
      return;
    }
    IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
    IStatus locationResult=ResourcesPlugin.getWorkspace().validateProjectLocation(newProject,new Path(myDirectory.getPath()));
    if (!locationResult.isOK()) {
      setErrorMessage(locationResult.getMessage());
      return;
    }
  }
  finally {
    setPageComplete(getErrorMessage() == null);
  }
}","private void checkPage(){
  String projectName=projectText.getText();
  setErrorMessage(null);
  try {
    if (!myDirectory.exists()) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_DirNotExistMessage,myDirectory.getPath()));
      return;
    }
    if (!myDirectory.isDirectory()) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_FileNotDirMessage,myDirectory.getPath()));
      return;
    }
    if (myDirectory.list(new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        if (name.equals(""String_Node_Str""))         return true;
        return false;
      }
    }
).length > 0) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_FileExistsInDirMessage,""String_Node_Str"",myDirectory.getPath()));
      return;
    }
    if (projectName.length() == 0) {
      setErrorMessage(UIText.GitCreateGeneralProjectPage_EnterProjectNameMessage);
      return;
    }
    IStatus result=ResourcesPlugin.getWorkspace().validateName(projectName,IResource.PROJECT);
    if (!result.isOK()) {
      setErrorMessage(result.getMessage());
      return;
    }
    if (isProjectInWorkspace(projectName)) {
      setErrorMessage(NLS.bind(UIText.GitCreateGeneralProjectPage_PorjectAlreadyExistsMessage,projectName));
      return;
    }
    if (!defaultLocation) {
      IProject newProject=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
      IStatus locationResult=ResourcesPlugin.getWorkspace().validateProjectLocation(newProject,new Path(myDirectory.getPath()));
      if (!locationResult.isOK()) {
        setErrorMessage(locationResult.getMessage());
        return;
      }
    }
  }
  finally {
    setPageComplete(getErrorMessage() == null);
  }
}",0.9826187717265352
7844,"public void createControl(Composite parent){
  initializeDialogUnits(parent);
  Composite workArea=new Composite(parent,SWT.NONE);
  setControl(workArea);
  workArea.setLayout(new GridLayout(2,false));
  workArea.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
  new Label(workArea,SWT.NONE).setText(UIText.GitCreateGeneralProjectPage_ProjectNameLabel);
  projectText=new Text(workArea,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(projectText);
  projectText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkPage();
    }
  }
);
  new Label(workArea,SWT.NONE).setText(UIText.GitCreateGeneralProjectPage_DirLabel);
  directoryText=new Text(workArea,SWT.BORDER);
  directoryText.setEnabled(false);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(directoryText);
  Dialog.applyDialogFont(workArea);
}","public void createControl(Composite parent){
  initializeDialogUnits(parent);
  Composite workArea=new Composite(parent,SWT.NONE);
  setControl(workArea);
  workArea.setLayout(new GridLayout(2,false));
  workArea.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL));
  new Label(workArea,SWT.NONE).setText(UIText.GitCreateGeneralProjectPage_ProjectNameLabel);
  projectText=new Text(workArea,SWT.BORDER);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(projectText);
  if (defaultLocation)   projectText.setEnabled(false);
 else   projectText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkPage();
    }
  }
);
  new Label(workArea,SWT.NONE).setText(UIText.GitCreateGeneralProjectPage_DirLabel);
  directoryText=new Text(workArea,SWT.BORDER);
  directoryText.setEnabled(false);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(directoryText);
  Dialog.applyDialogFont(workArea);
}",0.9679089026915114
7845,"/** 
 */
public void importProjects(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
switch (mySelectionPage.getWizardSelection()) {
case GitSelectWizardPage.EXISTING_PROJECTS_WIZARD:
        myProjectsImportPage.createProjects();
      break;
case GitSelectWizardPage.NEW_WIZARD:
    new NewWizardAction(PlatformUI.getWorkbench().getActiveWorkbenchWindow()).run();
  break;
case GitSelectWizardPage.GENERAL_WIZARD:
try {
  final String projectName=myCreateGeneralProjectPage.getProjectName();
  getContainer().run(true,false,new WorkspaceModifyOperation(){
    @Override protected void execute(    IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
      final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
      desc.setLocation(new Path(myGitDir));
      IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
      prj.create(desc,monitor);
      prj.open(monitor);
      ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
  }
);
}
 catch (InvocationTargetException e1) {
  Activator.handleError(e1.getMessage(),e1.getTargetException(),true);
}
catch (InterruptedException e1) {
  Activator.handleError(e1.getMessage(),e1,true);
}
break;
}
}
}
);
}","/** 
 */
public void importProjects(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
switch (mySelectionPage.getWizardSelection()) {
case GitSelectWizardPage.EXISTING_PROJECTS_WIZARD:
        myProjectsImportPage.createProjects();
      break;
case GitSelectWizardPage.NEW_WIZARD:
    new NewWizardAction(PlatformUI.getWorkbench().getActiveWorkbenchWindow()).run();
  break;
case GitSelectWizardPage.GENERAL_WIZARD:
try {
  final String projectName=myCreateGeneralProjectPage.getProjectName();
  final boolean defaultLocation=myCreateGeneralProjectPage.isDefaultLocation();
  getContainer().run(true,false,new WorkspaceModifyOperation(){
    @Override protected void execute(    IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
      final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
      if (!defaultLocation)       desc.setLocation(new Path(myGitDir));
      IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
      prj.create(desc,monitor);
      prj.open(monitor);
      ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
  }
);
}
 catch (InvocationTargetException e1) {
  Activator.handleError(e1.getMessage(),e1.getTargetException(),true);
}
catch (InterruptedException e1) {
  Activator.handleError(e1.getMessage(),e1,true);
}
break;
}
}
}
);
}",0.9611510791366906
7846,"public void run(){
switch (mySelectionPage.getWizardSelection()) {
case GitSelectWizardPage.EXISTING_PROJECTS_WIZARD:
    myProjectsImportPage.createProjects();
  break;
case GitSelectWizardPage.NEW_WIZARD:
new NewWizardAction(PlatformUI.getWorkbench().getActiveWorkbenchWindow()).run();
break;
case GitSelectWizardPage.GENERAL_WIZARD:
try {
final String projectName=myCreateGeneralProjectPage.getProjectName();
getContainer().run(true,false,new WorkspaceModifyOperation(){
@Override protected void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
  desc.setLocation(new Path(myGitDir));
  IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
  prj.create(desc,monitor);
  prj.open(monitor);
  ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
}
}
);
}
 catch (InvocationTargetException e1) {
Activator.handleError(e1.getMessage(),e1.getTargetException(),true);
}
catch (InterruptedException e1) {
Activator.handleError(e1.getMessage(),e1,true);
}
break;
}
}","public void run(){
switch (mySelectionPage.getWizardSelection()) {
case GitSelectWizardPage.EXISTING_PROJECTS_WIZARD:
    myProjectsImportPage.createProjects();
  break;
case GitSelectWizardPage.NEW_WIZARD:
new NewWizardAction(PlatformUI.getWorkbench().getActiveWorkbenchWindow()).run();
break;
case GitSelectWizardPage.GENERAL_WIZARD:
try {
final String projectName=myCreateGeneralProjectPage.getProjectName();
final boolean defaultLocation=myCreateGeneralProjectPage.isDefaultLocation();
getContainer().run(true,false,new WorkspaceModifyOperation(){
@Override protected void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
  if (!defaultLocation)   desc.setLocation(new Path(myGitDir));
  IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
  prj.create(desc,monitor);
  prj.open(monitor);
  ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
}
}
);
}
 catch (InvocationTargetException e1) {
Activator.handleError(e1.getMessage(),e1.getTargetException(),true);
}
catch (InterruptedException e1) {
Activator.handleError(e1.getMessage(),e1,true);
}
break;
}
}",0.9585028478437754
7847,"@Override protected void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
  desc.setLocation(new Path(myGitDir));
  IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
  prj.create(desc,monitor);
  prj.open(monitor);
  ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
}","@Override protected void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
  final IProjectDescription desc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName);
  if (!defaultLocation)   desc.setLocation(new Path(myGitDir));
  IProject prj=ResourcesPlugin.getWorkspace().getRoot().getProject(desc.getName());
  prj.create(desc,monitor);
  prj.open(monitor);
  ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_ONE,monitor);
}",0.9761431411530817
7848,"/** 
 * @return destination {@link Tree}
 * @throws IOException
 */
public Tree mapDstTree() throws IOException {
  return mapTree(dstRev);
}","/** 
 * @return destination Tree
 * @throws IOException
 */
public Tree mapDstTree() throws IOException {
  return mapTree(dstRev);
}",0.9708029197080292
7849,"/** 
 * @return source {@link Tree}
 * @throws IOException
 */
public Tree mapSrcTree() throws IOException {
  return mapTree(srcRev);
}","/** 
 * @return source Tree
 * @throws IOException
 */
public Tree mapSrcTree() throws IOException {
  return mapTree(srcRev);
}",0.9696969696969696
7850,"/** 
 * Construct a resource not for a   {@link TreeEntry}
 * @param e The {@link TreeEntry}
 */
public GitResourceNode(TreeEntry e){
  entry=e;
}","/** 
 * Construct a resource not for a TreeEntry
 * @param e The TreeEntry
 */
public GitResourceNode(TreeEntry e){
  entry=e;
}",0.9343065693430656
7851,"/** 
 * Returns a status that represents the exceptions collected. If the collector is empty <code>IStatus.OK</code> is returned. Otherwise a MultiStatus containing all collected exceptions is returned.
 * @return a multistatus containing the exceptions collected or IStatus.OKif the collector is empty.
 */
public IStatus getStatus(){
  if (statuses.isEmpty()) {
    return Status.OK_STATUS;
  }
 else {
    final MultiStatus multiStatus=new MultiStatus(pluginId,severity,message,null);
    final Iterator it=statuses.iterator();
    while (it.hasNext()) {
      final IStatus status=(IStatus)it.next();
      multiStatus.merge(status);
    }
    return multiStatus;
  }
}","/** 
 * Returns a status that represents the exceptions collected. If the collector is empty <code>IStatus.OK</code> is returned. Otherwise a MultiStatus containing all collected exceptions is returned.
 * @return a multistatus containing the exceptions collected or IStatus.OKif the collector is empty.
 */
public IStatus getStatus(){
  if (statuses != null && statuses.isEmpty()) {
    return Status.OK_STATUS;
  }
 else {
    final MultiStatus multiStatus=new MultiStatus(pluginId,severity,message,null);
    final Iterator it=statuses.iterator();
    while (it.hasNext()) {
      final IStatus status=(IStatus)it.next();
      multiStatus.merge(status);
    }
    return multiStatus;
  }
}",0.985358711566618
7852,"/** 
 * @return destination {@link Tree}
 * @throws IOException
 */
public Tree mapDstTree() throws IOException {
  return mapTree(dstRev);
}","/** 
 * @return destination Tree
 * @throws IOException
 */
public Tree mapDstTree() throws IOException {
  return mapTree(dstRev);
}",0.9708029197080292
7853,"/** 
 * @return source {@link Tree}
 * @throws IOException
 */
public Tree mapSrcTree() throws IOException {
  return mapTree(srcRev);
}","/** 
 * @return source Tree
 * @throws IOException
 */
public Tree mapSrcTree() throws IOException {
  return mapTree(srcRev);
}",0.9696969696969696
7854,"/** 
 * Construct a resource not for a   {@link TreeEntry}
 * @param e The {@link TreeEntry}
 */
public GitResourceNode(TreeEntry e){
  entry=e;
}","/** 
 * Construct a resource not for a TreeEntry
 * @param e The TreeEntry
 */
public GitResourceNode(TreeEntry e){
  entry=e;
}",0.9343065693430656
7855,"public void execute(IAction action) throws InvocationTargetException {
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  ITypedElement next;
  try {
    Ref head=repository.getRef(Constants.HEAD);
    RevWalk rw=new RevWalk(repository);
    RevCommit commit=rw.parseCommit(head.getObjectId());
    next=new GitCompareFileRevisionEditorInput.EmptyTypedElement(NLS.bind(UIText.GitHistoryPage_FileNotInCommit,resource.getName(),commit));
    TreeWalk w=TreeWalk.forPath(repository,gitPath,commit.getTree());
    if (w != null) {
      final IFileRevision nextFile=GitFileRevision.inCommit(repository,commit,gitPath,null);
      next=new FileRevisionTypedElement(nextFile);
    }
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}","public void execute(IAction action) throws InvocationTargetException {
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  ITypedElement next;
  try {
    Ref head=repository.getRef(Constants.HEAD);
    RevWalk rw=new RevWalk(repository);
    RevCommit commit=rw.parseCommit(head.getObjectId());
    next=CompareUtils.getFileRevisionTypedElement(gitPath,commit,repository);
  }
 catch (  IOException e) {
    throw new InvocationTargetException(e);
  }
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}",0.6585820895522388
7856,"private void discardChange(IResource res) throws IOException {
  IProject[] proj=new IProject[]{res.getProject()};
  Repository repository=getRepositoriesFor(proj)[0];
  String resRelPath=RepositoryMapping.getMapping(res).getRepoRelativePath(res);
  Entry e=repository.getIndex().getEntry(resRelPath);
  if (e != null && e.getStage() == 0 && e.isModified(repository.getWorkDir())) {
    repository.getIndex().checkoutEntry(repository.getWorkDir(),e);
    try {
      res.refreshLocal(0,new NullProgressMonitor());
    }
 catch (    CoreException e1) {
      MessageDialog.openError(getShell(),UIText.DiscardChangesAction_refreshErrorTitle,UIText.DiscardChangesAction_refreshErrorMessage);
    }
    repository.getIndex().write();
  }
}","private void discardChange(IResource res) throws IOException {
  IProject[] proj=new IProject[]{res.getProject()};
  Repository repository=getRepositoriesFor(proj)[0];
  String resRelPath=RepositoryMapping.getMapping(res).getRepoRelativePath(res);
  Entry e=repository.getIndex().getEntry(resRelPath);
  if (e != null && e.getStage() == 0 && e.isModified(repository.getWorkDir())) {
    repository.getIndex().checkoutEntry(repository.getWorkDir(),e);
    try {
      res.refreshLocal(0,new NullProgressMonitor());
    }
 catch (    CoreException e1) {
      Activator.handleError(UIText.DiscardChangesAction_refreshErrorMessage,e1,true);
    }
    repository.getIndex().write();
  }
}",0.8076109936575053
7857,"private void performDiscardChanges(){
  ArrayList<IResource> allFiles=new ArrayList<IResource>();
  for (  IResource res : getSelectedResources()) {
    allFiles.addAll(getAllMembers(res));
  }
  for (  IResource res : allFiles) {
    try {
      discardChange(res);
    }
 catch (    IOException e1) {
      MessageDialog.openError(getShell(),UIText.DiscardChangesAction_unexpectedErrorTitle,UIText.DiscardChangesAction_unexpectedErrorMessage);
    }
catch (    RuntimeException e2) {
      MessageDialog.openError(getShell(),UIText.DiscardChangesAction_unexpectedErrorTitle,UIText.DiscardChangesAction_unexpectedIndexErrorMessage);
    }
  }
}","private void performDiscardChanges(){
  ArrayList<IResource> allFiles=new ArrayList<IResource>();
  for (  IResource res : getSelectedResources()) {
    allFiles.addAll(getAllMembers(res));
  }
  for (  IResource res : allFiles) {
    try {
      discardChange(res);
    }
 catch (    IOException e1) {
      Activator.handleError(UIText.DiscardChangesAction_unexpectedErrorMessage,e1,true);
    }
catch (    RuntimeException e2) {
      Activator.handleError(UIText.DiscardChangesAction_unexpectedIndexErrorMessage,e2,true);
    }
  }
}",0.7191201353637902
7858,"@Override public void execute(IAction action){
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canResetHead()) {
    MessageDialog.openError(getShell(),UIText.ResetAction_errorResettingHead,NLS.bind(UIText.ResetAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog branchSelectionDialog=new BranchSelectionDialog(getShell(),repository,true);
  if (branchSelectionDialog.open() == IDialogConstants.OK_ID) {
    final String refName=branchSelectionDialog.getRefName();
    final ResetType type=branchSelectionDialog.getResetType();
    try {
      getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException {
          try {
            new ResetOperation(repository,refName,type).run(monitor);
            GitLightweightDecorator.refresh();
          }
 catch (          CoreException e) {
            if (GitTraceLocation.UI.isActive())             GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
            throw new InvocationTargetException(e);
          }
        }
      }
);
    }
 catch (    InvocationTargetException e) {
      MessageDialog.openError(getShell(),UIText.ResetAction_resetFailed,e.getMessage());
    }
catch (    InterruptedException e) {
      MessageDialog.openError(getShell(),UIText.ResetAction_resetFailed,e.getMessage());
    }
  }
}","@Override public void execute(IAction action){
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canResetHead()) {
    MessageDialog.openError(getShell(),UIText.ResetAction_errorResettingHead,NLS.bind(UIText.ResetAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog branchSelectionDialog=new BranchSelectionDialog(getShell(),repository,true);
  if (branchSelectionDialog.open() == IDialogConstants.OK_ID) {
    final String refName=branchSelectionDialog.getRefName();
    final ResetType type=branchSelectionDialog.getResetType();
    try {
      getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException {
          try {
            new ResetOperation(repository,refName,type).run(monitor);
            GitLightweightDecorator.refresh();
          }
 catch (          CoreException e) {
            if (GitTraceLocation.UI.isActive())             GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
            throw new InvocationTargetException(e);
          }
        }
      }
);
    }
 catch (    InvocationTargetException e) {
      Activator.handleError(UIText.ResetAction_resetFailed,e,true);
    }
catch (    InterruptedException e) {
      Activator.handleError(UIText.ResetAction_resetFailed,e,true);
    }
  }
}",0.9593285990961912
7859,"@Override public void execute(IAction action){
  try {
    final TrackOperation op=new TrackOperation(Arrays.asList(getSelectedResources()));
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor arg0) throws InvocationTargetException, InterruptedException {
        try {
          op.run(arg0);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    Activator.logError(UIText.Track_error,e);
    MessageDialog.openError(getShell(),UIText.Track_error,UIText.Track_see_log);
  }
catch (  InterruptedException e) {
    MessageDialog.openError(getShell(),UIText.Track_error,e.getMessage());
  }
}","@Override public void execute(IAction action){
  try {
    final TrackOperation op=new TrackOperation(Arrays.asList(getSelectedResources()));
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor arg0) throws InvocationTargetException, InterruptedException {
        try {
          op.run(arg0);
        }
 catch (        CoreException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    Activator.handleError(UIText.Track_error,e,true);
  }
catch (  InterruptedException e) {
    Activator.handleError(UIText.Track_error,e,true);
  }
}",0.8411214953271028
7860,"@Override public void setFocus(){
}","@Override public void setFocus(){
  tv.getTree().setFocus();
}",0.7216494845360825
7861,"public void run(){
  handle(e,UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
}","public void run(){
  handle(new TeamException(e.getStatus()),UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
}",0.8847583643122676
7862,"@Override public void execute(IAction action) throws InvocationTargetException {
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canCheckout()) {
    MessageDialog.openError(getShell(),UIText.BranchAction_cannotCheckout,NLS.bind(UIText.BranchAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog dialog=new BranchSelectionDialog(getShell(),repository);
  dialog.setShowResetType(false);
  if (dialog.open() != IDialogConstants.OK_ID) {
    return;
  }
  final String refName=dialog.getRefName();
  try {
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          new BranchOperation(repository,refName).run(monitor);
          GitLightweightDecorator.refresh();
        }
 catch (        final CoreException e) {
          if (GitTraceLocation.UI.isActive())           GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              handle(e,UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
            }
          }
);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
  }
catch (  InterruptedException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
  }
}","@Override public void execute(IAction action) throws InvocationTargetException, InterruptedException {
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canCheckout()) {
    MessageDialog.openError(getShell(),UIText.BranchAction_cannotCheckout,NLS.bind(UIText.BranchAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog dialog=new BranchSelectionDialog(getShell(),repository);
  dialog.setShowResetType(false);
  if (dialog.open() != IDialogConstants.OK_ID) {
    return;
  }
  final String refName=dialog.getRefName();
  try {
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          new BranchOperation(repository,refName).run(monitor);
          GitLightweightDecorator.refresh();
        }
 catch (        final CoreException e) {
          if (GitTraceLocation.UI.isActive())           GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              handle(new TeamException(e.getStatus()),UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
            }
          }
);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
    throw e;
  }
catch (  InterruptedException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
    throw new InvocationTargetException(e);
  }
}",0.9690778575372724
7863,"@Override public void execute(IAction act){
  resetState();
  try {
    buildIndexHeadDiffList();
  }
 catch (  IOException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorComputingDiffs);
    return;
  }
  Repository[] repos=getRepositoriesFor(getProjectsForSelectedResources());
  Repository repository=null;
  amendAllowed=repos.length == 1;
  for (  Repository repo : repos) {
    repository=repo;
    if (!repo.getRepositoryState().canCommit()) {
      MessageDialog.openError(getTargetPart().getSite().getShell(),UIText.CommitAction_cannotCommit,NLS.bind(UIText.CommitAction_repositoryState,repo.getRepositoryState().getDescription()));
      return;
    }
  }
  loadPreviousCommit();
  if (files.isEmpty()) {
    if (amendAllowed && previousCommit != null) {
      boolean result=MessageDialog.openQuestion(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendCommit);
      if (!result)       return;
      amending=true;
    }
 else {
      MessageDialog.openWarning(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendNotPossible);
      return;
    }
  }
  String author=null;
  String committer=null;
  if (repository != null) {
    final RepositoryConfig config=repository.getConfig();
    author=config.getAuthorName();
    final String authorEmail=config.getAuthorEmail();
    author=author + ""String_Node_Str"" + authorEmail+ ""String_Node_Str"";
    committer=config.getCommitterName();
    final String committerEmail=config.getCommitterEmail();
    committer=committer + ""String_Node_Str"" + committerEmail+ ""String_Node_Str"";
  }
  CommitDialog commitDialog=new CommitDialog(getTargetPart().getSite().getShell());
  commitDialog.setAmending(amending);
  commitDialog.setAmendAllowed(amendAllowed);
  commitDialog.setFileList(files);
  commitDialog.setAuthor(author);
  commitDialog.setCommitter(committer);
  if (previousCommit != null) {
    commitDialog.setPreviousCommitMessage(previousCommit.getMessage());
    PersonIdent previousAuthor=previousCommit.getAuthor();
    commitDialog.setPreviousAuthor(previousAuthor.getName() + ""String_Node_Str"" + previousAuthor.getEmailAddress()+ ""String_Node_Str"");
  }
  if (commitDialog.open() != IDialogConstants.OK_ID)   return;
  String commitMessage=commitDialog.getCommitMessage();
  amending=commitDialog.isAmending();
  try {
    performCommit(commitDialog,commitMessage);
  }
 catch (  TeamException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorOnCommit);
  }
}","@Override public void execute(IAction act){
  resetState();
  try {
    buildIndexHeadDiffList();
  }
 catch (  IOException e) {
    handle(new TeamException(UIText.CommitAction_errorComputingDiffs,e),UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorComputingDiffs);
    return;
  }
  Repository[] repos=getRepositoriesFor(getProjectsForSelectedResources());
  Repository repository=null;
  amendAllowed=repos.length == 1;
  for (  Repository repo : repos) {
    repository=repo;
    if (!repo.getRepositoryState().canCommit()) {
      MessageDialog.openError(getTargetPart().getSite().getShell(),UIText.CommitAction_cannotCommit,NLS.bind(UIText.CommitAction_repositoryState,repo.getRepositoryState().getDescription()));
      return;
    }
  }
  loadPreviousCommit();
  if (files.isEmpty()) {
    if (amendAllowed && previousCommit != null) {
      boolean result=MessageDialog.openQuestion(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendCommit);
      if (!result)       return;
      amending=true;
    }
 else {
      MessageDialog.openWarning(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendNotPossible);
      return;
    }
  }
  String author=null;
  String committer=null;
  if (repository != null) {
    final RepositoryConfig config=repository.getConfig();
    author=config.getAuthorName();
    final String authorEmail=config.getAuthorEmail();
    author=author + ""String_Node_Str"" + authorEmail+ ""String_Node_Str"";
    committer=config.getCommitterName();
    final String committerEmail=config.getCommitterEmail();
    committer=committer + ""String_Node_Str"" + committerEmail+ ""String_Node_Str"";
  }
  CommitDialog commitDialog=new CommitDialog(getTargetPart().getSite().getShell());
  commitDialog.setAmending(amending);
  commitDialog.setAmendAllowed(amendAllowed);
  commitDialog.setFileList(files);
  commitDialog.setAuthor(author);
  commitDialog.setCommitter(committer);
  if (previousCommit != null) {
    commitDialog.setPreviousCommitMessage(previousCommit.getMessage());
    PersonIdent previousAuthor=previousCommit.getAuthor();
    commitDialog.setPreviousAuthor(previousAuthor.getName() + ""String_Node_Str"" + previousAuthor.getEmailAddress()+ ""String_Node_Str"");
  }
  if (commitDialog.open() != IDialogConstants.OK_ID)   return;
  String commitMessage=commitDialog.getCommitMessage();
  amending=commitDialog.isAmending();
  try {
    performCommit(commitDialog,commitMessage);
  }
 catch (  TeamException e) {
    handle(e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorOnCommit);
  }
}",0.9690373428410584
7864,"public void contentChanged(IContentChangeNotifier source){
  final byte[] newContent=next.getModifiedContent();
  try {
    final GitIndex index=repository.getIndex();
    final File file=new File(baseFile.getLocation().toString());
    index.add(mapping.getWorkDir(),file,newContent);
    index.write();
  }
 catch (  IOException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
    return;
  }
}","public void contentChanged(IContentChangeNotifier source){
  final byte[] newContent=next.getModifiedContent();
  try {
    final GitIndex index=repository.getIndex();
    final File file=new File(baseFile.getLocation().toString());
    index.add(mapping.getWorkDir(),file,newContent);
    index.write();
  }
 catch (  IOException e) {
    handle(new TeamException(UIText.CompareWithIndexAction_errorOnAddToIndex,e),UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
    return;
  }
}",0.8801534036433365
7865,"@Override public void execute(IAction action){
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  final EditableRevision next=new EditableRevision(nextFile);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      try {
        final GitIndex index=repository.getIndex();
        final File file=new File(baseFile.getLocation().toString());
        index.add(mapping.getWorkDir(),file,newContent);
        index.write();
      }
 catch (      IOException e) {
        Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
        return;
      }
    }
  }
;
  next.addContentChangeListener(listener);
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}","@Override public void execute(IAction action){
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  final EditableRevision next=new EditableRevision(nextFile);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      try {
        final GitIndex index=repository.getIndex();
        final File file=new File(baseFile.getLocation().toString());
        index.add(mapping.getWorkDir(),file,newContent);
        index.write();
      }
 catch (      IOException e) {
        handle(new TeamException(UIText.CompareWithIndexAction_errorOnAddToIndex,e),UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
        return;
      }
    }
  }
;
  next.addContentChangeListener(listener);
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}",0.956584140653032
7866,"/** 
 * Create the selection buttons in the listComposite.
 * @param listComposite
 */
private void createSelectionButtons(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(UIText.WizardProjectsImportPage_selectAll);
  selectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(true);
        checkedItems.add(item.getData());
      }
      setPageComplete(true);
    }
  }
);
  Dialog.applyDialogFont(selectAll);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(UIText.WizardProjectsImportPage_deselectAll);
  deselectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(false);
      }
      projectsList.setInput(this);
      setPageComplete(false);
    }
  }
);
  Dialog.applyDialogFont(deselectAll);
  setButtonLayoutData(deselectAll);
}","/** 
 * Create the selection buttons in the listComposite.
 * @param listComposite
 */
private void createSelectionButtons(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(UIText.WizardProjectsImportPage_selectAll);
  selectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(true);
        checkedItems.add(item.getData());
      }
      setPageComplete(true);
    }
  }
);
  Dialog.applyDialogFont(selectAll);
  setButtonLayoutData(selectAll);
  deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(UIText.WizardProjectsImportPage_deselectAll);
  deselectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(false);
      }
      projectsList.setInput(this);
      setPageComplete(false);
    }
  }
);
  Dialog.applyDialogFont(deselectAll);
  setButtonLayoutData(deselectAll);
}",0.9952956989247312
7867,"/** 
 * Create the checkbox list for the found projects.
 * @param workArea
 */
private void createProjectsList(Composite workArea){
  checkedItems.clear();
  Label title=new Label(workArea,SWT.NONE);
  title.setText(UIText.WizardProjectsImportPage_ProjectsListTitle);
  Composite listComposite=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=0;
  layout.makeColumnsEqualWidth=false;
  listComposite.setLayout(layout);
  listComposite.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH));
  PatternFilter filter=new PatternFilter(){
    @Override public boolean isElementVisible(    Viewer viewer,    Object element){
      if (checkedItems.contains(element)) {
        return true;
      }
      return super.isElementVisible(viewer,element);
    }
  }
;
  FilteredTree filteredTree=new FilteredTree(listComposite,SWT.CHECK | SWT.BORDER,filter);
  filteredTree.setInitialText(UIText.WizardProjectsImportPage_filterText);
  projectsList=filteredTree.getViewer();
  GridData listData=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH);
  projectsList.getControl().setLayoutData(listData);
  projectsList.setContentProvider(new ITreeContentProvider(){
    public Object[] getChildren(    Object parentElement){
      return null;
    }
    public Object[] getElements(    Object inputElement){
      return getValidProjects();
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public Object getParent(    Object element){
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  projectsList.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (e.widget instanceof Tree) {
        TreeItem item=((Tree)e.widget).getItem(new Point(e.x,e.y));
        if (item != null) {
          if (item.getChecked())           checkedItems.add(item.getData());
 else           checkedItems.remove(item.getData());
          setPageComplete(!checkedItems.isEmpty());
        }
      }
    }
  }
);
  projectsList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        if (checkedItems.contains(item.getData()))         item.setChecked(true);
 else         item.setChecked(false);
      }
      return ((ProjectRecord)element).getProjectLabel();
    }
  }
);
  projectsList.setInput(this);
  projectsList.setComparator(new ViewerComparator());
  createSelectionButtons(listComposite);
}","/** 
 * Create the checkbox list for the found projects.
 * @param workArea
 */
private void createProjectsList(Composite workArea){
  checkedItems.clear();
  Label title=new Label(workArea,SWT.NONE);
  title.setText(UIText.WizardProjectsImportPage_ProjectsListTitle);
  Composite listComposite=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=0;
  layout.makeColumnsEqualWidth=false;
  listComposite.setLayout(layout);
  listComposite.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH));
  PatternFilter filter=new PatternFilter(){
    @Override public boolean isElementVisible(    Viewer viewer,    Object element){
      if (checkedItems.contains(element)) {
        return true;
      }
      return super.isElementVisible(viewer,element);
    }
    @Override public void setPattern(    String patternString){
      super.setPattern(patternString);
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          enableSelectAllButtons();
        }
      }
);
    }
  }
;
  FilteredTree filteredTree=new FilteredTree(listComposite,SWT.CHECK | SWT.BORDER,filter);
  filteredTree.setInitialText(UIText.WizardProjectsImportPage_filterText);
  projectsList=filteredTree.getViewer();
  GridData listData=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH);
  projectsList.getControl().setLayoutData(listData);
  projectsList.setContentProvider(new ITreeContentProvider(){
    public Object[] getChildren(    Object parentElement){
      return null;
    }
    public Object[] getElements(    Object inputElement){
      return getValidProjects();
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public Object getParent(    Object element){
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  projectsList.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (e.widget instanceof Tree) {
        TreeItem item=((Tree)e.widget).getItem(new Point(e.x,e.y));
        if (item != null) {
          if (item.getChecked())           checkedItems.add(item.getData());
 else           checkedItems.remove(item.getData());
          setPageComplete(!checkedItems.isEmpty());
        }
      }
    }
  }
);
  projectsList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        if (checkedItems.contains(item.getData()))         item.setChecked(true);
 else         item.setChecked(false);
      }
      return ((ProjectRecord)element).getProjectLabel();
    }
  }
);
  projectsList.setInput(this);
  projectsList.setComparator(new ViewerComparator());
  createSelectionButtons(listComposite);
}",0.9568874868559412
7868,"/** 
 * Update the list of projects based on path. This will not check any projects.
 * @param path
 */
void setProjectsList(final String path){
  if (path == null || path.length() == 0) {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
    selectedProjects=new ProjectRecord[0];
    projectsList.refresh(true);
    setPageComplete(checkedItems.size() > 0);
    lastPath=path;
    return;
  }
  final File directory=new File(path);
  long modified=directory.lastModified();
  if (path.equals(lastPath) && lastModified == modified) {
    return;
  }
  lastPath=path;
  lastModified=modified;
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(UIText.WizardProjectsImportPage_SearchingMessage,100);
        selectedProjects=new ProjectRecord[0];
        Collection<File> files=new ArrayList<File>();
        monitor.worked(10);
        if (directory.isDirectory()) {
          if (!collectProjectFilesFromDirectory(files,directory,null,monitor)) {
            return;
          }
          Iterator<File> filesIterator=files.iterator();
          selectedProjects=new ProjectRecord[files.size()];
          int index=0;
          monitor.worked(50);
          monitor.subTask(UIText.WizardProjectsImportPage_ProcessingMessage);
          while (filesIterator.hasNext()) {
            File file=filesIterator.next();
            selectedProjects[index]=new ProjectRecord(file);
            checkedItems.add(selectedProjects[index]);
            index++;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  projectsList.refresh(true);
  if (getValidProjects().length < selectedProjects.length) {
    setMessage(UIText.WizardProjectsImportPage_projectsInWorkspace,WARNING);
  }
 else {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
  }
  setPageComplete(checkedItems.size() > 0);
}","/** 
 * Update the list of projects based on path. This will not check any projects.
 * @param path
 */
void setProjectsList(final String path){
  if (path == null || path.length() == 0) {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
    selectedProjects=new ProjectRecord[0];
    projectsList.refresh(true);
    setPageComplete(checkedItems.size() > 0);
    lastPath=path;
    return;
  }
  final File directory=new File(path);
  long modified=directory.lastModified();
  if (path.equals(lastPath) && lastModified == modified) {
    return;
  }
  lastPath=path;
  lastModified=modified;
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(UIText.WizardProjectsImportPage_SearchingMessage,100);
        selectedProjects=new ProjectRecord[0];
        Collection<File> files=new ArrayList<File>();
        monitor.worked(10);
        if (directory.isDirectory()) {
          if (!collectProjectFilesFromDirectory(files,directory,null,monitor)) {
            return;
          }
          Iterator<File> filesIterator=files.iterator();
          selectedProjects=new ProjectRecord[files.size()];
          int index=0;
          monitor.worked(50);
          monitor.subTask(UIText.WizardProjectsImportPage_ProcessingMessage);
          while (filesIterator.hasNext()) {
            File file=filesIterator.next();
            selectedProjects[index]=new ProjectRecord(file);
            checkedItems.add(selectedProjects[index]);
            index++;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  projectsList.refresh(true);
  if (getValidProjects().length < selectedProjects.length) {
    setMessage(UIText.WizardProjectsImportPage_projectsInWorkspace,WARNING);
  }
 else {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
  }
  enableSelectAllButtons();
  setPageComplete(checkedItems.size() > 0);
}",0.9934609995329284
7869,"@Override public void setFocus(){
}","@Override public void setFocus(){
  tv.getTree().setFocus();
}",0.7216494845360825
7870,"/** 
 * Create the selection buttons in the listComposite.
 * @param listComposite
 */
private void createSelectionButtons(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Button selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(UIText.WizardProjectsImportPage_selectAll);
  selectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(true);
        checkedItems.add(item.getData());
      }
      setPageComplete(true);
    }
  }
);
  Dialog.applyDialogFont(selectAll);
  setButtonLayoutData(selectAll);
  Button deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(UIText.WizardProjectsImportPage_deselectAll);
  deselectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(false);
      }
      projectsList.setInput(this);
      setPageComplete(false);
    }
  }
);
  Dialog.applyDialogFont(deselectAll);
  setButtonLayoutData(deselectAll);
}","/** 
 * Create the selection buttons in the listComposite.
 * @param listComposite
 */
private void createSelectionButtons(Composite listComposite){
  Composite buttonsComposite=new Composite(listComposite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=0;
  layout.marginHeight=0;
  buttonsComposite.setLayout(layout);
  buttonsComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  selectAll=new Button(buttonsComposite,SWT.PUSH);
  selectAll.setText(UIText.WizardProjectsImportPage_selectAll);
  selectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(true);
        checkedItems.add(item.getData());
      }
      setPageComplete(true);
    }
  }
);
  Dialog.applyDialogFont(selectAll);
  setButtonLayoutData(selectAll);
  deselectAll=new Button(buttonsComposite,SWT.PUSH);
  deselectAll.setText(UIText.WizardProjectsImportPage_deselectAll);
  deselectAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkedItems.clear();
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        item.setChecked(false);
      }
      projectsList.setInput(this);
      setPageComplete(false);
    }
  }
);
  Dialog.applyDialogFont(deselectAll);
  setButtonLayoutData(deselectAll);
}",0.9952956989247312
7871,"/** 
 * Create the checkbox list for the found projects.
 * @param workArea
 */
private void createProjectsList(Composite workArea){
  checkedItems.clear();
  Label title=new Label(workArea,SWT.NONE);
  title.setText(UIText.WizardProjectsImportPage_ProjectsListTitle);
  Composite listComposite=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=0;
  layout.makeColumnsEqualWidth=false;
  listComposite.setLayout(layout);
  listComposite.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH));
  PatternFilter filter=new PatternFilter(){
    @Override public boolean isElementVisible(    Viewer viewer,    Object element){
      if (checkedItems.contains(element)) {
        return true;
      }
      return super.isElementVisible(viewer,element);
    }
  }
;
  FilteredTree filteredTree=new FilteredTree(listComposite,SWT.CHECK | SWT.BORDER,filter);
  filteredTree.setInitialText(UIText.WizardProjectsImportPage_filterText);
  projectsList=filteredTree.getViewer();
  GridData listData=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH);
  projectsList.getControl().setLayoutData(listData);
  projectsList.setContentProvider(new ITreeContentProvider(){
    public Object[] getChildren(    Object parentElement){
      return null;
    }
    public Object[] getElements(    Object inputElement){
      return getValidProjects();
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public Object getParent(    Object element){
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  projectsList.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (e.widget instanceof Tree) {
        TreeItem item=((Tree)e.widget).getItem(new Point(e.x,e.y));
        if (item != null) {
          if (item.getChecked())           checkedItems.add(item.getData());
 else           checkedItems.remove(item.getData());
          setPageComplete(!checkedItems.isEmpty());
        }
      }
    }
  }
);
  projectsList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        if (checkedItems.contains(item.getData()))         item.setChecked(true);
 else         item.setChecked(false);
      }
      return ((ProjectRecord)element).getProjectLabel();
    }
  }
);
  projectsList.setInput(this);
  projectsList.setComparator(new ViewerComparator());
  createSelectionButtons(listComposite);
}","/** 
 * Create the checkbox list for the found projects.
 * @param workArea
 */
private void createProjectsList(Composite workArea){
  checkedItems.clear();
  Label title=new Label(workArea,SWT.NONE);
  title.setText(UIText.WizardProjectsImportPage_ProjectsListTitle);
  Composite listComposite=new Composite(workArea,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginWidth=0;
  layout.makeColumnsEqualWidth=false;
  listComposite.setLayout(layout);
  listComposite.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH));
  PatternFilter filter=new PatternFilter(){
    @Override public boolean isElementVisible(    Viewer viewer,    Object element){
      if (checkedItems.contains(element)) {
        return true;
      }
      return super.isElementVisible(viewer,element);
    }
    @Override public void setPattern(    String patternString){
      super.setPattern(patternString);
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          enableSelectAllButtons();
        }
      }
);
    }
  }
;
  FilteredTree filteredTree=new FilteredTree(listComposite,SWT.CHECK | SWT.BORDER,filter);
  filteredTree.setInitialText(UIText.WizardProjectsImportPage_filterText);
  projectsList=filteredTree.getViewer();
  GridData listData=new GridData(GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.FILL_BOTH);
  projectsList.getControl().setLayoutData(listData);
  projectsList.setContentProvider(new ITreeContentProvider(){
    public Object[] getChildren(    Object parentElement){
      return null;
    }
    public Object[] getElements(    Object inputElement){
      return getValidProjects();
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public Object getParent(    Object element){
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  projectsList.getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      if (e.widget instanceof Tree) {
        TreeItem item=((Tree)e.widget).getItem(new Point(e.x,e.y));
        if (item != null) {
          if (item.getChecked())           checkedItems.add(item.getData());
 else           checkedItems.remove(item.getData());
          setPageComplete(!checkedItems.isEmpty());
        }
      }
    }
  }
);
  projectsList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      for (      final TreeItem item : projectsList.getTree().getItems()) {
        if (checkedItems.contains(item.getData()))         item.setChecked(true);
 else         item.setChecked(false);
      }
      return ((ProjectRecord)element).getProjectLabel();
    }
  }
);
  projectsList.setInput(this);
  projectsList.setComparator(new ViewerComparator());
  createSelectionButtons(listComposite);
}",0.9568874868559412
7872,"/** 
 * Update the list of projects based on path. This will not check any projects.
 * @param path
 */
void setProjectsList(final String path){
  if (path == null || path.length() == 0) {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
    selectedProjects=new ProjectRecord[0];
    projectsList.refresh(true);
    setPageComplete(checkedItems.size() > 0);
    lastPath=path;
    return;
  }
  final File directory=new File(path);
  long modified=directory.lastModified();
  if (path.equals(lastPath) && lastModified == modified) {
    return;
  }
  lastPath=path;
  lastModified=modified;
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(UIText.WizardProjectsImportPage_SearchingMessage,100);
        selectedProjects=new ProjectRecord[0];
        Collection<File> files=new ArrayList<File>();
        monitor.worked(10);
        if (directory.isDirectory()) {
          if (!collectProjectFilesFromDirectory(files,directory,null,monitor)) {
            return;
          }
          Iterator<File> filesIterator=files.iterator();
          selectedProjects=new ProjectRecord[files.size()];
          int index=0;
          monitor.worked(50);
          monitor.subTask(UIText.WizardProjectsImportPage_ProcessingMessage);
          while (filesIterator.hasNext()) {
            File file=filesIterator.next();
            selectedProjects[index]=new ProjectRecord(file);
            checkedItems.add(selectedProjects[index]);
            index++;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  projectsList.refresh(true);
  if (getValidProjects().length < selectedProjects.length) {
    setMessage(UIText.WizardProjectsImportPage_projectsInWorkspace,WARNING);
  }
 else {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
  }
  setPageComplete(checkedItems.size() > 0);
}","/** 
 * Update the list of projects based on path. This will not check any projects.
 * @param path
 */
void setProjectsList(final String path){
  if (path == null || path.length() == 0) {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
    selectedProjects=new ProjectRecord[0];
    projectsList.refresh(true);
    setPageComplete(checkedItems.size() > 0);
    lastPath=path;
    return;
  }
  final File directory=new File(path);
  long modified=directory.lastModified();
  if (path.equals(lastPath) && lastModified == modified) {
    return;
  }
  lastPath=path;
  lastModified=modified;
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        monitor.beginTask(UIText.WizardProjectsImportPage_SearchingMessage,100);
        selectedProjects=new ProjectRecord[0];
        Collection<File> files=new ArrayList<File>();
        monitor.worked(10);
        if (directory.isDirectory()) {
          if (!collectProjectFilesFromDirectory(files,directory,null,monitor)) {
            return;
          }
          Iterator<File> filesIterator=files.iterator();
          selectedProjects=new ProjectRecord[files.size()];
          int index=0;
          monitor.worked(50);
          monitor.subTask(UIText.WizardProjectsImportPage_ProcessingMessage);
          while (filesIterator.hasNext()) {
            File file=filesIterator.next();
            selectedProjects[index]=new ProjectRecord(file);
            checkedItems.add(selectedProjects[index]);
            index++;
          }
        }
 else {
          monitor.worked(60);
        }
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    IDEWorkbenchPlugin.log(e.getMessage(),e);
  }
catch (  InterruptedException e) {
  }
  projectsList.refresh(true);
  if (getValidProjects().length < selectedProjects.length) {
    setMessage(UIText.WizardProjectsImportPage_projectsInWorkspace,WARNING);
  }
 else {
    setMessage(UIText.WizardProjectsImportPage_ImportProjectsDescription);
  }
  enableSelectAllButtons();
  setPageComplete(checkedItems.size() > 0);
}",0.9934609995329284
7873,"public void run(){
  handle(e,UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
}","public void run(){
  handle(new TeamException(e.getStatus()),UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
}",0.8847583643122676
7874,"@Override public void execute(IAction action) throws InvocationTargetException {
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canCheckout()) {
    MessageDialog.openError(getShell(),UIText.BranchAction_cannotCheckout,NLS.bind(UIText.BranchAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog dialog=new BranchSelectionDialog(getShell(),repository);
  dialog.setShowResetType(false);
  if (dialog.open() != IDialogConstants.OK_ID) {
    return;
  }
  final String refName=dialog.getRefName();
  try {
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          new BranchOperation(repository,refName).run(monitor);
          GitLightweightDecorator.refresh();
        }
 catch (        final CoreException e) {
          if (GitTraceLocation.UI.isActive())           GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              handle(e,UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
            }
          }
);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
  }
catch (  InterruptedException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
  }
}","@Override public void execute(IAction action) throws InvocationTargetException, InterruptedException {
  final Repository repository=getRepository(true);
  if (repository == null)   return;
  if (!repository.getRepositoryState().canCheckout()) {
    MessageDialog.openError(getShell(),UIText.BranchAction_cannotCheckout,NLS.bind(UIText.BranchAction_repositoryState,repository.getRepositoryState().getDescription()));
    return;
  }
  BranchSelectionDialog dialog=new BranchSelectionDialog(getShell(),repository);
  dialog.setShowResetType(false);
  if (dialog.open() != IDialogConstants.OK_ID) {
    return;
  }
  final String refName=dialog.getRefName();
  try {
    getTargetPart().getSite().getWorkbenchWindow().run(true,false,new IRunnableWithProgress(){
      public void run(      final IProgressMonitor monitor) throws InvocationTargetException {
        try {
          new BranchOperation(repository,refName).run(monitor);
          GitLightweightDecorator.refresh();
        }
 catch (        final CoreException e) {
          if (GitTraceLocation.UI.isActive())           GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              handle(new TeamException(e.getStatus()),UIText.BranchAction_errorSwitchingBranches,UIText.BranchAction_unableToSwitchBranches);
            }
          }
);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
    throw e;
  }
catch (  InterruptedException e) {
    if (GitTraceLocation.UI.isActive())     GitTraceLocation.getTrace().trace(GitTraceLocation.UI.getLocation(),e.getMessage(),e);
    throw new InvocationTargetException(e);
  }
}",0.9690778575372724
7875,"@Override public void execute(IAction act){
  resetState();
  try {
    buildIndexHeadDiffList();
  }
 catch (  IOException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorComputingDiffs);
    return;
  }
  Repository[] repos=getRepositoriesFor(getProjectsForSelectedResources());
  Repository repository=null;
  amendAllowed=repos.length == 1;
  for (  Repository repo : repos) {
    repository=repo;
    if (!repo.getRepositoryState().canCommit()) {
      MessageDialog.openError(getTargetPart().getSite().getShell(),UIText.CommitAction_cannotCommit,NLS.bind(UIText.CommitAction_repositoryState,repo.getRepositoryState().getDescription()));
      return;
    }
  }
  loadPreviousCommit();
  if (files.isEmpty()) {
    if (amendAllowed && previousCommit != null) {
      boolean result=MessageDialog.openQuestion(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendCommit);
      if (!result)       return;
      amending=true;
    }
 else {
      MessageDialog.openWarning(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendNotPossible);
      return;
    }
  }
  String author=null;
  String committer=null;
  if (repository != null) {
    final RepositoryConfig config=repository.getConfig();
    author=config.getAuthorName();
    final String authorEmail=config.getAuthorEmail();
    author=author + ""String_Node_Str"" + authorEmail+ ""String_Node_Str"";
    committer=config.getCommitterName();
    final String committerEmail=config.getCommitterEmail();
    committer=committer + ""String_Node_Str"" + committerEmail+ ""String_Node_Str"";
  }
  CommitDialog commitDialog=new CommitDialog(getTargetPart().getSite().getShell());
  commitDialog.setAmending(amending);
  commitDialog.setAmendAllowed(amendAllowed);
  commitDialog.setFileList(files);
  commitDialog.setAuthor(author);
  commitDialog.setCommitter(committer);
  if (previousCommit != null) {
    commitDialog.setPreviousCommitMessage(previousCommit.getMessage());
    PersonIdent previousAuthor=previousCommit.getAuthor();
    commitDialog.setPreviousAuthor(previousAuthor.getName() + ""String_Node_Str"" + previousAuthor.getEmailAddress()+ ""String_Node_Str"");
  }
  if (commitDialog.open() != IDialogConstants.OK_ID)   return;
  String commitMessage=commitDialog.getCommitMessage();
  amending=commitDialog.isAmending();
  try {
    performCommit(commitDialog,commitMessage);
  }
 catch (  TeamException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorOnCommit);
  }
}","@Override public void execute(IAction act){
  resetState();
  try {
    buildIndexHeadDiffList();
  }
 catch (  IOException e) {
    handle(new TeamException(UIText.CommitAction_errorComputingDiffs,e),UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorComputingDiffs);
    return;
  }
  Repository[] repos=getRepositoriesFor(getProjectsForSelectedResources());
  Repository repository=null;
  amendAllowed=repos.length == 1;
  for (  Repository repo : repos) {
    repository=repo;
    if (!repo.getRepositoryState().canCommit()) {
      MessageDialog.openError(getTargetPart().getSite().getShell(),UIText.CommitAction_cannotCommit,NLS.bind(UIText.CommitAction_repositoryState,repo.getRepositoryState().getDescription()));
      return;
    }
  }
  loadPreviousCommit();
  if (files.isEmpty()) {
    if (amendAllowed && previousCommit != null) {
      boolean result=MessageDialog.openQuestion(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendCommit);
      if (!result)       return;
      amending=true;
    }
 else {
      MessageDialog.openWarning(getTargetPart().getSite().getShell(),UIText.CommitAction_noFilesToCommit,UIText.CommitAction_amendNotPossible);
      return;
    }
  }
  String author=null;
  String committer=null;
  if (repository != null) {
    final RepositoryConfig config=repository.getConfig();
    author=config.getAuthorName();
    final String authorEmail=config.getAuthorEmail();
    author=author + ""String_Node_Str"" + authorEmail+ ""String_Node_Str"";
    committer=config.getCommitterName();
    final String committerEmail=config.getCommitterEmail();
    committer=committer + ""String_Node_Str"" + committerEmail+ ""String_Node_Str"";
  }
  CommitDialog commitDialog=new CommitDialog(getTargetPart().getSite().getShell());
  commitDialog.setAmending(amending);
  commitDialog.setAmendAllowed(amendAllowed);
  commitDialog.setFileList(files);
  commitDialog.setAuthor(author);
  commitDialog.setCommitter(committer);
  if (previousCommit != null) {
    commitDialog.setPreviousCommitMessage(previousCommit.getMessage());
    PersonIdent previousAuthor=previousCommit.getAuthor();
    commitDialog.setPreviousAuthor(previousAuthor.getName() + ""String_Node_Str"" + previousAuthor.getEmailAddress()+ ""String_Node_Str"");
  }
  if (commitDialog.open() != IDialogConstants.OK_ID)   return;
  String commitMessage=commitDialog.getCommitMessage();
  amending=commitDialog.isAmending();
  try {
    performCommit(commitDialog,commitMessage);
  }
 catch (  TeamException e) {
    handle(e,UIText.CommitAction_errorDuringCommit,UIText.CommitAction_errorOnCommit);
  }
}",0.9690373428410584
7876,"public void contentChanged(IContentChangeNotifier source){
  final byte[] newContent=next.getModifiedContent();
  try {
    final GitIndex index=repository.getIndex();
    final File file=new File(baseFile.getLocation().toString());
    index.add(mapping.getWorkDir(),file,newContent);
    index.write();
  }
 catch (  IOException e) {
    Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
    return;
  }
}","public void contentChanged(IContentChangeNotifier source){
  final byte[] newContent=next.getModifiedContent();
  try {
    final GitIndex index=repository.getIndex();
    final File file=new File(baseFile.getLocation().toString());
    index.add(mapping.getWorkDir(),file,newContent);
    index.write();
  }
 catch (  IOException e) {
    handle(new TeamException(UIText.CompareWithIndexAction_errorOnAddToIndex,e),UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
    return;
  }
}",0.8801534036433365
7877,"@Override public void execute(IAction action){
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  final EditableRevision next=new EditableRevision(nextFile);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      try {
        final GitIndex index=repository.getIndex();
        final File file=new File(baseFile.getLocation().toString());
        index.add(mapping.getWorkDir(),file,newContent);
        index.write();
      }
 catch (      IOException e) {
        Utils.handleError(getTargetPart().getSite().getShell(),e,UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
        return;
      }
    }
  }
;
  next.addContentChangeListener(listener);
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}","@Override public void execute(IAction action){
  final IResource resource=getSelectedResources()[0];
  final RepositoryMapping mapping=RepositoryMapping.getMapping(resource.getProject());
  final Repository repository=mapping.getRepository();
  final String gitPath=mapping.getRepoRelativePath(resource);
  final IFileRevision nextFile=GitFileRevision.inIndex(repository,gitPath);
  final IFile baseFile=(IFile)resource;
  final ITypedElement base=SaveableCompareEditorInput.createFileElement(baseFile);
  final EditableRevision next=new EditableRevision(nextFile);
  IContentChangeListener listener=new IContentChangeListener(){
    public void contentChanged(    IContentChangeNotifier source){
      final byte[] newContent=next.getModifiedContent();
      try {
        final GitIndex index=repository.getIndex();
        final File file=new File(baseFile.getLocation().toString());
        index.add(mapping.getWorkDir(),file,newContent);
        index.write();
      }
 catch (      IOException e) {
        handle(new TeamException(UIText.CompareWithIndexAction_errorOnAddToIndex,e),UIText.CompareWithIndexAction_errorOnAddToIndex,UIText.CompareWithIndexAction_errorOnAddToIndex);
        return;
      }
    }
  }
;
  next.addContentChangeListener(listener);
  final GitCompareFileRevisionEditorInput in=new GitCompareFileRevisionEditorInput(base,next,null);
  CompareUI.openCompareEditor(in);
}",0.956584140653032
7878,"public void run(IProgressMonitor arg0) throws InvocationTargetException, InterruptedException {
  try {
    op.run(arg0);
  }
 catch (  CoreException e) {
    MessageDialog.openError(getShell(),""String_Node_Str"",e.getMessage());
  }
}","public void run(IProgressMonitor arg0) throws InvocationTargetException, InterruptedException {
  try {
    op.run(arg0);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.7671232876712328
7879,"@Override public CoordinatesMonitor mouseCoordinatesMonitor(){
  return new CoordinatesMonitor(){
    @Override protected float readY(){
      return (float)mouseInput.getPosition().getX();
    }
    @Override protected float readX(){
      return (float)mouseInput.getPosition().getY();
    }
  }
;
}","@Override public CoordinatesMonitor mouseCoordinatesMonitor(){
  return new CoordinatesMonitor(){
    @Override protected float readY(){
      return (float)mouseInput.getPosition().getY();
    }
    @Override protected float readX(){
      return (float)mouseInput.getPosition().getX();
    }
  }
;
}",0.9933554817275748
7880,"public ClosureProperty(PropertiesHolder propertiesHolder,Closure closure){
  this.closure=closure;
  closure.setProperty(""String_Node_Str"",propertiesHolder);
}","public ClosureProperty(final PropertiesHolder propertiesHolder,Closure closure){
  this.closure=closure;
  closure.setDelegate(new Object(){
    public PropertiesHolder getEntity(){
      return propertiesHolder;
    }
  }
);
  closure.setResolveStrategy(Closure.DELEGATE_FIRST);
}",0.5954545454545455
7881,"public ConnectionImpl(ConnectionHandler handler,TradeHandler tradeHandler,String host,int port){
  this.host=host;
  this.port=port;
  this.handler=handler;
  connection=new EClientSocket(this.handler);
  this.handler.setHandler(tradeHandler);
}","public ConnectionImpl(ConnectionHandler handler,String host,int port){
  this.host=host;
  this.port=port;
  this.handler=handler;
  connection=new EClientSocket(this.handler);
}",0.8416075650118203
7882,"@Override public void historicalData(int reqId,String date,double open,double high,double low,double close,int volume,int count,double wap,boolean hasGaps){
  handler.handleHistoricalData(reqId,new MarketData(date,open,high,low,close,volume,count,wap,hasGaps));
}","@Override public void historicalData(int reqId,String date,double open,double high,double low,double close,int volume,int count,double wap,boolean hasGaps){
  for (  TradeHandler handler : handlers) {
    handler.handleHistoricalData(reqId,new MarketData(date,open,high,low,close,volume,count,wap,hasGaps));
  }
}",0.9131944444444444
7883,"@Override public void error(int i,int i1,String s){
  logger.log(Level.SEVERE,""String_Node_Str"" + i + ""String_Node_Str""+ i1+ ""String_Node_Str""+ s);
  handler.handleError(i,i1,s);
}","@Override public void error(int i,int i1,String s){
  logger.log(Level.SEVERE,""String_Node_Str"" + i + ""String_Node_Str""+ i1+ ""String_Node_Str""+ s);
  for (  TradeHandler handler : handlers) {
    handler.handleError(i,i1,s);
  }
}",0.8780487804878049
7884,"@Override public void updateMktDepthL2(int requestId,int rowId,String marketMaker,int operation,int side,double price,int size){
  handler.updateDepth(requestId,new DepthMarketData(Side.valueOf(side),Operation.valueOf(operation),rowId,price,size,marketMaker));
}","@Override public void updateMktDepthL2(int requestId,int rowId,String marketMaker,int operation,int side,double price,int size){
  for (  TradeHandler handler : handlers) {
    handler.updateDepth(requestId,new DepthMarketData(Side.valueOf(side),Operation.valueOf(operation),rowId,price,size,marketMaker));
  }
}",0.9128919860627178
7885,"@Override public void contractDetails(int requestId,ContractDetails contractDetails){
  handler.contractDetails(requestId,contractDetails);
}","@Override public void contractDetails(int requestId,ContractDetails contractDetails){
  for (  TradeHandler handler : handlers) {
    handler.contractDetails(requestId,contractDetails);
  }
}",0.8493975903614458
7886,"@Override public void contractDetailsEnd(int requestId){
  handler.contractDetailsEnd(requestId);
}","@Override public void contractDetailsEnd(int requestId){
  for (  TradeHandler handler : handlers) {
    handler.contractDetailsEnd(requestId);
  }
}",0.7983870967741935
7887,"@Override public void updateMktDepth(int requestId,int rowId,int operation,int side,double price,int size){
  handler.updateDepth(requestId,new DepthMarketData(Side.valueOf(side),Operation.valueOf(operation),rowId,price,size,null));
}","@Override public void updateMktDepth(int requestId,int rowId,int operation,int side,double price,int size){
  for (  TradeHandler handler : handlers) {
    handler.updateDepth(requestId,new DepthMarketData(Side.valueOf(side),Operation.valueOf(operation),rowId,price,size,null));
  }
}",0.9034749034749034
7888,"public BaseStrategy(RequestIdGenerator requestIdGenerator,ConnectionFactory connectionFactory){
  this.requestIdGenerator=requestIdGenerator;
  this.connectionFactory=connectionFactory;
  ;
}","public BaseStrategy(RequestIdGenerator requestIdGenerator,ConnectionFactory connectionFactory){
  this.requestIdGenerator=requestIdGenerator;
  this.connectionFactory=connectionFactory;
}",0.9894179894179894
7889,"public void setControlValue(int index,int value){
  if (index < controls.length)   controls[index].setValue((value / MAX_VALUE) * (controls[index].getMaximum() - controls[index].getMinimum()) + controls[index].getMinimum());
}","public void setControlValue(int index,int value){
  if (index < controls.length)   controls[index].setValue((value / MAX_FLOAT_VALUE) * (controls[index].getMaximum() - controls[index].getMinimum()) + controls[index].getMinimum());
}",0.9868995633187772
7890,"public int getControlValue(int index){
  if (index < controls.length)   return (int)((controls[index].getValue() - controls[index].getMinimum()) / (controls[index].getMaximum() - controls[index].getMinimum()) * MAX_VALUE);
  return 0;
}","public int getControlValue(int index){
  if (index < controls.length)   return (int)((controls[index].getValue() - controls[index].getMinimum()) / (controls[index].getMaximum() - controls[index].getMinimum()) * MAX_FLOAT_VALUE);
  return 0;
}",0.98744769874477
7891,"public void openLine(float sampleRate,int buffersize) throws Exception {
  AudioFormat format=getAudioFormat(sampleRate);
  System.out.println(""String_Node_Str"" + format);
  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
  line=(SourceDataLine)AudioSystem.getLine(info);
  line.open(format,buffersize);
  AudioFormat[] formats=info.getFormats();
  for (int k=0; k < formats.length; ++k)   System.out.println(""String_Node_Str"" + formats[k]);
  List list=new ArrayList();
  Control[] cs=line.getControls();
  for (int i=0; i < cs.length; ++i) {
    System.out.println(""String_Node_Str"" + cs[i].getType());
    if (cs[i] instanceof FloatControl)     list.add(cs[i]);
  }
  controls=new FloatControl[list.size()];
  list.toArray(controls);
  Mixer.Info[] minfos=AudioSystem.getMixerInfo();
  for (int i=0; i < minfos.length; ++i) {
    System.out.println(""String_Node_Str"" + minfos[i]);
    Mixer mixer=AudioSystem.getMixer(minfos[i]);
    Line.Info[] linfos=mixer.getSourceLineInfo();
    for (int j=0; j < linfos.length; ++j) {
      System.out.println(""String_Node_Str"" + linfos[j]);
      if (linfos[j] instanceof DataLine.Info) {
        info=(DataLine.Info)linfos[i];
        formats=info.getFormats();
        for (int k=0; k < formats.length; ++k)         System.out.println(""String_Node_Str"" + formats[k]);
      }
    }
  }
  line.start();
}","public void openLine(float sampleRate,int buffersize) throws Exception {
  AudioFormat format=getAudioFormat(sampleRate);
  System.out.println(""String_Node_Str"" + format);
  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
  line=(SourceDataLine)AudioSystem.getLine(info);
  line.open(format,buffersize);
  List list=new ArrayList();
  Control[] cs=line.getControls();
  for (int i=0; i < cs.length; ++i) {
    System.out.println(""String_Node_Str"" + cs[i].getType());
    if (cs[i] instanceof FloatControl)     list.add(cs[i]);
  }
  controls=new FloatControl[list.size()];
  list.toArray(controls);
  line.start();
  dump();
}",0.5457256461232605
7892,"public void setSampleRate(int samplerate){
  samplerateControl.setValue(((float)samplerate) * (samplerateControl.getMaximum() - samplerateControl.getMinimum()) / 127.0f + samplerateControl.getMinimum());
}","public void setSampleRate(int samplerate){
  samplerateControl.setValue(((float)samplerate) * (samplerateControl.getMaximum() - samplerateControl.getMinimum()) / 127.0f + samplerateControl.getMinimum());
  System.out.println(""String_Node_Str"" + samplerateControl.getValue());
}",0.8506224066390041
7893,"public static void main(String[] args) throws Exception {
  int samples=512;
  int width=512;
  int height=200;
  Box content=Box.createVerticalBox();
  Dimension dim=new Dimension(width,height);
  HarmonicOscillator osc=new HarmonicOscillator(samples);
  HarmonicOscillatorControlPanel control=new HarmonicOscillatorControlPanel(osc);
  control.setPreferredSize(dim);
  control.setMinimumSize(dim);
  OscillatorPanel panel=new OscillatorPanel(width,height);
  content.add(control);
  content.add(panel);
  Box controls=Box.createHorizontalBox();
  content.add(controls);
  final AudioOutput output=new AudioOutput(samples);
  JSlider slider=new JSlider(JSlider.VERTICAL,0,127,63);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      JSlider source=(JSlider)event.getSource();
      int value=(int)source.getValue();
      output.setSampleRate(value);
    }
  }
);
  controls.add(slider);
  slider=new JSlider(JSlider.VERTICAL,0,255,100);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      JSlider source=(JSlider)event.getSource();
      double value=(double)source.getValue();
      output.setScale(value);
    }
  }
);
  controls.add(slider);
  JFrame frame=new JFrame(""String_Node_Str"");
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setSize(width,height * 3 + 60);
  frame.setContentPane(content);
  frame.setVisible(true);
  for (int i=0; ; ++i) {
    double[] values=osc.calculate();
    panel.setData(values);
    output.write(values);
    osc.increment();
  }
}","public static void main(String[] args) throws Exception {
  int samples=512;
  int width=512;
  int height=200;
  Box content=Box.createVerticalBox();
  Dimension dim=new Dimension(width,height);
  final HarmonicOscillator osc=new HarmonicOscillator(samples);
  HarmonicOscillatorControlPanel control=new HarmonicOscillatorControlPanel(osc);
  control.setPreferredSize(dim);
  control.setMinimumSize(dim);
  OscillatorPanel panel=new OscillatorPanel(width,height);
  content.add(control);
  content.add(panel);
  Box controls=Box.createHorizontalBox();
  content.add(controls);
  final AudioOutput output=new AudioOutput(samples);
  JSlider slider=new JSlider(JSlider.VERTICAL,0,127,63);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      JSlider source=(JSlider)event.getSource();
      int value=(int)source.getValue();
      output.setSampleRate(value);
    }
  }
);
  controls.add(slider);
  slider=new JSlider(JSlider.VERTICAL,0,255,100);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      JSlider source=(JSlider)event.getSource();
      double value=(double)source.getValue();
      output.setScale(value);
    }
  }
);
  controls.add(slider);
  slider=new JSlider(JSlider.VERTICAL,0,180,30);
  slider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent event){
      JSlider source=(JSlider)event.getSource();
      int value=(int)source.getValue();
      osc.setTimeDelta(0.001 * value);
    }
  }
);
  controls.add(slider);
  JFrame frame=new JFrame(""String_Node_Str"");
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setSize(width,height * 3 + 60);
  frame.setContentPane(content);
  frame.setVisible(true);
  for (; ; ) {
    double[] values=osc.calculate();
    panel.setData(values);
    output.write(values);
    osc.increment();
  }
}",0.9032441661923734
7894,"public AudioOutput(int samples) throws Exception {
  float sampleRate=16000.0f;
  AudioFormat format=new AudioFormat(sampleRate,8,1,true,true);
  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
  line=(SourceDataLine)AudioSystem.getLine(info);
  line.open(format,samples * 10);
  samplerateControl=(FloatControl)line.getControl(FloatControl.Type.SAMPLE_RATE);
  line.start();
  databuffer=new byte[samples];
}","public AudioOutput(int samples) throws Exception {
  float sampleRate=44100.0f;
  AudioFormat format=new AudioFormat(sampleRate,8,1,true,true);
  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
  line=(SourceDataLine)AudioSystem.getLine(info);
  line.open(format,samples * 10);
  samplerateControl=(FloatControl)line.getControl(FloatControl.Type.SAMPLE_RATE);
  line.start();
  databuffer=new byte[samples];
}",0.9953271028037384
7895,"public void updateControlValues(){
  double arySum;
  double aryFact;
  for (int i=0; i < controlvalues.length; ++i) {
    if (controlvalues[i] >= 99)     rawCn[i]=0;
 else     rawCn[i]=(double)(100 - controlvalues[i] / 100);
  }
  normalizeAmplitudes();
}","public void updateControlValues(){
  double arySum;
  double aryFact;
  for (int i=0; i < controlvalues.length; ++i) {
    if (controlvalues[i] == 100)     rawCn[i]=0;
 else     rawCn[i]=(double)(100 - controlvalues[i]) / 100;
  }
  normalizeAmplitudes();
}",0.9746588693957114
7896,"public void stateChanged(ChangeEvent event){
  JSlider source=(JSlider)event.getSource();
  double value=(double)source.getValue();
  output.setScale(value);
}","public void stateChanged(ChangeEvent event){
  JSlider source=(JSlider)event.getSource();
  int value=(int)source.getValue();
  osc.setTimeDelta(0.001 * value);
}",0.8598130841121495
7897,"public void updateControlValues(){
  double arySum;
  double aryFact;
  for (int i=0; i < controlvalues.length; ++i) {
    if (controlvalues[i] <= 100)     rawCn[i]=0;
 else     rawCn[i]=100.0d - (double)controlvalues[i] / 100.0d;
  }
  normalize();
}","public void updateControlValues(){
  double arySum;
  double aryFact;
  for (int i=0; i < controlvalues.length; ++i) {
    if (controlvalues[i] == 99)     rawCn[i]=0;
 else     rawCn[i]=(double)(100 - controlvalues[i] / 100);
  }
  normalizeAmplitudes();
}",0.9112426035502958
7898,"public double[] calculate(){
  int x, y, sx, sy;
  PSI(t,0,0);
  x=0;
  y=(int)(wtx);
  values=new double[samples];
  values[0]=wtx;
  for (int i=1; i < samples; ++i) {
    sx=x;
    sy=y;
    PSI(t,(i) / HalfSize - HALFd,i);
    x=i;
    y=(int)(wtx);
    values[i]=wtx;
  }
  return values;
}","public double[] calculate(){
  PSI(t,0,0);
  values=new double[samples];
  values[0]=wtx;
  for (int i=1; i < samples; ++i) {
    PSI(t,(i) / HalfSize - HALFd,i);
    values[i]=wtx;
  }
  return values;
}",0.8192771084337349
7899,"public void setSingleState(int Nvalue){
  System.out.println(""String_Node_Str"" + Nvalue);
  double arySum;
  double aryFact;
  for (int i=0; i < controls; ++i) {
    rawCn[i]=0.0;
    aryCn[i]=0.0;
  }
  rawCn[Nvalue]=1.0;
  normalize();
  for (int i=0; i < controlvalues.length; ++i) {
    rawCn[i]=100.0d * aryCn[i];
    controlvalues[i]=100 - (int)rawCn[i];
  }
}","public void setSingleState(int Nvalue){
  System.out.println(""String_Node_Str"" + Nvalue);
  double arySum;
  double aryFact;
  for (int i=0; i < controls; ++i)   rawCn[i]=0.0;
  rawCn[Nvalue]=1.0;
  for (int i=0; i < Nstate; ++i)   aryCn[i]=0.0;
  normalizeAmplitudes();
  for (int i=0; i < controls; ++i) {
    rawCn[i]=100.0d * aryCn[i];
    controlvalues[i]=100 - (int)rawCn[i];
  }
}",0.4833997343957503
7900,"public void setGlauberState(int Nvalue){
  System.out.println(""String_Node_Str"" + Nvalue);
  energyControl=Nvalue;
  double arySum;
  double aryFact;
  double Xx;
  double Xx2;
  AverageEnerg=EnergyConstant + 0.0001 + (10.0 - 0.1 * (double)Nvalue);
  Xx=Math.sqrt(AverageEnerg - EnergyConstant);
  for (int ist=0; ist < Nstate; ist++) {
    Xx2=0.5 * Math.pow(Xx,2);
    aryCn[ist]=Math.pow(Xx,ist) / Math.sqrt(nfact[ist]) * Math.exp(-Xx2);
  }
  for (int i=0; i < controls; i++)   rawCn[i]=aryCn[i];
  for (int i=0; i < controls; ++i) {
    rawCn[i]=100 * aryCn[i];
    controlvalues[i]=100 - (int)rawCn[i];
  }
}","public void setGlauberState(int Nvalue){
  System.out.println(""String_Node_Str"" + Nvalue);
  energyControl=Nvalue;
  double arySum;
  double aryFact;
  double Xx;
  double Xx2;
  AverageEnerg=EnergyConstant + 0.0001 + (10.0 - 0.1 * (double)Nvalue);
  Xx=Math.sqrt(AverageEnerg - EnergyConstant);
  for (int i=0; i < Nstate; ++i) {
    Xx2=0.5d * Math.pow(Xx,2);
    aryCn[i]=Math.pow(Xx,i) / Math.sqrt(nfact[i]) * Math.exp(-Xx2);
  }
  for (int i=0; i < controls; i++)   rawCn[i]=aryCn[i];
  for (int i=0; i < controls; ++i) {
    rawCn[i]=100 * aryCn[i];
    controlvalues[i]=100 - (int)rawCn[i];
  }
}",0.9761709120788824
7901,"public void run(){
  while (enabled) {
    try {
      Set<Entry<Player,Long>> set=timeStamp.entrySet();
synchronized (sync) {
        Iterator<Entry<Player,Long>> it=set.iterator();
        while (it.hasNext()) {
          Entry<Player,Long> next=it.next();
          if ((System.currentTimeMillis() - timedelay) > next.getValue()) {
            Player reciever=playerMap.remove(next.getKey());
            Player sender=recieverPlayerMap.remove(reciever);
            it.remove();
            if (sender != null && reciever != null && sender.isOnline() && reciever.isOnline()) {
              ItemStack item=sender.getInventory().getItemInHand();
              if (item.getTypeId() == itemId && item.getAmount() >= amountRequired) {
                item.setAmount(item.getAmount() - amountRequired);
                if (item.getAmount() <= 0) {
                  sender.getInventory().remove(item);
                }
                if (reciever.getHealth() + healamount > maxhealth)                 reciever.setHealth(maxhealth);
 else                 reciever.setHealth(healamount + reciever.getHealth());
                if (reciever.equals(sender)) {
                  sender.sendMessage(""String_Node_Str"");
                }
 else {
                  sender.sendMessage(""String_Node_Str"" + reciever.getName());
                  reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                }
              }
 else {
                sender.sendMessage(""String_Node_Str"");
                if (!reciever.equals(sender))                 reciever.sendMessage(sender.getName() + ""String_Node_Str"");
              }
            }
          }
        }
      }
      Thread.sleep(1000);
    }
 catch (    Exception ex) {
    }
  }
}","public void run(){
  while (enabled) {
    try {
      Set<Entry<Player,Long>> set=timeStamp.entrySet();
synchronized (sync) {
        Iterator<Entry<Player,Long>> it=set.iterator();
        while (it.hasNext()) {
          Entry<Player,Long> next=it.next();
          if ((System.currentTimeMillis() - timedelay) > next.getValue()) {
            Player reciever=playerMap.remove(next.getKey());
            Player sender=recieverPlayerMap.remove(reciever);
            it.remove();
            if (sender != null && reciever != null && sender.isOnline() && reciever.isOnline()) {
              ItemStack item=sender.getInventory().getItemInHand();
              if (item.getTypeId() == itemId && item.getAmount() >= amountRequired) {
                if (item.getAmount() == amountRequired) {
                  sender.getInventory().remove(item);
                }
 else {
                  item.setAmount(item.getAmount() - amountRequired);
                }
                if (reciever.getHealth() + healamount > maxhealth)                 reciever.setHealth(maxhealth);
 else                 reciever.setHealth(healamount + reciever.getHealth());
                if (reciever.equals(sender)) {
                  sender.sendMessage(""String_Node_Str"");
                }
 else {
                  sender.sendMessage(""String_Node_Str"" + reciever.getName());
                  reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                }
              }
 else {
                sender.sendMessage(""String_Node_Str"");
                if (!reciever.equals(sender))                 reciever.sendMessage(sender.getName() + ""String_Node_Str"");
              }
            }
          }
        }
      }
      Thread.sleep(1000);
    }
 catch (    Exception ex) {
    }
  }
}",0.9261251061420888
7902,"public void startThread(){
  enabled=true;
  runThread=new Thread(new Runnable(){
    public void run(){
      while (enabled) {
        try {
          Set<Entry<Player,Long>> set=timeStamp.entrySet();
synchronized (sync) {
            Iterator<Entry<Player,Long>> it=set.iterator();
            while (it.hasNext()) {
              Entry<Player,Long> next=it.next();
              if ((System.currentTimeMillis() - timedelay) > next.getValue()) {
                Player reciever=playerMap.remove(next.getKey());
                Player sender=recieverPlayerMap.remove(reciever);
                it.remove();
                if (sender != null && reciever != null && sender.isOnline() && reciever.isOnline()) {
                  ItemStack item=sender.getInventory().getItemInHand();
                  if (item.getTypeId() == itemId && item.getAmount() >= amountRequired) {
                    item.setAmount(item.getAmount() - amountRequired);
                    if (item.getAmount() <= 0) {
                      sender.getInventory().remove(item);
                    }
                    if (reciever.getHealth() + healamount > maxhealth)                     reciever.setHealth(maxhealth);
 else                     reciever.setHealth(healamount + reciever.getHealth());
                    if (reciever.equals(sender)) {
                      sender.sendMessage(""String_Node_Str"");
                    }
 else {
                      sender.sendMessage(""String_Node_Str"" + reciever.getName());
                      reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                    }
                  }
 else {
                    sender.sendMessage(""String_Node_Str"");
                    if (!reciever.equals(sender))                     reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                  }
                }
              }
            }
          }
          Thread.sleep(1000);
        }
 catch (        Exception ex) {
        }
      }
    }
  }
);
  runThread.start();
}","public void startThread(){
  enabled=true;
  runThread=new Thread(new Runnable(){
    public void run(){
      while (enabled) {
        try {
          Set<Entry<Player,Long>> set=timeStamp.entrySet();
synchronized (sync) {
            Iterator<Entry<Player,Long>> it=set.iterator();
            while (it.hasNext()) {
              Entry<Player,Long> next=it.next();
              if ((System.currentTimeMillis() - timedelay) > next.getValue()) {
                Player reciever=playerMap.remove(next.getKey());
                Player sender=recieverPlayerMap.remove(reciever);
                it.remove();
                if (sender != null && reciever != null && sender.isOnline() && reciever.isOnline()) {
                  ItemStack item=sender.getInventory().getItemInHand();
                  if (item.getTypeId() == itemId && item.getAmount() >= amountRequired) {
                    if (item.getAmount() == amountRequired) {
                      sender.getInventory().remove(item);
                    }
 else {
                      item.setAmount(item.getAmount() - amountRequired);
                    }
                    if (reciever.getHealth() + healamount > maxhealth)                     reciever.setHealth(maxhealth);
 else                     reciever.setHealth(healamount + reciever.getHealth());
                    if (reciever.equals(sender)) {
                      sender.sendMessage(""String_Node_Str"");
                    }
 else {
                      sender.sendMessage(""String_Node_Str"" + reciever.getName());
                      reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                    }
                  }
 else {
                    sender.sendMessage(""String_Node_Str"");
                    if (!reciever.equals(sender))                     reciever.sendMessage(sender.getName() + ""String_Node_Str"");
                  }
                }
              }
            }
          }
          Thread.sleep(1000);
        }
 catch (        Exception ex) {
        }
      }
    }
  }
);
  runThread.start();
}",0.9314132291920918
7903,"private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint payday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(maturity));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,payday.minus(ref))),payday);
}","private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint payday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(maturity));
  if (maturity.equals(new TimeSpan(0,0,1)) || maturity.equals(new TimeSpan(0,0,2)))   payday=DateRoller.NEXT_BUZ_DAY.roll(ref.plus(maturity));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,payday.minus(ref))),payday);
}",0.7971631205673759
7904,"public TestDataSet(TimePoint time){
  this.time=time;
  cash_on=buildCash(""String_Node_Str"",new TimeSpan(0,0,1),3.20);
  cash_tn=buildCash(""String_Node_Str"",new TimeSpan(0,0,2),3.25);
  cash_1w=buildCash(""String_Node_Str"",new TimeSpan(0,0,7),3.40);
  cash_2w=buildCash(""String_Node_Str"",new TimeSpan(0,0,14),3.45);
  cash_1m=buildCash(""String_Node_Str"",new TimeSpan(0,1,0),3.50);
  cash_2m=buildCash(""String_Node_Str"",new TimeSpan(0,2,0),3.60);
  cash_3m=buildCash(""String_Node_Str"",new TimeSpan(0,3,0),3.65);
  fra_1x4=buildFRA(""String_Node_Str"",new TimeSpan(0,1,0),new TimeSpan(0,4,0),3.85);
  fra_2x5=buildFRA(""String_Node_Str"",new TimeSpan(0,2,0),new TimeSpan(0,5,0),4.00);
  fra_3x6=buildFRA(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(0,6,0),4.15);
  fra_6x9=buildFRA(""String_Node_Str"",new TimeSpan(0,6,0),new TimeSpan(0,9,0),4.40);
  swap_1y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(1,0,0),4.40);
  swap_2y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(2,0,0),4.65);
  swap_3y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(3,0,0),4.90);
  pool.debug();
}","public TestDataSet(TimePoint time){
  this.time=time;
  cash_on=buildCash(""String_Node_Str"",new TimeSpan(0,0,1),3.20);
  cash_tn=buildCash(""String_Node_Str"",new TimeSpan(0,0,2),3.25);
  cash_1w=buildCash(""String_Node_Str"",new TimeSpan(0,0,7),3.40);
  cash_2w=buildCash(""String_Node_Str"",new TimeSpan(0,0,14),3.45);
  cash_1m=buildCash(""String_Node_Str"",new TimeSpan(0,1,0),3.50);
  cash_2m=buildCash(""String_Node_Str"",new TimeSpan(0,2,0),3.60);
  cash_3m=buildCash(""String_Node_Str"",new TimeSpan(0,3,0),3.65);
  fra_1x4=buildFRA(""String_Node_Str"",new TimeSpan(0,1,0),new TimeSpan(0,4,0),3.85);
  fra_2x5=buildFRA(""String_Node_Str"",new TimeSpan(0,2,0),new TimeSpan(0,5,0),4.00);
  fra_3x6=buildFRA(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(0,6,0),4.15);
  fra_6x9=buildFRA(""String_Node_Str"",new TimeSpan(0,6,0),new TimeSpan(0,9,0),4.40);
  swap_1y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(1,0,0),4.40);
  swap_2y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(2,0,0),4.65);
  swap_3y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(3,0,0),4.90);
}",0.9927927927927928
7905,"private void bootstrap(){
  ReverseSolver solver=new ReverseSolver(curve);
  boolean stable=false;
  Iterator<MarketData> it=null;
  while (!stable) {
    it=data.iterator();
    stable=true;
    while (it.hasNext()) {
      MarketData entry=it.next();
      if (entry.getInst() instanceof InterestRateInstrument) {
        InterestRateInstrument inst=(InterestRateInstrument)entry.getInst();
        inst.valueWith(solver);
        if (solver.solve(entry.getPrice())) {
          curve.addDataPoint(solver.getSolutionTime(),solver.getSolutionDf());
          it.remove();
          stable=false;
        }
      }
 else {
        it.remove();
        continue;
      }
    }
  }
}","private void bootstrap(){
  ReverseSolver solver=new ReverseSolver(curve);
  boolean stable=false;
  Iterator<MarketData> it=null;
  while (!stable) {
    it=data.iterator();
    stable=true;
    while (it.hasNext()) {
      MarketData entry=it.next();
      if (entry.getInst() instanceof InterestRateInstrument) {
        InterestRateInstrument inst=(InterestRateInstrument)entry.getInst();
        CashFlow value=inst.valueWith(solver);
        if (value != null) {
          if (!entry.getPrice().equals(value))           System.err.println(""String_Node_Str"" + inst.getName() + ""String_Node_Str""+ entry.getPrice()+ ""String_Node_Str""+ value);
          it.remove();
        }
 else         if (solver.solve(entry.getPrice())) {
          curve.addDataPoint(solver.getSolutionTime(),solver.getSolutionDf());
          it.remove();
          stable=false;
        }
      }
 else {
        it.remove();
        continue;
      }
    }
  }
}",0.8397040690505548
7906,"@Override public CashFlow getValue(){
  return null;
}","@Override public CashFlow getValue(){
  if (eva.pendingFlow == null)   return eva.presentValue;
 else   return null;
}",0.627906976744186
7907,"@Override public void visit(CashFlow cf,TimePoint tp){
  if (presentValue == null)   return;
  try {
    presentValue=presentValue.plus(cf.multiply(curve.disFactorAt(tp)));
  }
 catch (  OutOfRangeException e) {
    if (pendingFlow == null) {
      pendingFlow=cf;
      pendingTime=tp;
    }
 else {
      failed=true;
    }
  }
}","@Override public void visit(CashFlow cf,TimePoint tp){
  if (failed || presentValue == null)   return;
  try {
    presentValue=presentValue.plus(cf.multiply(curve.disFactorAt(tp)));
  }
 catch (  OutOfRangeException e) {
    if (pendingFlow == null) {
      pendingFlow=cf;
      pendingTime=tp;
    }
 else {
      failed=true;
    }
  }
}",0.9851190476190476
7908,"private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint payday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(maturity));
  if (maturity.equals(new TimeSpan(0,0,1)) || maturity.equals(new TimeSpan(0,0,2)))   payday=DateRoller.NEXT_BUZ_DAY.roll(ref.plus(maturity));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,payday.minus(ref))),payday);
}","private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint payday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(maturity));
  if (payday.minus(ref).getDay() <= 0)   payday=DateRoller.NEXT_BUZ_DAY.roll(ref.plus(maturity));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,payday.minus(ref))),payday);
}",0.8692403486924035
7909,"private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint effday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(effective));
  stream.add(CashFlow.create(-1),effday);
  TimePoint termday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(termination));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,termday.minus(effday))),termday);
}","private void buildCashStream(){
  stream=new CashStream();
  TimePoint ref=DateRoller.NEXT_BUZ_DAY.roll(timestamp);
  TimePoint effday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(effective));
  if (effday.minus(ref).getDay() <= 0)   effday=DateRoller.NEXT_BUZ_DAY.roll(ref.plus(effective));
  stream.add(CashFlow.create(-1),effday);
  TimePoint termday=DateRoller.MOD_NEXT_BUZ_DAY.roll(ref.plus(termination));
  if (termday.minus(effday).getDay() <= 0)   termday=DateRoller.NEXT_BUZ_DAY.roll(effday.plus(TimeSpan.NEXTDAY));
  stream.add(CashFlow.create(1 / rateType.disFactorAfter(rate,termday.minus(effday))),termday);
}",0.6536585365853659
7910,"public TestDataSet(TimePoint time){
  this.time=time;
  cash_on=buildCash(""String_Node_Str"",new TimeSpan(0,0,1),3.20);
  cash_tn=buildCash(""String_Node_Str"",new TimeSpan(0,0,2),3.25);
  cash_1w=buildCash(""String_Node_Str"",new TimeSpan(0,0,7),3.40);
  cash_2w=buildCash(""String_Node_Str"",new TimeSpan(0,0,14),3.45);
  cash_1m=buildCash(""String_Node_Str"",new TimeSpan(0,1,0),3.50);
  cash_2m=buildCash(""String_Node_Str"",new TimeSpan(0,2,0),3.60);
  cash_3m=buildCash(""String_Node_Str"",new TimeSpan(0,3,0),3.65);
  fra_1x4=buildFRA(""String_Node_Str"",new TimeSpan(0,1,0),new TimeSpan(0,4,0),3.85);
  fra_2x5=buildFRA(""String_Node_Str"",new TimeSpan(0,2,0),new TimeSpan(0,5,0),4.00);
  fra_3x6=buildFRA(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(0,6,0),4.15);
  fra_6x9=buildFRA(""String_Node_Str"",new TimeSpan(0,6,0),new TimeSpan(0,9,0),4.40);
  swap_1y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(1,0,0),4.40);
  swap_2y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(2,0,0),4.65);
  swap_3y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(3,0,0),4.90);
}","public TestDataSet(TimePoint time){
  this.time=time;
  cash_on=buildCash(""String_Node_Str"",new TimeSpan(0,0,1),3.20);
  cash_tn=buildFRA(""String_Node_Str"",new TimeSpan(0,0,1),new TimeSpan(0,0,2),3.25);
  cash_1w=buildCash(""String_Node_Str"",new TimeSpan(0,0,7),3.40);
  cash_2w=buildCash(""String_Node_Str"",new TimeSpan(0,0,14),3.45);
  cash_1m=buildCash(""String_Node_Str"",new TimeSpan(0,1,0),3.50);
  cash_2m=buildCash(""String_Node_Str"",new TimeSpan(0,2,0),3.60);
  cash_3m=buildCash(""String_Node_Str"",new TimeSpan(0,3,0),3.65);
  fra_1x4=buildFRA(""String_Node_Str"",new TimeSpan(0,1,0),new TimeSpan(0,4,0),3.85);
  fra_2x5=buildFRA(""String_Node_Str"",new TimeSpan(0,2,0),new TimeSpan(0,5,0),4.00);
  fra_3x6=buildFRA(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(0,6,0),4.15);
  fra_6x9=buildFRA(""String_Node_Str"",new TimeSpan(0,6,0),new TimeSpan(0,9,0),4.40);
  swap_1y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(1,0,0),4.40);
  swap_2y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(2,0,0),4.65);
  swap_3y=buildSwap(""String_Node_Str"",new TimeSpan(0,3,0),new TimeSpan(3,0,0),4.90);
}",0.6396761133603239
7911,"public static void main(String[] args) throws Exception {
  Document clinicalDocument=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  clinicalDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setTypeId(IIimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  TS effectiveTime=TSjuDateAdapter.valueOf(""String_Node_Str"");
  ValueFactory valueFactory=new ValueFactoryImpl();
  SET<TS> effectiveTimeSet=valueFactory.IVLvalueOf(BLimpl.TRUE,effectiveTime,effectiveTime,BLimpl.TRUE);
  clinicalDocument.setEffectiveTime(effectiveTimeSet);
  clinicalDocument.setCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setTypeId(IIimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<CE> setConf=new ArrayList<CE>();
  setConf.add(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  SETjuSetAdapter.valueOf(setConf);
  clinicalDocument.setConfidentialityCode(SETjuSetAdapter.valueOf(setConf));
  clinicalDocument.setLanguageCode(CEimpl.valueOf(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Participation recordTarget=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  recordTarget.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role patientRole=(Patient)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  patientRole.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Person patient=(Person)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  patient.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  SET<II> mrnset=makeId(""String_Node_Str"",""String_Node_Str"");
  patient.setId(mrnset);
  BAG<EN> patName=null;
  patName=setGivenName(patName,""String_Node_Str"");
  patName=setFamilyName(patName,""String_Node_Str"");
  patient.setName(patName);
  patient.setAdministrativeGenderCode(CEimpl.valueOf(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  patient.setBirthTime(TSjuDateAdapter.valueOf(""String_Node_Str""));
  List<ADXP> patAddrElemList=new ArrayList<ADXP>();
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetType));
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD patAddr=ADimpl.valueOf(patAddrElemList);
  List<AD> patAddrList=new ArrayList<AD>();
  patAddrList.add(patAddr);
  BAG patAddrBag=BAGjuListAdapter.valueOf(patAddrList);
  patientRole.setAddr(patAddrBag);
  List<TEL> patTelList=new ArrayList<TEL>();
  patTelList.add(TELimpl.valueOf(""String_Node_Str""));
  BAG patTelBag=BAGjuListAdapter.valueOf(patTelList);
  patientRole.setTelecom(patTelBag);
  Organization provOrg=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  provOrg.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<ADXP> provOrgAddrElemList=new ArrayList<ADXP>();
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetType));
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD provOrgAddr=ADimpl.valueOf(provOrgAddrElemList);
  List<AD> provOrgAddrList=new ArrayList<AD>();
  provOrgAddrList.add(provOrgAddr);
  BAG provOrgAddrBag=BAGjuListAdapter.valueOf(provOrgAddrList);
  provOrg.setAddr(provOrgAddrBag);
  patientRole.setPlayer(patient);
  patientRole.setScoper(provOrg);
  recordTarget.setRole(patientRole);
  clinicalDocument.addParticipation(recordTarget);
  Participation author=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  author.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role assignedAuthor=(Role)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedAuthor.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  author.setRole(assignedAuthor);
  Person assignedPerson=(Person)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedPerson.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  BAG<EN> authName=null;
  authName=setPrefixName(authName,""String_Node_Str"");
  authName=setGivenName(authName,""String_Node_Str"");
  authName=setFamilyName(authName,""String_Node_Str"");
  assignedPerson.setName(authName);
  assignedAuthor.setPlayer(assignedPerson);
  Organization authOrg=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  authOrg.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<ENXP> authReprNameParts=new ArrayList<ENXP>();
  authReprNameParts.add(ENXPimpl.valueOf(""String_Node_Str"",null));
  EN authReprOrgName=ENimpl.valueOf(authReprNameParts);
  List<EN> authReprNameList=new ArrayList<EN>();
  authReprNameList.add(authReprOrgName);
  BAG<EN> authReprNameBag=BAGjuCollectionAdapter.valueOf(authReprNameList);
  authOrg.setName(authReprNameBag);
  List<TEL> authOrgTelList=new ArrayList<TEL>();
  authOrgTelList.add(TELimpl.valueOf(""String_Node_Str""));
  authOrgTelList.add(TELimpl.valueOf(""String_Node_Str""));
  BAG authOrgTelBag=BAGjuListAdapter.valueOf(authOrgTelList);
  authOrg.setTelecom(authOrgTelBag);
  List<ADXP> authOrgAddrElemList=new ArrayList<ADXP>();
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetType));
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD authOrgAddr=ADimpl.valueOf(authOrgAddrElemList);
  List<AD> authOrgAddrList=new ArrayList<AD>();
  authOrgAddrList.add(authOrgAddr);
  BAG authOrgAddrBag=BAGjuListAdapter.valueOf(authOrgAddrList);
  authOrg.setAddr(authOrgAddrBag);
  assignedAuthor.setScoper(authOrg);
  clinicalDocument.addParticipation(author);
  Participation custodian=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  custodian.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role assignedCustodian=(Role)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedCustodian.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  custodian.setRole(assignedCustodian);
  Organization representedCustodianOrganization=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  representedCustodianOrganization.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  representedCustodianOrganization.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  List<ENXP> orgNameParts=new ArrayList<ENXP>();
  orgNameParts.add(ENXPimpl.valueOf(""String_Node_Str"",null));
  EN orgName=ENimpl.valueOf(orgNameParts);
  List<EN> orgNameList=new ArrayList<EN>();
  orgNameList.add(orgName);
  BAG<EN> orgNameBag=BAGjuCollectionAdapter.valueOf(orgNameList);
  List<ADXP> orgAddrElemList=new ArrayList<ADXP>();
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetType));
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD orgAddr=ADimpl.valueOf(orgAddrElemList);
  List<AD> orgAddrList=new ArrayList<AD>();
  orgAddrList.add(orgAddr);
  BAG<AD> orgAddrBag=BAGjuListAdapter.valueOf(patAddrList);
  representedCustodianOrganization.setName(orgNameBag);
  representedCustodianOrganization.setAddr(orgAddrBag);
  assignedCustodian.setScoper(representedCustodianOrganization);
  clinicalDocument.addParticipation(custodian);
  ActRelationship relatedDocument=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  relatedDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  relatedDocument.setType(ActRelationshipType.IsAppendage);
  Document parentDocument=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  parentDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  parentDocument.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  relatedDocument.setTarget(parentDocument);
  clinicalDocument.addOutboundRelationship(relatedDocument);
  ActRelationship authorization=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  authorization.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Document consent=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  consent.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  consent.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  consent.setCode(CDimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  authorization.setTarget(consent);
  clinicalDocument.addOutboundRelationship(authorization);
  ActRelationship component=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  component.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Act structuredBody=(Act)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  structuredBody.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  component.setTarget(structuredBody);
  ActRelationship subcomponent=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  subcomponent.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Act section=(Act)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  section.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  ST title=STjlStringAdapter.valueOf(""String_Node_Str"");
  ST text=STjlStringAdapter.valueOf(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  section.setTitle(title);
  section.setText(text);
  subcomponent.setTarget(section);
  structuredBody.addOutboundRelationship(subcomponent);
  clinicalDocument.addOutboundRelationship(component);
  Util.buildMessage(clinicalDocument,""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  Document clinicalDocument=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  clinicalDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setTypeId(IIimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setTitle(STjlStringAdapter.valueOf(""String_Node_Str""));
  TS effectiveTime=TSjuDateAdapter.valueOf(""String_Node_Str"");
  ValueFactory valueFactory=new ValueFactoryImpl();
  SET<TS> effectiveTimeSet=valueFactory.IVLvalueOf(BLimpl.TRUE,effectiveTime,effectiveTime,BLimpl.TRUE);
  clinicalDocument.setEffectiveTime(effectiveTimeSet);
  clinicalDocument.setCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  clinicalDocument.setTypeId(IIimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<CE> setConf=new ArrayList<CE>();
  setConf.add(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  SETjuSetAdapter.valueOf(setConf);
  clinicalDocument.setConfidentialityCode(SETjuSetAdapter.valueOf(setConf));
  clinicalDocument.setLanguageCode(CEimpl.valueOf(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Participation recordTarget=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  recordTarget.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role patientRole=(Patient)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  patientRole.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  SET<II> mrnset=makeId(""String_Node_Str"",""String_Node_Str"");
  patientRole.setId(mrnset);
  Person patient=(Person)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  patient.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  BAG<EN> patName=null;
  patName=setGivenName(patName,""String_Node_Str"");
  patName=setFamilyName(patName,""String_Node_Str"");
  patient.setName(patName);
  patient.setAdministrativeGenderCode(CEimpl.valueOf(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  patient.setBirthTime(TSjuDateAdapter.valueOf(""String_Node_Str""));
  List<ADXP> patAddrElemList=new ArrayList<ADXP>();
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetAddressLine));
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  patAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD patAddr=ADimpl.valueOf(patAddrElemList);
  List<AD> patAddrList=new ArrayList<AD>();
  patAddrList.add(patAddr);
  BAG patAddrBag=BAGjuListAdapter.valueOf(patAddrList);
  patientRole.setAddr(patAddrBag);
  List<TEL> patTelList=new ArrayList<TEL>();
  patTelList.add(TELimpl.valueOf(""String_Node_Str""));
  BAG patTelBag=BAGjuListAdapter.valueOf(patTelList);
  patientRole.setTelecom(patTelBag);
  Organization provOrg=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  provOrg.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<ADXP> provOrgAddrElemList=new ArrayList<ADXP>();
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetName));
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  provOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD provOrgAddr=ADimpl.valueOf(provOrgAddrElemList);
  List<AD> provOrgAddrList=new ArrayList<AD>();
  provOrgAddrList.add(provOrgAddr);
  BAG provOrgAddrBag=BAGjuListAdapter.valueOf(provOrgAddrList);
  provOrg.setAddr(provOrgAddrBag);
  patientRole.setPlayer(patient);
  patientRole.setScoper(provOrg);
  recordTarget.setRole(patientRole);
  clinicalDocument.addParticipation(recordTarget);
  Participation author=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  author.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role assignedAuthor=(Role)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedAuthor.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  author.setRole(assignedAuthor);
  assignedAuthor.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  Person assignedPerson=(Person)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedPerson.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  BAG<EN> authName=null;
  authName=setPrefixName(authName,""String_Node_Str"");
  authName=setGivenName(authName,""String_Node_Str"");
  authName=setFamilyName(authName,""String_Node_Str"");
  assignedPerson.setName(authName);
  assignedAuthor.setPlayer(assignedPerson);
  Organization authOrg=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  authOrg.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<ENXP> authReprNameParts=new ArrayList<ENXP>();
  authReprNameParts.add(ENXPimpl.valueOf(""String_Node_Str"",null));
  EN authReprOrgName=ENimpl.valueOf(authReprNameParts);
  List<EN> authReprNameList=new ArrayList<EN>();
  authReprNameList.add(authReprOrgName);
  BAG<EN> authReprNameBag=BAGjuCollectionAdapter.valueOf(authReprNameList);
  authOrg.setName(authReprNameBag);
  List<TEL> authOrgTelList=new ArrayList<TEL>();
  authOrgTelList.add(TELimpl.valueOf(""String_Node_Str""));
  authOrgTelList.add(TELimpl.valueOf(""String_Node_Str""));
  BAG authOrgTelBag=BAGjuListAdapter.valueOf(authOrgTelList);
  authOrg.setTelecom(authOrgTelBag);
  List<ADXP> authOrgAddrElemList=new ArrayList<ADXP>();
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetName));
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  authOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD authOrgAddr=ADimpl.valueOf(authOrgAddrElemList);
  List<AD> authOrgAddrList=new ArrayList<AD>();
  authOrgAddrList.add(authOrgAddr);
  BAG authOrgAddrBag=BAGjuListAdapter.valueOf(authOrgAddrList);
  authOrg.setAddr(authOrgAddrBag);
  assignedAuthor.setScoper(authOrg);
  clinicalDocument.addParticipation(author);
  Participation custodian=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  custodian.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role assignedCustodian=(Role)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  assignedCustodian.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  custodian.setRole(assignedCustodian);
  Organization representedCustodianOrganization=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  representedCustodianOrganization.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  representedCustodianOrganization.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  List<ENXP> orgNameParts=new ArrayList<ENXP>();
  orgNameParts.add(ENXPimpl.valueOf(""String_Node_Str"",null));
  EN orgName=ENimpl.valueOf(orgNameParts);
  List<EN> orgNameList=new ArrayList<EN>();
  orgNameList.add(orgName);
  BAG<EN> orgNameBag=BAGjuCollectionAdapter.valueOf(orgNameList);
  List<ADXP> orgAddrElemList=new ArrayList<ADXP>();
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetName));
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  orgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD orgAddr=ADimpl.valueOf(orgAddrElemList);
  List<AD> orgAddrList=new ArrayList<AD>();
  orgAddrList.add(orgAddr);
  BAG<AD> orgAddrBag=BAGjuListAdapter.valueOf(orgAddrList);
  representedCustodianOrganization.setName(orgNameBag);
  representedCustodianOrganization.setAddr(orgAddrBag);
  assignedCustodian.setScoper(representedCustodianOrganization);
  clinicalDocument.addParticipation(custodian);
  Participation informationRecipient=(Participation)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  informationRecipient.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Role intendedRecipient=(Role)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  intendedRecipient.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  informationRecipient.setRole(intendedRecipient);
  Person infRecPerson=(Person)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  infRecPerson.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  BAG<EN> infRecPersonName=null;
  infRecPersonName=setPrefixName(infRecPersonName,""String_Node_Str"");
  infRecPersonName=setGivenName(infRecPersonName,""String_Node_Str"");
  infRecPersonName=setFamilyName(infRecPersonName,""String_Node_Str"");
  infRecPerson.setName(infRecPersonName);
  intendedRecipient.setPlayer(infRecPerson);
  Organization receivedOrganization=(Organization)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  receivedOrganization.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  List<ENXP> recOrgNameParts=new ArrayList<ENXP>();
  recOrgNameParts.add(ENXPimpl.valueOf(""String_Node_Str"",null));
  EN recOrgName=ENimpl.valueOf(recOrgNameParts);
  List<EN> recOrgNameList=new ArrayList<EN>();
  recOrgNameList.add(recOrgName);
  BAG<EN> recOrgNameBag=BAGjuCollectionAdapter.valueOf(recOrgNameList);
  List<ADXP> recOrgAddrElemList=new ArrayList<ADXP>();
  recOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",StreetAddressLine));
  recOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",PostalCode));
  recOrgAddrElemList.add(ADXPimpl.valueOf(""String_Node_Str"",Municipality));
  AD recOrgAddr=ADimpl.valueOf(recOrgAddrElemList);
  List<AD> recOrgAddrList=new ArrayList<AD>();
  recOrgAddrList.add(recOrgAddr);
  BAG<AD> recOrgAddrBag=BAGjuListAdapter.valueOf(recOrgAddrList);
  List<TEL> recOrgTelList=new ArrayList<TEL>();
  recOrgTelList.add(TELimpl.valueOf(""String_Node_Str""));
  BAG recOrgTelBag=BAGjuListAdapter.valueOf(recOrgTelList);
  receivedOrganization.setTelecom(recOrgTelBag);
  receivedOrganization.setName(recOrgNameBag);
  receivedOrganization.setAddr(recOrgAddrBag);
  intendedRecipient.setScoper(receivedOrganization);
  clinicalDocument.addParticipation(informationRecipient);
  ActRelationship relatedDocument=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  relatedDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  relatedDocument.setTypeCode(ActRelationshipType.IsAppendage);
  Document parentDocument=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  parentDocument.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  parentDocument.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  relatedDocument.setTarget(parentDocument);
  clinicalDocument.addOutboundRelationship(relatedDocument);
  ActRelationship authorization=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  authorization.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Document consent=(Document)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  consent.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  consent.setId(makeId(""String_Node_Str"",""String_Node_Str""));
  consent.setCode(CDimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  authorization.setTarget(consent);
  consent.setStatusCode(Completed);
  clinicalDocument.addOutboundRelationship(authorization);
  ActRelationship component=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  component.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Act structuredBody=(Act)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  structuredBody.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  component.setTarget(structuredBody);
  ActRelationship subcomponent=(ActRelationship)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  subcomponent.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  Act section=(Act)RimObjectFactory.getInstance().createRimObject(""String_Node_Str"");
  section.setCloneCode(CSimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  section.setCode(CDimpl.valueOf(""String_Node_Str"",""String_Node_Str""));
  ST title=STjlStringAdapter.valueOf(""String_Node_Str"");
  ST text=STjlStringAdapter.valueOf(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  section.setTitle(title);
  section.setText(text);
  subcomponent.setTarget(section);
  structuredBody.addOutboundRelationship(subcomponent);
  clinicalDocument.addOutboundRelationship(component);
  Util.buildMessage(clinicalDocument,""String_Node_Str"",""String_Node_Str"");
}",0.8628106443809105
7912,"private void calcBtnMinusActions(){
  uint64Instance=uint64Instance_SaveValue.subtract(uint64Instance);
}","private void calcBtnMinusActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnMinus.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.subtract(uint64Instance);
}",0.2818791946308724
7913,"private void calcBtnTimesActions(){
  uint64Instance=uint64Instance_SaveValue.multiply(uint64Instance);
}","private void calcBtnTimesActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnTimes.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.multiply(uint64Instance);
}",0.2818791946308724
7914,"private void calcBtnShiftRActions(){
  uint64Instance=uint64Instance_SaveValue.shiftRight(1);
}","private void calcBtnShiftRActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnShiftR.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.shiftRight(1);
}",0.2617079889807162
7915,"private void calcBtnDivideActions(){
  if (uint64Instance == BigInteger.ZERO) {
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
    toast.show();
  }
 else {
    uint64Instance=uint64Instance_SaveValue.divide(uint64Instance);
  }
}","private void calcBtnDivideActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnDivide.setEnabled(true);
  if (uint64Instance == BigInteger.ZERO) {
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
    toast.show();
  }
 else {
    uint64Instance=uint64Instance_SaveValue.divide(uint64Instance);
  }
}",0.5082568807339449
7916,"private void calcBtnShiftLActions(){
  uint64Instance=uint64Instance_SaveValue.shiftLeft(1);
}","private void calcBtnShiftLActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnShiftL.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.shiftLeft(1);
}",0.2596685082872928
7917,"private void calcBtnORActions(){
  uint64Instance=uint64Instance_SaveValue.or(uint64Instance);
}","private void calcBtnORActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnOR.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.or(uint64Instance);
}",0.2651933701657458
7918,"private void performDigitButtonPressAction(View v){
  char c=getButtonValue(v);
  if (currentCalculationOperation != calculationTypeEnum.NO_OP_CALC) {
    clearDisp();
    calculationOperationInProgress=false;
    currentCalculationOperation=calculationTypeEnum.NO_OP_CALC;
  }
switch (currentMode) {
case DECIMAL_MODE:
    decstring=decstring + c;
  uint64Instance=new BigInteger(decstring,10);
break;
case HEX_MODE:
hexstring=hexstring + c;
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
binstring=binstring + c;
uint64Instance=new BigInteger(binstring,2);
break;
}
}","private void performDigitButtonPressAction(View v){
  char c=getButtonValue(v);
  if (currentCalculationOperation != calculationTypeEnum.NO_OP_CALC) {
    clearDisp();
  }
switch (currentMode) {
case DECIMAL_MODE:
    decstring=decstring + c;
  uint64Instance=new BigInteger(decstring,10);
break;
case HEX_MODE:
hexstring=hexstring + c;
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
binstring=binstring + c;
uint64Instance=new BigInteger(binstring,2);
break;
}
}",0.901669758812616
7919,"private void calcBtnANDActions(){
  uint64Instance=uint64Instance_SaveValue.and(uint64Instance);
}","private void calcBtnANDActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnAND.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.and(uint64Instance);
}",0.2688614540466392
7920,"private void calcBtnPlusActions(){
  uint64Instance=uint64Instance_SaveValue.add(uint64Instance);
}","private void calcBtnPlusActions(){
  btnClear.setText(""String_Node_Str"");
  btnPlus.setVisibility(View.VISIBLE);
  btnMinus.setVisibility(View.VISIBLE);
  btnTimes.setVisibility(View.VISIBLE);
  btnDivide.setVisibility(View.VISIBLE);
  btnAND.setVisibility(View.VISIBLE);
  btnOR.setVisibility(View.VISIBLE);
  btnNOT.setVisibility(View.VISIBLE);
  btnXOR.setVisibility(View.VISIBLE);
  btnShiftL.setVisibility(View.VISIBLE);
  btnShiftR.setVisibility(View.VISIBLE);
  btnEquals.setVisibility(View.INVISIBLE);
  btnEquals.setEnabled(false);
  btnPlus.setEnabled(true);
  uint64Instance=uint64Instance_SaveValue.add(uint64Instance);
}",0.2704918032786885
7921,"private void performBtnEqualActions(){
switch (currentCalculationOperation) {
case PLUS_CALC:
    calcBtnPlusActions();
  break;
case MINUS_CALC:
calcBtnMinusActions();
break;
case MULTIPLY_CALC:
calcBtnTimesActions();
break;
case DIVIDE_CALC:
calcBtnDivideActions();
break;
case OR_CALC:
calcBtnORActions();
break;
case AND_CALC:
calcBtnANDActions();
break;
case SHIFT_L_CALC:
calcBtnShiftLActions();
break;
case SHIFT_R_CALC:
calcBtnShiftRActions();
break;
}
currentCalculationOperation=calculationTypeEnum.NO_OP_CALC;
calculationOperationInProgress=false;
}","private void performBtnEqualActions(){
switch (currentCalculationOperation) {
case PLUS_CALC:
    calcBtnPlusActions();
  break;
case MINUS_CALC:
calcBtnMinusActions();
break;
case MULTIPLY_CALC:
calcBtnTimesActions();
break;
case DIVIDE_CALC:
calcBtnDivideActions();
break;
case OR_CALC:
calcBtnORActions();
break;
case AND_CALC:
calcBtnANDActions();
break;
case SHIFT_L_CALC:
calcBtnShiftLActions();
break;
case SHIFT_R_CALC:
calcBtnShiftRActions();
break;
}
btnEquals.setEnabled(false);
currentCalculationOperation=calculationTypeEnum.NO_OP_CALC;
calculationOperationInProgress=false;
}",0.9747606614447344
7922,"private void linkTextFieldsIntoControlObjects(){
  lbldecimal=(TextView)findViewById(R.id.lbldecimal);
  txtdecimal=(TextView)findViewById(R.id.txtdecimal);
  lblhex=(TextView)findViewById(R.id.lblhex);
  txthex=(TextView)findViewById(R.id.txthex);
  lblbinary=(TextView)findViewById(R.id.lblbinary);
  txtbinary=(TextView)findViewById(R.id.txtbinary);
  txtInformational=(TextView)findViewById(R.id.txtrotate);
  txtcomp=(TextView)findViewById(R.id.txtcomp);
  txtprecision=(TextView)findViewById(R.id.txtprecision);
  txtTestParse=(TextView)findViewById(R.id.txtTestParse);
}","private void linkTextFieldsIntoControlObjects(){
  txtdecimal=(TextView)findViewById(R.id.txtdecimal);
  txthex=(TextView)findViewById(R.id.txthex);
  txtbinary=(TextView)findViewById(R.id.txtbinary);
  txtInformational=(TextView)findViewById(R.id.txtrotate);
  txtcomp=(TextView)findViewById(R.id.txtcomp);
  txtprecision=(TextView)findViewById(R.id.txtprecision);
  txtTestParse=(TextView)findViewById(R.id.txtTestParse);
}",0.8303393213572854
7923,"private void displayValues(){
  String parsedNumericString;
  int kp, k;
  Display display=((WindowManager)getSystemService(WINDOW_SERVICE)).getDefaultDisplay();
  int orient=display.getOrientation();
  Resources res=getResources();
  String configStatus=String.format(""String_Node_Str"",testFlag1,testFlag2,testFlag3,testFlag4,testFlag5);
  txtTestParse.setText(configStatus);
  txtTestParse.setVisibility(View.VISIBLE);
  txtInformational.setText(buildPadded64BitHexString());
  txtInformational.setVisibility(View.VISIBLE);
  decstring=uint64Instance.toString(10);
  parsedNumericString=NumberFormat.getInstance().format(uint64Instance);
  txtdecimal.setText(parsedNumericString);
  hexstring=uint64Instance.toString(16);
  txthex.setText(padString(uint64Instance.toString(16).toUpperCase(),8));
  binstring=uint64Instance.toString(2);
  txtbinary.setText(padString(uint64Instance.toString(2).toUpperCase(),8));
  if ((parsedNumericString.length() >= 22) & (orient == 0)) {
    parsedNumericString=parsedNumericString.substring(parsedNumericString.length() - 22);
    txtbinary.setTextSize(10);
  }
 else {
    txtbinary.setTextSize(18);
  }
}","private void displayValues(){
  String parsedNumericString;
  Display display=((WindowManager)getSystemService(WINDOW_SERVICE)).getDefaultDisplay();
  int orient=display.getOrientation();
  String configStatus=String.format(""String_Node_Str"",testFlag1,testFlag2,testFlag3,testFlag4,testFlag5);
  txtTestParse.setText(configStatus);
  txtTestParse.setVisibility(View.VISIBLE);
  txtInformational.setText(buildPadded64BitHexString());
  txtInformational.setVisibility(View.VISIBLE);
  decstring=uint64Instance.toString(10);
  parsedNumericString=NumberFormat.getInstance().format(uint64Instance);
  txtdecimal.setText(parsedNumericString);
  hexstring=uint64Instance.toString(16);
  txthex.setText(padString(uint64Instance.toString(16).toUpperCase(),8));
  binstring=uint64Instance.toString(2);
  txtbinary.setText(padString(uint64Instance.toString(2).toUpperCase(),8));
  if ((txtbinary.length() >= 22) & (orient == 0)) {
    txtbinary.setTextSize(10);
  }
 else {
    txtbinary.setTextSize(18);
  }
}",0.924009324009324
7924,"private void performDigitButtonPressAction(View v){
  char c=getButtonValue(v);
  if (currentCalculationOperation != calculationTypeEnum.NO_OP_CALC) {
    clearDisp();
    calculationOperationInProgress=false;
    currentCalculationOperation=calculationTypeEnum.NO_OP_CALC;
  }
switch (currentMode) {
case DECIMAL_MODE:
    decstring=decstring + c;
  uint64Instance=new BigInteger(decstring,10);
break;
case HEX_MODE:
hexstring=hexstring + c;
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
binstring=binstring + c;
uint64Instance=new BigInteger(hexstring,2);
break;
}
}","private void performDigitButtonPressAction(View v){
  char c=getButtonValue(v);
  if (currentCalculationOperation != calculationTypeEnum.NO_OP_CALC) {
    clearDisp();
    calculationOperationInProgress=false;
    currentCalculationOperation=calculationTypeEnum.NO_OP_CALC;
  }
switch (currentMode) {
case DECIMAL_MODE:
    decstring=decstring + c;
  uint64Instance=new BigInteger(decstring,10);
break;
case HEX_MODE:
hexstring=hexstring + c;
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
binstring=binstring + c;
uint64Instance=new BigInteger(binstring,2);
break;
}
}",0.9949324324324323
7925,"private void performBtnBackSpaceActions(){
switch (currentMode) {
case DECIMAL_MODE:
    if (decstring.length() > 0) {
      decstring=decstring.substring(0,decstring.length() - 1);
    }
  uint64Instance=new BigInteger(decstring);
break;
case HEX_MODE:
if (hexstring.length() > 0) {
hexstring=hexstring.substring(0,hexstring.length() - 1);
}
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
if (binstring.length() > 0) {
binstring=binstring.substring(0,binstring.length() - 1);
}
uint64Instance=new BigInteger(binstring,2);
break;
}
}","private void performBtnBackSpaceActions(){
switch (currentMode) {
case DECIMAL_MODE:
    if (decstring.length() == 1) {
      decstring=""String_Node_Str"";
    }
 else     if (decstring.length() > 0) {
      decstring=decstring.substring(0,decstring.length() - 1);
    }
  uint64Instance=new BigInteger(decstring);
break;
case HEX_MODE:
if (hexstring.length() == 1) {
hexstring=""String_Node_Str"";
}
 else if (hexstring.length() > 0) {
hexstring=hexstring.substring(0,hexstring.length() - 1);
}
uint64Instance=new BigInteger(hexstring,16);
break;
case BINARY_MODE:
if (binstring.length() == 1) {
binstring=""String_Node_Str"";
}
 else if (binstring.length() > 0) {
binstring=binstring.substring(0,binstring.length() - 1);
}
uint64Instance=new BigInteger(binstring,2);
break;
}
}",0.8360902255639098
7926,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  dm=this.getResources().getDisplayMetrics();
  setContentView(R.layout.map);
  initMapView();
  initMyLocationOverlay();
  initMyItemizedOverlay();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mtlo=new MapTouchListenerOverlay(this);
  dm=this.getResources().getDisplayMetrics();
  setContentView(R.layout.map);
  initMapView();
  initMyLocationOverlay();
  initMyItemizedOverlay();
}",0.9351851851851852
7927,"public void initMapView(){
  map=(MapView)findViewById(R.id.map);
  map.setBuiltInZoomControls(true);
  map.getOverlays().add(restricter);
  MapController mc=map.getController();
  mc.setCenter(mapCenter);
  mc.setZoom(START_ZOOM);
}","public void initMapView(){
  map=(MapView)findViewById(R.id.map);
  map.setBuiltInZoomControls(true);
  map.getOverlays().add(mtlo);
  map.getOverlays().add(restricter);
  MapController mc=map.getController();
  mc.setCenter(mapCenter);
  mc.setZoom(START_ZOOM);
}",0.937625754527163
7928,"@Override public void drawMyLocation(Canvas canvas,MapView mapView,Location lastFix,GeoPoint myLocation,long when){
  if (ctx.getFollow())   mc.setCenter(myLocation);
  mapView.getProjection().toPixels(myLocation,currentLocationPoint);
  drawAt(canvas,arrow,currentLocationPoint.x,currentLocationPoint.y,false);
}","@Override public void drawMyLocation(Canvas canvas,MapView mapView,Location lastFix,GeoPoint myLocation,long when){
  mapView.getProjection().toPixels(myLocation,currentLocationPoint);
  drawAt(canvas,arrow,currentLocationPoint.x,currentLocationPoint.y,false);
  if (ctx.getFollow())   mc.setCenter(myLocation);
}",0.4984025559105431
7929,"@Override public void onUnitCreate(ROUnit unit){
  if (!unit.getPlayer().equals(Game.getInstance().self()))   return;
  if (((Unit)unit).getType().isBuilding()) {
    buildLock=false;
  }
}","@Override public void onUnitCreate(ROUnit unit){
  if (!unit.getPlayer().equals(Game.getInstance().self()))   return;
  if (((Unit)unit).getType().isBuilding()) {
    buildLock=false;
  }
  Unit u=(Unit)unit;
  if (u.getType().equals(UnitType.getUnitType(hatchery)))   bases.add(u);
  if (u.getType().equals(UnitType.getUnitType(larva)))   larvae.add(u);
  if (u.getType().equals(UnitType.getUnitType(drone)))   drones.add(u);
  if (u.getType().equals(UnitType.getUnitType(overlord)))   ovies.add(u);
  if (u.getType().equals(UnitType.getUnitType(zergling)))   lings.add(u);
  if (u.getType().equals(UnitType.getUnitType(hydralisk)))   hydras.add(u);
  if (u.getType().equals(UnitType.getUnitType(lurker)))   lurkers.add(u);
}",0.4131147540983607
7930,"@Override public void onFrame(){
  List<ROUnit> minersList=UnitUtils.getAllMy(UnitType.getUnitType(drone));
  for (  Unit u : workers) {
    if (u.isIdle()) {
      ROUnit closestPatch=UnitUtils.getClosest(u,Game.getInstance().getMinerals());
      ((Unit)u).rightClick(closestPatch);
    }
  }
  buildNext();
}","@Override public void onFrame(){
  for (  Unit u : drones) {
    if (u.isIdle()) {
      ROUnit closestPatch=UnitUtils.getClosest(u,Game.getInstance().getMinerals());
      ((Unit)u).rightClick(closestPatch);
    }
  }
  buildNext();
}",0.663003663003663
7931,"public boolean createUnit(UnitType t,TilePosition area){
  if (area == null) {
    List<ROUnit> bases=UnitUtils.getAllMy(UnitType.getUnitType(hatchery));
    area=((Unit)bases.get(0)).getTilePosition();
  }
  if (t.equals(UnitType.getUnitType(spawningPool)) || t.equals(UnitType.getUnitType(den)) || t.equals(UnitType.getUnitType(hatchery))) {
    List<ROUnit> drones=UnitUtils.getAllMy(UnitType.getUnitType(drone));
    if (getMinerals() >= t.mineralPrice() && Game.getInstance().self().gas() >= t.gasPrice() && !drones.isEmpty()) {
      Unit morpher=(Unit)findClosest(drones,area);
      TilePosition tp;
      for (int i=8; i < 15; i++) {
        tp=findBuildRadius(area,i,morpher,t);
        if (tp != null) {
          morpher.build(tp,t);
          lastBuilder=morpher;
          buildLock=true;
          System.out.println(""String_Node_Str"" + t.getName());
          return true;
        }
      }
    }
  }
 else   if (t.equals(UnitType.getUnitType(zergling)) || t.equals(UnitType.getUnitType(hydralisk)) || t.equals(UnitType.getUnitType(drone))|| t.equals(UnitType.getUnitType(overlord))) {
    List<ROUnit> larvae=UnitUtils.getAllMy(UnitType.getUnitType(larva));
    if (getMinerals() >= t.mineralPrice() && getSupply() >= t.supplyRequired() && Game.getInstance().self().gas() >= t.gasPrice() && !larvae.isEmpty()) {
      Unit morpher=(Unit)findClosest(larvae,area);
      morpher.morph(t);
      return true;
    }
  }
 else   if (t.equals(UnitType.getUnitType(extractor))) {
    if (getMinerals() >= t.mineralPrice())     return false;
    Set<ROUnit> geysers=myMap.getGasSpots();
    ArrayList<ROUnit> geyserList=new ArrayList<ROUnit>();
    for (    ROUnit g : geysers) {
      geyserList.add(g);
    }
    ROUnit geyser=findClosest(geyserList,area);
    Unit morpher=(Unit)findClosest(UnitUtils.getAllMy(UnitType.getUnitType(drone)),area);
    morpher.build(geyser.getTilePosition(),t);
    lastBuilder=morpher;
    buildLock=true;
    System.out.println(""String_Node_Str"");
    return true;
  }
 else   if (t.equals(lurker)) {
    List<ROUnit> hydras=UnitUtils.getAllMy(UnitType.getUnitType(hydralisk));
    if (getMinerals() >= t.mineralPrice() && getSupply() >= 1 && Game.getInstance().self().gas() >= t.gasPrice() && !hydras.isEmpty()) {
      ((Unit)hydras.get(0)).morph(t);
      return true;
    }
  }
 else   if (t.equals(lair)) {
    if (getMinerals() >= t.mineralPrice() && Game.getInstance().self().gas() >= t.gasPrice()) {
      List<ROUnit> bases=UnitUtils.getAllMy(UnitType.getUnitType(hatchery));
      Unit morpher=(Unit)findClosest(bases,area);
      morpher.morph(t);
      System.out.println(""String_Node_Str"");
      return true;
    }
  }
  return false;
}","public boolean createUnit(UnitType t,TilePosition area){
  if (area == null) {
    List<ROUnit> bases=UnitUtils.getAllMy(UnitType.getUnitType(hatchery));
    area=((Unit)bases.get(0)).getTilePosition();
  }
  if (t.equals(UnitType.getUnitType(spawningPool)) || t.equals(UnitType.getUnitType(den)) || t.equals(UnitType.getUnitType(hatchery))) {
    if (getMinerals() >= t.mineralPrice() && Game.getInstance().self().gas() >= t.gasPrice() && !drones.isEmpty()) {
      Unit morpher=(Unit)findClosest(drones,area);
      TilePosition tp;
      for (int i=8; i < 15; i++) {
        tp=findBuildRadius(area,i,morpher,t);
        if (tp != null) {
          morpher.build(tp,t);
          lastBuilder=morpher;
          buildLock=true;
          System.out.println(""String_Node_Str"" + t.getName());
          return true;
        }
      }
    }
  }
 else   if (t.equals(UnitType.getUnitType(zergling)) || t.equals(UnitType.getUnitType(hydralisk)) || t.equals(UnitType.getUnitType(drone))|| t.equals(UnitType.getUnitType(overlord))) {
    if (getMinerals() >= t.mineralPrice() && getSupply() >= t.supplyRequired() && Game.getInstance().self().gas() >= t.gasPrice() && !larvae.isEmpty()) {
      Unit morpher=(Unit)findClosest(larvae,area);
      morpher.morph(t);
      return true;
    }
  }
 else   if (t.equals(UnitType.getUnitType(extractor))) {
    if (getMinerals() >= t.mineralPrice())     return false;
    Set<ROUnit> geysers=myMap.getGasSpots();
    ArrayList<Unit> geyserList=new ArrayList<Unit>();
    for (    ROUnit g : geysers) {
      geyserList.add((Unit)g);
    }
    ROUnit geyser=findClosest(geyserList,area);
    Unit morpher=(Unit)findClosest(drones,area);
    morpher.build(geyser.getTilePosition(),t);
    lastBuilder=morpher;
    buildLock=true;
    System.out.println(""String_Node_Str"");
    return true;
  }
 else   if (t.equals(lurker)) {
    List<ROUnit> hydras=UnitUtils.getAllMy(UnitType.getUnitType(hydralisk));
    if (getMinerals() >= t.mineralPrice() && getSupply() >= 1 && Game.getInstance().self().gas() >= t.gasPrice() && !hydras.isEmpty()) {
      ((Unit)hydras.get(0)).morph(t);
      return true;
    }
  }
 else   if (t.equals(lair)) {
    if (getMinerals() >= t.mineralPrice() && Game.getInstance().self().gas() >= t.gasPrice()) {
      Unit morpher=(Unit)findClosest(bases,area);
      morpher.morph(t);
      System.out.println(""String_Node_Str"");
      return true;
    }
  }
  return false;
}",0.3014820592823713
7932,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  mList.layout(0,0,mList.getMeasuredWidth(),getHeight());
  if (mHeader != null) {
    MarginLayoutParams lp=(MarginLayoutParams)mHeader.getLayoutParams();
    int headerTop=lp.topMargin + stickyHeaderTop();
    mHeader.layout(mPaddingLeft,headerTop,mHeader.getMeasuredWidth() + mPaddingLeft,headerTop + mHeader.getMeasuredHeight());
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  mList.layout(0,0,mList.getMeasuredWidth(),getHeight());
  if (mHeader != null) {
    MarginLayoutParams lp=(MarginLayoutParams)mHeader.getLayoutParams();
    int headerTop=lp.topMargin;
    mHeader.layout(mPaddingLeft,headerTop,mHeader.getMeasuredWidth() + mPaddingLeft,headerTop + mHeader.getMeasuredHeight());
  }
}",0.7040572792362768
7933,"private void updateHeaderVisibilities(){
  int top;
  if (mHeader != null) {
    top=mHeader.getMeasuredHeight() + (mHeaderOffset != null ? mHeaderOffset : 0) + mStickyHeaderTopOffset;
  }
 else {
    top=stickyHeaderTop();
  }
  int childCount=mList.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=mList.getChildAt(i);
    if (!(child instanceof WrapperView)) {
      continue;
    }
    WrapperView wrapperViewChild=(WrapperView)child;
    if (!wrapperViewChild.hasHeader()) {
      continue;
    }
    View childHeader=wrapperViewChild.mHeader;
    if (wrapperViewChild.getTop() < top) {
      if (childHeader.getVisibility() != View.INVISIBLE) {
        childHeader.setVisibility(View.INVISIBLE);
      }
    }
 else {
      if (childHeader.getVisibility() != View.VISIBLE) {
        childHeader.setVisibility(View.VISIBLE);
      }
    }
  }
}","private void updateHeaderVisibilities(){
  int top=stickyHeaderTop();
  int childCount=mList.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=mList.getChildAt(i);
    if (!(child instanceof WrapperView)) {
      continue;
    }
    WrapperView wrapperViewChild=(WrapperView)child;
    if (!wrapperViewChild.hasHeader()) {
      continue;
    }
    View childHeader=wrapperViewChild.mHeader;
    if (wrapperViewChild.getTop() < top) {
      if (childHeader.getVisibility() != View.INVISIBLE) {
        childHeader.setVisibility(View.INVISIBLE);
      }
    }
 else {
      if (childHeader.getVisibility() != View.VISIBLE) {
        childHeader.setVisibility(View.VISIBLE);
      }
    }
  }
}",0.8952020202020202
7934,"private void updateHeader(int headerPosition){
  if (mHeaderPosition == null || mHeaderPosition != headerPosition) {
    mHeaderPosition=headerPosition;
    final long headerId=mAdapter.getHeaderId(headerPosition);
    if (mHeaderId == null || mHeaderId != headerId) {
      mHeaderId=headerId;
      final View header=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
      if (mHeader != header) {
        if (header == null) {
          throw new NullPointerException(""String_Node_Str"");
        }
        swapHeader(header);
      }
      ensureHeaderHasCorrectLayoutParams(mHeader);
      measureHeader(mHeader);
      if (mOnStickyHeaderChangedListener != null) {
        mOnStickyHeaderChangedListener.onStickyHeaderChanged(this,mHeader,headerPosition,mHeaderId);
      }
      mHeaderOffset=null;
    }
  }
  int headerOffset=0;
  int headerBottom=mHeader.getMeasuredHeight() + stickyHeaderTop();
  for (int i=0; i < mList.getChildCount(); i++) {
    final View child=mList.getChildAt(i);
    final boolean doesChildHaveHeader=child instanceof WrapperView && ((WrapperView)child).hasHeader();
    final boolean isChildFooter=mList.containsFooterView(child);
    if (child.getTop() >= stickyHeaderTop() && (doesChildHaveHeader || isChildFooter)) {
      headerOffset=Math.min(child.getTop() - headerBottom,0);
      break;
    }
  }
  setHeaderOffet(headerOffset);
  if (!mIsDrawingListUnderStickyHeader) {
    mList.setTopClippingLength(mHeader.getMeasuredHeight() + mHeaderOffset);
  }
  updateHeaderVisibilities();
}","private void updateHeader(int headerPosition){
  if (mHeaderPosition == null || mHeaderPosition != headerPosition) {
    mHeaderPosition=headerPosition;
    final long headerId=mAdapter.getHeaderId(headerPosition);
    if (mHeaderId == null || mHeaderId != headerId) {
      mHeaderId=headerId;
      final View header=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
      if (mHeader != header) {
        if (header == null) {
          throw new NullPointerException(""String_Node_Str"");
        }
        swapHeader(header);
      }
      ensureHeaderHasCorrectLayoutParams(mHeader);
      measureHeader(mHeader);
      if (mOnStickyHeaderChangedListener != null) {
        mOnStickyHeaderChangedListener.onStickyHeaderChanged(this,mHeader,headerPosition,mHeaderId);
      }
      mHeaderOffset=null;
    }
  }
  int headerOffset=stickyHeaderTop();
  for (int i=0; i < mList.getChildCount(); i++) {
    final View child=mList.getChildAt(i);
    final boolean doesChildHaveHeader=child instanceof WrapperView && ((WrapperView)child).hasHeader();
    final boolean isChildFooter=mList.containsFooterView(child);
    if (child.getTop() >= stickyHeaderTop() && (doesChildHaveHeader || isChildFooter)) {
      headerOffset=Math.min(child.getTop() - mHeader.getMeasuredHeight(),headerOffset);
      break;
    }
  }
  setHeaderOffet(headerOffset);
  if (!mIsDrawingListUnderStickyHeader) {
    mList.setTopClippingLength(mHeader.getMeasuredHeight() + mHeaderOffset);
  }
  updateHeaderVisibilities();
}",0.965721819380356
7935,"private int getHeaderOverlap(int position){
  boolean isStartOfSection=isStartOfSection(position);
  if (!isStartOfSection) {
    View header=mAdapter.getView(position,null,mList);
    int widthMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    header.measure(widthMeasureSpec,heightMeasureSpec);
    return header.getMeasuredHeight();
  }
  return 0;
}","private int getHeaderOverlap(int position){
  boolean isStartOfSection=isStartOfSection(position);
  if (!isStartOfSection) {
    View header=mAdapter.getView(position,null,mList);
    final int width=getWidth();
    final int parentWidthMeasureSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
    final int parentHeightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    measureChild(header,parentWidthMeasureSpec,parentHeightMeasureSpec);
    return header.getMeasuredHeight();
  }
  return 0;
}",0.5461928934010152
7936,"private void updateHeader(int firstVisiblePosition){
  if (mHeaderPosition == null || mHeaderPosition != firstVisiblePosition) {
    mHeaderPosition=firstVisiblePosition;
    final long headerId=mAdapter.getHeaderId(firstVisiblePosition);
    if (mHeaderId == null || mHeaderId != headerId) {
      mHeaderId=headerId;
      final View header=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
      if (mHeader != header) {
        if (header == null) {
          throw new NullPointerException(""String_Node_Str"");
        }
        swapHeader(header);
      }
      final int width=getWidth() - mPaddingLeft - mPaddingRight;
      final int parentWidthMeasureSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
      final int parentHeightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      measureChild(mHeader,parentWidthMeasureSpec,parentHeightMeasureSpec);
      mHeaderOffset=null;
    }
  }
  int headerOffset=0;
  int headerBottom=mHeader.getMeasuredHeight() + (mClippingToPadding ? mPaddingTop : 0);
  for (int i=1; i < mList.getChildCount(); i++) {
    final View child=mList.getChildAt(i);
    final boolean doesChildHaveHeader=child instanceof WrapperView && ((WrapperView)child).hasHeader();
    final boolean isChildFooter=mList.containsFooterView(child);
    if (doesChildHaveHeader || isChildFooter) {
      headerOffset=Math.min(child.getTop() - headerBottom,0);
      break;
    }
  }
  headerOffset+=mClippingToPadding ? mPaddingTop : 0;
  setHeaderOffet(headerOffset);
  if (!mIsDrawingListUnderStickyHeader) {
    mList.setTopClippingLength(mHeader.getMeasuredHeight() + mHeaderOffset);
  }
  updateHeaderVisibilities();
}","private void updateHeader(int firstVisiblePosition){
  if (mHeaderPosition == null || mHeaderPosition != firstVisiblePosition) {
    mHeaderPosition=firstVisiblePosition;
    final long headerId=mAdapter.getHeaderId(firstVisiblePosition);
    if (mHeaderId == null || mHeaderId != headerId) {
      mHeaderId=headerId;
      final View header=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
      if (mHeader != header) {
        if (header == null) {
          throw new NullPointerException(""String_Node_Str"");
        }
        swapHeader(header);
      }
      final int width=getWidth();
      final int parentWidthMeasureSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
      final int parentHeightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      measureChild(mHeader,parentWidthMeasureSpec,parentHeightMeasureSpec);
      mHeaderOffset=null;
    }
  }
  int headerOffset=0;
  int headerBottom=mHeader.getMeasuredHeight() + (mClippingToPadding ? mPaddingTop : 0);
  for (int i=1; i < mList.getChildCount(); i++) {
    final View child=mList.getChildAt(i);
    final boolean doesChildHaveHeader=child instanceof WrapperView && ((WrapperView)child).hasHeader();
    final boolean isChildFooter=mList.containsFooterView(child);
    if (doesChildHaveHeader || isChildFooter) {
      headerOffset=Math.min(child.getTop() - headerBottom,0);
      break;
    }
  }
  headerOffset+=mClippingToPadding ? mPaddingTop : 0;
  setHeaderOffet(headerOffset);
  if (!mIsDrawingListUnderStickyHeader) {
    mList.setTopClippingLength(mHeader.getMeasuredHeight() + mHeaderOffset);
  }
  updateHeaderVisibilities();
}",0.9906766917293232
7937,"private void updateOrClearHeader(int firstVisiblePosition){
  int adapterCount=mAdapter == null ? 0 : mAdapter.getCount();
  if (adapterCount == 0 || !mAreHeadersSticky) {
    return;
  }
  final int headerViewCount=mList.getHeaderViewsCount();
  final int realFirstVisibleItem=firstVisiblePosition - headerViewCount;
  if (mList.getChildCount() == 0 || realFirstVisibleItem < 0 || realFirstVisibleItem > adapterCount - 1) {
    clearHeader();
    return;
  }
  updateHeader(realFirstVisibleItem);
}","private void updateOrClearHeader(int firstVisiblePosition){
  final int adapterCount=mAdapter == null ? 0 : mAdapter.getCount();
  if (adapterCount == 0 || !mAreHeadersSticky) {
    return;
  }
  final int headerViewCount=mList.getHeaderViewsCount();
  final int realFirstVisibleItem=firstVisiblePosition - headerViewCount;
  final boolean isFirstViewBelowTop=mList.getChildAt(0).getTop() > 0;
  final boolean isFirstVisibleItemOutsideAdapterRange=realFirstVisibleItem > adapterCount - 1 || realFirstVisibleItem < 0;
  final boolean doesListHaveChildren=mList.getChildCount() != 0;
  if (!doesListHaveChildren || isFirstVisibleItemOutsideAdapterRange || isFirstViewBelowTop) {
    clearHeader();
    return;
  }
  updateHeader(realFirstVisibleItem);
}",0.7376
7938,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_test,container,false);
  mStickyList=(StickyListHeadersListView)v.findViewById(R.id.list);
  mStickyList.setOnItemClickListener(this);
  mStickyList.setOnHeaderClickListener(this);
  mStickyList.addHeaderView(inflater.inflate(R.layout.list_header,null));
  mStickyList.addFooterView(inflater.inflate(R.layout.list_footer,null));
  mStickyList.setEmptyView(v.findViewById(R.id.empty));
  mStickyList.setDrawingListUnderStickyHeader(true);
  mStickyList.setAreHeadersSticky(true);
  mAdapter=new TestBaseAdapter(getActivity());
  mStickyList.setAdapter(mAdapter);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_test,container,false);
  mStickyList=(StickyListHeadersListView)v.findViewById(R.id.list);
  mStickyList.setOnItemClickListener(this);
  mStickyList.setOnHeaderClickListener(this);
  mStickyList.setEmptyView(v.findViewById(R.id.empty));
  mStickyList.setDrawingListUnderStickyHeader(true);
  mStickyList.setAreHeadersSticky(true);
  mAdapter=new TestBaseAdapter(getActivity());
  mStickyList.setAdapter(mAdapter);
  return v;
}",0.593558282208589
7939,"private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth() - getPaddingLeft() - getPaddingRight()- (isScrollBarOverlay() ? 0 : getVerticalScrollbarWidth()),MeasureSpec.EXACTLY);
  int heightMeasureSpec=0;
  ViewGroup.LayoutParams params=mHeader.getLayoutParams();
  if (params == null) {
    mHeader.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  }
  if (params != null && params.height > 0) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  }
  mHeader.measure(widthMeasureSpec,heightMeasureSpec);
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR1) {
    mHeader.setLayoutDirection(this.getLayoutDirection());
  }
  mHeader.layout(getPaddingLeft(),0,getWidth() - getPaddingRight(),mHeader.getMeasuredHeight());
}","private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth() - getPaddingLeft() - getPaddingRight()- (isScrollBarOverlay() ? 0 : getVerticalScrollbarWidth()),MeasureSpec.EXACTLY);
  int heightMeasureSpec=0;
  ViewGroup.LayoutParams params=mHeader.getLayoutParams();
  if (params == null) {
    mHeader.setLayoutParams(new ViewGroup.MarginLayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));
  }
  if (params != null && params.height > 0) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  }
  mHeader.measure(widthMeasureSpec,heightMeasureSpec);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
    mHeader.setLayoutDirection(this.getLayoutDirection());
  }
  mHeader.layout(getPaddingLeft(),0,getWidth() - getPaddingRight(),mHeader.getMeasuredHeight());
}",0.9994848016486348
7940,"private boolean hasStickyHeaderAtPosition(int position){
  return mAreHeadersSticky && position > 0 && position < mAdapter.getCount() && mAdapter.getHeaderId(position) == mAdapter.getHeaderId(position - 1);
}","private boolean hasStickyHeaderAtPosition(int position){
  position-=getHeaderViewsCount();
  return mAreHeadersSticky && position > 0 && position < mAdapter.getCount() && mAdapter.getHeaderId(position) == mAdapter.getHeaderId(position - 1);
}",0.9223946784922394
7941,"@SuppressLint(""String_Node_Str"") @Override public void onHeaderClick(StickyListHeadersListView l,View header,int itemPosition,long headerId,boolean currentlySticky){
  Toast.makeText(getActivity(),""String_Node_Str"" + headerId,Toast.LENGTH_SHORT).show();
  mStickyList.smoothScrollToPositionFromTop(mAdapter.getSectionStart(itemPosition) + mStickyList.getHeaderViewsCount(),-mStickyList.getPaddingTop());
}","@SuppressLint(""String_Node_Str"") @Override public void onHeaderClick(StickyListHeadersListView l,View header,int itemPosition,long headerId,boolean currentlySticky){
  Toast.makeText(getActivity(),""String_Node_Str"" + headerId,Toast.LENGTH_SHORT).show();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mStickyList.smoothScrollToPositionFromTop(mAdapter.getSectionStart(itemPosition) + mStickyList.getHeaderViewsCount(),-mStickyList.getPaddingTop());
  }
}",0.9204545454545454
7942,"private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
  int heightMeasureSpec=0;
  ViewGroup.LayoutParams params=mHeader.getLayoutParams();
  if (params != null && params.height > 0) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  }
  mHeader.measure(widthMeasureSpec,heightMeasureSpec);
  mHeader.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),mHeader.getMeasuredHeight());
}","private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth() - getPaddingLeft() - getPaddingRight()- (isScrollBarOverlay() ? 0 : getVerticalScrollbarWidth()),MeasureSpec.EXACTLY);
  int heightMeasureSpec=0;
  ViewGroup.LayoutParams params=mHeader.getLayoutParams();
  if (params != null && params.height > 0) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  }
  mHeader.measure(widthMeasureSpec,heightMeasureSpec);
  mHeader.layout(getPaddingLeft(),0,getWidth() - getPaddingRight(),mHeader.getMeasuredHeight());
}",0.8822134387351779
7943,"@Override public void onHeaderClick(StickyListHeadersListView l,View header,int itemPosition,long headerId,boolean currentlySticky){
  Toast.makeText(getActivity(),""String_Node_Str"" + headerId,Toast.LENGTH_SHORT).show();
  mStickyList.smoothScrollToPosition(mAdapter.getSectionStart(itemPosition) + mStickyList.getHeaderViewsCount());
}","@SuppressLint(""String_Node_Str"") @Override public void onHeaderClick(StickyListHeadersListView l,View header,int itemPosition,long headerId,boolean currentlySticky){
  Toast.makeText(getActivity(),""String_Node_Str"" + headerId,Toast.LENGTH_SHORT).show();
  mStickyList.smoothScrollToPositionFromTop(mAdapter.getSectionStart(itemPosition) + mStickyList.getHeaderViewsCount(),-mStickyList.getPaddingTop());
}",0.9068825910931174
7944,"private void scrollChanged(int reportedFirstVisibleItem){
  int adapterCount=mAdapter == null ? 0 : mAdapter.getCount();
  if (adapterCount == 0 || !mAreHeadersSticky) {
    return;
  }
  final int listViewHeaderCount=getHeaderViewsCount();
  final int firstVisibleItem=fixedFirstVisibleItem(reportedFirstVisibleItem) - listViewHeaderCount;
  if (firstVisibleItem < 0 || firstVisibleItem > adapterCount - 1) {
    reset();
    updateHeaderVisibilities();
    invalidate();
    return;
  }
  long newHeaderId=mAdapter.getHeaderId(firstVisibleItem);
  if (mCurrentHeaderId == null || mCurrentHeaderId != newHeaderId) {
    mHeaderPosition=firstVisibleItem;
    mCurrentHeaderId=newHeaderId;
    mHeader=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
    measureHeader();
  }
  int childCount=getChildCount();
  if (childCount != 0) {
    View viewToWatch=null;
    int watchingChildDistance=Integer.MAX_VALUE;
    boolean viewToWatchIsFooter=false;
    for (int i=0; i < childCount; i++) {
      final View child=super.getChildAt(i);
      final boolean childIsFooter=mFooterViews != null && mFooterViews.contains(child);
      final int childDistance=child.getTop() - (mClippingToPadding ? getPaddingTop() : 0);
      if (childDistance < 0) {
        continue;
      }
      if (viewToWatch == null || (!viewToWatchIsFooter && !((WrapperView)viewToWatch).hasHeader()) || ((childIsFooter || ((WrapperView)child).hasHeader()) && childDistance < watchingChildDistance)) {
        viewToWatch=child;
        viewToWatchIsFooter=childIsFooter;
        watchingChildDistance=childDistance;
      }
    }
    final int headerHeight=getHeaderHeight();
    if (viewToWatch != null && (viewToWatchIsFooter || ((WrapperView)viewToWatch).hasHeader())) {
      if (firstVisibleItem == listViewHeaderCount && super.getChildAt(0).getTop() > 0 && !mClippingToPadding) {
        mHeaderBottomPosition=0;
      }
 else {
        final int paddingTop=mClippingToPadding ? getPaddingTop() : 0;
        mHeaderBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + paddingTop);
        mHeaderBottomPosition=mHeaderBottomPosition < paddingTop ? headerHeight + paddingTop : mHeaderBottomPosition;
      }
    }
 else {
      mHeaderBottomPosition=headerHeight + (mClippingToPadding ? getPaddingTop() : 0);
    }
  }
  updateHeaderVisibilities();
  invalidate();
}","private void scrollChanged(int reportedFirstVisibleItem){
  int adapterCount=mAdapter == null ? 0 : mAdapter.getCount();
  if (adapterCount == 0 || !mAreHeadersSticky) {
    return;
  }
  final int listViewHeaderCount=getHeaderViewsCount();
  final int firstVisibleItem=fixedFirstVisibleItem(reportedFirstVisibleItem) - listViewHeaderCount;
  if (firstVisibleItem < 0 || firstVisibleItem > adapterCount - 1) {
    reset();
    updateHeaderVisibilities();
    invalidate();
    return;
  }
  if (mHeaderPosition == null || mHeaderPosition != firstVisibleItem) {
    mHeaderPosition=firstVisibleItem;
    mCurrentHeaderId=mAdapter.getHeaderId(firstVisibleItem);
    mHeader=mAdapter.getHeaderView(mHeaderPosition,mHeader,this);
    measureHeader();
  }
  int childCount=getChildCount();
  if (childCount != 0) {
    View viewToWatch=null;
    int watchingChildDistance=Integer.MAX_VALUE;
    boolean viewToWatchIsFooter=false;
    for (int i=0; i < childCount; i++) {
      final View child=super.getChildAt(i);
      final boolean childIsFooter=mFooterViews != null && mFooterViews.contains(child);
      final int childDistance=child.getTop() - (mClippingToPadding ? getPaddingTop() : 0);
      if (childDistance < 0) {
        continue;
      }
      if (viewToWatch == null || (!viewToWatchIsFooter && !((WrapperView)viewToWatch).hasHeader()) || ((childIsFooter || ((WrapperView)child).hasHeader()) && childDistance < watchingChildDistance)) {
        viewToWatch=child;
        viewToWatchIsFooter=childIsFooter;
        watchingChildDistance=childDistance;
      }
    }
    final int headerHeight=getHeaderHeight();
    if (viewToWatch != null && (viewToWatchIsFooter || ((WrapperView)viewToWatch).hasHeader())) {
      if (firstVisibleItem == listViewHeaderCount && super.getChildAt(0).getTop() > 0 && !mClippingToPadding) {
        mHeaderBottomPosition=0;
      }
 else {
        final int paddingTop=mClippingToPadding ? getPaddingTop() : 0;
        mHeaderBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + paddingTop);
        mHeaderBottomPosition=mHeaderBottomPosition < paddingTop ? headerHeight + paddingTop : mHeaderBottomPosition;
      }
    }
 else {
      mHeaderBottomPosition=headerHeight + (mClippingToPadding ? getPaddingTop() : 0);
    }
  }
  updateHeaderVisibilities();
  invalidate();
}",0.9445989304812834
7945,"private void reset(){
  mHeader=null;
  mCurrentHeaderId=null;
  mHeaderBottomPosition=-1;
}","private void reset(){
  mHeader=null;
  mCurrentHeaderId=null;
  mHeaderPosition=null;
  mHeaderBottomPosition=-1;
}",0.8846153846153846
7946,"@Override public long getHeaderId(int position){
  return countries[position].subSequence(0,1).charAt(0);
}","@Override public long getHeaderId(int position){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  return countries[position].subSequence(0,1).charAt(0);
}",0.823076923076923
7947,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  if (changed) {
    reset();
  }
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  if (changed) {
    reset();
    scrollChanged(getFirstVisiblePosition());
  }
}",0.863905325443787
7948,"public StickyListHeadersListView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  TypedArray a=context.obtainStyledAttributes(attrs,ATTRS);
  divider=a.getDrawable(ATTRS_listDivider);
  dividerHeight=a.getDimensionPixelSize(ATTRS_dividerHeight,-1);
  a.recycle();
  super.setOnScrollListener(this);
  super.setDivider(null);
  super.setDividerHeight(0);
  setVerticalFadingEdgeEnabled(false);
  viewConfig=ViewConfiguration.get(context);
}","public StickyListHeadersListView(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  super.setOnScrollListener(this);
  super.setDivider(null);
  super.setDividerHeight(0);
  setVerticalFadingEdgeEnabled(false);
  viewConfig=ViewConfiguration.get(context);
}",0.7597911227154047
7949,"private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
  int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  header.measure(widthMeasureSpec,heightMeasureSpec);
  header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),header.getMeasuredHeight());
}","private void measureHeader(){
  int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
  int heightMeasureSpec=0;
  ViewGroup.LayoutParams params=header.getLayoutParams();
  if (params != null && params.height > 0) {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY);
  }
 else {
    heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  }
  header.measure(widthMeasureSpec,heightMeasureSpec);
  header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),header.getMeasuredHeight());
}",0.7558386411889597
7950,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int measuredWidth=MeasureSpec.getSize(widthMeasureSpec);
  int measuredHeight=0;
  if (header != null) {
    header.measure(MeasureSpec.makeMeasureSpec(measuredWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
    measuredHeight+=header.getMeasuredHeight();
  }
 else   if (divider != null) {
    measuredHeight+=dividerHeight;
  }
  item.measure(MeasureSpec.makeMeasureSpec(measuredWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  measuredHeight+=item.getMeasuredHeight();
  setMeasuredDimension(measuredWidth,measuredHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int measuredWidth=MeasureSpec.getSize(widthMeasureSpec);
  int childWidthMeasureSpec=MeasureSpec.makeMeasureSpec(measuredWidth,MeasureSpec.EXACTLY);
  int measuredHeight=0;
  if (header != null) {
    ViewGroup.LayoutParams params=header.getLayoutParams();
    if (params != null && params.height > 0) {
      header.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY));
    }
 else {
      header.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
    }
    measuredHeight+=header.getMeasuredHeight();
  }
 else   if (divider != null) {
    measuredHeight+=dividerHeight;
  }
  ViewGroup.LayoutParams params=item.getLayoutParams();
  if (params != null && params.height > 0) {
    item.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(params.height,MeasureSpec.EXACTLY));
  }
 else {
    item.measure(childWidthMeasureSpec,MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  }
  measuredHeight+=item.getMeasuredHeight();
  setMeasuredDimension(measuredWidth,measuredHeight);
}",0.6499454743729552
7951,"StickyListHeadersAdapterWrapper(Context context,StickyListHeadersAdapter delegate){
  this.context=context;
  this.delegate=delegate;
  delegate.registerDataSetObserver(this);
}","StickyListHeadersAdapterWrapper(Context context,StickyListHeadersAdapter delegate){
  this.context=context;
  this.delegate=delegate;
  delegate.registerDataSetObserver(dataSetObserver);
}",0.958904109589041
7952,"private void scrollChanged(int firstVisibleItem){
  if (adapter == null || adapter.getCount() == 0 || !areHeadersSticky)   return;
  firstVisibleItem=getFixedFirstVisibleItem(firstVisibleItem);
  long newHeaderId=adapter.delegate.getHeaderId(firstVisibleItem);
  if (currentHeaderId == null || currentHeaderId != newHeaderId) {
    headerPosition=firstVisibleItem;
    header=adapter.delegate.getHeaderView(headerPosition,header,this);
    measureHeader();
  }
  currentHeaderId=newHeaderId;
  final int childCount=getChildCount();
  if (childCount != 0) {
    WrapperView viewToWatch=(WrapperView)super.getChildAt(0);
    int firstChildDistance;
    if (clippingToPadding) {
      firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
    }
 else {
      firstChildDistance=Math.abs(viewToWatch.getTop());
    }
    int headerHeight=getHeaderHeight();
    for (int i=1; i < childCount; i++) {
      WrapperView child=(WrapperView)super.getChildAt(i);
      int secondChildDistance;
      if (clippingToPadding) {
        secondChildDistance=Math.abs((child.getTop() - getPaddingTop()) - headerHeight);
      }
 else {
        secondChildDistance=Math.abs(child.getTop() - headerHeight);
      }
      if (!viewToWatch.hasHeader() || (child.hasHeader() && secondChildDistance < firstChildDistance)) {
        viewToWatch=child;
      }
    }
    if (viewToWatch.hasHeader()) {
      if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
        headerBottomPosition=0;
      }
 else {
        if (clippingToPadding) {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
          headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
        }
 else {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
          headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
        }
      }
    }
 else {
      headerBottomPosition=headerHeight;
      if (clippingToPadding) {
        headerBottomPosition+=getPaddingTop();
      }
    }
  }
  int top=clippingToPadding ? getPaddingTop() : 0;
  for (int i=0; i < childCount; i++) {
    WrapperView child=(WrapperView)super.getChildAt(i);
    if (child.hasHeader()) {
      View childHeader=child.header;
      if (child.getTop() < top) {
        childHeader.setVisibility(View.INVISIBLE);
      }
 else {
        childHeader.setVisibility(View.VISIBLE);
      }
    }
  }
}","private void scrollChanged(int firstVisibleItem){
  if (adapter == null || adapter.getCount() == 0 || !areHeadersSticky)   return;
  firstVisibleItem=getFixedFirstVisibleItem(firstVisibleItem);
  long newHeaderId=adapter.delegate.getHeaderId(firstVisibleItem);
  if (currentHeaderId == null || currentHeaderId != newHeaderId) {
    headerPosition=firstVisibleItem;
    header=adapter.delegate.getHeaderView(headerPosition,header,this);
    measureHeader();
  }
  currentHeaderId=newHeaderId;
  final int childCount=getChildCount();
  if (childCount != 0) {
    WrapperView viewToWatch=null;
    int watchingChildDistance=99999;
    for (int i=0; i < childCount; i++) {
      WrapperView child=(WrapperView)super.getChildAt(i);
      int childDistance;
      if (clippingToPadding) {
        childDistance=child.getTop() - getPaddingTop();
      }
 else {
        childDistance=child.getTop();
      }
      if (childDistance < 0) {
        continue;
      }
      if (viewToWatch == null || !viewToWatch.hasHeader() || (child.hasHeader() && childDistance < watchingChildDistance)) {
        viewToWatch=child;
        watchingChildDistance=childDistance;
      }
    }
    int headerHeight=getHeaderHeight();
    if (viewToWatch != null && viewToWatch.hasHeader()) {
      if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
        headerBottomPosition=0;
      }
 else {
        if (clippingToPadding) {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
          headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
        }
 else {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
          headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
        }
      }
    }
 else {
      headerBottomPosition=headerHeight;
      if (clippingToPadding) {
        headerBottomPosition+=getPaddingTop();
      }
    }
  }
  int top=clippingToPadding ? getPaddingTop() : 0;
  for (int i=0; i < childCount; i++) {
    WrapperView child=(WrapperView)super.getChildAt(i);
    if (child.hasHeader()) {
      View childHeader=child.header;
      if (child.getTop() < top) {
        childHeader.setVisibility(View.INVISIBLE);
      }
 else {
        childHeader.setVisibility(View.VISIBLE);
      }
    }
  }
}",0.7494420775005072
7953,"private void scrollChanged(int firstVisibleItem){
  if (adapter == null || adapter.getCount() == 0 || !areHeadersSticky)   return;
  firstVisibleItem=getFixedFirstVisibleItem(firstVisibleItem);
  long newHeaderId=adapter.delegate.getHeaderId(firstVisibleItem);
  if (currentHeaderId == null || currentHeaderId != newHeaderId) {
    headerPosition=firstVisibleItem;
    header=adapter.delegate.getHeaderView(headerPosition,header,this);
    measureHeader();
  }
  currentHeaderId=newHeaderId;
  final int childCount=getChildCount();
  if (childCount != 0) {
    WrapperView viewToWatch=null;
    int watchingChildDistance=99999;
    for (int i=0; i < childCount; i++) {
      WrapperView child=(WrapperView)super.getChildAt(i);
      int childDistance;
      if (clippingToPadding) {
        childDistance=child.getTop() - getPaddingTop();
      }
 else {
        childDistance=child.getTop();
      }
      if (childDistance < 0) {
        continue;
      }
      if (viewToWatch == null || !viewToWatch.hasHeader() || (child.hasHeader() && childDistance < watchingChildDistance)) {
        viewToWatch=child;
        watchingChildDistance=childDistance;
      }
    }
    int headerHeight=getHeaderHeight();
    if (viewToWatch != null && viewToWatch.hasHeader()) {
      if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
        headerBottomPosition=0;
      }
 else {
        if (clippingToPadding) {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
          headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
        }
 else {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
          headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
        }
      }
    }
 else {
      headerBottomPosition=headerHeight;
      if (clippingToPadding) {
        headerBottomPosition+=getPaddingTop();
      }
    }
  }
  int top=clippingToPadding ? getPaddingTop() : 0;
  for (int i=0; i < childCount; i++) {
    WrapperView child=(WrapperView)super.getChildAt(i);
    if (child.hasHeader()) {
      View childHeader=child.header;
      if (child.getTop() < top) {
        childHeader.setVisibility(View.INVISIBLE);
      }
 else {
        childHeader.setVisibility(View.VISIBLE);
      }
    }
  }
}","private void scrollChanged(int firstVisibleItem){
  if (adapter == null) {
    return;
  }
  int adapterCount=adapter.getCount();
  if (adapterCount == 0 || !areHeadersSticky) {
  }
  final int listViewHeaderCount=getHeaderViewsCount();
  firstVisibleItem=getFixedFirstVisibleItem(firstVisibleItem) - listViewHeaderCount;
  if (firstVisibleItem < 0 || firstVisibleItem > adapterCount - 1) {
    header=null;
    currentHeaderId=null;
    headerBottomPosition=-1;
    updateHeaderVisibilities();
    invalidate();
    return;
  }
  long newHeaderId=adapter.delegate.getHeaderId(firstVisibleItem);
  if (currentHeaderId == null || currentHeaderId != newHeaderId) {
    headerPosition=firstVisibleItem;
    header=adapter.delegate.getHeaderView(headerPosition,header,this);
    measureHeader();
  }
  currentHeaderId=newHeaderId;
  int childCount=getChildCount();
  if (childCount != 0) {
    View viewToWatch=null;
    int watchingChildDistance=99999;
    boolean viewToWatchIsFooter=false;
    for (int i=0; i < childCount; i++) {
      View child=super.getChildAt(i);
      boolean childIsFooter=footerViews != null && footerViews.contains(child);
      int childDistance;
      if (clippingToPadding) {
        childDistance=child.getTop() - getPaddingTop();
      }
 else {
        childDistance=child.getTop();
      }
      if (childDistance < 0) {
        continue;
      }
      if (viewToWatch == null || (!viewToWatchIsFooter && !((WrapperView)viewToWatch).hasHeader()) || ((childIsFooter || ((WrapperView)child).hasHeader()) && childDistance < watchingChildDistance)) {
        viewToWatch=child;
        viewToWatchIsFooter=childIsFooter;
        watchingChildDistance=childDistance;
      }
    }
    int headerHeight=getHeaderHeight();
    if (viewToWatch != null && (viewToWatchIsFooter || ((WrapperView)viewToWatch).hasHeader())) {
      if (firstVisibleItem == listViewHeaderCount && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
        headerBottomPosition=0;
      }
 else {
        if (clippingToPadding) {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
          headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
        }
 else {
          headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
          headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
        }
      }
    }
 else {
      headerBottomPosition=headerHeight;
      if (clippingToPadding) {
        headerBottomPosition+=getPaddingTop();
      }
    }
  }
  updateHeaderVisibilities();
  invalidate();
}",0.7348469891411649
7954,"@Override public boolean performItemClick(View view,int position,long id){
  view=((WrapperView)view).item;
  return super.performItemClick(view,position,id);
}","@Override public boolean performItemClick(View view,int position,long id){
  if (view instanceof WrapperView) {
    view=((WrapperView)view).item;
  }
  return super.performItemClick(view,position,id);
}",0.8815426997245179
7955,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)getChildAt(i).getTag()) {
        if (getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          getChildAt(i).findViewById(R.id.header_view).setVisibility(View.INVISIBLE);
        }
 else {
          getChildAt(i).findViewById(R.id.header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (super.getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}",0.9894837476099426
7956,"@Override protected void dispatchDraw(Canvas canvas){
  super.dispatchDraw(canvas);
  if (header != null && areHeadersSticky) {
    if (headerHasChanged) {
      int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
      int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      header.measure(widthMeasureSpec,heightMeasureSpec);
      header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),headerHeight);
      headerHasChanged=false;
    }
    int top=headerBottomPosition - headerHeight;
    clippingRect.left=getPaddingLeft();
    clippingRect.right=getWidth() - getPaddingRight();
    clippingRect.bottom=top + headerHeight;
    if (clippingToPadding) {
      clippingRect.top=getPaddingTop();
    }
 else {
      clippingRect.top=0;
    }
    canvas.save();
    canvas.clipRect(clippingRect);
    canvas.translate(getPaddingLeft(),top);
    header.draw(canvas);
    canvas.restore();
  }
}","@Override protected void dispatchDraw(Canvas canvas){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {
    scrollChanged(getFirstVisiblePosition());
  }
  super.dispatchDraw(canvas);
  if (header != null && areHeadersSticky) {
    if (headerHasChanged) {
      int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
      int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      header.measure(widthMeasureSpec,heightMeasureSpec);
      header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),headerHeight);
      headerHasChanged=false;
    }
    int top=headerBottomPosition - headerHeight;
    clippingRect.left=getPaddingLeft();
    clippingRect.right=getWidth() - getPaddingRight();
    clippingRect.bottom=top + headerHeight;
    if (clippingToPadding) {
      clippingRect.top=getPaddingTop();
    }
 else {
      clippingRect.top=0;
    }
    canvas.save();
    canvas.clipRect(clippingRect);
    canvas.translate(getPaddingLeft(),top);
    header.draw(canvas);
    canvas.restore();
  }
}",0.9469069654164636
7957,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.__stickylistheaders_header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (super.getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
    scrollChanged(firstVisibleItem);
  }
}",0.1576879910213243
7958,"/** 
 * @param position the list position
 * @return an identifier for this header, a header for a position must always have a constant positive ID
 */
public abstract long getHeaderId(int position);","/** 
 * @param position the list position
 * @return an identifier for this header, a header for a position must always have a constant ID
 */
public abstract long getHeaderId(int position);",0.9768637532133676
7959,"private void scrollChanged(int firstVisibleItem){
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.__stickylistheaders_header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (super.getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    long currentHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    if (oldHeaderId != currentHeaderId) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=currentHeaderId;
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}","private void scrollChanged(int firstVisibleItem){
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.__stickylistheaders_header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (super.getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    long currentHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    if (oldHeaderId == null || oldHeaderId != currentHeaderId) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=currentHeaderId;
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}",0.9962276529440708
7960,"private void reset(){
  headerBottomPosition=0;
  headerHeight=-1;
  header=null;
  oldHeaderId=-1;
  headerHasChanged=true;
}","private void reset(){
  headerBottomPosition=0;
  headerHeight=-1;
  header=null;
  oldHeaderId=null;
  headerHasChanged=true;
}",0.9763779527559056
7961,"private void scrollChanged(int firstVisibleItem){
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.__stickylistheaders_header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (super.getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    long currentHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    if (oldHeaderId == null || oldHeaderId != currentHeaderId) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=currentHeaderId;
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}","private void scrollChanged(int firstVisibleItem){
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  firstVisibleItem=getFixedFirstVisibleItem(firstVisibleItem);
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=super.getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((super.getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(super.getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)super.getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=super.getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.__stickylistheaders_header_view).getHeight();
        if (firstVisibleItem == 0 && super.getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    long currentHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    if (oldHeaderId == null || oldHeaderId != currentHeaderId) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=currentHeaderId;
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)super.getChildAt(i).getTag()) {
        if (super.getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.INVISIBLE);
        }
 else {
          super.getChildAt(i).findViewById(R.id.__stickylistheaders_header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}",0.9504284994118636
7962,"@Override public void onRestoreInstanceState(Parcelable state){
  headerHeight=((Bundle)state).getInt(HEADER_HEIGHT);
  super.onRestoreInstanceState(((Bundle)state).getParcelable(SUPER_INSTANCE_STATE));
}","@Override public void onRestoreInstanceState(Parcelable state){
  headerHeight=((Bundle)state).getInt(HEADER_HEIGHT);
  headerHasChanged=true;
  super.onRestoreInstanceState(((Bundle)state).getParcelable(SUPER_INSTANCE_STATE));
}",0.9422632794457276
7963,"@Override protected void dispatchDraw(Canvas canvas){
  super.dispatchDraw(canvas);
  if (header != null && areHeadersSticky) {
    if (headerHasChanged) {
      int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.AT_MOST);
      int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      header.measure(widthMeasureSpec,heightMeasureSpec);
      header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),headerHeight);
      headerHasChanged=false;
    }
    int top=headerBottomPosition - headerHeight;
    clippingRect.left=getPaddingLeft();
    clippingRect.right=getWidth() - getPaddingRight();
    clippingRect.bottom=top + headerHeight;
    if (clippingToPadding) {
      clippingRect.top=getPaddingTop();
    }
 else {
      clippingRect.top=0;
    }
    canvas.save();
    canvas.clipRect(clippingRect);
    canvas.translate(getPaddingLeft(),top);
    header.draw(canvas);
    canvas.restore();
  }
}","@Override protected void dispatchDraw(Canvas canvas){
  super.dispatchDraw(canvas);
  if (header != null && areHeadersSticky) {
    if (headerHasChanged) {
      int widthMeasureSpec=MeasureSpec.makeMeasureSpec(getWidth(),MeasureSpec.EXACTLY);
      int heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      header.measure(widthMeasureSpec,heightMeasureSpec);
      header.layout(getLeft() + getPaddingLeft(),0,getRight() - getPaddingRight(),headerHeight);
      headerHasChanged=false;
    }
    int top=headerBottomPosition - headerHeight;
    clippingRect.left=getPaddingLeft();
    clippingRect.right=getWidth() - getPaddingRight();
    clippingRect.bottom=top + headerHeight;
    if (clippingToPadding) {
      clippingRect.top=getPaddingTop();
    }
 else {
      clippingRect.top=0;
    }
    canvas.save();
    canvas.clipRect(clippingRect);
    canvas.translate(getPaddingLeft(),top);
    header.draw(canvas);
    canvas.restore();
  }
}",0.9948559670781894
7964,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      if (lastWatchedViewHeader != null) {
        lastWatchedViewHeader.setVisibility(View.VISIBLE);
      }
      View viewToWatch=getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
        lastWatchedViewHeader=viewToWatch.findViewById(R.id.header_view);
        if (headerBottomPosition == (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight) && viewToWatch.getTop() < (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight)) {
          lastWatchedViewHeader.setVisibility(View.INVISIBLE);
        }
 else {
          lastWatchedViewHeader.setVisibility(View.VISIBLE);
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
  }
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      if (lastWatchedViewHeader != null) {
        lastWatchedViewHeader.setVisibility(View.VISIBLE);
      }
      View viewToWatch=getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
        lastWatchedViewHeader=viewToWatch.findViewById(R.id.header_view);
        if (headerBottomPosition == (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight) && viewToWatch.getTop() < (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight)) {
          lastWatchedViewHeader.setVisibility(View.INVISIBLE);
        }
 else {
          lastWatchedViewHeader.setVisibility(View.VISIBLE);
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
  }
}",0.9950632520826904
7965,"@Override public void setAdapter(ListAdapter adapter){
  if (!clipToPaddingHasBeenSet) {
    clippingToPadding=true;
  }
  if (!(adapter instanceof StickyListHeadersAdapter))   throw new IllegalArgumentException(""String_Node_Str"");
  ((StickyListHeadersAdapter)adapter).setDivider(divider);
  ((StickyListHeadersAdapter)adapter).setDividerHeight(dividerHeight);
  super.setAdapter(adapter);
}","@Override public void setAdapter(ListAdapter adapter){
  if (!clipToPaddingHasBeenSet) {
    clippingToPadding=true;
  }
  if (!(adapter instanceof StickyListHeadersAdapter))   throw new IllegalArgumentException(""String_Node_Str"");
  ((StickyListHeadersAdapter)adapter).setDivider(divider);
  ((StickyListHeadersAdapter)adapter).setDividerHeight(dividerHeight);
  reset();
  super.setAdapter(adapter);
}",0.9861635220125786
7966,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      if (lastWatchedViewHeader != null) {
        lastWatchedViewHeader.setVisibility(View.VISIBLE);
      }
      View viewToWatch=getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
        lastWatchedViewHeader=viewToWatch.findViewById(R.id.header_view);
        if (headerBottomPosition == (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight) && viewToWatch.getTop() < (clippingToPadding ? headerHeight + getPaddingTop() : headerHeight)) {
          lastWatchedViewHeader.setVisibility(View.INVISIBLE);
        }
 else {
          lastWatchedViewHeader.setVisibility(View.VISIBLE);
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
  }
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  if (scrollListener != null) {
    scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
  }
  if (getAdapter() == null || getAdapter().getCount() == 0)   return;
  if (areHeadersSticky) {
    if (getChildCount() != 0) {
      View viewToWatch=getChildAt(0);
      for (int i=1; i < getChildCount(); i++) {
        int firstChildDistance;
        if (clippingToPadding) {
          firstChildDistance=Math.abs((viewToWatch.getTop() - getPaddingTop()));
        }
 else {
          firstChildDistance=Math.abs(viewToWatch.getTop());
        }
        int secondChildDistance;
        if (clippingToPadding) {
          secondChildDistance=Math.abs((getChildAt(i).getTop() - getPaddingTop()) - headerHeight);
        }
 else {
          secondChildDistance=Math.abs(getChildAt(i).getTop() - headerHeight);
        }
        if (!(Boolean)viewToWatch.getTag() || ((Boolean)getChildAt(i).getTag() && secondChildDistance < firstChildDistance)) {
          viewToWatch=getChildAt(i);
        }
      }
      if ((Boolean)viewToWatch.getTag()) {
        if (headerHeight < 0)         headerHeight=viewToWatch.findViewById(R.id.header_view).getHeight();
        if (firstVisibleItem == 0 && getChildAt(0).getTop() > 0 && !clippingToPadding) {
          headerBottomPosition=0;
        }
 else {
          if (clippingToPadding) {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight + getPaddingTop());
            headerBottomPosition=headerBottomPosition < getPaddingTop() ? headerHeight + getPaddingTop() : headerBottomPosition;
          }
 else {
            headerBottomPosition=Math.min(viewToWatch.getTop(),headerHeight);
            headerBottomPosition=headerBottomPosition < 0 ? headerHeight : headerBottomPosition;
          }
        }
      }
 else {
        headerBottomPosition=headerHeight;
        if (clippingToPadding) {
          headerBottomPosition+=getPaddingTop();
        }
      }
    }
    if (Build.VERSION.SDK_INT < 11) {
      if (!clippingToPadding && getPaddingTop() > 0) {
        if (getChildAt(0).getTop() > 0) {
          if (firstVisibleItem > 0)           firstVisibleItem-=1;
        }
      }
    }
    if (oldHeaderId != ((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem)) {
      headerHasChanged=true;
      header=((StickyListHeadersAdapter)getAdapter()).getHeaderView(firstVisibleItem,header);
      header.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,headerHeight));
    }
    oldHeaderId=((StickyListHeadersAdapter)getAdapter()).getHeaderId(firstVisibleItem);
    for (int i=0; i < getChildCount(); i++) {
      if ((Boolean)getChildAt(i).getTag()) {
        if (getChildAt(i).getTop() < (clippingToPadding ? getPaddingTop() : 0)) {
          getChildAt(i).findViewById(R.id.header_view).setVisibility(View.INVISIBLE);
        }
 else {
          getChildAt(i).findViewById(R.id.header_view).setVisibility(View.VISIBLE);
        }
      }
    }
  }
}",0.6504243948443885
7967,"LoadThread(Context ctxt){
  super();
  this.ctxt=ctxt.getApplicationContext();
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
}","LoadThread(Context ctxt){
  super();
  this.ctxt=ctxt.getApplicationContext();
}",0.6477732793522267
7968,"@Override public void run(){
  PresoRoster.getInstance().load(ctxt);
  EventBus.getDefault().postSticky(new RosterLoadedEvent());
}","@Override public void run(){
  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
  PresoRoster.getInstance().load(ctxt);
  EventBus.getDefault().postSticky(new RosterLoadedEvent());
}",0.7507163323782235
7969,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,model);
  Observable.create(source()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).takeUntil(s -> (isCancelled.get())).doOnComplete(() -> {
    if (!isCancelled.get()) {
      Toast.makeText(getActivity(),R.string.done,Toast.LENGTH_SHORT).show();
    }
  }
).subscribe(s -> adapter.add(s));
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,model);
  Observable<String> observable=Observable.create(source()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).doOnComplete(() -> {
    Toast.makeText(getActivity(),R.string.done,Toast.LENGTH_SHORT).show();
  }
);
  sub=observable.subscribe(s -> {
    adapter.add(s);
  }
);
}",0.7504798464491362
7970,"@Override public void onDestroy(){
  isCancelled.set(true);
  super.onDestroy();
}","@Override public void onDestroy(){
  if (sub != null && !sub.isDisposed()) {
    sub.dispose();
  }
  super.onDestroy();
}",0.7156862745098039
7971,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,model);
  Observable.create(new WordSource(getActivity())).subscribeOn(Schedulers.io()).map(s -> (s.toUpperCase())).observeOn(AndroidSchedulers.mainThread()).takeUntil(s -> (isCancelled.get())).doOnComplete(() -> {
    if (!isCancelled.get()) {
      Toast.makeText(getActivity(),R.string.done,Toast.LENGTH_SHORT).show();
    }
  }
).subscribe(s -> adapter.add(s),error -> Toast.makeText(getActivity(),error.getMessage(),Toast.LENGTH_LONG).show());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  adapter=new ArrayAdapter<>(getActivity(),android.R.layout.simple_list_item_1,model);
  Observable<String> observable=Observable.create(new WordSource(getActivity())).subscribeOn(Schedulers.io()).map(s -> (s.toUpperCase())).observeOn(AndroidSchedulers.mainThread()).doOnComplete(() -> {
    Toast.makeText(getActivity(),R.string.done,Toast.LENGTH_SHORT).show();
  }
);
  sub=observable.subscribe(s -> adapter.add(s),error -> Toast.makeText(getActivity(),error.getMessage(),Toast.LENGTH_LONG).show());
}",0.8555466879489226
7972,"@Override public void onDestroy(){
  isCancelled.set(true);
  super.onDestroy();
}","@Override public void onDestroy(){
  if (sub != null && !sub.isDisposed()) {
    sub.dispose();
  }
  super.onDestroy();
}",0.7156862745098039
7973,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  ViewPager pager=(ViewPager)findViewById(R.id.pager);
  adapter=new SampleAdapter(this,getSupportFragmentManager());
  pager.setAdapter(adapter);
  tabs=(TabLayout)findViewById(R.id.tabs);
  tabs.setupWithViewPager(pager);
  tabs.setTabMode(TabLayout.MODE_FIXED);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  pager=(ViewPager)findViewById(R.id.pager);
  adapter=new SampleAdapter(this,getSupportFragmentManager());
  pager.setAdapter(adapter);
  tabs=(TabLayout)findViewById(R.id.tabs);
  tabs.setupWithViewPager(pager);
  tabs.setTabMode(TabLayout.MODE_FIXED);
}",0.9872122762148338
7974,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.fixed) {
    item.setChecked(!item.isChecked());
    if (item.isChecked()) {
      adapter.setPageCount(3);
      tabs.setTabMode(TabLayout.MODE_FIXED);
    }
 else {
      adapter.setPageCount(10);
      tabs.setTabMode(TabLayout.MODE_SCROLLABLE);
    }
    adapter.notifyDataSetChanged();
    tabs.setTabsFromPagerAdapter(adapter);
    return (true);
  }
  return (super.onOptionsItemSelected(item));
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.fixed) {
    item.setChecked(!item.isChecked());
    if (item.isChecked()) {
      adapter.setPageCount(3);
      tabs.setTabMode(TabLayout.MODE_FIXED);
    }
 else {
      adapter.setPageCount(10);
      tabs.setTabMode(TabLayout.MODE_SCROLLABLE);
    }
    adapter.notifyDataSetChanged();
    if (pager.getCurrentItem() >= 3) {
      pager.setCurrentItem(2);
    }
    return (true);
  }
  return (super.onOptionsItemSelected(item));
}",0.8551992225461613
7975,"void setVideos(Cursor c){
  if (c == null) {
    videos=null;
    notifyDataSetChanged();
  }
 else {
    ArrayList<Video> temp=new ArrayList<>();
    c.moveToFirst();
    while (c.moveToNext()) {
      temp.add(new Video(c));
    }
    if (videos == null) {
      videos=new ArrayList<>();
    }
    sortAndApply(temp);
  }
}","void setVideos(Cursor c){
  if (c == null) {
    videos=null;
    notifyDataSetChanged();
  }
 else {
    ArrayList<Video> temp=new ArrayList<>();
    while (c.moveToNext()) {
      temp.add(new Video(c));
    }
    if (videos == null) {
      videos=new ArrayList<>();
    }
    sortAndApply(temp);
  }
}",0.9445324881141046
7976,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (event.getRepeatCount() == 0) {
    if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
      int position=adapter.getCheckedPosition();
      if (position >= 0) {
        Uri videoUri=adapter.getVideoUri(position);
        if (event.isAltPressed()) {
          playVideo(videoUri);
        }
 else         if (event.isCtrlPressed()) {
          showLargeThumbnail(videoUri);
        }
        return (true);
      }
    }
 else     if (keyCode == KeyEvent.KEYCODE_SLASH && event.isAltPressed() && Build.VERSION.SDK_INT <= Build.VERSION_CODES.M) {
      new ShortcutDialogFragment().show(getFragmentManager(),""String_Node_Str"");
      return (true);
    }
  }
  return (super.onKeyDown(keyCode,event));
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (event.getRepeatCount() == 0) {
    if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
      int position=adapter.getCheckedPosition();
      if (position >= 0) {
        Uri videoUri=adapter.getVideoUri(position);
        if (event.isAltPressed()) {
          playVideo(videoUri);
        }
 else         if (event.isCtrlPressed()) {
          showLargeThumbnail(videoUri);
        }
        return (true);
      }
    }
 else     if (keyCode == KeyEvent.KEYCODE_SLASH && event.isMetaPressed() && Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
      new ShortcutDialogFragment().show(getFragmentManager(),""String_Node_Str"");
      return (true);
    }
  }
  return (super.onKeyDown(keyCode,event));
}",0.9934810951760104
7977,"@Override public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data,Menu menu,int deviceId){
  super.onProvideKeyboardShortcuts(data,menu,deviceId);
  List<KeyboardShortcutInfo> shortcuts=new ArrayList<>();
  String caption=getString(R.string.menu_video);
  shortcuts.add(new KeyboardShortcutInfo(caption,KeyEvent.KEYCODE_DPAD_RIGHT,KeyEvent.META_ALT_ON));
  caption=getString(R.string.menu_thumbnail);
  shortcuts.add(new KeyboardShortcutInfo(caption,KeyEvent.KEYCODE_DPAD_RIGHT,KeyEvent.META_CTRL_ON));
  data.add(new KeyboardShortcutGroup(getString(R.string.msg_custom),shortcuts));
}","@TargetApi(Build.VERSION_CODES.N) @Override public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data,Menu menu,int deviceId){
  super.onProvideKeyboardShortcuts(data,menu,deviceId);
  List<KeyboardShortcutInfo> shortcuts=new ArrayList<>();
  String caption=getString(R.string.menu_video);
  shortcuts.add(new KeyboardShortcutInfo(caption,KeyEvent.KEYCODE_DPAD_RIGHT,KeyEvent.META_ALT_ON));
  caption=getString(R.string.menu_thumbnail);
  shortcuts.add(new KeyboardShortcutInfo(caption,KeyEvent.KEYCODE_DPAD_RIGHT,KeyEvent.META_CTRL_ON));
  data.add(new KeyboardShortcutGroup(getString(R.string.msg_custom),shortcuts));
}",0.9724919093851132
7978,"private void rotate(){
  int target=(getOrientation() == Configuration.ORIENTATION_LANDSCAPE ? ActivityInfo.SCREEN_ORIENTATION_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
  main.getActivity().setRequestedOrientation(target);
}","private void rotate(){
  int target=(getOrientation() == Configuration.ORIENTATION_LANDSCAPE ? ActivityInfo.SCREEN_ORIENTATION_PORTRAIT : ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  main.getActivity().setRequestedOrientation(target);
}",0.9682875264270612
7979,"void populateWhitelist(MultiSelectListPreference whitelist){
  List<ApplicationInfo> apps=pm.getInstalledApplications(PackageManager.GET_PERMISSIONS);
  Collections.sort(apps,new ApplicationInfo.DisplayNameComparator(pm));
  ArrayList<CharSequence> displayNames=new ArrayList<CharSequence>();
  ArrayList<String> packageNames=new ArrayList<String>();
  for (  ApplicationInfo app : apps) {
    try {
      PackageInfo pkgInfo=pm.getPackageInfo(app.packageName,PackageManager.GET_PERMISSIONS);
      if (pkgInfo.requestedPermissions != null) {
        for (        String perm : pkgInfo.requestedPermissions) {
          if (SYSTEM_ALERT_WINDOW.equals(perm)) {
            displayNames.add(app.loadLabel(pm));
            packageNames.add(app.packageName);
            break;
          }
        }
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
  }
  whitelist.setEntries(displayNames.toArray(new CharSequence[displayNames.size()]));
  whitelist.setEntryValues(packageNames.toArray(new String[packageNames.size()]));
}","void populateWhitelist(MultiSelectListPreference whitelist){
  List<ApplicationInfo> apps=pm.getInstalledApplications(0);
  Collections.sort(apps,new ApplicationInfo.DisplayNameComparator(pm));
  ArrayList<CharSequence> displayNames=new ArrayList<CharSequence>();
  ArrayList<String> packageNames=new ArrayList<String>();
  for (  ApplicationInfo app : apps) {
    try {
      PackageInfo pkgInfo=pm.getPackageInfo(app.packageName,PackageManager.GET_PERMISSIONS);
      if (pkgInfo.requestedPermissions != null) {
        for (        String perm : pkgInfo.requestedPermissions) {
          if (SYSTEM_ALERT_WINDOW.equals(perm)) {
            displayNames.add(app.loadLabel(pm));
            packageNames.add(app.packageName);
            break;
          }
        }
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
  }
  whitelist.setEntries(displayNames.toArray(new CharSequence[displayNames.size()]));
  whitelist.setEntryValues(packageNames.toArray(new String[packageNames.size()]));
}",0.9849441476444876
7980,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  initAdapter();
  Drawable d=getResources().getDrawable(R.drawable.action_bar_background);
  getActionBar().setBackgroundDrawable(d);
  getActionBar().setSplitBackgroundDrawable(d);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  initAdapter();
  Drawable d=getResources().getDrawable(R.drawable.action_bar_background);
  getActionBar().setBackgroundDrawable(d);
}",0.9194630872483222
7981,"void onChecked(int position,boolean isChecked){
  if (choiceMode.isSingleChoice()) {
    int checked=choiceMode.getCheckedPosition();
    if (checked >= 0) {
      RowController row=(RowController)rv.findViewHolderForPosition(checked);
      if (row != null) {
        row.setChecked(false);
      }
    }
  }
  choiceMode.setChecked(position,isChecked);
}","void onChecked(int position,boolean isChecked){
  if (choiceMode.isSingleChoice()) {
    int checked=choiceMode.getCheckedPosition();
    if (checked >= 0) {
      RowController row=(RowController)rv.findViewHolderForAdapterPosition(checked);
      if (row != null) {
        row.setChecked(false);
      }
    }
  }
  choiceMode.setChecked(position,isChecked);
}",0.9902642559109874
7982,"static void scheduleExactAlarm(Context ctxt,AlarmManager alarms,long period,boolean isDownload){
  Intent i=buildBaseIntent(ctxt).putExtra(EXTRA_PERIOD,period).putExtra(EXTRA_IS_DOWNLOAD,isDownload);
  PendingIntent pi=PendingIntent.getBroadcast(ctxt,0,i,0);
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    alarms.setAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    alarms.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
 else {
    alarms.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
}","static void scheduleExactAlarm(Context ctxt,AlarmManager alarms,long period,boolean isDownload){
  Intent i=buildBaseIntent(ctxt).putExtra(EXTRA_PERIOD,period).putExtra(EXTRA_IS_DOWNLOAD,isDownload);
  PendingIntent pi=PendingIntent.getBroadcast(ctxt,0,i,0);
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    alarms.setAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    alarms.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
 else {
    alarms.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + period,pi);
  }
}",0.99609375
7983,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  task=new LoadCursorTask();
  task.execute();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  task=new LoadCursorTask().execute();
}",0.9716312056737588
7984,"public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask();
  task.execute(values);
}","public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask().execute(values);
}",0.9905437352245864
7985,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.row,current,new String[]{DatabaseHelper.TITLE,DatabaseHelper.VALUE},new int[]{R.id.title,R.id.value},0);
  setListAdapter(adapter);
  if (current == null) {
    db=new DatabaseHelper(getActivity());
    task=new LoadCursorTask();
    task.execute();
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.row,current,new String[]{DatabaseHelper.TITLE,DatabaseHelper.VALUE},new int[]{R.id.title,R.id.value},0);
  setListAdapter(adapter);
  if (current == null) {
    db=new DatabaseHelper(getActivity());
    task=new LoadCursorTask().execute();
  }
}",0.9665924276169264
7986,"public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask();
  task.execute(values);
}","public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask().execute(values);
}",0.9905437352245864
7987,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.row,current,new String[]{DatabaseHelper.TITLE,DatabaseHelper.VALUE},new int[]{R.id.title,R.id.value},0);
  setListAdapter(adapter);
  if (current == null) {
    db=new DatabaseHelper(getActivity());
    task=new LoadCursorTask();
    task.execute();
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity(),R.layout.row,current,new String[]{DatabaseHelper.TITLE,DatabaseHelper.VALUE},new int[]{R.id.title,R.id.value},0);
  setListAdapter(adapter);
  if (current == null) {
    db=new DatabaseHelper(getActivity());
    task=new LoadCursorTask().execute();
  }
}",0.9665924276169264
7988,"public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask();
  task.execute(values);
}","public void onClick(DialogInterface di,int whichButton){
  ContentValues values=new ContentValues(2);
  AlertDialog dlg=(AlertDialog)di;
  EditText title=(EditText)dlg.findViewById(R.id.title);
  EditText value=(EditText)dlg.findViewById(R.id.value);
  values.put(DatabaseHelper.TITLE,title.getText().toString());
  values.put(DatabaseHelper.VALUE,value.getText().toString());
  task=new InsertTask().execute(values);
}",0.9905437352245864
7989,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  setRetainInstance(true);
  db=new DatabaseHelper(getActivity());
  task=new LoadCursorTask(getActivity().getApplicationContext());
  task.execute();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  setRetainInstance(true);
  db=new DatabaseHelper(getActivity());
  task=new LoadCursorTask(getActivity().getApplicationContext()).execute();
}",0.986206896551724
7990,"void setVideos(Cursor videos){
  this.videos=videos;
}","void setVideos(Cursor videos){
  this.videos=videos;
  notifyDataSetChanged();
}",0.8059701492537313
7991,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  details=(DetailsFragment)getFragmentManager().findFragmentById(R.id.details);
  if (details == null) {
    details=new DetailsFragment();
    getFragmentManager().beginTransaction().add(android.R.id.content,details).commit();
  }
  url=getIntent().getStringExtra(EXTRA_URL);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  details=(DetailsFragment)getFragmentManager().findFragmentById(android.R.id.content);
  if (details == null) {
    details=new DetailsFragment();
    getFragmentManager().beginTransaction().add(android.R.id.content,details).commit();
  }
  url=getIntent().getStringExtra(EXTRA_URL);
}",0.9709762532981532
7992,"@Override void onChecked(int position,boolean isChecked){
  super.onChecked(position,isChecked);
  if (getCheckedCount() > 0) {
    if (activeMode == null) {
      activeMode=startActionMode(this);
    }
 else {
      updateSubtitle(activeMode);
    }
  }
 else   if (getCheckedCount() == 0 && activeMode != null) {
    activeMode.finish();
  }
}","@Override void onChecked(int position,boolean isChecked){
  super.onChecked(position,isChecked);
  if (isChecked) {
    if (activeMode == null) {
      activeMode=startActionMode(this);
    }
 else {
      updateSubtitle(activeMode);
    }
  }
 else   if (getCheckedCount() == 0 && activeMode != null) {
    activeMode.finish();
  }
}",0.9558823529411764
7993,"@Override void onChecked(int position,boolean isChecked){
  super.onChecked(position,isChecked);
  if (getCheckedCount() > 0) {
    if (activeMode == null) {
      activeMode=startActionMode(this);
    }
 else {
      updateSubtitle(activeMode);
    }
  }
 else   if (getCheckedCount() == 0 && activeMode != null) {
    activeMode.finish();
  }
}","@Override void onChecked(int position,boolean isChecked){
  super.onChecked(position,isChecked);
  if (isChecked) {
    if (activeMode == null) {
      activeMode=startActionMode(this);
    }
 else {
      updateSubtitle(activeMode);
    }
  }
 else   if (getCheckedCount() == 0 && activeMode != null) {
    activeMode.finish();
  }
}",0.9558823529411764
7994,"void setVideos(Cursor videos){
  this.videos=videos;
}","void setVideos(Cursor videos){
  this.videos=videos;
  notifyDataSetChanged();
}",0.8059701492537313
7995,"void setVideos(Cursor videos){
  this.videos=videos;
}","void setVideos(Cursor videos){
  this.videos=videos;
  notifyDataSetChanged();
}",0.8059701492537313
7996,"@Before public void init(){
  list=(ListView)main.get().findViewById(android.R.id.list);
}","@Before public void init(){
  list=(ListView)main.get().findViewById(android.R.id.list);
  main.instrumentation().setInTouchMode(true);
}",0.7929515418502202
7997,"@Before public void init(){
  LayoutInflater inflater=LayoutInflater.from(InstrumentationRegistry.getTargetContext());
  root=inflater.inflate(R.layout.add,null);
  root.measure(800,480);
  root.layout(0,0,800,480);
  field=root.findViewById(R.id.title);
}","@Before public void init(){
  InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable(){
    @Override public void run(){
      LayoutInflater inflater=LayoutInflater.from(InstrumentationRegistry.getTargetContext());
      root=inflater.inflate(R.layout.add,null);
    }
  }
);
  root.measure(800,480);
  root.layout(0,0,800,480);
  field=root.findViewById(R.id.title);
}",0.7962674961119751
7998,"@Test public void exists(){
  Assert.assertNotNull(field);
}","@Test public void exists(){
  init();
  Assert.assertNotNull(field);
}",0.9230769230769232
7999,"@Test public void position(){
  Assert.assertEquals(0,field.getTop());
  Assert.assertEquals(0,field.getLeft());
}","@Test public void position(){
  init();
  Assert.assertEquals(0,field.getTop());
  Assert.assertEquals(0,field.getLeft());
}",0.957983193277311
8000,"private void showHelp(){
  if (sidebar != null) {
    openSidebar();
    if (help == null) {
      help=SimpleContentFragment.newInstance(FILE_HELP);
    }
    getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help).commit();
  }
 else {
    Intent i=new Intent(this,SimpleContentActivity.class);
    i.putExtra(SimpleContentActivity.EXTRA_FILE,FILE_HELP);
    startActivity(i);
  }
}","private void showHelp(){
  if (sidebar != null) {
    openSidebar();
    if (help == null) {
      help=SimpleContentFragment.newInstance(FILE_HELP);
    }
    getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help,HELP).commit();
  }
 else {
    Intent i=new Intent(this,SimpleContentActivity.class);
    i.putExtra(SimpleContentActivity.EXTRA_FILE,FILE_HELP);
    startActivity(i);
  }
}",0.994026284348865
