record_number,buggy_code,fixed_code,code_similarity
98001,"private Object tokenToNumber(){
  Token t=token();
  String nStr=token().str;
  int base=10;
  if (nStr.contains(""String_Node_Str"")) {
    base=16;
    nStr=nStr.substring(2);
  }
 else   if (nStr.contains(""String_Node_Str"")) {
    base=2;
    nStr=nStr.substring(2);
  }
  int len=nStr.length();
  if (nStr.equals(""String_Node_Str"")) {
    return Double.NaN;
  }
  if (nStr.equals(""String_Node_Str"")) {
    return Double.POSITIVE_INFINITY;
  }
  if (t.type == T_TYPE.NUMBER_DOUBLE || t.type == T_TYPE.NUMBER_FLOAT) {
    try {
      if (t.type == T_TYPE.NUMBER_FLOAT) {
        return Float.parseFloat(nStr.substring(0,len - 1));
      }
      return Double.parseDouble(nStr);
    }
 catch (    NumberFormatException e) {
      return new BigDecimal(nStr);
    }
  }
  if (t.type == T_TYPE.NUMBER_INT || t.type == T_TYPE.NUMBER_LONG) {
    try {
      if (t.type == T_TYPE.NUMBER_INT) {
        return Integer.parseInt(nStr,base);
      }
      return Long.parseLong(nStr.substring(0,len - 1),base);
    }
 catch (    NumberFormatException e) {
      return new BigInteger(nStr);
    }
  }
  throw new IllegalArgumentException(token().type.name());
}","private Object tokenToNumber(){
  Token t=token();
  String nStr=token().str;
  int base=10;
  if (nStr.contains(""String_Node_Str"")) {
    base=16;
    nStr=nStr.substring(2);
  }
 else   if (nStr.contains(""String_Node_Str"")) {
    base=2;
    nStr=nStr.substring(2);
  }
  int len=nStr.length();
  if (nStr.equals(""String_Node_Str"")) {
    return Double.NaN;
  }
  if (nStr.equals(""String_Node_Str"")) {
    return Double.POSITIVE_INFINITY;
  }
  if (t.type == T_TYPE.NUMBER_DOUBLE || t.type == T_TYPE.NUMBER_FLOAT) {
    try {
      if (t.type == T_TYPE.NUMBER_FLOAT) {
        return Float.parseFloat(nStr.substring(0,len - 1));
      }
      return Double.parseDouble(nStr);
    }
 catch (    NumberFormatException e) {
      return new BigDecimal(nStr);
    }
  }
  if (t.type == T_TYPE.NUMBER_INT || t.type == T_TYPE.NUMBER_LONG) {
    try {
      if (t.type == T_TYPE.NUMBER_INT) {
        return Integer.parseInt(nStr,base);
      }
      return Long.parseLong(nStr.substring(0,len - 1),base);
    }
 catch (    NumberFormatException e) {
      try {
        return new BigInteger(nStr,base);
      }
 catch (      NumberFormatException e2) {
        throw DBLogger.newUser(""String_Node_Str"" + t.str);
      }
    }
  }
  throw new IllegalArgumentException(token().type.name());
}",0.9310910582444628
98002,"public QueryTerm(Object lhsValue,ZooFieldDef lhsFieldDef,QueryFunction lhsFunction,COMP_OP op,String rhsParamName,Object rhsValue,ZooFieldDef rhsFieldDef,QueryFunction rhsFunction,boolean negate){
  this.lhsParam=null;
  if (lhsFunction != null) {
switch (lhsFunction.op()) {
case THIS:
      this.lhsFunction=null;
    this.lhsValue=THIS;
  this.lhsCt=COMPARISON_TYPE.PC;
break;
case CONSTANT:
this.lhsFunction=null;
this.lhsValue=lhsFunction.evaluate(null,null);
this.lhsCt=COMPARISON_TYPE.fromType(lhsValue);
break;
case PARAM:
this.lhsFunction=null;
this.lhsValue=null;
this.lhsParam=(QueryParameter)lhsFunction.getConstant();
this.lhsCt=COMPARISON_TYPE.fromType(lhsParam.getValue());
break;
default :
this.lhsFunction=lhsFunction;
this.lhsValue=null;
this.lhsCt=COMPARISON_TYPE.fromTypeClass(lhsFunction.getReturnType());
}
}
 else {
this.lhsFunction=lhsFunction;
this.lhsValue=lhsValue;
if (lhsFieldDef != null) {
this.lhsCt=COMPARISON_TYPE.fromTypeClass(lhsFieldDef.getJavaType());
}
 else {
this.lhsCt=COMPARISON_TYPE.fromType(lhsValue);
}
}
this.lhsFieldDef=lhsFieldDef;
this.op=op.inverstIfTrue(negate);
this.rhsParamName=rhsParamName;
this.rhsFieldDef=rhsFieldDef;
if (rhsFunction != null) {
switch (rhsFunction.op()) {
case THIS:
this.rhsFunction=null;
this.rhsValue=THIS;
this.rhsCt=COMPARISON_TYPE.PC;
break;
case CONSTANT:
this.rhsFunction=null;
this.rhsValue=rhsFunction.evaluate(null,null);
this.rhsCt=COMPARISON_TYPE.fromType(rhsValue);
break;
case PARAM:
this.rhsFunction=null;
this.rhsValue=null;
this.rhsParam=(QueryParameter)rhsFunction.getConstant();
this.rhsCt=COMPARISON_TYPE.fromType(rhsParam.getValue());
break;
default :
this.rhsFunction=rhsFunction;
this.rhsValue=null;
this.rhsCt=COMPARISON_TYPE.fromTypeClass(rhsFunction.getReturnType());
}
}
 else {
this.rhsFunction=rhsFunction;
this.rhsValue=rhsValue;
if (rhsFieldDef != null) {
this.rhsCt=COMPARISON_TYPE.fromTypeClass(rhsFieldDef.getJavaType());
}
 else {
this.rhsCt=COMPARISON_TYPE.fromType(rhsValue);
}
}
compType=COMPARISON_TYPE.fromOperands(lhsCt,rhsCt);
}","public QueryTerm(Object lhsValue,ZooFieldDef lhsFieldDef,QueryFunction lhsFunction,COMP_OP op,String rhsParamName,Object rhsValue,ZooFieldDef rhsFieldDef,QueryFunction rhsFunction,boolean negate){
  this.lhsParam=null;
  if (lhsFunction != null) {
switch (lhsFunction.op()) {
case THIS:
      this.lhsFunction=null;
    this.lhsValue=THIS;
  this.lhsCt=COMPARISON_TYPE.PC;
break;
case CONSTANT:
this.lhsFunction=null;
this.lhsValue=lhsFunction.evaluate(null,null);
this.lhsCt=COMPARISON_TYPE.fromType(this.lhsValue);
break;
case PARAM:
this.lhsFunction=null;
this.lhsValue=null;
this.lhsParam=(QueryParameter)lhsFunction.getConstant();
this.lhsCt=COMPARISON_TYPE.fromTypeClass(lhsFunction.getReturnType());
break;
default :
this.lhsFunction=lhsFunction;
this.lhsValue=null;
this.lhsCt=COMPARISON_TYPE.fromTypeClass(lhsFunction.getReturnType());
}
}
 else {
this.lhsFunction=null;
this.lhsValue=lhsValue;
if (lhsFieldDef != null) {
this.lhsCt=COMPARISON_TYPE.fromTypeClass(lhsFieldDef.getJavaType());
}
 else {
this.lhsCt=COMPARISON_TYPE.fromType(lhsValue);
}
}
this.lhsFieldDef=lhsFieldDef;
this.op=op.inverstIfTrue(negate);
this.rhsParamName=rhsParamName;
this.rhsFieldDef=rhsFieldDef;
if (rhsFunction != null) {
switch (rhsFunction.op()) {
case THIS:
this.rhsFunction=null;
this.rhsValue=THIS;
this.rhsCt=COMPARISON_TYPE.PC;
break;
case CONSTANT:
this.rhsFunction=null;
this.rhsValue=rhsFunction.evaluate(null,null);
this.rhsCt=COMPARISON_TYPE.fromType(this.rhsValue);
break;
case PARAM:
this.rhsFunction=null;
this.rhsValue=null;
this.rhsParam=(QueryParameter)rhsFunction.getConstant();
this.rhsCt=COMPARISON_TYPE.fromTypeClass(rhsFunction.getReturnType());
break;
default :
this.rhsFunction=rhsFunction;
this.rhsValue=null;
this.rhsCt=COMPARISON_TYPE.fromTypeClass(rhsFunction.getReturnType());
}
}
 else {
this.rhsFunction=null;
this.rhsValue=rhsValue;
if (rhsFieldDef != null) {
this.rhsCt=COMPARISON_TYPE.fromTypeClass(rhsFieldDef.getJavaType());
}
 else {
this.rhsCt=COMPARISON_TYPE.fromType(rhsValue);
}
}
compType=COMPARISON_TYPE.fromOperands(lhsCt,rhsCt);
}",0.9713174526008752
98003,"public static COMPARISON_TYPE fromOperands(COMPARISON_TYPE lhsCt,COMPARISON_TYPE rhsCt){
  if (rhsCt.ordinal() < lhsCt.ordinal()) {
    COMPARISON_TYPE x=lhsCt;
    lhsCt=rhsCt;
    rhsCt=x;
  }
  if (lhsCt == SCO || rhsCt == SCO) {
    return SCO;
  }
  if (lhsCt == BIG_DECIMAL) {
    if (rhsCt.canBeNumber()) {
      return BIG_DECIMAL;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BIG_INT) {
    if (rhsCt.canBeNumber()) {
      return BIG_INT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == DOUBLE) {
    if (rhsCt.canBeNumber()) {
      return DOUBLE;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == FLOAT) {
    if (rhsCt.canBeNumber()) {
      return FLOAT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == LONG) {
    if (rhsCt.canBeNumber()) {
      return LONG;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == INT) {
    if (rhsCt.canBeNumber()) {
      return INT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == SHORT) {
    if (rhsCt.canBeNumber()) {
      return SHORT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BYTE) {
    if (rhsCt.canBeNumber()) {
      return BYTE;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == CHAR) {
    if (rhsCt.canBeNumber()) {
      return CHAR;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BOOLEAN && rhsCt == BOOLEAN) {
    return BOOLEAN;
  }
  if (lhsCt == PC && rhsCt == PC) {
    return PC;
  }
  if (lhsCt == STRING && rhsCt == STRING) {
    return STRING;
  }
  return UNKNOWN;
}","public static COMPARISON_TYPE fromOperands(COMPARISON_TYPE lhsCt,COMPARISON_TYPE rhsCt){
  if (rhsCt.ordinal() < lhsCt.ordinal()) {
    COMPARISON_TYPE x=lhsCt;
    lhsCt=rhsCt;
    rhsCt=x;
  }
  if (lhsCt == SCO || rhsCt == SCO) {
    return SCO;
  }
  if (lhsCt == BIG_DECIMAL) {
    if (rhsCt.canBeNumber()) {
      return BIG_DECIMAL;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BIG_INT) {
    if (rhsCt.canBeNumber()) {
      return BIG_INT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == DOUBLE) {
    if (rhsCt.canBeNumber()) {
      return DOUBLE;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == FLOAT) {
    if (rhsCt.canBeNumber()) {
      return FLOAT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == LONG) {
    if (rhsCt.canBeNumber()) {
      return LONG;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == INT) {
    if (rhsCt.canBeNumber()) {
      return INT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == SHORT) {
    if (rhsCt.canBeNumber()) {
      return SHORT;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BYTE) {
    if (rhsCt.canBeNumber()) {
      return BYTE;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == CHAR) {
    if (rhsCt.canBeNumber()) {
      return CHAR;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == BOOLEAN) {
    if (rhsCt == BOOLEAN) {
      return BOOLEAN;
    }
    failComp(lhsCt,rhsCt);
  }
  if (lhsCt == PC && rhsCt == PC) {
    return PC;
  }
  if (lhsCt == STRING && rhsCt == STRING) {
    return STRING;
  }
  return UNKNOWN;
}",0.983016983016983
98004,"/** 
 * Prints a debug message if the level is below or equal the  <code>verbosity</code> setting. The output can be redirected to the logging mechanism by setting the following property: <tt>verboseOutput = log</tt>.
 * @param level
 * @param message Message to print.
 */
public static final void debugPrint(int level,String... message){
  if (level <= verbosityLevel) {
    long tId=Thread.currentThread().getId();
    FormattedStringBuilder buf=new FormattedStringBuilder().append(""String_Node_Str"" + tId + ""String_Node_Str"").append(message);
    if (verboseToLog) {
      _LOGGER.info(buf.toString());
    }
 else {
      System.out.print(buf.toString());
    }
  }
}","/** 
 * Prints a debug message if the level is below or equal the  <code>verbosity</code> setting. The output can be redirected to the logging mechanism by setting the following property: <tt>verboseOutput = log</tt>.
 * @param level
 * @param message Message to print.
 */
public static final void debugPrint(int level,String... message){
  if (level <= verbosityLevel) {
    long tId=Thread.currentThread().getId();
    FormattedStringBuilder buf=new FormattedStringBuilder().append(""String_Node_Str"" + tId + ""String_Node_Str"").append(message);
    if (verboseToLog) {
      LOGGER.info(buf.toString());
    }
 else {
      System.out.print(buf.toString());
    }
  }
}",0.9992553983618764
98005,"public static void main(String[] args){
  int MAX_LEN=20;
  Random R=new Random(0);
  String dbName=""String_Node_Str"";
  ZooConfig.setFileManager(ZooConfig.FILE_MGR_IN_MEMORY);
  ZooHelper.createDb(dbName);
  PersistenceManagerFactory pmf=JDOHelper.getPersistenceManagerFactory(dbName);
  pmf.setConnectionURL(dbName);
  PersistenceManager pm=pmf.getPersistenceManager();
  pm.currentTransaction().begin();
  TestClass t=new TestClass();
  pm.makePersistent(t);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  Query q=pm.newQuery(TestClass.class);
  for (int i=0; i < 100000; i++) {
    StringBuilder qs=new StringBuilder(1000);
    int len=R.nextInt(MAX_LEN);
    for (int j=0; j < len; j++) {
      int p=R.nextInt(FILTER.length);
      String s=FILTER[p];
      qs.append(s);
    }
    String qss=qs.toString();
    int nArg=0;
    int posArg=0;
    Map<String,Object> argMap=new HashMap<>();
    while ((posArg=qss.indexOf(""String_Node_Str"",posArg)) >= 0) {
      posArg++;
      argMap.put(""String_Node_Str"" + nArg,nArg);
      nArg++;
    }
    try {
      q.setFilter(qss);
      if (argMap.isEmpty()) {
        q.execute();
      }
 else {
        q.executeWithMap(argMap);
      }
    }
 catch (    JDOUserException e) {
    }
catch (    NumberFormatException e) {
    }
catch (    Throwable e) {
      System.err.println(""String_Node_Str"" + qss);
      for (      String key : argMap.keySet()) {
        System.err.println(""String_Node_Str"" + key + ""String_Node_Str""+ argMap.get(key));
      }
      throw new RuntimeException(e);
    }
  }
}","public static void main(String[] args){
  int MAX_LEN=20;
  int N_TEST=1000000;
  Random R=new Random(0);
  String dbName=""String_Node_Str"";
  ZooConfig.setFileManager(ZooConfig.FILE_MGR_IN_MEMORY);
  ZooHelper.createDb(dbName);
  PersistenceManagerFactory pmf=JDOHelper.getPersistenceManagerFactory(dbName);
  pmf.setConnectionURL(dbName);
  PersistenceManager pm=pmf.getPersistenceManager();
  pm.currentTransaction().begin();
  TestClass t=new TestClass();
  pm.makePersistent(t);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  DBLogger.setLoggerLevel(Level.OFF);
  Query q=pm.newQuery(TestClass.class);
  long t0=System.currentTimeMillis();
  for (int i=0; i < 100000; i++) {
    StringBuilder qs=new StringBuilder(1000);
    int len=R.nextInt(MAX_LEN);
    for (int j=0; j < len; j++) {
      int p=R.nextInt(FILTER.length);
      String s=FILTER[p];
      qs.append(s);
    }
    String qss=qs.toString();
    int nArg=0;
    int posArg=0;
    Map<String,Object> argMap=new HashMap<>();
    while ((posArg=qss.indexOf(""String_Node_Str"",posArg)) >= 0) {
      posArg++;
      argMap.put(""String_Node_Str"" + nArg,nArg);
      nArg++;
    }
    try {
      q.setFilter(qss);
      if (argMap.isEmpty()) {
        q.execute();
      }
 else {
        q.executeWithMap(argMap);
      }
    }
 catch (    JDOUserException e) {
    }
catch (    NumberFormatException e) {
    }
catch (    Throwable e) {
      System.err.println(""String_Node_Str"" + qss);
      for (      String key : argMap.keySet()) {
        System.err.println(""String_Node_Str"" + key + ""String_Node_Str""+ argMap.get(key));
      }
      System.out.println(""String_Node_Str"" + i);
      throw new RuntimeException(e);
    }
  }
  long t1=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + N_TEST);
  System.out.println(""String_Node_Str"" + (t1 - t0));
}",0.916327716443928
98006,"@Test public void testParsing7(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  try {
    Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
    q.execute();
    fail();
  }
 catch (  JDOUserException e) {
    e.printStackTrace();
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}","@Test public void testParsing7(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  try {
    Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
    q.execute();
    fail();
  }
 catch (  JDOUserException e) {
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}",0.9613601236476044
98007,"@Test public void testParsing11(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  try {
    Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
    q.execute(0);
    fail();
  }
 catch (  JDOUserException e) {
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}","@Test public void testParsing11(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  try {
    Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
    q.execute(0);
    fail();
  }
 catch (  JDOUserException e) {
    e.printStackTrace();
    assertTrue(e.getMessage().contains(""String_Node_Str""));
  }
}",0.9615975422427036
98008,"public final void jdoZooInit(ObjectState state,PCContext bundle,long oid){
  this.context=bundle;
  jdoZooSetOid(oid);
  this.status=state;
switch (state) {
case PERSISTENT_NEW:
{
      setPersNew();
      jdoZooSetTimestamp(bundle.getSession().getTransactionId());
      jdoZooGetContext().notifyEvent(this,ZooInstanceEvent.CREATE);
      break;
    }
case PERSISTENT_CLEAN:
{
    setPersClean();
    break;
  }
case HOLLOW_PERSISTENT_NONTRANSACTIONAL:
{
  setHollow();
  break;
}
default :
throw new UnsupportedOperationException(""String_Node_Str"" + state);
}
if (this instanceof PersistenceCapableImpl) {
((PersistenceCapableImpl)this).jdoNewInstance(StateManagerImpl.STATEMANAGER);
}
}","public final void jdoZooInit(ObjectState state,PCContext bundle,long oid){
  this.context=bundle;
  jdoZooSetOid(oid);
  this.status=state;
switch (state) {
case PERSISTENT_NEW:
{
      setPersNew();
      jdoZooSetTimestamp(bundle.getSession().getTransactionId());
      jdoZooGetContext().notifyEvent(this,ZooInstanceEvent.CREATE);
      break;
    }
case PERSISTENT_CLEAN:
{
    setPersClean();
    break;
  }
case HOLLOW_PERSISTENT_NONTRANSACTIONAL:
{
  setHollow();
  break;
}
case PERSISTENT_DIRTY:
{
if (!(this instanceof GenericObject)) {
  throw new UnsupportedOperationException(""String_Node_Str"" + state);
}
setPersDirty();
break;
}
default :
throw new UnsupportedOperationException(""String_Node_Str"" + state);
}
if (this instanceof PersistenceCapableImpl) {
((PersistenceCapableImpl)this).jdoNewInstance(StateManagerImpl.STATEMANAGER);
}
}",0.8831168831168831
98009,"private ZooClassDef evolve(){
  ArrayList<Object> fV=new ArrayList<Object>(Arrays.asList(fixedValues));
  ArrayList<Object> vV=new ArrayList<Object>(Arrays.asList(variableValues));
  for (  PersistentSchemaOperation op : jdoZooGetClassDef().getNextVersion().getEvolutionOps()) {
    if (op.isAddOp()) {
      fV.add(op.getFieldId(),op.getInitialValue());
      vV.add(op.getFieldId(),null);
    }
 else {
      fV.remove(op.getFieldId());
      vV.remove(op.getFieldId());
    }
  }
  fixedValues=fV.toArray(fixedValues);
  variableValues=vV.toArray(variableValues);
  defCurrent=defCurrent.getNextVersion();
  return defCurrent;
}","/** 
 * Schema evolution of in-memory objects, operation by operation.
 * @param op
 */
public void evolve(SchemaOperation op){
  ArrayList<Object> fV=new ArrayList<Object>(Arrays.asList(fixedValues));
  ArrayList<Object> vV=new ArrayList<Object>(Arrays.asList(variableValues));
  if (op instanceof SchemaOperation.SchemaFieldDefine) {
    SchemaOperation.SchemaFieldDefine op2=(SchemaFieldDefine)op;
    int fieldId=op2.getField().getFieldPos();
    fV.add(fieldId,PersistentSchemaOperation.getDefaultValue(op2.getField()));
    vV.add(fieldId,null);
  }
  if (op instanceof SchemaOperation.SchemaFieldDelete) {
    SchemaOperation.SchemaFieldDelete op2=(SchemaFieldDelete)op;
    int fieldId=op2.getField().getFieldPos();
    fV.remove(fieldId);
    vV.remove(fieldId);
  }
  fixedValues=fV.toArray(fixedValues);
  variableValues=vV.toArray(variableValues);
}",0.0254691689008042
98010,"private PersistentSchemaOperation(OP op,int fieldId,ZooFieldDef field,Object initialValue){
  this.op=op;
  this.fieldId=fieldId;
  this.field=field;
  if (initialValue == null) {
switch (field.getJdoType()) {
case PRIMITIVE:
switch (field.getPrimitiveType()) {
case BOOLEAN:
        initialValue=Boolean.valueOf(false);
      break;
case BYTE:
    initialValue=Byte.valueOf((byte)0);
  break;
case CHAR:
initialValue=Character.valueOf((char)0);
break;
case DOUBLE:
initialValue=Double.valueOf(0);
break;
case FLOAT:
initialValue=Float.valueOf(0);
break;
case INT:
initialValue=Integer.valueOf(0);
break;
case LONG:
initialValue=Long.valueOf(0L);
break;
case SHORT:
initialValue=Short.valueOf((short)0);
break;
default :
throw new IllegalArgumentException();
}
break;
case DATE:
case REFERENCE:
case NUMBER:
case ARRAY:
case BIG_DEC:
case BIG_INT:
case SCO:
case STRING:
initialValue=null;
break;
default :
throw new IllegalArgumentException();
}
}
this.initialValue=initialValue;
}","private PersistentSchemaOperation(OP op,int fieldId,ZooFieldDef field,Object initialValue){
  this.op=op;
  this.fieldId=fieldId;
  this.field=field;
  if (initialValue == null) {
    initialValue=getDefaultValue(field);
  }
  this.initialValue=initialValue;
}",0.3091787439613526
98011,"public void commit(boolean retainValues){
  try {
    lock();
    checkActive();
    cache.persistReachableObjects();
    processOptimisticVerification(false);
    try {
      schemaManager.commit();
      commitInternal();
      for (      Node n : nodes) {
        n.commit();
      }
      cache.postCommit(retainValues,config.getDetachAllOnCommit());
      schemaManager.postCommit();
    }
 catch (    RuntimeException e) {
      if (DBLogger.isUser(e)) {
        for (        ZooClassDef cs : cache.getSchemata()) {
          cs.getProvidedContext().getDataSink().reset();
          cs.getProvidedContext().getDataDeleteSink().reset();
        }
        for (        Node n : nodes) {
          n.revert();
        }
      }
      rollbackInteral();
      throw e;
    }
    for (    CloseableIterator<?> ext : extents.keySet().toArray(new CloseableIterator[0])) {
      ext.close();
    }
    isActive=false;
  }
  finally {
    unlock();
  }
}","public void commit(boolean retainValues){
  try {
    lock();
    checkActive();
    cache.persistReachableObjects();
    processOptimisticVerification(false);
    try {
      schemaManager.commit();
      commitInternal();
      for (      Node n : nodes) {
        n.commit();
      }
      cache.postCommit(retainValues,config.getDetachAllOnCommit());
      schemaManager.postCommit();
    }
 catch (    RuntimeException e) {
      try {
        if (DBLogger.isUser(e)) {
          for (          ZooClassDef cs : cache.getSchemata()) {
            cs.getProvidedContext().getDataSink().reset();
            cs.getProvidedContext().getDataDeleteSink().reset();
          }
          for (          Node n : nodes) {
            n.revert();
          }
        }
        rollbackInteral();
      }
 catch (      Throwable t) {
        DBLogger.severe(""String_Node_Str"" + t.getMessage());
        t.printStackTrace();
      }
      throw e;
    }
    for (    CloseableIterator<?> ext : extents.keySet().toArray(new CloseableIterator[0])) {
      ext.close();
    }
    isActive=false;
  }
  finally {
    unlock();
  }
}",0.9175108538350216
98012,"public ZooClassDef removeField(ZooFieldDef field){
  ZooClassDef def=field.getDeclaringType().getModifiableVersion(cache,ops);
  field=def.getField(field.getName());
  ops.add(new SchemaOperation.SchemaFieldDelete(def,field));
  return def;
}","public ZooClassDef removeField(ZooFieldDef field){
  ZooClassDef def=field.getDeclaringType().getModifiableVersion(cache,ops);
  field=def.getField(field.getName());
  applyOp(new SchemaOperation.SchemaFieldDelete(def,field),def);
  return def;
}",0.9631147540983608
98013,"public ZooFieldDef addField(ZooClassDef def,String fieldName,ZooClassDef typeDef,int arrayDim){
  def=def.getModifiableVersion(cache,ops);
  ZooFieldDef field=ZooFieldDef.create(def,fieldName,typeDef,arrayDim);
  ops.add(new SchemaOperation.SchemaFieldDefine(def,field));
  return field;
}","public ZooFieldDef addField(ZooClassDef def,String fieldName,ZooClassDef typeDef,int arrayDim){
  def=def.getModifiableVersion(cache,ops);
  ZooFieldDef field=ZooFieldDef.create(def,fieldName,typeDef,arrayDim);
  applyOp(new SchemaOperation.SchemaFieldDefine(def,field),def);
  return field;
}",0.9690721649484536
98014,"/** 
 * Clean out the cache after commit. TODO keep hollow objects? E.g. references to correct, e.t.c!
 */
public void postCommit(boolean retainValues,boolean detachAllOnCommit){
  for (  ZooPC co : deletedObjects.values()) {
    if (co.jdoZooIsDeleted()) {
      objs.remove(co.jdoZooGetOid());
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_DELETE);
    }
  }
  if (detachAllOnCommit) {
    Iterator<ZooPC> it=objs.values().iterator();
    while (it.hasNext()) {
      ZooPC co=it.next();
      if (co instanceof ZooClassDef) {
        co.jdoZooMarkClean();
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_STORE);
      }
 else {
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_DETACH);
        if (co.jdoZooIsStateHollow()) {
          co.jdoZooGetNode().refreshObject(co);
        }
        co.jdoZooMarkDetached();
        it.remove();
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_DETACH);
      }
    }
  }
 else   if (retainValues) {
    for (    ZooPC co : dirtyObjects) {
      if (!co.jdoZooIsDeleted()) {
        co.jdoZooMarkClean();
      }
    }
  }
 else {
    if (objs.size() > 100000) {
      DBLogger.debugPrintln(0,""String_Node_Str"" + ""String_Node_Str"");
    }
    for (    ZooPC co : objs.values()) {
      if (retainValues || co instanceof ZooClassDef) {
        co.jdoZooMarkClean();
      }
 else {
        co.jdoZooEvict();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_STORE);
    }
  }
  dirtyObjects.clear();
  deletedObjects.clear();
  for (  GenericObject go : dirtyGenObjects) {
    if (go.jdoZooIsDeleted()) {
      genericObjects.remove(go.getOid());
      continue;
    }
    go.jdoZooMarkClean();
  }
  for (  GenericObject go : genericObjects.values()) {
    if (!retainValues) {
      go.jdoZooMarkHollow();
    }
  }
  dirtyGenObjects.clear();
  Iterator<ZooClassDef> iterS=schemata.values().iterator();
  for (; iterS.hasNext(); ) {
    ZooClassDef cs=iterS.next();
    if (cs.jdoZooIsDeleted()) {
      iterS.remove();
      nodeSchemata.get(cs.jdoZooGetNode()).remove(cs.getJavaClass());
      continue;
    }
    cs.jdoZooMarkClean();
  }
}","/** 
 * Clean out the cache after commit. TODO keep hollow objects? E.g. references to correct, e.t.c!
 */
public void postCommit(boolean retainValues,boolean detachAllOnCommit){
  if (!deletedObjects.isEmpty()) {
    for (    ZooPC co : deletedObjects.values()) {
      if (co.jdoZooIsDeleted()) {
        objs.remove(co.jdoZooGetOid());
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_DELETE);
      }
    }
  }
  if (detachAllOnCommit) {
    Iterator<ZooPC> it=objs.values().iterator();
    while (it.hasNext()) {
      ZooPC co=it.next();
      if (co instanceof ZooClassDef) {
        co.jdoZooMarkClean();
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_STORE);
      }
 else {
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_DETACH);
        if (co.jdoZooIsStateHollow()) {
          co.jdoZooGetNode().refreshObject(co);
        }
        co.jdoZooMarkDetached();
        it.remove();
        co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_DETACH);
      }
    }
  }
 else   if (retainValues) {
    if (!dirtyObjects.isEmpty()) {
      for (      ZooPC co : dirtyObjects) {
        if (!co.jdoZooIsDeleted()) {
          co.jdoZooMarkClean();
        }
      }
    }
  }
 else {
    if (objs.size() > 100000) {
      DBLogger.debugPrintln(0,""String_Node_Str"" + ""String_Node_Str"");
    }
    for (    ZooPC co : objs.values()) {
      if (retainValues || co instanceof ZooClassDef) {
        co.jdoZooMarkClean();
      }
 else {
        co.jdoZooEvict();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.POST_STORE);
    }
  }
  dirtyObjects.clear();
  deletedObjects.clear();
  if (!dirtyGenObjects.isEmpty()) {
    for (    GenericObject go : dirtyGenObjects) {
      if (go.jdoZooIsDeleted()) {
        genericObjects.remove(go.getOid());
        continue;
      }
      go.jdoZooMarkClean();
    }
  }
  if (!genericObjects.isEmpty()) {
    for (    GenericObject go : genericObjects.values()) {
      if (!retainValues) {
        go.jdoZooMarkHollow();
      }
    }
  }
  dirtyGenObjects.clear();
  Iterator<ZooClassDef> iterS=schemata.values().iterator();
  for (; iterS.hasNext(); ) {
    ZooClassDef cs=iterS.next();
    if (cs.jdoZooIsDeleted()) {
      iterS.remove();
      nodeSchemata.get(cs.jdoZooGetNode()).remove(cs.getJavaClass());
      continue;
    }
    cs.jdoZooMarkClean();
  }
}",0.9277765655684048
98015,"@Override public void commit(){
  try {
    int oidPage=oidIndex.write();
    int schemaPage1=schemaIndex.write(txId);
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
    txContext.reset();
  }
  finally {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    sm.getLock().release(this);
  }
}","@Override public void commit(){
  int oidPage=oidIndex.write();
  int schemaPage1=schemaIndex.write(txId);
  txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
  txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
  sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
  txContext.reset();
  DBLogger.debugPrintln(1,""String_Node_Str"");
  sm.getLock().release(this);
}",0.9513274336283186
98016,"private void releaseWrite(T key){
  if (currentWriterKey != key) {
    throw new IllegalStateException();
  }
  currentWriterKey=NO_KEY;
  wSemaphore.release();
}","private void releaseWrite(T key){
  if (currentWriterKey != key) {
    new IllegalStateException().printStackTrace();
    return;
  }
  currentWriterKey=NO_KEY;
  wSemaphore.release();
}",0.896551724137931
98017,"private void releaseRead(T key){
  if (rSemaphore.availablePermits() == MAX_READERS) {
    throw new IllegalStateException();
  }
  rSemaphore.release();
}","private void releaseRead(T key){
  if (rSemaphore.availablePermits() == MAX_READERS) {
    new IllegalStateException().printStackTrace();
    return;
  }
  rSemaphore.release();
}",0.8922155688622755
98018,"@Override public void close(){
  for (  PersistenceManagerImpl pm : pms) {
    if (!pm.isClosed() && pm.currentTransaction().isActive()) {
      throw new JDOUserException(""String_Node_Str"",new JDOUserException(),pm);
    }
  }
  while (!pms.isEmpty()) {
    PersistenceManager pm=pms.iterator().next();
    if (!pm.isClosed()) {
      pm.close();
    }
  }
  JDOImplHelper.getInstance().removeStateInterrogation(SI);
  isClosed=true;
}","@Override public void close(){
  for (  PersistenceManagerImpl pm : pms) {
    if (!pm.isClosed() && pm.currentTransaction().isActive()) {
      throw new JDOUserException(""String_Node_Str"",new JDOUserException(),pm);
    }
  }
  while (!pms.isEmpty()) {
    PersistenceManager pm=pms.iterator().next();
    if (!pm.isClosed()) {
      pm.close();
    }
 else {
      pms.remove(pm);
    }
  }
  JDOImplHelper.getInstance().removeStateInterrogation(SI);
  isClosed=true;
}",0.960352422907489
98019,"public long[] jdoZooGetBackup(){
  return prevValues;
}","public Pair<long[],Object[]> jdoZooGetBackup(){
  return prevValues;
}",0.88
98020,"public final long[] getBackup(GenericObject co,Object[] raw){
  if (indFields.length == 0) {
    return null;
  }
  long[] la=new long[indFields.length];
  for (int i=0; i < indFields.length; i++) {
    ZooFieldDef fd=indFields[i];
    PRIMITIVE p=fd.getPrimitiveType();
    if (p != null) {
      la[i]=SerializerTools.primitiveToLong(raw[fd.getFieldPos()],p);
    }
 else {
      la[i]=(Long)raw[fd.getFieldPos()];
    }
  }
  return la;
}","public final Pair<long[],Object[]> getBackup(GenericObject co,Object[] raw){
  if (indFields.length == 0) {
    return null;
  }
  Pair<long[],Object[]> ret=new Pair<long[],Object[]>(new long[indFields.length],new Object[indFields.length]);
  for (int i=0; i < indFields.length; i++) {
    ZooFieldDef fd=indFields[i];
    PRIMITIVE p=fd.getPrimitiveType();
    if (p != null) {
      ret.getA()[i]=SerializerTools.primitiveToLong(raw[fd.getFieldPos()],p);
    }
 else {
      ret.getA()[i]=(Long)raw[fd.getFieldPos()];
      ret.getB()[i]=co.getField(fd);
    }
  }
  return ret;
}",0.8211143695014663
98021,"private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (co.jdoZooGetBackup() != null) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.getOid());
          continue;
        }
        long l;
        if (field.isString()) {
          if (co.jdoZooIsStateHollow()) {
            throw new UnsupportedOperationException();
          }
          l=(Long)co.getFieldRaw(field.getFieldPos());
        }
 else {
          Object primO=co.getFieldRaw(field.getFieldPos());
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.getOid());
      }
    }
 catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].getOid();
    delete(oid,ois);
  }
}","private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (co.jdoZooGetBackup() != null) {
          long l=co.jdoZooGetBackup().getA()[iInd];
          fieldInd.removeLong(l,co.getOid());
          continue;
        }
        long l;
        if (field.isString()) {
          if (co.jdoZooIsStateHollow()) {
            throw new UnsupportedOperationException();
          }
          l=(Long)co.getFieldRaw(field.getFieldPos());
        }
 else {
          Object primO=co.getFieldRaw(field.getFieldPos());
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.getOid());
      }
    }
 catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].getOid();
    delete(oid,ois);
  }
}",0.9974424552429668
98022,"private void updateFieldIndices(){
  final ZooPC[] buffer=this.buffer;
  final int bufferCnt=this.bufferCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      for (int i=0; i < bufferCnt; i++) {
        ZooPC co=buffer[i];
        if (co.jdoZooGetBackup() != null) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.jdoZooGetOid());
          continue;
        }
        long l;
        if (field.isString()) {
          String str=(String)jField.get(co);
          l=BitTools.toSortableLong(str);
        }
 else {
          l=SerializerTools.primitiveFieldToLong(co,jField,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.jdoZooGetOid());
      }
    }
 catch (    SecurityException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].jdoZooGetOid();
    delete(oid,ois);
  }
}","private void updateFieldIndices(){
  final ZooPC[] buffer=this.buffer;
  final int bufferCnt=this.bufferCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      for (int i=0; i < bufferCnt; i++) {
        ZooPC co=buffer[i];
        if (co.jdoZooGetBackup() != null) {
          long l=co.jdoZooGetBackup().getA()[iInd];
          fieldInd.removeLong(l,co.jdoZooGetOid());
          continue;
        }
        long l;
        if (field.isString()) {
          String str=(String)jField.get(co);
          l=BitTools.toSortableLong(str);
        }
 else {
          l=SerializerTools.primitiveFieldToLong(co,jField,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.jdoZooGetOid());
      }
    }
 catch (    SecurityException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].jdoZooGetOid();
    delete(oid,ois);
  }
}",0.9976705490848584
98023,"private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        final long l;
        if (field.isString()) {
          l=(Long)co.getFieldRaw(iField);
        }
 else {
          Object primO=co.getFieldRaw(iField);
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        if (!co.jdoZooIsNew()) {
          long lOld=co.jdoZooGetBackup()[iInd];
          if (lOld == l) {
            continue;
          }
          fieldInd.removeLong(lOld,co.getOid());
        }
        if (field.isIndexUnique()) {
          if (!fieldInd.insertLongIfNotSet(l,co.getOid())) {
            if (fieldUpdateBuffer[iField] == null) {
              fieldUpdateBuffer[iField]=new ArrayList<Pair>();
            }
            fieldUpdateBuffer[iField].add(new Pair(co.getOid(),l));
          }
        }
 else {
          fieldInd.insertLong(l,co.getOid());
        }
      }
    }
 catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
}","private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        final long l;
        String str=null;
        if (field.isString()) {
          l=(Long)co.getFieldRaw(iField);
          str=(String)co.getField(field);
        }
 else {
          Object primO=co.getFieldRaw(iField);
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        if (!co.jdoZooIsNew()) {
          long lOld=co.jdoZooGetBackup().getA()[iInd];
          if (lOld == l) {
            if (field.isString()) {
              String str2=(String)co.jdoZooGetBackup().getB()[iInd];
              if ((str == null && str2 == null) || str.equals(str2)) {
                continue;
              }
            }
 else {
              continue;
            }
          }
          fieldInd.removeLong(lOld,co.getOid());
        }
        if (field.isIndexUnique()) {
          if (!fieldInd.insertLongIfNotSet(l,co.getOid())) {
            bufferIndexUpdate(iField,co,l);
          }
        }
 else         if (field.isString()) {
          bufferIndexUpdate(iField,co,l);
        }
 else {
          fieldInd.insertLong(l,co.getOid());
        }
      }
    }
 catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
}",0.8070500927643784
98024,"private void flushBuffer(){
  updateFieldIndices();
  bufferCnt=0;
  if (bufferGOCnt > 0) {
    updateFieldIndicesGO();
    bufferGOCnt=0;
  }
  for (int i=0; i < fieldUpdateBuffer.length; i++) {
    ArrayList<Pair> a=fieldUpdateBuffer[i];
    if (a != null) {
      ZooFieldDef field=cls.getAllFields()[i];
      if (!field.isIndexed()) {
        continue;
      }
      SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
      LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
      for (      Pair p : a) {
        if (!fieldInd.insertLongIfNotSet(p.value,p.oid)) {
          long x=fieldInd.iterator(p.value,p.value).next().getValue();
          throw DBLogger.newUser(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ p.value+ ""String_Node_Str""+ Util.oidToString(p.oid)+ ""String_Node_Str""+ Util.oidToString(x));
        }
      }
      fieldUpdateBuffer[i]=null;
    }
  }
}","private void flushBuffer(){
  updateFieldIndices();
  bufferCnt=0;
  if (bufferGOCnt > 0) {
    updateFieldIndicesGO();
    bufferGOCnt=0;
  }
  for (int i=0; i < fieldUpdateBuffer.length; i++) {
    ArrayList<Pair> a=fieldUpdateBuffer[i];
    if (a != null) {
      ZooFieldDef field=cls.getAllFields()[i];
      if (!field.isIndexed()) {
        continue;
      }
      SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
      LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
      for (      Pair p : a) {
        if (field.isString()) {
          String str=getString(p.pc,field);
          if (str != null) {
            Iterator<ZooPC> it=node.readObjectFromIndex(field,p.value,p.value,true);
            while (it.hasNext()) {
              ZooPC o2=it.next();
              String s2=getString(o2,field);
              if (str.equals(s2)) {
                long oid2=o2.jdoZooGetOid();
                throw DBLogger.newUser(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ p.value+ ""String_Node_Str""+ Util.oidToString(p.pc.jdoZooGetOid())+ ""String_Node_Str""+ Util.oidToString(oid2));
              }
            }
          }
          fieldInd.insertLong(p.value,p.pc.jdoZooGetOid());
        }
 else         if (!fieldInd.insertLongIfNotSet(p.value,p.pc.jdoZooGetOid())) {
          long oid2=fieldInd.iterator(p.value,p.value).next().getValue();
          throw DBLogger.newUser(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ p.value+ ""String_Node_Str""+ Util.oidToString(p.pc.jdoZooGetOid())+ ""String_Node_Str""+ Util.oidToString(oid2));
        }
      }
      fieldUpdateBuffer[i]=null;
    }
  }
}",0.6349574632637278
98025,"public Pair(long oid,long value){
  this.oid=oid;
  this.value=value;
}","public Pair(ZooPC pc,long value){
  this.pc=pc;
  this.value=value;
}",0.8428571428571429
98026,"private void updateFieldIndices(){
  final ZooPC[] buffer=this.buffer;
  final int bufferCnt=this.bufferCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      for (int i=0; i < bufferCnt; i++) {
        ZooPC co=buffer[i];
        final long l;
        if (field.isString()) {
          String str=(String)jField.get(co);
          l=BitTools.toSortableLong(str);
        }
 else {
          l=SerializerTools.primitiveFieldToLong(co,jField,field.getPrimitiveType());
        }
        if (!co.jdoZooIsNew()) {
          long lOld=co.jdoZooGetBackup()[iInd];
          if (lOld == l) {
            continue;
          }
          fieldInd.removeLong(lOld,co.jdoZooGetOid());
        }
        if (field.isIndexUnique()) {
          if (!fieldInd.insertLongIfNotSet(l,co.jdoZooGetOid())) {
            if (fieldUpdateBuffer[iField] == null) {
              fieldUpdateBuffer[iField]=new ArrayList<Pair>();
            }
            fieldUpdateBuffer[iField].add(new Pair(co.jdoZooGetOid(),l));
          }
        }
 else {
          fieldInd.insertLong(l,co.jdoZooGetOid());
        }
      }
    }
 catch (    SecurityException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
}","private void updateFieldIndices(){
  final ZooPC[] buffer=this.buffer;
  final int bufferCnt=this.bufferCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      for (int i=0; i < bufferCnt; i++) {
        ZooPC co=buffer[i];
        final long l;
        String str=null;
        if (field.isString()) {
          str=(String)jField.get(co);
          l=BitTools.toSortableLong(str);
        }
 else {
          l=SerializerTools.primitiveFieldToLong(co,jField,field.getPrimitiveType());
        }
        if (!co.jdoZooIsNew()) {
          long lOld=co.jdoZooGetBackup().getA()[iInd];
          if (lOld == l) {
            if (field.isString()) {
              String str2=(String)co.jdoZooGetBackup().getB()[iInd];
              if ((str == null && str2 == null) || str.equals(str2)) {
                continue;
              }
            }
 else {
              continue;
            }
          }
          fieldInd.removeLong(lOld,co.jdoZooGetOid());
        }
        if (field.isIndexUnique()) {
          if (field.isString()) {
            bufferIndexUpdate(iField,co,l);
          }
 else {
            if (!fieldInd.insertLongIfNotSet(l,co.jdoZooGetOid())) {
              bufferIndexUpdate(iField,co,l);
            }
          }
        }
 else {
          fieldInd.insertLong(l,co.jdoZooGetOid());
        }
      }
    }
 catch (    SecurityException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalArgumentException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
catch (    IllegalAccessException e) {
      throw DBLogger.newFatal(""String_Node_Str"" + field.getName(),e);
    }
  }
}",0.8245006657789614
98027,"public LongLongIndex getIndex(ZooFieldDef field){
  for (  FieldIndex fi : fieldIndices) {
    if (fi.fieldId == field.getFieldSchemaId()) {
      if (fi.index == null) {
        if (fi.isUnique) {
          fi.index=IndexFactory.loadUniqueIndex(DATA_TYPE.FIELD_INDEX,file,fi.page);
        }
 else {
          fi.index=IndexFactory.loadIndex(DATA_TYPE.FIELD_INDEX,file,fi.page);
        }
      }
      return fi.index;
    }
  }
  return null;
}","public LongLongIndex getIndex(ZooFieldDef field){
  for (  FieldIndex fi : fieldIndices) {
    if (fi.fieldId == field.getFieldSchemaId()) {
      if (fi.index == null) {
        if (fi.isUnique && !field.isString()) {
          fi.index=IndexFactory.loadUniqueIndex(DATA_TYPE.FIELD_INDEX,file,fi.page);
        }
 else {
          fi.index=IndexFactory.loadIndex(DATA_TYPE.FIELD_INDEX,file,fi.page);
        }
      }
      return fi.index;
    }
  }
  return null;
}",0.9770491803278688
98028,"void addVersion(ZooClassDef defNew){
  int newLen=defNew.getSchemaVersion() + 1;
  schemaOids=Arrays.copyOf(schemaOids,newLen);
  objIndexPages=Arrays.copyOf(objIndexPages,newLen);
  objIndex=Arrays.copyOf(objIndex,newLen);
  objIndex[newLen - 1]=PagedPosIndex.newIndex(file);
  schemaOids[newLen - 1]=defNew.getOid();
  for (  PersistentSchemaOperation op : defNew.getEvolutionOps()) {
    if (op.isAddOp() && op.getField().isIndexed()) {
      ZooFieldDef field=op.getField();
      FieldIndex fi=new FieldIndex();
      fi.fieldId=op.getFieldId();
      fi.fType=FTYPE.fromType(field.getTypeName());
      fi.isUnique=field.isIndexUnique();
      if (fi.isUnique) {
        fi.index=IndexFactory.createUniqueIndex(DATA_TYPE.FIELD_INDEX,file);
      }
 else {
        fi.index=IndexFactory.createIndex(DATA_TYPE.FIELD_INDEX,file);
      }
      fieldIndices.add(fi);
    }
 else {
      for (int i=0; i < fieldIndices.size(); i++) {
        if (fieldIndices.get(i).fieldId == op.getFieldId()) {
          FieldIndex fi=fieldIndices.remove(i);
          fi.index.clear();
        }
      }
    }
  }
}","void addVersion(ZooClassDef defNew){
  int newLen=defNew.getSchemaVersion() + 1;
  schemaOids=Arrays.copyOf(schemaOids,newLen);
  objIndexPages=Arrays.copyOf(objIndexPages,newLen);
  objIndex=Arrays.copyOf(objIndex,newLen);
  objIndex[newLen - 1]=PagedPosIndex.newIndex(file);
  schemaOids[newLen - 1]=defNew.getOid();
  for (  PersistentSchemaOperation op : defNew.getEvolutionOps()) {
    if (op.isAddOp() && op.getField().isIndexed()) {
      ZooFieldDef field=op.getField();
      FieldIndex fi=new FieldIndex();
      fi.fieldId=op.getFieldId();
      fi.fType=FTYPE.fromType(field.getTypeName());
      fi.isUnique=field.isIndexUnique();
      if (fi.isUnique && !field.isString()) {
        fi.index=IndexFactory.createUniqueIndex(DATA_TYPE.FIELD_INDEX,file);
      }
 else {
        fi.index=IndexFactory.createIndex(DATA_TYPE.FIELD_INDEX,file);
      }
      fieldIndices.add(fi);
    }
 else {
      for (int i=0; i < fieldIndices.size(); i++) {
        if (fieldIndices.get(i).fieldId == op.getFieldId()) {
          FieldIndex fi=fieldIndices.remove(i);
          fi.index.clear();
        }
      }
    }
  }
}",0.990561797752809
98029,"public LongLongIndex defineIndex(ZooFieldDef field,boolean isUnique){
  if (!field.isPrimitiveType() && !field.isString()) {
    throw new IllegalArgumentException(""String_Node_Str"" + field.getTypeName());
  }
  for (  FieldIndex fi : fieldIndices) {
    if (fi.fieldId == field.getFieldSchemaId()) {
      throw new IllegalArgumentException(""String_Node_Str"" + field.getName());
    }
  }
  FieldIndex fi=new FieldIndex();
  fi.fieldId=field.getFieldSchemaId();
  fi.fType=FTYPE.fromType(field.getTypeName());
  fi.isUnique=isUnique;
  field.setIndexed(true);
  field.setUnique(isUnique);
  if (isUnique) {
    fi.index=IndexFactory.createUniqueIndex(DATA_TYPE.FIELD_INDEX,file);
  }
 else {
    fi.index=IndexFactory.createIndex(DATA_TYPE.FIELD_INDEX,file);
  }
  fieldIndices.add(fi);
  markRefreshRequired();
  return fi.index;
}","public LongLongIndex defineIndex(ZooFieldDef field,boolean isUnique){
  if (!field.isPrimitiveType() && !field.isString()) {
    throw new IllegalArgumentException(""String_Node_Str"" + field.getTypeName());
  }
  for (  FieldIndex fi : fieldIndices) {
    if (fi.fieldId == field.getFieldSchemaId()) {
      throw new IllegalArgumentException(""String_Node_Str"" + field.getName());
    }
  }
  FieldIndex fi=new FieldIndex();
  fi.fieldId=field.getFieldSchemaId();
  fi.fType=FTYPE.fromType(field.getTypeName());
  fi.isUnique=isUnique;
  field.setIndexed(true);
  field.setUnique(isUnique);
  if (isUnique && !field.isString()) {
    fi.index=IndexFactory.createUniqueIndex(DATA_TYPE.FIELD_INDEX,file);
  }
 else {
    fi.index=IndexFactory.createIndex(DATA_TYPE.FIELD_INDEX,file);
  }
  fieldIndices.add(fi);
  markRefreshRequired();
  return fi.index;
}",0.9875518672199172
98030,"@Test public void testStringIndexCollisionBug_Issue_55(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",true);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  TestClass t1=new TestClass();
  t1.setString(""String_Node_Str"");
  pm.makePersistent(t1);
  TestClass t2=new TestClass();
  t2.setString(""String_Node_Str"");
  pm.makePersistent(t2);
  long hash1=BitTools.toSortableLong(t1.getString());
  long hash2=BitTools.toSortableLong(t2.getString());
  System.out.println(BitTools.toSortableLong(t1.getString()));
  System.out.println(BitTools.toSortableLong(t2.getString()));
  assertEquals(hash1,hash2);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  Collection<?> c=(Collection<?>)pm.newQuery(TestClass.class).execute();
  assertEquals(2,c.size());
  assertTrue(c.contains(t1));
  assertTrue(c.contains(t2));
  pm.currentTransaction().commit();
  TestTools.closePM();
}","@Test public void testStringIndexCollisionBug_Issue_55(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",true);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  TestClass t1=new TestClass();
  t1.setString(""String_Node_Str"");
  pm.makePersistent(t1);
  TestClass t2=new TestClass();
  t2.setString(""String_Node_Str"");
  pm.makePersistent(t2);
  long hash1=BitTools.toSortableLong(t1.getString());
  long hash2=BitTools.toSortableLong(t2.getString());
  System.out.println(BitTools.toSortableLong(t1.getString()));
  System.out.println(BitTools.toSortableLong(t2.getString()));
  assertEquals(hash1,hash2);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  Collection<?> c=(Collection<?>)pm.newQuery(TestClass.class).execute();
  assertEquals(2,c.size());
  assertTrue(c.contains(t1));
  assertTrue(c.contains(t2));
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  t2.setString(t1.getString());
  try {
    pm.currentTransaction().commit();
    fail();
  }
 catch (  JDOUserException e) {
  }
  pm.currentTransaction().begin();
  t2.setString(null);
  t1.setString(null);
  pm.currentTransaction().commit();
  TestTools.closePM();
}",0.8704902867715079
98031,"public ZooClassDef getModifiableVersion(ClientSessionCache cache,List<SchemaOperation> ops,ZooClassDef newSuper){
  if (this.jdoZooIsNew()) {
    ensureLatestSuper();
    return this;
  }
  ZooClassDef defNew=newVersion(cache,ops,newSuper);
  ops.add(new SchemaOperation.SchemaNewVersion(this,defNew,cache));
  for (  ZooClassProxy sub : versionProxy.getSubProxies()) {
    sub.getSchemaDef().getModifiableVersion(cache,ops,defNew);
  }
  return defNew;
}","public ZooClassDef getModifiableVersion(ClientSessionCache cache,List<SchemaOperation> ops,ZooClassDef newSuper){
  if (this.jdoZooIsNew()) {
    ensureLatestSuper();
    return this;
  }
  ZooClassDef defNew=newVersion(cache,newSuper);
  ops.add(new SchemaOperation.SchemaNewVersion(this,defNew,cache));
  for (  ZooClassProxy sub : versionProxy.getSubProxies()) {
    sub.getSchemaDef().getModifiableVersion(cache,ops,defNew);
  }
  return defNew;
}",0.9955849889624724
98032,"/** 
 * Schema versioning: We only create new schema instance when we add or remove fields. Renaming a field should not result in a new version! A new version is only required when the modified schema does not match the stored data. Such changes require also new versions of all sub-classes.  WHY? If every class stored only their own fields would we still have a problem? Yes, because the new version of the referenced superclass has a different OID.
 * @param cache 
 * @return New version.
 */
private ZooClassDef newVersion(ClientSessionCache cache,List<SchemaOperation> ops,ZooClassDef newSuper){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  if (newSuper == null) {
    newSuper=superDef;
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,newSuper.getOid(),schemaId,versionId + 1);
  newDef.associateSuperDef(newSuper);
  cache.addSchema(newDef,false,jdoZooGetContext().getNode());
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.versionProxy=versionProxy;
  versionProxy.newVersion(newDef);
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(f,newDef);
    newDef.localFields.add(fNew);
    if (fNew.getProxy() != null) {
      fNew.getProxy().updateVersion(fNew);
    }
  }
  newDef.associateFields();
  return newDef;
}","/** 
 * Schema versioning: We only create new schema instance when we add or remove fields. Renaming a field should not result in a new version! A new version is only required when the modified schema does not match the stored data. Such changes require also new versions of all sub-classes.  WHY? If every class stored only their own fields would we still have a problem? Yes, because the new version of the referenced superclass has a different OID.
 * @param cache 
 * @return New version.
 */
private ZooClassDef newVersion(ClientSessionCache cache,ZooClassDef newSuper){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  if (newSuper == null) {
    newSuper=superDef;
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,newSuper.getOid(),schemaId,versionId + 1);
  newDef.associateSuperDef(newSuper);
  cache.addSchema(newDef,false,jdoZooGetContext().getNode());
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.versionProxy=versionProxy;
  versionProxy.newVersion(newDef);
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(f,newDef);
    newDef.localFields.add(fNew);
    if (fNew.getProxy() != null) {
      fNew.getProxy().updateVersion(fNew);
    }
  }
  newDef.associateFields();
  return newDef;
}",0.991315965263861
98033,"/** 
 * This class is only public so it can be accessed by the test harness.  Please do not use.
 */
public final void traverse(){
  if (!traversalRequired || !cache.hasDirtyPojos()) {
    return;
  }
  traverseCache();
  traverseWorkList();
  traversalRequired=false;
}","/** 
 * This class is only public so it can be accessed by the test harness.  Please do not use.
 */
public final void traverse(){
  if (!traversalRequired && !cache.hasDirtyPojos()) {
    return;
  }
  traverseCache();
  traverseWorkList();
  traversalRequired=false;
}",0.9925925925925926
98034,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext2;
  if (!ignoreCache) {
    ClientSessionCache cache=pm.getSession().internalGetCache();
    cache.persistReachableObjects();
  }
  if (qa.getIndex() != null) {
    ext2=pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax(),!ignoreCache);
    if (!ignoreCache) {
      ClientSessionCache cache=pm.getSession().internalGetCache();
      ArrayList<ZooPC> dirtyObjs=cache.getDirtyObjects();
      if (!dirtyObjs.isEmpty()) {
        QueryMergingIterator<ZooPC> qmi=new QueryMergingIterator();
        qmi.add((Iterator<ZooPC>)ext2);
        qmi.addColl(dirtyObjs);
        ext2=qmi;
      }
    }
  }
 else {
    if (ext != null) {
      ext2=ext.iterator();
    }
 else {
      ext2=new ExtentImpl(candCls,subClasses,pm,ignoreCache).iterator();
    }
  }
  if (ext != null && !subClasses) {
    while (ext2.hasNext()) {
      Object o=ext2.next();
      if (subClasses) {
        if (!candCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (candCls != o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext2.hasNext()) {
      Object o=ext2.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext2 instanceof CloseableIterator) {
    ((CloseableIterator)ext2).close();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext2;
  if (!ignoreCache) {
    ClientSessionCache cache=pm.getSession().internalGetCache();
    cache.persistReachableObjects();
  }
  if (qa.getIndex() != null) {
    ext2=pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax(),!ignoreCache);
    if (!ignoreCache) {
      ClientSessionCache cache=pm.getSession().internalGetCache();
      ArrayList<ZooPC> dirtyObjs=cache.getDirtyObjects();
      if (!dirtyObjs.isEmpty()) {
        QueryMergingIterator<ZooPC> qmi=new QueryMergingIterator();
        qmi.add((Iterator<ZooPC>)ext2);
        qmi.add(cache.iterator(candClsDef,subClasses,ObjectState.PERSISTENT_NEW));
        ext2=qmi;
      }
    }
  }
 else {
    if (ext != null) {
      ext2=ext.iterator();
    }
 else {
      ext2=new ExtentImpl(candCls,subClasses,pm,ignoreCache).iterator();
    }
  }
  if (ext != null && !subClasses) {
    while (ext2.hasNext()) {
      Object o=ext2.next();
      if (subClasses) {
        if (!candCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (candCls != o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext2.hasNext()) {
      Object o=ext2.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext2 instanceof CloseableIterator) {
    ((CloseableIterator)ext2).close();
  }
}",0.9779122541603632
98035,"public static void removeSchema(Class<?>... classes){
  Properties props=new ZooJdoProperties(DB_NAME);
  PersistenceManagerFactory pmf=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm=null;
  try {
    pm=pmf.getPersistenceManager();
    pm.currentTransaction().begin();
    for (    Class<?> cls : classes) {
      ZooJdoHelper.schema(pm).getClass(cls).remove();
    }
    pm.currentTransaction().commit();
  }
  finally {
    safeClose(pmf,pm);
  }
}","public static void removeSchema(Class<?>... classes){
  Properties props=new ZooJdoProperties(DB_NAME);
  PersistenceManagerFactory pmf=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm=null;
  try {
    pm=pmf.getPersistenceManager();
    pm.currentTransaction().begin();
    for (    Class<?> cls : classes) {
      ZooClass c=ZooJdoHelper.schema(pm).getClass(cls);
      if (c != null) {
        c.remove();
      }
    }
    pm.currentTransaction().commit();
  }
  finally {
    safeClose(pmf,pm);
  }
}",0.94715852442672
98036,"public final void jdoZooMarkDirty(){
  context.notifyEvent(this,ZooInstanceEvent.PRE_DIRTY);
switch (status) {
case PERSISTENT_CLEAN:
    setPersDirty();
  getPrevValues();
break;
case PERSISTENT_NEW:
break;
case PERSISTENT_DIRTY:
break;
case HOLLOW_PERSISTENT_NONTRANSACTIONAL:
if (getClass() == GenericObject.class) {
((GenericObject)this).activateRead();
}
 else {
zooActivateRead();
}
jdoZooMarkDirty();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + status + ""String_Node_Str""+ Util.oidToString(jdoZooOid));
}
context.notifyEvent(this,ZooInstanceEvent.POST_DIRTY);
}","public final void jdoZooMarkDirty(){
switch (status) {
case PERSISTENT_NEW:
case PERSISTENT_DIRTY:
    return;
case PERSISTENT_CLEAN:
  context.notifyEvent(this,ZooInstanceEvent.PRE_DIRTY);
setPersDirty();
getPrevValues();
break;
case HOLLOW_PERSISTENT_NONTRANSACTIONAL:
context.notifyEvent(this,ZooInstanceEvent.PRE_DIRTY);
if (getClass() == GenericObject.class) {
((GenericObject)this).activateRead();
}
 else {
zooActivateRead();
}
jdoZooMarkDirty();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + status + ""String_Node_Str""+ Util.oidToString(jdoZooOid));
}
context.notifyEvent(this,ZooInstanceEvent.POST_DIRTY);
}",0.7435064935064936
98037,"@Override public ZooPC next(){
  ZooPC ret=next;
  ZooPC co=null;
  final boolean subClasses=this.subClasses;
  while (iter.hasNextEntry()) {
    co=iter.nextValue();
    ZooClassDef defCand=co.jdoZooGetClassDef();
    if (defCand == cls || (subClasses && cls.hasSuperClass(cls))) {
      if (co.jdoZooHasState(state)) {
        next=co;
        return ret;
      }
    }
  }
  next=null;
  return ret;
}","@Override public ZooPC next(){
  return iter.next();
}",0.2314410480349345
98038,"@Override public boolean hasNext(){
  return next != null;
}","@Override public boolean hasNext(){
  return iter.hasNext();
}",0.8360655737704918
98039,"public Entry<V> next(){
  return nextEntry();
}","@Override public Entry<V> next(){
  return nextEntry();
}",0.903846153846154
98040,"/** 
 * Returns a   {@link Collection} view of the values contained in this map.The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 */
public PrimLongValues values(){
  PrimLongValues vs=values;
  return vs != null ? vs : (values=new PrimLongValues());
}","/** 
 * Returns a   {@link Collection} view of the values contained in this map.The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 */
@Override public PrimLongValues values(){
  PrimLongValues vs=values;
  return vs != null ? vs : (values=new PrimLongValues());
}",0.993734335839599
98041,"/** 
 * Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.
 * @param keyBits key with which the specified value is to be associated
 * @param value value to be associated with the specified key
 * @return the previous value associated with <tt>key</tt>, or<tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)
 */
public V put(long keyBits,V value){
  int i=indexFor(keyBits,table.length);
  for (Entry<V> e=table[i]; e != null; e=e.next) {
    if (e.key == keyBits) {
      V oldValue=e.value;
      e.value=value;
      e.recordAccess(this);
      return oldValue;
    }
  }
  modCount++;
  addEntry(keyBits,value,i);
  return null;
}","/** 
 * Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.
 * @param keyBits key with which the specified value is to be associated
 * @param value value to be associated with the specified key
 * @return the previous value associated with <tt>key</tt>, or<tt>null</tt> if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>.)
 */
@Override public V put(long keyBits,V value){
  int i=indexFor(keyBits,table.length);
  for (Entry<V> e=table[i]; e != null; e=e.next) {
    if (e.key == keyBits) {
      V oldValue=e.value;
      e.value=value;
      e.recordAccess(this);
      return oldValue;
    }
  }
  modCount++;
  addEntry(keyBits,value,i);
  return null;
}",0.994131455399061
98042,"@SuppressWarnings(""String_Node_Str"") public boolean remove(Object o){
  return removeMapping((Entry<V>)o) != null;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean remove(Object o){
  return removeMapping((Entry<V>)o) != null;
}",0.9586776859504132
98043,"/** 
 * Returns <tt>true</tt> if this map maps one or more keys to the specified value.
 * @param value value whose presence in this map is to be tested
 * @return <tt>true</tt> if this map maps one or more keys to thespecified value
 */
public boolean containsValue(V value){
  if (value == null) {
    return containsNullValue();
  }
  Entry<V>[] tab=table;
  for (int i=0; i < tab.length; i++) {
    for (Entry<V> e=tab[i]; e != null; e=e.next) {
      if (value.equals(e.value)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns <tt>true</tt> if this map maps one or more keys to the specified value.
 * @param value value whose presence in this map is to be tested
 * @return <tt>true</tt> if this map maps one or more keys to thespecified value
 */
@Override public boolean containsValue(V value){
  if (value == null) {
    return containsNullValue();
  }
  Entry<V>[] tab=table;
  for (int i=0; i < tab.length; i++) {
    for (Entry<V> e=tab[i]; e != null; e=e.next) {
      if (value.equals(e.value)) {
        return true;
      }
    }
  }
  return false;
}",0.9908424908424908
98044,"public EntryIterator iterator(){
  return newEntryIterator();
}","@Override public EntryIterator iterator(){
  return newEntryIterator();
}",0.9264705882352942
98045,"public final int hashCode(){
  return ((int)key) ^ (value == null ? 0 : value.hashCode());
}","@Override public final int hashCode(){
  return ((int)key) ^ (value == null ? 0 : value.hashCode());
}",0.9484536082474226
98046,"/** 
 * Returns the value to which the specified key is mapped, or   {@code null} if this map contains no mapping for the key.<p>More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null :key.equals(k))}, then this method returns   {@code v}; otherwise it returns   {@code null}.  (There can be at most one such mapping.) <p>A return value of   {@code null} does not <i>necessarily</i>indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to  {@code null}. The   {@link #containsKey containsKey} operation may be used todistinguish these two cases.
 * @see #put(long,Object)
 */
public V get(long keyBits){
  for (Entry<V> e=table[indexFor(keyBits,table.length)]; e != null; e=e.next) {
    if (e.key == keyBits) {
      return e.value;
    }
  }
  return null;
}","/** 
 * Returns the value to which the specified key is mapped, or   {@code null} if this map contains no mapping for the key.<p>More formally, if this map contains a mapping from a key {@code k} to a value {@code v} such that {@code (key==null ? k==null :key.equals(k))}, then this method returns   {@code v}; otherwise it returns   {@code null}.  (There can be at most one such mapping.) <p>A return value of   {@code null} does not <i>necessarily</i>indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to  {@code null}. The   {@link #containsKey containsKey} operation may be used todistinguish these two cases.
 * @see #put(long,Object)
 */
@Override public V get(long keyBits){
  for (Entry<V> e=table[indexFor(keyBits,table.length)]; e != null; e=e.next) {
    if (e.key == keyBits) {
      return e.value;
    }
  }
  return null;
}",0.9944008958566628
98047,"/** 
 * Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.
 * @param m mappings to be stored in this map
 * @throws NullPointerException if the specified map is null
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void putAll(PrimLongMap<? extends V> m){
  int numKeysToBeAdded=m.size();
  if (numKeysToBeAdded == 0) {
    return;
  }
  if (numKeysToBeAdded > threshold) {
    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);
    if (targetCapacity > MAXIMUM_CAPACITY) {
      targetCapacity=MAXIMUM_CAPACITY;
    }
    int newCapacity=table.length;
    while (newCapacity < targetCapacity) {
      newCapacity<<=1;
    }
    if (newCapacity > table.length) {
      resize(newCapacity);
    }
  }
  for (final Iterator i=m.entrySet().iterator(); i.hasNext(); ) {
    PrimLongMapLI.Entry<? extends V> e=(Entry<? extends V>)i.next();
    put(e.getKey(),e.getValue());
  }
}","/** 
 * Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.
 * @param m mappings to be stored in this map
 * @throws NullPointerException if the specified map is null
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void putAll(PrimLongMap<? extends V> m){
  int numKeysToBeAdded=m.size();
  if (numKeysToBeAdded == 0) {
    return;
  }
  if (numKeysToBeAdded > threshold) {
    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);
    if (targetCapacity > MAXIMUM_CAPACITY) {
      targetCapacity=MAXIMUM_CAPACITY;
    }
    int newCapacity=table.length;
    while (newCapacity < targetCapacity) {
      newCapacity<<=1;
    }
    if (newCapacity > table.length) {
      resize(newCapacity);
    }
  }
  for (final Iterator i=m.entrySet().iterator(); i.hasNext(); ) {
    PrimLongMapLI.Entry<? extends V> e=(Entry<? extends V>)i.next();
    put(e.getKey(),e.getValue());
  }
}",0.9951503394762368
98048,"/** 
 * Returns a   {@link Set} view of the keys contained in this map.The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 */
public Set<Long> keySet(){
  Set<Long> ks=keySet;
  return ks != null ? ks : (keySet=new KeySet());
}","/** 
 * Returns a   {@link Set} view of the keys contained in this map.The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 */
@Override public Set<Long> keySet(){
  Set<Long> ks=keySet;
  return ks != null ? ks : (keySet=new KeySet());
}",0.9932157394843962
98049,"public final long getKey(){
  return key;
}","@Override public final long getKey(){
  return key;
}",0.8958333333333334
98050,"/** 
 * Returns index for hash code h.
 */
static int indexFor(long h,int length){
  return (int)h & (length - 1);
}","/** 
 * Returns index for hash code h.
 */
private static int indexFor(long h,int length){
  return (int)h & (length - 1);
}",0.9666666666666668
98051,"/** 
 * Returns a   {@link Set} view of the mappings contained in this map.The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 * @return a set view of the mappings contained in this map
 */
@SuppressWarnings(""String_Node_Str"") public Set<PrimLongEntry<V>> entrySet(){
  Set<PrimLongEntry<V>> es=(Set<PrimLongMap.PrimLongEntry<V>>)entrySet;
  return (Set<PrimLongEntry<V>>)(es != null ? es : (entrySet=new EntrySet()));
}","/** 
 * Returns a   {@link Set} view of the mappings contained in this map.The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation, or through the <tt>setValue</tt> operation on a map entry returned by the iterator) the results of the iteration are undefined.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 * @return a set view of the mappings contained in this map
 */
@SuppressWarnings(""String_Node_Str"") @Override public Set<PrimLongEntry<V>> entrySet(){
  Set<PrimLongEntry<V>> es=(Set<PrimLongMap.PrimLongEntry<V>>)entrySet;
  return (Set<PrimLongEntry<V>>)(es != null ? es : (entrySet=new EntrySet()));
}",0.9950592885375494
98052,"/** 
 * Returns <tt>true</tt> if this map contains a mapping for the specified key.
 * @param key   The key whose presence in this map is to be tested
 * @return <tt>true</tt> if this map contains a mapping for the specifiedkey.
 */
public boolean containsKey(long key){
  return getEntry(key) != null;
}","/** 
 * Returns <tt>true</tt> if this map contains a mapping for the specified key.
 * @param key   The key whose presence in this map is to be tested
 * @return <tt>true</tt> if this map contains a mapping for the specifiedkey.
 */
@Override public boolean containsKey(long key){
  return getEntry(key) != null;
}",0.9838187702265372
98053,"public void clear(){
  PrimLongMapLI.this.clear();
}","@Override public void clear(){
  PrimLongMapLI.this.clear();
}",0.912280701754386
98054,"public final boolean hasNext(){
  return next != null;
}","@Override public final boolean hasNext(){
  return next != null;
}",0.918032786885246
98055,"public final V getValue(){
  return value;
}","@Override public final V getValue(){
  return value;
}",0.8979591836734694
98056,"@SuppressWarnings(""String_Node_Str"") public boolean contains(Object o){
  if (!(o instanceof Entry)) {
    return false;
  }
  Entry<V> e=(Entry<V>)o;
  Entry<V> candidate=getEntry(e.getKey());
  return candidate != null && candidate.equals(e);
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean contains(Object o){
  if (!(o instanceof Entry)) {
    return false;
  }
  Entry<V> e=(Entry<V>)o;
  Entry<V> candidate=getEntry(e.getKey());
  return candidate != null && candidate.equals(e);
}",0.9800796812749004
98057,"public int size(){
  return size;
}","@Override public int size(){
  return size;
}",0.875
98058,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public final boolean equals(Object o){
  if (!(o instanceof Entry)) {
    return false;
  }
  if (this == o) {
    return true;
  }
  Entry<V> e=(Entry)o;
  long k1=key;
  long k2=e.key;
  if (k1 == k2) {
    Object v1=getValue();
    Object v2=e.getValue();
    if (v1 == v2 || (v1 != null && v1.equals(v2))) {
      return true;
    }
  }
  return false;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public final boolean equals(Object o){
  if (!(o instanceof Entry)) {
    return false;
  }
  if (this == o) {
    return true;
  }
  Entry<V> e=(Entry)o;
  long k1=key;
  long k2=e.key;
  if (k1 == k2) {
    Object v1=getValue();
    Object v2=e.getValue();
    if (v1 == v2 || (v1 != null && v1.equals(v2))) {
      return true;
    }
  }
  return false;
}",0.988095238095238
98059,"public final String toString(){
  return getKey() + ""String_Node_Str"" + getValue();
}","@Override public final String toString(){
  return getKey() + ""String_Node_Str"" + getValue();
}",0.9444444444444444
98060,"public V nextValue(){
  return nextEntry().value;
}","@Override public V nextValue(){
  return nextEntry().value;
}",0.9107142857142856
98061,"/** 
 * Returns index for hash code h.
 */
static int indexFor(long h,int length){
  return (int)h & (length - 1);
}","/** 
 * Returns index for hash code h.
 */
private static int indexFor(long h,int length){
  return (int)h & (length - 1);
}",0.9666666666666668
98062,"private void processOptimisticTransactionResult(OptimisticTransactionResult otr){
  if (otr.requiresReset()) {
    isActive=false;
    close();
    throw DBLogger.newFatalDataStore(""String_Node_Str"",null);
  }
  if (otr.requiresRefresh()) {
    if (schemaManager.hasChanges()) {
      throw new JDOOptimisticVerificationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    schemaManager.refreshSchemaAll();
  }
}","private void processOptimisticTransactionResult(OptimisticTransactionResult otr){
  if (otr.requiresReset()) {
    isActive=false;
    closeInternal();
    throw DBLogger.newFatalDataStore(""String_Node_Str"",null);
  }
  if (otr.requiresRefresh()) {
    if (schemaManager.hasChanges()) {
      throw new JDOOptimisticVerificationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    schemaManager.refreshSchemaAll();
  }
}",0.9905437352245864
98063,"public Session(Object parentSession,String dbPath,SessionConfig config){
  dbPath=ZooHelper.getDataStoreManager().getDbPath(dbPath);
  this.parentSession=parentSession;
  this.config=config;
  this.primary=ZooFactory.get().createNode(dbPath,this);
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,config.getAutoCreateSchema());
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
}","public Session(SessionParentCallback parentSession,String dbPath,SessionConfig config){
  dbPath=ZooHelper.getDataStoreManager().getDbPath(dbPath);
  this.parentSession=parentSession;
  this.config=config;
  this.primary=ZooFactory.get().createNode(dbPath,this);
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,config.getAutoCreateSchema());
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
}",0.970620239390642
98064,"@Override public void close(){
  for (  PersistenceManagerImpl pm : pms) {
    if (!pm.isClosed()) {
      throw new JDOUserException(""String_Node_Str"",new JDOUserException(),pm);
    }
  }
  JDOImplHelper.getInstance().removeStateInterrogation(SI);
  isClosed=true;
}","@Override public void close(){
  for (  PersistenceManagerImpl pm : pms) {
    if (!pm.isClosed() && pm.currentTransaction().isActive()) {
      throw new JDOUserException(""String_Node_Str"",new JDOUserException(),pm);
    }
  }
  while (!pms.isEmpty()) {
    PersistenceManager pm=pms.iterator().next();
    if (!pm.isClosed()) {
      pm.close();
    }
  }
  JDOImplHelper.getInstance().removeStateInterrogation(SI);
  isClosed=true;
}",0.7613636363636364
98065,"@Test public void testCreateAndCloseSession(){
  ZooJdoProperties props=new ZooJdoProperties(TestTools.getDbName());
  PersistenceManagerFactory pmf1=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm11=pmf1.getPersistenceManager();
  PersistenceManagerFactory pmf2=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm21=pmf2.getPersistenceManager();
  assertFalse(pm21 == pm11);
  PersistenceManager pm12=pmf1.getPersistenceManager();
  assertTrue(pm12 != pm11);
  try {
    pmf1.close();
    fail();
  }
 catch (  JDOUserException e) {
  }
  assertFalse(pm11.isClosed());
  assertFalse(pm12.isClosed());
  pm11.close();
  pm12.close();
  assertTrue(pm11.isClosed());
  assertTrue(pm12.isClosed());
  assertFalse(pm21.isClosed());
  pm21.close();
  assertTrue(pm21.isClosed());
  pmf1.close();
  pmf2.close();
  try {
    pmf1.getPersistenceManager();
    fail();
  }
 catch (  JDOUserException e) {
  }
  try {
    pmf1.setConnectionURL(""String_Node_Str"");
    fail();
  }
 catch (  JDOUserException e) {
  }
}","@Test public void testCreateAndCloseSession(){
  ZooJdoProperties props=new ZooJdoProperties(TestTools.getDbName());
  PersistenceManagerFactory pmf1=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm11=pmf1.getPersistenceManager();
  PersistenceManagerFactory pmf2=JDOHelper.getPersistenceManagerFactory(props);
  PersistenceManager pm21=pmf2.getPersistenceManager();
  assertFalse(pm21 == pm11);
  PersistenceManager pm12=pmf1.getPersistenceManager();
  assertTrue(pm12 != pm11);
  pm12.currentTransaction().begin();
  try {
    pmf1.close();
    fail();
  }
 catch (  JDOUserException e) {
  }
  pm12.currentTransaction().commit();
  assertFalse(pm11.isClosed());
  assertFalse(pm12.isClosed());
  pm11.close();
  pm12.close();
  assertTrue(pm11.isClosed());
  assertTrue(pm12.isClosed());
  assertFalse(pm21.isClosed());
  pm21.close();
  assertTrue(pm21.isClosed());
  pmf1.close();
  pmf2.close();
  try {
    pmf1.getPersistenceManager();
    fail();
  }
 catch (  JDOUserException e) {
  }
  try {
    pmf1.setConnectionURL(""String_Node_Str"");
    fail();
  }
 catch (  JDOUserException e) {
  }
}",0.9655172413793104
98066,"private void processOptimisticVerification(boolean isTrialRun){
  ArrayList<Long> updateOids=new ArrayList<>();
  ArrayList<Long> updateTimstamps=new ArrayList<>();
  getObjectToCommit(updateOids,updateTimstamps);
  OptimisticTransactionResult ovrSummary=new OptimisticTransactionResult();
  for (  Node n : nodes) {
    ovrSummary.add(n.beginCommit(updateOids,updateTimstamps));
  }
  processOptimisticTransactionResult(ovrSummary);
  if (!ovrSummary.getConflicts().isEmpty()) {
    JDOOptimisticVerificationException[] ea=new JDOOptimisticVerificationException[ovrSummary.getConflicts().size()];
    int pos=0;
    for (    Long oid : ovrSummary.getConflicts()) {
      Object failedObj=cache.findCoByOID(oid);
      if (failedObj == null) {
        failedObj=cache.getGeneric(oid).getOrCreateHandle();
      }
      ea[pos]=new JDOOptimisticVerificationException(Util.oidToString(oid),failedObj);
      pos++;
    }
    if (!isTrialRun) {
      rollback();
    }
    throw new JDOOptimisticVerificationException(""String_Node_Str"",ea);
  }
}","private void processOptimisticVerification(boolean isTrialRun){
  ArrayList<Long> updateOids=new ArrayList<>();
  ArrayList<Long> updateTimstamps=new ArrayList<>();
  getObjectToCommit(updateOids,updateTimstamps);
  OptimisticTransactionResult ovrSummary=new OptimisticTransactionResult();
  for (  Node n : nodes) {
    if (isTrialRun) {
      ovrSummary.add(n.checkTxConsistency(updateOids,updateTimstamps));
    }
 else {
      ovrSummary.add(n.beginCommit(updateOids,updateTimstamps));
    }
  }
  processOptimisticTransactionResult(ovrSummary);
  if (!ovrSummary.getConflicts().isEmpty()) {
    JDOOptimisticVerificationException[] ea=new JDOOptimisticVerificationException[ovrSummary.getConflicts().size()];
    int pos=0;
    for (    Long oid : ovrSummary.getConflicts()) {
      Object failedObj=cache.findCoByOID(oid);
      if (failedObj == null) {
        failedObj=cache.getGeneric(oid).getOrCreateHandle();
      }
      ea[pos]=new JDOOptimisticVerificationException(Util.oidToString(oid),failedObj);
      pos++;
    }
    if (!isTrialRun) {
      rollback();
    }
    throw new JDOOptimisticVerificationException(""String_Node_Str"",ea);
  }
}",0.9473206176203453
98067,"@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<Long> updateOid,ArrayList<Long> updateTimestamps){
  DBLogger.debugPrintln(1,""String_Node_Str"");
  lock.unlock();
  lock=sm.getWriteLock();
  lock.lock();
  OptimisticTransactionResult ovr=checkConsistencyInternal(updateOid,updateTimestamps,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  DBLogger.debugPrintln(1,""String_Node_Str"");
  lock.unlock();
  lock=sm.getWriteLock();
  lock.lock();
  return ovr;
}","@Override public OptimisticTransactionResult checkTxConsistency(ArrayList<Long> updateOid,ArrayList<Long> updateTimestamps){
  DBLogger.debugPrintln(1,""String_Node_Str"");
  sm.getLock().release(this);
  sm.getLock().writeLock(this);
  OptimisticTransactionResult ovr=checkConsistencyInternal(updateOid,updateTimestamps,true);
  if (ovr.hasFailed()) {
    return ovr;
  }
  DBLogger.debugPrintln(1,""String_Node_Str"");
  sm.getLock().release(this);
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  return ovr;
}",0.7130761994355598
98068,"@Override public OptimisticTransactionResult rollbackTransaction(){
  try {
    OptimisticTransactionResult txr=new OptimisticTransactionResult(null,false,false);
    if (txContext.getSchemaIndexTxId() != schemaIndex.getTxIdOfLastWriteThatRequiresRefresh()) {
      txr.setRefreshRequired(true);
    }
    if (txContext.getSchemaTxId() != schemaIndex.getTxIdOfLastWrite()) {
      txr.setResetRequired(true);
    }
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    return txr;
  }
  finally {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    lock.unlock();
    lock=null;
  }
}","@Override public OptimisticTransactionResult rollbackTransaction(){
  try {
    OptimisticTransactionResult txr=new OptimisticTransactionResult(null,false,false);
    if (txContext.getSchemaIndexTxId() != schemaIndex.getTxIdOfLastWriteThatRequiresRefresh()) {
      txr.setRefreshRequired(true);
    }
    if (txContext.getSchemaTxId() != schemaIndex.getTxIdOfLastWrite()) {
      txr.setResetRequired(true);
    }
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    return txr;
  }
  finally {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    sm.getLock().release(this);
  }
}",0.9648609077598828
98069,"@Override public void commit(){
  try {
    int oidPage=oidIndex.write();
    int schemaPage1=schemaIndex.write(txId);
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
    txContext.reset();
  }
  finally {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    lock.unlock();
    lock=null;
  }
}","@Override public void commit(){
  try {
    int oidPage=oidIndex.write();
    int schemaPage1=schemaIndex.write(txId);
    txContext.setSchemaTxId(schemaIndex.getTxIdOfLastWrite());
    txContext.setSchemaIndexTxId(schemaIndex.getTxIdOfLastWriteThatRequiresRefresh());
    sm.commitInfrastructure(oidPage,schemaPage1,oidIndex.getLastUsedOid(),txId);
    txContext.reset();
  }
  finally {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    sm.getLock().release(this);
  }
}",0.9452631578947368
98070,"DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  DBLogger.debugPrintln(1,""String_Node_Str"");
  lock=sm.getReadLock();
  lock.lock();
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}","DiskAccessOneFile(Node node,AbstractCache cache,SessionManager sm){
  this.sm=sm;
  this.node=node;
  this.cache=cache;
  DBLogger.debugPrintln(1,""String_Node_Str"");
  sm.getLock().readLock(this);
  this.freeIndex=sm.getFsm();
  this.file=sm.getFile();
  oidIndex=sm.getOidIndex();
  schemaIndex=sm.getSchemaIndex();
  objectReader=new ObjectReader(file);
  ddsPool=new PoolDDS(file,this.cache);
  fileInAP=file.getReader(true);
}",0.95512082853855
98071,"@Override public long beginTransaction(){
  txContext.reset();
  lock=sm.getWriteLock();
  try {
    DBLogger.debugPrintln(1,""String_Node_Str"");
    if (!lock.tryLock(10,TimeUnit.SECONDS)) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  txId=sm.getNextTxId();
  return txId;
}","@Override public long beginTransaction(){
  txContext.reset();
  if (ALLOW_READ_CONCURRENCY) {
    sm.getLock().readLock(this);
  }
 else {
    sm.getLock().writeLock(this);
  }
  txId=sm.getNextTxId();
  return txId;
}",0.2847457627118644
98072,"@Override public OptimisticTransactionResult beginCommit(ArrayList<Long> updateOid,ArrayList<Long> updateTimestamps){
  DBLogger.debugPrintln(1,""String_Node_Str"");
  lock.unlock();
  lock=sm.getWriteLock();
  lock.lock();
  OptimisticTransactionResult ovr=checkConsistencyInternal(updateOid,updateTimestamps,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}","@Override public OptimisticTransactionResult beginCommit(ArrayList<Long> updateOid,ArrayList<Long> updateTimestamps){
  DBLogger.debugPrintln(1,""String_Node_Str"");
  sm.getLock().release(this);
  sm.getLock().writeLock(this);
  OptimisticTransactionResult ovr=checkConsistencyInternal(updateOid,updateTimestamps,false);
  if (ovr.hasFailed()) {
    return ovr;
  }
  file.newTransaction(txId);
  freeIndex.notifyBegin(txId);
  return ovr;
}",0.8995433789954338
98073,"@Before public void setUp(){
  TestTools.removeDb();
  TestTools.createDb();
}","@Before public void setUp(){
  DiskAccessOneFile.allowReadConcurrency(true);
  TestTools.removeDb();
  TestTools.createDb();
}",0.7647058823529411
98074,"@After public void tearDown(){
  TestTools.removeDb();
}","@After public void tearDown(){
  DiskAccessOneFile.allowReadConcurrency(false);
  TestTools.removeDb();
}",0.6956521739130435
98075,"@Before public void setUp(){
  TestTools.removeDb();
  TestTools.createDb();
}","@Before public void setUp(){
  DiskAccessOneFile.allowReadConcurrency(true);
  TestTools.removeDb();
  TestTools.createDb();
}",0.7647058823529411
98076,"@After public void tearDown(){
  TestTools.removeDb();
}","@After public void tearDown(){
  DiskAccessOneFile.allowReadConcurrency(false);
  TestTools.removeDb();
}",0.6956521739130435
98077,"@Before public void setUp(){
  TestTools.removeDb();
  TestTools.createDb();
}","@Before public void setUp(){
  DiskAccessOneFile.allowReadConcurrency(true);
  TestTools.removeDb();
  TestTools.createDb();
}",0.7647058823529411
98078,"@After public void tearDown(){
  TestTools.removeDb();
}","@After public void tearDown(){
  DiskAccessOneFile.allowReadConcurrency(false);
  TestTools.removeDb();
}",0.6956521739130435
98079,"/** 
 * Start a process through a main() method.
 */
public static TestProcess launchProcess(String optionsAsString,Class<?> mainClass,String[] arguments){
  String FS=File.separator;
  String jvm=System.getProperty(""String_Node_Str"") + FS + ""String_Node_Str""+ FS+ ""String_Node_Str"";
  String cp=System.getProperty(""String_Node_Str"");
  String[] options=optionsAsString.split(""String_Node_Str"");
  List<String> command=new ArrayList<String>();
  command.add(jvm);
  command.addAll(Arrays.asList(options));
  command.add(mainClass.getName());
  command.addAll(Arrays.asList(arguments));
  return createProcess(command,cp);
}","/** 
 * Start a process through a main() method.
 */
public static TestProcess launchProcess(String optionsAsString,Class<?> mainClass,String[] arguments){
  String FS=File.separator;
  String jvm=System.getProperty(""String_Node_Str"") + FS + ""String_Node_Str""+ FS+ ""String_Node_Str"";
  String cp=System.getProperty(""String_Node_Str"");
  List<String> command=new ArrayList<String>();
  command.add(jvm);
  if (optionsAsString != null && optionsAsString.length() > 0) {
    String[] options=optionsAsString.split(""String_Node_Str"");
    command.addAll(Arrays.asList(options));
  }
  command.add(mainClass.getName());
  command.addAll(Arrays.asList(arguments));
  return createProcess(command,cp);
}",0.7005307050796058
98080,"public DataIndexUpdater(ZooClassDef def){
  ArrayList<ZooFieldDef> pfl=new ArrayList<ZooFieldDef>();
  for (  ZooFieldDef f : def.getAllFields()) {
    if (f.isIndexed()) {
      pfl.add(f);
    }
  }
  indFields=pfl.toArray(new ZooFieldDef[pfl.size()]);
}","public DataIndexUpdater(ZooClassDef def){
  refreshWithSchema(def);
}",0.3507692307692308
98081,"private final void writeClassInfo(Class<?> cls,Object val){
  if (cls == null) {
    out.writeByte(SerializerTools.REF_NULL_ID);
    return;
  }
  Byte id=SerializerTools.PRE_DEF_CLASSES_MAP.get(cls);
  if (id != null) {
    out.writeByte(id);
    return;
  }
  if (isPersistentCapable(cls)) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((ZooPC)val).jdoZooGetClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (GenericObject.class == cls) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((GenericObject)val).getClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (GOProxy.class.isAssignableFrom(cls)) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((GOProxy)val).getGenericObject().getClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (cls.isArray()) {
    out.writeByte(SerializerTools.REF_ARRAY_ID);
    return;
  }
  id=usedClasses.get(cls);
  if (id != null) {
    out.writeByte(id);
    return;
  }
  out.writeByte(SerializerTools.REF_CUSTOM_CLASS_ID);
  writeString(cls.getName());
  int idInt=(usedClasses.size() + 1 + SerializerTools.REF_CLS_OFS);
  if (idInt > 125) {
    throw DBLogger.newFatal(""String_Node_Str"" + idInt);
  }
  usedClasses.put(cls,(byte)idInt);
}","private final void writeClassInfo(Class<?> cls,Object val){
  if (cls == null) {
    out.writeByte(SerializerTools.REF_NULL_ID);
    return;
  }
  Byte id=SerializerTools.PRE_DEF_CLASSES_MAP.get(cls);
  if (id != null) {
    out.writeByte(id);
    return;
  }
  if (isPersistentCapable(cls)) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((ZooPC)val).jdoZooGetClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (GenericObject.class == cls) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((GenericObject)val).getClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (GOProxy.class.isAssignableFrom(cls)) {
    out.writeByte(SerializerTools.REF_PERS_ID);
    if (val != null) {
      long soid=((GOProxy)val).getGenericObject().getClassDef().getOid();
      out.writeLong(soid);
    }
 else {
      long soid=cache.getSchema(cls,node).getOid();
      out.writeLong(soid);
    }
    return;
  }
  if (cls.isArray()) {
    out.writeByte(SerializerTools.REF_ARRAY_ID);
    return;
  }
  id=usedClasses.get(cls);
  if (id != null) {
    out.writeByte(id);
    return;
  }
  out.writeByte(SerializerTools.REF_CUSTOM_CLASS_ID);
  writeString(cls.getName());
  int idInt=(usedClasses.size() + 1 + SerializerTools.REF_CLS_OFS);
  if (idInt > 125) {
    throw DBLogger.newFatalInternal(""String_Node_Str"" + idInt);
  }
  usedClasses.put(cls,(byte)idInt);
}",0.997584541062802
98082,"public void activateRead(){
  if (isHollow) {
    GenericObject go=context.getNode().readGenericObject(def,oid);
    if (go != this) {
      throw DBLogger.newFatal(""String_Node_Str"");
    }
  }
}","public void activateRead(){
  if (isHollow) {
    GenericObject go=context.getNode().readGenericObject(def,oid);
    if (go != this) {
      throw DBLogger.newFatalInternal(""String_Node_Str"");
    }
  }
}",0.98
98083,"public abstract List<Long> checkTxConsistency(ArrayList<Long> updateOids,ArrayList<Long> updateTimstamps);","public abstract OptimisticVerificationResult checkTxConsistency(ArrayList<Long> updateOids,ArrayList<Long> updateTimstamps);",0.8782608695652174
98084,"public abstract List<Long> beginCommit(ArrayList<Long> updateOids,ArrayList<Long> updatesTimstamps);","public abstract OptimisticVerificationResult beginCommit(ArrayList<Long> updateOids,ArrayList<Long> updatesTimstamps);",0.8715596330275229
98085,"/** 
 * Verify optimistic consistency of the current transaction.
 */
public void checkConsistency(){
  if (schemaManager.hasChanges()) {
    throw new JDOOptimisticVerificationException(""String_Node_Str"" + ""String_Node_Str"");
  }
  DBLogger.warning(""String_Node_Str"");
  ArrayList<Long> updateOids=new ArrayList<>();
  ArrayList<Long> updateTimstamps=new ArrayList<>();
  getObjectToCommit(updateOids,updateTimstamps);
  ArrayList<Long> failedOids=new ArrayList<Long>();
  for (  Node n : nodes) {
    List<Long> nodeFailures=n.checkTxConsistency(updateOids,updateTimstamps);
    if (!nodeFailures.isEmpty()) {
      failedOids.addAll(nodeFailures);
    }
  }
  if (!failedOids.isEmpty()) {
    JDOOptimisticVerificationException[] ea=new JDOOptimisticVerificationException[failedOids.size()];
    for (int i=0; i < failedOids.size(); i++) {
      Long oid=failedOids.get(i);
      Object failedObj=cache.findCoByOID(oid);
      ea[i]=new JDOOptimisticVerificationException(Util.oidToString(oid),failedObj);
    }
    throw new JDOOptimisticVerificationException(""String_Node_Str"",ea);
  }
}","/** 
 * Verify optimistic consistency of the current transaction.
 */
public void checkConsistency(){
  processOptimisticVerification(true);
}",0.2220421393841166
98086,"public void commit(boolean retainValues){
  checkActive();
  ObjectGraphTraverser ogt=new ObjectGraphTraverser(this,cache);
  ogt.traverse();
  preCommit();
  schemaManager.commit();
  try {
    commitInternal();
    for (    Node n : nodes) {
      n.commit();
    }
    cache.postCommit(retainValues);
  }
 catch (  RuntimeException e) {
    if (DBLogger.isUser(e)) {
      for (      ZooClassDef cs : cache.getSchemata()) {
        cs.getProvidedContext().getDataSink().reset();
        cs.getProvidedContext().getDataDeleteSink().reset();
      }
      for (      Node n : nodes) {
        n.revert();
      }
    }
    throw e;
  }
  for (  CloseableIterator<?> ext : extents.keySet().toArray(new CloseableIterator[0])) {
    ext.close();
  }
  DBLogger.debugPrintln(2,""String_Node_Str"");
  isActive=false;
}","public void commit(boolean retainValues){
  try {
    checkActive();
    ObjectGraphTraverser ogt=new ObjectGraphTraverser(this,cache);
    ogt.traverse();
    preCommit();
    schemaManager.commit();
    try {
      commitInternal();
      for (      Node n : nodes) {
        n.commit();
      }
      cache.postCommit(retainValues);
    }
 catch (    RuntimeException e) {
      if (DBLogger.isUser(e)) {
        for (        ZooClassDef cs : cache.getSchemata()) {
          cs.getProvidedContext().getDataSink().reset();
          cs.getProvidedContext().getDataDeleteSink().reset();
        }
        for (        Node n : nodes) {
          n.revert();
        }
      }
      throw e;
    }
    for (    CloseableIterator<?> ext : extents.keySet().toArray(new CloseableIterator[0])) {
      ext.close();
    }
    DBLogger.debugPrintln(2,""String_Node_Str"");
    isActive=false;
  }
 catch (  RuntimeException e) {
    if (DBLogger.isFatalDataStoreException(e) && !DBLogger.isOptimisticVerificationException(e)) {
      isActive=false;
      close();
    }
    throw e;
  }
}",0.8453825857519789
98087,"private void preCommit(){
  ArrayList<Long> updateOids=new ArrayList<>();
  ArrayList<Long> updateTimstamps=new ArrayList<>();
  getObjectToCommit(updateOids,updateTimstamps);
  ArrayList<Long> failedOids=new ArrayList<Long>();
  for (  Node n : nodes) {
    List<Long> nodeFailures=n.beginCommit(updateOids,updateTimstamps);
    if (!nodeFailures.isEmpty()) {
      failedOids.addAll(nodeFailures);
    }
  }
  if (!failedOids.isEmpty()) {
    JDOOptimisticVerificationException[] ea=new JDOOptimisticVerificationException[failedOids.size()];
    for (int i=0; i < failedOids.size(); i++) {
      Long oid=failedOids.get(i);
      Object failedObj=cache.findCoByOID(oid);
      ea[i]=new JDOOptimisticVerificationException(Util.oidToString(oid),failedObj);
    }
    rollback();
    throw new JDOOptimisticVerificationException(""String_Node_Str"",ea);
  }
}","private void preCommit(){
  processOptimisticVerification(false);
}",0.1385281385281385
98088,"public static ZooClassDef createFromJavaType(Class<?> cls,ZooClassDef defSuper,Node node,Session session){
  ZooClassDef def;
  long superOid=0;
  if (cls != ZooPC.class) {
    if (defSuper == null) {
      throw DBLogger.newUser(""String_Node_Str"" + cls);
    }
    superOid=defSuper.getOid();
    if (superOid == 0) {
      throw DBLogger.newFatal(""String_Node_Str"" + cls.getName());
    }
  }
  long oid=node.getOidBuffer().allocateOid();
  def=new ZooClassDef(cls.getName(),oid,superOid,oid,0);
  ArrayList<ZooFieldDef> fieldList=new ArrayList<ZooFieldDef>();
  Field[] fields=cls.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field jField=fields[i];
    if (Modifier.isStatic(jField.getModifiers()) || Modifier.isTransient(jField.getModifiers())) {
      continue;
    }
    long fieldOid=node.getOidBuffer().allocateOid();
    ZooFieldDef zField=ZooFieldDef.createFromJavaType(def,jField,fieldOid);
    fieldList.add(zField);
  }
  def.registerFields(fieldList);
  def.cls=cls;
  def.associateSuperDef(defSuper);
  def.associateProxy(new ZooClassProxy(def,session));
  def.associateFields();
  return def;
}","public static ZooClassDef createFromJavaType(Class<?> cls,ZooClassDef defSuper,Node node,Session session){
  ZooClassDef def;
  long superOid=0;
  if (cls != ZooPC.class) {
    if (defSuper == null) {
      throw DBLogger.newUser(""String_Node_Str"" + cls);
    }
    superOid=defSuper.getOid();
    if (superOid == 0) {
      throw DBLogger.newFatalInternal(""String_Node_Str"" + cls.getName());
    }
  }
  long oid=node.getOidBuffer().allocateOid();
  def=new ZooClassDef(cls.getName(),oid,superOid,oid,0);
  ArrayList<ZooFieldDef> fieldList=new ArrayList<ZooFieldDef>();
  Field[] fields=cls.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field jField=fields[i];
    if (Modifier.isStatic(jField.getModifiers()) || Modifier.isTransient(jField.getModifiers())) {
      continue;
    }
    long fieldOid=node.getOidBuffer().allocateOid();
    ZooFieldDef zField=ZooFieldDef.createFromJavaType(def,jField,fieldOid);
    fieldList.add(zField);
  }
  def.registerFields(fieldList);
  def.cls=cls;
  def.associateSuperDef(defSuper);
  def.associateProxy(new ZooClassProxy(def,session));
  def.associateFields();
  return def;
}",0.9964819700967458
98089,"/** 
 * Schema operation callback for removing this class definition.
 */
public void socRemoveDef(){
  if (!superProxy.subClasses.remove(this)) {
    throw DBLogger.newFatal(""String_Node_Str"");
  }
}","/** 
 * Schema operation callback for removing this class definition.
 */
public void socRemoveDef(){
  if (!superProxy.subClasses.remove(this)) {
    throw DBLogger.newFatalInternal(""String_Node_Str"");
  }
}",0.9803921568627452
98090,"public void refreshSchema(ZooClassDef def){
  def.jdoZooGetNode().refreshSchema(def);
}","public void refreshSchema(ZooClassDef def){
  def.jdoZooGetNode().refreshSchema(def);
  def.getProvidedContext().getIndexer().refreshWithSchema(def);
}",0.7310924369747899
98091,"public final void makeTransient(ZooPC pc){
  if (objs.remove(pc.jdoZooGetOid()) == null) {
    throw DBLogger.newFatal(""String_Node_Str"");
  }
  pc.jdoZooMarkTransient();
}","public final void makeTransient(ZooPC pc){
  if (objs.remove(pc.jdoZooGetOid()) == null) {
    throw DBLogger.newFatalInternal(""String_Node_Str"");
  }
  pc.jdoZooMarkTransient();
}",0.9772727272727272
98092,"/** 
 * @param oid
 * @return Whether the object exists
 */
public boolean isOidUsed(long oid){
  checkOpen();
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    return true;
  }
  GenericObject go=cache.getGeneric(oid);
  if (go != null) {
    return true;
  }
  for (  Node n : nodes) {
    if (n.checkIfObjectExists(oid)) {
      return true;
    }
  }
  return false;
}","/** 
 * @param oid
 * @return Whether the object exists
 */
public boolean isOidUsed(long oid){
  checkActive();
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    return true;
  }
  GenericObject go=cache.getGeneric(oid);
  if (go != null) {
    return true;
  }
  for (  Node n : nodes) {
    if (n.checkIfObjectExists(oid)) {
      return true;
    }
  }
  return false;
}",0.9870466321243524
98093,"public ZooHandleImpl getHandle(long oid){
  checkOpen();
  GenericObject gob=cache.getGeneric(oid);
  if (gob != null) {
    return gob.getOrCreateHandle();
  }
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    if (co.jdoZooIsNew() || co.jdoZooIsDirty()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ Util.getOidAsString(co));
    }
    ZooClassDef schema=co.jdoZooGetClassDef();
    GenericObject go=co.jdoZooGetNode().readGenericObject(schema,oid);
    return go.getOrCreateHandle();
  }
  try {
    for (    Node n : nodes) {
      ZooClassProxy schema=getSchemaManager().locateSchemaForObject(oid,n);
      GenericObject go=n.readGenericObject(schema.getSchemaDef(),oid);
      return go.getOrCreateHandle();
    }
  }
 catch (  RuntimeException e) {
    if (!DBLogger.isObjectNotFoundException(e)) {
      throw e;
    }
  }
  return null;
}","public ZooHandleImpl getHandle(long oid){
  checkActive();
  GenericObject gob=cache.getGeneric(oid);
  if (gob != null) {
    return gob.getOrCreateHandle();
  }
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    if (co.jdoZooIsNew() || co.jdoZooIsDirty()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ Util.getOidAsString(co));
    }
    ZooClassDef schema=co.jdoZooGetClassDef();
    GenericObject go=co.jdoZooGetNode().readGenericObject(schema,oid);
    return go.getOrCreateHandle();
  }
  try {
    for (    Node n : nodes) {
      ZooClassProxy schema=getSchemaManager().locateSchemaForObject(oid,n);
      GenericObject go=n.readGenericObject(schema.getSchemaDef(),oid);
      return go.getOrCreateHandle();
    }
  }
 catch (  RuntimeException e) {
    if (!DBLogger.isObjectNotFoundException(e)) {
      throw e;
    }
  }
  return null;
}",0.99457111834962
98094,"public void deletePersistent(Object pc){
  checkOpen();
  ZooPCImpl co=checkObject(pc);
  co.jdoZooMarkDeleted();
}","public void deletePersistent(Object pc){
  checkActive();
  ZooPCImpl co=checkObject(pc);
  co.jdoZooMarkDeleted();
}",0.9655172413793104
98095,"public void commit(boolean retainValues){
  checkOpen();
  ObjectGraphTraverser ogt=new ObjectGraphTraverser(this,cache);
  ogt.traverse();
  schemaManager.commit();
  try {
    commitInternal();
    for (    Node n : nodes) {
      n.commit();
    }
    cache.postCommit(retainValues);
  }
 catch (  RuntimeException e) {
    if (DBLogger.isUser(e)) {
      for (      ZooClassDef cs : cache.getSchemata()) {
        cs.getProvidedContext().getDataSink().reset();
        cs.getProvidedContext().getDataDeleteSink().reset();
      }
      for (      Node n : nodes) {
        n.revert();
      }
    }
    throw e;
  }
  for (  CloseableIterator<?> ext : extents.keySet()) {
    ext.refresh();
  }
  DBLogger.debugPrintln(2,""String_Node_Str"");
  isActive=false;
}","public void commit(boolean retainValues){
  checkActive();
  ObjectGraphTraverser ogt=new ObjectGraphTraverser(this,cache);
  ogt.traverse();
  schemaManager.commit();
  try {
    commitInternal();
    for (    Node n : nodes) {
      n.commit();
    }
    cache.postCommit(retainValues);
  }
 catch (  RuntimeException e) {
    if (DBLogger.isUser(e)) {
      for (      ZooClassDef cs : cache.getSchemata()) {
        cs.getProvidedContext().getDataSink().reset();
        cs.getProvidedContext().getDataDeleteSink().reset();
      }
      for (      Node n : nodes) {
        n.revert();
      }
    }
    throw e;
  }
  for (  CloseableIterator<?> ext : extents.keySet()) {
    ext.refresh();
  }
  DBLogger.debugPrintln(2,""String_Node_Str"");
  isActive=false;
}",0.9934640522875816
98096,"public void makePersistent(ZooPCImpl pc){
  checkOpen();
  if (pc.jdoZooIsPersistent()) {
    if (pc.jdoZooGetContext().getSession() != this) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
    if (pc.jdoZooIsDeleted()) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
    return;
  }
  primary.makePersistent(pc);
}","public void makePersistent(ZooPCImpl pc){
  checkActive();
  if (pc.jdoZooIsPersistent()) {
    if (pc.jdoZooGetContext().getSession() != this) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
    if (pc.jdoZooIsDeleted()) {
      throw DBLogger.newUser(""String_Node_Str"");
    }
    return;
  }
  primary.makePersistent(pc);
}",0.9850299401197604
98097,"private void checkOpen(){
  if (!isActive) {
    throw new JDOUserException(""String_Node_Str"");
  }
  if (!isOpen) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
}","private void checkOpen(){
  if (!isOpen) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
}",0.7196969696969697
98098,"public void evictAll(boolean subClasses,Class<?> cls){
  checkOpen();
  cache.evictAll(subClasses,cls);
}","public void evictAll(boolean subClasses,Class<?> cls){
  checkActive();
  cache.evictAll(subClasses,cls);
}",0.9622641509433962
98099,"public void refreshAll(Collection<?> arg0){
  checkOpen();
  for (  Object obj : arg0) {
    refreshObject(obj);
  }
}","public void refreshAll(Collection<?> arg0){
  checkActive();
  for (  Object obj : arg0) {
    refreshObject(obj);
  }
}",0.9663865546218487
98100,"public void rollback(){
  checkOpen();
  schemaManager.rollback();
  for (  Node n : nodes) {
    n.rollback();
  }
  cache.rollback();
  isActive=false;
}","public void rollback(){
  checkActive();
  schemaManager.rollback();
  for (  Node n : nodes) {
    n.rollback();
  }
  cache.rollback();
  isActive=false;
}",0.9743589743589745
98101,"public void removeInstanceLifecycleListener(InstanceLifecycleListener listener){
  checkOpen();
  for (  ZooClassDef def : cache.getSchemata()) {
    def.getProvidedContext().removeLifecycleListener(listener);
  }
}","public void removeInstanceLifecycleListener(InstanceLifecycleListener listener){
  checkActive();
  for (  ZooClassDef def : cache.getSchemata()) {
    def.getProvidedContext().removeLifecycleListener(listener);
  }
}",0.976851851851852
98102,"public void makeTransient(ZooPCImpl pc){
  checkOpen();
  if (!pc.jdoZooIsPersistent()) {
    return;
  }
  if (pc.jdoZooGetContext().getSession() != this) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  if (pc.jdoZooIsDirty()) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  cache.makeTransient((ZooPCImpl)pc);
}","public void makeTransient(ZooPCImpl pc){
  checkActive();
  if (!pc.jdoZooIsPersistent()) {
    return;
  }
  if (pc.jdoZooGetContext().getSession() != this) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  if (pc.jdoZooIsDirty()) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  cache.makeTransient((ZooPCImpl)pc);
}",0.9847560975609756
98103,"public Object getObjectById(Object arg0){
  checkOpen();
  long oid=(Long)arg0;
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    if (co.jdoZooIsStateHollow() && !co.jdoZooIsDeleted()) {
      co.jdoZooGetNode().refreshObject(co);
    }
    return co;
  }
  for (  Node n : nodes) {
    co=n.loadInstanceById(oid);
    if (co != null) {
      break;
    }
  }
  return co;
}","public Object getObjectById(Object arg0){
  checkActive();
  long oid=(Long)arg0;
  ZooPCImpl co=cache.findCoByOID(oid);
  if (co != null) {
    if (co.jdoZooIsStateHollow() && !co.jdoZooIsDeleted()) {
      co.jdoZooGetNode().refreshObject(co);
    }
    return co;
  }
  for (  Node n : nodes) {
    co=n.loadInstanceById(oid);
    if (co != null) {
      break;
    }
  }
  return co;
}",0.9871134020618556
98104,"public Object[] getObjectsById(Collection<? extends Object> arg0){
  checkOpen();
  Object[] res=new Object[arg0.size()];
  int i=0;
  for (  Object obj : arg0) {
    res[i]=getObjectById(obj);
    i++;
  }
  return res;
}","public Object[] getObjectsById(Collection<? extends Object> arg0){
  checkActive();
  Object[] res=new Object[arg0.size()];
  int i=0;
  for (  Object obj : arg0) {
    res[i]=getObjectById(obj);
    i++;
  }
  return res;
}",0.9775784753363228
98105,"public void begin(){
  if (isActive) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  isActive=true;
}","public void begin(){
  checkOpen();
  if (isActive) {
    throw DBLogger.newUser(""String_Node_Str"");
  }
  isActive=true;
}",0.935064935064935
98106,"public Session(PersistenceManagerImpl pm,String dbPath,boolean autoCreateSchema){
  this.pm=pm;
  System.out.println(""String_Node_Str"");
  isActive=true;
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,autoCreateSchema);
  this.primary=ZooFactory.get().createNode(dbPath,cache);
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
  System.out.println(""String_Node_Str"");
  isActive=false;
}","public Session(PersistenceManagerImpl pm,String dbPath,boolean autoCreateSchema){
  this.pm=pm;
  this.cache=new ClientSessionCache(this);
  this.schemaManager=new SchemaManager(cache,autoCreateSchema);
  this.primary=ZooFactory.get().createNode(dbPath,cache);
  this.nodes.add(primary);
  this.cache.addNode(primary);
  this.primary.connect();
}",0.8553770086526576
98107,"public Collection<ZooPCImpl> getCachedObjects(){
  checkOpen();
  HashSet<ZooPCImpl> ret=new HashSet<ZooPCImpl>();
  for (  ZooPCImpl o : cache.getAllObjects()) {
    ret.add(o);
  }
  return ret;
}","public Collection<ZooPCImpl> getCachedObjects(){
  checkActive();
  HashSet<ZooPCImpl> ret=new HashSet<ZooPCImpl>();
  for (  ZooPCImpl o : cache.getAllObjects()) {
    ret.add(o);
  }
  return ret;
}",0.9748743718592964
98108,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManagerFactory#setRetainValues(boolean)
 */
@Override public void setRetainValues(boolean flag){
  checkFrozen();
  isRetainValues=flag;
}","/** 
 * @see PersistenceManagerFactory#setRetainValues(boolean)
 */
@Override public void setRetainValues(boolean flag){
  checkFrozen();
  isRetainValues=flag;
}",0.9337175792507204
98109,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManagerFactory#getRetainValues()
 */
@Override public boolean getRetainValues(){
  return isRetainValues;
}","/** 
 * @see PersistenceManagerFactory#getRetainValues()
 */
@Override public boolean getRetainValues(){
  return isRetainValues;
}",0.9192982456140352
98110,"/** 
 * @see org.zoodb.jdo.oldStuff.Extent#getPersistenceManager()
 */
@Override public PersistenceManager getPersistenceManager(){
  return pm;
}","/** 
 * @see Extent#getPersistenceManager()
 */
@Override public PersistenceManager getPersistenceManager(){
  return pm;
}",0.9144981412639404
98111,"/** 
 * @see org.zoodb.jdo.oldStuff.Extent#hasSubclasses()
 */
@Override public boolean hasSubclasses(){
  return subclasses;
}","/** 
 * @see Extent#hasSubclasses()
 */
@Override public boolean hasSubclasses(){
  return subclasses;
}",0.9004329004329005
98112,"/** 
 * @see org.zoodb.jdo.oldStuff.Extent#iterator()
 */
@Override public Iterator<T> iterator(){
  @SuppressWarnings(""String_Node_Str"") CloseableIterator<T> it=(CloseableIterator<T>)pm.getSession().loadAllInstances(extClass,subclasses,!ignoreCache);
  allIterators.add(it);
  return it;
}","/** 
 * @see Extent#iterator()
 */
@Override public Iterator<T> iterator(){
  @SuppressWarnings(""String_Node_Str"") CloseableIterator<T> it=(CloseableIterator<T>)pm.getSession().loadAllInstances(extClass,subclasses,!ignoreCache);
  allIterators.add(it);
  return it;
}",0.9587073608617596
98113,"/** 
 * @see org.zoodb.jdo.oldStuff.Extent#closeAll()
 */
@Override public void closeAll(){
  for (  CloseableIterator<T> i : allIterators) {
    i.close();
  }
  allIterators.clear();
}","/** 
 * @see Extent#closeAll()
 */
@Override public void closeAll(){
  for (  CloseableIterator<T> i : allIterators) {
    i.close();
  }
  allIterators.clear();
}",0.9340974212034384
98114,"/** 
 * @see org.zoodb.jdo.oldStuff.Extent#close(java.util.Iterator)
 */
@Override public void close(Iterator<T> i){
  CloseableIterator.class.cast(i).close();
  allIterators.remove(i);
}","/** 
 * @see Extent#close(java.util.Iterator)
 */
@Override public void close(Iterator<T> i){
  CloseableIterator.class.cast(i).close();
  allIterators.remove(i);
}",0.9344729344729344
98115,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManagerFactory#getProperties()
 */
@Override public Properties getProperties(){
  throw new UnsupportedOperationException();
}","/** 
 * @see PersistenceManagerFactory#getProperties()
 */
@Override public Properties getProperties(){
  throw new UnsupportedOperationException();
}",0.9287925696594428
98116,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#getPersistenceManagerFactory()
 */
@Override public PersistenceManagerFactory getPersistenceManagerFactory(){
  return factory;
}","/** 
 * @see PersistenceManager#getPersistenceManagerFactory()
 */
@Override public PersistenceManagerFactory getPersistenceManagerFactory(){
  return factory;
}",0.9333333333333332
98117,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#getObjectId(java.lang.Object)
 */
@Override public Object getObjectId(Object pc){
  checkOpen();
  if (pc == null) {
    return null;
  }
  if (!(pc instanceof ZooPCImpl)) {
    return null;
  }
  long oid=((ZooPCImpl)pc).jdoZooGetOid();
  return ((Long)Session.OID_NOT_ASSIGNED).equals(oid) ? null : oid;
}","/** 
 * @see PersistenceManager#getObjectId(java.lang.Object)
 */
@Override public Object getObjectId(Object pc){
  checkOpen();
  if (pc == null) {
    return null;
  }
  if (!(pc instanceof ZooPCImpl)) {
    return null;
  }
  long oid=((ZooPCImpl)pc).jdoZooGetOid();
  return ((Long)Session.OID_NOT_ASSIGNED).equals(oid) ? null : oid;
}",0.9671897289586304
98118,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#getObjectIdClass(Class)
 */
@SuppressWarnings(""String_Node_Str"") @Override public Class<?> getObjectIdClass(Class cls){
  checkOpen();
  if (cls == null) {
    return null;
  }
  return OBJECT_ID_CLASS;
}","/** 
 * @see PersistenceManager#getObjectIdClass(Class)
 */
@SuppressWarnings(""String_Node_Str"") @Override public Class<?> getObjectIdClass(Class cls){
  checkOpen();
  if (cls == null) {
    return null;
  }
  return OBJECT_ID_CLASS;
}",0.9535353535353536
98119,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#currentTransaction()
 */
@Override public Transaction currentTransaction(){
  checkOpenIgnoreTx();
  return transaction;
}","/** 
 * @see PersistenceManager#currentTransaction()
 */
@Override public Transaction currentTransaction(){
  checkOpenIgnoreTx();
  return transaction;
}",0.9305135951661632
98120,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#newInstance(Class)
 */
@Override public <T>T newInstance(Class<T> pcClass){
  checkOpen();
  throw new UnsupportedOperationException();
}","/** 
 * @see PersistenceManager#newInstance(Class)
 */
@Override public <T>T newInstance(Class<T> pcClass){
  checkOpen();
  throw new UnsupportedOperationException();
}",0.9362880886426592
98121,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#deletePersistent(java.lang.Object)
 */
@Override public void deletePersistent(Object pc){
  checkOpen();
  nativeConnection.deletePersistent(pc);
}","/** 
 * @see PersistenceManager#deletePersistent(java.lang.Object)
 */
@Override public void deletePersistent(Object pc){
  checkOpen();
  nativeConnection.deletePersistent(pc);
}",0.9396325459317584
98122,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#close()
 */
@Override public void close(){
  if (isClosed) {
    throw new JDOUserException(""String_Node_Str"");
  }
  if (transaction.isActive()) {
    throw new JDOUserException(""String_Node_Str"");
  }
  TransientField.deregisterTx(transaction);
  defaultSession.compareAndSet(this,null);
  nativeConnection.close();
  transaction=null;
  isClosed=true;
  factory.deRegister(this);
}","/** 
 * @see PersistenceManager#close()
 */
@Override public void close(){
  if (isClosed) {
    throw new JDOUserException(""String_Node_Str"");
  }
  if (transaction.isActive()) {
    throw new JDOUserException(""String_Node_Str"");
  }
  TransientField.deregisterTx(transaction);
  defaultSession.compareAndSet(this,null);
  nativeConnection.close();
  transaction=null;
  isClosed=true;
  factory.deRegister(this);
}",0.9730994152046784
98123,"@Override public <T>T[] detachCopyAll(T... arg0){
  checkOpen();
  throw new UnsupportedOperationException();
}","@Override @SafeVarargs public final <T>T[] detachCopyAll(T... arg0){
  checkOpen();
  throw new UnsupportedOperationException();
}",0.921161825726141
98124,"/** 
 * Refreshes and places a ReadLock on the object.
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#refresh(java.lang.Object)
 */
@Override public void refresh(Object pc){
  checkOpen();
  nativeConnection.refreshObject(pc);
}","/** 
 * Refreshes and places a ReadLock on the object.
 * @see PersistenceManager#refresh(java.lang.Object)
 */
@Override public void refresh(Object pc){
  checkOpen();
  nativeConnection.refreshObject(pc);
}",0.6788154897494305
98125,"/** 
 * @see org.zoodb.jdo.oldStuff.PersistenceManager#isClosed()
 */
@Override public boolean isClosed(){
  return isClosed;
}","/** 
 * @see PersistenceManager#isClosed()
 */
@Override public boolean isClosed(){
  return isClosed;
}",0.9004329004329005
98126,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#commit()
 */
@Override public synchronized void rollback(){
  if (!isOpen) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
  connection.rollback();
  isOpen=false;
  if (sync != null) {
    sync.afterCompletion(Status.STATUS_ROLLEDBACK);
  }
}","/** 
 * @see Transaction#commit()
 */
@Override public synchronized void rollback(){
  if (!isOpen) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
  connection.rollback();
  isOpen=false;
  if (sync != null) {
    sync.afterCompletion(Status.STATUS_ROLLEDBACK);
  }
}",0.9627228525121556
98127,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#getPersistenceManager()
 */
@Override public PersistenceManager getPersistenceManager(){
  return pm;
}","/** 
 * @see Transaction#getPersistenceManager()
 */
@Override public PersistenceManager getPersistenceManager(){
  return pm;
}",0.9175627240143368
98128,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#commit()
 */
@Override public synchronized void commit(){
  if (!isOpen) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (sync != null) {
    sync.beforeCompletion();
  }
  connection.commit(retainValues);
  isOpen=false;
  if (sync != null) {
    sync.afterCompletion(Status.STATUS_COMMITTED);
  }
}","/** 
 * @see Transaction#commit()
 */
@Override public synchronized void commit(){
  if (!isOpen) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (sync != null) {
    sync.beforeCompletion();
  }
  connection.commit(retainValues);
  isOpen=false;
  if (sync != null) {
    sync.afterCompletion(Status.STATUS_COMMITTED);
  }
}",0.9689608636977058
98129,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#isActive()
 */
@Override public boolean isActive(){
  return isOpen;
}","/** 
 * @see Transaction#isActive()
 */
@Override public boolean isActive(){
  return isOpen;
}",0.892018779342723
98130,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#setSynchronization(javax.Transaction.Synchronization)
 */
@Override public synchronized void setSynchronization(Synchronization sync){
  this.sync=sync;
}","/** 
 * @see Transaction#setSynchronization(Synchronization)
 */
@Override public synchronized void setSynchronization(Synchronization sync){
  this.sync=sync;
}",0.8870523415977961
98131,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#getSynchronization()
 */
@Override synchronized public Synchronization getSynchronization(){
  return sync;
}","/** 
 * @see Transaction#getSynchronization()
 */
@Override synchronized public Synchronization getSynchronization(){
  return sync;
}",0.9209621993127148
98132,"/** 
 * @see org.zoodb.jdo.oldStuff.Transaction#begin()
 */
@Override public synchronized void begin(){
  if (isOpen) {
    throw new JDOUserException(""String_Node_Str"");
  }
  isOpen=true;
}","/** 
 * @see Transaction#begin()
 */
@Override public synchronized void begin(){
  if (isOpen) {
    throw new JDOUserException(""String_Node_Str"");
  }
  isOpen=true;
}",0.935933147632312
98133,"/** 
 * Returns the number of instances in the database. This operation ignores modifications of the current transactions, such as new or deleted instances. In other words, only committed objects are considered.
 * @param b Whether sub-classes should be counted as well. 
 * @return Number of instances in the database.
 */
public abstract long instanceCount(boolean subClasses);","/** 
 * Returns the number of instances in the database. This operation ignores modifications of the current transactions, such as new or deleted instances. In other words, only committed objects are considered.
 * @param subClasses Whether sub-classes should be counted as well. 
 * @return Number of instances in the database.
 */
public abstract long instanceCount(boolean subClasses);",0.9856584093872228
98134,"/** 
 * @param i page size in bytes.
 */
public static void setFilePageSize(int pageSize){
  defaultPageSize=pageSize;
}","/** 
 * @param pageSize page size in bytes.
 */
public static void setFilePageSize(int pageSize){
  defaultPageSize=pageSize;
}",0.97165991902834
98135,"/** 
 * Instantiate a new DataSerializer.
 * @param out
 * @param filter
 */
public DataSerializer(ObjectWriter out,AbstractCache cache,Node node){
  this.out=out;
  this.cache=cache;
  this.node=node;
}","/** 
 * Instantiate a new DataSerializer.
 * @param out
 */
public DataSerializer(ObjectWriter out,AbstractCache cache,Node node){
  this.out=out;
  this.cache=cache;
  this.node=node;
}",0.9562982005141388
98136,"@Before public void before(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  pm.newQuery(TestClass.class).deletePersistentAll();
  TestClass tc1=new TestClass();
  tc1.setData(1,false,'c',(byte)127,(short)32001,1234567890L,""String_Node_Str"",new byte[]{1,2},-1.1f,35);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(12,false,'d',(byte)126,(short)32002,1234567890L,""String_Node_Str"",new byte[]{1,2},-0.1f,34);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(123,false,'e',(byte)125,(short)32003,1234567890L,null,new byte[]{1,2},0.1f,3.0);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(1234,false,'f',(byte)124,(short)32004,1234567890L,""String_Node_Str"",new byte[]{1,2},1.1f,-0.01);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(12345,false,'g',(byte)123,(short)32005,1234567890L,""String_Node_Str"",new byte[]{1,2},11.1f,-35);
  pm.makePersistent(tc1);
  pm.currentTransaction().commit();
  TestTools.closePM();
  ;
}","@Before public void before(){
  TestTools.defineSchema(TestClass.class);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  pm.newQuery(TestClass.class).deletePersistentAll();
  TestClass tc1=new TestClass();
  tc1.setData(1,false,'c',(byte)127,(short)32001,1234567890L,""String_Node_Str"",new byte[]{1,2},-1.1f,35);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(12,false,'d',(byte)126,(short)32002,1234567890L,""String_Node_Str"",new byte[]{1,2},-0.1f,34);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(123,false,'e',(byte)125,(short)32003,1234567890L,null,new byte[]{1,2},0.1f,3.0);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(1234,false,'f',(byte)124,(short)32004,1234567890L,""String_Node_Str"",new byte[]{1,2},1.1f,-0.01);
  pm.makePersistent(tc1);
  tc1=new TestClass();
  tc1.setData(12345,false,'g',(byte)123,(short)32005,1234567890L,""String_Node_Str"",new byte[]{1,2},11.1f,-35);
  pm.makePersistent(tc1);
  pm.currentTransaction().commit();
  TestTools.closePM();
  ;
}",0.9791969037252056
98137,"@Test public void testSetFilterForParameters(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Query q=null;
  Collection<?> r;
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  q.setFilter(""String_Node_Str"");
  r=(Collection<?>)q.execute();
  assertEquals(1,r.size());
}","/** 
 * See issue #21.
 */
@Test public void testSetFilterForParameters(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Query q=null;
  Collection<?> r;
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  q.setFilter(""String_Node_Str"");
  r=(Collection<?>)q.execute();
  assertEquals(1,r.size());
}",0.958139534883721
98138,"@BeforeClass public static void setUp(){
  TestTools.removeDb();
  TestTools.createDb();
  TestTools.defineSchema(TestClass.class);
}","@BeforeClass public static void setUp(){
  TestTools.removeDb();
  TestTools.createDb();
}",0.8071748878923767
98139,"@Test public void testStringIndex(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",false);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Query q=null;
  Collection<?> r;
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  r=(Collection<?>)q.execute();
  assertEquals(3,r.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  r=(Collection<?>)q.execute();
  assertEquals(1,r.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  r=(Collection<?>)q.execute();
  assertEquals(4,r.size());
}","/** 
 * See issue #20.
 */
@Test public void testStringIndex(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",false);
  testStringQuery();
}",0.3456090651558073
98140,"@After public void afterTest(){
  TestTools.closePM();
}","@After public void afterTest(){
  TestTools.closePM();
  TestTools.removeSchema(TestClass.class);
}",0.7225806451612903
98141,"public void setFieldRawSCO(int i,Object deObj){
  variableValues[i]=deObj;
}","public void setFieldRawSCO(int i,Object deObj){
  variableValues[i]=deObj;
  if (deObj instanceof String) {
    fixedValues[i]=BitTools.toSortableLong((String)deObj);
  }
}",0.6129032258064516
98142,"@Test public void testGenericObjectStringIndexUpdates(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",true);
  PersistenceManager pm0=TestTools.openPM();
  pm0.currentTransaction().begin();
  TestClass t1=new TestClass();
  TestClass t2=new TestClass();
  TestClass t3=new TestClass();
  t1.setString(""String_Node_Str"");
  t2.setString(null);
  t3.setString(""String_Node_Str"");
  pm0.makePersistent(t1);
  pm0.makePersistent(t2);
  pm0.makePersistent(t3);
  long oid1=(Long)pm0.getObjectId(t1);
  long oid2=(Long)pm0.getObjectId(t2);
  long oid3=(Long)pm0.getObjectId(t3);
  pm0.currentTransaction().commit();
  TestTools.closePM();
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooHandle hdl01=ZooSchema.getHandle(pm,oid1);
  ZooHandle hdl02=ZooSchema.getHandle(pm,oid2);
  ZooHandle hdl03=ZooSchema.getHandle(pm,oid3);
  hdl01.setValue(""String_Node_Str"",null);
  hdl02.setValue(""String_Node_Str"",""String_Node_Str"");
  hdl03.setValue(""String_Node_Str"",""String_Node_Str"");
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
  Collection<?> c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(1,c.size());
  Iterator<?> it=c.iterator();
  assertEquals(oid2,pm.getObjectId(it.next()));
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(3,c.size());
  it=c.iterator();
  assertEquals(oid1,pm.getObjectId(it.next()));
  assertEquals(oid2,pm.getObjectId(it.next()));
  assertEquals(oid3,pm.getObjectId(it.next()));
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooSchema.getHandle(pm,oid1).remove();
  ZooSchema.getHandle(pm,oid2).remove();
  ZooSchema.getHandle(pm,oid3).remove();
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  TestTools.closePM();
}","@Test public void testGenericObjectStringIndexUpdates(){
  TestTools.defineIndex(TestClass.class,""String_Node_Str"",true);
  PersistenceManager pm0=TestTools.openPM();
  pm0.currentTransaction().begin();
  TestClass t1=new TestClass();
  TestClass t2=new TestClass();
  TestClass t3=new TestClass();
  t1.setString(""String_Node_Str"");
  t2.setString(null);
  t3.setString(""String_Node_Str"");
  pm0.makePersistent(t1);
  pm0.makePersistent(t2);
  pm0.makePersistent(t3);
  long oid1=(Long)pm0.getObjectId(t1);
  long oid2=(Long)pm0.getObjectId(t2);
  long oid3=(Long)pm0.getObjectId(t3);
  pm0.currentTransaction().commit();
  TestTools.closePM();
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooHandle hdl01=ZooSchema.getHandle(pm,oid1);
  ZooHandle hdl02=ZooSchema.getHandle(pm,oid2);
  ZooHandle hdl03=ZooSchema.getHandle(pm,oid3);
  assertEquals(""String_Node_Str"",hdl01.getAttrString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",hdl01.getValue(""String_Node_Str""));
  hdl01.setValue(""String_Node_Str"",null);
  hdl02.setValue(""String_Node_Str"",""String_Node_Str"");
  hdl03.setValue(""String_Node_Str"",""String_Node_Str"");
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
  Collection<?> c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(1,c.size());
  Iterator<?> it=c.iterator();
  assertEquals(oid2,pm.getObjectId(it.next()));
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(3,c.size());
  it=c.iterator();
  assertEquals(oid1,pm.getObjectId(it.next()));
  assertEquals(oid3,pm.getObjectId(it.next()));
  assertEquals(oid2,pm.getObjectId(it.next()));
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(3,c.size());
  it=c.iterator();
  assertEquals(oid1,pm.getObjectId(it.next()));
  assertEquals(oid3,pm.getObjectId(it.next()));
  assertEquals(oid2,pm.getObjectId(it.next()));
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooSchema.getHandle(pm,oid1).remove();
  ZooSchema.getHandle(pm,oid2).remove();
  ZooSchema.getHandle(pm,oid3).remove();
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  q=pm.newQuery(TestClass.class,""String_Node_Str"");
  c=(Collection<?>)q.execute();
  assertEquals(0,c.size());
  TestTools.closePM();
}",0.7869047619047619
98143,"private static StorageChannel createPageAccessFile(String dbPath,String options,FreeSpaceManager fsm){
  try {
    Class<?> cls=Class.forName(ZooConfig.getFileProcessor());
    Constructor<?> con=cls.getConstructor(String.class,String.class,Integer.TYPE,FreeSpaceManager.class);
    StorageChannel paf=(StorageChannel)con.newInstance(dbPath,options,ZooConfig.getFilePageSize(),fsm);
    return paf;
  }
 catch (  Exception e) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + dbPath,e);
  }
}","private static StorageChannel createPageAccessFile(String dbPath,String options,FreeSpaceManager fsm){
  try {
    Class<?> cls=Class.forName(ZooConfig.getFileProcessor());
    Constructor<?> con=cls.getConstructor(String.class,String.class,Integer.TYPE,FreeSpaceManager.class);
    StorageChannel paf=(StorageChannel)con.newInstance(dbPath,options,ZooConfig.getFilePageSize(),fsm);
    return paf;
  }
 catch (  Exception e) {
    if (e instanceof InvocationTargetException) {
      Throwable t2=e.getCause();
      if (t2 instanceof JDOUserException) {
        throw (JDOUserException)t2;
      }
    }
    throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
  }
}",0.82793867120954
98144,"public StorageRootFile(String dbPath,String options,int pageSize,FreeSpaceManager fsm){
  this.fsm=fsm;
  PAGE_SIZE=pageSize;
  File file=new File(dbPath);
  if (!file.exists()) {
    throw DBLogger.newUser(""String_Node_Str"" + dbPath);
  }
  try {
    raf=new RandomAccessFile(file,options);
    fc=raf.getChannel();
    try {
      fileLock=fc.tryLock();
      if (ZooDebug.isTesting()) {
        ZooDebug.registerFile(fc);
      }
    }
 catch (    OverlappingFileLockException e) {
      fc.close();
      raf.close();
      throw DBLogger.newUser(""String_Node_Str"" + dbPath);
    }
  }
 catch (  IOException e) {
    throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
  }
}","public StorageRootFile(String dbPath,String options,int pageSize,FreeSpaceManager fsm){
  this.fsm=fsm;
  PAGE_SIZE=pageSize;
  File file=new File(dbPath);
  if (!file.exists()) {
    throw DBLogger.newUser(""String_Node_Str"" + dbPath);
  }
  try {
    raf=new RandomAccessFile(file,options);
    fc=raf.getChannel();
    try {
      fileLock=fc.tryLock();
      if (fileLock == null) {
        fc.close();
        raf.close();
        throw DBLogger.newUser(""String_Node_Str"" + dbPath);
      }
    }
 catch (    OverlappingFileLockException e) {
      fc.close();
      raf.close();
      throw DBLogger.newUser(""String_Node_Str"" + dbPath);
    }
    if (ZooDebug.isTesting()) {
      ZooDebug.registerFile(fc);
    }
  }
 catch (  IOException e) {
    throw DBLogger.newFatal(""String_Node_Str"" + dbPath,e);
  }
}",0.8387959866220736
98145,"@AfterClass public static void tearDown(){
  TestTools.removeDb(DB_NAME);
}","@AfterClass public static void tearDown(){
  if (rmi != null) {
    rmi.stop();
  }
  TestTools.removeDb(DB_NAME);
}",0.7853403141361257
98146,"/** 
 * Test import of ZooDB 0.3 xml files.
 */
@Test public void testImport0_3(){
  String path=Test_014_XmlImportExport.class.getResource(""String_Node_Str"").getPath();
  TestTools.defineSchema(TestSerializer.class,TestSuper.class);
  ZooXmlImport.main(new String[]{TestTools.getDbName(),path});
  PersistenceManager pm2=TestTools.openPM(DB2);
  pm2.currentTransaction().begin();
  Extent<TestSerializer> ext=pm2.getExtent(TestSerializer.class);
  TestSerializer ts2=ext.iterator().next();
  ts2.check(false);
  pm2.currentTransaction().rollback();
  TestTools.closePM();
}","/** 
 * Test import of ZooDB 0.3 xml files.
 */
@Test public void testImport0_3(){
  String path=Test_014_XmlImportExport.class.getResource(""String_Node_Str"").getPath();
  TestTools.defineSchema(TestSerializer.class,TestSuper.class);
  ZooXmlImport.main(new String[]{TestTools.getDbName(),path});
  PersistenceManager pm2=TestTools.openPM();
  pm2.currentTransaction().begin();
  Extent<TestSerializer> ext=pm2.getExtent(TestSerializer.class);
  TestSerializer ts2=ext.iterator().next();
  ts2.check(false);
  pm2.currentTransaction().rollback();
  TestTools.closePM();
}",0.9973799126637556
98147,"private static final boolean isSimpleType(Field field){
  int mod=field.getModifiers();
  if (Modifier.isStatic(mod) || Modifier.isTransient(mod)) {
    return true;
  }
  Class<?> cls=field.getType();
  while (cls.isArray()) {
    cls=cls.getComponentType();
  }
  return SIMPLE_TYPES.contains(cls);
}","private static final boolean isSimpleType(Field field){
  int mod=field.getModifiers();
  if (Modifier.isStatic(mod) || Modifier.isTransient(mod)) {
    return true;
  }
  Class<?> cls=field.getType();
  while (cls.isArray()) {
    cls=cls.getComponentType();
  }
  if (ILLEGAL_TYPES.contains(cls)) {
    throw DBLogger.newUser(""String_Node_Str"" + ""String_Node_Str"" + cls + ""String_Node_Str""+ field.getDeclaringClass().getName()+ ""String_Node_Str""+ field.getName());
  }
  return SIMPLE_TYPES.contains(cls);
}",0.7447595561035758
98148,"final private void addToWorkList(Object object){
  if (object == null)   return;
  Class<? extends Object> cls=object.getClass();
  if (SIMPLE_TYPES.contains(cls)) {
    return;
  }
  if (object instanceof ZooPCImpl) {
    ZooPCImpl pc=(ZooPCImpl)object;
    if (!pc.jdoZooIsPersistent()) {
      if (isTraversingCache) {
        toBecomePersistent.add(pc);
      }
 else {
        pm.makePersistent(pc);
        mpCount++;
      }
    }
 else {
      return;
    }
  }
  if (!seenObjects.contains(object)) {
    workList.add(object);
    seenObjects.add(object);
  }
}","final private void addToWorkList(Object object){
  if (object == null)   return;
  Class<? extends Object> cls=object.getClass();
  if (SIMPLE_TYPES.contains(cls)) {
    return;
  }
  if (ILLEGAL_TYPES.contains(cls)) {
    throw DBLogger.newUser(""String_Node_Str"" + ""String_Node_Str"" + cls);
  }
  if (object instanceof ZooPCImpl) {
    ZooPCImpl pc=(ZooPCImpl)object;
    if (!pc.jdoZooIsPersistent()) {
      if (isTraversingCache) {
        toBecomePersistent.add(pc);
      }
 else {
        pm.makePersistent(pc);
        mpCount++;
      }
    }
 else {
      return;
    }
  }
  if (!seenObjects.contains(object)) {
    workList.add(object);
    seenObjects.add(object);
  }
}",0.9089456869009584
98149,"/** 
 * Returns a List containing all of the Field objects for the given class. The fields include all public and private fields from the given class  and its super classes.
 * @param c Class object
 * @return Returns list of interesting fields
 */
private static final Field[] getFields(Class<? extends Object> cls){
  Field[] ret=SEEN_CLASSES.get(cls);
  if (ret != null) {
    return ret;
  }
  if (cls == Class.class) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Field> retL=new ArrayList<Field>();
  for (  Field f : cls.getDeclaredFields()) {
    if (!isSimpleType(f)) {
      retL.add(f);
      f.setAccessible(true);
    }
  }
  if (cls.getSuperclass() != Object.class) {
    for (    Field f : getFields(cls.getSuperclass())) {
      retL.add(f);
    }
  }
  ret=retL.toArray(new Field[retL.size()]);
  SEEN_CLASSES.put(cls,ret);
  return ret;
}","/** 
 * Returns a List containing all of the Field objects for the given class. The fields include all public and private fields from the given class  and its super classes.
 * @param c Class object
 * @return Returns list of interesting fields
 */
private static final Field[] getFields(Class<? extends Object> cls){
  Field[] ret=SEEN_CLASSES.get(cls);
  if (ret != null) {
    return ret;
  }
  List<Field> retL=new ArrayList<Field>();
  for (  Field f : cls.getDeclaredFields()) {
    if (!isSimpleType(f)) {
      retL.add(f);
      f.setAccessible(true);
    }
  }
  if (cls.getSuperclass() != Object.class && cls != Object.class) {
    for (    Field f : getFields(cls.getSuperclass())) {
      retL.add(f);
    }
  }
  ret=retL.toArray(new Field[retL.size()]);
  SEEN_CLASSES.put(cls,ret);
  return ret;
}",0.9327036599763872
98150,"private void compileQuery(){
  if (filter == null || filter.length() == 0) {
    return;
  }
  QueryParser qp=new QueryParser(filter,candClsDef,parameters);
  queryTree=qp.parseQuery();
}","private void compileQuery(){
  if (filter == null || filter.length() == 0) {
    return;
  }
  parameters.clear();
  QueryParser qp=new QueryParser(filter,candClsDef,parameters);
  queryTree=qp.parseQuery();
}",0.9444444444444444
98151,"@Override public void dropInstances(ZooClassProxy def){
  SchemaIndexEntry sie=schemaIndex.getSchema(def.getSchemaId());
  for (int i=0; i < sie.getObjectIndexVersionCount(); i++) {
    PagedPosIndex oi=sie.getObjectIndexVersion(i);
    PagedPosIndex.ObjectPosIterator it=oi.iteratorObjects();
    DataDeSerializerNoClass dds=new DataDeSerializerNoClass(fileInAP);
    while (it.hasNextOPI()) {
      long pos=it.nextPos();
      freeIndex.reportFreePage(BitTools.getPage(pos));
      dds.seekPos(pos);
      long oid=dds.getOid();
      oidIndex.removeOidNoFail(oid,-1);
    }
    it.close();
    for (    AbstractPagedIndex ind : sie.getIndices()) {
      ind.clear();
    }
    oi.clear();
  }
}","@Override public void dropInstances(ZooClassProxy def){
  SchemaIndexEntry sie=schemaIndex.getSchema(def.getSchemaId());
  for (int i=0; i < sie.getObjectIndexVersionCount(); i++) {
    PagedPosIndex oi=sie.getObjectIndexVersion(i);
    PagedPosIndex.ObjectPosIterator it=oi.iteratorObjects();
    DataDeSerializerNoClass dds=new DataDeSerializerNoClass(fileInAP);
    while (it.hasNextOPI()) {
      long pos=it.nextPos();
      freeIndex.reportFreePage(BitTools.getPage(pos));
      dds.seekPos(pos);
      long oid=dds.getOid();
      oidIndex.removeOidNoFail(oid,-1);
    }
    it.close();
    sie.clearIndices();
    oi.clear();
  }
}",0.9020194465220644
98152,"private void readHeader(){
  byte pageType=buf.get();
  if (pageType != currentType.getId()) {
    throw DBLogger.newFatal(""String_Node_Str"" + currentType.getId() + ""String_Node_Str""+ currentType+ ""String_Node_Str""+ pageType+ ""String_Node_Str""+ currentPage);
  }
  buf.position(PAGE_HEADER_SIZE);
  if (isAutoPaging) {
    pageHeader=buf.getLong();
  }
}","private void readHeader(){
  byte pageType=buf.get();
  if (pageType != currentType.getId()) {
    buf.get();
    buf.getShort();
    long txId=buf.getLong();
    throw DBLogger.newFatal(""String_Node_Str"" + currentType.getId() + ""String_Node_Str""+ currentType+ ""String_Node_Str""+ txId+ ""String_Node_Str""+ pageType+ ""String_Node_Str""+ root.getTxId()+ ""String_Node_Str""+ currentPage);
  }
  buf.position(PAGE_HEADER_SIZE);
  if (isAutoPaging) {
    pageHeader=buf.getLong();
  }
}",0.8317307692307693
98153,"final void clear(){
  if (!isLeaf) {
    for (int i=0; i < getNKeys() + 1; i++) {
      AbstractIndexPage p=readPage(i);
      p.clear();
      ind.file.reportFreePage(p.pageId);
    }
  }
  setNEntries(-1);
}","final void clear(){
  if (!isLeaf) {
    for (int i=0; i < getNKeys() + 1; i++) {
      AbstractIndexPage p=readPage(i);
      p.clear();
      ind.file.reportFreePage(p.pageId);
    }
  }
  if (subPageIds != null) {
    for (int i=0; i < subPageIds.length; i++) {
      subPageIds[i]=0;
    }
  }
  if (subPages != null) {
    for (int i=0; i < subPages.length; i++) {
      subPages[i]=null;
    }
  }
  setNEntries(-1);
  setDirty(true);
}",0.6390168970814132
98154,"public void clear(){
  getRoot().clear();
  file.reportFreePage(getRoot().pageId());
  AbstractIndexPage newRoot=createPage(null,false);
  updateRoot(newRoot);
  for (  AbstractPageIterator<?> i : iterators.keySet()) {
    i.close();
  }
  iterators.clear();
}","public void clear(){
  getRoot().clear();
  file.reportFreePage(getRoot().pageId());
  markDirty();
  for (  AbstractPageIterator<?> i : iterators.keySet()) {
    i.close();
  }
  iterators.clear();
}",0.8260869565217391
98155,"/** 
 * This test reproduces a bug related to dropInstances
 */
@Test public void testDropInstancesBug(){
  final int N=1000;
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooSchema.defineClass(pm,TestClassTiny.class);
  ZooClass r=ZooSchema.defineClass(pm,TestClass.class);
  r.locateField(""String_Node_Str"").createIndex(false);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  r=ZooSchema.locateClass(pm,TestClass.class);
  r.dropInstances();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  for (int i=0; i < N; i++) {
    TestClassTiny p=new TestClassTiny();
    pm.makePersistent(p);
  }
  pm.currentTransaction().commit();
  pm.close();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  int n=0;
  Query q=pm.newQuery(TestClass.class,""String_Node_Str"" + 1);
  System.out.println(""String_Node_Str"" + 1);
  for (  Object o : (Collection<?>)q.execute()) {
    assertTrue(o instanceof TestClass);
    n++;
  }
  q.closeAll();
  assertEquals(N,n);
  pm.currentTransaction().rollback();
  pm.close();
}","/** 
 * This test reproduces a bug related to dropInstances
 */
@Test public void testDropInstancesBug(){
  final int N=1000;
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooSchema.defineClass(pm,TestClassTiny.class);
  ZooClass r=ZooSchema.defineClass(pm,TestClass.class);
  r.locateField(""String_Node_Str"").createIndex(false);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  r=ZooSchema.locateClass(pm,TestClass.class);
  r.dropInstances();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  for (int i=0; i < N; i++) {
    TestClassTiny p=new TestClassTiny();
    p.setInt(1);
    pm.makePersistent(p);
  }
  pm.currentTransaction().commit();
  pm.close();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  int n=0;
  Query q=pm.newQuery(TestClass.class,""String_Node_Str"");
  for (  Object o : (Collection<?>)q.execute()) {
    assertTrue(o instanceof TestClass);
    n++;
  }
  q.closeAll();
  assertEquals(0,n);
  n=0;
  q=pm.newQuery(TestClassTiny.class,""String_Node_Str"");
  for (  Object o : (Collection<?>)q.execute()) {
    assertTrue(o instanceof TestClassTiny);
    n++;
  }
  q.closeAll();
  assertEquals(N,n);
  pm.currentTransaction().rollback();
  pm.close();
}",0.9008020261713804
98156,"public static String run(String db1,String db2){
  out=new StringBuilder();
  ZooJdoProperties props1=new ZooJdoProperties(db1);
  PersistenceManagerFactory pmf1=JDOHelper.getPersistenceManagerFactory(props1);
  PersistenceManager pm1=pmf1.getPersistenceManager();
  pm1.currentTransaction().begin();
  ZooJdoProperties props2=new ZooJdoProperties(db2);
  PersistenceManagerFactory pmf2=JDOHelper.getPersistenceManagerFactory(props2);
  PersistenceManager pm2=pmf2.getPersistenceManager();
  pm2.currentTransaction().begin();
  List<ZooClass> commonClasses=compareClasses(pm1,pm2);
  compareInstances(pm1,pm2,commonClasses);
  pm1.currentTransaction().rollback();
  pm1.close();
  pmf1.close();
  pm2.currentTransaction().rollback();
  pm2.close();
  pmf2.close();
  return out.toString();
}","public static String run(String db1,String db2){
  PersistenceManager pm1=null;
  PersistenceManager pm2=null;
  try {
    out=new StringBuilder();
    ZooJdoProperties props1=new ZooJdoProperties(db1);
    PersistenceManagerFactory pmf1=JDOHelper.getPersistenceManagerFactory(props1);
    pm1=pmf1.getPersistenceManager();
    pm1.currentTransaction().begin();
    ZooJdoProperties props2=new ZooJdoProperties(db2);
    PersistenceManagerFactory pmf2=JDOHelper.getPersistenceManagerFactory(props2);
    pm2=pmf2.getPersistenceManager();
    pm2.currentTransaction().begin();
    List<ZooClass> commonClasses=compareClasses(pm1,pm2);
    compareInstances(pm1,pm2,commonClasses);
    return out.toString();
  }
  finally {
    if (pm1 != null) {
      pm1.currentTransaction().rollback();
      pm1.close();
    }
    if (pm2 != null) {
      pm2.currentTransaction().rollback();
      pm2.close();
    }
  }
}",0.7517647058823529
98157,"@Before public void before(){
  TestTools.createDb();
}","@Before public void before(){
  TestTools.createDb();
  TestSerializer.resetStatic();
}",0.7746478873239436
98158,"@Before public void before(){
}","@Before public void before(){
  TestSerializer.resetStatic();
}",0.6595744680851063
98159,"public void setDirty(boolean b){
  if (!isDirty) {
    isDirty=true;
    context.getSession().internalGetCache().addGeneric(this);
    getPrevValues();
  }
}","public void setDirty(boolean b){
  if (!isDirty) {
    isDirty=true;
    context.getSession().internalGetCache().addGeneric(this);
    if (!isNew) {
      getPrevValues();
    }
  }
}",0.923529411764706
98160,"static GenericObject newEmptyInstance(long oid,ZooClassDef def,AbstractCache cache){
  def.getProvidedContext().getNode().getOidBuffer().ensureValidity(oid);
  GenericObject go=new GenericObject(def,oid,true,cache);
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  go.setNew(true);
  go.setDirty(true);
  for (  ZooFieldDef f : def.getAllFields()) {
    if (f.isPrimitiveType()) {
      Object x;
switch (f.getPrimitiveType()) {
case BOOLEAN:
        x=false;
      break;
case BYTE:
    x=(byte)0;
  break;
case CHAR:
x=(char)0;
break;
case DOUBLE:
x=(double)0;
break;
case FLOAT:
x=(float)0;
break;
case INT:
x=(int)0;
break;
case LONG:
x=(long)0;
break;
case SHORT:
x=(short)0;
break;
default :
throw new IllegalStateException();
}
go.setField(f,x);
}
 else {
System.out.println(""String_Node_Str"");
}
}
return go;
}","static GenericObject newEmptyInstance(long oid,ZooClassDef def,AbstractCache cache){
  def.getProvidedContext().getNode().getOidBuffer().ensureValidity(oid);
  GenericObject go=new GenericObject(def,oid,true,cache);
  go.setNew(true);
  for (  ZooFieldDef f : def.getAllFields()) {
    if (f.isPrimitiveType()) {
      Object x;
switch (f.getPrimitiveType()) {
case BOOLEAN:
        x=false;
      break;
case BYTE:
    x=(byte)0;
  break;
case CHAR:
x=(char)0;
break;
case DOUBLE:
x=(double)0;
break;
case FLOAT:
x=(float)0;
break;
case INT:
x=(int)0;
break;
case LONG:
x=(long)0;
break;
case SHORT:
x=(short)0;
break;
default :
throw new IllegalStateException();
}
go.setField(f,x);
}
 else {
System.out.println(""String_Node_Str"");
}
}
return go;
}",0.9282595134123518
98161,"@Override public void setValue(ZooHandle hdl,Object val){
  checkInvalid();
  ZooHandleImpl h=checkHandle(hdl);
  h.getGenericObject().setField(fieldDef,val);
  h.getGenericObject().setDirty(true);
}","@Override public void setValue(ZooHandle hdl,Object val){
  checkInvalid();
  ZooHandleImpl h=checkHandle(hdl);
  h.getGenericObject().setDirty(true);
  h.getGenericObject().setField(fieldDef,val);
}",0.8793969849246231
98162,"private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (!co.isNew()) {
          if (co.jdoZooGetBackup() != null) {
            long l=co.jdoZooGetBackup()[iInd];
            fieldInd.removeLong(l,co.getOid());
            continue;
          }
        }
        long l;
        if (field.isString()) {
          if (co.isHollow()) {
            throw new UnsupportedOperationException();
          }
          l=(Long)co.getFieldRaw(iInd);
        }
 else {
          Object primO=co.getFieldRaw(iInd);
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.getOid());
      }
    }
 catch (    IllegalArgumentException e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].getOid();
    delete(oid,ois);
  }
}","private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (!co.isNew()) {
          if (co.jdoZooGetBackup() != null) {
            long l=co.jdoZooGetBackup()[iInd];
            fieldInd.removeLong(l,co.getOid());
            continue;
          }
        }
        long l;
        if (field.isString()) {
          if (co.isHollow()) {
            throw new UnsupportedOperationException();
          }
          l=(Long)co.getFieldRaw(field.getFieldPos());
        }
 else {
          Object primO=co.getFieldRaw(field.getFieldPos());
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        fieldInd.removeLong(l,co.getOid());
      }
    }
 catch (    IllegalArgumentException e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
    }
  }
  PagedPosIndex ois=sie.getObjectIndexLatestSchemaVersion();
  for (int i=0; i < bufferCnt; i++) {
    long oid=buffer[i].getOid();
    delete(oid,ois);
  }
}",0.9835596854896356
98163,"private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (!co.isNew()) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.getOid());
        }
        final long l;
        if (field.isString()) {
          l=(Long)co.getFieldRaw(iInd);
        }
 else {
          Object primO=co.getFieldRaw(iInd);
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        if (field.isIndexUnique()) {
          if (!fieldInd.insertLongIfNotSet(l,co.getOid())) {
            if (fieldUpdateBuffer[iField] == null) {
              fieldUpdateBuffer[iField]=new ArrayList<Pair>();
            }
            fieldUpdateBuffer[iField].add(new Pair(co.getOid(),l));
          }
        }
 else {
          fieldInd.insertLong(l,co.getOid());
        }
      }
    }
 catch (    IllegalArgumentException e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
    }
  }
}","private void updateFieldIndicesGO(){
  final GenericObject[] buffer=this.bufferGO;
  final int bufferCnt=this.bufferGOCnt;
  int iInd=-1;
  int iField=-1;
  for (  ZooFieldDef field : cls.getAllFields()) {
    iField++;
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=node.getSchemaIE(field.getDeclaringType());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      for (int i=0; i < bufferCnt; i++) {
        GenericObject co=buffer[i];
        if (!co.isNew()) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.getOid());
        }
        final long l;
        if (field.isString()) {
          l=(Long)co.getFieldRaw(iField);
        }
 else {
          Object primO=co.getFieldRaw(iField);
          l=SerializerTools.primitiveToLong(primO,field.getPrimitiveType());
        }
        if (field.isIndexUnique()) {
          if (!fieldInd.insertLongIfNotSet(l,co.getOid())) {
            if (fieldUpdateBuffer[iField] == null) {
              fieldUpdateBuffer[iField]=new ArrayList<Pair>();
            }
            fieldUpdateBuffer[iField].add(new Pair(co.getOid(),l));
          }
        }
 else {
          fieldInd.insertLong(l,co.getOid());
        }
      }
    }
 catch (    IllegalArgumentException e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
    }
  }
}",0.9957805907172996
98164,"@SuppressWarnings(""String_Node_Str"") @Override public void addInstanceLifecycleListener(InstanceLifecycleListener arg0,Class[] arg1){
  checkOpen();
  throw new UnsupportedOperationException();
}","@SuppressWarnings(""String_Node_Str"") @Override public void addInstanceLifecycleListener(InstanceLifecycleListener arg0,Class[] arg1){
  checkFrozen();
  List<Class<?>> clsL=lcListeners.get(arg0);
  if (clsL == null) {
    clsL=new LinkedList<Class<?>>();
    lcListeners.put(arg0,clsL);
  }
  if (arg1 != null) {
    for (    Class<?> c : arg1) {
      clsL.add(c);
    }
  }
 else {
    clsL.add(ZooPCImpl.class);
  }
}",0.4715447154471545
98165,"public void addInstanceLifecycleListener(InstanceLifecycleListener listener,Class<?>[] classes){
  for (  Class<?> cls : classes) {
    ZooClassDef def=cache.getSchema(cls,primary);
    def.getProvidedContext().addLifecycleListener(listener);
  }
}","public void addInstanceLifecycleListener(InstanceLifecycleListener listener,Class<?>[] classes){
  if (classes == null) {
    classes=new Class[]{null};
  }
  for (  Class<?> cls : classes) {
    if (cls == null) {
      cls=ZooPCImpl.class;
    }
    ZooClassDef def=cache.getSchema(cls,primary);
    if (def == null) {
      throw DBLogger.newUser(""String_Node_Str"" + cls);
    }
    def.getProvidedContext().addLifecycleListener(listener);
  }
}",0.7126436781609196
98166,"public void notifyEvent(ZooPCImpl src,ZooInstanceEvent event){
  if (listeners == null) {
    return;
  }
  for (  InstanceLifecycleListener l : listeners) {
switch (event) {
case PRE_CLEAR:
      if (ClearLifecycleListener.class.isAssignableFrom(l.getClass())) {
        ((ClearLifecycleListener)l).preClear(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CLEAR));
      }
    break;
case POST_CLEAR:
  if (ClearLifecycleListener.class.isAssignableFrom(l.getClass())) {
    ((ClearLifecycleListener)l).postClear(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CLEAR));
  }
break;
case CREATE:
if (CreateLifecycleListener.class.isAssignableFrom(l.getClass())) {
((CreateLifecycleListener)l).postCreate(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CREATE));
}
break;
case PRE_DELETE:
if (DeleteLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DeleteLifecycleListener)l).preDelete(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DELETE));
}
break;
case POST_DELETE:
if (DeleteLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DeleteLifecycleListener)l).postDelete(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DELETE));
}
break;
case PRE_DIRTY:
if (DirtyLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DirtyLifecycleListener)l).preDirty(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DIRTY));
}
break;
case POST_DIRTY:
if (DirtyLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DirtyLifecycleListener)l).postDirty(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DIRTY));
}
break;
case LOAD:
if (LoadLifecycleListener.class.isAssignableFrom(l.getClass())) {
((LoadLifecycleListener)l).postLoad(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.LOAD));
}
break;
case PRE_STORE:
if (StoreLifecycleListener.class.isAssignableFrom(l.getClass())) {
((StoreLifecycleListener)l).preStore(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.STORE));
}
break;
case POST_STORE:
if (StoreLifecycleListener.class.isAssignableFrom(l.getClass())) {
((StoreLifecycleListener)l).postStore(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.STORE));
}
break;
default :
throw new IllegalArgumentException(event.name());
}
}
}","public void notifyEvent(ZooPCImpl src,ZooInstanceEvent event){
  if (def.getSuperDef() != null) {
    def.getSuperDef().getProvidedContext().notifyEvent(src,event);
  }
  if (listeners == null || src.getClass() == ZooClassDef.class) {
    return;
  }
  for (  InstanceLifecycleListener l : listeners) {
switch (event) {
case PRE_CLEAR:
      if (ClearLifecycleListener.class.isAssignableFrom(l.getClass())) {
        ((ClearLifecycleListener)l).preClear(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CLEAR));
      }
    break;
case POST_CLEAR:
  if (ClearLifecycleListener.class.isAssignableFrom(l.getClass())) {
    ((ClearLifecycleListener)l).postClear(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CLEAR));
  }
break;
case CREATE:
if (CreateLifecycleListener.class.isAssignableFrom(l.getClass())) {
((CreateLifecycleListener)l).postCreate(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.CREATE));
}
break;
case PRE_DELETE:
if (DeleteLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DeleteLifecycleListener)l).preDelete(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DELETE));
}
break;
case POST_DELETE:
if (DeleteLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DeleteLifecycleListener)l).postDelete(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DELETE));
}
break;
case PRE_DIRTY:
if (DirtyLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DirtyLifecycleListener)l).preDirty(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DIRTY));
}
break;
case POST_DIRTY:
if (DirtyLifecycleListener.class.isAssignableFrom(l.getClass())) {
((DirtyLifecycleListener)l).postDirty(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.DIRTY));
}
break;
case LOAD:
if (LoadLifecycleListener.class.isAssignableFrom(l.getClass())) {
((LoadLifecycleListener)l).postLoad(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.LOAD));
}
break;
case PRE_STORE:
if (StoreLifecycleListener.class.isAssignableFrom(l.getClass())) {
((StoreLifecycleListener)l).preStore(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.STORE));
}
break;
case POST_STORE:
if (StoreLifecycleListener.class.isAssignableFrom(l.getClass())) {
((StoreLifecycleListener)l).postStore(new InstanceLifecycleEvent(src,InstanceLifecycleEvent.STORE));
}
break;
default :
throw new IllegalArgumentException(event.name());
}
}
}",0.9681528662420382
98167,"@Test public void testLifecycleListener(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  pm.addInstanceLifecycleListener(new ListenerClear(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerCreate(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerDelete(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerDirty(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerLoad(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerStore(),TestClass.class);
  TestClass t1=new TestClass();
  t1.setRef2(t1);
  assertTrue(calls.isEmpty());
  pm.makePersistent(t1);
  checkCall(ZooInstanceEvent.CREATE);
  assertTrue(calls.isEmpty());
  pm.currentTransaction().commit();
  checkCall(ZooInstanceEvent.PRE_STORE);
  checkCall(ZooInstanceEvent.PRE_CLEAR);
  checkCall(ZooInstanceEvent.POST_CLEAR);
  checkCall(ZooInstanceEvent.POST_STORE);
  assertTrue(calls.isEmpty());
  pm.currentTransaction().begin();
  assertNotNull(t1.getRef2());
  checkCall(ZooInstanceEvent.LOAD);
  assertTrue(calls.isEmpty());
  t1.setRef2(null);
  checkCall(ZooInstanceEvent.PRE_DIRTY);
  checkCall(ZooInstanceEvent.POST_DIRTY);
  System.err.println(""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(calls.isEmpty());
  pm.refresh(t1);
  checkCall(ZooInstanceEvent.LOAD);
  assertTrue(calls.isEmpty());
  pm.deletePersistent(t1);
  assertTrue(calls.isEmpty());
  pm.currentTransaction().commit();
  checkCall(ZooInstanceEvent.PRE_DELETE);
  checkCall(ZooInstanceEvent.POST_DELETE);
  assertTrue(calls.isEmpty());
  TestTools.closePM();
}","@Test public void testLifecycleListener(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  pm.addInstanceLifecycleListener(new ListenerClear(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerCreate(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerDelete(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerDirty(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerLoad(),TestClass.class);
  pm.addInstanceLifecycleListener(new ListenerStore(),TestClass.class);
  internalTest(pm);
  TestTools.closePM();
}",0.5287460389316433
98168,"@Test public void testLifecycleListenerRemoval(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ListenerCreate lc=new ListenerCreate();
  pm.addInstanceLifecycleListener(lc,TestClass.class);
  TestClass t1=new TestClass();
  assertTrue(calls.isEmpty());
  pm.makePersistent(t1);
  checkCall(ZooInstanceEvent.CREATE);
  assertTrue(calls.isEmpty());
  pm.removeInstanceLifecycleListener(lc);
  TestClass t2=new TestClass();
  pm.makePersistent(t2);
  assertTrue(calls.isEmpty());
  pm.currentTransaction().rollback();
  TestTools.closePM();
}","@Test public void testLifecycleListenerRemoval(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ListenerCreate lc=new ListenerCreate();
  pm.addInstanceLifecycleListener(lc,TestClass.class);
  TestClass t1=new TestClass();
  assertTrue(calls.isEmpty());
  pm.makePersistent(t1);
  checkCall(ZooInstanceEvent.CREATE,t1);
  assertTrue(calls.isEmpty());
  pm.removeInstanceLifecycleListener(lc);
  TestClass t2=new TestClass();
  pm.makePersistent(t2);
  assertTrue(calls.isEmpty());
  pm.currentTransaction().rollback();
  TestTools.closePM();
}",0.997398091934085
98169,"private void checkCall(ZooInstanceEvent expected){
  assertTrue(calls.size() > 0);
  assertEquals(expected,calls.get(0).type);
  assertEquals(TestClass.class,calls.get(0).e.getSource().getClass());
  calls.remove(0);
}","private void checkCall(ZooInstanceEvent expected,Object pc){
  assertTrue(calls.size() > 0);
  Pair p=calls.get(0);
  System.out.println(""String_Node_Str"" + calls.size() + ""String_Node_Str""+ p.e.getPersistentInstance());
  System.out.println(""String_Node_Str"" + p.type + ""String_Node_Str""+ p.e.getPersistentInstance().getClass());
  assertEquals(expected,p.type);
  assertEquals(TestClass.class,p.e.getSource().getClass());
  assertTrue(pc == p.e.getPersistentInstance());
  calls.remove(0);
}",0.4275668073136427
98170,"@Override public String checkDb(){
  final byte ROOT=1;
  final byte IDX_FSM=2;
  final byte IDX_OID=3;
  final byte IDX_POS=4;
  final byte IDX_ATTR=5;
  final byte DATA=6;
  final byte FREE=7;
  int nObjects=0;
  int nObjectsByPos=0;
  int nPosEntries=0;
  int nPagesFree=0;
  int nPagesRoot=0;
  int nPagesData=0;
  int nPages=freeIndex.getPageCount();
  byte[] pages=new byte[nPages];
  pages[0]=ROOT;
  pages[1]=ROOT;
  pages[2]=ROOT;
  Iterator<FilePos> oi=oidIndex.iterator();
  while (oi.hasNext()) {
    FilePos fp=oi.next();
    pages[fp.getPage()]=DATA;
    nObjects++;
  }
  Collection<SchemaIndexEntry> sList=schemaIndex.getSchemata();
  int nPosIndexPages=0;
  for (  SchemaIndexEntry se : sList) {
    PagedPosIndex.ObjectPosIteratorMerger opi=se.getObjectIndexIterator();
    while (opi.hasNextOPI()) {
      nPosEntries++;
      long pos=opi.nextPos();
      pages[BitTools.getPage(pos)]=DATA;
      nObjectsByPos++;
    }
    for (int v=0; v < se.getObjectIndexVersionCount(); v++) {
      List<Integer> pageList=se.getObjectIndexVersion(v).debugPageIds();
      nPosIndexPages+=pageList.size();
      for (      Integer i : pageList) {
        if (pages[i] != 0) {
          System.err.println(""String_Node_Str"" + i);
        }
        pages[i]=IDX_POS;
      }
    }
  }
  List<Integer> pageList=schemaIndex.debugPageIdsAttrIdx();
  int nAttrIndexPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_ATTR;
  }
  pageList=oidIndex.debugPageIds();
  int nOidPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_OID;
  }
  pageList=freeIndex.debugPageIds();
  int nFsmPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_FSM;
  }
  Iterator<LLEntry> fiIter=freeIndex.debugIterator();
  int nPagesFreeDoNotUse=0;
  while (fiIter.hasNext()) {
    LLEntry e=fiIter.next();
    if (pages[(int)e.getKey()] != 0) {
      if (e.getValue() == 0) {
        System.err.println(""String_Node_Str"" + e.getKey());
      }
 else {
        nPagesFreeDoNotUse++;
      }
    }
    pages[(int)e.getKey()]=FREE;
    nPagesFree++;
  }
  int nPagesFree2=0;
  int nPagesUnknown=0;
  int nIndexPages=0;
  for (  byte b : pages) {
switch (b) {
case ROOT:
      nPagesRoot++;
    break;
case DATA:
  nPagesData++;
break;
case FREE:
nPagesFree2++;
break;
case IDX_FSM:
case IDX_ATTR:
case IDX_OID:
case IDX_POS:
nIndexPages++;
break;
default :
nPagesUnknown++;
}
}
FormattedStringBuilder sb=new FormattedStringBuilder();
sb.appendln(""String_Node_Str"" + nObjects + ""String_Node_Str""+ nObjectsByPos);
if (nObjects != nObjectsByPos + sList.size()) {
sb.appendln(""String_Node_Str"");
}
sb.appendln(""String_Node_Str"" + sList.size());
sb.appendln(""String_Node_Str"" + nPosEntries);
sb.appendln();
sb.appendln(""String_Node_Str"" + nOidPages);
sb.appendln(""String_Node_Str"" + nFsmPages);
sb.appendln(""String_Node_Str"" + nPagesFreeDoNotUse);
sb.appendln(""String_Node_Str"" + nPosIndexPages);
sb.appendln(""String_Node_Str"" + nAttrIndexPages);
sb.appendln(""String_Node_Str"" + nIndexPages);
sb.appendln();
sb.appendln(""String_Node_Str"" + nPagesFree + ""String_Node_Str""+ nPagesFree2);
sb.appendln(""String_Node_Str"" + nPagesData);
sb.appendln(""String_Node_Str"" + nPagesRoot);
sb.appendln(""String_Node_Str"" + nIndexPages);
sb.appendln(""String_Node_Str"" + nPagesUnknown);
sb.appendln(""String_Node_Str"" + nPages);
return sb.toString();
}","@Override public String checkDb(){
  final byte ROOT=1;
  final byte IDX_FSM=2;
  final byte IDX_OID=3;
  final byte IDX_POS=4;
  final byte IDX_ATTR=5;
  final byte DATA=6;
  final byte FREE=7;
  int nObjects=0;
  int nObjectsByPos=0;
  int nPosEntries=0;
  int nPagesFree=0;
  int nPagesRoot=0;
  int nPagesData=0;
  int nPages=freeIndex.getPageCount();
  byte[] pages=new byte[nPages];
  pages[0]=ROOT;
  pages[1]=ROOT;
  pages[2]=ROOT;
  Iterator<FilePos> oi=oidIndex.iterator();
  while (oi.hasNext()) {
    FilePos fp=oi.next();
    pages[fp.getPage()]=DATA;
    nObjects++;
  }
  Collection<SchemaIndexEntry> sList=schemaIndex.getSchemata();
  int nPosIndexPages=0;
  for (  SchemaIndexEntry se : sList) {
    PagedPosIndex.ObjectPosIteratorMerger opi=se.getObjectIndexIterator();
    while (opi.hasNextOPI()) {
      nPosEntries++;
      long pos=opi.nextPos();
      pages[BitTools.getPage(pos)]=DATA;
      nObjectsByPos++;
    }
    for (int v=0; v < se.getObjectIndexVersionCount(); v++) {
      List<Integer> pageList=se.getObjectIndexVersion(v).debugPageIds();
      nPosIndexPages+=pageList.size();
      for (      Integer i : pageList) {
        if (pages[i] != 0) {
          System.err.println(""String_Node_Str"" + i);
        }
        pages[i]=IDX_POS;
      }
    }
  }
  List<Integer> pageList=schemaIndex.debugPageIdsAttrIdx();
  int nAttrIndexPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_ATTR;
  }
  pageList=oidIndex.debugPageIds();
  int nOidPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_OID;
  }
  pageList=freeIndex.debugPageIds();
  int nFsmPages=pageList.size();
  for (  Integer i : pageList) {
    if (pages[i] != 0) {
      System.err.println(""String_Node_Str"" + i);
    }
    pages[i]=IDX_FSM;
  }
  Iterator<LLEntry> fiIter=freeIndex.debugIterator();
  int nPagesFreeDoNotUse=0;
  while (fiIter.hasNext()) {
    LLEntry e=fiIter.next();
    if (pages[(int)e.getKey()] != 0) {
      if (e.getValue() == 0) {
        System.err.println(""String_Node_Str"" + e.getKey());
      }
 else {
        nPagesFreeDoNotUse++;
      }
    }
    pages[(int)e.getKey()]=FREE;
    nPagesFree++;
  }
  int nPagesFree2=0;
  int nPagesUnknown=0;
  int nIndexPages=0;
  for (  byte b : pages) {
switch (b) {
case ROOT:
      nPagesRoot++;
    break;
case DATA:
  nPagesData++;
break;
case FREE:
nPagesFree2++;
break;
case IDX_FSM:
case IDX_ATTR:
case IDX_OID:
case IDX_POS:
nIndexPages++;
break;
default :
nPagesUnknown++;
}
}
FormattedStringBuilder sb=new FormattedStringBuilder();
sb.appendln(""String_Node_Str"" + nObjects + ""String_Node_Str""+ nObjectsByPos);
if (nObjects != nObjectsByPos) {
sb.appendln(""String_Node_Str"");
}
sb.appendln(""String_Node_Str"" + sList.size());
sb.appendln(""String_Node_Str"" + nPosEntries);
sb.appendln();
sb.appendln(""String_Node_Str"" + nOidPages);
sb.appendln(""String_Node_Str"" + nFsmPages);
sb.appendln(""String_Node_Str"" + nPagesFreeDoNotUse);
sb.appendln(""String_Node_Str"" + nPosIndexPages);
sb.appendln(""String_Node_Str"" + nAttrIndexPages);
sb.appendln(""String_Node_Str"" + nIndexPages);
sb.appendln();
sb.appendln(""String_Node_Str"" + nPagesFree + ""String_Node_Str""+ nPagesFree2);
sb.appendln(""String_Node_Str"" + nPagesData);
sb.appendln(""String_Node_Str"" + nPagesRoot);
sb.appendln(""String_Node_Str"" + nIndexPages);
sb.appendln(""String_Node_Str"" + nPagesUnknown);
sb.appendln(""String_Node_Str"" + nPages);
return sb.toString();
}",0.7970551465481317
98171,"/** 
 * Method for serializing data with constant size so that it can be stored in the object header where the field offsets are valid.
 */
private final void serializeObjectNoSCO(Object v,ZooFieldDef def){
  if (v == null) {
    writeClassInfo(null,null);
    out.skipWrite(def.getLength() - 1);
    if (def.isString() || def.isDate()) {
      scos.add(null);
      return;
    }
    return;
  }
  Class<? extends Object> cls=v.getClass();
  writeClassInfo(cls,v);
  if (isPersistentCapable(cls)) {
    serializeOid(v);
    return;
  }
 else   if (String.class == cls) {
    scos.add(v);
    String s=(String)v;
    out.writeLong(BitTools.toSortableLong(s));
    return;
  }
 else   if (Date.class == cls) {
    out.writeLong(((Date)v).getTime());
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + cls);
}","/** 
 * Method for serializing data with constant size so that it can be stored in the object header where the field offsets are valid.
 */
private final void serializeObjectNoSCO(Object v,ZooFieldDef def){
  if (v == null) {
    writeClassInfo(null,null);
    out.skipWrite(def.getLength() - 1);
    if (def.isString()) {
      scos.add(null);
      return;
    }
    return;
  }
  Class<? extends Object> cls=v.getClass();
  writeClassInfo(cls,v);
  if (isPersistentCapable(cls)) {
    serializeOid(v);
    return;
  }
 else   if (String.class == cls) {
    scos.add(v);
    String s=(String)v;
    out.writeLong(BitTools.toSortableLong(s));
    return;
  }
 else   if (Date.class == cls) {
    out.writeLong(((Date)v).getTime());
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + cls);
}",0.9902557856272838
98172,"/** 
 * Declares a new class with a given super-class. 
 * @param pm
 * @param className
 * @param superCls
 * @return New schema object
 */
public static ZooClass declareClass(PersistenceManager pm,String className,ZooClass superCls){
  checkValidity(pm);
  Node node=Session.getSession(pm).getPrimaryNode();
  return Session.getSession(pm).getSchemaManager().declareSchema(className,superCls,node);
}","/** 
 * Declares a new class with a given super-class. 
 * @param pm
 * @param className
 * @param superCls
 * @return New schema object
 */
public static ZooClass declareClass(PersistenceManager pm,String className,ZooClass superCls){
  checkValidity(pm);
  if (!checkJavaClassNameConformity(className)) {
    throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
  }
  Node node=Session.getSession(pm).getPrimaryNode();
  return Session.getSession(pm).getSchemaManager().declareSchema(className,superCls,node);
}",0.8472075869336143
98173,"@Override public void removeField(ZooField field){
  checkInvalid();
  if (!def.jdoZooIsDirty()) {
    def=def.newVersion();
  }
  def.removeField(((ISchemaField)field).getInternal());
}","@Override public void removeField(ZooField field){
  checkInvalid();
  getLatestVersion(true).removeField(((ISchemaField)field).getInternal());
}",0.8157099697885196
98174,"@Override public ZooField declareField(String fieldName,ZooClass type,int arrayDepth){
  checkAddField(fieldName);
  return def.addField(fieldName,((ISchema)type).getSchemaDef(),arrayDepth).getApiHandle();
}","@Override public ZooField declareField(String fieldName,ZooClass type,int arrayDepth){
  checkAddField(fieldName);
  return getLatestVersion(true).addField(fieldName,((ISchema)type).getSchemaDef(),arrayDepth).getApiHandle();
}",0.9422632794457276
98175,"protected void checkInvalid(){
  Session s=def.getProvidedContext().getSession();
  if (s.getPersistenceManager().isClosed() || !s.getPersistenceManager().currentTransaction().isActive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (def.jdoZooIsDeleted()) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","protected void checkInvalid(){
  Session s=def.getProvidedContext().getSession();
  if (s.getPersistenceManager().isClosed() || !s.getPersistenceManager().currentTransaction().isActive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (def.jdoZooIsDeleted()) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"");
  }
  getLatestVersion(false);
}",0.9635627530364372
98176,"private void checkAddField(String fieldName){
  checkInvalid();
  if (fieldName == null || fieldName.equals(""String_Node_Str"")) {
    throw new IllegalArgumentException();
  }
  for (  ZooFieldDef fd : def.getAllFields()) {
    if (fd.getName().equals(fieldName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + fieldName);
    }
  }
  if (!def.jdoZooIsDirty()) {
    def=def.newVersion();
  }
}","private void checkAddField(String fieldName){
  checkInvalid();
  if (!checkJavaFieldNameConformity(fieldName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName);
  }
  for (  ZooFieldDef fd : def.getAllFields()) {
    if (fd.getName().equals(fieldName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + fieldName);
    }
  }
  getLatestVersion(true);
}",0.3479349186483104
98177,"@Override public void rename(String name){
  checkInvalid();
}","@Override public void rename(String fieldName){
  checkInvalid();
  if (!ISchema.checkJavaFieldNameConformity(fieldName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName);
  }
  if (fieldDef.getDeclaringType().getApiHandle().locateField(fieldName) != null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fieldName);
  }
  fieldDef.updateName(fieldName);
}",0.2687224669603524
98178,"private void checkInvalid(){
  System.err.println(""String_Node_Str"");
  if (isInvalid) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Session s=fieldDef.getDeclaringType().getProvidedContext().getSession();
  if (s.getPersistenceManager().isClosed() || !s.getPersistenceManager().currentTransaction().isActive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkInvalid(){
  Session s=fieldDef.getDeclaringType().getProvidedContext().getSession();
  if (s.getPersistenceManager().isClosed() || !s.getPersistenceManager().currentTransaction().isActive()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (isInvalid) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.6955414012738853
98179,"/** 
 * Only to be used during database startup to load the schema-tree.
 * @param superDef
 */
public void associateSuperDef(ZooClassDef superDef){
  if (this.superDef != null) {
    throw new IllegalStateException();
  }
  if (superDef != null) {
    if (superDef.getOid() != oidSuper) {
      throw new IllegalStateException(""String_Node_Str"" + oidSuper + ""String_Node_Str""+ superDef.getOid()+ ""String_Node_Str""+ className);
    }
    superDef.addSubClass(this);
  }
  this.superDef=superDef;
}","/** 
 * Only to be used during database startup to load the schema-tree.
 * @param superDef
 */
public void associateSuperDef(ZooClassDef superDef){
  if (this.superDef != null) {
    throw new IllegalStateException();
  }
  if (superDef == null) {
    throw new IllegalArgumentException();
  }
  if (superDef.getOid() != oidSuper) {
    throw new IllegalStateException(""String_Node_Str"" + oidSuper + ""String_Node_Str""+ superDef.getOid()+ ""String_Node_Str""+ className);
  }
  superDef.addSubClass(this);
  this.superDef=superDef;
}",0.8132295719844358
98180,"public ZooClassDef newVersion(){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,oidSuper);
  newDef.associateSuperDef(superDef);
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.apiHandle=apiHandle;
  apiHandle=null;
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  newDef.subs.addAll(subs);
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(newDef,f.getName(),f.getTypeName(),f.getJdoType());
    newDef.localFields.add(fNew);
  }
  newDef.associateFields();
  providedContext.getSession().makePersistent(newDef);
  return newDef;
}","/** 
 * Schema versioning: We only create new schema instance when we add or remove fields. Renaming a field should not result in a new version! A new version is only required when the modified schema does not match the stored data. Such changes require also new versions of all sub-classes.  WHY? If every class stored only their own fields would we still have a problem? Yes, because the new version of the referenced superclass has a different OID.
 * @return New version.
 */
public ZooClassDef newVersion(){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,oidSuper);
  superDef.removeSubClass(this);
  newDef.associateSuperDef(superDef);
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.apiHandle=apiHandle;
  apiHandle=null;
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(newDef,f.getName(),f.getTypeName(),f.getJdoType());
    newDef.localFields.add(fNew);
  }
  newDef.associateFields();
  providedContext.getSession().makePersistent(newDef);
  for (  ZooClassDef sub : subs) {
    newDef.subs.add(sub.newVersion());
  }
  return newDef;
}",0.702974828375286
98181,"public void deleteSchema(ISchema iSchema){
  ZooClassDef def=iSchema.getSchemaDef();
  if (!def.getSubClasses().isEmpty()) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"" + def.getSubClasses().get(0).getClassName());
  }
  if (def.jdoZooIsDeleted()) {
    throw new JDOObjectNotFoundException(""String_Node_Str"");
  }
  for (  ZooPCImpl pci : cache.getAllObjects()) {
    if (pci.jdoZooGetClassDef() == def) {
      pci.jdoZooMarkDeleted();
    }
  }
  Node node=iSchema.getNode();
  ops.add(new SchemaOperation.SchemaDelete(node,iSchema.getSchemaDef()));
  def.jdoZooMarkDeleted();
}","public void deleteSchema(ISchema iSchema){
  ZooClassDef def=iSchema.getSchemaDef();
  if (!def.getSubClasses().isEmpty()) {
    throw new JDOUserException(""String_Node_Str"" + ""String_Node_Str"" + def.getSubClasses().get(0).getClassName());
  }
  if (def.jdoZooIsDeleted()) {
    throw new JDOObjectNotFoundException(""String_Node_Str"");
  }
  for (  ZooPCImpl pci : cache.getAllObjects()) {
    if (pci.jdoZooGetClassDef() == def) {
      pci.jdoZooMarkDeleted();
    }
  }
  Node node=iSchema.getNode();
  ops.add(new SchemaOperation.SchemaDelete(node,iSchema.getSchemaDef()));
  def.jdoZooMarkDeleted();
  System.err.println(""String_Node_Str"");
}",0.9672785315243416
98182,"@Before public void before(){
  TestTools.removeDb(DB_NAME);
  TestTools.createDb(DB_NAME);
}","@Before public void before(){
  TestTools.closePM();
  TestTools.removeDb(DB_NAME);
  TestTools.createDb(DB_NAME);
}",0.8899521531100478
98183,"@Override public ZooField locateField(String fieldName){
  checkInvalid();
  for (  ZooFieldDef f : def.getAllFields()) {
    if (f.getName().equals(fieldName)) {
      return f.getApiHandle();
    }
  }
  return null;
}","@Override public ZooField locateField(String fieldName){
  checkInvalid();
  for (  ZooFieldDef f : def.getAllFields()) {
    System.out.println(""String_Node_Str"" + f.getName() + ""String_Node_Str""+ f.getDeclaringType().getClassName()+ ""String_Node_Str""+ f.getDeclaringType().getOid());
    if (f.getName().equals(fieldName)) {
      return f.getApiHandle();
    }
  }
  return null;
}",0.7284768211920529
98184,"ZooClassDef getLatestVersion(boolean updateIntended){
  ZooClassDef def1=def;
  while (def.getNextVersion() != null) {
    def=def.getNextVersion();
  }
  if (def != def1) {
    throw new IllegalStateException();
  }
  return def;
}","ZooClassDef getLatestVersion(boolean updateIntended){
  ZooClassDef def1=def;
  System.out.println(""String_Node_Str"" + def);
  while (def.getNextVersion() != null) {
    def=def.getNextVersion();
    System.out.println(""String_Node_Str"" + def);
  }
  if (def != def1) {
    throw new IllegalStateException();
  }
  return def;
}",0.8285714285714286
98185,"@Override public String toString(){
  return className + ""String_Node_Str"" + Util.oidToString(getOid())+ ""String_Node_Str""+ super.toString();
}","@Override public String toString(){
  return className + ""String_Node_Str"" + Util.oidToString(getOid())+ ""String_Node_Str""+ superDef;
}",0.9496402877697842
98186,"/** 
 * Schema versioning: We only create new schema instance when we add or remove fields. Renaming a field should not result in a new version! A new version is only required when the modified schema does not match the stored data. Such changes require also new versions of all sub-classes.  WHY? If every class stored only their own fields would we still have a problem? Yes, because the new version of the referenced superclass has a different OID.
 * @param cache 
 * @return New version.
 */
public ZooClassDef newVersion(ClientSessionCache cache){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,oidSuper);
  superDef.removeSubClass(this);
  newDef.associateSuperDef(superDef);
  cache.addSchema(newDef,false,jdoZooGetContext().getNode());
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.apiHandle=apiHandle;
  if (apiHandle != null) {
    apiHandle.updateVersion(newDef);
  }
  apiHandle=null;
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(newDef,f.getName(),f.getTypeName(),f.getJdoType());
    newDef.localFields.add(fNew);
    if (fNew.getApiHandle() != null) {
      fNew.getApiHandle().updateVersion(fNew);
    }
  }
  newDef.associateFields();
  for (  ZooClassDef sub : subs) {
    newDef.subs.add(sub.newVersion(cache));
  }
  return newDef;
}","/** 
 * Schema versioning: We only create new schema instance when we add or remove fields. Renaming a field should not result in a new version! A new version is only required when the modified schema does not match the stored data. Such changes require also new versions of all sub-classes.  WHY? If every class stored only their own fields would we still have a problem? Yes, because the new version of the referenced superclass has a different OID.
 * @param cache 
 * @return New version.
 */
public ZooClassDef newVersion(ClientSessionCache cache){
  if (nextVersion != null) {
    throw new IllegalStateException();
  }
  long oid=jdoZooGetContext().getNode().getOidBuffer().allocateOid();
  ZooClassDef newDef=new ZooClassDef(className,oid,oidSuper);
  superDef.removeSubClass(this);
  newDef.associateSuperDef(superDef);
  System.out.println(""String_Node_Str"" + this.getOid() + ""String_Node_Str""+ newDef.getOid());
  cache.addSchema(newDef,false,jdoZooGetContext().getNode());
  newDef.prevVersionOid=jdoZooGetOid();
  newDef.prevVersion=this;
  nextVersion=newDef;
  newDef.apiHandle=apiHandle;
  if (apiHandle != null) {
    apiHandle.updateVersion(newDef);
  }
  apiHandle=null;
  newDef.providedContext=new PCContext(newDef,providedContext.getSession(),providedContext.getNode());
  for (  ZooFieldDef f : localFields) {
    ZooFieldDef fNew=new ZooFieldDef(newDef,f.getName(),f.getTypeName(),f.getJdoType());
    newDef.localFields.add(fNew);
    if (fNew.getApiHandle() != null) {
      fNew.getApiHandle().updateVersion(fNew);
    }
  }
  newDef.associateFields();
  for (  ZooClassDef sub : subs) {
    newDef.subs.add(sub.newVersion(cache));
  }
  return newDef;
}",0.9712362301101592
98187,"private void write(){
  Collection<ZooClassDef> schemata=commonCache.getSchemata(this);
  for (  ZooClassDef cs : schemata) {
    if (cs.jdoZooIsDeleted())     continue;
    if (cs.jdoZooIsNew() || cs.jdoZooIsDirty()) {
      checkSchemaFields(cs,schemata);
    }
  }
  for (  ZooPCImpl co : commonCache.getDeletedObjects()) {
    if (!co.jdoZooIsDirty() || co.jdoZooGetNode() != this) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (co.jdoZooIsDeleted()) {
      if (co.jdoZooIsNew()) {
        continue;
      }
      if (co.jdoZooGetClassDef().jdoZooIsDeleted()) {
        continue;
      }
      if (co instanceof DeleteCallback) {
        ((DeleteCallback)co).jdoPreDelete();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_DELETE);
      co.jdoZooGetContext().getDataDeleteSink().delete(co);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  for (  ZooClassDef cs : schemata) {
    cs.getProvidedContext().getDataDeleteSink().flush();
  }
  for (  ZooPCImpl co : commonCache.getDirtyObjects()) {
    if (!co.jdoZooIsDirty() || co.jdoZooGetNode() != this) {
      continue;
    }
    if (!co.jdoZooIsDeleted()) {
      if (co instanceof StoreCallback) {
        ((StoreCallback)co).jdoPreStore();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_STORE);
      co.jdoZooGetContext().getDataSink().write(co);
    }
  }
  for (  ZooClassDef cs : schemata) {
    cs.getProvidedContext().getDataSink().flush();
  }
  for (  ZooClassDef cs : schemata) {
    if (cs.jdoZooIsDeleted() && !cs.jdoZooIsNew()) {
      disk.deleteSchema(cs);
    }
  }
}","private void write(){
  Collection<ZooClassDef> schemata=commonCache.getSchemata(this);
  for (  ZooClassDef cs : schemata) {
    System.out.println(""String_Node_Str"" + cs.getClassName() + ""String_Node_Str""+ cs.getOid());
    if (cs.jdoZooIsDeleted())     continue;
    if (cs.jdoZooIsNew() || cs.jdoZooIsDirty()) {
      System.out.println(""String_Node_Str"" + cs.getClassName() + ""String_Node_Str""+ cs.getOid());
      checkSchemaFields(cs,schemata);
    }
  }
  for (  ZooPCImpl co : commonCache.getDeletedObjects()) {
    if (!co.jdoZooIsDirty() || co.jdoZooGetNode() != this) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (co.jdoZooIsDeleted()) {
      if (co.jdoZooIsNew()) {
        continue;
      }
      if (co.jdoZooGetClassDef().jdoZooIsDeleted()) {
        continue;
      }
      if (co instanceof DeleteCallback) {
        ((DeleteCallback)co).jdoPreDelete();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_DELETE);
      co.jdoZooGetContext().getDataDeleteSink().delete(co);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  for (  ZooClassDef cs : schemata) {
    cs.getProvidedContext().getDataDeleteSink().flush();
  }
  for (  ZooPCImpl co : commonCache.getDirtyObjects()) {
    if (!co.jdoZooIsDirty() || co.jdoZooGetNode() != this) {
      continue;
    }
    if (!co.jdoZooIsDeleted()) {
      if (co instanceof StoreCallback) {
        ((StoreCallback)co).jdoPreStore();
      }
      co.jdoZooGetContext().notifyEvent(co,ZooInstanceEvent.PRE_STORE);
      co.jdoZooGetContext().getDataSink().write(co);
    }
  }
  for (  ZooClassDef cs : schemata) {
    cs.getProvidedContext().getDataSink().flush();
  }
  for (  ZooClassDef cs : schemata) {
    if (cs.jdoZooIsDeleted() && !cs.jdoZooIsNew()) {
      disk.deleteSchema(cs);
    }
  }
}",0.9445714285714286
98188,"@Test public void testSchemaCountCommit(){
  String cName1=""String_Node_Str"";
  String cName2=""String_Node_Str"";
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooClass stt=ZooSchema.defineClass(pm,TestClassTiny.class);
  ZooClass s1=ZooSchema.declareClass(pm,cName1,stt);
  ZooClass s2=ZooSchema.declareClass(pm,cName2,s1);
  ZooField f1=s1.declareField(""String_Node_Str"",Long.TYPE);
  f1.rename(""String_Node_Str"");
  ZooField f2=s2.declareField(""String_Node_Str"",Integer.TYPE);
  f2.rename(""String_Node_Str"");
  f2.remove();
  s2.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,2);
  stt=ZooSchema.locateClass(pm,TestClassTiny.class);
  s1=ZooSchema.locateClass(pm,cName1);
  stt.declareField(""String_Node_Str"",Long.TYPE);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,4);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.declareField(""String_Node_Str"",Long.TYPE);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,5);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.locateField(""String_Node_Str"").rename(""String_Node_Str"");
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,6);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.locateField(""String_Node_Str"").remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,7);
  s1=ZooSchema.locateClass(pm,cName1);
  f1=s1.declareField(""String_Node_Str"",Long.TYPE);
  f1.rename(""String_Node_Str"");
  f2=s1.declareField(""String_Node_Str"",Long.TYPE);
  f2.rename(""String_Node_Str"");
  f2.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,8);
  TestTools.closePM();
}","@Test public void testSchemaCountCommit(){
  String cName1=""String_Node_Str"";
  String cName2=""String_Node_Str"";
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  ZooClass stt=ZooSchema.defineClass(pm,TestClassTiny.class);
  ZooClass s1=ZooSchema.declareClass(pm,cName1,stt);
  ZooClass s2=ZooSchema.declareClass(pm,cName2,s1);
  ZooField f1=s1.declareField(""String_Node_Str"",Long.TYPE);
  f1.rename(""String_Node_Str"");
  ZooField f2=s2.declareField(""String_Node_Str"",Integer.TYPE);
  f2.rename(""String_Node_Str"");
  f2.remove();
  s2.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,2);
  stt=ZooSchema.locateClass(pm,TestClassTiny.class);
  s1=ZooSchema.locateClass(pm,cName1);
  stt.declareField(""String_Node_Str"",Long.TYPE);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,4);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.declareField(""String_Node_Str"",Long.TYPE);
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,5);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.locateField(""String_Node_Str"").rename(""String_Node_Str"");
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,6);
  s1=ZooSchema.locateClass(pm,cName1);
  s1.locateField(""String_Node_Str"").remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,7);
  s1=ZooSchema.locateClass(pm,cName1);
  f1=s1.declareField(""String_Node_Str"",Long.TYPE);
  f1.rename(""String_Node_Str"");
  f2=s1.declareField(""String_Node_Str"",Long.TYPE);
  f2.rename(""String_Node_Str"");
  f2.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  checkSchemaCount(pm,8);
  TestTools.closePM();
}",0.98696360673547
98189,"@After public void after(){
  System.err.println(""String_Node_Str"");
  try {
    TestTools.closePM();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  System.err.println(""String_Node_Str"");
  TestTools.removeDb();
  System.err.println(""String_Node_Str"");
}","@After public void after(){
  try {
    TestTools.closePM();
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
  TestTools.removeDb();
}",0.7007299270072993
98190,"/** 
 * For example: Query q = pm.newQuery (Employee.class, ""salary > sal && name.startsWith(begin""); q.declareParameters (""Float sal, String begin"");
 */
@Override public void declareParameters(String parameters){
  checkUnmodifiable();
  parameters=parameters.trim();
  int i1=parameters.indexOf(',');
  while (i1 >= 0) {
    String p1=parameters.substring(0,i1).trim();
    _parameters.add(new QueryParameter(p1));
    parameters=parameters.substring(i1 + 1,parameters.length()).trim();
    i1=parameters.indexOf(',');
  }
  _parameters.add(new QueryParameter(parameters));
}","/** 
 * For example: Query q = pm.newQuery (Employee.class, ""salary > sal && name.startsWith(begin""); q.declareParameters (""Float sal, String begin"");
 */
@Override public void declareParameters(String parameters){
  checkUnmodifiable();
  parameters=parameters.trim();
  int i1=parameters.indexOf(',');
  while (i1 >= 0) {
    String p1=parameters.substring(0,i1).trim();
    this.parameters.add(new QueryParameter(p1));
    parameters=parameters.substring(i1 + 1,parameters.length()).trim();
    i1=parameters.indexOf(',');
  }
  this.parameters.add(new QueryParameter(parameters));
}",0.9896907216494846
98191,"private void assignParametersToQueryTree(QueryTreeNode queryTree){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    if (!term.isParametrized()) {
      continue;
    }
    String pName=term.getParamName();
    boolean isAssigned=false;
    for (    QueryParameter param : _parameters) {
      if (pName.equals(param.getName())) {
        term.setParameter(param);
        isAssigned=true;
        break;
      }
    }
    if (!isAssigned) {
      System.out.println(""String_Node_Str"" + pName + ""String_Node_Str"");
    }
  }
}","private void assignParametersToQueryTree(QueryTreeNode queryTree){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    if (!term.isParametrized()) {
      continue;
    }
    String pName=term.getParamName();
    boolean isAssigned=false;
    for (    QueryParameter param : parameters) {
      if (pName.equals(param.getName())) {
        term.setParameter(param);
        isAssigned=true;
        break;
      }
    }
    if (!isAssigned) {
      System.out.println(""String_Node_Str"" + pName + ""String_Node_Str"");
    }
  }
}",0.9991518235793044
98192,"/** 
 * {@inheritDoc}
 */
@Override public Object execute(Object p1,Object p2,Object p3){
  _parameters.get(0).setValue(p1);
  _parameters.get(1).setValue(p2);
  _parameters.get(2).setValue(p3);
  return execute();
}","/** 
 * {@inheritDoc}
 */
@Override public Object execute(Object p1,Object p2,Object p3){
  parameters.get(0).setValue(p1);
  parameters.get(1).setValue(p2);
  parameters.get(2).setValue(p3);
  return execute();
}",0.993006993006993
98193,"/** 
 * {@inheritDoc}
 */
@Override public Object executeWithArray(Object... parameters){
  for (int i=0; i < parameters.length; i++) {
    _parameters.get(i).setValue(parameters[i]);
  }
  return execute();
}","/** 
 * {@inheritDoc}
 */
@Override public Object executeWithArray(Object... parameters){
  for (int i=0; i < parameters.length; i++) {
    this.parameters.get(i).setValue(parameters[i]);
  }
  return execute();
}",0.985781990521327
98194,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext;
  if (qa.getIndex() != null) {
    ext=pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax(),!ignoreCache);
  }
 else {
    if (_ext != null) {
      ext=_ext.iterator();
    }
 else {
      ext=new ExtentImpl(candCls,subClasses,pm,ignoreCache).iterator();
    }
  }
  if (_ext != null && (!_ext.hasSubclasses() || !_ext.getCandidateClass().isAssignableFrom(candCls))) {
    final boolean hasSub=_ext.hasSubclasses();
    final Class supCls=_ext.getCandidateClass();
    while (ext.hasNext()) {
      Object o=ext.next();
      if (hasSub) {
        if (!supCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (supCls != o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext.hasNext()) {
      Object o=ext.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext instanceof CloseableIterator) {
    ((CloseableIterator)ext).close();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext2;
  if (qa.getIndex() != null) {
    ext2=pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax(),!ignoreCache);
  }
 else {
    if (ext != null) {
      ext2=ext.iterator();
    }
 else {
      ext2=new ExtentImpl(candCls,subClasses,pm,ignoreCache).iterator();
    }
  }
  if (ext != null && (!ext.hasSubclasses() || !ext.getCandidateClass().isAssignableFrom(candCls))) {
    final boolean hasSub=ext.hasSubclasses();
    final Class supCls=ext.getCandidateClass();
    while (ext2.hasNext()) {
      Object o=ext2.next();
      if (hasSub) {
        if (!supCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (supCls != o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext2.hasNext()) {
      Object o=ext2.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext2 instanceof CloseableIterator) {
    ((CloseableIterator)ext2).close();
  }
}",0.95021227325357
98195,"/** 
 * This class is only public so it can be accessed by the test harness.  Please do not use.
 */
public synchronized final void traverse(){
  DatabaseLogger.debugPrintln(1,""String_Node_Str"" + workList.size());
  long t1=System.currentTimeMillis();
  long nObjects=0;
  nObjects+=traverseCache();
  nObjects+=traverseWorkList();
  long t2=System.currentTimeMillis();
  DatabaseLogger.debugPrintln(1,""String_Node_Str"" + nObjects + ""String_Node_Str""+ seenObjects.size()+ ""String_Node_Str""+ (t2 - t1) / 1000.0 + ""String_Node_Str"" + mpCount);
}","/** 
 * This class is only public so it can be accessed by the test harness.  Please do not use.
 */
public final void traverse(){
  DatabaseLogger.debugPrintln(1,""String_Node_Str"" + workList.size());
  long t1=System.currentTimeMillis();
  long nObjects=0;
  nObjects+=traverseCache();
  nObjects+=traverseWorkList();
  long t2=System.currentTimeMillis();
  DatabaseLogger.debugPrintln(1,""String_Node_Str"" + nObjects + ""String_Node_Str""+ seenObjects.size()+ ""String_Node_Str""+ (t2 - t1) / 1000.0 + ""String_Node_Str"" + mpCount);
}",0.9878844361602982
98196,"/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @param maxMap2 
 * @param minMap2 
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree,IdentityHashMap<ZooFieldDef,Long> minMap,IdentityHashMap<ZooFieldDef,Long> maxMap){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    ZooFieldDef f=term.getFieldDef();
    if (!f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Long value;
    if (term.getValue() instanceof Number) {
      value=((Number)term.getValue()).longValue();
    }
 else     if (term.getValue() instanceof String) {
      value=BitTools.toSortableLong((String)term.getValue());
    }
 else     if (term.getValue() instanceof Boolean) {
      continue;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + term.getValue().getClass());
    }
switch (term.getOp()) {
case EQ:
{
        minMap.put(f,value);
        maxMap.put(f,value);
        break;
      }
case L:
    if (value < maxMap.get(f)) {
      maxMap.put(f,value - 1);
    }
  break;
case LE:
if (value < maxMap.get(f)) {
  maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
if (minMap.isEmpty()) {
return new QueryAdvice(queryTree);
}
ZooFieldDef def=minMap.keySet().iterator().next();
QueryAdvice qa=new QueryAdvice(queryTree);
qa.setIndex(def);
qa.setMin(minMap.get(def));
qa.setMax(maxMap.get(def));
if (minMap.size() == 1) {
qa.setIndex(minMap.keySet().iterator().next());
return qa;
}
for (Map.Entry<ZooFieldDef,Long> me2 : minMap.entrySet()) {
long min2=me2.getValue();
long max2=maxMap.get(me2.getKey());
if ((max2 - min2) < (qa.getMax() - qa.getMin())) {
qa.setIndex(me2.getKey());
qa.setMin(min2);
qa.setMax(max2);
}
}
if (qa.getIndex().isString()) {
qa.setMin(BitTools.getMinPosInPage(qa.getMin()));
qa.setMax(BitTools.getMaxPosInPage(qa.getMax()));
}
return qa;
}","/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @param maxMap2 
 * @param minMap2 
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree,IdentityHashMap<ZooFieldDef,Long> minMap,IdentityHashMap<ZooFieldDef,Long> maxMap){
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    ZooFieldDef f=term.getFieldDef();
    if (!f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Long value;
    if (term.getValue() == QueryParser.NULL) {
      continue;
    }
 else     if (term.getValue() instanceof Number) {
      value=((Number)term.getValue()).longValue();
    }
 else     if (term.getValue() instanceof String) {
      value=BitTools.toSortableLong((String)term.getValue());
    }
 else     if (term.getValue() instanceof Boolean) {
      continue;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + term.getValue().getClass());
    }
switch (term.getOp()) {
case EQ:
{
        minMap.put(f,value);
        maxMap.put(f,value);
        break;
      }
case L:
    if (value < maxMap.get(f)) {
      maxMap.put(f,value - 1);
    }
  break;
case LE:
if (value < maxMap.get(f)) {
  maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
if (minMap.isEmpty()) {
return new QueryAdvice(queryTree);
}
ZooFieldDef def=minMap.keySet().iterator().next();
QueryAdvice qa=new QueryAdvice(queryTree);
qa.setIndex(def);
qa.setMin(minMap.get(def));
qa.setMax(maxMap.get(def));
if (minMap.size() == 1) {
qa.setIndex(minMap.keySet().iterator().next());
return qa;
}
for (Map.Entry<ZooFieldDef,Long> me2 : minMap.entrySet()) {
long min2=me2.getValue();
long max2=maxMap.get(me2.getKey());
if ((max2 - min2) < (qa.getMax() - qa.getMin())) {
qa.setIndex(me2.getKey());
qa.setMin(min2);
qa.setMax(max2);
}
}
if (qa.getIndex().isString()) {
qa.setMin(BitTools.getMinPosInPage(qa.getMin()));
qa.setMax(BitTools.getMaxPosInPage(qa.getMax()));
}
return qa;
}",0.9836494440810988
98197,"private QueryTerm parseTerm(){
  trim();
  if (charAt0() == '(') {
    throw new UnsupportedOperationException();
  }
  Object value=null;
  String paramName=null;
  COMP_OP op=null;
  String fName=null;
  Class<?> type=null;
  int pos0=pos();
  char c=charAt0();
  while ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| (c == '_')|| (c == '.')) {
    inc();
    if (c == '.') {
      String dummy=substring(pos0,pos());
      if (dummy.equals(""String_Node_Str"")) {
        pos0=pos();
      }
 else {
        fName=substring(pos0,pos() - 1);
        pos0=pos();
      }
    }
    c=charAt0();
  }
  if (fName == null) {
    fName=substring(pos0,pos());
  }
  if (fName.equals(""String_Node_Str"")) {
    throw new JDOUserException(""String_Node_Str"" + pos0 + ""String_Node_Str"");
  }
  pos0=pos();
  trim();
  try {
    ZooFieldDef f=fields.get(fName);
    if (f == null) {
      throw new JDOFatalInternalException(""String_Node_Str"" + fName);
    }
    type=f.getJavaType();
  }
 catch (  SecurityException e) {
    throw new JDOUserException(""String_Node_Str"" + fName,e);
  }
  c=charAt0();
  char c2=charAt(1);
  char c3=charAt(2);
  if (c == '=' && c2 == '=' && c3 == ' ') {
    op=COMP_OP.EQ;
  }
 else   if (c == '<') {
    if (c2 == '=' && c3 == ' ') {
      op=COMP_OP.LE;
    }
 else     if (c2 == ' ') {
      op=COMP_OP.L;
    }
  }
 else   if (c == '>') {
    if (c2 == '=' && c3 == ' ') {
      op=COMP_OP.AE;
    }
 else     if (c2 == ' ') {
      op=COMP_OP.A;
    }
  }
 else   if (c == '!' && c2 == '=' && c3 == ' ') {
    op=COMP_OP.NE;
  }
  if (op == null) {
    throw new JDOUserException(""String_Node_Str"" + c + c2+ c3+ ""String_Node_Str""+ pos0);
  }
  inc(op._len);
  trim();
  pos0=pos();
  c=charAt0();
  if ((len() >= 4 && substring(pos0,pos0 + 4).equals(""String_Node_Str"")) && (len() == 4 || (len() > 4 && (charAt(4) == ' ' || charAt(4) == ')')))) {
    if (type.isPrimitive()) {
      throw new JDOUserException(""String_Node_Str"" + pos0);
    }
    value=NULL;
  }
 else   if (c == '""' || c == '\'') {
    boolean singleQuote=c == '\'';
    if (!String.class.isAssignableFrom(type)) {
      throw new JDOUserException(""String_Node_Str"" + type.getName());
    }
    inc();
    pos0=pos();
    c=charAt0();
    while (true) {
      if ((!singleQuote && c == '""') || (singleQuote && c == '\'')) {
        break;
      }
 else       if (c == '\\') {
        inc();
      }
      inc();
      c=charAt0();
    }
    value=substring(pos0,pos());
    inc();
  }
 else   if (c == '-' || (c > '0' && c < '9')) {
    pos0=pos();
    boolean isHex=false;
    while (!isFinished()) {
      c=charAt0();
      if (c == ')' || c == ' ') {
        break;
      }
 else       if (c == 'x') {
        isHex=true;
      }
      inc();
    }
    if (type == Double.TYPE || type == Double.class) {
      value=Double.parseDouble(substring(pos0,pos()));
    }
 else     if (type == Float.TYPE || type == Float.class) {
      value=Float.parseFloat(substring(pos0,pos()));
    }
 else     if (type == Long.TYPE || type == Long.class) {
      if (isHex) {
        value=Long.parseLong(substring(pos0,pos()),16);
      }
 else {
        value=Long.parseLong(substring(pos0,pos()));
      }
    }
 else     if (type == Integer.TYPE || type == Integer.class) {
      if (isHex) {
        value=Integer.parseInt(substring(pos0,pos()),16);
      }
 else {
        value=Integer.parseInt(substring(pos0,pos()));
      }
    }
 else     if (type == Short.TYPE || type == Short.class) {
      if (isHex) {
        value=Short.parseShort(substring(pos0,pos()),16);
      }
 else {
        value=Short.parseShort(substring(pos0,pos()));
      }
    }
 else     if (type == Byte.TYPE || type == Byte.class) {
      if (isHex) {
        value=Byte.parseByte(substring(pos0,pos()),16);
      }
 else {
        value=Byte.parseByte(substring(pos0,pos()));
      }
    }
 else     if (type == BigDecimal.class) {
      value=new BigDecimal(substring(pos0,pos()));
    }
 else     if (type == BigInteger.class) {
      value=new BigInteger(substring(pos0,pos()));
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + type.getName());
    }
  }
 else   if (type == Boolean.TYPE || type == Boolean.class) {
    if (substring(pos0,pos0 + 4).toLowerCase().equals(""String_Node_Str"") && (isFinished(4) || charAt(4) == ' ' || charAt(4) == ')')) {
      value=true;
      inc(4);
    }
 else     if (substring(pos0,pos0 + 5).toLowerCase().equals(""String_Node_Str"") && (isFinished(5) || charAt(5) == ' ' || charAt(5) == ')')) {
      value=false;
      inc(5);
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + substring(pos0,pos0 + 5));
    }
  }
 else {
    while ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| (c == '_')|| (c == '""')) {
      inc();
      if (isFinished())       break;
      c=charAt0();
    }
    paramName=substring(pos0,pos());
  }
  if (fName == null || (value == null && paramName == null) || op == null) {
    throw new JDOUserException(""String_Node_Str"" + pos() + ""String_Node_Str""+ str);
  }
  trim();
  return new QueryTerm(op,paramName,value,clsDef.getField(fName));
}","private QueryTerm parseTerm(){
  trim();
  if (charAt0() == '(') {
    throw new UnsupportedOperationException();
  }
  Object value=null;
  String paramName=null;
  COMP_OP op=null;
  String fName=null;
  Class<?> type=null;
  int pos0=pos();
  char c=charAt0();
  while ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| (c == '_')|| (c == '.')) {
    inc();
    if (c == '.') {
      String dummy=substring(pos0,pos());
      if (dummy.equals(""String_Node_Str"")) {
        pos0=pos();
      }
 else {
        fName=substring(pos0,pos() - 1);
        pos0=pos();
      }
    }
    c=charAt0();
  }
  if (fName == null) {
    fName=substring(pos0,pos());
  }
  if (fName.equals(""String_Node_Str"")) {
    throw new JDOUserException(""String_Node_Str"" + pos0 + ""String_Node_Str"");
  }
  pos0=pos();
  trim();
  try {
    ZooFieldDef f=fields.get(fName);
    if (f == null) {
      throw new JDOFatalInternalException(""String_Node_Str"" + fName);
    }
    type=f.getJavaType();
  }
 catch (  SecurityException e) {
    throw new JDOUserException(""String_Node_Str"" + fName,e);
  }
  c=charAt0();
  char c2=charAt(1);
  char c3=charAt(2);
  if (c == '=' && c2 == '=' && c3 == ' ') {
    op=COMP_OP.EQ;
  }
 else   if (c == '<') {
    if (c2 == '=' && c3 == ' ') {
      op=COMP_OP.LE;
    }
 else     if (c2 == ' ') {
      op=COMP_OP.L;
    }
  }
 else   if (c == '>') {
    if (c2 == '=' && c3 == ' ') {
      op=COMP_OP.AE;
    }
 else     if (c2 == ' ') {
      op=COMP_OP.A;
    }
  }
 else   if (c == '!' && c2 == '=' && c3 == ' ') {
    op=COMP_OP.NE;
  }
  if (op == null) {
    throw new JDOUserException(""String_Node_Str"" + c + c2+ c3+ ""String_Node_Str""+ pos0);
  }
  inc(op._len);
  trim();
  pos0=pos();
  c=charAt0();
  if ((len() >= 4 && substring(pos0,pos0 + 4).equals(""String_Node_Str"")) && (len() == 4 || (len() > 4 && (charAt(4) == ' ' || charAt(4) == ')')))) {
    if (type.isPrimitive()) {
      throw new JDOUserException(""String_Node_Str"" + pos0);
    }
    value=NULL;
    inc(4);
  }
 else   if (c == '""' || c == '\'') {
    boolean singleQuote=c == '\'';
    if (!String.class.isAssignableFrom(type)) {
      throw new JDOUserException(""String_Node_Str"" + type.getName());
    }
    inc();
    pos0=pos();
    c=charAt0();
    while (true) {
      if ((!singleQuote && c == '""') || (singleQuote && c == '\'')) {
        break;
      }
 else       if (c == '\\') {
        inc();
      }
      inc();
      c=charAt0();
    }
    value=substring(pos0,pos());
    inc();
  }
 else   if (c == '-' || (c >= '0' && c <= '9')) {
    pos0=pos();
    boolean isHex=false;
    while (!isFinished()) {
      c=charAt0();
      if (c == ')' || c == ' ') {
        break;
      }
 else       if (c == 'x') {
        isHex=true;
      }
      inc();
    }
    if (type == Double.TYPE || type == Double.class) {
      value=Double.parseDouble(substring(pos0,pos()));
    }
 else     if (type == Float.TYPE || type == Float.class) {
      value=Float.parseFloat(substring(pos0,pos()));
    }
 else     if (type == Long.TYPE || type == Long.class) {
      if (isHex) {
        value=Long.parseLong(substring(pos0,pos()),16);
      }
 else {
        value=Long.parseLong(substring(pos0,pos()));
      }
    }
 else     if (type == Integer.TYPE || type == Integer.class) {
      if (isHex) {
        value=Integer.parseInt(substring(pos0,pos()),16);
      }
 else {
        value=Integer.parseInt(substring(pos0,pos()));
      }
    }
 else     if (type == Short.TYPE || type == Short.class) {
      if (isHex) {
        value=Short.parseShort(substring(pos0,pos()),16);
      }
 else {
        value=Short.parseShort(substring(pos0,pos()));
      }
    }
 else     if (type == Byte.TYPE || type == Byte.class) {
      if (isHex) {
        value=Byte.parseByte(substring(pos0,pos()),16);
      }
 else {
        value=Byte.parseByte(substring(pos0,pos()));
      }
    }
 else     if (type == BigDecimal.class) {
      value=new BigDecimal(substring(pos0,pos()));
    }
 else     if (type == BigInteger.class) {
      value=new BigInteger(substring(pos0,pos()));
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + type.getName());
    }
  }
 else   if (type == Boolean.TYPE || type == Boolean.class) {
    if (substring(pos0,pos0 + 4).toLowerCase().equals(""String_Node_Str"") && (isFinished(4) || charAt(4) == ' ' || charAt(4) == ')')) {
      value=true;
      inc(4);
    }
 else     if (substring(pos0,pos0 + 5).toLowerCase().equals(""String_Node_Str"") && (isFinished(5) || charAt(5) == ' ' || charAt(5) == ')')) {
      value=false;
      inc(5);
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + substring(pos0,pos0 + 5));
    }
  }
 else {
    while ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| (c == '_')|| (c == '""')) {
      inc();
      if (isFinished())       break;
      c=charAt0();
    }
    paramName=substring(pos0,pos());
  }
  if (fName == null || (value == null && paramName == null) || op == null) {
    throw new JDOUserException(""String_Node_Str"" + pos() + ""String_Node_Str""+ str);
  }
  trim();
  return new QueryTerm(op,paramName,value,clsDef.getField(fName));
}",0.9986468200270636
98198,"public Object getValue(){
  if (paramName != null) {
    return _param.getValue();
  }
  return value;
}","public Object getValue(){
  if (paramName != null) {
    return param.getValue();
  }
  return value;
}",0.9951690821256038
98199,"public void setParameter(QueryParameter param){
  _param=param;
}","public void setParameter(QueryParameter param){
  this.param=param;
}",0.9552238805970148
98200,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public boolean evaluate(Object o){
  Field f=fieldDef.getJavaField();
  Object oVal;
  try {
    oVal=f.get(o);
  }
 catch (  IllegalArgumentException e) {
    throw new JDOFatalInternalException(""String_Node_Str"" + fieldDef.getName() + ""String_Node_Str""+ o.getClass().getName()+ ""String_Node_Str""+ f.getDeclaringClass().getName(),e);
  }
catch (  IllegalAccessException e) {
    throw new JDOFatalInternalException(""String_Node_Str"" + fieldDef.getName(),e);
  }
  Object qVal=getValue();
  if (oVal == null && qVal == QueryParser.NULL) {
    return true;
  }
 else   if (qVal != QueryParser.NULL) {
    if (qVal.equals(oVal) && (op == COMP_OP.EQ || op == COMP_OP.LE || op == COMP_OP.AE)) {
      return true;
    }
    if (qVal instanceof Comparable) {
      Comparable qComp=(Comparable)qVal;
      int res=qComp.compareTo(oVal);
      if (res == 1 && (op == COMP_OP.LE || op == COMP_OP.L || op == COMP_OP.NE)) {
        return true;
      }
 else       if (res == -1 && (op == COMP_OP.AE || op == COMP_OP.A || op == COMP_OP.NE)) {
        return true;
      }
    }
  }
  return false;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public boolean evaluate(Object o){
  Field f=fieldDef.getJavaField();
  Object oVal;
  try {
    oVal=f.get(o);
  }
 catch (  IllegalArgumentException e) {
    throw new JDOFatalInternalException(""String_Node_Str"" + fieldDef.getName() + ""String_Node_Str""+ o.getClass().getName()+ ""String_Node_Str""+ f.getDeclaringClass().getName(),e);
  }
catch (  IllegalAccessException e) {
    throw new JDOFatalInternalException(""String_Node_Str"" + fieldDef.getName(),e);
  }
  Object qVal=getValue();
  if (oVal == null && qVal == QueryParser.NULL) {
    return true;
  }
 else   if (qVal != QueryParser.NULL && oVal != null) {
    if (qVal.equals(oVal) && (op == COMP_OP.EQ || op == COMP_OP.LE || op == COMP_OP.AE)) {
      return true;
    }
    if (qVal instanceof Comparable) {
      Comparable qComp=(Comparable)qVal;
      int res=qComp.compareTo(oVal);
      if (res == 1 && (op == COMP_OP.LE || op == COMP_OP.L || op == COMP_OP.NE)) {
        return true;
      }
 else       if (res == -1 && (op == COMP_OP.AE || op == COMP_OP.A || op == COMP_OP.NE)) {
        return true;
      }
    }
  }
  return false;
}",0.967965367965368
98201,"public QueryParameter getParameter(){
  return _param;
}","public QueryParameter getParameter(){
  return param;
}",0.990990990990991
98202,"@Override public void writeObjects(ZooClassDef clsDef,ArrayList<PersistenceCapableImpl> cachedObjects){
  if (cachedObjects.isEmpty()) {
    return;
  }
  SchemaIndexEntry schema=schemaIndex.getSchema(clsDef.getOid());
  if (schema == null) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + clsDef.getClassName());
  }
  PagedPosIndex posIndex=schema.getObjectIndex();
  objectWriter.newPage(posIndex,schema.getOID());
  DataSerializer dSer=new DataSerializer(objectWriter,cache,node);
  for (  PersistenceCapableImpl obj : cachedObjects) {
    long oid=obj.jdoZooGetOid();
    try {
      objectWriter.startObject(oid);
      dSer.writeObject(obj,clsDef,oid);
      objectWriter.finishObject();
    }
 catch (    Exception e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + Util.oidToString(oid),e);
    }
  }
  int iInd=-1;
  for (  ZooFieldDef field : clsDef.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=schemaIndex.getSchema(field.getDeclaringType().getOid());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      if (field.isString()) {
        for (        PersistenceCapableImpl co : cachedObjects) {
          if (!co.jdoZooIsNew()) {
            long l=co.jdoZooGetBackup()[iInd];
            fieldInd.removeLong(l,co.jdoZooGetOid());
          }
          String str=(String)jField.get(co);
          if (str != null) {
            long l=BitTools.toSortableLong(str);
            fieldInd.insertLong(l,co.jdoZooGetOid());
          }
 else {
            fieldInd.insertLong(DataDeSerializerNoClass.NULL,co.jdoZooGetOid());
          }
        }
      }
 else {
switch (field.getPrimitiveType()) {
case BOOLEAN:
          for (          PersistenceCapableImpl co : cachedObjects) {
            if (!co.jdoZooIsNew()) {
              long l=co.jdoZooGetBackup()[iInd];
              fieldInd.removeLong(l,co.jdoZooGetOid());
            }
            fieldInd.insertLong(jField.getBoolean(co) ? 1 : 0,co.jdoZooGetOid());
          }
        break;
case BYTE:
      for (      PersistenceCapableImpl co : cachedObjects) {
        if (!co.jdoZooIsNew()) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.jdoZooGetOid());
        }
        fieldInd.insertLong(jField.getByte(co),co.jdoZooGetOid());
      }
    break;
case DOUBLE:
  System.out.println(""String_Node_Str"");
break;
case FLOAT:
System.out.println(""String_Node_Str"");
break;
case INT:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getInt(co),co.jdoZooGetOid());
}
break;
case LONG:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getLong(co),co.jdoZooGetOid());
}
break;
case SHORT:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getShort(co),co.jdoZooGetOid());
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}
}","@Override public void writeObjects(ZooClassDef clsDef,ArrayList<PersistenceCapableImpl> cachedObjects){
  if (cachedObjects.isEmpty()) {
    return;
  }
  SchemaIndexEntry schema=schemaIndex.getSchema(clsDef.getOid());
  if (schema == null) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + clsDef.getClassName());
  }
  PagedPosIndex posIndex=schema.getObjectIndex();
  objectWriter.newPage(posIndex,schema.getOID());
  DataSerializer dSer=new DataSerializer(objectWriter,cache,node);
  for (  PersistenceCapableImpl obj : cachedObjects) {
    long oid=obj.jdoZooGetOid();
    try {
      objectWriter.startObject(oid);
      dSer.writeObject(obj,clsDef,oid);
      objectWriter.finishObject();
    }
 catch (    Exception e) {
      throw new JDOFatalDataStoreException(""String_Node_Str"" + Util.oidToString(oid),e);
    }
  }
  int iInd=-1;
  for (  ZooFieldDef field : clsDef.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    iInd++;
    SchemaIndexEntry schemaTop=schemaIndex.getSchema(field.getDeclaringType().getOid());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      if (field.isString()) {
        for (        PersistenceCapableImpl co : cachedObjects) {
          if (!co.jdoZooIsNew()) {
            long l=co.jdoZooGetBackup()[iInd];
            fieldInd.removeLong(l,co.jdoZooGetOid());
          }
          String str=(String)jField.get(co);
          if (str != null) {
            long l=BitTools.toSortableLong(str);
            fieldInd.insertLong(l,co.jdoZooGetOid());
          }
 else {
            fieldInd.insertLong(DataDeSerializerNoClass.NULL,co.jdoZooGetOid());
          }
        }
      }
 else {
switch (field.getPrimitiveType()) {
case BOOLEAN:
          for (          PersistenceCapableImpl co : cachedObjects) {
            if (!co.jdoZooIsNew()) {
              long l=co.jdoZooGetBackup()[iInd];
              fieldInd.removeLong(l,co.jdoZooGetOid());
            }
            fieldInd.insertLong(jField.getBoolean(co) ? 1 : 0,co.jdoZooGetOid());
          }
        break;
case BYTE:
      for (      PersistenceCapableImpl co : cachedObjects) {
        if (!co.jdoZooIsNew()) {
          long l=co.jdoZooGetBackup()[iInd];
          fieldInd.removeLong(l,co.jdoZooGetOid());
        }
        fieldInd.insertLong(jField.getByte(co),co.jdoZooGetOid());
      }
    break;
case CHAR:
  for (  PersistenceCapableImpl co : cachedObjects) {
    if (!co.jdoZooIsNew()) {
      long l=co.jdoZooGetBackup()[iInd];
      fieldInd.removeLong(l,co.jdoZooGetOid());
    }
    fieldInd.insertLong(jField.getChar(co),co.jdoZooGetOid());
  }
break;
case DOUBLE:
System.out.println(""String_Node_Str"");
break;
case FLOAT:
System.out.println(""String_Node_Str"");
break;
case INT:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getInt(co),co.jdoZooGetOid());
}
break;
case LONG:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getLong(co),co.jdoZooGetOid());
}
break;
case SHORT:
for (PersistenceCapableImpl co : cachedObjects) {
if (!co.jdoZooIsNew()) {
long l=co.jdoZooGetBackup()[iInd];
fieldInd.removeLong(l,co.jdoZooGetOid());
}
fieldInd.insertLong(jField.getShort(co),co.jdoZooGetOid());
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}
}",0.9652823267391588
98203,"@Override public void deleteObjects(long schemaOid,ArrayList<PersistenceCapableImpl> objects){
  PagedPosIndex oi=schemaIndex.getSchema(schemaOid).getObjectIndex();
  for (  PersistenceCapableImpl co : objects) {
    long oid=co.jdoZooGetOid();
    long pos=oidIndex.removeOidNoFail(oid,-1);
    if (pos == -1) {
      throw new JDOObjectNotFoundException(""String_Node_Str"" + Util.oidToString(oid));
    }
    do {
      long nextPos=oi.removePosLongAndCheck(pos,freeIndex);
      nextPos=nextPos | PagedPosIndex.MARK_SECONDARY;
      pos=nextPos;
    }
 while (pos != PagedPosIndex.MARK_SECONDARY);
  }
  ZooClassDef clsDef=schemaIndex.getSchema(schemaOid).getClassDef();
  for (  ZooFieldDef field : clsDef.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    SchemaIndexEntry schemaTop=schemaIndex.getSchema(field.getDeclaringType().getOid());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      if (field.isString()) {
        for (        PersistenceCapableImpl co : objects) {
          long l=BitTools.toSortableLong((String)jField.get(co));
          fieldInd.removeLong(l,co.jdoZooGetOid());
        }
      }
 else {
switch (field.getPrimitiveType()) {
case BOOLEAN:
          for (          PersistenceCapableImpl co : objects) {
            fieldInd.removeLong(jField.getBoolean(co) ? 1 : 0,co.jdoZooGetOid());
          }
        break;
case BYTE:
      for (      PersistenceCapableImpl co : objects) {
        fieldInd.removeLong(jField.getByte(co),co.jdoZooGetOid());
      }
    break;
case DOUBLE:
  System.out.println(""String_Node_Str"");
break;
case FLOAT:
System.out.println(""String_Node_Str"");
break;
case INT:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getInt(co),co.jdoZooGetOid());
}
break;
case LONG:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getLong(co),co.jdoZooGetOid());
}
break;
case SHORT:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getShort(co),co.jdoZooGetOid());
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}
}","@Override public void deleteObjects(long schemaOid,ArrayList<PersistenceCapableImpl> objects){
  PagedPosIndex oi=schemaIndex.getSchema(schemaOid).getObjectIndex();
  for (  PersistenceCapableImpl co : objects) {
    long oid=co.jdoZooGetOid();
    long pos=oidIndex.removeOidNoFail(oid,-1);
    if (pos == -1) {
      throw new JDOObjectNotFoundException(""String_Node_Str"" + Util.oidToString(oid));
    }
    do {
      long nextPos=oi.removePosLongAndCheck(pos,freeIndex);
      nextPos=nextPos | PagedPosIndex.MARK_SECONDARY;
      pos=nextPos;
    }
 while (pos != PagedPosIndex.MARK_SECONDARY);
  }
  ZooClassDef clsDef=schemaIndex.getSchema(schemaOid).getClassDef();
  for (  ZooFieldDef field : clsDef.getAllFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    SchemaIndexEntry schemaTop=schemaIndex.getSchema(field.getDeclaringType().getOid());
    LongLongIndex fieldInd=(LongLongIndex)schemaTop.getIndex(field);
    try {
      Field jField=field.getJavaField();
      if (field.isString()) {
        for (        PersistenceCapableImpl co : objects) {
          String str=(String)jField.get(co);
          long l=(str != null ? BitTools.toSortableLong(str) : DataDeSerializerNoClass.NULL);
          fieldInd.removeLong(l,co.jdoZooGetOid());
        }
      }
 else {
switch (field.getPrimitiveType()) {
case BOOLEAN:
          for (          PersistenceCapableImpl co : objects) {
            fieldInd.removeLong(jField.getBoolean(co) ? 1 : 0,co.jdoZooGetOid());
          }
        break;
case BYTE:
      for (      PersistenceCapableImpl co : objects) {
        fieldInd.removeLong(jField.getByte(co),co.jdoZooGetOid());
      }
    break;
case CHAR:
  for (  PersistenceCapableImpl co : objects) {
    fieldInd.removeLong(jField.getChar(co),co.jdoZooGetOid());
  }
break;
case DOUBLE:
System.out.println(""String_Node_Str"");
break;
case FLOAT:
System.out.println(""String_Node_Str"");
break;
case INT:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getInt(co),co.jdoZooGetOid());
}
break;
case LONG:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getLong(co),co.jdoZooGetOid());
}
break;
case SHORT:
for (PersistenceCapableImpl co : objects) {
fieldInd.removeLong(jField.getShort(co),co.jdoZooGetOid());
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}
}",0.9490300494484596
98204,"/** 
 * Constructor for creating new Index.
 * @param id
 * @param cName
 * @param schPage
 * @param schPageOfs
 * @param raf
 * @throws IOException 
 */
private SchemaIndexEntry(String cName,PageAccessFile raf,long oid){
  this.oid=oid;
  this.cName=cName;
  this.objIndex=PagedPosIndex.newIndex(raf);
}","/** 
 * Constructor for creating new Index.
 * @param id
 * @param cName
 * @param schPage
 * @param schPageOfs
 * @param raf
 * @param def 
 * @throws IOException 
 */
private SchemaIndexEntry(String cName,PageAccessFile raf,long oid,ZooClassDef def){
  this.oid=oid;
  this.cName=cName;
  this.objIndex=PagedPosIndex.newIndex(raf);
  this.classDef=def;
}",0.9212121212121211
98205,"public void defineSchema(ZooClassDef def){
  String clsName=def.getClassName();
  SchemaIndexEntry theSchema=getSchema(def.getOid());
  if (theSchema != null) {
    throw new JDOUserException(""String_Node_Str"" + clsName);
  }
  addSchemaIndexEntry(clsName,def.getOid());
}","public void defineSchema(ZooClassDef def){
  String clsName=def.getClassName();
  long oid=def.getOid();
  if (getSchema(clsName) != null || getSchema(def.getOid()) != null) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + clsName + ""String_Node_Str""+ Util.oidToString(oid));
  }
  SchemaIndexEntry entry=new SchemaIndexEntry(clsName,raf,oid,def);
  schemaIndex.put(oid,entry);
  markDirty();
}",0.5882352941176471
98206,"/** 
 * The generated method asks the current StateManager to approve the change or validates the caller�s authority to set the state.
 */
@Override public final synchronized void jdoReplaceStateManager(javax.jdo.spi.StateManager sm){
  if (jdoStateManager != null) {
    jdoStateManager=jdoStateManager.replacingStateManager(this,sm);
  }
 else {
    JDOImplHelper.checkAuthorizedStateManager(sm);
    jdoStateManager=sm;
    this.jdoFlags=LOAD_REQUIRED;
  }
}","/** 
 * The generated method asks the current StateManager to approve the change or validates the caller�s authority to set the state.
 */
@Override public final void jdoReplaceStateManager(javax.jdo.spi.StateManager sm){
  if (jdoStateManager != null) {
    jdoStateManager=jdoStateManager.replacingStateManager(this,sm);
  }
 else {
    JDOImplHelper.checkAuthorizedStateManager(sm);
    jdoStateManager=sm;
    this.jdoFlags=LOAD_REQUIRED;
  }
}",0.9856985698569856
98207,"/** 
 * This method will fail if called on the first page in the tree. However this should not happen, because when called, we already have a reference to a previous page.
 * @param oidIndexPage
 * @return The position of the given page with 0 <= pos < nEntries.
 */
int getPagePosition(AbstractIndexPage indexPage){
  for (int i=0; i < leaves.length; i++) {
    if (leaves[i] == indexPage) {
      return i;
    }
  }
  throw new JDOFatalDataStoreException(""String_Node_Str"" + indexPage.pageId + ""String_Node_Str""+ Arrays.toString(leafPages));
}","/** 
 * This method will fail if called on the first page in the tree. However this should not happen, because when called, we already have a reference to a previous page.
 * @param oidIndexPage
 * @return The position of the given page in the child-array with 0 <= pos <= nEntries.
 */
int getPagePosition(AbstractIndexPage indexPage){
  for (int i=0; i < leaves.length; i++) {
    if (leaves[i] == indexPage) {
      return i;
    }
  }
  throw new JDOFatalDataStoreException(""String_Node_Str"" + indexPage.pageId + ""String_Node_Str""+ Arrays.toString(leafPages));
}",0.9820143884892086
98208,"final AbstractIndexPage readPage(int pageId,AbstractIndexPage parentPage){
  if (pageId == 0) {
    throw new IllegalArgumentException();
  }
  paf.seekPageForRead(pageId,false);
  int nL=paf.readShort();
  AbstractIndexPage newPage;
  if (nL == 0) {
    newPage=createPage(parentPage,true);
    newPage.readData();
  }
 else {
    newPage=createPage(parentPage,false);
    paf.noCheckRead(newPage.leafPages);
    newPage.readKeys();
  }
  newPage.pageId=pageId;
  return newPage;
}","final AbstractIndexPage readPage(int pageId,AbstractIndexPage parentPage){
  if (pageId == 0) {
    throw new IllegalArgumentException();
  }
  paf.seekPageForRead(pageId,false);
  int nL=paf.readShort();
  AbstractIndexPage newPage;
  if (nL == 0) {
    newPage=createPage(parentPage,true);
    newPage.readData();
  }
 else {
    newPage=createPage(parentPage,false);
    paf.noCheckRead(newPage.leafPages);
    newPage.readKeys();
  }
  newPage.pageId=pageId;
  newPage.isDirty=false;
  return newPage;
}",0.974721941354904
98209,"protected void assignThisAsRootToLeaves(){
  for (  AbstractIndexPage leaf : leaves) {
    if (leaf != null) {
      leaf.setParent(this);
    }
  }
}","protected void assignThisAsRootToLeaves(){
  for (int i=0; i <= getNEntries(); i++) {
    if (leaves[i] != null) {
      leaves[i].setParent(this);
    }
  }
}",0.7831715210355987
98210,"protected final AbstractIndexPage findPage(AbstractIndexPage currentPage,short pagePos){
  return currentPage.readOrCreatePage(pagePos,pageClones);
}","protected final AbstractIndexPage findPage(AbstractIndexPage currentPage,short pagePos){
  return currentPage.readPage(pagePos,pageClones);
}",0.9724137931034482
98211,"protected final void markPageDirtyAndClone(){
  if (getNEntries() > 0 || !isLeaf) {
    AbstractIndexPage clone=null;
    for (    AbstractPageIterator<?> indexIter : ind.iterators.keySet()) {
      clone=indexIter.pageUpdateNotify(this,clone,ind.modcount);
    }
  }
  markPageDirty();
}","protected final void markPageDirtyAndClone(){
  if (getNEntries() >= 0 || !isLeaf) {
    AbstractIndexPage clone=null;
    for (    AbstractPageIterator<?> indexIter : ind.iterators.keySet()) {
      clone=indexIter.pageUpdateNotify(this,clone,ind.modcount);
    }
  }
  markPageDirty();
}",0.9982668977469672
98212,"protected final AbstractIndexPage readOrCreatePage(short pos,Map<AbstractIndexPage,AbstractIndexPage> transientClones){
  int pageId=leafPages[pos];
  AbstractIndexPage page=leaves[pos];
  if (page != null) {
    if (transientClones.containsKey(page)) {
      return transientClones.get(page);
    }
    return page;
  }
  if (pageId == 0) {
    page=ind.createPage(this,true);
  }
 else {
    page=ind.readPage(pageId,this);
  }
  leaves[pos]=page;
  return page;
}","protected final AbstractIndexPage readOrCreatePage(int pos,boolean allowCreate){
  AbstractIndexPage page=leaves[pos];
  if (page != null) {
    return page;
  }
  int pageId=leafPages[pos];
  if (pageId == 0) {
    if (!allowCreate) {
      return null;
    }
    page=ind.createPage(this,true);
    markPageDirtyAndClone();
    if (getNEntries() != -1) {
      throw new RuntimeException(""String_Node_Str"" + getNEntries());
    }
    incrementNEntries();
  }
 else {
    page=ind.readPage(pageId,this);
  }
  leaves[pos]=page;
  return page;
}",0.1998021760633036
98213,"private boolean checkObject(LLEntry entry,PersistenceCapableImpl pc){
  try {
    long val=entry.getKey();
    Field jField=field.getJavaField();
    if (field.isString()) {
      return val == BitTools.toSortableLong((String)jField.get(pc));
    }
switch (field.getPrimitiveType()) {
case BOOLEAN:
      return val == (jField.getBoolean(pc) ? 1 : 0);
case BYTE:
    return val == jField.getByte(pc);
case DOUBLE:
  System.out.println(""String_Node_Str"");
case FLOAT:
System.out.println(""String_Node_Str"");
case INT:
return val == jField.getInt(pc);
case LONG:
return val == jField.getLong(pc);
case SHORT:
return val == jField.getShort(pc);
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}","private boolean checkObject(LLEntry entry,PersistenceCapableImpl pc){
  try {
    long val=entry.getKey();
    Field jField=field.getJavaField();
    if (field.isString()) {
      return val == BitTools.toSortableLong((String)jField.get(pc));
    }
switch (field.getPrimitiveType()) {
case BOOLEAN:
      return val == (jField.getBoolean(pc) ? 1 : 0);
case BYTE:
    return val == jField.getByte(pc);
case DOUBLE:
  System.out.println(""String_Node_Str"");
return false;
case FLOAT:
System.out.println(""String_Node_Str"");
return false;
case INT:
return val == jField.getInt(pc);
case LONG:
return val == jField.getLong(pc);
case SHORT:
return val == jField.getShort(pc);
default :
throw new IllegalArgumentException(""String_Node_Str"" + field.getPrimitiveType());
}
}
 catch (SecurityException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalArgumentException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
catch (IllegalAccessException e) {
throw new JDOFatalDataStoreException(""String_Node_Str"" + field.getName(),e);
}
}",0.9871794871794872
98214,"private void findNext(){
  LLEntry e;
  PersistenceCapableImpl pc;
  while (iter.hasNextULL()) {
    e=iter.nextULL();
    pc=file.readObject(deSer,e.getValue());
    if (pc != null && checkObject(e,pc)) {
      this.pc=pc;
      return;
    }
    DatabaseLogger.debugPrintln(1,""String_Node_Str"" + Util.oidToString(e.getValue()));
    try {
      index.removeLong(e.getKey(),e.getValue());
    }
 catch (    NoSuchElementException e2) {
      System.err.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
    }
  }
  this.pc=null;
}","private void findNext(){
  LLEntry e;
  PersistenceCapableImpl pc;
  while (iter.hasNextULL()) {
    e=iter.nextULL();
    pc=file.readObject(deSer,e.getValue());
    if (pc != null && checkObject(e,pc)) {
      this.pc=pc;
      return;
    }
    DatabaseLogger.debugPrintln(1,""String_Node_Str"" + Util.oidToString(e.getValue()));
    try {
      index.removeLong(e.getKey(),e.getValue());
    }
 catch (    NoSuchElementException e2) {
      System.err.println(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ Util.oidToString(e.getValue()));
    }
  }
  this.pc=null;
}",0.984070796460177
98215,"private PageAccessFile createPageAccessFile(){
  FreeSpaceManager fsm=new FreeSpaceManager();
  PageAccessFile paf=new PageAccessFileInMemory(Config.getFilePageSize(),fsm);
  fsm.initBackingIndexNew(paf);
  return paf;
}","private PageAccessFile createPageAccessFile(){
  FreeSpaceManager fsm=new FreeSpaceManager();
  PageAccessFile paf=new PageAccessFileInMemory(Config.getFilePageSize(),fsm);
  fsm.initBackingIndexNew(paf);
  fsm.getNextPage(0);
  return paf;
}",0.9523809523809524
98216,"private PageAccessFile createPageAccessFile(){
  FreeSpaceManager fsm=new FreeSpaceManager();
  PageAccessFile paf=new PageAccessFileInMemory(Config.getFilePageSize(),fsm);
  fsm.initBackingIndexNew(paf);
  return paf;
}","private PageAccessFile createPageAccessFile(){
  FreeSpaceManager fsm=new FreeSpaceManager();
  PageAccessFile paf=new PageAccessFileInMemory(Config.getFilePageSize(),fsm);
  fsm.initBackingIndexNew(paf);
  fsm.getNextPage(0);
  return paf;
}",0.9523809523809524
98217,"@Test public void testAddStrongCheck(){
  final int MAX=5000;
  PageAccessFile paf=createPageAccessFile();
  PagedOidIndex ind=new PagedOidIndex(paf);
  for (int i=1000; i < 1000 + MAX; i++) {
    ind.insertLong(i,32,32 + i);
    for (int j=1000; j <= i; j++) {
      FilePos fp2=ind.findOid(j);
      if (fp2 == null) {
        ind.print();
        throw new RuntimeException();
      }
    }
  }
  System.out.println(""String_Node_Str"" + ind.statsGetInnerN() + ""String_Node_Str""+ ind.statsGetLeavesN());
  assertNull(ind.findOid(-1));
  assertNull(ind.findOid(0));
  assertNull(ind.findOid(999));
  assertNull(ind.findOid(1000 + MAX));
}","@Test public void testAddStrongCheck(){
  final int MAX=5000;
  PageAccessFile paf=createPageAccessFile();
  PagedOidIndex ind=new PagedOidIndex(paf);
  for (int i=1000; i < 1000 + MAX; i++) {
    ind.insertLong(i,32,32 + i);
    for (int j=1000; j <= i; j++) {
      FilePos fp2=ind.findOid(j);
      if (fp2 == null) {
        ind.print();
        throw new RuntimeException(""String_Node_Str"" + j + ""String_Node_Str""+ i);
      }
    }
  }
  System.out.println(""String_Node_Str"" + ind.statsGetInnerN() + ""String_Node_Str""+ ind.statsGetLeavesN());
  assertNull(ind.findOid(-1));
  assertNull(ind.findOid(0));
  assertNull(ind.findOid(999));
  assertNull(ind.findOid(1000 + MAX));
}",0.9666666666666668
98218,"@AfterClass public static void tearDown(){
  TestTools.removeDb(DB_NAME);
  Config.setFilePageSize(Config.FILE_PAGE_SIZE_DEFAULT);
}","@AfterClass public static void tearDown(){
  Config.setFilePageSize(Config.FILE_PAGE_SIZE_DEFAULT);
}",0.8669527896995708
98219,"@BeforeClass public static void setUp(){
  Config.setFilePageSize(128);
  TestTools.createDb(DB_NAME);
  TestTools.defineSchema(DB_NAME,TestClass.class);
}","@BeforeClass public static void setUp(){
  Config.setFilePageSize(PAGE_SIZE);
}",0.6153846153846154
98220,"@Test public void testSpaceUsage(){
  final int MAX=1000000;
  PageAccessFile paf=createPageAccessFile();
  PagedOidIndex ind=new PagedOidIndex(paf);
  for (int i=1000; i < 1000 + MAX; i++) {
    ind.insertLong(i,32,32 + i);
  }
  System.out.println(""String_Node_Str"" + ind.statsGetInnerN() + ""String_Node_Str""+ ind.statsGetLeavesN());
  double epp=MAX / ind.statsGetLeavesN();
  System.out.println(""String_Node_Str"" + epp);
  double lpi=(ind.statsGetLeavesN() + ind.statsGetInnerN()) / ind.statsGetInnerN();
  System.out.println(""String_Node_Str"" + lpi);
}","@Test public void testSpaceUsage(){
  final int MAX=1000000;
  PageAccessFile paf=createPageAccessFile();
  PagedOidIndex ind=new PagedOidIndex(paf);
  for (int i=1000; i < 1000 + MAX; i++) {
    ind.insertLong(i,32,32 + i);
  }
  System.out.println(""String_Node_Str"" + ind.statsGetInnerN() + ""String_Node_Str""+ ind.statsGetLeavesN());
  double epp=MAX / ind.statsGetLeavesN();
  System.out.println(""String_Node_Str"" + epp);
  assertTrue(epp >= PAGE_SIZE / 32);
  double lpi=(ind.statsGetLeavesN() + ind.statsGetInnerN()) / ind.statsGetInnerN();
  System.out.println(""String_Node_Str"" + lpi);
  assertTrue(lpi >= PAGE_SIZE / 32);
}",0.9377104377104376
98221,"public void setDefaults(){
  fileDefault=FILE_PAF_BB;
  fileManagerDefault=FILE_MGR_ONE_FILE;
  defaultPageSize=FILE_PAGE_SIZE_DEFAULT;
}","public static void setDefaults(){
  fileDefault=FILE_PAF_BB;
  fileManagerDefault=FILE_MGR_ONE_FILE;
  defaultPageSize=FILE_PAGE_SIZE_DEFAULT;
}",0.9750889679715302
98222,"public boolean contains(Object o){
  if (!(o instanceof Map.Entry)) {
    return false;
  }
  Map.Entry<Long,V> e=(Map.Entry<Long,V>)o;
  Entry<V> candidate=getEntry(e.getKey());
  return candidate != null && candidate.equals(e);
}","public boolean contains(Object o){
  if (!(o instanceof Entry)) {
    return false;
  }
  Entry<V> e=(Entry<V>)o;
  Entry<V> candidate=getEntry(e.getKey());
  return candidate != null && candidate.equals(e);
}",0.8318181818181818
98223,"/** 
 * Returns a shallow copy of this <tt>TreeMap</tt> instance. (The keys and values themselves are not cloned.)
 * @return a shallow copy of this map
 */
public Object clone(){
  PrimLongTreeMap<V> clone=null;
  try {
    clone=(PrimLongTreeMap<V>)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone.root=null;
  clone.size=0;
  clone.modCount=0;
  clone.entrySet=null;
  clone.navigableKeySet=null;
  try {
    clone.buildFromSorted(size,entrySet().iterator(),null,null);
  }
 catch (  java.io.IOException cannotHappen) {
  }
catch (  ClassNotFoundException cannotHappen) {
  }
  return clone;
}","/** 
 * Returns a shallow copy of this <tt>TreeMap</tt> instance. (The keys and values themselves are not cloned.)
 * @return a shallow copy of this map
 */
public Object clone(){
  PrimLongTreeMap<V> clone=null;
  try {
    clone=(PrimLongTreeMap<V>)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new InternalError();
  }
  clone.root=null;
  clone.size=0;
  clone.modCount=0;
  clone.entrySet=null;
  clone.navigableKeySet=null;
  try {
    clone.buildFromSorted(size,entrySet().iterator(),null,null);
  }
 catch (  IOException cannotHappen) {
    throw new RuntimeException(cannotHappen);
  }
catch (  ClassNotFoundException cannotHappen) {
    throw new RuntimeException(cannotHappen);
  }
  return clone;
}",0.9278499278499278
98224,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext;
  if (qa.getIndex() != null) {
    ext=_pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax());
  }
 else {
    if (_ext != null) {
      ext=_ext.iterator();
    }
 else {
      ext=new ExtentImpl(_candCls,_subClasses,_pm).iterator();
    }
  }
  if (_ext != null && (!_ext.hasSubclasses() || !_ext.getCandidateClass().isAssignableFrom(_candCls))) {
    final boolean hasSub=_ext.hasSubclasses();
    final Class supCls=_ext.getCandidateClass();
    while (ext.hasNext()) {
      Object o=ext.next();
      if (hasSub) {
        if (!supCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (supCls == o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext.hasNext()) {
      Object o=ext.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext instanceof CloseableIterator) {
    ((CloseableIterator)ext).close();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void applyQueryOnExtent(List<Object> ret,QueryAdvice qa){
  QueryTreeNode queryTree=qa.getQuery();
  Iterator<?> ext;
  if (qa.getIndex() != null) {
    ext=_pm.getSession().getPrimaryNode().readObjectFromIndex(qa.getIndex(),qa.getMin(),qa.getMax());
  }
 else {
    if (_ext != null) {
      ext=_ext.iterator();
    }
 else {
      ext=new ExtentImpl(_candCls,_subClasses,_pm).iterator();
    }
  }
  if (_ext != null && (!_ext.hasSubclasses() || !_ext.getCandidateClass().isAssignableFrom(_candCls))) {
    final boolean hasSub=_ext.hasSubclasses();
    final Class supCls=_ext.getCandidateClass();
    while (ext.hasNext()) {
      Object o=ext.next();
      if (hasSub) {
        if (!supCls.isAssignableFrom(o.getClass())) {
          continue;
        }
      }
 else {
        if (supCls != o.getClass()) {
          continue;
        }
      }
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
 else {
    while (ext.hasNext()) {
      Object o=ext.next();
      boolean isMatch=queryTree.evaluate(o);
      if (isMatch) {
        ret.add(o);
      }
    }
  }
  if (ext instanceof CloseableIterator) {
    ((CloseableIterator)ext).close();
  }
}",0.999215070643642
98225,"/** 
 * @param data For example: ""avg(salary), sum(salary)"".  min, max, avg, sum, count
 * @param candCls
 */
QueryResultProcessor(String data,Class<?> candCls){
  while (data.length() > 0) {
    Item item;
    if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new AVG();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new MIN();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new SUM();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new COUNT();
      data=data.substring(5);
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    data.trim();
    if (data.charAt(0) != '(') {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    data=data.substring(1);
    int i=data.indexOf(')');
    if (i < 0) {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    String fieldName=data.substring(0,i).trim();
    data=data.substring(i).trim();
    data=data.substring(1).trim();
    items.add(item);
    item.setField(getField(candCls,fieldName));
    if (data.charAt(0) == ',') {
      data=data.substring(1).trim();
    }
  }
}","/** 
 * @param data For example: ""avg(salary), sum(salary)"".  min, max, avg, sum, count
 * @param candCls
 */
QueryResultProcessor(String data,Class<?> candCls){
  while (data.length() > 0) {
    Item item;
    if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new AVG();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new MIN();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new SUM();
      data=data.substring(3);
    }
 else     if (data.startsWith(""String_Node_Str"") || data.startsWith(""String_Node_Str"")) {
      item=new COUNT();
      data=data.substring(5);
    }
 else {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    data=data.trim();
    if (data.charAt(0) != '(') {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    data=data.substring(1);
    int i=data.indexOf(')');
    if (i < 0) {
      throw new JDOUserException(""String_Node_Str"" + data);
    }
    String fieldName=data.substring(0,i).trim();
    data=data.substring(i).trim();
    data=data.substring(1).trim();
    items.add(item);
    item.setField(getField(candCls,fieldName));
    if (data.charAt(0) == ',') {
      data=data.substring(1).trim();
    }
  }
}",0.9982098102398854
98226,"private final void serializeDBHashtable(DBHashtable<?,?> l){
  _out.writeInt(l.size());
  for (  Object k : l.keySet()) {
    serializeObject(k);
    serializeObject(l.get(k));
  }
}","private final void serializeDBHashtable(DBHashtable<?,?> l){
  _out.writeInt(l.size());
  for (  Map.Entry<?,?> e : l.entrySet()) {
    serializeObject(e.getKey());
    serializeObject(e.getValue());
  }
}",0.8682170542635659
98227,"private final void serializeDBHashtable(DBHashtable<?,?> l){
  _out.writeInt(l.size());
  for (  Object k : l.keySet()) {
    serializeObject(k);
    serializeObject(l.get(k));
  }
}","private final void serializeDBHashtable(DBHashtable<?,?> l){
  _out.writeInt(l.size());
  for (  Map.Entry<?,?> e : l.entrySet()) {
    serializeObject(e.getKey());
    serializeObject(e.getValue());
  }
}",0.8682170542635659
98228,"/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree){
  Map<ZooFieldDef,Long> minMap=new IdentityHashMap<ZooFieldDef,Long>();
  Map<ZooFieldDef,Long> maxMap=new IdentityHashMap<ZooFieldDef,Long>();
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    ZooFieldDef f=term.getFieldDef();
    if (!f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Long value;
    if (term.getValue() instanceof Number) {
      value=((Number)term.getValue()).longValue();
    }
 else     if (term.getValue() instanceof String) {
      value=BitTools.toSortableLong((String)term.getValue());
    }
 else     if (term.getValue() instanceof Boolean) {
      continue;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + term.getValue().getClass());
    }
switch (term.getOp()) {
case EQ:
{
        minMap.put(f,value);
        maxMap.put(f,value);
        break;
      }
case L:
    if (value < maxMap.get(f)) {
      maxMap.put(f,value - 1);
    }
  break;
case LE:
if (value < maxMap.get(f)) {
  maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
if (minMap.isEmpty()) {
return new QueryAdvice(queryTree);
}
ZooFieldDef def=minMap.keySet().iterator().next();
QueryAdvice qa=new QueryAdvice(queryTree);
qa.setIndex(def);
qa.setMin(minMap.get(def));
qa.setMax(maxMap.get(def));
if (minMap.size() == 1) {
qa.setIndex(minMap.keySet().iterator().next());
return qa;
}
for (ZooFieldDef d2 : minMap.keySet()) {
long min2=minMap.get(d2);
long max2=maxMap.get(d2);
if ((max2 - min2) < (qa.getMax() - qa.getMin())) {
qa.setIndex(d2);
qa.setMin(min2);
qa.setMax(max2);
}
}
if (qa.getIndex().isString()) {
qa.setMin(BitTools.getMinPosInPage(qa.getMin()));
qa.setMax(BitTools.getMaxPosInPage(qa.getMax()));
}
return qa;
}","/** 
 * @param queryTree This is a sub-query that does not contain OR operands.
 * @return QueryAdvise
 */
private QueryAdvice determineIndexToUseSub(QueryTreeNode queryTree){
  Map<ZooFieldDef,Long> minMap=new IdentityHashMap<ZooFieldDef,Long>();
  Map<ZooFieldDef,Long> maxMap=new IdentityHashMap<ZooFieldDef,Long>();
  QueryTreeIterator iter=queryTree.termIterator();
  while (iter.hasNext()) {
    QueryTerm term=iter.next();
    ZooFieldDef f=term.getFieldDef();
    if (!f.isIndexed()) {
      continue;
    }
    Long minVal=minMap.get(f);
    if (minVal == null) {
      minMap.put(f,f.getMinValue());
      maxMap.put(f,f.getMaxValue());
    }
    Long value;
    if (term.getValue() instanceof Number) {
      value=((Number)term.getValue()).longValue();
    }
 else     if (term.getValue() instanceof String) {
      value=BitTools.toSortableLong((String)term.getValue());
    }
 else     if (term.getValue() instanceof Boolean) {
      continue;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + term.getValue().getClass());
    }
switch (term.getOp()) {
case EQ:
{
        minMap.put(f,value);
        maxMap.put(f,value);
        break;
      }
case L:
    if (value < maxMap.get(f)) {
      maxMap.put(f,value - 1);
    }
  break;
case LE:
if (value < maxMap.get(f)) {
  maxMap.put(f,value);
}
break;
case A:
if (value > minMap.get(f)) {
minMap.put(f,value + 1);
}
break;
case AE:
if (value > minMap.get(f)) {
minMap.put(f,value);
}
break;
case NE:
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + term.getOp());
}
}
if (minMap.isEmpty()) {
return new QueryAdvice(queryTree);
}
ZooFieldDef def=minMap.keySet().iterator().next();
QueryAdvice qa=new QueryAdvice(queryTree);
qa.setIndex(def);
qa.setMin(minMap.get(def));
qa.setMax(maxMap.get(def));
if (minMap.size() == 1) {
qa.setIndex(minMap.keySet().iterator().next());
return qa;
}
for (Map.Entry<ZooFieldDef,Long> me2 : minMap.entrySet()) {
long min2=me2.getValue();
long max2=maxMap.get(me2.getKey());
if ((max2 - min2) < (qa.getMax() - qa.getMin())) {
qa.setIndex(me2.getKey());
qa.setMin(min2);
qa.setMax(max2);
}
}
if (qa.getIndex().isString()) {
qa.setMin(BitTools.getMinPosInPage(qa.getMin()));
qa.setMax(BitTools.getMaxPosInPage(qa.getMax()));
}
return qa;
}",0.9838531298385312
98229,"public QueryTreeNode createSubs(List<QueryTreeNode> subQueriesCandidates){
  if (LOG_OP.OR.equals(_op) && getBranchType() == BRANCH_TYPE.INDEXED) {
    QueryTreeNode n1;
    QueryTerm t1;
    if (_n1 != null) {
      n1=_n1.cloneBranch();
      t1=null;
    }
 else {
      n1=null;
      t1=_t1;
    }
    QueryTreeNode n2;
    QueryTerm t2;
    if (_n2 != null) {
      n2=_n2.cloneBranch();
      t2=null;
    }
 else {
      n2=null;
      t2=_t2;
    }
    QueryTreeNode newTree;
    if (_p != null) {
      if (_p._n1 == this) {
        _p._n1=n1;
        _p._t1=t1;
        _p.relateToChildren();
      }
 else       if (_p._n2 == this) {
        _p._n2=n1;
        _p._t2=t1;
        _p.relateToChildren();
      }
 else {
        throw new IllegalStateException();
      }
    }
 else {
      if (n1 != null) {
        n1._p=null;
      }
      if (n2 != null) {
        n2._p=null;
      }
    }
    if (_p == null) {
      newTree=new QueryTreeNode(n2,t2,null,null,null).relateToChildren();
    }
 else {
      if (n2 == null) {
        newTree=_p.cloneTrunk(this,n2);
        if (newTree._t1 == null) {
          newTree._t1=t2;
        }
 else {
          newTree._t2=t2;
        }
      }
 else {
        newTree=_p.cloneTrunk(this,n2);
      }
    }
    subQueriesCandidates.add(newTree.root());
  }
  if (_n1 != null) {
    _n1.createSubs(subQueriesCandidates);
  }
  if (_n2 != null) {
    _n2.createSubs(subQueriesCandidates);
  }
  return this;
}","public QueryTreeNode createSubs(List<QueryTreeNode> subQueriesCandidates){
  if (LOG_OP.OR.equals(_op) && getBranchType() == BRANCH_TYPE.INDEXED) {
    QueryTreeNode n1;
    QueryTerm t1;
    if (_n1 != null) {
      n1=_n1.cloneBranch();
      t1=null;
    }
 else {
      n1=null;
      t1=_t1;
    }
    QueryTreeNode n2;
    QueryTerm t2;
    if (_n2 != null) {
      n2=_n2.cloneBranch();
      t2=null;
    }
 else {
      n2=null;
      t2=_t2;
    }
    QueryTreeNode newTree;
    if (_p != null) {
      if (_p._n1 == this) {
        _p._n1=n1;
        _p._t1=t1;
        _p.relateToChildren();
      }
 else       if (_p._n2 == this) {
        _p._n2=n1;
        _p._t2=t1;
        _p.relateToChildren();
      }
 else {
        throw new IllegalStateException();
      }
    }
 else {
      if (n1 != null) {
        n1._p=null;
      }
      if (n2 != null) {
        n2._p=null;
      }
    }
    if (_p == null) {
      newTree=new QueryTreeNode(n2,t2,null,null,null).relateToChildren();
    }
 else {
      newTree=_p.cloneTrunk(this,n2);
      if (n2 == null) {
        if (newTree._t1 == null) {
          newTree._t1=t2;
        }
 else {
          newTree._t2=t2;
        }
      }
    }
    subQueriesCandidates.add(newTree.root());
  }
  if (_n1 != null) {
    _n1.createSubs(subQueriesCandidates);
  }
  if (_n2 != null) {
    _n2.createSubs(subQueriesCandidates);
  }
  return this;
}",0.9080779944289692
98230,"private PageAccessFile_BB(FileChannel fc,int pageSize,FreeSpaceManager fsm){
  PAGE_SIZE=pageSize;
  MAX_POS=PAGE_SIZE - 4;
  this.fc=fc;
  this.fsm=fsm;
  isWriting=false;
  _buf=ByteBuffer.allocateDirect(PAGE_SIZE);
  _currentPage=0;
}","private PageAccessFile_BB(FileChannel fc,long pageSize,FreeSpaceManager fsm){
  PAGE_SIZE=pageSize;
  MAX_POS=(int)(PAGE_SIZE - 4);
  this.fc=fc;
  this.fsm=fsm;
  isWriting=false;
  _buf=ByteBuffer.allocateDirect((int)PAGE_SIZE);
  _currentPage=0;
}",0.9609856262833676
98231,"@Override public int getPageSize(){
  return PAGE_SIZE;
}","@Override public int getPageSize(){
  return (int)PAGE_SIZE;
}",0.957983193277311
98232,"@Override public void seekPage(int pageId,int pageOffset,boolean autoPaging){
  isAutoPaging=autoPaging;
  try {
    if (pageId != _currentPage) {
      writeData();
      isWriting=false;
      _currentPage=pageId;
      _buf.clear();
      fc.read(_buf,pageId * PAGE_SIZE);
      _buf.limit(PAGE_SIZE);
    }
 else {
      _buf.rewind();
    }
    _buf.position(pageOffset);
  }
 catch (  IOException e) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + pageId,e);
  }
}","@Override public void seekPage(int pageId,int pageOffset,boolean autoPaging){
  isAutoPaging=autoPaging;
  try {
    if (pageId != _currentPage) {
      writeData();
      isWriting=false;
      _currentPage=pageId;
      _buf.clear();
      fc.read(_buf,pageId * PAGE_SIZE);
      _buf.limit((int)PAGE_SIZE);
    }
 else {
      _buf.rewind();
    }
    _buf.position(pageOffset);
  }
 catch (  IOException e) {
    throw new JDOFatalDataStoreException(""String_Node_Str"" + pageId,e);
  }
}",0.9948717948717948
98233,"private PageAccessFile_BBMappedPage(FileChannel fc,int pageSize,FreeSpaceManager fsm,File file){
  PAGE_SIZE=pageSize;
  MAX_POS=PAGE_SIZE - 4;
  this._fc=fc;
  this.fsm=fsm;
  this._file=file;
  try {
    isWriting=false;
    _buf=_fc.map(MapMode.READ_ONLY,0,PAGE_SIZE);
    _currentPage=0;
  }
 catch (  IOException e) {
    throw new JDOFatalDataStoreException(""String_Node_Str"",e);
  }
}","private PageAccessFile_BBMappedPage(FileChannel fc,long pageSize,FreeSpaceManager fsm,File file){
  PAGE_SIZE=pageSize;
  MAX_POS=(int)(PAGE_SIZE - 4);
  this._fc=fc;
  this.fsm=fsm;
  this._file=file;
  try {
    isWriting=false;
    _buf=_fc.map(MapMode.READ_ONLY,0,PAGE_SIZE);
    _currentPage=0;
  }
 catch (  IOException e) {
    throw new JDOFatalDataStoreException(""String_Node_Str"",e);
  }
}",0.9822784810126582
98234,"@Override public int getPageSize(){
  return PAGE_SIZE;
}","@Override public int getPageSize(){
  return (int)PAGE_SIZE;
}",0.957983193277311
98235,"@Override public void makePersistent(PersistenceCapableImpl obj){
  long oid=getOidBuffer().allocateOid();
  _commonCache.markPersistent(obj,oid,this);
  obj.jdoReplaceStateManager(_commonCache.getStateManager());
  obj.jdoZooSetOid(oid);
}","@Override public void makePersistent(PersistenceCapableImpl obj){
  CachedSchema cs=_commonCache.getCachedSchema(obj.getClass(),this);
  if (cs == null || cs.isDeleted()) {
    throw new JDOUserException(""String_Node_Str"" + obj.getClass().getName(),obj);
  }
  long oid=getOidBuffer().allocateOid();
  _commonCache.markPersistent(obj,oid,this);
  obj.jdoReplaceStateManager(_commonCache.getStateManager());
  obj.jdoZooSetOid(oid);
}",0.7132243684992571
98236,"@Test public void testLargeSchema(){
  TestTools.removeDb(DB_NAME);
  TestTools.createDb(DB_NAME);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  Schema.create(pm,TestSerializer.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  assertNotNull(Schema.locate(pm,JB0.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB1.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB2.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB3.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB4.class,DB_NAME));
  assertNotNull(Schema.locate(pm,TestSerializer.class,DB_NAME));
  JB4 jb4=new JB4();
  pm.makePersistent(jb4);
  JB0 jb0=new JB0();
  pm.makePersistent(jb0);
  pm.currentTransaction().commit();
  TestTools.closePM();
}","@Test public void testLargeSchema(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  Schema.create(pm,TestSerializer.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  assertNotNull(Schema.locate(pm,JB0.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB1.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB2.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB3.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB4.class,DB_NAME));
  assertNotNull(Schema.locate(pm,TestSerializer.class,DB_NAME));
  JB4 jb4=new JB4();
  pm.makePersistent(jb4);
  JB0 jb0=new JB0();
  pm.makePersistent(jb0);
  pm.currentTransaction().commit();
  TestTools.closePM();
}",0.969
98237,"@Test public void testSchemaDeletion(){
  System.out.println(""String_Node_Str"");
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema s01=Schema.locate(pm,TestClass.class.getName(),DB_NAME);
  if (s01 != null) {
    s01.remove();
    pm.currentTransaction().commit();
    pm.currentTransaction().begin();
  }
  Schema.create(pm,TestClass.class,DB_NAME);
  s01=Schema.locate(pm,TestClass.class.getName(),DB_NAME);
  assertNotNull(s01);
  s01.remove();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  s01=Schema.create(pm,TestClass.class,DB_NAME);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  s01.remove();
  try {
    s01.remove();
    fail();
  }
 catch (  JDOUserException e) {
  }
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().rollback();
  pm.currentTransaction().begin();
  s01=Schema.locate(pm,TestClass.class.getName(),DB_NAME);
  assertNotNull(s01);
  s01.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  try {
    s01.remove();
    fail();
  }
 catch (  JDOUserException e) {
  }
  s01=Schema.create(pm,TestClass.class,DB_NAME);
  assertNotNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().commit();
  TestTools.closePM();
}","@Test public void testSchemaDeletion(){
  System.out.println(""String_Node_Str"");
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema s01=Schema.create(pm,TestClass.class,DB_NAME);
  assertNotNull(s01);
  s01.remove();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  s01=Schema.create(pm,TestClass.class,DB_NAME);
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  s01.remove();
  try {
    s01.remove();
    fail();
  }
 catch (  JDOUserException e) {
  }
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().rollback();
  pm.currentTransaction().begin();
  s01=Schema.locate(pm,TestClass.class.getName(),DB_NAME);
  assertNotNull(s01);
  s01.remove();
  pm.currentTransaction().commit();
  pm.currentTransaction().begin();
  assertNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  try {
    s01.remove();
    fail();
  }
 catch (  JDOUserException e) {
  }
  s01=Schema.create(pm,TestClass.class,DB_NAME);
  assertNotNull(Schema.locate(pm,TestClass.class.getName(),DB_NAME));
  pm.currentTransaction().commit();
  TestTools.closePM();
}",0.5165376495425756
98238,"@Test public void testSchemaHierarchy(){
  TestTools.removeDb(DB_NAME);
  TestTools.createDb(DB_NAME);
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  assertNotNull(Schema.locate(pm,JB0.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB1.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB2.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB3.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB4.class,DB_NAME));
  JB4 jb4=new JB4();
  pm.makePersistent(jb4);
  JB0 jb0=new JB0();
  pm.makePersistent(jb0);
  pm.currentTransaction().commit();
  TestTools.closePM();
}","@Test public void testSchemaHierarchy(){
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  pm=TestTools.openPM();
  pm.currentTransaction().begin();
  assertNotNull(Schema.locate(pm,JB0.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB1.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB2.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB3.class,DB_NAME));
  assertNotNull(Schema.locate(pm,JB4.class,DB_NAME));
  JB4 jb4=new JB4();
  pm.makePersistent(jb4);
  JB0 jb0=new JB0();
  pm.makePersistent(jb0);
  pm.currentTransaction().commit();
  TestTools.closePM();
}",0.9651293588301464
98239,"@Test public void testPageAllocation(){
  TestTools.removeDb(DB_NAME);
  TestTools.createDb(DB_NAME);
  String path=DataStoreManager.getDbPath(DB_NAME);
  File file=new File(path + File.separator + ""String_Node_Str"");
  assertTrue(file.exists());
  assertTrue(file.isFile());
  long len1=file.length();
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JdoPilot.class,DB_NAME);
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  Schema.create(pm,JdoIndexedPilot.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  long len2=file.length();
  int newPages=(int)((len2 - len1) / PAGE_SIZE);
  assertTrue(""String_Node_Str"" + newPages,newPages <= 3 * 7 + 3);
}","@Test public void testPageAllocation(){
  String path=DataStoreManager.getDbPath(DB_NAME);
  File file=new File(path + File.separator + ""String_Node_Str"");
  assertTrue(file.exists());
  assertTrue(file.isFile());
  long len1=file.length();
  PersistenceManager pm=TestTools.openPM();
  pm.currentTransaction().begin();
  Schema.create(pm,JdoPilot.class,DB_NAME);
  Schema.create(pm,JB0.class,DB_NAME);
  Schema.create(pm,JB1.class,DB_NAME);
  Schema.create(pm,JB2.class,DB_NAME);
  Schema.create(pm,JB3.class,DB_NAME);
  Schema.create(pm,JB4.class,DB_NAME);
  Schema.create(pm,JdoIndexedPilot.class,DB_NAME);
  pm.currentTransaction().commit();
  TestTools.closePM();
  long len2=file.length();
  int newPages=(int)((len2 - len1) / PAGE_SIZE);
  assertTrue(""String_Node_Str"" + newPages,newPages <= 3 * 7 + 3);
}",0.963226571767497
98240,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  Block block=event.getToBlock();
  AutoRefMatch match=plugin.getMatch(block.getWorld());
  if (match != null && match.hasFlag(block.getLocation().add(0d,0d,0.5),AutoRefRegion.Flag.NO_FLOW)) {
    event.setCancelled(true);
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  Block block=event.getToBlock();
  AutoRefMatch match=plugin.getMatch(block.getWorld());
  if (match != null && match.hasFlag(block.getLocation().add(0.5,0d,0.5),AutoRefRegion.Flag.NO_FLOW)) {
    event.setCancelled(true);
  }
}",0.9956709956709956
98241,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  Block block=event.getToBlock();
  AutoRefMatch match=plugin.getMatch(block.getWorld());
  if (match == null)   return;
  Location location=block.getLocation();
switch (event.getFace()) {
case EAST:
    location=location.add(1d,0d,0d);
case SOUTH:
  location=location.add(0d,0d,1d);
default :
break;
}
if (match.hasFlag(location,AutoRefRegion.Flag.NO_FLOW)) {
event.setCancelled(true);
return;
}
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onBlockFromTo(BlockFromToEvent event){
  Block block=event.getToBlock();
  AutoRefMatch match=plugin.getMatch(block.getWorld());
  if (match != null && match.hasFlag(block.getLocation().add(0d,0d,0.5),AutoRefRegion.Flag.NO_FLOW)) {
    event.setCancelled(true);
  }
}",0.6844547563805105
98242,"/** 
 * Gets the team the player is expected to join. Matches setup by automated match configurations may designate certain players for certain teams.
 * @return player's team, null if no such team
 */
public AutoRefTeam getExpectedTeam(Player player){
  AutoRefTeam actualTeam=getTeam(player);
  if (actualTeam != null)   return actualTeam;
  for (  AutoRefMatch match : matches.values()) {
    for (    AutoRefTeam team : match.getTeams())     if (team.getExpectedPlayers().contains(player))     return team;
  }
  return null;
}","/** 
 * Gets the team the player is expected to join. Matches setup by automated match configurations may designate certain players for certain teams.
 * @return player's team, null if no such team
 */
public AutoRefTeam getExpectedTeam(Player player){
  AutoRefTeam actualTeam=getTeam(player);
  if (actualTeam != null)   return actualTeam;
  for (  AutoRefMatch match : matches.values()) {
    for (    AutoRefTeam team : match.getTeams())     if (team.getExpectedPlayers().contains(player.getName()))     return team;
  }
  return null;
}",0.9906716417910448
98243,"@AutoRefCommand(name={""String_Node_Str"",""String_Node_Str""},argmin=1,argmax=1,options=""String_Node_Str"",description=""String_Node_Str"",usage=""String_Node_Str"",opthelp={""String_Node_Str"",""String_Node_Str""}) @AutoRefPermission(console=false,nodes={""String_Node_Str""}) public boolean setupCore(CommandSender sender,AutoRefMatch match,String[] args,CommandLine options){
  if (match == null)   return false;
  Player player=(Player)sender;
  WorldEditPlugin worldEdit=AutoReferee.getWorldEdit();
  if (worldEdit == null) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  AutoRefTeam team=match.getTeam(args[0]);
  Selection sel=worldEdit.getSelection(player);
  AutoRefRegion reg=null;
  if ((sel instanceof CuboidSelection)) {
    CuboidSelection csel=(CuboidSelection)sel;
    reg=new CuboidRegion(csel.getMinimumPoint(),csel.getMaximumPoint());
  }
  CoreGoal core=new CoreGoal(team,reg);
  if (options.hasOption('r'))   try {
    core.setRange(Long.parseLong(options.getOptionValue('r')));
  }
 catch (  NumberFormatException e) {
    sender.sendMessage(ChatColor.RED + options.getOptionValue('r') + ""String_Node_Str"");
  }
  team.addGoal(core);
  sender.sendMessage(reg.toString() + ""String_Node_Str"" + team.getDisplayName()+ ""String_Node_Str"");
  sender.sendMessage(team.getDisplayName() + ""String_Node_Str"");
  return true;
}","@AutoRefCommand(name={""String_Node_Str"",""String_Node_Str""},argmin=1,argmax=1,options=""String_Node_Str"",description=""String_Node_Str"",usage=""String_Node_Str"",opthelp={""String_Node_Str"",""String_Node_Str""}) @AutoRefPermission(console=false,nodes={""String_Node_Str""}) public boolean setupCore(CommandSender sender,AutoRefMatch match,String[] args,CommandLine options){
  if (match == null)   return false;
  Player player=(Player)sender;
  WorldEditPlugin worldEdit=AutoReferee.getWorldEdit();
  if (worldEdit == null) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  AutoRefTeam team=match.getTeam(args[0]);
  Selection sel=worldEdit.getSelection(player);
  AutoRefRegion reg=null;
  if ((sel instanceof CuboidSelection)) {
    CuboidSelection csel=(CuboidSelection)sel;
    reg=new CuboidRegion(csel.getMinimumPoint(),csel.getMaximumPoint());
  }
 else {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  CoreGoal core=new CoreGoal(team,reg);
  if (options.hasOption('r'))   try {
    core.setRange(Long.parseLong(options.getOptionValue('r')));
  }
 catch (  NumberFormatException e) {
    sender.sendMessage(ChatColor.RED + options.getOptionValue('r') + ""String_Node_Str"");
  }
  team.addGoal(core);
  sender.sendMessage(reg.toString() + ""String_Node_Str"" + team.getDisplayName()+ ""String_Node_Str"");
  sender.sendMessage(team.getDisplayName() + ""String_Node_Str"");
  return true;
}",0.9739130434782608
98244,"public static String syncQuery(String path,String method,String getParams,String postParams) throws IOException {
  OutputStreamWriter wr=null;
  InputStream rd=null;
  try {
    URL url=new URL(getParams == null ? path : String.format(""String_Node_Str"",path,getParams));
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setDoOutput(true);
    AutoReferee instance=AutoReferee.getInstance();
    String pluginName=instance.getDescription().getFullName();
    conn.setRequestProperty(""String_Node_Str"",String.format(""String_Node_Str"",pluginName,instance.getCommit()));
    if (method != null) {
      conn.setRequestMethod(method);
      conn.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
    if (postParams != null) {
      wr=new OutputStreamWriter(conn.getOutputStream());
      wr.write(postParams);
      wr.flush();
    }
    StringWriter writer=new StringWriter();
    IOUtils.copy(rd=conn.getInputStream(),writer);
    return writer.toString();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    try {
      if (wr != null)       wr.close();
      if (rd != null)       rd.close();
    }
 catch (    Exception e) {
    }
  }
}","public static String syncQuery(String path,String method,String getParams,String postParams) throws IOException {
  OutputStreamWriter wr=null;
  InputStream rd=null;
  try {
    URL url=new URL(getParams == null ? path : String.format(""String_Node_Str"",path,getParams));
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setDoOutput(true);
    AutoReferee instance=AutoReferee.getInstance();
    String pluginName=instance.getDescription().getFullName();
    conn.setRequestProperty(""String_Node_Str"",String.format(""String_Node_Str"",pluginName,instance.getCommit()));
    if (method != null) {
      conn.setRequestMethod(method);
      conn.addRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
    if (postParams != null) {
      wr=new OutputStreamWriter(conn.getOutputStream());
      wr.write(postParams);
      wr.flush();
    }
    StringWriter writer=new StringWriter();
    IOUtils.copy(rd=conn.getInputStream(),writer);
    return writer.toString();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    try {
      if (wr != null)       wr.close();
      if (rd != null)       rd.close();
    }
 catch (    Exception ignored) {
    }
  }
}",0.9966471081307628
98245,"/** 
 * Sets whether player collides with entities, including items and arrows. Uses last_username's collides-with-entities API from SportBukkit
 * @param collidesWithEntities Set whether player collides with entities
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 */
public static void setCollidesWithEntities(Player player,boolean collidesWithEntities){
  if (mCollidesWithEntities != null)   try {
    mCollidesWithEntities.invoke(player,collidesWithEntities);
  }
 catch (  Exception e) {
  }
}","/** 
 * Sets whether player collides with entities, including items and arrows. Uses last_username's collides-with-entities API from SportBukkit
 * @param collidesWithEntities Set whether player collides with entities
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 */
public static void setCollidesWithEntities(Player player,boolean collidesWithEntities){
  if (mCollidesWithEntities != null)   try {
    mCollidesWithEntities.invoke(player,collidesWithEntities);
  }
 catch (  Throwable ignored) {
  }
}",0.974025974025974
98246,"/** 
 * Sets the overhead name, allowing for ChatColor characters. Uses anxuiz's set-overhead-name API from SportBukkit
 * @param overheadName New string to display above player's head
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 * @deprecated use built-in scoreboards to change name colors
 */
@Deprecated public static void setOverheadName(Player player,String overheadName){
  if (mSetOverheadName != null)   try {
    mSetOverheadName.invoke(player,overheadName.trim().replaceAll(ChatColor.RESET.toString(),""String_Node_Str""));
  }
 catch (  Exception e) {
  }
}","/** 
 * Sets the overhead name, allowing for ChatColor characters. Uses anxuiz's set-overhead-name API from SportBukkit
 * @param overheadName New string to display above player's head
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 * @deprecated use built-in scoreboards to change name colors
 */
@Deprecated public static void setOverheadName(Player player,String overheadName){
  if (mSetOverheadName != null)   try {
    mSetOverheadName.invoke(player,overheadName.trim().replaceAll(ChatColor.RESET.toString(),""String_Node_Str""));
  }
 catch (  Throwable ignored) {
  }
}",0.9770114942528736
98247,"/** 
 * Sets whether player affects spawning via natural spawn and mob spawners. Uses last_username's affects-spawning API from SportBukkit
 * @param affectsSpawning Set whether player affects spawning
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 */
public static void setAffectsSpawning(Player player,boolean affectsSpawning){
  if (mAffectsSpawning != null)   try {
    mAffectsSpawning.invoke(player,affectsSpawning);
  }
 catch (  Exception e) {
  }
}","/** 
 * Sets whether player affects spawning via natural spawn and mob spawners. Uses last_username's affects-spawning API from SportBukkit
 * @param affectsSpawning Set whether player affects spawning
 * @see <a href=""http://www.github.com/OvercastNetwork/SportBukkit"">SportBukkit</a>
 */
public static void setAffectsSpawning(Player player,boolean affectsSpawning){
  if (mAffectsSpawning != null)   try {
    mAffectsSpawning.invoke(player,affectsSpawning);
  }
 catch (  Throwable ignored) {
  }
}",0.9718875502008032
98248,"@Test public void testNameLookup(){
  AutoRefTeam team=new AutoRefTeam();
  AutoRefPlayer p1=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p2=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p3=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p4=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer pX=new AutoRefPlayer(""String_Node_Str"",null);
  team.addPlayer(p1);
  team.addPlayer(p2);
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
  team.addPlayer(p3);
  team.addPlayer(p4);
  Assert.assertEquals(p1,team.getPlayer(""String_Node_Str""));
  Assert.assertEquals(p2,team.getPlayer(""String_Node_Str""));
  Assert.assertEquals(p3,team.getPlayer(""String_Node_Str""));
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
}","@Test public void testNameLookup(){
  AutoRefTeam team=new AutoRefTeam();
  AutoRefPlayer p1=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p2=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p3=new AutoRefPlayer(""String_Node_Str"",null);
  AutoRefPlayer p4=new AutoRefPlayer(""String_Node_Str"",null);
  team.addPlayer(p1);
  team.addPlayer(p2);
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
  team.addPlayer(p3);
  team.addPlayer(p4);
  Assert.assertEquals(p1,team.getPlayer(""String_Node_Str""));
  Assert.assertEquals(p2,team.getPlayer(""String_Node_Str""));
  Assert.assertEquals(p3,team.getPlayer(""String_Node_Str""));
  Assert.assertNull(team.getPlayer(""String_Node_Str""));
}",0.960907944514502
98249,"private void updateCarrying(Inventory inv){
  if (getTeam() != null) {
    GoalsInventorySnapshot oldCarrying=carrying;
    carrying=null;
    carrying=getCarrying();
    MapDifference<BlockData,Integer> diff=oldCarrying.getDiff(carrying);
    if (!diff.areEqual()) {
      for (      BlockGoal goal : getTeam().getTeamGoals(BlockGoal.class))       if (goal.getItemStatus() == AutoRefGoal.ItemStatus.NONE && carrying.containsKey(goal.getItem())) {
        String m=String.format(""String_Node_Str"",getDisplayName(),goal.getItem().getDisplayName());
        getMatch().addEvent(new TranscriptEvent(getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,m,getLocation(),this,goal.getItem()));
        this.addPoints(AchievementPoints.OBJECTIVE_FOUND);
        getTeam().setLastObjectiveLocation(getLocation());
      }
      getTeam().updateCarrying(this,oldCarrying,carrying);
    }
  }
}","private void updateCarrying(Inventory inv){
  if (getTeam() != null) {
    GoalsInventorySnapshot oldCarrying=carrying;
    carrying=null;
    carrying=getCarrying();
    if (oldCarrying == null) {
      return;
    }
    MapDifference<BlockData,Integer> diff=oldCarrying.getDiff(carrying);
    if (!diff.areEqual()) {
      for (      BlockGoal goal : getTeam().getTeamGoals(BlockGoal.class))       if (goal.getItemStatus() == AutoRefGoal.ItemStatus.NONE && carrying.containsKey(goal.getItem())) {
        String m=String.format(""String_Node_Str"",getDisplayName(),goal.getItem().getDisplayName());
        getMatch().addEvent(new TranscriptEvent(getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,m,getLocation(),this,goal.getItem()));
        this.addPoints(AchievementPoints.OBJECTIVE_FOUND);
        getTeam().setLastObjectiveLocation(getLocation());
      }
      getTeam().updateCarrying(this,oldCarrying,carrying);
    }
  }
}",0.97196261682243
98250,"private void download() throws IOException {
  this.zip=AutoRefMap.DOWNLOADING;
  File zip=new File(AutoRefMap.getMapLibrary(),filename);
  FileUtils.copyURLToFile(new URL(filename),zip);
  String md5comp=DigestUtils.md5Hex(new FileInputStream(zip));
  if (md5comp.equalsIgnoreCase(md5sum)) {
    this.zip=zip;
    return;
  }
  zip.delete();
  throw new IOException(""String_Node_Str"" + md5comp + ""String_Node_Str""+ md5sum);
}","private void download() throws IOException {
  this.zip=AutoRefMap.DOWNLOADING;
  String bparts[]=filename.split(""String_Node_Str""), basename=bparts[bparts.length - 1];
  File zip=new File(AutoRefMap.getMapLibrary(),basename);
  FileUtils.copyURLToFile(new URL(AutoRefMatch.getMapRepo() + filename),zip);
  String md5comp=DigestUtils.md5Hex(new FileInputStream(zip));
  if (md5comp.equalsIgnoreCase(md5sum)) {
    this.zip=zip;
    return;
  }
  zip.delete();
  throw new IOException(""String_Node_Str"" + md5comp + ""String_Node_Str""+ md5sum);
}",0.8730650154798761
98251,"protected Element setRegionSettings(Element e){
  Set<Flag> fset=getFlags();
  if (!fset.isEmpty()) {
    Element eFlags;
    e.addContent(eFlags=new Element(""String_Node_Str""));
    for (    Flag f : fset)     eFlags.addContent(new Element(f.name.toLowerCase()));
  }
  for (  AutoRefTeam team : getOwners())   e.addContent(new Element(""String_Node_Str"").setText(team.getName()));
  if (yaw != null)   e.setAttribute(""String_Node_Str"",Integer.toString(Math.round((float)yaw / ANGLE_RND) * ANGLE_RND));
  if (pitch != null)   e.setAttribute(""String_Node_Str"",Integer.toString(Math.round((float)pitch / ANGLE_RND) * ANGLE_RND));
  if (regionName != null)   e.setAttribute(""String_Node_Str"",this.getName());
  return e;
}","protected Element setRegionSettings(Element e){
  if (e == null)   return e;
  Set<Flag> fset=getFlags();
  if (!fset.isEmpty()) {
    Element eFlags;
    e.addContent(eFlags=new Element(""String_Node_Str""));
    for (    Flag f : fset)     eFlags.addContent(new Element(f.name.toLowerCase()));
  }
  if (getOwners() != null)   for (  AutoRefTeam team : getOwners())   e.addContent(new Element(""String_Node_Str"").setText(team.getName()));
  if (yaw != null)   e.setAttribute(""String_Node_Str"",Integer.toString(Math.round((float)yaw / ANGLE_RND) * ANGLE_RND));
  if (pitch != null)   e.setAttribute(""String_Node_Str"",Integer.toString(Math.round((float)pitch / ANGLE_RND) * ANGLE_RND));
  if (regionName != null)   e.setAttribute(""String_Node_Str"",this.getName());
  return e;
}",0.8165997322623829
98252,"/** 
 * Teleports a player to a match they have been added to, joining the team inviting them.
 */
public void joinMatch(Player player){
  PlayerMatchJoinEvent event=new PlayerMatchJoinEvent(player,this);
  AutoReferee.fireEvent(event);
  if (!event.isCancelled())   return;
  if (this.isPlayer(player))   return;
  AutoRefTeam team=this.expectedTeam(player);
  if (team != null)   this.joinTeam(player,team,false);
 else   if (player.getWorld() != this.getWorld())   player.teleport(this.getPlayerSpawn(player));
  this.removeExpectedPlayer(player);
}","/** 
 * Teleports a player to a match they have been added to, joining the team inviting them.
 */
public void joinMatch(Player player){
  PlayerMatchJoinEvent event=new PlayerMatchJoinEvent(player,this);
  AutoReferee.fireEvent(event);
  if (event.isCancelled())   return;
  if (this.isPlayer(player))   return;
  AutoRefTeam team=this.expectedTeam(player);
  if (team != null)   this.joinTeam(player,team,false);
 else   if (player.getWorld() != this.getWorld())   player.teleport(this.getPlayerSpawn(player));
  this.removeExpectedPlayer(player);
}",0.99909338168631
98253,"public Location getLocation(){
  Location loc=getRandomLocation(random);
  if (pitch != null)   loc.setPitch(pitch);
  if (yaw != null)   loc.setYaw(yaw);
  return loc.add(0.0,0.75,0.0);
}","public Location getLocation(){
  Location loc=getRandomLocation(random);
  if (pitch != null)   loc.setPitch(pitch);
  if (yaw != null)   loc.setYaw(yaw);
  return loc.add(0.0,0.5,0.0);
}",0.9973333333333332
98254,"@EventHandler(priority=EventPriority.MONITOR) public void playerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  AutoRefMatch match=plugin.getMatch(player.getWorld());
  if (match == null)   return;
  int blockUnder=match.getWorld().getBlockTypeIdAt(event.getTo().add(0.0,-0.1,0.0));
  boolean onGround=(blockUnder != Material.AIR.getId());
  AutoRefPlayer apl=match.getPlayer(player);
  if (apl == null) {
    if (!match.isSpectator(player) && !match.inStartRegion(event.getTo()) && onGround) {
      player.teleport(match.getWorldSpawn());
      player.setFallDistance(0.0f);
    }
    return;
  }
  AutoRefTeam team=apl.getTeam();
  if (team == null)   return;
  double fallspeed=event.getFrom().getY() - event.getTo().getY();
  Location exit=apl.getExitLocation();
  if (player.getGameMode() != GameMode.SURVIVAL || match.inStartRegion(event.getTo()))   return;
  if (!match.inStartRegion(event.getTo())) {
    if (match.getCurrentState().inProgress()) {
      if (match.inStartRegion(event.getFrom()) && !apl.isActive())       apl.reset();
      apl.setActive();
    }
 else     if (match.getCurrentState().isBeforeMatch()) {
      if (onGround)       apl.die(null,false);
      return;
    }
  }
  if (!team.canEnter(event.getTo(),0.3)) {
    if (player.isSneaking() && team.canEnter(event.getTo()) && fallspeed < FREEFALL_THRESHOLD)     ;
 else     if (exit == null)     apl.setExitLocation(player.getLocation());
 else     if (exit != null && fallspeed < FREEFALL_THRESHOLD && onGround)     apl.die(AutoRefPlayer.VOID_DEATH,true);
  }
 else {
    if (exit != null) {
      if (player.getLocation().distance(exit) > SAFE_TRAVEL_DISTANCE)       apl.die(AutoRefPlayer.VOID_DEATH,true);
      apl.setExitLocation(null);
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void playerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  AutoRefMatch match=plugin.getMatch(player.getWorld());
  if (match == null)   return;
  Location locUnder=event.getTo().clone().add(0.0,-0.1,0.0);
  int blockUnder=match.getWorld().getBlockTypeIdAt(locUnder);
  boolean onGround=(blockUnder != Material.AIR.getId());
  AutoRefPlayer apl=match.getPlayer(player);
  if (apl == null) {
    if (!match.isSpectator(player) && !match.inStartRegion(event.getTo()) && onGround) {
      player.teleport(match.getWorldSpawn());
      player.setFallDistance(0.0f);
    }
    return;
  }
  AutoRefTeam team=apl.getTeam();
  if (team == null)   return;
  double fallspeed=event.getFrom().getY() - event.getTo().getY();
  Location exit=apl.getExitLocation();
  if (player.getGameMode() != GameMode.SURVIVAL || match.inStartRegion(event.getTo()))   return;
  if (!match.inStartRegion(event.getTo())) {
    if (match.getCurrentState().inProgress()) {
      if (match.inStartRegion(event.getFrom()) && !apl.isActive())       apl.reset();
      apl.setActive();
    }
 else     if (match.getCurrentState().isBeforeMatch()) {
      if (onGround)       apl.die(null,false);
      return;
    }
  }
  if (!team.canEnter(event.getTo(),0.3)) {
    if (player.isSneaking() && team.canEnter(event.getTo()) && fallspeed < FREEFALL_THRESHOLD)     ;
 else     if (exit == null)     apl.setExitLocation(player.getLocation());
 else     if (exit != null && fallspeed < FREEFALL_THRESHOLD && onGround)     apl.die(AutoRefPlayer.VOID_DEATH,true);
  }
 else {
    if (exit != null) {
      if (player.getLocation().distance(exit) > SAFE_TRAVEL_DISTANCE)       apl.die(AutoRefPlayer.VOID_DEATH,true);
      apl.setExitLocation(null);
    }
  }
}",0.9593450028232636
98255,"public static String center(String text){
  int w=0;
  boolean isBold=false;
  for (int i=0; i < text.length(); ++i) {
    char c=text.charAt(i);
    if (c == ChatColor.COLOR_CHAR)     isBold=text.charAt(++i) == ChatColor.BOLD.getChar();
 else     w+=1 + getCharWidth(c,isBold);
  }
  int sw=charWidth.get(' ') + 1;
  return StringUtils.repeat(' ',(LINE_WIDTH - w) / (2 * sw)) + text;
}","public static String center(String text){
  int w=0;
  boolean isBold=false;
  for (int i=0; i < text.length(); ++i) {
    char c=text.charAt(i);
    if (c == ChatColor.COLOR_CHAR)     isBold=text.charAt(++i) == ChatColor.BOLD.getChar();
 else     w+=1 + getCharWidth(c,isBold);
  }
  int repeat=(LINE_WIDTH - w) / (2 * (charWidth.get(' ') + 1));
  return StringUtils.repeat(' ',repeat < 0 ? 0 : repeat) + text;
}",0.8260325406758448
98256,"@EventHandler public void endermanPickup(EntityChangeBlockEvent event){
  AutoRefMatch match=plugin.getMatch(event.getEntity().getWorld());
  if (match == null)   return;
  if (event.getEntityType() == EntityType.ENDERMAN)   event.setCancelled(true);
}","@EventHandler public void endermanPickup(EntityChangeBlockEvent event){
  AutoRefMatch match=plugin.getMatch(event.getBlock().getWorld());
  if (match == null)   return;
  if (event.getEntityType() == EntityType.ENDERMAN)   event.setCancelled(true);
}",0.978131212723658
98257,"@SuppressWarnings(""String_Node_Str"") private void loadWorldConfiguration(){
  worldConfigFile=new File(world.getWorldFolder(),""String_Node_Str"");
  worldConfig=YamlConfiguration.loadConfiguration(worldConfigFile);
  InputStream defConfigStream=AutoReferee.getInstance().getResource(""String_Node_Str"");
  if (defConfigStream != null)   worldConfig.setDefaults(YamlConfiguration.loadConfiguration(defConfigStream));
  worldConfig.options().copyDefaults(true);
  worldConfig.options().header(AutoReferee.getInstance().getDescription().getFullName());
  worldConfig.options().copyHeader(false);
  teams=Sets.newHashSet();
  messageReferees(""String_Node_Str"",getWorld().getName(),""String_Node_Str"");
  for (  Map<?,?> map : worldConfig.getMapList(""String_Node_Str""))   teams.add(AutoRefTeam.fromMap((Map<String,Object>)map,this));
  startMechanisms=Sets.newHashSet();
  for (  String sm : worldConfig.getStringList(""String_Node_Str""))   startMechanisms.add(StartMechanism.unserialize(world,sm));
  protectedEntities=Sets.newHashSet();
  for (  String uid : worldConfig.getStringList(""String_Node_Str""))   protectedEntities.add(UUID.fromString(uid));
  prohibitCraft=Sets.newHashSet();
  for (  String b : worldConfig.getStringList(""String_Node_Str""))   prohibitCraft.add(BlockData.fromString(b));
  Set<UUID> uuidSearch=Sets.newHashSet(protectedEntities);
  for (  Entity e : getWorld().getEntities())   uuidSearch.remove(e.getUniqueId());
  if (!uuidSearch.isEmpty())   this.broadcast(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
  if (worldConfig.isString(""String_Node_Str""))   startRegion=CuboidRegion.fromCoords(worldConfig.getString(""String_Node_Str""));
  if (worldConfig.isString(""String_Node_Str""))   startTime=AutoReferee.parseTimeString(worldConfig.getString(""String_Node_Str""));
  mapName=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  versionString=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  mapAuthors=worldConfig.getStringList(""String_Node_Str"");
  allowFriendlyFire=worldConfig.getBoolean(""String_Node_Str"",false);
  allowCraft=worldConfig.getBoolean(""String_Node_Str"",false);
  String dstr=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  Difficulty diff=Difficulty.valueOf(dstr.toUpperCase());
  try {
    diff=Difficulty.getByValue(Integer.parseInt(dstr));
  }
 catch (  NumberFormatException e) {
  }
  world.setDifficulty(diff);
}","@SuppressWarnings(""String_Node_Str"") private void loadWorldConfiguration(){
  worldConfigFile=new File(world.getWorldFolder(),""String_Node_Str"");
  worldConfig=YamlConfiguration.loadConfiguration(worldConfigFile);
  InputStream defConfigStream=AutoReferee.getInstance().getResource(""String_Node_Str"");
  if (defConfigStream != null)   worldConfig.setDefaults(YamlConfiguration.loadConfiguration(defConfigStream));
  worldConfig.options().copyDefaults(true);
  worldConfig.options().header(AutoReferee.getInstance().getDescription().getFullName());
  worldConfig.options().copyHeader(false);
  teams=Sets.newHashSet();
  messageReferees(""String_Node_Str"",getWorld().getName(),""String_Node_Str"");
  setCurrentState(MatchStatus.WAITING);
  for (  Map<?,?> map : worldConfig.getMapList(""String_Node_Str""))   teams.add(AutoRefTeam.fromMap((Map<String,Object>)map,this));
  startMechanisms=Sets.newHashSet();
  for (  String sm : worldConfig.getStringList(""String_Node_Str""))   startMechanisms.add(StartMechanism.unserialize(world,sm));
  protectedEntities=Sets.newHashSet();
  for (  String uid : worldConfig.getStringList(""String_Node_Str""))   protectedEntities.add(UUID.fromString(uid));
  prohibitCraft=Sets.newHashSet();
  for (  String b : worldConfig.getStringList(""String_Node_Str""))   prohibitCraft.add(BlockData.fromString(b));
  Set<UUID> uuidSearch=Sets.newHashSet(protectedEntities);
  for (  Entity e : getWorld().getEntities())   uuidSearch.remove(e.getUniqueId());
  if (!uuidSearch.isEmpty())   this.broadcast(ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
  if (worldConfig.isString(""String_Node_Str""))   startRegion=CuboidRegion.fromCoords(worldConfig.getString(""String_Node_Str""));
  if (worldConfig.isString(""String_Node_Str""))   startTime=AutoReferee.parseTimeString(worldConfig.getString(""String_Node_Str""));
  mapName=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  versionString=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  mapAuthors=worldConfig.getStringList(""String_Node_Str"");
  allowFriendlyFire=worldConfig.getBoolean(""String_Node_Str"",false);
  allowCraft=worldConfig.getBoolean(""String_Node_Str"",false);
  String dstr=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  Difficulty diff=Difficulty.valueOf(dstr.toUpperCase());
  try {
    diff=Difficulty.getByValue(Integer.parseInt(dstr));
  }
 catch (  NumberFormatException e) {
  }
  world.setDifficulty(diff);
}",0.9919159256265158
98258,"@EventHandler public void playerRespawn(PlayerRespawnEvent event){
  World world=event.getPlayer().getWorld();
  AutoRefMatch match=plugin.getMatch(world);
  if (match == null)   for (  AutoRefMatch m : plugin.getMatches())   if (m.isPlayer(event.getPlayer()))   match=m;
  if (match != null && match.isPlayer(event.getPlayer())) {
    if (event.getRespawnLocation().getWorld() != match.getWorld())     event.setRespawnLocation(match.getPlayerSpawn(event.getPlayer()));
    match.getPlayer(event.getPlayer()).respawn();
  }
}","@EventHandler public void playerRespawn(PlayerRespawnEvent event){
  World world=event.getPlayer().getWorld();
  AutoRefMatch match=plugin.getMatch(world);
  if (match == null)   for (  AutoRefMatch m : plugin.getMatches())   if (m.isPlayer(event.getPlayer()))   match=m;
  if (match != null && match.isPlayer(event.getPlayer())) {
    boolean hasBed=event.getPlayer().getBedSpawnLocation() != null;
    if (!hasBed || event.getRespawnLocation().getWorld() != match.getWorld())     event.setRespawnLocation(match.getPlayerSpawn(event.getPlayer()));
    match.getPlayer(event.getPlayer()).respawn();
  }
}",0.9300265721877768
98259,"@EventHandler public void playerRespawn(PlayerRespawnEvent event){
  World world=event.getPlayer().getWorld();
  AutoRefMatch match=plugin.getMatch(world);
  if (match == null)   for (  AutoRefMatch m : plugin.getMatches())   if (m.isPlayer(event.getPlayer()))   match=m;
  if (match != null && match.isPlayer(event.getPlayer()) && (event.getPlayer().getBedSpawnLocation() == null || event.getRespawnLocation().getWorld() != match.getWorld())) {
    Location spawn=match.getPlayerSpawn(event.getPlayer());
    event.setRespawnLocation(spawn == null ? match.getWorldSpawn() : spawn);
    match.getPlayer(event.getPlayer()).respawn();
  }
}","@EventHandler public void playerRespawn(PlayerRespawnEvent event){
  World world=event.getPlayer().getWorld();
  AutoRefMatch match=plugin.getMatch(world);
  if (match == null)   for (  AutoRefMatch m : plugin.getMatches())   if (m.isPlayer(event.getPlayer()))   match=m;
  if (match != null && match.isPlayer(event.getPlayer())) {
    if (event.getRespawnLocation().getWorld() != match.getWorld())     event.setRespawnLocation(match.getPlayerSpawn(event.getPlayer()));
    match.getPlayer(event.getPlayer()).respawn();
  }
}",0.6001719690455718
98260,"public void setDebug(CommandSender recp){
  if (recp.hasPermission(""String_Node_Str""))   AutoReferee.getInstance().getLogger().info(""String_Node_Str"");
  debugRecipient=recp;
  debug(ChatColor.GREEN + ""String_Node_Str"" + (isDebugMode() ? ""String_Node_Str"" : ""String_Node_Str""));
}","public void setDebug(CommandSender recp){
  if (recp != null && recp.hasPermission(""String_Node_Str""))   AutoReferee.getInstance().getLogger().info(""String_Node_Str"");
  debugRecipient=recp;
  debug(ChatColor.GREEN + ""String_Node_Str"" + (isDebugMode() ? ""String_Node_Str"" : ""String_Node_Str""));
}",0.9722222222222222
98261,"public void debug(String msg){
  debugRecipient.sendMessage(msg);
}","public void debug(String msg){
  if (debugRecipient != null)   debugRecipient.sendMessage(msg);
}",0.8170731707317073
98262,"public void updateObjectives(){
  int inexactRange=getMatch().getInexactRange();
  objloop:   for (  BlockData bd : getObjectives()) {
    for (    Map.Entry<Location,BlockData> e : winConditions.entrySet()) {
      if (getMatch().blockInRange(e.getValue(),e.getKey(),inexactRange) != null) {
        setObjectiveStatus(bd,GoalStatus.PLACED);
        continue objloop;
      }
    }
    for (    AutoRefPlayer apl : getPlayers()) {
      if (!apl.getCarrying().contains(bd))       continue;
      setObjectiveStatus(bd,GoalStatus.CARRYING);
      continue objloop;
    }
    if (objectiveStatus.get(bd) != GoalStatus.NONE) {
      setObjectiveStatus(bd,GoalStatus.SEEN);
      continue;
    }
  }
}","public void updateObjectives(){
  int inexactRange=getMatch().getInexactRange();
  objloop:   for (  BlockData bd : getObjectives()) {
    for (    Map.Entry<Location,BlockData> e : winConditions.entrySet())     if (bd.equals(e.getValue())) {
      if (getMatch().blockInRange(bd,e.getKey(),inexactRange) != null) {
        setObjectiveStatus(bd,GoalStatus.PLACED);
        continue objloop;
      }
    }
    for (    AutoRefPlayer apl : getPlayers()) {
      if (!apl.getCarrying().contains(bd))       continue;
      setObjectiveStatus(bd,GoalStatus.CARRYING);
      continue objloop;
    }
    if (objectiveStatus.get(bd) != GoalStatus.NONE) {
      setObjectiveStatus(bd,GoalStatus.SEEN);
      continue;
    }
  }
}",0.966878083157153
98263,"@EventHandler(priority=EventPriority.MONITOR) public void playerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  AutoRefMatch match=plugin.getMatch(player.getWorld());
  if (match == null)   return;
  AutoRefPlayer apl=match.getPlayer(player);
  if (apl == null)   return;
  AutoRefTeam team=apl.getTeam();
  if (team == null)   return;
  double d=team.distanceToClosestRegion(event.getTo());
  double fallspeed=event.getFrom().getY() - event.getTo().getY();
  if (player.getGameMode() != GameMode.SURVIVAL || match.inStartRegion(event.getTo()))   return;
  if (apl != null && match.inStartRegion(event.getFrom()) && !match.inStartRegion(event.getTo())) {
    if (match.getCurrentState() != eMatchStatus.PLAYING) {
      player.teleport(team.getSpawnLocation());
      player.setVelocity(new org.bukkit.util.Vector());
      player.setFallDistance(0.0f);
    }
 else     player.getInventory().clear();
  }
 else   if (d > 0.3) {
    if (player.isSneaking() && d < SNEAK_DISTANCE && fallspeed < FREEFALL_THRESHOLD)     ;
 else     if (apl.getExitLocation() == null) {
      apl.setExitLocation(player.getLocation());
      for (      Player ref : match.getReferees())       ref.sendMessage(String.format(""String_Node_Str"",apl.getName()));
    }
  }
 else   if (apl.getExitLocation() != null) {
    if (apl.getExitLocation().distance(player.getLocation()) > VOID_SAFE_TRAVEL_DISTANCE) {
      player.setLastDamageCause(AutoRefPlayer.VOID_DEATH);
      player.setHealth(0);
    }
    apl.setExitLocation(null);
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void playerMove(PlayerMoveEvent event){
  Player player=event.getPlayer();
  AutoRefMatch match=plugin.getMatch(player.getWorld());
  if (match == null)   return;
  AutoRefPlayer apl=match.getPlayer(player);
  if (apl == null)   return;
  AutoRefTeam team=apl.getTeam();
  if (team == null)   return;
  double d=team.distanceToClosestRegion(event.getTo());
  double fallspeed=event.getFrom().getY() - event.getTo().getY();
  if (player.getGameMode() != GameMode.SURVIVAL || match.inStartRegion(event.getTo()))   return;
  if (apl != null && match.inStartRegion(event.getFrom()) && !match.inStartRegion(event.getTo())) {
    if (match.getCurrentState() != eMatchStatus.PLAYING) {
      player.teleport(team.getSpawnLocation());
      player.setVelocity(new org.bukkit.util.Vector());
      player.setFallDistance(0.0f);
    }
 else     player.getInventory().clear();
  }
 else   if (d > 0.3) {
    if (player.isSneaking() && d < SNEAK_DISTANCE && fallspeed < FREEFALL_THRESHOLD)     ;
 else     if (fallspeed == 0.0 && d > 0.5 && !player.isDead()) {
      player.setLastDamageCause(AutoRefPlayer.VOID_DEATH);
      player.setHealth(0);
    }
  }
}",0.8464639061927446
98264,"public double distanceToRegion(Location v){
  double x=v.getX(), y=v.getY(), z=v.getZ();
  Vector3 mx=getMaximumPoint(), mn=getMinimumPoint();
  return CuboidRegion.multimax(0,mn.x - x,x - mx.x - 1,mn.y - y,y - mx.y - 1,mn.z - z,z - mx.z - 1);
}","public double distanceToRegion(Location v){
  if (v == null)   return Double.POSITIVE_INFINITY;
  double x=v.getX(), y=v.getY(), z=v.getZ();
  Vector3 mx=getMaximumPoint(), mn=getMinimumPoint();
  return CuboidRegion.multimax(0,mn.x - x,x - mx.x - 1,mn.y - y,y - mx.y - 1,mn.z - z,z - mx.z - 1);
}",0.904059040590406
98265,"public Set<Player> getReferees(){
  Set<Player> refs=Sets.newHashSet();
  for (  Player p : world.getPlayers())   if (p.hasPermission(""String_Node_Str""))   refs.add(p);
  refs.removeAll(getPlayers());
  return refs;
}","public Set<Player> getReferees(){
  Set<Player> refs=Sets.newHashSet();
  for (  Player p : world.getPlayers())   if (p.hasPermission(""String_Node_Str""))   refs.add(p);
  for (  AutoRefPlayer apl : getPlayers())   if (apl.getPlayer() != null)   refs.remove(apl.getPlayer());
  return refs;
}",0.7992125984251969
98266,"private void EventType(String scls){
  this.scls=scls;
}","private void EventType(String eventClass,EventVisibility visibility){
  this.eventClass=eventClass;
  this.visibility=visibility;
}",0.5454545454545454
98267,"public void addEvent(TranscriptEvent event){
  AutoReferee plugin=AutoReferee.getInstance();
  transcript.add(event);
  for (  Player player : getReferees())   player.sendMessage(event.toString());
  if (plugin.getConfig().getBoolean(""String_Node_Str"",false))   plugin.getLogger().info(event.toString());
}","public void addEvent(TranscriptEvent event){
  AutoReferee plugin=AutoReferee.getInstance();
  transcript.add(event);
  Collection<Player> recipients=null;
switch (event.getType().getVisibility()) {
case REFEREES:
    recipients=getReferees();
  break;
case ALL:
recipients=getWorld().getPlayers();
break;
}
if (recipients != null) for (Player player : recipients) player.sendMessage(colorMessage(event.getMessage()));
if (plugin.getConfig().getBoolean(""String_Node_Str"",false)) plugin.getLogger().info(event.toString());
}",0.6369119420989143
98268,"@SuppressWarnings(""String_Node_Str"") private void loadWorldConfiguration(){
  worldConfigFile=new File(world.getWorldFolder(),""String_Node_Str"");
  worldConfig=YamlConfiguration.loadConfiguration(worldConfigFile);
  InputStream defConfigStream=AutoReferee.getInstance().getResource(""String_Node_Str"");
  if (defConfigStream != null)   worldConfig.setDefaults(YamlConfiguration.loadConfiguration(defConfigStream));
  worldConfig.options().copyDefaults(true);
  worldConfig.options().header(AutoReferee.getInstance().getDescription().getFullName());
  worldConfig.options().copyHeader(false);
  teams=new HashSet<AutoRefTeam>();
  startMechanisms=new HashSet<StartMechanism>();
  for (  Map<?,?> map : worldConfig.getMapList(""String_Node_Str""))   teams.add(AutoRefTeam.fromMap((Map<String,Object>)map,this));
  for (  String sm : worldConfig.getStringList(""String_Node_Str""))   startMechanisms.add(StartMechanism.unserialize(world,sm));
  if (worldConfig.isString(""String_Node_Str""))   startRegion=CuboidRegion.fromCoords(worldConfig.getString(""String_Node_Str""));
  if (worldConfig.isString(""String_Node_Str""))   startTime=AutoReferee.parseTimeString(worldConfig.getString(""String_Node_Str""));
  mapName=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  allowFriendlyFire=worldConfig.getBoolean(""String_Node_Str"",false);
  allowCraft=worldConfig.getBoolean(""String_Node_Str"",false);
}","@SuppressWarnings(""String_Node_Str"") private void loadWorldConfiguration(){
  worldConfigFile=new File(world.getWorldFolder(),""String_Node_Str"");
  worldConfig=YamlConfiguration.loadConfiguration(worldConfigFile);
  InputStream defConfigStream=AutoReferee.getInstance().getResource(""String_Node_Str"");
  if (defConfigStream != null)   worldConfig.setDefaults(YamlConfiguration.loadConfiguration(defConfigStream));
  worldConfig.options().copyDefaults(true);
  worldConfig.options().header(AutoReferee.getInstance().getDescription().getFullName());
  worldConfig.options().copyHeader(false);
  teams=new HashSet<AutoRefTeam>();
  startMechanisms=new HashSet<StartMechanism>();
  for (  Map<?,?> map : worldConfig.getMapList(""String_Node_Str""))   teams.add(AutoRefTeam.fromMap((Map<String,Object>)map,this));
  for (  String sm : worldConfig.getStringList(""String_Node_Str""))   startMechanisms.add(StartMechanism.unserialize(world,sm));
  if (worldConfig.isString(""String_Node_Str""))   startRegion=CuboidRegion.fromCoords(worldConfig.getString(""String_Node_Str""));
  if (worldConfig.isString(""String_Node_Str""))   startTime=AutoReferee.parseTimeString(worldConfig.getString(""String_Node_Str""));
  mapName=worldConfig.getString(""String_Node_Str"",""String_Node_Str"");
  mapAuthors=worldConfig.getStringList(""String_Node_Str"");
  allowFriendlyFire=worldConfig.getBoolean(""String_Node_Str"",false);
  allowCraft=worldConfig.getBoolean(""String_Node_Str"",false);
}",0.9792909792909792
98269,"@Override public String toString(){
  return String.format(""String_Node_Str"",this.getTimestamp(),this.message);
}","@Override public String toString(){
  return String.format(""String_Node_Str"",this.getTimestamp(),this.getMessage());
}",0.9696969696969696
98270,"public void writeStats(PrintWriter fw){
  String pname=this.getPlayerName();
  String accuracyInfo=""String_Node_Str"";
  if (shotsFired > 0)   accuracyInfo=""String_Node_Str"" + Integer.toString(100 * shotsHit / shotsFired) + ""String_Node_Str"";
  fw.println(""String_Node_Str"" + pname + ""String_Node_Str""+ Integer.toString(this.totalKills)+ ""String_Node_Str""+ Integer.toString(this.totalDeaths)+ ""String_Node_Str""+ accuracyInfo);
  for (  Map.Entry<String,Integer> kill : this.kills.entrySet())   fw.println(""String_Node_Str"" + pname + ""String_Node_Str""+ kill.getKey()+ ""String_Node_Str""+ kill.getValue().toString()+ ""String_Node_Str"");
  for (  Map.Entry<DamageCause,Integer> death : this.deaths.entrySet())   fw.println(""String_Node_Str"" + death.getKey().toString() + ""String_Node_Str""+ pname+ ""String_Node_Str""+ death.getValue().toString()+ ""String_Node_Str"");
  for (  Map.Entry<DamageCause,Integer> damage : this.damage.entrySet())   fw.println(""String_Node_Str"" + damage.getKey().toString() + ""String_Node_Str""+ pname+ ""String_Node_Str""+ damage.getValue().toString()+ ""String_Node_Str"");
}","public void writeStats(PrintWriter fw){
  String pname=this.getPlayerName();
  fw.println(String.format(""String_Node_Str"",pname,totalKills,totalDeaths,getAccuracy()));
  for (  Map.Entry<AutoRefPlayer,Integer> kill : this.kills.entrySet())   fw.println(String.format(""String_Node_Str"",pname,kill.getKey().getPlayerName(),kill.getValue()));
  for (  Map.Entry<DamageCause,Integer> death : this.deaths.entrySet())   fw.println(String.format(""String_Node_Str"",death.getKey().toString(),pname,death.getValue()));
  for (  Map.Entry<DamageCause,Integer> damage : this.damage.entrySet())   fw.println(String.format(""String_Node_Str"",damage.getKey().toString(),pname,damage.getValue()));
}",0.2820078962210942
98271,"public void registerKill(PlayerDeathEvent e){
  if (e.getEntity().getKiller() != getPlayer())   return;
  String pname=e.getEntity().getName();
  kills.put(pname,1 + kills.get(pname));
  ++totalKills;
}","public void registerKill(PlayerDeathEvent e){
  if (e.getEntity().getKiller() != getPlayer())   return;
  AutoRefPlayer apl=getTeam().getMatch().getPlayer(e.getEntity());
  kills.put(apl,1 + kills.get(apl));
  ++totalKills;
}",0.8056206088992974
98272,"public void registerDeath(PlayerDeathEvent e){
  if (e.getEntity() != getPlayer())   return;
  AutoRefPlayer.DamageCause dc=AutoRefPlayer.DamageCause.fromDamageEvent(e.getEntity().getLastDamageCause());
  deaths.put(dc,1 + deaths.get(dc));
  ++totalDeaths;
  AutoRefMatch match=getTeam().getMatch();
  Location loc=e.getEntity().getLocation();
  match.addEvent(new TranscriptEvent(match,TranscriptEvent.EventType.PLAYER_DEATH,String.format(""String_Node_Str"",getPlayerName(),dc),loc,this,dc.p));
}","public void registerDeath(PlayerDeathEvent e){
  if (e.getEntity() != getPlayer())   return;
  AutoRefPlayer.DamageCause dc=AutoRefPlayer.DamageCause.fromDamageEvent(e.getEntity().getLastDamageCause());
  deaths.put(dc,1 + deaths.get(dc));
  ++totalDeaths;
  AutoRefMatch match=getTeam().getMatch();
  Location loc=e.getEntity().getLocation();
  match.addEvent(new TranscriptEvent(match,TranscriptEvent.EventType.PLAYER_DEATH,e.getDeathMessage(),loc,this,dc.p));
}",0.9291666666666668
98273,"public void hasSeen(AutoRefPlayer apl){
  long ctime=location.getWorld().getFullTime();
  if (lastSeen > 0 && ctime - lastSeen < SEEN_COOLDOWN)   return;
  String message=String.format(""String_Node_Str"",apl.getPlayerName(),blockdata.getRawName());
  getMatch().addEvent(new TranscriptEvent(apl.getTeam().getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,message,location,apl,blockdata));
  lastSeen=ctime;
}","public void hasSeen(AutoRefPlayer apl){
  long ctime=location.getWorld().getFullTime();
  if (lastSeen > 0 && ctime - lastSeen < SEEN_COOLDOWN)   return;
  if (apl != null) {
    String message=String.format(""String_Node_Str"",apl.getPlayerName(),blockdata.getRawName());
    getMatch().addEvent(new TranscriptEvent(apl.getTeam().getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,message,location,apl,blockdata));
  }
  lastSeen=ctime;
}",0.9328621908127208
98274,"public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){
  if (!(sender instanceof Player))   return false;
  Player player=(Player)sender;
  World world=player.getWorld();
  AutoRefMatch match=getMatch(world);
  args=new StrTokenizer(StringUtils.join(args,' '),StrMatcher.splitMatcher(),StrMatcher.quoteMatcher()).setTrimmerMatcher(StrMatcher.trimMatcher()).getTokenArray();
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName())) {
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null) {
      match.saveWorldConfiguration();
      return true;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0])) {
      if (match == null) {
        addMatch(match=new AutoRefMatch(world,false));
        match.saveWorldConfiguration();
        match.setCurrentState(eMatchStatus.NONE);
      }
 else       sender.sendMessage(""String_Node_Str"" + match.worldConfig.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      return true;
    }
    if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[0]))     try {
      String mapName=args[1];
      World mw;
      Long checksum=null;
      if (args.length >= 3)       checksum=Long.valueOf(args[2],16);
      File existingWorld=new File(mapName);
      if (existingWorld.exists() && existingWorld.isDirectory() && new File(existingWorld,AutoReferee.CFG_FILENAME).exists())       mw=getServer().createWorld(WorldCreator.name(mapName));
 else       mw=createMatchWorld(mapName,checksum);
      if (mw == null)       getLogger().info(""String_Node_Str"" + mapName + ""String_Node_Str"");
 else {
        getLogger().info(""String_Node_Str"" + mapName + ""String_Node_Str""+ player.getName());
        player.teleport(mw.getSpawnLocation());
      }
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 2 && args[0].toLowerCase().startsWith(""String_Node_Str""))     try {
      String mapName=args[1];
      File mapFolder=AutoRefMatch.getMapFolder(mapName,null);
      if (null != mapFolder) {
        long checksum=AutoRefMatch.recursiveCRC32(mapFolder);
        File cfgFile=new File(mapFolder,CFG_FILENAME);
        if (!cfgFile.exists())         return true;
        mapName=YamlConfiguration.loadConfiguration(cfgFile).getString(""String_Node_Str"",""String_Node_Str"");
        getLogger().info(mapName + ""String_Node_Str"" + Long.toHexString(checksum)+ ""String_Node_Str"");
      }
 else       getLogger().info(""String_Node_Str"" + mapName);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      world.save();
      match.saveWorldConfiguration();
      File mapLibrary=AutoRefMatch.getMapLibrary();
      if (!mapLibrary.exists())       return true;
      String folderName=player.getName() + ""String_Node_Str"" + Long.toHexString(new Date().getTime());
      File archiveFolder=new File(mapLibrary,folderName);
      if (!archiveFolder.exists())       archiveFolder.mkdir();
      match.archiveMapData(archiveFolder);
      long checksum=AutoRefMatch.recursiveCRC32(archiveFolder);
      getLogger().info(match.getMapName() + ""String_Node_Str"" + Long.toHexString(checksum)+ ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        match.logPlayerStats(args.length >= 3 ? args[2] : null);
      }
 else       return false;
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      if (args.length >= 2)       match.setCurrentState(eMatchStatus.valueOf(args[1].toUpperCase()));
      getLogger().info(""String_Node_Str"" + match.getCurrentState().name());
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0])) {
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        int wincondtool=ZoneListener.parseTool(getConfig().getString(""String_Node_Str"",null),Material.GOLD_SPADE.getId());
        ItemStack toolitem=new ItemStack(wincondtool);
        PlayerInventory inv=player.getInventory();
        inv.addItem(toolitem);
        sender.sendMessage(""String_Node_Str"" + toolitem.getType().name());
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        int mechtool=ZoneListener.parseTool(getConfig().getString(""String_Node_Str"",null),Material.GOLD_AXE.getId());
        ItemStack toolitem=new ItemStack(mechtool);
        PlayerInventory inv=player.getInventory();
        inv.addItem(toolitem);
        sender.sendMessage(""String_Node_Str"" + toolitem.getType().name());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    Set<AutoRefTeam> lookupTeams=null;
    if (args.length > 1) {
      AutoRefTeam t=match.teamNameLookup(args[1]);
      if (t == null) {
        sender.sendMessage(""String_Node_Str"" + args[1]);
        return true;
      }
      lookupTeams=Sets.newHashSet();
      lookupTeams.add(t);
    }
 else     lookupTeams=match.getTeams();
    if (lookupTeams == null)     return false;
    for (    AutoRefTeam team : lookupTeams) {
      sender.sendMessage(team.getName() + ""String_Node_Str"");
      if (team.getRegions().size() > 0)       for (      CuboidRegion reg : team.getRegions()) {
        Vector3 mn=reg.getMinimumPoint(), mx=reg.getMaximumPoint();
        sender.sendMessage(""String_Node_Str"" + mn.toCoords() + ""String_Node_Str""+ mx.toCoords()+ ""String_Node_Str"");
      }
 else       sender.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    WorldEditPlugin worldEdit=getWorldEdit();
    if (worldEdit == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 0) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    AutoRefTeam t, START=new AutoRefTeam();
    String tname=args[0];
    t=""String_Node_Str"".equals(tname) ? START : match.teamNameLookup(tname);
    if (t == null) {
      sender.sendMessage(""String_Node_Str"" + tname);
      sender.sendMessage(""String_Node_Str"" + match.getTeamList());
      return true;
    }
    Selection sel=worldEdit.getSelection(player);
    if ((sel instanceof CuboidSelection)) {
      CuboidSelection csel=(CuboidSelection)sel;
      CuboidRegion reg=new CuboidRegion(new Vector3(csel.getNativeMinimumPoint()),new Vector3(csel.getNativeMaximumPoint()));
      if (t == START) {
        match.setStartRegion(reg);
        sender.sendMessage(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        t.getRegions().add(reg);
        sender.sendMessage(""String_Node_Str"" + t.getName() + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    AutoRefPlayer apl=match.getPlayer(player);
    if (apl == null)     sender.sendMessage(""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str"");
 else     sender.sendMessage(""String_Node_Str"" + apl.getTeam().getName());
    for (    AutoRefTeam team : match.getSortedTeams())     sender.sendMessage(String.format(""String_Node_Str"",team.getName(),team.getPlayers().size(),team.getPlayerList()));
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && !isAutoMode()) {
    AutoRefTeam team=args.length > 0 ? match.teamNameLookup(args[0]) : match.getArbitraryTeam();
    if (team == null) {
      if (args.length > 0) {
        sender.sendMessage(""String_Node_Str"" + args[0]);
        sender.sendMessage(""String_Node_Str"" + match.getTeamList());
      }
      return true;
    }
    Player target=args.length > 1 ? getServer().getPlayer(args[1]) : player;
    if (target == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (target != player && !player.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    AutoRefTeam pteam=match.getPlayerTeam(target);
    if (team != pteam) {
      if (pteam != null)       pteam.leave(player);
      team.join(target);
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && !isAutoMode()) {
    Player target=args.length > 0 ? getServer().getPlayer(args[0]) : player;
    if (target == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (target != player && !player.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    match.leaveTeam(target);
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && match.getCurrentState().ordinal() < eMatchStatus.PLAYING.ordinal()) {
    match.prepareMatch();
    return true;
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args){
  if (!(sender instanceof Player))   return false;
  Player player=(Player)sender;
  World world=player.getWorld();
  AutoRefMatch match=getMatch(world);
  args=new StrTokenizer(StringUtils.join(args,' '),StrMatcher.splitMatcher(),StrMatcher.quoteMatcher()).setTrimmerMatcher(StrMatcher.trimMatcher()).getTokenArray();
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName())) {
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null) {
      match.saveWorldConfiguration();
      return true;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0])) {
      if (match == null) {
        addMatch(match=new AutoRefMatch(world,false));
        match.saveWorldConfiguration();
        match.setCurrentState(eMatchStatus.NONE);
      }
 else       sender.sendMessage(""String_Node_Str"" + match.worldConfig.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      return true;
    }
    if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[0]))     try {
      String mapName=args[1];
      World mw;
      Long checksum=null;
      if (args.length >= 3)       checksum=Long.valueOf(args[2],16);
      File existingWorld=new File(mapName);
      if (existingWorld.exists() && existingWorld.isDirectory() && new File(existingWorld,AutoReferee.CFG_FILENAME).exists())       mw=getServer().createWorld(WorldCreator.name(mapName));
 else       mw=createMatchWorld(mapName,checksum);
      if (mw == null)       getLogger().info(""String_Node_Str"" + mapName + ""String_Node_Str"");
 else {
        getLogger().info(""String_Node_Str"" + mapName + ""String_Node_Str""+ player.getName());
        player.teleport(mw.getSpawnLocation());
      }
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 2 && args[0].toLowerCase().startsWith(""String_Node_Str""))     try {
      String mapName=args[1];
      File mapFolder=AutoRefMatch.getMapFolder(mapName,null);
      if (null != mapFolder) {
        long checksum=AutoRefMatch.recursiveCRC32(mapFolder);
        File cfgFile=new File(mapFolder,CFG_FILENAME);
        if (!cfgFile.exists())         return true;
        mapName=YamlConfiguration.loadConfiguration(cfgFile).getString(""String_Node_Str"",""String_Node_Str"");
        getLogger().info(mapName + ""String_Node_Str"" + Long.toHexString(checksum)+ ""String_Node_Str"");
      }
 else       getLogger().info(""String_Node_Str"" + mapName);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      world.save();
      match.saveWorldConfiguration();
      File mapLibrary=AutoRefMatch.getMapLibrary();
      if (!mapLibrary.exists())       return true;
      String folderName=player.getName() + ""String_Node_Str"" + Long.toHexString(new Date().getTime());
      File archiveFolder=new File(mapLibrary,folderName);
      if (!archiveFolder.exists())       archiveFolder.mkdir();
      match.archiveMapData(archiveFolder);
      long checksum=AutoRefMatch.recursiveCRC32(archiveFolder);
      getLogger().info(match.getMapName() + ""String_Node_Str"" + Long.toHexString(checksum)+ ""String_Node_Str"");
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        match.logPlayerStats(args.length >= 3 ? args[2] : null);
      }
 else       return false;
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0]) && match != null)     try {
      if (args.length >= 2)       match.setCurrentState(eMatchStatus.valueOf(args[1].toUpperCase()));
      getLogger().info(""String_Node_Str"" + match.getCurrentState().name());
      return true;
    }
 catch (    Exception e) {
      return false;
    }
    if (args.length >= 1 && ""String_Node_Str"".equalsIgnoreCase(args[0])) {
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        int wincondtool=ZoneListener.parseTool(getConfig().getString(""String_Node_Str"",null),Material.GOLD_SPADE.getId());
        ItemStack toolitem=new ItemStack(wincondtool);
        PlayerInventory inv=player.getInventory();
        inv.addItem(toolitem);
        sender.sendMessage(""String_Node_Str"" + toolitem.getType().name());
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      if (args.length >= 2 && ""String_Node_Str"".equalsIgnoreCase(args[1])) {
        int mechtool=ZoneListener.parseTool(getConfig().getString(""String_Node_Str"",null),Material.GOLD_AXE.getId());
        ItemStack toolitem=new ItemStack(mechtool);
        PlayerInventory inv=player.getInventory();
        inv.addItem(toolitem);
        sender.sendMessage(""String_Node_Str"" + toolitem.getType().name());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    Set<AutoRefTeam> lookupTeams=null;
    if (args.length > 1) {
      AutoRefTeam t=match.teamNameLookup(args[1]);
      if (t == null) {
        sender.sendMessage(""String_Node_Str"" + args[1]);
        return true;
      }
      lookupTeams=Sets.newHashSet();
      lookupTeams.add(t);
    }
 else     lookupTeams=match.getTeams();
    if (lookupTeams == null)     return false;
    for (    AutoRefTeam team : lookupTeams) {
      sender.sendMessage(team.getName() + ""String_Node_Str"");
      if (team.getRegions().size() > 0)       for (      CuboidRegion reg : team.getRegions()) {
        Vector3 mn=reg.getMinimumPoint(), mx=reg.getMaximumPoint();
        sender.sendMessage(""String_Node_Str"" + mn.toCoords() + ""String_Node_Str""+ mx.toCoords()+ ""String_Node_Str"");
      }
 else       sender.sendMessage(""String_Node_Str"");
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    WorldEditPlugin worldEdit=getWorldEdit();
    if (worldEdit == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (args.length == 0) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    AutoRefTeam t, START=new AutoRefTeam();
    String tname=args[0];
    t=""String_Node_Str"".equals(tname) ? START : match.teamNameLookup(tname);
    if (t == null) {
      sender.sendMessage(""String_Node_Str"" + tname);
      sender.sendMessage(""String_Node_Str"" + match.getTeamList());
      return true;
    }
    Selection sel=worldEdit.getSelection(player);
    if ((sel instanceof CuboidSelection)) {
      CuboidSelection csel=(CuboidSelection)sel;
      CuboidRegion reg=new CuboidRegion(new Vector3(csel.getNativeMinimumPoint()),new Vector3(csel.getNativeMaximumPoint()));
      if (t == START) {
        match.setStartRegion(reg);
        sender.sendMessage(""String_Node_Str"" + ""String_Node_Str"");
      }
 else {
        t.getRegions().add(reg);
        sender.sendMessage(""String_Node_Str"" + t.getName() + ""String_Node_Str"");
      }
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null) {
    sender.sendMessage(""String_Node_Str"" + ChatColor.GRAY + match.getMapName()+ ChatColor.ITALIC+ ""String_Node_Str""+ match.getMapAuthors());
    AutoRefPlayer apl=match.getPlayer(player);
    if (apl == null)     sender.sendMessage(""String_Node_Str"" + ChatColor.GRAY + ""String_Node_Str"");
 else     sender.sendMessage(""String_Node_Str"" + apl.getTeam().getName());
    for (    AutoRefTeam team : match.getSortedTeams())     sender.sendMessage(String.format(""String_Node_Str"",team.getName(),team.getPlayers().size(),team.getPlayerList()));
    long timestamp=(match.getWorld().getFullTime() - match.getStartTicks()) / 20L;
    sender.sendMessage(""String_Node_Str"" + ChatColor.GRAY + match.getCurrentState().name());
    if (match.getCurrentState() == eMatchStatus.PLAYING)     sender.sendMessage(String.format(ChatColor.GRAY + ""String_Node_Str"",timestamp / 3600L,(timestamp / 60L) % 60L,timestamp % 60L));
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && !isAutoMode()) {
    AutoRefTeam team=args.length > 0 ? match.teamNameLookup(args[0]) : match.getArbitraryTeam();
    if (team == null) {
      if (args.length > 0) {
        sender.sendMessage(""String_Node_Str"" + args[0]);
        sender.sendMessage(""String_Node_Str"" + match.getTeamList());
      }
      return true;
    }
    Player target=args.length > 1 ? getServer().getPlayer(args[1]) : player;
    if (target == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (target != player && !player.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    AutoRefTeam pteam=match.getPlayerTeam(target);
    if (team != pteam) {
      if (pteam != null)       pteam.leave(player);
      team.join(target);
    }
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && !isAutoMode()) {
    Player target=args.length > 0 ? getServer().getPlayer(args[0]) : player;
    if (target == null) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    if (target != player && !player.hasPermission(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
    match.leaveTeam(target);
    return true;
  }
  if (""String_Node_Str"".equalsIgnoreCase(cmd.getName()) && match != null && match.getCurrentState().ordinal() < eMatchStatus.PLAYING.ordinal()) {
    match.prepareMatch();
    return true;
  }
  return false;
}",0.788827278851635
98275,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void blockInteract(PlayerInteractEvent event){
  Player pl=event.getPlayer();
  if (event.hasBlock()) {
    AutoRefMatch match=plugin.getMatch(event.getClickedBlock().getWorld());
    AutoRefPlayer apl=match == null ? null : match.getPlayer(pl);
    if (match != null && apl != null) {
      Location loc=event.getClickedBlock().getLocation();
      for (      AutoRefTeam.SourceInventory sinv : apl.getTeam().targetChests.values())       if (loc.equals(sinv.location))       sinv.hasSeen(apl);
      match.checkWinConditions(null);
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void blockInteract(PlayerInteractEvent event){
  Player pl=event.getPlayer();
  if (event.hasBlock()) {
    AutoRefMatch match=plugin.getMatch(event.getClickedBlock().getWorld());
    AutoRefPlayer apl=match == null ? null : match.getPlayer(pl);
    if (match != null && apl != null) {
      Location loc=event.getClickedBlock().getLocation();
      for (      SourceInventory sinv : apl.getTeam().targetChests.values())       if (loc.equals(sinv.location))       sinv.hasSeen(apl);
      match.checkWinConditions(null);
    }
  }
}",0.9901960784313726
98276,"public void matchComplete(AutoRefTeam t){
  this.broadcast(t.getName() + ""String_Node_Str"");
  setCurrentState(eMatchStatus.COMPLETED);
  for (  AutoRefPlayer apl : getPlayers()) {
    apl.getPlayer().setGameMode(GameMode.CREATIVE);
    apl.getPlayer().getInventory().clear();
  }
  addEvent(new TranscriptEvent(this,TranscriptEvent.EventType.MATCH_END,""String_Node_Str"",null,null,null));
  setWinningTeam(t);
  logPlayerStats(null);
  int termDelay=AutoReferee.getInstance().getConfig().getInt(""String_Node_Str"",COMPLETED_SECONDS);
  AutoReferee.getInstance().getServer().getScheduler().scheduleSyncDelayedTask(AutoReferee.getInstance(),new MatchEndTask(),termDelay * 20L);
}","public void matchComplete(AutoRefTeam t){
  this.broadcast(t.getName() + ""String_Node_Str"");
  setCurrentState(eMatchStatus.COMPLETED);
  for (  AutoRefPlayer apl : getPlayers()) {
    Player pl=apl.getPlayer();
    if (pl == null)     continue;
    pl.setGameMode(GameMode.CREATIVE);
    pl.getInventory().clear();
  }
  addEvent(new TranscriptEvent(this,TranscriptEvent.EventType.MATCH_END,""String_Node_Str"",null,null,null));
  setWinningTeam(t);
  logPlayerStats(null);
  AutoReferee plugin=AutoReferee.getInstance();
  int termDelay=plugin.getConfig().getInt(""String_Node_Str"",COMPLETED_SECONDS);
  plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,new MatchEndTask(),termDelay * 20L);
}",0.8523878437047757
98277,"public void join(Player pl){
  AutoRefPlayer apl=new AutoRefPlayer(pl,this);
  if (players.contains(apl))   return;
  players.add(apl);
  pl.teleport(getSpawnLocation());
  pl.setGameMode(GameMode.SURVIVAL);
  if (match.getCurrentState().ordinal() >= eMatchStatus.PLAYING.ordinal())   return;
  String colorName=getPlayerName(pl);
  match.broadcast(colorName + ""String_Node_Str"" + getName());
  match.checkTeamsReady();
}","public void join(Player pl){
  AutoRefPlayer apl=new AutoRefPlayer(pl,this);
  if (players.contains(apl))   return;
  players.add(apl);
  if (match != null && match.getCurrentState() != eMatchStatus.PLAYING)   pl.teleport(getSpawnLocation());
  pl.setGameMode(GameMode.SURVIVAL);
  if (match.getCurrentState().ordinal() >= eMatchStatus.PLAYING.ordinal())   return;
  String colorName=getPlayerName(pl);
  match.broadcast(colorName + ""String_Node_Str"" + getName());
  match.checkTeamsReady();
}",0.9212253829321664
98278,"public void hasSeen(AutoRefPlayer apl){
  if (seen)   return;
  String message=String.format(""String_Node_Str"",apl.getPlayerName(),blockdata.getRawName());
  getMatch().addEvent(new TranscriptEvent(apl.getTeam().getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,message,location,apl,blockdata));
  seen=true;
}","public void hasSeen(AutoRefPlayer apl){
  long ctime=location.getWorld().getFullTime();
  if (lastSeen > 0 && ctime - lastSeen < SEEN_COOLDOWN)   return;
  String message=String.format(""String_Node_Str"",apl.getPlayerName(),blockdata.getRawName());
  getMatch().addEvent(new TranscriptEvent(apl.getTeam().getMatch(),TranscriptEvent.EventType.OBJECTIVE_FOUND,message,location,apl,blockdata));
  lastSeen=ctime;
}",0.8437067773167358
98279,"public void doRenderLiving(EntityLiving entityliving,double d,double d1,double d2,float f,float f1){
  renderChocobo((EntityChocobo)entityliving,d,d1,d2,f,f1);
}","@Override public void doRenderLiving(EntityLiving entityliving,double d,double d1,double d2,float f,float f1){
  renderChocobo((EntityChocobo)entityliving,d,d1,d2,f,f1);
}",0.9698795180722892
98280,"public void doRender(Entity entity,double d,double d1,double d2,float f,float f1){
  renderChocobo((EntityChocobo)entity,d,d1,d2,f,f1);
}","@Override public void doRender(Entity entity,double d,double d1,double d2,float f,float f1){
  renderChocobo((EntityChocobo)entity,d,d1,d2,f,f1);
}",0.9647887323943662
98281,"protected void preRenderCallback(EntityLiving entityliving,float f){
  preRenderScale((EntityChocobo)entityliving,f);
}","@Override protected void preRenderCallback(EntityLivingBase entityliving,float f){
  preRenderScale((EntityChocobo)entityliving,f);
}",0.9444444444444444
98282,"protected void preRenderScale(EntityChocobo entitychocobo,float f){
  float scaleFactor=0.65F;
  GL11.glScalef(scaleFactor,scaleFactor,scaleFactor);
  if (entitychocobo.riddenByEntity != null) {
    GL11.glTranslated(0.5,0.0,-0.5);
  }
}","protected void preRenderScale(EntityChocobo entitychocobo,float f){
  float scaleFactor=0.8F;
  GL11.glScalef(scaleFactor,scaleFactor,scaleFactor);
  if (entitychocobo.riddenByEntity != null) {
    GL11.glTranslated(0.5,0.0,-0.5);
  }
}",0.9936575052854124
98283,"public EntityChocoboBlack(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canJumpHigh=Constants.CHOCOBO_BLACK_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_BLACK_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_BLACK_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_BLACK_AIRSPEEDFACT;
}","public EntityChocoboBlack(World world){
  super(world);
  this.color=chocoboColor.BLACK;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canJumpHigh=Constants.CHOCOBO_BLACK_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_BLACK_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_BLACK_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_BLACK_AIRSPEEDFACT;
}",0.9639344262295082
98284,"public EntityChocoboBlue(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canCrossWater=true;
  this.canClimb=false;
  this.canJumpHigh=Constants.CHOCOBO_BLUE_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_BLUE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_BLUE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_BLUE_AIRSPEEDFACT;
}","public EntityChocoboBlue(World world){
  super(world);
  this.color=chocoboColor.BLUE;
  this.setHealth(this.getMaxHealth());
  this.canCrossWater=true;
  this.canClimb=false;
  this.canJumpHigh=Constants.CHOCOBO_BLUE_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_BLUE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_BLUE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_BLUE_AIRSPEEDFACT;
}",0.9646799116997792
98285,"@Override public chocoboColor getBabyAnimalColor(EntityAgeable otherAnimalParent){
  if (otherAnimalParent instanceof EntityChocobo) {
    EntityChocobo otherParent=(EntityChocobo)otherAnimalParent;
    boolean bothFedGold=this.fedGold && otherParent.fedGold;
    int randColor=rand.nextInt(100);
    chocoboColor chicoboColor=chocoboColor.BLUE;
switch (otherParent.color) {
case YELLOW:
      if (randColor < 50) {
        chicoboColor=chocoboColor.YELLOW;
      }
    break;
case BLUE:
  if (bothFedGold) {
    if (randColor > 60) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 30) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
 else {
    if (randColor > 80) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 40) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
break;
case BLACK:
case WHITE:
if (bothFedGold) {
if (randColor > 70) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 35) {
  chicoboColor=otherParent.color;
}
}
 else {
if (randColor > 90) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 45) {
  chicoboColor=otherParent.color;
}
}
break;
}
return chicoboColor;
}
 else {
return null;
}
}","@Override public chocoboColor getBabyAnimalColor(EntityAgeable otherAnimalParent){
  if (otherAnimalParent instanceof EntityChocobo) {
    EntityChocobo otherParent=(EntityChocobo)otherAnimalParent;
    boolean bothFedGold=this.fedGold && otherParent.fedGold;
    int randColor=rand.nextInt(100);
    chocoboColor chicoboColor=chocoboColor.BLUE;
    System.out.println(""String_Node_Str"" + randColor);
switch (otherParent.color) {
case YELLOW:
      if (randColor < 50) {
        chicoboColor=chocoboColor.YELLOW;
      }
    break;
case BLUE:
  if (bothFedGold) {
    if (randColor > 60) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 30) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
 else {
    if (randColor > 80) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 40) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
break;
case BLACK:
case WHITE:
if (bothFedGold) {
if (randColor > 70) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 35) {
  chicoboColor=otherParent.color;
}
}
 else {
if (randColor > 90) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 45) {
  chicoboColor=otherParent.color;
}
}
break;
}
System.out.println(""String_Node_Str"" + chicoboColor);
return chicoboColor;
}
 else {
return null;
}
}",0.926179911254538
98286,"public EntityChocoboGold(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_GOLD_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_GOLD_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_GOLD_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_GOLD_AIRSPEEDFACT;
}","public EntityChocoboGold(World world){
  super(world);
  this.color=chocoboColor.GOLD;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_GOLD_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_GOLD_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_GOLD_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_GOLD_AIRSPEEDFACT;
}",0.9645232815964524
98287,"public EntityChocoboGreen(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_GREEN_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_GREEN_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_GREEN_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_GREEN_AIRSPEEDFACT;
}","public EntityChocoboGreen(World world){
  super(world);
  this.color=chocoboColor.GREEN;
  this.setHealth(this.getMaxHealth());
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_GREEN_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_GREEN_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_GREEN_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_GREEN_AIRSPEEDFACT;
}",0.9621993127147768
98288,"@Override public chocoboColor getBabyAnimalColor(EntityAgeable otherAnimalParent){
  if (otherAnimalParent instanceof EntityChocobo) {
    EntityChocobo otherParent=(EntityChocobo)otherAnimalParent;
    boolean bothFedGold=this.fedGold && otherParent.fedGold;
    int randColor=rand.nextInt(100);
    chocoboColor chicoboColor=chocoboColor.GREEN;
switch (otherParent.color) {
case YELLOW:
      if (randColor < 50) {
        chicoboColor=chocoboColor.YELLOW;
      }
    break;
case BLUE:
  if (bothFedGold) {
    if (randColor > 60) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 30) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
 else {
    if (randColor > 80) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 40) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
break;
case BLACK:
case WHITE:
if (bothFedGold) {
if (randColor > 70) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 35) {
  chicoboColor=otherParent.color;
}
}
 else {
if (randColor > 90) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 45) {
  chicoboColor=otherParent.color;
}
}
break;
}
return chicoboColor;
}
 else {
return null;
}
}","@Override public chocoboColor getBabyAnimalColor(EntityAgeable otherAnimalParent){
  if (otherAnimalParent instanceof EntityChocobo) {
    EntityChocobo otherParent=(EntityChocobo)otherAnimalParent;
    boolean bothFedGold=this.fedGold && otherParent.fedGold;
    int randColor=rand.nextInt(100);
    chocoboColor chicoboColor=chocoboColor.GREEN;
    System.out.println(""String_Node_Str"" + randColor);
switch (otherParent.color) {
case YELLOW:
      if (randColor < 50) {
        chicoboColor=chocoboColor.YELLOW;
      }
    break;
case BLUE:
  if (bothFedGold) {
    if (randColor > 60) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 30) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
 else {
    if (randColor > 80) {
      chicoboColor=chocoboColor.WHITE;
    }
 else     if (randColor > 40) {
      chicoboColor=chocoboColor.BLUE;
    }
  }
break;
case BLACK:
case WHITE:
if (bothFedGold) {
if (randColor > 70) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 35) {
  chicoboColor=otherParent.color;
}
}
 else {
if (randColor > 90) {
  chicoboColor=chocoboColor.YELLOW;
}
 else if (randColor > 45) {
  chicoboColor=otherParent.color;
}
}
break;
}
System.out.println(""String_Node_Str"" + chicoboColor);
return chicoboColor;
}
 else {
return null;
}
}",0.9262394195888756
98289,"public EntityChocoboPink(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_PINK_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_PINK_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_PINK_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_PINK_AIRSPEEDFACT;
}","public EntityChocoboPink(World world){
  super(world);
  this.color=chocoboColor.PINK;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_PINK_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_PINK_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_PINK_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_PINK_AIRSPEEDFACT;
}",0.9645232815964524
98290,"public EntityChocoboPurple(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_PURPLE_CANJUMPHIGH;
  this.canFly=true;
  this.isImmuneToFire=true;
  this.landSpeedFactor=Constants.CHOCOBO_PURPLE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_PURPLE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_PURPLE_AIRSPEEDFACT;
}","public EntityChocoboPurple(World world){
  super(world);
  this.color=chocoboColor.PURPLE;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_PURPLE_CANJUMPHIGH;
  this.canFly=true;
  this.isImmuneToFire=true;
  this.landSpeedFactor=Constants.CHOCOBO_PURPLE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_PURPLE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_PURPLE_AIRSPEEDFACT;
}",0.9632034632034632
98291,"public EntityChocoboRed(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_RED_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_RED_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_RED_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_RED_AIRSPEEDFACT;
}","public EntityChocoboRed(World world){
  super(world);
  this.color=chocoboColor.RED;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canFly=true;
  this.canJumpHigh=Constants.CHOCOBO_RED_CANJUMPHIGH;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_RED_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_RED_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_RED_AIRSPEEDFACT;
}",0.9652076318742986
98292,"public EntityChocoboWhite(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canJumpHigh=Constants.CHOCOBO_WHITE_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_WHITE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_WHITE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_WHITE_AIRSPEEDFACT;
}","public EntityChocoboWhite(World world){
  super(world);
  this.color=chocoboColor.WHITE;
  this.setHealth(this.getMaxHealth());
  this.canClimb=true;
  this.canCrossWater=true;
  this.canJumpHigh=Constants.CHOCOBO_WHITE_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_WHITE_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_WHITE_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_WHITE_AIRSPEEDFACT;
}",0.9639344262295082
98293,"public EntityChocoboYellow(World world){
  super(world);
  this.setHealth(this.getMaxHealth());
  this.canClimb=false;
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_YELLOW_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_YELLOW_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_YELLOW_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_YELLOW_AIRSPEEDFACT;
}","public EntityChocoboYellow(World world){
  super(world);
  this.color=chocoboColor.YELLOW;
  this.setHealth(this.getMaxHealth());
  this.canClimb=false;
  this.canCrossWater=false;
  this.canJumpHigh=Constants.CHOCOBO_YELLOW_CANJUMPHIGH;
  this.canFly=false;
  this.isImmuneToFire=false;
  this.landSpeedFactor=Constants.CHOCOBO_YELLOW_LANDSPEEDFACT;
  this.waterSpeedFactor=Constants.CHOCOBO_YELLOW_WATERSPEEDFACT;
  this.airbornSpeedFactor=Constants.CHOCOBO_YELLOW_AIRSPEEDFACT;
}",0.9634408602150538
98294,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int slot){
  ItemStack iStackTarget=null;
  Slot slotObj=(Slot)this.inventorySlots.get(slot);
  if (slotObj != null && slotObj.getHasStack()) {
    ItemStack iStackSource=slotObj.getStack();
    iStackTarget=iStackSource.copy();
    int nSlots=this.chocoBagInv.getSizeInventory();
    if (slot < nSlots) {
      if (!this.mergeItemStack(iStackSource,nSlots,this.inventorySlots.size(),true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(iStackSource,0,nSlots,false)) {
      return null;
    }
    if (iStackSource.stackSize == 0) {
      slotObj.putStack((ItemStack)null);
    }
 else {
      slotObj.onSlotChanged();
    }
  }
  return iStackTarget;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int sourceSlotIdx){
  ItemStack targetItemStack=null;
  Slot sourceSlot=(Slot)this.inventorySlots.get(sourceSlotIdx);
  if (sourceSlot != null && sourceSlot.getHasStack()) {
    ItemStack sourceItemStack=sourceSlot.getStack();
    targetItemStack=sourceItemStack.copy();
    int nSlots=this.chocoBagInv.getSizeInventory();
    if (sourceSlotIdx < nSlots) {
      if (!this.mergeItemStack(sourceItemStack,nSlots,this.inventorySlots.size(),true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(sourceItemStack,0,nSlots,false)) {
      return null;
    }
    if (sourceItemStack.stackSize == 0) {
      sourceSlot.putStack((ItemStack)null);
    }
 else {
      sourceSlot.onSlotChanged();
    }
  }
  return targetItemStack;
}",0.7533632286995515
98295,"@ForgeSubscribe public void onUseBonemeal(BonemealEvent event){
  if (event.ID == ModChocoCraft.gysahlStemBlock.blockID) {
    if (((BlockGysahlStem)ModChocoCraft.gysahlStemBlock).onBonemealUse(event.world,event.X,event.Y,event.Z)) {
      ChocoboPlayerHelper.useCurrentItem(event.entityPlayer);
    }
  }
}","@ForgeSubscribe public void onUseBonemeal(BonemealEvent event){
  if (event.ID == ModChocoCraft.gysahlStemBlock.blockID) {
    if (((BlockGysahlStem)ModChocoCraft.gysahlStemBlock).onBonemealUse(event.world,event.X,event.Y,event.Z)) {
      event.setResult(Result.ALLOW);
    }
  }
}",0.8624787775891342
98296,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.isRemote && world.provider.isSurfaceWorld()) {
    if (random.nextInt(1000) <= ModChocoCraft.gysahlWorldGenRate) {
      int randPosX=chunkX * 16 + random.nextInt(16);
      int randPosZ=chunkZ * 16 + random.nextInt(16);
      int randPosY=world.getTopSolidOrLiquidBlock(randPosX,randPosX);
      new WorldGenFlowers(ModChocoCraft.gysahlGreenBlock.blockID).generate(world,random,randPosX,randPosY,randPosZ);
    }
  }
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (!world.isRemote && world.provider.isSurfaceWorld()) {
    if (random.nextInt(1000) <= ModChocoCraft.gysahlWorldGenRate) {
      int randPosX=chunkX * 16 + random.nextInt(16);
      int randPosZ=chunkZ * 16 + random.nextInt(16);
      int randPosY=world.getTopSolidOrLiquidBlock(randPosX,randPosZ);
      new WorldGenFlowers(ModChocoCraft.gysahlGreenBlock.blockID).generate(world,random,randPosX,randPosY,randPosZ);
    }
  }
}",0.9982517482517482
98297,"private void createItemInstances(){
  chocopediaItem=(new ChocoboItem(chocopediaId.getInt())).setUnlocalizedName(Constants.KEY_CHOCOPEDIA).setMaxStackSize(1);
  LanguageRegistry.addName(chocopediaItem,""String_Node_Str"");
  chocopediaItem.setCreativeTab(CreativeTabs.tabTools);
  chocoboFeatherItem=(new ChocoboItem(chocoboFeatherId.getInt())).setUnlocalizedName(Constants.KEY_FEATHER).setMaxStackSize(64);
  LanguageRegistry.addName(chocoboFeatherItem,""String_Node_Str"");
  chocoboFeatherItem.setCreativeTab(CreativeTabs.tabMaterials);
  chocoboSaddleItem=(new ChocoboItem(chocoboSaddleId.getInt())).setUnlocalizedName(Constants.KEY_SADDLE).setMaxStackSize(5);
  LanguageRegistry.addName(chocoboSaddleItem,""String_Node_Str"");
  chocoboSaddleItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboSaddleBagsItem=(new ChocoboItem(chocoboSaddleBagsId.getInt())).setUnlocalizedName(Constants.KEY_SADDLEBAG).setMaxStackSize(8);
  LanguageRegistry.addName(chocoboSaddleBagsItem,""String_Node_Str"");
  chocoboSaddleBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboPackBagsItem=(new ChocoboItem(chocoboPackBagsId.getInt())).setUnlocalizedName(Constants.KEY_PACKBAG).setMaxStackSize(8);
  LanguageRegistry.addName(chocoboPackBagsItem,""String_Node_Str"");
  chocoboPackBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  gysahlSeedsItem=(new ItemGysahlSeeds(gysahlSeedsId.getInt(),gysahlStemBlockId.getInt(),Block.tilledField.blockID));
  LanguageRegistry.addName(gysahlSeedsItem,""String_Node_Str"");
  gysahlLoverlyItem=(new ChocoboItem(gysahlLoverlyId.getInt())).setUnlocalizedName(Constants.KEY_GY_LOVERLY).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlLoverlyItem,""String_Node_Str"");
  gysahlLoverlyItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlGoldenItem=(new ChocoboItem(gysahlGoldenId.getInt())).setUnlocalizedName(Constants.KEY_GY_GOLDEN).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlGoldenItem,""String_Node_Str"");
  gysahlGoldenItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPinkItem=(new ChocoboItem(gysahlPinkId.getInt())).setUnlocalizedName(Constants.KEY_GY_PINK).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlPinkItem,""String_Node_Str"");
  gysahlPinkItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlRedItem=(new ChocoboItem(gysahlRedId.getInt())).setUnlocalizedName(Constants.KEY_GY_RED).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlRedItem,""String_Node_Str"");
  gysahlRedItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlCakeItem=(new ChocoboItem(gysahlCakeId.getInt())).setUnlocalizedName(Constants.KEY_GY_CAKE).setMaxStackSize(8);
  LanguageRegistry.addName(gysahlCakeItem,""String_Node_Str"");
  gysahlCakeItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboWhistleItem=(new ChocoboItem(chocoboWhistleId.getInt())).setUnlocalizedName(Constants.KEY_WHISTLE).setMaxStackSize(64);
  LanguageRegistry.addName(chocoboWhistleItem,""String_Node_Str"");
  chocoboWhistleItem.setCreativeTab(CreativeTabs.tabTools);
  purpleChocoboEggItem=new ItemPurpleChocoboEgg(purpleChocoboEggId.getInt());
  LanguageRegistry.addName(purpleChocoboEggItem,""String_Node_Str"");
  chocoDisguiseHelmetItem=new ChocoboItemDisguise(chocoDisguiseHelmetId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),0);
  chocoDisguiseHelmetItem.setUnlocalizedName(Constants.KEY_DISGUISE_HEAD);
  LanguageRegistry.addName(chocoDisguiseHelmetItem,""String_Node_Str"");
  chocoDisguisePlateItem=new ChocoboItemDisguise(chocoDisguisePlateId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),1);
  chocoDisguisePlateItem.setUnlocalizedName(Constants.KEY_DISGUISE_BODY);
  LanguageRegistry.addName(chocoDisguisePlateItem,""String_Node_Str"");
  chocoDisguiseLegsItem=new ChocoboItemDisguise(chocoDisguiseLegsId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),2);
  chocoDisguiseLegsItem.setUnlocalizedName(Constants.KEY_DISGUISE_LEGS);
  LanguageRegistry.addName(chocoDisguiseLegsItem,""String_Node_Str"");
  chocoDisguiseBootsItem=new ChocoboItemDisguise(chocoDisguiseBootsId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),3);
  chocoDisguiseBootsItem.setUnlocalizedName(Constants.KEY_DISGUISE_BOOTS);
  LanguageRegistry.addName(chocoDisguiseBootsItem,""String_Node_Str"");
  chocoboLegRawItem=new ChocoboItemFood(chocoboLegRawId.getInt(),4,true);
  chocoboLegRawItem.setUnlocalizedName(Constants.KEY_LEG_RAW);
  LanguageRegistry.addName(chocoboLegRawItem,""String_Node_Str"");
  chocoboLegCookedItem=new ChocoboItemFood(chocoboLegCookedId.getInt(),8,false);
  chocoboLegCookedItem.setUnlocalizedName(Constants.KEY_LEG_COOKED);
  LanguageRegistry.addName(chocoboLegCookedItem,""String_Node_Str"");
}","private void createItemInstances(){
  chocopediaItem=(new ChocoboItem(chocopediaId.getInt())).setUnlocalizedName(Constants.KEY_CHOCOPEDIA).setMaxStackSize(1);
  LanguageRegistry.addName(chocopediaItem,""String_Node_Str"");
  chocopediaItem.setCreativeTab(CreativeTabs.tabTools);
  chocoboFeatherItem=(new ChocoboItem(chocoboFeatherId.getInt())).setUnlocalizedName(Constants.KEY_FEATHER).setMaxStackSize(64);
  LanguageRegistry.addName(chocoboFeatherItem,""String_Node_Str"");
  chocoboFeatherItem.setCreativeTab(CreativeTabs.tabMaterials);
  chocoboSaddleItem=(new ChocoboItem(chocoboSaddleId.getInt())).setUnlocalizedName(Constants.KEY_SADDLE).setMaxStackSize(5);
  LanguageRegistry.addName(chocoboSaddleItem,""String_Node_Str"");
  chocoboSaddleItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboSaddleBagsItem=(new ChocoboItem(chocoboSaddleBagsId.getInt())).setUnlocalizedName(Constants.KEY_SADDLEBAG).setMaxStackSize(8);
  LanguageRegistry.addName(chocoboSaddleBagsItem,""String_Node_Str"");
  chocoboSaddleBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboPackBagsItem=(new ChocoboItem(chocoboPackBagsId.getInt())).setUnlocalizedName(Constants.KEY_PACKBAG).setMaxStackSize(8);
  LanguageRegistry.addName(chocoboPackBagsItem,""String_Node_Str"");
  chocoboPackBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  gysahlSeedsItem=(new ItemGysahlSeeds(gysahlSeedsId.getInt(),gysahlStemBlockId.getInt(),Block.tilledField.blockID));
  LanguageRegistry.addName(gysahlSeedsItem,""String_Node_Str"");
  gysahlLoverlyItem=(new ChocoboItem(gysahlLoverlyId.getInt())).setUnlocalizedName(Constants.KEY_GY_LOVERLY).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlLoverlyItem,""String_Node_Str"");
  gysahlLoverlyItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlGoldenItem=(new ChocoboItem(gysahlGoldenId.getInt())).setUnlocalizedName(Constants.KEY_GY_GOLDEN).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlGoldenItem,""String_Node_Str"");
  gysahlGoldenItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPinkItem=(new ChocoboItem(gysahlPinkId.getInt())).setUnlocalizedName(Constants.KEY_GY_PINK).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlPinkItem,""String_Node_Str"");
  gysahlPinkItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlRedItem=(new ChocoboItem(gysahlRedId.getInt())).setUnlocalizedName(Constants.KEY_GY_RED).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlRedItem,""String_Node_Str"");
  gysahlRedItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlCakeItem=(new ChocoboItem(gysahlCakeId.getInt())).setUnlocalizedName(Constants.KEY_GY_CAKE).setMaxStackSize(8);
  LanguageRegistry.addName(gysahlCakeItem,""String_Node_Str"");
  gysahlCakeItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPicklesRawItem=(new ChocoboItem(gysahlPicklesRawId.getInt()));
  gysahlPicklesRawItem.setUnlocalizedName(Constants.KEY_GY_PICKLES_RAW).setMaxStackSize(64);
  LanguageRegistry.addName(gysahlPicklesRawItem,""String_Node_Str"");
  gysahlPicklesRawItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPicklesItem=new ChocoboItemFood(gysahlPicklesId.getInt(),2,false);
  gysahlPicklesItem.setUnlocalizedName(Constants.KEY_GY_PICKLES);
  LanguageRegistry.addName(gysahlPicklesItem,""String_Node_Str"");
  gysahlPicklesItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboWhistleItem=(new ChocoboItem(chocoboWhistleId.getInt())).setUnlocalizedName(Constants.KEY_WHISTLE).setMaxStackSize(64);
  LanguageRegistry.addName(chocoboWhistleItem,""String_Node_Str"");
  chocoboWhistleItem.setCreativeTab(CreativeTabs.tabTools);
  purpleChocoboEggItem=new ItemPurpleChocoboEgg(purpleChocoboEggId.getInt());
  LanguageRegistry.addName(purpleChocoboEggItem,""String_Node_Str"");
  chocoDisguiseHelmetItem=new ChocoboItemDisguise(chocoDisguiseHelmetId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),0);
  chocoDisguiseHelmetItem.setUnlocalizedName(Constants.KEY_DISGUISE_HEAD);
  LanguageRegistry.addName(chocoDisguiseHelmetItem,""String_Node_Str"");
  chocoDisguisePlateItem=new ChocoboItemDisguise(chocoDisguisePlateId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),1);
  chocoDisguisePlateItem.setUnlocalizedName(Constants.KEY_DISGUISE_BODY);
  LanguageRegistry.addName(chocoDisguisePlateItem,""String_Node_Str"");
  chocoDisguiseLegsItem=new ChocoboItemDisguise(chocoDisguiseLegsId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),2);
  chocoDisguiseLegsItem.setUnlocalizedName(Constants.KEY_DISGUISE_LEGS);
  LanguageRegistry.addName(chocoDisguiseLegsItem,""String_Node_Str"");
  chocoDisguiseBootsItem=new ChocoboItemDisguise(chocoDisguiseBootsId.getInt(),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(Constants.KEY_DISGUISE),3);
  chocoDisguiseBootsItem.setUnlocalizedName(Constants.KEY_DISGUISE_BOOTS);
  LanguageRegistry.addName(chocoDisguiseBootsItem,""String_Node_Str"");
  chocoboLegRawItem=new ChocoboItemFood(chocoboLegRawId.getInt(),4,true);
  chocoboLegRawItem.setUnlocalizedName(Constants.KEY_LEG_RAW);
  LanguageRegistry.addName(chocoboLegRawItem,""String_Node_Str"");
  chocoboLegCookedItem=new ChocoboItemFood(chocoboLegCookedId.getInt(),8,false);
  chocoboLegCookedItem.setUnlocalizedName(Constants.KEY_LEG_COOKED);
  LanguageRegistry.addName(chocoboLegCookedItem,""String_Node_Str"");
}",0.9445053302779716
98298,"private void addRecipes(){
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem,Character.valueOf('-'),Item.silk});
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{Item.saddle,new ItemStack(chocoboFeatherItem,1)});
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleBagsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoboPackBagsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('C'),Block.cloth,Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem,Character.valueOf('-'),Item.silk});
  GameRegistry.addRecipe(new ItemStack(chocopediaItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('B'),Item.book,Character.valueOf('F'),chocoboFeatherItem,Character.valueOf('I'),new ItemStack(Item.dyePowder,1,0),Character.valueOf('L'),new ItemStack(Item.dyePowder,1,4),Character.valueOf('G'),Item.goldNugget});
  GameRegistry.addShapelessRecipe(new ItemStack(chocoboWhistleItem,1),new Object[]{chocoboFeatherItem,new ItemStack(Item.ingotGold,1)});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlSeedsItem,3),new Object[]{new ItemStack(gysahlGreenBlock,1)});
  GameRegistry.addRecipe(new ItemStack(gysahlCakeItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),gysahlGreenBlock,Character.valueOf('M'),Item.bucketMilk,Character.valueOf('S'),Item.sugar,Character.valueOf('W'),Item.wheat,Character.valueOf('E'),Item.egg});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlPinkItem,1),new Object[]{new ItemStack(gysahlGreenBlock,1),new ItemStack(Item.dyePowder,1,9)});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlRedItem,1),new Object[]{new ItemStack(gysahlGreenBlock,1),new ItemStack(Item.dyePowder,1,1)});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseHelmetItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguisePlateItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseLegsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseBootsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(strawBlock,4),new Object[]{new ItemStack(Item.wheat,1)});
  GameRegistry.addRecipe(new ItemStack(Item.arrow,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('F'),Item.flint,Character.valueOf('S'),Item.stick,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(Item.writableBook,1),new Object[]{new ItemStack(Item.book,1),new ItemStack(Item.dyePowder,1,0),new ItemStack(chocoboFeatherItem,1)});
}","private void addRecipes(){
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem,Character.valueOf('-'),Item.silk});
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(chocoboSaddleItem,1),new Object[]{Item.saddle,new ItemStack(chocoboFeatherItem,1)});
  GameRegistry.addRecipe(new ItemStack(chocoboSaddleBagsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoboPackBagsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('C'),Block.cloth,Character.valueOf('X'),Item.leather,Character.valueOf('Y'),chocoboFeatherItem,Character.valueOf('-'),Item.silk});
  GameRegistry.addRecipe(new ItemStack(chocopediaItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('B'),Item.book,Character.valueOf('F'),chocoboFeatherItem,Character.valueOf('I'),new ItemStack(Item.dyePowder,1,0),Character.valueOf('L'),new ItemStack(Item.dyePowder,1,4),Character.valueOf('G'),Item.goldNugget});
  GameRegistry.addShapelessRecipe(new ItemStack(chocoboWhistleItem,1),new Object[]{chocoboFeatherItem,new ItemStack(Item.ingotGold,1)});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlSeedsItem,3),new Object[]{new ItemStack(gysahlGreenBlock,1)});
  GameRegistry.addRecipe(new ItemStack(gysahlCakeItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),gysahlGreenBlock,Character.valueOf('M'),Item.bucketMilk,Character.valueOf('S'),Item.sugar,Character.valueOf('W'),Item.wheat,Character.valueOf('E'),Item.egg});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlPicklesRawItem,2),new Object[]{new ItemStack(gysahlGreenBlock,1),new ItemStack(Item.sugar,1)});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlPinkItem,1),new Object[]{new ItemStack(gysahlGreenBlock,1),new ItemStack(Item.dyePowder,1,9)});
  GameRegistry.addShapelessRecipe(new ItemStack(gysahlRedItem,1),new Object[]{new ItemStack(gysahlGreenBlock,1),new ItemStack(Item.dyePowder,1,1)});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseHelmetItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguisePlateItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseLegsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addRecipe(new ItemStack(chocoDisguiseBootsItem,1),new Object[]{""String_Node_Str"",""String_Node_Str"",Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(strawBlock,4),new Object[]{new ItemStack(Item.wheat,1)});
  GameRegistry.addRecipe(new ItemStack(Item.arrow,4),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('F'),Item.flint,Character.valueOf('S'),Item.stick,Character.valueOf('Y'),chocoboFeatherItem});
  GameRegistry.addShapelessRecipe(new ItemStack(Item.writableBook,1),new Object[]{new ItemStack(Item.book,1),new ItemStack(Item.dyePowder,1,0),new ItemStack(chocoboFeatherItem,1)});
}",0.8454596728708403
98299,"@PreInit public void preLoadChocoCraft(FMLPreInitializationEvent preInitEvent){
  chocoboHeight=1.9F;
  chocoboWidth=1.3F;
  mainConfiguration=new Configuration(preInitEvent.getSuggestedConfigurationFile());
  configFolder=preInitEvent.getModConfigurationDirectory();
  mainConfiguration.load();
  chocoboSaddleId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_SADDLE_ID);
  gysahlSeedsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_SEEDS_ID);
  gysahlLoverlyId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_LOVERLY_ID);
  gysahlGoldenId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_GOLDEN_ID);
  gysahlPinkId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_PINK_ID);
  gysahlRedId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_RED_ID);
  gysahlChibiId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_CHIBI_ID);
  gysahlCakeId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_CAKE_ID);
  chocoboLegRawId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_LEG_RAW_ID);
  chocoboLegCookedId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_LEG_COOKED_ID);
  chocoboFeatherId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_FEATHER_ID);
  chocoboSaddleBagsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_SADDLE_BAGS_ID);
  chocoboPackBagsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_PACK_BAGS_ID);
  chocoboWhistleId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_WHISTLE_ID);
  chocopediaId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOPEDIA_ID);
  purpleChocoboEggId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.PURPLE_CHOCOBO_EGG_ID);
  chocoDisguiseHelmetId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_HELMET_ID);
  chocoDisguisePlateId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_PLATE_ID);
  chocoDisguiseLegsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_LEGS_ID);
  chocoDisguiseBootsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_BOOTS_ID);
  gysahlGreenBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.GYSAHL_GREEN_BLOCK_ID);
  gysahlStemBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.GYSAHL_STEM_BLOCK_ID);
  strawBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.STRAW_BLOCK_ID);
  mainConfiguration.save();
  chocoboWingFlutter=Constants.DEFAULT_CHOCOBO_WING_FLUTTER;
  hungerEnabled=Constants.DEFAULT_HUNGER_ENABLED;
  riderBuffsEnabled=Constants.DEFAULT_RIDER_BUFFS_ENABLED;
  showChocoboNames=Constants.DEFAULT_SHOW_CHOCOBO_NAMES;
  genderMaleChance=Constants.DEFAULT_GENDER_MALE_CHANCE;
  gysahlGreenMutationRate=Constants.DEFAULT_GYSAHL_GREEN_MUTATION_RATE;
  gysahlLoveMutationRate=Constants.DEFAULT_GYSAHL_LOVE_MUTATION_RATE;
  featherDropChance=Constants.DEFAULT_FEATHER_DROP_CHANCE;
  featherDelayRandom=Constants.DEFAULT_FEATHER_DELAY_RANDOM;
  featherDelayStatic=Constants.DEFAULT_FEATHER_DELAY_STATIC;
  penHealProbability=Constants.DEFAULT_PEN_HEAL_PROBABILITY;
  penHealCauldronRange=Constants.DEFAULT_PEN_HEAL_CAULDRON_RANGE;
  spawnTimeDelay=Constants.DEFAULT_SPAWN_TIME_DELAY;
  spawnGroupMin=Constants.DEFAULT_SPAWN_GROUP_MIN;
  spawnGroupMax=Constants.DEFAULT_SPAWN_GROUP_MAX;
  spawnTotalMax=Constants.DEFAULT_SPAWN_TOTAL_MAX;
  spawnProbability=Constants.DEFAULT_SPAWN_PROBABILITY;
  spawnLimitChunkRadius=Constants.DEFAULT_SPAWN_LIMIT_CHUNK_RADIUS;
  spawnDistanceNextWild=Constants.DEFAULT_SPAWN_DIST_NEXT_WILD;
  spawnDbTimeDelay=0;
  spawnDbStatus=""String_Node_Str"";
  breedingDelayMale=Constants.DEFAULT_BREEDING_DELAY_MALE;
  breedingDelayFemale=Constants.DEFAULT_BREEDING_DELAY_FEMALE;
  growupDelayRandom=Constants.DEFAULT_GROWUP_DELAY_RANDOM;
  growupDelayStatic=Constants.DEFAULT_GROWUP_DELAY_STATIC;
  hungerDelayChicobo=Constants.DEFAULT_HUNGER_DELAY_CHICOBO;
  hungerDelayChocobo=Constants.DEFAULT_HUNGER_DELAY_CHOCOBO;
  renderNameHeight=Constants.DEFAULT_RENDER_NAME_HEIGHT;
  livingSoundProb=Constants.DEFAULT_LIVING_SOUND_PROB;
  saddledCanWander=Constants.DEFAULT_SADDLED_CAN_WANDER;
  ChocoboConfig.readConfigFilePreInit();
  proxy.registerEventListener();
}","@PreInit public void preLoadChocoCraft(FMLPreInitializationEvent preInitEvent){
  chocoboHeight=1.9F;
  chocoboWidth=1.3F;
  mainConfiguration=new Configuration(preInitEvent.getSuggestedConfigurationFile());
  configFolder=preInitEvent.getModConfigurationDirectory();
  mainConfiguration.load();
  chocoboSaddleId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_SADDLE_ID);
  gysahlSeedsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_SEEDS_ID);
  gysahlLoverlyId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_LOVERLY_ID);
  gysahlGoldenId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_GOLDEN_ID);
  gysahlPinkId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_PINK_ID);
  gysahlRedId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_RED_ID);
  gysahlCakeId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_CAKE_ID);
  gysahlPicklesId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_PICKLES_ID);
  gysahlPicklesRawId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.GYSAHL_PICKLES_RAW_ID);
  chocoboLegRawId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_LEG_RAW_ID);
  chocoboLegCookedId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_LEG_COOKED_ID);
  chocoboFeatherId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_FEATHER_ID);
  chocoboSaddleBagsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_SADDLE_BAGS_ID);
  chocoboPackBagsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_PACK_BAGS_ID);
  chocoboWhistleId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOBO_WHISTLE_ID);
  chocopediaId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCOPEDIA_ID);
  purpleChocoboEggId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.PURPLE_CHOCOBO_EGG_ID);
  chocoDisguiseHelmetId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_HELMET_ID);
  chocoDisguisePlateId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_PLATE_ID);
  chocoDisguiseLegsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_LEGS_ID);
  chocoDisguiseBootsId=mainConfiguration.getItem(Configuration.CATEGORY_ITEM,""String_Node_Str"",Constants.CHOCO_DISGUISE_BOOTS_ID);
  gysahlGreenBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.GYSAHL_GREEN_BLOCK_ID);
  gysahlStemBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.GYSAHL_STEM_BLOCK_ID);
  strawBlockId=mainConfiguration.getBlock(""String_Node_Str"",Constants.STRAW_BLOCK_ID);
  mainConfiguration.save();
  chocoboWingFlutter=Constants.DEFAULT_CHOCOBO_WING_FLUTTER;
  hungerEnabled=Constants.DEFAULT_HUNGER_ENABLED;
  riderBuffsEnabled=Constants.DEFAULT_RIDER_BUFFS_ENABLED;
  showChocoboNames=Constants.DEFAULT_SHOW_CHOCOBO_NAMES;
  genderMaleChance=Constants.DEFAULT_GENDER_MALE_CHANCE;
  gysahlGreenMutationRate=Constants.DEFAULT_GYSAHL_GREEN_MUTATION_RATE;
  gysahlLoveMutationRate=Constants.DEFAULT_GYSAHL_LOVE_MUTATION_RATE;
  featherDropChance=Constants.DEFAULT_FEATHER_DROP_CHANCE;
  featherDelayRandom=Constants.DEFAULT_FEATHER_DELAY_RANDOM;
  featherDelayStatic=Constants.DEFAULT_FEATHER_DELAY_STATIC;
  penHealProbability=Constants.DEFAULT_PEN_HEAL_PROBABILITY;
  penHealCauldronRange=Constants.DEFAULT_PEN_HEAL_CAULDRON_RANGE;
  spawnTimeDelay=Constants.DEFAULT_SPAWN_TIME_DELAY;
  spawnGroupMin=Constants.DEFAULT_SPAWN_GROUP_MIN;
  spawnGroupMax=Constants.DEFAULT_SPAWN_GROUP_MAX;
  spawnTotalMax=Constants.DEFAULT_SPAWN_TOTAL_MAX;
  spawnProbability=Constants.DEFAULT_SPAWN_PROBABILITY;
  spawnLimitChunkRadius=Constants.DEFAULT_SPAWN_LIMIT_CHUNK_RADIUS;
  spawnDistanceNextWild=Constants.DEFAULT_SPAWN_DIST_NEXT_WILD;
  spawnDbTimeDelay=0;
  spawnDbStatus=""String_Node_Str"";
  breedingDelayMale=Constants.DEFAULT_BREEDING_DELAY_MALE;
  breedingDelayFemale=Constants.DEFAULT_BREEDING_DELAY_FEMALE;
  growupDelayRandom=Constants.DEFAULT_GROWUP_DELAY_RANDOM;
  growupDelayStatic=Constants.DEFAULT_GROWUP_DELAY_STATIC;
  hungerDelayChicobo=Constants.DEFAULT_HUNGER_DELAY_CHICOBO;
  hungerDelayChocobo=Constants.DEFAULT_HUNGER_DELAY_CHOCOBO;
  renderNameHeight=Constants.DEFAULT_RENDER_NAME_HEIGHT;
  livingSoundProb=Constants.DEFAULT_LIVING_SOUND_PROB;
  saddledCanWander=Constants.DEFAULT_SADDLED_CAN_WANDER;
  ChocoboConfig.readConfigFilePreInit();
  proxy.registerEventListener();
}",0.9837937009479156
98300,"private void addSmeltings(){
  GameRegistry.addSmelting(chocoboLegRawItem.itemID,new ItemStack(chocoboLegCookedItem),0.1F);
}","private void addSmeltings(){
  GameRegistry.addSmelting(chocoboLegRawItem.itemID,new ItemStack(chocoboLegCookedItem),0.1F);
  GameRegistry.addSmelting(gysahlPicklesRawItem.itemID,new ItemStack(gysahlPicklesItem),0.1F);
}",0.7246376811594203
98301,"public EntityAnimalChocobo(World world){
  super(world);
  this.hasAttacked=false;
  this.fleeingTick=0;
  this.breeding=0;
  this.setHidename(true);
  this.setWander(true);
  this.setTamed(false);
  this.setFollowing(false);
  this.setIsMale(this.getRandomIsMale());
  this.getNavigator().setAvoidsWater(true);
}","public EntityAnimalChocobo(World world){
  super(world);
  this.hasAttacked=false;
  this.fleeingTick=0;
  this.breeding=0;
  this.setHidename(true);
  this.setWander(true);
  this.setTamed(false);
  this.setFollowing(false);
  this.setIsMale(this.getRandomIsMale());
  this.getNavigator().setAvoidsWater(true);
  this.hasMate=false;
}",0.9660493827160492
98302,"@SuppressWarnings(""String_Node_Str"") protected Entity findPlayerToAttack(){
  if (this.fleeingTick > 0) {
    return null;
  }
  if (this.isInLove() && !this.isChild()) {
    List list=this.worldObj.getEntitiesWithinAABB(EntityChocobo.class,this.boundingBox.expand(8F,8F,8F));
    for (int i=0; i < list.size(); i++) {
      EntityAnimalChocobo otherChoco=(EntityAnimalChocobo)list.get(i);
      if (otherChoco != this) {
        boolean canMate=otherChoco.isInLove() && otherChoco.isMale() != this.isMale();
        if (canMate && !otherChoco.isChild()) {
          return otherChoco;
        }
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Entity findPlayerToAttack(){
  if (this.fleeingTick > 0) {
    return null;
  }
  if (this.isInLove()) {
    List list=this.worldObj.getEntitiesWithinAABB(EntityChocobo.class,this.boundingBox.expand(8F,8F,8F));
    for (int i=0; i < list.size(); i++) {
      EntityChocobo otherChoco=(EntityChocobo)list.get(i);
      if (otherChoco != this) {
        boolean canMate=otherChoco.isInLove() && otherChoco.isMale() != this.isMale();
        if (canMate && !otherChoco.isChild()) {
          this.hasMate=true;
          otherChoco.hasMate=true;
          return otherChoco;
        }
      }
    }
  }
  return null;
}",0.9194167306216424
98303,"public void onLivingUpdate(){
  super.onLivingUpdate();
  if (this.isInLove()) {
    if (this.entityToAttack != null) {
      if (Side.CLIENT == FMLCommonHandler.instance().getEffectiveSide()) {
        ChocoboParticleHelper.showParticleAroundEntityFx(""String_Node_Str"",this);
      }
      if (!((EntityAnimalChocobo)this.entityToAttack).isInLove()) {
        this.entityToAttack=null;
      }
    }
  }
  if (Side.CLIENT == FMLCommonHandler.instance().getEffectiveSide()) {
    this.destPos+=(double)(this.onGround ? -1 : 4) * 0.3D;
    this.destPos=ChocoboMathHelper.clamp(this.destPos,0.0F,1.0F);
    if (!this.onGround) {
      this.wingRotDelta=ChocoboMathHelper.minLimit(this.wingRotDelta,1.0F);
    }
    this.wingRotDelta*=0.9D;
    if (!this.onGround && this.motionY < 0.0D) {
      this.motionY*=0.8D;
    }
    this.wingRotation+=this.wingRotDelta * 2.0F;
  }
  if (Side.SERVER == FMLCommonHandler.instance().getEffectiveSide()) {
    if (--this.timeUntilNextFeather <= 0) {
      int d100=this.rand.nextInt(100);
      if (d100 < ModChocoCraft.featherDropChance) {
        this.dropFeather();
      }
      this.timeUntilNextFeather=this.rand.nextInt(ModChocoCraft.featherDelayRandom) + ModChocoCraft.featherDelayStatic;
    }
  }
}","public void onLivingUpdate(){
  super.onLivingUpdate();
  if (this.isInLove()) {
    if (this.entityToAttack != null) {
      if (Side.CLIENT == FMLCommonHandler.instance().getEffectiveSide()) {
        ChocoboParticleHelper.showParticleAroundEntityFx(""String_Node_Str"",this);
      }
      if (this.entityToAttack instanceof EntityAnimalChocobo) {
        EntityAnimalChocobo otherChoco=(EntityAnimalChocobo)this.entityToAttack;
        if (!otherChoco.isInLove()) {
          this.entityToAttack=null;
          this.hasMate=false;
        }
      }
    }
  }
  if (Side.CLIENT == FMLCommonHandler.instance().getEffectiveSide()) {
    this.destPos+=(double)(this.onGround ? -1 : 4) * 0.3D;
    this.destPos=ChocoboMathHelper.clamp(this.destPos,0.0F,1.0F);
    if (!this.onGround) {
      this.wingRotDelta=ChocoboMathHelper.minLimit(this.wingRotDelta,1.0F);
    }
    this.wingRotDelta*=0.9D;
    if (!this.onGround && this.motionY < 0.0D) {
      this.motionY*=0.8D;
    }
    this.wingRotation+=this.wingRotDelta * 2.0F;
  }
  if (Side.SERVER == FMLCommonHandler.instance().getEffectiveSide()) {
    if (--this.timeUntilNextFeather <= 0) {
      int d100=this.rand.nextInt(100);
      if (d100 < ModChocoCraft.featherDropChance) {
        this.dropFeather();
      }
      this.timeUntilNextFeather=this.rand.nextInt(ModChocoCraft.featherDelayRandom) + ModChocoCraft.featherDelayStatic;
    }
  }
}",0.9376652814506988
98304,"/** 
 * Called when the entity is attacked.
 */
public boolean attackEntityFrom(DamageSource damagesource,int i){
  Entity entity=damagesource.getEntity();
  if (entity != null && entity == this.riddenByEntity) {
    return false;
  }
 else {
    return super.attackEntityFrom(damagesource,i);
  }
}","/** 
 * Called when the entity is attacked.
 */
public boolean attackEntityFrom(DamageSource damagesource,int i){
  if (null != damagesource) {
    Entity entity=damagesource.getEntity();
    if (entity != null && entity == this.riddenByEntity) {
      return false;
    }
 else {
      return super.attackEntityFrom(damagesource,i);
    }
  }
 else {
    return false;
  }
}",0.8486646884272997
98305,"public void onNeighborBlockChange(World world,int posX,int posY,int posZ,int par5){
  this.canStrawStay(world,posX,posY,posZ);
}","@Override public void onNeighborBlockChange(World world,int posX,int posY,int posZ,int par5){
  this.canStrawStay(world,posX,posY,posZ);
}",0.962406015037594
98306,"/** 
 * Updates the blocks bounds based on its current state. Args: world, x, y, z
 */
public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess,int par2,int par3,int par4){
  this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,0.0625F,1.0F);
}","/** 
 * Updates the blocks bounds based on its current state. Args: world, x, y, z
 */
@Override public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess,int par2,int par3,int par4){
  this.setBlockBounds(0.0F,0.0F,0.0F,1.0F,0.0625F,1.0F);
}",0.9798387096774194
98307,"/** 
 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
 */
public boolean canPlaceBlockAt(World world,int posX,int posY,int posZ){
  int atBlockId=world.getBlockId(posX,posY - 1,posZ);
  Block block=Block.blocksList[atBlockId];
  return block != null && (Block.blocksList[atBlockId].isOpaqueCube()) ? world.getBlockMaterial(posX,posY - 1,posZ).blocksMovement() : false;
}","/** 
 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
 */
@Override public boolean canPlaceBlockAt(World world,int posX,int posY,int posZ){
  int atBlockId=world.getBlockId(posX,posY - 1,posZ);
  Block block=Block.blocksList[atBlockId];
  return block != null && (Block.blocksList[atBlockId].isOpaqueCube()) ? world.getBlockMaterial(posX,posY - 1,posZ).blocksMovement() : false;
}",0.9882352941176472
98308,"/** 
 * Returns the ID of the items to drop on destruction.
 */
public int idDropped(int par1,Random par2Random,int par3){
  return this.blockID;
}","/** 
 * Returns the ID of the items to drop on destruction.
 */
@Override public int idDropped(int par1,Random par2Random,int par3){
  return this.blockID;
}",0.9671052631578948
98309,"@SideOnly(Side.CLIENT) public Icon getBlockTextureFromSideAndMetadata(int i,int j){
  return this.blockIcon;
}","@SideOnly(Side.CLIENT) @Override public Icon getBlockTextureFromSideAndMetadata(int i,int j){
  return this.blockIcon;
}",0.9565217391304348
98310,"/** 
 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been cleared to be reused)
 */
public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World,int par2,int par3,int par4){
  return null;
}","/** 
 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been cleared to be reused)
 */
@Override public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World,int par2,int par3,int par4){
  return null;
}",0.981060606060606
98311,"/** 
 * Returns the quantity of items to drop on block destruction.
 */
public int quantityDropped(Random par1Random){
  return 1;
}","@Override public int quantityDropped(int meta,int fortune,Random random){
  return (meta & 7) + 1;
}",0.5172413793103449
98312,"/** 
 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
 */
public boolean renderAsNormalBlock(){
  return false;
}","/** 
 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
 */
@Override public boolean renderAsNormalBlock(){
  return false;
}",0.9726775956284152
98313,"/** 
 * Called when the player destroys a block with an item that can harvest it. (i, j, k) are the coordinates of the block and l is the block's subtype/damage.
 */
public void harvestBlock(World world,EntityPlayer player,int posX,int posY,int posZ,int blockDamage){
  super.harvestBlock(world,player,posX,posY,posZ,blockDamage);
  world.setBlock(posX,posY,posZ,this.blockID,0,2);
}","/** 
 * Called when the player destroys a block with an item that can harvest it. (i, j, k) are the coordinates of the block and l is the block's subtype/damage.
 */
@Override public void harvestBlock(World world,EntityPlayer player,int posX,int posY,int posZ,int blockDamage){
  super.harvestBlock(world,player,posX,posY,posZ,blockDamage);
  world.setBlockToAir(posX,posY,posZ);
}",0.9581151832460733
98314,"/** 
 * Ticks the block if it's been scheduled
 */
public void updateTick(World world,int posX,int posY,int posZ,Random random){
  if (world.getSavedLightValue(EnumSkyBlock.Block,posX,posY,posZ) > 11) {
    world.setBlock(posX,posY,posZ,this.blockID,0,2);
  }
}","/** 
 * Ticks the block if it's been scheduled
 */
@Override public void updateTick(World world,int posX,int posY,int posZ,Random random){
  if (world.getSavedLightValue(EnumSkyBlock.Block,posX,posY,posZ) > 11) {
    world.setBlock(posX,posY,posZ,this.blockID,0,2);
  }
}",0.981203007518797
98315,"/** 
 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
 */
public boolean isOpaqueCube(){
  return false;
}","/** 
 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
 */
@Override public boolean isOpaqueCube(){
  return false;
}",0.9819494584837544
98316,"/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates.  Args: blockAccess, x, y, z, side
 */
@SideOnly(Side.CLIENT) public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess,int par2,int par3,int par4,int par5){
  return par5 == 1 ? true : super.shouldSideBeRendered(par1IBlockAccess,par2,par3,par4,par5);
}","/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates.  Args: blockAccess, x, y, z, side
 */
@SideOnly(Side.CLIENT) @Override public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess,int par2,int par3,int par4,int par5){
  return par5 == 1 ? true : super.shouldSideBeRendered(par1IBlockAccess,par2,par3,par4,par5);
}",0.9873096446700508
98317,"public DebugFileWriter(){
  if (Side.CLIENT == FMLCommonHandler.instance().getEffectiveSide()) {
    file=new File(Minecraft.getMinecraftDir(),""String_Node_Str"");
  }
 else   if (Side.SERVER == FMLCommonHandler.instance().getEffectiveSide()) {
    file=new File(MinecraftServer.getServer().getFolderName(),""String_Node_Str"");
  }
  if (!file.exists()) {
    try {
      file.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public DebugFileWriter(){
  if (ModChocoCraft.isRemoteClient) {
    file=new File(MinecraftServer.getServer().getFolderName(),""String_Node_Str"");
  }
 else {
    file=new File(Minecraft.getMinecraftDir(),""String_Node_Str"");
  }
  if (!file.exists()) {
    try {
      file.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.5845410628019324
98318,"@Override public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer,int slot){
  ItemStack stack=null;
  Slot slotObject=(Slot)this.inventorySlots.get(slot);
  if (slotObject != null && slotObject.getHasStack()) {
    ItemStack stackInSlot=slotObject.getStack();
    stack=stackInSlot.copy();
    if (slot == 0) {
      if (!this.mergeItemStack(stackInSlot,1,this.inventorySlots.size(),true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(stackInSlot,0,1,false)) {
      return null;
    }
    if (stackInSlot.stackSize == 0) {
      slotObject.putStack(null);
    }
 else {
      slotObject.onSlotChanged();
    }
  }
  return stack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int slot){
  ItemStack iStackTarget=null;
  Slot slotObj=(Slot)this.inventorySlots.get(slot);
  if (slotObj != null && slotObj.getHasStack()) {
    ItemStack iStackSource=slotObj.getStack();
    iStackTarget=iStackSource.copy();
    int nSlots=this.chocoBagInv.getSizeInventory();
    if (slot < nSlots) {
      if (!this.mergeItemStack(iStackSource,nSlots,this.inventorySlots.size(),true)) {
        return null;
      }
    }
 else     if (!this.mergeItemStack(iStackSource,0,nSlots,false)) {
      return null;
    }
    if (iStackSource.stackSize == 0) {
      slotObj.putStack((ItemStack)null);
    }
 else {
      slotObj.onSlotChanged();
    }
  }
  return iStackTarget;
}",0.7734650670430487
98319,"@ForgeSubscribe public void onUseBonemeal(BonemealEvent event){
  if (event.ID == ModChocoCraft.gysahlStemBlock.blockID) {
    ((BlockGysahlStem)ModChocoCraft.gysahlStemBlock).onBonemealUse(event.world,event.X,event.Y,event.Z);
    this.useItem(event.entityPlayer);
  }
}","@ForgeSubscribe public void onUseBonemeal(BonemealEvent event){
  if (event.ID == ModChocoCraft.gysahlStemBlock.blockID) {
    if (((BlockGysahlStem)ModChocoCraft.gysahlStemBlock).onBonemealUse(event.world,event.X,event.Y,event.Z)) {
      ChocoboPlayerHelper.useCurrentItem(event.entityPlayer);
    }
  }
}",0.8131487889273357
98320,"public void onBonemealUse(World theWorld,int xPos,int yPos,int zPos){
  theWorld.setBlockMetadataWithNotify(xPos,yPos,zPos,MAX_STAGE);
}","public boolean onBonemealUse(World theWorld,int xPos,int yPos,int zPos){
  if (theWorld.getBlockMetadata(xPos,yPos,zPos) < MAX_STAGE) {
    theWorld.setBlockMetadataWithNotify(xPos,yPos,zPos,MAX_STAGE);
    return true;
  }
 else {
    return false;
  }
}",0.6138107416879796
98321,"private void createItemInstances(){
  chocoboSaddleItem=(new ChocoboItem(Integer.parseInt(chocoboSaddleId.value))).setItemName(""String_Node_Str"").setMaxStackSize(5);
  chocoboSaddleItem.setIconIndex(0);
  LanguageRegistry.addName(chocoboSaddleItem,""String_Node_Str"");
  chocoboSaddleItem.setCreativeTab(CreativeTabs.tabTransport);
  gysahlSeedsItem=(new ItemSeeds(Integer.parseInt(gysahlSeedsId.value),Integer.parseInt(gysahlStemBlockId.value),Block.tilledField.blockID)).setItemName(""String_Node_Str"");
  gysahlSeedsItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  gysahlSeedsItem.setIconIndex(1);
  LanguageRegistry.addName(gysahlSeedsItem,""String_Node_Str"");
  gysahlSeedsItem.setCreativeTab(CreativeTabs.tabMaterials);
  gysahlLoverlyItem=(new ChocoboItem(Integer.parseInt(gysahlLoverlyId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlLoverlyItem.setIconIndex(2);
  LanguageRegistry.addName(gysahlLoverlyItem,""String_Node_Str"");
  gysahlLoverlyItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlGoldenItem=(new ChocoboItem(Integer.parseInt(gysahlGoldenId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlGoldenItem.setIconIndex(3);
  LanguageRegistry.addName(gysahlGoldenItem,""String_Node_Str"");
  gysahlGoldenItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPinkItem=(new ChocoboItem(Integer.parseInt(gysahlPinkId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlPinkItem.setIconIndex(4);
  LanguageRegistry.addName(gysahlPinkItem,""String_Node_Str"");
  gysahlPinkItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlRedItem=(new ChocoboItem(Integer.parseInt(gysahlRedId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlRedItem.setIconIndex(5);
  LanguageRegistry.addName(gysahlRedItem,""String_Node_Str"");
  gysahlRedItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlChibiItem=(new ChocoboItem(Integer.parseInt(gysahlChibiId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlChibiItem.setIconIndex(6);
  LanguageRegistry.addName(gysahlChibiItem,""String_Node_Str"");
  gysahlChibiItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboCakeItem=(new ChocoboItem(Integer.parseInt(chocoboCakeId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboCakeItem.setIconIndex(7);
  LanguageRegistry.addName(chocoboCakeItem,""String_Node_Str"");
  chocoboCakeItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboFeatherItem=(new ChocoboItem(Integer.parseInt(chocoboFeatherId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboFeatherItem.setIconIndex(10);
  LanguageRegistry.addName(chocoboFeatherItem,""String_Node_Str"");
  chocoboFeatherItem.setCreativeTab(CreativeTabs.tabMaterials);
  chocoboSaddleBagsItem=(new ChocoboItem(Integer.parseInt(chocoboSaddleBagsId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboSaddleBagsItem.setIconIndex(11);
  LanguageRegistry.addName(chocoboSaddleBagsItem,""String_Node_Str"");
  chocoboSaddleBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboPackBagsItem=(new ChocoboItem(Integer.parseInt(chocoboPackBagsId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboPackBagsItem.setIconIndex(12);
  LanguageRegistry.addName(chocoboPackBagsItem,""String_Node_Str"");
  chocoboPackBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboWhistleItem=(new ChocoboItem(Integer.parseInt(chocoboWhistleId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboWhistleItem.setIconIndex(13);
  LanguageRegistry.addName(chocoboWhistleItem,""String_Node_Str"");
  chocoboWhistleItem.setCreativeTab(CreativeTabs.tabTools);
  chocopediaItem=(new ChocoboItem(Integer.parseInt(chocopediaId.value))).setItemName(""String_Node_Str"").setMaxStackSize(1);
  chocopediaItem.setIconIndex(14);
  LanguageRegistry.addName(chocopediaItem,""String_Node_Str"");
  chocopediaItem.setCreativeTab(CreativeTabs.tabTools);
  chocoDisguiseHelmetItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseHelmetId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),0));
  chocoDisguiseHelmetItem.setIconIndex(17);
  chocoDisguiseHelmetItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseHelmetItem,""String_Node_Str"");
  chocoDisguisePlateItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguisePlateId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),1));
  chocoDisguisePlateItem.setIconIndex(18);
  chocoDisguisePlateItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguisePlateItem,""String_Node_Str"");
  chocoDisguiseLegsItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseLegsId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),2));
  chocoDisguiseLegsItem.setIconIndex(19);
  chocoDisguiseLegsItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseLegsItem,""String_Node_Str"");
  chocoDisguiseBootsItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseBootsId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),3));
  chocoDisguiseBootsItem.setIconIndex(20);
  chocoDisguiseBootsItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseBootsItem,""String_Node_Str"");
  chocoboLegRawItem=(new ItemFood(Integer.parseInt(chocoboLegRawId.value),4,true)).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboLegRawItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  chocoboLegRawItem.setIconIndex(8);
  LanguageRegistry.addName(chocoboLegRawItem,""String_Node_Str"");
  chocoboLegCookedItem=(new ItemFood(Integer.parseInt(chocoboLegCookedId.value),8,false)).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboLegCookedItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  chocoboLegCookedItem.setIconIndex(9);
  LanguageRegistry.addName(chocoboLegCookedItem,""String_Node_Str"");
}","private void createItemInstances(){
  chocopediaItem=(new ChocoboItem(Integer.parseInt(chocopediaId.value))).setItemName(""String_Node_Str"").setMaxStackSize(1);
  chocopediaItem.setIconIndex(14);
  LanguageRegistry.addName(chocopediaItem,""String_Node_Str"");
  chocopediaItem.setCreativeTab(CreativeTabs.tabTools);
  chocoboFeatherItem=(new ChocoboItem(Integer.parseInt(chocoboFeatherId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboFeatherItem.setIconIndex(10);
  LanguageRegistry.addName(chocoboFeatherItem,""String_Node_Str"");
  chocoboFeatherItem.setCreativeTab(CreativeTabs.tabMaterials);
  chocoboSaddleItem=(new ChocoboItem(Integer.parseInt(chocoboSaddleId.value))).setItemName(""String_Node_Str"").setMaxStackSize(5);
  chocoboSaddleItem.setIconIndex(0);
  LanguageRegistry.addName(chocoboSaddleItem,""String_Node_Str"");
  chocoboSaddleItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboSaddleBagsItem=(new ChocoboItem(Integer.parseInt(chocoboSaddleBagsId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboSaddleBagsItem.setIconIndex(11);
  LanguageRegistry.addName(chocoboSaddleBagsItem,""String_Node_Str"");
  chocoboSaddleBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  chocoboPackBagsItem=(new ChocoboItem(Integer.parseInt(chocoboPackBagsId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboPackBagsItem.setIconIndex(12);
  LanguageRegistry.addName(chocoboPackBagsItem,""String_Node_Str"");
  chocoboPackBagsItem.setCreativeTab(CreativeTabs.tabTransport);
  gysahlSeedsItem=(new ItemSeeds(Integer.parseInt(gysahlSeedsId.value),Integer.parseInt(gysahlStemBlockId.value),Block.tilledField.blockID)).setItemName(""String_Node_Str"");
  gysahlSeedsItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  gysahlSeedsItem.setIconIndex(1);
  LanguageRegistry.addName(gysahlSeedsItem,""String_Node_Str"");
  gysahlSeedsItem.setCreativeTab(CreativeTabs.tabMaterials);
  gysahlLoverlyItem=(new ChocoboItem(Integer.parseInt(gysahlLoverlyId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlLoverlyItem.setIconIndex(2);
  LanguageRegistry.addName(gysahlLoverlyItem,""String_Node_Str"");
  gysahlLoverlyItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlGoldenItem=(new ChocoboItem(Integer.parseInt(gysahlGoldenId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlGoldenItem.setIconIndex(3);
  LanguageRegistry.addName(gysahlGoldenItem,""String_Node_Str"");
  gysahlGoldenItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlPinkItem=(new ChocoboItem(Integer.parseInt(gysahlPinkId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlPinkItem.setIconIndex(4);
  LanguageRegistry.addName(gysahlPinkItem,""String_Node_Str"");
  gysahlPinkItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlRedItem=(new ChocoboItem(Integer.parseInt(gysahlRedId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlRedItem.setIconIndex(5);
  LanguageRegistry.addName(gysahlRedItem,""String_Node_Str"");
  gysahlRedItem.setCreativeTab(CreativeTabs.tabMisc);
  gysahlChibiItem=(new ChocoboItem(Integer.parseInt(gysahlChibiId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  gysahlChibiItem.setIconIndex(6);
  LanguageRegistry.addName(gysahlChibiItem,""String_Node_Str"");
  gysahlChibiItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboCakeItem=(new ChocoboItem(Integer.parseInt(chocoboCakeId.value))).setItemName(""String_Node_Str"").setMaxStackSize(8);
  chocoboCakeItem.setIconIndex(7);
  LanguageRegistry.addName(chocoboCakeItem,""String_Node_Str"");
  chocoboCakeItem.setCreativeTab(CreativeTabs.tabMisc);
  chocoboWhistleItem=(new ChocoboItem(Integer.parseInt(chocoboWhistleId.value))).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboWhistleItem.setIconIndex(13);
  LanguageRegistry.addName(chocoboWhistleItem,""String_Node_Str"");
  chocoboWhistleItem.setCreativeTab(CreativeTabs.tabTools);
  chocoDisguiseHelmetItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseHelmetId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),0));
  chocoDisguiseHelmetItem.setIconIndex(17);
  chocoDisguiseHelmetItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseHelmetItem,""String_Node_Str"");
  chocoDisguisePlateItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguisePlateId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),1));
  chocoDisguisePlateItem.setIconIndex(18);
  chocoDisguisePlateItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguisePlateItem,""String_Node_Str"");
  chocoDisguiseLegsItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseLegsId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),2));
  chocoDisguiseLegsItem.setIconIndex(19);
  chocoDisguiseLegsItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseLegsItem,""String_Node_Str"");
  chocoDisguiseBootsItem=(new ChocoboItemDisguise(Integer.parseInt(chocoDisguiseBootsId.value),ChocoboArmourMaterial.CHOCOFEATHER,proxy.addArmor(""String_Node_Str""),3));
  chocoDisguiseBootsItem.setIconIndex(20);
  chocoDisguiseBootsItem.setItemName(""String_Node_Str"");
  LanguageRegistry.addName(chocoDisguiseBootsItem,""String_Node_Str"");
  chocoboLegRawItem=(new ItemFood(Integer.parseInt(chocoboLegRawId.value),4,true)).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboLegRawItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  chocoboLegRawItem.setIconIndex(8);
  LanguageRegistry.addName(chocoboLegRawItem,""String_Node_Str"");
  chocoboLegCookedItem=(new ItemFood(Integer.parseInt(chocoboLegCookedId.value),8,false)).setItemName(""String_Node_Str"").setMaxStackSize(64);
  chocoboLegCookedItem.setTextureFile(Constants.CHOCOBO_ITEM_TEXTURES);
  chocoboLegCookedItem.setIconIndex(9);
  LanguageRegistry.addName(chocoboLegCookedItem,""String_Node_Str"");
}",0.7913205628072555
98322,"public boolean attackEntityFrom(DamageSource damageSource,int tmpNaturalArmorRating){
  this.fleeingTick=60;
  this.entityToAttack=null;
  this.setInLove(false);
  if (this.isTamed()) {
    if (damageSource.getEntity() instanceof EntityWolf) {
      EntityWolf attackingWolf=(EntityWolf)damageSource.getEntity();
      if (attackingWolf.isTamed()) {
        attackingWolf.getOwner().setLastAttackingEntity(attackingWolf);
        attackingWolf.setAttackTarget(null);
        return false;
      }
    }
    if (damageSource.getEntity() instanceof EntityPlayer) {
      EntityPlayer entityPlayer=(EntityPlayer)damageSource.getEntity();
      if (null != entityPlayer) {
        if (null != this.getOwner() && this.getOwner().equals(entityPlayer)) {
          if (entityPlayer.isSneaking()) {
            return false;
          }
        }
        if (null != this.riddenByEntity && this.riddenByEntity.equals(entityPlayer)) {
          return false;
        }
      }
    }
  }
  boolean check=super.attackEntityFrom(damageSource,tmpNaturalArmorRating);
  if (Side.SERVER == FMLCommonHandler.instance().getEffectiveSide()) {
    this.sendHealthUpdate();
  }
  return check;
}","public boolean attackEntityFrom(DamageSource damageSource,int tmpNaturalArmorRating){
  this.fleeingTick=60;
  this.entityToAttack=null;
  this.setInLove(false);
  if (this.isTamed()) {
    if (damageSource.getEntity() instanceof EntityPlayer) {
      EntityPlayer entityPlayer=(EntityPlayer)damageSource.getEntity();
      if (null != entityPlayer) {
        if (null != this.getOwner() && this.getOwner().equals(entityPlayer)) {
          if (entityPlayer.isSneaking()) {
            return false;
          }
        }
        if (null != this.riddenByEntity && this.riddenByEntity.equals(entityPlayer)) {
          return false;
        }
      }
    }
  }
  boolean check=super.attackEntityFrom(damageSource,tmpNaturalArmorRating);
  if (Side.SERVER == FMLCommonHandler.instance().getEffectiveSide()) {
    this.sendHealthUpdate();
  }
  return check;
}",0.8440727988194786
98323,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mUtils=new Utils(getApplicationContext());
  setContentView(R.layout.webactivity);
  RootTools.useRoot=false;
  try {
    RootTools.getShell(RootTools.useRoot);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (RootTools.isProcessRunning(""String_Node_Str"")) {
    RootTools.killProcess(""String_Node_Str"");
  }
  Bundle b=getIntent().getExtras();
  String file_to_open=b.getString(""String_Node_Str"");
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  boolean http_public=prefs.getBoolean(""String_Node_Str"",false);
  String http_eval=""String_Node_Str"";
  if (http_public) {
    http_eval=""String_Node_Str"";
    String localip=getLocalIpAddress();
    if (localip != null) {
      mUtils.myToast(""String_Node_Str"" + localip + ""String_Node_Str"",Toast.LENGTH_LONG);
    }
  }
  String output=mUtils.exec(""String_Node_Str"" + http_eval + ""String_Node_Str""+ file_to_open+ ""String_Node_Str"");
  try {
    Thread.sleep(1000);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (RootTools.isProcessRunning(""String_Node_Str"")) {
    webview=(WebView)findViewById(R.id.webview);
    webview.setWebViewClient(new RadareWebViewClient());
    webview.getSettings().setJavaScriptEnabled(true);
    webview.loadUrl(""String_Node_Str"");
  }
 else {
    mUtils.myToast(""String_Node_Str"" + file_to_open,Toast.LENGTH_SHORT);
    finish();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mUtils=new Utils(getApplicationContext());
  setContentView(R.layout.webactivity);
  RootTools.useRoot=false;
  try {
    RootTools.getShell(RootTools.useRoot);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (RootTools.isProcessRunning(""String_Node_Str"")) {
    RootTools.killProcess(""String_Node_Str"");
  }
  Bundle b=getIntent().getExtras();
  String file_to_open=b.getString(""String_Node_Str"");
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  boolean http_public=prefs.getBoolean(""String_Node_Str"",false);
  String http_eval=""String_Node_Str"";
  if (http_public) {
    http_eval=""String_Node_Str"";
    String localip=getLocalIpAddress();
    if (localip != null) {
      mUtils.myToast(""String_Node_Str"" + localip + ""String_Node_Str"",Toast.LENGTH_LONG);
    }
  }
  mUtils.exec(""String_Node_Str"" + http_eval + ""String_Node_Str""+ file_to_open);
  if (RootTools.isProcessRunning(""String_Node_Str"")) {
    webview=(WebView)findViewById(R.id.webview);
    webview.setWebViewClient(new RadareWebViewClient());
    webview.getSettings().setJavaScriptEnabled(true);
    webview.loadUrl(""String_Node_Str"");
  }
 else {
    mUtils.myToast(""String_Node_Str"" + file_to_open,Toast.LENGTH_SHORT);
    finish();
  }
}",0.9557337051237365
98324,"/** 
 * Extract an entry from the archive. This method assumes that the tarIn stream has been properly set with a call to getNextEntry().
 * @param destDir The destination directory into which to extract.
 * @param entry The TarEntry returned by tarIn.getNextEntry().
 */
private void extractEntry(File destDir,TarEntry entry) throws IOException {
  if (this.verbose) {
    if (this.progressDisplay != null)     this.progressDisplay.showTarProgressMessage(entry.getName());
  }
  String name=entry.getName();
  name=name.replace('/',File.separatorChar);
  File destFile=new File(destDir,name);
  if (entry.isSymbolicLink()) {
    try {
      Runtime rt=Runtime.getRuntime();
      Process process=rt.exec(""String_Node_Str"");
      DataOutputStream os=new DataOutputStream(process.getOutputStream());
      String command=""String_Node_Str"" + entry.header.linkName.toString() + ""String_Node_Str""+ destDir+ name;
      os.writeBytes(command + ""String_Node_Str"");
      os.flush();
      os.writeBytes(""String_Node_Str"");
      os.flush();
      process.waitFor();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (entry.isDirectory()) {
    if (!destFile.exists()) {
      if (!destFile.mkdirs()) {
        throw new IOException(""String_Node_Str"" + destFile.getPath() + ""String_Node_Str"");
      }
    }
  }
 else {
    File subDir=new File(destFile.getParent());
    if (!subDir.exists()) {
      if (!subDir.mkdirs()) {
        throw new IOException(""String_Node_Str"" + subDir.getPath() + ""String_Node_Str"");
      }
    }
    if (this.keepOldFiles && destFile.exists()) {
      if (this.verbose) {
        if (this.progressDisplay != null)         this.progressDisplay.showTarProgressMessage(""String_Node_Str"" + entry.getName());
      }
    }
 else {
      boolean asciiTrans=false;
      FileOutputStream out=new FileOutputStream(destFile);
      if (this.asciiTranslate) {
        MimeType mime=null;
        String contentType=null;
        try {
          contentType=FileTypeMap.getDefaultFileTypeMap().getContentType(destFile);
          mime=new MimeType(contentType);
          if (mime.getPrimaryType().equalsIgnoreCase(""String_Node_Str"")) {
            asciiTrans=true;
          }
 else           if (this.transTyper != null) {
            if (this.transTyper.isAsciiFile(entry.getName())) {
              asciiTrans=true;
            }
          }
        }
 catch (        MimeTypeParseException ex) {
        }
        if (this.debug) {
          System.err.println(""String_Node_Str"" + asciiTrans + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ mime.getPrimaryType()+ ""String_Node_Str"");
        }
      }
      PrintWriter outw=null;
      if (asciiTrans) {
        outw=new PrintWriter(out);
      }
      byte[] rdbuf=new byte[32 * 1024];
      for (; ; ) {
        int numRead=this.tarIn.read(rdbuf);
        if (numRead == -1)         break;
        if (asciiTrans) {
          for (int off=0, b=0; b < numRead; ++b) {
            if (rdbuf[b] == 10) {
              String s=new String(rdbuf,off,(b - off));
              outw.println(s);
              off=b + 1;
            }
          }
        }
 else {
          out.write(rdbuf,0,numRead);
        }
      }
      if (asciiTrans)       outw.close();
 else       out.close();
    }
  }
}","/** 
 * Extract an entry from the archive. This method assumes that the tarIn stream has been properly set with a call to getNextEntry().
 * @param destDir The destination directory into which to extract.
 * @param entry The TarEntry returned by tarIn.getNextEntry().
 */
private void extractEntry(File destDir,TarEntry entry) throws IOException {
  if (this.verbose) {
    if (this.progressDisplay != null)     this.progressDisplay.showTarProgressMessage(entry.getName());
  }
  String name=entry.getName();
  name=name.replace('/',File.separatorChar);
  File destFile=new File(destDir,name);
  if (entry.isSymbolicLink()) {
    try {
      Runtime rt=Runtime.getRuntime();
      Process process=rt.exec(""String_Node_Str"");
      DataOutputStream os=new DataOutputStream(process.getOutputStream());
      String command=""String_Node_Str"" + entry.header.linkName.toString() + ""String_Node_Str""+ destDir+ name;
      os.writeBytes(command + ""String_Node_Str"");
      os.flush();
      os.writeBytes(""String_Node_Str"");
      os.flush();
      process.waitFor();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (entry.isDirectory()) {
    if (!destFile.exists()) {
      if (!destFile.mkdirs()) {
        throw new IOException(""String_Node_Str"" + destFile.getPath() + ""String_Node_Str"");
      }
    }
  }
 else {
    File subDir=new File(destFile.getParent());
    if (!subDir.exists()) {
      if (!subDir.mkdirs()) {
        throw new IOException(""String_Node_Str"" + subDir.getPath() + ""String_Node_Str"");
      }
    }
    if (this.keepOldFiles && destFile.exists()) {
      if (this.verbose) {
        if (this.progressDisplay != null)         this.progressDisplay.showTarProgressMessage(""String_Node_Str"" + entry.getName());
      }
    }
 else {
      try {
        boolean asciiTrans=false;
        FileOutputStream out=new FileOutputStream(destFile);
        if (this.asciiTranslate) {
          MimeType mime=null;
          String contentType=null;
          try {
            contentType=FileTypeMap.getDefaultFileTypeMap().getContentType(destFile);
            mime=new MimeType(contentType);
            if (mime.getPrimaryType().equalsIgnoreCase(""String_Node_Str"")) {
              asciiTrans=true;
            }
 else             if (this.transTyper != null) {
              if (this.transTyper.isAsciiFile(entry.getName())) {
                asciiTrans=true;
              }
            }
          }
 catch (          MimeTypeParseException ex) {
          }
          if (this.debug) {
            System.err.println(""String_Node_Str"" + asciiTrans + ""String_Node_Str""+ contentType+ ""String_Node_Str""+ mime.getPrimaryType()+ ""String_Node_Str"");
          }
        }
        PrintWriter outw=null;
        if (asciiTrans) {
          outw=new PrintWriter(out);
        }
        byte[] rdbuf=new byte[32 * 1024];
        for (; ; ) {
          int numRead=this.tarIn.read(rdbuf);
          if (numRead == -1)           break;
          if (asciiTrans) {
            for (int off=0, b=0; b < numRead; ++b) {
              if (rdbuf[b] == 10) {
                String s=new String(rdbuf,off,(b - off));
                outw.println(s);
                off=b + 1;
              }
            }
          }
 else {
            out.write(rdbuf,0,numRead);
          }
        }
        if (asciiTrans)         outw.close();
 else         out.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9701406833189778
98325,"public void onClick(View v){
  remoteRunButton.setClickable(false);
  outputView.setText(""String_Node_Str"");
  final String localPath=""String_Node_Str"";
  final CheckBox checkBox=(CheckBox)findViewById(R.id.checkbox);
  final CheckBox checkHg=(CheckBox)findViewById(R.id.checkhg);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      String url;
      String hg;
      String output;
      String arch=""String_Node_Str"";
      String cpuabi=Build.CPU_ABI;
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      output(""String_Node_Str"" + cpuabi + ""String_Node_Str"");
      if (checkHg.isChecked()) {
        output(""String_Node_Str"");
        hg=""String_Node_Str"";
      }
 else {
        output(""String_Node_Str"");
        hg=""String_Node_Str"";
      }
      url=""String_Node_Str"" + arch + ""String_Node_Str""+ hg;
      if (cpuabi.matches(""String_Node_Str"")) {
        if (!checkHg.isChecked())         url=""String_Node_Str"";
      }
      RootTools.useRoot=false;
      float space=(float)(RootTools.getSpace(""String_Node_Str"") / 1000);
      output(""String_Node_Str"" + space + ""String_Node_Str"");
      if (space == 0) {
        output(""String_Node_Str"");
      }
 else {
        if (space < 10) {
          output(""String_Node_Str"");
        }
      }
      output(""String_Node_Str"");
      if (isInternetAvailable() == false) {
        output(""String_Node_Str"");
      }
 else {
        RootTools.useRoot=false;
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        download(url,localPath);
        output(""String_Node_Str"");
        try {
          unTarGz(localPath,""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        boolean isRooted=false;
        isRooted=RootTools.isAccessGiven();
        boolean simlinksCreated=false;
        if (checkBox.isChecked()) {
          if (!isRooted) {
            output(""String_Node_Str"");
          }
 else {
            RootTools.useRoot=true;
            output(""String_Node_Str"");
            RootTools.remount(""String_Node_Str"",""String_Node_Str"");
            exec(""String_Node_Str"");
            exec(""String_Node_Str"");
            output=exec(""String_Node_Str"");
            output(output);
            if (RootTools.exists(""String_Node_Str"")) {
              String file;
              File folder=new File(""String_Node_Str"");
              File[] listOfFiles=folder.listFiles();
              for (int i=0; i < listOfFiles.length; i++) {
                if (listOfFiles[i].isFile()) {
                  file=listOfFiles[i].getName();
                  exec(""String_Node_Str"" + file + ""String_Node_Str""+ file);
                }
              }
            }
            RootTools.remount(""String_Node_Str"",""String_Node_Str"");
            File radarelink=new File(""String_Node_Str"");
            if (radarelink.exists()) {
              output(""String_Node_Str"");
              simlinksCreated=true;
            }
 else {
              output(""String_Node_Str"");
              simlinksCreated=false;
            }
            RootTools.useRoot=false;
          }
        }
        File radarebin=new File(""String_Node_Str"");
        if (!radarebin.exists()) {
          output(""String_Node_Str"");
        }
 else {
          if (simlinksCreated == false)           output(""String_Node_Str"");
          output(""String_Node_Str"");
          output=exec(""String_Node_Str"");
          output(output);
        }
      }
      remoteRunButton.setClickable(true);
    }
  }
);
  thread.start();
}","public void onClick(View v){
  remoteRunButton.setClickable(false);
  outputView.setText(""String_Node_Str"");
  final String localPath=""String_Node_Str"";
  final CheckBox checkBox=(CheckBox)findViewById(R.id.checkbox);
  final CheckBox checkHg=(CheckBox)findViewById(R.id.checkhg);
  Thread thread=new Thread(new Runnable(){
    public void run(){
      String url;
      String hg;
      String output;
      String arch=""String_Node_Str"";
      String cpuabi=Build.CPU_ABI;
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      if (cpuabi.matches(""String_Node_Str""))       arch=""String_Node_Str"";
      output(""String_Node_Str"" + cpuabi + ""String_Node_Str"");
      if (checkHg.isChecked()) {
        output(""String_Node_Str"");
        hg=""String_Node_Str"";
      }
 else {
        output(""String_Node_Str"");
        hg=""String_Node_Str"";
      }
      url=""String_Node_Str"" + arch + ""String_Node_Str""+ hg;
      if (cpuabi.matches(""String_Node_Str"")) {
        if (!checkHg.isChecked())         url=""String_Node_Str"";
      }
      RootTools.useRoot=false;
      long space=(RootTools.getSpace(""String_Node_Str"") / 1000);
      output(""String_Node_Str"" + space + ""String_Node_Str"");
      if (space <= 0) {
        output(""String_Node_Str"");
      }
 else {
        if (space < 10) {
          output(""String_Node_Str"");
        }
      }
      output(""String_Node_Str"");
      if (isInternetAvailable() == false) {
        output(""String_Node_Str"");
      }
 else {
        RootTools.useRoot=false;
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        download(url,localPath);
        output(""String_Node_Str"");
        try {
          unTarGz(localPath,""String_Node_Str"");
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        exec(""String_Node_Str"");
        boolean isRooted=false;
        isRooted=RootTools.isAccessGiven();
        boolean symlinksCreated=false;
        if (checkBox.isChecked()) {
          if (!isRooted) {
            output(""String_Node_Str"");
          }
 else {
            RootTools.useRoot=true;
            output(""String_Node_Str"");
            RootTools.remount(""String_Node_Str"",""String_Node_Str"");
            exec(""String_Node_Str"");
            exec(""String_Node_Str"");
            if (RootTools.exists(""String_Node_Str"")) {
              output=exec(""String_Node_Str"");
              output(output);
              String file;
              File folder=new File(""String_Node_Str"");
              File[] listOfFiles=folder.listFiles();
              for (int i=0; i < listOfFiles.length; i++) {
                if (listOfFiles[i].isFile()) {
                  file=listOfFiles[i].getName();
                  exec(""String_Node_Str"" + file + ""String_Node_Str""+ file);
                  output(""String_Node_Str"" + file + ""String_Node_Str"");
                }
              }
            }
            RootTools.remount(""String_Node_Str"",""String_Node_Str"");
            if (RootTools.exists(""String_Node_Str"")) {
              output(""String_Node_Str"");
              symlinksCreated=true;
            }
 else {
              output(""String_Node_Str"");
              symlinksCreated=false;
            }
            RootTools.useRoot=false;
          }
        }
        RootTools.useRoot=false;
        if (!RootTools.exists(""String_Node_Str"")) {
          output(""String_Node_Str"");
        }
 else {
          if (symlinksCreated == false)           output(""String_Node_Str"");
          output(""String_Node_Str"");
          output=exec(""String_Node_Str"");
          output(output);
        }
      }
      remoteRunButton.setClickable(true);
    }
  }
);
  thread.start();
}",0.3895670050109212
98326,"private Boolean checkAll(AbstractParseNode n,String v,IStrategoTerm constraint,AbstractParseNode[] kids,Map<String,Object> env){
  if (atParseTime)   return noValue();
  Stack<AbstractParseNode> all=new Stack<AbstractParseNode>();
  all.push(n);
  String sort=null;
  while (!all.isEmpty()) {
    AbstractParseNode next=all.pop();
    if (sort == null && !next.isAmbNode() && !next.isParseProductionNode())     sort=sortOfNode(next);
    if (next.isAmbNode()) {
      boolean left=checkAll(next.getChildren()[0],v,constraint,kids,env);
      boolean right=checkAll(next.getChildren()[1],v,constraint,kids,env);
      if (!left && !right)       return false;
      if (left && !right) {
        ((ParseNode)next).disambiguate(next.getChildren()[0]);
        disambiguationCount++;
      }
      if (!left && right) {
        ((ParseNode)next).disambiguate(next.getChildren()[1]);
        disambiguationCount++;
      }
    }
 else     if (next.isParseProductionNode() || sort != null && !sort.equals(sortOfNode(next)) || !isListNode(next)) {
      Object old=env.get(v);
      env.put(v,next);
      try {
        Boolean b=evalConstraint(constraint.getSubterm(2),kids,env,Boolean.class);
        if (b != NO_VALUE && !b)         return false;
      }
  finally {
        if (old == null)         env.remove(v);
 else         env.put(v,old);
      }
    }
 else     for (int j=next.getChildren().length - 1; j >= 0; j--) {
      AbstractParseNode kid=next.getChildren()[j];
      if (kid.isAmbNode() || sort.equals(sortOfNode(kid)))       all.push(kid);
    }
  }
  return true;
}","private Boolean checkAll(AbstractParseNode n,String v,IStrategoTerm constraint,AbstractParseNode[] kids,Map<String,Object> env){
  if (atParseTime)   return noValue();
  Stack<AbstractParseNode> all=new Stack<AbstractParseNode>();
  all.push(n);
  String sort=null;
  while (!all.isEmpty()) {
    AbstractParseNode next=all.pop();
    if (sort == null && !next.isAmbNode() && !next.isParseProductionNode())     sort=sortOfNode(next);
    if (next.isAmbNode()) {
      boolean left=checkAll(next.getChildren()[0],v,constraint,kids,env);
      boolean right=checkAll(next.getChildren()[1],v,constraint,kids,env);
      if (!left && !right)       return false;
      if (left && !right) {
        ((ParseNode)next).disambiguate(next.getChildren()[0]);
        disambiguationCount++;
      }
      if (!left && right) {
        ((ParseNode)next).disambiguate(next.getChildren()[1]);
        disambiguationCount++;
      }
    }
 else     if (next.isParseProductionNode() || sort != null && !sort.equals(sortOfNode(next)) || !isListNode(next)) {
      Object old=env.get(v);
      env.put(v,next);
      try {
        Boolean b=evalConstraint(constraint,kids,env,Boolean.class);
        if (b != NO_VALUE && !b)         return false;
      }
  finally {
        if (old == null)         env.remove(v);
 else         env.put(v,old);
      }
    }
 else     for (int j=next.getChildren().length - 1; j >= 0; j--) {
      AbstractParseNode kid=next.getChildren()[j];
      if (kid.isAmbNode() || sort.equals(sortOfNode(kid)))       all.push(kid);
    }
  }
  return true;
}",0.9955470737913484
98327,"private Object evalConstraint(IStrategoTerm constraint,AbstractParseNode[] kids,Map<String,Object> env){
switch (constraint.getTermType()) {
case IStrategoTerm.INT:
{
      int i=Term.asJavaInt(constraint);
      return getSubtree(i,kids);
    }
case IStrategoTerm.STRING:
  String v=Term.asJavaString(constraint);
Object o=env.get(v);
if (o == null) throw new IllegalStateException(""String_Node_Str"" + v);
return o;
case IStrategoTerm.APPL:
IStrategoConstructor cons=Term.tryGetConstructor(constraint);
String consName=cons.getName();
if (consName.equals(""String_Node_Str"")) {
String num=Term.asJavaString(constraint.getSubterm(0));
int i=Integer.parseInt(num);
return i;
}
if (consName.equals(""String_Node_Str"")) {
String num=Term.asJavaString(constraint.getSubterm(0));
int i=Integer.parseInt(num);
return getSubtree(i,kids);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Integer i1=evalConstraint(constraint.getSubterm(0),kids,env,Integer.class);
Integer i2=evalConstraint(constraint.getSubterm(1),kids,env,Integer.class);
return binArithComp(consName,i1,i2);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Integer i1=evalConstraint(constraint.getSubterm(0),kids,env,Integer.class);
Integer i2=evalConstraint(constraint.getSubterm(1),kids,env,Integer.class);
return binArithOp(consName,i1,i2);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
return nodeSelector(consName,n);
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 != NO_VALUE && b1) return true;
Boolean b2=evalConstraint(constraint.getSubterm(1),kids,env,Boolean.class);
return b2;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 != NO_VALUE && !b1) return false;
Boolean b2=evalConstraint(constraint.getSubterm(1),kids,env,Boolean.class);
return b2;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 == NO_VALUE) return NO_VALUE;
return !b1;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,3,consName);
ensureType(constraint.getSubterm(0),IStrategoString.class,constraint.getSubterm(0));
v=Term.asJavaString(constraint.getSubterm(0));
AbstractParseNode n=evalConstraint(constraint.getSubterm(1),kids,env,AbstractParseNode.class);
return checkAll(n,v,constraint,kids,env);
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
if (n == NO_VALUE) return NO_VALUE;
return n.getColumn();
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
if (n == NO_VALUE) return NO_VALUE;
return n.getLine();
}
throw new IllegalStateException(""String_Node_Str"" + consName);
default :
throw new IllegalStateException(""String_Node_Str"" + constraint);
}
}","private Object evalConstraint(IStrategoTerm constraint,AbstractParseNode[] kids,Map<String,Object> env){
switch (constraint.getTermType()) {
case IStrategoTerm.INT:
{
      int i=Term.asJavaInt(constraint);
      return getSubtree(i,kids);
    }
case IStrategoTerm.STRING:
  String v=Term.asJavaString(constraint);
Object o=env.get(v);
if (o == null) throw new IllegalStateException(""String_Node_Str"" + v);
return o;
case IStrategoTerm.APPL:
IStrategoConstructor cons=Term.tryGetConstructor(constraint);
String consName=cons.getName();
if (consName.equals(""String_Node_Str"")) {
String num=Term.asJavaString(constraint.getSubterm(0));
int i=Integer.parseInt(num);
return i;
}
if (consName.equals(""String_Node_Str"")) {
String num=Term.asJavaString(constraint.getSubterm(0));
int i=Integer.parseInt(num);
return getSubtree(i,kids);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Integer i1=evalConstraint(constraint.getSubterm(0),kids,env,Integer.class);
Integer i2=evalConstraint(constraint.getSubterm(1),kids,env,Integer.class);
return binArithComp(consName,i1,i2);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Integer i1=evalConstraint(constraint.getSubterm(0),kids,env,Integer.class);
Integer i2=evalConstraint(constraint.getSubterm(1),kids,env,Integer.class);
return binArithOp(consName,i1,i2);
}
if (consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"") || consName.equals(""String_Node_Str"")|| consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
return nodeSelector(consName,n);
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 != NO_VALUE && b1) return true;
Boolean b2=evalConstraint(constraint.getSubterm(1),kids,env,Boolean.class);
return b2;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,2,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 != NO_VALUE && !b1) return false;
Boolean b2=evalConstraint(constraint.getSubterm(1),kids,env,Boolean.class);
return b2;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
Boolean b1=evalConstraint(constraint.getSubterm(0),kids,env,Boolean.class);
if (b1 == NO_VALUE) return NO_VALUE;
return !b1;
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,3,consName);
ensureType(constraint.getSubterm(0),IStrategoString.class,constraint.getSubterm(0));
v=Term.asJavaString(constraint.getSubterm(0));
AbstractParseNode n=evalConstraint(constraint.getSubterm(1),kids,env,AbstractParseNode.class);
return checkAll(n,v,constraint.getSubterm(2),kids,env);
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
if (n == NO_VALUE) return NO_VALUE;
return n.getColumn();
}
if (consName.equals(""String_Node_Str"")) {
ensureChildCount(constraint,1,consName);
AbstractParseNode n=evalConstraint(constraint.getSubterm(0),kids,env,AbstractParseNode.class);
if (n == NO_VALUE) return NO_VALUE;
return n.getLine();
}
throw new IllegalStateException(""String_Node_Str"" + consName);
default :
throw new IllegalStateException(""String_Node_Str"" + constraint);
}
}",0.9981223175965666
98328,"private void checkMakeLayoutMessages(){
  if (mkExplicitMessages[1].length > 0 && LOGGING) {
    System.out.println(mkExplicitMessages[1][0]);
  }
  if (mkImplicitMessages[1].length > 0 && LOGGING) {
    System.out.println(mkExplicitMessages[1][0]);
  }
}","private void checkMakeLayoutMessages(){
  if (mkExplicitMessages[1].length > 0 && LOGGING) {
    System.out.println(mkExplicitMessages[1][0]);
  }
  if (mkImplicitMessages[1].length > 0 && LOGGING) {
    System.out.println(mkImplicitMessages[1][0]);
  }
}",0.992156862745098
98329,"public void testPackage(String pkg) throws IOException {
  File dir;
  try {
    dir=cabalUnpack(pkg);
  }
 catch (  ExecutionError e) {
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  testFiles(dir,pkg);
  logResult(pkg);
  addAllFailures(fileTester.getFailures());
  addOks(fileTester.getOkCount());
  addOkFails(fileTester.getOkFailCount());
  addNoParses(fileTester.getNoParseCount());
  addAmbInfix(fileTester.getAmbInfixCount());
  addTimeout(fileTester.getTimeout());
  addComparisonFailures(fileTester.getComparisonFailures());
  fileTester.reset();
}","public void testPackage(String pkg) throws IOException {
  File dir;
  try {
    dir=cabalUnpack(pkg);
  }
 catch (  ExecutionError e) {
    String msg=e.getCause() == null ? ""String_Node_Str"" : e.getCause().getMessage();
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str""+ msg);
    return;
  }
  testFiles(dir,pkg);
  logResult(pkg);
  addAllFailures(fileTester.getFailures());
  addOks(fileTester.getOkCount());
  addOkFails(fileTester.getOkFailCount());
  addNoParses(fileTester.getNoParseCount());
  addAmbInfix(fileTester.getAmbInfixCount());
  addTimeout(fileTester.getTimeout());
  addComparisonFailures(fileTester.getComparisonFailures());
  fileTester.reset();
}",0.8927492447129909
98330,"private IStrategoTerm newParseSpeed(File f,String pkg){
  newResultSpeed=null;
  newExceptionSpeed=null;
  if (f == null)   return null;
  String input=FileTools.tryLoadFileAsString(f.getAbsolutePath());
  try {
    newResultSpeed=(IStrategoTerm)newParserSpeed.parse(input,f.getAbsolutePath());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    if (e.getCause() instanceof SGLRException)     newExceptionSpeed=(SGLRException)e.getCause();
 else     if (e.getCause() instanceof StackOverflowError) {
      newExceptionCorrectness=e.getCause();
      if (LOGGING)       System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     throw new RuntimeException(e);
  }
  if (LOGGING) {
    String time;
    if (newParserSpeed.timeParse >= 0)     time=newParserSpeed.timeParse + ""String_Node_Str"";
 else     time=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str""+ time+ ""String_Node_Str""+ (newResultSpeed != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  return newResultCorrectness;
}","private IStrategoTerm newParseSpeed(File f,String pkg){
  newResultSpeed=null;
  newExceptionSpeed=null;
  if (f == null)   return null;
  String input=FileTools.tryLoadFileAsString(f.getAbsolutePath());
  try {
    newResultSpeed=(IStrategoTerm)newParserSpeed.parse(input,f.getAbsolutePath());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    if (e.getCause() instanceof SGLRException)     newExceptionSpeed=(SGLRException)e.getCause();
 else     if (e.getCause() instanceof StackOverflowError) {
      newExceptionSpeed=e.getCause();
      if (LOGGING)       System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     throw new RuntimeException(e);
  }
  if (LOGGING) {
    String time;
    if (newParserSpeed.timeParse >= 0)     time=newParserSpeed.timeParse + ""String_Node_Str"";
 else     time=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str""+ time+ ""String_Node_Str""+ (newResultSpeed != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  return newResultCorrectness;
}",0.9930008748906388
98331,"private IStrategoTerm oldParse(File f,String pkg){
  oldResult=null;
  oldException=null;
  if (f == null)   return null;
  String input=FileTools.tryLoadFileAsString(f.getAbsolutePath());
  try {
    oldResult=(IStrategoTerm)oldParser.parse(input,f.getAbsolutePath());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    if (e.getCause() instanceof org.spoofax.jsglr_orig.shared.SGLRException)     oldException=(org.spoofax.jsglr_orig.shared.SGLRException)e.getCause();
 else     throw new RuntimeException(e);
  }
  if (LOGGING) {
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str""+ oldParser.timeParse+ ""String_Node_Str""+ (oldResult != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  return oldResult;
}","private IStrategoTerm oldParse(File f,String pkg){
  oldResult=null;
  oldException=null;
  if (f == null)   return null;
  String input=FileTools.tryLoadFileAsString(f.getAbsolutePath());
  try {
    oldResult=(IStrategoTerm)oldParser.parse(input,f.getAbsolutePath());
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    if (e.getCause() instanceof org.spoofax.jsglr_orig.shared.SGLRException)     oldException=(org.spoofax.jsglr_orig.shared.SGLRException)e.getCause();
 else     if (e.getCause() instanceof StackOverflowError) {
      oldException=e.getCause();
      if (LOGGING)       System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str"");
    }
 else     throw new RuntimeException(e);
  }
  if (LOGGING) {
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str""+ oldParser.timeParse+ ""String_Node_Str""+ (oldResult != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  return oldResult;
}",0.8513661202185793
98332,"public void testPackage(String pkg) throws IOException {
  File dir=cabalUnpack(pkg);
  testFiles(dir,pkg);
  logResult(pkg);
  addAllFailures(fileTester.getFailures());
  addOks(fileTester.getOkCount());
  addOkFails(fileTester.getOkFailCount());
  addNoParses(fileTester.getNoParseCount());
  addAmbInfix(fileTester.getAmbInfixCount());
  addTimeout(fileTester.getTimeout());
  addComparisonFailures(fileTester.getComparisonFailures());
  fileTester.reset();
}","public void testPackage(String pkg) throws IOException {
  File dir;
  try {
    dir=cabalUnpack(pkg);
  }
 catch (  ExecutionError e) {
    System.out.println(""String_Node_Str"" + pkg + ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  testFiles(dir,pkg);
  logResult(pkg);
  addAllFailures(fileTester.getFailures());
  addOks(fileTester.getOkCount());
  addOkFails(fileTester.getOkFailCount());
  addNoParses(fileTester.getNoParseCount());
  addAmbInfix(fileTester.getAmbInfixCount());
  addTimeout(fileTester.getTimeout());
  addComparisonFailures(fileTester.getComparisonFailures());
  fileTester.reset();
}",0.8563484708063022
98333,"protected ParseComparisonFailure logComparisonFailure(String file,IStrategoTerm expected,IStrategoTerm actual){
  ParseComparisonFailure f=new ParseComparisonFailure(file,expected,actual);
  failures.add(f);
  return f;
}","protected ParseComparisonFailure logComparisonFailure(String file,IStrategoTerm expected,IStrategoTerm actual){
  ParseComparisonFailure f=new ParseComparisonFailure(file,expected,actual);
  failures.add(f);
  comparisonFailures++;
  return f;
}",0.9484978540772532
98334,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (Double.isNaN(maf[PREV - 1]) || Double.isNaN(mas[PREV - 1]))   return;
  if (maf[PREV - 1] < mas[PREV - 1] && maf[PREV] > mas[PREV] && tick.getBid() > mas[PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.BUY);
    }
  }
  if (maf[PREV - 1] > mas[PREV - 1] && maf[PREV] < mas[PREV] && tick.getBid() < mas[PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (Double.isNaN(maf[PREV - 1]) || Double.isNaN(mas[PREV - 1]))   return;
  if (maf[PREV - 1] < mas[PREV - 1] && maf[PREV] > mas[PREV] && tick.getBid() > mas[PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (maf[PREV - 1] > mas[PREV - 1] && maf[PREV] < mas[PREV] && tick.getBid() < mas[PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
}",0.9830508474576272
98335,"private IOrder submitOrder(OrderCommand orderCommand) throws JFException {
  double stopLossPrice=0.0, takeProfitPrice=0.0;
  double bidPrice=history.getLastTick(instrument).getBid();
  double askPrice=history.getLastTick(instrument).getAsk();
  String label=getLabel(instrument);
  String name=instrument.getPrimaryCurrency() + instrument.getPairsSeparator() + instrument.getSecondaryCurrency();
  if (orderCommand == OrderCommand.BUY) {
    if (stopLossPips > 0) {
      stopLossPrice=bidPrice - getPipPrice(stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=bidPrice + getPipPrice(takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
 else {
    if (stopLossPips > 0) {
      stopLossPrice=askPrice + getPipPrice(stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=askPrice - getPipPrice(takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
  return engine.submitOrder(label,instrument,orderCommand,volume,0,slippage,stopLossPrice,takeProfitPrice);
}","private IOrder submitOrder(Instrument instrument,OrderCommand orderCommand) throws JFException {
  double stopLossPrice=0.0, takeProfitPrice=0.0;
  double bidPrice=history.getLastTick(instrument).getBid();
  double askPrice=history.getLastTick(instrument).getAsk();
  String label=getLabel(instrument);
  String name=instrument.getPrimaryCurrency() + instrument.getPairsSeparator() + instrument.getSecondaryCurrency();
  if (orderCommand == OrderCommand.BUY) {
    if (stopLossPips > 0) {
      stopLossPrice=bidPrice - getPipPrice(instrument,stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=bidPrice + getPipPrice(instrument,takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
 else {
    if (stopLossPips > 0) {
      stopLossPrice=askPrice + getPipPrice(instrument,stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=askPrice - getPipPrice(instrument,takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
  return engine.submitOrder(label,instrument,orderCommand,volume,0,slippage,stopLossPrice,takeProfitPrice);
}",0.9718670076726342
98336,"@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (instrument != this.instrument || period != this.period)   return;
  maf=indicators.ma(instrument,period,OfferSide.BID,appliedPriceFast,timePeriodFast,maTypeFast,indicatorFilter,PREV + 1,bidBar.getTime(),0);
  mas=indicators.ma(instrument,period,OfferSide.BID,appliedPriceSlow,timePeriodSlow,maTypeSlow,indicatorFilter,PREV + 1,bidBar.getTime(),0);
}","@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (instrument != this.instrument || period != this.period)   return;
  IBar prevBar=history.getBar(instrument,period,OfferSide.BID,1);
  maf=indicators.ma(instrument,period,OfferSide.BID,appliedPriceFast,timePeriodFast,maTypeFast,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  mas=indicators.ma(instrument,period,OfferSide.BID,appliedPriceSlow,timePeriodSlow,maTypeSlow,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
}",0.8305084745762712
98337,"protected double getPipPrice(double pips){
  return pips * instrument.getPipValue();
}","protected double getPipPrice(Instrument instrument,double pips){
  return instrument.getPipValue() * pips;
}",0.8144329896907216
98338,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar[PREV - 1] == null || bar[PREV] == null)   return;
  if (priceToPips(dc[PREV - 1][HIGH] - dc[PREV - 1][LOW]) < thresholdPips) {
    return;
  }
  if (tick.getBid() > dc[PREV - 1][HIGH] && bar[PREV - 1].getClose() > dc[PREV - 1][HIGH] && bar[PREV].getClose() <= dc[PREV][HIGH]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.BUY);
    }
  }
  if (tick.getBid() < dc[PREV - 1][LOW] && bar[PREV - 1].getClose() < dc[PREV - 1][LOW] && bar[PREV].getClose() >= dc[PREV][LOW]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar[PREV - 1] == null || bar[PREV] == null)   return;
  if (priceToPips(instrument,dc[PREV - 1][UPPER] - dc[PREV - 1][LOWER]) < thresholdPips) {
    return;
  }
  if (tick.getBid() > dc[PREV - 1][UPPER] && bar[PREV - 1].getClose() > dc[PREV - 1][UPPER] && bar[PREV].getClose() <= dc[PREV][UPPER]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (tick.getBid() < dc[PREV - 1][LOWER] && bar[PREV - 1].getClose() < dc[PREV - 1][LOWER] && bar[PREV].getClose() >= dc[PREV][LOWER]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
}",0.9529627367135004
98339,"protected double getPipPrice(double pips){
  return pips * instrument.getPipValue();
}","protected double getPipPrice(Instrument instrument,double pips){
  return instrument.getPipValue() * pips;
}",0.8144329896907216
98340,"protected double priceToPips(double price){
  return price * Math.pow(10,instrument.getPipScale());
}","protected double priceToPips(Instrument instrument,double price){
  return price * Math.pow(10,instrument.getPipScale());
}",0.9017857142857144
98341,"private IOrder submitOrder(OrderCommand orderCommand) throws JFException {
  double stopLossPrice=0.0, takeProfitPrice=0.0;
  double bidPrice=history.getLastTick(instrument).getBid();
  double askPrice=history.getLastTick(instrument).getAsk();
  String label=getLabel(instrument);
  String name=instrument.getPrimaryCurrency() + instrument.getPairsSeparator() + instrument.getSecondaryCurrency();
  if (orderCommand == OrderCommand.BUY) {
    if (stopLossPips > 0) {
      stopLossPrice=bidPrice - getPipPrice(stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=bidPrice + getPipPrice(takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
 else {
    if (stopLossPips > 0) {
      stopLossPrice=askPrice + getPipPrice(stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=askPrice - getPipPrice(takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
  return engine.submitOrder(label,instrument,orderCommand,volume,0,slippage,stopLossPrice,takeProfitPrice);
}","private IOrder submitOrder(Instrument instrument,OrderCommand orderCommand) throws JFException {
  double stopLossPrice=0.0, takeProfitPrice=0.0;
  double bidPrice=history.getLastTick(instrument).getBid();
  double askPrice=history.getLastTick(instrument).getAsk();
  String label=getLabel(instrument);
  String name=instrument.getPrimaryCurrency() + instrument.getPairsSeparator() + instrument.getSecondaryCurrency();
  if (orderCommand == OrderCommand.BUY) {
    if (stopLossPips > 0) {
      stopLossPrice=bidPrice - getPipPrice(instrument,stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=bidPrice + getPipPrice(instrument,takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
 else {
    if (stopLossPips > 0) {
      stopLossPrice=askPrice + getPipPrice(instrument,stopLossPips);
    }
    if (takeProfitPips > 0) {
      takeProfitPrice=askPrice - getPipPrice(instrument,takeProfitPips);
    }
    console.getOut().printf(""String_Node_Str"",label,name,bidPrice,stopLossPrice,takeProfitPrice);
  }
  return engine.submitOrder(label,instrument,orderCommand,volume,0,slippage,stopLossPrice,takeProfitPrice);
}",0.9718670076726342
98342,"@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (instrument != this.instrument || period != this.period)   return;
  dc=transpose(indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,PREV + 1,bidBar.getTime(),0));
  bar[PREV]=history.getBar(instrument,period,OfferSide.BID,2);
  bar[PREV - 1]=history.getBar(instrument,period,OfferSide.BID,1);
  if (breakevenPips > 0 && isActive(order) && order.getProfitLossInPips() > breakevenPips) {
    if (order.isLong())     order.setStopLossPrice(dc[PREV - 1][LOW] + getPipPrice(breakevenPips),OfferSide.BID);
 else     order.setStopLossPrice(dc[PREV - 1][HIGH] - getPipPrice(breakevenPips),OfferSide.ASK);
  }
}","@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (instrument != this.instrument || period != this.period)   return;
  bar[PREV]=history.getBar(instrument,period,OfferSide.BID,2);
  bar[PREV - 1]=history.getBar(instrument,period,OfferSide.BID,1);
  dc=transpose(indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,numberOfCandlesBefore,bar[PREV - 1].getTime(),numberOfCandlesAfter));
  if (breakevenPips > 0 && isActive(order) && order.getProfitLossInPips() > breakevenPips) {
    if (order.isLong())     order.setStopLossPrice(dc[PREV - 1][LOWER] + getPipPrice(instrument,breakevenPips),OfferSide.BID);
 else     order.setStopLossPrice(dc[PREV - 1][UPPER] - getPipPrice(instrument,breakevenPips),OfferSide.ASK);
  }
}",0.791025641025641
98343,"protected double priceToPips(double price){
  return price * Math.pow(10,instrument.getPipScale());
}","protected double priceToPips(Instrument instrument,double price){
  return price * Math.pow(10,instrument.getPipScale());
}",0.9017857142857144
98344,"@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (!instrument.equals(this.instrument) || !period.equals(this.period))   return;
  if (askBar.getVolume() == 0 || bidBar.getVolume() == 0)   return;
  IBar prevBar=history.getBar(instrument,period,OfferSide.BID,1);
  double[][] ha=indicators.heikinAshi(instrument,period,OfferSide.BID,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  final int PREV=numberOfCandlesBefore + numberOfCandlesAfter - 1;
  final int OPEN=0, HIGH=2, LOW=3, CLOSE=1;
  double average=priceToPips(((ha[PREV][HIGH] - ha[PREV][LOW]) + (ha[PREV - 1][HIGH] - ha[PREV - 1][LOW])) / 2.0);
  double spread=askPrice - bidPrice;
  stopLossPips=roundPips(stopLossFactor * average);
  if (stopLossPips < stopLossFactor)   return;
  double volume=getLotSize(account);
  takeProfitPips=roundPips(takeProfitFactor * average);
  if (takeProfitPips < takeProfitFactor)   return;
  if (!useStopLoss)   stopLossPips=0;
  double[][] dc=indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  final int UPPER=0, LOWER=1;
  double[] maf=indicators.ma(instrument,period,OfferSide.BID,appliedPriceFast,maTimePeriodFast,maTypeFast,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  double[] mas=indicators.ma(instrument,period,OfferSide.BID,appliedPriceSlow,maTimePeriodSlow,maTypeSlow,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  if (askPrice < maf[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() > stopLossFactor)         order.close();
      }
    }
  }
 else   if (bidPrice > maf[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() > stopLossFactor)         order.close();
      }
    }
  }
  double amt=0;
  boolean uol=account.getUseOfLeverage() > maximumUoL;
  if (uol) {
    for (    IOrder order : engine.getOrders(instrument)) {
      if (order.getState() == IOrder.State.FILLED) {
        if (order.isLong())         amt+=order.getAmount();
 else         amt-=order.getAmount();
      }
    }
  }
  boolean longOk=(uol && amt > 0) ? false : true;
  boolean shortOk=(uol && amt < 0) ? false : true;
  if (verbose) {
    SimpleDateFormat bdf=new SimpleDateFormat(""String_Node_Str"");
    bdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    console.getOut().printf(""String_Node_Str"",bdf.format(roundTime(prevBar.getTime(),60000)));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(ha));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(dc));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(maf));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(mas));
    console.getOut().printf(""String_Node_Str"",bidPrice,askPrice,stopLossPips,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",average,spread,volume);
    if (uol)     console.getOut().printf(""String_Node_Str"",amt,account.getUseOfLeverage());
  }
  if (longOk && bidPrice + spread < dc[LOWER][PREV] && dc[LOWER][PREV] < dc[LOWER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=askPrice - getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=askPrice + getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),askPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.BUY,volume,askPrice,slippage,stopLossPrice,takeProfitPrice);
  }
  if (shortOk && askPrice > dc[UPPER][PREV] && dc[UPPER][PREV] > dc[UPPER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=bidPrice + getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=bidPrice - getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),bidPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.SELL,volume,bidPrice,slippage,stopLossPrice,takeProfitPrice);
  }
}","@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (!instrument.equals(this.instrument) || !period.equals(this.period))   return;
  if (askBar.getVolume() == 0 || bidBar.getVolume() == 0)   return;
  IBar prevBar=history.getBar(instrument,period,OfferSide.BID,1);
  double[][] ha=indicators.heikinAshi(instrument,period,OfferSide.BID,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  double average=priceToPips(instrument,((ha[PREV][HIGH] - ha[PREV][LOW]) + (ha[PREV - 1][HIGH] - ha[PREV - 1][LOW])) / 2.0);
  double spread=askPrice - bidPrice;
  stopLossPips=roundPips(stopLossFactor * average);
  if (stopLossPips < stopLossFactor)   return;
  double volume=getLotSize(account);
  takeProfitPips=roundPips(takeProfitFactor * average);
  if (takeProfitPips < takeProfitFactor)   return;
  if (!useStopLoss)   stopLossPips=0;
  double[][] dc=indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  final int UPPER=0, LOWER=1;
  double[] maf=indicators.ma(instrument,period,OfferSide.BID,appliedPriceFast,maTimePeriodFast,maTypeFast,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  double[] mas=indicators.ma(instrument,period,OfferSide.BID,appliedPriceSlow,maTimePeriodSlow,maTypeSlow,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  if (askPrice < maf[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() > stopLossFactor)         order.close();
      }
    }
  }
 else   if (bidPrice > maf[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() > stopLossFactor)         order.close();
      }
    }
  }
  double amt=0;
  boolean uol=account.getUseOfLeverage() > maximumUoL;
  if (uol) {
    for (    IOrder order : engine.getOrders(instrument)) {
      if (order.getState() == IOrder.State.FILLED) {
        if (order.isLong())         amt+=order.getAmount();
 else         amt-=order.getAmount();
      }
    }
  }
  boolean longOk=(uol && amt > 0) ? false : true;
  boolean shortOk=(uol && amt < 0) ? false : true;
  if (verbose) {
    SimpleDateFormat bdf=new SimpleDateFormat(""String_Node_Str"");
    bdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    console.getOut().printf(""String_Node_Str"",bdf.format(roundTime(prevBar.getTime(),60000)));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(ha));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(dc));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(maf));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(mas));
    console.getOut().printf(""String_Node_Str"",bidPrice,askPrice,stopLossPips,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",average,spread,volume);
    if (uol)     console.getOut().printf(""String_Node_Str"",amt,account.getUseOfLeverage());
  }
  if (longOk && bidPrice + spread < dc[LOWER][PREV] && dc[LOWER][PREV] < dc[LOWER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=askPrice - getPipPrice(instrument,stopLossPips) : 0;
    double takeProfitPrice=askPrice + getPipPrice(instrument,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),askPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.BUY,volume,askPrice,slippage,stopLossPrice,takeProfitPrice);
  }
  if (shortOk && askPrice > dc[UPPER][PREV] && dc[UPPER][PREV] > dc[UPPER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=bidPrice + getPipPrice(instrument,stopLossPips) : 0;
    double takeProfitPrice=bidPrice - getPipPrice(instrument,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),bidPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.SELL,volume,bidPrice,slippage,stopLossPrice,takeProfitPrice);
  }
}",0.9781826360773728
98345,"protected double getPipPrice(double pips) throws JFException {
  double pipPrice=pips * instrument.getPipValue();
  return pipPrice - pipPrice % Math.pow(10,instrument.getPipScale() * -1);
}","protected double getPipPrice(Instrument instrument,double pips) throws JFException {
  double pipPrice=pips * instrument.getPipValue();
  return pipPrice - pipPrice % Math.pow(10,instrument.getPipScale() * -1);
}",0.945273631840796
98346,"protected String getLabel(Instrument instrument){
  return id + String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}","protected String getLabel(Instrument instrument){
  return id + instrument.name().substring(0,2) + instrument.name().substring(3,5)+ String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}",0.8169761273209549
98347,"protected double roundPrice(double price){
  return price - price % Math.pow(10,(instrument.getPipScale() + 1) * -1);
}","protected double roundPrice(double price){
  return price - price % Math.pow(10,(this.instrument.getPipScale() + 1) * -1);
}",0.9794238683127572
98348,"protected String getLabel(Instrument instrument){
  return id + String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}","protected String getLabel(Instrument instrument){
  return id + instrument.name().substring(0,2) + instrument.name().substring(3,5)+ String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}",0.8169761273209549
98349,"protected double roundPrice(double price){
  return price - price % Math.pow(10,(instrument.getPipScale() + 1) * -1);
}","protected double roundPrice(double price){
  return price - price % Math.pow(10,(this.instrument.getPipScale() + 1) * -1);
}",0.9794238683127572
98350,"protected String getLabel(Instrument instrument){
  return id + String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}","protected String getLabel(Instrument instrument){
  return id + instrument.name().substring(0,2) + instrument.name().substring(3,5)+ String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}",0.8169761273209549
98351,"protected double roundPrice(double price){
  return price - price % Math.pow(10,(instrument.getPipScale() + 1) * -1);
}","protected double roundPrice(double price){
  return price - price % Math.pow(10,(this.instrument.getPipScale() + 1) * -1);
}",0.9794238683127572
98352,"protected String getLabel(Instrument instrument){
  return id + String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}","protected String getLabel(Instrument instrument){
  return id + instrument.name().substring(0,2) + instrument.name().substring(3,5)+ String.format(""String_Node_Str"",++counter).replace(""String_Node_Str"",""String_Node_Str"");
}",0.8169761273209549
98353,"protected double roundPrice(double price){
  return price - price % Math.pow(10,(instrument.getPipScale() + 1) * -1);
}","protected double roundPrice(double price){
  return price - price % Math.pow(10,(this.instrument.getPipScale() + 1) * -1);
}",0.9794238683127572
98354,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (Double.isNaN(maf[PREV - 1]) || Double.isNaN(mas[PREV - 1]))   return;
  if (maf[PREV - 1] < mas[PREV - 1] && maf[PREV] > mas[PREV] && tick.getBid() > mas[PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (maf[PREV - 1] > mas[PREV - 1] && maf[PREV] < mas[PREV] && tick.getBid() < mas[PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (Double.isNaN(maf[PREV - 1]) || Double.isNaN(mas[PREV - 1]))   return;
  if (maf[PREV - 1] < mas[PREV - 1] && maf[PREV] > mas[PREV] && tick.getBid() > mas[PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (maf[PREV - 1] > mas[PREV - 1] && maf[PREV] < mas[PREV] && tick.getBid() < mas[PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
  if (prevOrder != null) {
switch (prevOrder.getState()) {
case CREATED:
case CLOSED:
      this.prevOrder=null;
    break;
default :
  console.getOut().println(prevOrder.getLabel() + ""String_Node_Str"");
}
}
}",0.8638743455497382
98355,"protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}","protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    prevOrder=order;
  }
}",0.6351931330472103
98356,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar[PREV - 1] == null || bar[PREV] == null)   return;
  if (priceToPips(instrument,dc[UPPER][PREV - 1] - dc[LOWER][PREV - 1]) < thresholdPips) {
    return;
  }
  if (tick.getBid() > dc[UPPER][PREV - 1] && bar[PREV - 1].getClose() > dc[UPPER][PREV - 1] && bar[PREV].getClose() <= dc[UPPER][PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (tick.getBid() < dc[LOWER][PREV - 1] && bar[PREV - 1].getClose() < dc[LOWER][PREV - 1] && bar[PREV].getClose() >= dc[LOWER][PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar[PREV - 1] == null || bar[PREV] == null)   return;
  if (priceToPips(instrument,dc[UPPER][PREV - 1] - dc[LOWER][PREV - 1]) < thresholdPips) {
    return;
  }
  if (tick.getBid() > dc[UPPER][PREV - 1] && bar[PREV - 1].getClose() > dc[UPPER][PREV - 1] && bar[PREV].getClose() <= dc[UPPER][PREV]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (tick.getBid() < dc[LOWER][PREV - 1] && bar[PREV - 1].getClose() < dc[LOWER][PREV - 1] && bar[PREV].getClose() >= dc[LOWER][PREV]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
  if (prevOrder != null) {
switch (prevOrder.getState()) {
case CREATED:
case CLOSED:
      this.prevOrder=null;
    break;
default :
  console.getOut().println(prevOrder.getLabel() + ""String_Node_Str"");
}
}
}",0.8899470899470899
98357,"protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}","protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    prevOrder=order;
  }
}",0.6351931330472103
98358,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (prevOrder != null) {
switch (prevOrder.getState()) {
case CREATED:
case CLOSED:
      this.prevOrder=null;
    break;
default :
  console.getOut().println(prevOrder.getLabel() + ""String_Node_Str"");
}
}
}",0.4
98359,"protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}","protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    prevOrder=order;
  }
}",0.6351931330472103
98360,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bidBar1 == null || askBar1 == null)   return;
  if (priceToPips(instrument,askFL[0] - bidFL[0]) < thresholdPips) {
    return;
  }
  if (askBar1.getHigh() <= askFL[1] && tick.getAsk() > askFL[0]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (bidBar1.getLow() >= bidFL[1] && tick.getBid() < bidFL[0]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bidBar1 == null || askBar1 == null)   return;
  if (priceToPips(instrument,askFL[0] - bidFL[0]) < thresholdPips) {
    return;
  }
  if (askBar1.getHigh() <= askFL[1] && tick.getAsk() > askFL[0]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.BUY);
    }
  }
  if (bidBar1.getLow() >= bidFL[1] && tick.getBid() < bidFL[0]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(instrument,OrderCommand.SELL);
    }
  }
  if (prevOrder != null) {
switch (prevOrder.getState()) {
case CREATED:
case CLOSED:
      this.prevOrder=null;
    break;
default :
  console.getOut().println(prevOrder.getLabel() + ""String_Node_Str"");
}
}
}",0.8652849740932642
98361,"protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}","protected void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    prevOrder=order;
  }
}",0.6351931330472103
98362,"private IOrder submitOrder(Instrument instrument,OrderCommand orderCommand,double stopLossPrice,double takeProfitPrice) throws JFException {
  double amount=getAmount(account,instrument,riskPercent,stopLossPrice);
  return engine.submitOrder(getLabel(instrument),instrument,orderCommand,amount,0,slippage,stopLossPrice,takeProfitPrice);
}","private IOrder submitOrder(Instrument instrument,OrderCommand orderCommand,double stopLossPrice,double takeProfitPrice) throws JFException {
  double amount=getAmount(account,instrument,riskPercent,getPipPrice(stopLossPips));
  return engine.submitOrder(getLabel(instrument),instrument,orderCommand,amount,0,slippage,stopLossPrice,takeProfitPrice);
}",0.9709302325581396
98363,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{timePeriodFast,maTypeFast.ordinal(),timePeriodSlow,maTypeSlow.ordinal()});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getWarn().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getNotif().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getInfo().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{timePeriodFast,maTypeFast.ordinal(),timePeriodSlow,maTypeSlow.ordinal()});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.9902912621359224
98364,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getInfo().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getNotif().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getWarn().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getErr().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.986206896551724
98365,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200,IOrder.State.CLOSED);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getWarn().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}",0.7104
98366,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{dcTimePeriod});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getWarn().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getNotif().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getInfo().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{dcTimePeriod});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.98975791433892
98367,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getInfo().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getNotif().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getWarn().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getErr().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.986206896551724
98368,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200,IOrder.State.CLOSED);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getWarn().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}",0.7104
98369,"@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (!instrument.equals(this.instrument) || !period.equals(this.period))   return;
  if (askBar.getVolume() == 0 || bidBar.getVolume() == 0)   return;
  IBar histBar=history.getBar(instrument,period,OfferSide.BID,1);
  double[][] ha=indicators.heikenAshi(instrument,period,OfferSide.BID,indicatorFilter,numberOfCandlesBefore,histBar.getTime(),numberOfCandlesAfter);
  final int PREV=numberOfCandlesBefore + numberOfCandlesAfter - 1;
  final int OPEN=0;
  final int HIGH=3;
  final int LOW=2;
  final int CLOSE=1;
  double average=((ha[PREV][HIGH] - ha[PREV][LOW]) + (ha[PREV - 1][HIGH] - ha[PREV - 1][LOW])) / 2.0 * 10000;
  double spread=askPrice - bidPrice;
  stopLossPips=roundPips(mStopLossPips * average);
  if (stopLossPips < mStopLossPips)   return;
  double volume=getLotSize(account);
  takeProfitPips=roundPips(mTakeProfitPips * average);
  if (takeProfitPips < mTakeProfitPips)   return;
  if (!useStopLoss)   stopLossPips=0;
  double[][] dc=indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,numberOfCandlesBefore,histBar.getTime(),numberOfCandlesAfter);
  final int UPPER=0;
  final int LOWER=1;
  double[] t3f=indicators.t3(instrument,period,OfferSide.BID,AppliedPrice.CLOSE,t3TimePeriodFast,t3VolumeFactor,indicatorFilter,numberOfCandlesBefore,histBar.getTime(),numberOfCandlesAfter);
  double[] t3s=indicators.t3(instrument,period,OfferSide.BID,AppliedPrice.CLOSE,t3TimePeriodSlow,t3VolumeFactor,indicatorFilter,numberOfCandlesBefore,histBar.getTime(),numberOfCandlesAfter);
  if (askPrice < t3f[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() > mStopLossPips)         order.close();
      }
    }
  }
 else   if (bidPrice > t3f[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() > mStopLossPips)         order.close();
      }
    }
  }
  if (closeHugeLoss && askPrice > t3s[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() < 0)         order.close();
      }
    }
  }
 else   if (closeHugeLoss && bidPrice < t3s[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() < 0)         order.close();
      }
    }
  }
  double amt=0;
  boolean uol=account.getUseOfLeverage() > maximumUoL;
  if (uol) {
    for (    IOrder order : engine.getOrders(instrument)) {
      if (order.getState() == IOrder.State.FILLED) {
        if (order.isLong())         amt+=order.getAmount();
 else         amt-=order.getAmount();
      }
    }
  }
  boolean longOk=(uol && amt > 0) ? false : true;
  boolean shortOk=(uol && amt < 0) ? false : true;
  if (verbose) {
    SimpleDateFormat bdf=new SimpleDateFormat(""String_Node_Str"");
    bdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    console.getOut().printf(""String_Node_Str"",bdf.format(roundTime(histBar.getTime(),60000)));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(ha));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(dc));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(t3f));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(t3s));
    console.getOut().printf(""String_Node_Str"",bidPrice,askPrice,stopLossPips,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",average,spread,volume);
    if (uol)     console.getOut().printf(""String_Node_Str"",amt,account.getUseOfLeverage());
  }
  if (longOk && bidPrice + spread < dc[LOWER][PREV] && dc[LOWER][PREV] < dc[LOWER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=askPrice - getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=askPrice + getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),askPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.BUY,volume,askPrice,slippage,stopLossPrice,takeProfitPrice);
  }
  if (shortOk && askPrice > dc[UPPER][PREV] && dc[UPPER][PREV] > dc[UPPER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=bidPrice + getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=bidPrice - getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),bidPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.SELL,volume,bidPrice,slippage,stopLossPrice,takeProfitPrice);
  }
}","@Override public void onBar(Instrument instrument,Period period,IBar askBar,IBar bidBar) throws JFException {
  if (!instrument.equals(this.instrument) || !period.equals(this.period))   return;
  if (askBar.getVolume() == 0 || bidBar.getVolume() == 0)   return;
  IBar prevBar=history.getBar(instrument,period,OfferSide.BID,1);
  double[][] ha=indicators.heikenAshi(instrument,period,OfferSide.BID,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  final int PREV=numberOfCandlesBefore + numberOfCandlesAfter - 1;
  final int OPEN=0;
  final int HIGH=3;
  final int LOW=2;
  final int CLOSE=1;
  double average=((ha[PREV][HIGH] - ha[PREV][LOW]) + (ha[PREV - 1][HIGH] - ha[PREV - 1][LOW])) / 2.0 * 10000;
  double spread=askPrice - bidPrice;
  stopLossPips=roundPips(mStopLossPips * average);
  if (stopLossPips < mStopLossPips)   return;
  double volume=getLotSize(account);
  takeProfitPips=roundPips(mTakeProfitPips * average);
  if (takeProfitPips < mTakeProfitPips)   return;
  if (!useStopLoss)   stopLossPips=0;
  double[][] dc=indicators.donchian(instrument,period,OfferSide.BID,dcTimePeriod,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  final int UPPER=0;
  final int LOWER=1;
  double[] t3f=indicators.t3(instrument,period,OfferSide.BID,AppliedPrice.CLOSE,t3TimePeriodFast,t3VolumeFactor,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  double[] t3s=indicators.t3(instrument,period,OfferSide.BID,AppliedPrice.CLOSE,t3TimePeriodSlow,t3VolumeFactor,indicatorFilter,numberOfCandlesBefore,prevBar.getTime(),numberOfCandlesAfter);
  if (askPrice < t3f[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() > mStopLossPips)         order.close();
      }
    }
  }
 else   if (bidPrice > t3f[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() > mStopLossPips)         order.close();
      }
    }
  }
  if (closeHugeLoss && askPrice > t3s[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (order.isLong() && order.getProfitLossInPips() < 0)         order.close();
      }
    }
  }
 else   if (closeHugeLoss && bidPrice < t3s[PREV]) {
    for (    IOrder order : engine.getOrders()) {
      if (order.getLabel().substring(0,id.length()).equals(id) && order.getState() == IOrder.State.FILLED) {
        if (!order.isLong() && order.getProfitLossInPips() < 0)         order.close();
      }
    }
  }
  double amt=0;
  boolean uol=account.getUseOfLeverage() > maximumUoL;
  if (uol) {
    for (    IOrder order : engine.getOrders(instrument)) {
      if (order.getState() == IOrder.State.FILLED) {
        if (order.isLong())         amt+=order.getAmount();
 else         amt-=order.getAmount();
      }
    }
  }
  boolean longOk=(uol && amt > 0) ? false : true;
  boolean shortOk=(uol && amt < 0) ? false : true;
  if (verbose) {
    SimpleDateFormat bdf=new SimpleDateFormat(""String_Node_Str"");
    bdf.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    console.getOut().printf(""String_Node_Str"",bdf.format(roundTime(prevBar.getTime(),60000)));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(ha));
    console.getOut().printf(""String_Node_Str"",Arrays.deepToString(dc));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(t3f));
    console.getOut().printf(""String_Node_Str"",Arrays.toString(t3s));
    console.getOut().printf(""String_Node_Str"",bidPrice,askPrice,stopLossPips,takeProfitPips);
    console.getOut().printf(""String_Node_Str"",average,spread,volume);
    if (uol)     console.getOut().printf(""String_Node_Str"",amt,account.getUseOfLeverage());
  }
  if (longOk && bidPrice + spread < dc[LOWER][PREV] && dc[LOWER][PREV] < dc[LOWER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=askPrice - getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=askPrice + getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),askPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.BUY,volume,askPrice,slippage,stopLossPrice,takeProfitPrice);
  }
  if (shortOk && askPrice > dc[UPPER][PREV] && dc[UPPER][PREV] > dc[UPPER][PREV - 1]) {
    double stopLossPrice=stopLossPips > 0 ? stopLossPrice=bidPrice + getPipPrice(stopLossPips) : 0;
    double takeProfitPrice=bidPrice - getPipPrice(takeProfitPips);
    console.getOut().printf(""String_Node_Str"",getLabel(instrument),instrument.name(),bidPrice,volume,stopLossPrice,takeProfitPrice);
    IOrder order=engine.submitOrder(getLabel(instrument),instrument,OrderCommand.SELL,volume,bidPrice,slippage,stopLossPrice,takeProfitPrice);
  }
}",0.9953398058252428
98370,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{teTimePeriod,teDeviation});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getWarn().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getNotif().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getInfo().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  this.context=context;
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{teTimePeriod,teDeviation});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.9898710865561694
98371,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getInfo().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getNotif().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getWarn().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getErr().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.986206896551724
98372,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200,IOrder.State.CLOSED);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getWarn().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}",0.7104
98373,"@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar1 == null || bar2 == null)   return;
  if (tick.getBid() > donchian1[HIGH] && bar1.getClose() > donchian1[HIGH] && bar2.getClose() <= donchian2[HIGH]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.BUY);
    }
  }
  if (tick.getBid() < donchian1[HIGH] && bar1.getClose() < donchian1[LOW] && bar2.getClose() >= donchian2[LOW]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.SELL);
    }
  }
}","@Override public void onTick(Instrument instrument,ITick tick) throws JFException {
  if (instrument != this.instrument)   return;
  if (bar1 == null || bar2 == null)   return;
  if (tick.getBid() > donchian1[HIGH] && bar1.getClose() > donchian1[HIGH] && bar2.getClose() <= donchian2[HIGH]) {
    if (order == null || !order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.BUY);
    }
  }
  if (tick.getBid() < donchian1[LOW] && bar1.getClose() < donchian1[LOW] && bar2.getClose() >= donchian2[LOW]) {
    if (order == null || order.isLong()) {
      closeOrder(order);
      order=submitOrder(OrderCommand.SELL);
    }
  }
}",0.9946277820414428
98374,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{timePeriodFast,maTypeFast.ordinal(),timePeriodSlow,maTypeSlow.ordinal()});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{timePeriodFast,maTypeFast.ordinal(),timePeriodSlow,maTypeSlow.ordinal()});
  }
  this.order=null;
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str""));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.844150110375276
98375,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.991571641051066
98376,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}",0.8462809917355372
98377,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{dcTimePeriod});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{dcTimePeriod});
  }
  this.order=null;
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str""));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.9641360037261296
98378,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.991571641051066
98379,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}",0.8462809917355372
98380,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{teTimePeriod,teDeviation});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{teTimePeriod,teDeviation});
  }
  this.order=null;
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str""));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.8374021188392445
98381,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.991571641051066
98382,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}",0.8462809917355372
98383,"@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{barsOnSides});
  }
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().substring(5,14));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}","@Override public void onStart(IContext context) throws JFException {
  console=context.getConsole();
  engine=context.getEngine();
  history=context.getHistory();
  indicators=context.getIndicators();
  Set subscribedInstruments=new HashSet();
  subscribedInstruments.add(instrument);
  context.setSubscribedInstruments(subscribedInstruments);
  IChart chart=context.getChart(instrument);
  if (chart != null && engine.getType() == IEngine.Type.TEST) {
    chart.addIndicator(indicators.getIndicator(""String_Node_Str""),new Object[]{barsOnSides});
  }
  this.order=null;
  for (  IOrder order : engine.getOrders(instrument)) {
    if (order.getLabel().substring(0,id.length()).equals(id)) {
      if (this.order != null) {
        console.getOut().println(this.order.getLabel() + ""String_Node_Str"");
      }
      this.order=order;
      counter=Integer.valueOf(order.getLabel().replaceAll(""String_Node_Str"",""String_Node_Str""));
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
  if (isActive(order))   console.getOut().println(order.getLabel() + ""String_Node_Str"");
}",0.964102564102564
98384,"public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent());
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}","public void onMessage(IMessage message) throws JFException {
  if (message.getOrder() != null && message.getOrder().getLabel().substring(0,id.length()).equals(id)) {
    String orderLabel=message.getOrder().getLabel();
    IMessage.Type messageType=message.getType();
switch (messageType) {
case ORDER_FILL_OK:
case ORDER_CHANGED_OK:
      break;
case ORDER_SUBMIT_OK:
case ORDER_CLOSE_OK:
case ORDERS_MERGE_OK:
    console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
  break;
case NOTIFICATION:
console.getOut().println(orderLabel + ""String_Node_Str"" + message.getContent().replaceAll(""String_Node_Str"",""String_Node_Str""));
break;
case ORDER_CHANGED_REJECTED:
case ORDER_CLOSE_REJECTED:
case ORDER_FILL_REJECTED:
case ORDER_SUBMIT_REJECTED:
case ORDERS_MERGE_REJECTED:
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType);
break;
default :
console.getOut().println(orderLabel + ""String_Node_Str"" + messageType+ ""String_Node_Str""+ message.getContent());
break;
}
}
}",0.991571641051066
98385,"private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
    if (order.getState() == IOrder.State.CLOSED) {
      this.order=null;
    }
 else {
      console.getOut().println(order.getLabel() + ""String_Node_Str"");
    }
  }
}","private void closeOrder(IOrder order) throws JFException {
  if (isActive(order)) {
    order.close();
    order.waitForUpdate(200);
switch (order.getState()) {
case CREATED:
case CLOSED:
      this.order=null;
    break;
default :
  console.getOut().println(order.getLabel() + ""String_Node_Str"");
}
}
}",0.8462809917355372
98386,"private int insert(Long nodePointer,RStarNode newChild){
  storage.saveNode(newChild);
  RStarInternal node=(RStarInternal)loadNode(nodePointer);
  if (node.isNotFull()) {
    int status=node.insert(newChild);
    if (status == 1) {
      storage.saveNode(node);
    }
 else {
      System.out.println(""String_Node_Str"");
    }
    return status;
  }
 else {
    return treatInternalOverflow(node,newChild);
  }
}","/** 
 * inserts a RStar node in the node pointed by nodePointer
 * @param nodePointer pointer to node in which the given nodeis to be inserted
 * @param nodeToInsert the node to be inserted
 * @return 1 of successful, else -1
 */
private int insert(Long nodePointer,RStarNode nodeToInsert){
  storage.saveNode(nodeToInsert);
  RStarInternal target=(RStarInternal)loadNode(nodePointer);
  if (target.isNotFull()) {
    target.insert(nodeToInsert);
    if (target.nodeId == rootPointer) {
      root=target;
    }
    storage.saveNode(target);
    adjustParentOf(target);
    return 1;
  }
 else {
    return treatInternalOverflow(target,nodeToInsert);
  }
}",0.441534144059869
98387,"private void _rangeSearch(RStarNode start,HyperRectangle searchRegion){
  HyperRectangle intersection=start.getMBR().getIntersection(searchRegion);
  if (intersection != null) {
    if (start.isLeaf()) {
      for (      Long pointer : root.childPointers) {
        PointDTO dto=storage.loadPoint(pointer);
        SpatialPoint spoint=new SpatialPoint(dto);
        HyperRectangle pointMbr=new HyperRectangle(dto.coords);
        if (pointMbr.getIntersection(searchRegion) != null)         _rangeSearchResult.add(spoint);
      }
    }
 else {
      for (      Long pointer : root.childPointers) {
        try {
          RStarNode childNode=storage.loadNode(pointer);
          _rangeSearch(childNode,searchRegion);
        }
 catch (        FileNotFoundException e) {
          System.err.println(""String_Node_Str"");
        }
      }
    }
  }
}","private void _rangeSearch(RStarNode start,HyperRectangle searchRegion){
  HyperRectangle intersection=start.getMBR().getIntersection(searchRegion);
  if (intersection != null) {
    if (start.isLeaf()) {
      for (      Long pointer : start.childPointers) {
        PointDTO dto=storage.loadPoint(pointer);
        SpatialPoint spoint=new SpatialPoint(dto);
        HyperRectangle pointMbr=new HyperRectangle(dto.coords);
        if (pointMbr.getIntersection(searchRegion) != null)         _rangeSearchResult.add(spoint);
      }
    }
 else {
      for (      Long pointer : start.childPointers) {
        try {
          RStarNode childNode=storage.loadNode(pointer);
          _rangeSearch(childNode,searchRegion);
        }
 catch (        FileNotFoundException e) {
          System.err.println(""String_Node_Str"");
        }
      }
    }
  }
}",0.9917550058892816
98388,"/** 
 * inserts point into and splits the target node
 * @param splittingLeaf
 * @param newPoint
 * @throws AssertionError when the target node doesnot have any children
 */
private void splitLeaf(RStarLeaf splittingLeaf,SpatialPoint newPoint) throws AssertionError {
  ArrayList<Long> childPointers=splittingLeaf.childPointers;
  if (childPointers.size() <= 0) {
    throw new AssertionError();
  }
  ArrayList<SpatialPoint> children=new ArrayList<SpatialPoint>(childPointers.size());
  for (  long childId : childPointers) {
    PointDTO dto=storage.loadPoint(childId);
    children.add(new SpatialPoint(dto));
  }
  children.add(newPoint);
  int splitAxis=chooseLeafSplitAxis(children);
  int splitPoint=chooseLeafSplitpoint(children,splitAxis);
  Object[] sorting=children.toArray();
  final SpatialComparator comp=new SpatialComparator(splitAxis,bestSortOrder);
  Arrays.sort(sorting,comp);
  splittingLeaf.loadedChildren=new ArrayList<SpatialPoint>();
  splittingLeaf.childPointers=new ArrayList<Long>();
  RStarLeaf newChild=new RStarLeaf(dimension);
  for (int i=0; i < sorting.length; i++) {
    SpatialPoint spatialPoint=(SpatialPoint)sorting[i];
    if (i < splitPoint) {
      if (spatialPoint == newPoint) {
        splittingLeaf.loadedChildren.add(spatialPoint);
      }
 else {
        splittingLeaf.childPointers.add(childPointers.get(children.indexOf(spatialPoint)));
      }
    }
 else {
      if (spatialPoint == newPoint) {
        newChild.loadedChildren.add(spatialPoint);
      }
 else {
        newChild.childPointers.add(childPointers.get(children.indexOf(spatialPoint)));
      }
    }
  }
  storage.saveNode(splittingLeaf);
  if (splittingLeaf.getNodeId() == rootPointer) {
    splitRoot(newChild);
  }
 else {
    newChild.setParentId(splittingLeaf.getParentId());
    insert(splittingLeaf.getParentId(),newChild);
  }
}","/** 
 * inserts point into and splits the target node
 * @param splittingLeaf
 * @param newPoint
 * @throws AssertionError when the target node doesnot have any children
 */
private void splitLeaf(RStarLeaf splittingLeaf,SpatialPoint newPoint) throws AssertionError {
  ArrayList<Long> childPointers=splittingLeaf.childPointers;
  if (childPointers.size() <= 0) {
    throw new AssertionError();
  }
  ArrayList<SpatialPoint> children=new ArrayList<SpatialPoint>(childPointers.size());
  for (  long childId : childPointers) {
    PointDTO dto=storage.loadPoint(childId);
    children.add(new SpatialPoint(dto));
  }
  children.add(newPoint);
  int splitAxis=chooseLeafSplitAxis(children);
  int splitPoint=chooseLeafSplitpoint(children,splitAxis);
  Object[] sorting=children.toArray();
  final SpatialComparator comp=new SpatialComparator(splitAxis,bestSortOrder);
  sort(sorting,comp);
  splittingLeaf.loadedChildren=new ArrayList<SpatialPoint>();
  splittingLeaf.childPointers=new ArrayList<Long>();
  RStarLeaf newChild=new RStarLeaf(dimension);
  HyperRectangle newMbr1=new HyperRectangle(dimension);
  HyperRectangle newMbr2=new HyperRectangle(dimension);
  for (int i=0; i < sorting.length; i++) {
    SpatialPoint spatialPoint=(SpatialPoint)sorting[i];
    if (i < splitPoint) {
      if (spatialPoint == newPoint) {
        splittingLeaf.loadedChildren.add(spatialPoint);
      }
 else {
        splittingLeaf.childPointers.add(childPointers.get(children.indexOf(spatialPoint)));
      }
      newMbr1.update(spatialPoint);
    }
 else {
      if (spatialPoint == newPoint) {
        newChild.loadedChildren.add(spatialPoint);
      }
 else {
        newChild.childPointers.add(childPointers.get(children.indexOf(spatialPoint)));
      }
      newMbr2.update(spatialPoint);
    }
  }
  splittingLeaf.mbr=newMbr1;
  newChild.mbr=newMbr2;
  storage.saveNode(splittingLeaf);
  if (splittingLeaf.getNodeId() == rootPointer) {
    root=splittingLeaf;
    splitRoot(newChild);
  }
 else {
    newChild.setParentId(splittingLeaf.getParentId());
    insert(splittingLeaf.getParentId(),newChild);
  }
}",0.9321862348178138
98389,"private void _pointSearch(RStarNode start,SpatialPoint point){
  HyperRectangle searchRegion=new HyperRectangle(point.getCords());
  HyperRectangle intersection=start.getMBR().getIntersection(searchRegion);
  if (intersection != null) {
    if (start.isLeaf()) {
      float[] searchPoints=point.getCords();
      for (      Long pointer : root.childPointers) {
        PointDTO dto=storage.loadPoint(pointer);
        float[] candidates=dto.coords;
        boolean found=true;
        for (int i=0; i < candidates.length; i++) {
          if (candidates[i] != searchPoints[i])           found=false;
          break;
        }
        if (found) {
          _pointSearchResult=dto.oid;
        }
      }
    }
 else {
      for (      Long pointer : root.childPointers) {
        if (_pointSearchResult != -1)         break;
        try {
          RStarNode childNode=storage.loadNode(pointer);
          _pointSearch(childNode,point);
        }
 catch (        FileNotFoundException e) {
          System.err.println(""String_Node_Str"");
        }
      }
    }
  }
}","private void _pointSearch(RStarNode start,SpatialPoint point){
  HyperRectangle searchRegion=new HyperRectangle(point.getCords());
  HyperRectangle intersection=start.getMBR().getIntersection(searchRegion);
  if (intersection != null) {
    if (start.isLeaf()) {
      float[] searchPoints=point.getCords();
      for (      Long pointer : start.childPointers) {
        PointDTO dto=storage.loadPoint(pointer);
        float[] candidates=dto.coords;
        boolean found=true;
        for (int i=0; i < candidates.length; i++) {
          if (candidates[i] != searchPoints[i]) {
            found=false;
            break;
          }
        }
        if (found) {
          _pointSearchResult=dto.oid;
          break;
        }
      }
    }
 else {
      for (      Long pointer : start.childPointers) {
        if (_pointSearchResult != -1)         break;
        try {
          RStarNode childNode=storage.loadNode(pointer);
          _pointSearch(childNode,point);
        }
 catch (        FileNotFoundException e) {
          System.err.println(""String_Node_Str"" + e.getMessage());
        }
      }
    }
  }
}",0.9698905109489052
98390,"private void splitInternalNode(RStarInternal splittingNode,RStarNode newChild){
  ArrayList<Long> childPointers=splittingNode.childPointers;
  if (childPointers.size() <= 0) {
    throw new AssertionError();
  }
  ArrayList<RStarNode> children=new ArrayList<RStarNode>(childPointers.size());
  for (  long childNodeId : childPointers) {
    children.add(loadNode(childNodeId));
  }
  children.add(newChild);
  int splitAxis=chooseInternalSplitAxis(children);
  int splitPoint=chooseInternalSplitpoint(children,splitAxis);
  Object[] sorting=children.toArray();
  final SpatialComparator comp=new SpatialComparator(splitAxis,bestSortOrder);
  Arrays.sort(sorting,comp);
  splittingNode.childPointers=new ArrayList<Long>();
  RStarInternal newNode=new RStarInternal(dimension);
  for (int i=0; i < sorting.length; i++) {
    RStarNode node=(RStarNode)sorting[i];
    if (i < splitPoint) {
      splittingNode.childPointers.add(node.getNodeId());
    }
 else {
      newNode.childPointers.add(node.getNodeId());
    }
  }
  storage.saveNode(splittingNode);
  if (splittingNode.getNodeId() == rootPointer) {
    splitRoot(newChild);
  }
 else {
    newChild.setParentId(splittingNode.getParentId());
    insert(splittingNode.getParentId(),newChild);
  }
}","private void splitInternalNode(RStarInternal splittingNode,RStarNode node){
  ArrayList<Long> childPointers=splittingNode.childPointers;
  if (childPointers.size() <= 0) {
    throw new AssertionError();
  }
  ArrayList<RStarNode> children=new ArrayList<RStarNode>(childPointers.size());
  for (  long childNodeId : childPointers) {
    children.add(loadNode(childNodeId));
  }
  children.add(node);
  int splitAxis=chooseInternalSplitAxis(children);
  int splitPoint=chooseInternalSplitpoint(children,splitAxis);
  Object[] sorting=children.toArray();
  final SpatialComparator comp=new SpatialComparator(splitAxis,bestSortOrder);
  sort(sorting,comp);
  splittingNode.childPointers=new ArrayList<Long>();
  RStarInternal createdNode=new RStarInternal(dimension);
  HyperRectangle newMbr1=new HyperRectangle(dimension);
  HyperRectangle newMbr2=new HyperRectangle(dimension);
  for (int i=0; i < sorting.length; i++) {
    RStarNode childNode=(RStarNode)sorting[i];
    if (i < splitPoint) {
      splittingNode.childPointers.add(childNode.getNodeId());
      childNode.setParentId(splittingNode.getNodeId());
      newMbr1.update(childNode.getMBR());
    }
 else {
      createdNode.childPointers.add(childNode.getNodeId());
      childNode.setParentId(createdNode.getNodeId());
      newMbr2.update(childNode.getMBR());
    }
    storage.saveNode(childNode);
  }
  splittingNode.mbr=newMbr1;
  createdNode.mbr=newMbr2;
  storage.saveNode(splittingNode);
  if (splittingNode.getNodeId() == rootPointer) {
    root=splittingNode;
    splitRoot(createdNode);
  }
 else {
    createdNode.setParentId(splittingNode.getParentId());
    insert(splittingNode.getParentId(),createdNode);
  }
}",0.6426140231449966
98391,"/** 
 * searches for a spatial point in the tree and returns its oid if its found.
 * @param point the point to be searched
 * @return oid of the point if found, else -1.
 */
@Override public float pointSearch(SpatialPoint point){
  System.out.println(""String_Node_Str"" + point);
  _pointSearchResult=-1;
  loadRoot();
  _pointSearch(root,point);
  return _pointSearchResult;
}","/** 
 * searches for a spatial point in the tree and returns its oid if its found.
 * @param point the point to be searched
 * @return oid of the point if found, else -1.
 */
@Override public float pointSearch(SpatialPoint point){
  _pointSearchResult=-1;
  loadRoot();
  _pointSearch(root,point);
  return _pointSearchResult;
}",0.9304964539007092
98392,"/** 
 * loads Nodes from disk using their nodeId
 * @param nodeId the nodeId attribute of the Nodeto be loaded
 * @return the Node required, null uf it doesn't exist
 */
private RStarNode loadNode(long nodeId){
  if (nodeId != -1) {
    try {
      return storage.loadNode(nodeId);
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + storage.constructFilename(nodeId));
    }
  }
  return null;
}","/** 
 * loads Nodes from disk using their nodeId
 * @param nodeId the nodeId attribute of the Nodeto be loaded
 * @return the Node required, null uf it doesn't exist
 */
private RStarNode loadNode(long nodeId){
  if (nodeId != -1) {
    try {
      if (nodeId == rootPointer) {
        loadRoot();
        return root;
      }
 else {
        return storage.loadNode(nodeId);
      }
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + storage.constructFilename(nodeId));
    }
  }
  return null;
}",0.8948453608247423
98393,"private void setCapacities(){
  Constants.DIMENSION=dimension;
  Constants.MAX_CHILDREN=Constants.PAGESIZE / 8;
  Constants.MIN_CHILDREN=Constants.MAX_CHILDREN / 3;
}","private void setCapacities(){
  Constants.DIMENSION=dimension;
  Constants.MAX_CHILDREN=10;
  Constants.MIN_CHILDREN=4;
}",0.8222996515679443
98394,"public void check(Player p,Location l){
  if (PortTick.tickets.containsKey(p)) {
    return;
  }
  if (p.getItemInHand().getTypeId() == 337) {
    return;
  }
  for (  NewPort n : collection) {
    if (n.insideZone(l)) {
      if (p.getItemInHand().getTypeId() == 266 && p.hasPermission(""String_Node_Str"")) {
        n.instaPort(p,true);
        return;
      }
      if (n.ticket()) {
        ItemStack i=p.getItemInHand();
        if (i.getTypeId() == PortManager.TICKETID) {
          if (n.instant()) {
            n.instaPort(p,false);
            p.getInventory().clear(p.getInventory().getHeldItemSlot());
            return;
          }
          if (n.isPortActivated()) {
            n.welcomePlayer(p);
            p.getInventory().clear(p.getInventory().getHeldItemSlot());
            PortTick.registerTicket(p,n);
            return;
          }
        }
      }
 else {
        if (n.instant()) {
          n.instaPort(p,false);
          return;
        }
        if (n.isPortActivated()) {
          n.welcomePlayer(p);
          PortTick.registerTicket(p,n);
          return;
        }
      }
    }
  }
}","public void check(Player p,Location l){
  if (PortTick.tickets.containsKey(p)) {
    return;
  }
  if (p.getItemInHand().getTypeId() == 337) {
    return;
  }
  for (  NewPort n : collection) {
    if (n.insideZone(l)) {
      if (p.getItemInHand().getTypeId() == 266 && p.hasPermission(""String_Node_Str"")) {
        n.instaPort(p,true);
        return;
      }
      if (n.ticket()) {
        ItemStack i=p.getItemInHand();
        if (i.getTypeId() == PortManager.TICKETID) {
          if (n.instant()) {
            n.instaPort(p,false);
            int newAmount=p.getInventory().getItemInHand().getAmount() - 1;
            p.getInventory().getItemInHand().setAmount(newAmount);
            return;
          }
          if (n.isPortActivated()) {
            n.welcomePlayer(p);
            int newAmount=p.getInventory().getItemInHand().getAmount() - 1;
            p.getInventory().getItemInHand().setAmount(newAmount);
            PortTick.registerTicket(p,n);
            return;
          }
        }
      }
 else {
        if (n.instant()) {
          n.instaPort(p,false);
          return;
        }
        if (n.isPortActivated()) {
          n.welcomePlayer(p);
          PortTick.registerTicket(p,n);
          return;
        }
      }
    }
  }
}",0.7842809364548495
98395,"public ENSObject parseJSON(JSONObject JSON){
  try {
    this.setBetreff(JSON.getString(""String_Node_Str""));
    this.setTime(JSON.getString(""String_Node_Str""));
    if (JSON.has(""String_Node_Str""))     this.setText(JSON.getString(""String_Node_Str""));
    UserObject von=new UserObject();
    if (JSON.has(""String_Node_Str""))     von.ParseJSON(JSON.getJSONObject(""String_Node_Str""));
    this.setVon(von);
    if (JSON.has(""String_Node_Str""))     for (int z=0; z < JSON.getJSONArray(""String_Node_Str"").length(); z++) {
      UserObject an=new UserObject();
      an.ParseJSON(JSON.getJSONArray(""String_Node_Str"").getJSONObject(z));
      this.addAnUser(an);
    }
    if (JSON.has(""String_Node_Str"")) {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
 else {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
    this.setENS_id(JSON.getLong(""String_Node_Str""));
    this.setTyp(JSON.getInt(""String_Node_Str""));
    if (JSON.has(""String_Node_Str"")) {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
 else {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return this;
}","public ENSObject parseJSON(JSONObject JSON){
  try {
    this.setBetreff(JSON.getString(""String_Node_Str""));
    this.setTime(JSON.getString(""String_Node_Str""));
    if (JSON.has(""String_Node_Str""))     this.setText(JSON.getString(""String_Node_Str""));
    UserObject von=new UserObject();
    if (!JSON.isNull(""String_Node_Str""))     von.ParseJSON(JSON.getJSONObject(""String_Node_Str""));
    this.setVon(von);
    if (!JSON.isNull(""String_Node_Str"")) {
      for (int z=0; z < JSON.getJSONArray(""String_Node_Str"").length(); z++) {
        UserObject an=new UserObject();
        an.ParseJSON(JSON.getJSONArray(""String_Node_Str"").getJSONObject(z));
        this.addAnUser(an);
      }
    }
 else {
      UserObject an=new UserObject();
      this.addAnUser(an);
    }
    if (JSON.has(""String_Node_Str"")) {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
 else {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
    this.setENS_id(JSON.getLong(""String_Node_Str""));
    this.setTyp(JSON.getInt(""String_Node_Str""));
    if (JSON.has(""String_Node_Str"")) {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
 else {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return this;
}",0.9327217125382264
98396,"public void DoError(){
}","public void DoError(){
  dialog.dismiss();
  Request.doToast(""String_Node_Str"",this);
}",0.4324324324324324
98397,"public void DoError(){
}","public void DoError(){
  dialog.dismiss();
  Request.doToast(""String_Node_Str"",this);
}",0.4324324324324324
98398,"private ArrayList<ContactActivityObject> getActivitylist(String JSON){
  try {
    JSONArray list=null;
    JSONObject jsonResponse=new JSONObject(JSON);
    list=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    final ArrayList<ContactActivityObject> Array=new ArrayList<ContactActivityObject>();
    if ((list.length()) <= 0) {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return Array;
    }
    if (list.length() != 0) {
      for (int i=0; i < list.length(); i++) {
        ContactActivityObject tempObject=new ContactActivityObject();
        tempObject.setText(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setBeschreibung(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventID(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventTyp(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventURL(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setImgURL(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setTime(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setVonID(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setVonUsername(list.getJSONObject(i).getString(""String_Node_Str""));
        Array.add(tempObject);
      }
    }
    this.Array=Array;
    return Array;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ArrayList<ContactActivityObject>();
}","private ArrayList<ContactActivityObject> getActivitylist(String JSON){
  try {
    JSONArray list=null;
    JSONObject jsonResponse=new JSONObject(JSON);
    list=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    final ArrayList<ContactActivityObject> Array=new ArrayList<ContactActivityObject>();
    if ((list.length()) <= 0) {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return Array;
    }
    if (list.length() != 0) {
      for (int i=0; i < list.length(); i++) {
        ContactActivityObject tempObject=new ContactActivityObject();
        tempObject.setText(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setBeschreibung(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventID(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventTyp(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setEventURL(list.getJSONObject(i).getString(""String_Node_Str""));
        if (list.getJSONObject(i).has(""String_Node_Str""))         tempObject.setImgURL(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setTime(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setVonID(list.getJSONObject(i).getString(""String_Node_Str""));
        tempObject.setVonUsername(list.getJSONObject(i).getString(""String_Node_Str""));
        Array.add(tempObject);
      }
    }
    this.Array=Array;
    return Array;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ArrayList<ContactActivityObject>();
}",0.9815521628498728
98399,"public void DoError(){
}","public void DoError(){
  dialog.dismiss();
  Request.doToast(""String_Node_Str"",this);
}",0.4324324324324324
98400,"private ArrayList<GBObject> getENSlist(String JSON){
  try {
    JSONObject jsonResponse=new JSONObject(JSON);
    JSONArray GBlist=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    ArrayList<GBObject> GBa=new ArrayList<GBObject>(GBlist.length());
    if (GBlist.length() != 0) {
      for (int i=0; i < GBlist.length(); i++) {
        JSONObject tp=GBlist.getJSONObject(i);
        GBObject GB=new GBObject();
        UserObject von=new UserObject();
        von.ParseJSON(tp.getJSONObject(""String_Node_Str""));
        GB.setVon(von);
        GB.setText(tp.getString(""String_Node_Str""));
        GB.setEntry_id(tp.getString(""String_Node_Str""));
        GB.setTime(tp.getString(""String_Node_Str""));
        GB.setAvatar(tp.getString(""String_Node_Str""));
        GBa.add(GB);
      }
    }
 else {
      error=true;
      return GBa;
    }
    return GBa;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private ArrayList<GBObject> getENSlist(String JSON){
  ArrayList<GBObject> GBa=new ArrayList<GBObject>();
  try {
    JSONObject jsonResponse=new JSONObject(JSON);
    JSONArray GBlist=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    GBa=new ArrayList<GBObject>(GBlist.length());
    if (GBlist.length() != 0) {
      for (int i=0; i < GBlist.length(); i++) {
        JSONObject tp=GBlist.getJSONObject(i);
        GBObject GB=new GBObject();
        UserObject von=new UserObject();
        if (!tp.isNull(""String_Node_Str""))         von.ParseJSON(tp.getJSONObject(""String_Node_Str""));
        GB.setVon(von);
        GB.setText(tp.getString(""String_Node_Str""));
        GB.setEntry_id(tp.getString(""String_Node_Str""));
        GB.setTime(tp.getString(""String_Node_Str""));
        GB.setAvatar(tp.getString(""String_Node_Str""));
        GBa.add(GB);
      }
    }
 else {
      error=true;
      return GBa;
    }
    return GBa;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return GBa;
}",0.7983991995997999
98401,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Request.config=PreferenceManager.getDefaultSharedPreferences(this);
  typ=""String_Node_Str"";
  if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    ordner=bundle.getString(""String_Node_Str"");
    offset=0;
  }
 else   ordner=""String_Node_Str"";
  con=this;
  NotificationManager mManager;
  mManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mManager.cancel(42);
  adapter=new ENSAdapter(this,ENSArray);
  setlist(adapter);
  refresh();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Request.config=PreferenceManager.getDefaultSharedPreferences(this);
  typ=""String_Node_Str"";
  if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    ordner=bundle.getString(""String_Node_Str"");
    offset=0;
  }
 else   ordner=""String_Node_Str"";
  NotificationManager mManager;
  mManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mManager.cancel(42);
  adapter=new ENSAdapter(this,ENSArray);
  setlist(adapter);
  refresh();
}",0.99
98402,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  String i=""String_Node_Str"";
  i=ENSArray.get(position).getENS_id();
  if (ENSArray.get(position).getTyp() == 99) {
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENS.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
 else {
    i=ENSArray.get(position).getENS_id();
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    ENSsql SQL=new ENSsql(con);
    SQL.open();
    ENSObject t=SQL.getSingleENS(i);
    Log.i(""String_Node_Str"",t.getText() + ""String_Node_Str"");
    if (t != null && t.getText().equalsIgnoreCase(""String_Node_Str"") == false)     bundle.putBoolean(""String_Node_Str"",true);
    Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
    newIntent.putExtras(bundle);
    SQL.close();
    startActivity(newIntent);
  }
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  String i=""String_Node_Str"";
  i=ENSArray.get(position).getENS_id();
  if (ENSArray.get(position).getTyp() == 99) {
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENS.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
 else {
    i=ENSArray.get(position).getENS_id();
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
}",0.7017114914425427
98403,"private void setlist(ENSAdapter a){
  setListAdapter(a);
  ListView lv=getListView();
  lv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> av,    View v,    int position,    long id){
      if (position >= offset) {
        ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,1);
        Menu.PopUp();
      }
      return true;
    }
  }
);
  lv.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String i=""String_Node_Str"";
      i=ENSArray.get(position).getENS_id();
      if (ENSArray.get(position).getTyp() == 99) {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENS.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
 else {
        i=ENSArray.get(position).getENS_id();
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        ENSsql SQL=new ENSsql(con);
        SQL.open();
        ENSObject t=SQL.getSingleENS(i);
        Log.i(""String_Node_Str"",t.getText() + ""String_Node_Str"");
        if (t != null && t.getText().equalsIgnoreCase(""String_Node_Str"") == false)         bundle.putBoolean(""String_Node_Str"",true);
        Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
        newIntent.putExtras(bundle);
        SQL.close();
        startActivity(newIntent);
      }
    }
  }
);
  lv.setOnScrollListener(new OnScrollListener(){
    public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (view.getAdapter() != null && ((firstVisibleItem + visibleItemCount) >= totalItemCount) && totalItemCount != mPrevTotalItemCount) {
        mPrevTotalItemCount=totalItemCount;
        if (!error)         refresh();
      }
    }
    public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
  }
);
}","private void setlist(ENSAdapter a){
  setListAdapter(a);
  ListView lv=getListView();
  lv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> av,    View v,    int position,    long id){
      if (position >= offset) {
        ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,1);
        Menu.PopUp();
      }
      return true;
    }
  }
);
  lv.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String i=""String_Node_Str"";
      i=ENSArray.get(position).getENS_id();
      if (ENSArray.get(position).getTyp() == 99) {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENS.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
 else {
        i=ENSArray.get(position).getENS_id();
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
    }
  }
);
  lv.setOnScrollListener(new OnScrollListener(){
    public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (view.getAdapter() != null && ((firstVisibleItem + visibleItemCount) >= totalItemCount) && totalItemCount != mPrevTotalItemCount) {
        mPrevTotalItemCount=totalItemCount;
        if (!error)         refresh();
      }
    }
    public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
  }
);
}",0.631424375917768
98404,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Request.config=PreferenceManager.getDefaultSharedPreferences(this);
  typ=""String_Node_Str"";
  if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    ordner=bundle.getString(""String_Node_Str"");
    offset=0;
  }
 else   ordner=""String_Node_Str"";
  con=this;
  NotificationManager mManager;
  mManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mManager.cancel(42);
  adapter=new ENSAdapter(this,ENSArray);
  setlist(adapter);
  refresh();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Request.config=PreferenceManager.getDefaultSharedPreferences(this);
  typ=""String_Node_Str"";
  if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    ordner=bundle.getString(""String_Node_Str"");
    offset=0;
  }
 else   ordner=""String_Node_Str"";
  adapter=new ENSAdapter(this,ENSArray);
  setlist(adapter);
  refresh();
}",0.8619718309859155
98405,"public boolean onItemLongClick(AdapterView<?> av,View v,int position,long id){
  if (position >= offset) {
    ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,1);
    Menu.PopUp();
  }
  return true;
}","public boolean onItemLongClick(AdapterView<?> av,View v,int position,long id){
  if (position >= offset) {
    ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,2);
    Menu.PopUp();
  }
  return true;
}",0.9971014492753624
98406,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  String i=""String_Node_Str"";
  i=ENSArray.get(position).getENS_id();
  if (ENSArray.get(position).getTyp() == 99) {
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENS.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
 else {
    i=ENSArray.get(position).getENS_id();
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    ENSsql SQL=new ENSsql(con);
    SQL.open();
    ENSObject t=SQL.getSingleENS(i);
    Log.i(""String_Node_Str"",t.getText() + ""String_Node_Str"");
    if (t != null && t.getText().equalsIgnoreCase(""String_Node_Str"") == false)     bundle.putBoolean(""String_Node_Str"",true);
    Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
    newIntent.putExtras(bundle);
    SQL.close();
    startActivity(newIntent);
  }
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  String i=""String_Node_Str"";
  i=ENSArray.get(position).getENS_id();
  if (ENSArray.get(position).getTyp() == 99) {
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENSAusgang.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
 else {
    i=ENSArray.get(position).getENS_id();
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",i);
    Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
    newIntent.putExtras(bundle);
    startActivity(newIntent);
  }
}",0.6987218502738892
98407,"private void setlist(ENSAdapter a){
  setListAdapter(a);
  ListView lv=getListView();
  lv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> av,    View v,    int position,    long id){
      if (position >= offset) {
        ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,1);
        Menu.PopUp();
      }
      return true;
    }
  }
);
  lv.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String i=""String_Node_Str"";
      i=ENSArray.get(position).getENS_id();
      if (ENSArray.get(position).getTyp() == 99) {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENS.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
 else {
        i=ENSArray.get(position).getENS_id();
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        ENSsql SQL=new ENSsql(con);
        SQL.open();
        ENSObject t=SQL.getSingleENS(i);
        Log.i(""String_Node_Str"",t.getText() + ""String_Node_Str"");
        if (t != null && t.getText().equalsIgnoreCase(""String_Node_Str"") == false)         bundle.putBoolean(""String_Node_Str"",true);
        Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
        newIntent.putExtras(bundle);
        SQL.close();
        startActivity(newIntent);
      }
    }
  }
);
  lv.setOnScrollListener(new OnScrollListener(){
    public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (view.getAdapter() != null && ((firstVisibleItem + visibleItemCount) >= totalItemCount) && totalItemCount != mPrevTotalItemCount) {
        mPrevTotalItemCount=totalItemCount;
        if (!error)         refresh();
      }
    }
    public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
  }
);
}","private void setlist(ENSAdapter a){
  setListAdapter(a);
  ListView lv=getListView();
  lv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> av,    View v,    int position,    long id){
      if (position >= offset) {
        ENSPopUp Menu=new ENSPopUp(con,ENSArray.get(position).getVon().getUsername(),ENSArray.get(position).getVon().getId(),ENSArray.get(position).getENS_id(),ENSArray.get(position).getBetreff(),typ,2);
        Menu.PopUp();
      }
      return true;
    }
  }
);
  lv.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String i=""String_Node_Str"";
      i=ENSArray.get(position).getENS_id();
      if (ENSArray.get(position).getTyp() == 99) {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENSAusgang.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
 else {
        i=ENSArray.get(position).getENS_id();
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",i);
        Intent newIntent=new Intent(getApplicationContext(),ENSSingle.class);
        newIntent.putExtras(bundle);
        startActivity(newIntent);
      }
    }
  }
);
  lv.setOnScrollListener(new OnScrollListener(){
    public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (view.getAdapter() != null && ((firstVisibleItem + visibleItemCount) >= totalItemCount) && totalItemCount != mPrevTotalItemCount) {
        mPrevTotalItemCount=totalItemCount;
        if (!error)         refresh();
      }
    }
    public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
  }
);
}",0.7192768140728072
98408,"public ENSObject parseJSON(JSONObject JSON){
  try {
    this.setBetreff(JSON.getString(""String_Node_Str""));
    this.setTime(JSON.getString(""String_Node_Str""));
    this.setText(JSON.getString(""String_Node_Str""));
    UserObject von=new UserObject();
    von.ParseJSON(JSON.getJSONObject(""String_Node_Str""));
    this.setVon(von);
    for (int z=0; z < JSON.getJSONArray(""String_Node_Str"").length(); z++) {
      UserObject an=new UserObject();
      an.ParseJSON(JSON.getJSONArray(""String_Node_Str"").getJSONObject(z));
      this.addAnUser(an);
    }
    this.setFlags(JSON.getInt(""String_Node_Str""));
    this.setENS_id(JSON.getString(""String_Node_Str""));
    this.setTyp(JSON.getInt(""String_Node_Str""));
    if (JSON.has(""String_Node_Str"")) {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
 else {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return this;
}","public ENSObject parseJSON(JSONObject JSON){
  try {
    this.setBetreff(JSON.getString(""String_Node_Str""));
    this.setTime(JSON.getString(""String_Node_Str""));
    this.setText(JSON.getString(""String_Node_Str""));
    UserObject von=new UserObject();
    von.ParseJSON(JSON.getJSONObject(""String_Node_Str""));
    this.setVon(von);
    for (int z=0; z < JSON.getJSONArray(""String_Node_Str"").length(); z++) {
      UserObject an=new UserObject();
      an.ParseJSON(JSON.getJSONArray(""String_Node_Str"").getJSONObject(z));
      this.addAnUser(an);
    }
    if (JSON.has(""String_Node_Str"")) {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
 else {
      this.setFlags(JSON.getInt(""String_Node_Str""));
    }
    this.setENS_id(JSON.getString(""String_Node_Str""));
    this.setTyp(JSON.getInt(""String_Node_Str""));
    if (JSON.has(""String_Node_Str"")) {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
 else {
      this.setOrdner(JSON.getInt(""String_Node_Str""));
      this.setAnVon(""String_Node_Str"");
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return this;
}",0.9477064220183486
98409,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.enssingle);
  con=this;
  Betreff=(TextView)findViewById(R.id.TxBetreff);
  Absender=(TextView)findViewById(R.id.TxVon);
  Nachricht=(TextView)findViewById(R.id.TxENS);
  ENS=(WebView)findViewById(R.id.WebENS);
  Answer=(Button)findViewById(R.id.BtAnswer);
  Bundle bundle=this.getIntent().getExtras();
  id2=bundle.getString(""String_Node_Str"");
  if (bundle.containsKey(""String_Node_Str"")) {
    ENSsql SQL=new ENSsql(this);
    SQL.open();
    msg=SQL.getSingleENS(id2);
    updateUI();
    SQL.close();
  }
 else   if (id2 != ""String_Node_Str"") {
    final ENSSingle temp=this;
    final ProgressDialog dialog=ProgressDialog.show(temp,""String_Node_Str"",""String_Node_Str"",true);
    new Thread(new Runnable(){
      public void run(){
        try {
          msg=Request.GetENS(id2);
        }
 catch (        Exception e) {
          msg=new ENSObject();
          msg.setText(""String_Node_Str"");
        }
        temp.runOnUiThread(new Runnable(){
          public void run(){
            dialog.dismiss();
            updateUI();
            saveENS();
          }
        }
);
      }
    }
).start();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.enssingle);
  con=this;
  Betreff=(TextView)findViewById(R.id.TxBetreff);
  Absender=(TextView)findViewById(R.id.TxVon);
  Nachricht=(TextView)findViewById(R.id.TxENS);
  ENS=(WebView)findViewById(R.id.WebENS);
  Answer=(Button)findViewById(R.id.BtAnswer);
  Bundle bundle=this.getIntent().getExtras();
  id2=bundle.getString(""String_Node_Str"");
  ENSsql SQL=new ENSsql(this);
  SQL.open();
  msg=SQL.getSingleENS(id2);
  SQL.close();
  updateUI();
  if (msg != null && msg.getText() != ""String_Node_Str"" && msg.getText() != null) {
    return;
  }
  if (id2 != ""String_Node_Str"") {
    final ENSSingle temp=this;
    final ProgressDialog dialog=ProgressDialog.show(temp,""String_Node_Str"",""String_Node_Str"",true);
    new Thread(new Runnable(){
      public void run(){
        try {
          msg=Request.GetENS(id2);
          saveENS();
        }
 catch (        Exception e) {
          msg=new ENSObject();
          msg.setText(""String_Node_Str"");
          UserObject o=new UserObject();
          o.setUsername(""String_Node_Str"");
          o.setId(""String_Node_Str"");
          o.setSteckbriefFreigabe(false);
          msg.setVon(o);
          msg.setBetreff(""String_Node_Str"");
        }
        temp.runOnUiThread(new Runnable(){
          public void run(){
            dialog.dismiss();
            updateUI();
          }
        }
);
      }
    }
).start();
  }
}",0.8335766423357664
98410,"public void run(){
  dialog.dismiss();
  updateUI();
  saveENS();
}","public void run(){
  dialog.dismiss();
  updateUI();
}",0.8925619834710744
98411,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.enssingle);
  con=this;
  Betreff=(TextView)findViewById(R.id.TxBetreff);
  Absender=(TextView)findViewById(R.id.TxVon);
  Nachricht=(TextView)findViewById(R.id.TxENS);
  ENS=(WebView)findViewById(R.id.WebENS);
  Answer=(Button)findViewById(R.id.BtAnswer);
  if (this.getIntent().getData() != null) {
    Uri data=getIntent().getData();
    List<String> params=data.getPathSegments();
    id2=Long.parseLong(params.get(0));
  }
 else   if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    id2=bundle.getLong(""String_Node_Str"");
  }
 else {
    Request.doToast(""String_Node_Str"",con);
    finish();
  }
  ENSsql SQL=new ENSsql(this);
  SQL.open();
  msg=SQL.getSingleENS(id2);
  SQL.close();
  updateUI();
  if (msg != null && msg.getText() != ""String_Node_Str"" && msg.getText() != null) {
    return;
  }
  if (id2 != -1) {
    final ENSSingle temp=this;
    final ProgressDialog dialog=ProgressDialog.show(temp,""String_Node_Str"",""String_Node_Str"",true);
    new Thread(new Runnable(){
      public void run(){
        try {
          msg=Request.GetENS(id2);
          saveENS();
        }
 catch (        Exception e) {
          msg=new ENSObject();
          msg.setText(""String_Node_Str"");
          UserObject o=new UserObject();
          o.setUsername(""String_Node_Str"");
          o.setId(""String_Node_Str"");
          o.setSteckbriefFreigabe(false);
          msg.setVon(o);
          msg.setBetreff(""String_Node_Str"");
        }
        temp.runOnUiThread(new Runnable(){
          public void run(){
            dialog.dismiss();
            updateUI();
          }
        }
);
      }
    }
).start();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.enssingle);
  con=this;
  Betreff=(TextView)findViewById(R.id.TxBetreff);
  Absender=(TextView)findViewById(R.id.TxVon);
  Nachricht=(TextView)findViewById(R.id.TxENS);
  ENS=(WebView)findViewById(R.id.WebENS);
  Answer=(Button)findViewById(R.id.BtAnswer);
  Uri data=getIntent().getData();
  List<String> params=null;
  try {
    params=data.getPathSegments();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (params != null && params.size() > 0) {
    id2=Long.parseLong(params.get(0));
  }
 else   if (this.getIntent().hasExtra(""String_Node_Str"")) {
    Bundle bundle=this.getIntent().getExtras();
    id2=bundle.getLong(""String_Node_Str"");
  }
 else {
    Request.doToast(""String_Node_Str"",con);
    finish();
    return;
  }
  ENSsql SQL=new ENSsql(this);
  SQL.open();
  msg=SQL.getSingleENS(id2);
  SQL.close();
  if (msg != null && msg.getText() != ""String_Node_Str"" && msg.getText() != null) {
    updateUI();
    return;
  }
  if (id2 != -1) {
    final ENSSingle temp=this;
    final ProgressDialog dialog=ProgressDialog.show(temp,""String_Node_Str"",""String_Node_Str"",true);
    new Thread(new Runnable(){
      public void run(){
        try {
          msg=Request.GetENS(id2);
          saveENS();
        }
 catch (        Exception e) {
          msg=new ENSObject();
          msg.setText(""String_Node_Str"");
          UserObject o=new UserObject();
          o.setUsername(""String_Node_Str"");
          o.setId(""String_Node_Str"");
          o.setSteckbriefFreigabe(false);
          msg.setVon(o);
          msg.setBetreff(""String_Node_Str"");
        }
        temp.runOnUiThread(new Runnable(){
          public void run(){
            dialog.dismiss();
            updateUI();
          }
        }
);
      }
    }
).start();
  }
}",0.8002171552660152
98412,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View rowView=convertView;
  if (rowView == null) {
    LayoutInflater inflater=context.getLayoutInflater();
    rowView=inflater.inflate(R.layout.gblist,null);
    ViewHolder viewHolder=new ViewHolder();
    viewHolder.text=(TextView)rowView.findViewById(R.id.GBtxt);
    viewHolder.image=(LoadImage)rowView.findViewById(R.id.gbimage);
    viewHolder.info=(TextView)rowView.findViewById(R.id.GBinfo);
    rowView.setTag(viewHolder);
  }
  ViewHolder holder=(ViewHolder)rowView.getTag();
  final GBObject s=names[position];
  holder.image.setImageDrawable(s.getAvatar());
  holder.text.setText(s.getEinleitung());
  holder.info.setText(s.getVon() + ""String_Node_Str"" + s.getTime());
  if (!s.getVon().getId().equals(""String_Node_Str"")) {
    holder.info.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        UserPopUp Menu=new UserPopUp(context,s.getVon().getUsername(),s.getVon().getId());
        Menu.PopUp();
      }
    }
);
  }
  return rowView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View rowView=convertView;
  if (rowView == null) {
    LayoutInflater inflater=context.getLayoutInflater();
    rowView=inflater.inflate(R.layout.gblist,null);
    ViewHolder viewHolder=new ViewHolder();
    viewHolder.text=(TextView)rowView.findViewById(R.id.GBtxt);
    viewHolder.image=(LoadImage)rowView.findViewById(R.id.gbimage);
    viewHolder.info=(TextView)rowView.findViewById(R.id.GBinfo);
    rowView.setTag(viewHolder);
  }
  ViewHolder holder=(ViewHolder)rowView.getTag();
  final GBObject s=names[position];
  holder.image.setImageDrawable(s.getAvatar());
  holder.text.setText(s.getEinleitung());
  holder.info.setText(s.getVon().getUsername() + ""String_Node_Str"" + s.getTime());
  if (!s.getVon().getId().equals(""String_Node_Str"")) {
    holder.info.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        UserPopUp Menu=new UserPopUp(context,s.getVon().getUsername(),s.getVon().getId());
        Menu.PopUp();
      }
    }
);
  }
  return rowView;
}",0.9935304990757856
98413,"private GBObject[] getGBlist(){
  try {
    JSONObject jsonResponse=new JSONObject(Request.makeSecuredReq(""String_Node_Str"" + id + ""String_Node_Str""));
    GBlist=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    GBObject[] GBa=new GBObject[(GBlist.length())];
    if (GBlist.length() != 0) {
      for (int i=0; i < GBlist.length(); i++) {
        JSONObject tp=GBlist.getJSONObject(i);
        UserObject von=new UserObject();
        von.ParseJSON(tp.getJSONObject(""String_Node_Str""));
        GBa[i].setVon(von);
        GBa[i].setText(tp.getString(""String_Node_Str""));
        GBa[i].setEntry_id(tp.getString(""String_Node_Str""));
        GBa[i].setTime(tp.getString(""String_Node_Str""));
        GBa[i].setAvatar(tp.getString(""String_Node_Str""));
      }
    }
 else {
      return new GBObject[]{};
    }
    List=GBa;
    return List;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new GBObject[]{};
}","private GBObject[] getGBlist(){
  try {
    JSONObject jsonResponse=new JSONObject(Request.makeSecuredReq(""String_Node_Str"" + id + ""String_Node_Str""));
    GBlist=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
    GBObject[] GBa=new GBObject[(GBlist.length())];
    if (GBlist.length() != 0) {
      for (int i=0; i < GBlist.length(); i++) {
        JSONObject tp=GBlist.getJSONObject(i);
        GBa[i]=new GBObject();
        UserObject von=new UserObject();
        von.ParseJSON(tp.getJSONObject(""String_Node_Str""));
        GBa[i].setVon(von);
        GBa[i].setText(tp.getString(""String_Node_Str""));
        GBa[i].setEntry_id(tp.getString(""String_Node_Str""));
        GBa[i].setTime(tp.getString(""String_Node_Str""));
        GBa[i].setAvatar(tp.getString(""String_Node_Str""));
      }
    }
 else {
      return new GBObject[]{};
    }
    List=GBa;
    return List;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new GBObject[]{};
}",0.9841107124551512
98414,"private ENSObject[] getENSlist(String[] JSON,int folder){
  try {
    JSONArray ENSlist, FolderList=null;
    JSONObject jsonResponse=new JSONObject(JSON[0]);
    ENSlist=jsonResponse.getJSONArray(""String_Node_Str"");
    if (JSON.length > 1) {
      jsonResponse=new JSONObject(JSON[1]);
      FolderList=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
      offset=FolderList.length() - 2;
    }
 else {
      offset=0;
    }
    ENSObject[] ENSa;
    if ((ENSlist.length() + offset) > 0) {
      ENSa=new ENSObject[(ENSlist.length() + offset)];
    }
 else {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return new ENSObject[]{};
    }
    if (JSON.length > 1) {
      if (FolderList.length() != 0) {
        for (int i=0; i < FolderList.length() - 2; i++) {
          ENSa[i].setBetreff(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setENS_id(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setTyp(99);
          ENSa[i].setOrdner(folder);
        }
      }
    }
    if (ENSlist.length() != 0) {
      for (int i=0; i < ENSlist.length(); i++) {
        ENSa[i + offset].setBetreff(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTime(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        UserObject von=new UserObject();
        von.setId(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        von.setUsername(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        ENSa[i + offset].setVon(von);
        ENSa[i + offset].setFlags(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setENS_id(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTyp(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setOrdner(folder);
      }
    }
    temp=ENSa;
    return temp;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ENSObject[]{};
}","private ENSObject[] getENSlist(String[] JSON,int folder){
  try {
    JSONArray ENSlist, FolderList=null;
    JSONObject jsonResponse=new JSONObject(JSON[0]);
    ENSlist=jsonResponse.getJSONArray(""String_Node_Str"");
    if (JSON.length > 1) {
      jsonResponse=new JSONObject(JSON[1]);
      FolderList=jsonResponse.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
      offset=FolderList.length() - 2;
    }
 else {
      offset=0;
    }
    ENSObject[] ENSa;
    if ((ENSlist.length() + offset) > 0) {
      ENSa=new ENSObject[(ENSlist.length() + offset)];
    }
 else {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return new ENSObject[]{};
    }
    if (JSON.length > 1) {
      if (FolderList.length() != 0) {
        for (int i=0; i < FolderList.length() - 2; i++) {
          ENSa[i]=new ENSObject();
          ENSa[i].setBetreff(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setENS_id(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setTyp(99);
          ENSa[i].setOrdner(folder);
        }
      }
    }
    if (ENSlist.length() != 0) {
      for (int i=0; i < ENSlist.length(); i++) {
        ENSa[i + offset]=new ENSObject();
        ENSa[i + offset].setBetreff(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTime(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        UserObject von=new UserObject();
        try {
          von.setId(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
          von.setUsername(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        }
 catch (        Exception e) {
          von.setId(""String_Node_Str"");
          von.setUsername(""String_Node_Str"");
        }
        ENSa[i + offset].setVon(von);
        ENSa[i + offset].setFlags(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setENS_id(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTyp(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setOrdner(folder);
      }
    }
    temp=ENSa;
    return temp;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ENSObject[]{};
}",0.947535052012664
98415,"private ENSObject[] getENSlist(String[] JSON,int folder){
  try {
    JSONObject jsonResponse=new JSONObject(JSON[0]);
    ENSlist=jsonResponse.getJSONArray(""String_Node_Str"");
    if (JSON.length > 1) {
      JSONObject jsonResponse2=new JSONObject(JSON[1]);
      FolderList=jsonResponse2.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
      offset=FolderList.length() - 2;
    }
 else {
      offset=0;
    }
    ENSObject[] ENSa;
    if ((ENSlist.length() + offset) > 0) {
      ENSa=new ENSObject[(ENSlist.length() + offset)];
    }
 else {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return new ENSObject[]{};
    }
    if (JSON.length > 1) {
      if (FolderList.length() != 0) {
        for (int i=0; i < FolderList.length() - 2; i++) {
          ENSa[i].setBetreff(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setENS_id(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setTyp(99);
          ENSa[i].setOrdner(folder);
        }
      }
    }
    if (ENSlist.length() != 0) {
      for (int i=0; i < ENSlist.length(); i++) {
        ENSa[i + offset].setBetreff(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTime(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        UserObject von=new UserObject();
        von.setId(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        von.setUsername(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        ENSa[i + offset].setVon(von);
        ENSa[i + offset].setFlags(2);
        ENSa[i + offset].setENS_id(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTyp(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setOrdner(folder);
      }
    }
    temp=ENSa;
    return temp;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ENSObject[]{};
}","private ENSObject[] getENSlist(String[] JSON,int folder){
  try {
    JSONObject jsonResponse=new JSONObject(JSON[0]);
    ENSlist=jsonResponse.getJSONArray(""String_Node_Str"");
    if (JSON.length > 1) {
      JSONObject jsonResponse2=new JSONObject(JSON[1]);
      FolderList=jsonResponse2.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
      offset=FolderList.length() - 2;
    }
 else {
      offset=0;
    }
    ENSObject[] ENSa;
    if ((ENSlist.length() + offset) > 0) {
      ENSa=new ENSObject[(ENSlist.length() + offset)];
    }
 else {
      Request.doToast(""String_Node_Str"",getApplicationContext());
      return new ENSObject[]{};
    }
    if (JSON.length > 1) {
      if (FolderList.length() != 0) {
        for (int i=0; i < FolderList.length() - 2; i++) {
          ENSa[i]=new ENSObject();
          ENSa[i].setBetreff(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setENS_id(FolderList.getJSONObject(i + 2).getString(""String_Node_Str""));
          ENSa[i].setTyp(99);
          ENSa[i].setOrdner(folder);
        }
      }
    }
    if (ENSlist.length() != 0) {
      for (int i=0; i < ENSlist.length(); i++) {
        ENSa[i + offset]=new ENSObject();
        ENSa[i + offset].setBetreff(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTime(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        UserObject von=new UserObject();
        von.setId(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        von.setUsername(ENSlist.getJSONObject(i).getJSONObject(""String_Node_Str"").getString(""String_Node_Str""));
        ENSa[i + offset].setVon(von);
        ENSa[i + offset].setFlags(2);
        ENSa[i + offset].setENS_id(ENSlist.getJSONObject(i).getString(""String_Node_Str""));
        ENSa[i + offset].setTyp(ENSlist.getJSONObject(i).getInt(""String_Node_Str""));
        ENSa[i + offset].setOrdner(folder);
      }
    }
    temp=ENSa;
    return temp;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new ENSObject[]{};
}",0.981287970838396
98416,"@Override public JingleIQ proceedSIPInitiate(JingleIQ iq,CallSession session,SipChannel channel){
  try {
    log.debug(""String_Node_Str"" + iq.toXML());
    final JingleIQ ring=JingleProcessor.createJingleSessionInfo(new JID(iq.getJingle().getSid()),new JID(iq.getJingle().getInitiator()),iq.getFrom() != null ? iq.getFrom().toString() : null,iq.getJingle().getSid(),Info.Type.ringing);
    ring.setFrom(iq.getTo());
    jingleProcessor.processIQ(ring);
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
  return iq;
}","@Override public JingleIQ proceedSIPInitiate(JingleIQ iq,CallSession session,SipChannel channel){
  try {
    log.debug(""String_Node_Str"" + iq.toXML());
    final JingleIQ ring=JingleProcessor.createJingleSessionInfo(new JID(iq.getJingle().getResponder()),new JID(iq.getJingle().getInitiator()),iq.getFrom() != null ? iq.getFrom().toString() : null,iq.getJingle().getSid(),Info.Type.ringing);
    ring.setFrom(iq.getTo());
    jingleProcessor.processIQ(ring);
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
  return iq;
}",0.9890510948905108
98417,"@Override public void proceedSIPInfo(JingleIQ iq,CallSession session,SipChannel channel){
  if (session != null) {
    callKiller.scheduleKill(session,2);
  }
 else {
    callKiller.scheduleKill(iq,2);
  }
}","@Override public void proceedSIPInfo(JingleIQ iq,CallSession session,SipChannel channel){
  if (session != null) {
    callKiller.scheduleKill(session,sleepTime);
  }
 else {
    callKiller.scheduleKill(iq,sleepTime);
  }
}",0.9534883720930232
98418,"public final void sendSipTermination(final JingleIQ iq,final CallSession callSession){
  try {
    JID from;
    Message lastResponse=callSession.getLastSentResponse();
    if (lastResponse != null && lastResponse.getContactHeader() != null) {
      from=Participants.getFromJidForResponse(lastResponse);
      if (sipToJingleBind != null) {
        from=sipToJingleBind.getXmppTo(from,callSession.getLastReceivedJingle());
      }
      if (!from.toBareJID().equals(iq.getFrom().toBareJID())) {
        lastResponse=null;
      }
      if (sipToJingleBind != null) {
        iq.setFrom(sipToJingleBind.getSipFrom(iq.getFrom()));
      }
    }
    if (lastResponse != null && (lastResponse.isRinging() || lastResponse.isTrying())) {
      if (iq.getJingle().getReason() != null && iq.getJingle().getReason().getType().equals(Reason.Type.media_error)) {
        lastResponse.setStatusLine(new StatusLine(415,""String_Node_Str""));
      }
 else {
        lastResponse.setStatusLine(new StatusLine(480,""String_Node_Str""));
      }
      gatewayRouter.routeSIP(lastResponse,callSession.getUser());
    }
 else {
      lastResponse=callSession.getLastReceivedResponse();
      final Message lastSentRequest=callSession.getLastSentRequest();
      if (lastResponse == null || (lastResponse.isRinging() || lastResponse.isTrying())) {
        Message message=callSession.getLastSentRequest();
        if (message == null) {
          message=callSession.getLastReceivedRequest();
        }
        if (message == null) {
          message=callSession.getLastMessage();
        }
        final Message cancel=SipProcessor.createSipCancel(message);
        cancel.setSendTo(lastSentRequest.getSendTo());
        cancel.setArrivedAt(lastSentRequest.getArrivedAt());
        callSession.addSentRequest(cancel);
        callSession.setRetries(2);
        gatewayRouter.routeSIP(cancel,callSession.getUser());
      }
 else {
        final Message bye=SipProcessor.createSipBye(iq,sipProviderInfo,lastResponse,callSession);
        Message msg=lastSentRequest;
        if (msg == null) {
          msg=callSession.getLastReceivedRequest();
          if (msg == null) {
            log.debug(""String_Node_Str"");
          }
        }
        if (msg == null) {
          log.warn(""String_Node_Str"");
          return;
        }
        bye.setSendTo(msg.getSendTo());
        bye.setArrivedAt(msg.getArrivedAt());
        gatewayRouter.routeSIP(bye,callSession.getUser());
        final ContactHeader contact=msg.getContactHeader();
        if (contact != null) {
          final SipURL url=contact.getNameAddress().getAddress();
          if (url.getHost() != null && url.getPort() > 0 && url.getPort() < 70000) {
            gatewayRouter.routeSIP(bye,callSession.getUser());
            gatewayRouter.routeSIP(bye,callSession.getUser());
          }
        }
      }
    }
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.warn(""String_Node_Str"",e);
  }
}","public final void sendSipTermination(final JingleIQ iq,final CallSession callSession){
  try {
    JID from;
    Message lastResponse=callSession.getLastSentResponse();
    if (lastResponse != null && lastResponse.getContactHeader() != null) {
      from=Participants.getFromJidForResponse(lastResponse);
      if (sipToJingleBind != null) {
        from=sipToJingleBind.getXmppTo(from,callSession.getLastReceivedJingle());
      }
      if (!from.toBareJID().equals(iq.getFrom().toBareJID())) {
        lastResponse=null;
      }
      if (sipToJingleBind != null && sipToJingleBind.getSipFrom(iq.getFrom()) != null) {
        iq.setFrom(sipToJingleBind.getSipFrom(iq.getFrom()));
      }
    }
    if (lastResponse != null && (lastResponse.isRinging() || lastResponse.isTrying())) {
      if (iq.getJingle().getReason() != null && iq.getJingle().getReason().getType().equals(Reason.Type.media_error)) {
        lastResponse.setStatusLine(new StatusLine(415,""String_Node_Str""));
      }
 else {
        lastResponse.setStatusLine(new StatusLine(480,""String_Node_Str""));
      }
      gatewayRouter.routeSIP(lastResponse,callSession.getUser());
    }
 else {
      lastResponse=callSession.getLastReceivedResponse();
      if (lastResponse == null) {
        lastResponse=callSession.getLastSentResponse();
      }
      final Message lastSentRequest=callSession.getLastSentRequest();
      if (lastResponse == null || (lastResponse.isRinging() || lastResponse.isTrying())) {
        Message message=callSession.getLastSentRequest();
        if (message == null) {
          message=callSession.getLastReceivedRequest();
        }
        if (message == null) {
          message=callSession.getLastMessage();
        }
        final Message cancel=SipProcessor.createSipCancel(message);
        cancel.setSendTo(message.getSendTo());
        cancel.setArrivedAt(message.getArrivedAt());
        callSession.addSentRequest(cancel);
        callSession.setRetries(2);
        gatewayRouter.routeSIP(cancel,callSession.getUser());
      }
 else {
        final Message bye=SipProcessor.createSipBye(iq,sipProviderInfo,lastResponse,callSession);
        Message msg=lastSentRequest;
        if (msg == null) {
          msg=callSession.getLastReceivedRequest();
          if (msg == null) {
            log.debug(""String_Node_Str"");
          }
        }
        if (msg == null) {
          log.warn(""String_Node_Str"");
          return;
        }
        bye.setSendTo(msg.getSendTo());
        bye.setArrivedAt(msg.getArrivedAt());
        gatewayRouter.routeSIP(bye,callSession.getUser());
        final ContactHeader contact=msg.getContactHeader();
        if (contact != null) {
          final SipURL url=contact.getNameAddress().getAddress();
          if (url.getHost() != null && url.getPort() > 0 && url.getPort() < 70000) {
            gatewayRouter.routeSIP(bye,callSession.getUser());
            gatewayRouter.routeSIP(bye,callSession.getUser());
          }
        }
      }
    }
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.warn(""String_Node_Str"",e);
  }
}",0.9684962650211107
98419,"public static Message createSipBye(final JingleIQ iq,final SipProviderInfoInterface sipProvider,final Message lastResponse,final CallSession callSession) throws JingleSipException, SipParsingException {
  if (lastResponse == null) {
    throw new JingleSipException(""String_Node_Str"");
  }
  final Participants p;
  p=Participants.getParticipants(lastResponse);
  final JID from;
  final JID to;
  if (iq.getFrom().toBareJID().equals(p.getResponder().toBareJID())) {
    from=p.getResponder();
    to=p.getInitiator();
  }
 else {
    from=p.getInitiator();
    to=p.getResponder();
  }
  final ContactHeader contactHeader=callSession.getContactHeader(to.toBareJID());
  NameAddress requestURI=null;
  if (contactHeader != null) {
    requestURI=contactHeader.getNameAddress();
  }
  final Message bye=createSipBye(from,to,iq.getJingle().getSid(),sipProvider,lastResponse,requestURI);
  if (bye == null) {
    throw new JingleSipException(""String_Node_Str"");
  }
  return bye;
}","public static Message createSipBye(final JingleIQ iq,final SipProviderInfoInterface sipProvider,final Message lastResponse,final CallSession callSession) throws JingleSipException, SipParsingException {
  if (lastResponse == null) {
    throw new JingleSipException(""String_Node_Str"");
  }
  final Participants p;
  p=Participants.getParticipants(lastResponse);
  final JID from;
  final JID to;
  log.debug(""String_Node_Str"" + iq.toXML() + ""String_Node_Str""+ p);
  if (iq.getFrom().toBareJID().equals(p.getResponder().toBareJID()) || !iq.getFrom().toBareJID().equals(p.getInitiator().toBareJID())) {
    from=p.getResponder();
    to=p.getInitiator();
  }
 else {
    from=p.getInitiator();
    to=p.getResponder();
  }
  final ContactHeader contactHeader=callSession.getContactHeader(to.toBareJID());
  NameAddress requestURI=null;
  if (contactHeader != null) {
    requestURI=contactHeader.getNameAddress();
  }
  final Message bye=createSipBye(from,to,iq.getJingle().getSid(),sipProvider,lastResponse,requestURI);
  if (bye == null) {
    throw new JingleSipException(""String_Node_Str"");
  }
  return bye;
}",0.738755980861244
98420,"public static SessionDescription createSipSDP(final Description rtpDescription,final RawUdpTransport transport,final SipProviderInfoInterface sipProvider,final MediaDirection mediaDirection) throws SdpException {
  final SessionDescription description=SdpFactory.getInstance().createSessionDescription(sipProvider);
  final int[] ids=new int[rtpDescription.getPayloads().size()];
  int i=0;
  final List<String> names=new ArrayList<String>();
  final List<String> values=new ArrayList<String>();
  for (  final Payload payload : rtpDescription.getPayloads()) {
    if (i == 0 || !payload.getId().equals(Payload.G729.getId())) {
      ids[i++]=Integer.parseInt(payload.getId());
      names.add(""String_Node_Str"");
      values.add(payload.getId() + ""String_Node_Str"" + payload.getName()+ (payload.getClockrate() > -1 ? ""String_Node_Str"" + payload.getClockrate() : ""String_Node_Str"")+ (payload.getChannels() > -1 ? ""String_Node_Str"" + payload.getChannels() : ""String_Node_Str""));
      if (payload.getId().equals(Payload.G729.getId())) {
        names.add(""String_Node_Str"");
        values.add(String.valueOf(payload.getId()) + ""String_Node_Str"");
      }
    }
  }
  if (transport.getCandidates().size() < 1) {
    throw new SdpException(""String_Node_Str"");
  }
  final MediaDescription md=SdpFactory.getInstance().createMediaDescription(rtpDescription.getMedia(),Integer.parseInt(transport.getCandidates().get(0).getPort()),1,""String_Node_Str"",ids);
  md.addDynamicPayloads(names,values);
  final AttributeField af=new AttributeField();
  if (!MediaDirection.both.equals(mediaDirection)) {
    af.setValueAllowNull(mediaDirection.toString());
    md.addAttribute(af);
  }
 else {
    af.setValueAllowNull(""String_Node_Str"");
    md.addAttribute(af);
  }
  final List<MediaDescription> mv=new ArrayList<MediaDescription>();
  mv.add(md);
  description.setMediaDescriptions(mv);
  String ip=transport.getCandidates().get(0).getIp();
  ip=ip == null || ip.trim().length() < 7 ? sipProvider.getIP() : ip;
  final Origin origin=SdpFactory.getInstance().createOrigin(""String_Node_Str"",ip);
  origin.setSessionId(3);
  origin.setSessionVersion(1);
  description.setOrigin(origin);
  description.setConnection(SdpFactory.getInstance().createConnection(ip));
  return description;
}","public static SessionDescription createSipSDP(final Description rtpDescription,final RawUdpTransport transport,final SipProviderInfoInterface sipProvider,final MediaDirection mediaDirection) throws SdpException {
  final SessionDescription description=SdpFactory.getInstance().createSessionDescription(sipProvider);
  final int[] ids=new int[rtpDescription.getPayloads().size()];
  int i=0;
  final List<String> names=new ArrayList<String>();
  final List<String> values=new ArrayList<String>();
  for (  final Payload payload : rtpDescription.getPayloads()) {
    ids[i++]=Integer.parseInt(payload.getId());
    names.add(""String_Node_Str"");
    values.add(payload.getId() + ""String_Node_Str"" + payload.getName()+ (payload.getClockrate() > -1 ? ""String_Node_Str"" + payload.getClockrate() : ""String_Node_Str"")+ (payload.getChannels() > -1 ? ""String_Node_Str"" + payload.getChannels() : ""String_Node_Str""));
    if (payload.getId().equals(Payload.G729.getId())) {
      names.add(""String_Node_Str"");
      values.add(String.valueOf(payload.getId()) + ""String_Node_Str"");
    }
  }
  if (transport.getCandidates().size() < 1) {
    throw new SdpException(""String_Node_Str"");
  }
  final MediaDescription md=SdpFactory.getInstance().createMediaDescription(rtpDescription.getMedia(),Integer.parseInt(transport.getCandidates().get(0).getPort()),1,""String_Node_Str"",ids);
  md.addDynamicPayloads(names,values);
  final AttributeField af=new AttributeField();
  if (!MediaDirection.both.equals(mediaDirection)) {
    af.setValueAllowNull(mediaDirection.toString());
    md.addAttribute(af);
  }
 else {
    af.setValueAllowNull(""String_Node_Str"");
    md.addAttribute(af);
  }
  final List<MediaDescription> mv=new ArrayList<MediaDescription>();
  mv.add(md);
  description.setMediaDescriptions(mv);
  String ip=transport.getCandidates().get(0).getIp();
  ip=ip == null || ip.trim().length() < 7 ? sipProvider.getIP() : ip;
  final Origin origin=SdpFactory.getInstance().createOrigin(""String_Node_Str"",ip);
  origin.setSessionId(3);
  origin.setSessionVersion(1);
  description.setOrigin(origin);
  description.setConnection(SdpFactory.getInstance().createConnection(ip));
  return description;
}",0.9805063858391216
98421,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  JID responder=JIDFactory.getInstance().getJID(iq.getJingle().getResponder());
  if (sipToJingleBind != null) {
    log.debug(""String_Node_Str"" + responder);
    final JID xmppTo=sipToJingleBind.getXmppTo(responder,null);
    if (xmppTo != null) {
      iq.setTo(xmppTo);
      iq.setFrom((JID)null);
    }
 else {
      log.warn(""String_Node_Str"");
    }
  }
  return iq;
}",0.3197278911564626
98422,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  setSessionFinishTime(session,System.currentTimeMillis());
  chargeCall(iq,session);
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  setSessionFinishTime(session,System.currentTimeMillis());
  chargeCall(iq,session);
  return iq;
}",0.9573934837092732
98423,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return iq;
}",0.9251101321585904
98424,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return iq;
}",0.9251101321585904
98425,"public final void sendSipTermination(final JingleIQ iq,final CallSession callSession){
  try {
    JID from;
    Message lastResponse=callSession.getLastSentResponse();
    if (lastResponse != null && lastResponse.getContactHeader() != null) {
      from=Participants.getFromJidForResponse(lastResponse);
      if (sipToJingleBind != null) {
        from=sipToJingleBind.getXmppTo(from,callSession.getLastReceivedJingle());
      }
      if (!from.toBareJID().equals(iq.getFrom().toBareJID())) {
        lastResponse=null;
      }
      if (sipToJingleBind != null) {
        iq.setFrom(sipToJingleBind.getSipFrom(iq.getFrom()));
      }
    }
    if (lastResponse != null && (lastResponse.isRinging() || lastResponse.isTrying())) {
      if (iq.getJingle().getReason() != null && iq.getJingle().getReason().getType().equals(Reason.Type.media_error)) {
        lastResponse.setStatusLine(new StatusLine(415,""String_Node_Str""));
      }
 else {
        lastResponse.setStatusLine(new StatusLine(480,""String_Node_Str""));
      }
      gatewayRouter.routeSIP(lastResponse,callSession.getUser());
    }
 else {
      lastResponse=callSession.getLastReceivedResponse();
      final Message lastSentRequest=callSession.getLastSentRequest();
      if (lastResponse == null || (lastResponse.isRinging() || lastResponse.isTrying())) {
        Message message=callSession.getLastSentRequest();
        if (message == null) {
          message=callSession.getLastMessage();
        }
        final Message cancel=SipProcessor.createSipCancel(message);
        cancel.setSendTo(lastSentRequest.getSendTo());
        cancel.setArrivedAt(lastSentRequest.getArrivedAt());
        callSession.addSentRequest(cancel);
        callSession.setRetries(2);
        gatewayRouter.routeSIP(cancel,callSession.getUser());
      }
 else {
        final Message bye=SipProcessor.createSipBye(iq,sipProviderInfo,lastResponse,callSession);
        Message msg=lastSentRequest;
        if (msg == null) {
          msg=callSession.getLastReceivedRequest();
          if (msg == null) {
            log.debug(""String_Node_Str"");
          }
        }
        if (msg == null) {
          log.warn(""String_Node_Str"");
          return;
        }
        bye.setSendTo(msg.getSendTo());
        bye.setArrivedAt(msg.getArrivedAt());
        gatewayRouter.routeSIP(bye,callSession.getUser());
        final ContactHeader contact=msg.getContactHeader();
        if (contact != null) {
          final SipURL url=contact.getNameAddress().getAddress();
          if (url.getHost() != null && url.getPort() > 0 && url.getPort() < 70000) {
            gatewayRouter.routeSIP(bye,callSession.getUser());
            gatewayRouter.routeSIP(bye,callSession.getUser());
          }
        }
      }
    }
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.warn(""String_Node_Str"",e);
  }
}","public final void sendSipTermination(final JingleIQ iq,final CallSession callSession){
  try {
    JID from;
    Message lastResponse=callSession.getLastSentResponse();
    if (lastResponse != null && lastResponse.getContactHeader() != null) {
      from=Participants.getFromJidForResponse(lastResponse);
      if (sipToJingleBind != null) {
        from=sipToJingleBind.getXmppTo(from,callSession.getLastReceivedJingle());
      }
      if (!from.toBareJID().equals(iq.getFrom().toBareJID())) {
        lastResponse=null;
      }
      if (sipToJingleBind != null) {
        iq.setFrom(sipToJingleBind.getSipFrom(iq.getFrom()));
      }
    }
    if (lastResponse != null && (lastResponse.isRinging() || lastResponse.isTrying())) {
      if (iq.getJingle().getReason() != null && iq.getJingle().getReason().getType().equals(Reason.Type.media_error)) {
        lastResponse.setStatusLine(new StatusLine(415,""String_Node_Str""));
      }
 else {
        lastResponse.setStatusLine(new StatusLine(480,""String_Node_Str""));
      }
      gatewayRouter.routeSIP(lastResponse,callSession.getUser());
    }
 else {
      lastResponse=callSession.getLastReceivedResponse();
      final Message lastSentRequest=callSession.getLastSentRequest();
      if (lastResponse == null || (lastResponse.isRinging() || lastResponse.isTrying())) {
        Message message=callSession.getLastSentRequest();
        if (message == null) {
          message=callSession.getLastReceivedRequest();
        }
        if (message == null) {
          message=callSession.getLastMessage();
        }
        final Message cancel=SipProcessor.createSipCancel(message);
        cancel.setSendTo(lastSentRequest.getSendTo());
        cancel.setArrivedAt(lastSentRequest.getArrivedAt());
        callSession.addSentRequest(cancel);
        callSession.setRetries(2);
        gatewayRouter.routeSIP(cancel,callSession.getUser());
      }
 else {
        final Message bye=SipProcessor.createSipBye(iq,sipProviderInfo,lastResponse,callSession);
        Message msg=lastSentRequest;
        if (msg == null) {
          msg=callSession.getLastReceivedRequest();
          if (msg == null) {
            log.debug(""String_Node_Str"");
          }
        }
        if (msg == null) {
          log.warn(""String_Node_Str"");
          return;
        }
        bye.setSendTo(msg.getSendTo());
        bye.setArrivedAt(msg.getArrivedAt());
        gatewayRouter.routeSIP(bye,callSession.getUser());
        final ContactHeader contact=msg.getContactHeader();
        if (contact != null) {
          final SipURL url=contact.getNameAddress().getAddress();
          if (url.getHost() != null && url.getPort() > 0 && url.getPort() < 70000) {
            gatewayRouter.routeSIP(bye,callSession.getUser());
            gatewayRouter.routeSIP(bye,callSession.getUser());
          }
        }
      }
    }
  }
 catch (  JingleSipException e) {
    log.warn(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.warn(""String_Node_Str"",e);
  }
}",0.983634216298296
98426,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  log.info(_createLine(iq));
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  log.info(_createLine(iq));
  return iq;
}",0.9403508771929824
98427,"public abstract boolean proceedSIPTerminate(final JingleIQ iq,final CallSession session,final SipChannel channel);","public abstract JingleIQ proceedSIPTerminate(final JingleIQ iq,final CallSession session,final SipChannel channel);",0.9519650655021834
98428,"@Override public boolean proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return true;
}","@Override public JingleIQ proceedSIPTerminate(JingleIQ iq,CallSession session,SipChannel channel){
  return iq;
}",0.9251101321585904
98429,"@Override protected void handleResult(IqRequest iq){
  if (iq.getOriginalPacket() instanceof JingleIQ) {
    final JingleIQ jingleIQ=(JingleIQ)iq.getOriginalPacket();
    final CallSession callSession=callSessionMapper.getSession(jingleIQ);
    if (callSession != null) {
      final RelayIQ relayIQ=RelayIQ.parseRelayIq(iq.getResult());
      callSession.setRelayIQ(relayIQ);
    }
  }
}","@Override protected void handleResult(IqRequest iq){
  if (iq.getOriginalPacket() instanceof JingleIQ) {
    final JingleIQ jingleIQ=(JingleIQ)iq.getOriginalPacket();
    final CallSession callSession=callSessionMapper.getSession(jingleIQ);
    if (callSession != null) {
      final RelayIQ relayIQ=RelayIQ.parseRelayIq(iq.getResult());
      callSession.setRelayIQ(relayIQ);
    }
  }
 else   if (iq.getOriginalPacket() instanceof Message) {
    final Message m=(Message)iq.getOriginalPacket();
    final CallSession callSession;
    try {
      callSession=callSessionMapper.getSession(m);
      if (callSession != null) {
        final RelayIQ relayIQ=RelayIQ.parseRelayIq(iq.getResult());
        callSession.setRelayIQ(relayIQ);
      }
    }
 catch (    JingleException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.6365873666940115
98430,"@Override protected String getRequestId(Object obj){
  if (obj instanceof JingleIQ) {
    final JingleIQ iq=(JingleIQ)obj;
    return iq.getJingle().getSid();
  }
  return null;
}","@Override protected String getRequestId(Object obj){
  if (obj instanceof JingleIQ) {
    final JingleIQ iq=(JingleIQ)obj;
    return iq.getJingle().getSid();
  }
 else   if (obj instanceof Message) {
    final Message m=(Message)obj;
    if (m.getCallIdHeader() != null) {
      return m.getCallIdHeader().getCallId();
    }
  }
  return null;
}",0.6285714285714286
98431,"public final void sendJingleTerminate(final Message msg,final SipChannel sipChannel){
  try {
    final CallSession callSession=callSessions.getSession(msg);
    Participants mainParticipants;
    try {
      mainParticipants=msg.getParticipants();
    }
 catch (    SipParsingException e) {
      log.debug(""String_Node_Str"",e);
      return;
    }
    if (callSession == null) {
      log.debug(""String_Node_Str"" + msg.toString());
      return;
    }
    JID initiator;
    JID responder;
    JID to;
    if (callSession.getLastSentJingle() != null) {
      initiator=new JID(callSession.getLastSentJingle().getJingle().getInitiator());
      responder=new JID(callSession.getLastSentJingle().getJingle().getResponder());
    }
 else     if (callSession.getLastReceivedJingle() != null) {
      initiator=new JID(callSession.getLastReceivedJingle().getJingle().getInitiator());
      responder=new JID(callSession.getLastReceivedJingle().getJingle().getResponder());
    }
 else {
      log.info(""String_Node_Str"");
      return;
    }
    if (msg.isRequest()) {
      to=mainParticipants.getResponder();
    }
 else {
      to=mainParticipants.getInitiator();
    }
    if (initiator.getResource() == null) {
      if (initiator.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        initiator=mainParticipants.getInitiator();
      }
 else {
        initiator=mainParticipants.getResponder();
      }
    }
 else     if (responder.getResource() == null) {
      if (responder.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        responder=mainParticipants.getResponder();
      }
 else {
        responder=mainParticipants.getInitiator();
      }
    }
    final Message lastMsg=callSession.getLastMessage();
    if (lastMsg != null) {
      mainParticipants=lastMsg.getParticipants();
    }
    if (mainParticipants == null) {
      log.info(""String_Node_Str"" + msg);
      return;
    }
    if (initiator.getResource() == null) {
      if (initiator.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        initiator=mainParticipants.getInitiator();
      }
 else {
        initiator=mainParticipants.getResponder();
      }
    }
 else     if (responder.getResource() == null) {
      if (responder.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        responder=mainParticipants.getResponder();
      }
 else {
        responder=mainParticipants.getInitiator();
      }
    }
    if (sipToJingleBind != null) {
      to=sipToJingleBind.getXmppTo(to,callSession.getLastReceivedJingle());
    }
    for (    final JID usr : callSession.getUsers()) {
      if (to == null || to.toBareJID().equals(usr.toBareJID())) {
        to=usr;
      }
    }
    if (to != null && to.getResource() == null) {
      if (to.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        to=mainParticipants.getInitiator();
      }
 else       if (to.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        to=mainParticipants.getResponder();
      }
    }
    final int code=getCode(msg);
    final Reason reason=getReason(msg,code);
    final JingleIQ terminate=JingleProcessor.createJingleTermination(initiator,responder,to.toString(),reason,msg.getCallIdHeader().getCallId());
    if (callSession.getProceeds() != null) {
      for (      final CallPreparation preparation : callSession.getProceeds()) {
        preparation.proceedSIPTerminate(terminate,callSession,null);
      }
    }
    callSessions.addSentJingle(terminate);
    gatewayRouter.send(terminate);
  }
 catch (  JingleException e) {
    log.debug(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.debug(""String_Node_Str"",e);
  }
}","public final void sendJingleTerminate(final Message msg,final SipChannel sipChannel){
  try {
    final CallSession callSession=callSessions.getSession(msg);
    Participants mainParticipants;
    try {
      mainParticipants=msg.getParticipants();
    }
 catch (    SipParsingException e) {
      log.debug(""String_Node_Str"",e);
      return;
    }
    if (callSession == null) {
      log.debug(""String_Node_Str"" + msg.toString());
      return;
    }
    JID initiator;
    JID responder;
    JID to;
    if (callSession.getLastSentJingle() != null) {
      initiator=new JID(callSession.getLastSentJingle().getJingle().getInitiator());
      responder=new JID(callSession.getLastSentJingle().getJingle().getResponder());
    }
 else     if (callSession.getLastReceivedJingle() != null) {
      initiator=new JID(callSession.getLastReceivedJingle().getJingle().getInitiator());
      responder=new JID(callSession.getLastReceivedJingle().getJingle().getResponder());
    }
 else {
      log.info(""String_Node_Str"");
      return;
    }
    if (msg.isRequest()) {
      to=mainParticipants.getResponder();
    }
 else {
      to=mainParticipants.getInitiator();
    }
    if (initiator.getResource() == null) {
      if (initiator.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        initiator=mainParticipants.getInitiator();
      }
 else {
        initiator=mainParticipants.getResponder();
      }
    }
 else     if (responder.getResource() == null) {
      if (responder.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        responder=mainParticipants.getResponder();
      }
 else {
        responder=mainParticipants.getInitiator();
      }
    }
    final Message lastMsg=callSession.getLastMessage();
    if (lastMsg != null) {
      mainParticipants=lastMsg.getParticipants();
    }
    if (mainParticipants == null) {
      log.info(""String_Node_Str"" + msg);
      return;
    }
    if (initiator.getResource() == null) {
      if (initiator.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        initiator=mainParticipants.getInitiator();
      }
 else {
        initiator=mainParticipants.getResponder();
      }
    }
 else     if (responder.getResource() == null) {
      if (responder.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        responder=mainParticipants.getResponder();
      }
 else {
        responder=mainParticipants.getInitiator();
      }
    }
    if (sipToJingleBind != null) {
      to=sipToJingleBind.getXmppTo(to,callSession.getLastReceivedJingle());
    }
    for (    final JID usr : callSession.getUsers()) {
      if (to == null || to.toBareJID().equals(usr.toBareJID())) {
        to=usr;
      }
    }
    if (to != null && to.getResource() == null) {
      if (to.toBareJID().equals(mainParticipants.getInitiator().toBareJID())) {
        to=mainParticipants.getInitiator();
      }
 else       if (to.toBareJID().equals(mainParticipants.getResponder().toBareJID())) {
        to=mainParticipants.getResponder();
      }
    }
    final int code=getCode(msg);
    final Reason reason=getReason(msg,code);
    JingleIQ terminate=JingleProcessor.createJingleTermination(initiator,responder,to.toString(),reason,msg.getCallIdHeader().getCallId());
    if (callSession.getProceeds() != null) {
      for (      final CallPreparation preparation : callSession.getProceeds()) {
        terminate=preparation.proceedSIPTerminate(terminate,callSession,null);
      }
    }
    callSessions.addSentJingle(terminate);
    gatewayRouter.send(terminate);
  }
 catch (  JingleException e) {
    log.debug(""String_Node_Str"",e);
  }
catch (  SipParsingException e) {
    log.debug(""String_Node_Str"",e);
  }
}",0.9978517722878624
98432,"@Override public void timeoutRequest(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    callKiller.immediateKill(((JingleIQ)iqRequest.getOriginalPacket()).getJingle().getSid(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
 else   if (iqRequest.getOriginalPacket() instanceof Message) {
    callKiller.immediateKill(((JingleIQ)iqRequest.getOriginalPacket()).getJingle().getSid(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
}","@Override public void timeoutRequest(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    callKiller.immediateKill((JingleIQ)iqRequest.getOriginalPacket(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
 else   if (iqRequest.getOriginalPacket() instanceof Message) {
    callKiller.immediateKill((JingleIQ)iqRequest.getOriginalPacket(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
}",0.9518828451882844
98433,"@Override public void receivedError(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    callKiller.immediateKill(((JingleIQ)iqRequest.getOriginalPacket()).getJingle().getSid(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
    prepareStatesManager.cancelCall((JingleIQ)iqRequest.getOriginalPacket(),null,new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
 else   if (iqRequest.getOriginalPacket() instanceof Message) {
    callKiller.immediateKill(((JingleIQ)iqRequest.getOriginalPacket()).getJingle().getSid(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
    prepareStatesManager.cancelCall((Message)iqRequest.getOriginalPacket(),null,null,new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
}","@Override public void receivedError(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    callKiller.immediateKill((JingleIQ)iqRequest.getOriginalPacket(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
    prepareStatesManager.cancelCall((JingleIQ)iqRequest.getOriginalPacket(),null,new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
 else   if (iqRequest.getOriginalPacket() instanceof Message) {
    callKiller.immediateKill((JingleIQ)iqRequest.getOriginalPacket(),new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
    prepareStatesManager.cancelCall((Message)iqRequest.getOriginalPacket(),null,null,new Reason(""String_Node_Str"",Reason.Type.connectivity_error));
  }
}",0.9700910273081924
98434,"public String getJingleDestination(final IQ res){
  boolean isJingle=false;
  String destination=null;
  log.debug(""String_Node_Str"" + res.toString());
  for (  Object o : res.getChildElement().elements()) {
    Element e=(Element)o;
    if (e.attributeValue(""String_Node_Str"").equals(jinglePhoneType)) {
      isJingle=true;
    }
    destination=e.attributeValue(""String_Node_Str"");
  }
  return isJingle ? destination : null;
}","public String getJingleDestination(final IQ res){
  boolean isJingle=false;
  String destination=null;
  log.debug(""String_Node_Str"" + res.toString());
  for (  Object o : res.getChildElement().elements()) {
    Element e=(Element)o;
    destination=e.attributeValue(""String_Node_Str"");
    if (e.attributeValue(""String_Node_Str"").equals(jinglePhoneType)) {
      isJingle=true;
      break;
    }
  }
  return isJingle ? destination : null;
}",0.86368843069874
98435,"@Override public void receivedError(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    prepareStatesManager.prepareCall((JingleIQ)iqRequest.getOriginalPacket(),null);
  }
}","@Override public void receivedError(IqRequest iqRequest){
  if (iqRequest.getOriginalPacket() instanceof JingleIQ) {
    if (iqRequest.getRequest().getChildElement().getNamespace().getURI().equals(creditServiceProcessor.getNamespace())) {
      prepareStatesManager.prepareCall((JingleIQ)iqRequest.getOriginalPacket(),null);
    }
  }
}",0.7601476014760148
98436,"@Override protected void handleIQResult(final IQ iq){
  log.debug(""String_Node_Str"" + iq.toXML());
  final JID toJid=iq.getTo();
  if (null == toJid)   return;
  final JID fromJid=iq.getFrom();
  if (null == fromJid)   return;
  final Element e=iq.getChildElement();
  if (null == e)   return;
  final Namespace namespace=e.getNamespace();
  if (null == namespace)   return;
  final String ns=namespace.getURI();
  for (  final List<NamespaceProcessor> npl : processors.values()) {
    for (    final NamespaceProcessor np : npl)     np.processIQError(iq);
  }
}","@Override protected void handleIQResult(final IQ iq){
  log.debug(""String_Node_Str"" + iq.toXML());
  final JID toJid=iq.getTo();
  if (null == toJid)   return;
  final JID fromJid=iq.getFrom();
  if (null == fromJid)   return;
  final Element e=iq.getChildElement();
  if (null == e)   return;
  final Namespace namespace=e.getNamespace();
  if (null == namespace)   return;
  final String ns=namespace.getURI();
  for (  final List<NamespaceProcessor> npl : processors.values()) {
    for (    final NamespaceProcessor np : npl)     np.processIQResult(iq);
  }
}",0.9902222222222222
98437,"/** 
 * Creates a new database table based on the public fields available in a class.
 * @param c
 */
private void createTable(Class<?> c){
  String tableName=c.getName().replace('.','_');
  try {
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    Statement statement=conn.createStatement();
    statement.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str"");
    for (    Field field : fields) {
      Class<?> type=field.getType();
      String dbColType=getDbColType(type.getSimpleName());
      String columnName=field.getName();
      if (!columnName.equals(""String_Node_Str"")) {
        statement.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ dbColType+ ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + tableName);
    e.printStackTrace();
  }
}","private void createTable(Class<?> c){
  String tableName=c.getName().replace('.','_');
  try {
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    Statement statement=conn.createStatement();
    statement.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str"");
    for (    Field field : fields) {
      Class<?> type=field.getType();
      String dbColType=getDbColType(type.getSimpleName());
      String columnName=field.getName();
      if (!columnName.equals(""String_Node_Str"")) {
        statement.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str""+ columnName+ ""String_Node_Str""+ dbColType+ ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + tableName);
    e.printStackTrace();
  }
}",0.9390681003584228
98438,"/** 
 * @param date
 * @return A string representation of a date in yyyy/MM/dd HH:mm:ss format.
 */
private String getDateString(Date date){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  return df.format(date);
}","private String getDateString(Date date){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  return df.format(date);
}",0.7142857142857143
98439,"/** 
 * Loads a list of all products from all tables in the database.
 */
@Override protected List<Product> loadProductList(){
  List<Product> products=new ArrayList<Product>();
  List<String> tableNames=getTableNames();
  for (  String table : tableNames) {
    products.addAll(getProductsFromTable(table));
  }
  return products;
}","@Override protected List<Product> loadProductList(){
  List<Product> products=new ArrayList<Product>();
  List<String> tableNames=getTableNames();
  for (  String table : tableNames) {
    products.addAll(getProductsFromTable(table));
  }
  return products;
}",0.875
98440,"/** 
 * Sets the database that future transactions will be made to.
 */
@Override protected void setDatabase(String name){
  this.databaseName=name;
  try {
    Class.forName(""String_Node_Str"");
    conn=DriverManager.getConnection(""String_Node_Str"" + name);
  }
 catch (  Exception e) {
  }
}","@Override protected void setDatabase(String name){
  this.databaseName=name;
  try {
    Class.forName(""String_Node_Str"");
    conn=DriverManager.getConnection(""String_Node_Str"" + name);
  }
 catch (  Exception e) {
  }
}",0.8599221789883269
98441,"/** 
 * Returns the database column type that corresponds to a particular java datatype.
 * @param javaTypeName
 * @return
 */
private String getDbColType(String javaTypeName){
  if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return null;
}","private String getDbColType(String javaTypeName){
  if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (javaTypeName.equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return null;
}",0.8873114463176575
98442,"/** 
 * Saves a product to DB.
 * @return Whether or not the save was successful.
 */
@Override protected boolean save(Product product){
  Class<?> c=product.getClass();
  String className=c.getName();
  className=className.replace('.','_');
  if (!tableExists(className)) {
    createTable(c);
  }
  return insertIntoTable(className,product);
}","@Override protected boolean save(Product product){
  Class<?> c=product.getClass();
  String className=c.getName();
  className=className.replace('.','_');
  if (!tableExists(className)) {
    createTable(c);
  }
  return insertIntoTable(className,product);
}",0.8576158940397351
98443,"/** 
 * Updates the data stored against product p in the database. DB values are overwritten by the values in p's public fields.
 */
@Override protected void update(Product p){
  long id=p.id;
  Class<?> c=p.getClass();
  String sql=""String_Node_Str"";
  Field[] fields=c.getFields();
  try {
    String tableName=extractTableName(c.getName());
    if (fields.length > 1) {
      sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        Class<?> fieldType=field.getType();
        String fieldTypeName=fieldType.getSimpleName();
        if (field.getName().equals(""String_Node_Str"")) {
          continue;
        }
        sql+=field.getName();
        sql+=""String_Node_Str"";
        if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
          sql+=field.get(p);
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          String s=(String)field.get(p);
          if (s != null) {
            sql+=""String_Node_Str"" + s.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else         if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
          sql+=field.get(p);
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          Date date=(Date)field.get(p);
          if (date != null) {
            sql+=""String_Node_Str"" + getDateString(date) + ""String_Node_Str"";
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          Color color=(Color)field.get(p);
          if (color != null) {
            sql+=(color.getRGB());
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else {
          sql=sql.substring(0,sql.lastIndexOf(""String_Node_Str""));
        }
        if (i < fields.length - 1) {
          sql+=""String_Node_Str"";
        }
      }
      sql+=""String_Node_Str"" + id + ""String_Node_Str"";
    }
    System.out.println(sql);
    Statement stmt=conn.createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void update(Product p){
  long id=p.id;
  Class<?> c=p.getClass();
  String sql=""String_Node_Str"";
  Field[] fields=c.getFields();
  try {
    String tableName=extractTableName(c.getName());
    if (fields.length > 1) {
      sql=""String_Node_Str"" + tableName + ""String_Node_Str"";
      for (int i=0; i < fields.length; i++) {
        Field field=fields[i];
        Class<?> fieldType=field.getType();
        String fieldTypeName=fieldType.getSimpleName();
        if (field.getName().equals(""String_Node_Str"")) {
          continue;
        }
        sql+=field.getName();
        sql+=""String_Node_Str"";
        if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
          sql+=field.get(p);
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          String s=(String)field.get(p);
          if (s != null) {
            sql+=""String_Node_Str"" + s.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else         if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
          sql+=field.get(p);
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          Date date=(Date)field.get(p);
          if (date != null) {
            sql+=""String_Node_Str"" + getDateString(date) + ""String_Node_Str"";
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else         if (fieldTypeName.equals(""String_Node_Str"")) {
          Color color=(Color)field.get(p);
          if (color != null) {
            sql+=(color.getRGB());
          }
 else {
            sql+=""String_Node_Str"";
          }
        }
 else {
          sql=sql.substring(0,sql.lastIndexOf(""String_Node_Str""));
        }
        if (i < fields.length - 1) {
          sql+=""String_Node_Str"";
        }
      }
      sql+=""String_Node_Str"" + id + ""String_Node_Str"";
    }
    System.out.println(sql);
    Statement stmt=conn.createStatement();
    stmt.executeUpdate(sql);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9691056910569106
98444,"/** 
 * Checks whether a table has previously been created.
 * @param className
 * @return
 */
private boolean tableExists(String className){
  className=className.replace('.','_');
  boolean success=false;
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str"");
    if (rs.next()) {
      success=true;
      rs.close();
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return success;
}","private boolean tableExists(String className){
  className=className.replace('.','_');
  boolean success=false;
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + className + ""String_Node_Str"");
    if (rs.next()) {
      success=true;
      rs.close();
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return success;
}",0.913871260199456
98445,"/** 
 * @return The names of all the tables that exist in the database.
 */
private List<String> getTableNames(){
  List<String> tableNames=new ArrayList<String>();
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    while (rs.next()) {
      tableNames.add(rs.getString(""String_Node_Str"").replace('_','.'));
    }
    rs.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return tableNames;
}","private List<String> getTableNames(){
  List<String> tableNames=new ArrayList<String>();
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    while (rs.next()) {
      tableNames.add(rs.getString(""String_Node_Str"").replace('_','.'));
    }
    rs.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return tableNames;
}",0.9274809160305344
98446,"/** 
 * Deletes product p from the database
 */
@Override protected void delete(Product p){
  long id=p.id;
  try {
    Statement stmt=conn.createStatement();
    String tableName=extractTableName(p.getClass().getName());
    stmt.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str""+ id);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void delete(Product p){
  long id=p.id;
  try {
    Statement stmt=conn.createStatement();
    String tableName=extractTableName(p.getClass().getName());
    stmt.executeUpdate(""String_Node_Str"" + tableName + ""String_Node_Str""+ id);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9285714285714286
98447,"/** 
 * @param preparedStatement The PreparedStatement we want to set the values for
 * @param field The field that contains the value we want to set
 * @param index The position of the '?' in the preparedStatement that we want to replace
 * @param product Used for retrieving the instance value of field.
 */
private void setPreparedStatementValues(PreparedStatement preparedStatement,Field field,int index,Product product){
  try {
    Class<?> type=field.getType();
    String typeName=type.getSimpleName();
    if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setString(index,field.get(product).toString());
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setInt(index,((Color)field.get(product)).getRGB());
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setInt(index,(Integer)field.get(product));
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setDouble(index,(Double)field.get(product));
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      Date date=(Date)field.get(product);
      preparedStatement.setString(index,getDateString(date));
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","private void setPreparedStatementValues(PreparedStatement preparedStatement,Field field,int index,Product product){
  try {
    Class<?> type=field.getType();
    String typeName=type.getSimpleName();
    if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setString(index,field.get(product).toString());
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setInt(index,((Color)field.get(product)).getRGB());
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setInt(index,(Integer)field.get(product));
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      preparedStatement.setDouble(index,(Double)field.get(product));
    }
 else     if (typeName.equals(""String_Node_Str"")) {
      Date date=(Date)field.get(product);
      preparedStatement.setString(index,getDateString(date));
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
}",0.8628318584070797
98448,"/** 
 * Custom date parser since DateFormat isn't working for our date format.
 * @param dateString
 * @return A date representation of dateString.
 */
private Date parseDate(String dateString){
  Date date=new Date();
  String[] parts=dateString.split(""String_Node_Str"");
  String[] yyyymmdd=parts[0].split(""String_Node_Str"");
  String[] hhmmss=parts[1].split(""String_Node_Str"");
  date.setYear(new Integer(yyyymmdd[0]) - 1900);
  date.setMonth(new Integer(yyyymmdd[1]) - 1);
  date.setDate(new Integer(yyyymmdd[2]));
  date.setHours(new Integer(hhmmss[0]));
  date.setMinutes(new Integer(hhmmss[1]));
  date.setSeconds(new Integer(hhmmss[2]));
  return date;
}","/** 
 * Custom date parser since DateFormat isn't working for our date format.
 * @param dateString
 * @return A date representation of dateString.
 */
private Date parseDate(String dateString){
  if (dateString.length() > 1) {
    Date date=new Date();
    String[] parts=dateString.split(""String_Node_Str"");
    String[] yyyymmdd=parts[0].split(""String_Node_Str"");
    String[] hhmmss=parts[1].split(""String_Node_Str"");
    date.setYear(new Integer(yyyymmdd[0]) - 1900);
    date.setMonth(new Integer(yyyymmdd[1]) - 1);
    date.setDate(new Integer(yyyymmdd[2]));
    date.setHours(new Integer(hhmmss[0]));
    date.setMinutes(new Integer(hhmmss[1]));
    date.setSeconds(new Integer(hhmmss[2]));
    return date;
  }
 else   return null;
}",0.9430199430199432
98449,"/** 
 * Extracts the database table name corresponding to a class.
 * @param className
 * @return
 */
private String extractTableName(String className){
  String tableName=className.replace('.','_');
  if (tableName.contains(""String_Node_Str"")) {
    tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return tableName;
}","private String extractTableName(String className){
  String tableName=className.replace('.','_');
  if (tableName.contains(""String_Node_Str"")) {
    tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return tableName;
}",0.0618556701030927
98450,"/** 
 * Gets the number of records in the database table corresponding to a class name.
 */
private int getRecordCount(String className){
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + className);
    if (rs.next()) {
      int count=rs.getInt(""String_Node_Str"");
      rs.close();
      return count;
    }
 else {
      return 0;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + className);
    e.printStackTrace();
    return -1;
  }
}","private int getRecordCount(String className){
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + className);
    if (rs.next()) {
      int count=rs.getInt(""String_Node_Str"");
      rs.close();
      return count;
    }
 else {
      return 0;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + className);
    e.printStackTrace();
    return -1;
  }
}",0.9061224489795918
98451,"/** 
 * Provides a mapping from id to product for all instances of a class that are stored in the db.
 */
@Override protected Map<Integer,Product> getIdToProductMap(String className){
  Map<Integer,Product> map=new HashMap<Integer,Product>();
  String tableName=extractTableName(className);
  try {
    Statement stmt=conn.createStatement();
    ResultSet rs;
    if (tableExists(tableName)) {
      rs=stmt.executeQuery(""String_Node_Str"" + tableName + ""String_Node_Str"");
      while (rs.next()) {
        Product p=createProductFromResultSet(rs,tableName);
        int id=rs.getInt(""String_Node_Str"");
        map.put(id,p);
      }
    }
  }
 catch (  Exception e) {
  }
  return map;
}","@Override protected Map<Integer,Product> getIdToProductMap(String className){
  Map<Integer,Product> map=new HashMap<Integer,Product>();
  String tableName=extractTableName(className);
  try {
    Statement stmt=conn.createStatement();
    ResultSet rs;
    if (tableExists(tableName)) {
      rs=stmt.executeQuery(""String_Node_Str"" + tableName + ""String_Node_Str"");
      while (rs.next()) {
        Product p=createProductFromResultSet(rs,tableName);
        int id=rs.getInt(""String_Node_Str"");
        map.put(id,p);
      }
    }
  }
 catch (  Exception e) {
  }
  return map;
}",0.9166666666666666
98452,"/** 
 * Sorts a Field array, since Class.getFields returns them in no particular order, and removes duplicate fields that occur when a subclass re-declares a public method.
 */
private Field[] sortFields(Field[] fields){
  Comparator<Field> comp=new FieldComparator();
  List<Field> fieldList=new ArrayList<Field>();
  for (  Field field : fields) {
    boolean add=true;
    for (    Field listField : fieldList) {
      if (field.getName().equals(listField.getName())) {
        add=false;
      }
    }
    if (add) {
      fieldList.add(field);
    }
  }
  Field[] newFields=new Field[fieldList.size()];
  int i=0;
  for (  Field field : fieldList) {
    newFields[i]=field;
    i++;
  }
  Arrays.sort(newFields,comp);
  return newFields;
}","private Field[] sortFields(Field[] fields){
  Comparator<Field> comp=new FieldComparator();
  List<Field> fieldList=new ArrayList<Field>();
  for (  Field field : fields) {
    boolean add=true;
    for (    Field listField : fieldList) {
      if (field.getName().equals(listField.getName())) {
        add=false;
      }
    }
    if (add) {
      fieldList.add(field);
    }
  }
  Field[] newFields=new Field[fieldList.size()];
  int i=0;
  for (  Field field : fieldList) {
    newFields[i]=field;
    i++;
  }
  Arrays.sort(newFields,comp);
  return newFields;
}",0.0549199084668192
98453,"/** 
 * Gets all the products from the given table.
 * @param tableName
 * @return
 */
private List<Product> getProductsFromTable(String tableName){
  List<Product> products=new ArrayList<Product>();
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str"");
    while (rs.next()) {
      Product newProduct=createProductFromResultSet(rs,tableName);
      products.add(newProduct);
    }
    rs.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + tableName);
    e.printStackTrace();
  }
  return products;
}","private List<Product> getProductsFromTable(String tableName){
  List<Product> products=new ArrayList<Product>();
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str"");
    while (rs.next()) {
      Product newProduct=createProductFromResultSet(rs,tableName);
      products.add(newProduct);
    }
    rs.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + tableName);
    e.printStackTrace();
  }
  return products;
}",0.9278008298755188
98454,"/** 
 * Provides a mapping from id to name of all products of a class that are stored in the db.
 */
@Override protected Map<Integer,String> getProductIdsAndNames(String className){
  String tableName=extractTableName(className);
  Map<Integer,String> map=new HashMap<Integer,String>();
  try {
    Statement stmt=conn.createStatement();
    ResultSet rs;
    if (tableExists(tableName)) {
      rs=stmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str"");
      while (rs.next()) {
        map.put(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return map;
}","@Override protected Map<Integer,String> getProductIdsAndNames(String className){
  String tableName=extractTableName(className);
  Map<Integer,String> map=new HashMap<Integer,String>();
  try {
    Statement stmt=conn.createStatement();
    ResultSet rs;
    if (tableExists(tableName)) {
      rs=stmt.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str"");
      while (rs.next()) {
        map.put(rs.getInt(""String_Node_Str""),rs.getString(""String_Node_Str""));
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return map;
}",0.9250185597624352
98455,"/** 
 * Constructs a new product from data in a ResultSet. Reflection is used to get  the appropriate field corresponding to each table column.
 * @param rs
 * @param tableName
 * @return the newly created product.
 */
private Product createProductFromResultSet(ResultSet rs,String tableName){
  Product product=null;
  try {
    ResultSetMetaData metaData=rs.getMetaData();
    int columnCount=metaData.getColumnCount();
    String className=tableName.replace('_','.');
    Class<?> c=JarLoader.getClass(className);
    product=(Product)c.newInstance();
    for (int i=1; i <= columnCount; i++) {
      String columnName=metaData.getColumnName(i);
      Field f=c.getField(columnName);
      Class<?> fieldType=f.getType();
      String fieldTypeName=fieldType.getSimpleName();
      if (fieldTypeName.equals(""String_Node_Str"")) {
        System.out.println(rs.getString(i));
        String dateString=rs.getString(i);
        if (dateString != null) {
          Date date=parseDate(dateString);
          f.set(product,date);
        }
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,new Color(rs.getInt(i)));
      }
 else       if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
        f.set(product,rs.getDouble(i));
      }
 else       if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
        f.set(product,rs.getInt(i));
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,rs.getString(i));
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,rs.getLong(i));
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
  return product;
}","private Product createProductFromResultSet(ResultSet rs,String tableName){
  Product product=null;
  try {
    ResultSetMetaData metaData=rs.getMetaData();
    int columnCount=metaData.getColumnCount();
    String className=tableName.replace('_','.');
    Class<?> c=JarLoader.getClass(className);
    product=(Product)c.newInstance();
    for (int i=1; i <= columnCount; i++) {
      String columnName=metaData.getColumnName(i);
      Field f=c.getField(columnName);
      Class<?> fieldType=f.getType();
      String fieldTypeName=fieldType.getSimpleName();
      if (fieldTypeName.equals(""String_Node_Str"")) {
        System.out.println(rs.getString(i));
        String dateString=rs.getString(i);
        if (dateString != null) {
          Date date=parseDate(dateString);
          f.set(product,date);
        }
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,new Color(rs.getInt(i)));
      }
 else       if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
        f.set(product,rs.getDouble(i));
      }
 else       if (fieldTypeName.equalsIgnoreCase(""String_Node_Str"")) {
        f.set(product,rs.getInt(i));
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,rs.getString(i));
      }
 else       if (fieldTypeName.equals(""String_Node_Str"")) {
        f.set(product,rs.getLong(i));
      }
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return null;
  }
  return product;
}",0.9331297709923664
98456,"/** 
 * Inserts a product into the appropriate DB table.
 * @param className
 * @param product
 * @return Whether or not the insert was successful.
 */
private boolean insertIntoTable(String className,Product product){
  try {
    int originalCount=getRecordCount(className);
    Class<?> c=product.getClass();
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    String sql=""String_Node_Str"" + className + ""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=fields[i].getName();
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=""String_Node_Str"";
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(sql);
    for (int i=0; i < fields.length; i++) {
      if (!fields[i].getName().equals(""String_Node_Str"")) {
        Object obj=fields[i].get(product);
        if (obj != null) {
          setPreparedStatementValues(preparedStatement,fields[i],i + 1,product);
        }
      }
    }
    preparedStatement.addBatch();
    preparedStatement.executeBatch();
    if (getRecordCount(className) == originalCount + 1) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
}","private boolean insertIntoTable(String className,Product product){
  try {
    int originalCount=getRecordCount(className);
    Class<?> c=product.getClass();
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    String sql=""String_Node_Str"" + className + ""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=fields[i].getName();
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=""String_Node_Str"";
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(sql);
    for (int i=0; i < fields.length; i++) {
      if (!fields[i].getName().equals(""String_Node_Str"")) {
        Object obj=fields[i].get(product);
        if (obj != null) {
          setPreparedStatementValues(preparedStatement,fields[i],i + 1,product);
        }
      }
    }
    preparedStatement.addBatch();
    preparedStatement.executeBatch();
    if (getRecordCount(className) == originalCount + 1) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
}",0.9453237410071944
98457,"/** 
 * Loads a particular instance of a product from the database.
 * @param id The id of the desired product
 * @param className The name of the product that we are interested in's class.
 */
@Override protected Product loadProductFromId(int id,String className){
  String tableName=extractTableName(className);
  Product newProduct=null;
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str""+ id+ ""String_Node_Str"");
    if (rs.next()) {
      newProduct=createProductFromResultSet(rs,tableName);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return newProduct;
}","@Override protected Product loadProductFromId(int id,String className){
  String tableName=extractTableName(className);
  Product newProduct=null;
  try {
    Statement statement=conn.createStatement();
    ResultSet rs=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str""+ id+ ""String_Node_Str"");
    if (rs.next()) {
      newProduct=createProductFromResultSet(rs,tableName);
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return newProduct;
}",0.8493788819875776
98458,"private LinkedHashSet<Field> getFieldsInOrder(Class c,Class upperClass){
  LinkedHashSet<Field> fields=new LinkedHashSet<Field>();
  if (c.equals(upperClass)) {
    fields.addAll(Arrays.asList(c.getFields()));
  }
 else {
    fields.addAll(getFieldsInOrder(c.getSuperclass(),upperClass));
    fields.addAll(Arrays.asList(c.getFields()));
  }
  return fields;
}","/** 
 * Get the fields in order so the highest parents fields a are first in the list and so on till the current class, if a subclass overrides a parents field then the parents field is overriden
 * @param c
 * @param upperClass
 * @return
 */
private LinkedHashSet<Field> getFieldsInOrder(Class c,Class upperClass){
  LinkedHashSet<Field> parentFields=new LinkedHashSet<Field>();
  LinkedHashSet<Field> newFields=new LinkedHashSet<Field>();
  if (c.equals(upperClass)) {
    parentFields.addAll(Arrays.asList(c.getFields()));
  }
 else {
    parentFields.addAll(getFieldsInOrder(c.getSuperclass(),upperClass));
    List<Field> currentClassFields=new ArrayList<Field>();
    for (    Field f : c.getFields()) {
      System.out.println(f.getDeclaringClass());
      if (f.getDeclaringClass().equals(c)) {
        currentClassFields.add(f);
      }
    }
    for (    Field f : currentClassFields) {
      for (Iterator<Field> it=parentFields.iterator(); it.hasNext(); ) {
        if (f.getName().equals(it.next().getName())) {
          it.remove();
        }
      }
    }
    parentFields.addAll(currentClassFields);
  }
  return parentFields;
}",0.4193762441937624
98459,"public void commitCache(){
  Map<Product,Status> list=cache.getCache();
  for (  Map.Entry<Product,Status> entry : list.entrySet()) {
    Product p=entry.getKey();
    Status s=entry.getValue();
    if (s == Status.DELETED) {
    }
 else     if (s == Status.UPDATED) {
    }
 else     if (s == Status.NEW) {
      System.out.println(""String_Node_Str"" + p.toString());
      DataAccessor.save(p);
    }
  }
}","public void commitCache(){
  Map<Product,Status> list=cache.getCache();
  for (  Map.Entry<Product,Status> entry : list.entrySet()) {
    Product p=entry.getKey();
    Status s=entry.getValue();
    System.out.println(s.toString() + ""String_Node_Str"" + p.toString());
    if (s == Status.DELETED) {
    }
 else     if (s == Status.UPDATED) {
    }
 else     if (s == Status.NEW) {
      System.out.println(""String_Node_Str"" + p.toString());
      DataAccessor.save(p);
    }
  }
}",0.9177001127395716
98460,"/** 
 * The treeExpanded method is similar to valueChanged - it fires the same classSelected event but seeing as products can't have children it doesn't need to worry about updating the form. The main purpose in this existing is for when products are added and automatically scrolled to. This doesn't could as a valueChanged event, but a treeExpanded event, and it needs to react accordingly.
 */
@Override public void treeExpanded(TreeExpansionEvent event){
  TreePath path=(TreePath)event.getPath();
  if (!(path == null)) {
    NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
    Object o=selectedNode.getStoredObject();
    if (o.getClass().equals(Class.class)) {
      String s=o.toString();
      ActionEvent i=new ActionEvent(model,0,s.substring(s.lastIndexOf(' ') + 1));
      classSelectListener.actionPerformed(i);
    }
  }
}","/** 
 * The treeExpanded method is similar to valueChanged - it fires the same classSelected event but seeing as products can't have children it doesn't need to worry about updating the form. The main purpose in this existing is for when products are added and automatically scrolled to. This doesn't could as a valueChanged event, but a treeExpanded event, and it needs to react accordingly.
 */
@Override public void treeExpanded(TreeExpansionEvent event){
  TreePath path=(TreePath)event.getPath();
  if (!(path == null)) {
    NodeItem selectedNode=getSelectedNode();
    Object o=selectedNode.getStoredObject();
    if (o.getClass().equals(Class.class)) {
      String s=o.toString();
      ActionEvent i=new ActionEvent(model,0,s);
    }
  }
}",0.9236545682102628
98461,"/** 
 * The valueChanged listener is called all the time. The most crucial part is that it accurately distinguishes between class and product selection. If it's a class selection, it fires a classSelectionEvent which is either handled as a DB or cache query. A product selection results in a productSelection event firing which ends up filling in the form in the GUI.
 */
@Override public void valueChanged(TreeSelectionEvent event){
  if (event.isAddedPath()) {
    if (productEditedListener != null && lastSelectedNode != null && (!lastSelectedNode.getClass().equals(Class.class))) {
      System.out.println(""String_Node_Str"");
      ActionEvent edited=new ActionEvent((Product)lastSelectedNode.getStoredObject(),0,""String_Node_Str"");
      productEditedListener.actionPerformed(edited);
    }
    TreePath path=event.getNewLeadSelectionPath();
    NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
    Object o=selectedNode.getStoredObject();
    if (o.getClass().equals(Class.class)) {
      String s=o.toString();
      ActionEvent i=new ActionEvent(model,0,s);
      classSelectListener.actionPerformed(i);
    }
 else {
      ActionEvent s=new ActionEvent((Product)selectedNode.getStoredObject(),0,""String_Node_Str"");
      productSelectedListener.actionPerformed(s);
      lastSelectedNode=selectedNode;
      System.out.println(lastSelectedNode.toString());
    }
  }
}","/** 
 * The valueChanged listener is called all the time. The most crucial part is that it accurately distinguishes between class and product selection. If it's a class selection, it fires a classSelectionEvent which is either handled as a DB or cache query. A product selection results in a productSelection event firing which ends up filling in the form in the GUI.
 */
@Override public void valueChanged(TreeSelectionEvent event){
  if (event.isAddedPath()) {
    if (productEditedListener != null && lastSelectedNode != null && (!lastSelectedNode.getClass().equals(Class.class))) {
      ActionEvent edited=new ActionEvent((Product)lastSelectedNode.getStoredObject(),0,""String_Node_Str"");
      productEditedListener.actionPerformed(edited);
    }
    TreePath path=event.getNewLeadSelectionPath();
    NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
    Object o=selectedNode.getStoredObject();
    if (o.getClass().equals(Class.class)) {
      String s=o.toString();
      ActionEvent i=new ActionEvent(model,0,s);
      classSelectListener.actionPerformed(i);
    }
 else {
      ActionEvent s=new ActionEvent((Product)selectedNode.getStoredObject(),0,""String_Node_Str"");
      productSelectedListener.actionPerformed(s);
      lastSelectedNode=selectedNode;
    }
  }
}",0.9626865671641792
98462,"public ProductTree(){
  super();
  root=new NodeItem(Product.class);
  model=new DefaultTreeModel(root);
  map=new HashMap<String,NodeItem>();
  setModel(model);
  getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  setShowsRootHandles(false);
  addTreeSelectionListener(new TreeSelectionListener(){
    /** 
 * The valueChanged listener is called all the time. The most crucial part is that it accurately distinguishes between class and product selection. If it's a class selection, it fires a classSelectionEvent which is either handled as a DB or cache query. A product selection results in a productSelection event firing which ends up filling in the form in the GUI.
 */
    @Override public void valueChanged(    TreeSelectionEvent event){
      if (event.isAddedPath()) {
        if (productEditedListener != null && lastSelectedNode != null && (!lastSelectedNode.getClass().equals(Class.class))) {
          System.out.println(""String_Node_Str"");
          ActionEvent edited=new ActionEvent((Product)lastSelectedNode.getStoredObject(),0,""String_Node_Str"");
          productEditedListener.actionPerformed(edited);
        }
        TreePath path=event.getNewLeadSelectionPath();
        NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
        Object o=selectedNode.getStoredObject();
        if (o.getClass().equals(Class.class)) {
          String s=o.toString();
          ActionEvent i=new ActionEvent(model,0,s);
          classSelectListener.actionPerformed(i);
        }
 else {
          ActionEvent s=new ActionEvent((Product)selectedNode.getStoredObject(),0,""String_Node_Str"");
          productSelectedListener.actionPerformed(s);
          lastSelectedNode=selectedNode;
          System.out.println(lastSelectedNode.toString());
        }
      }
    }
  }
);
  addTreeExpansionListener(new TreeExpansionListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
    }
    /** 
 * The treeExpanded method is similar to valueChanged - it fires the same classSelected event but seeing as products can't have children it doesn't need to worry about updating the form. The main purpose in this existing is for when products are added and automatically scrolled to. This doesn't could as a valueChanged event, but a treeExpanded event, and it needs to react accordingly.
 */
    @Override public void treeExpanded(    TreeExpansionEvent event){
      TreePath path=(TreePath)event.getPath();
      if (!(path == null)) {
        NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
        Object o=selectedNode.getStoredObject();
        if (o.getClass().equals(Class.class)) {
          String s=o.toString();
          ActionEvent i=new ActionEvent(model,0,s.substring(s.lastIndexOf(' ') + 1));
          classSelectListener.actionPerformed(i);
        }
      }
    }
  }
);
}","public ProductTree(){
  super();
  root=new NodeItem(Product.class);
  model=new DefaultTreeModel(root);
  map=new HashMap<String,NodeItem>();
  setModel(model);
  getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  setShowsRootHandles(false);
  addTreeSelectionListener(new TreeSelectionListener(){
    /** 
 * The valueChanged listener is called all the time. The most crucial part is that it accurately distinguishes between class and product selection. If it's a class selection, it fires a classSelectionEvent which is either handled as a DB or cache query. A product selection results in a productSelection event firing which ends up filling in the form in the GUI.
 */
    @Override public void valueChanged(    TreeSelectionEvent event){
      if (event.isAddedPath()) {
        if (productEditedListener != null && lastSelectedNode != null && (!lastSelectedNode.getClass().equals(Class.class))) {
          ActionEvent edited=new ActionEvent((Product)lastSelectedNode.getStoredObject(),0,""String_Node_Str"");
          productEditedListener.actionPerformed(edited);
        }
        TreePath path=event.getNewLeadSelectionPath();
        NodeItem selectedNode=(NodeItem)path.getLastPathComponent();
        Object o=selectedNode.getStoredObject();
        if (o.getClass().equals(Class.class)) {
          String s=o.toString();
          ActionEvent i=new ActionEvent(model,0,s);
          classSelectListener.actionPerformed(i);
        }
 else {
          ActionEvent s=new ActionEvent((Product)selectedNode.getStoredObject(),0,""String_Node_Str"");
          productSelectedListener.actionPerformed(s);
          lastSelectedNode=selectedNode;
        }
      }
    }
  }
);
  addTreeExpansionListener(new TreeExpansionListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
    }
    /** 
 * The treeExpanded method is similar to valueChanged - it fires the same classSelected event but seeing as products can't have children it doesn't need to worry about updating the form. The main purpose in this existing is for when products are added and automatically scrolled to. This doesn't could as a valueChanged event, but a treeExpanded event, and it needs to react accordingly.
 */
    @Override public void treeExpanded(    TreeExpansionEvent event){
      TreePath path=(TreePath)event.getPath();
      if (!(path == null)) {
        NodeItem selectedNode=getSelectedNode();
        Object o=selectedNode.getStoredObject();
        if (o.getClass().equals(Class.class)) {
          String s=o.toString();
          ActionEvent i=new ActionEvent(model,0,s);
        }
      }
    }
  }
);
}",0.9504520795660036
98463,"public Product(String name,int quantity,Class<?> companionFormClass,int id){
  this.name=name;
  this.quantity=quantity;
  this.companionFormClass=companionFormClass;
  this.id=id;
}","public Product(String name,int quantity,Class<?> companionFormClass){
  this.name=name;
  this.quantity=quantity;
  this.companionFormClass=companionFormClass;
}",0.9387755102040816
98464,"/** 
 * Adds a single product to the list. This will only get called when a brand new product is created via the NEW PRODUCT button on the gui. Thus, only one is created at a time. It marks it with the flag Status.NEW to indicate that it doesn't exist in the database. It makes it into a list that the productAddedListener can pass on. Normally there are multiple products added at a time (say, from the database) so the listener prefers to handle lists.
 * @param p the product to add
 */
public void add(Product p){
  ArrayList<Product> l=new ArrayList<Product>();
  l.add(p);
  list.put(p,Status.NEW);
  if (productsAddedListener != null) {
    productsAddedListener.actionPerformed(new ActionEvent(l,0,null));
  }
}","/** 
 * Adds a single product to the list. This will only get called when a brand new product is created via the NEW PRODUCT button on the gui. Thus, only one is created at a time. It marks it with the flag Status.NEW to indicate that it doesn't exist in the database. It makes it into a list that the productAddedListener (which talks to the view) can pass on. Normally there are multiple products added at a time (say, from the database) so the listener prefers to handle lists.
 * @param p the product to add
 */
public void add(Product p){
  ArrayList<Product> l=new ArrayList<Product>();
  l.add(p);
  list.put(p,Status.NEW);
  if (productsAddedListener != null) {
    productsAddedListener.actionPerformed(new ActionEvent(l,0,null));
  }
}",0.98224043715847
98465,"/** 
 * This method takes a pointer to a product and updates it so it's state matches that of the updatedProduct. A productUpdatedListen is fired to indicate the product that has been updated. It cannot simply replace the product as our whole framework relies on the  assumption that there is a central model and everything else is just a pointer to that. 
 * @param product the product to be updated.
 * @param updatedProduct the target product.
 */
public void update(Product product,Product updatedProduct){
  Field[] fields=product.getClass().getFields();
  for (  Field f : fields) {
    try {
      f.set(product,f.get(updatedProduct));
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (list.get(product) == Status.FRESH) {
  }
  if (productUpdatedListener != null) {
    productUpdatedListener.actionPerformed(new ActionEvent(product,0,null));
  }
  System.out.println(""String_Node_Str"" + product);
}","/** 
 * This method takes a pointer to a product and updates it so it's state matches that of the updatedProduct. A productUpdatedListen is fired to indicate the product that has been updated. It cannot simply replace the product as our whole framework relies on the  assumption that there is a central model and everything else is just a pointer to that. 
 * @param product the product to be updated.
 * @param updatedProduct the target product.
 */
public void update(Product product,Product updatedProduct){
  Field[] fields=product.getClass().getFields();
  for (  Field f : fields) {
    try {
      f.set(product,f.get(updatedProduct));
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (list.get(product) == Status.FRESH) {
    list.put(product,Status.UPDATED);
  }
  if (productUpdatedListener != null) {
    productUpdatedListener.actionPerformed(new ActionEvent(product,0,null));
  }
}",0.9588153632577512
98466,"/** 
 * Identify that a class's products have been loaded from the persistence layer.
 * @param s
 */
public void addToClassesLoaded(String s){
  classesLoaded.add(s);
}","/** 
 * Identify that a class's products have been loaded from the persistence layer.
 * @param s
 */
public void addToClassesLoaded(String s){
  classesLoaded.add(s);
  System.out.println(s);
}",0.931129476584022
98467,"/** 
 * Get the fields in order so the highest parents fields a are first in the list and so on till the current class, if a subclass overrides a parents field then the parents field is overriden
 * @param c
 * @param upperClass
 * @return
 */
private LinkedHashSet<Field> getFieldsInOrder(Class c,Class upperClass){
  LinkedHashSet<Field> parentFields=new LinkedHashSet<Field>();
  LinkedHashSet<Field> newFields=new LinkedHashSet<Field>();
  if (c.equals(upperClass)) {
    parentFields.addAll(Arrays.asList(c.getFields()));
  }
 else {
    parentFields.addAll(getFieldsInOrder(c.getSuperclass(),upperClass));
    List<Field> currentClassFields=new ArrayList<Field>();
    for (    Field f : c.getFields()) {
      System.out.println(f.getDeclaringClass());
      if (f.getDeclaringClass().equals(c)) {
        currentClassFields.add(f);
      }
    }
    for (    Field f : currentClassFields) {
      for (Iterator<Field> it=parentFields.iterator(); it.hasNext(); ) {
        if (f.getName().equals(it.next().getName())) {
          it.remove();
        }
      }
    }
    parentFields.addAll(currentClassFields);
  }
  return parentFields;
}","/** 
 * Get the fields in order so the highest parents fields a are first in the list and so on till the current class, if a subclass overrides a parents field then the parents field is overriden
 * @param c
 * @param upperClass
 * @return
 */
private LinkedHashSet<Field> getFieldsInOrder(Class c,Class upperClass){
  LinkedHashSet<Field> fields=new LinkedHashSet<Field>();
  if (c.equals(upperClass)) {
    fields.addAll(Arrays.asList(c.getFields()));
  }
 else {
    fields.addAll(getFieldsInOrder(c.getSuperclass(),upperClass));
    fields.addAll(Arrays.asList(c.getFields()));
  }
  return fields;
}",0.4477441462021702
98468,"private boolean insertIntoTable(String className,Product product){
  try {
    int originalCount=getRecordCount(className);
    Class<?> c=product.getClass();
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    String sql=""String_Node_Str"" + className + ""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=fields[i].getName();
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=""String_Node_Str"";
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(sql);
    preparedStatement.setInt(1,1);
    for (int i=0; i < fields.length; i++) {
      String data=fields[i].get(product).toString();
      setPreparedStatementValues(preparedStatement,fields[i],i + 1,product);
    }
    preparedStatement.addBatch();
    preparedStatement.executeBatch();
    if (getRecordCount(className) == originalCount + 1) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
}","private boolean insertIntoTable(String className,Product product){
  try {
    int originalCount=getRecordCount(className);
    Class<?> c=product.getClass();
    Field[] fields=c.getFields();
    fields=sortFields(fields);
    String sql=""String_Node_Str"" + className + ""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=fields[i].getName();
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    for (int i=0; i < fields.length; i++) {
      sql+=""String_Node_Str"";
      if (i < fields.length - 1) {
        sql+=""String_Node_Str"";
      }
    }
    sql+=""String_Node_Str"";
    PreparedStatement preparedStatement=conn.prepareStatement(sql);
    preparedStatement.setInt(1,1);
    for (int i=0; i < fields.length; i++) {
      Object obj=fields[i].get(product);
      String data=""String_Node_Str"";
      if (obj != null) {
        data=fields[i].get(product).toString();
      }
      setPreparedStatementValues(preparedStatement,fields[i],i + 1,product);
    }
    preparedStatement.addBatch();
    preparedStatement.executeBatch();
    if (getRecordCount(className) == originalCount + 1) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
    return false;
  }
}",0.9416730621642364
98469,"public static List<Product> load(){
  if (!initialized)   return null;
  List<Product> productList=new ArrayList();
  Jacket purpleJacket=new Jacket();
  purpleJacket.brand=""String_Node_Str"";
  purpleJacket.colour=""String_Node_Str"";
  purpleJacket.isWaterproof=false;
  purpleJacket.name=""String_Node_Str"";
  purpleJacket.size=""String_Node_Str"";
  purpleJacket.quantity=9;
  productList.add(purpleJacket);
  Drink liftPlus=new Drink();
  liftPlus.name=""String_Node_Str"";
  liftPlus.capacity=""String_Node_Str"";
  liftPlus.flavour=""String_Node_Str"";
  liftPlus.quantity=4;
  liftPlus.name=""String_Node_Str"";
  productList.add(liftPlus);
  return productList;
}","public static List<Product> load(){
  if (!initialized)   return null;
  List<Product> productList=new ArrayList();
  Jacket purpleJacket=new Jacket();
  purpleJacket.brand=""String_Node_Str"";
  purpleJacket.colour=""String_Node_Str"";
  purpleJacket.isWaterproof=false;
  purpleJacket.name=""String_Node_Str"";
  purpleJacket.size=""String_Node_Str"";
  purpleJacket.quantity=9;
  productList.add(purpleJacket);
  Drink liftPlus=new Drink();
  liftPlus.name=""String_Node_Str"";
  liftPlus.capacity=""String_Node_Str"";
  liftPlus.flavour=""String_Node_Str"";
  liftPlus.quantity=4;
  productList.add(liftPlus);
  return productList;
}",0.9726775956284152
98470,"/** 
 * Returns the class selected by the user, or null if no class was selected (i.e. the user clicked cancel).
 * @return the selected class.
 */
public Class<? extends Product> getSelectedClass(){
  System.out.println(""String_Node_Str"" + list.getSelectedValue().toString());
  System.out.println(""String_Node_Str"" + list.getSelectedValue().getClass().getName());
  Object selection=list.getSelectedValue();
  if (selection == null) {
    return null;
  }
  return (Class<? extends Product>)list.getSelectedValue().getClass();
}","/** 
 * Returns the class selected by the user, or null if no class was selected (i.e. the user clicked cancel).
 * @return the selected class.
 */
public Class<? extends Product> getSelectedClass(){
  Object selection=list.getSelectedValue();
  if (selection == null) {
    return null;
  }
  return (Class<? extends Product>)selection;
}",0.759493670886076
98471,"/** 
 * The desirable size is mmaximum screen height with minimal width
 */
protected void calculateOptimalScreenSize(){
  DisplayMetrics metrics=new DisplayMetrics();
  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int screenHeight=metrics.heightPixels;
  int screenWidth=metrics.widthPixels;
  List<Size> supportedSizes=camera.getParameters().getSupportedPreviewSizes();
  Iterator<Size> it=supportedSizes.iterator();
  while (it.hasNext()) {
    Size size=it.next();
    Log.v(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (size.height == screenHeight && size.width < screenWidth) {
      Log.i(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
      height=size.height;
      width=size.width;
    }
  }
}","/** 
 * The desirable size is mmaximum screen height with minimal width
 */
protected void calculateOptimalScreenSize(){
  DisplayMetrics metrics=new DisplayMetrics();
  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int screenHeight=metrics.heightPixels;
  int screenWidth=metrics.widthPixels;
  List<Size> supportedSizes=camera.getParameters().getSupportedPreviewSizes();
  Iterator<Size> it=supportedSizes.iterator();
  while (it.hasNext()) {
    Size size=it.next();
    Log.v(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (screenHeight == size.height && screenWidth > size.width) {
      Log.i(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
      height=size.height;
      width=size.width;
    }
 else     if (screenHeight < size.height && screenWidth > size.width && height == 0 && width == 0) {
      height=size.height;
      width=size.width;
    }
  }
}",0.8849270664505673
98472,"/** 
 * The desirable size is mmaximum screen height with minimal width
 */
protected void calculateOptimalScreenSize(){
  DisplayMetrics metrics=new DisplayMetrics();
  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int screenHeight=metrics.heightPixels;
  int screenWidth=metrics.widthPixels;
  List<Size> supportedSizes=camera.getParameters().getSupportedPreviewSizes();
  Iterator<Size> it=supportedSizes.iterator();
  while (it.hasNext()) {
    Size size=it.next();
    Log.v(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (screenHeight == size.height && screenWidth > size.width) {
      Log.i(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
      height=size.height;
      width=size.width;
    }
 else     if (screenHeight < size.height && screenWidth > size.width && height == 0 && width == 0) {
      height=size.height;
      width=size.width;
    }
  }
}","/** 
 * The desirable size is mmaximum screen height with minimal width
 */
protected void calculateOptimalScreenSize(){
  DisplayMetrics metrics=new DisplayMetrics();
  activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
  int screenHeight=metrics.heightPixels;
  int screenWidth=metrics.widthPixels;
  List<Size> supportedSizes=camera.getParameters().getSupportedPreviewSizes();
  Iterator<Size> it=supportedSizes.iterator();
  while (it.hasNext()) {
    Size size=it.next();
    Log.v(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
    if (screenHeight == size.height && screenWidth > size.width) {
      Log.i(AndroidRestClientActivity.APP_NAME,""String_Node_Str"" + size.width + ""String_Node_Str""+ size.height);
      height=size.height;
      width=size.width;
    }
 else     if (screenHeight > size.height && screenWidth > size.width && height == 0 && width == 0) {
      height=size.height;
      width=size.width;
    }
  }
}",0.999003984063745
98473,"/** 
 * Boris algorithm for implementing the electric and magnetic field. The damping is implemented with an linear error O(dt). Warning: the velocity is stored half a time step before of the position.
 * @param p before the update: x(t), v(t-dt/2);after the update: x(t+dt), v(t+dt/2)
 */
public void step(Particle2D p,Force f,double step){
  p.ax=f.getForceX(p) / p.mass;
  p.ay=f.getForceY(p) / p.mass;
  double vxminus=p.vx + f.getPositionComponentofForceX(p) * step / (2.0 * p.mass);
  double vxplus;
  double vxprime;
  double vyminus=p.vy + f.getPositionComponentofForceY(p) * step / (2.0 * p.mass);
  double vyplus;
  double vyprime;
  double t_z=p.charge * f.getBz(p) * step / (2.0 * p.mass);
  double s_z=2 * t_z / (1 + t_z * t_z);
  vxprime=vxminus + vyminus * t_z;
  vyprime=vyminus - vxminus * t_z;
  vxplus=vxminus + vyprime * s_z;
  vyplus=vyminus - vxprime * s_z;
  p.vx=vxplus + f.getPositionComponentofForceX(p) * step / (2.0 * p.mass) + f.getTangentVelocityComponentOfForceX(p) / p.mass;
  p.vy=vyplus + f.getPositionComponentofForceY(p) * step / (2.0 * p.mass) + f.getTangentVelocityComponentOfForceY(p) / p.mass;
  p.x+=p.vx * step;
  p.y+=p.vy * step;
}","/** 
 * Boris algorithm for implementing the electric and magnetic field. The damping is implemented with an linear error O(dt). Warning: the velocity is stored half a time step before of the position.
 * @param p before the update: x(t), v(t-dt/2);after the update: x(t+dt), v(t+dt/2)
 */
public void step(Particle2D p,Force f,double step){
  p.ax=f.getForceX(p) / p.mass;
  p.ay=f.getForceY(p) / p.mass;
  double vxminus=p.vx + f.getPositionComponentofForceX(p) * step / (2.0 * p.mass);
  double vxplus;
  double vxprime;
  double vyminus=p.vy + f.getPositionComponentofForceY(p) * step / (2.0 * p.mass);
  double vyplus;
  double vyprime;
  double t_z=p.charge * f.getBz(p) * step / (2.0 * p.mass);
  double s_z=2 * t_z / (1 + t_z * t_z);
  vxprime=vxminus + vyminus * t_z;
  vyprime=vyminus - vxminus * t_z;
  vxplus=vxminus + vyprime * s_z;
  vyplus=vyminus - vxprime * s_z;
  p.vx=vxplus + f.getPositionComponentofForceX(p) * step / (2.0 * p.mass) + f.getTangentVelocityComponentOfForceX(p) * step / p.mass;
  p.vy=vyplus + f.getPositionComponentofForceY(p) * step / (2.0 * p.mass) + f.getTangentVelocityComponentOfForceY(p) * step / p.mass;
  p.x+=p.vx * step;
  p.y+=p.vy * step;
}",0.994077834179357
98474,"public void check(ArrayList<Particle2D> parlist,Force f,Solver s,double step){
  for (int i=0; i < (parlist.size() - 1); i++) {
    Particle2D p1=(Particle2D)parlist.get(i);
    double x1=Math.sqrt(p1.x * p1.x + p1.y * p1.y);
    for (int k=(i + 1); k < parlist.size(); k++) {
      Particle2D p2=(Particle2D)parlist.get(k);
      double x2=Math.sqrt(p2.x * p2.x + p2.y * p2.y);
      if ((Math.abs(x1 - x2)) <= (p1.radius + p2.radius))       s.complete(p1,f,step);
      s.complete(p2,f,step);
      doCollision(p1,p2);
      s.prepare(p1,f,step);
      s.prepare(p2,f,step);
    }
  }
}","public void check(ArrayList<Particle2D> parlist,Force f,Solver s,double step){
  for (int i=0; i < (parlist.size() - 1); i++) {
    Particle2D p1=(Particle2D)parlist.get(i);
    for (int k=(i + 1); k < parlist.size(); k++) {
      Particle2D p2=(Particle2D)parlist.get(k);
      double distance=Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
      if (distance <= (p1.radius + p2.radius))       s.complete(p1,f,step);
      s.complete(p2,f,step);
      doCollision(p1,p2);
      s.prepare(p1,f,step);
      s.prepare(p2,f,step);
    }
  }
}",0.6926406926406926
98475,"/** 
 * Reflect a particle off the boundaries.
 */
public void check(Particle2D particle){
  if (particle.x < xmin) {
    particle.x+=xmax - xmin;
  }
 else   if (particle.x > xmax) {
    particle.x-=xmax - xmin;
  }
  if (particle.y < ymin) {
    particle.y=ymax - ymin;
  }
 else   if (particle.y > ymax) {
    particle.y-=ymax - ymin;
  }
}","/** 
 * Reflect a particle off the boundaries.
 */
public void check(Particle2D particle){
  if (particle.x < xmin) {
    particle.x+=xmax - xmin;
  }
 else   if (particle.x > xmax) {
    particle.x-=xmax - xmin;
  }
  if (particle.y < ymin) {
    particle.y+=ymax - ymin;
  }
 else   if (particle.y > ymax) {
    particle.y-=ymax - ymin;
  }
}",0.9985443959243084
98476,"/** 
 * Display the particles 
 */
public void paintComponent(Graphics graph1){
  Graphics2D graph=(Graphics2D)graph1;
  setBackground(Color.gray);
  graph.translate(0.0,this.getHeight());
  graph.scale(1.0,-1.0);
  if (!paint_trace) {
    super.paintComponent(graph1);
  }
  if (reset_trace) {
    super.paintComponent(graph1);
    reset_trace=false;
  }
  for (int i=0; i < NUM_PARTICLES; i++) {
    Particle2D par=(Particle2D)parlist.get(i);
    if (par.charge > 0) {
      graph.setColor(Color.blue);
    }
 else {
      graph.setColor(Color.red);
    }
    if (paint_trace) {
      int resize_factor=0;
switch ((int)par.radius) {
case 2:
        resize_factor=1;
      break;
case 5:
    resize_factor=2;
  break;
case 10:
resize_factor=3;
break;
case 15:
resize_factor=5;
break;
}
graph.fillOval((int)par.x,(int)par.y,(int)par.radius / resize_factor,(int)par.radius / resize_factor);
}
 else graph.fillOval((int)par.x,(int)par.y,(int)par.radius,(int)par.radius);
}
}","/** 
 * Display the particles 
 */
public void paintComponent(Graphics graph1){
  Graphics2D graph=(Graphics2D)graph1;
  setBackground(Color.gray);
  graph.translate(0.0,this.getHeight());
  graph.scale(1.0,-1.0);
  if (!paint_trace) {
    super.paintComponent(graph1);
  }
  if (reset_trace) {
    super.paintComponent(graph1);
    reset_trace=false;
  }
  for (int i=0; i < NUM_PARTICLES; i++) {
    Particle2D par=(Particle2D)parlist.get(i);
    if (par.charge > 0) {
      graph.setColor(Color.blue);
    }
 else {
      graph.setColor(Color.red);
    }
    if (paint_trace) {
      int resize_factor=0;
switch ((int)par.radius) {
case 2:
        resize_factor=1;
      break;
case 5:
    resize_factor=3;
  break;
case 10:
resize_factor=3;
break;
case 15:
resize_factor=5;
break;
}
graph.fillOval((int)par.x + (int)par.radius / 2,(int)par.y + (int)par.radius / 2,(int)par.radius / resize_factor,(int)par.radius / resize_factor);
}
 else graph.fillOval((int)par.x,(int)par.y,(int)par.radius,(int)par.radius);
}
}",0.8651911468812877
98477,"public void checkTrace(){
}","public void checkTrace(){
  paint_trace=!paint_trace;
  startAnimation();
}",0.5294117647058824
98478,"/** 
 * Display the particles 
 */
public void paintComponent(Graphics graph1){
  super.paintComponent(graph1);
  Graphics2D graph=(Graphics2D)graph1;
  setBackground(Color.gray);
  graph.translate(0.0,426);
  graph.scale(1.0,-1.0);
  for (int i=0; i < NUM_PARTICLES; i++) {
    Particle2D par=(Particle2D)parlist.get(i);
    if (par.charge > 0) {
      graph.setColor(Color.blue);
    }
 else {
      graph.setColor(Color.red);
    }
    graph.fillOval((int)par.x,(int)par.y,(int)par.radius,(int)par.radius);
  }
}","/** 
 * Display the particles 
 */
public void paintComponent(Graphics graph1){
  Graphics2D graph=(Graphics2D)graph1;
  setBackground(Color.gray);
  graph.translate(0.0,this.getHeight());
  graph.scale(1.0,-1.0);
  if (!paint_trace) {
    super.paintComponent(graph1);
  }
  for (int i=0; i < NUM_PARTICLES; i++) {
    Particle2D par=(Particle2D)parlist.get(i);
    if (par.charge > 0) {
      graph.setColor(Color.blue);
    }
 else {
      graph.setColor(Color.red);
    }
    if (paint_trace)     graph.fillOval((int)par.x,(int)par.y,(int)par.radius / 5,(int)par.radius / 5);
 else     graph.fillOval((int)par.x,(int)par.y,(int)par.radius,(int)par.radius);
  }
}",0.8128704487722269
98479,"public void zerarSistema(){
}","public void zerarSistema(){
  usuariosCadastrados.clear();
  caronasCadastradas.clear();
  sessoesExistentes.clear();
}",0.3918918918918919
98480,"public String cadastrarCarona(String idSecao,String origem,String destino,String data,String hora,String vagas) throws Exception {
  if (idSecao == null || idSecao.equals(""String_Node_Str"")) {
    throw new SessaoInvalidaException();
  }
 else   if (!sessoesExistentes.contains(idSecao)) {
    throw new SessaoInexistenteException();
  }
 else   if (origem == null || origem.equals(""String_Node_Str"")) {
    throw new OrigemInvalidaException();
  }
 else   if (destino == null || destino.equals(""String_Node_Str"")) {
    throw new DestinoInvalidoException();
  }
 else   if (data == null || data.equals(""String_Node_Str"") || !dataEhValida(data)) {
    throw new DataInvalidaException();
  }
 else   if (hora == null || hora.equals(""String_Node_Str"") || !horaEhValida(hora)) {
    throw new HoraInvalidaException();
  }
 else   if (vagas == null || !vagas.matches(""String_Node_Str"")) {
    throw new VagaInvalidaException();
  }
  String[] conjunto=data.split(""String_Node_Str"");
  validar.dataValida(conjunto[0],conjunto[1],conjunto[2]);
  String caronaID=geraID();
  caronasCadastradas.add(new Carona(caronaID,origem,destino,data,hora,vagas));
  return caronaID;
}","public String cadastrarCarona(String idSecao,String origem,String destino,String data,String hora,String vagas) throws Exception {
  if (idSecao == null || idSecao.equals(""String_Node_Str"")) {
    throw new SessaoInvalidaException();
  }
 else   if (!sessoesExistentes.contains(idSecao)) {
    throw new SessaoInexistenteException();
  }
 else   if (origem == null || origem.equals(""String_Node_Str"")) {
    throw new OrigemInvalidaException();
  }
 else   if (destino == null || destino.equals(""String_Node_Str"")) {
    throw new DestinoInvalidoException();
  }
 else   if (data == null || data.equals(""String_Node_Str"") || !validar.estruturaDeData(data)) {
    throw new DataInvalidaException();
  }
 else   if (hora == null || hora.equals(""String_Node_Str"") || !validar.estruturaDeHora(hora)) {
    throw new HoraInvalidaException();
  }
 else   if (vagas == null || !validar.estruturaDeVagas(vagas)) {
    throw new VagaInvalidaException();
  }
  validar.dataValida(data.split(""String_Node_Str""));
  String caronaID=geraID();
  caronasCadastradas.add(new Carona(caronaID,origem,destino,data,hora,vagas));
  return caronaID;
}",0.8535309503051438
98481,"public void encerrarSistema(){
}","public void encerrarSistema(String login){
}",0.8421052631578947
98482,"public Usuario(String login,String nome,String endereco){
}","public Usuario(String login,String nome,String endereco) throws Exception {
  validador3(login,nome,endereco);
  this.login=login;
  this.nome=nome;
  this.endereco=endereco;
}",0.502127659574468
98483,"public void dataValida(String day,String month,String year) throws Exception {
  Calendar calendarioAtual=new GregorianCalendar();
  this.calendario.set(Calendar.MONTH,Integer.parseInt(month) - 1);
  this.calendario.set(Calendar.YEAR,Integer.parseInt(year));
  if (Integer.parseInt(year) < calendarioAtual.get(Calendar.YEAR)) {
    throw new DataInvalidaException();
  }
  if (Integer.parseInt(year) < this.calendario.get(Calendar.YEAR)) {
    throw new DataInvalidaException();
  }
 else   if (Integer.parseInt(day) > this.calendario.getActualMaximum(Calendar.DAY_OF_MONTH)) {
    throw new DataInvalidaException();
  }
}","public void dataValida(String[] data) throws Exception {
  Calendar calendarioAtual=new GregorianCalendar();
  Integer day=Integer.parseInt(data[0]);
  Integer month=Integer.parseInt(data[1]);
  Integer year=Integer.parseInt(data[2]);
  this.calendario.set(Calendar.MONTH,month - 1);
  this.calendario.set(Calendar.YEAR,year);
  if (year < calendarioAtual.get(Calendar.YEAR)) {
    throw new DataInvalidaException();
  }
  if (day > this.calendario.getActualMaximum(Calendar.DAY_OF_MONTH)) {
    throw new DataInvalidaException();
  }
}",0.6925734024179621
98484,"public static void main(String[] args) throws Exception {
  List<String> files=new ArrayList<String>();
  files.add(""String_Node_Str"");
  MeLeva projeto=new MeLeva();
  EasyAcceptFacade eaFacade=new EasyAcceptFacade(projeto,files);
  eaFacade.executeTests();
  System.out.println(eaFacade.getCompleteResults());
}","public static void main(String[] args) throws Exception {
  List<String> files=new ArrayList<String>();
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  files.add(""String_Node_Str"");
  MeLeva projeto=new MeLeva();
  EasyAcceptFacade eaFacade=new EasyAcceptFacade(projeto,files);
  eaFacade.executeTests();
  System.out.println(eaFacade.getCompleteResults());
}",0.830238726790451
98485,"public ViewCourse(){
  id=Long.valueOf(FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get(""String_Node_Str""));
}","public ViewCourse(){
  String getId=FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get(""String_Node_Str"");
  if (getId == null) {
    id=null;
  }
 else {
    id=Long.valueOf(getId);
    reRenderComments=false;
    latestUserComment=0;
  }
}",0.2004773269689737
98486,"public void preRenderView(){
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"");
  if (id != null) {
    try {
      if (course == null) {
        course=CourseVoVwBuilder.getInstance().getCourseVoVwFull(id);
        if (course == null) {
          ((ConfigurableNavigationHandler)FacesContext.getCurrentInstance().getApplication().getNavigationHandler()).performNavigation(""String_Node_Str"");
        }
      }
      if (comments == null) {
        Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"");
        comments=CommentVoVwBuilder.getInstance().getCommentsByCourseId(id);
        Collections.sort(comments,new Comparator<CommentVoVwMedium>(){
          @Override public int compare(          CommentVoVwMedium o1,          CommentVoVwMedium o2){
            int o1Rating=o1.getRating().getPositive() - o1.getRating().getNegative();
            int o2Rating=o2.getRating().getPositive() - o2.getRating().getNegative();
            return (o1Rating > o2Rating ? -1 : (o1Rating == o2Rating ? 0 : 1));
          }
        }
);
      }
    }
 catch (    Exception ex) {
      Config.getInstance().getServiceFactory().getLogService().error(ex.getMessage(),ex);
      ((ConfigurableNavigationHandler)FacesContext.getCurrentInstance().getApplication().getNavigationHandler()).performNavigation(""String_Node_Str"");
    }
  }
}","public void preRenderView(){
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"");
  if (id != null) {
    try {
      course=CourseVoVwBuilder.getInstance().getCourseVoVwFull(id);
      if (course == null) {
        redirectNotFound();
      }
      if (comments == null || isReRenderComments()) {
        comments=CommentVoVwBuilder.getInstance().getCommentsByCourseId(id);
        Collections.sort(comments,new Comparator<CommentVoVwMedium>(){
          @Override public int compare(          CommentVoVwMedium o1,          CommentVoVwMedium o2){
            int o1Rating=o1.getRating().getPositive() - o1.getRating().getNegative();
            int o2Rating=o2.getRating().getPositive() - o2.getRating().getNegative();
            return (o1Rating > o2Rating ? -1 : (o1Rating == o2Rating ? 0 : 1));
          }
        }
);
        setReRenderComments(false);
      }
    }
 catch (    Exception ex) {
      Config.getInstance().getServiceFactory().getLogService().error(ex.getMessage(),ex);
      redirectNotFound();
    }
  }
 else {
    redirectNotFound();
  }
}",0.7077294685990339
98487,"private <T extends CommentVoVwMedium>List<T> getListOfCommentVoVwMedium(List<CommentVo> source,List<T> destination){
  HashMap<Long,UserVoVwSmall> users=new HashMap<Long,UserVoVwSmall>();
  UserVoVwSmall anonymousUser=UserVoVwBuilder.ANONYMOUS_USER;
  CommentsFacade commentsFacade=facadeFactory.getCommentsFacade();
  UserVoVwSmall commentUser;
  CommentVo commentVo;
  CommentVoVwMedium commentVoVwMedium;
  int listSize=source.size();
  for (int i=0; i < listSize; i++) {
    commentVo=source.get(i);
    if (commentVo.isAnonymous()) {
      commentUser=anonymousUser;
    }
 else {
      long userId=commentVo.getUserId();
      if (!users.containsKey(userId)) {
        users.put(userId,UserVoVwBuilder.getInstance().getUser(userId));
      }
      commentUser=users.get(userId);
    }
    commentVoVwMedium=destination.get(i);
    SimpleDateFormat dateFormatGmt=new SimpleDateFormat(""String_Node_Str"");
    dateFormatGmt.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    try {
      commentVo.setDate(dateFormatGmt.parse(dateFormatGmt.format(commentVo.getDate())));
    }
 catch (    ParseException ex) {
      Config.getInstance().getServiceFactory().getLogService().error(""String_Node_Str"",ex);
    }
    commentVoVwMedium.setVo(commentVo);
    commentVoVwMedium.setUser(commentUser);
    commentVoVwMedium.setRating(commentsFacade.getCommentRatingSummary(commentVo.getId()));
  }
  return destination;
}","private <T extends CommentVoVwMedium>List<T> getListOfCommentVoVwMedium(List<CommentVo> source,List<T> destination){
  HashMap<Long,UserVoVwSmall> users=new HashMap<Long,UserVoVwSmall>();
  UserVoVwSmall anonymousUser=UserVoVwBuilder.ANONYMOUS_USER;
  CommentsFacade commentsFacade=facadeFactory.getCommentsFacade();
  UserVoVwSmall commentUser;
  CommentVo commentVo;
  CommentVoVwMedium commentVoVwMedium;
  int listSize=source.size();
  for (int i=0; i < listSize; i++) {
    commentVo=source.get(i);
    if (commentVo.isAnonymous()) {
      anonymousUser.setId(commentVo.getUserId());
      commentUser=anonymousUser;
    }
 else {
      long userId=commentVo.getUserId();
      if (!users.containsKey(userId)) {
        users.put(userId,UserVoVwBuilder.getInstance().getUser(userId));
      }
      commentUser=users.get(userId);
    }
    commentVoVwMedium=destination.get(i);
    SimpleDateFormat dateFormatGmt=new SimpleDateFormat(""String_Node_Str"");
    dateFormatGmt.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    try {
      commentVo.setDate(dateFormatGmt.parse(dateFormatGmt.format(commentVo.getDate())));
    }
 catch (    ParseException ex) {
      Config.getInstance().getServiceFactory().getLogService().error(""String_Node_Str"",ex);
    }
    commentVoVwMedium.setVo(commentVo);
    commentVoVwMedium.setUser(commentUser);
    commentVoVwMedium.setRating(commentsFacade.getCommentRatingSummary(commentVo.getId()));
  }
  return destination;
}",0.9826989619377162
98488,"public void deleteComment(long commentId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getCommentsService().delete(entityManager,commentId);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkExceptionAndRollback(entityManager,transaction,exception,DataBaseException.class);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}","public void deleteComment(long commentId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getCommentsService().delete(entityManager,commentId);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkExceptionAndRollback(entityManager,transaction,exception,DataBaseException.class);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.9865125240847784
98489,"public BinaryRatingVo getCommentRatingByUserId(long commentId,long userId){
  EntityManager entityManager=null;
  BinaryRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    rating=getServiceFactory().getCommentRatingService().getByEvaluatedObjectAndUserId(entityManager,commentId,userId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}","public BinaryRatingVo getCommentRatingByUserId(long commentId,long userId){
  EntityManager entityManager=null;
  BinaryRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    rating=getServiceFactory().getCommentRatingService().getByEvaluatedObjectAndUserId(entityManager,commentId,userId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}",0.9568755085435312
98490,"public List<CommentVo> getCommentsByCourseId(long courseId){
  EntityManager entityManager=null;
  List<CommentVo> commentVos;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().getCommentsService().getByCourseId(entityManager,courseId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return commentVos;
}","public List<CommentVo> getCommentsByCourseId(long courseId){
  EntityManager entityManager=null;
  List<CommentVo> commentVos;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().getCommentsService().getByCourseId(entityManager,courseId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return commentVos;
}",0.95419187554019
98491,"public BinaryRatingVo rateComment(long commentId,long userId,int value) throws MultipleMessagesException, DuplicityException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  BinaryRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    BinaryRatingVo existingRating=getServiceFactory().getCommentRatingService().getByEvaluatedObjectAndUserId(entityManager,commentId,userId);
    transaction=entityManager.getTransaction();
    transaction.begin();
    if (existingRating == null) {
      BinaryRatingVo vo=new BinaryRatingVo();
      vo.setEvaluatedObjectId(commentId);
      vo.setUserId(userId);
      vo.setValue(value);
      rating=getServiceFactory().getCommentRatingService().create(entityManager,vo);
    }
 else {
      existingRating.setValue(value);
      rating=getServiceFactory().getCommentRatingService().update(entityManager,existingRating);
    }
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}","public BinaryRatingVo rateComment(long commentId,long userId,int value) throws MultipleMessagesException, DuplicityException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  BinaryRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    BinaryRatingVo existingRating=getServiceFactory().getCommentRatingService().getByEvaluatedObjectAndUserId(entityManager,commentId,userId);
    transaction=entityManager.getTransaction();
    transaction.begin();
    if (existingRating == null) {
      BinaryRatingVo vo=new BinaryRatingVo();
      vo.setEvaluatedObjectId(commentId);
      vo.setUserId(userId);
      vo.setValue(value);
      rating=getServiceFactory().getCommentRatingService().create(entityManager,vo);
    }
 else {
      existingRating.setValue(value);
      rating=getServiceFactory().getCommentRatingService().update(entityManager,existingRating);
    }
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}",0.9876977152899824
98492,"public CommentVo createComment(CommentVo vo) throws MultipleMessagesException, MaxCommentsLimitReachedException, DuplicityException {
  CommentVo createdVo=null;
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    createdVo=getServiceFactory().getCommentsService().create(entityManager,vo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkException(exception,MaxCommentsLimitReachedException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return createdVo;
}","public CommentVo createComment(CommentVo vo) throws MultipleMessagesException, MaxCommentsLimitReachedException, DuplicityException {
  CommentVo createdVo=null;
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    createdVo=getServiceFactory().getCommentsService().create(entityManager,vo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkException(entityManager,exception,MaxCommentsLimitReachedException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return createdVo;
}",0.9765213224724484
98493,"public RatingSummaryVo getCommentRatingSummary(long commentId){
  EntityManager entityManager=null;
  RatingSummaryVo summary=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    summary=getServiceFactory().getCommentRatingService().getSummary(entityManager,commentId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return summary;
}","public RatingSummaryVo getCommentRatingSummary(long commentId){
  EntityManager entityManager=null;
  RatingSummaryVo summary=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    summary=getServiceFactory().getCommentRatingService().getSummary(entityManager,commentId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return summary;
}",0.954349698535745
98494,"public List<CommentVo> getLastComments(int maxResults){
  EntityManager entityManager=null;
  List<CommentVo> commentVos;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().getCommentsService().getLastComments(entityManager,maxResults);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return commentVos;
}","public List<CommentVo> getLastComments(int maxResults){
  EntityManager entityManager=null;
  List<CommentVo> commentVos;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().getCommentsService().getLastComments(entityManager,maxResults);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return commentVos;
}",0.954112554112554
98495,"public CourseVo createCourse(long professorId,long subjectId,long periodId) throws MultipleMessagesException, DuplicityException {
  CourseVo courseVo=null;
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    courseVo=new CourseVo();
    courseVo.setPeriodId(periodId);
    courseVo.setProfessorId(professorId);
    courseVo.setSubjectId(subjectId);
    courseVo.setRatingCount(0L);
    courseVo.setRatingAverage(0.0);
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    courseVo=getServiceFactory().getCoursesService().create(entityManager,courseVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVo;
}","public CourseVo createCourse(long professorId,long subjectId,long periodId) throws MultipleMessagesException, DuplicityException {
  CourseVo courseVo=null;
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    courseVo=new CourseVo();
    courseVo.setPeriodId(periodId);
    courseVo.setProfessorId(professorId);
    courseVo.setSubjectId(subjectId);
    courseVo.setRatingCount(0L);
    courseVo.setRatingAverage(0.0);
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    courseVo=getServiceFactory().getCoursesService().create(entityManager,courseVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVo;
}",0.9849720910261917
98496,"/** 
 * Searches for courses by professor and subject name that contain the string specified in the query parameter. If the query is empty or full of spaces, the results will be empty. (Because of the overhead of bringing ALL the information from database and translating it to the proper format).
 * @param query String to be searched among the professors and subjectsnames.
 * @return A list of CourseVoVwFull with the information of the foundcourses.
 */
public List<Long> search(String query,int totalHints){
  EntityManager entityManager=null;
  List<Long> resultList=new ArrayList<Long>();
  if (query != null && !query.isEmpty()) {
    try {
      entityManager=getEntityManagerFactory().createEntityManager();
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getCourseSearch());
      resultList=getServiceFactory().getCoursesService().search(query,totalHints);
      if (!resultList.isEmpty()) {
        return resultList;
      }
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getFuzzyCourseSearch());
      return getServiceFactory().getCoursesService().search(query,totalHints);
    }
 catch (    Exception e) {
      getServiceFactory().getLogService().error(e.getMessage(),e);
      throw new RuntimeException(e);
    }
 finally {
      FacadesHelper.closeEntityManager(entityManager);
    }
  }
  return resultList;
}","/** 
 * Searches for courses by professor and subject name that contain the string specified in the query parameter. If the query is empty or full of spaces, the results will be empty. (Because of the overhead of bringing ALL the information from database and translating it to the proper format).
 * @param query String to be searched among the professors and subjectsnames.
 * @return A list of CourseVoVwFull with the information of the foundcourses.
 */
public List<Long> search(String query,int totalHints){
  List<Long> resultList=new ArrayList<Long>();
  if (query != null && !query.isEmpty()) {
    try {
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getCourseSearch());
      resultList=getServiceFactory().getCoursesService().search(query,totalHints);
      if (!resultList.isEmpty()) {
        return resultList;
      }
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getFuzzyCourseSearch());
      return getServiceFactory().getCoursesService().search(query,totalHints);
    }
 catch (    Exception e) {
      getServiceFactory().getLogService().error(e.getMessage(),e);
      throw new RuntimeException(e);
    }
  }
  return resultList;
}",0.915228231683928
98497,"public CourseRatingVo getCourseRatingByUserId(long courseId,long userId){
  EntityManager entityManager=null;
  CourseRatingVo courseRatingVo=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    courseRatingVo=getServiceFactory().getCourseRatingsService().getByCourseIdAndUserId(entityManager,courseId,userId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseRatingVo;
}","public CourseRatingVo getCourseRatingByUserId(long courseId,long userId){
  EntityManager entityManager=null;
  CourseRatingVo courseRatingVo=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    courseRatingVo=getServiceFactory().getCourseRatingsService().getByCourseIdAndUserId(entityManager,courseId,userId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseRatingVo;
}",0.9578361177406524
98498,"public void deleteCourse(long courseId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getCoursesService().delete(entityManager,courseId);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkExceptionAndRollback(entityManager,transaction,exception,DataBaseException.class);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}","public void deleteCourse(long courseId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getCoursesService().delete(entityManager,courseId);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkExceptionAndRollback(entityManager,transaction,exception,DataBaseException.class);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.986442866365397
98499,"/** 
 * @param professorId
 * @return If there is no professor associated with the provided id an emptylist will be returned
 */
public List<CourseVoFull> getByProfessorId(long professorId){
  EntityManager entityManager=null;
  List<CourseVoFull> coursesList=new ArrayList<CourseVoFull>();
  HashMap<Long,SubjectVo> subjectsVo=new HashMap<Long,SubjectVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> courses=getServiceFactory().getCoursesService().getByProfessorId(entityManager,professorId);
    ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,professorId);
    for (    CourseVo courseVo : courses) {
      if (!subjectsVo.containsKey(courseVo.getSubjectId())) {
        SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,courseVo.getSubjectId());
        subjectsVo.put(subjectVo.getId(),subjectVo);
      }
      coursesList.add(new CourseVoFull(courseVo,subjectsVo.get(courseVo.getSubjectId()),professorVo));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return coursesList;
}","/** 
 * @param professorId
 * @return If there is no professor associated with the provided id an emptylist will be returned
 */
public List<CourseVoFull> getByProfessorId(long professorId){
  EntityManager entityManager=null;
  List<CourseVoFull> coursesList=new ArrayList<CourseVoFull>();
  HashMap<Long,SubjectVo> subjectsVo=new HashMap<Long,SubjectVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> courses=getServiceFactory().getCoursesService().getByProfessorId(entityManager,professorId);
    ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,professorId);
    for (    CourseVo courseVo : courses) {
      if (!subjectsVo.containsKey(courseVo.getSubjectId())) {
        SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,courseVo.getSubjectId());
        subjectsVo.put(subjectVo.getId(),subjectVo);
      }
      coursesList.add(new CourseVoFull(courseVo,subjectsVo.get(courseVo.getSubjectId()),professorVo));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return coursesList;
}",0.9799621928166352
98500,"public List<CourseVoFull> getSimilarCourses(String professorName,String subjectName,Long periodId){
  EntityManager entityManager=null;
  List<CourseVoFull> courseVoFulls=new ArrayList<CourseVoFull>();
  HashMap<Long,ProfessorVo> professorsVos=new HashMap<Long,ProfessorVo>();
  HashMap<Long,SubjectVo> subjectsVos=new HashMap<Long,SubjectVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> similarCourses=getServiceFactory().getCoursesService().getSimilarCourses(entityManager,professorName,subjectName,periodId);
    for (    CourseVo courseVo : similarCourses) {
      if (!professorsVos.containsKey(courseVo.getProfessorId())) {
        ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,courseVo.getProfessorId());
        professorsVos.put(professorVo.getId(),professorVo);
      }
      if (!subjectsVos.containsKey(courseVo.getSubjectId())) {
        SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,courseVo.getSubjectId());
        subjectsVos.put(subjectVo.getId(),subjectVo);
      }
      courseVoFulls.add(new CourseVoFull(courseVo,subjectsVos.get(courseVo.getSubjectId()),professorsVos.get(courseVo.getProfessorId())));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFulls;
}","public List<CourseVoFull> getSimilarCourses(String professorName,String subjectName,Long periodId){
  EntityManager entityManager=null;
  List<CourseVoFull> courseVoFulls=new ArrayList<CourseVoFull>();
  HashMap<Long,ProfessorVo> professorsVos=new HashMap<Long,ProfessorVo>();
  HashMap<Long,SubjectVo> subjectsVos=new HashMap<Long,SubjectVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> similarCourses=getServiceFactory().getCoursesService().getSimilarCourses(entityManager,professorName,subjectName,periodId);
    for (    CourseVo courseVo : similarCourses) {
      if (!professorsVos.containsKey(courseVo.getProfessorId())) {
        ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,courseVo.getProfessorId());
        professorsVos.put(professorVo.getId(),professorVo);
      }
      if (!subjectsVos.containsKey(courseVo.getSubjectId())) {
        SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,courseVo.getSubjectId());
        subjectsVos.put(subjectVo.getId(),subjectVo);
      }
      courseVoFulls.add(new CourseVoFull(courseVo,subjectsVos.get(courseVo.getSubjectId()),professorsVos.get(courseVo.getProfessorId())));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFulls;
}",0.9827977929243752
98501,"public CourseVoFull getCourse(long courseId){
  EntityManager entityManager=null;
  CourseVoFull courseVoFull=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    CourseVo vo=getServiceFactory().getCoursesService().read(entityManager,courseId);
    if (vo == null) {
      return null;
    }
    SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,vo.getSubjectId());
    ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,vo.getProfessorId());
    courseVoFull=new CourseVoFull(vo,subjectVo,professorVo);
  }
 catch (  Exception e) {
    getServiceFactory().getLogService().error(e.getMessage(),e);
    throw new RuntimeException(e);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFull;
}","public CourseVoFull getCourse(long courseId){
  EntityManager entityManager=null;
  CourseVoFull courseVoFull=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    CourseVo vo=getServiceFactory().getCoursesService().read(entityManager,courseId);
    if (vo == null) {
      return null;
    }
    SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,vo.getSubjectId());
    ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,vo.getProfessorId());
    courseVoFull=new CourseVoFull(vo,subjectVo,professorVo);
  }
 catch (  Exception e) {
    getServiceFactory().getLogService().error(e.getMessage(),e);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(e);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFull;
}",0.9689149560117302
98502,"public CourseRatingVo rateCourse(long courseId,long userId,float value) throws MultipleMessagesException, DuplicityException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  CourseRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    CourseRatingVo existingRating=getServiceFactory().getCourseRatingsService().getByCourseIdAndUserId(entityManager,courseId,userId);
    if (value == 0.0) {
      if (existingRating != null) {
        transaction=entityManager.getTransaction();
        transaction.begin();
        getServiceFactory().getCourseRatingsService().delete(entityManager,existingRating.getId());
        transaction.commit();
      }
    }
 else {
      transaction=entityManager.getTransaction();
      transaction.begin();
      if (existingRating == null) {
        CourseRatingVo vo=new CourseRatingVo();
        vo.setCourseId(courseId);
        vo.setUserId(userId);
        vo.setValue(value);
        rating=getServiceFactory().getCourseRatingsService().create(entityManager,vo);
      }
 else {
        existingRating.setValue(value);
        rating=getServiceFactory().getCourseRatingsService().update(entityManager,existingRating);
      }
      transaction.commit();
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}","public CourseRatingVo rateCourse(long courseId,long userId,float value) throws MultipleMessagesException, DuplicityException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  CourseRatingVo rating=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    CourseRatingVo existingRating=getServiceFactory().getCourseRatingsService().getByCourseIdAndUserId(entityManager,courseId,userId);
    if (value == 0.0) {
      if (existingRating != null) {
        transaction=entityManager.getTransaction();
        transaction.begin();
        getServiceFactory().getCourseRatingsService().delete(entityManager,existingRating.getId());
        transaction.commit();
      }
    }
 else {
      transaction=entityManager.getTransaction();
      transaction.begin();
      if (existingRating == null) {
        CourseRatingVo vo=new CourseRatingVo();
        vo.setCourseId(courseId);
        vo.setUserId(userId);
        vo.setValue(value);
        rating=getServiceFactory().getCourseRatingsService().create(entityManager,vo);
      }
 else {
        existingRating.setValue(value);
        rating=getServiceFactory().getCourseRatingsService().update(entityManager,existingRating);
      }
      transaction.commit();
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return rating;
}",0.9898814686325528
98503,"public List<CourseVoFull> getBySubjectId(long subjectId){
  EntityManager entityManager=null;
  List<CourseVoFull> courseVoFulls=new ArrayList<CourseVoFull>();
  HashMap<Long,ProfessorVo> professorsVo=new HashMap<Long,ProfessorVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> courseVos=getServiceFactory().getCoursesService().getBySubjectId(entityManager,subjectId);
    SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,subjectId);
    for (    CourseVo courseVo : courseVos) {
      if (!professorsVo.containsKey(courseVo.getProfessorId())) {
        ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,courseVo.getProfessorId());
        professorsVo.put(professorVo.getId(),professorVo);
      }
      courseVoFulls.add(new CourseVoFull(courseVo,subjectVo,professorsVo.get(courseVo.getProfessorId())));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFulls;
}","public List<CourseVoFull> getBySubjectId(long subjectId){
  EntityManager entityManager=null;
  List<CourseVoFull> courseVoFulls=new ArrayList<CourseVoFull>();
  HashMap<Long,ProfessorVo> professorsVo=new HashMap<Long,ProfessorVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    List<CourseVo> courseVos=getServiceFactory().getCoursesService().getBySubjectId(entityManager,subjectId);
    SubjectVo subjectVo=getServiceFactory().getSubjectsService().read(entityManager,subjectId);
    for (    CourseVo courseVo : courseVos) {
      if (!professorsVo.containsKey(courseVo.getProfessorId())) {
        ProfessorVo professorVo=getServiceFactory().getProfessorsService().read(entityManager,courseVo.getProfessorId());
        professorsVo.put(professorVo.getId(),professorVo);
      }
      courseVoFulls.add(new CourseVoFull(courseVo,subjectVo,professorsVo.get(courseVo.getProfessorId())));
    }
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return courseVoFulls;
}",0.9781623403378656
98504,"public List<FeedbackVo> getAllFeedbacks(int firstResult,int maxResults){
  List<FeedbackVo> list=null;
  EntityManager em=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    list=getServiceFactory().getFeedbacksService().getAllFeedbacks(em,firstResult,maxResults);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(em);
  }
  return list;
}","public List<FeedbackVo> getAllFeedbacks(int firstResult,int maxResults){
  List<FeedbackVo> list=null;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    list=getServiceFactory().getFeedbacksService().getAllFeedbacks(entityManager,firstResult,maxResults);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return list;
}",0.9037580201649864
98505,"public FeedbackTypeVo getFeedbackType(long feedbackTypeId){
  EntityManager em=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbackTypesService().read(em,feedbackTypeId);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(em);
  }
}","public FeedbackTypeVo getFeedbackType(long feedbackTypeId){
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbackTypesService().read(entityManager,feedbackTypeId);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.8893572181243414
98506,"public FeedbackVo createFeedback(long feedbackType,String feedbackcontent,Date date) throws MultipleMessagesException, DuplicityException {
  FeedbackVo feedbackVo=new FeedbackVo();
  feedbackVo.setContent(feedbackcontent);
  feedbackVo.setDate(date);
  feedbackVo.setFeedbackTypeId(feedbackType);
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    feedbackVo=getServiceFactory().getFeedbacksService().create(entityManager,feedbackVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackVo;
}","public FeedbackVo createFeedback(long feedbackType,String feedbackcontent,Date date) throws MultipleMessagesException, DuplicityException {
  FeedbackVo feedbackVo=new FeedbackVo();
  feedbackVo.setContent(feedbackcontent);
  feedbackVo.setDate(date);
  feedbackVo.setFeedbackTypeId(feedbackType);
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    feedbackVo=getServiceFactory().getFeedbacksService().create(entityManager,feedbackVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackVo;
}",0.9840836743974534
98507,"public long countAllFeedbacks(){
  EntityManager em=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbacksService().countAllFeedbacks(em);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(em);
  }
}","public long countAllFeedbacks(){
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbacksService().countAllFeedbacks(entityManager);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.4756511891279728
98508,"public List<FeedbackVo> getFeedbacksByFeedbackType(long feedbackTypeId,int firstResult,int maxResults){
  List<FeedbackVo> feedbackVos=null;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    feedbackVos=getServiceFactory().getFeedbacksService().getFeedbacksByFeedbackType(entityManager,feedbackTypeId,firstResult,maxResults);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackVos;
}","public List<FeedbackVo> getFeedbacksByFeedbackType(long feedbackTypeId,int firstResult,int maxResults){
  List<FeedbackVo> feedbackVos=null;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    feedbackVos=getServiceFactory().getFeedbacksService().getFeedbacksByFeedbackType(entityManager,feedbackTypeId,firstResult,maxResults);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackVos;
}",0.9606533036377134
98509,"public long countFeedbacksByFeedbackType(long feedbackTypeId){
  EntityManager em=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbacksService().countFeedbacksByTypeId(em,feedbackTypeId);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(em);
  }
}","public long countFeedbacksByFeedbackType(long feedbackTypeId){
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    return getServiceFactory().getFeedbacksService().countFeedbacksByTypeId(entityManager,feedbackTypeId);
  }
 catch (  Exception ex) {
    getServiceFactory().getLogService().error(ex.getMessage(),ex);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(ex);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.8931841302136317
98510,"public List<FeedbackTypeVo> getFeedbackTypes(){
  List<FeedbackTypeVo> feedbackTypeVos=null;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    feedbackTypeVos=getServiceFactory().getFeedbackTypesService().list(entityManager);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackTypeVos;
}","public List<FeedbackTypeVo> getFeedbackTypes(){
  List<FeedbackTypeVo> feedbackTypeVos=null;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    feedbackTypeVos=getServiceFactory().getFeedbackTypesService().list(entityManager);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return feedbackTypeVos;
}",0.954112554112554
98511,"public List<PeriodVo> listPeriods(){
  List<PeriodVo> periodVos;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    periodVos=getServiceFactory().getPeriodsService().list(entityManager);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return periodVos;
}","public List<PeriodVo> listPeriods(){
  List<PeriodVo> periodVos;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    periodVos=getServiceFactory().getPeriodsService().list(entityManager);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return periodVos;
}",0.9508804448563484
98512,"/** 
 * Persist a new Period with the specified year and semester.
 * @param em entity manager
 * @param year
 * @param semester
 * @return Returns null if there is a problem while persisting (logs allerrors) and throws an exception if data isn't valid.
 */
public PeriodVo createPeriod(int year,int semester) throws MultipleMessagesException, DataBaseException, DuplicityException {
  PeriodVo periodVo=new PeriodVo();
  periodVo.setYear(year);
  periodVo.setSemester(semester);
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    periodVo=getServiceFactory().getPeriodsService().create(entityManager,periodVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return periodVo;
}","/** 
 * Persist a new Period with the specified year and semester.
 * @param em entity manager
 * @param year
 * @param semester
 * @return Returns null if there is a problem while persisting (logs allerrors) and throws an exception if data isn't valid.
 */
public PeriodVo createPeriod(int year,int semester) throws MultipleMessagesException, DataBaseException, DuplicityException {
  PeriodVo periodVo=new PeriodVo();
  periodVo.setYear(year);
  periodVo.setSemester(semester);
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    periodVo=getServiceFactory().getPeriodsService().create(entityManager,periodVo);
    transaction.commit();
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.checkException(entityManager,exception,MultipleMessagesException.class);
    FacadesHelper.checkDuplicityViolation(entityManager,transaction,exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return periodVo;
}",0.9862583431488026
98513,"public void deletePeriod(long periodId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getPeriodsService().delete(entityManager,periodId);
    transaction.commit();
  }
 catch (  DataBaseException exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.rollbackTransaction(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}","public void deletePeriod(long periodId) throws DataBaseException {
  EntityManager entityManager=null;
  EntityTransaction transaction=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    transaction=entityManager.getTransaction();
    transaction.begin();
    getServiceFactory().getPeriodsService().delete(entityManager,periodId);
    transaction.commit();
  }
 catch (  DataBaseException exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    FacadesHelper.rollbackTransactionAndCloseEntityManager(entityManager,transaction,exception);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
}",0.984478935698448
98514,"public PeriodVo getPeriod(long periodId){
  EntityManager entityManager=null;
  PeriodVo period=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    period=getServiceFactory().getPeriodsService().read(entityManager,periodId);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return period;
}","public PeriodVo getPeriod(long periodId){
  EntityManager entityManager=null;
  PeriodVo period=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    period=getServiceFactory().getPeriodsService().read(entityManager,periodId);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    FacadesHelper.closeEntityManager(entityManager);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelper.closeEntityManager(entityManager);
  }
  return period;
}",0.9512419503219872
98515,"/** 
 * Searches for courses by professor and subject name that contain the string specified in the query parameter. If the query is empty or full of spaces, the results will be empty. (Because of the overhead of bringing ALL the information from database and translating it to the proper format).
 * @param query String to be searched among the professors and subjectsnames.
 * @return A list of CourseVoVwFull with the information of the foundcourses.
 */
public List<Long> search(String query,int totalHints){
  List<Long> resultList=new ArrayList<Long>();
  if (query != null && !query.isEmpty()) {
    try {
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getCourseSearch());
      resultList=getServiceFactory().getCoursesService().search(query,totalHints);
      if (!resultList.isEmpty()) {
        return resultList;
      }
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getFuzzyCourseSearch());
      return getServiceFactory().getCoursesService().search(query,totalHints);
    }
 catch (    Exception e) {
      getServiceFactory().getLogService().error(e.getMessage(),e);
      throw new RuntimeException(e);
    }
  }
  return resultList;
}","/** 
 * Searches for courses by professor and subject name that contain the string specified in the query parameter. If the query is empty or full of spaces, the results will be empty. (Because of the overhead of bringing ALL the information from database and translating it to the proper format).
 * @param query String to be searched among the professors and subjectsnames.
 * @return A list of CourseVoVwFull with the information of the foundcourses.
 */
public List<Long> search(String query,int totalHints){
  List<Long> resultList=new ArrayList<Long>();
  if (query != null && !query.isEmpty()) {
    try {
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getCourseSearch());
      resultList=getServiceFactory().getCoursesService().search(query,totalHints);
      if (!resultList.isEmpty()) {
        return resultList;
      }
      getServiceFactory().getCoursesService().setSearch(SearchBehaviorFactory.getFuzzyCourseSearch());
      return getServiceFactory().getCoursesService().search(query,totalHints);
    }
 catch (    Exception exception) {
      getServiceFactory().getLogService().error(exception.getMessage(),exception);
      FacadesHelper.checkException(exception,ExternalServiceException.class);
      throw new RuntimeException(exception);
    }
  }
  return resultList;
}",0.9433070866141732
98516,"public int getSearchCount(String query,int maxitems){
  return facadeFactory.getCoursesFacade().search(query,maxitems).size();
}","public int getSearchCount(String query,int maxitems){
  return getSearchCourses(query,maxitems).size();
}",0.8497854077253219
98517,"public List<CourseListVoVwSmall> getSearchResults(String query,int itemsByPage,int totalHints){
  Date beforeSearch=new Date();
  List<Long> search=facadeFactory.getCoursesFacade().search(query,totalHints);
  if (totalHints <= search.size()) {
    search=search.subList(totalHints - itemsByPage,totalHints);
  }
 else {
    search=search.subList(totalHints - itemsByPage,search.size());
  }
  Date afterSearch=new Date();
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"" + query + ""String_Node_Str""+ String.valueOf(afterSearch.getTime() - beforeSearch.getTime()));
  ArrayList<CourseListVoVwSmall> results=new ArrayList<CourseListVoVwSmall>();
  HashMap<Long,String> professorsName=new HashMap<Long,String>();
  HashMap<Long,String> subjectsName=new HashMap<Long,String>();
  HashMap<Integer,CourseListVoVwSmall> coursesList=new HashMap<Integer,CourseListVoVwSmall>();
  SubjectVoVwSmall subject;
  for (  Long courseId : search) {
    CourseVoFull course=facadeFactory.getCoursesFacade().getCourse(courseId);
    Long professorId=course.getProfessorVo().getId();
    Long subjectId=course.getSubjectVo().getId();
    if (!professorsName.containsKey(professorId)) {
      professorsName.put(professorId,ProfessorVoVwBuilder.getInstance().getProfessorFull(professorId).getFullName());
    }
    if (!subjectsName.containsKey(subjectId)) {
      SubjectVoFull subjectFull=facadeFactory.getSubjectsFacade().getSubject(subjectId);
      subject=new SubjectVoVwSmall(subjectId,subjectFull.getVo().getName(),subjectFull.getVo().getCode(),subjectFull.getRatingSummary());
      subjectsName.put(subjectId,""String_Node_Str"" + subject.getCode() + ""String_Node_Str""+ subject.getName());
    }
    CourseListVoVwSmall courseList=new CourseListVoVwSmall(professorId,professorsName.get(professorId),subjectId,subjectsName.get(subjectId));
    if (!coursesList.containsKey(courseList.hashCode())) {
      coursesList.put(courseList.hashCode(),courseList);
      results.add(courseList);
    }
    coursesList.get(courseList.hashCode()).addCourse(getCourseVoVwSmall(courseId));
  }
  return results;
}","public List<CourseListVoVwSmall> getSearchResults(String query,int itemsByPage,int totalHints){
  Date beforeSearch=new Date();
  List<Long> search=getSearchCourses(query,totalHints);
  if (totalHints <= search.size()) {
    search=search.subList(totalHints - itemsByPage,totalHints);
  }
 else {
    search=search.subList(totalHints - itemsByPage,search.size());
  }
  Date afterSearch=new Date();
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"" + query + ""String_Node_Str""+ String.valueOf(afterSearch.getTime() - beforeSearch.getTime()));
  ArrayList<CourseListVoVwSmall> results=new ArrayList<CourseListVoVwSmall>();
  HashMap<Long,String> professorsName=new HashMap<Long,String>();
  HashMap<Long,String> subjectsName=new HashMap<Long,String>();
  HashMap<Integer,CourseListVoVwSmall> coursesList=new HashMap<Integer,CourseListVoVwSmall>();
  SubjectVoVwSmall subject;
  for (  Long courseId : search) {
    CourseVoFull course=facadeFactory.getCoursesFacade().getCourse(courseId);
    Long professorId=course.getProfessorVo().getId();
    Long subjectId=course.getSubjectVo().getId();
    if (!professorsName.containsKey(professorId)) {
      professorsName.put(professorId,ProfessorVoVwBuilder.getInstance().getProfessorFull(professorId).getFullName());
    }
    if (!subjectsName.containsKey(subjectId)) {
      SubjectVoFull subjectFull=facadeFactory.getSubjectsFacade().getSubject(subjectId);
      subject=new SubjectVoVwSmall(subjectId,subjectFull.getVo().getName(),subjectFull.getVo().getCode(),subjectFull.getRatingSummary());
      subjectsName.put(subjectId,""String_Node_Str"" + subject.getCode() + ""String_Node_Str""+ subject.getName());
    }
    CourseListVoVwSmall courseList=new CourseListVoVwSmall(professorId,professorsName.get(professorId),subjectId,subjectsName.get(subjectId));
    if (!coursesList.containsKey(courseList.hashCode())) {
      coursesList.put(courseList.hashCode(),courseList);
      results.add(courseList);
    }
    coursesList.get(courseList.hashCode()).addCourse(getCourseVoVwSmall(courseId));
  }
  return results;
}",0.9902728351126928
98518,"@Override public CourseRatingEntity update(EntityManager entityManager,CourseRatingEntity entity) throws DataBaseException {
  CourseRatingEntity existingRating=getDao().read(entityManager,entity.getId());
  if (existingRating != null) {
    CourseDao courseDao=daoBuilder.getCourseDao();
    CourseEntity course=entity.getCourse();
    Long totalRatings=course.getRatingCount();
    Double oldAverageSum=course.getRatingAverage() * totalRatings;
    Double newAverage=(oldAverageSum - existingRating.getValue() + entity.getValue()) / totalRatings;
    course.setRatingAverage(newAverage);
    courseDao.update(entityManager,course);
    return getDao().update(entityManager,entity);
  }
 else {
    return null;
  }
}","@Override public CourseRatingEntity update(EntityManager entityManager,CourseRatingEntity entity) throws DataBaseException {
  CourseRatingEntity existingRating=getDao().read(entityManager,entity.getId());
  if (existingRating != null) {
    CourseDao courseDao=daoBuilder.getCourseDao();
    CourseEntity course=entity.getCourse();
    Long totalRatings=course.getRatingCount();
    Double oldAverageSum=course.getRatingAverage() * totalRatings;
    if (totalRatings == 0) {
      totalRatings=1L;
    }
    Double newAverage=(oldAverageSum - existingRating.getValue() + entity.getValue()) / totalRatings;
    if (newAverage < 0) {
      newAverage=(double)entity.getValue();
    }
    course.setRatingAverage(newAverage);
    courseDao.update(entityManager,course);
    return getDao().update(entityManager,entity);
  }
 else {
    return null;
  }
}",0.8853503184713376
98519,"public void voteNegativeComment(CommentVoVwFull comment){
switch (rateComment(comment,-1)) {
case -1:
    comment.getRating().setPositive(comment.getRating().getPositive() - 1);
case 1:
  comment.getRating().setNegative(comment.getRating().getNegative() + 1);
break;
case 2:
comment.getRating().setNegative(comment.getRating().getNegative() - 1);
break;
}
}","public void voteNegativeComment(CommentVoVwFull comment){
switch (rateComment(comment,-1)) {
case FROM_OPPOSED:
    comment.getRating().setPositive(comment.getRating().getPositive() - 1);
case FROM_NEUTRAL:
  comment.getRating().setNegative(comment.getRating().getNegative() + 1);
break;
case TO_NEUTRAL:
comment.getRating().setNegative(comment.getRating().getNegative() - 1);
break;
}
}",0.7311827956989247
98520,"public void votePositiveComment(CommentVoVwFull comment) throws DataBaseException {
switch (rateComment(comment,1)) {
case -1:
    comment.getRating().setNegative(comment.getRating().getNegative() - 1);
case 1:
  comment.getRating().setPositive(comment.getRating().getPositive() + 1);
break;
case 2:
comment.getRating().setPositive(comment.getRating().getPositive() - 1);
break;
}
}","public void votePositiveComment(CommentVoVwFull comment) throws DataBaseException {
switch (rateComment(comment,1)) {
case FROM_OPPOSED:
    comment.getRating().setNegative(comment.getRating().getNegative() - 1);
case FROM_NEUTRAL:
  comment.getRating().setPositive(comment.getRating().getPositive() + 1);
break;
case TO_NEUTRAL:
comment.getRating().setPositive(comment.getRating().getPositive() - 1);
break;
}
}",0.7506297229219143
98521,"/** 
 * Communicates with the application facade to actually store the comment rating. The rating action is a toggle action, so this method will check the previous value of the vote. Several things can happen here: - The user wasn't authenticated, so it cannot rate the comment. - The rating changed from positive to negative or viceversa. - The rating changed from neutral to anything. - The rating changed from anything to neutral. Each of this will have a different effect in the RatingSummaryVo. It will be a change in future versions to manage this cases in a proper location.
 * @param comment The comment being rated.
 * @param value The new rating value for the comment.
 * @return 0 if no change was done. 1 if the vote was neutral and changed.-1 if the vote was opposed and changed. 2 if the vote was already the desired rateValue.
 * @throws DataBaseException
 */
private int rateComment(CommentVoVwFull comment,int value){
  CommentsFacade commentsFacade=Config.getInstance().getFacadeFactory().getCommentsFacade();
  Long commentId=comment.getId();
  int returnValue=0;
  if (user != null && user.isLoggedIn()) {
    Long userId=user.getId();
    int finalValue=0;
    try {
      BinaryRatingVo commentRatingByUserId=commentsFacade.getCommentRatingByUserId(commentId,userId);
      if (commentRatingByUserId != null) {
        int actualValue=commentRatingByUserId.getValue();
        if (actualValue == value) {
          finalValue=0;
          returnValue=2;
        }
 else         if (actualValue == 0) {
          finalValue=value;
          returnValue=1;
        }
 else {
          finalValue=value;
          returnValue=-1;
        }
      }
      Config.getInstance().getFacadeFactory().getCommentsFacade().rateComment(commentId,userId,finalValue);
    }
 catch (    Exception ex) {
      Logger.getLogger(ViewCourse.class.getName()).log(Level.SEVERE,null,ex);
      returnValue=0;
    }
  }
  return returnValue;
}","/** 
 * Communicates with the application facade to actually store the comment rating. The rating action is a toggle action, so this method will check the previous value of the vote. Several things can happen here: - The user wasn't authenticated, so it cannot rate the comment. - The rating changed from positive to negative or viceversa. - The rating changed from neutral to anything. - The rating changed from anything to neutral. Each of this will have a different effect in the RatingSummaryVo. It will be a change in future versions to manage this cases in a proper location.
 * @param comment The comment being rated.
 * @param value The new rating value for the comment.
 * @return 0 if no change was done. 1 if the vote was neutral and changed.-1 if the vote was opposed and changed. 2 if the vote was already the desired rateValue.
 * @throws DataBaseException
 */
private ratingState rateComment(CommentVoVwFull comment,int value){
  CommentsFacade commentsFacade=Config.getInstance().getFacadeFactory().getCommentsFacade();
  Long commentId=comment.getId();
  ratingState returnValue=ratingState.NO_CHANGE;
  if (user != null && user.isLoggedIn()) {
    Long userId=user.getId();
    int finalValue=0;
    try {
      BinaryRatingVo commentRatingByUserId=commentsFacade.getCommentRatingByUserId(commentId,userId);
      if (commentRatingByUserId != null) {
        int actualValue=commentRatingByUserId.getValue();
        if (actualValue == value) {
          finalValue=0;
          returnValue=ratingState.TO_NEUTRAL;
        }
 else         if (actualValue == 0) {
          finalValue=value;
          returnValue=ratingState.FROM_NEUTRAL;
        }
 else {
          finalValue=value;
          returnValue=ratingState.FROM_OPPOSED;
        }
      }
 else {
        finalValue=value;
        returnValue=ratingState.FROM_NEUTRAL;
      }
      Config.getInstance().getFacadeFactory().getCommentsFacade().rateComment(commentId,userId,finalValue);
    }
 catch (    Exception ex) {
      Logger.getLogger(ViewCourse.class.getName()).log(Level.SEVERE,null,ex);
      returnValue=ratingState.NO_CHANGE;
    }
  }
  return returnValue;
}",0.7639296187683284
98522,"public CourseVoVwFull(CourseVo vo,SubjectVoVwSmall subjectVo,ProfessorVoVwFull professorVo){
  this.vo=vo;
  this.subjectVo=subjectVo;
  this.professorVo=professorVo;
}","public CourseVoVwFull(CourseVo vo,SubjectVoVwSmall subjectVo,ProfessorVoVwFull professorVo,String period){
  this.vo=vo;
  this.subjectVo=subjectVo;
  this.professorVo=professorVo;
  this.period=period;
}",0.9032258064516128
98523,"public CourseVoVwFull getCourseVoVwFull(long courseId){
  SubjectsFacade subjectFacade=facadeFactory.getSubjectsFacade();
  CourseVoFull course=facadeFactory.getCoursesFacade().getCourse(courseId);
  SubjectVoVwSmall subject=new SubjectVoVwSmall(course.getSubjectVo().getId(),course.getSubjectVo().getName(),course.getSubjectVo().getCode(),subjectFacade.getSubjectsRatingSummary(course.getSubjectVo().getId()));
  ProfessorVoVwFull professor=ProfessorVoVwBuilder.getInstance().getProfessorFull(course.getProfessorVo());
  return new CourseVoVwFull(course.getVo(),subject,professor);
}","public CourseVoVwFull getCourseVoVwFull(long courseId){
  SubjectsFacade subjectFacade=facadeFactory.getSubjectsFacade();
  CourseVoFull course=facadeFactory.getCoursesFacade().getCourse(courseId);
  SubjectVoVwSmall subject=new SubjectVoVwSmall(course.getSubjectVo().getId(),course.getSubjectVo().getName(),course.getSubjectVo().getCode(),subjectFacade.getSubjectsRatingSummary(course.getSubjectVo().getId()));
  ProfessorVoVwFull professor=ProfessorVoVwBuilder.getInstance().getProfessorFull(course.getProfessorVo());
  PeriodVo period=facadeFactory.getPeriodsFacade().getPeriod(course.getVo().getPeriodId());
  String periodString;
  if (period == null) {
    periodString=NO_PERIOD_STRING;
  }
 else {
    periodString=String.valueOf(period.getYear()) + ""String_Node_Str"" + String.valueOf(period.getSemester());
  }
  return new CourseVoVwFull(course.getVo(),subject,professor,periodString);
}",0.7886563133018231
98524,"public List<CourseVoVwFull> getSearchResults(String query){
  CoursesFacade coursesFacade=facadeFactory.getCoursesFacade();
  Date beforeSearch=new Date();
  List<Long> search=coursesFacade.search(query);
  Date afterSearch=new Date();
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"" + query + ""String_Node_Str""+ String.valueOf(afterSearch.getTime() - beforeSearch.getTime()));
  ArrayList<CourseVoVwFull> results=new ArrayList<CourseVoVwFull>(search.size());
  HashMap<Long,ProfessorVoVwFull> professorsVo=new HashMap<Long,ProfessorVoVwFull>();
  HashMap<Long,SubjectVoVwSmall> subjectsVo=new HashMap<Long,SubjectVoVwSmall>();
  ProfessorVoVwFull professor;
  SubjectVoVwSmall subject;
  for (  Long courseId : search) {
    CourseVoFull course=coursesFacade.getCourse(courseId);
    Long professorId=course.getProfessorVo().getId();
    Long subjectId=course.getSubjectVo().getId();
    if (!professorsVo.containsKey(professorId)) {
      professorsVo.put(professorId,ProfessorVoVwBuilder.getInstance().getProfessorFull(professorId));
    }
    professor=professorsVo.get(professorId);
    if (subjectsVo.containsKey(subjectId)) {
      subject=subjectsVo.get(subjectId);
    }
 else {
      SubjectVoFull subjectFull=facadeFactory.getSubjectsFacade().getSubject(subjectId);
      subject=new SubjectVoVwSmall(subjectId,subjectFull.getVo().getName(),subjectFull.getVo().getCode(),subjectFull.getRatingSummary());
      subjectsVo.put(subjectId,subject);
    }
    results.add(new CourseVoVwFull(course.getVo(),subject,professor));
  }
  return results;
}","public List<CourseVoVwFull> getSearchResults(String query){
  CoursesFacade coursesFacade=facadeFactory.getCoursesFacade();
  Date beforeSearch=new Date();
  List<Long> search=coursesFacade.search(query);
  Date afterSearch=new Date();
  Config.getInstance().getServiceFactory().getLogService().info(""String_Node_Str"" + query + ""String_Node_Str""+ String.valueOf(afterSearch.getTime() - beforeSearch.getTime()));
  ArrayList<CourseVoVwFull> results=new ArrayList<CourseVoVwFull>(search.size());
  HashMap<Long,ProfessorVoVwFull> professorsVo=new HashMap<Long,ProfessorVoVwFull>();
  HashMap<Long,SubjectVoVwSmall> subjectsVo=new HashMap<Long,SubjectVoVwSmall>();
  HashMap<Long,String> periods=new HashMap<Long,String>();
  ProfessorVoVwFull professor;
  SubjectVoVwSmall subject;
  for (  Long courseId : search) {
    CourseVoFull course=coursesFacade.getCourse(courseId);
    Long professorId=course.getProfessorVo().getId();
    Long subjectId=course.getSubjectVo().getId();
    String periodString=NO_PERIOD_STRING;
    if (!professorsVo.containsKey(professorId)) {
      professorsVo.put(professorId,ProfessorVoVwBuilder.getInstance().getProfessorFull(professorId));
    }
    professor=professorsVo.get(professorId);
    if (subjectsVo.containsKey(subjectId)) {
      subject=subjectsVo.get(subjectId);
    }
 else {
      SubjectVoFull subjectFull=facadeFactory.getSubjectsFacade().getSubject(subjectId);
      subject=new SubjectVoVwSmall(subjectId,subjectFull.getVo().getName(),subjectFull.getVo().getCode(),subjectFull.getRatingSummary());
      subjectsVo.put(subjectId,subject);
    }
    PeriodVo period=facadeFactory.getPeriodsFacade().getPeriod(course.getVo().getPeriodId());
    if (period != null) {
      if (!periods.containsKey(course.getVo().getPeriodId())) {
        periods.put(course.getVo().getPeriodId(),String.valueOf(period.getYear()) + ""String_Node_Str"" + String.valueOf(period.getSemester()));
      }
      periodString=periods.get(course.getVo().getPeriodId());
    }
    results.add(new CourseVoVwFull(course.getVo(),subject,professor,periodString));
  }
  return results;
}",0.8601568839599676
98525,"@Test public void BL_9_3() throws Exception {
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  List<FeedbackVo> fvs=ff.getAllFeedbacks();
  for (  FeedbackVo fv : fvs) {
    FeedbackVo result=entityManager.createQuery(""String_Node_Str"",FeedbackEntity.class).setParameter(""String_Node_Str"",fv.getId()).getSingleResult().toVo();
    assertNotNull(result);
    assertEquals(result.getId(),fv.getId());
    assertEquals(result.getFeedbackTypeId(),fv.getFeedbackTypeId());
    assertEquals(result.getContent(),fv.getContent());
  }
  int size=entityManager.createQuery(""String_Node_Str"",Long.class).getSingleResult().intValue();
  assertEquals(size,fvs.size());
}","@Test public void BL_9_3() throws Exception {
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  List<FeedbackVo> fvs=ff.getAllFeedbacks(0,(int)ff.countAllFeedbacks());
  for (  FeedbackVo fv : fvs) {
    FeedbackVo result=entityManager.createQuery(""String_Node_Str"",FeedbackEntity.class).setParameter(""String_Node_Str"",fv.getId()).getSingleResult().toVo();
    assertNotNull(result);
    assertEquals(result.getId(),fv.getId());
    assertEquals(result.getFeedbackTypeId(),fv.getFeedbackTypeId());
    assertEquals(result.getContent(),fv.getContent());
  }
  int size=entityManager.createQuery(""String_Node_Str"",Long.class).getSingleResult().intValue();
  assertEquals(size,fvs.size());
}",0.9795342272406492
98526,"@Test public void BL_9_4() throws Exception {
  List<Long> feedbackTypeIds=entityManager.createQuery(""String_Node_Str"",Long.class).getResultList();
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  for (  Long id : feedbackTypeIds) {
    List<FeedbackVo> fvs=ff.getFeedbacksByFeedbackType(id);
    for (    FeedbackVo fv : fvs) {
      FeedbackVo result=entityManager.createQuery(""String_Node_Str"",FeedbackEntity.class).setParameter(""String_Node_Str"",fv.getId()).getSingleResult().toVo();
      assertNotNull(result);
      assertEquals(result.getId(),fv.getId());
      assertEquals(id,fv.getFeedbackTypeId());
      assertEquals(result.getFeedbackTypeId(),fv.getFeedbackTypeId());
      assertEquals(result.getContent(),fv.getContent());
    }
    int size=entityManager.createQuery(""String_Node_Str"",Long.class).setParameter(""String_Node_Str"",id).getSingleResult().intValue();
    assertEquals(size,fvs.size());
  }
}","@Test public void BL_9_4() throws Exception {
  List<Long> feedbackTypeIds=entityManager.createQuery(""String_Node_Str"",Long.class).getResultList();
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  for (  Long id : feedbackTypeIds) {
    List<FeedbackVo> fvs=ff.getFeedbacksByFeedbackType(id,0,(int)ff.countFeedbacksByFeedbackType(id));
    for (    FeedbackVo fv : fvs) {
      FeedbackVo result=entityManager.createQuery(""String_Node_Str"",FeedbackEntity.class).setParameter(""String_Node_Str"",fv.getId()).getSingleResult().toVo();
      assertNotNull(result);
      assertEquals(result.getId(),fv.getId());
      assertEquals(id,fv.getFeedbackTypeId());
      assertEquals(result.getFeedbackTypeId(),fv.getFeedbackTypeId());
      assertEquals(result.getContent(),fv.getContent());
    }
    int size=entityManager.createQuery(""String_Node_Str"",Long.class).setParameter(""String_Node_Str"",id).getSingleResult().intValue();
    assertEquals(size,fvs.size());
  }
}",0.9779825908858168
98527,"@Test public void BL_9_4_1() throws Exception {
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  List<FeedbackVo> fvs=ff.getFeedbacksByFeedbackType(Long.MAX_VALUE);
  assertTrue(fvs.isEmpty());
}","@Test public void BL_9_4_1() throws Exception {
  FeedbacksFacade ff=Config.getInstance().getFacadeFactory().getFeedbacksFacade();
  List<FeedbackVo> fvs=ff.getFeedbacksByFeedbackType(Long.MAX_VALUE,0,1);
  assertTrue(fvs.isEmpty());
}",0.9914163090128756
98528,"/** 
 * Validates whether the CommentVo object satisfies the business rules and contains correct references to other objects
 * @param entityManager the entity manager
 * @param commentVo the CommentVo
 * @throws InvalidVoException in case the business rules are violated
 */
@Override public void validateVoForCreation(EntityManager entityManager,CommentVo commentVo) throws MultipleMessagesException, DataBaseException {
  MultipleMessagesException multipleMessageException=new MultipleMessagesException();
  if (commentVo == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
    throw multipleMessageException;
  }
  if (commentVo.getContent() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else {
    commentVo.setContent(SecurityHelper.sanitizeHTML(commentVo.getContent()));
    if (commentVo.getContent().length() < 1 || commentVo.getContent().length() > MAX_COMMENT_LENGTH) {
      multipleMessageException.addMessage(""String_Node_Str"");
    }
  }
  if (commentVo.getCourseId() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else   if (getDaoFactory().getCourseDao().read(entityManager,commentVo.getCourseId()) == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (commentVo.getDate() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (commentVo.isAnonymous()) {
    if (commentVo.getUserId() != null) {
      multipleMessageException.addMessage(""String_Node_Str"");
    }
  }
 else {
    if (commentVo.getUserId() == null) {
      multipleMessageException.addMessage(""String_Node_Str"");
    }
 else     if (getDaoFactory().getUserDao().read(entityManager,commentVo.getUserId()) == null) {
      multipleMessageException.addMessage(""String_Node_Str"");
    }
  }
  if (commentVo.getRating() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else   if (commentVo.getRating() < 0.0F || commentVo.getRating() > 5.0F) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (!multipleMessageException.getMessages().isEmpty()) {
    throw multipleMessageException;
  }
}","/** 
 * Validates whether the CommentVo object satisfies the business rules and contains correct references to other objects
 * @param entityManager the entity manager
 * @param commentVo the CommentVo
 * @throws InvalidVoException in case the business rules are violated
 */
@Override public void validateVoForCreation(EntityManager entityManager,CommentVo commentVo) throws MultipleMessagesException, DataBaseException {
  MultipleMessagesException multipleMessageException=new MultipleMessagesException();
  if (commentVo == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
    throw multipleMessageException;
  }
  if (commentVo.getContent() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else {
    commentVo.setContent(SecurityHelper.sanitizeHTML(commentVo.getContent()));
    if (commentVo.getContent().length() < 1 || commentVo.getContent().length() > MAX_COMMENT_LENGTH) {
      multipleMessageException.addMessage(""String_Node_Str"");
    }
  }
  if (commentVo.getCourseId() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else   if (getDaoFactory().getCourseDao().read(entityManager,commentVo.getCourseId()) == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (commentVo.getDate() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (commentVo.getUserId() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else   if (getDaoFactory().getUserDao().read(entityManager,commentVo.getUserId()) == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (commentVo.getRating() == null) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
 else   if (commentVo.getRating() < 0.0F || commentVo.getRating() > 5.0F) {
    multipleMessageException.addMessage(""String_Node_Str"");
  }
  if (!multipleMessageException.getMessages().isEmpty()) {
    throw multipleMessageException;
  }
}",0.9587178241864984
98529,"@Override public boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof CourseEntity)) {
    return false;
  }
  final ConfirmationKeyEntity other=(ConfirmationKeyEntity)object;
  if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
    return false;
  }
  if (this.expirationDate != other.expirationDate && (this.expirationDate == null || !this.expirationDate.equals(other.expirationDate))) {
    return false;
  }
  if ((this.confirmationKey == null) ? (other.confirmationKey != null) : !this.confirmationKey.equals(other.confirmationKey)) {
    return false;
  }
  if (this.user != other.user && (this.user == null || !this.user.equals(other.user))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof ConfirmationKeyEntity)) {
    return false;
  }
  final ConfirmationKeyEntity other=(ConfirmationKeyEntity)object;
  if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
    return false;
  }
  if (this.expirationDate != other.expirationDate && (this.expirationDate == null || !this.expirationDate.equals(other.expirationDate))) {
    return false;
  }
  if ((this.confirmationKey == null) ? (other.confirmationKey != null) : !this.confirmationKey.equals(other.confirmationKey)) {
    return false;
  }
  if (this.user != other.user && (this.user == null || !this.user.equals(other.user))) {
    return false;
  }
  return true;
}",0.9889538661468484
98530,"@Override public FeedbackTypeDao getFeedbackTypeDao(){
  if (feedbackTypeDao == null) {
    feedbackTypeDao=new SqlFeedbackTypeDao(new SimpleDeleteBehavior<FeedbackTypeEntity>());
  }
  return feedbackTypeDao;
}","@Override public FeedbackTypeDao getFeedbackTypeDao(){
  if (feedbackTypeDao == null) {
    feedbackTypeDao=new SQLFeedbackTypeDao(new SimpleRemoveBehavior<FeedbackTypeEntity>());
  }
  return feedbackTypeDao;
}",0.966824644549763
98531,"@Override public FeedbackDao getFeedbackDao(){
  if (feedbackDao == null) {
    feedbackDao=new SqlFeedbackDao(new SimpleDeleteBehavior<FeedbackEntity>());
  }
  return feedbackDao;
}","@Override public FeedbackDao getFeedbackDao(){
  if (feedbackDao == null) {
    feedbackDao=new SQLFeedbackDao(new SimpleRemoveBehavior<FeedbackEntity>());
  }
  return feedbackDao;
}",0.9672131147540984
98532,"@Override public BinaryRatingDao<SubjectRatingEntity> getSubjectRatingDao(){
  if (subjectRatingDao == null) {
    subjectRatingDao=new SqlSubjectRatingDao();
  }
  return subjectRatingDao;
}","@Override public BinaryRatingDao<SubjectRatingEntity> getSubjectRatingDao(){
  if (subjectRatingDao == null) {
    subjectRatingDao=new SQLSubjectRatingDao();
  }
  return subjectRatingDao;
}",0.9895287958115184
98533,"private MySqlDaoBuilder(){
}","public MySqlDaoBuilder(){
  try {
    Class.forName(""String_Node_Str"").newInstance();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}",0.2628571428571428
98534,"@Override public PeriodDao getPeriodDao(){
  if (periodDao == null) {
    periodDao=new SqlPeriodDao(new PeriodDeleteBehavior(this,new SimpleDeleteBehavior<PeriodEntity>()));
  }
  return periodDao;
}","@Override public PeriodDao getPeriodDao(){
  if (periodDao == null) {
    periodDao=new SQLPeriodDao(new PeriodRemoveBehavior(this,new SimpleRemoveBehavior<PeriodEntity>()));
  }
  return periodDao;
}",0.94
98535,"@Override public ProfessorDao getProfessorDao(){
  if (professorDao == null) {
    professorDao=new SqlProfessorDao(new ProfessorsDeleteBehavior(this,new SimpleDeleteBehavior<ProfessorEntity>()));
  }
  return professorDao;
}","@Override public ProfessorDao getProfessorDao(){
  if (professorDao == null) {
    professorDao=new SQLProfessorDao(new ProfessorsRemoveBehavior(this,new SimpleRemoveBehavior<ProfessorEntity>()));
  }
  return professorDao;
}",0.9466666666666668
98536,"@Override public CourseDao getCourseDao(){
  if (courseDao == null) {
    courseDao=new SqlCourseDao(new CoursesDeleteBehavior(this,new SimpleDeleteBehavior<CourseEntity>()));
  }
  return courseDao;
}","@Override public CourseDao getCourseDao(){
  if (courseDao == null) {
    courseDao=new SQLCourseDao(new CoursesRemoveBehavior(this,new SimpleRemoveBehavior<CourseEntity>()));
  }
  return courseDao;
}",0.9402985074626866
98537,"@Override public ConfirmationKeyDao getConfirmationKeyDao(){
  if (confirmationKeyDao == null) {
    confirmationKeyDao=new SqlConfirmationKeyDao(new SimpleDeleteBehavior<ConfirmationKeyEntity>());
  }
  return confirmationKeyDao;
}","@Override public ConfirmationKeyDao getConfirmationKeyDao(){
  if (confirmationKeyDao == null) {
    confirmationKeyDao=new SQLConfirmationKeyDao(new SimpleRemoveBehavior<ConfirmationKeyEntity>());
  }
  return confirmationKeyDao;
}",0.9698275862068966
98538,"@Override public CommentDao getCommentDao(){
  if (commentDao == null) {
    commentDao=new SqlCommentDao(new CommentsDeleteBehavior(this,new SimpleDeleteBehavior<CommentEntity>()));
  }
  return commentDao;
}","@Override public CommentDao getCommentDao(){
  if (commentDao == null) {
    commentDao=new SQLCommentDao(new CommentsRemoveBehavior(this,new SimpleRemoveBehavior<CommentEntity>()));
  }
  return commentDao;
}",0.9425837320574164
98539,"@Override public CourseRatingDao getCourseRatingDao(){
  if (courseRatingDao == null) {
    courseRatingDao=new SqlCourseRatingDao(new SimpleDeleteBehavior<CourseRatingEntity>());
  }
  return courseRatingDao;
}","@Override public CourseRatingDao getCourseRatingDao(){
  if (courseRatingDao == null) {
    courseRatingDao=new SQLCourseRatingDao(new SimpleRemoveBehavior<CourseRatingEntity>());
  }
  return courseRatingDao;
}",0.966824644549763
98540,"@Override public SubjectDao getSubjectDao(){
  if (subjectDao == null) {
    subjectDao=new SqlSubjectDao(new SubjectsDeleteBehavior(this,new SimpleDeleteBehavior<SubjectEntity>()));
  }
  return subjectDao;
}","@Override public SubjectDao getSubjectDao(){
  if (subjectDao == null) {
    subjectDao=new SQLSubjectDao(new SubjectsRemoveBehavior(this,new SimpleRemoveBehavior<SubjectEntity>()));
  }
  return subjectDao;
}",0.9425837320574164
98541,"@Override public ForgottenPasswordKeyDao getForgottenPasswordKeyDao(){
  if (forgottenPasswordKeyDao == null) {
    forgottenPasswordKeyDao=new SqlForgottenPasswordKeyDao(new SimpleDeleteBehavior<ForgottenPasswordKeyEntity>());
  }
  return forgottenPasswordKeyDao;
}","@Override public ForgottenPasswordKeyDaoInterface getForgottenPasswordKeyDao(){
  if (forgottenPasswordKeyDao == null) {
    forgottenPasswordKeyDao=new ForgottenPasswordKeyDao(new SimpleRemoveBehavior<ForgottenPasswordKeyEntity>());
  }
  return forgottenPasswordKeyDao;
}",0.9592592592592591
98542,"@Override public ProgramDao getProgramDao(){
  if (programDao == null) {
    programDao=new SqlProgramDao(new SimpleDeleteBehavior<ProgramEntity>());
  }
  return programDao;
}","@Override public ProgramDao getProgramDao(){
  if (programDao == null) {
    programDao=new SQLProgramDao(new SimpleRemoveBehavior<ProgramEntity>());
  }
  return programDao;
}",0.9659090909090908
98543,"@Override public BinaryRatingDao<CommentRatingEntity> getCommentRatingDao(){
  if (commentRatingDao == null) {
    commentRatingDao=new SqlCommentRatingDao();
  }
  return commentRatingDao;
}","@Override public BinaryRatingDao<CommentRatingEntity> getCommentRatingDao(){
  if (commentRatingDao == null) {
    commentRatingDao=new SQLCommentRatingDao();
  }
  return commentRatingDao;
}",0.9895287958115184
98544,"@Override public UserDao getUserDao(){
  if (userDao == null) {
    userDao=new SqlUserDao(new UsersDeleteBehavior(this,new SimpleDeleteBehavior<UserEntity>()));
  }
  return userDao;
}","@Override public UserDao getUserDao(){
  if (userDao == null) {
    userDao=new SQLUserDao(new UsersRemoveBehavior(this,new SimpleRemoveBehavior<UserEntity>()));
  }
  return userDao;
}",0.945945945945946
98545,"@Override public BinaryRatingDao<ProfessorRatingEntity> getProfessorRatingDao(){
  if (professorRatingDao == null) {
    professorRatingDao=new SqlProfessorRatingDao();
  }
  return professorRatingDao;
}","@Override public BinaryRatingDao<ProfessorRatingEntity> getProfessorRatingDao(){
  if (professorRatingDao == null) {
    professorRatingDao=new SQLProfessorRatingDao();
  }
  return professorRatingDao;
}",0.9901477832512317
98546,"public List<CommentVo> getCommentsByCourseId(long courseId){
  EntityManager entityManager=null;
  List<CommentVo> commentVos=new ArrayList<CommentVo>();
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().createCommentsService().getByCourseId(entityManager,courseId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelperImplementation.closeEntityManager(entityManager);
  }
  return commentVos;
}","public List<CommentVo> getCommentsByCourseId(long courseId){
  EntityManager entityManager=null;
  List<CommentVo> commentVos;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    commentVos=getServiceFactory().createCommentsService().getByCourseId(entityManager,courseId);
  }
 catch (  Exception exception) {
    getServiceFactory().getLogService().error(exception.getMessage(),exception);
    throw new RuntimeException(exception);
  }
 finally {
    FacadesHelperImplementation.closeEntityManager(entityManager);
  }
  return commentVos;
}",0.976824034334764
98547,"public List<PeriodVo> listPeriods(){
  List<PeriodVo> periodVos=new ArrayList<PeriodVo>();
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    periodVos=getServiceFactory().getPeriodsService().list(entityManager);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelperImplementation.closeEntityManager(entityManager);
  }
  return periodVos;
}","public List<PeriodVo> listPeriods(){
  List<PeriodVo> periodVos;
  EntityManager entityManager=null;
  try {
    entityManager=getEntityManagerFactory().createEntityManager();
    periodVos=getServiceFactory().getPeriodsService().list(entityManager);
  }
 catch (  Exception enException) {
    getServiceFactory().getLogService().error(enException.getMessage(),enException);
    throw new RuntimeException(enException);
  }
 finally {
    FacadesHelperImplementation.closeEntityManager(entityManager);
  }
  return periodVos;
}",0.975925925925926
98548,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  final ConfirmationKeyEntity other=(ConfirmationKeyEntity)obj;
  if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
    return false;
  }
  if (this.expirationDate != other.expirationDate && (this.expirationDate == null || !this.expirationDate.equals(other.expirationDate))) {
    return false;
  }
  if ((this.confirmationKey == null) ? (other.confirmationKey != null) : !this.confirmationKey.equals(other.confirmationKey)) {
    return false;
  }
  if (this.user != other.user && (this.user == null || !this.user.equals(other.user))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof CourseEntity)) {
    return false;
  }
  final ConfirmationKeyEntity other=(ConfirmationKeyEntity)object;
  if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
    return false;
  }
  if (this.expirationDate != other.expirationDate && (this.expirationDate == null || !this.expirationDate.equals(other.expirationDate))) {
    return false;
  }
  if ((this.confirmationKey == null) ? (other.confirmationKey != null) : !this.confirmationKey.equals(other.confirmationKey)) {
    return false;
  }
  if (this.user != other.user && (this.user == null || !this.user.equals(other.user))) {
    return false;
  }
  return true;
}",0.8708791208791209
98549,"public List<courseInfo> getCourses(){
  return courses;
}","public List<CourseInfo> getCourses(){
  return courses;
}",0.9824561403508772
98550,"@Before public void setUp(){
  entityManager=FacadesTestHelper.createEntityManagerFactory().createEntityManager();
}","@Before public void setUp(){
}",0.410958904109589
98551,"@Override public FeedbackTypeDao getFeedbackTypeDao(){
  if (feedbackTypeDao == null) {
    feedbackTypeDao=new SQLFeedbackTypeDao(new SimpleRemoveBehavior<FeedbackTypeEntity>());
  }
  return feedbackTypeDao;
}","@Override public FeedbackTypeDao getFeedbackTypeDao(){
  if (feedbackTypeDao == null) {
    feedbackTypeDao=new SqlFeedbackTypeDao(new SimpleDeleteBehavior<FeedbackTypeEntity>());
  }
  return feedbackTypeDao;
}",0.943127962085308
98552,"@Override public FeedbackDao getFeedbackDao(){
  if (feedbackDao == null) {
    feedbackDao=new SQLFeedbackDao(new SimpleRemoveBehavior<FeedbackEntity>());
  }
  return feedbackDao;
}","@Override public FeedbackDao getFeedbackDao(){
  if (feedbackDao == null) {
    feedbackDao=new SqlFeedbackDao(new SimpleDeleteBehavior<FeedbackEntity>());
  }
  return feedbackDao;
}",0.9672131147540984
98553,"@Override public BinaryRatingDao<SubjectRatingEntity> getSubjectRatingDao(){
  if (subjectRatingDao == null) {
    subjectRatingDao=new SQLSubjectRatingDao();
  }
  return subjectRatingDao;
}","@Override public BinaryRatingDao<SubjectRatingEntity> getSubjectRatingDao(){
  if (subjectRatingDao == null) {
    subjectRatingDao=new SqlSubjectRatingDao();
  }
  return subjectRatingDao;
}",0.9895287958115184
98554,"@Override public PeriodDao getPeriodDao(){
  if (periodDao == null) {
    periodDao=new SQLPeriodDao(new PeriodRemoveBehavior(this,new SimpleRemoveBehavior<PeriodEntity>()));
  }
  return periodDao;
}","@Override public PeriodDao getPeriodDao(){
  if (periodDao == null) {
    periodDao=new SqlPeriodDao(new PeriodDeleteBehavior(this,new SimpleDeleteBehavior<PeriodEntity>()));
  }
  return periodDao;
}",0.94
98555,"@Override public ProfessorDao getProfessorDao(){
  if (professorDao == null) {
    professorDao=new SQLProfessorDao(new ProfessorsRemoveBehavior(this,new SimpleRemoveBehavior<ProfessorEntity>()));
  }
  return professorDao;
}","@Override public ProfessorDao getProfessorDao(){
  if (professorDao == null) {
    professorDao=new SqlProfessorDao(new ProfessorsDeleteBehavior(this,new SimpleDeleteBehavior<ProfessorEntity>()));
  }
  return professorDao;
}",0.84
98556,"@Override public CourseDao getCourseDao(){
  if (courseDao == null) {
    courseDao=new SQLCourseDao(new CoursesRemoveBehavior(this,new SimpleRemoveBehavior<CourseEntity>()));
  }
  return courseDao;
}","@Override public CourseDao getCourseDao(){
  if (courseDao == null) {
    courseDao=new SqlCourseDao(new CoursesDeleteBehavior(this,new SimpleDeleteBehavior<CourseEntity>()));
  }
  return courseDao;
}",0.9402985074626866
98557,"@Override public ConfirmationKeyDao getConfirmationKeyDao(){
  if (confirmationKeyDao == null) {
    confirmationKeyDao=new SQLConfirmationKeyDao(new SimpleRemoveBehavior<ConfirmationKeyEntity>());
  }
  return confirmationKeyDao;
}","@Override public ConfirmationKeyDao getConfirmationKeyDao(){
  if (confirmationKeyDao == null) {
    confirmationKeyDao=new SqlConfirmationKeyDao(new SimpleDeleteBehavior<ConfirmationKeyEntity>());
  }
  return confirmationKeyDao;
}",0.9482758620689656
98558,"@Override public CommentDao getCommentDao(){
  if (commentDao == null) {
    commentDao=new SQLCommentDao(new CommentsRemoveBehavior(this,new SimpleRemoveBehavior<CommentEntity>()));
  }
  return commentDao;
}","@Override public CommentDao getCommentDao(){
  if (commentDao == null) {
    commentDao=new SqlCommentDao(new CommentsDeleteBehavior(this,new SimpleDeleteBehavior<CommentEntity>()));
  }
  return commentDao;
}",0.9425837320574164
98559,"@Override public CourseRatingDao getCourseRatingDao(){
  if (courseRatingDao == null) {
    courseRatingDao=new SQLCourseRatingDao(new SimpleRemoveBehavior<CourseRatingEntity>());
  }
  return courseRatingDao;
}","@Override public CourseRatingDao getCourseRatingDao(){
  if (courseRatingDao == null) {
    courseRatingDao=new SqlCourseRatingDao(new SimpleDeleteBehavior<CourseRatingEntity>());
  }
  return courseRatingDao;
}",0.966824644549763
98560,"@Override public SubjectDao getSubjectDao(){
  if (subjectDao == null) {
    subjectDao=new SQLSubjectDao(new SubjectsRemoveBehavior(this,new SimpleRemoveBehavior<SubjectEntity>()));
  }
  return subjectDao;
}","@Override public SubjectDao getSubjectDao(){
  if (subjectDao == null) {
    subjectDao=new SqlSubjectDao(new SubjectsDeleteBehavior(this,new SimpleDeleteBehavior<SubjectEntity>()));
  }
  return subjectDao;
}",0.9425837320574164
98561,"@Override public ForgottenPasswordKeyDaoInterface getForgottenPasswordKeyDao(){
  if (forgottenPasswordKeyDao == null) {
    forgottenPasswordKeyDao=new ForgottenPasswordKeyDao(new SimpleRemoveBehavior<ForgottenPasswordKeyEntity>());
  }
  return forgottenPasswordKeyDao;
}","@Override public ForgottenPasswordKeyDao getForgottenPasswordKeyDao(){
  if (forgottenPasswordKeyDao == null) {
    forgottenPasswordKeyDao=new SqlForgottenPasswordKeyDao(new SimpleDeleteBehavior<ForgottenPasswordKeyEntity>());
  }
  return forgottenPasswordKeyDao;
}",0.9407407407407408
98562,"@Override public ProgramDao getProgramDao(){
  if (programDao == null) {
    programDao=new SQLProgramDao(new SimpleRemoveBehavior<ProgramEntity>());
  }
  return programDao;
}","@Override public ProgramDao getProgramDao(){
  if (programDao == null) {
    programDao=new SqlProgramDao(new SimpleDeleteBehavior<ProgramEntity>());
  }
  return programDao;
}",0.9659090909090908
98563,"@Override public BinaryRatingDao<CommentRatingEntity> getCommentRatingDao(){
  if (commentRatingDao == null) {
    commentRatingDao=new SQLCommentRatingDao();
  }
  return commentRatingDao;
}","@Override public BinaryRatingDao<CommentRatingEntity> getCommentRatingDao(){
  if (commentRatingDao == null) {
    commentRatingDao=new SqlCommentRatingDao();
  }
  return commentRatingDao;
}",0.9895287958115184
98564,"@Override public UserDao getUserDao(){
  if (userDao == null) {
    userDao=new SQLUserDao(new UsersRemoveBehavior(this,new SimpleRemoveBehavior<UserEntity>()));
  }
  return userDao;
}","@Override public UserDao getUserDao(){
  if (userDao == null) {
    userDao=new SqlUserDao(new UsersDeleteBehavior(this,new SimpleDeleteBehavior<UserEntity>()));
  }
  return userDao;
}",0.945945945945946
98565,"@Override public BinaryRatingDao<ProfessorRatingEntity> getProfessorRatingDao(){
  if (professorRatingDao == null) {
    professorRatingDao=new SQLProfessorRatingDao();
  }
  return professorRatingDao;
}","@Override public BinaryRatingDao<ProfessorRatingEntity> getProfessorRatingDao(){
  if (professorRatingDao == null) {
    professorRatingDao=new SqlProfessorRatingDao();
  }
  return professorRatingDao;
}",0.9901477832512317
98566,"public String signUp() throws IOException {
  FacesContext fc=FacesContext.getCurrentInstance();
  if (authCheck.isLoggedIn()) {
    fc.getExternalContext().responseSendError(401,""String_Node_Str"");
  }
  UsersFacade usersFacade=Config.getInstance().getFacadeFactory().getUsersFacade();
  UserVo user=new UserVo();
  user.setUserName(getUserName());
  user.setPassword(getPassword());
  user.setFirstName(getFirstName());
  user.setLastName(getLastName());
  List<Long> programsList=new ArrayList<Long>();
  if (programId != null) {
    programsList.add(programId);
  }
  user.setProgramsId(programsList);
  user.setRole(Role.STUDENT);
  try {
    usersFacade.addUser(user);
    return ""String_Node_Str"";
  }
 catch (  InvalidVoException ex) {
    fc.addMessage(""String_Node_Str"",new FacesMessage(ex.getMessage()));
    return ""String_Node_Str"";
  }
}","public String signUp() throws IOException {
  FacesContext fc=FacesContext.getCurrentInstance();
  if (authCheck.isLoggedIn()) {
    fc.getExternalContext().responseSendError(401,""String_Node_Str"");
  }
  UsersFacade usersFacade=Config.getInstance().getFacadeFactory().getUsersFacade();
  UserVo user=new UserVo();
  user.setUserName(getUserName());
  user.setPassword(getPassword());
  user.setFirstName(getFirstName());
  user.setLastName(getLastName());
  List<Long> programsList=new ArrayList<Long>();
  if (programId != null) {
    programsList.add(programId);
  }
  user.setProgramsId(programsList);
  user.setRole(Role.STUDENT);
  try {
    usersFacade.addUser(user);
    return ""String_Node_Str"";
  }
 catch (  MultipleMessageException ex) {
    fc.addMessage(""String_Node_Str"",new FacesMessage(ex.getMessage()));
    Config.getInstance().getServiceFactory().createLogService().error(ex.getMessage(),ex);
    return ""String_Node_Str"";
  }
}",0.9371873262923848
98567,"public void preRenderView(){
  try {
    course=Config.getInstance().getFacadeFactory().getCoursesFacade().getCourse(id);
    comments=Config.getInstance().getFacadeFactory().getCommentsFacade().getCommentsByCourseId(id);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    Config.getInstance().getServiceFactory().createLogService().error(ex);
  }
}","public void preRenderView(){
  try {
    course=Config.getInstance().getFacadeFactory().getCoursesFacade().getCourse(id);
    comments=Config.getInstance().getFacadeFactory().getCommentsFacade().getCommentsByCourseId(id);
    System.out.println(""String_Node_Str"" + course.getId());
    for (    CommentVoVwFull comment : comments) {
      System.out.println(comment.getContent());
    }
  }
 catch (  Exception ex) {
    Config.getInstance().getServiceFactory().createLogService().error(ex.getMessage(),ex);
  }
}",0.6130884041331802
98568,"public UserVo addUser(UserVo vo) throws InvalidVoException {
  EntityManager em=null;
  EntityTransaction tx=null;
  UserVo user=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    user=getServiceFactory().createUsersService().create(em,user);
  }
 catch (  InvalidVoException ex) {
    throw ex;
  }
catch (  Exception e) {
    if (em != null && tx != null) {
      tx.rollback();
    }
    getServiceFactory().createLogService().error(e.getMessage(),e);
  }
 finally {
    if (em != null) {
      em.clear();
      em.close();
    }
  }
  return user;
}","public UserVo addUser(UserVo vo) throws InvalidVoException {
  EntityManager em=null;
  EntityTransaction tx=null;
  try {
    em=getEntityManagerFactory().createEntityManager();
    vo=getServiceFactory().createUsersService().create(em,vo);
  }
 catch (  InvalidVoException ex) {
    throw ex;
  }
catch (  Exception e) {
    if (em != null && tx != null) {
      tx.rollback();
    }
    getServiceFactory().createLogService().error(e.getMessage(),e);
  }
 finally {
    if (em != null) {
      em.clear();
      em.close();
    }
  }
  return vo;
}",0.7943262411347518
98569,"public void validateVo(EntityManager em,UserVo vo) throws InvalidVoException {
  if (vo == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getFirstName() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getLastName() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getUserName() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getUserName().length() > MAX_USERNAME_LENGTH || vo.getUserName().length() < MIN_USERNAME_LENGTH) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getPassword() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getPassword().length() > MAX_USER_PASSWORD_LENGTH || vo.getUserName().length() < MIN_USER_PASSWORD_LENGTH) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getProgramsId() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getProgramsId().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  for (  Long programId : vo.getProgramsId()) {
    if (programId == null) {
      throw new InvalidVoException(""String_Node_Str"");
    }
    if (this.getDaoFactory().getProgramDao().getById(em,programId) == null) {
      throw new InvalidVoException(""String_Node_Str"");
    }
  }
  if (vo.getRol() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
}","public void validateVo(EntityManager em,UserVo vo) throws InvalidVoException {
  if (vo == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getFirstName() == null || vo.getFirstName().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getLastName() == null || vo.getLastName().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getUserName() == null || vo.getUserName().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getUserName().length() > MAX_USERNAME_LENGTH || vo.getUserName().length() < MIN_USERNAME_LENGTH) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getPassword() == null || vo.getPassword().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getPassword().length() > MAX_USER_PASSWORD_LENGTH || vo.getPassword().length() < MIN_USER_PASSWORD_LENGTH) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getProgramsId() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  if (vo.getProgramsId().isEmpty()) {
    throw new InvalidVoException(""String_Node_Str"");
  }
  for (  Long programId : vo.getProgramsId()) {
    if (programId == null) {
      throw new InvalidVoException(""String_Node_Str"");
    }
    if (this.getDaoFactory().getProgramDao().getById(em,programId) == null) {
      throw new InvalidVoException(""String_Node_Str"");
    }
  }
  if (vo.getRol() == null) {
    throw new InvalidVoException(""String_Node_Str"");
  }
}",0.953637901861252
98570,"@Test public void testGetSpanishMessage(){
  String message=Config.getInstance().getFacadeFactory().getExceptionsFacade().getMessage(""String_Node_Str"",Locale.forLanguageTag(""String_Node_Str""));
  String expectedMessage=""String_Node_Str"";
  assertEquals(expectedMessage,message);
}","@Test public void testGetSpanishMessage(){
  String message=Config.getInstance().getFacadeFactory().getExceptionsFacade().getMessage(""String_Node_Str"",new Locale(""String_Node_Str""));
  String expectedMessage=""String_Node_Str"";
  assertEquals(expectedMessage,message);
}",0.965391621129326
98571,"/** 
 * Returns a feedback type entity which name matches the given name
 * @param em the entity manager
 * @param name the name
 * @return a feedback type entity
 */
public FeedbackTypeEntity getByName(EntityManager em,String name){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return (FeedbackTypeEntity)em.createNamedQuery(""String_Node_Str"",FeedbackTypeEntity.class).setParameter(""String_Node_Str"",name).getSingleResult();
  }
 catch (  NoResultException ex) {
    return null;
  }
}","/** 
 * Returns a feedback type entity which name matches the given name
 * @param em the entity manager
 * @param name the name
 * @return a feedback type entity
 */
public FeedbackTypeEntity getByName(EntityManager em,String name){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return em.createNamedQuery(""String_Node_Str"",FeedbackTypeEntity.class).setParameter(""String_Node_Str"",name).getSingleResult();
  }
 catch (  NoResultException ex) {
    return null;
  }
}",0.9809885931558936
98572,"/** 
 * Returns a period entity which year and semester match the given arguments
 * @param em the entity manager
 * @param year the year
 * @param semester the semester
 * @return the matched period entity or null if there is no such entity
 */
public PeriodEntity getByYearAndSemester(EntityManager em,int year,int semester){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return (PeriodEntity)em.createNamedQuery(""String_Node_Str"",PeriodEntity.class).setParameter(""String_Node_Str"",year).setParameter(""String_Node_Str"",semester).getSingleResult();
  }
 catch (  NoResultException ex) {
    return null;
  }
}","/** 
 * Returns a period entity which year and semester match the given arguments
 * @param em the entity manager
 * @param year the year
 * @param semester the semester
 * @return the matched period entity or null if there is no such entity
 */
public PeriodEntity getByYearAndSemester(EntityManager em,int year,int semester){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return em.createNamedQuery(""String_Node_Str"",PeriodEntity.class).setParameter(""String_Node_Str"",year).setParameter(""String_Node_Str"",semester).getSingleResult();
  }
 catch (  NoResultException ex) {
    return null;
  }
}",0.9892638036809815
98573,"/** 
 * Returns a list of period entities which year is equal to the year argument
 * @param em the entity manager
 * @param year the year
 * @return a list of matched period entities
 */
public List<PeriodEntity> getByYear(EntityManager em,int year){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (List<PeriodEntity>)em.createNamedQuery(""String_Node_Str"",PeriodEntity.class).setParameter(""String_Node_Str"",year).getResultList();
}","/** 
 * Returns a list of period entities which year is equal to the year argument
 * @param em the entity manager
 * @param year the year
 * @return a list of matched period entities
 */
public List<PeriodEntity> getByYear(EntityManager em,int year){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return em.createNamedQuery(""String_Node_Str"",PeriodEntity.class).setParameter(""String_Node_Str"",year).getResultList();
}",0.9785867237687366
98574,"/** 
 * Returns a list of subject entities associated with a specific professor
 * @param em the entity manager
 * @param professorId the professor's id
 * @return a list of matched subject entities
 */
public List<SubjectEntity> getByProfessorId(EntityManager em,long professorId){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (List<SubjectEntity>)em.createNamedQuery(""String_Node_Str"",SubjectEntity.class).setParameter(""String_Node_Str"",professorId).getResultList();
}","/** 
 * Returns a list of subject entities associated with a specific professor
 * @param em the entity manager
 * @param professorId the professor's id
 * @return a list of matched subject entities
 */
public List<SubjectEntity> getByProfessorId(EntityManager em,long professorId){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return em.createNamedQuery(""String_Node_Str"",SubjectEntity.class).setParameter(""String_Node_Str"",professorId).getResultList();
}",0.8272458045409674
98575,"/** 
 * Returns a list of subject entities which name contains the argument name
 * @param em the entity manager
 * @param name the subject's name
 * @return a list of matched subject entities
 */
public List<SubjectEntity> getByName(EntityManager em,String name){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return (List<SubjectEntity>)em.createNamedQuery(""String_Node_Str"",SubjectEntity.class).setParameter(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"").getResultList();
}","/** 
 * Returns a list of subject entities which name contains the argument name
 * @param em the entity manager
 * @param name the subject's name
 * @return a list of matched subject entities
 */
public List<SubjectEntity> getByName(EntityManager em,String name){
  if (em == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return em.createNamedQuery(""String_Node_Str"",SubjectEntity.class).setParameter(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"").getResultList();
}",0.9798657718120806
98576,"@EventHandler public void onRawMessage(RawMessageEvent event){
  if (event.message.command.equals(""String_Node_Str"")) {
    event.setHandled();
    String[] sender=event.message.prefix.split(""String_Node_Str"");
    IRCUser user=event.network.getUser(sender[0]);
    BotAPI.console.sendMessageToConsole(""String_Node_Str"",user.getUsername(),event.message.params[0]);
    user.setUsername(event.message.params[0]);
    BotAPI.eventBus.postEvent(new UserNicknameChangedEvent(user,sender[0]));
  }
 else   if (event.message.command.equals(""String_Node_Str"")) {
    event.setHandled();
    String[] sender=event.message.prefix.split(""String_Node_Str"");
    IRCUser user=event.network.getUser(sender[0]);
    BotAPI.console.sendMessageToConsole(""String_Node_Str"",event.message.params[0],user.getUsername(),event.message.trailing);
    String prefix=BotAPI.configuration.getCommandPrefix();
    if (event.message.params[0].startsWith(prefix)) {
      UserCommandEvent commandEvent=new UserCommandEvent(user,event.message.params[0],event.message.trailing.substring(prefix.length()));
      if (BotAPI.eventBus.postEvent(commandEvent)) {
        BotAPI.serverConnection.addToSendQueue(""String_Node_Str"",event.message.params[0],user.getUsername());
      }
    }
 else {
      BotAPI.eventBus.postEvent(new UserMessageEvent(user,event.message.params[0],event.message.trailing));
    }
  }
}","@EventHandler public void onRawMessage(RawMessageEvent event){
  if (event.message.command.equals(""String_Node_Str"")) {
    event.setHandled();
    String[] sender=event.message.prefix.split(""String_Node_Str"");
    IRCUser user=event.network.getUser(sender[0]);
    BotAPI.console.sendMessageToConsole(""String_Node_Str"",user.getUsername(),event.message.trailing);
    user.setUsername(event.message.trailing);
    BotAPI.eventBus.postEvent(new UserNicknameChangedEvent(user,sender[0]));
  }
 else   if (event.message.command.equals(""String_Node_Str"")) {
    event.setHandled();
    String[] sender=event.message.prefix.split(""String_Node_Str"");
    IRCUser user=event.network.getUser(sender[0]);
    BotAPI.console.sendMessageToConsole(""String_Node_Str"",event.message.params[0],user.getUsername(),event.message.trailing);
    String prefix=BotAPI.configuration.getCommandPrefix();
    if (event.message.params[0].startsWith(prefix)) {
      UserCommandEvent commandEvent=new UserCommandEvent(user,event.message.params[0],event.message.trailing.substring(prefix.length()));
      if (BotAPI.eventBus.postEvent(commandEvent)) {
        BotAPI.serverConnection.addToSendQueue(""String_Node_Str"",event.message.params[0],user.getUsername());
      }
    }
 else {
      BotAPI.eventBus.postEvent(new UserMessageEvent(user,event.message.params[0],event.message.trailing));
    }
  }
}",0.9876632801161104
98577,"public PluginInfo getPluginInfo(File file){
  if (file == null || !file.exists() || !file.isFile()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  JarFile jar=null;
  try {
    jar=new JarFile(file);
    JarEntry info=jar.getJarEntry(""String_Node_Str"");
    if (info == null) {
      throw null;
    }
    JSONObject object=new JSONObject(jar.getInputStream(info));
    return new PluginInfo(object);
  }
 catch (  IOException e) {
    throw new PluginException(String.format(""String_Node_Str"",file),e);
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public PluginInfo getPluginInfo(File file){
  if (file == null || !file.exists() || !file.isFile()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  JarFile jar=null;
  try {
    jar=new JarFile(file);
    JarEntry info=jar.getJarEntry(""String_Node_Str"");
    if (info == null) {
      return null;
    }
    JSONObject object=new JSONObject(jar.getInputStream(info));
    return new PluginInfo(object);
  }
 catch (  IOException e) {
    throw new PluginException(String.format(""String_Node_Str"",file),e);
  }
 finally {
    if (jar != null) {
      try {
        jar.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.991583779648049
98578,"public void parse() throws IOException {
  for (  Entry<Integer,String> entry : inputBuffer.entrySet()) {
    String command=entry.getValue();
    if (command.startsWith(""String_Node_Str"")) {
      send(""String_Node_Str"" + command.split(""String_Node_Str"")[1]);
      continue;
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      String[] args=command.split(""String_Node_Str"");
      String result=""String_Node_Str"";
      for (int i=2; i < args.length; i++) {
        if (i != 2) {
          result+=""String_Node_Str"";
        }
        result+=args[i];
      }
      send(""String_Node_Str"" + args[1] + ""String_Node_Str""+ result+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + args[1] + ""String_Node_Str""+ nick+ ""String_Node_Str""+ result);
      continue;
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      String[] args=command.split(""String_Node_Str"");
      String result=""String_Node_Str"";
      for (int i=2; i < args.length; i++) {
        if (i != 2) {
          result+=""String_Node_Str"";
        }
        result+=args[i];
      }
      send(""String_Node_Str"" + args[1] + ""String_Node_Str""+ result);
      System.out.println(""String_Node_Str"" + args[1] + ""String_Node_Str""+ nick+ ""String_Node_Str""+ result);
      continue;
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      String[] args=command.split(""String_Node_Str"");
      String result=""String_Node_Str"";
      for (int i=1; i < args.length; i++) {
        if (i != 1) {
          result+=""String_Node_Str"";
        }
        result+=args[i];
      }
      send(""String_Node_Str"" + result);
      stop();
      return;
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      if (!ThreadCommitReader.launched) {
        commitReader=new ThreadCommitReader(this,command.substring(10));
        commitReader.setDaemon(true);
        commitReader.start();
        System.out.println(""String_Node_Str"");
        continue;
      }
    }
 else     if (command.startsWith(""String_Node_Str"")) {
      if (commitReader != null)       commitReader.chan=command.substring(12);
      System.out.println(""String_Node_Str"");
      continue;
    }
    send(command);
  }
  inputBuffer.clear();
  super.parse();
}","public void parse() throws IOException {
synchronized (inputBuffer) {
    for (    Entry<Integer,String> entry : inputBuffer.entrySet()) {
      String command=entry.getValue();
      if (command.startsWith(""String_Node_Str"")) {
        send(""String_Node_Str"" + command.split(""String_Node_Str"")[1]);
        continue;
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        String[] args=command.split(""String_Node_Str"");
        String result=""String_Node_Str"";
        for (int i=2; i < args.length; i++) {
          if (i != 2) {
            result+=""String_Node_Str"";
          }
          result+=args[i];
        }
        send(""String_Node_Str"" + args[1] + ""String_Node_Str""+ result+ ""String_Node_Str"");
        System.out.println(""String_Node_Str"" + args[1] + ""String_Node_Str""+ nick+ ""String_Node_Str""+ result);
        continue;
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        String[] args=command.split(""String_Node_Str"");
        String result=""String_Node_Str"";
        for (int i=2; i < args.length; i++) {
          if (i != 2) {
            result+=""String_Node_Str"";
          }
          result+=args[i];
        }
        send(""String_Node_Str"" + args[1] + ""String_Node_Str""+ result);
        System.out.println(""String_Node_Str"" + args[1] + ""String_Node_Str""+ nick+ ""String_Node_Str""+ result);
        continue;
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        String[] args=command.split(""String_Node_Str"");
        String result=""String_Node_Str"";
        for (int i=1; i < args.length; i++) {
          if (i != 1) {
            result+=""String_Node_Str"";
          }
          result+=args[i];
        }
        send(""String_Node_Str"" + result);
        stop();
        return;
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        if (!ThreadCommitReader.launched) {
          commitReader=new ThreadCommitReader(this,command.substring(10));
          commitReader.setDaemon(true);
          commitReader.start();
          System.out.println(""String_Node_Str"");
          continue;
        }
      }
 else       if (command.startsWith(""String_Node_Str"")) {
        if (commitReader != null)         commitReader.chan=command.substring(12);
        System.out.println(""String_Node_Str"");
        continue;
      }
      send(command);
      try {
        Thread.sleep(500L);
      }
 catch (      InterruptedException e) {
      }
    }
    inputBuffer.clear();
    super.parse();
  }
}",0.8975712777191129
98579,"public void run(){
  if (!launched) {
    launched=true;
    return;
  }
  try {
    while (reciever.isRunning()) {
      pos++;
      if (pos == 60) {
        pos=0;
        try {
          URL changes=new URL(""String_Node_Str"");
          BufferedReader in=new BufferedReader(new InputStreamReader(changes.openStream()));
          String inputLine;
          while ((inputLine=in.readLine()) != null) {
            if (inputLine.equalsIgnoreCase(""String_Node_Str"")) {
              break;
            }
            reciever.inputBuffer.put(reciever.index++,""String_Node_Str"" + chan + ""String_Node_Str""+ inputLine);
          }
          in.close();
        }
 catch (        Exception ex) {
        }
      }
      Thread.sleep(1000L);
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}","public void run(){
  if (!launched) {
    launched=true;
    return;
  }
  try {
    while (reciever.isRunning()) {
      pos++;
      if (pos == 60) {
        pos=0;
        try {
          URL changes=new URL(""String_Node_Str"");
          BufferedReader in=new BufferedReader(new InputStreamReader(changes.openStream()));
          String inputLine;
          while ((inputLine=in.readLine()) != null) {
            if (inputLine.equalsIgnoreCase(""String_Node_Str"")) {
              break;
            }
synchronized (reciever.inputBuffer) {
              reciever.inputBuffer.put(reciever.index++,""String_Node_Str"" + chan + ""String_Node_Str""+ inputLine);
            }
          }
          in.close();
        }
 catch (        Exception ex) {
        }
      }
      Thread.sleep(1000L);
    }
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}",0.9680094786729858
98580,"@Override public void run(){
  try {
    Thread.sleep(120000L);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    BotAPI.console.shutdown();
    return;
  }
  try {
    this.connection.connect(this.connection.getNickname());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    BotAPI.console.shutdown();
  }
}","@Override public void run(){
  try {
    Thread.sleep(60000L);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    BotAPI.console.shutdown();
    return;
  }
  try {
    this.connection.connect(this.connection.getNickname());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    BotAPI.console.shutdown();
  }
}",0.9955022488755624
98581,"@Override public void processQueue(){
  try {
    while (this.connected && this.in.ready()) {
      String line=this.in.readLine();
      IRCMessage message=new IRCMessage(line);
      RawMessageEvent event=new RawMessageEvent(message);
      if (BotAPI.eventBus.postEvent(event)) {
        BotAPI.console.log(Level.FINER,""String_Node_Str"" + message.toString());
      }
      log.log(Level.INFO,""String_Node_Str"" + line);
      this.lastRead=System.currentTimeMillis();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (this.connected) {
    if (System.currentTimeMillis() - this.lastRead > 300000L) {
      this.disconnect(""String_Node_Str"");
      BotAPI.eventBus.postEvent(new ServerDisconnectedEvent(this));
      return;
    }
synchronized (this.sendQueue) {
      Iterator<String> iterator=this.sendQueue.iterator();
      long incremental=0L;
      while (iterator.hasNext()) {
        String command=iterator.next();
        this.out.println(command.trim());
        if (!command.startsWith(""String_Node_Str"") && !command.startsWith(""String_Node_Str"")) {
          BotAPI.console.log(Level.FINER,""String_Node_Str"" + command);
        }
        log.log(Level.INFO,""String_Node_Str"" + command);
        try {
          Thread.sleep(250L * incremental);
        }
 catch (        InterruptedException e) {
        }
        incremental++;
      }
      this.sendQueue.clear();
    }
  }
  if (this.shouldQuit) {
    try {
      Thread.sleep(1000L);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    BotAPI.console.shutdown();
  }
}","@Override public void processQueue(){
  try {
    while (this.connected && this.in.ready()) {
      String line=this.in.readLine();
      IRCMessage message=new IRCMessage(line);
      RawMessageEvent event=new RawMessageEvent(message);
      if (BotAPI.eventBus.postEvent(event)) {
        BotAPI.console.log(Level.FINER,""String_Node_Str"" + message.toString());
      }
      log.log(Level.INFO,""String_Node_Str"" + line);
      this.lastRead=System.currentTimeMillis();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (this.connected) {
    if (System.currentTimeMillis() - this.lastRead > 300000L) {
      this.disconnect(""String_Node_Str"");
      BotAPI.eventBus.postEvent(new ServerDisconnectedEvent(this));
      return;
    }
synchronized (this.sendQueue) {
      Iterator<String> iterator=this.sendQueue.iterator();
      long incremental=0L;
      while (iterator.hasNext()) {
        String command=iterator.next();
        this.out.println(command.trim());
        if (!command.startsWith(""String_Node_Str"") && !command.startsWith(""String_Node_Str"")) {
          BotAPI.console.log(Level.FINER,""String_Node_Str"" + command);
        }
        log.log(Level.INFO,""String_Node_Str"" + command);
        try {
          Thread.sleep(250L * incremental);
        }
 catch (        InterruptedException e) {
        }
        incremental++;
        this.lastRead=System.currentTimeMillis();
      }
      this.sendQueue.clear();
    }
  }
  if (this.shouldQuit) {
    try {
      Thread.sleep(1000L);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    BotAPI.console.shutdown();
  }
}",0.9847839318320146
98582,"public boolean datasetsAreEquivalent(){
  if (sourceDataSet == null || targetDataSet == null)   return false;
  Iterator<Node> iterSource=sourceDataSet.listGraphNodes();
  Iterator<Node> iterTarget=targetDataSet.listGraphNodes();
  if (sourceDataSet.isEmpty() != targetDataSet.isEmpty())   return false;
  if (sourceDataSet.isEmpty() && targetDataSet.isEmpty()) {
    sourceModel=loadModel(sourceFileName,sourceModel);
    targetModel=loadModel(targetFileName,targetModel);
    return modelsAreEquivalent();
  }
  for (; iterSource.hasNext(); ) {
    Node node=iterSource.next();
    Graph sourceGraph=sourceDataSet.getGraph(node);
    Graph targetGraph=targetDataSet.getGraph(node);
    if (!sourceGraph.isIsomorphicWith(targetGraph))     return false;
  }
  return true;
}","public boolean datasetsAreEquivalent(){
  if (sourceDataSet == null || targetDataSet == null)   return false;
  Iterator<Node> iterSource=sourceDataSet.listGraphNodes();
  Iterator<Node> iterTarget=targetDataSet.listGraphNodes();
  if (sourceDataSet.isEmpty() != targetDataSet.isEmpty())   return false;
  if (!iterSource.hasNext() && !iterTarget.hasNext()) {
    sourceModel=loadModel(sourceFileName,sourceModel);
    targetModel=loadModel(targetFileName,targetModel);
    return modelsAreEquivalent();
  }
  for (; iterSource.hasNext(); ) {
    Node node=iterSource.next();
    Graph sourceGraph=sourceDataSet.getGraph(node);
    Graph targetGraph=targetDataSet.getGraph(node);
    if (!sourceGraph.isIsomorphicWith(targetGraph))     return false;
  }
  return true;
}",0.9481865284974094
98583,"protected BusinessCard createBusinessCard(String name,long heartBeat,List<Command> commands,String description){
  BusinessCard card=new BusinessCard(name,name);
  card.setPeriod(heartBeat);
  card.setCommandsIn(commands);
  card.setDescription(description);
  card.setIssuedBy(ID);
  return card;
}","protected BusinessCard createBusinessCard(String id,String name,long heartBeat,List<Command> commands,String description){
  BusinessCard card=new BusinessCard(name,name);
  card.setPeriod(heartBeat);
  card.setCommandsIn(commands);
  card.setDescription(description);
  card.setIssuedBy(id);
  return card;
}",0.9769736842105264
98584,"@Override public BusinessCard getBusinessCard(){
  if (card == null) {
    card=createBusinessCard(getName(),getHeartbeat(),getCommands(),getDescription());
  }
  return card.touch();
}","@Override public BusinessCard getBusinessCard(){
  if (card == null) {
    card=createBusinessCard(getID(),getName(),getHeartbeat(),getCommands(),getDescription());
  }
  return card.touch();
}",0.9788359788359788
98585,"/** 
 * @param context the context to set
 */
public void setContext(CamelContext context){
  this.context=context;
}","/** 
 * @param context the context to set
 */
@Override public void setContext(CamelContext context){
  this.context=context;
}",0.9590163934426228
98586,"/** 
 * @return the context
 */
public CamelContext getContext(){
  return context;
}","/** 
 * @return the context
 */
@Override public CamelContext getContext(){
  return context;
}",0.9444444444444444
98587,"/** 
 * Test method for   {@link org.hbird.business.core.StartableEntity#createBusinessCard(String,long,java.util.List)}.
 */
@Test public void testCreateBusinessCard(){
  BusinessCard card=part.createBusinessCard(NAME,PERIOD,commands,DESCRIPTION);
  assertNotNull(card);
  assertEquals(NAME,card.getName());
  assertEquals(NAME,card.getIssuedBy());
  assertEquals(PERIOD,card.getPeriod());
  assertEquals(DESCRIPTION,card.getDescription());
  Map<String,Command> map=card.getCommandsIn();
  assertNotNull(map);
  assertEquals(2,map.size());
  assertTrue(map.containsKey(CMD_1));
  assertEquals(cmd1,map.get(CMD_1));
  assertTrue(map.containsKey(CMD_2));
  assertEquals(cmd2,map.get(CMD_2));
  inOrder.verify(cmd1,times(1)).getName();
  inOrder.verify(cmd2,times(1)).getName();
}","/** 
 * Test method for   {@link org.hbird.business.core.StartableEntity#createBusinessCard(String,long,java.util.List)}.
 */
@Test public void testCreateBusinessCard(){
  BusinessCard card=part.createBusinessCard(ID,NAME,PERIOD,commands,DESCRIPTION);
  assertNotNull(card);
  assertEquals(NAME,card.getName());
  assertEquals(ID,card.getIssuedBy());
  assertEquals(PERIOD,card.getPeriod());
  assertEquals(DESCRIPTION,card.getDescription());
  Map<String,Command> map=card.getCommandsIn();
  assertNotNull(map);
  assertEquals(2,map.size());
  assertTrue(map.containsKey(CMD_1));
  assertEquals(cmd1,map.get(CMD_1));
  assertTrue(map.containsKey(CMD_2));
  assertEquals(cmd2,map.get(CMD_2));
  inOrder.verify(cmd1,times(1)).getName();
  inOrder.verify(cmd2,times(1)).getName();
}",0.9942270686337396
98588,"/** 
 * Test method for   {@link org.hbird.business.core.StartableEntity#getBusinessCard()}.
 */
@Test public void testGetBusinessCard(){
  assertNull(part.card);
  BusinessCard card=part.getBusinessCard();
  assertNotNull(card);
  assertEquals(NAME,card.getName());
  assertEquals(NAME,card.getIssuedBy());
  assertEquals(StartableEntity.DEFAULT_HEARTBEAT,card.getPeriod());
  Map<String,Command> map=card.getCommandsIn();
  assertNotNull(map);
  assertEquals(2,map.size());
  assertTrue(map.containsKey(StartComponent.class.getSimpleName()));
  assertNotNull(map.get(StartComponent.class.getSimpleName()));
  assertTrue(map.containsKey(StopComponent.class.getSimpleName()));
  assertNotNull(map.get(StopComponent.class.getSimpleName()));
  assertEquals(card,part.card);
  assertEquals(card,part.getBusinessCard());
}","/** 
 * Test method for   {@link org.hbird.business.core.StartableEntity#getBusinessCard()}.
 */
@Test public void testGetBusinessCard(){
  assertNull(part.card);
  BusinessCard card=part.getBusinessCard();
  assertNotNull(card);
  assertEquals(NAME,card.getName());
  assertEquals(ID,card.getIssuedBy());
  assertEquals(StartableEntity.DEFAULT_HEARTBEAT,card.getPeriod());
  Map<String,Command> map=card.getCommandsIn();
  assertNotNull(map);
  assertEquals(2,map.size());
  assertTrue(map.containsKey(StartComponent.class.getSimpleName()));
  assertNotNull(map.get(StartComponent.class.getSimpleName()));
  assertTrue(map.containsKey(StopComponent.class.getSimpleName()));
  assertNotNull(map.get(StopComponent.class.getSimpleName()));
  assertEquals(card,part.card);
  assertEquals(card,part.getBusinessCard());
}",0.996328029375765
98589,"/** 
 * @param configuration
 * @param failOldRequests
 * @param dataAccess
 * @param orbitPrediction
 * @param optimizer
 */
public TrackingSupport(C configuration,ICatalogue catalogue,IOrbitPrediction orbitPrediction,IPointingDataOptimizer<C> optimizer){
  this.configuration=configuration;
  this.catalogue=catalogue;
  this.orbitPrediction=orbitPrediction;
  this.optimizer=optimizer;
}","/** 
 * @param configuration
 * @param failOldRequests
 * @param dataAccess
 * @param orbitPrediction
 * @param optimizer
 */
public TrackingSupport(C configuration,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<C> optimizer){
  this.configuration=configuration;
  this.catalogue=catalogue;
  this.calculator=calculator;
  this.optimizer=optimizer;
}",0.8534370946822308
98590,"/** 
 * @see org.hbird.exchange.groundstation.ITrackingDevice#track(org.hbird.exchange.groundstation.Track)
 */
@Override public List<CommandBase> track(Track command){
  LOG.debug(""String_Node_Str"");
  List<String> missing=command.checkArguments();
  if (!missing.isEmpty()) {
    LOG.error(""String_Node_Str"",command.getClass().getSimpleName(),missing);
    return NO_COMMANDS;
  }
  LocationContactEvent contact=command.getLocationContactEvent();
  Satellite satellite=command.getSatellite();
  if (!validateArgument(contact,StandardArguments.START)) {
    return NO_COMMANDS;
  }
  if (!validateArgument(satellite,StandardArguments.SATELLITE)) {
    return NO_COMMANDS;
  }
  String groundStationId=configuration.getGroundstationId();
  GroundStation groundStation=null;
  try {
    groundStation=catalogue.getGroundStationByName(groundStationId);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",groundStationId,e);
    return NO_COMMANDS;
  }
  if (groundStation == null) {
    LOG.error(""String_Node_Str"",groundStationId);
    return NO_COMMANDS;
  }
  long now=System.currentTimeMillis();
  if (!validateByTime(contact.getStartTime(),now,configuration.isSkipOutDatedCommands())) {
    return NO_COMMANDS;
  }
  if (!isTrackingPossible(contact,groundStation,satellite)) {
    return NO_COMMANDS;
  }
  LOG.info(""String_Node_Str"",satellite,groundStation);
  List<PointingData> pointingData=null;
  try {
    pointingData=orbitPrediction.requestPointingDataFor(contact,groundStation,satellite,configuration.getCommandInterval());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",new Object[]{groundStation.getGroundStationId(),satellite.getSatelliteId(),Dates.toIso8601DateFormat(contact.getStartTime()),e});
    return NO_COMMANDS;
  }
  LOG.debug(""String_Node_Str"");
  pointingData=optimize(pointingData,configuration,optimizer);
  LOG.debug(""String_Node_Str"");
  List<CommandBase> commands=new LinkedList<CommandBase>();
  commands.addAll(createPreContactCommands(groundStation,satellite,pointingData,configuration,command));
  commands.addAll(createContactCommands(groundStation,satellite,pointingData,configuration,command));
  commands.addAll(createPostContactCommands(groundStation,satellite,pointingData,configuration,command));
  int size=commands.size();
  String firstCommand=new DateTime(commands.get(0).getExecutionTime()).toString(ISODateTimeFormat.dateTime());
  String lastCommand=new DateTime(commands.get(size - 1).getExecutionTime()).toString(ISODateTimeFormat.dateTime());
  LOG.info(""String_Node_Str"",new Object[]{size,satellite,groundStation,firstCommand,lastCommand});
  return commands;
}","/** 
 * @see org.hbird.exchange.groundstation.ITrackingDevice#track(org.hbird.exchange.groundstation.Track)
 */
@Override public List<CommandBase> track(Track command){
  LOG.debug(""String_Node_Str"");
  List<String> missing=command.checkArguments();
  if (!missing.isEmpty()) {
    LOG.error(""String_Node_Str"",command.getClass().getSimpleName(),missing);
    return NO_COMMANDS;
  }
  LocationContactEvent contact=command.getLocationContactEvent();
  Satellite satellite=command.getSatellite();
  if (!validateArgument(contact,StandardArguments.START)) {
    return NO_COMMANDS;
  }
  if (!validateArgument(satellite,StandardArguments.SATELLITE)) {
    return NO_COMMANDS;
  }
  String groundStationId=configuration.getGroundstationId();
  GroundStation groundStation=null;
  try {
    groundStation=catalogue.getGroundStationByName(groundStationId);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",groundStationId,e);
    return NO_COMMANDS;
  }
  if (groundStation == null) {
    LOG.error(""String_Node_Str"",groundStationId);
    return NO_COMMANDS;
  }
  long now=System.currentTimeMillis();
  if (!validateByTime(contact.getStartTime(),now,configuration.isSkipOutDatedCommands())) {
    return NO_COMMANDS;
  }
  if (!isTrackingPossible(contact,groundStation,satellite)) {
    return NO_COMMANDS;
  }
  LOG.info(""String_Node_Str"",satellite,groundStation);
  List<PointingData> pointingData=null;
  try {
    pointingData=calculator.calculateContactData(contact,groundStation,configuration.getCommandInterval());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",new Object[]{groundStation.getGroundStationId(),satellite.getSatelliteId(),Dates.toIso8601DateFormat(contact.getStartTime()),e});
    return NO_COMMANDS;
  }
  LOG.debug(""String_Node_Str"");
  pointingData=optimize(pointingData,configuration,optimizer);
  LOG.debug(""String_Node_Str"");
  List<CommandBase> commands=new LinkedList<CommandBase>();
  commands.addAll(createPreContactCommands(groundStation,satellite,pointingData,configuration,command));
  commands.addAll(createContactCommands(groundStation,satellite,pointingData,configuration,command));
  commands.addAll(createPostContactCommands(groundStation,satellite,pointingData,configuration,command));
  int size=commands.size();
  String firstCommand=new DateTime(commands.get(0).getExecutionTime()).toString(ISODateTimeFormat.dateTime());
  String lastCommand=new DateTime(commands.get(size - 1).getExecutionTime()).toString(ISODateTimeFormat.dateTime());
  LOG.info(""String_Node_Str"",new Object[]{size,satellite,groundStation,firstCommand,lastCommand});
  return commands;
}",0.9781493444803344
98591,"protected abstract TrackingSupport<C> createTrackingSupport(C config,ICatalogue catalogue,IOrbitPrediction prediction,IPointingDataOptimizer<C> optimizer);","protected abstract TrackingSupport<C> createTrackingSupport(C config,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<C> optimizer);",0.8481012658227848
98592,"@Override public void doConfigure(){
  if (part == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  CamelContext camelContext=getContext();
  driverContext=createDriverContext(camelContext,part);
  String name=part.getName();
  C config=driverContext.getConfiguration();
  NettyComponent nettyComponent=camelContext.getComponent(""String_Node_Str"",NettyComponent.class);
  nettyComponent.setConfiguration(createNettyConfiguration(config));
  LOG.info(""String_Node_Str"",name);
  inMemoryScheduler.setInjectUrl(asRoute(""String_Node_Str"",name));
  from(asRoute(""String_Node_Str"",name)).doTry().inOut(asRoute(""String_Node_Str"",config.getDeviceHost(),config.getDevicePort())).to(asRoute(""String_Node_Str"",name)).doCatch(Exception.class).to(asRoute(""String_Node_Str"",name)).end();
  ResponseHandlersMap<C,String,String> handlers=getResponseHandlerMap(driverContext);
  from(asRoute(""String_Node_Str"",name)).bean(handlers).split(body()).inOnly(asRoute(""String_Node_Str"",name));
  ICatalogue catalogue=ApiFactory.getCatalogueApi(part.getID());
  IOrbitPrediction prediction=ApiFactory.getOrbitPredictionApi(part.getID());
  IPointingDataOptimizer<C> optimizer=createOptimizer(config.getPointingDataOptimzerClassName());
  TrackingSupport<C> tracker=createTrackingSupport(config,catalogue,prediction,optimizer);
  GroundStationCommandFilter commandFilter=new GroundStationCommandFilter(config);
  from(StandardEndpoints.COMMANDS + ""String_Node_Str"").filter().method(commandFilter,""String_Node_Str"").log(asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText(),name)).split().method(tracker,""String_Node_Str"").setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(verifier,""String_Node_Str"").bean(inMemoryScheduler,""String_Node_Str"").routeId(asRoute(""String_Node_Str"",name));
  from(inMemoryScheduler.getInjectUrl()).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(new NativeCommandExtractor()).log(LoggingLevel.INFO,asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText(),name)).to(asRoute(""String_Node_Str"",name));
  ProcessorDefinition<?> publish=from(asRoute(""String_Node_Str"",name));
  addInjectionRoute(publish);
  from(asRoute(""String_Node_Str"",name)).bean(new OnChange()).choice().when(header(StandardArguments.VALUE_HAS_CHANGED).isEqualTo(false)).log(LoggingLevel.DEBUG,asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText())).otherwise().to(asRoute(""String_Node_Str"",name));
}","@Override public void doConfigure(){
  if (part == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  CamelContext camelContext=getContext();
  driverContext=createDriverContext(camelContext,part);
  String name=part.getName();
  C config=driverContext.getConfiguration();
  NettyComponent nettyComponent=camelContext.getComponent(""String_Node_Str"",NettyComponent.class);
  nettyComponent.setConfiguration(createNettyConfiguration(config));
  LOG.info(""String_Node_Str"",name);
  inMemoryScheduler.setInjectUrl(asRoute(""String_Node_Str"",name));
  from(asRoute(""String_Node_Str"",name)).doTry().inOut(asRoute(""String_Node_Str"",config.getDeviceHost(),config.getDevicePort())).to(asRoute(""String_Node_Str"",name)).doCatch(Exception.class).to(asRoute(""String_Node_Str"",name)).end();
  ResponseHandlersMap<C,String,String> handlers=getResponseHandlerMap(driverContext);
  from(asRoute(""String_Node_Str"",name)).bean(handlers).split(body()).inOnly(asRoute(""String_Node_Str"",name));
  ICatalogue catalogue=ApiFactory.getCatalogueApi(part.getID());
  PointingDataCalculator calulator=new PointingDataCalculator();
  IPointingDataOptimizer<C> optimizer=createOptimizer(config.getPointingDataOptimzerClassName());
  TrackingSupport<C> tracker=createTrackingSupport(config,catalogue,calulator,optimizer);
  GroundStationCommandFilter commandFilter=new GroundStationCommandFilter(config);
  from(StandardEndpoints.COMMANDS + ""String_Node_Str"").filter().method(commandFilter,""String_Node_Str"").log(asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText(),name)).split().method(tracker,""String_Node_Str"").setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(verifier,""String_Node_Str"").bean(inMemoryScheduler,""String_Node_Str"").routeId(asRoute(""String_Node_Str"",name));
  from(inMemoryScheduler.getInjectUrl()).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(new NativeCommandExtractor()).log(LoggingLevel.INFO,asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText(),name)).to(asRoute(""String_Node_Str"",name));
  ProcessorDefinition<?> publish=from(asRoute(""String_Node_Str"",name));
  addInjectionRoute(publish);
  from(asRoute(""String_Node_Str"",name)).bean(new OnChange()).choice().when(header(StandardArguments.VALUE_HAS_CHANGED).isEqualTo(false)).log(LoggingLevel.DEBUG,asRoute(""String_Node_Str"",simple(""String_Node_Str"").getText())).otherwise().to(asRoute(""String_Node_Str"",name));
}",0.9738656987295826
98593,"/** 
 * @see org.hbird.business.groundstation.hamlib.HamlibDriver#createTrackingSupport(org.hbird.business.groundstation.configuration.GroundStationDriverConfiguration,org.hbird.business.api.ICatalogue,org.hbird.business.api.IOrbitPrediction,org.hbird.exchange.groundstation.IPointingDataOptimizer)
 */
@Override protected TrackingSupport<RadioDriverConfiguration> createTrackingSupport(RadioDriverConfiguration config,ICatalogue catalogue,IOrbitPrediction prediction,IPointingDataOptimizer<RadioDriverConfiguration> optimizer){
  return new HamlibRadioTracker(config,catalogue,prediction,optimizer);
}","/** 
 * @see org.hbird.business.groundstation.hamlib.HamlibDriver#createTrackingSupport(org.hbird.business.groundstation.configuration.GroundStationDriverConfiguration,org.hbird.business.api.ICatalogue,org.hbird.business.api.IOrbitPrediction,org.hbird.exchange.groundstation.IPointingDataOptimizer)
 */
@Override protected TrackingSupport<RadioDriverConfiguration> createTrackingSupport(RadioDriverConfiguration config,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<RadioDriverConfiguration> optimizer){
  return new HamlibRadioTracker(config,catalogue,calculator,optimizer);
}",0.9355371900826446
98594,"public HamlibRadioTracker(RadioDriverConfiguration configuration,ICatalogue catalogue,IOrbitPrediction prediction,IPointingDataOptimizer<RadioDriverConfiguration> optimizer){
  super(configuration,catalogue,prediction,optimizer);
}","public HamlibRadioTracker(RadioDriverConfiguration configuration,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<RadioDriverConfiguration> optimizer){
  super(configuration,catalogue,calculator,optimizer);
}",0.8333333333333334
98595,"/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RadioDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    TypeConverter typeConverter=driverContext.getTypeConverter();
    String linkName=getLinkName(driverContext);
    String parameterName=String.format(""String_Node_Str"",linkName,PARAMETER);
    String description=String.format(""String_Node_Str"",linkName);
    Parameter param=new Parameter(driverContext.getPart().getID() + ""String_Node_Str"" + parameterName,parameterName);
    param.setDescription(description);
    param.setValue(typeConverter.convertTo(Long.class,HamlibProtocolHelper.toMap(response).get(PARAMETER)));
    param.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(1);
    result.add(param);
  }
  return result;
}","/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RadioDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    TypeConverter typeConverter=driverContext.getTypeConverter();
    String linkName=getLinkName(driverContext);
    String parameterName=String.format(""String_Node_Str"",linkName,PARAMETER);
    String description=String.format(""String_Node_Str"",linkName);
    String id=driverContext.getPart().getID();
    Parameter param=new Parameter(id + ""String_Node_Str"" + parameterName,parameterName);
    param.setIssuedBy(id);
    param.setDescription(description);
    param.setValue(typeConverter.convertTo(Long.class,HamlibProtocolHelper.toMap(response).get(PARAMETER)));
    param.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(1);
    result.add(param);
  }
  return result;
}",0.9526000920386564
98596,"/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RadioDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    TypeConverter converter=driverContext.getTypeConverter();
    String linkName=GetFrequency.getLinkName(driverContext);
    String name=String.format(""String_Node_Str"",linkName);
    String description=String.format(""String_Node_Str"",linkName);
    Parameter param=new Parameter(driverContext.getPart().getID() + ""String_Node_Str"" + name,name);
    param.setDescription(description);
    param.setValue(converter.convertTo(Long.class,HamlibProtocolHelper.toMap(response).get(KEY)));
    param.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(1);
    result.add(param);
  }
  return result;
}","/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RadioDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    TypeConverter converter=driverContext.getTypeConverter();
    String linkName=GetFrequency.getLinkName(driverContext);
    String name=String.format(""String_Node_Str"",linkName);
    String description=String.format(""String_Node_Str"",linkName);
    String id=driverContext.getPart().getID();
    Parameter param=new Parameter(id + ""String_Node_Str"" + name,name);
    param.setIssuedBy(id);
    param.setDescription(description);
    param.setValue(converter.convertTo(Long.class,HamlibProtocolHelper.toMap(response).get(KEY)));
    param.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(1);
    result.add(param);
  }
  return result;
}",0.9508822126847878
98597,"/** 
 * @see org.hbird.business.groundstation.hamlib.HamlibDriver#createTrackingSupport(org.hbird.business.groundstation.configuration.GroundStationDriverConfiguration,org.hbird.business.api.ICatalogue,org.hbird.business.api.IOrbitPrediction,org.hbird.exchange.groundstation.IPointingDataOptimizer)
 */
@Override protected TrackingSupport<RotatorDriverConfiguration> createTrackingSupport(RotatorDriverConfiguration config,ICatalogue catalogue,IOrbitPrediction prediction,IPointingDataOptimizer<RotatorDriverConfiguration> optimizer){
  return new HamlibRotatorTracker(config,catalogue,prediction,optimizer);
}","/** 
 * @see org.hbird.business.groundstation.hamlib.HamlibDriver#createTrackingSupport(org.hbird.business.groundstation.configuration.GroundStationDriverConfiguration,org.hbird.business.api.ICatalogue,org.hbird.business.api.IOrbitPrediction,org.hbird.exchange.groundstation.IPointingDataOptimizer)
 */
@Override protected TrackingSupport<RotatorDriverConfiguration> createTrackingSupport(RotatorDriverConfiguration config,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<RotatorDriverConfiguration> optimizer){
  return new HamlibRotatorTracker(config,catalogue,calculator,optimizer);
}",0.936378466557912
98598,"/** 
 * @see org.hbird.business.groundstation.base.HamlibDriver#createResponseHandlers() -     
 */
@Override protected List<ResponseHandler<RotatorDriverConfiguration,String,String>> createResponseHandlers(){
  List<ResponseHandler<RotatorDriverConfiguration,String,String>> list=new ArrayList<ResponseHandler<RotatorDriverConfiguration,String,String>>(4);
  list.add(new GetPosition());
  list.add(new Park());
  list.add(new Reset());
  list.add(new SetPosition());
  return list;
}","/** 
 * @see org.hbird.business.groundstation.base.HamlibDriver#createResponseHandlers() -
 */
@Override protected List<ResponseHandler<RotatorDriverConfiguration,String,String>> createResponseHandlers(){
  List<ResponseHandler<RotatorDriverConfiguration,String,String>> list=new ArrayList<ResponseHandler<RotatorDriverConfiguration,String,String>>(4);
  list.add(new GetPosition());
  list.add(new Park());
  list.add(new Reset());
  list.add(new SetPosition());
  return list;
}",0.9948186528497408
98599,"public HamlibRotatorTracker(RotatorDriverConfiguration config,ICatalogue catalogue,IOrbitPrediction prediction,IPointingDataOptimizer<RotatorDriverConfiguration> optimizer){
  super(config,catalogue,prediction,optimizer);
}","public HamlibRotatorTracker(RotatorDriverConfiguration config,ICatalogue catalogue,PointingDataCalculator calculator,IPointingDataOptimizer<RotatorDriverConfiguration> optimizer){
  super(config,catalogue,calculator,optimizer);
}",0.827433628318584
98600,"/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RotatorDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    Map<String,String> responseParams=HamlibProtocolHelper.toMap(response);
    String issuedBy=driverContext.getPart().getID();
    TypeConverter typeConverter=driverContext.getTypeConverter();
    Parameter azimuth=new Parameter(issuedBy + ""String_Node_Str"" + PARAMETER_AZIMUTH,PARAMETER_AZIMUTH);
    azimuth.setDescription(""String_Node_Str"");
    azimuth.setValue(typeConverter.convertTo(Double.class,responseParams.get(PARAMETER_AZIMUTH)));
    azimuth.setUnit(""String_Node_Str"");
    Parameter elevation=new Parameter(issuedBy + ""String_Node_Str"" + PARAMETER_ELEVEATION,PARAMETER_ELEVEATION);
    elevation.setDescription(""String_Node_Str"");
    elevation.setValue(typeConverter.convertTo(Double.class,responseParams.get(PARAMETER_ELEVEATION)));
    elevation.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(2);
    result.add(azimuth);
    result.add(elevation);
  }
  return result;
}","/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(java.lang.Object,org.hbird.exchange.interfaces.IPart)
 */
@Override public List<IEntityInstance> handle(DriverContext<RotatorDriverConfiguration,String,String> driverContext,String response){
  List<IEntityInstance> result;
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    result=Collections.emptyList();
  }
 else {
    Map<String,String> responseParams=HamlibProtocolHelper.toMap(response);
    String id=driverContext.getPart().getID();
    TypeConverter typeConverter=driverContext.getTypeConverter();
    Parameter azimuth=new Parameter(id + ""String_Node_Str"" + PARAMETER_AZIMUTH,PARAMETER_AZIMUTH);
    azimuth.setIssuedBy(id);
    azimuth.setDescription(""String_Node_Str"");
    azimuth.setValue(typeConverter.convertTo(Double.class,responseParams.get(PARAMETER_AZIMUTH)));
    azimuth.setUnit(""String_Node_Str"");
    Parameter elevation=new Parameter(id + ""String_Node_Str"" + PARAMETER_ELEVEATION,PARAMETER_ELEVEATION);
    elevation.setIssuedBy(id);
    elevation.setDescription(""String_Node_Str"");
    elevation.setValue(typeConverter.convertTo(Double.class,responseParams.get(PARAMETER_ELEVEATION)));
    elevation.setUnit(""String_Node_Str"");
    result=new ArrayList<IEntityInstance>(2);
    result.add(azimuth);
    result.add(elevation);
  }
  return result;
}",0.7210682492581603
98601,"/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(org.hbird.business.groundstation.DriverContext,java.lang.Object)
 */
@Override public List<IEntityInstance> handle(DriverContext<RotatorDriverConfiguration,String,String> driverContext,String response){
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    return Collections.emptyList();
  }
 else {
    List<IEntityInstance> result=new ArrayList<IEntityInstance>(2);
    TypeConverter converter=driverContext.getTypeConverter();
    String issuedBy=driverContext.getPart().getID();
    Map<String,String> map=HamlibProtocolHelper.toMap(response);
    String args=map.get(KEY);
    String azimuthValue=StringUtils.substringBefore(args,""String_Node_Str"").trim();
    String elevationValue=StringUtils.substringAfter(args,""String_Node_Str"").trim();
    Parameter azimuth=new Parameter(issuedBy + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
    azimuth.setDescription(""String_Node_Str"");
    azimuth.setValue(converter.convertTo(Double.class,azimuthValue));
    azimuth.setUnit(""String_Node_Str"");
    Parameter elevation=new Parameter(issuedBy + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
    elevation.setDescription(""String_Node_Str"");
    elevation.setValue(converter.convertTo(Double.class,elevationValue));
    elevation.setUnit(""String_Node_Str"");
    result.add(azimuth);
    result.add(elevation);
    return result;
  }
}","/** 
 * @see org.hbird.business.groundstation.device.response.ResponseHandler#handle(org.hbird.business.groundstation.DriverContext,java.lang.Object)
 */
@Override public List<IEntityInstance> handle(DriverContext<RotatorDriverConfiguration,String,String> driverContext,String response){
  if (HamlibProtocolHelper.isErrorResponse(response)) {
    return Collections.emptyList();
  }
 else {
    List<IEntityInstance> result=new ArrayList<IEntityInstance>(2);
    TypeConverter converter=driverContext.getTypeConverter();
    String id=driverContext.getPart().getID();
    Map<String,String> map=HamlibProtocolHelper.toMap(response);
    String args=map.get(KEY);
    String azimuthValue=StringUtils.substringBefore(args,""String_Node_Str"").trim();
    String elevationValue=StringUtils.substringAfter(args,""String_Node_Str"").trim();
    Parameter azimuth=new Parameter(id + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
    azimuth.setIssuedBy(id);
    azimuth.setDescription(""String_Node_Str"");
    azimuth.setValue(converter.convertTo(Double.class,azimuthValue));
    azimuth.setUnit(""String_Node_Str"");
    Parameter elevation=new Parameter(id + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
    elevation.setIssuedBy(id);
    elevation.setDescription(""String_Node_Str"");
    elevation.setValue(converter.convertTo(Double.class,elevationValue));
    elevation.setUnit(""String_Node_Str"");
    result.add(azimuth);
    result.add(elevation);
    return result;
  }
}",0.8129251700680272
98602,"@Test public void testProcess(){
  ImportEndpoint endpoint=new ImportEndpoint();
  endpoint.filename=""String_Node_Str"";
  ImportAccessor accessor=new ImportAccessor(endpoint);
  try {
    List<Object> objects=accessor.getObjects();
    Map<String,Object> readObjects=new HashMap<String,Object>();
    for (    Object obj : objects) {
      System.out.println(""String_Node_Str"" + ((Named)obj).getName());
      readObjects.put(((Named)obj).getName(),obj);
    }
    assertTrue(readObjects.size() == 8);
    Parameter para=null;
    State statePara=null;
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Integer);
    assertTrue(((Integer)para.getValue()) == 1);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Double);
    assertTrue(((Double)para.getValue()) == 2.0);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    statePara=(State)readObjects.get(""String_Node_Str"");
    assertTrue(statePara.getDescription().equals(""String_Node_Str""));
    assertTrue(statePara.getValue() instanceof Boolean);
    assertTrue(((Boolean)statePara.getValue()) == false);
    assertTrue(statePara.getIsStateOf().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Float);
    assertTrue(((Float)para.getValue()) == 2.0);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    SetParameter task=null;
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    task=(SetParameter)readObjects.get(""String_Node_Str"");
    assertTrue(task.getDescription().equals(""String_Node_Str""));
    assertTrue(task.getExecutionDelay() == 3000);
    assertTrue(task.getParameter().getName().equals(""String_Node_Str""));
    assertTrue(((Double)task.getParameter().getValue()) == 5);
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    task=(SetParameter)readObjects.get(""String_Node_Str"");
    assertTrue(task.getDescription().equals(""String_Node_Str""));
    assertTrue(task.getExecutionDelay() == 0);
    assertTrue(task.getParameter().getName().equals(""String_Node_Str""));
    assertTrue(((Float)task.getParameter().getValue()) == 3);
    CommandRequest request=null;
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    request=(CommandRequest)readObjects.get(""String_Node_Str"");
    assertTrue(request.getArguments().size() == 2);
    assertTrue(request.getLockStates().size() == 1);
    assertTrue(request.getLockStates().get(0).equals(""String_Node_Str""));
    assertTrue(request.getTasks().size() == 1);
    assertTrue(request.getTasks().get(0).getName().equals(""String_Node_Str""));
    assertTrue(((SetParameter)request.getTasks().get(0)).getParameter().getName().equals(""String_Node_Str""));
    assertTrue(((Float)((SetParameter)request.getTasks().get(0)).getParameter().getValue()) == 4);
    assertTrue(request.getCommand().getName().equals(""String_Node_Str""));
    assertTrue(request.getCommand().getDescription().equals(""String_Node_Str""));
    assertTrue(request.getCommand().getReleaseTime() == 0);
    assertTrue(request.getCommand().getExecutionTime() == 312456789);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Test public void testProcess(){
  ImportEndpoint endpoint=new ImportEndpoint();
  endpoint.filename=""String_Node_Str"";
  ImportAccessor accessor=new ImportAccessor(endpoint);
  try {
    List<Object> objects=accessor.getObjects();
    Map<String,Object> readObjects=new HashMap<String,Object>();
    for (    Object obj : objects) {
      System.out.println(""String_Node_Str"" + ((Named)obj).getName());
      readObjects.put(((Named)obj).getName(),obj);
    }
    assertTrue(readObjects.size() == 8);
    Parameter para=null;
    State statePara=null;
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Integer);
    assertTrue(((Integer)para.getValue()) == 1);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Double);
    assertTrue(((Double)para.getValue()) == 2.0);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    statePara=(State)readObjects.get(""String_Node_Str"");
    assertTrue(statePara.getDescription().equals(""String_Node_Str""));
    assertTrue(statePara.getValue() instanceof Boolean);
    assertTrue((statePara.getValue()) == false);
    assertTrue(statePara.getIsStateOf().equals(""String_Node_Str""));
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    para=(Parameter)readObjects.get(""String_Node_Str"");
    assertTrue(para.getDescription().equals(""String_Node_Str""));
    assertTrue(para.getValue() instanceof Float);
    assertTrue(((Float)para.getValue()) == 2.0);
    assertTrue(para.getUnit().equals(""String_Node_Str""));
    SetParameter task=null;
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    task=(SetParameter)readObjects.get(""String_Node_Str"");
    assertTrue(task.getDescription().equals(""String_Node_Str""));
    assertTrue(task.getExecutionDelay() == 3000);
    assertTrue(task.getParameter().getName().equals(""String_Node_Str""));
    assertTrue(((Double)task.getParameter().getValue()) == 5);
    assertTrue(readObjects.get(""String_Node_Str"") != null);
    task=(SetParameter)readObjects.get(""String_Node_Str"");
    assertTrue(task.getDescription().equals(""String_Node_Str""));
    assertTrue(task.getExecutionDelay() == 0);
    assertTrue(task.getParameter().getName().equals(""String_Node_Str""));
    assertTrue(((Float)task.getParameter().getValue()) == 3);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8363187152563311
98603,"@Override public void doConfigure(){
  String name=part.getQualifiedName();
  String nameDot=part.getQualifiedName(""String_Node_Str"");
  from(StandardEndpoints.COMMANDS + ""String_Node_Str"").log(""String_Node_Str"" + simple(""String_Node_Str"").getText() + ""String_Node_Str""+ name+ ""String_Node_Str"").split().method(part,""String_Node_Str"").setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(verifier,""String_Node_Str"").bean(inMemoryScheduler,""String_Node_Str"").routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"" + nameDot + ""String_Node_Str"").bean(verifier,""String_Node_Str"").choice().when(simple(""String_Node_Str"")).stop().otherwise().to(StandardEndpoints.MONITORING).end().routeId(name + ""String_Node_Str"");
  from(inMemoryScheduler.getInjectUrl()).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(new NativeCommandExtractor()).log(LoggingLevel.INFO,""String_Node_Str"" + simple(""String_Node_Str"").getText() + ""String_Node_Str""+ name).inOut(""String_Node_Str"" + getAddress()).removeHeader(""String_Node_Str"").to(""String_Node_Str"" + nameDot + ""String_Node_Str"").routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"").split().method(verifier,""String_Node_Str"").to(StandardEndpoints.MONITORING).routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"" + nameDot).bean(new OnChange()).choice().when(header(""String_Node_Str"").isEqualTo(false)).log(LoggingLevel.INFO,""String_Node_Str"").otherwise().setHeader(StandardArguments.NAME,simple(""String_Node_Str"")).setHeader(StandardArguments.ISSUED_BY,simple(""String_Node_Str"")).setHeader(StandardArguments.TYPE,simple(""String_Node_Str"")).setHeader(StandardArguments.CLASS,simple(""String_Node_Str"")).to(StandardEndpoints.MONITORING);
}","@Override public void doConfigure(){
  String name=part.getQualifiedName();
  String nameDot=part.getQualifiedName(""String_Node_Str"");
  inMemoryScheduler.setInjectUrl(""String_Node_Str"" + this.getPart().getName());
  from(StandardEndpoints.COMMANDS + ""String_Node_Str"").log(""String_Node_Str"" + simple(""String_Node_Str"").getText() + ""String_Node_Str""+ name+ ""String_Node_Str"").split().method(part,""String_Node_Str"").setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(verifier,""String_Node_Str"").bean(inMemoryScheduler,""String_Node_Str"").routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"" + nameDot + ""String_Node_Str"").bean(verifier,""String_Node_Str"").choice().when(simple(""String_Node_Str"")).stop().otherwise().to(StandardEndpoints.MONITORING).end().routeId(name + ""String_Node_Str"");
  from(inMemoryScheduler.getInjectUrl()).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).setHeader(""String_Node_Str"",simple(""String_Node_Str"")).bean(new NativeCommandExtractor()).log(LoggingLevel.INFO,""String_Node_Str"" + simple(""String_Node_Str"").getText() + ""String_Node_Str""+ name).inOut(""String_Node_Str"" + getAddress()).removeHeader(""String_Node_Str"").to(""String_Node_Str"" + nameDot + ""String_Node_Str"").routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"").split().method(verifier,""String_Node_Str"").to(StandardEndpoints.MONITORING).routeId(name + ""String_Node_Str"");
  from(""String_Node_Str"" + nameDot).bean(new OnChange()).choice().when(header(""String_Node_Str"").isEqualTo(false)).log(LoggingLevel.INFO,""String_Node_Str"").otherwise().setHeader(StandardArguments.NAME,simple(""String_Node_Str"")).setHeader(StandardArguments.ISSUED_BY,simple(""String_Node_Str"")).setHeader(StandardArguments.TYPE,simple(""String_Node_Str"")).setHeader(StandardArguments.CLASS,simple(""String_Node_Str"")).to(StandardEndpoints.MONITORING);
}",0.9807135969141756
98604,"/** 
 * @param minFrequency
 * @param maxFrequency
 * @param isUplink
 * @param isDownlink
 * @param gain
 */
public HamlibRadioPart(String ID,String name,long minFrequency,long maxFrequency,boolean isUplink,boolean isDownlink,long gain,long port,String host){
  super(ID,name,minFrequency,maxFrequency,isUplink,isDownlink,gain,HamlibDriver.class.getName());
  this.port=port;
  this.host=host;
}","/** 
 * @param minFrequency
 * @param maxFrequency
 * @param isUplink
 * @param isDownlink
 * @param gain
 */
public HamlibRadioPart(String ID,String name,long minFrequency,long maxFrequency,boolean isUplink,boolean isDownlink,long gain,long port,String host){
  super(ID,name,minFrequency,maxFrequency,isUplink,isDownlink,gain,HamlibRadioDriver.class.getName());
  this.port=port;
  this.host=host;
}",0.9937264742785444
98605,"@Handler public void process() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  publishApi.publish(new StartComponent(""String_Node_Str"",new CelestrackComponent()));
  Thread.sleep(500000);
  LOG.info(""String_Node_Str"");
}","@Handler public void process() throws InterruptedException {
  LOG.info(""String_Node_Str"");
  LOG.info(""String_Node_Str"");
  startMonitoringArchive();
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") == null,""String_Node_Str"");
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") == null,""String_Node_Str"");
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") == null,""String_Node_Str"");
  publishApi.publish(new StartComponent(""String_Node_Str"",new CelestrackComponent()));
  Thread.sleep(10000);
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") != null,""String_Node_Str"");
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") != null,""String_Node_Str"");
  azzert(accessApi.retrieveTleFor(""String_Node_Str"") != null,""String_Node_Str"");
  LOG.info(""String_Node_Str"");
}",0.5052631578947369
98606,"/** 
 * Test method for  {@link eu.estcube.common.helper.TncFrameToLabel#process(java.lang.Long,java.lang.String,eu.estcube.domain.transport.tnc.TncFrame)}.
 */
@Test public void testProcess(){
  Label label=toLabel.process(NOW,ISSUED_BY,frame);
  assertNotNull(label);
  assertEquals(ISSUED_BY,label.getIssuedBy());
  assertEquals(NOW.longValue(),label.getTimestamp());
  assertEquals(new DefaultNaming().createAbsoluteName(Base.GROUND_STATION,GROUND_STATION_NAME,TncFrameToLabel.RELATIVE_PARAMETER_NAME),label.getName());
  assertEquals(TncFrameToLabel.DESCRIPTION,label.getDescription());
  assertEquals(""String_Node_Str"",label.getValue());
  assertEquals(TncFrame.class.getSimpleName(),label.getType());
  inOrder.verify(frame,times(1)).getData();
  inOrder.verify(frame,times(1)).getTarget();
  inOrder.verifyNoMoreInteractions();
}","/** 
 * Test method for  {@link eu.estcube.common.helper.TncFrameToLabel#process(java.lang.Long,java.lang.String,eu.estcube.domain.transport.tnc.TncFrame)}.
 */
@Test public void testProcess(){
  Label label=toLabel.process(NOW,ISSUED_BY,frame);
  assertNotNull(label);
  assertEquals(ISSUED_BY,label.getIssuedBy());
  assertEquals(NOW.longValue(),label.getTimestamp());
  assertEquals(new DefaultNaming().createAbsoluteName(Base.GROUND_STATION,GROUND_STATION_NAME,TncFrameToLabel.RELATIVE_PARAMETER_NAME),label.getName());
  assertEquals(TncFrameToLabel.DESCRIPTION,label.getDescription());
  assertEquals(""String_Node_Str"",label.getValue());
  assertEquals(Parameter.class.getSimpleName(),label.getType());
  inOrder.verify(frame,times(1)).getData();
  inOrder.verifyNoMoreInteractions();
}",0.9613259668508288
98607,"public PrepareResponse processPrepareRequest(PrepareRequest prepareRequest){
  if (prepareRequest.getNumber().getValue() > this.maxNumberPrepared.getValue()) {
    this.maxNumberPrepared=prepareRequest.getNumber();
  }
  PrepareResponse prepareResponse=new PrepareResponse(this.hostIdentifier,prepareRequest,this.maxNumberPrepared.clone());
  if (this.serialization != null) {
    this.serialization.saveState(""String_Node_Str"",this.maxNumberPrepared);
  }
  return prepareResponse;
}","public PrepareResponse processPrepareRequest(PrepareRequest prepareRequest){
  if (prepareRequest.getNumber().getValue() > this.maxNumberPrepared.getValue()) {
    this.maxNumberPrepared=prepareRequest.getNumber();
  }
  LearnedValue learnedValue=this.learnedValues.getAt(prepareRequest.getSlotNumber());
  PrepareResponse prepareResponse=new PrepareResponse(this.hostIdentifier,prepareRequest,this.maxNumberPrepared.clone(),learnedValue != null ? learnedValue.getContent() : null);
  if (this.serialization != null) {
    this.serialization.saveState(""String_Node_Str"",this.maxNumberPrepared);
  }
  return prepareResponse;
}",0.7693693693693694
98608,"public static String getErrorMessage(int errorCode){
switch (errorCode) {
case PREVIOUS_SEQUENCE_NUMBER_HIGHER_THAN_CURRENT:
    return ""String_Node_Str"";
case PREVIOUS_SLOT_NUMBER_DIFFERENT_THAN_CURRENT:
  return ""String_Node_Str"";
case CONTENT_IS_NULL:
return ""String_Node_Str"";
case VALUE_IS_NULL:
return ""String_Node_Str"";
case PREVIOUS_VALUE_DIFFERENT_THAN_CURRENT:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_REQUEST_WITH_PENDING_RESPONSES:
return ""String_Node_Str"";
case ALREADY_RECEIVED_RESPONSE_FROM_THIS_ACCEPTOR:
return ""String_Node_Str"";
case INVALID_STATE_NOT_WAITING_FOR_REPARE_RESPONSE:
return ""String_Node_Str"";
case REQUEST_NUMBER_DIDNT_MATCH:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_REQUEST_WITHOUT_PENDING_RESPONSES:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_RESEND_WITHOUT_PENDING_RESPONSES:
return ""String_Node_Str"";
case CANNOT_CREATE_ACCEPT_REQUEST:
return ""String_Node_Str"";
case VALUE_WAS_NOT_LEARNED:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","public static String getErrorMessage(int errorCode){
switch (errorCode) {
case PREVIOUS_SEQUENCE_NUMBER_HIGHER_THAN_CURRENT:
    return ""String_Node_Str"";
case PREVIOUS_SLOT_NUMBER_DIFFERENT_THAN_CURRENT:
  return ""String_Node_Str"";
case CONTENT_IS_NULL:
return ""String_Node_Str"";
case VALUE_IS_NULL:
return ""String_Node_Str"";
case PREVIOUS_VALUE_DIFFERENT_THAN_CURRENT:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_REQUEST_WITH_PENDING_RESPONSES:
return ""String_Node_Str"";
case ALREADY_RECEIVED_RESPONSE_FROM_THIS_ACCEPTOR:
return ""String_Node_Str"";
case INVALID_STATE_NOT_WAITING_FOR_REPARE_RESPONSE:
return ""String_Node_Str"";
case REQUEST_NUMBER_DIDNT_MATCH:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_REQUEST_WITHOUT_PENDING_RESPONSES:
return ""String_Node_Str"";
case CANNOT_CREATE_PREPARE_RESEND_WITHOUT_PENDING_RESPONSES:
return ""String_Node_Str"";
case CANNOT_CREATE_ACCEPT_REQUEST:
return ""String_Node_Str"";
case VALUE_WAS_NOT_LEARNED:
return ""String_Node_Str"";
case CANNOT_ACCEPT_WITH_DIFFERENT_VALUE:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9683514407179972
98609,"public PrepareResponse(byte hostIdentifier,PrepareRequest prepareRequest,PrepareNumber maxNumberPreparedSoFar){
  this.hostIdentifier=hostIdentifier;
  this.prepareRequest=prepareRequest;
  this.maxNumberPreparedSoFar=maxNumberPreparedSoFar;
}","public PrepareResponse(byte hostIdentifier,PrepareRequest prepareRequest,PrepareNumber maxNumberPreparedSoFar,Object content){
  this.hostIdentifier=hostIdentifier;
  this.prepareRequest=prepareRequest;
  this.maxNumberPreparedSoFar=maxNumberPreparedSoFar;
  this.content=content;
}",0.9257142857142856
98610,"private int getAcceptCount(PrepareState proposalState){
  int acceptCount=0;
  PrepareNumber prepareNumber=proposalState.getPrepareRequest().getNumber();
  for (  PrepareResponse prepareResponse : proposalState.getProposalResponses()) {
    if (prepareNumber.compareTo(prepareResponse.getMaxNumberPreparedSoFar()) >= 0) {
      acceptCount++;
    }
  }
  return acceptCount;
}","private int getAcceptCount(PrepareState proposalState){
  int acceptCount=0;
  PrepareNumber prepareNumber=proposalState.getPrepareRequest().getNumber();
  for (  PrepareResponse prepareResponse : proposalState.getProposalResponses()) {
    if (prepareNumber.compareTo(prepareResponse.getMaxNumberPreparedSoFar()) >= 0 && prepareResponse.getContent() == null) {
      acceptCount++;
    }
  }
  return acceptCount;
}",0.9494949494949496
98611,"public AcceptRequest createAcceptRequest(int slotNumber,Object value){
  PrepareState prepareState=this.responses.get(slotNumber);
  if (this.canProposeValue(prepareState)) {
    return new AcceptRequest(prepareState.getPrepareRequest(),value);
  }
 else {
    throw new PaxosException(PaxosException.CANNOT_CREATE_ACCEPT_REQUEST);
  }
}","public AcceptRequest createAcceptRequest(int slotNumber,Object value){
  PrepareState prepareState=this.responses.get(slotNumber);
  if (this.canProposeValue(prepareState)) {
    Object alreadyAcceptedValue=this.getAnyAcceptedValue(prepareState);
    if (alreadyAcceptedValue != null && !alreadyAcceptedValue.equals(value)) {
      throw new PaxosException(PaxosException.CANNOT_ACCEPT_WITH_DIFFERENT_VALUE);
    }
    return new AcceptRequest(prepareState.getPrepareRequest(),value);
  }
 else {
    throw new PaxosException(PaxosException.CANNOT_CREATE_ACCEPT_REQUEST);
  }
}",0.737417943107221
98612,"private static void processPrepareResponseSunnyPathTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)1,0));
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,0));
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)3,0));
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)4,0));
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isTrue(proposer.processPrepareResponse(response3));
  Assert.isTrue(proposer.processPrepareResponse(response4));
  print(""String_Node_Str"");
}","private static void processPrepareResponseSunnyPathTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)1,0),null);
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,0),null);
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)3,0),null);
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)4,0),null);
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isTrue(proposer.processPrepareResponse(response3));
  Assert.isTrue(proposer.processPrepareResponse(response4));
  print(""String_Node_Str"");
}",0.988826815642458
98613,"private static void processPrepareResponseResendPrepareTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)1,0));
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,0));
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)2,2));
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)2,2));
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isFalse(proposer.processPrepareResponse(response3));
  Assert.isFalse(proposer.processPrepareResponse(response4));
  Assert.isTrue(proposer.shouldResendPrepareRequest(prepareRequest));
  PrepareRequest prepareRequestResend=proposer.createRePrepareRequest(0);
  PrepareResponse responseResend1=new PrepareResponse((byte)1,prepareRequestResend,new PrepareNumber((byte)1,0));
  PrepareResponse responseResend2=new PrepareResponse((byte)2,prepareRequestResend,new PrepareNumber((byte)2,0));
  PrepareResponse responseResend3=new PrepareResponse((byte)3,prepareRequestResend,new PrepareNumber((byte)3,2));
  PrepareResponse responseResend4=new PrepareResponse((byte)4,prepareRequestResend,new PrepareNumber((byte)4,2));
  Assert.isFalse(proposer.processPrepareResponse(responseResend1));
  Assert.isFalse(proposer.processPrepareResponse(responseResend2));
  Assert.isTrue(proposer.processPrepareResponse(responseResend3));
  Assert.isTrue(proposer.processPrepareResponse(responseResend4));
  print(""String_Node_Str"");
}","private static void processPrepareResponseResendPrepareTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)1,0),null);
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,0),null);
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)2,2),null);
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)2,2),null);
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isFalse(proposer.processPrepareResponse(response3));
  Assert.isFalse(proposer.processPrepareResponse(response4));
  Assert.isTrue(proposer.shouldResendPrepareRequest(prepareRequest));
  PrepareRequest prepareRequestResend=proposer.createRePrepareRequest(0);
  PrepareResponse responseResend1=new PrepareResponse((byte)1,prepareRequestResend,new PrepareNumber((byte)1,0),null);
  PrepareResponse responseResend2=new PrepareResponse((byte)2,prepareRequestResend,new PrepareNumber((byte)2,0),null);
  PrepareResponse responseResend3=new PrepareResponse((byte)3,prepareRequestResend,new PrepareNumber((byte)3,2),null);
  PrepareResponse responseResend4=new PrepareResponse((byte)4,prepareRequestResend,new PrepareNumber((byte)4,2),null);
  Assert.isFalse(proposer.processPrepareResponse(responseResend1));
  Assert.isFalse(proposer.processPrepareResponse(responseResend2));
  Assert.isTrue(proposer.processPrepareResponse(responseResend3));
  Assert.isTrue(proposer.processPrepareResponse(responseResend4));
  print(""String_Node_Str"");
}",0.9887703537338574
98614,"private static void processPrepareResponseRainyPathTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)2,2));
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,2));
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)2,2));
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)2,2));
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isFalse(proposer.processPrepareResponse(response3));
  Assert.isFalse(proposer.processPrepareResponse(response4));
  print(""String_Node_Str"");
}","private static void processPrepareResponseRainyPathTest(){
  byte hostIdentifier=0;
  Proposer proposer=new Proposer(hostIdentifier,4);
  PrepareRequest prepareRequest=proposer.createPrepareRequest(0);
  PrepareResponse response1=new PrepareResponse((byte)1,prepareRequest,new PrepareNumber((byte)2,2),null);
  PrepareResponse response2=new PrepareResponse((byte)2,prepareRequest,new PrepareNumber((byte)2,2),null);
  PrepareResponse response3=new PrepareResponse((byte)3,prepareRequest,new PrepareNumber((byte)2,2),null);
  PrepareResponse response4=new PrepareResponse((byte)4,prepareRequest,new PrepareNumber((byte)2,2),null);
  Assert.isFalse(proposer.processPrepareResponse(response1));
  Assert.isFalse(proposer.processPrepareResponse(response2));
  Assert.isFalse(proposer.processPrepareResponse(response3));
  Assert.isFalse(proposer.processPrepareResponse(response4));
  print(""String_Node_Str"");
}",0.9888517279821628
98615,"public Acceptor(byte hostIdentifier){
  this.hostIdentifier=hostIdentifier;
  this.maxNumberPrepared=new PrepareNumber((byte)0,0);
  this.proposedValues=new AcceptedValues();
}","public Acceptor(byte hostIdentifier,ISerialization serialization){
  this.hostIdentifier=hostIdentifier;
  this.serialization=serialization;
  if (this.serialization != null) {
    this.maxNumberPrepared=(PrepareNumber)this.serialization.restoreState(""String_Node_Str"");
    this.proposedValues=(AcceptedValues)this.serialization.restoreState(""String_Node_Str"");
  }
 else {
    this.maxNumberPrepared=new PrepareNumber((byte)0,0);
    this.proposedValues=new AcceptedValues();
  }
}",0.5341426403641881
98616,"public boolean processAccept(AcceptRequest acceptRequest){
  PrepareRequest prepareRequest=acceptRequest.getPrepareRequest();
  if (prepareRequest.getNumber().getValue() >= this.maxNumberPrepared.getValue()) {
    this.proposedValues.setAt(prepareRequest.getSlotNumber(),new AcceptedValue(prepareRequest.getSlotNumber(),acceptRequest.getValue(),prepareRequest.getNumber()));
    return true;
  }
 else {
    return false;
  }
}","public AcceptResponse processAccept(AcceptRequest acceptRequest){
  PrepareRequest prepareRequest=acceptRequest.getPrepareRequest();
  boolean success;
  if (prepareRequest.getNumber().getValue() >= this.maxNumberPrepared.getValue()) {
    this.proposedValues.setAt(prepareRequest.getSlotNumber(),new AcceptedValue(prepareRequest.getSlotNumber(),acceptRequest.getValue(),prepareRequest.getNumber()));
    if (this.serialization != null) {
      this.serialization.saveState(""String_Node_Str"",this.proposedValues);
    }
    success=true;
  }
 else {
    success=false;
  }
  return new AcceptResponse(prepareRequest,this.maxNumberPrepared.clone(),success);
}",0.7244239631336405
98617,"public PrepareResponse processPrepareRequest(PrepareRequest prepareRequest){
  PrepareResponse prepareResponse=new PrepareResponse(this.hostIdentifier,prepareRequest,maxNumberPrepared);
  if (prepareRequest.getNumber().getValue() > this.maxNumberPrepared.getValue()) {
    this.maxNumberPrepared=prepareRequest.getNumber();
  }
  return prepareResponse;
}","public PrepareResponse processPrepareRequest(PrepareRequest prepareRequest){
  if (prepareRequest.getNumber().getValue() > this.maxNumberPrepared.getValue()) {
    this.maxNumberPrepared=prepareRequest.getNumber();
  }
  PrepareResponse prepareResponse=new PrepareResponse(this.hostIdentifier,prepareRequest,this.maxNumberPrepared.clone());
  if (this.serialization != null) {
    this.serialization.saveState(""String_Node_Str"",this.maxNumberPrepared);
  }
  return prepareResponse;
}",0.5196662693682956
98618,"@Override public int compareTo(PrepareNumber prepareNumber){
  if (prepareNumber == null) {
    return -1;
  }
 else {
    if (this.getValue() > prepareNumber.getValue()) {
      return +1;
    }
 else     if (this.getValue() < prepareNumber.getHostIdentifier()) {
      return -1;
    }
 else {
      return 0;
    }
  }
}","@Override public int compareTo(PrepareNumber prepareNumber){
  if (prepareNumber == null) {
    return -1;
  }
 else {
    if (this.getValue() > prepareNumber.getValue()) {
      return +1;
    }
 else     if (this.getValue() < prepareNumber.getValue()) {
      return -1;
    }
 else {
      return 0;
    }
  }
}",0.9701726844583988
98619,"private int getAcceptCount(PrepareState proposalState){
  int acceptCount=0;
  PrepareNumber prepareNumber=proposalState.getPrepareRequest().getNumber();
  for (  PrepareResponse prepareResponse : proposalState.getProposalResponses()) {
    if (prepareNumber.compareTo(prepareResponse.getMaxNumberPreparedSoFar()) > 0) {
      acceptCount++;
    }
  }
  return acceptCount;
}","private int getAcceptCount(PrepareState proposalState){
  int acceptCount=0;
  PrepareNumber prepareNumber=proposalState.getPrepareRequest().getNumber();
  for (  PrepareResponse prepareResponse : proposalState.getProposalResponses()) {
    if (prepareNumber.compareTo(prepareResponse.getMaxNumberPreparedSoFar()) >= 0) {
      acceptCount++;
    }
  }
  return acceptCount;
}",0.9986684420772304
98620,"public TestDriver(int numberOfProposers,int numberOfAcceptors){
  this.proposers=new Vector<Proposer>();
  this.acceptors=new Vector<Acceptor>();
  byte hostIdentifier=0;
  for (int i=0; i < numberOfProposers; i++) {
    this.proposers.add(new Proposer(hostIdentifier++,numberOfAcceptors));
  }
  for (int i=0; i < numberOfAcceptors; i++) {
    this.acceptors.add(new Acceptor(hostIdentifier++));
  }
}","public TestDriver(int numberOfProposers,int numberOfAcceptors){
  this.proposers=new Vector<Proposer>();
  this.acceptors=new Vector<Acceptor>();
  byte hostIdentifier=0;
  for (int i=0; i < numberOfProposers; i++) {
    this.proposers.add(new Proposer(hostIdentifier++,numberOfAcceptors));
  }
  for (int i=0; i < numberOfAcceptors; i++) {
    this.acceptors.add(new Acceptor(hostIdentifier++,null));
  }
}",0.9938195302843016
98621,"public boolean accept(int proposeServer,int slotNumber,Object value){
  Proposer proposer=this.proposers.get(proposeServer);
  AcceptRequest request=proposer.createAcceptRequest(slotNumber,value);
  boolean accepted=true;
  for (  Acceptor acceptor : this.acceptors) {
    accepted=accepted && acceptor.processAccept(request);
  }
  return accepted;
}","public boolean accept(int proposeServer,int slotNumber,Object value){
  Proposer proposer=this.proposers.get(proposeServer);
  AcceptRequest request=proposer.createAcceptRequest(slotNumber,value);
  boolean accepted=true;
  for (  Acceptor acceptor : this.acceptors) {
    AcceptResponse acceptResponse=acceptor.processAccept(request);
    accepted=accepted && acceptResponse.getSuccess();
    proposer.processAcceptResponse(acceptResponse);
  }
  return accepted;
}",0.8004895960832313
98622,"public void recoverFromCrash(){
  this.m_uncommitedState=restoreState(FILE_NAME_TEMP);
}","public void recoverFromCrash(){
  this.m_state=restoreState(FILE_NAME);
  if (this.m_state == null) {
    this.m_state=new FacebookShardState();
  }
  this.m_uncommitedState=restoreState(FILE_NAME_TEMP);
}",0.5255972696245734
98623,"public Packet(){
  m_from=-1;
  m_to=-1;
  m_type=-1;
  m_connId=-1;
  m_seqNum=-1;
  m_payload=null;
}","public Packet(){
  m_from=-1;
  m_to=-1;
  m_type=-1;
  m_connId=-1;
  m_seqNum=-1;
  m_minSeq=-1;
  m_payload=null;
}",0.9321266968325792
98624,"public String stringize(){
  String content=""String_Node_Str"";
  int contentLength=0;
  if (m_payload != null) {
    content=Utility.byteArrayToString(m_payload);
    contentLength=m_payload.length;
  }
  return String.format(""String_Node_Str"",m_from,m_to,m_type,m_connId,m_seqNum,contentLength,content);
}","public String stringize(){
  String content=""String_Node_Str"";
  int contentLength=0;
  if (m_payload != null) {
    content=Utility.byteArrayToString(m_payload);
    contentLength=m_payload.length;
  }
  return String.format(""String_Node_Str"",m_from,m_to,m_type,m_connId,m_seqNum,m_minSeq,contentLength,content);
}",0.9855072463768116
98625,"/** 
 * Assembles individual field values into a Packet object
 * @param from - sender
 * @param to - receiver
 * @param ptype - packet type
 * @param connId - connection ID
 * @param seqNum - sequence number
 * @param payload - packet contents
 * @return Packet object
 */
public static Packet Create(int from,int to,int ptype,int connId,int seqNum,byte[] payload){
  Packet packet;
  packet=new Packet();
  packet.setFrom(from);
  packet.setTo(to);
  packet.setType(ptype);
  packet.setConnectionId(connId);
  packet.setSequence(seqNum);
  packet.setPayload(payload);
  return packet;
}","/** 
 * Assembles individual field values into a Packet object
 * @param from - sender
 * @param to - receiver
 * @param ptype - packet type
 * @param connId - connection ID
 * @param seqNum - sequence number
 * @param payload - packet contents
 * @return Packet object
 */
public static Packet Create(int from,int to,int ptype,int connId,int seqNum,byte[] payload){
  Packet packet;
  packet=new Packet();
  packet.setFrom(from);
  packet.setTo(to);
  packet.setType(ptype);
  packet.setConnectionId(connId);
  packet.setSequence(seqNum);
  packet.setMinSequence(0);
  packet.setPayload(payload);
  return packet;
}",0.9767441860465116
98626,"public byte[] toByteArray(){
  byte[] buffer;
  int length=20;
  if (m_payload != null) {
    length+=m_payload.length;
  }
  buffer=new byte[length];
  ByteManipulator.addInt(buffer,0,m_from);
  ByteManipulator.addInt(buffer,4,m_to);
  ByteManipulator.addInt(buffer,8,m_type);
  ByteManipulator.addInt(buffer,12,m_connId);
  ByteManipulator.addInt(buffer,16,m_seqNum);
  if (m_payload != null) {
    System.arraycopy(m_payload,0,buffer,20,m_payload.length);
  }
  return buffer;
}","public byte[] toByteArray(){
  byte[] buffer;
  int length=HEADER_LENGTH;
  if (m_payload != null) {
    length+=m_payload.length;
  }
  buffer=new byte[length];
  ByteManipulator.addInt(buffer,0,m_from);
  ByteManipulator.addInt(buffer,4,m_to);
  ByteManipulator.addInt(buffer,8,m_type);
  ByteManipulator.addInt(buffer,12,m_connId);
  ByteManipulator.addInt(buffer,16,m_seqNum);
  ByteManipulator.addInt(buffer,20,m_minSeq);
  if (m_payload != null) {
    System.arraycopy(m_payload,0,buffer,HEADER_LENGTH,m_payload.length);
  }
  return buffer;
}",0.9262135922330096
98627,"public String stringizeHeader(){
  int contentLength=0;
  if (m_payload != null) {
    contentLength=m_payload.length;
  }
  return String.format(""String_Node_Str"",m_from,m_to,m_type,m_connId,m_seqNum,contentLength);
}","public String stringizeHeader(){
  int contentLength=0;
  if (m_payload != null) {
    contentLength=m_payload.length;
  }
  return String.format(""String_Node_Str"",m_from,m_to,m_type,m_connId,m_seqNum,m_minSeq,contentLength);
}",0.9797752808988764
98628,"/** 
 * onReceive_HandleData
 * @param packet
 */
private void onReceive_HandleData(Packet packet){
  Session current=getInboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    Packet orderedPacket=null;
    if (!current.didAlreadyReceiveSequence(packet.getSequence())) {
      info(""String_Node_Str"" + packet.stringizeHeader());
      current.markSequenceAsReceived(packet.getSequence());
      current.addToReceiveQueue(packet);
    }
 else {
      info(""String_Node_Str"" + packet.stringizeHeader());
    }
    this.internalSendAck(packet.getFrom(),packet.getConnectionId(),packet.getSequence());
    do {
      orderedPacket=current.getNextReceivePacket();
      if (orderedPacket != null) {
        info(""String_Node_Str"" + orderedPacket.stringize());
        this.onReliableMessageReceived(orderedPacket.getFrom(),orderedPacket.getPayload());
      }
    }
 while (orderedPacket != null);
  }
 else {
    info(""String_Node_Str"" + packet.stringizeHeader());
    this.internalSendReset(packet.getFrom(),packet.getConnectionId(),packet.getSequence());
  }
}","/** 
 * onReceive_HandleData
 * @param packet
 */
private void onReceive_HandleData(Packet packet){
  Session current=getInboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    Packet orderedPacket=null;
    if (!current.didAlreadyReceiveSequence(packet.getSequence())) {
      info(""String_Node_Str"" + packet.stringizeHeader());
      current.markSequenceAsReceived(packet.getSequence());
      current.addToReceiveQueue(packet);
    }
 else {
      info(""String_Node_Str"" + packet.stringizeHeader());
    }
    this.internalSendAck(packet.getFrom(),packet.getConnectionId(),packet.getSequence());
    int minSeq=packet.getSequence();
    if (packet.getMinSequence() < minSeq)     minSeq=packet.getMinSequence();
    do {
      orderedPacket=current.getNextReceivePacket(minSeq);
      if (orderedPacket != null) {
        info(""String_Node_Str"" + orderedPacket.stringize());
        this.onReliableMessageReceived(orderedPacket.getFrom(),orderedPacket.getPayload());
      }
    }
 while (orderedPacket != null);
  }
 else {
    info(""String_Node_Str"" + packet.stringizeHeader());
    this.internalSendReset(packet.getFrom(),packet.getConnectionId(),packet.getSequence());
  }
}",0.9488372093023256
98629,"/** 
 * Attempts to send the given packet to the target node
 * @param packet
 */
private void internalSendPacket(Packet packet,int timeout){
  Callback cb=new Callback(this.m_timeoutMethod,this,new Object[]{packet,timeout});
  this.addTimeout(cb,timeout);
  info(""String_Node_Str"" + packet.stringize());
  this.send(packet.getTo(),PROTOCOLS.SCOP,packet.toByteArray());
}","/** 
 * Attempts to send the given packet to the target node
 * @param packet
 */
private void internalSendPacket(Session session,Packet packet,int timeout){
  Callback cb=new Callback(this.m_timeoutMethod,this,new Object[]{packet,timeout});
  this.addTimeout(cb,timeout);
  packet.setMinSequence(session.getMinimumPendingSequence());
  info(""String_Node_Str"" + packet.stringize());
  this.send(packet.getTo(),PROTOCOLS.SCOP,packet.toByteArray());
}",0.9048780487804878
98630,"/** 
 * onReceive_HandleReset
 * @param packet
 */
private void onReceive_HandleReset(Packet packet){
  Session current=getOutboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    info(""String_Node_Str"" + packet.stringizeHeader());
    current.setClosed();
    m_activeOutSessions.remove(packet.getFrom());
    onConnectionAborted(packet.getFrom());
  }
 else {
    current=getInboundByNode(packet.getFrom());
    if (current != null && current.getConnectionId() == packet.getConnectionId()) {
      info(""String_Node_Str"" + packet.stringizeHeader());
      current.setClosed();
      m_activeInSessions.remove(packet.getFrom());
      onConnectionAborted(packet.getFrom());
    }
 else {
      info(""String_Node_Str"" + packet.stringizeHeader());
    }
  }
}","/** 
 * onReceive_HandleReset
 * @param packet
 */
private void onReceive_HandleReset(Packet packet){
  Session current=getOutboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    info(""String_Node_Str"" + packet.stringizeHeader());
    current.setClosed();
    m_activeOutSessions.remove(packet.getFrom());
    onConnectionAborted(packet.getFrom());
  }
 else {
    info(""String_Node_Str"" + packet.stringizeHeader());
  }
}",0.7176740627390972
98631,"/** 
 * onReceive_HandleAck
 * @param packet
 */
private void onReceive_HandleAck(Packet packet){
  Session current=getOutboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    if (packet.getSequence() == 0 && current.getConnecting() && !current.getConnected()) {
      info(String.format(""String_Node_Str"",packet.getConnectionId(),packet.getFrom()));
      current.setConnected();
      while (current.getSendQueue().size() > 0) {
        Packet dataPacket;
        dataPacket=current.getSendQueue().remove();
        info(""String_Node_Str"" + dataPacket.stringize());
        current.addToWaitingForAckList(dataPacket.getSequence());
        this.internalSendPacket(dataPacket,TIMEOUT);
      }
    }
 else {
      info(""String_Node_Str"" + packet.getSequence());
    }
    current.removeFromWaitingForAckList(packet.getSequence());
  }
 else {
    info(""String_Node_Str"" + packet.stringizeHeader());
  }
}","/** 
 * onReceive_HandleAck
 * @param packet
 */
private void onReceive_HandleAck(Packet packet){
  Session current=getOutboundByNode(packet.getFrom());
  if (current != null && current.getConnectionId() == packet.getConnectionId()) {
    if (packet.getSequence() == 0 && current.getConnecting() && !current.getConnected()) {
      info(String.format(""String_Node_Str"",packet.getConnectionId(),packet.getFrom()));
      current.setConnected();
      while (current.getSendQueue().size() > 0) {
        Packet dataPacket;
        dataPacket=current.getSendQueue().remove();
        info(""String_Node_Str"" + dataPacket.stringize());
        current.addToWaitingForAckList(dataPacket.getSequence());
        this.internalSendPacket(current,dataPacket,TIMEOUT);
      }
    }
 else {
      info(""String_Node_Str"" + packet.getSequence());
    }
    current.removeFromWaitingForAckList(packet.getSequence());
  }
 else {
    info(""String_Node_Str"" + packet.stringizeHeader());
  }
}",0.9958847736625516
98632,"public Packet getNextReceivePacket(){
  if (this.m_reorderMap.containsKey(this.m_sequence)) {
    Packet packet=this.m_reorderMap.get(this.m_sequence);
    this.m_reorderMap.remove(this.m_sequence);
    this.m_sequence++;
    return packet;
  }
 else {
    return null;
  }
}","public Packet getNextReceivePacket(int minSequence){
  Packet packet=null;
  while (packet == null) {
    if (this.m_reorderMap.containsKey(this.m_sequence)) {
      packet=this.m_reorderMap.get(this.m_sequence);
      this.m_reorderMap.remove(this.m_sequence);
      this.m_sequence++;
    }
 else     if (this.m_sequence < minSequence) {
      this.m_sequence++;
    }
 else {
      break;
    }
  }
  return packet;
}",0.6877697841726619
98633,"public String addFriend(String login,String friendLogin) throws FacebookException {
  if (!this.isValidUser(friendLogin)) {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
  this.appendToLog(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  List<String> listFriends;
  listFriends=this.m_friendRequests.get(friendLogin);
  listFriends.add(login);
  this.info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  return null;
}","public String addFriend(String token,String friendLogin) throws FacebookException {
  String login=this.getUser(token).getLogin();
  if (!this.isValidUser(friendLogin)) {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
  this.appendToLog(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  List<String> listFriends;
  listFriends=this.m_friendRequests.get(friendLogin);
  listFriends.add(login);
  this.info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  return null;
}",0.944612286002014
98634,"protected String callLocalMethod(String methodCall,Vector<String> params) throws FacebookException {
  if (methodCall.startsWith(""String_Node_Str"")) {
    return this.createUser(params.get(0),params.get(1));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.addFriend(params.get(0),params.get(1));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.acceptFriend(params.get(0),params.get(1));
  }
 else {
    return null;
  }
}","protected String callLocalMethod(String methodCall,Vector<String> params) throws FacebookException {
  if (methodCall.startsWith(""String_Node_Str"")) {
    return this.createUser(params.get(0),params.get(1));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.login(params.get(0),params.get(1));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.logout(params.get(0));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.addFriend(params.get(0),params.get(1));
  }
 else   if (methodCall.startsWith(""String_Node_Str"")) {
    return this.acceptFriend(params.get(0),params.get(1));
  }
 else {
    return null;
  }
}",0.8188841201716738
98635,"public User getUser(String token) throws FacebookException {
  if (this.isLoggedIn(token)) {
    String login=this.m_activeSessions.get(token);
    return this.m_users.get(login);
  }
 else {
    throw new FacebookException(FacebookException.SESSION_DONT_EXIST);
  }
}","public User getUser(String token) throws FacebookException {
  if (this.m_inRecovery) {
    return this.m_users.get(token);
  }
  if (this.isLoggedIn(token)) {
    String login=this.m_activeSessions.get(token);
    return this.m_users.get(login);
  }
 else {
    throw new FacebookException(FacebookException.SESSION_DONT_EXIST);
  }
}",0.8888888888888888
98636,"public String acceptFriend(String login,String friendLogin) throws FacebookException {
  if (!this.isValidUser(friendLogin)) {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
  List<String> requestList;
  requestList=this.m_friendRequests.get(login);
  User friendUser;
  friendUser=this.m_users.get(friendLogin);
  if (!requestList.contains(friendUser)) {
    throw new FacebookException(FacebookException.INVALID_REQUEST);
  }
  this.appendToLog(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  requestList.remove(friendUser);
  addFriendToList(login,friendLogin);
  addFriendToList(friendLogin,login);
  this.info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  return null;
}","public String acceptFriend(String token,String friendLogin) throws FacebookException {
  String login=this.getUser(token).getLogin();
  if (!this.isValidUser(friendLogin)) {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
  List<String> requestList;
  requestList=this.m_friendRequests.get(login);
  User friendUser;
  friendUser=this.m_users.get(friendLogin);
  if (!requestList.contains(friendLogin)) {
    throw new FacebookException(FacebookException.INVALID_REQUEST);
  }
  this.appendToLog(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  requestList.remove(friendUser);
  addFriendToList(login,friendLogin);
  addFriendToList(friendLogin,login);
  this.info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
  return null;
}",0.9576719576719576
98637,"private void routeToAppropriateShards(String methodName,Vector<String> params) throws FacebookException {
  String userId=params.get(0);
  FacebookFrontendSystem frontendSystem=(FacebookFrontendSystem)this.m_system;
  String token=params.get(0);
  User user=frontendSystem.getUser(token);
  params.set(0,user.getLogin());
  if (methodName.startsWith(""String_Node_Str"")) {
    for (int i=FRONTEND_ADDRESS + 1; i < FRONTEND_ADDRESS + 1 + NUMBER_OF_SHARDS; i++) {
      this.callMethod(i,methodName,params);
    }
  }
 else {
    int shardAddress=userId.hashCode() % NUMBER_OF_SHARDS;
    this.callMethod(shardAddress,methodName,params);
  }
}","private void routeToAppropriateShards(String methodName,Vector<String> params) throws FacebookException {
  FacebookFrontendSystem frontendSystem=(FacebookFrontendSystem)this.m_system;
  String token=params.get(0);
  User user=frontendSystem.getUser(token);
  params.set(0,user.getLogin());
  if (methodName.startsWith(""String_Node_Str"")) {
    for (    int shardAddr : SHARDS_ADDRESSES) {
      this.callMethod(shardAddr,methodName,params);
    }
  }
 else {
    int shardAddress=user.getLogin().hashCode() % SHARDS_ADDRESSES.length;
    this.callMethod(shardAddress,methodName,params);
  }
}",0.6763990267639902
98638,"public String readMessagesAll(String token) throws FacebookException {
  return ""String_Node_Str"";
}","public String readMessagesAll(String login) throws FacebookException {
  if (!this.m_messages.containsKey(login)) {
    return null;
  }
  Vector<Message> messages=this.m_messages.get(login);
  StringBuffer sb=new StringBuffer();
  for (  Message message : messages) {
    sb.append(""String_Node_Str"");
    sb.append(message.getFromLogin());
    sb.append('\n');
    sb.append(""String_Node_Str"");
    sb.append(message.getMessage());
    sb.append('\n');
  }
  return sb.toString();
}",0.2979452054794521
98639,"public String writeMessagesAll(String token,String message) throws FacebookException {
  return null;
}","public String writeMessagesAll(String from,String message) throws FacebookException {
  Set<String> logins=m_messages.keySet();
  Message m=new Message(from,message);
  for (  String login : logins) {
    this.m_messages.get(login).add(m);
  }
  this.appendToLog(""String_Node_Str"" + from + ""String_Node_Str""+ message);
  return null;
}",0.4474885844748858
98640,"public int getShardAddress(String user){
  int shardCount=FacebookRPCNode.getShardAddresses().size();
  int hash=(int)user.charAt(0) - 'a';
  return 1 + (hash * shardCount) / 26;
}","public int getShardAddress(String user){
  int shardCount=FacebookRPCNode.getShardAddresses().size();
  int hash=(int)Character.toLowerCase(user.charAt(0)) - 'a';
  return 1 + (hash * shardCount) / 26;
}",0.9399477806788512
98641,"@Override public void onCommand(String command){
  String[] parts=command.split(""String_Node_Str"");
  String verb=parts[0];
  if (verb.startsWith(""String_Node_Str"")) {
    this.createUser(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.login(parts[1],parts[2]));
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.logout(parts[1]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.addFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.acceptFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.postMessageToAllFriends(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.readAllMessages(parts[1]));
  }
}","@Override public void onCommand(String command){
  String[] parts=command.split(""String_Node_Str"");
  String verb=parts[0];
  if (verb.startsWith(""String_Node_Str"")) {
    this.createUser(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.login(parts[1],parts[2]));
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.logout(parts[1]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.addFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.acceptFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.writeMessagesAll(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.readMessagesAll(parts[1]));
  }
}",0.978274363749224
98642,"private void sendAck(int targetSender,int sequenceNumber){
  byte[] buffer=new byte[4];
  ByteManipulator.addInt(buffer,0,sequenceNumber);
  this.send(targetSender,MESSAGE_TYPE.ACK,buffer);
}","private void sendAck(int targetSender,int sequenceNumber){
  byte[] buffer=new byte[4];
  ByteManipulator.addInt(buffer,0,sequenceNumber);
  this.send(targetSender,MESSAGE_TYPE.ACK,buffer);
  info(""String_Node_Str"" + targetSender + ""String_Node_Str""+ sequenceNumber);
}",0.8304347826086956
98643,"@Override public void onReceive(Integer from,int protocol,byte[] msg){
  int sequence=ByteManipulator.getInt(msg,0);
  Session session=this.m_sessionManager.getSession(from);
  if (session.didAlreadyReceiveSequence(sequence)) {
    info(""String_Node_Str"" + sequence);
    this.sendAck(from.intValue(),sequence);
    long identifier=getPacketIdentifier(from.intValue(),sequence);
    this.onReliableMessageSent(identifier);
  }
 else {
    if (protocol == MESSAGE_TYPE.NORMAL) {
      session.markSequenceAsReceived(sequence);
      session.addToReceiveQueue(new Packet(msg,from));
      Packet packet;
      while ((packet=session.getNextReceivePacket()) != null) {
        this.onReliableMessageReceived(packet.getFrom(),packet.getBuffer());
      }
      this.sendAck(from.intValue(),sequence);
    }
 else     if (protocol == MESSAGE_TYPE.ACK) {
      info(""String_Node_Str"" + sequence);
      session.removeFromWaitingForAckList(sequence);
    }
 else {
    }
  }
}","@Override public void onReceive(Integer from,int protocol,byte[] msg){
  int sequence=ByteManipulator.getInt(msg,0);
  Session session=this.m_sessionManager.getSession(from);
  if (protocol == MESSAGE_TYPE.NORMAL) {
    if (session.didAlreadyReceiveSequence(sequence)) {
      info(""String_Node_Str"" + from + ""String_Node_Str""+ sequence);
      this.sendAck(from.intValue(),sequence);
      long identifier=getPacketIdentifier(from.intValue(),sequence);
      this.onReliableMessageSent(identifier);
    }
 else {
      info(""String_Node_Str"" + from + ""String_Node_Str""+ sequence);
      session.markSequenceAsReceived(sequence);
      session.addToReceiveQueue(new Packet(msg,from));
      Packet packet;
      while ((packet=session.getNextReceivePacket()) != null) {
        this.onReliableMessageReceived(packet.getFrom(),packet.getBuffer());
      }
      this.sendAck(from.intValue(),sequence);
    }
  }
 else   if (protocol == MESSAGE_TYPE.ACK) {
    info(""String_Node_Str"" + from + ""String_Node_Str""+ sequence);
    session.removeFromWaitingForAckList(sequence);
  }
 else {
  }
}",0.6588921282798834
98644,"protected static void warn(String msg){
  System.out.println(""String_Node_Str"" + msg);
}","protected void warn(String msg){
  System.out.println(""String_Node_Str"" + this.addr + ""String_Node_Str""+ msg);
}",0.81
98645,"/** 
 * Method that subclasses will override to handle reliably message received stuff
 * @param msg
 */
protected void onReliableMessageReceived(int from,byte[] msg){
  info(""String_Node_Str"" + Utility.byteArrayToString(msg) + ""String_Node_Str""+ from);
}","/** 
 * Method that subclasses will override to handle reliably message received stuff
 * @param msg
 */
protected void onReliableMessageReceived(int from,byte[] msg){
  info(""String_Node_Str"" + from + ""String_Node_Str""+ Utility.byteArrayToString(msg));
}",0.8980392156862745
98646,"public void onTimeout(Integer targetSender,Integer sequenceNumber,byte[] buffer){
  Session session=this.m_sessionManager.getSession(targetSender);
  if (session.containsInWaitinfForAckList(sequenceNumber.intValue())) {
    info(""String_Node_Str"" + sequenceNumber);
    this.internalSendPacket(targetSender,sequenceNumber,buffer);
  }
}","public void onTimeout(Integer targetSender,Integer sequenceNumber,byte[] buffer){
  Session session=this.m_sessionManager.getSession(targetSender);
  if (session.containsInWaitinfForAckList(sequenceNumber.intValue())) {
    info(""String_Node_Str"" + targetSender + ""String_Node_Str""+ sequenceNumber.intValue());
    this.internalSendPacket(targetSender,sequenceNumber,buffer);
  }
}",0.9372384937238494
98647,"protected static void info(String msg){
  System.out.println(""String_Node_Str"" + msg);
}","protected void info(String msg){
  System.out.println(""String_Node_Str"" + this.addr + ""String_Node_Str""+ msg);
}",0.81
98648,"@Override public void start(){
  super.start();
  info(""String_Node_Str"" + this.addr);
  recoverFromCrash();
}","@Override public void start(){
  super.start();
  recoverFromCrash();
}",0.7845303867403315
98649,"public static StringBuffer serialize(RPCMethodCall methodCall){
  StringBuffer sb=new StringBuffer();
  sb.append(methodCall.getMethodName().length());
  sb.append(""String_Node_Str"");
  sb.append(methodCall.getMethodName());
  sb.append(""String_Node_Str"");
  for (int i=0; i < methodCall.getParams().size(); i++) {
    String paramStr=methodCall.getParams().get(i).toString();
    sb.append(paramStr.length());
    sb.append(""String_Node_Str"");
    sb.append(paramStr);
    sb.append(""String_Node_Str"");
  }
  return sb;
}","public static StringBuffer serialize(RPCMethodCall methodCall){
  StringBuffer sb=new StringBuffer();
  sb.append(methodCall.getMethodName().length());
  sb.append(""String_Node_Str"");
  sb.append(methodCall.getMethodName());
  sb.append(""String_Node_Str"");
  if (methodCall.getParams() != null) {
    for (int i=0; i < methodCall.getParams().size(); i++) {
      String paramStr=methodCall.getParams().get(i).toString();
      sb.append(paramStr.length());
      sb.append(""String_Node_Str"");
      sb.append(paramStr);
      sb.append(""String_Node_Str"");
    }
  }
  return sb;
}",0.8548094373865699
98650,"@Override public String readLine() throws IOException {
  String ret=super.readLine();
  n.handleDiskReadEvent(""String_Node_Str"" + Utility.logEscape(ret));
  return ret;
}","@Override public String readLine() throws IOException {
  String ret=super.readLine();
  if (ret != null) {
    n.handleDiskReadEvent(""String_Node_Str"" + Utility.logEscape(ret));
  }
  return ret;
}",0.926829268292683
98651,"/** 
 * Reorders and executes all the events for the current round. Note that commands can be executed in a different order than they appear in the command file!
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void executeEvents(ArrayList<Event> currentRoundEvents){
  canceledTimeouts=new HashSet<Timeout>();
  if (userControl == FailureLvl.EVERYTHING) {
    boolean doAgain=false;
    do {
      try {
        for (int i=0; i < currentRoundEvents.size(); ++i) {
          System.out.println(i + ""String_Node_Str"" + currentRoundEvents.get(i).toString());
        }
        System.out.println(""String_Node_Str"");
        String input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
        if (input.equals(""String_Node_Str"")) {
          for (          Event ev : currentRoundEvents) {
            handleEvent(ev);
          }
        }
 else {
          String[] order=input.split(""String_Node_Str"");
          HashSet<Event> dupeMissCheck=new HashSet<Event>();
          for (          String s : order) {
            dupeMissCheck.add(currentRoundEvents.get(Integer.parseInt(s)));
          }
          if (dupeMissCheck.size() != currentRoundEvents.size()) {
            System.out.println(""String_Node_Str"");
            doAgain=true;
            continue;
          }
          for (          String s : order) {
            Event ev=currentRoundEvents.get(Integer.parseInt(s));
            handleEvent(ev);
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        doAgain=true;
      }
    }
 while (doAgain);
  }
 else {
    Collections.shuffle(currentRoundEvents,Utility.getRNG());
    System.out.println(""String_Node_Str"");
    for (    Event ev : currentRoundEvents) {
      System.out.println(ev.toString());
      handleEvent(ev);
    }
  }
  waitingTOs.removeAll(canceledTimeouts);
}","/** 
 * Reorders and executes all the events for the current round. Note that commands can be executed in a different order than they appear in the command file!
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void executeEvents(ArrayList<Event> currentRoundEvents){
  canceledTimeouts=new HashSet<Timeout>();
  if (userControl == FailureLvl.EVERYTHING) {
    boolean doAgain=false;
    do {
      try {
        for (int i=0; i < currentRoundEvents.size(); ++i) {
          System.out.println(i + ""String_Node_Str"" + currentRoundEvents.get(i).toString());
        }
        String input=""String_Node_Str"";
        if (m_prompt) {
          System.out.println(""String_Node_Str"");
          input=Replay.getLine().trim();
        }
        if (input.equals(""String_Node_Str"")) {
          for (          Event ev : currentRoundEvents) {
            handleEvent(ev);
          }
        }
 else {
          String[] order=input.split(""String_Node_Str"");
          HashSet<Event> dupeMissCheck=new HashSet<Event>();
          for (          String s : order) {
            dupeMissCheck.add(currentRoundEvents.get(Integer.parseInt(s)));
          }
          if (dupeMissCheck.size() != currentRoundEvents.size()) {
            System.out.println(""String_Node_Str"");
            doAgain=true;
            continue;
          }
          for (          String s : order) {
            Event ev=currentRoundEvents.get(Integer.parseInt(s));
            handleEvent(ev);
          }
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        doAgain=true;
      }
    }
 while (doAgain);
  }
 else {
    Collections.shuffle(currentRoundEvents,Utility.getRNG());
    System.out.println(""String_Node_Str"");
    for (    Event ev : currentRoundEvents) {
      System.out.println(ev.toString());
      handleEvent(ev);
    }
  }
  waitingTOs.removeAll(canceledTimeouts);
}",0.9531494013534616
98652,"/** 
 * Checks whether to crash any live node or restart any failed node
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void checkCrash(ArrayList<Event> currentRoundEvents){
  if (userControl.compareTo(FailureLvl.CRASH) < 0) {
    Integer[] addrCopy=nodes.keySet().toArray(new Integer[0]);
    for (    Integer i : addrCopy) {
      double rand=Utility.getRNG().nextDouble();
      if (rand < failureRate) {
        currentRoundEvents.add(Event.getFailure(i));
      }
    }
    addrCopy=crashedNodes.toArray(new Integer[0]);
    for (    Integer i : addrCopy) {
      double rand=Utility.getRNG().nextDouble();
      if (rand < recoveryRate) {
        currentRoundEvents.add(Event.getStart(i,0));
      }
    }
  }
 else {
    try {
      printLiveDead();
      String input;
      if (!nodes.isEmpty()) {
        System.out.println(""String_Node_Str"");
        input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
        if (!input.equals(""String_Node_Str"")) {
          String[] crashList=input.split(""String_Node_Str"");
          for (          String s : crashList) {
            currentRoundEvents.add(Event.getFailure(Integer.parseInt(s)));
          }
        }
      }
      if (!crashedNodes.isEmpty()) {
        System.out.println(""String_Node_Str"");
        input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
        if (!input.equals(""String_Node_Str"")) {
          String[] restartList=input.split(""String_Node_Str"");
          for (          String s : restartList) {
            currentRoundEvents.add(Event.getStart(Integer.parseInt(s),0));
          }
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Checks whether to crash any live node or restart any failed node
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void checkCrash(ArrayList<Event> currentRoundEvents){
  if (userControl.compareTo(FailureLvl.CRASH) < 0) {
    Integer[] addrCopy=nodes.keySet().toArray(new Integer[0]);
    for (    Integer i : addrCopy) {
      double rand=Utility.getRNG().nextDouble();
      if (rand < failureRate) {
        currentRoundEvents.add(Event.getFailure(i));
      }
    }
    addrCopy=crashedNodes.toArray(new Integer[0]);
    for (    Integer i : addrCopy) {
      double rand=Utility.getRNG().nextDouble();
      if (rand < recoveryRate) {
        currentRoundEvents.add(Event.getStart(i,0));
      }
    }
  }
 else {
    try {
      printLiveDead();
      String input;
      if (!nodes.isEmpty()) {
        input=""String_Node_Str"";
        if (m_prompt) {
          System.out.println(""String_Node_Str"");
          input=Replay.getLine().trim();
        }
        if (!input.equals(""String_Node_Str"")) {
          String[] crashList=input.split(""String_Node_Str"");
          for (          String s : crashList) {
            currentRoundEvents.add(Event.getFailure(Integer.parseInt(s)));
          }
        }
      }
      if (!crashedNodes.isEmpty()) {
        input=""String_Node_Str"";
        if (m_prompt) {
          System.out.println(""String_Node_Str"");
          input=Replay.getLine().trim();
        }
        if (!input.equals(""String_Node_Str"")) {
          String[] restartList=input.split(""String_Node_Str"");
          for (          String s : restartList) {
            currentRoundEvents.add(Event.getStart(Integer.parseInt(s),0));
          }
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.9177927927927928
98653,"/** 
 * Goes through all of the in transit messages and decides whether to drop, delay, or deliver.
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void checkInTransit(ArrayList<Event> currentRoundEvents){
  if (inTransitMsgs.isEmpty()) {
    return;
  }
  ArrayList<Packet> currentPackets=inTransitMsgs;
  inTransitMsgs=new ArrayList<Packet>();
  if (userControl.compareTo(FailureLvl.DROP) < 0) {
    Iterator<Packet> iter=currentPackets.iterator();
    while (iter.hasNext()) {
      Packet p=iter.next();
      double rand=Utility.getRNG().nextDouble();
      if (rand < dropRate) {
        System.out.println(""String_Node_Str"" + p.toString());
        this.logInTransit(p,""String_Node_Str"");
        iter.remove();
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    for (int i=0; i < currentPackets.size(); ++i) {
      System.out.println(i + ""String_Node_Str"" + currentPackets.get(i).toString());
    }
    try {
      System.out.println(""String_Node_Str"");
      String input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
      HashSet<Packet> toBeRemoved=new HashSet<Packet>();
      if (!input.equals(""String_Node_Str"")) {
        String[] dropList=input.split(""String_Node_Str"");
        Packet p;
        for (        String s : dropList) {
          p=currentPackets.get(Integer.parseInt(s));
          toBeRemoved.add(p);
          this.logInTransit(p,""String_Node_Str"");
        }
      }
      if (toBeRemoved.size() == currentPackets.size()) {
        return;
      }
      if (userControl.compareTo(FailureLvl.DELAY) >= 0) {
        System.out.println(""String_Node_Str"");
        input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
        if (!input.equals(""String_Node_Str"")) {
          String[] delayList=input.split(""String_Node_Str"");
          Packet p;
          for (          String s : delayList) {
            p=currentPackets.get(Integer.parseInt(s));
            inTransitMsgs.add(p);
            toBeRemoved.add(p);
            this.logInTransit(p,""String_Node_Str"");
          }
        }
        if (toBeRemoved.size() == currentPackets.size()) {
          return;
        }
      }
      currentPackets.removeAll(toBeRemoved);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (userControl.compareTo(FailureLvl.DELAY) < 0) {
    Iterator<Packet> iter=currentPackets.iterator();
    while (iter.hasNext()) {
      Packet p=iter.next();
      double rand=Utility.getRNG().nextDouble();
      double adjustedDelay=delayRate / (1 - dropRate);
      if (rand < adjustedDelay) {
        System.out.println(""String_Node_Str"" + p.toString());
        iter.remove();
        inTransitMsgs.add(p);
        this.logInTransit(p,""String_Node_Str"");
      }
    }
  }
  for (  Packet p : currentPackets) {
    currentRoundEvents.add(Event.getDelivery(p));
  }
}","/** 
 * Goes through all of the in transit messages and decides whether to drop, delay, or deliver.
 * @param currentRoundEvents The list of the current round's events that we should add to
 */
private void checkInTransit(ArrayList<Event> currentRoundEvents){
  if (inTransitMsgs.isEmpty()) {
    return;
  }
  ArrayList<Packet> currentPackets=inTransitMsgs;
  inTransitMsgs=new ArrayList<Packet>();
  if (userControl.compareTo(FailureLvl.DROP) < 0) {
    Iterator<Packet> iter=currentPackets.iterator();
    while (iter.hasNext()) {
      Packet p=iter.next();
      double rand=Utility.getRNG().nextDouble();
      if (rand < dropRate) {
        System.out.println(""String_Node_Str"" + p.toString());
        this.logInTransit(p,""String_Node_Str"");
        iter.remove();
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    for (int i=0; i < currentPackets.size(); ++i) {
      System.out.println(i + ""String_Node_Str"" + currentPackets.get(i).toString());
    }
    try {
      String input=""String_Node_Str"";
      if (m_prompt) {
        System.out.println(""String_Node_Str"");
        input=Replay.getLine().trim();
      }
      HashSet<Packet> toBeRemoved=new HashSet<Packet>();
      if (!input.equals(""String_Node_Str"")) {
        String[] dropList=input.split(""String_Node_Str"");
        Packet p;
        for (        String s : dropList) {
          p=currentPackets.get(Integer.parseInt(s));
          toBeRemoved.add(p);
          this.logInTransit(p,""String_Node_Str"");
        }
      }
      if (toBeRemoved.size() == currentPackets.size()) {
        return;
      }
      if (userControl.compareTo(FailureLvl.DELAY) >= 0) {
        input=""String_Node_Str"";
        if (m_prompt) {
          System.out.println(""String_Node_Str"");
          input=Replay.getLine().trim();
        }
        if (!input.equals(""String_Node_Str"")) {
          String[] delayList=input.split(""String_Node_Str"");
          Packet p;
          for (          String s : delayList) {
            p=currentPackets.get(Integer.parseInt(s));
            inTransitMsgs.add(p);
            toBeRemoved.add(p);
            this.logInTransit(p,""String_Node_Str"");
          }
        }
        if (toBeRemoved.size() == currentPackets.size()) {
          return;
        }
      }
      currentPackets.removeAll(toBeRemoved);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (userControl.compareTo(FailureLvl.DELAY) < 0) {
    Iterator<Packet> iter=currentPackets.iterator();
    while (iter.hasNext()) {
      Packet p=iter.next();
      double rand=Utility.getRNG().nextDouble();
      double adjustedDelay=delayRate / (1 - dropRate);
      if (rand < adjustedDelay) {
        System.out.println(""String_Node_Str"" + p.toString());
        iter.remove();
        inTransitMsgs.add(p);
        this.logInTransit(p,""String_Node_Str"");
      }
    }
  }
  for (  Packet p : currentPackets) {
    currentRoundEvents.add(Event.getDelivery(p));
  }
}",0.948656919415165
98654,"@Override protected void checkWriteCrash(Node n,String description){
  if (userControl.compareTo(FailureLvl.CRASH) < 0) {
    if (Utility.getRNG().nextDouble() < failureRate) {
      System.out.println(""String_Node_Str"" + n.addr);
      NodeCrashException e=failNode(n.addr);
      throw e;
    }
  }
 else {
    try {
      System.out.println(""String_Node_Str"" + n.addr + ""String_Node_Str""+ description+ ""String_Node_Str"");
      String input=m_prompt ? Replay.getLine().trim() : ""String_Node_Str"";
      if (input.length() != 0 && input.charAt(0) == 'y') {
        NodeCrashException e=failNode(n.addr);
        throw e;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override protected void checkWriteCrash(Node n,String description){
  if (userControl.compareTo(FailureLvl.CRASH) < 0) {
    if (Utility.getRNG().nextDouble() < failureRate) {
      System.out.println(""String_Node_Str"" + n.addr);
      NodeCrashException e=failNode(n.addr);
      throw e;
    }
  }
 else {
    try {
      String input=""String_Node_Str"";
      if (m_prompt) {
        System.out.println(""String_Node_Str"" + n.addr + ""String_Node_Str""+ description+ ""String_Node_Str"");
        input=Replay.getLine().trim();
      }
      if (input.length() != 0 && input.charAt(0) == 'y') {
        NodeCrashException e=failNode(n.addr);
        throw e;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.8932038834951457
98655,"private void writeMessagesAll(String token,String message){
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ message);
  String login=user.getLogin();
  internalPostMessageToAllFriends(login,message);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ message);
}","private void writeMessagesAll(String token,String message) throws Exception {
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ message);
  String login=user.getLogin();
  internalPostMessageToAllFriends(login,message);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ message);
}",0.9734513274336284
98656,"private String login(String username,String password){
  if (this.m_users.containsKey(username)) {
    String token=username;
    this.m_activeSessions.put(token,username);
    info(""String_Node_Str"" + username + ""String_Node_Str""+ token);
    return token;
  }
 else {
    return ""String_Node_Str"";
  }
}","private String login(String username,String password) throws Exception {
  if (this.m_users.containsKey(username)) {
    String token=username;
    this.m_activeSessions.put(token,username);
    info(""String_Node_Str"" + username + ""String_Node_Str""+ token);
    return token;
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}",0.9283489096573208
98657,"private User getUserFromToken(String token){
  if (this.m_activeSessions.containsKey(token)) {
    String login=this.m_activeSessions.get(token);
    return this.m_users.get(login);
  }
 else {
    return null;
  }
}","private User getUserFromToken(String token) throws Exception {
  if (this.m_activeSessions.containsKey(token)) {
    String login=this.m_activeSessions.get(token);
    return this.m_users.get(login);
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}",0.859538784067086
98658,"private void logout(String token){
  if (this.m_activeSessions.containsKey(token)) {
    this.m_activeSessions.remove(token);
    info(""String_Node_Str"" + token + ""String_Node_Str"");
  }
 else {
  }
}","private void logout(String token) throws Exception {
  if (this.m_activeSessions.containsKey(token)) {
    this.m_activeSessions.remove(token);
    info(""String_Node_Str"" + token + ""String_Node_Str"");
  }
 else {
    throw new Exception(""String_Node_Str"");
  }
}",0.8658008658008658
98659,"private String readMessagesAll(String token){
  User user=getUserFromToken(token);
  String login=user.getLogin();
  StringBuffer sb=new StringBuffer();
  if (this.m_messages.containsKey(login)) {
    List<Message> listOfMessages=this.m_messages.get(login);
    for (    Message message : listOfMessages) {
      sb.append(message.getMessage());
      sb.append('\n');
    }
  }
  return sb.toString();
}","private String readMessagesAll(String token) throws Exception {
  User user=getUserFromToken(token);
  String login=user.getLogin();
  StringBuffer sb=new StringBuffer();
  if (this.m_messages.containsKey(login)) {
    List<Message> listOfMessages=this.m_messages.get(login);
    for (    Message message : listOfMessages) {
      sb.append(message.getMessage());
      sb.append('\n');
    }
  }
  return sb.toString();
}",0.9782082324455206
98660,"private void internalAcceptFriend(String login,String friendLogin){
  addFriendToList(login,friendLogin);
  addFriendToList(friendLogin,login);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
}","private void internalAcceptFriend(String login,String friendLogin) throws Exception {
  addFriendToList(login,friendLogin);
  addFriendToList(friendLogin,login);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
}",0.9594594594594594
98661,"@Override protected void onMethodCalled(int from,String methodName,Vector<String> params){
  Vector<String> returnParams=new Vector();
  String returnMethodName=""String_Node_Str"";
  try {
    String returnValue=null;
    if (methodName == ""String_Node_Str"") {
      this.createUser(params.get(0),params.get(1));
    }
 else     if (methodName == ""String_Node_Str"") {
      returnValue=this.login(params.get(0),params.get(1));
    }
 else     if (methodName == ""String_Node_Str"") {
      this.logout(params.get(0));
    }
 else     if (methodName == ""String_Node_Str"") {
      this.addFriend(params.get(0),params.get(1));
    }
 else     if (methodName == ""String_Node_Str"") {
      this.acceptFriend(params.get(0),params.get(1));
    }
 else     if (methodName == ""String_Node_Str"") {
      this.writeMessagesAll(params.get(0),params.get(1));
    }
 else     if (methodName == ""String_Node_Str"") {
      returnValue=this.readMessagesAll(params.get(0));
    }
    returnParams.add(""String_Node_Str"");
    if (returnValue != null) {
      returnParams.add(returnValue);
    }
  }
 catch (  Exception e) {
    returnParams.add(""String_Node_Str"");
    returnParams.add(e.getMessage());
  }
  this.callMethod(from,returnMethodName,returnParams);
}","@Override protected void onMethodCalled(int from,String methodName,Vector<String> params){
  Vector<String> returnParams=new Vector();
  String returnMethodName=""String_Node_Str"";
  try {
    String returnValue=null;
    if (methodName.startsWith(""String_Node_Str"")) {
      this.createUser(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.login(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.logout(params.get(0));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.addFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.acceptFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.writeMessagesAll(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.readMessagesAll(params.get(0));
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
    returnParams.add(""String_Node_Str"");
    if (returnValue != null) {
      returnParams.add(returnValue);
    }
  }
 catch (  Exception e) {
    returnParams.add(""String_Node_Str"");
    returnParams.add(e.getMessage());
  }
  this.callMethod(from,returnMethodName,returnParams);
}",0.4196394322976601
98662,"private void addFriend(String token,String friendLogin){
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ friendLogin);
  String login=user.getLogin();
  internalAddFriend(login,friendLogin);
}","private void addFriend(String token,String friendLogin) throws Exception {
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ friendLogin);
  String login=user.getLogin();
  internalAddFriend(login,friendLogin);
}",0.9661654135338346
98663,"private void internalAddFriend(String login,String friendLogin){
  List<User> listFriends;
  if (this.m_friendRequestss.containsKey(login)) {
    listFriends=this.m_friends.get(login);
  }
 else {
    listFriends=new Vector<User>();
    this.m_friendRequestss.put(login,listFriends);
  }
  User friendUser=this.m_users.get(friendLogin);
  listFriends.add(friendUser);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
}","private void internalAddFriend(String login,String friendLogin) throws Exception {
  List<User> listFriends;
  if (this.m_friendRequestss.containsKey(login)) {
    listFriends=this.m_friends.get(login);
  }
 else {
    listFriends=new Vector<User>();
    this.m_friendRequestss.put(login,listFriends);
  }
  if (!this.m_users.containsKey(friendLogin)) {
    throw new Exception(""String_Node_Str"");
  }
  User friendUser=this.m_users.get(friendLogin);
  listFriends.add(friendUser);
  info(""String_Node_Str"" + login + ""String_Node_Str""+ friendLogin);
}",0.8846153846153846
98664,"@Override public void onCommand(String command){
  String[] parts=command.split(""String_Node_Str"");
  String verb=parts[0];
  if (verb.startsWith(""String_Node_Str"")) {
    this.createUser(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.login(parts[1],parts[2]));
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.logout(parts[1]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.addFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.acceptFriend(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    this.writeMessagesAll(parts[1],parts[2]);
  }
 else   if (verb.startsWith(""String_Node_Str"")) {
    System.out.println(this.readMessagesAll(parts[1]));
  }
}","@Override public void onCommand(String command){
  try {
    String[] parts=command.split(""String_Node_Str"");
    String verb=parts[0];
    if (verb.startsWith(""String_Node_Str"")) {
      this.createUser(parts[1],parts[2]);
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      System.out.println(this.login(parts[1],parts[2]));
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      this.logout(parts[1]);
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      this.addFriend(parts[1],parts[2]);
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      this.acceptFriend(parts[1],parts[2]);
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      this.writeMessagesAll(parts[1],parts[2]);
    }
 else     if (verb.startsWith(""String_Node_Str"")) {
      System.out.println(this.readMessagesAll(parts[1]));
    }
  }
 catch (  Exception ex) {
    error(ex.getMessage());
  }
}",0.9325581395348838
98665,"private void acceptFriend(String token,String friendLogin){
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ friendLogin);
  String login=user.getLogin();
  internalAcceptFriend(login,friendLogin);
}","private void acceptFriend(String token,String friendLogin) throws Exception {
  User user=getUserFromToken(token);
  this.appendToLog(""String_Node_Str"" + user.getLogin() + ""String_Node_Str""+ friendLogin);
  String login=user.getLogin();
  internalAcceptFriend(login,friendLogin);
}",0.9669117647058824
98666,"private void createUser(String username,String password){
  if (this.m_users.containsKey(username)) {
  }
 else {
    this.appendToLog(""String_Node_Str"" + username + password);
    this.m_users.put(username,new User(username,password));
  }
}","private void createUser(String username,String password) throws Exception {
  if (this.m_users.containsKey(username)) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    this.appendToLog(""String_Node_Str"" + username + password);
    this.m_users.put(username,new User(username,password));
  }
}",0.8864468864468864
98667,"private void addFriendToList(String login,String friendLogin){
  List<User> listFriends;
  if (this.m_friends.containsKey(login)) {
    listFriends=this.m_friends.get(login);
  }
 else {
    listFriends=new Vector<User>();
    this.m_friends.put(login,listFriends);
  }
  User friendUser=this.m_users.get(friendLogin);
  listFriends.add(friendUser);
}","private void addFriendToList(String login,String friendLogin) throws Exception {
  List<User> listFriends;
  if (this.m_friends.containsKey(login)) {
    listFriends=this.m_friends.get(login);
  }
 else {
    listFriends=new Vector<User>();
    this.m_friends.put(login,listFriends);
  }
  if (!this.m_users.containsKey(friendLogin)) {
    throw new Exception(""String_Node_Str"");
  }
  User friendUser=this.m_users.get(friendLogin);
  listFriends.add(friendUser);
}",0.8602941176470589
98668,"@Override protected void executeClientCommand(String command){
  String[] parts=command.split(""String_Node_Str"");
  String verb=parts[0];
  Vector<String> params=new Vector<String>();
  for (int i=1; i < parts.length; i++) {
    params.add(parts[i]);
  }
  m_pendingCommand=verb;
  this.callMethod(0,verb,params);
}","@Override protected void executeClientCommand(String command){
  String[] parts=command.split(""String_Node_Str"");
  String methodName=parts[0];
  Vector<String> params=new Vector<String>();
  if (methodName.startsWith(""String_Node_Str"")) {
    int idx=command.indexOf(' ');
    int nextIdx=command.indexOf(' ',idx + 1);
    if (idx != -1 && nextIdx != -1) {
      String token=command.substring(idx,nextIdx).trim();
      String msg=command.substring(nextIdx,command.length()).trim();
      params.add(token);
      params.add(msg);
    }
  }
 else {
    for (int i=1; i < parts.length; i++) {
      params.add(parts[i]);
    }
  }
  this.callMethod(0,methodName,params);
}",0.5769230769230769
98669,"private void executeServerCommand(int from,String methodName,Vector<String> params){
  Vector<String> returnParams=new Vector<String>();
  String returnMethodName=""String_Node_Str"";
  try {
    String returnValue=null;
    if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.createUser(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.m_system.login(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.logout(params.get(0));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.addFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.acceptFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.writeMessagesAll(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.m_system.readMessagesAll(params.get(0));
    }
 else {
      throw new FacebookException(FacebookException.INVALID_FACEBOOK_METHOD);
    }
    returnParams.add(""String_Node_Str"");
    if (returnValue != null) {
      returnParams.add(returnValue);
    }
  }
 catch (  FacebookException e) {
    returnParams.add(""String_Node_Str"");
    returnParams.add(String.format(ERROR_MESSAGE_FORMAT,methodName,this.addr,e.getExceptionCode()));
  }
  m_pendingCommand=returnMethodName;
  this.callMethod(from,returnMethodName,returnParams);
}","private void executeServerCommand(int from,String methodName,Vector<String> params){
  Vector<String> returnParams=new Vector<String>();
  String returnMethodName=""String_Node_Str"";
  try {
    String returnValue=null;
    if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.createUser(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.m_system.login(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.logout(params.get(0));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.addFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.acceptFriend(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      this.m_system.writeMessagesAll(params.get(0),params.get(1));
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      returnValue=this.m_system.readMessagesAll(params.get(0));
    }
 else {
      throw new FacebookException(FacebookException.INVALID_FACEBOOK_METHOD);
    }
    returnParams.add(""String_Node_Str"");
    if (returnValue != null) {
      returnParams.add(returnValue);
    }
  }
 catch (  FacebookException e) {
    returnParams.add(""String_Node_Str"");
    returnParams.add(String.format(ERROR_MESSAGE_FORMAT,methodName,this.addr,e.getExceptionCode()));
  }
  this.callMethod(from,returnMethodName,returnParams);
}",0.9590718659361908
98670,"@Override protected void onMethodCalled(int from,String methodName,Vector<String> params){
  if (isServer()) {
    executeServerCommand(from,methodName,params);
  }
 else {
    endClientCommand(from,methodName,params);
  }
}","@Override protected void onMethodCalled(int from,String methodName,Vector<String> params){
  if (isServer()) {
    executeServerCommand(from,methodName,params);
  }
 else {
    endClientCommand(from,methodName.toLowerCase().trim(),params);
  }
}",0.9552238805970148
98671,"private void endClientCommand(int from,String methodName,Vector<String> params){
  if (params.size() == 2 && params.get(0).equals(""String_Node_Str"")) {
    user_info(String.format(""String_Node_Str"",this.addr,params.get(1)));
  }
 else   if (params.size() == 2 && params.get(0).equals(""String_Node_Str"")) {
    user_info(""String_Node_Str"" + params.get(1));
  }
  endCommand();
}","private void endClientCommand(int from,String methodName,Vector<String> params){
  if (params.size() == 2 && params.get(0).equals(""String_Node_Str"")) {
    user_info(String.format(""String_Node_Str"",this.addr,params.get(1)));
  }
 else   if (params.size() >= 1 && params.get(0).equals(""String_Node_Str"")) {
    String returnValue=params.size() == 2 ? params.get(1) : null;
    user_info(""String_Node_Str"" + returnValue);
  }
  endCommand();
}",0.8801955990220048
98672,"@Override protected void onConnectionAborted(int endpoint){
  if (isServer()) {
  }
 else {
    if (m_pendingCommand != null) {
      Vector<String> args=new Vector<String>();
      args.add(""String_Node_Str"");
      args.add(String.format(ERROR_MESSAGE_FORMAT,m_pendingCommand,0,FacebookException.CONNECTION_ABORTED));
      endClientCommand(0,m_pendingCommand,args);
    }
  }
}","@Override protected void onConnectionAborted(int endpoint){
  if (isServer()) {
  }
 else {
    String pendingCommand;
    if ((pendingCommand=this._commandQueue.peek()) != null) {
      Vector<String> args=new Vector<String>();
      args.add(""String_Node_Str"");
      args.add(String.format(ERROR_MESSAGE_FORMAT,pendingCommand,0,FacebookException.CONNECTION_ABORTED));
      endClientCommand(0,pendingCommand,args);
    }
  }
}",0.8899876390605687
98673,"/** 
 * API: login()
 * @param username
 * @param password
 * @return
 * @throws FacebookException
 */
public String login(String username,String password) throws FacebookException {
  if (this.isValidUser(username)) {
    String token=username;
    this.m_activeSessions.put(token,username);
    this.info(""String_Node_Str"" + username + ""String_Node_Str""+ token);
    return token;
  }
 else {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
}","/** 
 * API: login()
 * @param username
 * @param password
 * @return
 * @throws FacebookException
 */
public String login(String username,String password) throws FacebookException {
  if (this.isValidUser(username)) {
    String token=nextSessionId();
    this.m_activeSessions.put(token,username);
    this.info(""String_Node_Str"" + username + ""String_Node_Str""+ token);
    return token;
  }
 else {
    throw new FacebookException(FacebookException.USER_DONT_EXIST);
  }
}",0.975609756097561
98674,"public void save(File file){
  Path path=Paths.get(file.getAbsolutePath());
  if (Files.isWritable(path)) {
    try {
      save(Files.newOutputStream(path));
    }
 catch (    IOException ioe) {
      throw Throwables.propagate(ioe);
    }
  }
 else {
    throw new IllegalStateException(String.format(""String_Node_Str"",path));
  }
}","public void save(File file){
  Path path=Paths.get(file.getAbsolutePath());
  if (Files.exists(path) && !Files.isWritable(path)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",path));
  }
  try {
    save(Files.newOutputStream(path));
  }
 catch (  IOException ioe) {
    throw Throwables.propagate(ioe);
  }
}",0.6956521739130435
98675,"@Override public void actionPerformed(ActionEvent e){
  controller.setMode(mode.get().name());
  controller.setRender(render.get().name());
  controller.setPaletteFile(paletteFile.get());
  controller.setPaletteSize(paletteSize.get());
  controller.setSeed(seed.get());
  controller.setThreads(threads.get());
  controller.setDebug(debug.get());
  controller.loadColours();
  controller.getViewer().reset();
  if (controller.getViewer().isVisible()) {
    controller.getViewer().start();
  }
  setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  setVisible(false);
  controller.getViewer().stop();
  controller.setMode(mode.get().name());
  controller.setRender(render.get().name());
  controller.setPaletteFile(paletteFile.get());
  controller.setPaletteSize(paletteSize.get());
  controller.setSeed(seed.get());
  controller.setThreads(threads.get());
  controller.setDebug(debug.get());
  controller.loadColours();
  controller.getViewer().reset();
  if (controller.getViewer().isVisible()) {
    controller.getViewer().start();
  }
}",0.9293119698397738
98676,"public Preferences(final Explorer controller,final EventBus bus,final Window parent){
  super(controller,bus,parent);
  setLabel(messages.getText(DIALOG_PREFERENCES_TITLE));
  mode=addDropDown(messages.getText(DIALOG_PREFERENCES_MODE),controller.getMode(),Mode.values());
  render=addDropDown(messages.getText(DIALOG_PREFERENCES_RENDER),controller.getRender(),Render.values());
  paletteFile=addDropDown(messages.getText(DIALOG_PREFERENCES_PALETTE_FILE),controller.getPaletteFile(),Config.PALETTE_FILES);
  paletteSize=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SIZE),controller.getPaletteSize(),new Utils.IntegerFormatter(0,256));
  seed=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SEED),controller.getSeed(),new Utils.LongFormatter());
  threads=addProperty(messages.getText(DIALOG_PREFERENCES_THREADS),controller.getThreads(),new Utils.IntegerFormatter(Config.MIN_THREADS,8));
  debug=addCheckBox(messages.getText(DIALOG_PREFERENCES_DEBUG),controller.isDebug());
  setAction(new AbstractAction(messages.getText(DIALOG_PREFERENCES_BUTTON_UPDATE)){
    @Override public void actionPerformed(    ActionEvent e){
      controller.setMode(mode.get().name());
      controller.setRender(render.get().name());
      controller.setPaletteFile(paletteFile.get());
      controller.setPaletteSize(paletteSize.get());
      controller.setSeed(seed.get());
      controller.setThreads(threads.get());
      controller.setDebug(debug.get());
      controller.loadColours();
      controller.getViewer().reset();
      if (controller.getViewer().isVisible()) {
        controller.getViewer().start();
      }
      setVisible(false);
    }
  }
);
  setCancel(messages.getText(DIALOG_PREFERENCES_BUTTON_CANCEL));
}","public Preferences(final Explorer controller,final EventBus bus,final Window parent){
  super(controller,bus,parent);
  setLabel(messages.getText(DIALOG_PREFERENCES_TITLE));
  mode=addDropDown(messages.getText(DIALOG_PREFERENCES_MODE),controller.getMode(),Mode.values());
  render=addDropDown(messages.getText(DIALOG_PREFERENCES_RENDER),controller.getRender(),Render.values());
  paletteFile=addDropDown(messages.getText(DIALOG_PREFERENCES_PALETTE_FILE),controller.getPaletteFile(),Config.PALETTE_FILES);
  paletteSize=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SIZE),controller.getPaletteSize(),new Utils.IntegerFormatter(0,256));
  seed=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SEED),controller.getSeed(),new Utils.LongFormatter());
  threads=addProperty(messages.getText(DIALOG_PREFERENCES_THREADS),controller.getThreads(),new Utils.IntegerFormatter(Config.MIN_THREADS,8));
  debug=addCheckBox(messages.getText(DIALOG_PREFERENCES_DEBUG),controller.isDebug());
  setAction(new AbstractAction(messages.getText(DIALOG_PREFERENCES_BUTTON_UPDATE)){
    @Override public void actionPerformed(    ActionEvent e){
      setVisible(false);
      controller.getViewer().stop();
      controller.setMode(mode.get().name());
      controller.setRender(render.get().name());
      controller.setPaletteFile(paletteFile.get());
      controller.setPaletteSize(paletteSize.get());
      controller.setSeed(seed.get());
      controller.setThreads(threads.get());
      controller.setDebug(debug.get());
      controller.loadColours();
      controller.getViewer().reset();
      if (controller.getViewer().isVisible()) {
        controller.getViewer().start();
      }
    }
  }
);
  setCancel(messages.getText(DIALOG_PREFERENCES_BUTTON_CANCEL));
}",0.9750787739902608
98677,"/** 
 * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent) 
 */
@Override public void mouseDragged(MouseEvent e){
  if (start != null) {
    end=snap(e.getPoint());
    if (selected == null) {
      if (e.isShiftDown()) {
        int dx=end.x - start.x;
        int dy=end.y - start.y;
        end.y=start.y + (int)Math.copySign(dx,dy);
      }
    }
 else     if (selected != null && resize != null) {
      double w=resize.w;
      double h=resize.h;
      int dx=end.x - start.x;
      int dy=end.y - start.y;
      Point delta=new Point();
      Point inverseX=new Point();
      Point inverseY=new Point();
      Point inverse=new Point();
      AffineTransform reverse=new AffineTransform();
      reverse.rotate(-resize.r);
      reverse.transform(new Point(dx,dy),delta);
      try {
        reverse.inverseTransform(new Point(delta.x,0),inverseX);
        reverse.inverseTransform(new Point(0,delta.y),inverseY);
        reverse.inverseTransform(new Point(delta.x,delta.y),inverse);
      }
 catch (      NoninvertibleTransformException e1) {
        Throwables.propagate(e1);
      }
      double x=resize.x;
      double y=resize.y;
      if (e.isShiftDown()) {
        double aspect=w / h;
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
          x+=inverse.y * aspect;
        y+=inverse.y;
      w-=delta.y * aspect;
    h-=delta.y;
  break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w-=delta.y * aspect;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x-=inverse.y * aspect;
y+=inverseX.y;
w+=delta.y * aspect;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.y * aspect;
h+=delta.y;
break;
}
}
 else {
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
x+=inverse.x;
y+=inverse.y;
w-=delta.x;
h-=delta.y;
break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w+=delta.x;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x+=inverseX.x;
y+=inverseX.y;
w-=delta.x;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.x;
h+=delta.y;
break;
}
}
int grid=controller.getSnapGrid();
w=Math.max(grid,w);
h=Math.max(grid,h);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=x;
selected.y=y;
selected.w=w;
selected.h=h;
selected.r=resize.r;
}
 else if (selected != null && move != null) {
int dx=end.x - start.x;
int dy=end.y - start.y;
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
if (move.isMatrix()) {
AffineTransform moved=AffineTransform.getTranslateInstance(dx,dy);
moved.concatenate(move.getTransform());
double matrix[]=new double[6];
moved.getMatrix(matrix);
selected.setMatrix(matrix);
}
 else {
double x=move.x + dx;
double y=move.y + dy;
selected.x=x;
selected.y=y;
selected.w=move.w;
selected.h=move.h;
selected.r=move.r;
}
}
 else if (selected != null && rotate != null) {
Point origin=new Point();
rotate.getTransform().transform(new Point(0,0),origin);
int dx=end.x - origin.x;
int dy=end.y - origin.y;
double r=Math.atan2(dy,dx);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=rotate.x;
selected.y=rotate.y;
selected.w=rotate.w;
selected.h=rotate.h;
selected.r=r;
}
repaint();
}
}","/** 
 * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent) 
 */
@Override public void mouseDragged(MouseEvent e){
  if (start != null) {
    end=snap(e.getPoint());
    if (selected == null) {
      if (e.isShiftDown()) {
        int dx=end.x - start.x;
        int dy=end.y - start.y;
        end.y=start.y + (int)Math.copySign(dx,dy);
      }
    }
 else     if (selected != null && resize != null) {
      double w=resize.w;
      double h=resize.h;
      int dx=end.x - start.x;
      int dy=end.y - start.y;
      Point delta=new Point();
      Point inverseX=new Point();
      Point inverseY=new Point();
      AffineTransform reverse=new AffineTransform();
      reverse.rotate(-resize.r);
      reverse.transform(new Point(dx,dy),delta);
      try {
        reverse.inverseTransform(new Point(delta.x,0),inverseX);
        reverse.inverseTransform(new Point(0,delta.y),inverseY);
      }
 catch (      NoninvertibleTransformException e1) {
        Throwables.propagate(e1);
      }
      double x=resize.x;
      double y=resize.y;
      if (e.isShiftDown()) {
        double a=w / h;
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
          x+=((inverseX.y * a) + (inverseY.y * a));
        y+=(inverseX.y + inverseY.y);
      w-=delta.y * a;
    h-=delta.y;
  break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w-=delta.y * a;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x-=((inverseX.y * a) + (inverseY.y * a));
y+=inverseX.y;
w+=delta.y * a;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.y * a;
h+=delta.y;
break;
}
}
 else {
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=(inverseX.y + inverseY.y);
w-=delta.x;
h-=delta.y;
break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w+=delta.x;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=inverseX.y;
w-=delta.x;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.x;
h+=delta.y;
break;
}
}
int grid=controller.getSnapGrid();
w=Math.max(grid,w);
h=Math.max(grid,h);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=x;
selected.y=y;
selected.w=w;
selected.h=h;
selected.r=resize.r;
}
 else if (selected != null && move != null) {
int dx=end.x - start.x;
int dy=end.y - start.y;
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
if (move.isMatrix()) {
AffineTransform moved=AffineTransform.getTranslateInstance(dx,dy);
moved.concatenate(move.getTransform());
double matrix[]=new double[6];
moved.getMatrix(matrix);
selected.setMatrix(matrix);
}
 else {
double x=move.x + dx;
double y=move.y + dy;
selected.x=x;
selected.y=y;
selected.w=move.w;
selected.h=move.h;
selected.r=move.r;
}
}
 else if (selected != null && rotate != null) {
Point origin=new Point();
rotate.getTransform().transform(new Point(0,0),origin);
int dx=end.x - origin.x;
int dy=end.y - origin.y;
double r=Math.atan2(dy,dx);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=rotate.x;
selected.y=rotate.y;
selected.w=rotate.w;
selected.h=rotate.h;
selected.r=r;
}
repaint();
}
}",0.9420267085624509
98678,"/** 
 * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent) 
 */
@Override public void mouseDragged(MouseEvent e){
  if (start != null) {
    end=snap(e.getPoint());
    if (selected == null) {
      if (e.isShiftDown()) {
        int dx=end.x - start.x;
        int dy=end.y - start.y;
        end.y=start.y + (int)Math.copySign(dx,dy);
      }
    }
 else     if (selected != null && resize != null) {
      double w=resize.w;
      double h=resize.h;
      int dx=end.x - start.x;
      int dy=end.y - start.y;
      Point delta=new Point();
      Point inverseX=new Point();
      Point inverseY=new Point();
      AffineTransform reverse=new AffineTransform();
      reverse.rotate(-resize.r);
      reverse.transform(new Point(dx,dy),delta);
      try {
        reverse.inverseTransform(new Point(delta.x,0),inverseX);
        reverse.inverseTransform(new Point(0,delta.y),inverseY);
      }
 catch (      NoninvertibleTransformException e1) {
        Throwables.propagate(e1);
      }
      double x=resize.x;
      double y=resize.y;
      if (e.isShiftDown()) {
        double a=w / h;
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
          x+=((inverseX.y * a) + (inverseY.y * a));
        y+=(inverseX.y + inverseY.y);
      w-=delta.y * a;
    h-=delta.y;
  break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w-=delta.y * a;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x-=((inverseX.y * a) + (inverseY.y * a));
y+=inverseX.y;
w+=delta.y * a;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.y * a;
h+=delta.y;
break;
}
}
 else {
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=(inverseX.y + inverseY.y);
w-=delta.x;
h-=delta.y;
break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w+=delta.x;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=inverseX.y;
w-=delta.x;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.x;
h+=delta.y;
break;
}
}
int grid=controller.getSnapGrid();
w=Math.max(grid,w);
h=Math.max(grid,h);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=x;
selected.y=y;
selected.w=w;
selected.h=h;
selected.r=resize.r;
selected.shx=resize.shx;
selected.shy=resize.shy;
}
 else if (selected != null && move != null) {
int dx=end.x - start.x;
int dy=end.y - start.y;
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
if (move.isMatrix()) {
AffineTransform moved=AffineTransform.getTranslateInstance(dx,dy);
moved.concatenate(move.getTransform());
double matrix[]=new double[6];
moved.getMatrix(matrix);
selected.setMatrix(matrix);
}
 else {
double x=move.x + dx;
double y=move.y + dy;
selected.x=x;
selected.y=y;
selected.w=move.w;
selected.h=move.h;
selected.r=move.r;
selected.shx=move.shx;
selected.shy=move.shy;
}
}
 else if (selected != null && rotate != null) {
Point origin=new Point();
rotate.getTransform().transform(new Point(0,0),origin);
int dx=end.x - origin.x;
int dy=end.y - origin.y;
double r=Math.atan2(dy,dx);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=rotate.x;
selected.y=rotate.y;
selected.w=rotate.w;
selected.h=rotate.h;
selected.r=r;
selected.shx=rotate.shx;
selected.shy=rotate.shy;
}
repaint();
}
}","/** 
 * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent) 
 */
@Override public void mouseDragged(MouseEvent e){
  if (start != null) {
    end=snap(e.getPoint());
    if (selected == null) {
      if (e.isShiftDown()) {
        int dx=end.x - start.x;
        int dy=end.y - start.y;
        end.y=start.y + (int)Math.copySign(dx,dy);
      }
    }
 else     if (selected != null && resize != null) {
      double w=resize.w;
      double h=resize.h;
      int dx=end.x - start.x;
      int dy=end.y - start.y;
      Point delta=new Point();
      Point inverseX=new Point();
      Point inverseY=new Point();
      AffineTransform reverse=new AffineTransform();
      reverse.rotate(-resize.r);
      reverse.transform(new Point(dx,dy),delta);
      try {
        reverse.inverseTransform(new Point(delta.x,0),inverseX);
        reverse.inverseTransform(new Point(0,delta.y),inverseY);
      }
 catch (      NoninvertibleTransformException e1) {
        Throwables.propagate(e1);
      }
      double x=resize.x;
      double y=resize.y;
      if (e.isShiftDown()) {
        double a=w / h;
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
          x+=((inverseX.y * a) + (inverseY.y * a));
        y+=(inverseX.y + inverseY.y);
      w-=delta.y * a;
    h-=delta.y;
  break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w-=delta.y * a;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x-=((inverseX.y * a) + (inverseY.y * a));
y+=inverseX.y;
w+=delta.y * a;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.y * a;
h+=delta.y;
break;
}
}
 else {
switch (corner.getType()) {
case Cursor.NW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=(inverseX.y + inverseY.y);
w-=delta.x;
h-=delta.y;
break;
case Cursor.NE_RESIZE_CURSOR:
x+=inverseY.x;
y+=inverseY.y;
w+=delta.x;
h-=delta.y;
break;
case Cursor.SW_RESIZE_CURSOR:
x+=(inverseX.x + inverseY.x);
y+=inverseX.y;
w-=delta.x;
h+=delta.y;
break;
case Cursor.SE_RESIZE_CURSOR:
w+=delta.x;
h+=delta.y;
break;
}
}
int grid=controller.getSnapGrid();
w=Math.max(grid,w);
h=Math.max(grid,h);
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=x;
selected.y=y;
selected.w=w;
selected.h=h;
selected.r=resize.r;
selected.shx=resize.shx;
selected.shy=resize.shy;
}
 else if (selected != null && move != null) {
int dx=end.x - start.x;
int dy=end.y - start.y;
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
if (move.isMatrix()) {
AffineTransform moved=AffineTransform.getTranslateInstance(dx,dy);
moved.concatenate(move.getTransform());
double matrix[]=new double[6];
moved.getMatrix(matrix);
selected.setMatrix(matrix);
}
 else {
double x=move.x + dx;
double y=move.y + dy;
selected.x=x;
selected.y=y;
selected.w=move.w;
selected.h=move.h;
selected.r=move.r;
selected.shx=move.shx;
selected.shy=move.shy;
}
}
 else if (selected != null && rotate != null) {
Point origin=new Point();
rotate.getTransform().transform(new Point(0,0),origin);
int dx=end.x - origin.x;
int dy=end.y - origin.y;
double r=Math.atan2(dy - (selected.shy * dx),dx - (selected.shx * dy));
selected=new Transform(selected.getId(),selected.getZIndex(),getSize());
selected.x=rotate.x;
selected.y=rotate.y;
selected.w=rotate.w;
selected.h=rotate.h;
selected.r=r;
selected.shx=rotate.shx;
selected.shy=rotate.shy;
}
repaint();
}
}",0.9934072520227748
98679,"public void paintTransform(Transform t,boolean highlight,Graphics2D g){
  Rectangle unit=new Rectangle(getSize());
  Shape rect=t.getTransform().createTransformedShape(unit);
  g.setPaint(Color.BLACK);
  if (highlight) {
    g.setStroke(new BasicStroke(2f,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,new float[]{10f,10f},0f));
  }
 else {
    g.setStroke(new BasicStroke(2f));
  }
  g.draw(rect);
  if (highlight) {
    if (t.isMatrix()) {
      g.setPaint(new Color(Color.GREEN.getRed(),Color.GREEN.getGreen(),Color.GREEN.getBlue(),16));
    }
 else {
      g.setPaint(new Color(Color.BLUE.getRed(),Color.BLUE.getGreen(),Color.BLUE.getBlue(),16));
    }
  }
 else {
    g.setPaint(new Color(Color.GRAY.getRed(),Color.GRAY.getGreen(),Color.GRAY.getBlue(),8));
  }
  g.fill(rect);
  if (!t.isMatrix()) {
    g.setStroke(new BasicStroke(2f));
    g.setPaint(Color.BLACK);
    int[] cornerX=new int[]{0,0,getWidth(),getWidth()};
    int[] cornerY=new int[]{0,getHeight(),getHeight(),0};
    for (int i=0; i < 4; i++) {
      Point center=new Point();
      t.getTransform().transform(new Point(cornerX[i],cornerY[i]),center);
      Rectangle corner=new Rectangle(center.x - 4,center.y - 4,8,8);
      g.fill(corner);
    }
    int rotateX=getWidth() / 2, rotateY=0;
    Point center=new Point();
    t.getTransform().transform(new Point(rotateX,rotateY),center);
    Arc2D handle=new Arc2D.Double(center.getX() - 6d,center.getY() - 6d,12d,12d,0d,360d,Arc2D.OPEN);
    g.draw(handle);
  }
  Graphics2D gr=(Graphics2D)g.create();
  if (highlight) {
    gr.setPaint(Color.BLACK);
  }
 else {
    gr.setPaint(new Color(Color.BLACK.getRed(),Color.BLACK.getGreen(),Color.BLACK.getBlue(),128));
  }
  gr.setFont(new Font(""String_Node_Str"",Font.BOLD,25));
  Point text=new Point();
  t.getTransform().transform(new Point(0,0),text);
  AffineTransform rotation=new AffineTransform();
  if (t.isMatrix()) {
    rotation=t.getTransform();
    rotation.scale(1 / t.getScaleX(),1 / t.getScaleY());
    rotation.translate(-t.getTranslateX(),-t.getTranslateY());
  }
 else {
    rotation.rotate(t.r,text.x,text.y);
  }
  gr.setTransform(rotation);
  gr.drawString(String.format(""String_Node_Str"",t.getId(),(highlight && rotate != null) ? String.format(""String_Node_Str"",(int)Math.toDegrees(t.r)) : ""String_Node_Str""),text.x + 5,text.y + 25);
  gr.dispose();
  g.dispose();
}","public void paintTransform(Transform t,boolean highlight,Graphics2D g){
  Rectangle unit=new Rectangle(getSize());
  Shape rect=t.getTransform().createTransformedShape(unit);
  g.setPaint(Color.BLACK);
  if (highlight) {
    g.setStroke(new BasicStroke(2f,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,new float[]{10f,10f},0f));
  }
 else {
    g.setStroke(new BasicStroke(2f));
  }
  g.draw(rect);
  if (highlight) {
    if (t.isMatrix()) {
      g.setPaint(new Color(Color.GREEN.getRed(),Color.GREEN.getGreen(),Color.GREEN.getBlue(),16));
    }
 else {
      g.setPaint(new Color(Color.BLUE.getRed(),Color.BLUE.getGreen(),Color.BLUE.getBlue(),16));
    }
  }
 else {
    g.setPaint(new Color(Color.GRAY.getRed(),Color.GRAY.getGreen(),Color.GRAY.getBlue(),8));
  }
  g.fill(rect);
  if (!t.isMatrix()) {
    g.setStroke(new BasicStroke(2f));
    g.setPaint(Color.BLACK);
    int[] cornerX=new int[]{0,0,getWidth(),getWidth()};
    int[] cornerY=new int[]{0,getHeight(),getHeight(),0};
    for (int i=0; i < 4; i++) {
      Point center=new Point();
      t.getTransform().transform(new Point(cornerX[i],cornerY[i]),center);
      Rectangle corner=new Rectangle(center.x - 4,center.y - 4,8,8);
      g.fill(corner);
    }
    int rotateX=getWidth() / 2, rotateY=0;
    Point center=new Point();
    t.getTransform().transform(new Point(rotateX,rotateY),center);
    Arc2D handle=new Arc2D.Double(center.getX() - 6d,center.getY() - 6d,12d,12d,0d,360d,Arc2D.OPEN);
    g.draw(handle);
  }
  Graphics2D gr=(Graphics2D)g.create();
  if (highlight) {
    gr.setPaint(Color.BLACK);
  }
 else {
    gr.setPaint(new Color(Color.BLACK.getRed(),Color.BLACK.getGreen(),Color.BLACK.getBlue(),128));
  }
  gr.setFont(new Font(""String_Node_Str"",Font.BOLD,25));
  Point text=new Point();
  t.getTransform().transform(new Point(0,0),text);
  AffineTransform rotation=new AffineTransform();
  if (t.isMatrix()) {
    rotation=t.getTransform();
    rotation.scale(1 / t.getScaleX(),1 / t.getScaleY());
    rotation.translate(-t.getTranslateX(),-t.getTranslateY());
  }
 else {
    rotation.translate(text.x,text.y);
    rotation.shear(t.shx,t.shy);
    rotation.rotate(t.r);
    rotation.translate(-text.x,-text.y);
  }
  gr.setTransform(rotation);
  gr.drawString(String.format(""String_Node_Str"",t.getId(),(highlight && rotate != null) ? String.format(""String_Node_Str"",(int)Math.toDegrees(t.r)) : ""String_Node_Str""),text.x + 5,text.y + 25);
  gr.dispose();
  g.dispose();
}",0.9749326703956908
98680,"@Override public void actionPerformed(ActionEvent e){
  controller.setMode(mode.get().name());
  controller.setRender(render.get().name());
  controller.setPaletteFile(paletteFile.get());
  controller.setPaletteSize(paletteSize.get());
  controller.setSeed(seed.get());
  controller.setThreads(threads.get());
  controller.setDebug(debug.get());
  controller.loadColours();
  bus.post(controller.getIFS());
  setVisible(false);
}","@Override public void actionPerformed(ActionEvent e){
  controller.setMode(mode.get().name());
  controller.setRender(render.get().name());
  controller.setPaletteFile(paletteFile.get());
  controller.setPaletteSize(paletteSize.get());
  controller.setSeed(seed.get());
  controller.setThreads(threads.get());
  controller.setDebug(debug.get());
  controller.loadColours();
  controller.getViewer().reset();
  setVisible(false);
}",0.9057043073341094
98681,"public Preferences(final Explorer controller,final EventBus bus,final Window parent){
  super(controller,bus,parent);
  setLabel(messages.getText(DIALOG_PREFERENCES_TITLE));
  mode=addDropDown(messages.getText(DIALOG_PREFERENCES_MODE),controller.getMode(),gridbag,c,Mode.values());
  render=addDropDown(messages.getText(DIALOG_PREFERENCES_RENDER),controller.getRender(),gridbag,c,Render.values());
  paletteFile=addDropDown(messages.getText(DIALOG_PREFERENCES_PALETTE_FILE),controller.getPaletteFile(),gridbag,c,Config.PALETTE_FILES);
  paletteSize=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SIZE),controller.getPaletteSize(),gridbag,c,new Utils.IntegerFormatter(0,256));
  seed=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SEED),controller.getSeed(),gridbag,c,new Utils.LongFormatter());
  threads=addProperty(messages.getText(DIALOG_PREFERENCES_THREADS),controller.getThreads(),gridbag,c,new Utils.IntegerFormatter(Config.MIN_THREADS,8));
  debug=addCheckBox(messages.getText(DIALOG_PREFERENCES_DEBUG),controller.isDebug(),gridbag,c);
  setAction(new AbstractAction(messages.getText(DIALOG_PREFERENCES_BUTTON_UPDATE)){
    @Override public void actionPerformed(    ActionEvent e){
      controller.setMode(mode.get().name());
      controller.setRender(render.get().name());
      controller.setPaletteFile(paletteFile.get());
      controller.setPaletteSize(paletteSize.get());
      controller.setSeed(seed.get());
      controller.setThreads(threads.get());
      controller.setDebug(debug.get());
      controller.loadColours();
      bus.post(controller.getIFS());
      setVisible(false);
    }
  }
);
  setCancel(messages.getText(DIALOG_PREFERENCES_BUTTON_CANCEL));
}","public Preferences(final Explorer controller,final EventBus bus,final Window parent){
  super(controller,bus,parent);
  setLabel(messages.getText(DIALOG_PREFERENCES_TITLE));
  mode=addDropDown(messages.getText(DIALOG_PREFERENCES_MODE),controller.getMode(),gridbag,c,Mode.values());
  render=addDropDown(messages.getText(DIALOG_PREFERENCES_RENDER),controller.getRender(),gridbag,c,Render.values());
  paletteFile=addDropDown(messages.getText(DIALOG_PREFERENCES_PALETTE_FILE),controller.getPaletteFile(),gridbag,c,Config.PALETTE_FILES);
  paletteSize=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SIZE),controller.getPaletteSize(),gridbag,c,new Utils.IntegerFormatter(0,256));
  seed=addProperty(messages.getText(DIALOG_PREFERENCES_PALETTE_SEED),controller.getSeed(),gridbag,c,new Utils.LongFormatter());
  threads=addProperty(messages.getText(DIALOG_PREFERENCES_THREADS),controller.getThreads(),gridbag,c,new Utils.IntegerFormatter(Config.MIN_THREADS,8));
  debug=addCheckBox(messages.getText(DIALOG_PREFERENCES_DEBUG),controller.isDebug(),gridbag,c);
  setAction(new AbstractAction(messages.getText(DIALOG_PREFERENCES_BUTTON_UPDATE)){
    @Override public void actionPerformed(    ActionEvent e){
      controller.setMode(mode.get().name());
      controller.setRender(render.get().name());
      controller.setPaletteFile(paletteFile.get());
      controller.setPaletteSize(paletteSize.get());
      controller.setSeed(seed.get());
      controller.setThreads(threads.get());
      controller.setDebug(debug.get());
      controller.loadColours();
      controller.getViewer().reset();
      setVisible(false);
    }
  }
);
  setCancel(messages.getText(DIALOG_PREFERENCES_BUTTON_CANCEL));
}",0.9832402234636872
98682,"public void save(File file){
  try (FileWriter writer=new FileWriter(file)){
    JAXBContext context=JAXBContext.newInstance(IFS.class);
    Marshaller marshaller=context.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(ifs,writer);
    Closeables.close(writer,true);
    cwd=file.getParentFile();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}","public void save(File file){
  try (FileWriter writer=new FileWriter(file)){
    JAXBContext context=JAXBContext.newInstance(IFS.class);
    Marshaller marshaller=context.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);
    marshaller.marshal(ifs,writer);
    cwd=file.getParentFile();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}",0.9581839904420548
98683,"@SuppressWarnings(""String_Node_Str"") public void start(){
  JPanel content=new JPanel(new BorderLayout());
  menuBar=new JMenuBar();
  JMenu file=new JMenu(""String_Node_Str"");
  if (platform != Platform.MAC_OS_X) {
    file.add(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
        about.showDialog();
      }
    }
);
  }
  JMenuItem newIfs=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      IFS untitled=new IFS();
      bus.post(untitled);
    }
  }
);
  newIfs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(newIfs);
  JMenuItem open=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      int result=chooser.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        IFS loaded=load(chooser.getSelectedFile());
        loaded.setSize(getSize());
        bus.post(loaded);
      }
    }
  }
);
  open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(open);
  save=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      if (ifs.getName() == null) {
        saveAs.doClick();
      }
 else {
        File saveAs=new File(cwd,ifs.getName() + ""String_Node_Str"");
        save(saveAs);
        save.setEnabled(false);
      }
    }
  }
);
  save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  save.setEnabled(false);
  file.add(save);
  saveAs=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      chooser.setSelectedFile(new File(Optional.fromNullable(ifs.getName()).or(IFS.UNTITLED) + ""String_Node_Str""));
      int result=chooser.showSaveDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        File saveAs=chooser.getSelectedFile();
        ifs.setName(saveAs.getName().replace(""String_Node_Str"",""String_Node_Str""));
        save(saveAs);
        bus.post(ifs);
      }
    }
  }
);
  saveAs.setEnabled(false);
  file.add(saveAs);
  export=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      chooser.setSelectedFile(new File(Optional.fromNullable(ifs.getName()).or(IFS.UNTITLED) + ""String_Node_Str""));
      int result=chooser.showSaveDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        File file=chooser.getSelectedFile();
        viewer.save(file);
        cwd=file.getParentFile();
      }
    }
  }
);
  export.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(export);
  JMenuItem print=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
    }
  }
);
  print.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(print);
  if (platform != Platform.MAC_OS_X) {
    file.add(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
      }
    }
);
    JMenuItem quit=new JMenuItem(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
        System.exit(0);
      }
    }
);
    quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    file.add(quit);
  }
  menuBar.add(file);
  JMenu system=new JMenu(""String_Node_Str"");
  showEditor=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(EDITOR);
    }
  }
);
  showViewer=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(VIEWER);
    }
  }
);
  showDetails=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(DETAILS);
    }
  }
);
  system.add(showEditor);
  system.add(showViewer);
  system.add(showDetails);
  ButtonGroup displayGroup=new ButtonGroup();
  displayGroup.add(showEditor);
  displayGroup.add(showViewer);
  displayGroup.add(showDetails);
  menuBar.add(system);
  setJMenuBar(menuBar);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    /** 
 * @see WindowListener#windowClosed(WindowEvent) 
 */
    @Override public void windowClosed(    WindowEvent e){
      System.exit(0);
    }
  }
);
  editor=new Editor(bus,this);
  viewer=new Viewer(bus,this);
  details=new Details(bus,this);
  scroll=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scroll.setViewportView(details);
  cards=new CardLayout();
  view=new JPanel(cards);
  view.add(editor,EDITOR);
  view.add(viewer,VIEWER);
  view.add(scroll,DETAILS);
  content.add(view,BorderLayout.CENTER);
  show(EDITOR);
  showEditor.setSelected(true);
  setContentPane(content);
  if (!fullScreen) {
    editor.setMinimumSize(min);
    editor.setSize(size);
    viewer.setMinimumSize(min);
    viewer.setSize(size);
    pack();
    final int top=getInsets().top + menuBar.getHeight();
    Dimension actual=new Dimension(size.width,size.height + top);
    setSize(actual);
    setPreferredSize(actual);
    setMinimumSize(new Dimension(min.width,min.height + top));
    Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
    setLocation((screen.width / 2) - (actual.width / 2),(screen.height / 2) - (actual.height / 2));
    addComponentListener(new ComponentAdapter(){
      @Override public void componentResized(      ComponentEvent e){
        Dimension suggested=getSize();
        int side=Math.max(MIN_WINDOW_SIZE,Math.min(suggested.width,suggested.height - top));
        setSize(side,side + top);
        bus.post(new Dimension(side,side));
      }
    }
);
  }
  setFocusable(true);
  requestFocusInWindow();
  setFocusTraversalKeysEnabled(false);
  addKeyListener(this);
  addKeyListener(editor);
  addKeyListener(viewer);
  IFS untitled=new IFS();
  bus.post(untitled);
  if (postponed != null) {
    SwingUtilities.invokeLater(postponed);
  }
  setVisible(true);
}","@SuppressWarnings(""String_Node_Str"") public void start(){
  JPanel content=new JPanel(new BorderLayout());
  menuBar=new JMenuBar();
  JMenu file=new JMenu(""String_Node_Str"");
  if (platform != Platform.MAC_OS_X) {
    file.add(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
        about.showDialog();
      }
    }
);
  }
  JMenuItem newIfs=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      IFS untitled=new IFS();
      bus.post(untitled);
    }
  }
);
  newIfs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(newIfs);
  JMenuItem open=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      int result=chooser.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        IFS loaded=load(chooser.getSelectedFile());
        loaded.setSize(size);
        bus.post(loaded);
      }
    }
  }
);
  open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(open);
  save=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      if (ifs.getName() == null) {
        saveAs.doClick();
      }
 else {
        File saveAs=new File(cwd,ifs.getName() + ""String_Node_Str"");
        save(saveAs);
        save.setEnabled(false);
      }
    }
  }
);
  save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  save.setEnabled(false);
  file.add(save);
  saveAs=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      chooser.setSelectedFile(new File(Optional.fromNullable(ifs.getName()).or(IFS.UNTITLED) + ""String_Node_Str""));
      int result=chooser.showSaveDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        File saveAs=chooser.getSelectedFile();
        ifs.setName(saveAs.getName().replace(""String_Node_Str"",""String_Node_Str""));
        save(saveAs);
        bus.post(ifs);
      }
    }
  }
);
  saveAs.setEnabled(false);
  file.add(saveAs);
  export=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(cwd);
      chooser.setFileFilter(filter);
      chooser.setSelectedFile(new File(Optional.fromNullable(ifs.getName()).or(IFS.UNTITLED) + ""String_Node_Str""));
      int result=chooser.showSaveDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        File file=chooser.getSelectedFile();
        viewer.save(file);
        cwd=file.getParentFile();
      }
    }
  }
);
  export.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(export);
  JMenuItem print=new JMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
    }
  }
);
  print.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
  file.add(print);
  if (platform != Platform.MAC_OS_X) {
    file.add(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
      }
    }
);
    JMenuItem quit=new JMenuItem(new AbstractAction(""String_Node_Str""){
      @Override public void actionPerformed(      ActionEvent e){
        System.exit(0);
      }
    }
);
    quit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    file.add(quit);
  }
  menuBar.add(file);
  JMenu system=new JMenu(""String_Node_Str"");
  showEditor=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(EDITOR);
    }
  }
);
  showViewer=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(VIEWER);
    }
  }
);
  showDetails=new JCheckBoxMenuItem(new AbstractAction(""String_Node_Str""){
    @Override public void actionPerformed(    ActionEvent e){
      show(DETAILS);
    }
  }
);
  system.add(showEditor);
  system.add(showViewer);
  system.add(showDetails);
  ButtonGroup displayGroup=new ButtonGroup();
  displayGroup.add(showEditor);
  displayGroup.add(showViewer);
  displayGroup.add(showDetails);
  menuBar.add(system);
  setJMenuBar(menuBar);
  setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    /** 
 * @see WindowListener#windowClosed(WindowEvent) 
 */
    @Override public void windowClosed(    WindowEvent e){
      System.exit(0);
    }
  }
);
  editor=new Editor(bus,this);
  viewer=new Viewer(bus,this);
  details=new Details(bus,this);
  scroll=new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scroll.setViewportView(details);
  cards=new CardLayout();
  view=new JPanel(cards);
  view.add(editor,EDITOR);
  view.add(viewer,VIEWER);
  view.add(scroll,DETAILS);
  content.add(view,BorderLayout.CENTER);
  show(EDITOR);
  showEditor.setSelected(true);
  setContentPane(content);
  if (!fullScreen) {
    editor.setMinimumSize(min);
    editor.setSize(size);
    viewer.setMinimumSize(min);
    viewer.setSize(size);
    pack();
    final int top=getInsets().top + menuBar.getHeight();
    Dimension actual=new Dimension(size.width,size.height + top);
    setSize(actual);
    setPreferredSize(actual);
    setMinimumSize(new Dimension(min.width,min.height + top));
    Dimension screen=Toolkit.getDefaultToolkit().getScreenSize();
    setLocation((screen.width / 2) - (actual.width / 2),(screen.height / 2) - (actual.height / 2));
    addComponentListener(new ComponentAdapter(){
      @Override public void componentResized(      ComponentEvent e){
        Dimension suggested=getSize();
        int side=Math.max(MIN_WINDOW_SIZE,Math.min(suggested.width,suggested.height - top));
        setSize(side,side + top);
        bus.post(new Dimension(side,side));
      }
    }
);
  }
  setFocusable(true);
  requestFocusInWindow();
  setFocusTraversalKeysEnabled(false);
  addKeyListener(this);
  addKeyListener(editor);
  addKeyListener(viewer);
  IFS untitled=new IFS();
  bus.post(untitled);
  if (postponed != null) {
    SwingUtilities.invokeLater(postponed);
  }
  setVisible(true);
}",0.9995112755707604
98684,"@Override public int compare(Transform left,Transform right){
  return ComparisonChain.start().compare(left.getZIndex(),right.getZIndex()).result();
}","@Override public int compare(Transform left,Transform right){
  return ComparisonChain.start().compare(left.getZIndex(),right.getZIndex()).compare(left.getId(),right.getId()).result();
}",0.8928571428571429
98685,"@Subscribe public void update(IFS ifs){
  this.ifs=ifs;
}","@Subscribe public void update(IFS ifs){
  this.ifs=ifs;
  reset();
}",0.912
98686,"public void paintTransform(Transform t,boolean highlight,Graphics2D g){
  Rectangle unit=new Rectangle(getSize());
  Shape rect=t.getTransform().createTransformedShape(unit);
  if (highlight) {
    g.setPaint(new Color(Color.BLUE.getRed(),Color.BLUE.getGreen(),Color.BLUE.getBlue(),128));
  }
 else {
    g.setPaint(new Color(Color.GRAY.getRed(),Color.GRAY.getGreen(),Color.GRAY.getBlue(),128));
  }
  g.fill(rect);
  g.setPaint(Color.BLACK);
  if (highlight) {
    g.setStroke(new BasicStroke(3f,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,new float[]{10f,10f},0f));
  }
 else {
    g.setStroke(new BasicStroke(3f));
  }
  g.draw(rect);
  g.setStroke(new BasicStroke(3f));
  g.setPaint(Color.BLACK);
  int[] cornerX=new int[]{0,0,getWidth(),getWidth()};
  int[] cornerY=new int[]{0,getHeight(),getHeight(),0};
  for (int i=0; i < 4; i++) {
    Point center=new Point();
    t.getTransform().transform(new Point(cornerX[i],cornerY[i]),center);
    Rectangle corner=new Rectangle(center.x - 5,center.y - 5,10,10);
    g.fill(corner);
  }
  Graphics2D gr=(Graphics2D)g.create();
  if (highlight) {
    gr.setPaint(Color.BLACK);
  }
 else {
    gr.setPaint(new Color(Color.BLACK.getRed(),Color.BLACK.getGreen(),Color.BLACK.getBlue(),128));
  }
  gr.setFont(new Font(""String_Node_Str"",Font.BOLD,25));
  float[] first=new float[2];
  rect.getPathIterator(null).currentSegment(first);
  AffineTransform rotation=new AffineTransform();
  rotation.rotate(t.r,first[0],first[1]);
  gr.setTransform(rotation);
  gr.drawString(String.format(""String_Node_Str"",t.getId(),(highlight && rotate != null) ? String.format(""String_Node_Str"",(int)Math.toDegrees(t.r)) : ""String_Node_Str""),first[0] + 5,first[1] + 25f);
  gr.dispose();
}","public void paintTransform(Transform t,boolean highlight,Graphics2D g){
  Rectangle unit=new Rectangle(getSize());
  Shape rect=t.getTransform().createTransformedShape(unit);
  if (highlight) {
    g.setPaint(new Color(Color.BLUE.getRed(),Color.BLUE.getGreen(),Color.BLUE.getBlue(),128));
  }
 else {
    g.setPaint(new Color(Color.GRAY.getRed(),Color.GRAY.getGreen(),Color.GRAY.getBlue(),128));
  }
  g.fill(rect);
  g.setPaint(Color.BLACK);
  if (highlight) {
    g.setStroke(new BasicStroke(3f,BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER,10.0f,new float[]{10f,10f},0f));
  }
 else {
    g.setStroke(new BasicStroke(3f));
  }
  g.draw(rect);
  g.setStroke(new BasicStroke(3f));
  g.setPaint(Color.BLACK);
  int[] cornerX=new int[]{0,0,getWidth(),getWidth()};
  int[] cornerY=new int[]{0,getHeight(),getHeight(),0};
  for (int i=0; i < 4; i++) {
    Point center=new Point();
    t.getTransform().transform(new Point(cornerX[i],cornerY[i]),center);
    Rectangle corner=new Rectangle(center.x - 5,center.y - 5,10,10);
    g.fill(corner);
  }
  Graphics2D gr=(Graphics2D)g.create();
  if (highlight) {
    gr.setPaint(Color.BLACK);
  }
 else {
    gr.setPaint(new Color(Color.BLACK.getRed(),Color.BLACK.getGreen(),Color.BLACK.getBlue(),128));
  }
  gr.setFont(new Font(""String_Node_Str"",Font.BOLD,25));
  Point text=new Point();
  t.getTransform().transform(new Point(0,0),text);
  AffineTransform rotation=new AffineTransform();
  rotation.rotate(t.r,text.x,text.y);
  gr.setTransform(rotation);
  gr.drawString(String.format(""String_Node_Str"",t.getId(),(highlight && rotate != null) ? String.format(""String_Node_Str"",(int)Math.toDegrees(t.r)) : ""String_Node_Str""),text.x + 5,text.y + 25);
  gr.dispose();
}",0.9446709376820036
98687,"@POST @Produces(MediaType.TEXT_PLAIN) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public String newAlarm(Trip newTrip){
  DAO.insertUserTrip(userName,newTrip);
  return ""String_Node_Str"";
}","@POST @Produces(MediaType.TEXT_PLAIN) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public String newAlarm(Trip newTrip){
  return String.valueOf(DAO.insertUserTrip(userName,newTrip));
}",0.8776978417266187
98688,"/** 
 * Adds a new trip to the specified User.
 * @param tripId Trip to add data to
 * @param position data to add
 */
public static void insertUserTrip(String userName,Trip trip){
  Session session=getSession();
  User user=(User)session.bySimpleNaturalId(User.class).load(userName);
  user.addTrip(trip);
  session.beginTransaction();
  session.save(user);
  commitAndClose(session);
}","/** 
 * Adds a new trip to the specified User.
 * @param tripId Trip to add data to
 * @param position data to add
 */
public static long insertUserTrip(String userName,Trip trip){
  Session session=getSession();
  User user=(User)session.bySimpleNaturalId(User.class).load(userName);
  user.addTrip(trip);
  session.beginTransaction();
  session.save(user);
  commitAndClose(session);
  return trip.getId();
}",0.961104140526976
98689,"@OneToMany(cascade=CascadeType.ALL) public List<AccData> getAccData(){
  return accData;
}","@XmlTransient @OneToMany(cascade=CascadeType.ALL) public List<AccData> getAccData(){
  return accData;
}",0.9278350515463918
98690,"@OneToMany(cascade=CascadeType.ALL) public List<Position> getLocData(){
  return locData;
}","@XmlTransient @OneToMany(cascade=CascadeType.ALL) public List<Position> getLocData(){
  return locData;
}",0.9285714285714286
98691,"public void addTrip(Trip trip){
  trip.setUser(this);
  this.trips.add(trip);
}","public void addTrip(Trip trip){
  this.trips.add(trip);
}",0.8382352941176471
98692,"public static Trip getLastSourceId(String userName){
  Session session=getSession();
  Long userId=getByNaturalId(session,User.class,userName).getId();
  Criteria crit=session.createCriteria(Trip.class);
  crit.add(Restrictions.eq(""String_Node_Str"",userId));
  crit.addOrder(Order.desc(""String_Node_Str""));
  Trip trip=(Trip)crit.uniqueResult();
  session.close();
  return trip;
}","public static Trip getLastSourceId(String userName){
  Session session=getSession();
  Long userId=getByNaturalId(session,User.class,userName).getId();
  Query q=session.createQuery(""String_Node_Str"");
  Trip trip=(Trip)q.uniqueResult();
  session.close();
  return trip;
}",0.6207951070336392
98693,"@POST @Produces(MediaType.TEXT_HTML) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public void newAccData(AccData newAccData){
  DAO.insertTripAccData(tripId,newAccData);
}","@POST @Produces(MediaType.TEXT_HTML) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public String newAccData(AccData newAccData){
  DAO.insertTripAccData(tripId,newAccData);
  return ""String_Node_Str"";
}",0.9082125603864736
98694,"@POST @Produces(MediaType.TEXT_HTML) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public void newAccData(Position newPosition){
  DAO.insertTripPosition(tripId,newPosition);
}","@POST @Produces(MediaType.TEXT_HTML) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public String newAccData(Position newPosition){
  DAO.insertTripPosition(tripId,newPosition);
  return ""String_Node_Str"";
}",0.909952606635071
98695,"public void reduce(ik key,Iterable<iv> values,Context context){
}","public void reduce(Text key,Iterable<TupleWritable> values,Context context){
}",0.8671328671328671
98696,"public static void main(String[] args){
  Job deletion=new Job(new Configuration());
  job.setJarByClass(Deleter.class);
  job.setJobName(""String_Node_Str"");
  job.setInputPath(new Path(""String_Node_Str""));
  job.setOutputPath(new Path(""String_Node_Str""));
  job.setMapperClass(DeleteMapper.class);
  job.setReducerClass(DeleteReducer.class);
  job.waitForCompletion(true);
}","public static void main(String[] args){
  Job deletion=Job.getInstance(new Configuration());
  deletion.setJarByClass(Deleter.class);
  deletion.setJobName(""String_Node_Str"");
  deletion.setInputPath(new Path(""String_Node_Str""));
  deletion.setOutputPath(new Path(""String_Node_Str""));
  deletion.setMapperClass(DeleteMapper.class);
  deletion.setReducerClass(DeleteReducer.class);
  deletion.waitForCompletion(true);
}",0.8726355611601513
98697,"public void map(ik key,iv value,Context context) throws IOException, InterruptedException {
  String line=value.toString();
  StringTokenizer tok=new StringTokenizer(line);
  while (tok.hasMoreTokens()) {
    first.set(tokenizer.nextToken());
    context.write(word,count);
  }
}","public void map(Text key,TupleWritable value,Context context) throws IOException, InterruptedException {
}",0.4675324675324675
98698,"@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (cmd.getName().equalsIgnoreCase(Constants.COMMAND_PRIVATEMESSAGE)) {
    if (sender != null) {
      if (args.length > 1) {
        world=((Player)sender).getWorld();
        String msg=""String_Node_Str"";
        for (int i=1; i < args.length; i++) {
          msg+=args[i] + ""String_Node_Str"";
        }
        String nickname=args[0].trim();
        for (        Player p : world.getPlayers()) {
          if (p.getPlayerListName().equalsIgnoreCase(nickname) && p.isOnline()) {
            p.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ p.getDisplayName()+ ""String_Node_Str""+ msg.trim());
            return true;
          }
 else           if (handler.isParticipantOnline(nickname)) {
            handler.sendMessageToChatUser(sender.getName(),plugin.getConfig().getString(""String_Node_Str"") + ""String_Node_Str"" + nickname,msg);
            return true;
          }
 else {
            p.sendMessage(ChatColor.YELLOW + Constants.PREFIX_CHAT + ChatColor.WHITE+ ""String_Node_Str"");
          }
        }
      }
    }
  }
  return true;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (cmd.getName().equalsIgnoreCase(Constants.COMMAND_PRIVATEMESSAGE)) {
    if (sender != null) {
      world=((Player)sender).getWorld();
      if (args.length > 1) {
        String msg=""String_Node_Str"";
        for (int i=1; i < args.length; i++) {
          msg+=args[i] + ""String_Node_Str"";
        }
        String nickname=args[0].trim();
        for (        Player p : world.getPlayers()) {
          if (p.getPlayerListName().equalsIgnoreCase(nickname) && p.isOnline()) {
            p.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ p.getDisplayName()+ ""String_Node_Str""+ msg.trim());
            return true;
          }
 else           if (handler.isParticipantOnline(nickname)) {
            handler.sendMessageToChatUser(sender.getName(),plugin.getConfig().getString(""String_Node_Str"") + ""String_Node_Str"" + nickname,msg);
            return true;
          }
 else {
            p.sendMessage(ChatColor.YELLOW + Constants.PREFIX_CHAT + ChatColor.WHITE+ String.format(Constants.TEXT_XMPP_USER_NOTAVAILABLE,nickname));
          }
        }
      }
    }
  }
  return true;
}",0.9338358458961474
98699,"public void sendMessageToPlayer(String sender,String player,String message){
  for (  Player p : world.getPlayers()) {
    if (p.getDisplayName().equalsIgnoreCase(player) && p.isOnline()) {
      p.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ sender+ ""String_Node_Str""+ message);
    }
  }
}","public void sendMessageToPlayer(String sender,String player,String message){
  log.info(sender + ""String_Node_Str"" + player+ ""String_Node_Str""+ message);
  for (  Player p : world.getPlayers()) {
    if (p.getDisplayName().equalsIgnoreCase(player) && p.isOnline()) {
      p.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ sender+ ""String_Node_Str""+ message);
    }
  }
}",0.8907801418439716
98700,"public void connectToJabber(String server,String username,String password,String channel,String nickname){
  conn=new XMPPConnection(server);
  conn.getChatManager().addChatListener(this);
  DiscussionHistory history=new DiscussionHistory();
  history.setMaxStanzas(0);
  try {
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + server+ ""String_Node_Str"");
    conn.connect();
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + username+ ""String_Node_Str"");
    conn.login(username,password);
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + channel+ ""String_Node_Str""+ nickname+ ""String_Node_Str"");
    chatRoom=new MultiUserChat(conn,channel);
    chatRoom.addMessageListener(this);
    chatRoom.join(nickname,""String_Node_Str"",history,SmackConfiguration.getPacketReplyTimeout());
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
  }
 catch (  XMPPException ex) {
    log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
  }
}","public void connectToJabber(String server,String username,String password,String channel,String nickname){
  conn=new XMPPConnection(server);
  conn.getChatManager().addChatListener(this);
  DiscussionHistory history=new DiscussionHistory();
  history.setMaxStanzas(0);
  try {
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + server+ ""String_Node_Str"");
    conn.connect();
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + username+ ""String_Node_Str"");
    conn.login(username,password);
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"" + channel+ ""String_Node_Str""+ nickname+ ""String_Node_Str"");
    chatRoom=new MultiUserChat(conn,channel);
    chatRoom.addMessageListener(this);
    chatRoom.addParticipantStatusListener(this);
    chatRoom.join(nickname,""String_Node_Str"",history,SmackConfiguration.getPacketReplyTimeout());
    log.log(Level.INFO,Constants.PREFIX_LOG + ""String_Node_Str"");
  }
 catch (  XMPPException ex) {
    log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
  }
}",0.9789247311827955
98701,"@Override public void moderatorRevoked(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void moderatorRevoked(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_MODERATORREVOKED,StringUtils.parseResource(participant)));
}",0.5033112582781457
98702,"@Override public void processMessage(Chat chat,Message msg){
  String body=msg.getBody();
  String sender=msg.getFrom();
  Occupant oc=this.chatRoom.getOccupant(sender);
  if (!oc.getNick().equals(this.chatRoom.getNickname())) {
    if (oc.getRole().equalsIgnoreCase(""String_Node_Str"") || oc.getRole().equalsIgnoreCase(""String_Node_Str"")) {
      if (body.startsWith(Constants.PREFIX_COMMAND)) {
        String split[]=body.split(""String_Node_Str"");
        String message=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          message+=split[i] + ""String_Node_Str"";
        }
        plugin.getCommandClass().sendMessageToPlayer(StringUtils.parseResource(sender),split[1],message.trim());
      }
 else {
        String command=body.substring(Constants.PREFIX_COMMAND.length()).trim();
        boolean executed=plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),command);
        try {
          if (!executed) {
            chat.sendMessage(String.format(Constants.TEXT_COMMAND_IMPOSSIBLE,command));
          }
        }
 catch (        XMPPException ex) {
          log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
        }
      }
    }
  }
}","@Override public void processMessage(Chat chat,Message msg){
  String body=msg.getBody();
  String sender=msg.getFrom();
  Occupant oc=this.chatRoom.getOccupant(sender);
  if (!oc.getNick().equals(this.chatRoom.getNickname())) {
    if (body.startsWith(Constants.PREFIX_COMMAND + Constants.COMMAND_PRIVATEMESSAGE)) {
      String split[]=body.split(""String_Node_Str"");
      String message=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        message+=split[i] + ""String_Node_Str"";
      }
      log.info(""String_Node_Str"");
      plugin.getCommandClass().sendMessageToPlayer(StringUtils.parseResource(sender),split[1].trim(),message.trim());
      log.info(""String_Node_Str"");
    }
    if (oc.getRole().equalsIgnoreCase(""String_Node_Str"") || oc.getRole().equalsIgnoreCase(""String_Node_Str"")) {
      if (body.startsWith(Constants.PREFIX_COMMAND)) {
        String command=body.substring(Constants.PREFIX_COMMAND.length()).trim();
        boolean executed=plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),command);
        try {
          if (!executed) {
            chat.sendMessage(String.format(Constants.TEXT_COMMAND_IMPOSSIBLE,command));
          }
        }
 catch (        XMPPException ex) {
          log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
        }
      }
    }
  }
}",0.8246778602108551
98703,"@Override public void adminGranted(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void adminGranted(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_ADMINGRANTED,StringUtils.parseResource(participant)));
}",0.496551724137931
98704,"@Override public void adminRevoked(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void adminRevoked(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_ADMINREVOKED,StringUtils.parseResource(participant)));
}",0.496551724137931
98705,"@Override public void voiceRevoked(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void voiceRevoked(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_VOICEREVOKED,StringUtils.parseResource(participant)));
}",0.496551724137931
98706,"@Override public void moderatorGranted(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void moderatorGranted(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_MODERATORGRANTED,StringUtils.parseResource(participant)));
}",0.5033112582781457
98707,"@Override public void processPacket(Packet packet){
  if (packet instanceof Message) {
    Message msg=(Message)packet;
    String body=msg.getBody();
    String sender=msg.getFrom();
    Occupant oc=chatRoom.getOccupant(sender);
    if (!oc.getNick().equals(chatRoom.getNickname())) {
      if (body.startsWith(Constants.PREFIX_COMMAND)) {
        String cmd=body.substring(Constants.PREFIX_COMMAND.length()).split(""String_Node_Str"")[0].trim();
        if (cmd.equalsIgnoreCase(Constants.COMMAND_ONLINEPLAYERS)) {
          try {
            if (plugin.getServer().getOnlinePlayers().length != 0) {
              String players=""String_Node_Str"";
              for (              Player player : plugin.getServer().getOnlinePlayers()) {
                players+=player.getDisplayName() + ""String_Node_Str"";
              }
              chatRoom.sendMessage(String.format(Constants.TEXT_ONLINE_PLAYERS + players.trim(),plugin.getServer().getOnlinePlayers().length));
            }
 else {
              chatRoom.sendMessage(Constants.TEXT_ONLINE_NONE);
            }
          }
 catch (          XMPPException ex) {
            log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
          }
        }
 else {
          if ((oc.getRole().equalsIgnoreCase(""String_Node_Str"")) || (oc.getRole().equalsIgnoreCase(""String_Node_Str""))) {
            String command=body.substring(Constants.PREFIX_COMMAND.length()).trim();
            boolean executed=Bukkit.dispatchCommand(Bukkit.getConsoleSender(),command);
            try {
              if (!executed) {
                chatRoom.sendMessage(String.format(Constants.TEXT_COMMAND_IMPOSSIBLE,command));
              }
            }
 catch (            XMPPException ex) {
              log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
            }
          }
        }
      }
 else {
        plugin.broadcast(oc.getNick() + ""String_Node_Str"" + body);
      }
    }
  }
}","@Override public void processPacket(Packet packet){
  if (packet instanceof Message) {
    Message msg=(Message)packet;
    String body=msg.getBody();
    String sender=msg.getFrom();
    Occupant oc=chatRoom.getOccupant(sender);
    if (!oc.getNick().equals(chatRoom.getNickname())) {
      if (body.startsWith(Constants.PREFIX_COMMAND)) {
        String cmd=body.substring(Constants.PREFIX_COMMAND.length()).split(""String_Node_Str"")[0].trim();
        if (cmd.equalsIgnoreCase(Constants.COMMAND_ONLINEPLAYERS)) {
          try {
            if (plugin.getServer().getOnlinePlayers().length != 0) {
              String players=""String_Node_Str"";
              for (              Player player : plugin.getServer().getOnlinePlayers()) {
                players+=player.getDisplayName() + ""String_Node_Str"";
              }
              chatRoom.sendMessage(String.format(Constants.TEXT_ONLINE_PLAYERS + players.trim(),plugin.getServer().getOnlinePlayers().length));
            }
 else {
              chatRoom.sendMessage(Constants.TEXT_ONLINE_NONE);
            }
          }
 catch (          XMPPException ex) {
            log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
          }
        }
 else {
          if ((oc.getRole().equalsIgnoreCase(""String_Node_Str"")) || (oc.getRole().equalsIgnoreCase(""String_Node_Str""))) {
            String command=body.substring(Constants.PREFIX_COMMAND.length()).trim();
            boolean executed=plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),command);
            try {
              if (!executed) {
                chatRoom.sendMessage(String.format(Constants.TEXT_COMMAND_IMPOSSIBLE,command));
              }
            }
 catch (            XMPPException ex) {
              log.log(Level.SEVERE,Constants.PREFIX_LOG + ""String_Node_Str"",ex);
            }
          }
        }
      }
 else {
        plugin.broadcast(oc.getNick() + ""String_Node_Str"" + body);
      }
    }
  }
}",0.988821138211382
98708,"@Override public void voiceGranted(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void voiceGranted(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_VOICEGRANTED,StringUtils.parseResource(participant)));
}",0.496551724137931
98709,"@Override public void membershipGranted(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void membershipGranted(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_MEMBERSHIPGRANTED,StringUtils.parseResource(participant)));
}",0.5049180327868853
98710,"@Override public void banned(String string,String string1,String string2){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void banned(String participant,String actor,String reason){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_BANNED,StringUtils.parseResource(participant),StringUtils.parseName(actor)));
}",0.2681564245810056
98711,"@Override public void membershipRevoked(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void membershipRevoked(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_MEMBERSHIPREVOKED,StringUtils.parseResource(participant)));
}",0.5049180327868853
98712,"@Override public void ownershipGranted(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void ownershipGranted(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_OWNERSHIPGRANTED,StringUtils.parseResource(participant)));
}",0.5033112582781457
98713,"@Override public void ownershipRevoked(String string){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void ownershipRevoked(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_OWNERSHIPREVOKED,StringUtils.parseResource(participant)));
}",0.5033112582781457
98714,"@Override public void joined(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_JOIN,participant));
}","@Override public void joined(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_JOIN,StringUtils.parseResource(participant)));
}",0.9090909090909092
98715,"@Override public void kicked(String string,String string1,String string2){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public void kicked(String participant,String actor,String reason){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_KICKED,StringUtils.parseResource(participant),StringUtils.parseName(actor)));
}",0.2681564245810056
98716,"@Override public void left(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_QUIT,participant));
}","@Override public void left(String participant){
  plugin.broadcastInfoMessage(String.format(Constants.TEXT_XMPP_QUIT,StringUtils.parseResource(participant)));
}",0.9078498293515358
98717,"public static void main(String[] args) throws InterruptedException {
  Country.getInstance();
  System.out.println(""String_Node_Str"" + ProgramVersion + ""String_Node_Str""+ Country.NumberOfTrains+ ""String_Node_Str""+ Country.NumberOfStations+ ""String_Node_Str"");
  CargoManager cargo_thread=new CargoManager();
  cargo_thread.start();
  Thread visualizatorThread=new Visualizator();
  visualizatorThread.start();
  while (true) {
    try {
      Country.getInstance().wait();
    }
 catch (    InterruptedException e) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public static void main(String[] args) throws InterruptedException {
  Country.getInstance();
  System.out.println(""String_Node_Str"" + ProgramVersion + ""String_Node_Str""+ Country.NumberOfTrains+ ""String_Node_Str""+ Country.NumberOfStations+ ""String_Node_Str"");
  CargoManager cargo_thread=new CargoManager();
  cargo_thread.start();
  Thread visualizatorThread=new Visualizator();
  visualizatorThread.start();
  System.out.println(""String_Node_Str"");
}",0.8078048780487805
98718,"/** 
 * Removes a train from the list of trains the station has. There is no sync problem. Note. ArrayList only supports removing INT (index of object). Strangely enough, Eclipse didnt correct me!
 */
public synchronized void removeTrain(Train train){
synchronized (trains_here) {
    if (trains_here == null) {
      System.err.println(""String_Node_Str"");
    }
    trains_here.remove(trains_here.indexOf(train));
  }
}","/** 
 * Removes a train from the list of trains the station has. There is no sync problem. Note. ArrayList only supports removing INT (index of object). Strangely enough, Eclipse didnt correct me!
 */
public synchronized void removeTrain(Train train){
synchronized (trains_here) {
    if (trains_here == null) {
      System.err.println(""String_Node_Str"");
    }
    int pos=trains_here.indexOf(train);
    if (pos == -1) {
      System.err.println(""String_Node_Str"");
    }
    trains_here.remove(pos);
  }
}",0.8611410118406889
98719,"public synchronized void addTrain(Train newTrain){
  if (trains_here.indexOf(newTrain) != -1) {
    System.err.println(""String_Node_Str"" + newTrain);
  }
  trains_here.add(newTrain);
}","public synchronized void addTrain(Train newTrain){
  if (trains_here.indexOf(newTrain) != -1) {
    System.err.println(""String_Node_Str"" + newTrain);
  }
 else {
    trains_here.add(newTrain);
  }
}",0.9633507853403142
98720,"public void registerToStation(int station_number){
  Station myStation=Country.getInstance().getStation(station_number);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myStation);
  myStation.addTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myStation);
}","public synchronized void registerToStation(int station_number){
  Station myStation=Country.getInstance().getStation(station_number);
  log(""String_Node_Str"" + myStation.toStringMini());
  myStation.addTrain(this);
}",0.625
98721,"synchronized void unloadCargo(){
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ position);
  for (int k=0; k < cargos.size(); k++) {
    Cargo c=cargos.get(k);
    boolean matches=c.destination == position / 2;
    dlog(""String_Node_Str"" + c + ""String_Node_Str""+ position+ ""String_Node_Str""+ matches);
    if (c.destination == myStation().getIndex()) {
      Cargo tmpCargo=cargos.remove(k);
      vlog(""String_Node_Str"" + this + ""String_Node_Str""+ myStation()+ ""String_Node_Str""+ tmpCargo);
    }
    try {
      Thread.sleep(Country.UnloadTimeMilliSecs);
    }
 catch (    Exception e) {
      log(""String_Node_Str"");
    }
  }
}","void unloadCargo(){
synchronized (cargos) {
    dlog(""String_Node_Str"" + this + ""String_Node_Str""+ position);
    for (int k=0; k < cargos.size(); k++) {
      Cargo c=cargos.get(k);
      if (c.destination == myStation().getIndex()) {
        Cargo tmpCargo=cargos.remove(k);
        vlog(""String_Node_Str"" + myStation() + ""String_Node_Str""+ tmpCargo);
      }
      try {
        Thread.sleep(Country.UnloadTimeMilliSecs);
      }
 catch (      Exception e) {
        log(""String_Node_Str"");
      }
    }
  }
}",0.7773913043478261
98722,"public void run(){
  System.out.println(""String_Node_Str"" + toString());
  setName(""String_Node_Str"" + occurrence);
  log(""String_Node_Str"" + toString());
  while (true) {
    set_status(TrainStatus.STATION_START);
    set_status(TrainStatus.STATION_UNLOAD_CARGO);
    set_status(TrainStatus.STATION_LOAD_CARGO);
    set_status(TrainStatus.STATION_END);
  }
}","public void run(){
  System.out.println(""String_Node_Str"" + toString());
  setName(""String_Node_Str"" + occurrence);
  log(""String_Node_Str"" + toString());
  myStation().addTrain(this);
  while (true) {
    set_status(TrainStatus.STATION_START);
    set_status(TrainStatus.STATION_UNLOAD_CARGO);
    set_status(TrainStatus.STATION_LOAD_CARGO);
    set_status(TrainStatus.STATION_END);
  }
}",0.9598930481283422
98723,"/** 
 * This is where a train waits in the Railway
 * @param railway_number
 */
public synchronized void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    vlog(""String_Node_Str"" + this + ""String_Node_Str"");
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}","/** 
 * This is where a train waits in the Railway
 * @param railway_number
 */
public synchronized void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    log(""String_Node_Str"" + myRailway.toStringMini());
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}",0.9678266579120156
98724,"public String toString(){
  return ""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str""+ birthDate+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str"";
}",0.8854961832061069
98725,"private Country(){
  System.out.println(""String_Node_Str"");
  for (int i=0; i < Country.NumberOfStations; i++) {
    stations[i]=new Station(i);
    railways[i]=new Railway(i);
  }
  for (int i=0; i < Country.NumberOfTrains; i++) {
    Train train=trains[i];
    train=new Train(i,4 + i,2 * i,Country.CargoCapacity);
    train.start();
  }
}","private Country(){
  System.out.println(""String_Node_Str"");
  for (int i=0; i < Country.NumberOfStations; i++) {
    stations[i]=new Station(i);
    railways[i]=new Railway(i);
  }
  for (int i=0; i < Country.NumberOfTrains; i++) {
    trains[i]=new Train(i,4 + i,2 * i,Country.CargoCapacity);
    trains[i].start();
  }
}",0.9592760180995475
98726,"public ArrayList<Cargo> getCargos(){
  return cargos;
}","public synchronized ArrayList<Cargo> getCargos(){
  return cargos;
}",0.8943089430894309
98727,"public synchronized void loadCargo(){
}","public synchronized void loadCargo(){
  dlog(""String_Node_Str"" + position);
  dlog(""String_Node_Str"");
  Station myStation=(Station)APlace.getCountryPlace(position);
  dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().size()+ ""String_Node_Str"");
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ cargos.size()+ ""String_Node_Str""+ cargoCapacity+ ""String_Node_Str"");
  for (int i=0; i < myStation.getCargos().size() && i < (cargoCapacity - cargos.size()); i++) {
    dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().get(i));
    myStation.removeCargo(i);
    cargos.add(myStation.getCargos().get(i));
  }
  dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().size()+ ""String_Node_Str"");
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ cargos.size()+ ""String_Node_Str""+ cargoCapacity+ ""String_Node_Str"");
}",0.0836012861736334
98728,"public void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  vlog(""String_Node_Str"");
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}","public void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  vlog(""String_Node_Str"");
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    vlog(""String_Node_Str"");
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}",0.9778456837280368
98729,"public void run(){
  setName(""String_Node_Str"");
  vlog(""String_Node_Str"");
  try {
    while (true) {
      Thread.sleep(random.nextInt(100 * Country.RandomCargoPeriodSecs));
      Cargo recurrent=Cargo.getRandomCargo();
      Country.getInstance().deliverCargoToAppropriateStation(recurrent);
    }
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"");
  }
}","/** 
 * This thread generates every ""Country.RandomCargoPeriodSecs"" seconds a new random instance of Cargo and delivers it to the appropriate station.
 */
public void run(){
  setName(""String_Node_Str"");
  log(""String_Node_Str"");
  try {
    while (true) {
      Thread.sleep(random.nextInt(1000 * Country.RandomCargoPeriodSecs));
      Cargo recurrent=Cargo.getRandomCargo();
      Country.getInstance().deliverCargoToAppropriateStation(recurrent);
    }
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"");
  }
}",0.8261351052048727
98730,"public synchronized void loadCargo(){
  Station myStation=myStation();
synchronized (myStation.depotLock) {
    dlog(""String_Node_Str"" + position);
    dlog(""String_Node_Str"");
    dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().size()+ ""String_Node_Str"");
    dlog(""String_Node_Str"" + this + ""String_Node_Str""+ cargos.size()+ ""String_Node_Str""+ cargoCapacity+ ""String_Node_Str"");
    for (int i=0; i < myStation.getCargos().size() && i < (cargoCapacity - cargos.size()); i++) {
      dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().get(i));
      myStation.removeCargo(i);
      cargos.add(myStation.getCargos().get(i));
    }
    dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().size()+ ""String_Node_Str"");
    dlog(""String_Node_Str"" + this + ""String_Node_Str""+ cargos.size()+ ""String_Node_Str""+ cargoCapacity+ ""String_Node_Str"");
  }
}","public synchronized void loadCargo(){
  Station myStation=myStation();
synchronized (myStation.depotLock) {
    dlog(""String_Node_Str"" + position);
    dlog(""String_Node_Str"");
    dlog(""String_Node_Str"" + myStation + ""String_Node_Str""+ myStation.getCargos().size()+ ""String_Node_Str"");
    dlog(""String_Node_Str"" + this + ""String_Node_Str""+ cargos.size()+ ""String_Node_Str""+ cargoCapacity+ ""String_Node_Str"");
    int cargo_size=cargos.size();
    for (int i=0; i < myStation.getCargos().size() && i < (cargoCapacity - cargo_size); i++) {
      cargos.add(myStation.removeAndGetCargo());
    }
  }
}",0.6928618205631958
98731,"void unloadCargo(){
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ position);
  for (int k=0; k < cargos.size(); k++) {
    Cargo c=cargos.get(k);
    boolean matches=c.destination == position / 2;
    dlog(""String_Node_Str"" + c + ""String_Node_Str""+ position+ ""String_Node_Str""+ matches);
    if (c.source == myStation().getIndex()) {
      cargos.remove(k);
      log(""String_Node_Str"");
    }
  }
}","synchronized void unloadCargo(){
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ position);
  for (int k=0; k < cargos.size(); k++) {
    Cargo c=cargos.get(k);
    boolean matches=c.destination == position / 2;
    dlog(""String_Node_Str"" + c + ""String_Node_Str""+ position+ ""String_Node_Str""+ matches);
    if (c.source == myStation().getIndex()) {
      cargos.remove(k);
      log(""String_Node_Str"");
    }
  }
}",0.9842424242424244
98732,"public synchronized void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  vlog(""String_Node_Str"");
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    vlog(""String_Node_Str"");
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}","/** 
 * This is where a train waits in the Railway
 * @param railway_number
 */
public synchronized void registerToRailway(int railway_number){
  Railway myRailway=Country.getInstance().getRailway(railway_number);
  Station myStation=Country.getInstance().getStation(railway_number);
  myStation.removeTrain(this);
  dlog(""String_Node_Str"" + this + ""String_Node_Str""+ myRailway);
  while (myRailway.isBusy()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      log(""String_Node_Str"");
    }
  }
  myRailway.addTrain(this);
  try {
    vlog(""String_Node_Str"");
    Thread.sleep(slowness * 1000);
  }
 catch (  InterruptedException e) {
    log(""String_Node_Str"" + myRailway);
  }
  myRailway.removeTrain(this);
}",0.9244883556810164
98733,"public static boolean Download_HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"");
          }
        }
      }
    }
  }
  return Check;
}","public static boolean Download_HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
            count++;
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"");
          }
        }
      }
    }
  }
  return Check;
}",0.9873111782477342
98734,"public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile > count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            int ori=FailUpload_Download.failDownload(myfile.getName(),dbfile.getRemotePath(),dbfile.getCloud());
            Download_HashCheck(listoffiles,restoreFileID);
          }
        }
      }
    }
  }
  return Check;
}","public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile > count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
            count++;
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            int ori=FailUpload_Download.failDownload(myfile.getName(),dbfile.getRemotePath(),dbfile.getCloud());
            Download_HashCheck(listoffiles,restoreFileID);
          }
        }
      }
    }
  }
  return Check;
}",0.9902552204176334
98735,"public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"");
          }
        }
      }
    }
  }
  return Check;
}","public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
          }
        }
      }
    }
  }
  return Check;
}",0.9883792048929664
98736,"public static boolean Download_HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"");
          }
        }
      }
    }
  }
  return Check;
}","public static boolean Download_HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
            System.out.print(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            System.out.print(""String_Node_Str"" + myfile.getName());
          }
        }
      }
    }
  }
  return Check;
}",0.913359418669648
98737,"public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
          }
        }
      }
    }
  }
  return Check;
}","public static boolean HashCheck(List<MYSpFile> listoffiles,int restoreFileID) throws Exception {
  boolean Check=true;
  int count=0;
  DbConnect dbconnect=new DbConnect();
  List<MYSpFile> listofFileSp=dbconnect.selectQuery(restoreFileID);
  int SplitCountFile=dbconnect.SplitFileCount(restoreFileID);
  for (  MYSpFile myfile : listoffiles) {
    for (    MYSpFile dbfile : listofFileSp) {
      if (SplitCountFile < count) {
        if ((myfile.getName().equalsIgnoreCase(dbfile.getName()))) {
          System.out.print(""String_Node_Str"" + myfile.getName());
          if (myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
            Check=true;
            restoreLog.info(""String_Node_Str"" + myfile.getName());
            System.out.print(""String_Node_Str"" + myfile.getName());
          }
 else {
            Check=false;
            restoreLog.error(""String_Node_Str"" + myfile.getName());
            System.out.print(""String_Node_Str"" + myfile.getName());
          }
        }
      }
    }
  }
  return Check;
}",0.8911637931034483
98738,"public static String CreateFolder(String path) throws Exception {
  String fldate;
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  java.util.Date date=new java.util.Date();
  fldate=dateFormat.format(date);
  String strDirectoy=path + ""String_Node_Str"" + fldate;
  boolean success=(new File(strDirectoy)).mkdir();
  if (success) {
    System.out.println(""String_Node_Str"" + strDirectoy + ""String_Node_Str"");
    logger.info(""String_Node_Str"" + strDirectoy + ""String_Node_Str"");
  }
  return strDirectoy;
}","public static String CreateFolder(String path) throws Exception {
  String fldate;
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  java.util.Date date=new java.util.Date();
  fldate=dateFormat.format(date);
  String strDirectoy=path + Global.fs + fldate;
  boolean success=(new File(strDirectoy)).mkdir();
  if (success) {
    System.out.println(""String_Node_Str"" + strDirectoy + ""String_Node_Str"");
    logger.info(""String_Node_Str"" + strDirectoy + ""String_Node_Str"");
  }
  return strDirectoy;
}",0.6076923076923076
98739,"public static int runBackup(String path,final String dest,int compress,int encrypt){
  backplogger.info(""String_Node_Str"");
  backplogger.info(""String_Node_Str"" + dest + ""String_Node_Str""+ compress+ ""String_Node_Str""+ encrypt+ ""String_Node_Str"");
  DbConnect dbConnect=new DbConnect();
  int noOfFiles=0;
  List<MyFile> listOfFiles=null;
  listOfFiles=FileData.Read(path);
  List<MYSpFile> dListOfFiles=null;
  for (  final MyFile file : listOfFiles) {
    if ((compress != 0) && (encrypt != 0)) {
      String fzip=file.getName() + ""String_Node_Str"";
      try {
        compressFile(path + ""String_Node_Str"" + file.getName());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fileName=path + ""String_Node_Str"" + fzip;
      String tempFileName=fileName + ""String_Node_Str"";
      try {
        copy(Cipher.ENCRYPT_MODE,fileName,tempFileName,""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(FSize / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      int count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(fzipencrypt,file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else     if ((compress != 0) && (encrypt == 0)) {
      String fzip=file.getName() + ""String_Node_Str"";
      try {
        compressFile(path + ""String_Node_Str"" + file.getName());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(file.getSize() / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      int count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(fzip,file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else     if ((encrypt != 0) && (compress == 0)) {
      String fzip=file.getName();
      String fileName=path + ""String_Node_Str"" + fzip;
      String tempFileName=fileName + ""String_Node_Str"";
      try {
        copy(Cipher.ENCRYPT_MODE,fileName,tempFileName,""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(FSize / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      int count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(file.getName(),file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else {
      String fnormal=file.getName();
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fnormal);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(file.getSize() / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      int count=mySplit(path + Global.fs + fnormal,Despath + Global.fs + fnormal,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(file.getName(),file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
    }
    int[] raidArray=Sftp.raid(count);
    backplogger.info(""String_Node_Str"");
    for (int j=0; j < raidArray.length; ) {
      backplogger.info(""String_Node_Str"" + (j + 2) / 2 + ""String_Node_Str"" + raidArray[j] + ""String_Node_Str"" + ""String_Node_Str"" + raidArray[j + 1]);
      j=j + 2;
    }
    try {
      dListOfFiles=FileData.ReadSPFile(Despath,count,raidArray);
      for (      MYSpFile file2 : dListOfFiles) {
        dbConnect.saveSPFiles(file2.getFid(),file2.getName(),file2.getSize(),file2.getHash(),file2.getCloud(),file2.getRCloud());
      }
      backplogger.info(""String_Node_Str"");
    }
 catch (    Exception e) {
      backplogger.error(""String_Node_Str"" + e);
    }
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload(dest + Global.fs + file.getName());
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload1(dest + Global.fs + file.getName());
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload2(dest + Global.fs + file.getName());
  }
  backplogger.info(""String_Node_Str"" + noOfFiles + ""String_Node_Str""+ path);
  return 0;
}","public static int runBackup(String path,final String dest,int compress,int encrypt){
  backplogger.info(""String_Node_Str"");
  backplogger.info(""String_Node_Str"" + dest + ""String_Node_Str""+ compress+ ""String_Node_Str""+ encrypt+ ""String_Node_Str"");
  DbConnect dbConnect=new DbConnect();
  int noOfFiles=0;
  List<MyFile> listOfFiles=null;
  listOfFiles=FileData.Read(path);
  List<MYSpFile> dListOfFiles=null;
  for (  final MyFile file : listOfFiles) {
    if ((compress != 0) && (encrypt != 0)) {
      String fzip=file.getName() + ""String_Node_Str"";
      try {
        compressFile(path + ""String_Node_Str"" + file.getName());
        System.out.println(""String_Node_Str"" + fzip);
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
        logger.info(""String_Node_Str"" + fzip);
      }
      String fileName=path + ""String_Node_Str"" + fzip;
      String tempFileName=fileName + ""String_Node_Str"";
      try {
        copy(Cipher.ENCRYPT_MODE,fileName,tempFileName,""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(FSize / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(fzipencrypt,file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else     if ((compress != 0) && (encrypt == 0)) {
      String fzip=file.getName() + ""String_Node_Str"";
      try {
        compressFile(path + ""String_Node_Str"" + file.getName());
        System.out.println(""String_Node_Str"" + fzip);
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
        logger.info(""String_Node_Str"" + fzip);
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(file.getSize() / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(fzip,file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else     if ((encrypt != 0) && (compress == 0)) {
      String fzip=file.getName();
      String fileName=path + ""String_Node_Str"" + fzip;
      String tempFileName=fileName + ""String_Node_Str"";
      try {
        copy(Cipher.ENCRYPT_MODE,fileName,tempFileName,""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        logger.info(""String_Node_Str"" + fzip);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      String fzipencrypt=file.getName() + ""String_Node_Str"";
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fzip);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(FSize / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      count=mySplit(path + Global.fs + fzipencrypt,Despath + Global.fs + fzipencrypt,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(file.getName(),file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
      backplogger.info(""String_Node_Str"" + file.getName());
    }
 else {
      String fnormal=file.getName();
      try {
        Despath=CreateFolder(dest);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      long FSize=FileData.getFileSize(path + ""String_Node_Str"" + fnormal);
      int bandwidthSum=1024 * (((int)(Math.random() * 10) % 9) + 10);
      int packetVal=(int)(file.getSize() / bandwidthSum);
      backplogger.info(""String_Node_Str"" + packetVal + ""String_Node_Str""+ file.getSize()+ ""String_Node_Str""+ Global.c1Bandwidth+ ""String_Node_Str""+ Global.c2Bandwidth+ ""String_Node_Str""+ Global.c3Bandwidth);
      count=mySplit(path + Global.fs + fnormal,Despath + Global.fs + fnormal,packetVal);
      backplogger.info(""String_Node_Str"" + path + Global.fs+ file.getName()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
      noOfFiles++;
      try {
        dbConnect.saveFiles(file.getName(),file.getSize(),file.getHash(),file.getcDate());
        backplogger.info(""String_Node_Str"");
      }
 catch (      Exception e) {
        backplogger.error(""String_Node_Str"" + e);
      }
    }
    int[] raidArray=Sftp.raid(count);
    backplogger.info(""String_Node_Str"");
    for (int j=0; j < raidArray.length; ) {
      backplogger.info(""String_Node_Str"" + (j + 2) / 2 + ""String_Node_Str"" + raidArray[j] + ""String_Node_Str"" + ""String_Node_Str"" + raidArray[j + 1]);
      j=j + 2;
    }
    try {
      dListOfFiles=FileData.ReadSPFile(Despath,count,raidArray);
      for (      MYSpFile file2 : dListOfFiles) {
        dbConnect.saveSPFiles(file2.getFid(),file2.getName(),file2.getSize(),file2.getHash(),file2.getCloud(),file2.getRCloud());
      }
      backplogger.info(""String_Node_Str"");
    }
 catch (    Exception e) {
      backplogger.error(""String_Node_Str"" + e);
    }
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload(dest + Global.fs + file.getName());
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload1(dest + Global.fs + file.getName());
    backplogger.info(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
    Sftp.upload2(dest + Global.fs + file.getName());
  }
  backplogger.info(""String_Node_Str"" + noOfFiles + ""String_Node_Str""+ path);
  return 0;
}",0.9793377483443708
98740,"public static void compressFile(String path) throws Exception {
  String D_path=path + ""String_Node_Str"";
  ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(D_path)));
  byte[] data=new byte[1000];
  BufferedInputStream in=new BufferedInputStream(new FileInputStream(path));
  int count;
  out.putNextEntry(new ZipEntry(""String_Node_Str""));
  while ((count=in.read(data,0,1000)) != -1) {
    out.write(data,0,count);
  }
  in.close();
  out.flush();
  System.out.println(""String_Node_Str"");
}","public static void compressFile(String path) throws Exception {
  String D_path=path + ""String_Node_Str"";
  ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(D_path)));
  byte[] data=new byte[1000];
  BufferedInputStream in=new BufferedInputStream(new FileInputStream(path));
  int count;
  out.putNextEntry(new ZipEntry(""String_Node_Str""));
  while ((count=in.read(data,0,1000)) != -1) {
    out.write(data,0,count);
  }
  in.close();
  out.flush();
}",0.95968534906588
98741,"public static boolean FullHashCheck(List<MyFile> listoffiles,int i) throws Exception {
  boolean pass=true;
  DbConnect dbconnect=new DbConnect();
  List<MyFile> list=dbconnect.selectFullQuery(i);
  for (  MyFile myfile : listoffiles) {
    for (    MyFile dbfile : list) {
      if (myfile.getName().equalsIgnoreCase(dbfile.getName()) && myfile.getHash().equalsIgnoreCase(dbfile.getHash())) {
        pass=true;
        restoreLog.info(""String_Node_Str"" + myfile.getName());
      }
 else {
        pass=false;
      }
    }
  }
  return pass;
}","public static boolean FullHashCheck(List<MyFile> listoffiles,int i) throws Exception {
  boolean pass=true;
  DbConnect dbconnect=new DbConnect();
  List<MyFile> list=dbconnect.selectFullQuery(i);
  for (  MyFile myfile : listoffiles) {
    for (    MyFile dbfile : list) {
      if (myfile.getName().equalsIgnoreCase(dbfile.getName()) && myfile.getHash().equalsIgnoreCase(dbfile.getHash().replaceAll(""String_Node_Str"",""String_Node_Str""))) {
        pass=true;
        restoreLog.info(""String_Node_Str"" + myfile.getName());
      }
 else {
        pass=false;
      }
    }
  }
  return pass;
}",0.875438596491228
98742,"@Override public boolean configure(StaplerRequest req,JSONObject json) throws FormException {
  req.bindJSON(this,json);
  save();
  return true;
}","@Override public boolean configure(StaplerRequest req,JSONObject json) throws FormException {
  boolean clean_servers=json.get(""String_Node_Str"") == null && servers.size() > 0;
  if (clean_servers) {
    json.put(""String_Node_Str"",new JSONObject());
  }
  req.bindJSON(this,json);
  save();
  boolean result=super.configure(req,json);
  if (clean_servers) {
    servers.clear();
  }
  return result;
}",0.4890510948905109
98743,"@DataBoundConstructor public QAVerifyServerConfiguration(String configurationName,String hostName,Integer portNumber,String userName,String password,String protocol,Integer viewerPortNumber){
  this.configurationName=configurationName;
  this.hostName=hostName;
  this.password=password;
  this.userName=userName;
  this.portNumber=portNumber;
  this.protocol=protocol;
  this.viewerPortNumber=viewerPortNumber;
}","@DataBoundConstructor public QAVerifyServerConfiguration(String configurationName,String hostName,Integer portNumber,String userName,String password,String protocol,Integer viewerPortNumber){
  super(configurationName,hostName,null);
  this.configurationName=configurationName;
  this.hostName=hostName;
  this.password=password;
  this.userName=userName;
  this.portNumber=portNumber;
  this.protocol=protocol;
  this.viewerPortNumber=viewerPortNumber;
}",0.9516129032258064
98744,"private void copyArtifacts(AbstractBuild<?,?> build,QaFrameworkReportSettings qaReportSettings){
  try {
    copyReportsToArtifactsDir(qaReportSettings,build);
    if (qaReportSettings.isPublishToQAV() && qaReportSettings.isLoginToQAV()) {
      copyReourcesToArtifactsDir(""String_Node_Str"",build);
    }
  }
 catch (  Exception ex) {
    outStream.println(""String_Node_Str"");
    outStream.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    log.log(Level.INFO,""String_Node_Str"",ex);
  }
}","private void copyArtifacts(AbstractBuild<?,?> build,QaFrameworkReportSettings qaReportSettings){
  try {
    copyReportsToArtifactsDir(qaReportSettings,build);
    if (qaReportSettings.isPublishToQAV() && qaReportSettings.isLoginToQAV()) {
      copyReourcesToArtifactsDir(""String_Node_Str"",build);
    }
  }
 catch (  Exception ex) {
    outStream.println(""String_Node_Str"");
    outStream.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex.getMessage());
  }
}",0.9411764705882352
98745,"private boolean performQaFrameworkBuild(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  QAFrameworkPostBuildActionSetup qaFrameworkPostBuildActionSetup=(QAFrameworkPostBuildActionSetup)sourceQAFramework;
  QAFrameworkInstallationConfiguration qaFrameworkInstallationConfiguration=QAFrameworkInstallationConfiguration.getInstallationByName(qaFrameworkPostBuildActionSetup.qaInstallation);
  outStream.println(VersionInfo.getPluginVersion());
  PRQAToolSuite suite=null;
  if (qaFrameworkInstallationConfiguration != null) {
    suite=qaFrameworkInstallationConfiguration;
  }
 else {
    try {
      throw new PrqaSetupException(String.format(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    PrqaSetupException pex) {
      outStream.println(pex.getMessage());
      log.log(Level.WARNING,""String_Node_Str"",pex);
      return false;
    }
  }
  outStream.println(Messages.PRQANotifier_ReportGenerateText());
  outStream.println(""String_Node_Str"" + build.getWorkspace().getRemote());
  HashMap<String,String> environmentVariables=null;
  if (suite != null) {
    environmentVariables=suite.createEnvironmentVariables(build.getWorkspace().getRemote());
  }
  PRQAApplicationSettings appSettings=new PRQAApplicationSettings(qaFrameworkInstallationConfiguration.getHome());
  QaFrameworkReportSettings qaReportSettings;
  try {
    qaReportSettings=setQaFrameworkReportSettings(qaFrameworkPostBuildActionSetup,build);
  }
 catch (  PrqaException ex) {
    log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    return false;
  }
  QAVerifyServerSettings qaVerifySettings=setQaVerifyServerSettings(qaFrameworkPostBuildActionSetup.chosenServer);
  QAFrameworkReport report=new QAFrameworkReport(qaReportSettings,qaVerifySettings,appSettings,environmentVariables);
  PRQARemoteToolCheck remoteToolCheck=new PRQARemoteToolCheck(new QACli(),environmentVariables,appSettings,qaReportSettings,listener,launcher.isUnix());
  QAFrameworkRemoteReport remoteReport=new QAFrameworkRemoteReport(report,listener,launcher.isUnix());
  QAFrameworkRemoteReportUpload remoteReportUpload=new QAFrameworkRemoteReportUpload(report,listener,launcher.isUnix());
  PRQAComplianceStatus currentBuild;
  try {
    currentBuild=performBuild(build,appSettings,remoteToolCheck,remoteReport,qaReportSettings);
  }
 catch (  PrqaException ex) {
    log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    return false;
  }
  Tuple<PRQAReading,AbstractBuild<?,?>> previousBuildResultTuple=getPreviousReading(build,Result.SUCCESS);
  PRQAReading previousStabileBuildResult=previousBuildResultTuple != null ? previousBuildResultTuple.getFirst() : null;
  boolean res=true;
  log.fine(""String_Node_Str"" + (thresholdsDesc == null));
  if (thresholdsDesc != null) {
    log.fine(""String_Node_Str"" + thresholdsDesc.size());
  }
  try {
    res=evaluate((PRQAComplianceStatus)previousStabileBuildResult,thresholdsDesc,currentBuild);
    log.fine(""String_Node_Str"" + res);
  }
 catch (  Exception ex) {
    outStream.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  PRQABuildAction action=new PRQABuildAction(build);
  action.setResult(currentBuild);
  action.setPublisher(this);
  Result buildResult=build.getResult();
  if (!res) {
    if (!buildResult.isWorseOrEqualTo(Result.FAILURE)) {
      build.setResult(Result.UNSTABLE);
    }
    if (qaReportSettings.isPublishToQAV() && !qaReportSettings.isQaUploadWhenStable() && !buildResult.isWorseOrEqualTo(Result.FAILURE)) {
      try {
        outStream.println(""String_Node_Str"");
        performUpload(build,appSettings,remoteToolCheck,remoteReportUpload);
      }
 catch (      PrqaException ex) {
        log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
        return false;
      }
    }
 else     if (qaReportSettings.isPublishToQAV() && (qaReportSettings.isQaUploadWhenStable() || buildResult.isWorseOrEqualTo(Result.FAILURE))) {
      outStream.println(""String_Node_Str"");
      log.warning(""String_Node_Str"");
    }
  }
 else   if (qaReportSettings.isPublishToQAV()) {
    if (buildResult.isWorseOrEqualTo(Result.FAILURE) && qaReportSettings.isQaUploadWhenStable()) {
      outStream.println(""String_Node_Str"");
      log.warning(""String_Node_Str"");
    }
 else {
      try {
        outStream.println(""String_Node_Str"");
        performUpload(build,appSettings,remoteToolCheck,remoteReportUpload);
      }
 catch (      PrqaException ex) {
        log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
        return false;
      }
    }
  }
  outStream.println(""String_Node_Str"");
  if (previousBuildResultTuple != null) {
    outStream.println(String.format(Messages.PRQANotifier_PreviousResultBuildNumber(new Integer(previousBuildResultTuple.getSecond().number))));
    outStream.println(previousBuildResultTuple.getFirst());
  }
 else {
    outStream.println(Messages.PRQANotifier_NoPreviousResults());
  }
  outStream.println(Messages.PRQANotifier_ScannedValues());
  outStream.println(currentBuild);
  build.getActions().add(action);
  return true;
}","private boolean performQaFrameworkBuild(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  QAFrameworkPostBuildActionSetup qaFrameworkPostBuildActionSetup=(QAFrameworkPostBuildActionSetup)sourceQAFramework;
  QAFrameworkInstallationConfiguration qaFrameworkInstallationConfiguration=QAFrameworkInstallationConfiguration.getInstallationByName(qaFrameworkPostBuildActionSetup.qaInstallation);
  outStream.println(VersionInfo.getPluginVersion());
  PRQAToolSuite suite=null;
  if (qaFrameworkInstallationConfiguration != null) {
    suite=qaFrameworkInstallationConfiguration;
  }
 else {
    try {
      throw new PrqaSetupException(String.format(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    PrqaSetupException pex) {
      outStream.println(pex.getMessage());
      log.log(Level.WARNING,""String_Node_Str"",pex.getCause());
      return false;
    }
  }
  outStream.println(Messages.PRQANotifier_ReportGenerateText());
  outStream.println(""String_Node_Str"" + build.getWorkspace().getRemote());
  HashMap<String,String> environmentVariables=null;
  if (suite != null) {
    environmentVariables=suite.createEnvironmentVariables(build.getWorkspace().getRemote());
  }
  PRQAApplicationSettings appSettings=new PRQAApplicationSettings(qaFrameworkInstallationConfiguration.getHome());
  QaFrameworkReportSettings qaReportSettings;
  try {
    qaReportSettings=setQaFrameworkReportSettings(qaFrameworkPostBuildActionSetup,build);
  }
 catch (  PrqaException ex) {
    log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    return false;
  }
  QAVerifyServerSettings qaVerifySettings=setQaVerifyServerSettings(qaFrameworkPostBuildActionSetup.chosenServer);
  QAFrameworkReport report=new QAFrameworkReport(qaReportSettings,qaVerifySettings,appSettings,environmentVariables);
  PRQARemoteToolCheck remoteToolCheck=new PRQARemoteToolCheck(new QACli(),environmentVariables,appSettings,qaReportSettings,listener,launcher.isUnix());
  QAFrameworkRemoteReport remoteReport=new QAFrameworkRemoteReport(report,listener,launcher.isUnix());
  QAFrameworkRemoteReportUpload remoteReportUpload=new QAFrameworkRemoteReportUpload(report,listener,launcher.isUnix());
  PRQAComplianceStatus currentBuild;
  try {
    currentBuild=performBuild(build,appSettings,remoteToolCheck,remoteReport,qaReportSettings);
  }
 catch (  PrqaException ex) {
    log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
    return false;
  }
  Tuple<PRQAReading,AbstractBuild<?,?>> previousBuildResultTuple=getPreviousReading(build,Result.SUCCESS);
  PRQAReading previousStabileBuildResult=previousBuildResultTuple != null ? previousBuildResultTuple.getFirst() : null;
  boolean res=true;
  log.fine(""String_Node_Str"" + (thresholdsDesc == null));
  if (thresholdsDesc != null) {
    log.fine(""String_Node_Str"" + thresholdsDesc.size());
  }
  try {
    res=evaluate((PRQAComplianceStatus)previousStabileBuildResult,thresholdsDesc,currentBuild);
    log.fine(""String_Node_Str"" + res);
  }
 catch (  Exception ex) {
    outStream.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  PRQABuildAction action=new PRQABuildAction(build);
  action.setResult(currentBuild);
  action.setPublisher(this);
  Result buildResult=build.getResult();
  if (!res) {
    if (!buildResult.isWorseOrEqualTo(Result.FAILURE)) {
      build.setResult(Result.UNSTABLE);
    }
    if (qaReportSettings.isPublishToQAV() && !qaReportSettings.isQaUploadWhenStable() && !buildResult.isWorseOrEqualTo(Result.FAILURE)) {
      try {
        outStream.println(""String_Node_Str"");
        performUpload(build,appSettings,remoteToolCheck,remoteReportUpload);
      }
 catch (      PrqaException ex) {
        log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
        return false;
      }
    }
 else     if (qaReportSettings.isPublishToQAV() && (qaReportSettings.isQaUploadWhenStable() || buildResult.isWorseOrEqualTo(Result.FAILURE))) {
      outStream.println(""String_Node_Str"");
      log.warning(""String_Node_Str"");
    }
  }
 else   if (qaReportSettings.isPublishToQAV()) {
    if (buildResult.isWorseOrEqualTo(Result.FAILURE) && qaReportSettings.isQaUploadWhenStable()) {
      outStream.println(""String_Node_Str"");
      log.warning(""String_Node_Str"");
    }
 else {
      try {
        outStream.println(""String_Node_Str"");
        performUpload(build,appSettings,remoteToolCheck,remoteReportUpload);
      }
 catch (      PrqaException ex) {
        log.log(Level.WARNING,""String_Node_Str"",ex.getMessage());
        return false;
      }
    }
  }
  outStream.println(""String_Node_Str"");
  if (previousBuildResultTuple != null) {
    outStream.println(String.format(Messages.PRQANotifier_PreviousResultBuildNumber(new Integer(previousBuildResultTuple.getSecond().number))));
    outStream.println(previousBuildResultTuple.getFirst());
  }
 else {
    outStream.println(Messages.PRQANotifier_NoPreviousResults());
  }
  outStream.println(Messages.PRQANotifier_ScannedValues());
  outStream.println(currentBuild);
  build.getActions().add(action);
  return true;
}",0.9989146521953626
98746,"private void copyReportsToArtifactsDir(ReportSettings settings,AbstractBuild<?,?> build) throws IOException, InterruptedException {
  if (settings instanceof PRQAReportSettings) {
    PRQAReportSettings prqaReportSettings=(PRQAReportSettings)settings;
    for (    PRQAContext.QARReportType type : prqaReportSettings.chosenReportTypes) {
      String pattern=""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION);
      FilePath[] files=build.getWorkspace().list(pattern);
      if (files.length >= 1) {
        outStream.println(Messages.PRQANotifier_FoundReport(PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION)));
        String artifactDir=build.getArtifactsDir().getPath();
        FilePath targetDir=new FilePath(new File(artifactDir + ""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION)));
        outStream.println(Messages.PRQANotifier_CopyToTarget(targetDir.getName()));
        build.getWorkspace().list(""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION))[0].copyTo(targetDir);
        outStream.println(Messages.PRQANotifier_SuccesCopyReport());
      }
    }
  }
 else   if (settings instanceof QaFrameworkReportSettings) {
    QaFrameworkReportSettings qaFrameworkSettings=(QaFrameworkReportSettings)settings;
    File workspace=new File(build.getWorkspace().getRemote());
    File artefact=build.getArtifactsDir();
    try {
      copyGeneratedReportsToJobWorkspace(workspace,qaFrameworkSettings.getQaProject());
      copyReportsFromWorkspaceToArtefactsDir(artefact,workspace,build.getTimeInMillis());
    }
 catch (    IOException ex) {
    }
  }
}","private void copyReportsToArtifactsDir(ReportSettings settings,AbstractBuild<?,?> build) throws IOException, InterruptedException {
  if (settings instanceof PRQAReportSettings) {
    PRQAReportSettings prqaReportSettings=(PRQAReportSettings)settings;
    for (    PRQAContext.QARReportType type : prqaReportSettings.chosenReportTypes) {
      String pattern=""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION);
      FilePath[] files=build.getWorkspace().list(pattern);
      if (files.length >= 1) {
        outStream.println(Messages.PRQANotifier_FoundReport(PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION)));
        String artifactDir=build.getArtifactsDir().getPath();
        FilePath targetDir=new FilePath(new File(artifactDir + ""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION)));
        outStream.println(Messages.PRQANotifier_CopyToTarget(targetDir.getName()));
        build.getWorkspace().list(""String_Node_Str"" + PRQAReport.getNamingTemplate(type,PRQAReport.XHTML_REPORT_EXTENSION))[0].copyTo(targetDir);
        outStream.println(Messages.PRQANotifier_SuccesCopyReport());
      }
    }
  }
 else   if (settings instanceof QaFrameworkReportSettings) {
    QaFrameworkReportSettings qaFrameworkSettings=(QaFrameworkReportSettings)settings;
    File workspace=new File(build.getWorkspace().getRemote());
    File artefact=build.getArtifactsDir();
    try {
      copyGeneratedReportsToJobWorkspace(workspace,qaFrameworkSettings.getQaProject());
      copyReportsFromWorkspaceToArtefactsDir(artefact,workspace,build.getTimeInMillis());
    }
 catch (    IOException ex) {
      outStream.println(""String_Node_Str"");
      log.log(Level.SEVERE,""String_Node_Str"",ex.getCause());
    }
  }
}",0.969939879759519
98747,"@Override public PRQAComplianceStatus invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  Map<String,String> expandedEnvironment=expandEnvironment(report.getEnvironment(),report.getAppSettings(),report.getSettings());
  report.setEnvironment(expandedEnvironment);
  report.setWorkspace(f);
  PrintStream out=listener.getLogger();
  try {
    if (StringUtils.isBlank(report.getSettings().getQaInstallation())) {
      throw new PrqaException(""String_Node_Str"");
    }
    if (reportSetting.isPublishToQAV()) {
      CmdResult uploadResult=report.uploadQacli(out);
      logCmdResult(uploadResult,out);
    }
    return report.getDummyComplianceStatus(out);
  }
 catch (  PrqaException exception) {
    throw new IOException(exception.getMessage(),exception);
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage());
  }
}","@Override public PRQAComplianceStatus invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  Map<String,String> expandedEnvironment=expandEnvironment(report.getEnvironment(),report.getAppSettings(),report.getSettings());
  report.setEnvironment(expandedEnvironment);
  report.setWorkspace(f);
  PrintStream out=listener.getLogger();
  try {
    if (StringUtils.isBlank(report.getSettings().getQaInstallation())) {
      throw new PrqaException(""String_Node_Str"");
    }
    if (reportSetting.isPublishToQAV()) {
      CmdResult uploadResult=report.uploadQacli(out);
      logCmdResult(uploadResult,out);
    }
    return report.getComplianceStatus(out);
  }
 catch (  PrqaException exception) {
    throw new IOException(exception.getMessage(),exception);
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage());
  }
}",0.9971081550028918
98748,"private PRQAComplianceStatus performUpload(AbstractBuild<?,?> build,PRQAApplicationSettings appSettings,PRQARemoteToolCheck remoteToolCheck,QAFrameworkRemoteReportUpload remoteReportUpload) throws PrqaException {
  boolean success=true;
  PRQAComplianceStatus currentBuild=null;
  try {
    QaFrameworkVersion qaFrameworkVersion=new QaFrameworkVersion(build.getWorkspace().act(remoteToolCheck));
    success=isQafVersionSupported(qaFrameworkVersion);
    if (!success) {
      build.setResult(Result.FAILURE);
      throw new PrqaException(""String_Node_Str"");
    }
    remoteReportUpload.setQaFrameworkVersion(qaFrameworkVersion);
    build.getWorkspace().act(remoteReportUpload);
  }
 catch (  IOException ex) {
    success=false;
    outStream.println(ex.getMessage());
    build.setResult(Result.FAILURE);
    throw new PrqaException(""String_Node_Str"");
  }
catch (  Exception ex) {
    outStream.println(Messages.PRQANotifier_FailedGettingResults());
    outStream.println(ex.getMessage());
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    success=false;
    build.setResult(Result.FAILURE);
    throw new PrqaException(""String_Node_Str"");
  }
  return currentBuild;
}","private PRQAComplianceStatus performUpload(AbstractBuild<?,?> build,PRQAApplicationSettings appSettings,PRQARemoteToolCheck remoteToolCheck,QAFrameworkRemoteReportUpload remoteReportUpload) throws PrqaException {
  boolean success=true;
  PRQAComplianceStatus currentBuild=null;
  try {
    QaFrameworkVersion qaFrameworkVersion=new QaFrameworkVersion(build.getWorkspace().act(remoteToolCheck));
    success=isQafVersionSupported(qaFrameworkVersion);
    if (!success) {
      build.setResult(Result.FAILURE);
      throw new PrqaException(""String_Node_Str"");
    }
    remoteReportUpload.setQaFrameworkVersion(qaFrameworkVersion);
    currentBuild=build.getWorkspace().act(remoteReportUpload);
  }
 catch (  IOException ex) {
    success=false;
    outStream.println(ex.getMessage());
    build.setResult(Result.FAILURE);
    throw new PrqaException(""String_Node_Str"");
  }
catch (  Exception ex) {
    outStream.println(Messages.PRQANotifier_FailedGettingResults());
    outStream.println(ex.getMessage());
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    success=false;
    build.setResult(Result.FAILURE);
    throw new PrqaException(""String_Node_Str"");
  }
  return currentBuild;
}",0.9945031712473572
98749,"private boolean isTresholdValidForMessageGroups(PRQAComplianceStatus currentComplianceStatus,int thresholdLevel){
  boolean isValidTreshold=true;
  List<MessageGroup> messageGroups=currentComplianceStatus.getMessagesGroups();
  if (messageGroups == null || messageGroups.isEmpty()) {
    isValidTreshold=currentComplianceStatus.getMessageCount(thresholdLevel) <= value;
    if (!isValidTreshold) {
      currentComplianceStatus.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMetExistingPrqa(currentComplianceStatus.getMessageCount(thresholdLevel),value));
    }
  }
 else {
    for (    MessageGroup messageGroup : currentComplianceStatus.getMessagesGroups()) {
      isValidTreshold=messageGroup.getMessagesWithinTreshold() <= value;
      if (!isValidTreshold) {
        currentComplianceStatus.addNotification(onUnstableMessage(messageGroup.getMessageGroupName(),messageGroup.getMessagesWithinTreshold(),value));
      }
      log.fine(String.format(""String_Node_Str"",messageGroup.getMessageGroupName(),messageGroup.getMessagesWithinTreshold(),value));
      log.fine(String.format(""String_Node_Str"",isValidTreshold));
    }
  }
  return isValidTreshold;
}","private boolean isTresholdValidForMessageGroups(PRQAComplianceStatus currentComplianceStatus,int thresholdLevel){
  boolean isValidTreshold=true;
  boolean isStableBuild=true;
  List<MessageGroup> messageGroups=currentComplianceStatus.getMessagesGroups();
  if (messageGroups == null || messageGroups.isEmpty()) {
    isValidTreshold=currentComplianceStatus.getMessageCount(thresholdLevel) <= value;
    if (!isValidTreshold) {
      currentComplianceStatus.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMetExistingPrqa(currentComplianceStatus.getMessageCount(thresholdLevel),value));
    }
  }
 else {
    for (    MessageGroup messageGroup : currentComplianceStatus.getMessagesGroups()) {
      isValidTreshold=messageGroup.getMessagesWithinTreshold() <= value;
      if (!isValidTreshold) {
        currentComplianceStatus.addNotification(onUnstableMessage(messageGroup.getMessageGroupName(),messageGroup.getMessagesWithinTreshold(),value));
        isStableBuild=false;
      }
      log.fine(String.format(""String_Node_Str"",messageGroup.getMessageGroupName(),messageGroup.getMessagesWithinTreshold(),value));
      log.fine(String.format(""String_Node_Str"",isValidTreshold));
    }
  }
  return isStableBuild;
}",0.9671790610718736
98750,"@Override public PRQAComplianceStatus invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  Map<String,String> expandedEnvironment=expandEnvironment(report.getEnvironment(),report.getAppSettings(),report.getSettings());
  report.setEnvironment(expandedEnvironment);
  report.setWorkspace(f);
  PrintStream out=listener.getLogger();
  out.println(""String_Node_Str"" + f.getAbsolutePath());
  try {
    if (StringUtils.isBlank(report.getSettings().getQaInstallation())) {
      throw new PrqaException(""String_Node_Str"");
    }
    CmdResult pullUnifyProject=report.pullUnifyProjectQacli(isUnix,out);
    logCmdResult(pullUnifyProject,out);
    CmdResult analyzeResult=report.analyzeQacli(isUnix,out);
    logCmdResult(analyzeResult,out);
    CmdResult cmaAnalysisResult=report.cmaAnalysisQacli(isUnix,out);
    logCmdResult(cmaAnalysisResult,out);
    if (reportSetting.isGenCrReport()) {
      String Report=""String_Node_Str"";
      CmdResult crrGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(crrGenerationResult,out);
    }
    if (reportSetting.isGenMdReport()) {
      String Report=""String_Node_Str"";
      CmdResult mdrGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(mdrGenerationResult,out);
    }
    if (reportSetting.isGenSupReport()) {
      String Report=""String_Node_Str"";
      CmdResult srGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(srGenerationResult,out);
    }
    String Report=""String_Node_Str"";
    CmdResult rcrGenerationResult=report.reportQacli(isUnix,Report,out);
    logCmdResult(rcrGenerationResult,out);
    if (reportSetting.isPublishToQAV()) {
      CmdResult uploadResult=report.uploadQacli(out);
      logCmdResult(uploadResult,out);
    }
    return report.getComplianceStatus(out);
  }
 catch (  PrqaException exception) {
    throw new IOException(exception.getMessage(),exception);
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage());
  }
}","@Override public PRQAComplianceStatus invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  Map<String,String> expandedEnvironment=expandEnvironment(report.getEnvironment(),report.getAppSettings(),report.getSettings());
  report.setEnvironment(expandedEnvironment);
  report.setWorkspace(f);
  PrintStream out=listener.getLogger();
  out.println(""String_Node_Str"" + f.getAbsolutePath());
  try {
    if (StringUtils.isBlank(report.getSettings().getQaInstallation())) {
      throw new PrqaException(""String_Node_Str"");
    }
    if (reportSetting.isPullUnifiedProject()) {
      CmdResult pullUnifyProject=report.pullUnifyProjectQacli(isUnix,out);
      logCmdResult(pullUnifyProject,out);
    }
    CmdResult analyzeResult=report.analyzeQacli(isUnix,out);
    logCmdResult(analyzeResult,out);
    if (reportSetting.isQaCrossModuleAnalysis()) {
      CmdResult cmaAnalysisResult=report.cmaAnalysisQacli(isUnix,out);
      logCmdResult(cmaAnalysisResult,out);
    }
    if (reportSetting.isGenCrReport()) {
      String Report=""String_Node_Str"";
      CmdResult crrGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(crrGenerationResult,out);
    }
    if (reportSetting.isGenMdReport()) {
      String Report=""String_Node_Str"";
      CmdResult mdrGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(mdrGenerationResult,out);
    }
    if (reportSetting.isGenSupReport()) {
      String Report=""String_Node_Str"";
      CmdResult srGenerationResult=report.reportQacli(isUnix,Report,out);
      logCmdResult(srGenerationResult,out);
    }
    String Report=""String_Node_Str"";
    CmdResult rcrGenerationResult=report.reportQacli(isUnix,Report,out);
    logCmdResult(rcrGenerationResult,out);
    if (reportSetting.isPublishToQAV()) {
      CmdResult uploadResult=report.uploadQacli(out);
      logCmdResult(uploadResult,out);
    }
    return report.getComplianceStatus(out);
  }
 catch (  PrqaException exception) {
    throw new IOException(exception.getMessage(),exception);
  }
catch (  Exception ex) {
    throw new IOException(ex.getMessage());
  }
}",0.9654338892917572
98751,"private void copyReportsFromWorkspaceToArtefactsDir(File artefact,File workspace,long elapsedTime) throws IOException {
  if (artefact == null) {
    return;
  }
  if (!artefact.exists()) {
    artefact.mkdirs();
  }
  FileUtils.cleanDirectory(artefact);
  File[] workspaceFiles=workspace.listFiles();
  if (workspaceFiles.length < 1) {
    return;
  }
  Arrays.sort(workspaceFiles,new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      if (o1.lastModified() > o2.lastModified()) {
        return -1;
      }
 else       if (o1.lastModified() < o2.lastModified()) {
        return +1;
      }
 else {
        return 0;
      }
    }
  }
);
  boolean hasCRReport=false;
  boolean hasSUReport=false;
  boolean hasRCReport=false;
  boolean hasMDReport=false;
  for (  File file : workspaceFiles) {
    if (file.lastModified() < elapsedTime) {
      break;
    }
    if (file.getName().contains(""String_Node_Str"") && !hasCRReport) {
      FileUtils.copyFileToDirectory(file,artefact);
      hasCRReport=true;
    }
    if (file.getName().contains(""String_Node_Str"") && !hasSUReport) {
      FileUtils.copyFileToDirectory(file,artefact);
      hasSUReport=true;
    }
    if (file.getName().contains(""String_Node_Str"") && !hasRCReport) {
      FileUtils.copyFileToDirectory(file,artefact);
      hasRCReport=true;
    }
    if (file.getName().contains(""String_Node_Str"") && !hasMDReport) {
      FileUtils.copyFileToDirectory(file,artefact);
      hasMDReport=true;
    }
  }
}","private void copyReportsFromWorkspaceToArtefactsDir(File artefact,File workspace,long elapsedTime) throws IOException {
  if (artefact == null) {
    return;
  }
  if (!artefact.exists()) {
    artefact.mkdirs();
  }
  FileUtils.cleanDirectory(artefact);
  File[] workspaceFiles=workspace.listFiles();
  if (workspaceFiles.length < 1) {
    return;
  }
  Arrays.sort(workspaceFiles,new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      if (o1.lastModified() > o2.lastModified()) {
        return -1;
      }
 else       if (o1.lastModified() < o2.lastModified()) {
        return +1;
      }
 else {
        return 0;
      }
    }
  }
);
  for (  File file : workspaceFiles) {
    if (file.lastModified() < elapsedTime) {
      break;
    }
    if (file.getName().contains(""String_Node_Str"")) {
      FileUtils.copyFileToDirectory(file,artefact);
    }
    if (file.getName().contains(""String_Node_Str"")) {
      FileUtils.copyFileToDirectory(file,artefact);
    }
    if (file.getName().contains(""String_Node_Str"")) {
      FileUtils.copyFileToDirectory(file,artefact);
    }
    if (file.getName().contains(""String_Node_Str"")) {
      FileUtils.copyFileToDirectory(file,artefact);
    }
  }
}",0.8567251461988304
98752,"public void setUploadSourceCode(String uploadSourceCode){
  uploadSourceCode=uploadSourceCode;
}","public void setUploadSourceCode(String uploadSource){
  uploadSourceCode=uploadSource;
}",0.9565217391304348
98753,"public FormValidation doCheckCMAProjectName(@QueryParameter String CMAProjectName){
  if (StringUtils.isBlank(CMAProjectName)) {
    return FormValidation.errorWithMarkup(""String_Node_Str"");
  }
  if (CMAProjectName.startsWith(""String_Node_Str"")) {
    return FormValidation.errorWithMarkup(""String_Node_Str"");
  }
  return FormValidation.ok();
}","public FormValidation doCheckCMAProjectName(@QueryParameter String CMAProjectName){
  if (StringUtils.isBlank(CMAProjectName)) {
    return FormValidation.errorWithMarkup(""String_Node_Str"");
  }
  if (CMAProjectName.startsWith(""String_Node_Str"")) {
    return FormValidation.errorWithMarkup(""String_Node_Str"");
  }
  if (!CMAProjectName.matches(""String_Node_Str"")) {
    return FormValidation.errorWithMarkup(""String_Node_Str"");
  }
  return FormValidation.ok();
}",0.8469135802469135
98754,"private void _checkBinaryMatch(HashMap<String,String> env,Product product) throws PrqaSetupException {
  String pathSep=System.getProperty(""String_Node_Str"");
  if (isUnix) {
    if (product instanceof QAC) {
      File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
      String path=f.getPath();
      if (!f.exists()) {
        throw new PrqaSetupException(String.format(""String_Node_Str"",path));
      }
    }
 else {
      File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
      String path=f.getPath();
      if (!f.exists()) {
        throw new PrqaSetupException(String.format(""String_Node_Str"",path));
      }
    }
  }
 else {
    if (product instanceof QAC) {
      File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
      String path=f.getPath();
      if (!f.exists()) {
        throw new PrqaSetupException(String.format(""String_Node_Str"",path));
      }
    }
 else {
      File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
      String path=f.getPath();
      if (!f.exists()) {
        throw new PrqaSetupException(String.format(""String_Node_Str"",path));
      }
    }
  }
}","private void _checkBinaryMatch(HashMap<String,String> env,Product product) throws PrqaSetupException {
  String pathSep=System.getProperty(""String_Node_Str"");
  if (env != null) {
    if (isUnix) {
      if (product instanceof QAC) {
        File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
        String path=f.getPath();
        if (!f.exists()) {
          throw new PrqaSetupException(String.format(""String_Node_Str"",path));
        }
      }
 else {
        File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
        String path=f.getPath();
        if (!f.exists()) {
          throw new PrqaSetupException(String.format(""String_Node_Str"",path));
        }
      }
    }
 else {
      if (product instanceof QAC) {
        File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
        String path=f.getPath();
        if (!f.exists()) {
          throw new PrqaSetupException(String.format(""String_Node_Str"",path));
        }
      }
 else {
        File f=new File(env.get(""String_Node_Str"") + pathSep + ""String_Node_Str"");
        String path=f.getPath();
        if (!f.exists()) {
          throw new PrqaSetupException(String.format(""String_Node_Str"",path));
        }
      }
    }
  }
}",0.9662464416429444
98755,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  String productUsed=product;
  out=listener.getLogger();
  PRQAToolSuite suite=null;
  QACToolSuite qacSuite=QACToolSuite.getInstallationByName(product);
  out.println(VersionInfo.getPluginVersion());
  if (qacSuite != null) {
    productUsed=qacSuite.tool;
    suite=qacSuite;
  }
  QAVerifyServerConfiguration conf=PRQAGlobalConfig.get().getConfigurationByName(chosenServer);
  PRQAApplicationSettings appSettings=null;
  if (suite != null) {
    if (suite instanceof QACToolSuite) {
      QACToolSuite cSuite=(QACToolSuite)suite;
      appSettings=new PRQAApplicationSettings(cSuite.qarHome,cSuite.qavHome,cSuite.qawHome,cSuite.getHome());
    }
  }
  PRQAReportSettings settings=null;
  QAR qar=null;
  if (source != null && source instanceof PRQAReportProjectFileSource) {
    PRQAReportProjectFileSource pSource=(PRQAReportProjectFileSource)source;
    settings=new PRQAReportSettings(chosenServer,pSource.projectFile,performCrossModuleAnalysis,publishToQAV,enableDependencyMode,enableDataFlowAnalysis,chosenReportTypes,productUsed);
    qar=new QAR(productUsed,pSource.projectFile,QARReportType.Compliance);
  }
 else   if (source != null && source instanceof PRQAReportFileListSource) {
    PRQAReportFileListSource flSource=(PRQAReportFileListSource)source;
    settings=new PRQAReportSettings(chosenServer,flSource.fileList,performCrossModuleAnalysis,publishToQAV,enableDependencyMode,enableDataFlowAnalysis,chosenReportTypes,productUsed,flSource.settingsFile);
    qar=new QAR(productUsed,flSource.fileList,QARReportType.Compliance);
  }
  if (generateReports) {
    out.println(Messages.PRQANotifier_ReportGenerateText());
    out.println(qar);
  }
 else {
    out.println(""String_Node_Str"");
  }
  PRQAUploadSettings uploadSettings=new PRQAUploadSettings(vcsConfigXml,singleSnapshotMode,codeUploadSetting,sourceOrigin,qaVerifyProjectName);
  QAVerifyServerSettings qavSettings=null;
  if (conf != null) {
    qavSettings=new QAVerifyServerSettings(conf.getHostName(),conf.getPortNumber(),conf.getProtocol(),conf.getPassword(),conf.getUserName());
  }
  HashMap<String,String> environment=null;
  if (suite != null) {
    environment=suite.createEnvironmentVariables(build.getWorkspace().getRemote());
  }
  boolean success=true;
  PRQAComplianceStatus status=null;
  try {
    if (qacSuite == null && (!productUsed.equals(""String_Node_Str"") || !productUsed.equals(""String_Node_Str""))) {
      throw new PrqaSetupException(""String_Node_Str"");
    }
    if (source == null) {
      throw new PrqaSetupException(""String_Node_Str"");
    }
    PRQAReport report=new PRQAReport(settings,qavSettings,uploadSettings,appSettings,environment);
    if (productUsed.equals(""String_Node_Str"")) {
      String qacVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QAC(appSettings.productHome),environment,appSettings,settings,listener,launcher.isUnix()));
      out.println(""String_Node_Str"" + qacVersion);
    }
 else     if (productUsed.equals(""String_Node_Str"")) {
      String qacppVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QACpp(appSettings.productHome),environment,appSettings,settings,listener,launcher.isUnix()));
      out.println(""String_Node_Str"" + qacppVersion);
    }
    String qawVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QAW(),environment,appSettings,settings,listener,launcher.isUnix()));
    out.println(""String_Node_Str"" + qawVersion);
    String qarVersion=build.getWorkspace().act(new PRQARemoteToolCheck(qar,environment,appSettings,settings,listener,launcher.isUnix()));
    out.println(""String_Node_Str"" + qarVersion);
    status=build.getWorkspace().act(new PRQARemoteReport(report,listener,launcher.isUnix()));
    status.setMessagesWithinThreshold(status.getMessageCount(threshholdlevel));
  }
 catch (  IOException ex) {
    Throwable myCase=ExceptionUtils.unpackFrom(IOException.class,ex);
    if (myCase instanceof PrqaSetupException) {
      out.println(String.format(""String_Node_Str"",VersionInfo.WIKI_PAGE));
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaUploadException) {
      out.println(""String_Node_Str"");
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaParserException) {
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaException) {
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    success=false;
    return false;
  }
catch (  Exception ex) {
    out.println(Messages.PRQANotifier_FailedGettingResults());
    out.println(""String_Node_Str"");
    ex.printStackTrace(out);
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    try {
      if (generateReports && success) {
        copyReportsToArtifactsDir(settings,build);
      }
      if (publishToQAV && success) {
        copyReourcesToArtifactsDir(""String_Node_Str"",build);
      }
    }
 catch (    Exception ex) {
      out.println(""String_Node_Str"");
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
  if (status == null && generateReports) {
    out.println(Messages.PRQANotifier_FailedGettingResults());
    return false;
  }
  Tuple<PRQAReading,AbstractBuild<?,?>> previousResult=getPreviousReading(build,Result.SUCCESS);
  if (status == null && !generateReports) {
    out.println(Messages.PRQANotifier_SkipOk());
    return true;
  }
  status.setThresholds(thresholds);
  boolean res=true;
  if (previousResult != null) {
    out.println(String.format(Messages.PRQANotifier_PreviousResultBuildNumber(new Integer(previousResult.getSecond().number))));
    out.println(previousResult.getFirst());
  }
 else {
    out.println(Messages.PRQANotifier_NoPreviousResults());
  }
  PRQAReading lar=previousResult != null ? previousResult.getFirst() : null;
  ComparisonSettings fileCompliance=ComparisonSettings.valueOf(settingFileCompliance);
  ComparisonSettings projCompliance=ComparisonSettings.valueOf(settingProjectCompliance);
  ComparisonSettings maxMsg=ComparisonSettings.valueOf(settingMaxMessages);
  try {
    Double currentFileCompliance=status.getReadout(StatusCategory.ProjectCompliance).doubleValue();
    if (fileCompliance == ComparisonSettings.Improvement) {
      if (lar != null) {
        Double previous=lar.getReadout(StatusCategory.FileCompliance).doubleValue();
        if (currentFileCompliance < previous) {
          status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentFileCompliance,previous));
          res=false;
        }
      }
    }
 else     if (fileCompliance == ComparisonSettings.Threshold) {
      if (currentFileCompliance < fileComplianceIndex) {
        status.addNotification(Messages.PRQANotifier_FileComplianceRequirementNotMet(currentFileCompliance,fileComplianceIndex));
        res=false;
      }
    }
    Double currentProjecCompliance=status.getReadout(StatusCategory.ProjectCompliance).doubleValue();
    if (projCompliance == ComparisonSettings.Threshold) {
      if (currentProjecCompliance < projectComplianceIndex) {
        status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentProjecCompliance,projectComplianceIndex));
        res=false;
      }
    }
 else     if (projCompliance == ComparisonSettings.Improvement) {
      if (lar != null) {
        Double previous=lar.getReadout(StatusCategory.ProjectCompliance).doubleValue();
        if (currentProjecCompliance < previous) {
          status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentProjecCompliance,previous));
          res=false;
        }
      }
    }
  }
 catch (  PrqaException ex) {
    out.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  int current=((PRQAComplianceStatus)status).getMessageCount(threshholdlevel);
  if (maxMsg == ComparisonSettings.Improvement) {
    if (lar != null) {
      int previous=((PRQAComplianceStatus)lar).getMessageCount(threshholdlevel);
      if (current > previous) {
        status.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMet(current,previous));
        res=false;
      }
    }
  }
 else   if (maxMsg == ComparisonSettings.Threshold) {
    if (current > totalMax) {
      status.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMet(current,totalMax));
      res=false;
    }
  }
  out.println(Messages.PRQANotifier_ScannedValues());
  out.println(status);
  PRQABuildAction action=new PRQABuildAction(build);
  action.setResult(status);
  action.setPublisher(this);
  if (!res) {
    build.setResult(Result.UNSTABLE);
  }
  build.getActions().add(action);
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  String productUsed=product;
  out=listener.getLogger();
  PRQAToolSuite suite=null;
  QACToolSuite qacSuite=QACToolSuite.getInstallationByName(product);
  out.println(VersionInfo.getPluginVersion());
  if (qacSuite != null) {
    productUsed=qacSuite.tool;
    suite=qacSuite;
  }
  QAVerifyServerConfiguration conf=PRQAGlobalConfig.get().getConfigurationByName(chosenServer);
  PRQAApplicationSettings appSettings=null;
  if (suite != null) {
    if (suite instanceof QACToolSuite) {
      QACToolSuite cSuite=(QACToolSuite)suite;
      appSettings=new PRQAApplicationSettings(cSuite.qarHome,cSuite.qavHome,cSuite.qawHome,cSuite.getHome());
    }
  }
  PRQAReportSettings settings=null;
  QAR qar=null;
  if (source != null && source instanceof PRQAReportProjectFileSource) {
    PRQAReportProjectFileSource pSource=(PRQAReportProjectFileSource)source;
    settings=new PRQAReportSettings(chosenServer,pSource.projectFile,performCrossModuleAnalysis,publishToQAV,enableDependencyMode,enableDataFlowAnalysis,chosenReportTypes,productUsed);
    qar=new QAR(productUsed,pSource.projectFile,QARReportType.Compliance);
  }
 else   if (source != null && source instanceof PRQAReportFileListSource) {
    PRQAReportFileListSource flSource=(PRQAReportFileListSource)source;
    settings=new PRQAReportSettings(chosenServer,flSource.fileList,performCrossModuleAnalysis,publishToQAV,enableDependencyMode,enableDataFlowAnalysis,chosenReportTypes,productUsed,flSource.settingsFile);
    qar=new QAR(productUsed,flSource.fileList,QARReportType.Compliance);
  }
  if (generateReports) {
    out.println(Messages.PRQANotifier_ReportGenerateText());
    out.println(qar);
  }
 else {
    out.println(""String_Node_Str"");
  }
  PRQAUploadSettings uploadSettings=new PRQAUploadSettings(vcsConfigXml,singleSnapshotMode,codeUploadSetting,sourceOrigin,qaVerifyProjectName);
  QAVerifyServerSettings qavSettings=null;
  if (conf != null) {
    qavSettings=new QAVerifyServerSettings(conf.getHostName(),conf.getPortNumber(),conf.getProtocol(),conf.getPassword(),conf.getUserName());
  }
  HashMap<String,String> environment=null;
  if (suite != null) {
    environment=suite.createEnvironmentVariables(build.getWorkspace().getRemote());
  }
  boolean success=true;
  PRQAComplianceStatus status=null;
  try {
    if (qacSuite == null && !(productUsed.equals(""String_Node_Str"") || productUsed.equals(""String_Node_Str""))) {
      throw new PrqaSetupException(String.format(""String_Node_Str"",productUsed));
    }
    if (source == null) {
      throw new PrqaSetupException(""String_Node_Str"");
    }
    PRQAReport report=new PRQAReport(settings,qavSettings,uploadSettings,appSettings,environment);
    if (productUsed.equals(""String_Node_Str"")) {
      String qacVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QAC(),environment,appSettings,settings,listener,launcher.isUnix()));
      out.println(""String_Node_Str"" + qacVersion);
    }
 else     if (productUsed.equals(""String_Node_Str"")) {
      String qacppVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QACpp(),environment,appSettings,settings,listener,launcher.isUnix()));
      out.println(""String_Node_Str"" + qacppVersion);
    }
    String qawVersion=build.getWorkspace().act(new PRQARemoteToolCheck(new QAW(),environment,appSettings,settings,listener,launcher.isUnix()));
    out.println(""String_Node_Str"" + qawVersion);
    String qarVersion=build.getWorkspace().act(new PRQARemoteToolCheck(qar,environment,appSettings,settings,listener,launcher.isUnix()));
    out.println(""String_Node_Str"" + qarVersion);
    status=build.getWorkspace().act(new PRQARemoteReport(report,listener,launcher.isUnix()));
    status.setMessagesWithinThreshold(status.getMessageCount(threshholdlevel));
  }
 catch (  IOException ex) {
    Throwable myCase=ExceptionUtils.unpackFrom(IOException.class,ex);
    if (myCase instanceof PrqaSetupException) {
      out.println(String.format(""String_Node_Str"",VersionInfo.WIKI_PAGE));
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaUploadException) {
      out.println(""String_Node_Str"");
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaParserException) {
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",myCase);
    }
 else     if (myCase instanceof PrqaException) {
      out.println(myCase.getMessage());
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
    success=false;
    return false;
  }
catch (  Exception ex) {
    out.println(Messages.PRQANotifier_FailedGettingResults());
    out.println(""String_Node_Str"");
    ex.printStackTrace(out);
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    try {
      if (generateReports && success) {
        copyReportsToArtifactsDir(settings,build);
      }
      if (publishToQAV && success) {
        copyReourcesToArtifactsDir(""String_Node_Str"",build);
      }
    }
 catch (    Exception ex) {
      out.println(""String_Node_Str"");
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
  if (status == null && generateReports) {
    out.println(Messages.PRQANotifier_FailedGettingResults());
    return false;
  }
  Tuple<PRQAReading,AbstractBuild<?,?>> previousResult=getPreviousReading(build,Result.SUCCESS);
  if (status == null && !generateReports) {
    out.println(Messages.PRQANotifier_SkipOk());
    return true;
  }
  status.setThresholds(thresholds);
  boolean res=true;
  if (previousResult != null) {
    out.println(String.format(Messages.PRQANotifier_PreviousResultBuildNumber(new Integer(previousResult.getSecond().number))));
    out.println(previousResult.getFirst());
  }
 else {
    out.println(Messages.PRQANotifier_NoPreviousResults());
  }
  PRQAReading lar=previousResult != null ? previousResult.getFirst() : null;
  ComparisonSettings fileCompliance=ComparisonSettings.valueOf(settingFileCompliance);
  ComparisonSettings projCompliance=ComparisonSettings.valueOf(settingProjectCompliance);
  ComparisonSettings maxMsg=ComparisonSettings.valueOf(settingMaxMessages);
  try {
    Double currentFileCompliance=status.getReadout(StatusCategory.ProjectCompliance).doubleValue();
    if (fileCompliance == ComparisonSettings.Improvement) {
      if (lar != null) {
        Double previous=lar.getReadout(StatusCategory.FileCompliance).doubleValue();
        if (currentFileCompliance < previous) {
          status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentFileCompliance,previous));
          res=false;
        }
      }
    }
 else     if (fileCompliance == ComparisonSettings.Threshold) {
      if (currentFileCompliance < fileComplianceIndex) {
        status.addNotification(Messages.PRQANotifier_FileComplianceRequirementNotMet(currentFileCompliance,fileComplianceIndex));
        res=false;
      }
    }
    Double currentProjecCompliance=status.getReadout(StatusCategory.ProjectCompliance).doubleValue();
    if (projCompliance == ComparisonSettings.Threshold) {
      if (currentProjecCompliance < projectComplianceIndex) {
        status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentProjecCompliance,projectComplianceIndex));
        res=false;
      }
    }
 else     if (projCompliance == ComparisonSettings.Improvement) {
      if (lar != null) {
        Double previous=lar.getReadout(StatusCategory.ProjectCompliance).doubleValue();
        if (currentProjecCompliance < previous) {
          status.addNotification(Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentProjecCompliance,previous));
          res=false;
        }
      }
    }
  }
 catch (  PrqaException ex) {
    out.println(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  int current=((PRQAComplianceStatus)status).getMessageCount(threshholdlevel);
  if (maxMsg == ComparisonSettings.Improvement) {
    if (lar != null) {
      int previous=((PRQAComplianceStatus)lar).getMessageCount(threshholdlevel);
      if (current > previous) {
        status.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMet(current,previous));
        res=false;
      }
    }
  }
 else   if (maxMsg == ComparisonSettings.Threshold) {
    if (current > totalMax) {
      status.addNotification(Messages.PRQANotifier_MaxMessagesRequirementNotMet(current,totalMax));
      res=false;
    }
  }
  out.println(Messages.PRQANotifier_ScannedValues());
  out.println(status);
  PRQABuildAction action=new PRQABuildAction(build);
  action.setResult(status);
  action.setPublisher(this);
  if (!res) {
    build.setResult(Result.UNSTABLE);
  }
  build.getActions().add(action);
  return true;
}",0.9957589285714286
98756,"public abstract String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue);","public abstract String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel);",0.9224489795918368
98757,public abstract Boolean validateThreshold(PRQAComplianceStatus currentValue);,"public abstract Boolean validateThreshold(PRQAComplianceStatus currentValue,int thresholdLevel);",0.8901734104046243
98758,"public abstract Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue);","public abstract Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel);",0.9243027888446216
98759,"public Boolean validate(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (improvement) {
    return validateImprovement(lastStableValue,currentValue);
  }
 else {
    return validateThreshold(currentValue);
  }
}","public Boolean validate(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (improvement) {
    return validateImprovement(lastStableValue,currentValue,thresholdLevel);
  }
 else {
    return validateThreshold(currentValue,thresholdLevel);
  }
}",0.9077212806026366
98760,"@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (!improvement) {
    return Messages.PRQANotifier_FileComplianceRequirementNotMet(currentValue.getFileCompliance(),lastStableValue.getFileCompliance());
  }
 else {
    return Messages.PRQANotifier_FileComplianceRequirementNotMet(currentValue.getFileCompliance(),value);
  }
}","@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (!improvement) {
    return Messages.PRQANotifier_FileComplianceRequirementNotMet(currentValue.getFileCompliance(),lastStableValue.getFileCompliance());
  }
 else {
    return Messages.PRQANotifier_FileComplianceRequirementNotMet(currentValue.getFileCompliance(),value);
  }
}",0.9765721331689272
98761,"@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue){
  return currentValue.getFileCompliance() >= value;
}","@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue,int thresholdLevel){
  return currentValue.getFileCompliance() >= value;
}",0.9328621908127208
98762,"@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (lastStableValue == null)   return Boolean.TRUE;
  return currentValue.getFileCompliance() >= lastStableValue.getFileCompliance();
}","@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (lastStableValue == null)   return Boolean.TRUE;
  return currentValue.getFileCompliance() >= lastStableValue.getFileCompliance();
}",0.9640831758034026
98763,"@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (improvement) {
    return Messages.PRQANotifier_MaxMessagesRequirementNotMet(currentValue.getMessageCount(thresholdLevel),lastStableValue.getMessageCount(thresholdLevel));
  }
 else {
    return Messages.PRQANotifier_MaxMessagesRequirementNotMet(currentValue.getMessageCount(thresholdLevel),value);
  }
}","@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (improvement) {
    return Messages.PRQANotifier_MaxMessagesRequirementNotMet(currentValue.getMessageCount(thresholdLevel),lastStableValue.getMessageCount(thresholdLevel));
  }
 else {
    return Messages.PRQANotifier_MaxMessagesRequirementNotMet(currentValue.getMessageCount(thresholdLevel),value);
  }
}",0.9781357882623706
98764,"@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue){
  Boolean res=currentValue.getMessageCount(thresholdLevel) <= value;
  log.fine(String.format(""String_Node_Str"",currentValue.getMessageCount(thresholdLevel),value));
  log.fine(String.format(""String_Node_Str"",res));
  return res;
}","@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue,int thresholdLevel){
  Boolean res=currentValue.getMessageCount(thresholdLevel) <= value;
  log.fine(String.format(""String_Node_Str"",currentValue.getMessageCount(thresholdLevel),value));
  log.fine(String.format(""String_Node_Str"",res));
  return res;
}",0.970266040688576
98765,"@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (lastStableValue == null) {
    return Boolean.TRUE;
  }
 else {
    return currentValue.getMessageCount(thresholdLevel) <= lastStableValue.getMessageCount(thresholdLevel);
  }
}","@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (lastStableValue == null) {
    return Boolean.TRUE;
  }
 else {
    return currentValue.getMessageCount(thresholdLevel) <= lastStableValue.getMessageCount(thresholdLevel);
  }
}",0.9694041867954912
98766,"@DataBoundConstructor public MessageComplianceThreshold(final Integer value,final int thresholdLevel,final Boolean improvement){
  super(improvement);
  this.value=value;
  this.thresholdLevel=thresholdLevel;
}","@DataBoundConstructor public MessageComplianceThreshold(final Integer value,final int thresholdLevel,final Boolean improvement){
  super(improvement);
  this.value=value;
}",0.900523560209424
98767,"@Override public Boolean validate(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  int msgWithin=currentValue.getMessageCount(thresholdLevel);
  currentValue.setMessagesWithinThreshold(msgWithin);
  if (improvement) {
    return validateImprovement(lastStableValue,currentValue);
  }
 else {
    return validateThreshold(currentValue);
  }
}","@Override public Boolean validate(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  int msgWithin=currentValue.getMessageCount(thresholdLevel);
  currentValue.setMessagesWithinThreshold(msgWithin);
  if (improvement) {
    return validateImprovement(lastStableValue,currentValue,thresholdLevel);
  }
 else {
    return validateThreshold(currentValue,thresholdLevel);
  }
}",0.9374201787994892
98768,"/** 
 * Process the results
 */
private boolean evaluate(PRQAReading previousResult,List<? extends AbstractThreshold> thresholds,PRQAComplianceStatus status){
  PRQAComplianceStatus previousComplianceStatus=(PRQAComplianceStatus)previousResult;
  HashMap<StatusCategory,Number> tholds=new HashMap<StatusCategory,Number>();
  boolean isStable=true;
  for (  AbstractThreshold threshold : thresholds) {
    addThreshold(threshold,tholds);
    if (!threshold.validate(previousComplianceStatus,status)) {
      status.addNotification(threshold.onUnstableMessage(previousComplianceStatus,status));
      isStable=false;
    }
  }
  status.setThresholds(tholds);
  return isStable;
}","/** 
 * Process the results
 */
private boolean evaluate(PRQAReading previousResult,List<? extends AbstractThreshold> thresholds,PRQAComplianceStatus status){
  PRQAComplianceStatus previousComplianceStatus=(PRQAComplianceStatus)previousResult;
  HashMap<StatusCategory,Number> tholds=new HashMap<StatusCategory,Number>();
  boolean isStable=true;
  for (  AbstractThreshold threshold : thresholds) {
    addThreshold(threshold,tholds);
    if (!threshold.validate(previousComplianceStatus,status,threshholdlevel)) {
      status.addNotification(threshold.onUnstableMessage(previousComplianceStatus,status,threshholdlevel));
      isStable=false;
    }
  }
  status.setThresholds(tholds);
  return isStable;
}",0.976911976911977
98769,"@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (improvement) {
    return Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentValue.getProjectCompliance(),lastStableValue.getProjectCompliance());
  }
 else {
    return Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentValue.getProjectCompliance(),value);
  }
}","@Override public String onUnstableMessage(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (improvement) {
    return Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentValue.getProjectCompliance(),lastStableValue.getProjectCompliance());
  }
 else {
    return Messages.PRQANotifier_ProjectComplianceIndexRequirementNotMet(currentValue.getProjectCompliance(),value);
  }
}",0.9778812572759022
98770,"@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue){
  return currentValue.getProjectCompliance() >= value;
}","@Override public Boolean validateThreshold(PRQAComplianceStatus currentValue,int thresholdLevel){
  return currentValue.getProjectCompliance() >= value;
}",0.9342560553633218
98771,"@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue){
  if (lastStableValue == null)   return Boolean.TRUE;
  return currentValue.getProjectCompliance() >= lastStableValue.getProjectCompliance();
}","@Override public Boolean validateImprovement(PRQAComplianceStatus lastStableValue,PRQAComplianceStatus currentValue,int thresholdLevel){
  if (lastStableValue == null)   return Boolean.TRUE;
  return currentValue.getProjectCompliance() >= lastStableValue.getProjectCompliance();
}",0.9648798521256932
98772,"/** 
 * This function works in the following way: After choosing your report type, as set of supported graphs are given, which it is up to the user to add. Currently this is done programatically, but given my design, it should be relatively simple to make this possible to edit in the GUI. If a result is fetched and it does not contain the property to draw the graphs the report demands we simply skip it. This means you can switch report type in a job. You don't need to create a new job if you just want to change reporting mode. This method catches the PrqaReadingException, when that exception is thrown it means that the we skip the reading and continue. 
 * @param req
 * @param rsp
 * @throws IOException 
 */
public void doReportGraphs(StaplerRequest req,StaplerResponse rsp) throws IOException {
  PRQANotifier notifier=(PRQANotifier)getPublisher();
  HashMap<StatusCategory,Boolean> drawMatrix=_doDrawThresholds(req,rsp);
  if (notifier != null) {
    String className=req.getParameter(""String_Node_Str"");
    PRQAGraph graph=notifier.getGraph(className);
    PRQAStatusCollection collection=new PRQAStatusCollection();
    DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
    ChartUtil.NumberOnlyBuildLabel label=null;
    Double tMax=null;
    for (PRQABuildAction prqabuild=this; prqabuild != null; prqabuild=prqabuild.getPreviousAction()) {
      if (prqabuild.getResult() != null) {
        label=new ChartUtil.NumberOnlyBuildLabel(prqabuild.build);
        PRQAReading stat=prqabuild.getResult();
        for (        StatusCategory cat : graph.getCategories()) {
          Number res=null;
          try {
            PRQAComplianceStatus cs=(PRQAComplianceStatus)stat;
            if (cat.equals(StatusCategory.Messages)) {
              res=cs.getMessagesWithinThreshold();
            }
 else {
              res=stat.getReadout(cat);
            }
          }
 catch (          PrqaException ex) {
            continue;
          }
          if (drawMatrix.containsKey(cat) && drawMatrix.get(cat)) {
            Number threshold=prqabuild.getThreshold(cat);
            if (threshold != null) {
              if (tMax == null) {
                tMax=threshold.doubleValue();
              }
 else               if (tMax.doubleValue() < threshold.doubleValue()) {
                tMax=threshold.doubleValue();
              }
              dsb.add(threshold,String.format(""String_Node_Str"",cat.toString()),label);
            }
          }
          dsb.add(res,cat.toString(),label);
          collection.add(stat);
        }
      }
    }
    graph.setData(collection);
    graph.drawGraph(req,rsp,dsb,tMax);
  }
}","/** 
 * This function works in the following way: After choosing your report type, as set of supported graphs are given, which it is up to the user to add. Currently this is done programatically, but given my design, it should be relatively simple to make this possible to edit in the GUI. If a result is fetched and it does not contain the property to draw the graphs the report demands we simply skip it. This means you can switch report type in a job. You don't need to create a new job if you just want to change reporting mode. This method catches the PrqaReadingException, when that exception is thrown it means that the we skip the reading and continue. 
 * @param req
 * @param rsp
 * @throws IOException 
 */
public void doReportGraphs(StaplerRequest req,StaplerResponse rsp) throws IOException {
  PRQANotifier notifier=(PRQANotifier)getPublisher();
  HashMap<StatusCategory,Boolean> drawMatrix=_doDrawThresholds(req,rsp);
  if (notifier != null) {
    Integer tSetting=Integer.parseInt(req.getParameter(""String_Node_Str""));
    String className=req.getParameter(""String_Node_Str"");
    PRQAGraph graph=notifier.getGraph(className);
    PRQAStatusCollection collection=new PRQAStatusCollection();
    DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
    ChartUtil.NumberOnlyBuildLabel label=null;
    Double tMax=null;
    for (PRQABuildAction prqabuild=this; prqabuild != null; prqabuild=prqabuild.getPreviousAction()) {
      if (prqabuild.getResult() != null) {
        label=new ChartUtil.NumberOnlyBuildLabel(prqabuild.build);
        PRQAReading stat=prqabuild.getResult();
        for (        StatusCategory cat : graph.getCategories()) {
          Number res=null;
          try {
            PRQAComplianceStatus cs=(PRQAComplianceStatus)stat;
            if (cat.equals(StatusCategory.Messages)) {
              res=cs.getMessageCount(tSetting);
            }
 else {
              res=stat.getReadout(cat);
            }
          }
 catch (          PrqaException ex) {
            continue;
          }
          if (drawMatrix.containsKey(cat) && drawMatrix.get(cat)) {
            Number threshold=prqabuild.getThreshold(cat);
            if (threshold != null) {
              if (tMax == null) {
                tMax=threshold.doubleValue();
              }
 else               if (tMax.doubleValue() < threshold.doubleValue()) {
                tMax=threshold.doubleValue();
              }
              dsb.add(threshold,String.format(""String_Node_Str"",cat.toString()),label);
            }
          }
          dsb.add(res,cat.toString(),label);
          collection.add(stat);
        }
      }
    }
    graph.setData(collection);
    graph.drawGraph(req,rsp,dsb,tMax);
  }
}",0.9804993621286676
98773,"/** 
 * This is setup. Must be called before anything else in the perform() method of concrete implemntations. We need to do this to setup output paths for the report. Constructs the final command. Performs the setup. Takes the workspace path and an output format for the report that is to be generated. The information about the type of report is already present here.  So the task of this piece of code is to construct the final command for generating the report
 */
protected void setup(String path,String outputFormat){
  PRQACommandBuilder analysisCommand=report.getAnalysisTool().getBuilder();
  analysisCommand.prependArgument(PRQACommandBuilder.getProduct(report.getAnalysisTool()));
  analysisCommand.appendArgument(PRQACommandBuilder.getProjectFile(report.getReportTool().getProjectFile()));
  report.getAnalysisTool().setCommandBase(path);
  if (report.isEnableDependencyMode()) {
    analysisCommand.appendArgument(""String_Node_Str"");
  }
  analysisCommand.appendArgument(PRQACommandBuilder.getDataFlowAnanlysisParameter(report.isEnableDataFlowAnalysis()));
  String pal=(report.isUseCrossModuleAnalysis() ? ""String_Node_Str"" : ""String_Node_Str"");
  analysisCommand.appendArgument(PRQACommandBuilder.getMaseq(pal));
  report.getAnalysisTool().setCommand(analysisCommand.getCommand());
  PRQACommandBuilder builder=report.getReportTool().getBuilder();
  builder.prependArgument(PRQACommandBuilder.getProduct(report.getReportTool().getAnalysisTool()));
  builder.appendArgument(PRQACommandBuilder.getProjectFile(report.getReportTool().getProjectFile()));
  report.getReportTool().setReportOutputPath(path);
  report.getReportTool().setCommandBase(path);
  if (silentMode) {
    builder.appendArgument(""String_Node_Str"");
  }
  builder.appendArgument(""String_Node_Str"");
  builder.appendArgument(PRQACommandBuilder.getDataFlowAnanlysisParameter(report.isEnableDataFlowAnalysis()));
  builder.appendArgument(PRQACommandBuilder.getSfbaOption(true));
  String reports=""String_Node_Str"";
  for (  PRQAContext.QARReportType type : report.getChosenReports()) {
    reports+=""String_Node_Str"" + PRQACommandBuilder.getReportTypeParameter(type.toString(),true) + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getViewingProgram(""String_Node_Str"") + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getReportFormatParameter(outputFormat,false) + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getProjectName() + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getOutputPathParameter(path,true);
    reports+=""String_Node_Str"";
  }
  reports=reports.substring(0,reports.length() - 1);
  String qarEmbedded=(report.isUseCrossModuleAnalysis() ? ""String_Node_Str"" : ""String_Node_Str"") + reports;
  builder.appendArgument(PRQACommandBuilder.getMaseq(qarEmbedded));
  report.getReportTool().setCommand(builder.getCommand());
}","/** 
 * This is setup. Must be called before anything else in the perform() method of concrete implemntations. We need to do this to setup output paths for the report. Constructs the final command. Performs the setup. Takes the workspace path and an output format for the report that is to be generated. The information about the type of report is already present here.  So the task of this piece of code is to construct the final command for generating the report
 */
protected void setup(String path,String outputFormat){
  PRQACommandBuilder analysisCommand=report.getAnalysisTool().getBuilder();
  analysisCommand.prependArgument(PRQACommandBuilder.getProduct(report.getAnalysisTool()));
  analysisCommand.appendArgument(PRQACommandBuilder.getProjectFile(report.getReportTool().getProjectFile()));
  report.getAnalysisTool().setCommandBase(path);
  if (report.isEnableDependencyMode()) {
    analysisCommand.appendArgument(""String_Node_Str"");
  }
  analysisCommand.appendArgument(PRQACommandBuilder.getDataFlowAnanlysisParameter(report.isEnableDataFlowAnalysis()));
  String pal=(report.isUseCrossModuleAnalysis() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (!StringUtils.isEmpty(pal)) {
    analysisCommand.appendArgument(PRQACommandBuilder.getMaseq(pal));
  }
  report.getAnalysisTool().setCommand(analysisCommand.getCommand());
  PRQACommandBuilder builder=report.getReportTool().getBuilder();
  builder.prependArgument(PRQACommandBuilder.getProduct(report.getReportTool().getAnalysisTool()));
  builder.appendArgument(PRQACommandBuilder.getProjectFile(report.getReportTool().getProjectFile()));
  report.getReportTool().setReportOutputPath(path);
  report.getReportTool().setCommandBase(path);
  if (silentMode) {
    builder.appendArgument(""String_Node_Str"");
  }
  builder.appendArgument(""String_Node_Str"");
  builder.appendArgument(PRQACommandBuilder.getDataFlowAnanlysisParameter(report.isEnableDataFlowAnalysis()));
  builder.appendArgument(PRQACommandBuilder.getSfbaOption(true));
  String reports=""String_Node_Str"";
  for (  PRQAContext.QARReportType type : report.getChosenReports()) {
    reports+=""String_Node_Str"" + PRQACommandBuilder.getReportTypeParameter(type.toString(),true) + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getViewingProgram(""String_Node_Str"") + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getReportFormatParameter(outputFormat,false) + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getProjectName() + ""String_Node_Str"";
    reports+=PRQACommandBuilder.getOutputPathParameter(path,true);
    reports+=""String_Node_Str"";
  }
  reports=reports.substring(0,reports.length() - 1);
  String qarEmbedded=(report.isUseCrossModuleAnalysis() ? ""String_Node_Str"" : ""String_Node_Str"") + reports;
  builder.appendArgument(PRQACommandBuilder.getMaseq(qarEmbedded));
  report.getReportTool().setCommand(builder.getCommand());
}",0.9914110429447852
98774,"@Override public PRQAComplianceStatus perform(File file,VirtualChannel vc) throws IOException, InterruptedException {
  try {
    String projFile=report.getReportTool().getProjectFile();
    String replaced=projFile.replace(""String_Node_Str"",file.getPath());
    report.getReportTool().setProjectFile(replaced);
    setup(file.getPath(),PRQAReport.XHTML);
    PRQAComplianceStatus status=null;
    int deleteCount=deleteOldLogFiles(file.getPath(),""String_Node_Str"",""String_Node_Str"");
    listener.getLogger().println(String.format(""String_Node_Str"",deleteCount));
    if (generateReports) {
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getProductVersion());
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getAnalysisTool().getProductVersion());
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getCommand());
      status=report.generateReport();
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
    }
    if (qaverify != null) {
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(qaverify.qavUpload(file.getPath(),generateReports));
      listener.getLogger().println(""String_Node_Str"");
    }
    return status;
  }
 catch (  PrqaException ex) {
    if (report.getCmdResult() != null) {
      for (      String error : report.getCmdResult().errorList) {
        listener.getLogger().println(error);
      }
    }
    throw new IOException(String.format(""String_Node_Str"",ex.getClass().getSimpleName(),ex.getMessage()),ex);
  }
 finally {
    if (!silentMode) {
      if (report.getCmdResult() != null) {
        for (        String outline : report.getCmdResult().stdoutList) {
          listener.getLogger().println(outline);
        }
      }
    }
    listener.getLogger().println(""String_Node_Str"");
  }
}","@Override public PRQAComplianceStatus perform(File file,VirtualChannel vc) throws IOException, InterruptedException {
  try {
    String projFile=report.getReportTool().getProjectFile();
    String replaced=projFile.replace(""String_Node_Str"",file.getPath());
    report.getReportTool().setProjectFile(replaced);
    setup(file.getPath(),PRQAReport.XHTML);
    PRQAComplianceStatus status=null;
    int deleteCount=deleteOldLogFiles(file.getPath(),""String_Node_Str"",""String_Node_Str"");
    listener.getLogger().println(String.format(""String_Node_Str"",deleteCount));
    if (generateReports) {
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getProductVersion());
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getAnalysisTool().getProductVersion());
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(report.getReportTool().getCommand());
      status=report.generateReport();
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
    }
    if (qaverify != null) {
      listener.getLogger().println(""String_Node_Str"");
      String command=qaverify.qavUpload(file.getPath(),generateReports);
      listener.getLogger().println(""String_Node_Str"");
      listener.getLogger().println(command);
      qaverify.generateUpload(command,file.getPath(),generateReports);
      listener.getLogger().println(""String_Node_Str"");
    }
    return status;
  }
 catch (  PrqaException ex) {
    if (report.getCmdResult() != null) {
      for (      String error : report.getCmdResult().errorList) {
        listener.getLogger().println(error);
      }
    }
    throw new IOException(String.format(""String_Node_Str"",ex.getClass().getSimpleName(),ex.getMessage()),ex);
  }
 finally {
    if (!silentMode) {
      if (report.getCmdResult() != null) {
        for (        String outline : report.getCmdResult().stdoutList) {
          listener.getLogger().println(outline);
        }
      }
    }
    listener.getLogger().println(""String_Node_Str"");
  }
}",0.9477283829995116
98775,"@Override public PRQASuppressionStatus invoke(File file,VirtualChannel vc) throws IOException, InterruptedException {
  try {
    listener.getLogger().println(String.format(""String_Node_Str"",report.getQar().getCommand()));
    setup(file.getPath(),PRQAReport.XHTML);
    return report.completeTask();
  }
 catch (  PrqaException ex) {
    listener.getLogger().println(""String_Node_Str"" + report.getQar().getBuilder().getCommand());
    throw new IOException(ex);
  }
}","@Override public PRQASuppressionStatus invoke(File file,VirtualChannel vc) throws IOException, InterruptedException {
  try {
    setup(file.getPath(),PRQAReport.XHTML);
    listener.getLogger().println(String.format(""String_Node_Str"",report.getQar().getCommand()));
    return report.completeTask();
  }
 catch (  PrqaException ex) {
    listener.getLogger().println(""String_Node_Str"" + report.getQar().getBuilder().getCommand());
    throw new IOException(ex);
  }
}",0.7927350427350427
98776,"public void fillModel(Map<String,Object> model,HttpServletRequest request){
  model.put(""String_Node_Str"",request.getContextPath() + Piazza.PATH + ""String_Node_Str""+ queryParameter(model,request));
}","public void fillModel(Map<String,Object> model,HttpServletRequest request){
  String queryParameter=queryParameter(request);
  model.put(""String_Node_Str"",request.getContextPath() + Piazza.PATH + ""String_Node_Str""+ queryParameter+ ""String_Node_Str""+ request.getParameter(queryParameter));
}",0.7566462167689162
98777,"private String queryParameter(Map<String,Object> model,HttpServletRequest request){
  if (isBuildTypeView(request)) {
    return buildTypeQuery(model);
  }
 else   if (isProjectView(request)) {
    return projectQuery(model);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + request.getRequestURI());
  }
}","private String queryParameter(HttpServletRequest request){
  if (isBuildTypeView(request)) {
    return BUILD_TYPE_ID;
  }
 else   if (isProjectView(request)) {
    return PROJECT_ID;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + request.getRequestURI());
  }
}",0.8585526315789473
98778,"private boolean exceptionExists(Word nextBestWord){
  for (Iterator<Word> iterator=exceptions.iterator(); iterator.hasNext(); ) {
    Word next=iterator.next();
    if (nextBestWord == next) {
      return true;
    }
  }
  return false;
}","private boolean exceptionExists(Word nextBestWord){
  for (  Word next : exceptions) {
    if (nextBestWord == next) {
      return true;
    }
  }
  return false;
}",0.7574257425742574
98779,"private void iterateAndSelectWords(int counter,StringBuilder sb,Word next){
  for (int i=0; i < counter; i++) {
    if (i == counter - 1) {
      sb.append(getEOSWord(next));
      break;
    }
 else {
      Word bestLink=next.getBestLink();
      if (bestLink != null) {
        Word nextBestWord=bestLink;
        if (!exceptionExists(nextBestWord)) {
          exceptions.add(nextBestWord);
          sb.append(nextBestWord.toString());
          sb.append(""String_Node_Str"");
          next=repository.getByName(bestLink.toString());
        }
 else {
          if (exceptionsForAllLinks(nextBestWord)) {
            System.out.println(""String_Node_Str"");
            exceptions.clear();
          }
 else {
            System.out.println(""String_Node_Str"");
          }
          i--;
        }
      }
 else {
        sb.append(""String_Node_Str"");
        break;
      }
    }
  }
}","private void iterateAndSelectWords(int counter,StringBuilder sb,Word next){
  for (int i=0; i < counter; i++) {
    if (i == counter - 1) {
      sb.append(getEOSWord(next));
      break;
    }
 else {
      Word bestLink=next.getBestLink();
      if (bestLink != null) {
        if (!exceptionExists(bestLink)) {
          exceptions.add(bestLink);
          sb.append(bestLink.toString());
          sb.append(""String_Node_Str"");
          next=repository.getByName(bestLink.toString());
        }
 else {
          if (exceptionsForAllLinks(bestLink)) {
            System.out.println(""String_Node_Str"");
            exceptions.clear();
          }
 else {
            System.out.println(""String_Node_Str"");
          }
          i--;
        }
      }
 else {
        sb.append(""String_Node_Str"");
        break;
      }
    }
  }
}",0.906032482598608
98780,"private String getPartialSentence(Integer userSelection,String[] sentenceArray){
  StringBuilder lastSentenceTemp=new StringBuilder();
  for (int i=0; i < userSelection; i++) {
    String s=sentenceArray[i];
    lastSentenceTemp.append(s + ""String_Node_Str"");
  }
  return lastSentenceTemp.toString();
}","private String getPartialSentence(Integer userSelection,String[] sentenceArray){
  StringBuilder lastSentenceTemp=new StringBuilder();
  for (int i=0; i < userSelection; i++) {
    String s=sentenceArray[i];
    lastSentenceTemp.append(s).append(""String_Node_Str"");
  }
  return lastSentenceTemp.toString();
}",0.9803921568627452
98781,"public boolean exceptionsForAllLinks(Word word){
  ArrayList<Link> links=word.links;
  boolean allExceptions=true;
  for (Iterator<Link> iterator=links.iterator(); iterator.hasNext(); ) {
    Link next=iterator.next();
    if (!exceptionExists(next.otherWord))     allExceptions=false;
  }
  return allExceptions;
}","public boolean exceptionsForAllLinks(Word word){
  ArrayList<Link> links=word.links;
  boolean allExceptions=true;
  for (  Link next : links) {
    if (!exceptionExists(next.otherWord))     allExceptions=false;
  }
  return allExceptions;
}",0.7985611510791367
98782,"public int calcRandomIndex(){
  int index=0;
  int size=this.links.size();
  int priorityCounter;
  do {
    priorityCounter=priorityCounterGenerate();
switch (priorityCounter) {
case 0:
      index=(int)((Math.random() * size) / 5.0);
    break;
case 1:
  index=(int)Math.round((Math.random() * size / 5.0) + (size / 5.0));
break;
case 2:
index=(int)Math.round((Math.random() * size / 5.0) + ((size / 5.0) * 2.0));
break;
case 3:
index=(int)Math.round((Math.random() * size / 5.0) + ((size / 5.0) * 3.0));
break;
case 4:
index=(int)Math.round((Math.random() * size / 5.0) + ((size / 5.0) * 4.0));
break;
}
}
 while (index >= size);
return index;
}","public int calcRandomIndex(){
  int index=0;
  int size=this.links.size();
  int priorityCounter;
  do {
    if (links.size() < 10) {
      return (int)(Math.random() * links.size());
    }
    priorityCounter=priorityCounterGenerate();
switch (priorityCounter) {
case 0:
      index=(int)((Math.random() * size) / 5.0);
    break;
case 1:
  index=(int)(((Math.random() * size) / 5.0) + (size / 5.0));
break;
case 2:
index=(int)(((Math.random() * size) / 5.0) + ((size / 5.0) * 2.0));
break;
case 3:
index=(int)(((Math.random() * size) / 5.0) + ((size / 5.0) * 3.0));
break;
case 4:
index=(int)(((Math.random() * size) / 5.0) + ((size / 5.0) * 4.0));
break;
}
}
 while (index >= size);
return index;
}",0.7516679021497406
98783,"public Word getBestLink(){
  Word returnWord=null;
  int index;
  boolean good=false;
  while (good == false) {
    index=calcRandomIndex();
    if (links.isEmpty()) {
      return null;
    }
 else     if (getSingleLink(index).isEOS() && links.size() == 1) {
      return null;
    }
 else     if (!getSingleLink(index).isEOS()) {
      good=true;
      returnWord=getSingleLink(index);
      links.get(index).downRate();
      Collections.sort(this.links,new LinkComparator());
    }
  }
  return returnWord;
}","public Word getBestLink(){
  Word returnWord=null;
  int index;
  boolean good=false;
  while (!good) {
    index=calcRandomIndex();
    if (links.isEmpty()) {
      return null;
    }
 else     if (getSingleLink(index).isEOS() && links.size() == 1) {
      return null;
    }
 else     if (!getSingleLink(index).isEOS()) {
      good=true;
      returnWord=getSingleLink(index);
      links.get(index).downRate();
      Collections.sort(this.links,new LinkComparator());
    }
  }
  return returnWord;
}",0.9822834645669292
98784,"@Ignore @Test public void returnsEOSIfNextWordIsNull(){
  assertEquals(null,generator.getNextLink(java));
}","@Test public void returnsEOSIfNextWordIsNull(){
  assertEquals(null,generator.getNextLink(java));
}",0.9611650485436892
98785,"public boolean process(EntryStruct struct) throws IOException {
  String name=struct.name;
  boolean result=chain.process(struct);
  if (verbose) {
    if (result) {
      if (name.equals(struct.name)) {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ struct.name);
      }
    }
 else {
      System.err.println(""String_Node_Str"" + name);
    }
  }
  return result;
}","public boolean process(EntryStruct struct) throws IOException {
  String name=struct.name;
  boolean result=chain.process(struct);
  if (verbose) {
    if (result) {
      if (!name.equals(struct.name))       System.err.println(""String_Node_Str"" + name + ""String_Node_Str""+ struct.name);
    }
 else {
      System.err.println(""String_Node_Str"" + name);
    }
  }
  return result;
}",0.6838709677419355
98786,"public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  FieldVisitor fv=new FieldFixer(cv.visitField(access,name,rules.fixDesc(desc),fixSignature(signature,true),fixValue(value)));
  return (fv != null) ? new FieldFixer(fv) : null;
}","public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  FieldVisitor fv=cv.visitField(access,name,rules.fixDesc(desc),fixSignature(signature,true),fixValue(value));
  return (fv != null) ? new FieldFixer(fv) : null;
}",0.9702602230483272
98787,"public void run(String classPath,final PrintWriter pw) throws IOException {
  try {
    StringVisitor sv=new StringVisitor(){
      private String className;
      private boolean needName;
      public void visitStart(      String className){
        this.className=className;
        needName=true;
      }
      public void visitString(      String value,      int line){
        if (value.length() > 0) {
          if (needName) {
            pw.println(className.replace('/','.'));
            needName=false;
          }
          pw.print(""String_Node_Str"");
          if (line >= 0)           pw.print(line + ""String_Node_Str"");
          pw.print(IoUtils.escapeStringLiteral(value));
          pw.println();
        }
      }
      public void visitEnd(){
        pw.flush();
      }
    }
;
    StringReader stringReader=new StringReader(sv);
    ClassPathIterator cp=new ClassPathIterator(classPath);
    while (cp.hasNext()) {
      new ClassReader(cp.getInputStream(cp.next())).accept(stringReader,false);
    }
  }
 catch (  RuntimeIOException e) {
    throw (IOException)e.getCause();
  }
}","public void run(String classPath,PrintWriter pw) throws IOException {
  try {
    StringReader stringReader=new StringReader(new DumpStringVisitor(pw));
    ClassPathIterator cp=new ClassPathIterator(classPath);
    while (cp.hasNext()) {
      new ClassReader(cp.getInputStream(cp.next())).accept(stringReader,false);
    }
  }
 catch (  RuntimeIOException e) {
    throw (IOException)e.getCause();
  }
}",0.4635761589403973
98788,"public Pattern compile(String pattern){
  try {
    final RE re=new RE(pattern);
    return new Pattern(){
      public String replaceAll(      String value,      String replace){
        return re.substituteAll(value,replace,0,RE.REG_NO_INTERPOLATE);
      }
      public boolean matches(      String value){
        return re.isMatch(value);
      }
      public int groupCount(){
        return re.getNumSubs();
      }
      public Matcher getMatcher(      final String value){
        final REMatch match=re.getMatch(value,0);
        return new Matcher(){
          public boolean matches(){
            return re.isMatch(value);
          }
          public int start(){
            return match.getStartIndex();
          }
          public int end(){
            return match.getEndIndex();
          }
          public String group(          int index){
            return match.toString(index);
          }
        }
;
      }
      public String toString(){
        return re.toString();
      }
    }
;
  }
 catch (  final REException e) {
    throw new IllegalArgumentException(e.getMessage()){
      public Throwable getCause(){
        return e;
      }
    }
;
  }
}","public Pattern compile(String pattern){
  try {
    return new GnuPattern(new RE(pattern));
  }
 catch (  final REException e) {
    throw new IllegalArgumentException(e.getMessage()){
      public Throwable getCause(){
        return e;
      }
    }
;
  }
}",0.3106796116504854
98789,"private static boolean hasExtension(String name,String ext){
  int len=name.length();
  if (name.length() < ext.length())   return false;
  String actual=name.substring(name.length() - ext.length());
  return actual.equals(ext) || actual.equals(ext.toUpperCase());
}","private static boolean hasExtension(String name,String ext){
  if (name.length() < ext.length())   return false;
  String actual=name.substring(name.length() - ext.length());
  return actual.equals(ext) || actual.equals(ext.toUpperCase());
}",0.95069033530572
98790,"public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){
  checkDesc(desc);
}","public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){
  checkDesc(desc);
  checkSignature(signature);
}",0.896797153024911
98791,"public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  checkMethodDesc(desc);
  if (exceptions != null) {
    for (int i=0; i < exceptions.length; i++)     checkName(exceptions[i]);
  }
  return code;
}","public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  checkMethodDesc(desc);
  checkSignature(signature);
  if (exceptions != null) {
    for (int i=0; i < exceptions.length; i++)     checkName(exceptions[i]);
  }
  return code;
}",0.9463955637707948
98792,"public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  checkDesc(desc);
  return null;
}","public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  checkDesc(desc);
  checkSignature(signature);
  return null;
}",0.9016949152542372
98793,"private void checkMethodDesc(String methodDesc){
  Type[] args=Type.getArgumentTypes(methodDesc);
  for (int i=0; i < args.length; i++)   checkDesc(args[i].getDescriptor());
}","private void checkMethodDesc(String methodDesc){
  checkDesc(Type.getReturnType(methodDesc).getDescriptor());
  Type[] args=Type.getArgumentTypes(methodDesc);
  for (int i=0; i < args.length; i++)   checkDesc(args[i].getDescriptor());
}",0.851581508515815
98794,"public void visit(int version,int access,String name,String superName,String[] interfaces,String sourceFile){
  curName=name;
  curPathClass=new PathClass(source,curName);
}","public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){
  curName=name;
  curPathClass=new PathClass(source,curName);
  checkSignature(signature);
  checkName(superName);
  if (interfaces != null) {
    for (int i=0; i < interfaces.length; i++)     checkName(interfaces[i]);
  }
}",0.3992094861660079
98795,"public String fixSignature(String signature){
  return (signature != null) ? fixMethodDesc(signature,true) : signature;
}","public String fixSignature(String signature){
  if (signature == null)   return null;
  if (signature.charAt(0) == '(')   return fixMethodDesc(signature,true);
  return fixDesc(signature,true);
}",0.7088607594936709
98796,"public ClassHeaderReader(InputStream in) throws IOException {
  try {
    DataInputStream data=new DataInputStream(in);
    int magic=data.readInt();
    int minorVersion=data.readUnsignedShort();
    int majorVersion=data.readUnsignedShort();
    if (magic != 0xCAFEBABE)     throw new IOException(""String_Node_Str"");
    int constant_pool_count=data.readUnsignedShort();
    Map items=new TreeMap();
    for (int i=1; i < constant_pool_count; i++) {
      int tag=data.readUnsignedByte();
switch (tag) {
case 9:
case 10:
case 11:
case 3:
case 4:
case 12:
        skipFully(data,4);
      break;
case 5:
case 6:
    skipFully(data,8);
  i++;
break;
case 1:
items.put(new Integer(i),data.readUTF());
break;
case 7:
items.put(new Integer(i),new Integer(data.readUnsignedShort()));
break;
case 8:
skipFully(data,2);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + tag);
}
}
access=data.readUnsignedShort();
thisClass=readClass(data.readUnsignedShort(),items);
superClass=readClass(data.readUnsignedShort(),items);
int interfaces_count=data.readUnsignedShort();
interfaces=new String[interfaces_count];
for (int i=0; i < interfaces_count; i++) {
interfaces[i]=readClass(data.readUnsignedShort(),items);
}
}
  finally {
in.close();
}
}","public ClassHeaderReader(InputStream in) throws IOException {
  try {
    DataInputStream data=new DataInputStream(in);
    int magic=data.readInt();
    int minorVersion=data.readUnsignedShort();
    int majorVersion=data.readUnsignedShort();
    if (magic != 0xCAFEBABE)     throw new IOException(""String_Node_Str"");
    int constant_pool_count=data.readUnsignedShort();
    Map items=new TreeMap();
    for (int i=1; i < constant_pool_count; i++) {
      int tag=data.readUnsignedByte();
switch (tag) {
case 9:
case 10:
case 11:
case 3:
case 4:
case 12:
        skipFully(data,4);
      break;
case 5:
case 6:
    skipFully(data,8);
  i++;
break;
case 1:
items.put(new Integer(i),data.readUTF());
break;
case 7:
items.put(new Integer(i),new Integer(data.readUnsignedShort()));
break;
case 8:
skipFully(data,2);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + tag);
}
}
access=data.readUnsignedShort();
thisClass=readClass(data.readUnsignedShort(),items);
int superclassIndex=data.readUnsignedShort();
superClass=(superclassIndex == 0) ? null : readClass(superclassIndex,items);
int interfaces_count=data.readUnsignedShort();
interfaces=new String[interfaces_count];
for (int i=0; i < interfaces_count; i++) {
interfaces[i]=readClass(data.readUnsignedShort(),items);
}
}
  finally {
in.close();
}
}",0.9545277885736494
98797,"public InputStream getInputStream(Object obj) throws IOException {
  if (obj instanceof ZipEntry) {
    return zip.getInputStream((ZipEntry)obj);
  }
 else {
    return new BufferedInputStream(new FileInputStream((File)obj));
  }
}","public InputStream getInputStream(Object obj) throws IOException {
  if (obj instanceof ZipEntry) {
    return ((ZipFile)zipFiles.get(obj)).getInputStream((ZipEntry)obj);
  }
 else {
    return new BufferedInputStream(new FileInputStream((File)obj));
  }
}",0.9486652977412732
98798,"private void advance(){
  try {
    close();
    if (entries == null) {
      prevZip=zip;
      if (parts.size() == 0) {
        next=null;
        return;
      }
      String part=(String)parts.removeFirst();
      File file=new File(part);
      if (!file.isAbsolute())       file=new File(parent,part);
      int len=part.length();
      if (len >= 4) {
        String ext=part.substring(len - 4,len);
        if (ext.equalsIgnoreCase(""String_Node_Str"")) {
          zip=new JarFile(file);
        }
 else         if (ext.equalsIgnoreCase(""String_Node_Str"")) {
          zip=new ZipFile(file);
        }
 else {
          zip=null;
        }
        if (zip != null)         entries=zip.entries();
      }
      if (entries == null) {
        if (file.isDirectory()) {
          entries=findClasses(file);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + part);
        }
      }
    }
    boolean foundClass=false;
    while (entries.hasMoreElements()) {
      next=entries.nextElement();
      if (foundClass=isClassFile(getName(next)))       break;
    }
    if (!foundClass)     next=null;
    if (!entries.hasMoreElements())     entries=null;
  }
 catch (  IOException e) {
    throw new WrappedIOException(e);
  }
}","private void advance(){
  try {
    if (entries == null) {
      if (parts.size() == 0) {
        next=null;
        return;
      }
      zip=null;
      String part=(String)parts.removeFirst();
      File file=new File(part);
      if (!file.isAbsolute())       file=new File(parent,part);
      int len=part.length();
      if (len >= 4) {
        String ext=part.substring(len - 4,len);
        if (ext.equalsIgnoreCase(""String_Node_Str"")) {
          zip=new JarFile(file);
        }
 else         if (ext.equalsIgnoreCase(""String_Node_Str"")) {
          zip=new ZipFile(file);
        }
        if (zip != null)         entries=zip.entries();
      }
      if (entries == null) {
        if (file.isDirectory()) {
          entries=findClasses(file);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + part);
        }
      }
    }
    boolean foundClass=false;
    while (entries.hasMoreElements()) {
      next=entries.nextElement();
      if (foundClass=isClassFile(getName(next))) {
        if (zip != null)         zipFiles.put(next,zip);
        break;
      }
    }
    if (!foundClass) {
      entries=null;
      advance();
    }
  }
 catch (  IOException e) {
    throw new WrappedIOException(e);
  }
}",0.8187972919155715
98799,"public void close() throws IOException {
  if (prevZip != null) {
    prevZip.close();
    prevZip=null;
  }
}","public void close() throws IOException {
  if (zipFiles != null) {
    for (Iterator it=zipFiles.values().iterator(); it.hasNext(); ) {
      ((ZipFile)it.next()).close();
    }
  }
}",0.621160409556314
98800,"public ClassPathIterator(File parent,String classPath){
  this.parent=parent;
  StringTokenizer st=new StringTokenizer(classPath,""String_Node_Str"");
  while (st.hasMoreTokens())   parts.add(st.nextElement());
  advance();
}","public ClassPathIterator(File parent,String classPath){
  this.parent=parent;
  StringTokenizer st=new StringTokenizer(classPath,""String_Node_Str"");
  while (st.hasMoreTokens()) {
    parts.add(st.nextElement());
  }
  advance();
}",0.9823788546255506
98801,"private DepFind(String[] args) throws Exception {
  if (args.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final Set names=new HashSet();
  ClassVisitor gatherNamesVisitor=new NullClassVisitor(){
    public void visit(    int access,    String name,    String superName,    String[] interfaces,    String sourceFile){
      names.add(name);
    }
  }
;
  File curDir=new File(System.getProperty(""String_Node_Str""));
  ClassPathIterator cp=new ClassPathIterator(curDir,args[0]);
  while (cp.hasNext()) {
    Object cls=cp.next();
    new ClassReader(cp.getInputStream(cls)).accept(gatherNamesVisitor,true);
  }
  DepFindVisitor depFind=new DepFindVisitor(names);
  cp=new ClassPathIterator(curDir,args[1]);
  while (cp.hasNext()) {
    try {
      Object cls=cp.next();
      new ClassReader(cp.getInputStream(cls)).accept(depFind,true);
    }
 catch (    DepFindException e) {
      System.out.println(e.getClassName() + ""String_Node_Str"" + e.getDependency());
    }
  }
}","private DepFind(String[] args) throws Exception {
  if (args.length != 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  final Set names=new HashSet();
  ClassVisitor gatherNamesVisitor=new NullClassVisitor(){
    public void visit(    int access,    String name,    String superName,    String[] interfaces,    String sourceFile){
      names.add(name);
    }
  }
;
  File curDir=new File(System.getProperty(""String_Node_Str""));
  ClassPathIterator cp=new ClassPathIterator(curDir,args[0]);
  while (cp.hasNext()) {
    Object cls=cp.next();
    new ClassReader(cp.getInputStream(cls)).accept(gatherNamesVisitor,true);
  }
  cp.close();
  DepFindVisitor depFind=new DepFindVisitor(names);
  cp=new ClassPathIterator(curDir,args[1]);
  while (cp.hasNext()) {
    try {
      Object cls=cp.next();
      new ClassReader(cp.getInputStream(cls)).accept(depFind,true);
    }
 catch (    DepFindException e) {
      System.out.println(e.getClassName() + ""String_Node_Str"" + e.getDependency()+ ""String_Node_Str"");
    }
  }
  cp.close();
}",0.9772617319787132
98802,"/** 
 * Bootstrapping javadoc application to save users having to remember all the arguments.
 * @param args the path to locate the source code and the path to the compiled classes
 * @throws IOException          if there are problems traversing the source code hierarchy
 * @throws InterruptedException if the spawned javadoc process is interrupted
 */
public static void main(String[] args) throws IOException, InterruptedException {
  String sourcePath=args[0];
  String classPath=args[1];
  List<String> command=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + classPath,""String_Node_Str"",System.getProperty(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",DomainObjectDocletCleaner.class.getCanonicalName());
  if (args.length > 2) {
    Collections.addAll(command,Arrays.copyOfRange(args,2,args.length));
  }
  command.addAll(listFileNames(new File(sourcePath)));
  System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(command) + ""String_Node_Str"");
  Process process=Runtime.getRuntime().exec(command.toArray(new String[command.size()]));
  BufferedReader processOutput=new BufferedReader(new InputStreamReader(process.getInputStream()));
  BufferedReader processError=new BufferedReader(new InputStreamReader(process.getErrorStream()));
  String stdout=""String_Node_Str"", stderr=null;
  while (stdout != null || stderr != null) {
    stdout=processOutput.readLine();
    stderr=processError.readLine();
    if (stdout != null)     System.out.println(""String_Node_Str"" + stdout);
    if (stderr != null)     System.out.println(""String_Node_Str"" + stderr);
  }
  process.destroy();
  if (process.exitValue() == 0) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(args));
  }
}","/** 
 * Bootstrapping javadoc application to save users having to remember all the arguments.
 * @param args the path to locate the source code and the path to the compiled classes
 * @throws IOException          if there are problems traversing the source code hierarchy
 * @throws InterruptedException if the spawned javadoc process is interrupted
 */
public static void main(String[] args) throws IOException, InterruptedException {
  String sourcePath=args[0];
  String classPath=args[1];
  List<String> command=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + classPath,""String_Node_Str"",System.getProperty(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",DomainObjectDocletCleaner.class.getCanonicalName());
  if (args.length > 2) {
    Collections.addAll(command,Arrays.copyOfRange(args,2,args.length));
  }
  command.addAll(listFileNames(new File(sourcePath)));
  Process process=Runtime.getRuntime().exec(command.toArray(new String[command.size()]));
  BufferedReader processOutput=new BufferedReader(new InputStreamReader(process.getInputStream()));
  BufferedReader processError=new BufferedReader(new InputStreamReader(process.getErrorStream()));
  String stdout=""String_Node_Str"", stderr=null;
  while (stdout != null || stderr != null) {
    stdout=processOutput.readLine();
    stderr=processError.readLine();
    if (stdout != null)     System.out.println(""String_Node_Str"" + stdout);
    if (stderr != null)     System.out.println(""String_Node_Str"" + stderr);
  }
  process.destroy();
  if (process.exitValue() == 0) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(args));
  }
}",0.971335857220119
98803,"/** 
 * Bootstrapping javadoc application to save users having to remember all the arguments.
 * @param args the path to locate the source code and the path to the compiled classes
 * @throws IOException          if there are problems traversing the source code hierarchy
 * @throws InterruptedException if the spawned javadoc process is interrupted
 */
public static void main(String[] args) throws IOException, InterruptedException {
  String sourcePath=args[0];
  String classPath=args[1];
  List<String> command=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + classPath,""String_Node_Str"",System.getProperty(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",DomainObjectDocletCleaner.class.getCanonicalName());
  if (args.length > 2) {
    Collections.addAll(command,Arrays.copyOfRange(args,2,args.length));
  }
  command.addAll(listFileNames(new File(sourcePath)));
  Process process=Runtime.getRuntime().exec(command.toArray(new String[command.size()]));
  BufferedReader processOutput=new BufferedReader(new InputStreamReader(process.getInputStream()));
  BufferedReader processError=new BufferedReader(new InputStreamReader(process.getErrorStream()));
  String line;
  while ((line=processOutput.readLine()) != null) {
    System.out.println(""String_Node_Str"" + line);
  }
  while ((line=processError.readLine()) != null) {
    System.out.println(""String_Node_Str"" + line);
  }
  process.destroy();
  if (process.exitValue() == 0) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(args));
  }
}","/** 
 * Bootstrapping javadoc application to save users having to remember all the arguments.
 * @param args the path to locate the source code and the path to the compiled classes
 * @throws IOException          if there are problems traversing the source code hierarchy
 * @throws InterruptedException if the spawned javadoc process is interrupted
 */
public static void main(String[] args) throws IOException, InterruptedException {
  String sourcePath=args[0];
  String classPath=args[1];
  List<String> command=Lists.newArrayList(""String_Node_Str"",""String_Node_Str"",System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + classPath,""String_Node_Str"",System.getProperty(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",DomainObjectDocletCleaner.class.getCanonicalName());
  if (args.length > 2) {
    Collections.addAll(command,Arrays.copyOfRange(args,2,args.length));
  }
  command.addAll(listFileNames(new File(sourcePath)));
  System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(command) + ""String_Node_Str"");
  Process process=Runtime.getRuntime().exec(command.toArray(new String[command.size()]));
  BufferedReader processOutput=new BufferedReader(new InputStreamReader(process.getInputStream()));
  BufferedReader processError=new BufferedReader(new InputStreamReader(process.getErrorStream()));
  String stdout=""String_Node_Str"", stderr=null;
  while (stdout != null || stderr != null) {
    stdout=processOutput.readLine();
    stderr=processError.readLine();
    if (stdout != null)     System.out.println(""String_Node_Str"" + stdout);
    if (stderr != null)     System.out.println(""String_Node_Str"" + stderr);
  }
  process.destroy();
  if (process.exitValue() == 0) {
    System.out.println(""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(args));
  }
}",0.8684064408661855
98804,"protected String properTypeName(FieldDoc field){
  String fieldType=field.type().simpleTypeName();
  if (field.type().asParameterizedType() != null) {
    fieldType+=""String_Node_Str"";
    for (    Type type : field.type().asParameterizedType().typeArguments()) {
      fieldType+=(type.asClassDoc().containingPackage().equals(field.containingPackage()) ? type.simpleTypeName() : type.qualifiedTypeName()) + ""String_Node_Str"";
    }
    fieldType=fieldType.substring(0,fieldType.length() - 2);
    fieldType+=""String_Node_Str"";
  }
  if (field.type().isPrimitive() || field.type().asClassDoc().containingPackage().name().equals(""String_Node_Str"") || field.type().asClassDoc().containingPackage().equals(field.containingClass().containingPackage())|| imports.contains(""String_Node_Str"" + field.type().qualifiedTypeName() + ""String_Node_Str"")|| imports.contains(""String_Node_Str"" + field.type().asClassDoc().containingPackage().name() + ""String_Node_Str""+ ""String_Node_Str"")) {
    if (field.type().asClassDoc().containingClass() != null) {
      return field.type().asClassDoc().containingClass().simpleTypeName() + ""String_Node_Str"" + field.type().simpleTypeName();
    }
    return field.type().simpleTypeName();
  }
 else {
    return field.type().qualifiedTypeName();
  }
}","protected String properTypeName(FieldDoc field){
  String fieldType=field.type().simpleTypeName();
  if (field.type().asParameterizedType() != null) {
    fieldType+=""String_Node_Str"";
    for (    Type type : field.type().asParameterizedType().typeArguments()) {
      fieldType+=(type.asClassDoc().containingPackage().equals(field.containingPackage()) ? type.simpleTypeName() : type.qualifiedTypeName()) + ""String_Node_Str"";
    }
    fieldType=fieldType.substring(0,fieldType.length() - 2);
    fieldType+=""String_Node_Str"";
  }
  if (field.type().isPrimitive() || field.type().asClassDoc().containingPackage().name().equals(""String_Node_Str"")) {
    return field.type().simpleTypeName();
  }
 else   if (field.type().asClassDoc().containingPackage().equals(field.containingClass().containingPackage()) || imports.contains(""String_Node_Str"" + field.type().qualifiedTypeName() + ""String_Node_Str"") || imports.contains(""String_Node_Str"" + field.type().asClassDoc().containingPackage().name() + ""String_Node_Str""+ ""String_Node_Str"")) {
    if (field.type().asClassDoc().containingClass() != null) {
      return field.type().asClassDoc().containingClass().simpleTypeName() + ""String_Node_Str"" + field.type().simpleTypeName();
    }
    return field.type().simpleTypeName();
  }
 else {
    return field.type().qualifiedTypeName();
  }
}",0.5612557427258805
98805,"private void storeImage(String url,Bitmap bitmap){
  StoredBitmap storedBitmap=new StoredBitmap(null,url);
  int index=mRecentImages.indexOf(storedBitmap);
  if (index != -1) {
    storedBitmap=mRecentImages.get(index);
    mRecentImages.remove(index);
  }
 else {
    storedBitmap.mBitmap=bitmap;
  }
  while (mRecentImages.size() >= mMaxStoredImages) {
    mRecentImages.removeLast();
  }
  mRecentImages.addFirst(new StoredBitmap(bitmap,url));
}","private void storeImage(String url,Bitmap bitmap){
synchronized (mRecentImages) {
    StoredBitmap storedBitmap=new StoredBitmap(null,url);
    int index=mRecentImages.indexOf(storedBitmap);
    if (index != -1) {
      storedBitmap=mRecentImages.get(index);
      mRecentImages.remove(index);
    }
 else {
      storedBitmap.mBitmap=bitmap;
    }
    while (mRecentImages.size() >= mMaxStoredImages) {
      mRecentImages.removeLast();
    }
    mRecentImages.addFirst(new StoredBitmap(bitmap,url));
  }
}",0.938219895287958
98806,"public void run(){
  if (mBitmap != null) {
    for (    ImageView image : mImageViews) {
      if (image.getTag(R.id.image_tag).equals(mUrl)) {
        displayImage(image,mBitmap,mUrl);
      }
    }
  }
 else {
    if (mController != null) {
      for (      ImageView image : mImageViews) {
        mController.fail(image);
      }
    }
  }
synchronized (mLoadingImages) {
    mLoadingImages.remove(mUrl);
  }
}","public void run(){
  if (mBitmap != null) {
    for (    ImageView image : mImageViews) {
      if (image.getTag(R.id.image_tag).equals(mUrl)) {
        displayImage(image,mBitmap,mUrl);
      }
    }
  }
 else {
    if (mController != null) {
      for (      ImageView image : mImageViews) {
        if (image.getTag(R.id.image_tag).equals(mUrl)) {
          mController.fail(image);
        }
      }
    }
  }
synchronized (mLoadingImages) {
    mLoadingImages.remove(mUrl);
  }
}",0.9232480533926584
98807,"/** 
 * Parses the cleaned Timetable data string into a list of Section objects
 * @param cleanedTimetable the cleaned Timetable data string
 * @return the List of Sections
 */
public List<Section> parseData(String[] cleanedTimetable){
  Section currentSection;
  List<Section> sectionList=new LinkedList<Section>();
  int index=0;
  while ((index=nextCRN(cleanedTimetable,index)) != -1) {
    currentSection=new Section();
    parseCRN(cleanedTimetable,index++,currentSection);
    parseCourse(cleanedTimetable,index++,currentSection);
    parseTitle(cleanedTimetable,index++,currentSection);
    parseType(cleanedTimetable,index++,currentSection);
    parseHrs(cleanedTimetable,index++,currentSection);
    parseCapacity(cleanedTimetable,index++,currentSection);
    parseInstructor(cleanedTimetable,index++,currentSection);
    if (isARR(cleanedTimetable,index)) {
      index++;
      index++;
      parseLocation(cleanedTimetable,index++,currentSection);
      parseExam(cleanedTimetable,index++,currentSection);
    }
 else {
      parseDays(cleanedTimetable,index++,currentSection);
      parseBegin(cleanedTimetable,index++,currentSection);
      parseEnd(cleanedTimetable,index++,currentSection);
      parseLocation(cleanedTimetable,index++,currentSection);
      parseExam(cleanedTimetable,index++,currentSection);
    }
    if (isAdditionalTime(cleanedTimetable,index)) {
      index++;
      AdditionalTime additional=currentSection.addAdditionalTime();
      parseDays(cleanedTimetable,index++,additional);
      parseBegin(cleanedTimetable,index++,additional);
      parseEnd(cleanedTimetable,index++,additional);
      parseLocation(cleanedTimetable,index++,additional);
    }
    sectionList.add(currentSection);
  }
  return sectionList;
}","/** 
 * Parses the cleaned Timetable data string into a list of Section objects
 * @param cleanedTimetable the cleaned Timetable data string
 * @return the List of Sections
 */
public List<Section> parseData(String[] cleanedTimetable){
  Section currentSection;
  List<Section> sectionList=new LinkedList<Section>();
  int index=0;
  int nextCRNIndex;
  while ((index=nextCRN(cleanedTimetable,index)) != -1) {
    currentSection=new Section();
    nextCRNIndex=nextCRN(cleanedTimetable,index + 1);
    parseCRN(cleanedTimetable,index++,currentSection);
    parseCourse(cleanedTimetable,index++,currentSection);
    parseTitle(cleanedTimetable,index++,currentSection);
    parseType(cleanedTimetable,index++,currentSection);
    parseHrs(cleanedTimetable,index++,currentSection);
    parseCapacity(cleanedTimetable,index++,currentSection);
    parseInstructor(cleanedTimetable,index++,currentSection);
    if (isARR(cleanedTimetable,index)) {
      index++;
      index++;
      parseLocation(cleanedTimetable,index++,currentSection);
      parseExam(cleanedTimetable,index++,currentSection);
    }
 else {
      parseDays(cleanedTimetable,index++,currentSection);
      parseBegin(cleanedTimetable,index++,currentSection);
      parseEnd(cleanedTimetable,index++,currentSection);
      parseLocation(cleanedTimetable,index++,currentSection);
      parseExam(cleanedTimetable,index++,currentSection);
    }
    if (isAdditionalTime(cleanedTimetable,index)) {
      index++;
      AdditionalTime additional=currentSection.addAdditionalTime();
      parseDays(cleanedTimetable,index++,additional);
      parseBegin(cleanedTimetable,index++,additional);
      parseEnd(cleanedTimetable,index++,additional);
      parseLocation(cleanedTimetable,index++,additional);
    }
    sectionList.add(currentSection);
    if (nextCRNIndex < index && nextCRNIndex != -1) {
      index=nextCRNIndex;
    }
  }
  return sectionList;
}",0.9069134458356016
98808,"public boolean isARR(String[] cleanedTimetable,int index){
  String str=cleanedTimetable[index];
  if (str.equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isARR(String[] cleanedTimetable,int index){
  String str=cleanedTimetable[index];
  if (str.contains(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}",0.9484536082474226
98809,"/** 
 * Parses a time string into the Time object.
 * @param time the time string (ex. 2:20PM)
 * @return the Time object representing the specified time
 */
public Time parseTime(String time){
  String split[]=time.split(""String_Node_Str"");
  int hour, minute;
  hour=Integer.parseInt(split[0]);
  minute=Integer.parseInt(split[1]);
  String meridiem=time.substring(time.length() - 2);
  if (meridiem.equalsIgnoreCase(""String_Node_Str"")) {
    hour%=12;
    hour+=12;
  }
  Time timeObj=new Time(hour,minute);
  return timeObj;
}","/** 
 * Parses a time string into the Time object.
 * @param time the time string (ex. 2:20PM)
 * @return the Time object representing the specified time
 */
public Time parseTime(String time){
  String split[]=time.split(""String_Node_Str"");
  int hour=0, minute=0;
  try {
    hour=Integer.parseInt(split[0]);
    minute=Integer.parseInt(split[1]);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
  String meridiem=time.substring(time.length() - 2);
  if (meridiem.equalsIgnoreCase(""String_Node_Str"")) {
    hour%=12;
    hour+=12;
  }
  Time timeObj=new Time(hour,minute);
  return timeObj;
}",0.9166666666666666
98810,"public static void main(String[] args){
  TimetableLibrary tl=new TimetableLibrary(timetableURL);
  List<Section> sections;
  sections=tl.getSections(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  System.out.println(sections.size());
  for (  Section s : sections) {
    System.out.println(s.getCourse() + ""String_Node_Str"" + s.getInstructor()+ ""String_Node_Str""+ s.getDays()+ ""String_Node_Str""+ s.getBegin()+ ""String_Node_Str""+ s.getEnd());
  }
}","public static void main(String[] args){
  TimetableLibrary tl=new TimetableLibrary(timetableURL);
  List<Section> sections;
  sections=tl.getSections(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  System.out.println(sections.size());
  for (  Section s : sections) {
    System.out.println(s.getCourse() + ""String_Node_Str"" + s.getInstructor()+ ""String_Node_Str""+ s.getDays()+ ""String_Node_Str""+ s.getBegin()+ ""String_Node_Str""+ s.getEnd()+ ""String_Node_Str""+ s.getExam());
  }
}",0.9662447257383966
98811,"private CountDownTimer inicializaContador(){
  return new CountDownTimer(tempoInicial,1000){
    public void onTick(    long tempoMiliseconds){
      if (!marcouFim) {
        Long tempoReal=(tempoMiliseconds / 1000);
        contadorTextView.setText(""String_Node_Str"" + tempoReal + ""String_Node_Str"");
        tempoRestante=tempoReal;
      }
    }
    public void onFinish(){
      Servidor.instance().encerrarPartida(getTempoInicial());
      if (!marcouFim) {
        tempoRestante=0L;
        contadorTextView.setText(""String_Node_Str"");
        jogo.setTempo(tempoRestante);
        mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
      }
    }
  }
.start();
}","private CountDownTimer inicializaContador(){
  return new CountDownTimer(configuracao.tempo(),1000){
    public void onTick(    long tempoMiliseconds){
      if (!marcouFim) {
        Long tempoReal=(tempoMiliseconds / 1000);
        contadorTextView.setText(""String_Node_Str"" + tempoReal + ""String_Node_Str"");
        tempoRestante=tempoReal;
      }
    }
    public void onFinish(){
      Servidor.instance().encerrarPartida(configuracao.tempo());
      if (!marcouFim) {
        tempoRestante=0L;
        contadorTextView.setText(""String_Node_Str"");
        jogador.setTempo(tempoRestante);
        mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
      }
    }
  }
.start();
}",0.948604992657856
98812,"public void onClick(View v){
  Intent botaoSairIntent=new Intent(getApplicationContext(),AdedonhaActivity.class);
  Servidor.instance().encerrarPartida(getTempoInicial());
  finalizaVariaveisJogo();
  startActivity(botaoSairIntent);
  finish();
}","public void onClick(View v){
  Intent botaoSairIntent=new Intent(getApplicationContext(),AdedonhaActivity.class);
  Servidor.instance().encerrarPartida(configuracao.tempo());
  finalizaVariaveisJogo();
  startActivity(botaoSairIntent);
  finish();
}",0.9535353535353536
98813,"private OnClickListener confirmarDialogListener(final Button botaoItem){
  return new OnClickListener(){
    public void onClick(    View v){
      String valorInserido=valorItem.getText().toString();
      if (entradaValida(valorInserido)) {
        mapaResultados.put(botaoItem.getText().toString(),valorInserido);
        botaoItem.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF,0xff0000ff));
        dialog.dismiss();
      }
    }
    private boolean entradaValida(    String valorInserido){
      return valorInserido != null && !valorInserido.trim().equals(""String_Node_Str"");
    }
  }
;
}","private OnClickListener confirmarDialogListener(final Button botaoItem){
  return new OnClickListener(){
    public void onClick(    View v){
      String valorInserido=valorItem.getText().toString();
      if (entradaValida(valorInserido)) {
        jogador.putResultado(botaoItem.getText().toString(),valorInserido);
        botaoItem.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF,0xff0000ff));
        dialog.dismiss();
      }
    }
    private boolean entradaValida(    String valorInserido){
      return valorInserido != null && !valorInserido.trim().equals(""String_Node_Str"");
    }
  }
;
}",0.985413290113452
98814,"private void carregaLetra(){
  List<Letra> letras=jogo.getLetrasDesejadas();
  letra=retornaLetra(letras).getDescricao();
}","private void carregaLetra(){
  letra=this.configuracao.letraDaPartida().getDescricao();
}",0.6226415094339622
98815,"private ScrollView carregaBotoesItens(){
  List<Letra> itensDesejados=jogo.getItensDesejados();
  ScrollView layout=(ScrollView)View.inflate(this,R.layout.page_jogo_adedonha,null);
  LinearLayout vTblRow=(LinearLayout)layout.findViewById(R.id.group_itens_adedonha);
  for (int i=0; i < itensDesejados.size(); i++) {
    Button botaoItem=new Button(this);
    botaoItem.setVisibility(Button.VISIBLE);
    botaoItem.setText(itensDesejados.get(i).getDescricao());
    botaoItem.setTextSize(24);
    botaoItem.setLayoutParams(new TableRow.LayoutParams(LARGURA_CAIXINHA,ALTURA_CAIXINHA));
    vTblRow.addView(botaoItem);
    listaBotoesItens.add(botaoItem);
  }
  addOnClickListenerBotoes();
  return layout;
}","private ScrollView carregaBotoesItens(){
  List<Letra> itensDesejados=this.configuracao.itensDesejados();
  ScrollView layout=(ScrollView)View.inflate(this,R.layout.page_jogo_adedonha,null);
  LinearLayout vTblRow=(LinearLayout)layout.findViewById(R.id.group_itens_adedonha);
  for (int i=0; i < itensDesejados.size(); i++) {
    Button botaoItem=new Button(this);
    botaoItem.setVisibility(Button.VISIBLE);
    botaoItem.setText(itensDesejados.get(i).getDescricao());
    botaoItem.setTextSize(24);
    botaoItem.setLayoutParams(new TableRow.LayoutParams(LARGURA_CAIXINHA,ALTURA_CAIXINHA));
    vTblRow.addView(botaoItem);
    listaBotoesItens.add(botaoItem);
  }
  addOnClickListenerBotoes();
  return layout;
}",0.9816901408450704
98816,"private OnClickListener botaoSairListener(){
  return new OnClickListener(){
    public void onClick(    View v){
      Intent botaoSairIntent=new Intent(getApplicationContext(),AdedonhaActivity.class);
      Servidor.instance().encerrarPartida(getTempoInicial());
      finalizaVariaveisJogo();
      startActivity(botaoSairIntent);
      finish();
    }
  }
;
}","private OnClickListener botaoSairListener(){
  return new OnClickListener(){
    public void onClick(    View v){
      Intent botaoSairIntent=new Intent(getApplicationContext(),AdedonhaActivity.class);
      Servidor.instance().encerrarPartida(configuracao.tempo());
      finalizaVariaveisJogo();
      startActivity(botaoSairIntent);
      finish();
    }
  }
;
}",0.7791495198902606
98817,"private void recuperaIntent(){
  Intent intent=getIntent();
  jogo=(Jogo)intent.getSerializableExtra(""String_Node_Str"");
  setTempoInicial(intent.getLongExtra(""String_Node_Str"",120000L));
}","private void recuperaIntent(){
  Intent intent=getIntent();
  this.configuracao=(ConfiguracaoParatida)intent.getSerializableExtra(ConfiguracaoParatida.CONFIGURACAO);
  this.jogador=(Jogador)intent.getSerializableExtra(Jogador.JOGADOR);
}",0.4929577464788732
98818,"private void atualizaNomeJogador(){
  nomeJogadorTextView=(TextView)findViewById(R.id.text_view_jogador_adedonha);
  nomeJogadorTextView.setText(""String_Node_Str"" + jogo.getNomeJogador());
  nomeJogadorTextView.setFocusableInTouchMode(true);
  nomeJogadorTextView.requestFocus();
}","private void atualizaNomeJogador(){
  nomeJogadorTextView=(TextView)findViewById(R.id.text_view_jogador_adedonha);
  nomeJogadorTextView.setText(""String_Node_Str"" + this.jogador.nome());
  nomeJogadorTextView.setFocusableInTouchMode(true);
  nomeJogadorTextView.requestFocus();
}",0.9464285714285714
98819,"public void onFinish(){
  Servidor.instance().encerrarPartida(getTempoInicial());
  if (!marcouFim) {
    tempoRestante=0L;
    contadorTextView.setText(""String_Node_Str"");
    jogo.setTempo(tempoRestante);
    mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
  }
}","public void onFinish(){
  Servidor.instance().encerrarPartida(configuracao.tempo());
  if (!marcouFim) {
    tempoRestante=0L;
    contadorTextView.setText(""String_Node_Str"");
    jogador.setTempo(tempoRestante);
    mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
  }
}",0.9309090909090908
98820,"private OnClickListener botaoVerificarListener(){
  return new OnClickListener(){
    public void onClick(    View v){
      Servidor.instance().encerrarPartida(getTempoInicial());
      finalizaVariaveisJogo();
      mostraDialogSairJogo(msgFimJogo(),listenerSair());
    }
  }
;
}","private OnClickListener botaoVerificarListener(){
  return new OnClickListener(){
    public void onClick(    View v){
      Servidor.instance().encerrarPartida(configuracao.tempo());
      finalizaVariaveisJogo();
      mostraDialogSairJogo(msgFimJogo(),listenerSair());
    }
  }
;
}",0.9559082892416224
98821,"public void configurarRespostas(){
  marcouFim=true;
  contadorTextView.setText(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tempoRestante);
  String nivelJogo=jogo.getNivelString();
  User jogador=new User(jogo.getNomeJogador(),0,tempoRestante,TIPO_ADEDONHA);
  intentRespostas.putExtra(""String_Node_Str"",jogador);
  intentRespostas.putExtra(""String_Node_Str"",tempoRestante);
  intentRespostas.putExtra(""String_Node_Str"",nivelJogo);
  intentRespostas.putExtra(""String_Node_Str"",letra);
  intentRespostas.putExtra(""String_Node_Str"",mapaResultados);
  mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
}","public void configurarRespostas(){
  marcouFim=true;
  contadorTextView.setText(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + tempoRestante);
  intentRespostas.putExtra(Jogador.JOGADOR,this.jogador);
  intentRespostas.putExtra(ConfiguracaoParatida.CONFIGURACAO,this.configuracao);
  mostraDialogSairJogo(msgFimJogo(),fimDeJogoListener());
}",0.4678243105209397
98822,"public String msgFimJogo(){
  return ""String_Node_Str"" + ""String_Node_Str"" + jogo.getNomeJogador() + ""String_Node_Str""+ tempoRestante+ ""String_Node_Str"";
}","public String msgFimJogo(){
  return ""String_Node_Str"" + ""String_Node_Str"" + this.jogador.nome() + ""String_Node_Str""+ tempoRestante+ ""String_Node_Str"";
}",0.9285714285714286
98823,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.pre_jogo_page);
  contadorTextView=(TextView)findViewById(R.id.pre_jogo_contador);
  setContador(inicializaContador());
  Intent intent=getIntent();
  jogo=(Jogo)intent.getSerializableExtra(""String_Node_Str"");
  tempoDesejado=intent.getLongExtra(""String_Node_Str"",180000);
  preJogoIntent=new Intent(PreJogoAdedonhaActivity.this,JogoAdedonhaActivity.class);
  preJogoIntent.putExtra(""String_Node_Str"",jogo);
  preJogoIntent.putExtra(""String_Node_Str"",tempoDesejado);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.pre_jogo_page);
  contadorTextView=(TextView)findViewById(R.id.pre_jogo_contador);
  setContador(inicializaContador());
  Intent intent=getIntent();
  ConfiguracaoParatida configuracao=(ConfiguracaoParatida)intent.getSerializableExtra(ConfiguracaoParatida.CONFIGURACAO);
  Jogador jogador=(Jogador)intent.getSerializableExtra(Jogador.JOGADOR);
  this.preJogoIntent=new Intent(PreJogoAdedonhaActivity.this,JogoAdedonhaActivity.class);
  this.preJogoIntent.putExtra(Jogador.JOGADOR,jogador);
  this.preJogoIntent.putExtra(ConfiguracaoParatida.CONFIGURACAO,configuracao);
}",0.6186046511627907
98824,"@SuppressWarnings({""String_Node_Str""}) @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.page_conferir_adedonha);
  Intent intent=getIntent();
  setLetraJogo(intent.getStringExtra(""String_Node_Str""));
  respostas=(HashMap<String,String>)intent.getSerializableExtra(""String_Node_Str"");
  ScrollView layout=carregaRespostas();
  System.out.println(""String_Node_Str"" + respostas.size());
  User jogador=(User)intent.getSerializableExtra(""String_Node_Str"");
  tempoRestante=intent.getLongExtra(""String_Node_Str"",0L);
  setContentView(layout);
  apresentaDadosJogador(jogador);
  inicializaBotaoVerificado();
}","@SuppressWarnings({""String_Node_Str""}) @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.page_conferir_adedonha);
  Intent intent=getIntent();
  this.configuracao=(ConfiguracaoParatida)intent.getSerializableExtra(ConfiguracaoParatida.CONFIGURACAO);
  this.jogador=(Jogador)intent.getSerializableExtra(Jogador.JOGADOR);
  ScrollView layout=carregaRespostas();
  setContentView(layout);
  apresentaDadosJogador();
  inicializaBotaoVerificado();
}",0.5362198168193172
98825,"private ScrollView carregaRespostas(){
  ScrollView layout=(ScrollView)View.inflate(this,R.layout.page_conferir_adedonha,null);
  LinearLayout vTblRow=(LinearLayout)layout.findViewById(R.id.group_respostas_adedonha);
  List<String> itensList=new ArrayList<String>();
  Set<String> itens=respostas.keySet();
  for (  String iten : itens) {
    itensList.add(iten);
  }
  List<String> valoresList=new ArrayList<String>();
  Collection<String> valores=(Collection<String>)respostas.values();
  for (  String valor : valores) {
    valoresList.add(valor);
  }
  for (int i=0; i < respostas.size(); i++) {
    TextView resultadoTextView=new TextView(this);
    resultadoTextView.setText(itensList.get(i) + ""String_Node_Str"" + valoresList.get(i));
    resultadoTextView.setTextAppearance(getApplicationContext(),R.style.negrito);
    vTblRow.addView(resultadoTextView);
  }
  return layout;
}","private ScrollView carregaRespostas(){
  ScrollView layout=(ScrollView)View.inflate(this,R.layout.page_conferir_adedonha,null);
  LinearLayout vTblRow=(LinearLayout)layout.findViewById(R.id.group_respostas_adedonha);
  List<String> itensList=new ArrayList<String>();
  Set<String> itens=jogador.resultado().keySet();
  for (  String iten : itens) {
    itensList.add(iten);
  }
  List<String> valoresList=new ArrayList<String>();
  Collection<String> valores=(Collection<String>)jogador.resultado().values();
  for (  String valor : valores) {
    valoresList.add(valor);
  }
  for (int i=0; i < jogador.resultado().size(); i++) {
    TextView resultadoTextView=new TextView(this);
    resultadoTextView.setText(itensList.get(i) + ""String_Node_Str"" + valoresList.get(i));
    resultadoTextView.setTextAppearance(getApplicationContext(),R.style.negrito);
    vTblRow.addView(resultadoTextView);
  }
  return layout;
}",0.95338512763596
98826,"private void apresentaDadosJogador(User jogador){
  jogador.setPointing(pontos);
  TextView nomeText=(TextView)findViewById(R.id.saida_jogador_adedonha);
  nomeText.setText(""String_Node_Str"" + jogador.getUserName());
  TextView tempoText=(TextView)findViewById(R.id.saida_tempo_adedonha);
  tempoText.setText(""String_Node_Str"" + tempoRestante + ""String_Node_Str"");
  TextView pontuacao=(TextView)findViewById(R.id.pontos_jogador_adedonha);
  pontuacao.setText(""String_Node_Str"" + jogador.getPointing());
  TextView letraText=(TextView)findViewById(R.id.saida_letra_adedonha);
  letraText.setText(""String_Node_Str"" + letraJogo);
}","private void apresentaDadosJogador(){
  TextView nomeText=(TextView)findViewById(R.id.saida_jogador_adedonha);
  nomeText.setText(""String_Node_Str"" + this.jogador.nome());
  TextView tempoText=(TextView)findViewById(R.id.saida_tempo_adedonha);
  tempoText.setText(""String_Node_Str"" + this.jogador.tempo() + ""String_Node_Str"");
  TextView pontuacao=(TextView)findViewById(R.id.pontos_jogador_adedonha);
  pontuacao.setText(""String_Node_Str"" + this.jogador.pontuacao());
  TextView letraText=(TextView)findViewById(R.id.saida_letra_adedonha);
  letraText.setText(""String_Node_Str"" + this.configuracao.letraDaPartida());
}",0.8878205128205128
98827,"private void conecte(BluetoothSocket socket,Protocolo handle){
  ct=new ThreadConectada(socket,handle);
  ct.start();
}","private void conecte(BluetoothSocket socket,Protocolo handle){
  threadConectada=new ThreadConectada(socket,handle);
  threadConectada.start();
}",0.9015151515151516
98828,"public ThreadConectada threadConectada(){
  return ct;
}","public ThreadConectada threadConectada(){
  return threadConectada;
}",0.896
98829,"public void run(){
  Log.i(TAG,""String_Node_Str"");
  setName(""String_Node_Str"");
  try {
    Log.d(TAG,""String_Node_Str"");
    mmSocket.connect();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    cancel();
  }
  conecte(mmSocket,handle);
  return;
}","public void run(){
  Log.i(TAG,""String_Node_Str"");
  setName(""String_Node_Str"");
  try {
    Log.d(TAG,""String_Node_Str"");
    clienteSocket.connect();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    cancelarConexao();
  }
  conecte(clienteSocket,handle);
  return;
}",0.9570747217806042
98830,"public Cliente(ConectandoCliente conecandoCliente,BluetoothDevice device,Protocolo handle){
  mmDevice=device;
  this.handle=handle;
  this.conecandoCliente=conecandoCliente;
  BluetoothSocket tmp=null;
  try {
    tmp=device.createRfcommSocketToServiceRecord(MY_UUID);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  mmSocket=tmp;
}","public Cliente(ConectandoCliente conectandoClienteActivity,BluetoothDevice device,Protocolo handle){
  mmDevice=device;
  this.handle=handle;
  this.conectandoClienteActivity=conectandoClienteActivity;
  BluetoothSocket tmp=null;
  try {
    tmp=device.createRfcommSocketToServiceRecord(MY_UUID);
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  clienteSocket=tmp;
}",0.8475935828877005
98831,"private synchronized void execute(byte[] buffer,int operacao){
  Object obj=deserialize(buffer);
switch (operacao) {
case OPERACAO_CONFIGURACOES_DA_PARTIDA:
    Log.d(TAG,""String_Node_Str"");
  Jogo configuracaoesDaPartida=(Jogo)obj;
Log.d(TAG,""String_Node_Str"" + configuracaoesDaPartida.getNivel());
break;
default :
Log.e(TAG,""String_Node_Str"");
break;
}
}","private synchronized void execute(byte[] buffer,int operacao){
  Object obj=deserialize(buffer);
switch (operacao) {
case OPERACAO_CONFIGURACOES_DA_PARTIDA:
    Log.d(TAG,""String_Node_Str"");
  Jogo configuracaoesDaPartida=(Jogo)obj;
Log.d(TAG,""String_Node_Str"" + configuracaoesDaPartida.getNivel());
break;
case OPERACAO_NOME_JOGADOR:
Log.d(TAG,""String_Node_Str"");
String nome=(String)obj;
Log.d(TAG,""String_Node_Str"" + nome);
break;
default :
Log.e(TAG,""String_Node_Str"");
break;
}
}",0.8489892984542212
98832,"public void run(){
  BluetoothSocket socketConectado=null;
  Log.d(TAG,""String_Node_Str"");
  while (socketConectado == null || !this.encerrar) {
    try {
      socketConectado=servidorSocket.accept();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
  if (socketConectado != null) {
    Log.d(TAG,""String_Node_Str"");
    encerrarServidor();
    connectar(socketConectado,this.protocolo);
  }
  if (this.encerrar) {
    Log.d(TAG,""String_Node_Str"");
  }
}","public void run(){
  BluetoothSocket socketConectado=null;
  Log.d(TAG,""String_Node_Str"");
  while (socketConectado == null || this.encerrar) {
    try {
      socketConectado=servidorSocket.accept();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
  if (socketConectado != null) {
    Log.d(TAG,""String_Node_Str"");
    encerrarServidor();
    connectar(socketConectado,this.protocolo);
  }
  if (this.encerrar) {
    Log.d(TAG,""String_Node_Str"");
  }
}",0.9989764585465712
98833,"public void iniciarPartida(Serializable configuracoesDaPartida){
  byte[] buffer=Protocolo.serialize(configuracoesDaPartida);
  byte[] bufferCabecalho=cabecalhoConfigurarPartida(buffer);
  enviar(bufferCabecalho);
  enviar(buffer);
}","public void iniciarPartida(Serializable configuracoesDaPartida){
  if (configuracoesDaPartida == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  byte[] buffer=Protocolo.serialize(configuracoesDaPartida);
  byte[] bufferCabecalho=cabecalhoConfigurarPartida(buffer);
  enviar(bufferCabecalho);
  enviar(buffer);
}",0.8381294964028777
98834,"private void connecte(BluetoothDevice device){
  Cliente cct=new Cliente(this,device,this.handle);
  cct.start();
  try {
    cct.join();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  ThreadConectada f=cct.threadConectada();
  String teste=""String_Node_Str"";
  if (f != null) {
    f.enviar(teste.getBytes());
    Log.d(TAG,""String_Node_Str"" + teste);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}","private void connecte(BluetoothDevice device){
  this.cliente=new Cliente(this,device,this.handle);
  this.cliente.start();
  try {
    this.cliente.join();
    Log.d(TAG,""String_Node_Str"");
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  enviarNome(this.cliente.threadConectada(),""String_Node_Str"");
}",0.580964153275649
98835,"Asset(){
  lastUpdate=new Time(new Date().getTime());
  metadata=new AssetMetadata();
}","Asset(){
  lastUpdate=new Time(new Date().getTime());
}",0.7746478873239436
98836,public void applyChange(AssetDatabaseChange inAssetChange);,public void applyChange(MetadataDatabaseChange inAssetChange);,0.9256198347107438
98837,"@Override public QueryIterator<AssetRef> matchUsingMetadata(AssetMetadata inMetadata){
  return null;
}","@Override public QueryIterator<org.artificia.zync.data.AssetRef> matchUsingMetadata(AssetMetadata inMetadata){
  return null;
}",0.8956521739130435
98838,"@Override public void applyChange(AssetDatabaseChange inAssetChange){
}","@Override public void applyChange(MetadataDatabaseChange inAssetChange){
}",0.9379310344827586
98839,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  Log log=getLogFromIntent(intent);
  vm=new LogCaptureViewModel(android.text.format.DateFormat.getLongDateFormat(this),android.text.format.DateFormat.getTimeFormat(this),this);
  updateLists();
  vm.setLog(log);
  String action=intent.getAction();
  MainMenuViewModel menuVm=new MainMenuViewModel(this);
  setAndBindRootView(R.layout.main,vm);
  setAndBindOptionsMenu(R.menu.main_menu,menuVm);
  if (ACTION_DISTANCE_CHANGED.equals(action) || ACTION_START_LOG.equals(action))   getToggleButton().setText(R.string.StopGPS);
 else {
    if (log != null && log.getStart() != null && log.getStop() != null)     AddLog(log);
    getToggleButton().setText(R.string.StartGPS);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  Log log=getLogFromIntent(intent);
  vm=new LogCaptureViewModel(android.text.format.DateFormat.getLongDateFormat(this),android.text.format.DateFormat.getTimeFormat(this),this);
  updateLists();
  vm.setLog(log);
  String action=intent.getAction();
  MainMenuViewModel menuVm=new MainMenuViewModel(this);
  setAndBindRootView(R.layout.main,vm);
  setAndBindOptionsMenu(R.menu.main_menu,menuVm);
  if (ACTION_DISTANCE_CHANGED.equals(action) || ACTION_START_LOG.equals(action))   getToggleButton().setText(R.string.StopGPS);
 else   if (ACTION_STOP_LOG.equals(action)) {
    if (getRepository().isLogSaveable(log))     AddLog(log);
 else     getToggleButton().setText(R.string.SaveLog);
  }
 else {
    getToggleButton().setText(R.string.SaveLog);
  }
}",0.8510131108462455
98840,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x=Integer.parseInt(params[0]);
  y=Integer.parseInt(params[1]);
  width=Integer.parseInt(params[2]);
  height=Integer.parseInt(params[3]);
}",0.2216867469879518
98841,"public line(double X1,double Y1,double X2,double Y2){
  x1=X1;
  y1=Y1;
  x2=X2;
  y2=Y2;
}","public line(int X1,int Y1,int X2,int Y2){
  x1=X1;
  y1=Y1;
  x2=X2;
  y2=Y2;
}",0.788235294117647
98842,"public double getLeftBound(){
  if (x1 < x2)   return x1;
 else   return x2;
}","public int getLeftBound(){
  if (x1 < x2)   return x1;
 else   return x2;
}",0.9411764705882352
98843,"public double getRightBound(){
  if (x2 > x1)   return x2;
 else   return x1;
}","public int getRightBound(){
  if (x2 > x1)   return x2;
 else   return x1;
}",0.9419354838709676
98844,"public double getX2(){
  return x2;
}","public int getX2(){
  return x2;
}",0.8732394366197183
98845,"public double getBottomBound(){
  if (y2 > y1)   return y2;
 else   return y1;
}","public int getBottomBound(){
  if (y2 > y1)   return y2;
 else   return y1;
}",0.9426751592356688
98846,"public double getSize(){
  return 0;
}","public int getSize(){
  return 0;
}",0.8767123287671232
98847,"public double getX1(){
  return x1;
}","public int getX1(){
  return x1;
}",0.8732394366197183
98848,"public double getY2(){
  return y2;
}","public int getY2(){
  return y2;
}",0.8732394366197183
98849,"public double getTopBound(){
  if (y1 < y2)   return y1;
 else   return y2;
}","public int getTopBound(){
  if (y1 < y2)   return y1;
 else   return y2;
}",0.9403973509933776
98850,"public double getY1(){
  return y1;
}","public int getY1(){
  return y1;
}",0.8732394366197183
98851,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x1=Integer.parseInt(params[0]);
  y1=Integer.parseInt(params[1]);
  x2=Integer.parseInt(params[2]);
  y2=Integer.parseInt(params[3]);
}",0.224390243902439
98852,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  for (int i=0; i < params.length; i+=2) {
    x.add(Integer.parseInt(params[i]));
    y.add(Integer.parseInt(params[i + 1]));
  }
}",0.2271604938271605
98853,"public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str"") - 1);
  String[] params=arguments.split(""String_Node_Str"");
  x=Integer.parseInt(params[0]);
  y=Integer.parseInt(params[1]);
  width=Integer.parseInt(params[2]);
  height=Integer.parseInt(params[3]);
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x=Integer.parseInt(params[0]);
  y=Integer.parseInt(params[1]);
  width=Integer.parseInt(params[2]);
  height=Integer.parseInt(params[3]);
}",0.6765498652291105
98854,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x=Integer.parseInt(params[0]);
  y=Integer.parseInt(params[1]);
  str=params[2];
}",0.2577030812324929
98855,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x=Integer.parseInt(params[0]);
  y=Integer.parseInt(params[1]);
  width=Integer.parseInt(params[2]);
  height=Integer.parseInt(params[3]);
  str=params[4];
}",0.2129629629629629
98856,"public void fromString(String objectString){
}","public void fromString(String objectString){
  String arguments=objectString.substring(objectString.indexOf(""String_Node_Str"") + 1,objectString.indexOf(""String_Node_Str""));
  String[] params=arguments.split(""String_Node_Str"");
  x1=Integer.parseInt(params[0]);
  y1=Integer.parseInt(params[1]);
  x2=Integer.parseInt(params[2]);
  y2=Integer.parseInt(params[3]);
  x3=Integer.parseInt(params[4]);
  y3=Integer.parseInt(params[5]);
}",0.1924686192468619
98857,"private static boolean isTeacher(String[] assignments){
  for (  String assig : assignments) {
    if (assig.equalsIgnoreCase(Constants.RESPONSABLE) || assig.equalsIgnoreCase(Constants.PROFESSOR)) {
      return true;
    }
  }
  return false;
}","private static boolean isTeacher(String[] assignments){
  for (  String assig : assignments) {
    if (assig.equalsIgnoreCase(Constants.RESPONSABLE) || assig.equalsIgnoreCase(Constants.CREADOR)) {
      return true;
    }
  }
  return false;
}",0.9836065573770492
98858,"public String auth() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
  if (bUOC != null && bUOC.getUserInformation() != null) {
    String lang=bUOC.getUserInformation().getLanguage();
    System.out.println(""String_Node_Str"" + lang);
    Map session=ActionContext.getContext().getSession();
    if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
 else     if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
 else     if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
  }
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","public String auth() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.4120171673819742
98859,"@Override public String execute() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  String token=(String)request.getSession().getAttribute(""String_Node_Str"");
  if (token != null) {
    WebApplicationContext context=WebApplicationContextUtils.getRequiredWebApplicationContext(ServletActionContext.getServletContext());
    CampusConnection campusConnection=(CampusConnection)context.getBean(""String_Node_Str"");
    campusConnection.setCampusSession(token);
    bUOC.setCampusConnection(campusConnection);
  }
  UserInformation userInfo=bUOC.getUserInformation();
  if (userInfo != null) {
    listSubjects=bUOC.getUserSubjects();
    if (listSubjects.length > 0 && s_assign == null && s_activ == null)     s_assign=listSubjects[0].getSubjectID();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
      if (listClassroms.length == 1) {
        s_aula=String.valueOf(listClassroms[0].getIndex());
      }
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
      if (listActivity.length == 1) {
        s_activ=String.valueOf(listActivity[0].getIndex());
      }
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        UOCClassroom objClassroom=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClassroom=listClassroms[i];
          }
        }
        listDeliverDetails=bUOC.getLastClassroomDeliverDetails(objActivity,objClassroom);
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
    }
    imageURL=userInfo.getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=userInfo.getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","@Override public String execute() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  String token=(String)request.getSession().getAttribute(""String_Node_Str"");
  String toReturn=SUCCESS;
  if (token != null) {
    WebApplicationContext context=WebApplicationContextUtils.getRequiredWebApplicationContext(ServletActionContext.getServletContext());
    CampusConnection campusConnection=(CampusConnection)context.getBean(""String_Node_Str"");
    campusConnection.setCampusSession(token);
    bUOC.setCampusConnection(campusConnection);
  }
  UserInformation userInfo=bUOC.getUserInformation();
  if (userInfo != null) {
    String lang=userInfo.getLanguage();
    System.out.println(""String_Node_Str"" + lang);
    Map session=ActionContext.getContext().getSession();
    if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
 else     if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
 else     if (lang.equals(""String_Node_Str"")) {
      session.put(""String_Node_Str"",new java.util.Locale(""String_Node_Str""));
      Locale locale=new Locale(""String_Node_Str"",""String_Node_Str"");
      session.put(""String_Node_Str"",locale);
    }
    if (!lang.equals(getLocale().getLanguage())) {
      toReturn='r' + SUCCESS;
    }
  }
  if (userInfo != null) {
    listSubjects=bUOC.getUserSubjects();
    if (listSubjects.length > 0 && s_assign == null && s_activ == null)     s_assign=listSubjects[0].getSubjectID();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
      if (listClassroms.length == 1) {
        s_aula=String.valueOf(listClassroms[0].getIndex());
      }
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
      if (listActivity.length == 1) {
        s_activ=String.valueOf(listActivity[0].getIndex());
      }
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        UOCClassroom objClassroom=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClassroom=listClassroms[i];
          }
        }
        listDeliverDetails=bUOC.getLastClassroomDeliverDetails(objActivity,objClassroom);
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
    }
    imageURL=userInfo.getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=userInfo.getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.8671222475322703
98860,"public String logout() throws PelpException {
  LocalCampusConnection _campusConnection=new LocalCampusConnection();
  _campusConnection.setProfile(""String_Node_Str"");
  bUOC.setCampusConnection(_campusConnection);
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","public String logout() throws PelpException {
  HttpServletRequest request=ServletActionContext.getRequest();
  request.getSession().setAttribute(""String_Node_Str"",""String_Node_Str"");
  LocalCampusConnection _campusConnection=new LocalCampusConnection();
  _campusConnection.setProfile(""String_Node_Str"");
  bUOC.setCampusConnection(_campusConnection);
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.8438914027149321
98861,"@Override public UOCSubject[] getUserSubjects() throws ExecPelpException, InvalidEngineException, AuthorizationException {
  UOCSubject[] retList=null;
  if (_engine == null) {
    throw new InvalidEngineException(""String_Node_Str"");
  }
  try {
    edu.uoc.pelp.engine.campus.Subject[] userSubjects=_engine.getActiveSubjects();
    if (userSubjects != null) {
      retList=new UOCSubject[userSubjects.length];
      for (int i=0; i < userSubjects.length; i++) {
        SubjectID subjectID=(SubjectID)userSubjects[i].getID();
        retList[i]=new UOCSubject(subjectID.getSemester().getID(),subjectID.getCode());
        retList[i].setShortName(userSubjects[i].getShortName());
        retList[i].setDescription(userSubjects[i].getDescription());
      }
    }
  }
 catch (  AuthPelpException ex) {
    throw new AuthorizationException(ex.getMessage());
  }
  return retList;
}","@Override public UOCSubject[] getUserSubjects() throws ExecPelpException, InvalidEngineException, AuthorizationException {
  UOCSubject[] retList=null;
  if (_engine == null) {
    throw new InvalidEngineException(""String_Node_Str"");
  }
  try {
    edu.uoc.pelp.engine.campus.Subject[] userSubjects=_engine.getActiveSubjects();
    if (userSubjects != null) {
      retList=new UOCSubject[userSubjects.length];
      for (int i=0; i < userSubjects.length; i++) {
        SubjectID subjectID=(SubjectID)userSubjects[i].getID();
        retList[i]=new UOCSubject(subjectID.getSemester().getID(),subjectID.getCode());
        retList[i].setShortName(userSubjects[i].getShortName());
        retList[i].setDescription(userSubjects[i].getDescription());
      }
    }
  }
 catch (  AuthPelpException ex) {
  }
  return retList;
}",0.967741935483871
98862,"/** 
 * Return the list of active subjects for authenticated user
 * @return List of active subjects for current user.
 * @throws AuthPelpException If no user is authenticated.
 */
@Override public Subject[] getActiveSubjects() throws AuthPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  ArrayList<Subject> subjectsList=new ArrayList<Subject>();
  for (  ITimePeriod period : _campusConnection.getActivePeriods()) {
    List<PelpActiveSubjects> filter=_administrationManager.getActiveSubjects(period.toString());
    for (    ISubjectID subjectID : _campusConnection.getUserSubjects(period,filter)) {
      subjectsList.add(_campusConnection.getSubjectData(subjectID));
    }
  }
  Collections.sort(subjectsList);
  Subject[] retList=new Subject[subjectsList.size()];
  subjectsList.toArray(retList);
  return retList;
}","/** 
 * Return the list of active subjects for authenticated user
 * @return List of active subjects for current user.
 * @throws AuthPelpException If no user is authenticated.
 */
@Override public Subject[] getActiveSubjects() throws AuthPelpException {
  if (!isUserAuthenticated()) {
    return null;
  }
  ArrayList<Subject> subjectsList=new ArrayList<Subject>();
  for (  ITimePeriod period : _campusConnection.getActivePeriods()) {
    List<PelpActiveSubjects> filter=_administrationManager.getActiveSubjects(period.toString());
    for (    ISubjectID subjectID : _campusConnection.getUserSubjects(period,filter)) {
      subjectsList.add(_campusConnection.getSubjectData(subjectID));
    }
  }
  Collections.sort(subjectsList);
  Subject[] retList=new Subject[subjectsList.size()];
  subjectsList.toArray(retList);
  return retList;
}",0.9668411867364748
98863,"@Override public String execute() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  String token=(String)request.getSession().getAttribute(""String_Node_Str"");
  if (token != null) {
    WebApplicationContext context=WebApplicationContextUtils.getRequiredWebApplicationContext(ServletActionContext.getServletContext());
    CampusConnection campusConnection=(CampusConnection)context.getBean(""String_Node_Str"");
    campusConnection.setCampusSession(token);
    bUOC.setCampusConnection(campusConnection);
  }
  UserInformation userInfo=bUOC.getUserInformation();
  if (userInfo != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        UOCClassroom objClassroom=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClassroom=listClassroms[i];
          }
        }
        listDeliverDetails=bUOC.getLastClassroomDeliverDetails(objActivity,objClassroom);
        if (listDeliverDetails != null && listDeliverDetails.length > 0)         maxDelivers=String.valueOf(listDeliverDetails[0].getMaxDelivers());
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
        if (listDeliverDetails.length > 0 && listDeliverDetails != null)         maxDelivers=String.valueOf(listDeliverDetails[0].getMaxDelivers());
      }
    }
    imageURL=userInfo.getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=userInfo.getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","@Override public String execute() throws Exception {
  HttpServletRequest request=ServletActionContext.getRequest();
  String token=(String)request.getSession().getAttribute(""String_Node_Str"");
  if (token != null) {
    WebApplicationContext context=WebApplicationContextUtils.getRequiredWebApplicationContext(ServletActionContext.getServletContext());
    CampusConnection campusConnection=(CampusConnection)context.getBean(""String_Node_Str"");
    campusConnection.setCampusSession(token);
    bUOC.setCampusConnection(campusConnection);
  }
  UserInformation userInfo=bUOC.getUserInformation();
  if (userInfo != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        UOCClassroom objClassroom=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClassroom=listClassroms[i];
          }
        }
        listDeliverDetails=bUOC.getLastClassroomDeliverDetails(objActivity,objClassroom);
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
        if (listDeliverDetails != null && listDeliverDetails.length > 0) {
          int cont=0;
          Boolean exit=false;
          while (!exit) {
            if (listDeliverDetails[cont] != null) {
              maxDelivers=String.valueOf(listDeliverDetails[cont].getMaxDelivers());
              exit=true;
            }
            cont++;
          }
        }
      }
    }
    imageURL=userInfo.getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=userInfo.getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.9162357807652534
98864,"/** 
 * Return the list of classrooms for authenticated user
 * @param subjectID Subject identifier
 * @return List of classrooms
 * @throws AuthPelpException If no user is authenticated.
 */
@Override public Classroom[] getSubjectClassrooms(ISubjectID subjectID) throws AuthPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  ArrayList<Classroom> classroomList=new ArrayList<Classroom>();
  for (  IClassroomID classID : _campusConnection.getUserClassrooms(subjectID)) {
    classroomList.add(_campusConnection.getClassroomData(classID));
  }
  Collections.sort(classroomList);
  Classroom[] retList=new Classroom[classroomList.size()];
  classroomList.toArray(retList);
  return retList;
}","/** 
 * Return the list of classrooms for authenticated user
 * @param subjectID Subject identifier
 * @return List of classrooms
 * @throws AuthPelpException If no user is authenticated.
 */
@Override public Classroom[] getSubjectClassrooms(ISubjectID subjectID) throws AuthPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  ArrayList<Classroom> classroomList=new ArrayList<Classroom>();
  for (  IClassroomID classID : _campusConnection.getUserClassrooms(subjectID)) {
    classroomList.add(_campusConnection.getClassroomData(classID));
  }
  Classroom[] retList=new Classroom[classroomList.size()];
  classroomList.toArray(retList);
  return retList;
}",0.9759450171821306
98865,"@Override public Subject getSubjectData(ISubjectID subjectID) throws AuthPelpException {
  if (subjectID == null || !(subjectID instanceof SubjectID)) {
    return null;
  }
  SubjectID id=(SubjectID)subjectID;
  edu.uoc.pelp.engine.campus.UOC.vo.Classroom classroom=getSubjectData(id.getDomainID());
  Subject retVal=new Subject(subjectID);
  retVal.setDescription(classroom.getTitle());
  return retVal;
}","@Override public Subject getSubjectData(ISubjectID subjectID) throws AuthPelpException {
  if (subjectID == null || !(subjectID instanceof SubjectID)) {
    return null;
  }
  SubjectID id=(SubjectID)subjectID;
  edu.uoc.pelp.engine.campus.UOC.vo.Classroom classroom=getSubjectData(id.getDomainID());
  Subject retVal=new Subject(subjectID);
  retVal.setDescription(classroom.getTitle());
  retVal.setShortName(classroom.getTitle());
  return retVal;
}",0.9313154831199068
98866,"@Override public Classroom getClassroomData(IClassroomID classroomID) throws AuthPelpException {
  ClassroomID classroomId=(ClassroomID)classroomID;
  SubjectID subjectId=classroomId.getSubject();
  Classroom classroom=new Classroom(classroomId);
  try {
    String classroomsString=Get(""String_Node_Str"");
    log.info(""String_Node_Str"" + classroomsString);
    GsonBuilder gsonBuilder=new GsonBuilder();
    gsonBuilder.registerTypeAdapter(java.util.Date.class,new DateDeserializer());
    Gson gson=gsonBuilder.create();
    ClassroomList classroomList=gson.fromJson(classroomsString,ClassroomList.class);
    edu.uoc.pelp.engine.campus.UOC.vo.Classroom[] classrooms=classroomList.getClassrooms();
    List<IClassroomID> lista=new ArrayList<IClassroomID>();
    String identificadorAula=null;
    for (    edu.uoc.pelp.engine.campus.UOC.vo.Classroom classroomUOC : classrooms) {
      if (classroomUOC.getFatherId().equals(subjectId.getDomainID())) {
        if (getNumAula(classroomUOC.getCode()) == classroomId.getClassIdx().intValue()) {
          identificadorAula=classroomUOC.getId();
          break;
        }
      }
    }
    if (identificadorAula != null) {
      classroom.setSubjectRef(new Subject(subjectId));
      String classroomStudentsString=Get(""String_Node_Str"" + identificadorAula + ""String_Node_Str"");
      log.info(""String_Node_Str"" + classroomStudentsString);
      gsonBuilder=new GsonBuilder();
      gson=gsonBuilder.create();
      UserList studentList=gson.fromJson(classroomStudentsString,UserList.class);
      User[] users=studentList.getUsers();
      for (      User user : users) {
        classroom.addStudent(new Person(new UserID(user.getNumber())));
      }
      String classroomTeachersString=Get(""String_Node_Str"" + identificadorAula + ""String_Node_Str"");
      log.info(""String_Node_Str"" + classroomStudentsString);
      gsonBuilder=new GsonBuilder();
      gson=gsonBuilder.create();
      UserList teachersList=gson.fromJson(classroomTeachersString,UserList.class);
      users=teachersList.getUsers();
      for (      User user : users) {
        classroom.addTeacher(new Person(new UserID(user.getNumber())));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return classroom;
}","@Override public Classroom getClassroomData(IClassroomID classroomID) throws AuthPelpException {
  ClassroomID classroomId=(ClassroomID)classroomID;
  SubjectID subjectId=classroomId.getSubject();
  Classroom classroom=new Classroom(classroomId);
  try {
    String classroomsString=Get(""String_Node_Str"");
    log.info(""String_Node_Str"" + classroomsString);
    GsonBuilder gsonBuilder=new GsonBuilder();
    gsonBuilder.registerTypeAdapter(java.util.Date.class,new DateDeserializer());
    Gson gson=gsonBuilder.create();
    ClassroomList classroomList=gson.fromJson(classroomsString,ClassroomList.class);
    String identificadorAula=null;
    if (classroomList != null) {
      edu.uoc.pelp.engine.campus.UOC.vo.Classroom[] classrooms=classroomList.getClassrooms();
      List<IClassroomID> lista=new ArrayList<IClassroomID>();
      for (      edu.uoc.pelp.engine.campus.UOC.vo.Classroom classroomUOC : classrooms) {
        if (classroomUOC.getFatherId().equals(subjectId.getDomainID())) {
          if (getNumAula(classroomUOC.getCode()) == classroomId.getClassIdx().intValue()) {
            identificadorAula=classroomUOC.getId();
            break;
          }
        }
      }
    }
    if (identificadorAula != null) {
      classroom.setSubjectRef(getSubjectData(subjectId));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return classroom;
}",0.6985962014863749
98867,"private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if ((finalDeliver != null && !finalDeliver) && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
      }
    }
  }
}","private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if ((finalDeliver != null && !finalDeliver) && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
      }
    }
  }
}",0.9657142857142856
98868,"private void listFile() throws Exception {
  String ruta=this.rutaFile();
  File directorioPracticas=new File(ruta);
  File[] ficheros=directorioPracticas.listFiles();
  if (ficheros != null && ficheros.length > 0) {
    log.info(""String_Node_Str"" + ficheros.length);
    fileDim=ficheros.length;
    matrizFile=new String[fileDim][5];
    for (int i=0; i < ficheros.length; i++) {
      File file=ficheros[i];
      log.info(""String_Node_Str"" + file.getName());
      matrizFile[i][0]=file.getName();
      matrizFile[i][1]=""String_Node_Str"";
      matrizFile[i][2]=""String_Node_Str"";
      matrizFile[i][3]=""String_Node_Str"";
      matrizFile[i][4]=String.valueOf(file.getName().hashCode());
    }
  }
 else {
    matrizFile=null;
    fileDim=0;
  }
}","private void listFile() throws Exception {
  String ruta=this.rutaFile();
  File directorioPracticas=new File(ruta);
  File[] ficheros=directorioPracticas.listFiles();
  if (ficheros != null && ficheros.length > 0) {
    log.info(""String_Node_Str"" + ficheros.length);
    fileDim=ficheros.length;
    matrizFile=new String[fileDim][5];
    for (int i=0; i < ficheros.length; i++) {
      File file=ficheros[i];
      log.info(""String_Node_Str"" + file.getName());
      matrizFile[i][0]=file.getName();
      matrizFile[i][1]=""String_Node_Str"";
      matrizFile[i][2]=""String_Node_Str"";
      matrizFile[i][3]=""String_Node_Str"";
      matrizFile[i][4]=String.valueOf(file.getName().hashCode());
    }
  }
 else {
    matrizFile=null;
    fileDim=0;
  }
  if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
    Activity objActivity=new Activity();
    for (int j=0; j < listActivity.length; j++) {
      if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
        objActivity=listActivity[j];
      }
    }
    String[] infoAssing=s_assign.split(""String_Node_Str"");
    if (teacher) {
      Classroom objClass=null;
      for (int i=0; i < listClassroms.length; i++) {
        if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
          objClass=listClassroms[i];
        }
      }
      bUOC.getAllClassroomDeliverDetails(objActivity,new UOCSubject(infoAssing[0],infoAssing[2]),objClass.getIndex());
    }
 else {
      setListDeliverDetails(bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex()));
    }
  }
}",0.6319765002098195
98869,"public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    this.rutaFile();
    this.menuTop();
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  this.fileupload();
  this.crearDeliverFile();
  this.listFile();
  return SUCCESS;
}","public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null && s_assign.length() > 0) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  this.fileupload();
  this.crearDeliverFile();
  this.listFile();
  return SUCCESS;
}",0.5868781542898341
98870,"public String auth() throws Exception, OsidException {
  LocalCampusConnection _campusConnection=new LocalCampusConnection();
  _campusConnection.setProfile(username);
  bUOC.setCampusConnection(_campusConnection);
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","public String auth() throws Exception {
  LocalCampusConnection _campusConnection=new LocalCampusConnection();
  _campusConnection.setProfile(username);
  bUOC.setCampusConnection(_campusConnection);
  String toReturn='r' + SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn='r' + TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.9794801641586868
98871,"@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        Classroom objClass=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClass=listClassroms[i];
          }
        }
        bUOC.getAllClassroomDeliverDetails(objActivity,new UOCSubject(infoAssing[0],infoAssing[2]),objClass.getIndex());
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
      }
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        UOCClassroom objClassroom=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClassroom=listClassroms[i];
          }
        }
        listDeliverDetails=bUOC.getAllClassroomDeliverDetails(objActivity,objClassroom);
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
      }
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.9733720010545742
98872,"/** 
 * Remove all the information of inputs and outputs for private tests
 * @param results Deliver results to be modified
 */
private void removePrivateResultInformation(DeliverResults results){
  for (  TestID testID : _activityManager.getActivityTests(results.getDeliverID().activity)) {
    ActivityTest test=_activityManager.getTest(testID);
    if (!test.isPublic()) {
      results.removePrivateInformation(testID);
    }
  }
}","/** 
 * Remove all the information of inputs and outputs for private tests
 * @param results Deliver results to be modified
 */
private void removePrivateResultInformation(DeliverResults results){
  if (results != null) {
    for (    TestID testID : _activityManager.getActivityTests(results.getDeliverID().activity)) {
      ActivityTest test=_activityManager.getTest(testID);
      if (!test.isPublic()) {
        results.removePrivateInformation(testID);
      }
    }
  }
}",0.9419496166484118
98873,"@Override public List<ActivityTest> findAll(ActivityID activity){
  if (activity == null) {
    return null;
  }
  ActivityPK key=ObjectFactory.getActivityPK(activity);
  Query query=getSession().getNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",key.getSemester());
  query.setParameter(""String_Node_Str"",key.getSubject());
  query.setParameter(""String_Node_Str"",key.getActivityIndex());
  List<edu.uoc.pelp.model.vo.ActivityTest> list=query.list();
  return getActivityTestList(list);
}","@Override public List<ActivityTest> findAll(ActivityID activity){
  if (activity == null) {
    return null;
  }
  getSession().beginTransaction();
  ActivityPK key=ObjectFactory.getActivityPK(activity);
  Query query=getSession().getNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",key.getSemester());
  query.setParameter(""String_Node_Str"",key.getSubject());
  query.setParameter(""String_Node_Str"",key.getActivityIndex());
  List<edu.uoc.pelp.model.vo.ActivityTest> list=query.list();
  List<ActivityTest> listActivity=null;
  listActivity=getActivityTestList(list);
  getSession().close();
  return listActivity;
}",0.8710801393728222
98874,"public String auth() throws Exception {
}","public String auth() throws Exception {
  return ""String_Node_Str"";
}",0.7454545454545455
98875,"private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=PelpConfiguracionBO.getSingletonConfiguration().get(PelpConfiguracionBO.TEMP_PATH);
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if (!finalDeliver && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
        }
      }
    }
  }
}","private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if (!finalDeliver && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
        }
      }
    }
  }
}",0.9859571322985956
98876,"private void listFile(){
  try {
    if (((s_aula != null && s_aula.length() > 0) && (s_assign != null && s_assign.length() > 0) && (s_activ != null && s_activ.length() > 0)) || (finalDeliver != null && finalDeliver != true)) {
      String ruta=PelpConfiguracionBO.getSingletonConfiguration().get(PelpConfiguracionBO.TEMP_PATH);
      File directorioPracticas=new File(ruta);
      File[] ficheros=directorioPracticas.listFiles();
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        matrizFile=new String[fileDim][5];
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          matrizFile[i][0]=file.getName();
          matrizFile[i][1]=""String_Node_Str"";
          matrizFile[i][2]=""String_Node_Str"";
          matrizFile[i][3]=""String_Node_Str"";
          matrizFile[i][4]=String.valueOf(file.getName().hashCode());
        }
      }
 else {
        matrizFile=null;
        fileDim=0;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void listFile(){
  try {
    if (((s_aula != null && s_aula.length() > 0) && (s_assign != null && s_assign.length() > 0) && (s_activ != null && s_activ.length() > 0)) || (finalDeliver != null && finalDeliver != true)) {
      String ruta=this.rutaFile();
      File directorioPracticas=new File(ruta);
      File[] ficheros=directorioPracticas.listFiles();
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        matrizFile=new String[fileDim][5];
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          matrizFile[i][0]=file.getName();
          matrizFile[i][1]=""String_Node_Str"";
          matrizFile[i][2]=""String_Node_Str"";
          matrizFile[i][3]=""String_Node_Str"";
          matrizFile[i][4]=String.valueOf(file.getName().hashCode());
        }
      }
 else {
        matrizFile=null;
        fileDim=0;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.957418198117436
98877,"public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    this.menuTop();
    imageURL=bUOC.getUserInformation().getUserPhoto();
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
  }
  this.fileupload();
  this.crearDeliverFile();
  this.listFile();
  return SUCCESS;
}","public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    this.rutaFile();
    this.menuTop();
    imageURL=bUOC.getUserInformation().getUserPhoto();
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
  }
  this.fileupload();
  this.crearDeliverFile();
  this.listFile();
  return SUCCESS;
}",0.970042796005706
98878,"public void delete() throws Exception {
  if (auxInfo != null) {
    String ruta=PelpConfiguracionBO.getSingletonConfiguration().get(PelpConfiguracionBO.TEMP_PATH);
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0) {
      fileDim=ficheros.length;
      for (int i=0; i < ficheros.length; i++) {
        File file=ficheros[i];
        String nameFileHas=auxInfo.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceFirst(""String_Node_Str"",""String_Node_Str"");
        if (nameFileHas.equals(nameFileFolder)) {
          log.info(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ nameFileHas);
          file.delete();
        }
      }
    }
  }
}","public void delete() throws Exception {
  if (auxInfo != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0) {
      fileDim=ficheros.length;
      for (int i=0; i < ficheros.length; i++) {
        File file=ficheros[i];
        String nameFileHas=auxInfo.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceFirst(""String_Node_Str"",""String_Node_Str"");
        if (nameFileHas.equals(nameFileFolder)) {
          log.info(""String_Node_Str"" + file.getName() + ""String_Node_Str""+ nameFileHas);
          file.delete();
        }
      }
    }
  }
}",0.939911448450348
98879,"private void fileupload() throws Exception {
  String ruta=PelpConfiguracionBO.getSingletonConfiguration().get(PelpConfiguracionBO.TEMP_PATH);
  if (uploads != null && !uploads.isEmpty()) {
    try {
      File destFile=new File(ruta,uploadFileNames.get(0));
      FileUtils.copyFile(uploads.get(0),destFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  this.cleanFile();
}","private void fileupload() throws Exception {
  String ruta=this.rutaFile();
  if (uploads != null && !uploads.isEmpty()) {
    try {
      File destFile=new File(ruta,uploadFileNames.get(0));
      FileUtils.copyFile(uploads.get(0),destFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  this.cleanFile();
}",0.871447902571042
98880,"private void cleanFile(){
  try {
synchronized (this) {
      String ruta=PelpConfiguracionBO.getSingletonConfiguration().get(PelpConfiguracionBO.TEMP_PATH);
      File directorioPracticas=new File(ruta);
      File[] ficheros=directorioPracticas.listFiles();
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        long tiempoActual=new Date().getTime();
        long unDiaEnMilSecs=90000000;
        int eliminados=0;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          if ((tiempoActual - file.lastModified()) > unDiaEnMilSecs) {
            if (!file.delete()) {
              file.deleteOnExit();
            }
            eliminados++;
          }
        }
        log.info(""String_Node_Str"" + eliminados);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void cleanFile(){
  try {
synchronized (this) {
      String ruta=this.rutaFile();
      File directorioPracticas=new File(ruta);
      File[] ficheros=directorioPracticas.listFiles();
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        long tiempoActual=new Date().getTime();
        long unDiaEnMilSecs=90000000;
        int eliminados=0;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          if ((tiempoActual - file.lastModified()) > unDiaEnMilSecs) {
            if (!file.delete()) {
              file.deleteOnExit();
            }
            eliminados++;
          }
        }
        log.info(""String_Node_Str"" + eliminados);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9455822118197776
98881,"@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]))) {
        System.out.println(""String_Node_Str"");
      }
 else {
        System.out.println(""String_Node_Str"");
      }
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listDelivers=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
  }
  return SUCCESS;
}","@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]))) {
        return ""String_Node_Str"";
      }
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listDelivers=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
  }
  return SUCCESS;
}",0.967509025270758
98882,"@Override public String execute() throws Exception {
  listSubjects=bUOC.getUserSubjects();
  if (s_assign != null) {
    String[] infoAssing=s_assign.split(""String_Node_Str"");
    listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
  }
  if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
    String[] infoAssing=s_assign.split(""String_Node_Str"");
    listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
  }
  if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
    Activity objActivity=new Activity();
    for (int j=0; j < listActivity.length; j++) {
      if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
        objActivity=listActivity[j];
      }
    }
    String[] infoAssing=s_assign.split(""String_Node_Str"");
    bUOC.getLastClassroomDeliverSummary(objActivity,new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
  }
  return SUCCESS;
}","@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      bUOC.getLastClassroomDeliverSummary(objActivity,new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
  }
  return SUCCESS;
}",0.8636161705908485
98883,"private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if ((finalDeliver != null && !finalDeliver) && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
        }
      }
    }
  }
}","private void crearDeliverFile() throws Exception {
  if (matrizFile != null) {
    String ruta=this.rutaFile();
    File directorioPracticas=new File(ruta);
    File[] ficheros=directorioPracticas.listFiles();
    if (ficheros != null && ficheros.length > 0 || codePlain != null) {
      DeliverFile[] files=null;
      if (ficheros != null && ficheros.length > 0) {
        log.info(""String_Node_Str"" + ficheros.length);
        fileDim=ficheros.length;
        files=new DeliverFile[ficheros.length];
        Boolean isFile=false;
        for (int i=0; i < ficheros.length; i++) {
          File file=ficheros[i];
          log.info(""String_Node_Str"" + file.getName());
          files[i]=new DeliverFile(new File(ruta),new File(file.getName()));
          for (int j=0; j < matrizFile.length; j++) {
            String nameFileHas=matrizFile[j][0].replaceAll(""String_Node_Str"",""String_Node_Str"");
            String nameFileFolder=String.valueOf(file.getName().hashCode()).replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              files[i].setIsReport(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsCode(true);
            }
            if (nameFileHas.equals(""String_Node_Str"" + nameFileFolder)) {
              isFile=true;
              log.warn(""String_Node_Str"");
              files[i].setIsMain(true);
            }
          }
        }
        if (isFile && listActivity != null) {
          Activity objActivity=new Activity();
          for (int j=0; j < listActivity.length; j++) {
            if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
              objActivity=listActivity[j];
            }
          }
          if (finalDeliver) {
            DeliverDetail objDetail=bUOC.addDeliver(objActivity,files);
            resulMessage=objDetail.getCompileMessage();
            if (resulMessage.length() == 0)             resulMessage=""String_Node_Str"";
          }
        }
      }
      if ((finalDeliver != null && !finalDeliver) && (matrizFile.length > 1 || (codePlain != null && codePlain.length() > 5))) {
        Test[] tests=new Test[1];
        if (testPlain != null && testPlainOut != null) {
          tests[0]=new Test();
          if (testPlain != null && testPlain.length() > 1) {
            tests[0].setInputText(testPlain);
          }
          if (testPlainOut != null && testPlainOut.length() > 1) {
            tests[0].setExpectedOutput(testPlainOut);
          }
          if (testFile != null) {
            tests[0].setInputFilePath(testFile.getAbsolutePath());
          }
          if (testFileOut != null) {
            tests[0].setExpectedOutputFilePath(testFileOut.getAbsolutePath());
          }
          tests[0].setPublic(true);
        }
        if (codePlain != null && codePlain.length() > 5) {
          DeliverDetail objDetail=bUOC.compileCode(codePlain,""String_Node_Str"",tests);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
 else         if (files != null) {
          DeliverDetail objDetail=bUOC.compileCode(files,""String_Node_Str"",tests,ruta);
          resulMessage=objDetail.getCompileMessage();
          if (resulMessage.length() == 0)           resulMessage=""String_Node_Str"";
        }
      }
    }
  }
}",0.9757155247181266
98884,"@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}","@Override public String execute() throws Exception {
  if (bUOC.getUserInformation() != null) {
    listSubjects=bUOC.getUserSubjects();
    if (s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      teacher=bUOC.isTeacher(new UOCSubject(infoAssing[0],infoAssing[2]));
      listClassroms=bUOC.getUserClassrooms(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null) {
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      listActivity=bUOC.getSubjectActivities(new UOCSubject(infoAssing[0],infoAssing[2]));
    }
    if (s_aula != null && s_aula.length() > 0 && s_assign != null && s_activ != null && s_activ.length() > 0) {
      Activity objActivity=new Activity();
      for (int j=0; j < listActivity.length; j++) {
        if (listActivity[j].getIndex() == Integer.parseInt(s_activ)) {
          objActivity=listActivity[j];
        }
      }
      String[] infoAssing=s_assign.split(""String_Node_Str"");
      if (teacher) {
        Classroom objClass=null;
        for (int i=0; i < listClassroms.length; i++) {
          if (listClassroms[i].getIndex() == Integer.parseInt(s_aula)) {
            objClass=listClassroms[i];
          }
        }
        bUOC.getAllClassroomDeliverDetails(objActivity,new UOCSubject(infoAssing[0],infoAssing[2]),objClass.getIndex());
      }
 else {
        listDeliverDetails=bUOC.getUserDeliverDetails(new UOCSubject(infoAssing[0],infoAssing[2]),objActivity.getIndex());
      }
    }
    imageURL=bUOC.getUserInformation().getUserPhoto();
    if (imageURL == null)     imageURL=""String_Node_Str"";
    fullName=bUOC.getUserInformation().getUserFullName();
  }
 else {
    imageURL=null;
    fullName=null;
  }
  String toReturn=SUCCESS;
  if (TAB_PROGRAMMING_ENVIROMENT.equals(activeTab)) {
    toReturn=TAB_PROGRAMMING_ENVIROMENT;
  }
  return toReturn;
}",0.866822429906542
98885,"@Override public IUserID getUserID() throws AuthPelpException {
  if (userID == null) {
    try {
      Auth authService=WsLibBO.getAuthServiceInstance();
      final SessionContext sessionContext=authService.getContextBySessionId(sesion);
      if (sessionContext == null) {
        log.error(""String_Node_Str"" + sesion);
        throw new Exception(""String_Node_Str"" + sesion);
      }
      userID=new UserID(String.valueOf(sessionContext.getIdp()));
      appId=UserUtils.getAppId(sessionContext);
      aplicacioTren=UserUtils.getAplicacioTren(appId);
      appIdTREN=UserUtils.getAplicacioTren(appId);
    }
 catch (    Exception e) {
      throw new AuthPelpException(""String_Node_Str"");
    }
  }
  return userID;
}","@Override public IUserID getUserID() throws AuthPelpException {
  if (userID == null) {
    try {
      Auth authService=WsLibBO.getAuthServiceInstance();
      final SessionContext sessionContext=authService.getContextBySessionId(sesion);
      if (sessionContext == null) {
        log.error(""String_Node_Str"" + sesion);
        throw new Exception(""String_Node_Str"" + sesion);
      }
      userID=new UserID(String.valueOf(sessionContext.getIdp()));
      username=sessionContext.getUserLogin();
      appId=UserUtils.getAppId(sessionContext);
      aplicacioTren=UserUtils.getAplicacioTren(appId);
      appIdTREN=UserUtils.getAplicacioTren(appId);
    }
 catch (    Exception e) {
      throw new AuthPelpException(""String_Node_Str"");
    }
  }
  return userID;
}",0.9691689008042896
98886,"@Override public ISubjectID[] getUserSubjects(UserRoles userRole,ITimePeriod timePeriod) throws AuthPelpException {
  ArrayList<SubjectID> subjects=new ArrayList<SubjectID>();
  if (userRole == null || userRole.compareTo(UserRoles.Student) == 0) {
    if (asignaturasMatriculadas == null) {
      asignaturasMatriculadas=getListaAsignaturasMatriculadas(null,null);
    }
  }
  if (userRole == null || userRole.compareTo(UserRoles.Teacher) == 0) {
    if (asignaturasConsultor == null) {
      asignaturasConsultor=getListaAsignaturasConsultor(null,null);
    }
  }
  if (userRole == null || userRole.compareTo(UserRoles.MainTeacher) == 0) {
    if (asignaturasPRA == null) {
      asignaturasPRA=getListaAsignaturasPRA(timePeriod,null);
    }
  }
  ITimePeriod[] semestres;
  if (timePeriod == null) {
    semestres=getActivePeriods();
  }
 else {
    semestres=new ITimePeriod[1];
    semestres[0]=timePeriod;
  }
  for (  ITimePeriod iTimePeriod : semestres) {
    Semester semester=(Semester)iTimePeriod;
    for (    AssignaturaMatriculadaDocenciaVO assignaturaMatriculadaDocencia : asignaturasMatriculadas) {
      AssignaturaReduidaVO asignatura;
      asignatura=(AssignaturaReduidaVO)assignaturaMatriculadaDocencia.getAssignatura();
      if (assignaturaMatriculadaDocencia.getAnyAcademic().equalsIgnoreCase(semester.getID())) {
        SubjectID subID=new SubjectID(asignatura.getCodAssignatura(),semester);
        subjects.add(subID);
      }
    }
    for (    AulaVO aula : asignaturasConsultor) {
      if (aula.getAnyAcademic().equalsIgnoreCase(semester.getID())) {
        SubjectID subID=new SubjectID(aula.getAssignatura().getCodAssignatura(),semester);
        subjects.add(subID);
      }
    }
    for (    AssignaturaReduidaVO asignatura : asignaturasPRA) {
      SubjectID subID=new SubjectID(asignatura.getCodAssignatura(),semester);
      subjects.add(subID);
    }
  }
  SubjectID[] subs=new SubjectID[subjects.size()];
  return subjects.toArray(subs);
}","@Override public ISubjectID[] getUserSubjects(UserRoles userRole,ITimePeriod timePeriod) throws AuthPelpException {
  ArrayList<SubjectID> subjects=new ArrayList<SubjectID>();
  if (userRole == null || userRole.compareTo(UserRoles.Student) == 0) {
    if (asignaturasMatriculadas == null) {
      asignaturasMatriculadas=getListaAsignaturasMatriculadas(timePeriod,null);
    }
  }
  if (userRole == null || userRole.compareTo(UserRoles.Teacher) == 0) {
    if (asignaturasConsultor == null) {
      asignaturasConsultor=getListaAsignaturasConsultor(timePeriod,null);
    }
  }
  if (userRole == null || userRole.compareTo(UserRoles.MainTeacher) == 0) {
    if (asignaturasPRA == null) {
      asignaturasPRA=getListaAsignaturasPRA(timePeriod,null);
    }
  }
  ITimePeriod[] semestres;
  if (timePeriod == null) {
    semestres=getActivePeriods();
  }
 else {
    semestres=new ITimePeriod[1];
    semestres[0]=timePeriod;
  }
  for (  ITimePeriod iTimePeriod : semestres) {
    Semester semester=(Semester)iTimePeriod;
    for (    AssignaturaMatriculadaDocenciaVO assignaturaMatriculadaDocencia : asignaturasMatriculadas) {
      AssignaturaReduidaVO asignatura;
      asignatura=(AssignaturaReduidaVO)assignaturaMatriculadaDocencia.getAssignatura();
      if (assignaturaMatriculadaDocencia.getAnyAcademic().equalsIgnoreCase(semester.getID())) {
        SubjectID subID=new SubjectID(asignatura.getCodAssignatura(),semester);
        subjects.add(subID);
      }
    }
    for (    AulaVO aula : asignaturasConsultor) {
      if (aula.getAnyAcademic().equalsIgnoreCase(semester.getID())) {
        SubjectID subID=new SubjectID(aula.getAssignatura().getCodAssignatura(),semester);
        subjects.add(subID);
      }
    }
    for (    AssignaturaReduidaVO asignatura : asignaturasPRA) {
      SubjectID subID=new SubjectID(asignatura.getCodAssignatura(),semester);
      subjects.add(subID);
    }
  }
  SubjectID[] subs=new SubjectID[subjects.size()];
  return subjects.toArray(subs);
}",0.9929506545820744
98887,"protected edu.uoc.pelp.engine.deliver.DeliverFile getDeliverFile(DeliverFile file) throws ExecPelpException {
  if (file == null) {
    return null;
  }
  FileType type=null;
  if (file.isIsCode()) {
    type=FileType.Code;
  }
 else   if (file.isIsReport()) {
    type=FileType.Report;
  }
  if (type == null) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  edu.uoc.pelp.engine.deliver.DeliverFile newObj=new edu.uoc.pelp.engine.deliver.DeliverFile(new File(file.getRelativePath()),type);
  newObj.setMainProperty(file.isIsMain());
  return newObj;
}","protected DeliverFile getDeliverFile(File rootPath,edu.uoc.pelp.engine.deliver.DeliverFile object){
  DeliverFile newFile=new DeliverFile(rootPath,object.getRelativePath());
  newFile.setIndex((int)object.getID().index);
switch (object.getType()) {
case Code:
    newFile.setIsCode(true);
  newFile.setIsMain(object.isMainFile());
break;
case Report:
newFile.setIsReport(true);
break;
}
return newFile;
}",0.1385729058945191
98888,"protected DeliverDetail getDeliverDetailObject(Deliver deliver,DeliverResults deliverResult) throws AuthPelpException, InvalidActivityPelpException, InvalidSubjectPelpException, ExecPelpException, InvalidEngineException {
  DeliverSummary deliverSummary=getDeliverSummaryObject(deliver,deliverResult);
  if (deliverSummary == null) {
    return null;
  }
  DeliverDetail deliverDetail=new DeliverDetail(deliverSummary);
  return deliverDetail;
}","protected DeliverDetail getDeliverDetailObject(Deliver deliver,DeliverResults deliverResult) throws AuthPelpException, InvalidActivityPelpException, InvalidSubjectPelpException, ExecPelpException, InvalidEngineException {
  DeliverSummary deliverSummary=getDeliverSummaryObject(deliver,deliverResult);
  if (deliverSummary == null) {
    return null;
  }
  DeliverDetail deliverDetail=new DeliverDetail(deliverSummary);
  edu.uoc.pelp.engine.deliver.DeliverFile[] files=deliver.getFiles();
  if (files != null) {
    deliverDetail.setDeliverFiles(getDeliverFileList(deliver.getRootPath(),files));
  }
  ActivityTestResult[] tests=deliverResult.getResults();
  if (tests != null) {
    deliverDetail.setTestResults(getTestResultList(tests));
  }
  return deliverDetail;
}",0.6995884773662552
98889,"/** 
 * Obain the test information. Only teachers can access to private tests information.
 * @param testID Identifier for the test
 * @return Object with the test information
 * @throws AuthPelpException If no user is authenticated or does not have enough rights to obtain this information.
 */
@Override public ActivityTest getTestInformation(TestID testID) throws AuthPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  if (!isStudent(testID.activity.subjectID) && !isTeacher(testID.activity.subjectID) && !isLabTeacher(testID.activity.subjectID)) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  ActivityTest test=_activityManager.getTest(testID);
  if (!test.isPublic() && !isTeacher(testID.activity.subjectID)) {
    test=new ActivityTest(testID);
    test.setPublic(false);
    test.setTestID(testID);
  }
  return test;
}","/** 
 * Obain the test information. Only teachers can access to private tests information.
 * @param testID Identifier for the test
 * @return Object with the test information
 * @throws AuthPelpException If no user is authenticated or does not have enough rights to obtain this information.
 */
@Override public ActivityTest getTestInformation(TestID testID) throws AuthPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  boolean userIsTeacher=false;
  if (!isStudent(testID.activity.subjectID)) {
    userIsTeacher=true;
    if (!isTeacher(testID.activity.subjectID) && !isLabTeacher(testID.activity.subjectID)) {
      throw new AuthPelpException(""String_Node_Str"");
    }
  }
  ActivityTest test=_activityManager.getTest(testID);
  if (!test.isPublic() && !userIsTeacher) {
    test=new ActivityTest(testID);
    test.setPublic(false);
    test.setTestID(testID);
  }
  return test;
}",0.8671023965141612
98890,"/** 
 * Perform a new deliver for current user to the given activity
 * @param deliver Deliver object with all the files
 * @param activityID Identifier for the target activity
 * @return Results obtained from the analisis of this deliver
 * @throws AuthPelpException If the user is not authenticated.
 * @throws InvalidActivityPelpException If the user cannot perform delivers to this activity, because is not a student or all allowed delivers are performed.
 * @throws ExecPelpException When files cannot be accessed or for some missconfiguration of the analyzer module.
 */
@Override public DeliverResults createNewDeliver(Deliver deliver,ActivityID activityID) throws AuthPelpException, InvalidActivityPelpException, ExecPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  Activity activity=_activityManager.getActivity(activityID);
  if (activity == null) {
    throw new InvalidActivityPelpException(""String_Node_Str"");
  }
  if (!isStudent(activityID.subjectID)) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  for (  IClassroomID classroom : _campusConnection.getUserClassrooms(UserRoles.Student,activityID.subjectID)) {
    deliver.addMainClassroom(classroom);
  }
  ISubjectID[] labSubjects=_administrationManager.getLabSubjectOfMain(activityID.subjectID);
  if (labSubjects != null && labSubjects.length > 0) {
    boolean hasLab=false;
    for (    ISubjectID labSubjectID : labSubjects) {
      if (hasLab) {
        break;
      }
      for (      IClassroomID classroom : _campusConnection.getUserClassrooms(UserRoles.Student,labSubjectID)) {
        deliver.addLabClassroom(classroom);
        hasLab=true;
        break;
      }
    }
  }
  int numDelivers=_deliverManager.getNumUserDelivers(_campusConnection.getUserID(),activityID);
  if (activity.getMaxDelivers() != null) {
    if (numDelivers >= activity.getMaxDelivers()) {
      throw new InvalidActivityPelpException(""String_Node_Str"");
    }
  }
  DeliverID deliverID=_deliverManager.addDeliver(_campusConnection.getUserID(),activityID,deliver);
  if (deliverID == null) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  Deliver newDeliver=_deliverManager.getDeliver(deliverID);
  if (newDeliver == null) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  TestID[] testID=_activityManager.getActivityTests(activityID);
  ActivityTest[] tests=null;
  if (testID.length > 0) {
    tests=new ActivityTest[testID.length];
    for (int i=0; i < testID.length; i++) {
      tests[i]=_activityManager.getTest(testID[i]);
    }
  }
  CodeProject project=newDeliver.getCodeProject();
  project.setLanguage(activity.getLanguage());
  AnalysisResults analysisResults=analyzeCode(project,tests);
  if (!_deliverManager.addResults(deliverID,analysisResults)) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  return _deliverManager.getResults(deliverID);
}","/** 
 * Perform a new deliver for current user to the given activity
 * @param deliver Deliver object with all the files
 * @param activityID Identifier for the target activity
 * @return Results obtained from the analisis of this deliver
 * @throws AuthPelpException If the user is not authenticated.
 * @throws InvalidActivityPelpException If the user cannot perform delivers to this activity, because is not a student or all allowed delivers are performed.
 * @throws ExecPelpException When files cannot be accessed or for some missconfiguration of the analyzer module.
 */
@Override public DeliverResults createNewDeliver(Deliver deliver,ActivityID activityID) throws AuthPelpException, InvalidActivityPelpException, ExecPelpException {
  if (!isUserAuthenticated()) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  Activity activity=_activityManager.getActivity(activityID);
  if (activity == null) {
    throw new InvalidActivityPelpException(""String_Node_Str"");
  }
  if (!isStudent(activityID.subjectID)) {
    throw new AuthPelpException(""String_Node_Str"");
  }
  for (  IClassroomID classroom : _campusConnection.getUserClassrooms(UserRoles.Student,activityID.subjectID)) {
    deliver.addMainClassroom(classroom);
  }
  ISubjectID[] labSubjects=_administrationManager.getLabSubjectOfMain(activityID.subjectID);
  if (labSubjects != null && labSubjects.length > 0) {
    boolean hasLab=false;
    for (    ISubjectID labSubjectID : labSubjects) {
      if (hasLab) {
        break;
      }
      for (      IClassroomID classroom : _campusConnection.getUserClassrooms(UserRoles.Student,labSubjectID)) {
        deliver.addLabClassroom(classroom);
        hasLab=true;
        break;
      }
    }
  }
  int numDelivers=_deliverManager.getNumUserDelivers(_campusConnection.getUserID(),activityID);
  if (activity.getMaxDelivers() != null) {
    if (numDelivers >= activity.getMaxDelivers()) {
      throw new InvalidActivityPelpException(""String_Node_Str"");
    }
  }
  DeliverID deliverID=_deliverManager.addDeliver(_campusConnection.getUserID(),activityID,deliver);
  if (deliverID == null) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  Deliver newDeliver=_deliverManager.getDeliver(deliverID);
  if (newDeliver == null) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  TestID[] testID=_activityManager.getActivityTests(activityID);
  ActivityTest[] tests=null;
  if (testID.length > 0) {
    tests=new ActivityTest[testID.length];
    for (int i=0; i < testID.length; i++) {
      tests[i]=_activityManager.getTest(testID[i]);
    }
  }
  CodeProject project=newDeliver.getCodeProject();
  project.setLanguage(activity.getLanguage());
  AnalysisResults analysisResults=analyzeCode(project,tests);
  if (!_deliverManager.addResults(deliverID,analysisResults)) {
    throw new ExecPelpException(""String_Node_Str"");
  }
  DeliverResults results=_deliverManager.getResults(deliverID);
  removePrivateResultInformation(results);
  return results;
}",0.9845893310753598
98891,"@Test public void testCorrectWorkflow(){
  _campusConnection.setProfile(""String_Node_Str"");
  prepareSubject();
  _campusConnection.setProfile(""String_Node_Str"");
  addActivities();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent1();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent2();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent3();
  _campusConnection.setProfile(""String_Node_Str"");
  checkDelivers2();
}","@Test public void testCorrectWorkflow(){
  _campusConnection.setProfile(""String_Node_Str"");
  prepareSubject();
  _campusConnection.setProfile(""String_Node_Str"");
  addActivities();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent1();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent2();
  _campusConnection.setProfile(""String_Node_Str"");
  addDeliversStudent3();
  _campusConnection.setProfile(""String_Node_Str"");
  checkDelivers1();
  _campusConnection.setProfile(""String_Node_Str"");
  checkDelivers2();
}",0.9314009661835748
98892,"@Test public void testGetOtherUserInfo() throws AuthPelpException {
  Person person=_campusConnection.getUserData(new UserID(""String_Node_Str""));
  Assert.assertNull(person);
}","@Test(expected=AuthPelpException.class) public void testGetOtherUserInfo() throws AuthPelpException {
  Person person=_campusConnection.getUserData(new UserID(""String_Node_Str""));
}",0.8235294117647058
98893,"@Test public void testGetSubjectClassroomsStudent() throws AuthPelpException {
  Subject s=TestPeLP.getLocal(_campusConnection).getTestSubjectByPos(0);
  IClassroomID[] classrooms=_campusConnection.getSubjectClassrooms(s.getID(),UserRoles.Student);
  Assert.assertNotNull(classrooms);
  Assert.assertTrue(""String_Node_Str"",classrooms.length == 1);
  IClassroomID id=TestPeLP.getClassroom(s,0).getClassroomID();
  Assert.assertEquals(TestPeLP.getClassroom(s,0).getClassroomID(),classrooms[0]);
}","@Test public void testGetSubjectClassroomsStudent() throws AuthPelpException {
  Subject s=TestPeLP.getLocal(_campusConnection).getTestSubjectByPos(0);
  IClassroomID[] classrooms=_campusConnection.getSubjectClassrooms(s.getID(),UserRoles.Student);
  Assert.assertNotNull(classrooms);
  Assert.assertTrue(""String_Node_Str"",classrooms.length == 1);
  Assert.assertEquals(TestPeLP.getClassroom(s,1).getClassroomID(),classrooms[0]);
}",0.9297297297297298
98894,"@Test public void testAuthUserIDAccess() throws AuthPelpException {
  IUserID id=_campusConnection.getUserID();
  Assert.assertNotNull(id);
  Assert.assertEquals(((UserID)id).idp,TestPeLP.getUser(_campusConnection,3));
}","@Test public void testAuthUserIDAccess() throws AuthPelpException {
  IUserID id=_campusConnection.getUserID();
  Assert.assertNotNull(id);
  Assert.assertEquals(((UserID)id),TestPeLP.getUser(_campusConnection,3).getUserID());
}",0.9642857142857144
98895,"@Test public void testAuthStudentClassroomAccess() throws AuthPelpException {
  IClassroomID[] classroomsList=_campusConnection.getUserClassrooms(UserRoles.Student);
  Assert.assertNotNull(classroomsList);
  Assert.assertEquals(""String_Node_Str"",classroomsList.length == 1);
  Assert.assertEquals(TestPeLP.getClassroom(_campusConnection,0,0).getClassroomID(),classroomsList[0]);
}","@Test public void testAuthStudentClassroomAccess() throws AuthPelpException {
  IClassroomID[] classroomsList=_campusConnection.getUserClassrooms(UserRoles.Student);
  Assert.assertNotNull(classroomsList);
  Assert.assertTrue(""String_Node_Str"",classroomsList.length == 1);
  Assert.assertEquals(TestPeLP.getClassroom(_campusConnection,0,1).getClassroomID(),classroomsList[0]);
}",0.9841688654353562
98896,"@Test public void testAuthAllUserClassroomsAccess() throws AuthPelpException {
  IClassroomID[] classroomsList=_campusConnection.getUserClassrooms();
  Assert.assertNotNull(classroomsList);
  Assert.assertTrue(""String_Node_Str"",classroomsList.length == 1);
  Assert.assertEquals(TestPeLP.getClassroom(_campusConnection,0,0).getClassroomID(),classroomsList[0]);
}","@Test public void testAuthAllUserClassroomsAccess() throws AuthPelpException {
  IClassroomID[] classroomsList=_campusConnection.getUserClassrooms();
  Assert.assertNotNull(classroomsList);
  Assert.assertTrue(""String_Node_Str"",classroomsList.length == 1);
  Assert.assertEquals(TestPeLP.getClassroom(_campusConnection,0,1).getClassroomID(),classroomsList[0]);
}",0.9972375690607734
98897,"private void createDummyData(){
  _testAccessPersons=new Person[8];
  _testAccessPersons[0]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[0]._eMail=""String_Node_Str"";
  _testAccessPersons[0]._fullName=""String_Node_Str"";
  _testAccessPersons[0]._name=""String_Node_Str"";
  _testAccessPersons[1]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[1]._eMail=""String_Node_Str"";
  _testAccessPersons[1]._fullName=""String_Node_Str"";
  _testAccessPersons[1]._name=""String_Node_Str"";
  _testAccessPersons[2]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[2]._eMail=""String_Node_Str"";
  _testAccessPersons[2]._fullName=""String_Node_Str"";
  _testAccessPersons[2]._name=""String_Node_Str"";
  _testAccessPersons[3]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[3]._eMail=""String_Node_Str"";
  _testAccessPersons[3]._fullName=""String_Node_Str"";
  _testAccessPersons[3]._name=""String_Node_Str"";
  _testAccessPersons[4]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[4]._eMail=""String_Node_Str"";
  _testAccessPersons[4]._fullName=""String_Node_Str"";
  _testAccessPersons[4]._name=""String_Node_Str"";
  _testAccessPersons[5]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[5]._eMail=""String_Node_Str"";
  _testAccessPersons[5]._fullName=""String_Node_Str"";
  _testAccessPersons[5]._name=""String_Node_Str"";
  _testAccessPersons[6]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[6]._eMail=""String_Node_Str"";
  _testAccessPersons[6]._fullName=""String_Node_Str"";
  _testAccessPersons[6]._name=""String_Node_Str"";
  _testAccessPersons[7]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[7]._eMail=""String_Node_Str"";
  _testAccessPersons[7]._fullName=""String_Node_Str"";
  _testAccessPersons[7]._name=""String_Node_Str"";
  _dummyUsers.clear();
  _dummyUsers.put((UserID)_testAccessPersons[0].getUserID(),_testAccessPersons[0]);
  _dummyUsers.put((UserID)_testAccessPersons[1].getUserID(),_testAccessPersons[1]);
  _dummyUsers.put((UserID)_testAccessPersons[2].getUserID(),_testAccessPersons[2]);
  _dummyUsers.put((UserID)_testAccessPersons[3].getUserID(),_testAccessPersons[3]);
  _dummyUsers.put((UserID)_testAccessPersons[4].getUserID(),_testAccessPersons[4]);
  _dummyUsers.put((UserID)_testAccessPersons[5].getUserID(),_testAccessPersons[5]);
  _dummyUsers.put((UserID)_testAccessPersons[6].getUserID(),_testAccessPersons[6]);
  _dummyUsers.put((UserID)_testAccessPersons[7].getUserID(),_testAccessPersons[7]);
  try {
    _dummySemesters.clear();
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",DateFormat.getDateInstance().parse(""String_Node_Str""),DateFormat.getDateInstance().parse(""String_Node_Str"")));
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",DateFormat.getDateInstance().parse(""String_Node_Str""),DateFormat.getDateInstance().parse(""String_Node_Str"")));
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",DateFormat.getDateInstance().parse(""String_Node_Str""),DateFormat.getDateInstance().parse(""String_Node_Str"")));
  }
 catch (  ParseException ex) {
    Logger.getLogger(LocalCampusConnection.class.getName()).log(Level.SEVERE,null,ex);
  }
  _testAccessSubjects=new Subject[4];
  SubjectID sid1=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[0]=new Subject(sid1);
  _testAccessSubjects[0].addMainTeacher(getTestPersonByPos(1));
  _testAccessSubjects[0].setDescription(""String_Node_Str"");
  _testAccessSubjects[0].setShortName(""String_Node_Str"");
  SubjectID sid2=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[1]=new Subject(sid2);
  _testAccessSubjects[1].setDescription(""String_Node_Str"");
  _testAccessSubjects[1].setShortName(""String_Node_Str"");
  SubjectID sid3=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[2]=new Subject(sid3);
  _testAccessSubjects[2].setDescription(""String_Node_Str"");
  _testAccessSubjects[2].setShortName(""String_Node_Str"");
  Classroom cr1=new Classroom(new ClassroomID(sid1,1));
  cr1.addTeacher(getTestPersonByPos(2));
  cr1.addStudent(getTestPersonByPos(3));
  cr1.addStudent(getTestPersonByPos(4));
  Classroom cr2=new Classroom(new ClassroomID(sid1,2));
  cr2.addTeacher(getTestPersonByPos(5));
  cr2.addStudent(getTestPersonByPos(6));
  _testAccessSubjects[0].addClassroom(cr1);
  _testAccessSubjects[0].addClassroom(cr2);
  _dummySubjects.clear();
  _dummySubjects.put((SubjectID)_testAccessSubjects[0].getID(),_testAccessSubjects[0]);
  _dummySubjects.put((SubjectID)_testAccessSubjects[1].getID(),_testAccessSubjects[1]);
  _dummySubjects.put((SubjectID)_testAccessSubjects[2].getID(),_testAccessSubjects[2]);
}","private void createDummyData(){
  _testAccessPersons=new Person[8];
  _testAccessPersons[0]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[0]._eMail=""String_Node_Str"";
  _testAccessPersons[0]._fullName=""String_Node_Str"";
  _testAccessPersons[0]._name=""String_Node_Str"";
  _testAccessPersons[1]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[1]._eMail=""String_Node_Str"";
  _testAccessPersons[1]._fullName=""String_Node_Str"";
  _testAccessPersons[1]._name=""String_Node_Str"";
  _testAccessPersons[2]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[2]._eMail=""String_Node_Str"";
  _testAccessPersons[2]._fullName=""String_Node_Str"";
  _testAccessPersons[2]._name=""String_Node_Str"";
  _testAccessPersons[3]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[3]._eMail=""String_Node_Str"";
  _testAccessPersons[3]._fullName=""String_Node_Str"";
  _testAccessPersons[3]._name=""String_Node_Str"";
  _testAccessPersons[4]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[4]._eMail=""String_Node_Str"";
  _testAccessPersons[4]._fullName=""String_Node_Str"";
  _testAccessPersons[4]._name=""String_Node_Str"";
  _testAccessPersons[5]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[5]._eMail=""String_Node_Str"";
  _testAccessPersons[5]._fullName=""String_Node_Str"";
  _testAccessPersons[5]._name=""String_Node_Str"";
  _testAccessPersons[6]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[6]._eMail=""String_Node_Str"";
  _testAccessPersons[6]._fullName=""String_Node_Str"";
  _testAccessPersons[6]._name=""String_Node_Str"";
  _testAccessPersons[7]=new Person(((IUserID)new UserID(""String_Node_Str"")));
  _testAccessPersons[7]._eMail=""String_Node_Str"";
  _testAccessPersons[7]._fullName=""String_Node_Str"";
  _testAccessPersons[7]._name=""String_Node_Str"";
  _dummyUsers.clear();
  _dummyUsers.put((UserID)_testAccessPersons[0].getUserID(),_testAccessPersons[0]);
  _dummyUsers.put((UserID)_testAccessPersons[1].getUserID(),_testAccessPersons[1]);
  _dummyUsers.put((UserID)_testAccessPersons[2].getUserID(),_testAccessPersons[2]);
  _dummyUsers.put((UserID)_testAccessPersons[3].getUserID(),_testAccessPersons[3]);
  _dummyUsers.put((UserID)_testAccessPersons[4].getUserID(),_testAccessPersons[4]);
  _dummyUsers.put((UserID)_testAccessPersons[5].getUserID(),_testAccessPersons[5]);
  _dummyUsers.put((UserID)_testAccessPersons[6].getUserID(),_testAccessPersons[6]);
  _dummyUsers.put((UserID)_testAccessPersons[7].getUserID(),_testAccessPersons[7]);
  try {
    DateFormat df=new SimpleDateFormat(""String_Node_Str"");
    _dummySemesters.clear();
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",df.parse(""String_Node_Str""),df.parse(""String_Node_Str"")));
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",df.parse(""String_Node_Str""),df.parse(""String_Node_Str"")));
    _dummySemesters.put(""String_Node_Str"",new Semester(""String_Node_Str"",df.parse(""String_Node_Str""),df.parse(""String_Node_Str"")));
  }
 catch (  ParseException ex) {
    Logger.getLogger(LocalCampusConnection.class.getName()).log(Level.SEVERE,null,ex);
  }
  _testAccessSubjects=new Subject[4];
  SubjectID sid1=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[0]=new Subject(sid1);
  _testAccessSubjects[0].addMainTeacher(getTestPersonByPos(1));
  _testAccessSubjects[0].setDescription(""String_Node_Str"");
  _testAccessSubjects[0].setShortName(""String_Node_Str"");
  SubjectID sid2=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[1]=new Subject(sid2);
  _testAccessSubjects[1].setDescription(""String_Node_Str"");
  _testAccessSubjects[1].setShortName(""String_Node_Str"");
  SubjectID sid3=new SubjectID(""String_Node_Str"",_dummySemesters.get(""String_Node_Str""));
  _testAccessSubjects[2]=new Subject(sid3);
  _testAccessSubjects[2].setDescription(""String_Node_Str"");
  _testAccessSubjects[2].setShortName(""String_Node_Str"");
  Classroom cr1=new Classroom(new ClassroomID(sid1,1));
  cr1.addTeacher(getTestPersonByPos(2));
  cr1.addStudent(getTestPersonByPos(3));
  cr1.addStudent(getTestPersonByPos(4));
  Classroom cr2=new Classroom(new ClassroomID(sid1,2));
  cr2.addTeacher(getTestPersonByPos(5));
  cr2.addStudent(getTestPersonByPos(6));
  _testAccessSubjects[0].addClassroom(cr1);
  _testAccessSubjects[0].addClassroom(cr2);
  _dummySubjects.clear();
  _dummySubjects.put((SubjectID)_testAccessSubjects[0].getID(),_testAccessSubjects[0]);
  _dummySubjects.put((SubjectID)_testAccessSubjects[1].getID(),_testAccessSubjects[1]);
  _dummySubjects.put((SubjectID)_testAccessSubjects[2].getID(),_testAccessSubjects[2]);
}",0.9752254586918212
98898,"public Person getUserData(IUserID userID) throws AuthPelpException {
  assert(userID != null);
  if (userID.equals(getUserID())) {
    return _dummyUsers.get((UserID)userID);
  }
  if (_dummySubjects != null) {
    for (    Subject s : _dummySubjects.values()) {
      if ((isRole(UserRoles.Teacher,s.getID()) && isRole(UserRoles.Student,s.getID(),userID)) || (isRole(UserRoles.MainTeacher,s.getID()) && isRole(UserRoles.Student,s.getID(),userID)) || (isRole(UserRoles.Student,s.getID()) && isRole(UserRoles.Teacher,s.getID(),userID))|| (isRole(UserRoles.Student,s.getID()) && isRole(UserRoles.MainTeacher,s.getID(),userID))) {
        return _dummyUsers.get((UserID)userID);
      }
    }
  }
  return null;
}","public Person getUserData(IUserID userID) throws AuthPelpException {
  assert(userID != null);
  if (userID.equals(getUserID())) {
    return _dummyUsers.get((UserID)userID);
  }
  if (_dummySubjects != null) {
    for (    Subject s : _dummySubjects.values()) {
      if ((isRole(UserRoles.MainTeacher,s.getID()) && isRole(UserRoles.Student,s.getID(),userID)) || (isRole(UserRoles.Student,s.getID()) && isRole(UserRoles.MainTeacher,s.getID(),userID))) {
        return _dummyUsers.get((UserID)userID);
      }
      if ((isRole(UserRoles.Teacher,s.getID()) && isRole(UserRoles.Student,s.getID(),userID)) || (isRole(UserRoles.Student,s.getID()) && isRole(UserRoles.Teacher,s.getID(),userID))) {
        if (s.getClassrooms() != null) {
          for (          Classroom c : s.getClassrooms().values()) {
            if ((isRole(UserRoles.Teacher,c.getClassroomID()) && isRole(UserRoles.Student,c.getClassroomID(),userID)) || (isRole(UserRoles.Student,c.getClassroomID()) && isRole(UserRoles.Teacher,c.getClassroomID(),userID))) {
              return _dummyUsers.get((UserID)userID);
            }
          }
        }
      }
    }
  }
  throw new AuthPelpException(""String_Node_Str"");
}",0.7094736842105264
98899,"/** 
 * Warps a player.
 * @param player      the player to port.
 * @param currentPort the current port to warp from.
 * @throws WarpException thrown if the player couldn't get warped.
 */
public void teleportPlayer(Player player,TravelPort currentPort){
  TravelPort targetPort=travelPortContainer.get(currentPort.getTargetId());
  if (targetPort != null) {
    Location currentPlayer=player.getLocation();
    Location currentEdge1=currentPort.getEdge1();
    Location targetEdge1=targetPort.getEdge1();
    double playerOffsetX=currentEdge1.getX() - currentPlayer.getX();
    double playerOffsetY=currentEdge1.getY() - currentPlayer.getY();
    double playerOffsetZ=currentEdge1.getZ() - currentPlayer.getZ();
    Location targetPlayer=new Location(targetEdge1.getWorld(),targetEdge1.getX() - playerOffsetX,targetEdge1.getY() - playerOffsetY,targetEdge1.getZ() - playerOffsetZ);
    player.teleport(targetPlayer);
    playerListener.onPlayerTraveled(player,currentPort,targetPort);
  }
 else {
    String exceptionMessage=String.format(""String_Node_Str"",currentPort.getName(),currentPort.getId(),currentPort.getTargetId());
    throw new WarpException(exceptionMessage);
  }
}","/** 
 * Warps a player.
 * @param player      the player to port.
 * @param currentPort the current port to warp from.
 * @throws WarpException thrown if the player couldn't get warped.
 */
public void teleportPlayer(Player player,TravelPort currentPort){
  Integer targetId=currentPort.getTargetId();
  if (targetId != null) {
    TravelPort targetPort=travelPortContainer.get(targetId);
    Location currentPlayer=player.getLocation();
    Location currentEdge1=currentPort.getEdge1();
    Location targetEdge1=targetPort.getEdge1();
    double playerOffsetX=currentEdge1.getX() - currentPlayer.getX();
    double playerOffsetY=currentEdge1.getY() - currentPlayer.getY();
    double playerOffsetZ=currentEdge1.getZ() - currentPlayer.getZ();
    Location targetPlayer=new Location(targetEdge1.getWorld(),targetEdge1.getX() - playerOffsetX,targetEdge1.getY() - playerOffsetY,targetEdge1.getZ() - playerOffsetZ);
    player.teleport(targetPlayer);
    playerListener.onPlayerTraveled(player,currentPort,targetPort);
  }
 else {
    String exceptionMessage=String.format(""String_Node_Str"",currentPort.getName(),currentPort.getId(),currentPort.getTargetId());
    throw new WarpException(exceptionMessage);
  }
}",0.9326077856843868
98900,"/** 
 * Setups the WorldEdit client. 
 */
private void setupWorldEdit(){
  Plugin plugin=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    worldEditPlugin=(WorldEditPlugin)plugin;
  }
 else {
    logger.severe(String.format(""String_Node_Str"",getDescription().getName()));
    this.setEnabled(false);
  }
}","/** 
 * Setups the WorldEdit client. 
 */
private void setupWorldEdit(){
  Plugin plugin=getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    worldEditPlugin=(WorldEditPlugin)plugin;
    logger.info(String.format(""String_Node_Str"",getDescription().getName()));
  }
 else {
    logger.severe(String.format(""String_Node_Str"",getDescription().getName()));
    this.setEnabled(false);
  }
}",0.8981723237597912
98901,"/** 
 * Loads TravelPorts out of a file into the passed Hashtable.
 * @param server  the server used for searching the worlds.
 * @param cvsFile the file to load.
 * @param ports   the Hashtable used to store the loaded TravelPorts.
 * @throws IOException thrown when there are problems in reading the file.
 */
static void loadPorts(Server server,Hashtable<Integer,TravelPort> ports,File cvsFile) throws IOException {
  ports.clear();
  Scanner scanner=new Scanner(new FileReader(cvsFile));
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    try {
      String[] lineParts=line.split(""String_Node_Str"");
      if (lineParts.length == CSV_COLUMNS) {
        TravelPort port=new TravelPort(new Integer(lineParts[INDEX_ID]));
        port.setName(lineParts[INDEX_NAME]);
        if (!""String_Node_Str"".equals(lineParts[INDEX_TARGET])) {
          port.setTargetId(new Integer(lineParts[INDEX_TARGET]));
        }
        if (!""String_Node_Str"".equals(lineParts[INDEX_PASSWORD])) {
          port.setPassword(lineParts[INDEX_PASSWORD]);
        }
        if (!""String_Node_Str"".equals(lineParts[INDEX_SPEAKER])) {
          port.setSpeaker(new Speaker(lineParts[INDEX_SPEAKER]));
        }
        port.setPrice(Double.parseDouble(lineParts[INDEX_PRICE]));
        World world=server.getWorld(lineParts[INDEX_WORLD]);
        Double edge1X=Double.parseDouble(lineParts[INDEX_EDGE1_X]);
        Double edge1Y=Double.parseDouble(lineParts[INDEX_EDGE1_Y]);
        Double edge1Z=Double.parseDouble(lineParts[INDEX_EDGE1_Z]);
        Location edge1=new Location(world,edge1X,edge1Y,edge1Z);
        port.setEdge1(edge1);
        Double edge2X=Double.parseDouble(lineParts[INDEX_EDGE2_X]);
        Double edge2Y=Double.parseDouble(lineParts[INDEX_EDGE2_Y]);
        Double edge2Z=Double.parseDouble(lineParts[INDEX_EDGE2_Z]);
        Location edge2=new Location(world,edge2X,edge2Y,edge2Z);
        port.setEdge2(edge2);
      }
 else {
        server.getLogger().warning(String.format(""String_Node_Str"",line));
      }
    }
 catch (    NumberFormatException e) {
      server.getLogger().warning(String.format(""String_Node_Str"",line));
    }
  }
  scanner.close();
  server.getLogger().info(String.format(""String_Node_Str"",ports.size()));
}","/** 
 * Loads TravelPorts out of a file into the passed Hashtable.
 * @param server  the server used for searching the worlds.
 * @param csvFile the file to load.
 * @param ports   the Hashtable used to store the loaded TravelPorts.
 * @throws IOException thrown when there are problems in reading the file.
 */
static void loadPorts(Server server,Hashtable<Integer,TravelPort> ports,File csvFile) throws IOException {
  ports.clear();
  Scanner scanner=new Scanner(new FileReader(csvFile));
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    try {
      String[] lineParts=line.split(""String_Node_Str"");
      if (lineParts.length == CSV_COLUMNS) {
        TravelPort port=new TravelPort(new Integer(lineParts[INDEX_ID]));
        port.setName(lineParts[INDEX_NAME]);
        if (!""String_Node_Str"".equals(lineParts[INDEX_TARGET])) {
          port.setTargetId(new Integer(lineParts[INDEX_TARGET]));
        }
        if (!""String_Node_Str"".equals(lineParts[INDEX_PASSWORD])) {
          port.setPassword(lineParts[INDEX_PASSWORD]);
        }
        if (!""String_Node_Str"".equals(lineParts[INDEX_SPEAKER])) {
          port.setSpeaker(new Speaker(lineParts[INDEX_SPEAKER]));
        }
        port.setPrice(Double.parseDouble(lineParts[INDEX_PRICE]));
        World world=server.getWorld(lineParts[INDEX_WORLD]);
        Double edge1X=Double.parseDouble(lineParts[INDEX_EDGE1_X]);
        Double edge1Y=Double.parseDouble(lineParts[INDEX_EDGE1_Y]);
        Double edge1Z=Double.parseDouble(lineParts[INDEX_EDGE1_Z]);
        Location edge1=new Location(world,edge1X,edge1Y,edge1Z);
        port.setEdge1(edge1);
        Double edge2X=Double.parseDouble(lineParts[INDEX_EDGE2_X]);
        Double edge2Y=Double.parseDouble(lineParts[INDEX_EDGE2_Y]);
        Double edge2Z=Double.parseDouble(lineParts[INDEX_EDGE2_Z]);
        Location edge2=new Location(world,edge2X,edge2Y,edge2Z);
        port.setEdge2(edge2);
        ports.put(port.getId(),port);
      }
 else {
        server.getLogger().warning(String.format(""String_Node_Str"",line));
      }
    }
 catch (    NumberFormatException e) {
      server.getLogger().warning(String.format(""String_Node_Str"",line));
    }
  }
  scanner.close();
  server.getLogger().info(String.format(""String_Node_Str"",ports.size()));
}",0.9903339191564148
98902,"/** 
 * Creates a new instance of the PortCommandExecutor.
 * @param plugin the plugin which holds the instance.
 */
public PortCommandExecutor(TravelPlugin plugin){
  this.plugin=plugin;
  subCommands=new HashMap<String,SubCommandExecutor>();
  subCommands.put(""String_Node_Str"",new PortHelpCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortCreateCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortRemoveCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortLinkCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortUnlinkCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortDestinationCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortInfoCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortListCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortSearchCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortCompassCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortPriceCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortOwnerCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortSaveCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortReloadCommandExecutor(plugin,this));
}","/** 
 * Creates a new instance of the PortCommandExecutor.
 * @param plugin the plugin which holds the instance.
 */
public PortCommandExecutor(TravelPlugin plugin){
  this.plugin=plugin;
  subCommands=new HashMap<String,SubCommandExecutor>();
  subCommands.put(""String_Node_Str"",new PortHelpCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortCreateCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortRemoveCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortLinkCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortUnlinkCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortDestinationCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortInfoCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortListCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortSearchCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortCompassCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortWarpCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortPriceCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortOwnerCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortSaveCommandExecutor(plugin,this));
  subCommands.put(""String_Node_Str"",new PortReloadCommandExecutor(plugin,this));
}",0.968495575221239
98903,"/** 
 * Called when the player uses the parentCommand.
 * @param sender        the sender of the command.
 * @param parentCommand the parent command.
 * @param label         the label of the parent command.
 * @param args          the arguments passed to the parentCommand. (Index 0 = the label of the sub parentCommanditself!)
 * @return true, if the SubCommandExecutor could handle the parentCommand.
 */
@Override public boolean onCommand(CommandSender sender,Command parentCommand,String label,String[] args){
  PermissionsHandler permissionsHandler=plugin.getPermissionsHandler();
  sender.sendMessage(ChatColor.GREEN + String.format(""String_Node_Str"",plugin.getDescription().getName(),plugin.getDescription().getVersion()));
  Collection<SubCommandExecutor> commands=((PortCommandExecutor)this.parent).getSubCommands().values();
  for (  SubCommandExecutor command : commands) {
    Permission permission=command.getRequiredPermission();
    if (permission == null || permissionsHandler.hasPermission(sender,permission)) {
      String helpLine=String.format(""String_Node_Str"",ChatColor.GRAY,command.getUsage().replace(""String_Node_Str"",label),ChatColor.WHITE,command.getDescription());
      sender.sendMessage(helpLine);
    }
  }
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
  return true;
}","/** 
 * Called when the player uses the parentCommand.
 * @param sender        the sender of the command.
 * @param parentCommand the parent command.
 * @param label         the label of the parent command.
 * @param args          the arguments passed to the parentCommand. (Index 0 = the label of the sub parentCommanditself!)
 * @return true, if the SubCommandExecutor could handle the parentCommand.
 */
@Override public boolean onCommand(CommandSender sender,Command parentCommand,String label,String[] args){
  PermissionsHandler permissionsHandler=plugin.getPermissionsHandler();
  sender.sendMessage(ChatColor.GREEN + String.format(""String_Node_Str"",plugin.getDescription().getName(),plugin.getDescription().getVersion()));
  Map<String,SubCommandExecutor> commandMap=((PortCommandExecutor)this.parent).getSubCommands();
  List<String> commands=new LinkedList<String>(commandMap.keySet());
  Collections.sort(commands);
  for (  String command : commands) {
    SubCommandExecutor commandExecutor=commandMap.get(command);
    Permission permission=commandExecutor.getRequiredPermission();
    if (permission == null || permissionsHandler.hasPermission(sender,permission)) {
      String helpLine=String.format(""String_Node_Str"",ChatColor.GRAY,commandExecutor.getUsage().replace(""String_Node_Str"",label),ChatColor.WHITE,commandExecutor.getDescription());
      sender.sendMessage(helpLine);
    }
  }
  sender.sendMessage(""String_Node_Str"");
  sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"");
  return true;
}",0.9179986101459346
98904,"/** 
 * Puts the TravelPorts into a csv file.
 * @param travelPorts the ports to save.
 * @param csvFile     the file to save.
 * @throws java.io.IOException thrown when there is an error during writing.
 */
static void savePorts(Map<Integer,TravelPort> travelPorts,File csvFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(csvFile));
  for (  TravelPort port : travelPorts.values()) {
    StringBuilder line=new StringBuilder();
    for (int index=0; index < CSV_COLUMNS; ++index) {
switch (index) {
case INDEX_ID:
        line.append(port.getId());
      break;
case INDEX_NAME:
    line.append(port.getName());
  break;
case INDEX_TARGET:
line.append(port.getTargetId());
break;
case INDEX_OWNER:
line.append(port.getOwner());
break;
case INDEX_ALLOWED:
if (port.isAllowedToEverybody()) {
line.append(""String_Node_Str"");
}
 else {
line.append(StringHelper.encode(port.getAllowed()));
}
break;
case INDEX_PASSWORD:
line.append(port.getPassword());
break;
case INDEX_PRICE:
line.append(port.getPrice());
break;
case INDEX_WORLD:
line.append(port.getEdge1().getWorld().getName());
break;
case INDEX_EDGE1_X:
line.append(port.getEdge1().getBlockX());
break;
case INDEX_EDGE1_Y:
line.append(port.getEdge1().getBlockY());
break;
case INDEX_EDGE1_Z:
line.append(port.getEdge1().getBlockZ());
break;
case INDEX_EDGE2_X:
line.append(port.getEdge2().getBlockX());
break;
case INDEX_EDGE2_Y:
line.append(port.getEdge2().getBlockY());
break;
case INDEX_EDGE2_Z:
line.append(port.getEdge2().getBlockY());
break;
case INDEX_DESTINATION_X:
line.append(port.getDestination().getBlockX());
break;
case INDEX_DESTINATION_Y:
line.append(port.getDestination().getBlockY());
break;
case INDEX_DESTINATION_Z:
line.append(port.getDestination().getBlockY());
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (index + 1 < CSV_COLUMNS) {
line.append(""String_Node_Str"");
}
}
writer.append(line.toString());
writer.newLine();
}
writer.close();
}","/** 
 * Puts the TravelPorts into a csv file.
 * @param travelPorts the ports to save.
 * @param csvFile     the file to save.
 * @throws java.io.IOException thrown when there is an error during writing.
 */
static void savePorts(Map<Integer,TravelPort> travelPorts,File csvFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(csvFile));
  for (  TravelPort port : travelPorts.values()) {
    StringBuilder line=new StringBuilder();
    for (int index=0; index < CSV_COLUMNS; ++index) {
switch (index) {
case INDEX_ID:
        line.append(port.getId());
      break;
case INDEX_NAME:
    line.append(port.getName());
  break;
case INDEX_TARGET:
line.append(port.getTargetId());
break;
case INDEX_OWNER:
line.append(port.getOwner());
break;
case INDEX_ALLOWED:
if (port.isAllowedToEverybody()) {
line.append(""String_Node_Str"");
}
 else {
line.append(StringHelper.encode(port.getAllowed()));
}
break;
case INDEX_PASSWORD:
line.append(port.getPassword());
break;
case INDEX_PRICE:
line.append(port.getPrice());
break;
case INDEX_WORLD:
line.append(port.getEdge1().getWorld().getName());
break;
case INDEX_EDGE1_X:
line.append(port.getEdge1().getX());
break;
case INDEX_EDGE1_Y:
line.append(port.getEdge1().getY());
break;
case INDEX_EDGE1_Z:
line.append(port.getEdge1().getZ());
break;
case INDEX_EDGE2_X:
line.append(port.getEdge2().getX());
break;
case INDEX_EDGE2_Y:
line.append(port.getEdge2().getY());
break;
case INDEX_EDGE2_Z:
line.append(port.getEdge2().getZ());
break;
case INDEX_DESTINATION_X:
line.append(port.getDestination().getX());
break;
case INDEX_DESTINATION_Y:
line.append(port.getDestination().getY());
break;
case INDEX_DESTINATION_Z:
line.append(port.getDestination().getZ());
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (index + 1 < CSV_COLUMNS) {
line.append(""String_Node_Str"");
}
}
writer.append(line.toString());
writer.newLine();
}
writer.close();
}",0.9823303457106274
98905,"@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  Player p=(Player)sender;
  String[] trimmedArgs=args;
  List<String> voxelplugins=updateManager.getListofPlugins();
  String comm=command.getName().toLowerCase();
  if (admns.contains(p.getName())) {
    if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
      for (      String plugin : voxelplugins) {
        boolean isEnabled=s.getPluginManager().isPluginEnabled(plugin);
        boolean isInstalled=updateManager.isInstalled(plugin);
        if (isInstalled) {
          if (isEnabled) {
            if (updateManager.needsUpdate(plugin)) {
              p.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ((updateManager.isBeta(plugin)) ? (""String_Node_Str"") : (""String_Node_Str"")));
            }
 else {
              p.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            }
          }
 else {
            p.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
          }
        }
 else {
          p.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!updateManager.getListofPlugins().contains(trimmedArgs[0])) {
          p.sendMessage(ChatColor.RED + ""String_Node_Str"" + trimmedArgs[0]+ ""String_Node_Str"");
          return true;
        }
        if (updateManager.doDownload(trimmedArgs[0])) {
          p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ trimmedArgs[0]+ ChatColor.WHITE+ ""String_Node_Str"");
        }
 else {
          p.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        p.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!updateManager.getListofPlugins().contains(trimmedArgs[0])) {
          p.sendMessage(ChatColor.RED + ""String_Node_Str"" + trimmedArgs[0]+ ""String_Node_Str"");
          return true;
        }
        if (updateManager.needsUpdate(trimmedArgs[0])) {
          if (updateManager.doDownload(trimmedArgs[0])) {
            p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ trimmedArgs[0]+ ChatColor.WHITE+ ""String_Node_Str"");
          }
 else {
            p.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      for (      String tempplugin : voxelplugins) {
        p.sendMessage(tempplugin + ""String_Node_Str"" + updateManager.get(tempplugin,""String_Node_Str""));
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String[] trimmedArgs=args;
  List<String> voxelplugins=updateManager.getListofPlugins();
  String comm=command.getName().toLowerCase();
  if (admns.contains(sender.getName()) || sender instanceof ConsoleCommandSender || sender instanceof RemoteConsoleCommandSender) {
    if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
      for (      String plugin : voxelplugins) {
        boolean isEnabled=s.getPluginManager().isPluginEnabled(plugin);
        boolean isInstalled=updateManager.isInstalled(plugin);
        if (isInstalled) {
          if (isEnabled) {
            if (updateManager.needsUpdate(plugin)) {
              sender.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ((updateManager.isBeta(plugin)) ? (""String_Node_Str"") : (""String_Node_Str"")));
            }
 else {
              sender.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
            }
          }
 else {
            sender.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
          }
        }
 else {
          sender.sendMessage(""String_Node_Str"" + plugin + ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!updateManager.getListofPlugins().contains(trimmedArgs[0])) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + trimmedArgs[0]+ ""String_Node_Str"");
          return true;
        }
        if (updateManager.doDownload(trimmedArgs[0])) {
          sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ trimmedArgs[0]+ ChatColor.WHITE+ ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length == 0) {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
      }
 else {
        if (!updateManager.getListofPlugins().contains(trimmedArgs[0])) {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + trimmedArgs[0]+ ""String_Node_Str"");
          return true;
        }
        if (updateManager.needsUpdate(trimmedArgs[0])) {
          if (updateManager.doDownload(trimmedArgs[0])) {
            sender.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ trimmedArgs[0]+ ChatColor.WHITE+ ""String_Node_Str"");
          }
 else {
            sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
      return true;
    }
 else     if (comm.equalsIgnoreCase(""String_Node_Str"")) {
      for (      String tempplugin : voxelplugins) {
        sender.sendMessage(tempplugin + ""String_Node_Str"" + updateManager.get(tempplugin,""String_Node_Str""));
      }
      return true;
    }
  }
  return false;
}",0.9405940594059404
98906,"public void animObject(String animid,String objectid,String data,String delaydata,String callback){
  if (mAnimations.containsKey(animid) == false) {
    return;
  }
  LayoutItem item=mApp.objects().get(objectid);
  GameonModelRef ref=item.mModelRef;
  int[] intdata=new int[2];
  int count=ServerkoParse.parseIntArray(intdata,delaydata);
  AnimType atype=mAnimations.get(animid);
  int repeat=atype.repeat;
  int delay=atype.delay;
  if (count >= 1)   delay=intdata[0];
  if (count == 2)   repeat=intdata[1];
  buildObjectAdata(ref,atype,delay,repeat,data,callback);
}","public void animObject(String animid,String objectid,String data,String delaydata,String callback){
  if (mAnimations.containsKey(animid) == false) {
    return;
  }
  GameonModelRef ref=mApp.objects().getRef(objectid);
  int[] intdata=new int[2];
  int count=ServerkoParse.parseIntArray(intdata,delaydata);
  AnimType atype=mAnimations.get(animid);
  int repeat=atype.repeat;
  int delay=atype.delay;
  if (count >= 1)   delay=intdata[0];
  if (count == 2)   repeat=intdata[1];
  buildObjectAdata(ref,atype,delay,repeat,data,callback);
}",0.934056007226739
98907,"public void setTextureOffset(int w,int h){
  mTextureW=w;
  mTextureH=h;
  mTextureOffset=0;
}","public void setTextureOffset(int w,int h){
  if (w > 0)   mTextureW=w;
  if (h > 0)   mTextureH=h;
  mTextureOffset=0;
}",0.8785046728971962
98908,"public boolean drawRef(GL2 gl,GameonModelRef ref,boolean initRef){
  if (!mEnabled || mIndexCount == 0) {
    return true;
  }
  if (ref.animating()) {
    ref.animate(mApp.frameDelta());
  }
  if (!ref.getVisible() || !ref.mEnabled) {
    return true;
  }
  if (initRef) {
    setupRef(gl);
  }
  if (ref.mTransformOwner) {
    if (ref.mOwner >= 0 && ref.mOwner < ref.mOwnerMax)     mTextureOffset=mTextureBuffer.capacity() * ref.mOwner / ref.mOwnerMax;
 else     System.out.println(""String_Node_Str"" + ref.mOwner);
  }
  mColorBuffer.position(0);
  mVertexBuffer.position(mVertexOffset);
  mTextureBuffer.position(mTextureOffset);
  mIndexBuffer.position(0);
  if (mColorBuffer.remaining() == 0) {
    System.out.println(""String_Node_Str"" + mName);
    return false;
  }
  gl.glVertexPointer(3,GL.GL_FLOAT,0,mVertexBuffer);
  gl.glColorPointer(4,GL.GL_UNSIGNED_BYTE,0,mColorBuffer);
  gl.glTexCoordPointer(2,GL.GL_FLOAT,0,mTextureBuffer);
  gl.glPushMatrix();
  gl.glMultMatrixf(ref.matrix(),0);
  if (mIndexCount > 0) {
    gl.glDrawElements(GL.GL_TRIANGLES,mIndexCount,GL.GL_UNSIGNED_SHORT,mIndexBuffer);
  }
  gl.glPopMatrix();
  return false;
}","public boolean drawRef(GL2 gl,GameonModelRef ref,boolean initRef){
  if (!mEnabled || mIndexCount == 0) {
    return true;
  }
  if (ref.animating()) {
    ref.animate(mApp.frameDelta());
  }
  if (!ref.getVisible() || !ref.mEnabled) {
    return true;
  }
  if (initRef) {
    setupRef(gl);
  }
  if (ref.mTransformOwner) {
    if (ref.mOwner >= 0 && ref.mOwner < ref.mOwnerMax)     mTextureOffset=mTextureBuffer.capacity() * ref.mOwner / ref.mOwnerMax;
 else     System.out.println(""String_Node_Str"" + ref.mOwner);
  }
 else {
    mTextureOffset=0;
  }
  mColorBuffer.position(0);
  mVertexBuffer.position(mVertexOffset);
  mTextureBuffer.position(mTextureOffset);
  mIndexBuffer.position(0);
  if (mColorBuffer.remaining() == 0) {
    System.out.println(""String_Node_Str"" + mName);
    return false;
  }
  gl.glVertexPointer(3,GL.GL_FLOAT,0,mVertexBuffer);
  gl.glColorPointer(4,GL.GL_UNSIGNED_BYTE,0,mColorBuffer);
  gl.glTexCoordPointer(2,GL.GL_FLOAT,0,mTextureBuffer);
  gl.glPushMatrix();
  gl.glMultMatrixf(ref.matrix(),0);
  if (mIndexCount > 0) {
    gl.glDrawElements(GL.GL_TRIANGLES,mIndexCount,GL.GL_UNSIGNED_SHORT,mIndexBuffer);
  }
  gl.glPopMatrix();
  return false;
}",0.9854327335047128
98909,"void onEvent2(GL2 gl,JSONObject response){
  try {
    String respid=response.getString(""String_Node_Str"");
    String respdata=null;
    String respdata2=null;
    String respdata3=null;
    String respdata4=null;
    String resptype=response.getString(""String_Node_Str"");
    if (response.has(""String_Node_Str"")) {
      respdata=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata2=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata3=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata4=response.getString(""String_Node_Str"");
    }
    int eventid=Integer.parseInt(respid);
switch (eventid) {
case 100:
      sendEvent(resptype,respdata);
    break;
case 101:
  sendExec(resptype,respdata);
break;
case 102:
loadModule(resptype,respdata);
break;
case 103:
loadModule2(resptype,respdata);
break;
case 200:
setEnv(resptype,respdata);
break;
case 1002:
onTextInput(resptype,respdata);
break;
case 1200:
goUrl(resptype,respdata);
break;
case 2600:
mSettings.open();
break;
case 2601:
mSettings.save();
break;
case 2610:
mSettings.writeInt(resptype,respdata);
break;
case 2611:
mSettings.writeStr(resptype,respdata);
break;
case 2620:
mSettings.loadInt(resptype,respdata);
break;
case 2621:
mSettings.loadStr(resptype,respdata);
break;
case 2622:
mSettings.loadArray(resptype,respdata);
break;
case 4000:
mTextures.newTexture(gl,resptype,respdata,true);
break;
case 4001:
mTextures.deleteTexture(gl,resptype);
break;
case 4100:
mObjectsFact.create(resptype,respdata);
break;
case 4110:
mObjectsFact.place(resptype,respdata);
break;
case 4120:
mObjectsFact.scale(resptype,respdata);
break;
case 4130:
mObjectsFact.texture(resptype,respdata);
break;
case 4140:
mObjectsFact.state(resptype,respdata);
break;
case 4150:
mObjectsFact.remove(resptype,respdata);
break;
case 4160:
mObjectsFact.rotate(resptype,respdata);
break;
case 4200:
mAnims.move(resptype,respdata,respdata2,respdata3);
break;
case 4210:
mAnims.rotate(resptype,respdata,respdata2,respdata3);
break;
case 5000:
mSounds.newSound(resptype,respdata);
break;
case 5010:
mSounds.onPlaySound(resptype,respdata);
break;
case 5011:
float val=Float.parseFloat(resptype);
mSounds.setVolume(val);
break;
case 5012:
int mutval=Integer.parseInt(respdata);
mSounds.setMute(mutval);
break;
case 6001:
mItems.newFromTemplate(resptype,respdata);
break;
case 6002:
mItems.setTexture(resptype,respdata);
break;
case 6003:
mItems.createModel(resptype,respdata);
break;
case 6004:
mItems.setSubmodels(resptype,respdata);
break;
case 7000:
connect(resptype,respdata);
break;
case 7001:
join(resptype,respdata);
break;
case 7002:
send(resptype);
break;
case 7003:
disconnect();
break;
case 4300:
default :
mDataGrid.onEvent2(gl,response);
}
}
 catch (JSONException e) {
e.printStackTrace();
}
}","void onEvent2(GL2 gl,JSONObject response){
  try {
    String respid=response.getString(""String_Node_Str"");
    String respdata=null;
    String respdata2=null;
    String respdata3=null;
    String respdata4=null;
    String resptype=response.getString(""String_Node_Str"");
    if (response.has(""String_Node_Str"")) {
      respdata=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata2=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata3=response.getString(""String_Node_Str"");
    }
    if (response.has(""String_Node_Str"")) {
      respdata4=response.getString(""String_Node_Str"");
    }
    int eventid=Integer.parseInt(respid);
switch (eventid) {
case 100:
      sendEvent(resptype,respdata);
    break;
case 101:
  sendExec(resptype,respdata);
break;
case 102:
loadModule(resptype,respdata);
break;
case 103:
loadModule2(resptype,respdata);
break;
case 200:
setEnv(resptype,respdata);
break;
case 1002:
onTextInput(resptype,respdata);
break;
case 1200:
goUrl(resptype,respdata);
break;
case 2600:
mSettings.open();
break;
case 2601:
mSettings.save();
break;
case 2610:
mSettings.writeInt(resptype,respdata);
break;
case 2611:
mSettings.writeStr(resptype,respdata);
break;
case 2620:
mSettings.loadInt(resptype,respdata);
break;
case 2621:
mSettings.loadStr(resptype,respdata);
break;
case 2622:
mSettings.loadArray(resptype,respdata);
break;
case 4000:
mTextures.newTexture(gl,resptype,respdata,true);
break;
case 4001:
mTextures.deleteTexture(gl,resptype);
break;
case 4100:
mObjectsFact.create(resptype,respdata);
break;
case 4110:
mObjectsFact.place(resptype,respdata);
break;
case 4120:
mObjectsFact.scale(resptype,respdata);
break;
case 4130:
mObjectsFact.texture(resptype,respdata,respdata2);
break;
case 4140:
mObjectsFact.state(resptype,respdata);
break;
case 4150:
mObjectsFact.remove(resptype,respdata);
break;
case 4160:
mObjectsFact.rotate(resptype,respdata);
break;
case 4200:
mAnims.move(resptype,respdata,respdata2,respdata3);
break;
case 4210:
mAnims.rotate(resptype,respdata,respdata2,respdata3);
break;
case 5000:
mSounds.newSound(resptype,respdata);
break;
case 5010:
mSounds.onPlaySound(resptype,respdata);
break;
case 5011:
float val=Float.parseFloat(resptype);
mSounds.setVolume(val);
break;
case 5012:
int mutval=Integer.parseInt(respdata);
mSounds.setMute(mutval);
break;
case 6001:
mItems.newFromTemplate(resptype,respdata);
break;
case 6002:
mItems.setTexture(resptype,respdata);
break;
case 6003:
mItems.createModel(resptype,respdata);
break;
case 6004:
mItems.setSubmodels(resptype,respdata);
break;
case 6005:
mItems.newEmpty(resptype);
break;
case 6006:
mItems.addShape(resptype,respdata,respdata2,respdata3,respdata4);
break;
case 6007:
mItems.addShapeFromData(resptype,respdata,respdata2,respdata3);
break;
case 7000:
connect(resptype,respdata);
break;
case 7001:
join(resptype,respdata);
break;
case 7002:
send(resptype);
break;
case 7003:
disconnect();
break;
case 4300:
default :
mDataGrid.onEvent2(gl,response);
}
}
 catch (JSONException e) {
e.printStackTrace();
}
}",0.9631236442516268
98910,"public void createAnimTrans(String type,int delay,boolean away,int no){
  GameonModelRef to=new GameonModelRef(null,-1);
  to.copy(mRefs.get(no));
  to.copyMat(mRefs.get(no));
  GameonModelRef from=new GameonModelRef(null,-1);
  from.copy(to);
  float w, h, x, y;
  RenderDomain domain=mApp.world().getDomain(to.loc());
  w=domain.mCS.worldWidth();
  h=domain.mCS.worldHeight();
  x=domain.mCS.worldCenterX();
  y=domain.mCS.worldCenterY();
  if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(-w,0,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(w,0,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,+h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,+h + h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,-h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
    from.addAreaRotation(0,0,720);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
    from.addAreaRotation(0,0,720);
  }
  if (away) {
    mApp.anims().createAnim(to,from,mRefs.get(no),delay,2,null,1,true,false);
  }
 else {
    mApp.anims().createAnim(from,to,mRefs.get(no),delay,2,null,1,false,false);
  }
}","public void createAnimTrans(String type,int delay,boolean away,int no){
  GameonModelRef to=new GameonModelRef(null,-1);
  to.copy(mRefs.get(no));
  to.copyMat(mRefs.get(no));
  GameonModelRef from=new GameonModelRef(null,-1);
  from.copy(to);
  float w, h, x, y;
  RenderDomain domain=mApp.world().getDomain(to.loc());
  w=domain.mCS.worldWidth();
  h=domain.mCS.worldHeight();
  x=domain.mCS.worldCenterX();
  y=domain.mCS.worldCenterY();
  if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(-w,0,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(w,0,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,+h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,+h + h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.addAreaPosition(0,-h,0);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
    from.addAreaRotation(0,0,720);
  }
 else   if (type.equals(""String_Node_Str"")) {
    from.mulScale(30,30,30);
    from.addAreaRotation(0,0,720);
  }
  if (away) {
    mApp.anims().createAnim(to,from,mRefs.get(no),delay,2,null,1,true,true);
  }
 else {
    mApp.anims().createAnim(from,to,mRefs.get(no),delay,2,null,1,false,true);
  }
}",0.9951083158630328
98911,"public static Connection getConnection(){
  if (conn == null)   conn=initialize();
  return conn;
}","public static Connection getConnection(){
  if (conn == null)   conn=initialize();
  if (WarpSettings.usemySQL) {
    try {
      if (!conn.isValid(10))       conn=initialize();
    }
 catch (    SQLException ex) {
      WarpLogger.severe(""String_Node_Str"",ex);
    }
  }
  return conn;
}",0.4392764857881137
98912,"public static void closeConnection(){
  if (conn != null) {
    try {
      conn.close();
      conn=null;
    }
 catch (    SQLException ex) {
      WarpLogger.severe(""String_Node_Str"",ex);
    }
  }
}","public static void closeConnection(){
  if (conn != null) {
    try {
      if (WarpSettings.usemySQL) {
        if (conn.isValid(10)) {
          conn.close();
        }
        conn=null;
      }
 else {
        conn.close();
        conn=null;
      }
    }
 catch (    SQLException ex) {
      WarpLogger.severe(""String_Node_Str"",ex);
    }
  }
}",0.6811594202898551
98913,"public MatchList getMatches(String name,Player player){
  ArrayList<Warp> exactMatches=new ArrayList<Warp>();
  ArrayList<Warp> matches=new ArrayList<Warp>();
  List<String> names=new ArrayList<String>(warpList.keySet());
  Collator collator=Collator.getInstance();
  collator.setStrength(Collator.SECONDARY);
  Collections.sort(names,collator);
  for (int i=0; i < names.size(); i++) {
    String currName=names.get(i);
    Warp warp=warpList.get(currName);
    if (warp.playerCanWarp(player)) {
      if (warp.name.equalsIgnoreCase(name)) {
        exactMatches.add(warp);
      }
 else       if (warp.name.toLowerCase().contains(name.toLowerCase())) {
        matches.add(warp);
      }
    }
  }
  if (exactMatches.size() > 1) {
    for (    Warp warp : exactMatches) {
      if (!warp.name.equals(name)) {
        exactMatches.remove(warp);
        matches.add(0,warp);
      }
    }
  }
  return new MatchList(exactMatches,matches);
}","public MatchList getMatches(String name,Player player){
  ArrayList<Warp> exactMatches=new ArrayList<Warp>();
  ArrayList<Warp> matches=new ArrayList<Warp>();
  List<String> names=new ArrayList<String>(warpList.keySet());
  Collator collator=Collator.getInstance();
  collator.setStrength(Collator.SECONDARY);
  Collections.sort(names,collator);
  for (int i=0; i < names.size(); i++) {
    String currName=names.get(i);
    Warp warp=warpList.get(currName);
    if (warp.playerCanWarp(player)) {
      if (warp.name.equalsIgnoreCase(name)) {
        exactMatches.add(warp);
      }
 else       if (warp.name.toLowerCase().contains(name.toLowerCase())) {
        matches.add(warp);
      }
    }
  }
  if (exactMatches.size() > 1) {
    for (int i=0; i < exactMatches.size(); i++) {
      Warp warp=exactMatches.get(i);
      if (!warp.name.equals(name)) {
        exactMatches.remove(warp);
        matches.add(0,warp);
        i--;
      }
    }
  }
  return new MatchList(exactMatches,matches);
}",0.963383187209902
98914,"public static void convert(Player player,Server server,WarpList lister){
  File file=new File(""String_Node_Str"");
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    Class.forName(""String_Node_Str"");
    conn=DriverManager.getConnection(WarpDataSource.DATABASE);
    ps=conn.prepareStatement(""String_Node_Str"");
    Scanner scanner=new Scanner(file);
    int size=0;
    while (scanner.hasNext()) {
      String line=scanner.nextLine();
      if (line.equals(""String_Node_Str""))       continue;
      String[] pieces=line.split(""String_Node_Str"");
      if (pieces.length == 6) {
        String name=pieces[0];
        double x=Double.parseDouble(pieces[1]);
        double y=Double.parseDouble(pieces[2]);
        double z=Double.parseDouble(pieces[3]);
        double yaw=Double.parseDouble(pieces[4]);
        double pitch=Double.parseDouble(pieces[5]);
        yaw=(yaw < 0) ? (360 + (yaw % 360)) : (yaw % 360);
        World world=server.getWorlds()[0];
        Location location=new Location(world,x,y,z,(float)yaw,(float)pitch);
        Warp warp=new Warp(name,location);
        lister.blindAdd(warp);
        ps.setInt(1,warp.index);
        ps.setString(2,warp.name);
        ps.setString(3,warp.creator);
        ps.setInt(4,warp.world);
        ps.setDouble(5,warp.x);
        ps.setInt(6,warp.y);
        ps.setDouble(7,warp.z);
        ps.setInt(8,warp.yaw);
        ps.setInt(9,warp.pitch);
        ps.setBoolean(10,warp.publicAll);
        ps.setString(11,warp.permissionsString());
        ps.setString(12,warp.welcomeMessage);
        ps.addBatch();
        size++;
      }
 else {
        if (pieces.length > 0) {
          player.sendMessage(ChatColor.RED + pieces[0] + ""String_Node_Str"");
          System.out.println(""String_Node_Str"" + pieces[0] + ""String_Node_Str"");
        }
      }
    }
    ps.executeBatch();
    file.delete();
    player.sendMessage(""String_Node_Str"" + size + ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
catch (  ClassNotFoundException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
catch (  SQLException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (conn != null)       conn.close();
    }
 catch (    SQLException ex) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","public static void convert(Player player,Server server,WarpList lister){
  File file=new File(""String_Node_Str"");
  PreparedStatement ps=null;
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    Scanner scanner=new Scanner(file);
    int size=0;
    while (scanner.hasNext()) {
      String line=scanner.nextLine();
      if (line.equals(""String_Node_Str""))       continue;
      String[] pieces=line.split(""String_Node_Str"");
      if (pieces.length == 6) {
        String name=pieces[0];
        double x=Double.parseDouble(pieces[1]);
        double y=Double.parseDouble(pieces[2]);
        double z=Double.parseDouble(pieces[3]);
        double yaw=Double.parseDouble(pieces[4]);
        double pitch=Double.parseDouble(pieces[5]);
        yaw=(yaw < 0) ? (360 + (yaw % 360)) : (yaw % 360);
        World world=server.getWorlds()[0];
        Location location=new Location(world,x,y,z,(float)yaw,(float)pitch);
        Warp warp=new Warp(name,location);
        lister.blindAdd(warp);
        ps.setInt(1,warp.index);
        ps.setString(2,warp.name);
        ps.setString(3,warp.creator);
        ps.setInt(4,warp.world);
        ps.setDouble(5,warp.x);
        ps.setInt(6,warp.y);
        ps.setDouble(7,warp.z);
        ps.setInt(8,warp.yaw);
        ps.setInt(9,warp.pitch);
        ps.setBoolean(10,warp.publicAll);
        ps.setString(11,warp.permissionsString());
        ps.setString(12,warp.welcomeMessage);
        ps.addBatch();
        size++;
      }
 else {
        if (pieces.length > 0) {
          player.sendMessage(ChatColor.RED + pieces[0] + ""String_Node_Str"");
          System.out.println(""String_Node_Str"" + pieces[0] + ""String_Node_Str"");
        }
      }
    }
    ps.executeBatch();
    file.delete();
    player.sendMessage(""String_Node_Str"" + size + ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
catch (  SQLException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
    }
 catch (    SQLException ex) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9341266468338292
98915,"public void onDisable(){
}","public void onDisable(){
  ConnectionManager.freeConnection();
}",0.5777777777777777
98916,"public static boolean isSignWarp(Sign sign){
  ArrayList<String> lines=new ArrayList<String>();
  for (int i=0; i < 4; i++) {
    if (!sign.getLine(i).trim().equals(""String_Node_Str"")) {
      lines.add(sign.getLine(i).trim());
    }
  }
  if (lines.size() == 2 && lines.get(0).contains(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean isSignWarp(Sign sign){
  ArrayList<String> lines=new ArrayList<String>();
  for (int i=0; i < 4; i++) {
    if (!sign.getLine(i).trim().equals(""String_Node_Str"")) {
      lines.add(sign.getLine(i).trim());
    }
  }
  if (lines.size() == 2 && lines.get(0).equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}",0.9671232876712328
98917,"public static void updateWelcomeMessage(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.welcomeMessage);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void updateWelcomeMessage(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.welcomeMessage);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9859985261606484
98918,"private static void createTable(){
  Statement st=null;
  try {
    Connection conn=ConnectionManager.getConnection();
    st=conn.createStatement();
    st.executeUpdate(WARP_TABLE);
  }
 catch (  SQLException e) {
    Logger log=Logger.getLogger(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    try {
      if (st != null)       st.close();
    }
 catch (    SQLException e) {
      Logger log=Logger.getLogger(""String_Node_Str"");
      log.log(Level.SEVERE,""String_Node_Str"");
    }
  }
}","private static void createTable(){
  Statement st=null;
  try {
    Connection conn=ConnectionManager.getConnection();
    st=conn.createStatement();
    st.executeUpdate(WARP_TABLE);
    conn.commit();
  }
 catch (  SQLException e) {
    Logger log=Logger.getLogger(""String_Node_Str"");
    log.log(Level.SEVERE,""String_Node_Str"",e);
  }
 finally {
    try {
      if (st != null)       st.close();
    }
 catch (    SQLException e) {
      Logger log=Logger.getLogger(""String_Node_Str"");
      log.log(Level.SEVERE,""String_Node_Str"");
    }
  }
}",0.9823255813953488
98919,"public static void addWarp(Warp warp){
  PreparedStatement ps=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setInt(1,warp.index);
    ps.setString(2,warp.name);
    ps.setString(3,warp.creator);
    ps.setInt(4,warp.world);
    ps.setDouble(5,warp.x);
    ps.setInt(6,warp.y);
    ps.setDouble(7,warp.z);
    ps.setInt(8,warp.yaw);
    ps.setInt(9,warp.pitch);
    ps.setBoolean(10,warp.publicAll);
    ps.setString(11,warp.permissionsString());
    ps.setString(12,warp.welcomeMessage);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void addWarp(Warp warp){
  PreparedStatement ps=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setInt(1,warp.index);
    ps.setString(2,warp.name);
    ps.setString(3,warp.creator);
    ps.setInt(4,warp.world);
    ps.setDouble(5,warp.x);
    ps.setInt(6,warp.y);
    ps.setDouble(7,warp.z);
    ps.setInt(8,warp.yaw);
    ps.setInt(9,warp.pitch);
    ps.setBoolean(10,warp.publicAll);
    ps.setString(11,warp.permissionsString());
    ps.setString(12,warp.welcomeMessage);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9895201323772752
98920,"public static void publicizeWarp(Warp warp,boolean publicAll){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setBoolean(1,publicAll);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void publicizeWarp(Warp warp,boolean publicAll){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setBoolean(1,publicAll);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9860396767083028
98921,"public static void updateCreator(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.creator);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void updateCreator(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.creator);
    ps.setInt(2,warp.index);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9857035364936042
98922,"public static void deleteWarp(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setInt(1,warp.index);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void deleteWarp(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setInt(1,warp.index);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9848605577689244
98923,"public static void updatePermissions(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.permissionsString());
    ps.setInt(2,warp.index);
    ps.executeUpdate();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public static void updatePermissions(Warp warp){
  PreparedStatement ps=null;
  ResultSet set=null;
  Logger log=Logger.getLogger(""String_Node_Str"");
  try {
    Connection conn=ConnectionManager.getConnection();
    ps=conn.prepareStatement(""String_Node_Str"");
    ps.setString(1,warp.permissionsString());
    ps.setInt(2,warp.index);
    ps.executeUpdate();
    conn.commit();
  }
 catch (  SQLException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (set != null) {
        set.close();
      }
    }
 catch (    SQLException ex) {
      log.log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9860396767083028
98924,"@Override public void onSignChange(SignChangeEvent event){
  Player player=event.getPlayer();
  if (SignWarp.isSignWarp(event) && WarpPermissions.createSignWarp(player)) {
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
  }
}","@Override public void onSignChange(SignChangeEvent event){
  Player player=event.getPlayer();
  if (SignWarp.isSignWarp(event)) {
    if (WarpPermissions.createSignWarp(player)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      event.setCancelled(true);
    }
  }
}",0.9570200573065902
98925,"public void addWarp(String name,Player player){
  if (numPublicWarpsPlayer(player) < WarpPermissions.maxPublicWarps(player)) {
    if (warpList.containsKey(name)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      Warp warp=new Warp(name,player);
      warpList.put(name,warp);
      WarpDataSource.addWarp(warp);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ name);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ WarpPermissions.maxPrivateWarps(player)+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
}","public void addWarp(String name,Player player){
  if (numPublicWarpsPlayer(player) < WarpPermissions.maxPublicWarps(player)) {
    if (warpList.containsKey(name)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      Warp warp=new Warp(name,player);
      warpList.put(name,warp);
      WarpDataSource.addWarp(warp);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ name);
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ WarpPermissions.maxPublicWarps(player)+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
  }
}",0.9932473910374464
98926,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String[] split=args;
  String commandName=command.getName().toLowerCase();
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (commandName.equals(""String_Node_Str"")) {
      if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.isAdmin(player)) {
        if (!warning) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          player.sendMessage(""String_Node_Str"");
          player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
          warning=true;
        }
 else {
          Converter.convert(player,getServer(),warpList);
          warning=false;
        }
      }
 else       if ((split.length == 1 || (split.length == 2 && isInteger(split[1]))) && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.list(player)) {
        Lister lister=new Lister(warpList);
        lister.addPlayer(player);
        if (split.length == 2) {
          int page=Integer.parseInt(split[1]);
          if (page < 1) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else           if (page > lister.getMaxPages(player)) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"" + lister.getMaxPages(player)+ ""String_Node_Str"");
            return true;
          }
          lister.setPage(page);
        }
 else {
          lister.setPage(1);
        }
        lister.list();
      }
 else       if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.list(player)) {
        warpList.list(player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.search(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        Searcher searcher=new Searcher(warpList);
        searcher.addPlayer(player);
        searcher.setQuery(name);
        searcher.search();
      }
 else       if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && (WarpPermissions.publicCreate(player) || WarpPermissions.privateCreate(player))) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        if (WarpPermissions.publicCreate(player)) {
          warpList.addWarp(name,player);
        }
 else {
          warpList.addWarpPrivate(name,player);
        }
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.privateCreate(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.addWarpPrivate(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.delete(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.deleteWarp(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.welcome(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.welcomeMessage(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.canPrivate(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.privatize(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.canPublic(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.publicize(name,player);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.give(player)) {
        Player givee=getServer().getPlayer(split[1]);
        String giveeName=(givee == null) ? split[1] : givee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.give(name,player,giveeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.invite(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.invite(name,player,inviteeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.uninvite(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.uninvite(name,player,inviteeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.isAdmin(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.warpTo(name,invitee);
      }
 else       if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"")) {
        ArrayList<String> messages=new ArrayList<String>();
        messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        if (WarpPermissions.warp(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.publicCreate(player) || WarpPermissions.privateCreate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.privateCreate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.delete(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.welcome(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.list(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.search(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.give(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.invite(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.uninvite(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.canPublic(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        if (WarpPermissions.canPrivate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        for (        String message : messages) {
          player.sendMessage(message);
        }
      }
 else       if (split.length > 0 && WarpPermissions.warp(player)) {
        String name=""String_Node_Str"";
        for (int i=0; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.warpTo(name,player);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  String[] split=args;
  String commandName=command.getName().toLowerCase();
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (commandName.equals(""String_Node_Str"")) {
      if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.isAdmin(player)) {
        if (!warning) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
          player.sendMessage(""String_Node_Str"");
          player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
          warning=true;
        }
 else {
          Converter.convert(player,getServer(),warpList);
          warning=false;
        }
      }
 else       if ((split.length == 1 || (split.length == 2 && isInteger(split[1]))) && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.list(player)) {
        Lister lister=new Lister(warpList);
        lister.addPlayer(player);
        if (split.length == 2) {
          int page=Integer.parseInt(split[1]);
          if (page < 1) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            return true;
          }
 else           if (page > lister.getMaxPages(player)) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"" + lister.getMaxPages(player)+ ""String_Node_Str"");
            return true;
          }
          lister.setPage(page);
        }
 else {
          lister.setPage(1);
        }
        lister.list();
      }
 else       if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.list(player)) {
        warpList.list(player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.search(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        Searcher searcher=new Searcher(warpList);
        searcher.addPlayer(player);
        searcher.setQuery(name);
        searcher.search();
      }
 else       if (split.length > 1 && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) && (WarpPermissions.publicCreate(player) || WarpPermissions.privateCreate(player))) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        if (WarpPermissions.publicCreate(player)) {
          warpList.addWarp(name,player);
        }
 else {
          warpList.addWarpPrivate(name,player);
        }
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.compass(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.point(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.privateCreate(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.addWarpPrivate(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.delete(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.deleteWarp(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.welcome(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.welcomeMessage(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.canPrivate(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.privatize(name,player);
      }
 else       if (split.length > 1 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.canPublic(player)) {
        String name=""String_Node_Str"";
        for (int i=1; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.publicize(name,player);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.give(player)) {
        Player givee=getServer().getPlayer(split[1]);
        String giveeName=(givee == null) ? split[1] : givee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.give(name,player,giveeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.invite(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.invite(name,player,inviteeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.uninvite(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.uninvite(name,player,inviteeName);
      }
 else       if (split.length > 2 && split[0].equalsIgnoreCase(""String_Node_Str"") && WarpPermissions.isAdmin(player)) {
        Player invitee=getServer().getPlayer(split[1]);
        String inviteeName=(invitee == null) ? split[1] : invitee.getName();
        String name=""String_Node_Str"";
        for (int i=2; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.warpTo(name,invitee);
      }
 else       if (split.length == 1 && split[0].equalsIgnoreCase(""String_Node_Str"")) {
        ArrayList<String> messages=new ArrayList<String>();
        messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
        if (WarpPermissions.warp(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.publicCreate(player) || WarpPermissions.privateCreate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.privateCreate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.delete(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.welcome(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.list(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.search(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.give(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.invite(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.uninvite(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str"");
        }
        if (WarpPermissions.canPublic(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        if (WarpPermissions.canPrivate(player)) {
          messages.add(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GRAY+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        }
        for (        String message : messages) {
          player.sendMessage(message);
        }
      }
 else       if (split.length > 0 && WarpPermissions.warp(player)) {
        String name=""String_Node_Str"";
        for (int i=0; i < split.length; i++) {
          name+=split[i];
          if (i + 1 < split.length)           name+=""String_Node_Str"";
        }
        warpList.warpTo(name,player);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.9824750871336704
98927,"public static void convert(Player player,Server server,WarpList lister){
  File file=new File(""String_Node_Str"");
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    Class.forName(""String_Node_Str"");
    conn=DriverManager.getConnection(WarpDataSource.DATABASE);
    ps=conn.prepareStatement(""String_Node_Str"");
    Scanner scanner=new Scanner(file);
    int size=0;
    while (scanner.hasNext()) {
      String line=scanner.nextLine();
      if (line.equals(""String_Node_Str""))       continue;
      String[] pieces=line.split(""String_Node_Str"");
      String name=pieces[0];
      double x=Double.parseDouble(pieces[1]);
      double y=Double.parseDouble(pieces[2]);
      double z=Double.parseDouble(pieces[3]);
      double yaw=Double.parseDouble(pieces[4]);
      double pitch=Double.parseDouble(pieces[5]);
      yaw=(yaw < 0) ? (360 + (yaw % 360)) : (yaw % 360);
      World world=server.getWorlds()[0];
      Location location=new Location(world,x,y,z,(float)yaw,(float)pitch);
      Warp warp=new Warp(name,location);
      lister.blindAdd(warp);
      ps.setInt(1,warp.index);
      ps.setString(2,warp.name);
      ps.setString(3,warp.creator);
      ps.setInt(4,warp.world);
      ps.setInt(5,warp.x);
      ps.setInt(6,warp.y);
      ps.setInt(7,warp.z);
      ps.setInt(8,warp.yaw);
      ps.setInt(9,warp.pitch);
      ps.setBoolean(10,warp.publicAll);
      ps.setString(11,warp.permissionsString());
      ps.setString(12,warp.welcomeMessage);
      ps.addBatch();
      size++;
    }
    ps.executeBatch();
    file.delete();
    player.sendMessage(""String_Node_Str"" + size + ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    player.sendMessage(Color.RED + ""String_Node_Str"");
  }
catch (  ClassNotFoundException e) {
    player.sendMessage(Color.RED + ""String_Node_Str"");
  }
catch (  SQLException e) {
    player.sendMessage(Color.RED + ""String_Node_Str"");
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (conn != null)       conn.close();
    }
 catch (    SQLException ex) {
      player.sendMessage(Color.RED + ""String_Node_Str"");
    }
  }
}","public static void convert(Player player,Server server,WarpList lister){
  File file=new File(""String_Node_Str"");
  Connection conn=null;
  PreparedStatement ps=null;
  try {
    Class.forName(""String_Node_Str"");
    conn=DriverManager.getConnection(WarpDataSource.DATABASE);
    ps=conn.prepareStatement(""String_Node_Str"");
    Scanner scanner=new Scanner(file);
    int size=0;
    while (scanner.hasNext()) {
      String line=scanner.nextLine();
      if (line.equals(""String_Node_Str""))       continue;
      String[] pieces=line.split(""String_Node_Str"");
      String name=pieces[0];
      double x=Double.parseDouble(pieces[1]);
      double y=Double.parseDouble(pieces[2]);
      double z=Double.parseDouble(pieces[3]);
      double yaw=Double.parseDouble(pieces[4]);
      double pitch=Double.parseDouble(pieces[5]);
      yaw=(yaw < 0) ? (360 + (yaw % 360)) : (yaw % 360);
      World world=server.getWorlds()[0];
      Location location=new Location(world,x,y,z,(float)yaw,(float)pitch);
      Warp warp=new Warp(name,location);
      lister.blindAdd(warp);
      ps.setInt(1,warp.index);
      ps.setString(2,warp.name);
      ps.setString(3,warp.creator);
      ps.setInt(4,warp.world);
      ps.setInt(5,warp.x);
      ps.setInt(6,warp.y);
      ps.setInt(7,warp.z);
      ps.setInt(8,warp.yaw);
      ps.setInt(9,warp.pitch);
      ps.setBoolean(10,warp.publicAll);
      ps.setString(11,warp.permissionsString());
      ps.setString(12,warp.welcomeMessage);
      ps.addBatch();
      size++;
    }
    ps.executeBatch();
    file.delete();
    player.sendMessage(""String_Node_Str"" + size + ""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
catch (  ClassNotFoundException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
catch (  SQLException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (conn != null)       conn.close();
    }
 catch (    SQLException ex) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9962599345488546
98928,"public void list(){
  String intro=""String_Node_Str"" + page + ""String_Node_Str""+ maxPages+ ""String_Node_Str"";
  player.sendMessage(Color.YELLOW + intro);
  for (  Warp warp : sortedWarps) {
    String name=warp.name;
    String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
    int x=warp.x;
    int y=warp.y;
    int z=warp.z;
    String color;
    if (warp.playerIsCreator(player.getName())) {
      color=Color.AQUA.toString();
    }
 else     if (warp.publicAll) {
      color=Color.GREEN.toString();
    }
 else {
      color=Color.RED.toString();
    }
    String location=""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"";
    String creatorString=""String_Node_Str"" + creator;
    int left=MinecraftFontWidthCalculator.getStringWidth(intro) - MinecraftFontWidthCalculator.getStringWidth(""String_Node_Str"" + creatorString + location);
    int nameLength=MinecraftFontWidthCalculator.getStringWidth(name);
    if (left > nameLength) {
      name=""String_Node_Str"" + name + ""String_Node_Str""+ Color.WHITE+ creatorString+ whitespace(left - nameLength);
    }
 else     if (left < nameLength) {
      name=""String_Node_Str"" + substring(name,left) + ""String_Node_Str""+ Color.WHITE+ creatorString;
    }
    player.sendMessage(color + name + location);
  }
}","public void list(){
  String intro=""String_Node_Str"" + page + ""String_Node_Str""+ maxPages+ ""String_Node_Str"";
  player.sendMessage(ChatColor.YELLOW + intro);
  for (  Warp warp : sortedWarps) {
    String name=warp.name;
    String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
    int x=warp.x;
    int y=warp.y;
    int z=warp.z;
    String color;
    if (warp.playerIsCreator(player.getName())) {
      color=ChatColor.AQUA.toString();
    }
 else     if (warp.publicAll) {
      color=ChatColor.GREEN.toString();
    }
 else {
      color=ChatColor.RED.toString();
    }
    String location=""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"";
    String creatorString=""String_Node_Str"" + creator;
    int left=MinecraftFontWidthCalculator.getStringWidth(intro) - MinecraftFontWidthCalculator.getStringWidth(""String_Node_Str"" + creatorString + location);
    int nameLength=MinecraftFontWidthCalculator.getStringWidth(name);
    if (left > nameLength) {
      name=""String_Node_Str"" + name + ""String_Node_Str""+ ChatColor.WHITE+ creatorString+ whitespace(left - nameLength);
    }
 else     if (left < nameLength) {
      name=""String_Node_Str"" + substring(name,left) + ""String_Node_Str""+ ChatColor.WHITE+ creatorString;
    }
    player.sendMessage(color + name + location);
  }
}",0.9911373707533236
98929,"public void search(){
  if (exactMatches.size() == 0 && matches.size() == 0) {
    player.sendMessage(Color.RED + ""String_Node_Str"" + Color.GRAY+ query);
  }
 else {
    if (exactMatches.size() > 0) {
      player.sendMessage(Color.YELLOW + ""String_Node_Str"" + Color.GRAY+ query);
      for (      Warp warp : exactMatches) {
        String color;
        if (warp.playerIsCreator(player.getName())) {
          color=Color.AQUA.toString();
        }
 else         if (warp.publicAll) {
          color=Color.GREEN.toString();
        }
 else {
          color=Color.RED.toString();
        }
        String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
        int x=warp.x;
        int y=warp.y;
        int z=warp.z;
        player.sendMessage(color + ""String_Node_Str"" + warp.name+ ""String_Node_Str""+ Color.WHITE+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
      }
    }
    if (matches.size() > 0) {
      player.sendMessage(Color.YELLOW + ""String_Node_Str"" + Color.GRAY+ query);
      for (      Warp warp : matches) {
        String color;
        if (warp.playerIsCreator(player.getName())) {
          color=Color.AQUA.toString();
        }
 else         if (warp.publicAll) {
          color=Color.GREEN.toString();
        }
 else {
          color=Color.RED.toString();
        }
        String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
        int x=warp.x;
        int y=warp.y;
        int z=warp.z;
        player.sendMessage(color + ""String_Node_Str"" + warp.name+ ""String_Node_Str""+ Color.WHITE+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
      }
    }
  }
}","public void search(){
  if (exactMatches.size() == 0 && matches.size() == 0) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GRAY+ query);
  }
 else {
    if (exactMatches.size() > 0) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ query);
      for (      Warp warp : exactMatches) {
        String color;
        if (warp.playerIsCreator(player.getName())) {
          color=ChatColor.AQUA.toString();
        }
 else         if (warp.publicAll) {
          color=ChatColor.GREEN.toString();
        }
 else {
          color=ChatColor.RED.toString();
        }
        String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
        int x=warp.x;
        int y=warp.y;
        int z=warp.z;
        player.sendMessage(color + ""String_Node_Str"" + warp.name+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
      }
    }
    if (matches.size() > 0) {
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.GRAY+ query);
      for (      Warp warp : matches) {
        String color;
        if (warp.playerIsCreator(player.getName())) {
          color=ChatColor.AQUA.toString();
        }
 else         if (warp.publicAll) {
          color=ChatColor.GREEN.toString();
        }
 else {
          color=ChatColor.RED.toString();
        }
        String creator=(warp.creator.equalsIgnoreCase(player.getName())) ? ""String_Node_Str"" : warp.creator;
        int x=warp.x;
        int y=warp.y;
        int z=warp.z;
        player.sendMessage(color + ""String_Node_Str"" + warp.name+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ creator+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
      }
    }
  }
}",0.9848238482384823
98930,"public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!warning) {
        player.sendMessage(Color.RED + ""String_Node_Str"" + Color.WHITE+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + Color.RED + ""String_Node_Str""+ Color.WHITE+ ""String_Node_Str"");
        warning=true;
      }
 else {
        Converter.convert(player,plugin.getServer(),warpList);
        warning=false;
      }
    }
 else     if ((split.length == 2 || (split.length == 3 && isInteger(split[2]))) && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Lister lister=new Lister(warpList);
      lister.addPlayer(player);
      if (split.length == 3) {
        int page=Integer.parseInt(split[2]);
        if (page < 1) {
          player.sendMessage(Color.RED + ""String_Node_Str"");
          return;
        }
 else         if (page > lister.getMaxPages()) {
          player.sendMessage(Color.RED + ""String_Node_Str"" + lister.getMaxPages()+ ""String_Node_Str"");
          return;
        }
        lister.setPage(page);
      }
 else {
        lister.setPage(1);
      }
      lister.list();
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      Searcher searcher=new Searcher(warpList);
      searcher.addPlayer(player);
      searcher.setQuery(name);
      searcher.search();
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.addWarp(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.deleteWarp(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.privatize(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.publicize(name,player);
    }
 else     if (split.length > 3 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player invitee=plugin.getServer().getPlayer(split[2]);
      String inviteeName=(invitee == null) ? split[2] : invitee.getName();
      String name=""String_Node_Str"";
      for (int i=3; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.invite(name,player,inviteeName);
    }
 else     if (split.length > 3 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player invitee=plugin.getServer().getPlayer(split[2]);
      String inviteeName=(invitee == null) ? split[2] : invitee.getName();
      String name=""String_Node_Str"";
      for (int i=3; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.uninvite(name,player,inviteeName);
    }
 else     if (split.length > 1) {
      String name=""String_Node_Str"";
      for (int i=1; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.warpTo(name,player);
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"");
    }
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      if (!warning) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str"");
        player.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        warning=true;
      }
 else {
        Converter.convert(player,plugin.getServer(),warpList);
        warning=false;
      }
    }
 else     if ((split.length == 2 || (split.length == 3 && isInteger(split[2]))) && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Lister lister=new Lister(warpList);
      lister.addPlayer(player);
      if (split.length == 3) {
        int page=Integer.parseInt(split[2]);
        if (page < 1) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
 else         if (page > lister.getMaxPages()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + lister.getMaxPages()+ ""String_Node_Str"");
          return;
        }
        lister.setPage(page);
      }
 else {
        lister.setPage(1);
      }
      lister.list();
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      Searcher searcher=new Searcher(warpList);
      searcher.addPlayer(player);
      searcher.setQuery(name);
      searcher.search();
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.addWarp(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.deleteWarp(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.privatize(name,player);
    }
 else     if (split.length > 2 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      String name=""String_Node_Str"";
      for (int i=2; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.publicize(name,player);
    }
 else     if (split.length > 3 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player invitee=plugin.getServer().getPlayer(split[2]);
      String inviteeName=(invitee == null) ? split[2] : invitee.getName();
      String name=""String_Node_Str"";
      for (int i=3; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.invite(name,player,inviteeName);
    }
 else     if (split.length > 3 && split[1].equalsIgnoreCase(""String_Node_Str"")) {
      Player invitee=plugin.getServer().getPlayer(split[2]);
      String inviteeName=(invitee == null) ? split[2] : invitee.getName();
      String name=""String_Node_Str"";
      for (int i=3; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.uninvite(name,player,inviteeName);
    }
 else     if (split.length > 1) {
      String name=""String_Node_Str"";
      for (int i=1; i < split.length; i++) {
        name+=split[i];
        if (i + 1 < split.length)         name+=""String_Node_Str"";
      }
      warpList.warpTo(name,player);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9967403958090804
98931,"public void addWarp(String name,Player player){
  if (warpList.containsKey(name)) {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
 else {
    Warp warp=new Warp(name,player);
    warpList.put(name,warp);
    WarpDataSource.addWarp(warp);
    player.sendMessage(Color.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"" + Color.RED + ""String_Node_Str""+ name);
  }
}","public void addWarp(String name,Player player){
  if (warpList.containsKey(name)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
 else {
    Warp warp=new Warp(name,player);
    warpList.put(name,warp);
    WarpDataSource.addWarp(warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    player.sendMessage(""String_Node_Str"");
    player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ name);
  }
}",0.9878542510121456
98932,"public void publicize(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warp.publicAll=true;
      WarpDataSource.publicizeWarp(warp,true);
      player.sendMessage(Color.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void publicize(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warp.publicAll=true;
      WarpDataSource.publicizeWarp(warp,true);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.988785046728972
98933,"public void invite(String name,Player player,String inviteeName){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      if (warp.playerIsInvited(inviteeName)) {
        player.sendMessage(Color.RED + inviteeName + ""String_Node_Str"");
      }
 else       if (warp.playerIsCreator(inviteeName)) {
        player.sendMessage(Color.RED + inviteeName + ""String_Node_Str"");
      }
 else {
        warp.invite(inviteeName);
        WarpDataSource.updatePermissions(warp);
        player.sendMessage(Color.AQUA + ""String_Node_Str"" + inviteeName+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (warp.publicAll) {
          player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
        }
        Player match=server.getPlayer(inviteeName);
        if (match != null) {
          match.sendMessage(Color.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str""+ player.getName());
          match.sendMessage(""String_Node_Str"" + Color.RED + ""String_Node_Str""+ name+ Color.WHITE+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void invite(String name,Player player,String inviteeName){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      if (warp.playerIsInvited(inviteeName)) {
        player.sendMessage(ChatColor.RED + inviteeName + ""String_Node_Str"");
      }
 else       if (warp.playerIsCreator(inviteeName)) {
        player.sendMessage(ChatColor.RED + inviteeName + ""String_Node_Str"");
      }
 else {
        warp.invite(inviteeName);
        WarpDataSource.updatePermissions(warp);
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + inviteeName+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (warp.publicAll) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
        }
        Player match=server.getPlayer(inviteeName);
        if (match != null) {
          match.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str""+ player.getName());
          match.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ name+ ChatColor.WHITE+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.986404833836858
98934,"public void uninvite(String name,Player player,String inviteeName){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      if (!warp.playerIsInvited(inviteeName)) {
        player.sendMessage(Color.RED + inviteeName + ""String_Node_Str"");
      }
 else       if (warp.playerIsCreator(inviteeName)) {
        player.sendMessage(Color.RED + ""String_Node_Str"");
      }
 else {
        warp.uninvite(inviteeName);
        WarpDataSource.updatePermissions(warp);
        player.sendMessage(Color.AQUA + ""String_Node_Str"" + inviteeName+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (warp.publicAll) {
          player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
        }
        Player match=server.getPlayer(inviteeName);
        if (match != null) {
          match.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void uninvite(String name,Player player,String inviteeName){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      if (!warp.playerIsInvited(inviteeName)) {
        player.sendMessage(ChatColor.RED + inviteeName + ""String_Node_Str"");
      }
 else       if (warp.playerIsCreator(inviteeName)) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
 else {
        warp.uninvite(inviteeName);
        WarpDataSource.updatePermissions(warp);
        player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + inviteeName+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        if (warp.publicAll) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
        }
        Player match=server.getPlayer(inviteeName);
        if (match != null) {
          match.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.9884393063583816
98935,"public void deleteWarp(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warpList.remove(name);
      WarpDataSource.deleteWarp(warp);
      player.sendMessage(Color.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void deleteWarp(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warpList.remove(name);
      WarpDataSource.deleteWarp(warp);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.9886792452830188
98936,"public void warpTo(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerCanWarp(player.getName())) {
      warp.warp(player);
      player.sendMessage(Color.AQUA + warp.welcomeMessage);
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void warpTo(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerCanWarp(player.getName())) {
      warp.warp(player);
      player.sendMessage(ChatColor.AQUA + warp.welcomeMessage);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.986870897155361
98937,"public void privatize(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warp.publicAll=false;
      WarpDataSource.publicizeWarp(warp,false);
      player.sendMessage(Color.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + Color.RED + ""String_Node_Str""+ name);
    }
 else {
      player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(Color.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}","public void privatize(String name,Player player){
  if (warpList.containsKey(name)) {
    Warp warp=warpList.get(name);
    if (warp.playerIsCreator(player.getName())) {
      warp.publicAll=false;
      WarpDataSource.publicizeWarp(warp,false);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + name+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + ChatColor.RED + ""String_Node_Str""+ name);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + name+ ""String_Node_Str"");
  }
}",0.9880059970014992
98938,"public static int getStringWidth(String s){
  if (s == null) {
    return 0;
  }
  int i=0;
  for (int j=0; j < s.length(); j++) {
    if (s.charAt(j) == '\247') {
      j++;
      continue;
    }
    int k=weirdHardcodedShitIFoundInMinecraft.indexOf(s.charAt(j));
    if (k >= 0) {
      i+=charWidth[k + 32];
    }
  }
  return i;
}","public static int getStringWidth(String s){
  int i=0;
  if (s != null)   for (int j=0; j < s.length(); j++)   i+=getCharWidth(s.charAt(j));
  return i;
}",0.5450819672131147
98939,"@Override public String fizzBuzz(int i){
  String str=""String_Node_Str"";
  if (i % 3 == 0) {
    str+=""String_Node_Str"";
  }
  if (i % 5 == 0) {
    str+=""String_Node_Str"";
  }
  if (str == ""String_Node_Str"") {
    str=String.valueOf(i);
  }
  return str;
}","@Override public String fizzBuzz(int i){
  if (i <= 0) {
    return String.valueOf(i);
  }
  String str=""String_Node_Str"";
  if (i % 3 == 0) {
    str+=""String_Node_Str"";
  }
  if (i % 5 == 0) {
    str+=""String_Node_Str"";
  }
  if (str == ""String_Node_Str"") {
    str=String.valueOf(i);
  }
  return str;
}",0.2801418439716312
98940,"@Override public String fizzBuzz(int i){
  if (i <= 0) {
    return String.valueOf(i);
  }
  String str=""String_Node_Str"";
  if (i % 3 == 0) {
    str+=""String_Node_Str"";
  }
  if (i % 5 == 0) {
    str+=""String_Node_Str"";
  }
  if (str == ""String_Node_Str"") {
    str=String.valueOf(i);
  }
  return str;
}","@Override public String fizzBuzz(int i){
  String str=""String_Node_Str"";
  if (i <= 0) {
    throw new RuntimeException();
  }
  if (i % 3 == 0) {
    str+=""String_Node_Str"";
  }
  if (i % 5 == 0) {
    str+=""String_Node_Str"";
  }
  if (str == ""String_Node_Str"") {
    str=String.valueOf(i);
  }
  return str;
}",0.2783171521035599
98941,"@Test public void testFizzBuzz_3と5で割り切れる場合０の場合(){
  FizzBuzz target=new FizzBuzz();
  assertEquals(""String_Node_Str"",target.fizzBuzz(0));
}","@Test(expected=RuntimeException.class) public void testFizzBuzz_3と5で割り切れる場合０の場合(){
  FizzBuzz target=new FizzBuzz();
  target.fizzBuzz(0);
}",0.7670250896057348
98942,"@Test public void testFizzBuzz_minus15も３でも５でも割り切れる(){
  FizzBuzz target=new FizzBuzz();
  assertEquals(""String_Node_Str"",target.fizzBuzz(-15));
}","@Test(expected=RuntimeException.class) public void testFizzBuzz_minus15も３でも５でも割り切れる(){
  FizzBuzz target=new FizzBuzz();
  target.fizzBuzz(-15);
}",0.7766323024054983
98943,"/** 
 * get the user info (including user key and user business status) of user, if user doesn't exist, create new one and return
 * @param phone
 * @param brand - apple or others
 * @return
 */
public static JSONObject getUserInfo(String phone,String brand){
  JSONObject obj=new JSONObject();
  String userkey=MD5Util.md5(RandomString.genRandomChars(6));
  String status=""String_Node_Str"";
  String sql=""String_Node_Str"";
  try {
    String businessStatus=DBHelper.getInstance().scalar(sql,new Object[]{phone});
    if (businessStatus != null) {
      log.info(""String_Node_Str"");
      status=businessStatus;
      if (brand.equals(""String_Node_Str"")) {
        status=""String_Node_Str"";
      }
      sql=""String_Node_Str"";
      DBHelper.getInstance().update(sql,new Object[]{userkey,phone});
    }
 else {
      log.info(""String_Node_Str"");
      if (brand.equals(""String_Node_Str"")) {
        status=""String_Node_Str"";
      }
      sql=""String_Node_Str"";
      DBHelper.getInstance().update(sql,new Object[]{phone,userkey});
      obj.put(""String_Node_Str"",status);
    }
    obj.put(""String_Node_Str"",status);
    obj.put(""String_Node_Str"",userkey);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    e.printStackTrace();
  }
  return obj;
}","/** 
 * get the user info (including user key and user business status) of user, if user doesn't exist, create new one and return
 * @param phone
 * @param brand - apple or others
 * @return
 */
public static JSONObject getUserInfo(String phone,String brand){
  JSONObject obj=new JSONObject();
  String userkey=MD5Util.md5(RandomString.genRandomChars(6));
  String status=""String_Node_Str"";
  String sql=""String_Node_Str"";
  try {
    String businessStatus=DBHelper.getInstance().scalar(sql,new Object[]{phone});
    if (businessStatus != null) {
      log.info(""String_Node_Str"");
      status=businessStatus;
      sql=""String_Node_Str"";
      DBHelper.getInstance().update(sql,new Object[]{userkey,phone});
    }
 else {
      log.info(""String_Node_Str"");
      if (brand.equals(""String_Node_Str"")) {
        status=""String_Node_Str"";
      }
      sql=""String_Node_Str"";
      DBHelper.getInstance().update(sql,new Object[]{phone,userkey});
      obj.put(""String_Node_Str"",status);
    }
    obj.put(""String_Node_Str"",status);
    obj.put(""String_Node_Str"",userkey);
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
catch (  JSONException e) {
    e.printStackTrace();
  }
  return obj;
}",0.9651581898277932
98944,"@RequestMapping(""String_Node_Str"") public void info(HttpServletResponse response,@PathVariable int channel,@PathVariable String sourceId) throws Exception {
  Map<String,Object> info=null;
  if (channel == Channels.MOVIE) {
    info=Movie.getMoiveBySourceId(sourceId);
  }
 else   if (channel == Channels.SERIES) {
    info=Series.getSeriesBySourceId(sourceId);
    List<Map<String,Object>> list=Series.getEpisodeList(sourceId);
    info.put(""String_Node_Str"",list);
  }
 else {
    info=Video.getVideoBySourceId(sourceId);
  }
  JSONObject jsonObject=new JSONObject(info);
  response.getWriter().print(jsonObject.toString());
}","@RequestMapping(""String_Node_Str"") public void info(HttpServletResponse response,@PathVariable int channel,@PathVariable String sourceId) throws Exception {
  Map<String,Object> info=null;
  if (channel == Channels.MOVIE) {
    info=Movie.getMoiveBySourceId(sourceId);
  }
 else   if (channel == Channels.SERIES) {
    info=Series.getSeriesBySourceId(sourceId);
    List<Map<String,Object>> list=Series.getEpisodeList(sourceId);
    info.put(""String_Node_Str"",list);
    info.put(""String_Node_Str"",list.size());
  }
 else {
    info=Video.getVideoBySourceId(sourceId);
  }
  JSONObject jsonObject=new JSONObject(info);
  response.getWriter().print(jsonObject.toString());
}",0.9654112221368178
98945,"/** 
 * 得到电视剧剧集列表
 * @param sourceId
 * @return
 * @throws SQLException
 */
public static List<Map<String,Object>> getEpisodeList(String sourceId) throws SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Object[] params=new Object[]{sourceId};
  return DBHelper.getInstance().query(sql,params);
}","/** 
 * 得到电视剧剧集列表
 * @param sourceId
 * @return
 * @throws SQLException
 */
public static List<Map<String,Object>> getEpisodeList(String sourceId) throws SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Object[] params=new Object[]{sourceId,sourceId};
  return DBHelper.getInstance().query(sql,params);
}",0.8962075848303394
98946,"@RequestMapping(""String_Node_Str"") public void search(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int offset,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String searchTitle,HttpServletResponse response) throws IOException {
  String url=""String_Node_Str"" + searchTitle;
  VideoSearchBean videoSearchBean=null;
  int count=0;
  if (searchTitle.equals(""String_Node_Str"")) {
    videoSearchBean=new VideoSearchBean();
    List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
    videoSearchBean.setList(list);
  }
 else {
    try {
      videoSearchBean=VideoSearch.queryInSphinx(offset,pageSize,searchTitle);
      Map<String,Integer> countMap=videoSearchBean.getCountMap();
      count=countMap.get(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.info(e.getMessage());
      videoSearchBean=new VideoSearchBean();
      List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
      videoSearchBean.setList(list);
    }
  }
  if (count > 0) {
    VideoSearch.countKeyword(searchTitle);
  }
  Pager pager=new Pager(offset,pageSize,count,url);
  response.getWriter().print(MobileList.getList(videoSearchBean.getList(),pager));
}","@RequestMapping(""String_Node_Str"") public void search(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") int offset,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String searchTitle,HttpServletResponse response) throws IOException {
  String url=""String_Node_Str"" + searchTitle;
  VideoSearchBean videoSearchBean=null;
  int count=0;
  if (searchTitle.equals(""String_Node_Str"")) {
    videoSearchBean=new VideoSearchBean();
    List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
    videoSearchBean.setList(list);
  }
 else {
    try {
      videoSearchBean=VideoSearch.queryInSphinx(offset,pageSize,searchTitle);
      Map<String,Integer> countMap=videoSearchBean.getCountMap();
      count=countMap.get(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.info(e.getMessage());
      videoSearchBean=new VideoSearchBean();
      List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
      videoSearchBean.setList(list);
    }
  }
  if (count > 0 && offset == 1) {
    VideoSearch.countKeyword(searchTitle);
  }
  Pager pager=new Pager(offset,pageSize,count,url);
  response.getWriter().print(MobileList.getList(videoSearchBean.getList(),pager));
}",0.994011976047904
98947,"Course(String token,CourseSubject courseSubject){
  this.token=token;
  this.subject=courseSubject;
  key=new Key(token);
}","public Course(String token){
  this.token=token;
  key=new Key(token);
}",0.6666666666666666
98948,"public Exercise(Course course,int id){
  this.course=course;
  this.id=id;
  this.key=new Key(course.getKey(),id);
}","public Exercise(Course course,int id){
  this.course=course;
  this.id=id;
  this.key=new Key(course.getKey(),id + ""String_Node_Str"");
}",0.9206349206349206
98949,"@Override public void dropTables(){
}","@Override public void dropTables(){
  String query=""String_Node_Str"";
  Statement stmt=this.connection.createStatement();
  stmt.executeQuery(query);
  stmt.close();
}",0.3627450980392157
98950,"@Override public Course getCourse(String id) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",id);
  stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  Course c=new Course(rs.getString(""String_Node_Str""));
  c.setStartDate(rs.getDate(""String_Node_Str""));
  c.setEndDate(rs.getDate(""String_Node_Str""));
  c.setInstructor(new Instructor(rs.getInt(""String_Node_Str"")));
  rs.close();
  stmt.close();
  return c;
}","@Override public Course getCourse(String id) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",id);
  Statement stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  Course c=new Course(rs.getString(""String_Node_Str""));
  c.setStartDate(rs.getDate(""String_Node_Str""));
  c.setEndDate(rs.getDate(""String_Node_Str""));
  c.setInstructor(new Instructor(new User(rs.getInt(""String_Node_Str""),ROLE_INSTRUCTOR)));
  rs.close();
  stmt.close();
  return c;
}",0.9613899613899614
98951,"@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}","@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Statement stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}",0.9843260188087776
98952,"@Override public List<Course> getByInstructor(Instructor instructor) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",Instructor.userId);
  stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  List<Course> courses=new ArrayList<Course>();
  while (rs.next) {
    Course c=new Course(rs.String(""String_Node_Str""));
    c.setStartDate(rs.getDate(""String_Node_Str""));
    c.setEndDate(rs.getDate(""String_Node_Str""));
    c.setInstructor(new Instructor(rs.getInt(""String_Node_Str"")));
    courses.add(c);
  }
  rs.close();
  stmt.close();
  return courses;
}","@Override public List<Course> getByInstructor(Instructor instructor) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",instructor.getUserId());
  Statement stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  List<Course> courses=new ArrayList<Course>();
  while (rs.next()) {
    Course c=new Course(rs.String(""String_Node_Str""));
    c.setStartDate(rs.getDate(""String_Node_Str""));
    c.setEndDate(rs.getDate(""String_Node_Str""));
    c.setInstructor(new Instructor(new User(rs.getInt(""String_Node_Str""),User.ROLE_INSTRUCTOR)));
    courses.add(c);
  }
  rs.close();
  stmt.close();
  return courses;
}",0.933933933933934
98953,"@Override public List<ExerciseAttempt> getExerciseAttemptsForExercise(Exercise e){
  String query=String.format(""String_Node_Str"",e.id);
  stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  List<ExerciseAttempt> attempts=new ArrayList<ExerciseAttempt>();
  while (rs.next()) {
    Course c=new Course(rs.getString(""String_Node_Str""));
    ExerciseAttempt ea=new ExerciseAttempt(c,new Student(rs.getInt(""String_Node_Str"")),rs.getDate(""String_Node_Str""),new Exercise(c,rs.getInt(""String_Node_Str"")));
    attempts.add(ea);
  }
  stmt.close();
  rs.close();
  return ea;
}","@Override public List<ExerciseAttempt> getExerciseAttemptsForExercise(Exercise e){
}",0.2452554744525547
98954,"@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}","@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Statement stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}",0.98220640569395
98955,"@Override public Exercise getExercise(Course course,String id) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",course.id,id);
  stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  Exercise e=new Exercise(new Course(rs.getString(""String_Node_Str"")),rs.getInt(""String_Node_Str""));
  e.setStartDate(rs.getDate(""String_Node_Str""));
  e.setEndDate(rs.getDate(""String_Node_Str""));
  e.setRandomizationSeed(rs.getInt(""String_Node_Str""));
  e.setRetriesAllowed(rs.getInt(""String_Node_Str""));
  e.setScoreSelectionMethod(rs.getInt(""String_Node_Str""));
  e.setPointsPerCorrectAnswer(rs.getInt(""String_Node_Str""));
  e.setPointsPerWrongAnswer(rs.getInt(""String_Node_Str""));
  stmt.close();
  rs.close();
  return e;
}","@Override public Exercise getExercise(Course course,String id) throws ConnectionFailedException, RecordNotFoundException {
  String query=String.format(""String_Node_Str"",course.id,id);
  Statement stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  Exercise e=new Exercise(new Course(rs.getString(""String_Node_Str"")),rs.getInt(""String_Node_Str""));
  e.setStartDate(rs.getDate(""String_Node_Str""));
  e.setEndDate(rs.getDate(""String_Node_Str""));
  e.setRandomizationSeed(rs.getInt(""String_Node_Str""));
  e.setRetriesAllowed(rs.getInt(""String_Node_Str""));
  e.setScoreSelectionMethod(rs.getInt(""String_Node_Str""));
  e.setPointsPerCorrectAnswer(rs.getInt(""String_Node_Str""));
  e.setPointsPerWrongAnswer(rs.getInt(""String_Node_Str""));
  stmt.close();
  rs.close();
  return e;
}",0.9937578027465668
98956,"@Override public void dropTables(){
}","@Override public void dropTables(){
  String query=""String_Node_Str"";
  Statement stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}",0.3609756097560975
98957,"@Override public List<Exercise> getExercisesByCourse(Course course) throws RecordNotFoundException {
  String query=String.format(""String_Node_Str"",course.token);
  stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  List<Exercise> exercises=new ArrayList<Exercise>();
  while (rs.next()) {
    Exercise e=new Exercise(course,rs.getInt(""String_Node_Str""));
    e.setStartDate(rs.getDate(""String_Node_Str""));
    e.setEndDate(rs.getDate(""String_Node_Str""));
    e.setRandomizationSeed(rs.getInt(""String_Node_Str""));
    e.setRetriesAllowed(rs.getInt(""String_Node_Str""));
    e.setScoreSelectionMethod(rs.getInt(""String_Node_Str""));
    e.setPointsPerCorrectAnswer(rs.getInt(""String_Node_Str""));
    e.setPointsPerWrongAnswer(rs.getInt(""String_Node_Str""));
    exercises.add(e);
  }
  stmt.close();
  rs.close();
  return e;
}","@Override public List<Exercise> getExercisesByCourse(Course course) throws RecordNotFoundException {
  String query=String.format(""String_Node_Str"",course.getToken());
  Statement stmt=this.connection.createStatement();
  ResultSet rs=stmt.executeQuery(query);
  List<Exercise> exercises=new ArrayList<Exercise>();
  while (rs.next()) {
    Exercise e=new Exercise(course,rs.getInt(""String_Node_Str""));
    e.setStartDate(rs.getDate(""String_Node_Str""));
    e.setEndDate(rs.getDate(""String_Node_Str""));
    e.setRandomizationSeed(rs.getInt(""String_Node_Str""));
    e.setRetriesAllowed(rs.getInt(""String_Node_Str""));
    e.setScoreSelectionMethod(rs.getInt(""String_Node_Str""));
    e.setPointsPerCorrectAnswer(rs.getInt(""String_Node_Str""));
    e.setPointsPerWrongAnswer(rs.getInt(""String_Node_Str""));
    exercises.add(e);
  }
  stmt.close();
  rs.close();
  return exercises;
}",0.9809578765147144
98958,"@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}","@Override public void createTables(){
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  Statement stmt=this.connection.createStatement();
  stmt.executeUpdate(query);
  stmt.close();
}",0.9873417721518988
98959,"protected List<Square> findWord(String word){
  grid.resetParentsAndColors();
  stack=addLettersToStackInReverseOrder(word);
  List<Square> startingSquares=getSquaresByValue(word.charAt(0));
  Square solution=null;
  for (  Square startingSquare : startingSquares) {
    solution=findCharsStartingAt(startingSquare);
    if (solution != null) {
      break;
    }
  }
  return buildPathFromSolution(solution);
}","protected List<Square> findWord(String word){
  stack=addLettersToStackInReverseOrder(word);
  for (  Square startingSquare : getSquaresByValue(word.charAt(0))) {
    grid.resetParentsAndColors();
    Square solution=findCharsStartingAt(startingSquare);
    if (solution != null) {
      return buildPathFromSolution(solution);
    }
  }
  return new ArrayList<Square>();
}",0.6556122448979592
98960,"private Square findCharsStartingAt(Square square){
  square.setColor(Color.GREY);
  char topOfStack=stack.pop();
  if (square.getValue() == topOfStack) {
    if (stack.isEmpty()) {
      return square;
    }
    for (    Square neighbor : grid.getNeighbors(square)) {
      if (Color.WHITE.equals(neighbor.getColor())) {
        neighbor.setParent(square);
        Square solution=findCharsStartingAt(neighbor);
        if (solution != null) {
          return solution;
        }
      }
    }
  }
  stack.push(topOfStack);
  square.setColor(Color.BLACK);
  return null;
}","private Square findCharsStartingAt(Square square){
  square.setColor(Color.GREY);
  char topOfStack=stack.pop();
  if (square.getValue() == topOfStack) {
    if (stack.isEmpty()) {
      return square;
    }
    for (    Square neighbor : grid.getNeighbors(square)) {
      if (Color.WHITE.equals(neighbor.getColor()) || Color.BLACK.equals(neighbor.getColor())) {
        neighbor.setParent(square);
        Square solution=findCharsStartingAt(neighbor);
        if (solution != null) {
          return solution;
        }
      }
    }
  }
  stack.push(topOfStack);
  square.setColor(Color.BLACK);
  return null;
}",0.5534062237174096
98961,"@Test public void testFindWord() throws Exception {
  String[] wordsToFind={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String wordToFind : wordsToFind) {
    List<Square> solution=wordSearcher.findWord(wordToFind);
    assertSquaresEqual(wordToFind,solution);
  }
}","@Test public void testFindWord() throws Exception {
  String[] wordsToFind={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String wordToFind : wordsToFind) {
    List<Square> solution=wordSearcher.findWord(wordToFind);
    assertSquaresEqual(wordToFind,solution);
  }
}",0.9795454545454544
98962,"public void initResources(){
  playfield=new PlayField();
  playfield.setBackground(new ColorBackground(Color.LIGHT_GRAY,1200,900));
  HUD=new HeadsUpDisplay(getImage(""String_Node_Str""),0,0);
  s1=new BryanSprite();
  s1.setImage(getImage(""String_Node_Str""));
  s1.setLocation(300,200);
  s1.createStat(""String_Node_Str"",new NumberStat(300));
  s1.createStat(""String_Node_Str"",new NumberStat(300));
  s1.createStat(""String_Node_Str"",new NumberStat(0));
  timeStat=new NumberStat(0);
  SpriteGroup character=new SpriteGroup(""String_Node_Str"");
  character.add(s1);
  GraphicItem healthbar=new GraphicItem(getImage(""String_Node_Str"",false),75,3,s1.getStat(""String_Node_Str""));
  HUD.addItem(healthbar);
  FollowGraphicItem manabar=new FollowGraphicItem(getImage(""String_Node_Str"",false),-50,-20,s1.getStat(""String_Node_Str""),s1);
  HUD.addItem(manabar);
  scoreFont=fontManager.getFont(getImages(""String_Node_Str"",8,12));
  TextItem score=new TextItem(scoreFont,400,10,s1.getStat(""String_Node_Str""));
  HUD.addItem(score);
  timeStat.incrementWithTimer(500,1);
  TextItem timerScore=new TextItem(scoreFont,25,10,timeStat);
  HUD.addItem(timerScore);
  FollowTextItem Followscore=new FollowTextItem(scoreFont,-50,-40,timeStat,s1);
  HUD.addItem(Followscore);
  Sprite wall1=new Sprite(getImage(""String_Node_Str""));
  wall1.setLocation(350,400);
  Sprite wall2=new Sprite(getImage(""String_Node_Str""));
  wall2.setLocation(300,400);
  Sprite wall3=new Sprite(getImage(""String_Node_Str""));
  wall3.setLocation(200,400);
  Sprite wall4=new Sprite(getImage(""String_Node_Str""));
  wall4.setLocation(250,400);
  SpriteGroup walls=new SpriteGroup(""String_Node_Str"");
  walls.add(wall1);
  walls.add(wall2);
  walls.add(wall3);
  walls.add(wall4);
  collisionTypeWall=new WallCollision();
  collisionTypeWall.setCollisionGroup(character,walls);
  playfield.addGroup(character);
  playfield.addGroup(walls);
}","public void initResources(){
  playfield=new PlayField();
  playfield.setBackground(new ColorBackground(Color.LIGHT_GRAY,1200,900));
  HUD=new HeadsUpDisplay(getImage(""String_Node_Str""),0,0);
  s1=new BryanSprite();
  s1.setImage(getImage(""String_Node_Str""));
  s1.setLocation(300,200);
  s1.createStat(""String_Node_Str"",new NumberStat(300));
  s1.createStat(""String_Node_Str"",new NumberStat(300));
  s1.createStat(""String_Node_Str"",new NumberStat(0));
  timeStat=new NumberStat(0);
  generalTime=new NumberStat(0);
  SpriteGroup character=new SpriteGroup(""String_Node_Str"");
  character.add(s1);
  GraphicItem healthbar=new GraphicItem(getImage(""String_Node_Str"",false),75,3,s1.getStat(""String_Node_Str""));
  HUD.addItem(healthbar);
  FollowGraphicItem manabar=new FollowGraphicItem(getImage(""String_Node_Str"",false),-50,-20,s1.getStat(""String_Node_Str""),s1);
  HUD.addItem(manabar);
  scoreFont=fontManager.getFont(getImages(""String_Node_Str"",8,12));
  TextItem score=new TextItem(scoreFont,500,10,s1.getStat(""String_Node_Str""));
  HUD.addItem(score);
  generalTime.incrementWithTimer(100,100);
  TimerItem generalTimer=new TimerItem(scoreFont,400,10,generalTime);
  HUD.addItem(generalTimer);
  timeStat.incrementWithTimer(500,1);
  TextItem timerScore=new TextItem(scoreFont,25,10,timeStat);
  HUD.addItem(timerScore);
  FollowTextItem Followscore=new FollowTextItem(scoreFont,-50,-40,timeStat,s1);
  HUD.addItem(Followscore);
  Sprite wall1=new Sprite(getImage(""String_Node_Str""));
  wall1.setLocation(350,400);
  Sprite wall2=new Sprite(getImage(""String_Node_Str""));
  wall2.setLocation(300,400);
  Sprite wall3=new Sprite(getImage(""String_Node_Str""));
  wall3.setLocation(200,400);
  Sprite wall4=new Sprite(getImage(""String_Node_Str""));
  wall4.setLocation(250,400);
  SpriteGroup walls=new SpriteGroup(""String_Node_Str"");
  walls.add(wall1);
  walls.add(wall2);
  walls.add(wall3);
  walls.add(wall4);
  collisionTypeWall=new WallCollision();
  collisionTypeWall.setCollisionGroup(character,walls);
  playfield.addGroup(character);
  playfield.addGroup(walls);
}",0.8873203932442651
98963,"public void update(long elapsedTime){
  EventManager.getEventManager().update(elapsedTime);
  playfield.update(elapsedTime);
  HUD.update(elapsedTime);
  timeStat.update(elapsedTime);
}","public void update(long elapsedTime){
  EventManager.getEventManager().update(elapsedTime);
  playfield.update(elapsedTime);
  HUD.update(elapsedTime);
  timeStat.update(elapsedTime);
  generalTime.update(elapsedTime);
}",0.9135802469135802
98964,"public GraphicItem(BufferedImage image,int x,int y,Stat stat){
  myImage=image;
  myStat=stat;
  myX=x;
  myY=y;
  HUDactive=true;
  myFlashTimer=new Timer(50);
}","public GraphicItem(BufferedImage image,int x,int y,Stat stat){
  myImage=image;
  myStat=stat;
  myX=x;
  myY=y;
  HUDactive=true;
  myFlashTimer=new Timer(50);
  myOriginalWidth=image.getWidth();
}",0.9
98965,"public void findNewSize(){
  int newImageWidth;
  if ((int)(getMyImage().getWidth() * (myStat.getValue() / myStat.getStartValue())) == 0)   newImageWidth=2;
 else   if (myStat.getValue() / myStat.getStartValue() > .97)   newImageWidth=100;
 else   newImageWidth=(int)(getMyImage().getWidth() * (myStat.getValue() / myStat.getStartValue()));
  Image scaledImage=getMyImage().getScaledInstance(newImageWidth,getMyImage().getHeight(),1);
  myImage=convertToBufferedImage(scaledImage);
}","public void findNewSize(){
  int newImageWidth;
  if ((int)(getMyImage().getWidth() * (myStat.getValue() / myStat.getStartValue())) == 0)   newImageWidth=2;
 else   if (myStat.getValue() / myStat.getStartValue() > .97)   newImageWidth=myOriginalWidth;
 else   newImageWidth=(int)(getMyImage().getWidth() * (myStat.getValue() / myStat.getStartValue()));
  Image scaledImage=getMyImage().getScaledInstance(newImageWidth,getMyImage().getHeight(),1);
  myImage=convertToBufferedImage(scaledImage);
}",0.98159509202454
98966,"public void update(long elapsedTime){
  EventManager.getEventManager().update(elapsedTime);
  playfield.update(elapsedTime);
  if (keyDown(KeyEvent.VK_LEFT)) {
    HUD.update(elapsedTime);
  }
  if (keyDown(KeyEvent.VK_LEFT)) {
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
  if (keyDown(KeyEvent.VK_RIGHT)) {
  }
  if (keyDown(KeyEvent.VK_RIGHT)) {
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
  if (keyDown(KeyEvent.VK_UP)) {
    s1.move(0,1);
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
}","public void update(long elapsedTime){
  EventManager.getEventManager().update(elapsedTime);
  playfield.update(elapsedTime);
  HUD.update(elapsedTime);
  if (keyDown(KeyEvent.VK_LEFT)) {
    HUD.update(elapsedTime);
  }
  if (keyDown(KeyEvent.VK_LEFT)) {
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
  if (keyDown(KeyEvent.VK_RIGHT)) {
  }
  if (keyDown(KeyEvent.VK_RIGHT)) {
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
  if (keyDown(KeyEvent.VK_UP)) {
    s1.move(0,1);
    EventManager.getEventManager().sendEvent(""String_Node_Str"");
  }
}",0.9765828274067648
98967,"@Override public void actionPerformed(Object object){
}","@Override public void actionPerformed(Object object){
  mySprite.changeScore(""String_Node_Str"",-3);
  mySprite.changeScore(""String_Node_Str"",20);
}",0.5445544554455446
98968,"public PlayField createLevel(String jsonString){
  PlayField field=new PlayField();
  Gson gson=new Gson();
  Scanner scanner;
  try {
    scanner=new Scanner(new File(jsonString));
    String wholeFile=scanner.useDelimiter(""String_Node_Str"").next();
    Type collectionType=new TypeToken<GameFile>(){
    }
.getType();
    myGameInfo=gson.fromJson(wholeFile,collectionType);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (myGameInfo == null) {
    return null;
  }
  File backgroundPathFile=null;
  BufferedImage myBackground=null;
  try {
    backgroundPathFile=new File(myGameInfo.getBackground());
    myBackground=ImageIO.read(backgroundPathFile);
  }
 catch (  IOException e1) {
    System.out.print(""String_Node_Str"");
  }
  background=new ImageBackground(myBackground);
  field=new PlayField(background);
  myGame.CHARACTER=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.PROJECTILE=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.POWER_UP=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.PLATFORM=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.SPAWNPOINT=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.COINS=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.BAD_GUYS=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.SPRINGS=field.addGroup(new SpriteGroup(""String_Node_Str""));
  ArrayList<LESprite> SpriteList=new ArrayList<LESprite>();
  SpriteList.add(new Bad_Guys());
  SpriteList.add(new Character());
  SpriteList.add(new Platform());
  for (int k=0; k < myGameInfo.getList().size(); k++) {
    ArrayList<String> LESpriteinfo=myGameInfo.getList().get(k);
    for (int i=0; i < SpriteList.size(); i++) {
      if (SpriteList.get(i).isInstanceOf(LESpriteinfo)) {
        Sprite sprite=SpriteList.get(i).parse(LESpriteinfo,myGame);
      }
    }
  }
  return field;
}","public PlayField createLevel(String jsonString){
  PlayField field=new PlayField();
  Gson gson=new Gson();
  Scanner scanner;
  try {
    scanner=new Scanner(new File(jsonString));
    String wholeFile=scanner.useDelimiter(""String_Node_Str"").next();
    Type collectionType=new TypeToken<GameFile>(){
    }
.getType();
    myGameInfo=gson.fromJson(wholeFile,collectionType);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (myGameInfo == null) {
    return null;
  }
  File backgroundPathFile=null;
  BufferedImage myBackground=null;
  try {
    backgroundPathFile=new File(myGameInfo.getBackground());
    myBackground=ImageIO.read(backgroundPathFile);
  }
 catch (  IOException e1) {
    System.out.print(""String_Node_Str"");
  }
  background=new ImageBackground(myBackground);
  field=new PlayField(background);
  myGame.CHARACTER=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.PROJECTILE=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.POWER_UP=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.PLATFORM=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.SPAWNPOINT=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.COINS=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.BAD_GUYS=field.addGroup(new SpriteGroup(""String_Node_Str""));
  myGame.INTERACTIVE_SPRITES=field.addGroup(new SpriteGroup(""String_Node_Str""));
  ArrayList<LESprite> SpriteList=new ArrayList<LESprite>();
  SpriteList.add(new Bad_Guys());
  SpriteList.add(new Character());
  SpriteList.add(new Platform());
  for (int k=0; k < myGameInfo.getList().size(); k++) {
    ArrayList<String> LESpriteinfo=myGameInfo.getList().get(k);
    for (int i=0; i < SpriteList.size(); i++) {
      if (SpriteList.get(i).isInstanceOf(LESpriteinfo)) {
        Sprite sprite=SpriteList.get(i).parse(LESpriteinfo,myGame);
      }
    }
  }
  return field;
}",0.9957916885849551
98969,"private EventManager(){
  mapEventToEventListnerList=new HashMap<String,ArrayList<EventListener>>();
  mapEventConditionToEvent=new HashMap<EventCondition,String>();
}","public EventManager(){
  myEventManager=this;
  mapEventConditionToEvent=new HashMap<EventCondition,String>();
}",0.7096774193548387
98970,"public void sendEvent(String e){
  for (  String event : mapEventToEventListnerList.keySet()) {
    if (event.equals(e)) {
      for (      EventListener listener : mapEventToEventListnerList.get(event)) {
        listener.actionPerformed(event);
      }
    }
  }
}","public void sendEvent(String e){
  for (  String event : myEventQueue.getEventListenerMap().keySet()) {
    if (event.equals(e)) {
      for (      EventListener listener : myEventQueue.getEventListenerMap().get(event)) {
        listener.actionPerformed(event);
      }
    }
  }
}",0.8029197080291971
98971,"public void unregisterEventListener(String e,EventListener listener){
  myEventQueue.unregisterEventListener(e,listener);
  ArrayList<EventListener> list=mapEventToEventListnerList.get(e);
  list.remove(listener);
}","public void unregisterEventListener(String e,EventListener listener){
  myEventQueue.unregisterEventListener(e,listener);
}",0.727810650887574
98972,"public static String format(double amount){
  return roundToDecimals(amount,2) + ""String_Node_Str"" + moneyname;
}","public static String format(double amount){
  return SpAEconomy.formatMoney(amount);
}",0.6733668341708543
98973,"@Override public void onEnable(){
  Server=this.getServer();
  plugin=(SpAEconomy)getServer().getPluginManager().getPlugin(""String_Node_Str"");
  moneyname=plugin.getMoneyName();
  info(""String_Node_Str"");
}","@Override public void onEnable(){
  info(""String_Node_Str"");
}",0.4626865671641791
98974,"public boolean exists(String name){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    return iConomy.plugin.accounts.exists(name,account,false);
  }
  return false;
}","public boolean exists(String name){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    return SpAEconomy.instance.accounts.exists(name,account);
  }
  return false;
}",0.8837209302325582
98975,"public boolean create(String name,Double balance,Integer status){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    iConomy.plugin.accounts.create(name,account,balance);
    iConomy.plugin.accounts.setHidden(name,account,status <= 0 ? false : true);
    return true;
  }
  return false;
}","public boolean create(String name,Double balance,Integer status){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    SpAEconomy.instance.accounts.create(name,account,balance);
    SpAEconomy.instance.accounts.setHidden(name,account,status <= 0 ? false : true);
    return true;
  }
  return false;
}",0.9266666666666666
98976,"public void add(double amount){
  double balance=getBalance().doubleValue();
  double ending=balance + amount;
  math(amount,balance,ending);
}","public void add(double amount){
  double balance=this.getBalance();
  double ending=balance + amount;
  this.math(amount,balance,ending);
}",0.9148936170212766
98977,"public boolean isNegative(){
  return getBalance().doubleValue() < 0.0D;
}","public boolean isNegative(){
  return this.getBalance() < 0.0D;
}",0.8633093525179856
98978,"public Double getBalance(){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    return iConomy.plugin.accounts.getBalance(name,account);
  }
  return 0.0D;
}","public Double getBalance(){
  Player player=Bukkit.getPlayer(this.name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  Double result=0.0D;
  if (account != null) {
    result=SpAEconomy.instance.accounts.getBalance(this.name,account);
  }
  return result == null ? 0.0D : result;
}",0.6259097525473072
98979,"public boolean hasEnough(double amount){
  return amount <= getBalance().doubleValue();
}","public boolean hasEnough(double amount){
  return amount <= this.getBalance();
}",0.8875739644970414
98980,"public boolean hasOver(double amount){
  return amount < getBalance().doubleValue();
}","public boolean hasOver(double amount){
  return amount < this.getBalance();
}",0.8834355828220859
98981,"public void subtract(double amount){
  double balance=getBalance().doubleValue();
  double ending=balance - amount;
  math(amount,balance,ending);
}","public void subtract(double amount){
  double balance=this.getBalance();
  double ending=balance - amount;
  this.math(amount,balance,ending);
}",0.9178082191780822
98982,"public void divide(double amount){
  double balance=getBalance().doubleValue();
  double ending=balance / amount;
  math(amount,balance,ending);
}","public void divide(double amount){
  double balance=this.getBalance();
  double ending=balance / amount;
  this.math(amount,balance,ending);
}",0.9166666666666666
98983,"private void math(double amount,double balance,double ending){
  setBalance(ending);
}","private void math(double amount,double balance,double ending){
  this.setBalance(ending);
}",0.9717514124293786
98984,"public boolean hasUnder(double amount){
  return amount > getBalance().doubleValue();
}","public boolean hasUnder(double amount){
  return amount > this.getBalance();
}",0.8848484848484849
98985,"public void setBalance(double balance){
  Player player=Bukkit.getPlayer(name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    iConomy.plugin.accounts.setBalance(name,account,balance);
  }
}","public void setBalance(double balance){
  Player player=Bukkit.getPlayer(this.name);
  String account=SpAEconomy.defaultAccountName;
  if (player != null) {
    account=SpAEconomy.getAccountForWorld(player.getWorld());
  }
  if (account != null) {
    SpAEconomy.instance.accounts.setBalance(this.name,account,balance);
  }
}",0.9322834645669292
98986,"public void multiply(double amount){
  double balance=getBalance().doubleValue();
  double ending=balance * amount;
  math(amount,balance,ending);
}","public void multiply(double amount){
  double balance=this.getBalance();
  double ending=balance * amount;
  this.math(amount,balance,ending);
}",0.9178082191780822
98987,"/** 
 * to get the categories of commodity
 * @throws UnsupportedEncodingException
 */
public String getItemCats() throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",0);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  return result;
}","/** 
 * to get the categories of commodity
 * @throws UnsupportedEncodingException
 */
public String getItemCats() throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",0);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9232531500572738
98988,"/** 
 * to get the information of shop
 * @param sid
 * @throws UnsupportedEncodingException
 */
public String getShopInfo(int sid) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",sid);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  return result;
}","/** 
 * to get the information of shop
 * @param sid
 * @throws UnsupportedEncodingException
 */
public String getShopInfo(int sid) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",sid);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9264544456641054
98989,"public static void main(String[] args){
  FiftyNineSecondConfig fnc=new FiftyNineSecondConfig();
  try {
    fnc.init();
    FiftyNineSecondsService fnss=new FiftyNineSecondsService(fnc);
    System.out.println(fnss.getShopInfo(1004));
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
}","public static void main(String[] args){
  FiftyNineSecondConfig fnc=new FiftyNineSecondConfig();
  try {
    fnc.init();
    FiftyNineSecondsService fnss=new FiftyNineSecondsService(fnc);
    String xmlCats=fnss.getItemCats();
    List<Integer> cats=DBParserUtil.getAllCats(xmlCats);
    System.out.println(cats);
    for (    int i : cats) {
      fnc.init();
      System.out.println(fnss.getItemListByCats(i,1));
    }
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
}",0.7188264058679706
98990,"/** 
 * to get the commodity list according to categories
 * @param category id
 * @throws UnsupportedEncodingException
 */
public String getItemListByCats(int cid,int pageNo) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",cid);
  fnc.getMap().put(""String_Node_Str"",40);
  fnc.getMap().put(""String_Node_Str"",pageNo);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  return result;
}","/** 
 * to get the commodity list according to categories
 * @param category id
 * @throws UnsupportedEncodingException
 */
public String getItemListByCats(int cid,int pageNo) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",cid);
  fnc.getMap().put(""String_Node_Str"",40);
  fnc.getMap().put(""String_Node_Str"",pageNo);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9429787234042554
98991,"public String getMalesRanking(){
  url.append(""String_Node_Str"");
  return YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
}","public String getMalesRanking(){
  url.append(""String_Node_Str"");
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
  url=new StringBuffer(url.substring(0,21));
  return result;
}",0.7621776504297995
98992,"public String getWeeklyranking(){
  url.append(""String_Node_Str"");
  return YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
}","public String getWeeklyranking(){
  url.append(""String_Node_Str"");
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
  url=new StringBuffer(url.substring(0,21));
  return result;
}",0.7635327635327636
98993,"public String getLadiesRanking(){
  url.append(""String_Node_Str"");
  return YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
}","public String getLadiesRanking(){
  url.append(""String_Node_Str"");
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,vc));
  url=new StringBuffer(url.substring(0,21));
  return result;
}",0.7635327635327636
98994,"/** 
 * to get the categories of commodity
 * @throws UnsupportedEncodingException
 */
public String getItemCats() throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",0);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}","/** 
 * to get the categories of commodity
 * @throws UnsupportedEncodingException
 */
public String getItemCats() throws UnsupportedEncodingException {
  fnc.init();
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",0);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9853249475890984
98995,"/** 
 * to get the information of shop
 * @param sid
 * @throws UnsupportedEncodingException
 */
public String getShopInfo(int sid) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",sid);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}","/** 
 * to get the information of shop
 * @param sid
 * @throws UnsupportedEncodingException
 */
public String getShopInfo(int sid) throws UnsupportedEncodingException {
  fnc.init();
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",sid);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9858870967741936
98996,"public static void main(String[] args){
  FiftyNineSecondConfig fnc=new FiftyNineSecondConfig();
  try {
    fnc.init();
    FiftyNineSecondsService fnss=new FiftyNineSecondsService(fnc);
    String xmlCats=fnss.getItemCats();
    List<Integer> cats=DBParserUtil.getAllCats(xmlCats);
    System.out.println(cats);
    for (    int i : cats) {
      for (int n=1; n <= 99; n++) {
        fnc.init();
        System.out.println(fnss.getItemListByCats(i,n));
      }
    }
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
}","public static void main(String[] args){
  FiftyNineSecondConfig fnc=new FiftyNineSecondConfig();
  try {
    FiftyNineSecondsService fnss=new FiftyNineSecondsService(fnc);
    String xmlCats=fnss.getPromoCats();
    List<Integer> cats=DBParserUtil.getAllCats(xmlCats);
    System.out.println(cats);
  }
 catch (  UnsupportedEncodingException e1) {
    e1.printStackTrace();
  }
}",0.8051668460710442
98997,"/** 
 * to get the commodity list according to categories
 * @param category id
 * @throws UnsupportedEncodingException
 */
public String getItemListByCats(int cid,int pageNo) throws UnsupportedEncodingException {
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",cid);
  fnc.getMap().put(""String_Node_Str"",40);
  fnc.getMap().put(""String_Node_Str"",pageNo);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}","/** 
 * to get the commodity list according to categories
 * @param category id
 * @throws UnsupportedEncodingException
 */
public String getItemListByCats(int cid,int pageNo) throws UnsupportedEncodingException {
  fnc.init();
  fnc.setMethod(""String_Node_Str"");
  fnc.getMap().put(""String_Node_Str"",cid);
  fnc.getMap().put(""String_Node_Str"",40);
  fnc.getMap().put(""String_Node_Str"",pageNo);
  fnc.getMap().put(""String_Node_Str"",""String_Node_Str"");
  fnc.setSign();
  String result=YoubuyService.handleGet(YoubuyService.handleArguments(url,fnc));
  url=new StringBuffer(""String_Node_Str"");
  fnc.getMap().clear();
  return result;
}",0.9888535031847132
98998,"@Override public void start(){
  super.start();
  if (addr == CLIENT_ID) {
    getDataLocations(null);
  }
}","@Override public void start(){
  super.start();
  if (addr == CLIENT_ID) {
    getDataLocations(null);
  }
  pingServers();
}",0.927038626609442
98999,"/** 
 * Tests if the given protocol is valid for a RIOPacket. Note that the current implementation of RIOPacket actually uses this to test validity of packets.
 * @param protocol The protocol to be checked
 * @return True if protocol is valid, else false
 */
public static boolean isRIOProtocolValid(int protocol){
  return protocol == RIOTEST_PKT || protocol == RPC_REQUEST_PKT || protocol == RPC_RESULT_PKT || protocol == PAXOS_PKT;
}","/** 
 * Tests if the given protocol is valid for a RIOPacket. Note that the current implementation of RIOPacket actually uses this to test validity of packets.
 * @param protocol The protocol to be checked
 * @return True if protocol is valid, else false
 */
public static boolean isRIOProtocolValid(int protocol){
  return protocol == RIOTEST_PKT || protocol == RPC_REQUEST_PKT || protocol == RPC_RESULT_PKT || protocol == PAXOS_PKT || protocol == TEST;
}",0.9775784753363228
99000,"private void handleDecisionMessage(int instNum,byte[] payload){
  PaxosState state=this.rounds.get(instNum);
  if (state == null) {
    noteOutput(""String_Node_Str"" + instNum + ""String_Node_Str"");
    state=new PaxosState(instNum,payload,false,Arrays.asList(REPLICA_ADDRS));
    this.rounds.put(instNum,state);
  }
  if (state.executed) {
    noteOutput(""String_Node_Str"" + instNum + ""String_Node_Str"");
    catchUpExecution();
    checkAndHandleGaps();
    return;
  }
  if (!state.decided) {
    state.decidedValue=payload;
    state.decided=true;
    logKnownCommands();
  }
  catchUpExecution();
  checkAndHandleGaps();
}","private void handleDecisionMessage(int instNum,byte[] payload){
  PaxosState state=this.rounds.get(instNum);
  if (state == null) {
    noteOutput(""String_Node_Str"" + instNum + ""String_Node_Str"");
    state=new PaxosState(instNum,payload,false,Arrays.asList(REPLICA_ADDRS));
    this.rounds.put(instNum,state);
  }
  if (state.executed) {
    noteOutput(""String_Node_Str"" + instNum + ""String_Node_Str"");
    catchUpExecution();
    checkAndHandleGaps();
    return;
  }
  if (!state.decided) {
    state.decidedValue=payload;
    state.decided=true;
    logKnownCommands();
    logKnownStates();
  }
  catchUpExecution();
  checkAndHandleGaps();
}",0.9827044025157232
