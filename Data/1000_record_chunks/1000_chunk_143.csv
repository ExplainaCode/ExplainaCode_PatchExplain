record_number,buggy_code,fixed_code,code_similarity
142001,"protected static String buildDomainUser(String username){
  if (username != null && CommCareApplication.instance().getCurrentApp() != null) {
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    if (prefs.contains(USER_DOMAIN_SUFFIX)) {
      username+=""String_Node_Str"" + prefs.getString(USER_DOMAIN_SUFFIX,null);
    }
  }
  return username;
}","protected static String buildDomainUser(String username){
  if (username != null && !username.contains(""String_Node_Str"")) {
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    if (prefs.contains(USER_DOMAIN_SUFFIX)) {
      username+=""String_Node_Str"" + prefs.getString(USER_DOMAIN_SUFFIX,null);
    }
  }
  return username;
}",0.8839634941329857
142002,"private URL getURLToTry(){
  if (!requestedFromProd) {
    urlCurrentlyRequestingFrom=PROD_URL;
  }
 else   if (!requestedFromIndia) {
    urlCurrentlyRequestingFrom=INDIA_URL;
  }
 else {
    return null;
  }
  try {
    return new URL(urlCurrentlyRequestingFrom);
  }
 catch (  MalformedURLException e) {
    Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"" + ""String_Node_Str"");
    return null;
  }
}","private String getURLToTry(){
  if (!requestedFromProd) {
    urlCurrentlyRequestingFrom=PROD_URL;
  }
 else   if (!requestedFromIndia) {
    urlCurrentlyRequestingFrom=INDIA_URL;
  }
 else {
    return null;
  }
  return urlCurrentlyRequestingFrom;
}",0.70254110612855
142003,"/** 
 * @return whether a request was initiated
 */
private boolean requestAppList(){
  URL urlToTry=getURLToTry();
  if (urlToTry != null) {
    final View processingRequestView=findViewById(R.id.processing_request_view);
    SimpleHttpTask task=new SimpleHttpTask(this,urlToTry,new HashMap<String,String>(),false,new Pair<>(getUsernameForAuth(),((EditText)findViewById(R.id.edit_password)).getText().toString())){
      @Override protected void onPreExecute(){
        super.onPreExecute();
        processingRequestView.setVisibility(View.VISIBLE);
      }
      @Override protected void onPostExecute(      Void result){
        super.onPostExecute(result);
        processingRequestView.setVisibility(View.GONE);
      }
    }
;
    task.connect((CommCareTaskConnector)this);
    task.setResponseProcessor(this);
    setAttemptedRequestFlag();
    task.executeParallel();
    return true;
  }
  return false;
}","/** 
 * @return whether a request was initiated
 */
private boolean requestAppList(){
  String urlToTry=getURLToTry();
  if (urlToTry != null) {
    final View processingRequestView=findViewById(R.id.processing_request_view);
    String username=getUsernameForAuth();
    String password=((EditText)findViewById(R.id.edit_password)).getText().toString();
    SimpleGetTask task=new SimpleGetTask(username,password,this){
      @Override protected void onPreExecute(){
        super.onPreExecute();
        processingRequestView.setVisibility(View.VISIBLE);
      }
      @Override protected void onPostExecute(      Void result){
        super.onPostExecute(result);
        processingRequestView.setVisibility(View.GONE);
      }
    }
;
    task.connect((CommCareTaskConnector)this);
    setAttemptedRequestFlag();
    task.executeParallel(urlToTry);
    return true;
  }
  return false;
}",0.7763012181616833
142004,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  menu.findItem(RETRIEVE_APPS_FOR_DIFF_USER).setVisible(appsListContainer.getVisibility() == View.VISIBLE);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  menu.findItem(RETRIEVE_APPS_FOR_DIFF_USER).setVisible(appsListContainer.getVisibility() != View.GONE);
  return true;
}",0.97459584295612
142005,"@Override public CustomProgressDialog generateProgressDialog(int taskId){
  String title, message;
switch (taskId) {
case DataPullTask.DATA_PULL_TASK_ID:
    title=Localization.get(""String_Node_Str"");
  message=Localization.get(""String_Node_Str"");
break;
case SimpleHttpTask.SIMPLE_HTTP_TASK_ID:
title=Localization.get(""String_Node_Str"");
message=Localization.get(""String_Node_Str"");
break;
default :
Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
return null;
}
return CustomProgressDialog.newInstance(title,message,taskId);
}","@Override public CustomProgressDialog generateProgressDialog(int taskId){
  String title, message;
switch (taskId) {
case DataPullTask.DATA_PULL_TASK_ID:
    title=Localization.get(""String_Node_Str"");
  message=Localization.get(""String_Node_Str"");
break;
case ModernHttpTask.SIMPLE_HTTP_TASK_ID:
title=Localization.get(""String_Node_Str"");
message=Localization.get(""String_Node_Str"");
break;
default :
Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
return null;
}
return CustomProgressDialog.newInstance(title,message,taskId);
}",0.9886792452830188
142006,"private void makePostRequest(){
  if (!hasTaskLaunched && !inErrorState) {
    SimpleHttpTask postTask;
    try {
      postTask=new SimpleHttpTask(this,url,params,true,null);
    }
 catch (    ModernHttpRequester.PlainTextPasswordException e) {
      enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
      return;
    }
    postTask.connect((CommCareTaskConnector)this);
    postTask.executeParallel();
    hasTaskLaunched=true;
  }
}","private void makePostRequest(){
  if (!hasTaskLaunched && !inErrorState) {
    ModernHttpTask postTask;
    try {
      postTask=new ModernHttpTask(this,url,params,true,null);
    }
 catch (    ModernHttpRequester.PlainTextPasswordException e) {
      enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
      return;
    }
    postTask.connect((CommCareTaskConnector)this);
    postTask.executeParallel();
    hasTaskLaunched=true;
  }
}",0.9736263736263736
142007,"@Override public CustomProgressDialog generateProgressDialog(int taskId){
  String title, message;
switch (taskId) {
case SimpleHttpTask.SIMPLE_HTTP_TASK_ID:
    title=Localization.get(""String_Node_Str"");
  message=Localization.get(""String_Node_Str"");
break;
default :
Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
return null;
}
return CustomProgressDialog.newInstance(title,message,taskId);
}","@Override public CustomProgressDialog generateProgressDialog(int taskId){
  String title, message;
switch (taskId) {
case ModernHttpTask.SIMPLE_HTTP_TASK_ID:
    title=Localization.get(""String_Node_Str"");
  message=Localization.get(""String_Node_Str"");
break;
default :
Log.w(TAG,""String_Node_Str"" + ""String_Node_Str"");
return null;
}
return CustomProgressDialog.newInstance(title,message,taskId);
}",0.984924623115578
142008,"private void makeQueryRequest(){
  clearErrorState();
  URL url=remoteQuerySessionManager.getBaseUrl();
  SimpleHttpTask httpTask;
  try {
    httpTask=new SimpleHttpTask(this,url,new HashMap<>(remoteQuerySessionManager.getRawQueryParams()),false,null);
  }
 catch (  ModernHttpRequester.PlainTextPasswordException e) {
    enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
    return;
  }
  httpTask.connect((CommCareTaskConnector)this);
  httpTask.executeParallel();
}","private void makeQueryRequest(){
  clearErrorState();
  URL url=remoteQuerySessionManager.getBaseUrl();
  ModernHttpTask httpTask;
  try {
    httpTask=new ModernHttpTask(this,url,new HashMap<>(remoteQuerySessionManager.getRawQueryParams()),false,null);
  }
 catch (  ModernHttpRequester.PlainTextPasswordException e) {
    enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
    return;
  }
  httpTask.connect((CommCareTaskConnector)this);
  httpTask.executeParallel();
}",0.9754601226993864
142009,"protected static String buildDomainUser(String username){
  if (username != null) {
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    if (prefs.contains(USER_DOMAIN_SUFFIX)) {
      username+=""String_Node_Str"" + prefs.getString(USER_DOMAIN_SUFFIX,null);
    }
  }
  return username;
}","protected static String buildDomainUser(String username){
  if (username != null && CommCareApplication.instance().getCurrentApp() != null) {
    SharedPreferences prefs=CommCareApplication.instance().getCurrentApp().getAppPreferences();
    if (prefs.contains(USER_DOMAIN_SUFFIX)) {
      username+=""String_Node_Str"" + prefs.getString(USER_DOMAIN_SUFFIX,null);
    }
  }
  return username;
}",0.9201101928374656
142010,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  inflateView(inflater,container);
  if (savedInstanceState != null && savedInstanceState.containsKey(TIME)) {
    calendar=Calendar.getInstance();
    calendar.setTimeInMillis(savedInstanceState.getLong(TIME));
  }
  disableScreenRotation();
  initDisplay();
  initWeekDays();
  initOnClick();
  refresh();
  setWindowSize();
  return layout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  inflateView(inflater,container);
  disableScreenRotation();
  initDisplay();
  initWeekDays();
  initOnClick();
  refresh();
  setWindowSize();
  return layout;
}",0.7887981330221704
142011,"private void openCalendar(){
  setFocus(getContext());
  timeBeforeCalendarOpened=calendar.getTimeInMillis();
  myCalendarFragment.show(fm,""String_Node_Str"");
}","private void openCalendar(){
  setFocus(getContext());
  timeBeforeCalendarOpened=getCurrentMillis();
  calendar.setTimeInMillis(timeBeforeCalendarOpened);
  myCalendarFragment.updateUnderlyingCalendar(calendar);
  myCalendarFragment.show(fm,""String_Node_Str"");
}",0.75177304964539
142012,"public GregorianDateWidget(Context context,FormEntryPrompt prompt,boolean closeButton){
  super(context,prompt);
  maxYear=calendar.get(Calendar.YEAR) + YEARSINFUTURE;
  todaysDateInMillis=calendar.getTimeInMillis();
  ImageButton clearAll=(ImageButton)findViewById(R.id.clear_all);
  if (closeButton) {
    clearAll.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        clearAll();
      }
    }
);
  }
 else {
    clearAll.setVisibility(View.GONE);
  }
  fm=((FragmentActivity)getContext()).getSupportFragmentManager();
  myCalendarFragment=new CalendarFragment();
  setupCalendarFragment();
  openCalButton=(ImageButton)findViewById(R.id.open_calendar_bottom);
  openCalButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      openCalendar();
    }
  }
);
  setAnswer();
}","public GregorianDateWidget(Context context,FormEntryPrompt prompt,boolean closeButton){
  super(context,prompt);
  maxYear=calendar.get(Calendar.YEAR) + YEARSINFUTURE;
  todaysDateInMillis=calendar.getTimeInMillis();
  ImageButton clearAll=(ImageButton)findViewById(R.id.clear_all);
  if (closeButton) {
    clearAll.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        clearAll();
      }
    }
);
  }
 else {
    clearAll.setVisibility(View.GONE);
  }
  fm=((FragmentActivity)getContext()).getSupportFragmentManager();
  myCalendarFragment=new CalendarFragment();
  myCalendarFragment.setListener(this);
  myCalendarFragment.setCancelable(false);
  myCalendarFragment.setToday(todaysDateInMillis);
  openCalButton=(ImageButton)findViewById(R.id.open_calendar_bottom);
  openCalButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      openCalendar();
    }
  }
);
  setAnswer();
}",0.935361216730038
142013,"@Override protected void updateDateDisplay(long millisFromJavaEpoch){
  UniversalDate dateUniv=fromMillis(millisFromJavaEpoch);
  monthArrayPointer=dateUniv.month - 1;
  dayText.setText(String.format(DAYFORMAT,dateUniv.day));
  monthSpinner.setSelection(monthArrayPointer);
  yearText.setText(String.format(YEARFORMAT,dateUniv.year));
  calendar.setTimeInMillis(millisFromJavaEpoch);
  dayOfWeek.setText(calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.LONG,Locale.getDefault()));
  widgetEntryChanged();
}","@Override protected void updateDateDisplay(long millisFromJavaEpoch){
  UniversalDate dateUniv=fromMillis(millisFromJavaEpoch);
  monthArrayPointer=dateUniv.month - 1;
  dayText.setText(String.format(DAYFORMAT,dateUniv.day));
  monthSpinner.setSelection(monthArrayPointer);
  yearText.setText(String.format(YEARFORMAT,dateUniv.year));
  calendar.setTimeInMillis(millisFromJavaEpoch);
  dayOfWeek.setText(calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.LONG,Locale.getDefault()));
  if (dateOfLastWidgetUpdateNotice != millisFromJavaEpoch) {
    dateOfLastWidgetUpdateNotice=millisFromJavaEpoch;
    widgetEntryChanged();
  }
}",0.8941382327209099
142014,"@Override public void onClick(View v){
  errorMessageBox.setVisibility(View.INVISIBLE);
  if (inputIsValid()) {
    authenticateView.setVisibility(View.GONE);
    requestedFromIndia=false;
    requestedFromProd=false;
    failedDueToAuth=false;
    requestAppList();
  }
}","@Override public void onClick(View v){
  errorMessageBox.setVisibility(View.INVISIBLE);
  if (inputIsValid()) {
    authenticateView.setVisibility(View.GONE);
    requestedFromIndia=false;
    requestedFromProd=false;
    requestAppList();
  }
}",0.920696324951644
142015,"private void repeatRequestOrShowResults(){
  if (!requestAppList()) {
    GlobalPrivilegesManager.storeRetrievedAvailableApps(availableApps);
    this.runOnUiThread(new Runnable(){
      @Override public void run(){
        if (availableApps.size() == 0) {
          if (failedDueToAuth) {
            enterErrorState(""String_Node_Str"");
          }
 else {
            enterErrorState(""String_Node_Str"");
          }
        }
 else {
          showResults();
        }
      }
    }
);
  }
}","private void repeatRequestOrShowResults(final boolean responseWasError){
  if (!requestAppList()) {
    GlobalPrivilegesManager.storeRetrievedAvailableApps(availableApps);
    this.runOnUiThread(new Runnable(){
      @Override public void run(){
        if (availableApps.size() == 0) {
          if (responseWasError) {
            enterErrorState(""String_Node_Str"" + ""String_Node_Str"");
          }
 else {
            enterErrorState(""String_Node_Str"");
          }
        }
 else {
          showResults();
        }
      }
    }
);
  }
}",0.8235294117647058
142016,"@Override public void run(){
  if (availableApps.size() == 0) {
    if (failedDueToAuth) {
      enterErrorState(""String_Node_Str"");
    }
 else {
      enterErrorState(""String_Node_Str"");
    }
  }
 else {
    showResults();
  }
}","@Override public void run(){
  if (availableApps.size() == 0) {
    if (responseWasError) {
      enterErrorState(""String_Node_Str"" + ""String_Node_Str"");
    }
 else {
      enterErrorState(""String_Node_Str"");
    }
  }
 else {
    showResults();
  }
}",0.8074534161490683
142017,"@Override public void handleIOException(IOException exception){
  repeatRequestOrShowResults();
}","@Override public void handleIOException(IOException exception){
  repeatRequestOrShowResults(true);
}",0.9797979797979798
142018,"private void handleRequestError(int responseCode){
  System.out.println(responseCode);
  repeatRequestOrShowResults();
}","private void handleRequestError(int responseCode){
  System.out.println(responseCode);
  repeatRequestOrShowResults(true);
}",0.9836065573770492
142019,"@Override public void processClientError(int responseCode){
  if (responseCode == 401 || responseCode == 403) {
    failedDueToAuth=true;
  }
  handleRequestError(responseCode);
}","@Override public void processClientError(int responseCode){
  handleRequestError(responseCode);
}",0.7028985507246377
142020,"@Override public void processSuccess(int responseCode,InputStream responseData){
  System.out.println(""String_Node_Str"");
  processResponseIntoAppsList(responseData);
  repeatRequestOrShowResults();
}","@Override public void processSuccess(int responseCode,InputStream responseData){
  System.out.println(""String_Node_Str"");
  processResponseIntoAppsList(responseData);
  repeatRequestOrShowResults(false);
}",0.9876543209876544
142021,"private void setUpGetAppsButton(){
  Button getAppsButton=(Button)findViewById(R.id.get_apps_button);
  getAppsButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      errorMessageBox.setVisibility(View.INVISIBLE);
      if (inputIsValid()) {
        authenticateView.setVisibility(View.GONE);
        requestedFromIndia=false;
        requestedFromProd=false;
        failedDueToAuth=false;
        requestAppList();
      }
    }
  }
);
}","private void setUpGetAppsButton(){
  Button getAppsButton=(Button)findViewById(R.id.get_apps_button);
  getAppsButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      errorMessageBox.setVisibility(View.INVISIBLE);
      if (inputIsValid()) {
        authenticateView.setVisibility(View.GONE);
        requestedFromIndia=false;
        requestedFromProd=false;
        requestAppList();
      }
    }
  }
);
}",0.952581664910432
142022,"@Override public void processSessionResponse(int statusCode){
  AndroidSessionWrapper asw=CommCareApplication.instance().getCurrentSessionWrapper();
switch (statusCode) {
case SessionNavigator.ASSERTION_FAILURE:
    handleAssertionFailureFromSessionNav(asw);
  break;
case SessionNavigator.NO_CURRENT_FORM:
handleNoFormFromSessionNav(asw);
break;
case SessionNavigator.START_FORM_ENTRY:
startFormEntry(asw);
break;
case SessionNavigator.GET_COMMAND:
handleGetCommand(asw);
break;
case SessionNavigator.START_ENTITY_SELECTION:
launchEntitySelect(asw.getSession());
break;
case SessionNavigator.LAUNCH_CONFIRM_DETAIL:
launchConfirmDetail(asw);
break;
case SessionNavigator.PROCESS_QUERY_REQUEST:
launchQueryMaker();
break;
case SessionNavigator.START_SYNC_REQUEST:
launchRemoteSync(asw);
break;
case SessionNavigator.XPATH_EXCEPTION_THROWN:
UserfacingErrorHandling.logErrorAndShowDialog(this,sessionNavigator.getCurrentException(),false);
break;
case SessionNavigator.REPORT_CASE_AUTOSELECT:
GoogleAnalyticsUtils.reportFeatureUsage(GoogleAnalyticsFields.ACTION_CASE_AUTOSELECT_USED);
break;
}
}","@Override public void processSessionResponse(int statusCode){
  AndroidSessionWrapper asw=CommCareApplication.instance().getCurrentSessionWrapper();
switch (statusCode) {
case SessionNavigator.ASSERTION_FAILURE:
    handleAssertionFailureFromSessionNav(asw);
  break;
case SessionNavigator.NO_CURRENT_FORM:
handleNoFormFromSessionNav(asw);
break;
case SessionNavigator.START_FORM_ENTRY:
startFormEntry(asw);
break;
case SessionNavigator.GET_COMMAND:
handleGetCommand(asw);
break;
case SessionNavigator.START_ENTITY_SELECTION:
launchEntitySelect(asw.getSession());
break;
case SessionNavigator.LAUNCH_CONFIRM_DETAIL:
launchConfirmDetail(asw);
break;
case SessionNavigator.PROCESS_QUERY_REQUEST:
launchQueryMaker();
break;
case SessionNavigator.START_SYNC_REQUEST:
launchRemoteSync(asw);
break;
case SessionNavigator.XPATH_EXCEPTION_THROWN:
UserfacingErrorHandling.logErrorAndShowDialog(this,sessionNavigator.getCurrentException(),false);
asw.reset();
break;
case SessionNavigator.REPORT_CASE_AUTOSELECT:
GoogleAnalyticsUtils.reportFeatureUsage(GoogleAnalyticsFields.ACTION_CASE_AUTOSELECT_USED);
break;
}
}",0.9940828402366864
142023,"@Override public IAnswerData getAnswer(){
  comboBox.dismissDropDown();
  String enteredText=comboBox.getText().toString();
  if (choiceTexts.contains(enteredText)) {
    int i=choiceTexts.indexOf(enteredText);
    return new SelectOneData(new Selection(choices.elementAt(i)));
  }
 else   if (""String_Node_Str"".equals(enteredText)) {
    return null;
  }
 else {
    return new InvalidData(""String_Node_Str"",new SelectOneData(new Selection(0)));
  }
}","@Override public IAnswerData getAnswer(){
  comboBox.dismissDropDown();
  String enteredText=comboBox.getText().toString();
  if (choiceTexts.contains(enteredText)) {
    int i=choiceTexts.indexOf(enteredText);
    return new SelectOneData(new Selection(choices.elementAt(i)));
  }
 else   if (""String_Node_Str"".equals(enteredText)) {
    return null;
  }
 else {
    return new InvalidData(""String_Node_Str"",new SelectOneData(new Selection(enteredText)));
  }
}",0.986870897155361
142024,"private static boolean isTimeForAutoUpdateCheck(long lastUpdateCheck,String autoUpdateFreq){
  int checkEveryNDays;
  if (CommCarePreferences.FREQUENCY_DAILY.equals(autoUpdateFreq)) {
    checkEveryNDays=1;
  }
 else {
    checkEveryNDays=7;
  }
  long duration=DateUtils.DAY_IN_MILLIS * checkEveryNDays;
  return isPending(lastUpdateCheck,duration);
}","public static boolean isTimeForAutoUpdateCheck(long lastUpdateCheck,String autoUpdateFreq){
  int checkEveryNDays;
  if (CommCarePreferences.FREQUENCY_DAILY.equals(autoUpdateFreq)) {
    checkEveryNDays=1;
  }
 else {
    checkEveryNDays=7;
  }
  long duration=DateUtils.DAY_IN_MILLIS * checkEveryNDays;
  return isPending(lastUpdateCheck,duration);
}",0.984352773826458
142025,"/** 
 * Test that trying to install an app with an invalid suite file results in the appropriate error message and a pinned notification with more details
 */
@Test public void invalidAppInstall(){
  String invalidUpdateReference=""String_Node_Str"";
  Intent setupIntent=new Intent(RuntimeEnvironment.application,CommCareSetupActivity.class);
  CommCareSetupActivity setupActivity=Robolectric.buildActivity(CommCareSetupActivity.class).withIntent(setupIntent).setup().get();
  ShadowActivity shadowActivity=Shadows.shadowOf(setupActivity);
  shadowActivity.clickMenuItem(CommCareSetupActivity.MODE_ARCHIVE);
  NotificationManager notificationManager=(NotificationManager)RuntimeEnvironment.application.getSystemService(Context.NOTIFICATION_SERVICE);
  Notification notification=Shadows.shadowOf(notificationManager).getNotification(CommCareApplication.MESSAGE_NOTIFICATION);
  assertNull(notification);
  Intent referenceIntent=new Intent();
  referenceIntent.putExtra(InstallArchiveActivity.ARCHIVE_JR_REFERENCE,invalidUpdateReference);
  shadowActivity.receiveResult(shadowActivity.getNextStartedActivity(),Activity.RESULT_OK,referenceIntent);
  Robolectric.flushBackgroundThreadScheduler();
  Robolectric.flushForegroundThreadScheduler();
  assertTrue(setupActivity.getErrorMessageToDisplay().contains(Localization.get(""String_Node_Str"")));
  notification=Shadows.shadowOf(notificationManager).getNotification(CommCareApplication.MESSAGE_NOTIFICATION);
  assertNotNull(notification);
}","/** 
 * Test that trying to install an app with an invalid suite file results in the appropriate error message and a pinned notification with more details
 */
@Test public void invalidAppInstall(){
  String invalidUpdateReference=""String_Node_Str"";
  Intent setupIntent=new Intent(RuntimeEnvironment.application,CommCareSetupActivity.class);
  CommCareSetupActivity setupActivity=Robolectric.buildActivity(CommCareSetupActivity.class).withIntent(setupIntent).setup().get();
  ShadowActivity shadowActivity=Shadows.shadowOf(setupActivity);
  shadowActivity.clickMenuItem(CommCareSetupActivity.MODE_ARCHIVE);
  NotificationManager notificationManager=(NotificationManager)RuntimeEnvironment.application.getSystemService(Context.NOTIFICATION_SERVICE);
  Notification notification=Shadows.shadowOf(notificationManager).getNotification(CommCareNoficationManager.MESSAGE_NOTIFICATION);
  assertNull(notification);
  Intent referenceIntent=new Intent();
  referenceIntent.putExtra(InstallArchiveActivity.ARCHIVE_JR_REFERENCE,invalidUpdateReference);
  shadowActivity.receiveResult(shadowActivity.getNextStartedActivity(),Activity.RESULT_OK,referenceIntent);
  Robolectric.flushBackgroundThreadScheduler();
  Robolectric.flushForegroundThreadScheduler();
  assertTrue(setupActivity.getErrorMessageToDisplay().contains(Localization.get(""String_Node_Str"")));
  notification=Shadows.shadowOf(notificationManager).getNotification(CommCareNoficationManager.MESSAGE_NOTIFICATION);
  assertNotNull(notification);
}",0.9812458137977228
142026,"/** 
 * Use the update activity to update to a ccz with an invalid suite file. Assert that an error is shown and pinned notification is created w/ more details
 */
@Test public void invalidUpdateTest(){
  String invalidUpdateReference=""String_Node_Str"";
  Intent updateActivityIntent=new Intent(RuntimeEnvironment.application,UpdateActivity.class);
  UpdateActivity updateActivity=Robolectric.buildActivity(UpdateActivity.class).withIntent(updateActivityIntent).setup().get();
  ShadowActivity shadowActivity=Shadows.shadowOf(updateActivity);
  shadowActivity.clickMenuItem(UpdateActivity.MENU_UPDATE_FROM_CCZ);
  NotificationManager notificationManager=(NotificationManager)RuntimeEnvironment.application.getSystemService(Context.NOTIFICATION_SERVICE);
  Notification notification=Shadows.shadowOf(notificationManager).getNotification(CommCareApplication.MESSAGE_NOTIFICATION);
  assertNull(notification);
  Intent referenceIntent=new Intent();
  referenceIntent.putExtra(InstallArchiveActivity.ARCHIVE_JR_REFERENCE,invalidUpdateReference);
  shadowActivity.receiveResult(shadowActivity.getNextStartedActivity(),Activity.RESULT_OK,referenceIntent);
  Robolectric.flushBackgroundThreadScheduler();
  Robolectric.flushForegroundThreadScheduler();
  String errorMessage=(String)((TextView)updateActivity.findViewById(R.id.update_progress_text)).getText();
  assertEquals(Localization.get(""String_Node_Str""),errorMessage);
  notification=Shadows.shadowOf(notificationManager).getNotification(CommCareApplication.MESSAGE_NOTIFICATION);
  assertNotNull(notification);
}","/** 
 * Use the update activity to update to a ccz with an invalid suite file. Assert that an error is shown and pinned notification is created w/ more details
 */
@Test public void invalidUpdateTest(){
  String invalidUpdateReference=""String_Node_Str"";
  Intent updateActivityIntent=new Intent(RuntimeEnvironment.application,UpdateActivity.class);
  UpdateActivity updateActivity=Robolectric.buildActivity(UpdateActivity.class).withIntent(updateActivityIntent).setup().get();
  ShadowActivity shadowActivity=Shadows.shadowOf(updateActivity);
  shadowActivity.clickMenuItem(UpdateActivity.MENU_UPDATE_FROM_CCZ);
  NotificationManager notificationManager=(NotificationManager)RuntimeEnvironment.application.getSystemService(Context.NOTIFICATION_SERVICE);
  Notification notification=Shadows.shadowOf(notificationManager).getNotification(CommCareNoficationManager.MESSAGE_NOTIFICATION);
  assertNull(notification);
  Intent referenceIntent=new Intent();
  referenceIntent.putExtra(InstallArchiveActivity.ARCHIVE_JR_REFERENCE,invalidUpdateReference);
  shadowActivity.receiveResult(shadowActivity.getNextStartedActivity(),Activity.RESULT_OK,referenceIntent);
  Robolectric.flushBackgroundThreadScheduler();
  Robolectric.flushForegroundThreadScheduler();
  String errorMessage=(String)((TextView)updateActivity.findViewById(R.id.update_progress_text)).getText();
  assertEquals(Localization.get(""String_Node_Str""),errorMessage);
  notification=Shadows.shadowOf(notificationManager).getNotification(CommCareNoficationManager.MESSAGE_NOTIFICATION);
  assertNotNull(notification);
}",0.9821656050955414
142027,"@Test public void testAppInit(){
  Assert.assertFalse(CommCareApplication.instance().isUpdatePending());
  Profile p=CommCareApplication.instance().getCommCarePlatform().getCurrentProfile();
  Assert.assertTrue(p.getVersion() == 8);
}","@Test public void testAppInit(){
  Assert.assertFalse(PendingCalcs.isUpdatePending(CommCareApplication.instance().getCurrentApp().getAppPreferences()));
  Profile p=CommCareApplication.instance().getCommCarePlatform().getCurrentProfile();
  Assert.assertTrue(p.getVersion() == 8);
}",0.7906976744186046
142028,"/** 
 * Test the auto-update pending calculations, which have several edge cases.
 */
@Test public void testAutoUpdateCalc(){
  long checkedThreeDaysAgo=DateTime.now().minusDays(3).getMillis();
  Assert.assertTrue(CommCareApplication.instance().isTimeForAutoUpdateCheck(checkedThreeDaysAgo,CommCarePreferences.FREQUENCY_DAILY));
  long checkedThreeHoursAgo=DateTime.now().minusHours(3).getMillis();
  if (isSameDayAsNow(checkedThreeHoursAgo)) {
    Assert.assertFalse(CommCareApplication.instance().isTimeForAutoUpdateCheck(checkedThreeHoursAgo,CommCarePreferences.FREQUENCY_DAILY));
  }
 else {
    Assert.assertTrue(CommCareApplication.instance().isTimeForAutoUpdateCheck(checkedThreeHoursAgo,CommCarePreferences.FREQUENCY_DAILY));
  }
  DateTime yesterdayNearMidnight=new DateTime();
  yesterdayNearMidnight=yesterdayNearMidnight.minusDays(1).withTimeAtStartOfDay().plusHours(23);
  DateTime now=new DateTime();
  long diff=yesterdayNearMidnight.minus(now.getMillis()).getMillis();
  Assert.assertTrue(diff < DateUtils.DAY_IN_MILLIS);
  Assert.assertTrue(CommCareApplication.instance().isTimeForAutoUpdateCheck(yesterdayNearMidnight.getMillis(),CommCarePreferences.FREQUENCY_DAILY));
  long hoursInTheFuture=DateTime.now().plusHours(2).getMillis();
  Assert.assertFalse(CommCareApplication.instance().isTimeForAutoUpdateCheck(hoursInTheFuture,CommCarePreferences.FREQUENCY_DAILY));
  long daysLater=DateTime.now().plusDays(2).getMillis();
  Assert.assertTrue(CommCareApplication.instance().isTimeForAutoUpdateCheck(daysLater,CommCarePreferences.FREQUENCY_DAILY));
  long weekLater=DateTime.now().plusWeeks(1).getMillis();
  Assert.assertTrue(CommCareApplication.instance().isTimeForAutoUpdateCheck(weekLater,CommCarePreferences.FREQUENCY_DAILY));
}","/** 
 * Test the auto-update pending calculations, which have several edge cases.
 */
@Test public void testAutoUpdateCalc(){
  long checkedThreeDaysAgo=DateTime.now().minusDays(3).getMillis();
  Assert.assertTrue(PendingCalcs.isTimeForAutoUpdateCheck(checkedThreeDaysAgo,CommCarePreferences.FREQUENCY_DAILY));
  long checkedThreeHoursAgo=DateTime.now().minusHours(3).getMillis();
  if (isSameDayAsNow(checkedThreeHoursAgo)) {
    Assert.assertFalse(PendingCalcs.isTimeForAutoUpdateCheck(checkedThreeHoursAgo,CommCarePreferences.FREQUENCY_DAILY));
  }
 else {
    Assert.assertTrue(PendingCalcs.isTimeForAutoUpdateCheck(checkedThreeHoursAgo,CommCarePreferences.FREQUENCY_DAILY));
  }
  DateTime yesterdayNearMidnight=new DateTime();
  yesterdayNearMidnight=yesterdayNearMidnight.minusDays(1).withTimeAtStartOfDay().plusHours(23);
  DateTime now=new DateTime();
  long diff=yesterdayNearMidnight.minus(now.getMillis()).getMillis();
  Assert.assertTrue(diff < DateUtils.DAY_IN_MILLIS);
  Assert.assertTrue(PendingCalcs.isTimeForAutoUpdateCheck(yesterdayNearMidnight.getMillis(),CommCarePreferences.FREQUENCY_DAILY));
  long hoursInTheFuture=DateTime.now().plusHours(2).getMillis();
  Assert.assertFalse(PendingCalcs.isTimeForAutoUpdateCheck(hoursInTheFuture,CommCarePreferences.FREQUENCY_DAILY));
  long daysLater=DateTime.now().plusDays(2).getMillis();
  Assert.assertTrue(PendingCalcs.isTimeForAutoUpdateCheck(daysLater,CommCarePreferences.FREQUENCY_DAILY));
  long weekLater=DateTime.now().plusWeeks(1).getMillis();
  Assert.assertTrue(PendingCalcs.isTimeForAutoUpdateCheck(weekLater,CommCarePreferences.FREQUENCY_DAILY));
}",0.912914691943128
142029,"@Override public void handleTaskCompletion(ResultAndError<AppInstallStatus> result){
  if (CommCareApplication._().isConsumerApp()) {
    dismissProgressDialog();
  }
  if (result.data == AppInstallStatus.UpdateStaged) {
    uiController.unappliedUpdateAvailableUiState();
    if (proceedAutomatically) {
      launchUpdateInstallTask();
    }
  }
 else   if (result.data == AppInstallStatus.UpToDate) {
    uiController.upToDateUiState();
    if (proceedAutomatically) {
      finishWithResult(RefreshToLatestBuildActivity.ALREADY_UP_TO_DATE);
    }
  }
 else {
    if (!""String_Node_Str"".equals(result.errorMessage)) {
      String[] resouceAndMessage=result.errorMessage.split(""String_Node_Str"",2);
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(AppInstallStatus.InvalidResource,new String[]{null,resouceAndMessage[0],resouceAndMessage[1]}),true);
    }
    uiController.checkFailedUiState();
    if (proceedAutomatically) {
      finishWithResult(RefreshToLatestBuildActivity.UPDATE_ERROR);
    }
  }
  unregisterTask();
  uiController.refreshView();
}","@Override public void handleTaskCompletion(ResultAndError<AppInstallStatus> result){
  if (CommCareApplication._().isConsumerApp()) {
    dismissProgressDialog();
  }
  if (result.data == AppInstallStatus.UpdateStaged) {
    uiController.unappliedUpdateAvailableUiState();
    if (proceedAutomatically) {
      launchUpdateInstallTask();
    }
  }
 else   if (result.data == AppInstallStatus.UpToDate) {
    uiController.upToDateUiState();
    if (proceedAutomatically) {
      finishWithResult(RefreshToLatestBuildActivity.ALREADY_UP_TO_DATE);
    }
  }
 else {
    if (UpdateTask.isCombinedErrorMessage(result.errorMessage)) {
      Pair<String,String> resouceAndMessage=UpdateTask.splitCombinedErrorMessage(result.errorMessage);
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(AppInstallStatus.InvalidResource,new String[]{null,resouceAndMessage.first,resouceAndMessage.second}),true);
    }
    uiController.checkFailedUiState();
    if (proceedAutomatically) {
      finishWithResult(RefreshToLatestBuildActivity.UPDATE_ERROR);
    }
  }
  unregisterTask();
  uiController.refreshView();
}",0.9012069736253912
142030,"@Override protected final ResultAndError<AppInstallStatus> doInBackground(String... params){
  profileRef=params[0];
  setupUpdate();
  try {
    return new ResultAndError<>(stageUpdate());
  }
 catch (  InvalidResourceException e) {
    ResourceInstallUtils.logInstallError(e,""String_Node_Str"");
    String combinedMessage=e.resourceName + ""String_Node_Str"" + e.getMessage();
    return new ResultAndError<>(AppInstallStatus.UnknownFailure,combinedMessage);
  }
catch (  Exception e) {
    ResourceInstallUtils.logInstallError(e,""String_Node_Str"");
    return new ResultAndError<>(AppInstallStatus.UnknownFailure,e.getMessage());
  }
}","@Override protected final ResultAndError<AppInstallStatus> doInBackground(String... params){
  profileRef=params[0];
  setupUpdate();
  try {
    return new ResultAndError<>(stageUpdate());
  }
 catch (  InvalidResourceException e) {
    ResourceInstallUtils.logInstallError(e,""String_Node_Str"");
    return new ResultAndError<>(AppInstallStatus.UnknownFailure,buildCombinedErrorMessage(e.resourceName,e.getMessage()));
  }
catch (  Exception e) {
    ResourceInstallUtils.logInstallError(e,""String_Node_Str"");
    return new ResultAndError<>(AppInstallStatus.UnknownFailure,e.getMessage());
  }
}",0.6942416869424168
142031,"/** 
 * @param scaleByContainerOnly If true, means that we're just trying to ensure that our bitmapisn't way bigger than necessary, rather than creating a bitmap of an exact size based on a target width and height. In this case, targetWidth and targetHeight are ignored and the 2nd case below is used.
 * @return A bitmap representation of the given image file, scaled down if necessary such thatthe new dimensions of the image are the SMALLER of the following 2 options: 1) targetHeight and targetWidth 2) the largest dimensions for which the original aspect ratio is maintained, without exceeding either boundingWidth or boundingHeight (or just the original dimensions if the image already roughly fits in the bounds)
 */
private static Bitmap scaleDownToTargetOrContainer(String imageFilepath,int originalHeight,int originalWidth,int targetHeight,int targetWidth,int boundingHeight,int boundingWidth,boolean scaleByContainerOnly,boolean respectBoundsExactly){
  Pair<Integer,Integer> dimensImposedByContainer=getRoughDimensImposedByContainer(originalHeight,originalWidth,boundingHeight,boundingWidth);
  int newWidth, newHeight;
  if (scaleByContainerOnly) {
    newWidth=dimensImposedByContainer.first;
    newHeight=dimensImposedByContainer.second;
  }
 else {
    newWidth=Math.min(dimensImposedByContainer.first,targetWidth);
    newHeight=Math.min(dimensImposedByContainer.second,targetHeight);
  }
  int approximateScaleDownFactor=getApproxScaleDownFactor(newWidth,originalWidth);
  Bitmap b=inflateImageSafe(imageFilepath,approximateScaleDownFactor).first;
  if (scaleByContainerOnly && !respectBoundsExactly) {
    return b;
  }
 else {
    return Bitmap.createScaledBitmap(b,newWidth,newHeight,false);
  }
}","/** 
 * @param scaleByContainerOnly If true, means that we're just trying to ensure that our bitmapisn't way bigger than necessary, rather than creating a bitmap of an exact size based on a target width and height. In this case, targetWidth and targetHeight are ignored and the 2nd case below is used.
 * @return A bitmap representation of the given image file, scaled down if necessary such thatthe new dimensions of the image are the SMALLER of the following 2 options: 1) targetHeight and targetWidth 2) the largest dimensions for which the original aspect ratio is maintained, without exceeding either boundingWidth or boundingHeight (or just the original dimensions if the image already roughly fits in the bounds)
 */
private static Bitmap scaleDownToTargetOrContainer(String imageFilepath,int originalHeight,int originalWidth,int targetHeight,int targetWidth,int boundingHeight,int boundingWidth,boolean scaleByContainerOnly,boolean respectBoundsExactly){
  Pair<Integer,Integer> dimensImposedByContainer=getRoughDimensImposedByContainer(originalHeight,originalWidth,boundingHeight,boundingWidth);
  int newWidth, newHeight;
  if (scaleByContainerOnly) {
    newWidth=dimensImposedByContainer.first;
    newHeight=dimensImposedByContainer.second;
  }
 else {
    newWidth=Math.min(dimensImposedByContainer.first,targetWidth);
    newHeight=Math.min(dimensImposedByContainer.second,targetHeight);
  }
  int approximateScaleDownFactor=getApproxScaleDownFactor(newWidth,originalWidth);
  Bitmap b=inflateImageSafe(imageFilepath,approximateScaleDownFactor).first;
  if (scaleByContainerOnly && !respectBoundsExactly) {
    return b;
  }
 else {
    try {
      return Bitmap.createScaledBitmap(b,newWidth,newHeight,false);
    }
 catch (    OutOfMemoryError e) {
      Log.d(TAG,""String_Node_Str"" + imageFilepath);
      return null;
    }
  }
}",0.9638351555929352
142032,"public static EntitySelectActivity launchEntitySelectActivity(String command){
  ShadowActivity shadowHomeActivity=ActivityLaunchUtils.buildHomeActivityForFormEntryLaunch(command);
  Intent entitySelectIntent=shadowHomeActivity.getNextStartedActivity();
  String intentActivityName=entitySelectIntent.getComponent().getClassName();
  Assert.assertEquals(EntitySelectActivity.class.getName(),intentActivityName);
  return Robolectric.buildActivity(EntitySelectActivity.class).withIntent(entitySelectIntent).create().start().resume().get();
}","public static EntitySelectActivity launchEntitySelectActivity(String command){
  ShadowActivity shadowHomeActivity=ActivityLaunchUtils.buildHomeActivityForFormEntryLaunch(command);
  Intent entitySelectIntent=shadowHomeActivity.getNextStartedActivity();
  String intentActivityName=entitySelectIntent.getComponent().getClassName();
  Assert.assertEquals(EntitySelectActivity.class.getName(),intentActivityName);
  return Robolectric.buildActivity(EntitySelectActivity.class).withIntent(entitySelectIntent).setup().get();
}",0.9736346516007532
142033,"private void initUIComponents(){
  searchBanner=findViewById(R.id.search_result_banner);
  searchResultStatus=(TextView)findViewById(R.id.search_results_status);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  clearSearchButton=(ImageButton)findViewById(R.id.clear_search_button);
  clearSearchButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      adapter.clearCalloutResponseData();
      refreshView();
    }
  }
);
  clearSearchButton.setVisibility(View.GONE);
}","@SuppressWarnings(""String_Node_Str"") private void initUIComponents(){
  searchBanner=findViewById(R.id.search_result_banner);
  searchResultStatus=(TextView)findViewById(R.id.search_results_status);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  clearSearchButton=(ImageButton)findViewById(R.id.clear_search_button);
  clearSearchButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      adapter.clearCalloutResponseData();
      searchBanner.setVisibility(View.GONE);
      if (isUsingActionBar()) {
        searchView.setQuery(""String_Node_Str"",false);
      }
 else {
        preHoneycombSearchBox.setText(""String_Node_Str"");
      }
      ViewUtil.hideVirtualKeyboard(EntitySelectActivity.this);
      refreshView();
    }
  }
);
  clearSearchButton.setVisibility(View.GONE);
}",0.704
142034,"@Override public void afterTextChanged(Editable incomingEditable){
  final String incomingString=incomingEditable.toString();
  final String currentSearchText=getSearchText().toString();
  if (!""String_Node_Str"".equals(currentSearchText) && incomingString.equals(currentSearchText)) {
    filterString=currentSearchText;
    if (adapter != null) {
      adapter.filterByString(filterString);
    }
  }
  if (!isUsingActionBar()) {
    lastQueryString=filterString;
  }
}","@Override public void afterTextChanged(Editable incomingEditable){
  final String incomingString=incomingEditable.toString();
  final String currentSearchText=getSearchText().toString();
  if (incomingString.equals(currentSearchText)) {
    filterString=currentSearchText;
    if (adapter != null) {
      adapter.filterByString(filterString);
    }
  }
  if (!isUsingActionBar()) {
    lastQueryString=filterString;
  }
}",0.9461883408071748
142035,"private void setSearchBannerState(){
  if (!""String_Node_Str"".equals(adapter.getSearchQuery())) {
    showSearchBanner();
  }
 else   if (adapter.isFilteringByCalloutResult()) {
    showSearchBanner();
    clearSearchButton.setVisibility(View.VISIBLE);
  }
 else {
    searchBanner.setVisibility(View.GONE);
    clearSearchButton.setVisibility(View.GONE);
  }
}","private void setSearchBannerState(){
  if (!""String_Node_Str"".equals(adapter.getSearchQuery()) || adapter.isFilteringByCalloutResult()) {
    showSearchBanner();
    clearSearchButton.setVisibility(View.VISIBLE);
  }
 else {
    searchBanner.setVisibility(View.GONE);
    clearSearchButton.setVisibility(View.GONE);
  }
}",0.9296187683284456
142036,"public void setFocus(Context context,int indexOfLastChangedWidget){
  QuestionWidget widgetToFocus=null;
  if (indexOfLastChangedWidget != -1) {
    widgetToFocus=widgets.get(indexOfLastChangedWidget);
  }
 else   if (widgets.size() > 0) {
    widgetToFocus=widgets.get(0);
  }
  if (widgetToFocus != null) {
    scrollToWidget(widgetToFocus);
    widgetToFocus.setFocus(context);
  }
}","public void setFocus(Context context,int indexOfLastChangedWidget){
  QuestionWidget widgetToFocus=null;
  if (indexOfLastChangedWidget != -1 && indexOfLastChangedWidget < widgets.size()) {
    widgetToFocus=widgets.get(indexOfLastChangedWidget);
  }
 else   if (widgets.size() > 0) {
    widgetToFocus=widgets.get(0);
  }
  if (widgetToFocus != null) {
    scrollToWidget(widgetToFocus);
    widgetToFocus.setFocus(context);
  }
}",0.8616891064871481
142037,"protected void attachToForm(FormDef form){
  this.formDef=form;
}","public void attachToForm(FormDef form){
  this.formDef=form;
}",0.9133858267716536
142038,"@Override public void setupTextView(){
  if (isEditable) {
    mStringAnswer=new EditText(getContext());
    mStringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP,mAnswerFontsize);
    mStringAnswer.setGravity(Gravity.CENTER);
    String s=mPrompt.getAnswerText();
    if (s != null) {
      mStringAnswer.setText(s);
    }
    addView(mStringAnswer);
  }
 else {
    super.setupTextView();
  }
}","@Override public void setupTextView(){
  if (isEditable) {
    mStringAnswer=new EditText(getContext());
    mStringAnswer.addTextChangedListener(this);
    mStringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP,mAnswerFontsize);
    mStringAnswer.setGravity(Gravity.CENTER);
    String s=mPrompt.getAnswerText();
    if (s != null) {
      mStringAnswer.setText(s);
    }
    addView(mStringAnswer);
  }
 else {
    super.setupTextView();
  }
}",0.9428571428571428
142039,"@Override public IAnswerData getAnswer(){
  if (isEditable && hasTextChanged) {
    hasTextChanged=false;
    String s=mStringAnswer.getText().toString();
    if (""String_Node_Str"".equals(s)) {
      return null;
    }
 else {
      return new StringData(s);
    }
  }
 else {
    return mPrompt.getAnswerValue();
  }
}","@Override public IAnswerData getAnswer(){
  if (isEditable && hasTextChanged) {
    storeTextAnswerToForm();
  }
  return mPrompt.getAnswerValue();
}",0.6068376068376068
142040,"public BarcodeWidget(Context context,FormEntryPrompt prompt,Intent i,IntentCallout ic,PendingCalloutInterface pendingCalloutInterface){
  super(context,prompt,i,ic,pendingCalloutInterface,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  isEditable=ic.getAppearance().contains(""String_Node_Str"");
}","public BarcodeWidget(Context context,FormEntryPrompt prompt,Intent i,IntentCallout ic,PendingCalloutInterface pendingCalloutInterface){
  super(context,prompt,i,ic,pendingCalloutInterface,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.8892921960072595
142041,"protected IntentWidget(Context context,FormEntryPrompt prompt,Intent in,IntentCallout ic,PendingCalloutInterface pendingCalloutInterface,String getButtonLocalizationKey,String updateButtonLocalizationKey,String missingCalloutKey){
  super(context,prompt);
  this.missingCalloutKey=missingCalloutKey;
  this.intent=in;
  this.ic=ic;
  this.pendingCalloutInterface=pendingCalloutInterface;
  this.getButtonLocalizationKey=getButtonLocalizationKey;
  this.updateButtonLocalizationKey=updateButtonLocalizationKey;
  mStringAnswer=new TextView(getContext());
  launchIntentButton=new Button(getContext());
  setupTextView();
  setupButton();
}","protected IntentWidget(Context context,FormEntryPrompt prompt,Intent in,IntentCallout ic,PendingCalloutInterface pendingCalloutInterface,String getButtonLocalizationKey,String updateButtonLocalizationKey,String missingCalloutKey){
  super(context,prompt);
  this.missingCalloutKey=missingCalloutKey;
  this.intent=in;
  this.ic=ic;
  this.pendingCalloutInterface=pendingCalloutInterface;
  this.getButtonLocalizationKey=getButtonLocalizationKey;
  this.updateButtonLocalizationKey=updateButtonLocalizationKey;
  isEditable=ic.getAppearance().contains(""String_Node_Str"");
  mStringAnswer=new TextView(getContext());
  launchIntentButton=new Button(getContext());
  setupTextView();
  setupButton();
}",0.9528795811518324
142042,"@Override public void refreshView(){
  adapter.notifyDataSetChanged();
}","@Override public void refreshView(){
  if (adapter != null) {
    adapter.notifyDataSetChanged();
  }
}",0.8228571428571428
142043,"public SpinnerAdapter(final Context context,final int textViewResourceId,final String[] objects,int textUnit,float textSize){
  super(context,textViewResourceId,objects);
  this.context=context;
  this.textUnit=textUnit;
  this.textSize=textSize;
  items=new String[objects.length + 1];
  items[0]=""String_Node_Str"";
  System.arraycopy(objects,0,items,1,items.length - 1);
}","public SpinnerAdapter(final Context context,final int textViewResourceId,final String[] objects,int textUnit,float textSize){
  super(context,textViewResourceId,objects);
  this.items=objects;
  this.context=context;
  this.textUnit=textUnit;
  this.textSize=textSize;
}",0.7701863354037267
142044,"public SpinnerWidget(Context context,FormEntryPrompt prompt){
  super(context,prompt);
  mItems=prompt.getSelectChoices();
  spinner=new Spinner(context);
  choices=new String[mItems.size()];
  for (int i=0; i < mItems.size(); i++) {
    choices[i]=prompt.getSelectChoiceText(mItems.get(i));
  }
  SpinnerAdapter adapter=new SpinnerAdapter(getContext(),android.R.layout.simple_spinner_item,choices,TypedValue.COMPLEX_UNIT_DIP,mQuestionFontsize);
  spinner.setAdapter(adapter);
  spinner.setPrompt(prompt.getQuestionText());
  spinner.setEnabled(!prompt.isReadOnly());
  spinner.setFocusable(!prompt.isReadOnly());
  String s=null;
  if (prompt.getAnswerValue() != null) {
    s=((Selection)prompt.getAnswerValue().getValue()).getValue();
  }
  if (s != null) {
    for (int i=0; i < mItems.size(); ++i) {
      String sMatch=mItems.get(i).getValue();
      if (sMatch.equals(s)) {
        spinner.setSelection(i);
      }
    }
  }
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parentView,    View selectedItemView,    int position,    long id){
      widgetEntryChanged();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  addView(spinner);
}","public SpinnerWidget(Context context,FormEntryPrompt prompt){
  super(context,prompt);
  mItems=prompt.getSelectChoices();
  spinner=new Spinner(context);
  choices=new String[mItems.size()];
  for (int i=0; i < mItems.size(); i++) {
    choices[i]=prompt.getSelectChoiceText(mItems.get(i));
  }
  SpinnerAdapter adapter=new SpinnerAdapter(getContext(),android.R.layout.simple_spinner_item,getChoicesWithEmptyFirstSlot(choices),TypedValue.COMPLEX_UNIT_DIP,mQuestionFontsize);
  spinner.setAdapter(adapter);
  spinner.setPrompt(prompt.getQuestionText());
  spinner.setEnabled(!prompt.isReadOnly());
  spinner.setFocusable(!prompt.isReadOnly());
  String s=null;
  if (prompt.getAnswerValue() != null) {
    s=((Selection)prompt.getAnswerValue().getValue()).getValue();
  }
  if (s != null) {
    for (int i=0; i < mItems.size(); ++i) {
      String sMatch=mItems.get(i).getValue();
      if (sMatch.equals(s)) {
        spinner.setSelection(i);
      }
    }
  }
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parentView,    View selectedItemView,    int position,    long id){
      widgetEntryChanged();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  addView(spinner);
}",0.9875097580015612
142045,"@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  if (myListener != null) {
    myListener.onCalendarClose();
  }
}","@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  enableScreenRotation();
  if (myListener != null) {
    myListener.onCalendarClose();
  }
}",0.9207317073170732
142046,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  myLayout=(LinearLayout)inflater.inflate(R.layout.calendar_widget,container);
  if (savedInstanceState != null && savedInstanceState.containsKey(TIME)) {
    calendar=Calendar.getInstance();
    calendar.setTimeInMillis(savedInstanceState.getLong(TIME));
  }
  initDisplay();
  initWeekDays();
  initOnClick();
  refresh();
  Rect displayRectangle=new Rect();
  Window window=getActivity().getWindow();
  window.getDecorView().getWindowVisibleDisplayFrame(displayRectangle);
  myLayout.setMinimumWidth((int)(displayRectangle.width() * 0.9f));
  return myLayout;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);
  myLayout=(LinearLayout)inflater.inflate(R.layout.calendar_widget,container);
  if (savedInstanceState != null && savedInstanceState.containsKey(TIME)) {
    calendar=Calendar.getInstance();
    calendar.setTimeInMillis(savedInstanceState.getLong(TIME));
  }
  disableScreenRotation();
  initDisplay();
  initWeekDays();
  initOnClick();
  refresh();
  Rect displayRectangle=new Rect();
  Window window=getActivity().getWindow();
  window.getDecorView().getWindowVisibleDisplayFrame(displayRectangle);
  myLayout.setMinimumWidth((int)(displayRectangle.width() * 0.9f));
  return myLayout;
}",0.9820359281437124
142047,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case WIFI_DIRECT_ACTIVITY:
    if (resultCode == WipeTask.WIPE_TASK_ID || resultCode == SendTask.BULK_SEND_ID) {
      int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
      Intent returnIntent=new Intent();
      returnIntent.putExtra(FORM_PROCESS_COUNT_KEY,dumpedCount);
      returnIntent.putExtra(FORM_PROCESS_MESSAGE_KEY,""String_Node_Str"");
      setResult(RESULT_FORMS_PROCESSED,returnIntent);
      finish();
    }
  break;
case DUMP_FORMS_ACTIVITY:
if (resultCode == DumpTask.BULK_DUMP_ID || resultCode == SendTask.BULK_SEND_ID) {
  int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
  Intent returnIntent=new Intent();
  returnIntent.putExtra(FORM_PROCESS_COUNT_KEY,dumpedCount);
  returnIntent.putExtra(FORM_PROCESS_MESSAGE_KEY,""String_Node_Str"");
  setResult(RESULT_FORMS_PROCESSED,returnIntent);
  finish();
}
break;
default :
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (requestCode == WIFI_DIRECT_ACTIVITY || requestCode == DUMP_FORMS_ACTIVITY) {
    String messageKey=getBulkFormMessageKey(resultCode);
    if (messageKey == null) {
      return;
    }
    int dumpedCount=intent.getIntExtra(KEY_NUMBER_DUMPED,-1);
    Intent returnIntent=new Intent();
    returnIntent.putExtra(FORM_PROCESS_COUNT_KEY,dumpedCount);
    returnIntent.putExtra(FORM_PROCESS_MESSAGE_KEY,messageKey);
    setResult(RESULT_FORMS_PROCESSED,returnIntent);
    finish();
  }
}",0.5242839352428393
142048,"@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  updateCounters();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=getDumpFiles().length;
      Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnSD + ""String_Node_Str"");
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(localize(""String_Node_Str""));
        transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask<CommCareFormDumpActivity> mSendTask=new SendTask<CommCareFormDumpActivity>(settings.getString(CommCareServerPreferences.PREFS_SUBMISSION_URL_KEY,url),getFolderPath()){
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            CommCareApplication._().clearNotifications(AIRPLANE_MODE_CATEGORY);
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnSD + ""String_Node_Str"");
            receiver.finish();
          }
 else {
            CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode,AIRPLANE_MODE_CATEGORY));
            receiver.updateCounters();
            receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(update[0],BULK_SEND_ID);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + e.getMessage());
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      DumpTask mDumpTask=new DumpTask(getApplicationContext()){
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnPhone + ""String_Node_Str"");
            receiver.finish();
          }
 else {
            receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(update[0],BULK_DUMP_ID);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + e.getMessage());
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  if (!acknowledgedRisk) {
    showWarningMessage();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  updateCounters();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=getDumpFiles().length;
      Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnSD + ""String_Node_Str"");
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(localize(""String_Node_Str""));
        transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask<CommCareFormDumpActivity> mSendTask=new SendTask<CommCareFormDumpActivity>(settings.getString(CommCareServerPreferences.PREFS_SUBMISSION_URL_KEY,url),getFolderPath()){
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            CommCareApplication._().clearNotifications(AIRPLANE_MODE_CATEGORY);
            Intent i=new Intent(getIntent());
            i.putExtra(AdvancedActionsActivity.KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnSD + ""String_Node_Str"");
            receiver.finish();
          }
 else {
            CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode,AIRPLANE_MODE_CATEGORY));
            receiver.updateCounters();
            receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(update[0],BULK_SEND_ID);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + e.getMessage());
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      DumpTask mDumpTask=new DumpTask(getApplicationContext()){
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(AdvancedActionsActivity.KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnPhone + ""String_Node_Str"");
            receiver.finish();
          }
 else {
            receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(update[0],BULK_DUMP_ID);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + e.getMessage());
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  if (!acknowledgedRisk) {
    showWarningMessage();
  }
}",0.9945230488361478
142049,"@Override protected void deliverResult(CommCareFormDumpActivity receiver,Boolean result){
  if (result == Boolean.TRUE) {
    Intent i=new Intent(getIntent());
    i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
    receiver.setResult(BULK_DUMP_ID,i);
    Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnPhone + ""String_Node_Str"");
    receiver.finish();
  }
 else {
    receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
  }
}","@Override protected void deliverResult(CommCareFormDumpActivity receiver,Boolean result){
  if (result == Boolean.TRUE) {
    Intent i=new Intent(getIntent());
    i.putExtra(AdvancedActionsActivity.KEY_NUMBER_DUMPED,formsOnPhone);
    receiver.setResult(BULK_DUMP_ID,i);
    Logger.log(AndroidLogger.TYPE_FORM_DUMP,""String_Node_Str"" + formsOnPhone + ""String_Node_Str"");
    receiver.finish();
  }
 else {
    receiver.transplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
  }
}",0.9758551307847082
142050,"private void startAdvancedActionsActivity(){
  startActivity(new Intent(this,AdvancedActionsActivity.class));
}","private void startAdvancedActionsActivity(){
  startActivityForResult(new Intent(this,AdvancedActionsActivity.class),ADVANCED_ACTIONS_ACTIVITY);
}",0.8638132295719845
142051,"public void submitFiles(){
  Logger.log(TAG,""String_Node_Str"");
  unzipFilesHelper();
  final String url=this.getString(R.string.PostURL);
  File receiveFolder=new File(toBeSubmittedDirectory);
  if (!receiveFolder.isDirectory() || !receiveFolder.exists()) {
    myStatusText.setText(Localization.get(""String_Node_Str"",new String[]{receiveFolder.getPath()}));
  }
  File[] files=receiveFolder.listFiles();
  if (files == null) {
    myStatusText.setText(localize(""String_Node_Str""));
    transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    return;
  }
  final int formsOnSD=files.length;
  if (formsOnSD == 0) {
    myStatusText.setText(Localization.get(""String_Node_Str""));
    transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    return;
  }
  SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
  SendTask<CommCareWiFiDirectActivity> mSendTask=new SendTask<CommCareWiFiDirectActivity>(settings.getString(CommCareServerPreferences.PREFS_SUBMISSION_URL_KEY,url),receiveFolder){
    @Override protected void deliverResult(    CommCareWiFiDirectActivity receiver,    Boolean result){
      if (result == Boolean.TRUE) {
        Intent i=new Intent(getIntent());
        i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
        receiver.setResult(BULK_SEND_ID,i);
        Logger.log(TAG,""String_Node_Str"" + formsOnSD);
        receiver.finish();
      }
 else {
        receiver.transplantStyle(myStatusText,R.layout.template_text_notification_problem);
      }
    }
    @Override protected void deliverUpdate(    CommCareWiFiDirectActivity receiver,    String... update){
      receiver.updateProgress(update[0],BULK_SEND_ID);
      receiver.myStatusText.setText(update[0]);
    }
    @Override protected void deliverError(    CommCareWiFiDirectActivity receiver,    Exception e){
      Logger.log(TAG,""String_Node_Str"" + e.getMessage());
      receiver.myStatusText.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
      receiver.transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    }
  }
;
  mSendTask.connect(CommCareWiFiDirectActivity.this);
  mSendTask.execute();
}","public void submitFiles(){
  Logger.log(TAG,""String_Node_Str"");
  unzipFilesHelper();
  final String url=this.getString(R.string.PostURL);
  File receiveFolder=new File(toBeSubmittedDirectory);
  if (!receiveFolder.isDirectory() || !receiveFolder.exists()) {
    myStatusText.setText(Localization.get(""String_Node_Str"",new String[]{receiveFolder.getPath()}));
  }
  File[] files=receiveFolder.listFiles();
  if (files == null) {
    myStatusText.setText(localize(""String_Node_Str""));
    transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    return;
  }
  final int formsOnSD=files.length;
  if (formsOnSD == 0) {
    myStatusText.setText(Localization.get(""String_Node_Str""));
    transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    return;
  }
  SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
  SendTask<CommCareWiFiDirectActivity> mSendTask=new SendTask<CommCareWiFiDirectActivity>(settings.getString(CommCareServerPreferences.PREFS_SUBMISSION_URL_KEY,url),receiveFolder){
    @Override protected void deliverResult(    CommCareWiFiDirectActivity receiver,    Boolean result){
      if (result == Boolean.TRUE) {
        Intent i=new Intent(getIntent());
        i.putExtra(AdvancedActionsActivity.KEY_NUMBER_DUMPED,formsOnSD);
        receiver.setResult(BULK_SEND_ID,i);
        Logger.log(TAG,""String_Node_Str"" + formsOnSD);
        receiver.finish();
      }
 else {
        receiver.transplantStyle(myStatusText,R.layout.template_text_notification_problem);
      }
    }
    @Override protected void deliverUpdate(    CommCareWiFiDirectActivity receiver,    String... update){
      receiver.updateProgress(update[0],BULK_SEND_ID);
      receiver.myStatusText.setText(update[0]);
    }
    @Override protected void deliverError(    CommCareWiFiDirectActivity receiver,    Exception e){
      Logger.log(TAG,""String_Node_Str"" + e.getMessage());
      receiver.myStatusText.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
      receiver.transplantStyle(myStatusText,R.layout.template_text_notification_problem);
    }
  }
;
  mSendTask.connect(CommCareWiFiDirectActivity.this);
  mSendTask.execute();
}",0.9945823927765236
142052,"public void startUserSession(byte[] symetricKey,UserKeyRecord record,boolean restoreSession){
synchronized (serviceLock) {
    if (this.mIsBound) {
      releaseUserResourcesAndServices();
    }
    bindUserSessionService(symetricKey,record,restoreSession);
  }
}","public void startUserSession(byte[] symmetricKey,UserKeyRecord record,boolean restoreSession){
synchronized (serviceLock) {
    SessionActivityRegistration.unregisterSessionExpiration();
    if (this.mIsBound) {
      releaseUserResourcesAndServices();
    }
    bindUserSessionService(symmetricKey,record,restoreSession);
  }
}",0.8900169204737732
142053,"public void setCurrentUser(User user,String password){
  this.user=user;
  this.user.setCachedPwd(password);
  this.key=user.getWrappedKey();
}","public void setCurrentUser(User user,String password){
  this.user=user;
  this.user.setCachedPwd(password);
}",0.8695652173913043
142054,"private byte[] getEncryptionKey(){
  byte[] key;
  if (loginNeeded) {
    initUKRForLogin();
    if (ukrForLogin == null) {
      return null;
    }
    key=ByteEncrypter.wrapByteArrayWithString(ukrForLogin.getEncryptedKey(),password);
  }
 else {
    key=CommCareApplication._().getSession().getLoggedInUser().getWrappedKey();
  }
  this.publishProgress(PROGRESS_CLEANED);
  return key;
}","private byte[] getEncryptionKey(){
  byte[] key;
  if (loginNeeded) {
    initUKRForLogin();
    if (ukrForLogin == null) {
      return null;
    }
    key=ukrForLogin.getEncryptedKey();
  }
 else {
    key=CommCareApplication._().getSession().getLoggedInUser().getWrappedKey();
  }
  this.publishProgress(PROGRESS_CLEANED);
  return key;
}",0.8931506849315068
142055,"private void initUKRForLogin(){
  if (shouldGenerateFirstKey()) {
    SecretKey newKey=CryptUtil.generateSemiRandomKey();
    if (newKey == null) {
      return;
    }
    String sandboxId=PropertyUtils.genUUID().replace(""String_Node_Str"",""String_Node_Str"");
    ukrForLogin=new UserKeyRecord(username,UserKeyRecord.generatePwdHash(password),newKey.getEncoded(),new Date(),new Date(Long.MAX_VALUE),sandboxId);
  }
 else {
    ukrForLogin=UserKeyRecord.getCurrentValidRecordByPassword(CommCareApplication._().getCurrentApp(),username,password,true);
    if (ukrForLogin == null) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
}","private void initUKRForLogin(){
  if (shouldGenerateFirstKey()) {
    SecretKey newKey=CryptUtil.generateSemiRandomKey();
    if (newKey == null) {
      return;
    }
    String sandboxId=PropertyUtils.genUUID().replace(""String_Node_Str"",""String_Node_Str"");
    ukrForLogin=new UserKeyRecord(username,UserKeyRecord.generatePwdHash(password),ByteEncrypter.wrapByteArrayWithString(newKey.getEncoded(),password),new Date(),new Date(Long.MAX_VALUE),sandboxId);
  }
 else {
    ukrForLogin=UserKeyRecord.getCurrentValidRecordByPassword(CommCareApplication._().getCurrentApp(),username,password,true);
    if (ukrForLogin == null) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
}",0.9432314410480348
142056,"@Override public void onClick(View v){
  startRecording();
}","@Override public void onClick(View v){
  stopRecording();
}",0.957983193277311
142057,"@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  if (recorder != null) {
    recorder.release();
    setRecorder(null);
  }
  toggleRecording.setEnabled(true);
  toggleRecording.setBackgroundResource(R.drawable.record_start);
  toggleRecording.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startRecording();
    }
  }
);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setEnabled(false);
  saveRecording.setBackgroundColor(getResources().getColor(R.color.transparent));
  saveRecording.setTextColor(getResources().getColor(R.color.grey));
  mpc.setPercent(0);
}","@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  if (recorder != null) {
    recorder.release();
    this.recorder=null;
  }
}",0.3724792408066429
142058,"public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  layout=(LinearLayout)inflater.inflate(R.layout.recording_fragment,container);
  prepareButtons();
  prepareText();
  setWindowSize();
  fileName=Environment.getExternalStorageDirectory().getAbsolutePath() + FILE_EXT;
  return layout;
}","public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  layout=(LinearLayout)inflater.inflate(R.layout.recording_fragment,container);
  enableScreenRotation();
  prepareButtons();
  prepareText();
  setWindowSize();
  fileName=Environment.getExternalStorageDirectory().getAbsolutePath() + FILE_EXT;
  return layout;
}",0.962536023054755
142059,"private void stopRecording(){
  mpc.setPercent(mpc.getPercent());
  mpc.setStartColor(getResources().getColor(R.color.blue_grey));
  mpc.setEndColor(getResources().getColor(R.color.blue_grey));
  recorder.stop();
  toggleRecording.setEnabled(false);
  toggleRecording.setBackgroundResource(R.drawable.record_complete);
  saveRecording.setEnabled(true);
  enableScreenRotation();
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setTextColor(getResources().getColor(R.color.white));
  saveRecording.setBackgroundColor(getResources().getColor(R.color.cc_attention_positive_color));
}","private void stopRecording(){
  mpc.setPercent(mpc.getPercent());
  mpc.setStartColor(getResources().getColor(R.color.blue_grey));
  mpc.setEndColor(getResources().getColor(R.color.blue_grey));
  recorder.stop();
  toggleRecording.setEnabled(false);
  toggleRecording.setBackgroundResource(R.drawable.record_complete);
  saveRecording.setEnabled(true);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setTextColor(getResources().getColor(R.color.white));
  saveRecording.setBackgroundColor(getResources().getColor(R.color.cc_attention_positive_color));
}",0.9781512605042016
142060,"@Override protected void togglePlayButton(boolean enabled){
  mPlayButton.setEnabled(enabled);
}","@Override protected void togglePlayButton(boolean enabled){
  if (enabled) {
    mPlayButton.setBackgroundResource(R.drawable.play);
  }
 else {
    mPlayButton.setBackgroundResource(R.drawable.play_disabled);
  }
  mPlayButton.setEnabled(enabled);
}",0.5549132947976878
142061,"public AudioWidget(Context context,final FormEntryPrompt prompt,PendingCalloutInterface pic){
  super(context,prompt);
  initializeButtons(prompt);
  setupLayout();
  this.pendingCalloutInterface=pic;
  mInstanceFolder=FormEntryActivity.mInstancePath.substring(0,FormEntryActivity.mInstancePath.lastIndexOf(""String_Node_Str"") + 1);
  setOrientation(LinearLayout.VERTICAL);
  mBinaryName=prompt.getAnswerText();
  if (mBinaryName != null) {
    togglePlayButton(true);
    File f=new File(mInstanceFolder + mBinaryName);
    checkFileSize(f);
  }
 else {
    disablePlayButton();
  }
  String acq=prompt.getAppearanceHint();
  if ((QuestionWidget.ACQUIREFIELD.equalsIgnoreCase(acq))) {
    mChooseButton.setVisibility(View.GONE);
  }
}","public AudioWidget(Context context,final FormEntryPrompt prompt,PendingCalloutInterface pic){
  super(context,prompt);
  initializeButtons(prompt);
  setupLayout();
  this.pendingCalloutInterface=pic;
  mInstanceFolder=FormEntryActivity.mInstancePath.substring(0,FormEntryActivity.mInstancePath.lastIndexOf(""String_Node_Str"") + 1);
  setOrientation(LinearLayout.VERTICAL);
  mBinaryName=prompt.getAnswerText();
  if (mBinaryName != null) {
    togglePlayButton(true);
    File f=new File(mInstanceFolder + mBinaryName);
    checkFileSize(f);
  }
 else {
    togglePlayButton(false);
  }
  String acq=prompt.getAppearanceHint();
  if ((QuestionWidget.ACQUIREFIELD.equalsIgnoreCase(acq))) {
    mChooseButton.setVisibility(View.GONE);
  }
}",0.9904891304347826
142062,"@Override public void clearAnswer(){
  deleteMedia();
  disablePlayButton();
}","@Override public void clearAnswer(){
  deleteMedia();
  togglePlayButton(false);
}",0.9125
142063,"@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  if (recorder != null) {
    recorder.release();
    setRecorder(null);
  }
  toggleRecording.setEnabled(true);
  toggleRecording.setBackgroundResource(R.drawable.record_start);
  toggleRecording.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startRecording();
    }
  }
);
  saveRecording.setEnabled(false);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setBackgroundColor(getResources().getColor(R.color.transparent));
  saveRecording.setTextColor(getResources().getColor(R.color.grey));
}","@Override public void onDismiss(DialogInterface dialog){
  super.onDismiss(dialog);
  if (recorder != null) {
    recorder.release();
    setRecorder(null);
  }
  toggleRecording.setEnabled(true);
  toggleRecording.setBackgroundResource(R.drawable.record_start);
  toggleRecording.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startRecording();
    }
  }
);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setEnabled(false);
  saveRecording.setBackgroundColor(getResources().getColor(R.color.transparent));
  saveRecording.setTextColor(getResources().getColor(R.color.grey));
}",0.9468892261001516
142064,"protected void prepareText(){
  header=(TextView)layout.findViewById(R.id.recording_header);
  instruction=(TextView)layout.findViewById(R.id.recording_instruction);
  header.setText(Localization.get(""String_Node_Str""));
  instruction.setText(Localization.get(""String_Node_Str""));
}","protected void prepareText(){
  TextView header=(TextView)layout.findViewById(R.id.recording_header);
  instruction=(TextView)layout.findViewById(R.id.recording_instruction);
  header.setText(Localization.get(""String_Node_Str""));
  instruction.setText(Localization.get(""String_Node_Str""));
}",0.9842931937172776
142065,"private void startRecording(){
  disableRotation();
  if (recorder == null) {
    recorder=new MediaRecorder();
  }
  setupRecorder();
  recorder.start();
  toggleRecording.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      stopRecording();
    }
  }
);
  toggleRecording.setBackgroundResource(R.drawable.record_in_progress);
  instruction.setText(Localization.get(""String_Node_Str""));
  myProgress.setVisibility(View.VISIBLE);
}","private void startRecording(){
  disableScreenRotation();
  if (recorder == null) {
    recorder=new MediaRecorder();
  }
  setupRecorder();
  recorder.start();
  toggleRecording.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      stopRecording();
    }
  }
);
  toggleRecording.setBackgroundResource(R.drawable.record_in_progress);
  instruction.setText(Localization.get(""String_Node_Str""));
  myProgress.setVisibility(View.VISIBLE);
}",0.9937629937629938
142066,"public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  layout=(LinearLayout)inflater.inflate(R.layout.recording_fragment,container);
  prepareButtons();
  prepareText();
  setWindowSize();
  fileName=Environment.getExternalStorageDirectory().getAbsolutePath();
  fileName+=FILE_EXT;
  return layout;
}","public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  layout=(LinearLayout)inflater.inflate(R.layout.recording_fragment,container);
  prepareButtons();
  prepareText();
  setWindowSize();
  fileName=Environment.getExternalStorageDirectory().getAbsolutePath() + FILE_EXT;
  return layout;
}",0.9779086892488954
142067,"private void stopRecording(){
  recorder.stop();
  toggleRecording.setEnabled(false);
  toggleRecording.setBackgroundResource(R.drawable.record_complete);
  saveRecording.setEnabled(true);
  enableRotation();
  myProgress.setVisibility(View.INVISIBLE);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setTextColor(getResources().getColor(R.color.white));
  saveRecording.setBackgroundColor(getResources().getColor(R.color.green));
}","private void stopRecording(){
  recorder.stop();
  toggleRecording.setEnabled(false);
  toggleRecording.setBackgroundResource(R.drawable.record_complete);
  saveRecording.setEnabled(true);
  enableScreenRotation();
  myProgress.setVisibility(View.INVISIBLE);
  instruction.setText(Localization.get(""String_Node_Str""));
  saveRecording.setTextColor(getResources().getColor(R.color.white));
  saveRecording.setBackgroundColor(getResources().getColor(R.color.green));
}",0.9935205183585312
142068,"/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication._().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication._().isSyncPending(false)) {
    handlePendingSync();
  }
 else   if (CommCareApplication._().isConsumerApp() && !sessionNavigationProceedingAfterOnResume) {
  }
 else {
    uiController.refreshView();
  }
}","/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication._().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication._().isSyncPending(false)) {
    handlePendingSync();
  }
 else   if (CommCareApplication._().isConsumerApp() && !sessionNavigationProceedingAfterOnResume) {
    sessionNavigationProceedingAfterOnResume=false;
    enterRootModule();
  }
 else {
    uiController.refreshView();
  }
}",0.934036939313984
142069,"private void handleGetCommand(AndroidSessionWrapper asw){
  Intent i;
  String command=asw.getSession().getCommand();
  if (useGridMenu(command)) {
    i=new Intent(getApplicationContext(),MenuGrid.class);
  }
 else {
    i=new Intent(getApplicationContext(),MenuList.class);
  }
  i.putExtra(SessionFrame.STATE_COMMAND_ID,command);
  addPendingDataExtra(i,asw.getSession());
  startActivityForResult(i,GET_COMMAND);
}","private void handleGetCommand(AndroidSessionWrapper asw){
  Intent i;
  String command=asw.getSession().getCommand();
  if (useGridMenu(command)) {
    i=new Intent(this,MenuGrid.class);
  }
 else {
    i=new Intent(this,MenuList.class);
  }
  i.putExtra(SessionFrame.STATE_COMMAND_ID,command);
  addPendingDataExtra(i,asw.getSession());
  startActivityForResult(i,GET_COMMAND);
}",0.9323308270676692
142070,"/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication._().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication._().isSyncPending(false)) {
    handlePendingSync();
  }
 else   if (CommCareApplication._().isConsumerApp() && !sessionNavigationProceedingAfterOnResume) {
    enterRootModule();
  }
 else {
    uiController.refreshView();
  }
}","/** 
 * Decides if we should actually be on the home screen, or else should redirect elsewhere
 */
private void attemptDispatchHomeScreen(){
  try {
    CommCareApplication._().getSession();
  }
 catch (  SessionUnavailableException e) {
    setResult(RESULT_OK);
    this.finish();
    return;
  }
  if (CommCareApplication._().isSyncPending(false)) {
    handlePendingSync();
  }
 else   if (CommCareApplication._().isConsumerApp() && !sessionNavigationProceedingAfterOnResume) {
  }
 else {
    uiController.refreshView();
  }
}",0.9087557603686636
142071,"void enterRootModule(){
  Intent i;
  if (useGridMenu(org.commcare.suite.model.Menu.ROOT_MENU_ID)) {
    i=new Intent(getApplicationContext(),MenuGrid.class);
  }
 else {
    i=new Intent(getApplicationContext(),MenuList.class);
  }
  addPendingDataExtra(i,CommCareApplication._().getCurrentSessionWrapper().getSession());
  startActivityForResult(i,GET_COMMAND);
}","void enterRootModule(){
  Intent i;
  if (useGridMenu(org.commcare.suite.model.Menu.ROOT_MENU_ID)) {
    i=new Intent(this,MenuGrid.class);
  }
 else {
    i=new Intent(this,MenuList.class);
  }
  addPendingDataExtra(i,CommCareApplication._().getCurrentSessionWrapper().getSession());
  startActivityForResult(i,GET_COMMAND);
}",0.9219653179190752
142072,"private void checkForChangedCCZ(){
  alreadyCheckedForAppFilesChange=true;
  Intent i=new Intent(getApplicationContext(),UpdateActivity.class);
  startActivity(i);
}","private void checkForChangedCCZ(){
  alreadyCheckedForAppFilesChange=true;
  Intent i=new Intent(this,UpdateActivity.class);
  startActivityForResult(i,UPDATE_CONSUMER_APP);
}",0.8470588235294118
142073,"@Override protected long getCurrentMillis(){
  int day=Integer.parseInt(dayTxt.getText().toString());
  int month=monthArrayPointer + 1;
  int year=Integer.parseInt(yearTxt.getText().toString());
  if (day > myCal.getActualMaximum(Calendar.DAY_OF_MONTH)) {
    dayTxt.setText(String.valueOf(myCal.getActualMaximum(Calendar.DAY_OF_MONTH)));
    day=Integer.parseInt(dayTxt.getText().toString());
  }
  return toMillisFromJavaEpoch(year,month,day,millisOfDayOffset);
}","@Override protected long getCurrentMillis(){
  if (dayTxt.getText().toString().equals(""String_Node_Str"")) {
    dayTxt.setText(String.valueOf(myCal.get(Calendar.DAY_OF_MONTH)));
  }
  if (monthTxt.getText().toString().equals(""String_Node_Str"")) {
    monthTxt.setText(monthsArray[monthArrayPointer]);
  }
  if (yearTxt.getText().toString().equals(""String_Node_Str"")) {
    yearTxt.setText(String.valueOf(myCal.get(Calendar.YEAR)));
  }
  int day=Integer.parseInt(dayTxt.getText().toString());
  int month=monthArrayPointer + 1;
  int year=Integer.parseInt(yearTxt.getText().toString());
  if (day > myCal.getActualMaximum(Calendar.DAY_OF_MONTH)) {
    dayTxt.setText(String.valueOf(myCal.getActualMaximum(Calendar.DAY_OF_MONTH)));
    day=Integer.parseInt(dayTxt.getText().toString());
  }
  return toMillisFromJavaEpoch(year,month,day,millisOfDayOffset);
}",0.4383975812547241
142074,"private void initOnClick(){
  decMonth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.MONTH,-1);
      updateCalendar();
    }
  }
);
  incMonth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.MONTH,1);
      updateCalendar();
    }
  }
);
  decYear.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.YEAR,-1);
      updateCalendar();
    }
  }
);
  incYear.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.YEAR,1);
      updateCalendar();
    }
  }
);
  myGrid.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Date date=(Date)parent.getItemAtPosition(position);
      myCal.setTime(date);
      updateCalendar();
    }
  }
);
}","private void initOnClick(){
  decMonth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.MONTH,-1);
      refresh();
    }
  }
);
  incMonth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.MONTH,1);
      refresh();
    }
  }
);
  decYear.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.YEAR,-1);
      refresh();
    }
  }
);
  incYear.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      myCal.add(Calendar.YEAR,1);
      refresh();
    }
  }
);
  myGrid.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Date date=(Date)parent.getItemAtPosition(position);
      myCal.setTime(date);
      refresh();
    }
  }
);
}",0.9294647323661832
142075,"@Override public void onClick(View v){
  myCal.add(Calendar.YEAR,1);
  updateCalendar();
}","@Override public void onClick(View v){
  myCal.add(Calendar.YEAR,1);
  refresh();
}",0.9017341040462428
142076,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Date date=(Date)parent.getItemAtPosition(position);
  myCal.setTime(date);
  updateCalendar();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  Date date=(Date)parent.getItemAtPosition(position);
  myCal.setTime(date);
  refresh();
}",0.9536784741144414
142077,"public CalendarWidget(Context context,FormEntryPrompt prompt){
  super(context,prompt);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  myLayout=(LinearLayout)inflater.inflate(R.layout.calendar_widget,null);
  addView(myLayout);
  myCal=Calendar.getInstance();
  initDisplay();
  initMonths();
  initWeekDays();
  updateCalendar();
  initOnClick();
}","public CalendarWidget(Context context,FormEntryPrompt prompt,Calendar cal){
  super(context,prompt);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  myLayout=(LinearLayout)inflater.inflate(R.layout.calendar_widget,null);
  addView(myLayout);
  myCal=cal;
  initDisplay();
  initMonths();
  initWeekDays();
  refresh();
  initOnClick();
}",0.9259723964868256
142078,"public void setDate(DateData newDate){
  Date nextDate=(Date)newDate.getValue();
  myCal.setTimeInMillis(nextDate.getTime());
  updateCalendar();
}","public void setDate(DateData newDate){
  Date nextDate=(Date)newDate.getValue();
  myCal.setTimeInMillis(nextDate.getTime());
  refresh();
}",0.940766550522648
142079,"@Override public void clearAnswer(){
  myCal=Calendar.getInstance();
  updateCalendar();
}","@Override public void clearAnswer(){
  myCal=Calendar.getInstance();
  refresh();
}",0.9017341040462428
142080,"@Override protected void inflateView(Context context){
  LayoutInflater vi=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View vv=vi.inflate(R.layout.gregorian_date_widget,null);
  addView(vv);
}","@Override protected void inflateView(Context context){
  LayoutInflater vi=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  myView=(LinearLayout)vi.inflate(R.layout.gregorian_date_widget,null);
  addView(myView);
}",0.925053533190578
142081,"public void clearAll(){
  dayTxt.setText(""String_Node_Str"");
  monthTxt.setText(""String_Node_Str"");
  yearTxt.setText(""String_Node_Str"");
  super.setFocus(getContext());
}","private void clearAll(){
  dayTxt.setText(""String_Node_Str"");
  monthTxt.setText(""String_Node_Str"");
  yearTxt.setText(""String_Node_Str"");
  super.setFocus(getContext());
}",0.9737609329446064
142082,"@Override protected void initText(){
  dayOfWeek=(TextView)findViewById(R.id.gregdayofweek);
  dayTxt=(EditText)findViewById(R.id.daytxtfield);
  yearTxt=(EditText)findViewById(R.id.yeartxtfield);
  MonthAdapter monthAdapter=new MonthAdapter(getContext(),monthList);
  monthTxt=(AutoCompleteTextView)findViewById(R.id.monthtxtfield);
  monthTxt.setAdapter(monthAdapter);
  dayTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String contents=s.toString();
      if (contents.length() > 1) {
        int num=Integer.parseInt(contents);
        int monthMax=myCal.getActualMaximum(Calendar.DAY_OF_MONTH);
        if (num > monthMax) {
          s.clear();
          s.append(String.valueOf(monthMax));
        }
        if (num < 1) {
          s.clear();
          s.append(String.valueOf(1));
        }
      }
    }
  }
);
  monthTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String content=s.toString();
      if (monthList.contains(content)) {
        monthArrayPointer=monthList.indexOf(content);
      }
    }
  }
);
  yearTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String contents=s.toString();
      if (contents.length() > 0) {
        int maxYear=myCal.get(Calendar.YEAR) + 1;
        if (Integer.parseInt(contents) > maxYear) {
          s.clear();
          s.append(String.valueOf(maxYear));
        }
      }
    }
  }
);
}","@Override protected void initText(){
  dayOfWeek=(TextView)findViewById(R.id.gregdayofweek);
  dayTxt=(EditText)findViewById(R.id.daytxtfield);
  yearTxt=(EditText)findViewById(R.id.yeartxtfield);
  MonthAdapter monthAdapter=new MonthAdapter(getContext(),monthList);
  monthTxt=(AutoCompleteTextView)findViewById(R.id.monthtxtfield);
  monthTxt.setAdapter(monthAdapter);
  dayTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String contents=s.toString();
      if (contents.length() > 1) {
        int num=Integer.parseInt(contents);
        int monthMax=myCal.getActualMaximum(Calendar.DAY_OF_MONTH);
        if (num > monthMax) {
          s.clear();
          s.append(String.valueOf(monthMax));
        }
        if (num < 1) {
          s.clear();
          s.append(String.valueOf(1));
        }
        myCal.set(Calendar.DAY_OF_MONTH,Integer.parseInt(s.toString()));
      }
    }
  }
);
  monthTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String content=s.toString();
      if (monthList.contains(content)) {
        monthArrayPointer=monthList.indexOf(content);
        myCal.set(Calendar.MONTH,monthArrayPointer);
      }
    }
  }
);
  yearTxt.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String contents=s.toString();
      if (contents.length() >= 4) {
        int maxYear=myCal.get(Calendar.YEAR) + 1;
        if (Integer.parseInt(contents) > maxYear) {
          s.clear();
          s.append(String.valueOf(maxYear));
        }
        myCal.set(Calendar.YEAR,Integer.parseInt(contents));
      }
    }
  }
);
}",0.9581881533101044
142083,"@Override public void afterTextChanged(Editable s){
  String contents=s.toString();
  if (contents.length() > 0) {
    int maxYear=myCal.get(Calendar.YEAR) + 1;
    if (Integer.parseInt(contents) > maxYear) {
      s.clear();
      s.append(String.valueOf(maxYear));
    }
  }
}","@Override public void afterTextChanged(Editable s){
  String contents=s.toString();
  if (contents.length() >= 4) {
    int maxYear=myCal.get(Calendar.YEAR) + 1;
    if (Integer.parseInt(contents) > maxYear) {
      s.clear();
      s.append(String.valueOf(maxYear));
    }
    myCal.set(Calendar.YEAR,Integer.parseInt(contents));
  }
}",0.8990228013029316
142084,"public void setDate(DateData newDate){
  Date nextDate=(Date)newDate.getValue();
  updateDateDisplay(nextDate.getTime());
}","protected void setDate(DateData newDate){
  Date nextDate=(Date)newDate.getValue();
  updateDateDisplay(nextDate.getTime());
}",0.9558232931726908
142085,"@Override public void onClick(View v){
  openCalendar();
}","@Override public void onClick(View v){
  closeCalendar();
}",0.9572649572649572
142086,"@Override public IAnswerData getAnswer(){
  if (myCal.getVisibility() != GONE) {
    closeCalendar();
  }
  return myGreg.getAnswer();
}","@Override public IAnswerData getAnswer(){
  if (myCal.getVisibility() != GONE) {
    closeCalendar();
  }
  return super.getAnswer();
}",0.966789667896679
142087,"protected void openCalendar(){
  if (myGreg.getAnswer() != null) {
    myCal.setDate((DateData)myGreg.getAnswer());
  }
 else {
    myCal.setDate(new DateData(new Date()));
  }
  myGreg.setFocus(getContext());
  myGreg.setVisibility(GONE);
  myCal.setVisibility(VISIBLE);
}","protected void openCalendar(){
  myCal.refresh();
  setFocus(getContext());
  myView.setVisibility(GONE);
  myCal.setVisibility(VISIBLE);
}",0.6456310679611651
142088,"public Prototype1(Context con,FormEntryPrompt prompt){
  super(con,prompt);
  myGreg=new GregorianDateWidget(con,prompt);
  myCal=new CalendarWidget(con,prompt);
  myCal.setVisibility(GONE);
  myGreg.removeQuestionText();
  myCal.removeQuestionText();
  addView(myCal);
  addView(myGreg);
  initButtons();
}","public Prototype1(Context con,FormEntryPrompt prompt){
  super(con,prompt);
  myCal=new CalendarWidget(con,prompt,getMyCal());
  myCal.setVisibility(GONE);
  myCal.removeQuestionText();
  addView(myCal);
  initButtons();
}",0.6691871455576559
142089,"protected void closeCalendar(){
  myGreg.setDate((DateData)myCal.getAnswer());
  myCal.setVisibility(GONE);
  myGreg.setVisibility(VISIBLE);
}","protected void closeCalendar(){
  refresh();
  myCal.setVisibility(GONE);
  myView.setVisibility(VISIBLE);
}",0.808
142090,"private void initView(){
  findViewById(R.id.dayupbtn).setVisibility(GONE);
  findViewById(R.id.daydownbtn).setVisibility(GONE);
  findViewById(R.id.monthupbtn).setVisibility(GONE);
  findViewById(R.id.monthdownbtn).setVisibility(GONE);
  findViewById(R.id.yearupbtn).setVisibility(GONE);
  findViewById(R.id.yeardownbtn).setVisibility(GONE);
  findViewById(R.id.clearall).setVisibility(GONE);
  findViewById(R.id.widgetinfo).setVisibility(GONE);
  ImageButton openCalendar=new ImageButton(getContext());
  openCalendar.setImageResource(R.drawable.avatar_vellum_date);
  super.addCalendarButton(openCalendar);
  addView(openCalendar);
  LinearLayout.LayoutParams calParams=(LinearLayout.LayoutParams)openCalendar.getLayoutParams();
  calParams.gravity=Gravity.RIGHT;
  calParams.width=LayoutParams.WRAP_CONTENT;
  calParams.height=LayoutParams.WRAP_CONTENT;
}","private void initView(){
  findViewById(R.id.dayupbtn).setVisibility(GONE);
  findViewById(R.id.daydownbtn).setVisibility(GONE);
  findViewById(R.id.monthupbtn).setVisibility(GONE);
  findViewById(R.id.monthdownbtn).setVisibility(GONE);
  findViewById(R.id.yearupbtn).setVisibility(GONE);
  findViewById(R.id.yeardownbtn).setVisibility(GONE);
  findViewById(R.id.clearall).setVisibility(GONE);
  findViewById(R.id.widgetinfo).setVisibility(GONE);
  final ImageButton openCalendar=new ImageButton(getContext());
  openCalendar.setImageResource(R.drawable.avatar_vellum_date);
  openCalendar.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      openCalendar();
    }
  }
);
  myView.addView(openCalendar);
  LinearLayout.LayoutParams calParams=(LinearLayout.LayoutParams)openCalendar.getLayoutParams();
  calParams.gravity=Gravity.RIGHT;
  calParams.width=LayoutParams.WRAP_CONTENT;
  calParams.height=LayoutParams.WRAP_CONTENT;
}",0.8944778567523237
142091,"@Override public void onClick(View v){
  Date current=(Date)getMyGreg().getAnswer().getValue();
  Calendar cal=Calendar.getInstance();
  cal.setTime(current);
  cal.add(Calendar.DATE,-7);
  getMyGreg().setDate(new DateData(cal.getTime()));
}","@Override public void onClick(View v){
  Date current=(Date)getAnswer().getValue();
  Calendar cal=Calendar.getInstance();
  cal.setTime(current);
  cal.add(Calendar.DATE,-7);
  setDate(new DateData(cal.getTime()));
}",0.9475982532751092
142092,"private void initView(){
  TextView weekday=(TextView)findViewById(R.id.gregdayofweek);
  ((TextView)myLayout.findViewById(R.id.pro3day)).setText(weekday.getText());
  weekday.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String content=s.toString();
      TextView pro3day=(TextView)findViewById(R.id.pro3day);
      pro3day.setText(content);
    }
  }
);
  Button decDay=(Button)myLayout.findViewById(R.id.decday);
  decDay.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getMyGreg().getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,-1);
      getMyGreg().setDate(new DateData(cal.getTime()));
    }
  }
);
  Button incrDay=(Button)myLayout.findViewById(R.id.incrday);
  incrDay.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getMyGreg().getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,1);
      getMyGreg().setDate(new DateData(cal.getTime()));
    }
  }
);
  Button incWeek=(Button)myLayout.findViewById(R.id.incweek);
  incWeek.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getMyGreg().getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,7);
      getMyGreg().setDate(new DateData(cal.getTime()));
    }
  }
);
  Button decWeek=(Button)myLayout.findViewById(R.id.decweek);
  decWeek.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getMyGreg().getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,-7);
      getMyGreg().setDate(new DateData(cal.getTime()));
    }
  }
);
}","private void initView(){
  TextView weekday=(TextView)findViewById(R.id.gregdayofweek);
  ((TextView)myLayout.findViewById(R.id.pro3day)).setText(weekday.getText());
  weekday.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String content=s.toString();
      TextView pro3day=(TextView)findViewById(R.id.pro3day);
      pro3day.setText(content);
    }
  }
);
  Button decDay=(Button)myLayout.findViewById(R.id.decday);
  decDay.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,-1);
      setDate(new DateData(cal.getTime()));
    }
  }
);
  Button incrDay=(Button)myLayout.findViewById(R.id.incrday);
  incrDay.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,1);
      setDate(new DateData(cal.getTime()));
    }
  }
);
  Button incWeek=(Button)myLayout.findViewById(R.id.incweek);
  incWeek.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,7);
      setDate(new DateData(cal.getTime()));
    }
  }
);
  Button decWeek=(Button)myLayout.findViewById(R.id.decweek);
  decWeek.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Date current=(Date)getAnswer().getValue();
      Calendar cal=Calendar.getInstance();
      cal.setTime(current);
      cal.add(Calendar.DATE,-7);
      setDate(new DateData(cal.getTime()));
    }
  }
);
}",0.9778801843317972
142093,"private ArrayList<Field> getPersistedFieldsInOrder(){
  ArrayList<Field> orderings;
synchronized (fieldOrderings) {
    orderings=fieldOrderings.get(this.getClass());
    if (orderings == null) {
      orderings=new ArrayList<>();
      fieldOrderings.put(this.getClass(),orderings);
    }
  }
synchronized (orderings) {
    if (orderings.size() == 0) {
      for (      Field f : this.getClass().getDeclaredFields()) {
        if (f.isAnnotationPresent(Persisting.class)) {
          orderings.add(f);
        }
      }
      Collections.sort(orderings,orderedComparator);
    }
    return orderings;
  }
}","private ArrayList<Field> getPersistedFieldsInOrder(){
  ArrayList<Field> orderings;
synchronized (fieldOrderings) {
    orderings=fieldOrderings.get(this.getClass());
    if (orderings == null) {
      orderings=new ArrayList<>();
      fieldOrderings.put(this.getClass(),orderings);
    }
    if (orderings.size() == 0) {
      for (      Field f : this.getClass().getDeclaredFields()) {
        if (f.isAnnotationPresent(Persisting.class)) {
          orderings.add(f);
        }
      }
      Collections.sort(orderings,orderedComparator);
    }
    return orderings;
  }
}",0.9737954353338968
142094,"public String getMetaDataFieldForRecord(int recordId,String rawFieldName){
  String rid=String.valueOf(recordId);
  String scrubbedName=AndroidTableBuilder.scrubName(rawFieldName);
  Cursor c=helper.getHandle().query(table,new String[]{scrubbedName},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{rid},null,null,null);
  try {
    if (c.getCount() == 0) {
      throw new NoSuchElementException(""String_Node_Str"" + table + ""String_Node_Str""+ recordId);
    }
    c.moveToFirst();
    return c.getString(c.getColumnIndexOrThrow(scrubbedName));
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}","public String getMetaDataFieldForRecord(int recordId,String rawFieldName){
  String rid=String.valueOf(recordId);
  String scrubbedName=AndroidTableBuilder.scrubName(rawFieldName);
  Cursor c=helper.getHandle().query(table,new String[]{scrubbedName},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{rid},null,null,null);
  try {
    if (c.getCount() == 0) {
      throw new NoSuchElementException(""String_Node_Str"" + table + ""String_Node_Str""+ recordId);
    }
    c.moveToFirst();
    return c.getString(c.getColumnIndexOrThrow(scrubbedName));
  }
  finally {
    c.close();
  }
}",0.9576059850374063
142095,"/** 
 * Return all records from this SqlStorage object for which, for each field in fieldNames, the record has the correct corresponding value in values
 */
public Vector<T> getRecordsForValues(String[] fieldNames,Object[] values){
  Pair<String,String[]> whereClause=helper.createWhereAndroid(fieldNames,values,em,null);
  Cursor c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},whereClause.first,whereClause.second,null,null,null);
  try {
    if (c.getCount() == 0) {
      return new Vector<>();
    }
 else {
      c.moveToFirst();
      Vector<T> indices=new Vector<>();
      int index=c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL);
      while (!c.isAfterLast()) {
        byte[] data=c.getBlob(index);
        indices.add(newObject(data,c.getInt(c.getColumnIndexOrThrow(DatabaseHelper.ID_COL))));
        c.moveToNext();
      }
      return indices;
    }
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}","/** 
 * Return all records from this SqlStorage object for which, for each field in fieldNames, the record has the correct corresponding value in values
 */
public Vector<T> getRecordsForValues(String[] fieldNames,Object[] values){
  Pair<String,String[]> whereClause=helper.createWhereAndroid(fieldNames,values,em,null);
  Cursor c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},whereClause.first,whereClause.second,null,null,null);
  try {
    if (c.getCount() == 0) {
      return new Vector<>();
    }
 else {
      c.moveToFirst();
      Vector<T> indices=new Vector<>();
      int index=c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL);
      while (!c.isAfterLast()) {
        byte[] data=c.getBlob(index);
        indices.add(newObject(data,c.getInt(c.getColumnIndexOrThrow(DatabaseHelper.ID_COL))));
        c.moveToNext();
      }
      return indices;
    }
  }
  finally {
    c.close();
  }
}",0.9735339906590555
142096,"@Override public boolean exists(int id){
  Cursor c;
  c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null);
  try {
    int queryCount=c.getCount();
    if (queryCount == 0) {
      return false;
    }
 else     if (queryCount > 1) {
      throw new InvalidIndexException(""String_Node_Str"" + id,""String_Node_Str"");
    }
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
  return true;
}","@Override public boolean exists(int id){
  Cursor c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null);
  try {
    int queryCount=c.getCount();
    if (queryCount == 0) {
      return false;
    }
 else     if (queryCount > 1) {
      throw new InvalidIndexException(""String_Node_Str"" + id,""String_Node_Str"");
    }
  }
  finally {
    c.close();
  }
  return true;
}",0.902439024390244
142097,"@Override public byte[] readBytes(int id){
  Cursor c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null);
  try {
    c.moveToFirst();
    return c.getBlob(c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL));
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}","@Override public byte[] readBytes(int id){
  Cursor c=helper.getHandle().query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},DatabaseHelper.ID_COL + ""String_Node_Str"",new String[]{String.valueOf(id)},null,null,null);
  try {
    if (!c.moveToFirst()) {
      throw new NoSuchElementException(""String_Node_Str"" + table + ""String_Node_Str""+ id);
    }
    return c.getBlob(c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL));
  }
  finally {
    c.close();
  }
}",0.8422247446083996
142098,"public T getRecordForValues(String[] rawFieldNames,Object[] values) throws NoSuchElementException, InvalidIndexException {
  SQLiteDatabase appDb=helper.getHandle();
  Cursor c;
  Pair<String,String[]> whereClause=helper.createWhereAndroid(rawFieldNames,values,em,null);
  c=appDb.query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},whereClause.first,whereClause.second,null,null,null);
  try {
    int queryCount=c.getCount();
    if (queryCount == 0) {
      throw new NoSuchElementException(""String_Node_Str"" + table + ""String_Node_Str""+ Arrays.toString(rawFieldNames)+ ""String_Node_Str""+ Arrays.toString(values));
    }
 else     if (queryCount > 1) {
      throw new InvalidIndexException(""String_Node_Str"" + Arrays.toString(rawFieldNames) + ""String_Node_Str""+ Arrays.toString(values),Arrays.toString(rawFieldNames));
    }
    c.moveToFirst();
    byte[] data=c.getBlob(c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL));
    return newObject(data,c.getInt(c.getColumnIndexOrThrow(DatabaseHelper.ID_COL)));
  }
  finally {
    if (c != null) {
      c.close();
    }
  }
}","public T getRecordForValues(String[] rawFieldNames,Object[] values) throws NoSuchElementException, InvalidIndexException {
  SQLiteDatabase appDb=helper.getHandle();
  Pair<String,String[]> whereClause=helper.createWhereAndroid(rawFieldNames,values,em,null);
  Cursor c=appDb.query(table,new String[]{DatabaseHelper.ID_COL,DatabaseHelper.DATA_COL},whereClause.first,whereClause.second,null,null,null);
  try {
    int queryCount=c.getCount();
    if (queryCount == 0) {
      throw new NoSuchElementException(""String_Node_Str"" + table + ""String_Node_Str""+ Arrays.toString(rawFieldNames)+ ""String_Node_Str""+ Arrays.toString(values));
    }
 else     if (queryCount > 1) {
      throw new InvalidIndexException(""String_Node_Str"" + Arrays.toString(rawFieldNames) + ""String_Node_Str""+ Arrays.toString(values),Arrays.toString(rawFieldNames));
    }
    c.moveToFirst();
    byte[] data=c.getBlob(c.getColumnIndexOrThrow(DatabaseHelper.DATA_COL));
    return newObject(data,c.getInt(c.getColumnIndexOrThrow(DatabaseHelper.ID_COL)));
  }
  finally {
    c.close();
  }
}",0.9777777777777776
142099,"@Override public NotificationMessage createFromParcel(Parcel source){
  String[] array=new String[3];
  source.readStringArray(array);
  Date date=new Date(source.readLong());
  return new NotificationMessage(array[0],array[1],array[2],array[3],date);
}","@Override public NotificationMessage createFromParcel(Parcel source){
  String[] array=new String[4];
  source.readStringArray(array);
  Date date=new Date(source.readLong());
  return new NotificationMessage(array[0],array[1],array[2],array[3],date);
}",0.4308300395256917
142100,"@Test public void notificationParcellingTest(){
  NotificationMessage sampleNotification=new NotificationMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date());
  Parcel parcel=Parcel.obtain();
  sampleNotification.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  NotificationMessage createdFromParcel=NotificationMessage.CREATOR.createFromParcel(parcel);
  Assert.assertEquals(sampleNotification,createdFromParcel);
}","/** 
 * Write NotificationMessage to parcel and read it back out again
 */
@Test public void notificationParcellingTest(){
  NotificationMessage sampleNotification=new NotificationMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date());
  Parcel parcel=Parcel.obtain();
  sampleNotification.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  NotificationMessage createdFromParcel=NotificationMessage.CREATOR.createFromParcel(parcel);
  Assert.assertEquals(sampleNotification,createdFromParcel);
}",0.924924924924925
142101,"public ModernHttpRequester buildModernHttpRequester(Context context,URL url,Hashtable<String,String> params,boolean isAuthenticatedRequest,boolean isPostRequest){
  return new ModernHttpRequester(context,url,params,isAuthenticatedRequest,isPostRequest);
}","public ModernHttpRequester buildModernHttpRequester(Context context,URL url,HashMap<String,String> params,boolean isAuthenticatedRequest,boolean isPostRequest){
  return new ModernHttpRequester(context,url,params,isAuthenticatedRequest,isPostRequest);
}",0.984251968503937
142102,"private void loadStateFromIntent(Intent intent){
  if (intent.hasExtra(URL_KEY) && intent.hasExtra(PARAMS_KEY)) {
    String urlString=intent.getStringExtra(URL_KEY);
    try {
      url=new URL(urlString);
    }
 catch (    MalformedURLException e) {
      enterErrorState(Localization.get(""String_Node_Str"",urlString));
    }
    params=(Hashtable<String,String>)intent.getSerializableExtra(PARAMS_KEY);
  }
 else {
    enterErrorState(Localization.get(""String_Node_Str""));
  }
}","private void loadStateFromIntent(Intent intent){
  if (intent.hasExtra(URL_KEY) && intent.hasExtra(PARAMS_KEY)) {
    String urlString=intent.getStringExtra(URL_KEY);
    try {
      url=new URL(urlString);
    }
 catch (    MalformedURLException e) {
      enterErrorState(Localization.get(""String_Node_Str"",urlString));
    }
    Object o=intent.getSerializableExtra(PARAMS_KEY);
    params=(HashMap<String,String>)o;
  }
 else {
    enterErrorState(Localization.get(""String_Node_Str""));
  }
}",0.764344262295082
142103,"private void makeQueryRequest(){
  clearErrorState();
  URL url=null;
  String urlString=remoteQuerySessionManager.getBaseUrl();
  try {
    url=new URL(urlString);
  }
 catch (  MalformedURLException e) {
    enterErrorState(Localization.get(""String_Node_Str"",urlString));
  }
  if (url != null) {
    SimpleHttpTask httpTask;
    try {
      httpTask=new SimpleHttpTask(this,url,remoteQuerySessionManager.getRawQueryParams(),false);
    }
 catch (    ModernHttpRequester.PlainTextPasswordException e) {
      enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
      return;
    }
    httpTask.connect((CommCareTaskConnector)this);
    httpTask.executeParallel();
  }
}","private void makeQueryRequest(){
  clearErrorState();
  URL url=null;
  String urlString=remoteQuerySessionManager.getBaseUrl();
  try {
    url=new URL(urlString);
  }
 catch (  MalformedURLException e) {
    enterErrorState(Localization.get(""String_Node_Str"",urlString));
  }
  if (url != null) {
    SimpleHttpTask httpTask;
    try {
      httpTask=new SimpleHttpTask(this,url,new HashMap<>(remoteQuerySessionManager.getRawQueryParams()),false);
    }
 catch (    ModernHttpRequester.PlainTextPasswordException e) {
      enterErrorState(Localization.get(""String_Node_Str"",url.toString()));
      return;
    }
    httpTask.connect((CommCareTaskConnector)this);
    httpTask.executeParallel();
  }
}",0.98921639108555
142104,"public void request(){
  HttpURLConnection httpConnection=null;
  try {
    httpConnection=setupConnection(buildUrl());
    processResponse(httpConnection);
  }
 catch (  IOException e) {
    responseProcessor.handleIOException(e);
  }
 finally {
    if (httpConnection != null) {
      httpConnection.disconnect();
    }
  }
}","public void request(){
  HttpURLConnection httpConnection=null;
  try {
    httpConnection=setupConnection(buildUrl());
    processResponse(httpConnection);
  }
 catch (  IOException e) {
    e.printStackTrace();
    responseProcessor.handleIOException(e);
  }
 finally {
    if (httpConnection != null) {
      httpConnection.disconnect();
    }
  }
}",0.9631811487481592
142105,"public ModernHttpRequester(Context context,URL url,Hashtable<String,String> params,boolean isAuthenticatedRequest,boolean isPostRequest){
  this.isPostRequest=isPostRequest;
  this.context=context;
  this.params=params;
  this.url=url;
  setupAuthentication(isAuthenticatedRequest);
}","public ModernHttpRequester(Context context,URL url,HashMap<String,String> params,boolean isAuthenticatedRequest,boolean isPostRequest){
  this.isPostRequest=isPostRequest;
  this.context=context;
  this.params=params;
  this.url=url;
  setupAuthentication(isAuthenticatedRequest);
}",0.9858657243816256
142106,"private InputStream getResponseStream(HttpURLConnection con) throws IOException {
  long dataSizeGuess=setContentLengthProps(con);
  BitCache cache=BitCacheFactory.getCache(context,dataSizeGuess);
  cache.initializeCache();
  OutputStream cacheOut=cache.getCacheStream();
  AndroidStreamUtil.writeFromInputToOutput(con.getInputStream(),cacheOut);
  return cache.retrieveCache();
}","private InputStream getResponseStream(HttpURLConnection con) throws IOException {
  InputStream connectionStream;
  try {
    connectionStream=con.getInputStream();
  }
 catch (  IOException e) {
    return null;
  }
  long dataSizeGuess=setContentLengthProps(con);
  BitCache cache=BitCacheFactory.getCache(context,dataSizeGuess);
  cache.initializeCache();
  OutputStream cacheOut=cache.getCacheStream();
  AndroidStreamUtil.writeFromInputToOutput(connectionStream,cacheOut);
  return cache.retrieveCache();
}",0.7564534231200898
142107,"private void buildPostPayload(HttpURLConnection httpConnection) throws IOException {
  String paramsString=buildUrlWithParams().getQuery();
  int bodySize=paramsString.length();
  httpConnection.setFixedLengthStreamingMode(bodySize);
  httpConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  httpConnection.setRequestProperty(""String_Node_Str"",bodySize + ""String_Node_Str"");
  OutputStream os=httpConnection.getOutputStream();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,""String_Node_Str""));
  writer.write(paramsString);
  writer.flush();
  writer.close();
  os.close();
}","private void buildPostPayload(HttpURLConnection httpConnection) throws IOException {
  String paramsString=buildUrlWithParams().getQuery();
  Log.d(TAG,paramsString);
  int bodySize=paramsString.length();
  httpConnection.setFixedLengthStreamingMode(bodySize);
  httpConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  httpConnection.setRequestProperty(""String_Node_Str"",bodySize + ""String_Node_Str"");
  OutputStream os=httpConnection.getOutputStream();
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os,""String_Node_Str""));
  writer.write(paramsString);
  writer.flush();
  writer.close();
  os.close();
}",0.9785544082605242
142108,"protected HttpURLConnection setupConnection(URL builtUrl) throws IOException {
  HttpURLConnection httpConnection=(HttpURLConnection)builtUrl.openConnection();
  if (isPostRequest) {
    setupConnectionInner(httpConnection);
    httpConnection.setRequestMethod(""String_Node_Str"");
    httpConnection.setDoOutput(true);
    buildPostPayload(httpConnection);
  }
 else {
    setupConnectionInner(httpConnection);
    httpConnection.setRequestMethod(""String_Node_Str"");
  }
  return httpConnection;
}","protected HttpURLConnection setupConnection(URL builtUrl) throws IOException {
  Log.d(TAG,builtUrl.toString());
  HttpURLConnection httpConnection=(HttpURLConnection)builtUrl.openConnection();
  if (isPostRequest) {
    setupConnectionInner(httpConnection);
    httpConnection.setRequestMethod(""String_Node_Str"");
    httpConnection.setDoOutput(true);
    buildPostPayload(httpConnection);
  }
 else {
    setupConnectionInner(httpConnection);
    httpConnection.setRequestMethod(""String_Node_Str"");
  }
  return httpConnection;
}",0.9669260700389104
142109,"public SimpleHttpTask(Context context,URL url,Hashtable<String,String> params,boolean isPostRequest){
  taskId=SIMPLE_HTTP_TASK_ID;
  requestor=CommCareApplication._().buildModernHttpRequester(context,url,params,true,isPostRequest);
  requestor.setResponseProcessor(this);
}","public SimpleHttpTask(Context context,URL url,HashMap<String,String> params,boolean isPostRequest){
  taskId=SIMPLE_HTTP_TASK_ID;
  requestor=CommCareApplication._().buildModernHttpRequester(context,url,params,true,isPostRequest);
  requestor.setResponseProcessor(this);
}",0.9853479853479854
142110,"@Test public void makeSuccessfulPostRequestTest(){
  ModernHttpRequesterMock.setResponseCodes(new Integer[]{200});
  HttpRequestEndpointsMock.setCaseFetchResponseCodes(new Integer[]{200});
  DebugDataPullResponseFactory.setRequestPayloads(new String[]{""String_Node_Str""});
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  InputStream is=PostRequestActivity.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  Pair<ExternalDataInstance,String> instanceOrError=QueryRequestActivity.buildExternalDataInstance(is,""String_Node_Str"");
  session.setQueryDatum(instanceOrError.first);
  session.setDatum(""String_Node_Str"",""String_Node_Str"");
  ShadowActivity shadowActivity=ActivityLaunchUtils.buildHomeActivity();
  Intent postActivityIntent=shadowActivity.getNextStartedActivity();
  String intentActivityName=postActivityIntent.getComponent().getClassName();
  assertTrue(intentActivityName.equals(PostRequestActivity.class.getName()));
  assertEquals(""String_Node_Str"",postActivityIntent.getStringExtra(PostRequestActivity.URL_KEY));
  Hashtable<String,String> postUrlParams=(Hashtable<String,String>)postActivityIntent.getSerializableExtra(PostRequestActivity.PARAMS_KEY);
  assertEquals(""String_Node_Str"",postUrlParams.get(""String_Node_Str""));
  PostRequestActivity postRequestActivity=Robolectric.buildActivity(PostRequestActivity.class).withIntent(postActivityIntent).create().start().resume().get();
  assertTrue(postRequestActivity.isFinishing());
}","/** 
 * Launch post request through session dispatch
 */
@Test public void makeSuccessfulPostRequestTest(){
  ModernHttpRequesterMock.setResponseCodes(new Integer[]{200});
  HttpRequestEndpointsMock.setCaseFetchResponseCodes(new Integer[]{200});
  DebugDataPullResponseFactory.setRequestPayloads(new String[]{""String_Node_Str""});
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  InputStream is=PostRequestActivity.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  Pair<ExternalDataInstance,String> instanceOrError=QueryRequestActivity.buildExternalDataInstance(is,""String_Node_Str"");
  session.setQueryDatum(instanceOrError.first);
  session.setDatum(""String_Node_Str"",""String_Node_Str"");
  ShadowActivity shadowActivity=ActivityLaunchUtils.buildHomeActivity();
  Intent postActivityIntent=shadowActivity.getNextStartedActivity();
  String intentActivityName=postActivityIntent.getComponent().getClassName();
  assertTrue(intentActivityName.equals(PostRequestActivity.class.getName()));
  assertEquals(""String_Node_Str"",postActivityIntent.getStringExtra(PostRequestActivity.URL_KEY));
  Hashtable<String,String> postUrlParams=(Hashtable<String,String>)postActivityIntent.getSerializableExtra(PostRequestActivity.PARAMS_KEY);
  assertEquals(""String_Node_Str"",postUrlParams.get(""String_Node_Str""));
  PostRequestActivity postRequestActivity=Robolectric.buildActivity(PostRequestActivity.class).withIntent(postActivityIntent).create().start().resume().get();
  assertTrue(postRequestActivity.isFinishing());
}",0.982542113323124
142111,"public void clearExternalData(){
  setCurrent(full);
  isFilteringByCalloutResult=false;
  externalData.clear();
}","public void clearExternalData(){
  isFilteringByCalloutResult=false;
  setCurrent(full);
  externalData.clear();
}",0.8245614035087719
142112,"public void syncData(final CommCareActivity activity,final boolean formsToSend,final boolean userTriggeredSync,String server,String username,String password){
  DataPullTask<PullTaskReceiver> mDataPullTask=new DataPullTask<PullTaskReceiver>(username,password,server,activity){
    @Override protected void deliverResult(    PullTaskReceiver receiver,    ResultAndError<PullTaskResult> resultAndErrorMessage){
      receiver.handlePullTaskResult(resultAndErrorMessage,userTriggeredSync,formsToSend);
    }
    @Override protected void deliverUpdate(    PullTaskReceiver receiver,    Integer... update){
      receiver.handlePullTaskUpdate(update);
    }
    @Override protected void deliverError(    PullTaskReceiver receiver,    Exception e){
      receiver.handlePullTaskError(e);
    }
  }
;
  mDataPullTask.connect(activity);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mDataPullTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
 else {
    mDataPullTask.execute();
  }
}","public <I extends CommCareActivity & PullTaskReceiver>void syncData(final I activity,final boolean formsToSend,final boolean userTriggeredSync,String server,String username,String password){
  DataPullTask<PullTaskReceiver> mDataPullTask=new DataPullTask<PullTaskReceiver>(username,password,server,activity){
    @Override protected void deliverResult(    PullTaskReceiver receiver,    ResultAndError<PullTaskResult> resultAndErrorMessage){
      receiver.handlePullTaskResult(resultAndErrorMessage,userTriggeredSync,formsToSend);
    }
    @Override protected void deliverUpdate(    PullTaskReceiver receiver,    Integer... update){
      receiver.handlePullTaskUpdate(update);
    }
    @Override protected void deliverError(    PullTaskReceiver receiver,    Exception e){
      receiver.handlePullTaskError(e);
    }
  }
;
  mDataPullTask.connect(activity);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mDataPullTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  }
 else {
    mDataPullTask.execute();
  }
}",0.9658203125
142113,"public void syncDataForLoggedInUser(final CommCareHomeActivity activity,final boolean formsToSend,final boolean userTriggeredSync){
  User u;
  try {
    u=CommCareApplication._().getSession().getLoggedInUser();
  }
 catch (  SessionUnavailableException sue) {
    return;
  }
  if (User.TYPE_DEMO.equals(u.getUserType())) {
    if (userTriggeredSync) {
      if (formsToSend) {
        activity.displayMessage(Localization.get(""String_Node_Str""),true,true);
      }
 else {
        activity.displayMessage(Localization.get(""String_Node_Str""),true,true);
      }
    }
    return;
  }
  SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
  syncData(activity,formsToSend,userTriggeredSync,u.getUsername(),u.getCachedPwd(),prefs.getString(CommCarePreferences.PREFS_DATA_SERVER_KEY,activity.getString(R.string.ota_restore_url)));
}","public void syncDataForLoggedInUser(final CommCareHomeActivity activity,final boolean formsToSend,final boolean userTriggeredSync){
  User u;
  try {
    u=CommCareApplication._().getSession().getLoggedInUser();
  }
 catch (  SessionUnavailableException sue) {
    return;
  }
  if (User.TYPE_DEMO.equals(u.getUserType())) {
    if (userTriggeredSync) {
      if (formsToSend) {
        activity.displayMessage(Localization.get(""String_Node_Str""),true,true);
      }
 else {
        activity.displayMessage(Localization.get(""String_Node_Str""),true,true);
      }
    }
    return;
  }
  SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
  syncData(activity,formsToSend,userTriggeredSync,prefs.getString(CommCarePreferences.PREFS_DATA_SERVER_KEY,activity.getString(R.string.ota_restore_url)),u.getUsername(),u.getCachedPwd());
}",0.9617169373549884
142114,"private void saveInlineVideoState(){
  for (int i=0; i < questionsView.getWidgets().size(); i++) {
    QuestionWidget q=questionsView.getWidgets().get(i);
    if (q.findViewById(MediaLayout.INLINE_VIDEO_PANE_ID) != null) {
      VideoView inlineVideo=(VideoView)q.findViewById(MediaLayout.INLINE_VIDEO_PANE_ID);
      if (inlineVideo.isPlaying()) {
        indexOfWidgetWithVideoPlaying=i;
        positionOfVideoProgress=inlineVideo.getCurrentPosition();
        return;
      }
    }
  }
}","private void saveInlineVideoState(){
  if (questionsView != null) {
    for (int i=0; i < questionsView.getWidgets().size(); i++) {
      QuestionWidget q=questionsView.getWidgets().get(i);
      if (q.findViewById(MediaLayout.INLINE_VIDEO_PANE_ID) != null) {
        VideoView inlineVideo=(VideoView)q.findViewById(MediaLayout.INLINE_VIDEO_PANE_ID);
        if (inlineVideo.isPlaying()) {
          indexOfWidgetWithVideoPlaying=i;
          positionOfVideoProgress=inlineVideo.getCurrentPosition();
          return;
        }
      }
    }
  }
}",0.9297401347449472
142115,"private void handleFormLoadCompletion(FormController fc){
  if (GeoUtils.ACTION_CHECK_GPS_ENABLED.equals(locationRecieverErrorAction)) {
    handleNoGpsBroadcast();
  }
 else   if (PollSensorAction.XPATH_ERROR_ACTION.equals(locationRecieverErrorAction)) {
    handleXpathErrorBroadcast();
  }
  mFormController=fc;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    invalidateOptionsMenu();
  }
  registerSessionFormSaveCallback();
  if (mInstancePath == null) {
    String time=new SimpleDateFormat(""String_Node_Str"").format(Calendar.getInstance().getTime());
    String file=mFormPath.substring(mFormPath.lastIndexOf('/') + 1,mFormPath.lastIndexOf('.'));
    String path=mInstanceDestination + file + ""String_Node_Str""+ time;
    if (FileUtil.createFolder(path)) {
      mInstancePath=path + ""String_Node_Str"" + file+ ""String_Node_Str""+ time+ ""String_Node_Str"";
    }
  }
 else {
    Intent i=new Intent(FormEntryActivity.this,FormHierarchyActivity.class);
    startActivityForResult(i,HIERARCHY_ACTIVITY_FIRST_START);
    return;
  }
  reportFormEntry();
  try {
    FormEntrySessionReplayer.tryReplayingFormEntry(mFormController.getFormEntryController(),formEntryRestoreSession);
  }
 catch (  FormEntrySessionReplayer.ReplayError e) {
    UserfacingErrorHandling.createErrorDialog(this,e.getMessage(),EXIT);
  }
  refreshCurrentView();
  FormNavigationUI.updateNavigationCues(this,mFormController,questionsView);
}","private void handleFormLoadCompletion(FormController fc){
  if (GeoUtils.ACTION_CHECK_GPS_ENABLED.equals(locationRecieverErrorAction)) {
    handleNoGpsBroadcast();
  }
 else   if (PollSensorAction.XPATH_ERROR_ACTION.equals(locationRecieverErrorAction)) {
    handleXpathErrorBroadcast();
  }
  mFormController=fc;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    invalidateOptionsMenu();
  }
  registerSessionFormSaveCallback();
  if (mInstancePath == null) {
    String time=new SimpleDateFormat(""String_Node_Str"").format(Calendar.getInstance().getTime());
    String file=mFormPath.substring(mFormPath.lastIndexOf('/') + 1,mFormPath.lastIndexOf('.'));
    String path=mInstanceDestination + file + ""String_Node_Str""+ time;
    if (FileUtil.createFolder(path)) {
      mInstancePath=path + ""String_Node_Str"" + file+ ""String_Node_Str""+ time+ ""String_Node_Str"";
    }
  }
 else {
    Intent i=new Intent(this,FormHierarchyActivity.class);
    startActivityForResult(i,HIERARCHY_ACTIVITY_FIRST_START);
    return;
  }
  reportFormEntry();
  try {
    FormEntrySessionReplayer.tryReplayingFormEntry(mFormController.getFormEntryController(),formEntryRestoreSession);
  }
 catch (  FormEntrySessionReplayer.ReplayError e) {
    UserfacingErrorHandling.createErrorDialog(this,e.getMessage(),EXIT);
  }
  refreshCurrentView();
  FormNavigationUI.updateNavigationCues(this,mFormController,questionsView);
}",0.9936930623686054
142116,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.hierarchy_layout);
  addActionBarBackArrow();
  mStartIndex=FormEntryActivity.mFormController.getFormIndex();
  setTitle(Localization.get(""String_Node_Str""));
  mPath=(TextView)findViewById(R.id.pathtext);
  jumpPreviousButton=(Button)findViewById(R.id.jumpPreviousButton);
  jumpPreviousButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      goUpLevel();
    }
  }
);
  Button jumpBeginningButton=(Button)findViewById(R.id.jumpBeginningButton);
  jumpBeginningButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());
      setResult(RESULT_OK);
      finish();
    }
  }
);
  Button jumpEndButton=(Button)findViewById(R.id.jumpEndButton);
  jumpEndButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      FormEntryActivity.mFormController.jumpToIndex(FormIndex.createEndOfFormIndex());
      setResult(RESULT_OK);
      finish();
    }
  }
);
  getListView().post(new Runnable(){
    @Override public void run(){
      int position=0;
      ListAdapter adapter=getListAdapter();
      if (adapter != null) {
        for (int i=0; i < adapter.getCount(); i++) {
          HierarchyElement he=(HierarchyElement)getListAdapter().getItem(i);
          if (mStartIndex.equals(he.getFormIndex())) {
            position=i;
            break;
          }
        }
        getListView().setSelection(position);
      }
    }
  }
);
  refreshView();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.hierarchy_layout);
  addActionBarBackArrow();
  setTitle(Localization.get(""String_Node_Str""));
  mPath=(TextView)findViewById(R.id.pathtext);
  jumpPreviousButton=(Button)findViewById(R.id.jumpPreviousButton);
  jumpPreviousButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      goUpLevel();
    }
  }
);
  Button jumpBeginningButton=(Button)findViewById(R.id.jumpBeginningButton);
  jumpBeginningButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());
      setResult(RESULT_OK);
      finish();
    }
  }
);
  Button jumpEndButton=(Button)findViewById(R.id.jumpEndButton);
  jumpEndButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      FormEntryActivity.mFormController.jumpToIndex(FormIndex.createEndOfFormIndex());
      setResult(RESULT_OK);
      finish();
    }
  }
);
  final FormIndex mStartIndex=FormEntryActivity.mFormController.getFormIndex();
  getListView().post(new Runnable(){
    @Override public void run(){
      int position=0;
      ListAdapter adapter=getListAdapter();
      if (adapter != null) {
        for (int i=0; i < adapter.getCount(); i++) {
          HierarchyElement he=(HierarchyElement)getListAdapter().getItem(i);
          if (mStartIndex.equals(he.getFormIndex())) {
            position=i;
            break;
          }
        }
        getListView().setSelection(position);
      }
    }
  }
);
  refreshView();
}",0.9576968272620446
142117,"private void setupUI(){
  buildPromptUI();
  queryButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      answerPrompts();
      makeQueryRequest();
    }
  }
);
}","private void setupUI(){
  buildPromptUI();
  queryButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      answerPrompts();
      makeQueryRequest();
    }
  }
);
  if (inErrorState) {
    enterErrorState();
  }
}",0.8930817610062893
142118,"@Test public void makeQueryWithBadServerPayloadTest(){
  ModernHttpRequesterMock.setResponseCodes(new Integer[]{200});
  ModernHttpRequesterMock.setExpectedUrls(new String[]{""String_Node_Str""});
  ModernHttpRequesterMock.setRequestPayloads(new String[]{""String_Node_Str""});
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  Intent queryActivityIntent=new Intent(RuntimeEnvironment.application,QueryRequestActivity.class);
  QueryRequestActivity queryRequestActivity=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create().start().resume().get();
  LinearLayout promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  EditText patientId=(EditText)promptsLayout.getChildAt(1);
  patientId.setText(""String_Node_Str"");
  EditText patientName=(EditText)promptsLayout.getChildAt(3);
  patientName.setText(""String_Node_Str"");
  Button queryButton=(Button)queryRequestActivity.findViewById(R.id.request_button);
  queryButton.performClick();
  TextView errorMessage=(TextView)queryRequestActivity.findViewById(R.id.error_message);
  assertEquals(View.VISIBLE,errorMessage.getVisibility());
  assertTrue(((String)errorMessage.getText()).contains(Localization.get(""String_Node_Str"",""String_Node_Str"")));
}","@Test public void makeQueryWithBadServerPayloadTest(){
  ModernHttpRequesterMock.setResponseCodes(new Integer[]{200});
  ModernHttpRequesterMock.setExpectedUrls(new String[]{""String_Node_Str""});
  ModernHttpRequesterMock.setRequestPayloads(new String[]{""String_Node_Str""});
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  Intent queryActivityIntent=new Intent(RuntimeEnvironment.application,QueryRequestActivity.class);
  ActivityController<QueryRequestActivity> controller=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create().start().resume();
  QueryRequestActivity queryRequestActivity=controller.get();
  LinearLayout promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  EditText patientId=(EditText)promptsLayout.getChildAt(1);
  patientId.setText(""String_Node_Str"");
  EditText patientName=(EditText)promptsLayout.getChildAt(3);
  patientName.setText(""String_Node_Str"");
  Button queryButton=(Button)queryRequestActivity.findViewById(R.id.request_button);
  queryButton.performClick();
  TextView errorMessage=(TextView)queryRequestActivity.findViewById(R.id.error_message);
  assertEquals(View.VISIBLE,errorMessage.getVisibility());
  assertTrue(((String)errorMessage.getText()).contains(Localization.get(""String_Node_Str"",""String_Node_Str"")));
  Bundle savedInstanceState=new Bundle();
  controller.saveInstanceState(savedInstanceState);
  queryRequestActivity=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create(savedInstanceState).start().resume().get();
  errorMessage=(TextView)queryRequestActivity.findViewById(R.id.error_message);
  assertEquals(View.VISIBLE,errorMessage.getVisibility());
  assertTrue(((String)errorMessage.getText()).contains(Localization.get(""String_Node_Str"",""String_Node_Str"")));
}",0.8183703703703704
142119,"@Test public void reloadQueryActivityStateTest(){
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  Intent queryActivityIntent=new Intent(RuntimeEnvironment.application,QueryRequestActivity.class);
  ActivityController<QueryRequestActivity> controller=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create().start().resume();
  QueryRequestActivity queryRequestActivity=controller.get();
  LinearLayout promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  EditText patientId=(EditText)promptsLayout.getChildAt(1);
  patientId.setText(""String_Node_Str"");
  Bundle savedInstanceState=new Bundle();
  controller.saveInstanceState(savedInstanceState);
  controller.resume();
  queryRequestActivity=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create(savedInstanceState).start().resume().get();
  promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  patientId=(EditText)promptsLayout.getChildAt(1);
  assertEquals(""String_Node_Str"",patientId.getText().toString());
  patientId=(EditText)promptsLayout.getChildAt(3);
  assertEquals(""String_Node_Str"",patientId.getText().toString());
}","@Test public void reloadQueryActivityStateTest(){
  AndroidSessionWrapper sessionWrapper=CommCareApplication._().getCurrentSessionWrapper();
  CommCareSession session=sessionWrapper.getSession();
  session.setCommand(""String_Node_Str"");
  Intent queryActivityIntent=new Intent(RuntimeEnvironment.application,QueryRequestActivity.class);
  ActivityController<QueryRequestActivity> controller=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create().start().resume();
  QueryRequestActivity queryRequestActivity=controller.get();
  LinearLayout promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  EditText patientId=(EditText)promptsLayout.getChildAt(1);
  patientId.setText(""String_Node_Str"");
  Bundle savedInstanceState=new Bundle();
  controller.saveInstanceState(savedInstanceState);
  queryRequestActivity=Robolectric.buildActivity(QueryRequestActivity.class).withIntent(queryActivityIntent).create(savedInstanceState).start().resume().get();
  promptsLayout=(LinearLayout)queryRequestActivity.findViewById(R.id.query_prompts);
  patientId=(EditText)promptsLayout.getChildAt(1);
  assertEquals(""String_Node_Str"",patientId.getText().toString());
  patientId=(EditText)promptsLayout.getChildAt(3);
  assertEquals(""String_Node_Str"",patientId.getText().toString());
}",0.9914783253056688
142120,"@Test public void emptyFileSelectionTest(){
  MultimediaInflaterActivity multimediaInflaterActivity=Robolectric.buildActivity(MultimediaInflaterActivity.class).create().start().resume().get();
  ShadowActivity shadowActivity=Shadows.shadowOf(multimediaInflaterActivity);
  Intent fileSelectIntent=new Intent(Intent.ACTION_GET_CONTENT);
  fileSelectIntent.setType(""String_Node_Str"");
  shadowActivity.receiveResult(fileSelectIntent,MultimediaInflaterActivity.REQUEST_FILE_LOCATION,new Intent());
}","/** 
 * Ensure user sees invalid path toast when the file browser doesn't return a path uri
 */
@Test public void emptyFileSelectionTest(){
  MultimediaInflaterActivity multimediaInflaterActivity=Robolectric.buildActivity(MultimediaInflaterActivity.class).create().start().resume().get();
  ImageButton selectFileButton=(ImageButton)multimediaInflaterActivity.findViewById(R.id.screen_multimedia_inflater_filefetch);
  selectFileButton.performClick();
  Intent fileSelectIntent=new Intent(Intent.ACTION_GET_CONTENT);
  fileSelectIntent.setType(""String_Node_Str"");
  Intent emptyFileSelectResult=new Intent();
  ShadowActivity shadowActivity=Shadows.shadowOf(multimediaInflaterActivity);
  shadowActivity.receiveResult(fileSelectIntent,Activity.RESULT_OK,emptyFileSelectResult);
  Assert.assertEquals(Localization.get(""String_Node_Str""),ShadowToast.getTextOfLatestToast());
}",0.5240875912408759
142121,"@Before public void setup(){
  TestAppInstaller.initInstallAndLogin(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@Before public void setup(){
  TestAppInstaller.installApp(""String_Node_Str"");
}",0.7609756097560976
142122,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    processBarcodeFetch(resultCode,intent);
  break;
case CALLOUT:
processCalloutResult(resultCode,intent);
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
AudioController.INSTANCE.releaseCurrentMediaEntity();
}
}
break;
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=EntityDetailUtils.getDetailIntent(getApplicationContext(),r,null,selectDatum,asw);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
}
}
 else {
refreshView();
}
break;
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    processBarcodeFetch(resultCode,intent);
  break;
case CALLOUT:
processCalloutResult(resultCode,intent);
break;
case CONFIRM_SELECT:
resuming=true;
isStartingDetailActivity=false;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
AudioController.INSTANCE.releaseCurrentMediaEntity();
}
}
break;
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=EntityDetailUtils.getDetailIntent(getApplicationContext(),r,null,selectDatum,asw);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
}
}
 else {
refreshView();
}
break;
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9891891891891892
142123,"/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null) {
      s.append(t);
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}","/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null && !t.trim().equals(""String_Node_Str"")) {
      s.append(t);
    }
 else {
      continue;
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}",0.9026548672566372
142124,"/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null) {
      s.append(t);
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}","/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null && !t.trim().equals(""String_Node_Str"")) {
      s.append(t);
    }
 else {
      continue;
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}",0.9026548672566372
142125,"/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null && !t.trim().equals(""String_Node_Str"")) {
      s.append(t);
    }
 else {
      continue;
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}","/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null) {
      s.append(t);
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}",0.8306784660766962
142126,"private void showView(QuestionsView next,AnimationType from,boolean animateLastView){
switch (from) {
case RIGHT:
    mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_in);
  mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_out);
break;
case LEFT:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_out);
break;
case FADE:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_out);
break;
}
if (questionsView != null) {
if (animateLastView) {
questionsView.startAnimation(mOutAnimation);
}
mViewPane.removeView(questionsView);
questionsView.teardownView();
}
mInAnimation.setAnimationListener(this);
RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
questionsView=next;
mViewPane.addView(questionsView,lp);
questionsView.startAnimation(mInAnimation);
FrameLayout header=(FrameLayout)findViewById(R.id.form_entry_header);
TextView groupLabel=((TextView)header.findViewById(R.id.form_entry_group_label));
this.mGroupNativeVisibility=false;
FormLayoutHelpers.updateGroupViewVisibility(this,mGroupNativeVisibility,mGroupForcedInvisible);
questionsView.setFocus(this);
SpannableStringBuilder groupLabelText=questionsView.getGroupLabel();
if (groupLabelText != null && !groupLabelText.toString().replace(""String_Node_Str"",""String_Node_Str"").trim().equals(""String_Node_Str"")) {
groupLabel.setText(groupLabelText);
this.mGroupNativeVisibility=true;
FormLayoutHelpers.updateGroupViewVisibility(this,mGroupNativeVisibility,mGroupForcedInvisible);
}
}","private void showView(QuestionsView next,AnimationType from,boolean animateLastView){
switch (from) {
case RIGHT:
    mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_in);
  mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_out);
break;
case LEFT:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_out);
break;
case FADE:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_out);
break;
}
if (questionsView != null) {
if (animateLastView) {
questionsView.startAnimation(mOutAnimation);
}
mViewPane.removeView(questionsView);
questionsView.teardownView();
}
mInAnimation.setAnimationListener(this);
RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
questionsView=next;
mViewPane.addView(questionsView,lp);
questionsView.startAnimation(mInAnimation);
FrameLayout header=(FrameLayout)findViewById(R.id.form_entry_header);
TextView groupLabel=((TextView)header.findViewById(R.id.form_entry_group_label));
this.mGroupNativeVisibility=false;
FormLayoutHelpers.updateGroupViewVisibility(this,mGroupNativeVisibility,mGroupForcedInvisible);
questionsView.setFocus(this);
SpannableStringBuilder groupLabelText=questionsView.getGroupLabel();
if (groupLabelText != null && !groupLabelText.toString().trim().equals(""String_Node_Str"")) {
groupLabel.setText(groupLabelText);
this.mGroupNativeVisibility=true;
FormLayoutHelpers.updateGroupViewVisibility(this,mGroupNativeVisibility,mGroupForcedInvisible);
}
}",0.8870242732993707
142127,"/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null) {
      s.append(t);
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}","/** 
 * Returns the hierarchy of groups to which the question belongs.
 */
private SpannableStringBuilder deriveGroupText(FormEntryCaption[] groups){
  SpannableStringBuilder s=new SpannableStringBuilder(""String_Node_Str"");
  String t;
  String m;
  int i;
  for (  FormEntryCaption g : groups) {
    i=g.getMultiplicity() + 1;
    t=g.getLongText();
    m=g.getMarkdownText();
    if (m != null) {
      Spannable markdownSpannable=MarkupUtil.returnMarkdown(getContext(),m);
      s.append(markdownSpannable);
    }
 else     if (t != null && !t.trim().equals(""String_Node_Str"")) {
      s.append(t);
    }
 else {
      continue;
    }
    if (g.repeats() && i > 0) {
      s.append(""String_Node_Str"").append(String.valueOf(i)).append(""String_Node_Str"");
    }
    s.append(""String_Node_Str"");
  }
  if (s.length() > 0) {
    s.delete(s.length() - 2,s.length());
  }
  return s;
}",0.9026548672566372
142128,"public static UniversalDate fromMillis(long millisFromJavaEpoch){
  long millisFromMinDay=millisFromJavaEpoch - MIN_MILLIS_FROM_JAVA_EPOCH;
  long daysFromMinDay=millisFromMinDay / UniversalDate.MILLIS_IN_DAY;
  int days=-1;
  for (int year=MIN_YEAR; year <= MAX_YEAR; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        days++;
        if (days == daysFromMinDay) {
          return new UniversalDate(year,month,day,millisFromJavaEpoch);
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","public static UniversalDate fromMillis(long millisFromJavaEpoch){
  return fromMillis(millisFromJavaEpoch,TimeZone.getDefault());
}",0.265179677819083
142129,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String appId=appIdDropdownList.get(position);
  boolean appChanged=!appId.equals(CommCareApplication._().getCurrentApp().getUniqueId());
  if (appChanged) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    prefs.edit().putString(KEY_LAST_APP,appId).commit();
    Intent i=new Intent(this,SeatAppActivity.class);
    i.putExtra(KEY_APP_TO_SEAT,appId);
    this.startActivityForResult(i,SEAT_APP_ACTIVITY);
  }
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  String appId=appIdDropdownList.get(position);
  boolean selectedNewApp=!appId.equals(CommCareApplication._().getCurrentApp().getUniqueId());
  if (selectedNewApp) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    prefs.edit().putString(KEY_LAST_APP,appId).commit();
    Intent i=new Intent(this,SeatAppActivity.class);
    i.putExtra(KEY_APP_TO_SEAT,appId);
    this.startActivityForResult(i,SEAT_APP_ACTIVITY);
  }
}",0.9558823529411764
142130,"@Override public void refreshView(){
  updateBanner();
  activity.restoreEnteredTextFromRotation();
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getUsableAppRecords();
  if (readyApps.size() == 1) {
    ApplicationRecord r=readyApps.get(0);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
    prefs.edit().putString(LoginActivity.KEY_LAST_APP,r.getUniqueId()).commit();
    setSingleAppUIState();
  }
 else {
    activity.populateAppSpinner(readyApps);
  }
  if (DevSessionRestorer.savedSessionPresent()) {
    restoreSessionCheckbox.setVisibility(View.VISIBLE);
  }
 else {
    restoreSessionCheckbox.setVisibility(View.GONE);
  }
}","@Override public void refreshView(){
  updateBanner();
  activity.restoreEnteredTextFromRotation();
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getUsableAppRecords();
  if (readyApps.size() == 1) {
    ApplicationRecord r=readyApps.get(0);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
    prefs.edit().putString(LoginActivity.KEY_LAST_APP,r.getUniqueId()).commit();
    setSingleAppUIState();
  }
 else {
    activity.populateAppSpinner(readyApps);
  }
  if (DevSessionRestorer.savedSessionPresent()) {
    restoreSessionCheckbox.setVisibility(View.VISIBLE);
  }
 else {
    restoreSessionCheckbox.setVisibility(View.GONE);
  }
  if (activity.checkForSeatedAppChange()) {
    refreshForNewApp();
  }
}",0.950413223140496
142131,"@Override protected void onCreateSessionSafe(Bundle savedInstanceState) throws SessionUnavailableException {
  super.onCreateSessionSafe(savedInstanceState);
  if (savedInstanceState != null) {
    loginExtraWasConsumed=savedInstanceState.getBoolean(EXTRA_CONSUMED_KEY);
  }
  ACRAUtil.registerAppData();
  uiController.setupUI();
  sessionNavigator=new SessionNavigator(this);
  formAndDataSyncer=new FormAndDataSyncer(this);
  processFromExternalLaunch(savedInstanceState);
  processFromShortcutLaunch();
  processFromLoginLaunch();
}","@Override protected void onCreateSessionSafe(Bundle savedInstanceState) throws SessionUnavailableException {
  super.onCreateSessionSafe(savedInstanceState);
  loadInstanceState(savedInstanceState);
  ACRAUtil.registerAppData();
  uiController.setupUI();
  sessionNavigator=new SessionNavigator(this);
  formAndDataSyncer=new FormAndDataSyncer(this);
  processFromExternalLaunch(savedInstanceState);
  processFromShortcutLaunch();
  processFromLoginLaunch();
}",0.8473895582329317
142132,"private void clearSessionAndExit(AndroidSessionWrapper currentState,boolean shouldWarnUser){
  currentState.reset();
  if (wasExternal) {
    this.finish();
  }
  uiController.refreshView();
  if (shouldWarnUser) {
    showSessionRefreshWarning();
  }
}","private void clearSessionAndExit(AndroidSessionWrapper currentState,boolean shouldWarnUser){
  currentState.reset();
  if (wasExternal) {
    setResult(RESULT_CANCELED);
    this.finish();
  }
  uiController.refreshView();
  if (shouldWarnUser) {
    showSessionRefreshWarning();
  }
}",0.9405204460966544
142133,"/** 
 * Process user returning home from the form entry activity. Triggers form submission cycle, cleans up some session state.
 * @param resultCode exit code of form entry activity
 * @param intent     The intent of the returning activity, with thesaved form provided as the intent URI data. Null if the form didn't exit cleanly
 * @return Flag signifying that caller should fetch the next activity inthe session to launch. If false then caller should exit or spawn home activity.
 */
private boolean processReturnFromFormEntry(int resultCode,Intent intent){
  AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
  FormRecord current=currentState.getFormRecord();
  if (current == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
    clearSessionAndExit(currentState,true);
    return false;
  }
  if ((intent != null && intent.getBooleanExtra(FormEntryActivity.IS_ARCHIVED_FORM,false)) || FormRecord.STATUS_COMPLETE.equals(current.getStatus()) || FormRecord.STATUS_SAVED.equals(current.getStatus())) {
    currentState.reset();
    if (wasExternal) {
      this.finish();
    }
 else {
      goToFormArchive(false,current);
    }
    return false;
  }
  if (resultCode == RESULT_OK) {
    Uri resultInstanceURI=null;
    if (intent != null) {
      resultInstanceURI=intent.getData();
    }
    if (resultInstanceURI == null) {
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
      clearSessionAndExit(currentState,true);
      return false;
    }
    Cursor c=null;
    String instanceStatus;
    try {
      c=getContentResolver().query(resultInstanceURI,null,null,null,null);
      if (!c.moveToFirst()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      instanceStatus=c.getString(c.getColumnIndexOrThrow(InstanceProviderAPI.InstanceColumns.STATUS));
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    boolean complete=InstanceProviderAPI.STATUS_COMPLETE.equals(instanceStatus);
    if (complete) {
      checkAndStartUnsentFormsTask(false,false);
      uiController.refreshView();
      if (wasExternal) {
        this.finish();
        return false;
      }
      boolean terminateSuccessful;
      try {
        terminateSuccessful=currentState.terminateSession();
      }
 catch (      XPathTypeMismatchException e) {
        UserfacingErrorHandling.logErrorAndShowDialog(this,e,true);
        return false;
      }
      if (!terminateSuccessful) {
        return false;
      }
    }
 else {
      clearSessionAndExit(currentState,false);
      return false;
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
    if (current.getStatus().equals(FormRecord.STATUS_UNSTARTED)) {
      FormRecordCleanupTask.wipeRecord(this,currentState);
    }
    if (wasExternal) {
      currentState.reset();
      this.finish();
      return false;
    }
 else     if (current.getStatus().equals(FormRecord.STATUS_INCOMPLETE)) {
      currentState.reset();
      goToFormArchive(true,current);
      return false;
    }
 else {
      currentState.getSession().stepBack();
      currentState.setFormRecordId(-1);
    }
  }
  return true;
}","/** 
 * Process user returning home from the form entry activity. Triggers form submission cycle, cleans up some session state.
 * @param resultCode exit code of form entry activity
 * @param intent     The intent of the returning activity, with thesaved form provided as the intent URI data. Null if the form didn't exit cleanly
 * @return Flag signifying that caller should fetch the next activity inthe session to launch. If false then caller should exit or spawn home activity.
 */
private boolean processReturnFromFormEntry(int resultCode,Intent intent){
  AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
  FormRecord current=currentState.getFormRecord();
  if (current == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
    clearSessionAndExit(currentState,true);
    return false;
  }
  if ((intent != null && intent.getBooleanExtra(FormEntryActivity.IS_ARCHIVED_FORM,false)) || FormRecord.STATUS_COMPLETE.equals(current.getStatus()) || FormRecord.STATUS_SAVED.equals(current.getStatus())) {
    currentState.reset();
    if (wasExternal) {
      setResult(RESULT_CANCELED);
      this.finish();
    }
 else {
      goToFormArchive(false,current);
    }
    return false;
  }
  if (resultCode == RESULT_OK) {
    Uri resultInstanceURI=null;
    if (intent != null) {
      resultInstanceURI=intent.getData();
    }
    if (resultInstanceURI == null) {
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
      clearSessionAndExit(currentState,true);
      return false;
    }
    Cursor c=null;
    String instanceStatus;
    try {
      c=getContentResolver().query(resultInstanceURI,null,null,null,null);
      if (!c.moveToFirst()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      instanceStatus=c.getString(c.getColumnIndexOrThrow(InstanceProviderAPI.InstanceColumns.STATUS));
    }
  finally {
      if (c != null) {
        c.close();
      }
    }
    boolean complete=InstanceProviderAPI.STATUS_COMPLETE.equals(instanceStatus);
    if (complete) {
      checkAndStartUnsentFormsTask(false,false);
      uiController.refreshView();
      if (wasExternal) {
        setResult(RESULT_CANCELED);
        this.finish();
        return false;
      }
      boolean terminateSuccessful;
      try {
        terminateSuccessful=currentState.terminateSession();
      }
 catch (      XPathTypeMismatchException e) {
        UserfacingErrorHandling.logErrorAndShowDialog(this,e,true);
        return false;
      }
      if (!terminateSuccessful) {
        return false;
      }
    }
 else {
      clearSessionAndExit(currentState,false);
      return false;
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
    if (current.getStatus().equals(FormRecord.STATUS_UNSTARTED)) {
      FormRecordCleanupTask.wipeRecord(this,currentState);
    }
    if (wasExternal) {
      currentState.reset();
      setResult(RESULT_CANCELED);
      this.finish();
      return false;
    }
 else     if (current.getStatus().equals(FormRecord.STATUS_INCOMPLETE)) {
      currentState.reset();
      goToFormArchive(true,current);
      return false;
    }
 else {
      currentState.getSession().stepBack();
      currentState.setFormRecordId(-1);
    }
  }
  return true;
}",0.9854300924628748
142134,"/** 
 * Set state that signifies activity was launch from external app.
 */
private void processFromExternalLaunch(Bundle savedInstanceState){
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(WAS_EXTERNAL_KEY);
  }
 else {
    if (getIntent().hasExtra(DispatchActivity.WAS_EXTERNAL)) {
      wasExternal=true;
      sessionNavigator.startNextSessionStep();
    }
  }
}","/** 
 * Set state that signifies activity was launch from external app.
 */
private void processFromExternalLaunch(Bundle savedInstanceState){
  if (savedInstanceState == null && getIntent().hasExtra(DispatchActivity.WAS_EXTERNAL)) {
    wasExternal=true;
    sessionNavigator.startNextSessionStep();
  }
}",0.5431400282885431
142135,"private void handleExternalLaunch(){
  String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
  SessionStateDescriptor ssd=new SessionStateDescriptor();
  ssd.fromBundle(sessionRequest);
  CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
  Intent i=new Intent(this,CommCareHomeActivity.class);
  i.putExtra(WAS_EXTERNAL,true);
  startActivity(i);
}","private void handleExternalLaunch(){
  String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
  SessionStateDescriptor ssd=new SessionStateDescriptor();
  ssd.fromBundle(sessionRequest);
  CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
  Intent i=new Intent(this,CommCareHomeActivity.class);
  i.putExtra(WAS_EXTERNAL,true);
  startActivityForResult(i,HOME_SCREEN);
}",0.9694002447980417
142136,"/** 
 * Display exception details as a pop-up to the user.
 * @param e Exception to handle
 */
protected void displayException(Exception e){
  String title=Localization.get(""String_Node_Str"");
  String message=Localization.get(""String_Node_Str"",new String[]{e.getMessage()});
  DialogInterface.OnClickListener listener=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int i){
switch (i) {
case DialogInterface.BUTTON_POSITIVE:
        finish();
      break;
  }
}
}
;
AlertDialogFactory f=AlertDialogFactory.getBasicAlertFactoryWithIcon(this,title,message,android.R.drawable.ic_dialog_info,listener);
showAlertDialog(f);
}","/** 
 * Display exception details as a pop-up to the user.
 * @param e Exception to handle
 */
public void displayException(Exception e){
  String title=Localization.get(""String_Node_Str"");
  String message=Localization.get(""String_Node_Str"",new String[]{e.getMessage()});
  DialogInterface.OnClickListener listener=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int i){
switch (i) {
case DialogInterface.BUTTON_POSITIVE:
        finish();
      break;
  }
}
}
;
AlertDialogFactory f=AlertDialogFactory.getBasicAlertFactoryWithIcon(this,title,message,android.R.drawable.ic_dialog_info,listener);
showAlertDialog(f);
}",0.9903774981495188
142137,"@Override protected int getWakeLockLevel(){
  return PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE;
}","@Override public int getWakeLockLevel(){
  return PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE;
}",0.9539748953974896
142138,"@Override protected int getWakeLockLevel(){
  return PowerManager.PARTIAL_WAKE_LOCK;
}","@Override public int getWakeLockLevel(){
  return PowerManager.PARTIAL_WAKE_LOCK;
}",0.9349112426035504
142139,"/** 
 * Launch the DispatchActivity, clearing the activity backstack down to its first occurrence, which should be at the very bottom of the stack. The backstack clearing is necessary for exiting out of the app if the login activity is cancelled
 */
protected static void redirectToLogin(Context context){
  Intent i=new Intent(context.getApplicationContext(),DispatchActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
  context.startActivity(i);
}","/** 
 * Launch the DispatchActivity, clearing the activity backstack down to its first occurrence, which should be at the very bottom of the stack. The backstack clearing is necessary for exiting out of the app if the login activity is cancelled
 */
public static void redirectToLogin(Context context){
  Intent i=new Intent(context.getApplicationContext(),DispatchActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
  context.startActivity(i);
}",0.9858233369683752
142140,"private void handleXpathErrorBroadcast(){
  CommCareActivity.createErrorDialog(FormEntryActivity.this,""String_Node_Str"" + badLocationXpath,EXIT);
}","private void handleXpathErrorBroadcast(){
  UserfacingErrorHandling.createErrorDialog(FormEntryActivity.this,""String_Node_Str"" + badLocationXpath,EXIT);
}",0.8903654485049833
142141,"public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,NodeEntityFactory factory){
  this.detail=detail;
  if (detail.getCustomActions() != null) {
    actionsCount=0;
  }
 else {
    actionsCount=detail.getCustomActions().size();
  }
  this.full=full;
  setCurrent(new ArrayList<Entity<TreeReference>>());
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<>();
  mNodeFactory=factory;
  mAsyncMode=(factory instanceof AsyncNodeEntityFactory);
  if (!mAsyncMode) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    setCurrent(new ArrayList<>(full));
  }
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context);
  }
 else {
    mImageLoader=null;
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
}","public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,NodeEntityFactory factory){
  this.detail=detail;
  if (detail.getCustomActions() != null) {
    actionsCount=detail.getCustomActions().size();
  }
 else {
    actionsCount=0;
  }
  this.full=full;
  setCurrent(new ArrayList<Entity<TreeReference>>());
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<>();
  mNodeFactory=factory;
  mAsyncMode=(factory instanceof AsyncNodeEntityFactory);
  if (!mAsyncMode) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    setCurrent(new ArrayList<>(full));
  }
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context);
  }
 else {
    mImageLoader=null;
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
}",0.935318275154004
142142,"@Override public void onItemClick(AdapterView<?> listView,View view,int position,long id){
  if (id == EntityListAdapter.SPECIAL_ACTION) {
    triggerDetailAction(position - adapter.getCount());
    return;
  }
  TreeReference selection=adapter.getItem(position);
  if (CommCarePreferences.isEntityDetailLoggingEnabled()) {
    Logger.log(EntityDetailActivity.class.getSimpleName(),selectDatum.getLongDetail());
  }
  if (inAwesomeMode) {
    displayReferenceAwesome(selection,position);
    updateSelectedItem(selection,false);
  }
 else {
    Intent i=EntityDetailUtils.getDetailIntent(getApplicationContext(),selection,null,selectDatum,asw);
    i.putExtra(""String_Node_Str"",position);
    if (mNoDetailMode) {
      returnWithResult(i);
    }
 else {
      startActivityForResult(i,CONFIRM_SELECT);
    }
  }
}","@Override public void onItemClick(AdapterView<?> listView,View view,int position,long id){
  if (id == EntityListAdapter.SPECIAL_ACTION) {
    triggerDetailAction(position - (adapter.getCount() - 1));
    return;
  }
  TreeReference selection=adapter.getItem(position);
  if (CommCarePreferences.isEntityDetailLoggingEnabled()) {
    Logger.log(EntityDetailActivity.class.getSimpleName(),selectDatum.getLongDetail());
  }
  if (inAwesomeMode) {
    displayReferenceAwesome(selection,position);
    updateSelectedItem(selection,false);
  }
 else {
    Intent i=EntityDetailUtils.getDetailIntent(getApplicationContext(),selection,null,selectDatum,asw);
    i.putExtra(""String_Node_Str"",position);
    if (mNoDetailMode) {
      returnWithResult(i);
    }
 else {
      startActivityForResult(i,CONFIRM_SELECT);
    }
  }
}",0.996328029375765
142143,"private static void startSessionService(UserKeyRecord keyRecord,String password){
  CommCareSessionService ccService=new CommCareSessionService();
  ccService.createCipherPool();
  ccService.prepareStorage(keyRecord.unWrapKey(password),keyRecord);
  ccService.startSession(getUserFromDb(ccService,keyRecord));
  CommCareApplication._().setTestingService(ccService);
}","private static void startSessionService(UserKeyRecord keyRecord,String password){
  CommCareSessionService ccService=new CommCareSessionService();
  ccService.createCipherPool();
  ccService.prepareStorage(keyRecord.unWrapKey(password),keyRecord);
  ccService.startSession(getUserFromDb(ccService,keyRecord),keyRecord);
  CommCareApplication._().setTestingService(ccService);
}",0.9865591397849462
142144,"@Override public void deliverResult(List<Entity<TreeReference>> entities,List<TreeReference> references,NodeEntityFactory factory){
  loader=null;
  Detail detail=session.getDetail(selectDatum.getShortDetail());
  int[] order=detail.getSortOrder();
  for (int i=0; i < detail.getFields().length; ++i) {
    String header=detail.getFields()[i].getHeader().evaluate();
    if (order.length == 0 && !""String_Node_Str"".equals(header)) {
      order=new int[]{i};
    }
  }
  ListView view=((ListView)this.findViewById(R.id.screen_entity_select_list));
  setupDivider(view);
  adapter=new EntityListAdapter(EntitySelectActivity.this,detail,references,entities,order,tts,factory);
  view.setAdapter(adapter);
  adapter.registerDataSetObserver(this.mListStateObserver);
  containerFragment.setData(adapter);
  if (!resuming && !mNoDetailMode && inAwesomeMode&& this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=selectDatum.getEntityFromID(asw.getEvaluationContext(),this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      displayReferenceAwesome(entity,adapter.getPosition(entity));
      updateSelectedItem(entity,true);
    }
  }
  findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  if (adapter != null && filterString != null && !""String_Node_Str"".equals(filterString)) {
    adapter.applyFilter(filterString);
  }
  if (inAwesomeMode) {
    updateSelectedItem(true);
  }
  this.startTimer();
  if (locationChangedWhileLoading) {
    loadEntities();
  }
}","@Override public void deliverResult(List<Entity<TreeReference>> entities,List<TreeReference> references,NodeEntityFactory factory){
  loader=null;
  Detail detail=session.getDetail(selectDatum.getShortDetail());
  int[] order=detail.getSortOrder();
  for (int i=0; i < detail.getFields().length; ++i) {
    String header=detail.getFields()[i].getHeader().evaluate();
    if (order.length == 0 && !""String_Node_Str"".equals(header)) {
      order=new int[]{i};
    }
  }
  ListView view=((ListView)this.findViewById(R.id.screen_entity_select_list));
  setupDivider(view);
  adapter=new EntityListAdapter(EntitySelectActivity.this,detail,references,entities,order,tts,factory);
  view.setAdapter(adapter);
  adapter.registerDataSetObserver(this.mListStateObserver);
  containerFragment.setData(adapter);
  if (!resuming && !mNoDetailMode && inAwesomeMode&& this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=selectDatum.getEntityFromID(asw.getEvaluationContext(),this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      displayReferenceAwesome(entity,adapter.getPosition(entity));
      updateSelectedItem(entity,true);
    }
  }
  findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  if (adapter != null && filterString != null && !""String_Node_Str"".equals(filterString)) {
    adapter.applyFilter(filterString);
  }
  if (inAwesomeMode) {
    updateSelectedItem(true);
  }
  this.startTimer();
  if (locationChangedWhileLoading) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    loadEntities();
    locationChangedWhileLoading=false;
  }
}",0.97216
142145,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    processBarcodeFetch(resultCode,intent);
  break;
case CALLOUT:
processCalloutResult(resultCode,intent);
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
AudioController.INSTANCE.releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
case LOCATION_REQUEST:
if (resultCode == RESULT_OK) {
hereFunctionHandler.setLocationString(FormEntryActivity.LOCATION_RESULT);
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    processBarcodeFetch(resultCode,intent);
  break;
case CALLOUT:
processCalloutResult(resultCode,intent);
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
AudioController.INSTANCE.releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
case LOCATION_REQUEST:
if (resultCode == RESULT_OK) {
hereFunctionHandler.setLocationString(intent.getStringExtra(FormEntryActivity.LOCATION_RESULT));
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9926774912448264
142146,"private void bindUserSessionService(final byte[] key,final UserKeyRecord record,final boolean restoreSession){
  mConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName className,    IBinder service){
      User user=null;
synchronized (serviceLock) {
        mCurrentServiceBindTimeout=MAX_BIND_TIMEOUT;
        mBoundService=((CommCareSessionService.LocalBinder)service).getService();
        mBoundService.prepareStorage(key,record);
        if (record != null) {
          for (          User u : getRawStorage(""String_Node_Str"",User.class,mBoundService.getUserDbHandle())) {
            if (record.getUsername().equals(u.getUsername())) {
              user=u;
            }
          }
        }
        mIsBound=true;
        mIsBinding=false;
        if (user != null) {
          mBoundService.startSession(user);
          if (restoreSession) {
            CommCareApplication.this.sessionWrapper=DevSessionRestorer.restoreSessionFromPrefs(getCommCarePlatform());
          }
 else {
            CommCareApplication.this.sessionWrapper=new AndroidSessionWrapper(CommCareApplication.this.getCommCarePlatform());
          }
          if (shouldAutoUpdate()) {
            startAutoUpdate();
          }
          syncPending=getPendingSyncStatus();
          doReportMaintenance(false);
          if (!User.TYPE_DEMO.equals(user.getUserType())) {
            getCurrentApp().getAppPreferences().edit().putString(CommCarePreferences.LAST_LOGGED_IN_USER,record.getUsername()).commit();
            PurgeStaleArchivedFormsTask.launchPurgeTask();
          }
        }
        cacheUserId();
        TimedStatsTracker.registerStartSession();
      }
    }
    public void onServiceDisconnected(    ComponentName className){
      mBoundService=null;
    }
  }
;
  startService(new Intent(this,CommCareSessionService.class));
  bindService(new Intent(this,CommCareSessionService.class),mConnection,Context.BIND_AUTO_CREATE);
  mIsBinding=true;
}","private void bindUserSessionService(final byte[] key,final UserKeyRecord record,final boolean restoreSession){
  mConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName className,    IBinder service){
      User user=null;
synchronized (serviceLock) {
        mCurrentServiceBindTimeout=MAX_BIND_TIMEOUT;
        mBoundService=((CommCareSessionService.LocalBinder)service).getService();
        mBoundService.prepareStorage(key,record);
        if (record != null) {
          for (          User u : getRawStorage(""String_Node_Str"",User.class,mBoundService.getUserDbHandle())) {
            if (record.getUsername().equals(u.getUsername())) {
              user=u;
            }
          }
        }
        mIsBound=true;
        mIsBinding=false;
        if (user != null) {
          mBoundService.startSession(user);
          if (restoreSession) {
            CommCareApplication.this.sessionWrapper=DevSessionRestorer.restoreSessionFromPrefs(getCommCarePlatform());
          }
 else {
            CommCareApplication.this.sessionWrapper=new AndroidSessionWrapper(CommCareApplication.this.getCommCarePlatform());
          }
          if (shouldAutoUpdate()) {
            startAutoUpdate();
          }
          syncPending=getPendingSyncStatus();
          doReportMaintenance(false);
          if (!User.TYPE_DEMO.equals(user.getUserType())) {
            getCurrentApp().getAppPreferences().edit().putString(CommCarePreferences.LAST_LOGGED_IN_USER,record.getUsername()).commit();
            PurgeStaleArchivedFormsTask.launchPurgeTask();
          }
        }
        refreshUserIdCache();
        TimedStatsTracker.registerStartSession();
      }
    }
    public void onServiceDisconnected(    ComponentName className){
      mBoundService=null;
    }
  }
;
  startService(new Intent(this,CommCareSessionService.class));
  bindService(new Intent(this,CommCareSessionService.class),mConnection,Context.BIND_AUTO_CREATE);
  mIsBinding=true;
}",0.9962245154794864
142147,"/** 
 * Add files of supported type to the multipart entity, encrypting xml files.
 * @param entity Add files to this
 * @param key    Used to encrypt xml files
 * @param files  The files to be added to the entity,
 * @return false if invalid xml files are found; otherwise true.
 * @throws FileNotFoundException Is raised when an xml doesn't exist on thefile-system
 */
private static boolean buildMultipartEntity(MultipartEntity entity,SecretKeySpec key,File[] files) throws FileNotFoundException {
  for (  File f : files) {
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      if (key != null) {
        if (!validateSubmissionFile(f)) {
          return false;
        }
        fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),ContentType.TEXT_XML);
      }
 else {
        fb=new FileBody(f,""String_Node_Str"");
      }
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (isSupportedMultimediaFile(f.getName())) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + f.getName());
    }
  }
  return true;
}","/** 
 * Add files of supported type to the multipart entity, encrypting xml files.
 * @param entity Add files to this
 * @param key    Used to encrypt xml files
 * @param files  The files to be added to the entity,
 * @return false if invalid xml files are found; otherwise true.
 * @throws FileNotFoundException Is raised when an xml doesn't exist on thefile-system
 */
private static boolean buildMultipartEntity(MultipartEntity entity,SecretKeySpec key,File[] files) throws FileNotFoundException {
  for (  File f : files) {
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      if (key != null) {
        if (!validateSubmissionFile(f)) {
          return false;
        }
        fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),ContentType.TEXT_XML);
      }
 else {
        fb=new FileBody(f,ContentType.TEXT_XML,f.getName());
      }
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (isSupportedMultimediaFile(f.getName())) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(TAG,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(TAG,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + f.getName());
    }
  }
  return true;
}",0.9896950578338592
142148,"/** 
 * Send data to the server, encrypting xml files and reporting progress along the way.
 * @param submissionNumber For progress reporting
 * @param folder           All supported files in this folder will beattached to the submission
 * @param key              For encrypting xml files
 * @param url              Submission server url
 * @param listener         Used to report progress to the calling task
 * @param user             Used to build the http post
 * @return Submission status code
 * @throws FileNotFoundException Is raised if xml file isn't found on thefile-system
 */
public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new UserStorageClosedException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=estimateUploadBytes(files);
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  if (files.length == 0) {
    Log.e(TAG,""String_Node_Str"");
    listener.cancel(true);
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  if (!buildMultipartEntity(entity,key,files)) {
    return RECORD_FAILURE;
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  return submitEntity(entity,url,generator);
}","/** 
 * Send data to the server, encrypting xml files and reporting progress along the way.
 * @param submissionNumber For progress reporting
 * @param folder           All supported files in this folder will beattached to the submission
 * @param key              For encrypting xml files
 * @param url              Submission server url
 * @param listener         Used to report progress to the calling task
 * @param user             Used to build the http post
 * @return Submission status code
 * @throws FileNotFoundException Is raised if xml file isn't found on thefile-system
 */
public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new UserStorageClosedException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=estimateUploadBytes(files);
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  if (files.length == 0) {
    Log.e(TAG,""String_Node_Str"");
    listener.cancel(true);
  }
  FileInputStream fileInputStream;
  for (  File f : files) {
    byte[] bFile=new byte[(int)f.length()];
    try {
      fileInputStream=new FileInputStream(f);
      fileInputStream.read(bFile);
      fileInputStream.close();
      for (int i=0; i < bFile.length; i++) {
        System.out.print((char)bFile[i]);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  if (!buildMultipartEntity(entity,key,files)) {
    return RECORD_FAILURE;
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  return submitEntity(entity,url,generator);
}",0.9057327896378028
142149,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  new AppDatabaseUpgrader().upgrade(db,oldVersion,newVersion);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  new AppDatabaseUpgrader(context).upgrade(db,oldVersion,newVersion);
}",0.9765886287625418
142150,"public SqlStorage(String table,Class<? extends T> ctype,AndroidDbHelper helper){
  this.table=table;
  this.ctype=ctype;
  this.helper=helper;
  try {
    T e=ctype.newInstance();
    if (e instanceof EncryptedModel) {
      em=(EncryptedModel)e;
    }
  }
 catch (  IllegalAccessException|InstantiationException ie) {
    ie.printStackTrace();
  }
}","public SqlStorage(String table,Class<? extends T> ctype,AndroidDbHelper helper){
  this.table=table;
  this.ctype=ctype;
  this.helper=helper;
  try {
    T e=ctype.newInstance();
    if (e instanceof EncryptedModel) {
      em=(EncryptedModel)e;
    }
  }
 catch (  IllegalAccessException ie) {
    ie.printStackTrace();
  }
catch (  InstantiationException ie) {
    ie.printStackTrace();
  }
}",0.9369127516778524
142151,"/** 
 * This is the entry point for processing a form. New transaction types should all be declared here. 
 */
public FormRecord process(FormRecord record) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  String form=record.getPath(c);
  final File f=new File(form);
  final Cipher decrypter=FormUploadUtil.getDecryptCipher((new SecretKeySpec(record.getAesKey(),""String_Node_Str"")));
  InputStream is=new CipherInputStream(new FileInputStream(f),decrypter);
  XmlFormRecordProcessor.process(new AndroidSandbox(CommCareApplication._()),is);
  Intent i=new Intent(""String_Node_Str"");
  this.c.sendBroadcast(i);
  return updateRecordStatus(record,FormRecord.STATUS_UNSENT);
}","/** 
 * This is the entry point for processing a form. New transaction types should all be declared here. 
 */
public FormRecord process(FormRecord record) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  String form=record.getPath(c);
  final File f=new File(form);
  final Cipher decrypter=FormUploadUtil.getDecryptCipher((new SecretKeySpec(record.getAesKey(),""String_Node_Str"")));
  InputStream is=new CipherInputStream(new FileInputStream(f),decrypter);
  AndroidTransactionParserFactory factory=new AndroidTransactionParserFactory(c,null);
  factory.initCaseParser();
  factory.initStockParser();
  XmlFormRecordProcessor.process(new AndroidSandbox(CommCareApplication._()),is,factory);
  Intent i=new Intent(""String_Node_Str"");
  this.c.sendBroadcast(i);
  return updateRecordStatus(record,FormRecord.STATUS_UNSENT);
}",0.905940594059406
142152,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  String title=extras.getString(GraphView.TITLE);
  if (title == null) {
    requestWindowFeature(Window.FEATURE_NO_TITLE);
  }
 else   if (title.length() > 0) {
    setTitle(title);
  }
  String html=extras.getString(GraphView.HTML);
  GraphView view=new GraphView(this,title,true);
  try {
    WebView view=(WebView)mView.getView(html);
    setContentView(view);
  }
 catch (  InvalidStateException e) {
    e.printStackTrace();
    finish();
  }
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  String title=extras.getString(GraphView.TITLE);
  if (title == null) {
    requestWindowFeature(Window.FEATURE_NO_TITLE);
  }
 else   if (title.length() > 0) {
    setTitle(title);
  }
  String html=extras.getString(GraphView.HTML);
  GraphView graphView=new GraphView(this,title,true);
  try {
    WebView webView=(WebView)graphView.getView(html);
    setContentView(webView);
  }
 catch (  InvalidStateException e) {
    e.printStackTrace();
    finish();
  }
}",0.6963309914129586
142153,"private static Vector<String> getHiddenButtons(){
  Vector<String> hiddenButtons=new Vector<>();
  Profile p=CommCareApplication._().getCommCarePlatform().getCurrentProfile();
  if ((p != null && !p.isFeatureActive(Profile.FEATURE_REVIEW)) || !CommCarePreferences.isSavedFormsEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  if (!CommCarePreferences.isIncompleteFormsEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  if (!DeveloperPreferences.isHomeReportEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  return hiddenButtons;
}","private static Vector<String> getHiddenButtons(){
  CommCareApp ccApp=CommCareApplication._().getCurrentApp();
  Vector<String> hiddenButtons=new Vector<>();
  if (ccApp == null) {
    hiddenButtons.addAll(Arrays.asList(HomeButtons.buttonNames));
    return hiddenButtons;
  }
  Profile p=ccApp.getCommCarePlatform().getCurrentProfile();
  if ((p != null && !p.isFeatureActive(Profile.FEATURE_REVIEW)) || !CommCarePreferences.isSavedFormsEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  if (!CommCarePreferences.isIncompleteFormsEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  if (!DeveloperPreferences.isHomeReportEnabled()) {
    hiddenButtons.add(""String_Node_Str"");
  }
  return hiddenButtons;
}",0.838258164852255
142154,"/** 
 * Parse given double time value into string acceptable to C3.
 * @param days The time, measured in days since the epoch.
 */
protected String convertTime(double days){
  mCalendar.setTimeInMillis((long)(days * 24 * 60* 60* 1000));
  String time=mCalendar.get(Calendar.YEAR) + ""String_Node_Str"" + mCalendar.get(Calendar.MONTH)+ ""String_Node_Str""+ mCalendar.get(Calendar.DAY_OF_MONTH)+ ""String_Node_Str""+ mCalendar.get(Calendar.HOUR_OF_DAY)+ ""String_Node_Str""+ mCalendar.get(Calendar.MINUTE)+ ""String_Node_Str""+ mCalendar.get(Calendar.SECOND);
  return time;
}","/** 
 * Parse given double time value into string acceptable to C3.
 * @param days The time, measured in days since the epoch.
 */
protected String convertTime(double days){
  Date d=new Date((long)(days * 24 * 60* 60* 1000));
  return mDateFormat.format(d);
}",0.5315533980582524
142155,"@Override public void afterTextChanged(Editable s){
  if (getSearchText() == s) {
    filterString=s.toString();
    if (adapter != null) {
      adapter.applyFilter(filterString);
    }
  }
  if (!isUsingActionBar()) {
    lastQueryString=filterString;
  }
}","@Override public void afterTextChanged(Editable incomingEditable){
  final String incomingString=incomingEditable.toString();
  final String currentSearchText=getSearchText().toString();
  if (incomingString.equals(currentSearchText)) {
    filterString=currentSearchText;
    if (adapter != null) {
      adapter.applyFilter(filterString);
    }
  }
  if (!isUsingActionBar()) {
    lastQueryString=filterString;
  }
}",0.6312684365781711
142156,"@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void onActionBarFound(MenuItem searchItem,SearchView searchView){
  EntitySelectActivity.this.searchItem=searchItem;
  EntitySelectActivity.this.searchView=searchView;
  if (lastQueryString != null && lastQueryString.length() > 0) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      searchItem.expandActionView();
    }
    searchView.setQuery(lastQueryString,false);
    if (BuildConfig.DEBUG) {
      Log.v(TAG,""String_Node_Str"" + lastQueryString + ""String_Node_Str"");
    }
    if (adapter != null) {
      adapter.applyFilter(lastQueryString == null ? ""String_Node_Str"" : lastQueryString);
    }
  }
  EntitySelectActivity.this.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      lastQueryString=newText;
      if (adapter != null) {
        adapter.applyFilter(newText);
      }
      return false;
    }
  }
);
}","@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void onActionBarFound(MenuItem searchItem,SearchView searchView){
  EntitySelectActivity.this.searchItem=searchItem;
  EntitySelectActivity.this.searchView=searchView;
  if (lastQueryString != null && lastQueryString.length() > 0) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
      searchItem.expandActionView();
    }
    searchView.setQuery(lastQueryString,false);
    if (BuildConfig.DEBUG) {
      Log.v(TAG,""String_Node_Str"" + lastQueryString + ""String_Node_Str"");
    }
    if (adapter != null) {
      adapter.applyFilter(lastQueryString == null ? ""String_Node_Str"" : lastQueryString);
    }
  }
  EntitySelectActivity.this.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      lastQueryString=newText;
      filterString=newText;
      if (adapter != null) {
        adapter.applyFilter(newText);
      }
      return false;
    }
  }
);
}",0.987353206865402
142157,"@Override public void deliverResult(List<Entity<TreeReference>> entities,List<TreeReference> references,NodeEntityFactory factory){
  loader=null;
  Detail detail=session.getDetail(selectDatum.getShortDetail());
  int[] order=detail.getSortOrder();
  for (int i=0; i < detail.getFields().length; ++i) {
    String header=detail.getFields()[i].getHeader().evaluate();
    if (order.length == 0 && !""String_Node_Str"".equals(header)) {
      order=new int[]{i};
    }
  }
  ListView view=((ListView)this.findViewById(R.id.screen_entity_select_list));
  setupDivider(view);
  adapter=new EntityListAdapter(EntitySelectActivity.this,detail,references,entities,order,tts,factory);
  view.setAdapter(adapter);
  adapter.registerDataSetObserver(this.mListStateObserver);
  findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  if (adapter != null && filterString != null && !""String_Node_Str"".equals(filterString)) {
    adapter.applyFilter(filterString);
  }
  if (inAwesomeMode) {
    updateSelectedItem(true);
  }
  rebuildMenus();
  this.startTimer();
}","@Override public void deliverResult(List<Entity<TreeReference>> entities,List<TreeReference> references,NodeEntityFactory factory){
  loader=null;
  Detail detail=session.getDetail(selectDatum.getShortDetail());
  int[] order=detail.getSortOrder();
  for (int i=0; i < detail.getFields().length; ++i) {
    String header=detail.getFields()[i].getHeader().evaluate();
    if (order.length == 0 && !""String_Node_Str"".equals(header)) {
      order=new int[]{i};
    }
  }
  ListView view=((ListView)this.findViewById(R.id.screen_entity_select_list));
  setupDivider(view);
  adapter=new EntityListAdapter(EntitySelectActivity.this,detail,references,entities,order,tts,factory);
  view.setAdapter(adapter);
  adapter.registerDataSetObserver(this.mListStateObserver);
  findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  if (adapter != null && filterString != null && !""String_Node_Str"".equals(filterString)) {
    adapter.applyFilter(filterString);
  }
  if (inAwesomeMode) {
    updateSelectedItem(true);
  }
  this.startTimer();
}",0.9914691943127962
142158,"@Override public boolean onQueryTextChange(String newText){
  lastQueryString=newText;
  if (adapter != null) {
    adapter.applyFilter(newText);
  }
  return false;
}","@Override public boolean onQueryTextChange(String newText){
  lastQueryString=newText;
  filterString=newText;
  if (adapter != null) {
    adapter.applyFilter(newText);
  }
  return false;
}",0.9329608938547486
142159,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SORT,MENU_SORT,Localization.get(""String_Node_Str"")).setIcon(android.R.drawable.ic_menu_sort_alphabetically);
  if (mMappingEnabled) {
    menu.add(0,MENU_MAP,MENU_MAP,Localization.get(""String_Node_Str"")).setIcon(android.R.drawable.ic_menu_mapmode);
  }
  Action action=shortSelect.getCustomAction();
  if (action != null) {
    ViewUtil.addDisplayToMenu(this,menu,MENU_ACTION,action.getDisplay().evaluate());
  }
  tryToAddActionSearchBar(this,menu,new ActionBarInstantiator(){
    @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void onActionBarFound(    MenuItem searchItem,    SearchView searchView){
      EntitySelectActivity.this.searchItem=searchItem;
      EntitySelectActivity.this.searchView=searchView;
      if (lastQueryString != null && lastQueryString.length() > 0) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          searchItem.expandActionView();
        }
        searchView.setQuery(lastQueryString,false);
        if (BuildConfig.DEBUG) {
          Log.v(TAG,""String_Node_Str"" + lastQueryString + ""String_Node_Str"");
        }
        if (adapter != null) {
          adapter.applyFilter(lastQueryString == null ? ""String_Node_Str"" : lastQueryString);
        }
      }
      EntitySelectActivity.this.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
        @Override public boolean onQueryTextSubmit(        String query){
          return true;
        }
        @Override public boolean onQueryTextChange(        String newText){
          lastQueryString=newText;
          if (adapter != null) {
            adapter.applyFilter(newText);
          }
          return false;
        }
      }
);
    }
  }
);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SORT,MENU_SORT,Localization.get(""String_Node_Str"")).setIcon(android.R.drawable.ic_menu_sort_alphabetically);
  if (mMappingEnabled) {
    menu.add(0,MENU_MAP,MENU_MAP,Localization.get(""String_Node_Str"")).setIcon(android.R.drawable.ic_menu_mapmode);
  }
  Action action=shortSelect.getCustomAction();
  if (action != null) {
    ViewUtil.addDisplayToMenu(this,menu,MENU_ACTION,action.getDisplay().evaluate());
  }
  tryToAddActionSearchBar(this,menu,new ActionBarInstantiator(){
    @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void onActionBarFound(    MenuItem searchItem,    SearchView searchView){
      EntitySelectActivity.this.searchItem=searchItem;
      EntitySelectActivity.this.searchView=searchView;
      if (lastQueryString != null && lastQueryString.length() > 0) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
          searchItem.expandActionView();
        }
        searchView.setQuery(lastQueryString,false);
        if (BuildConfig.DEBUG) {
          Log.v(TAG,""String_Node_Str"" + lastQueryString + ""String_Node_Str"");
        }
        if (adapter != null) {
          adapter.applyFilter(lastQueryString == null ? ""String_Node_Str"" : lastQueryString);
        }
      }
      EntitySelectActivity.this.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
        @Override public boolean onQueryTextSubmit(        String query){
          return true;
        }
        @Override public boolean onQueryTextChange(        String newText){
          lastQueryString=newText;
          filterString=newText;
          if (adapter != null) {
            adapter.applyFilter(newText);
          }
          return false;
        }
      }
);
    }
  }
);
  return true;
}",0.9913466738777718
142160,"private void showView(View next,AnimationType from,boolean animateLastView){
switch (from) {
case RIGHT:
    mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_in);
  mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_out);
break;
case LEFT:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_out);
break;
case FADE:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_out);
break;
}
if (mCurrentView != null) {
if (animateLastView) {
mCurrentView.startAnimation(mOutAnimation);
}
mViewPane.removeView(mCurrentView);
}
mInAnimation.setAnimationListener(this);
RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
mCurrentView=next;
mViewPane.addView(mCurrentView,lp);
mCurrentView.startAnimation(mInAnimation);
FrameLayout header=(FrameLayout)findViewById(R.id.form_entry_header);
TextView groupLabel=((TextView)header.findViewById(R.id.form_entry_group_label));
header.setVisibility(View.GONE);
groupLabel.setVisibility(View.GONE);
if (mCurrentView instanceof ODKView) {
((ODKView)mCurrentView).setFocus(this);
SpannableStringBuilder groupLabelText=((ODKView)mCurrentView).getGroupLabel();
if (groupLabelText != null && !groupLabelText.toString().trim().equals(""String_Node_Str"")) {
groupLabel.setText(groupLabelText);
header.setVisibility(View.VISIBLE);
groupLabel.setVisibility(View.VISIBLE);
}
}
 else {
InputMethodManager inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
inputManager.hideSoftInputFromWindow(mCurrentView.getWindowToken(),0);
}
}","private void showView(View next,AnimationType from,boolean animateLastView){
switch (from) {
case RIGHT:
    mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_in);
  mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_left_out);
break;
case LEFT:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.push_right_out);
break;
case FADE:
mInAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_in);
mOutAnimation=AnimationUtils.loadAnimation(this,R.anim.fade_out);
break;
}
if (mCurrentView != null) {
if (animateLastView) {
mCurrentView.startAnimation(mOutAnimation);
}
mViewPane.removeView(mCurrentView);
}
mInAnimation.setAnimationListener(this);
RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
mCurrentView=next;
mViewPane.addView(mCurrentView,lp);
mCurrentView.startAnimation(mInAnimation);
FrameLayout header=(FrameLayout)findViewById(R.id.form_entry_header);
TextView groupLabel=((TextView)header.findViewById(R.id.form_entry_group_label));
this.mGroupNativeVisibility=false;
this.updateGroupViewVisibility();
if (mCurrentView instanceof ODKView) {
((ODKView)mCurrentView).setFocus(this);
SpannableStringBuilder groupLabelText=((ODKView)mCurrentView).getGroupLabel();
if (groupLabelText != null && !groupLabelText.toString().trim().equals(""String_Node_Str"")) {
groupLabel.setText(groupLabelText);
this.mGroupNativeVisibility=true;
updateGroupViewVisibility();
}
}
 else {
InputMethodManager inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
inputManager.hideSoftInputFromWindow(mCurrentView.getWindowToken(),0);
}
}",0.9430563625798954
142161,"private void setupUI(){
  setContentView(R.layout.screen_form_entry);
  ImageButton nextButton=(ImageButton)this.findViewById(R.id.nav_btn_next);
  ImageButton prevButton=(ImageButton)this.findViewById(R.id.nav_btn_prev);
  nextButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!""String_Node_Str"".equals(v.getTag())) {
        FormEntryActivity.this.showNextView();
      }
 else {
        triggerUserFormComplete();
      }
    }
  }
);
  prevButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!""String_Node_Str"".equals(v.getTag())) {
        FormEntryActivity.this.showPreviousView(true);
      }
 else {
        FormEntryActivity.this.triggerUserQuitInput();
      }
    }
  }
);
  mViewPane=(ViewGroup)findViewById(R.id.form_entry_pane);
  isAnimatingSwipe=false;
  isDialogShowing=false;
  mCurrentView=null;
  mInAnimation=null;
  mOutAnimation=null;
  mGestureDetector=new GestureDetector(this);
}","private void setupUI(){
  setContentView(R.layout.screen_form_entry);
  ImageButton nextButton=(ImageButton)this.findViewById(R.id.nav_btn_next);
  ImageButton prevButton=(ImageButton)this.findViewById(R.id.nav_btn_prev);
  nextButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!""String_Node_Str"".equals(v.getTag())) {
        FormEntryActivity.this.showNextView();
      }
 else {
        triggerUserFormComplete();
      }
    }
  }
);
  prevButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!""String_Node_Str"".equals(v.getTag())) {
        FormEntryActivity.this.showPreviousView(true);
      }
 else {
        FormEntryActivity.this.triggerUserQuitInput();
      }
    }
  }
);
  mViewPane=(ViewGroup)findViewById(R.id.form_entry_pane);
  requestMajorLayoutUpdates();
  isAnimatingSwipe=false;
  isDialogShowing=false;
  mCurrentView=null;
  mInAnimation=null;
  mOutAnimation=null;
  mGestureDetector=new GestureDetector(this);
}",0.984958757884522
142162,"protected void setTextInputType(EditText mAnswer){
  if (secret) {
    mAnswer.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
    mAnswer.setTransformationMethod(PasswordTransformationMethod.getInstance());
  }
}","protected void setTextInputType(EditText mAnswer){
  if (secret) {
    mAnswer.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
    mAnswer.setTransformationMethod(PasswordTransformationMethod.getInstance());
  }
 else {
    mAnswer.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER);
  }
}",0.8666666666666667
142163,"public static boolean imageAboveTextEnabled(){
}","public static boolean imageAboveTextEnabled(){
  return doesPropertyMatch(ALTERNATE_QUESTION_LAYOUT_ENABLED,CommCarePreferences.NO,CommCarePreferences.YES);
}",0.4660194174757281
142164,"public static boolean isHomeReportEnabled(){
  SharedPreferences properties=CommCareApplication._().getCurrentApp().getAppPreferences();
  return properties.getString(HOME_REPORT_ENABLED,CommCarePreferences.NO).equals(CommCarePreferences.YES);
}","public static boolean isHomeReportEnabled(){
  return doesPropertyMatch(HOME_REPORT_ENABLED,CommCarePreferences.NO,CommCarePreferences.YES);
}",0.6770025839793282
142165,"/** 
 * Attempts to inflate an image from a CommCare UI definition source.
 * @param jrUri The image to inflate
 * @param boundingWidth the width of the container this image is being inflated into, to serveas a max width. If passed in as -1, gets set to screen width
 * @param boundingHeight the height fo the container this image is being inflated into, toserve as a max height. If passed in as -1, gets set to screen height
 * @return A bitmap if one could be created. Null if error occurs or the image is unavailable.
 */
public static Bitmap inflateDisplayImage(Context context,String jrUri,int boundingWidth,int boundingHeight){
  if (jrUri == null || jrUri.equals(""String_Node_Str"")) {
    return null;
  }
  try {
    String imageFilename=ReferenceManager._().DeriveReference(jrUri).getLocalURI();
    final File imageFile=new File(imageFilename);
    if (!imageFile.exists()) {
      return null;
    }
    Display display=((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    if (boundingHeight == -1) {
      boundingHeight=display.getHeight();
    }
    if (boundingWidth == -1) {
      boundingWidth=display.getWidth();
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + boundingHeight + ""String_Node_Str""+ boundingWidth);
    if (DeveloperPreferences.isSmartInflationEnabled()) {
      return getBitmapScaledForNativeDensity(context.getResources().getDisplayMetrics(),imageFile.getAbsolutePath(),boundingHeight,boundingWidth,DeveloperPreferences.getTargetInflationDensity());
    }
 else {
      return getBitmapScaledToContainer(imageFile.getAbsolutePath(),boundingHeight,boundingWidth);
    }
  }
 catch (  InvalidReferenceException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getReferenceString());
    e.printStackTrace();
  }
  return null;
}","public static Bitmap inflateDisplayImage(Context context,String jrUri){
  return inflateDisplayImage(context,jrUri,-1,-1);
}",0.089922480620155
142166,"/** 
 * Attempt to inflate an image source into a bitmap whose final dimensions are based upon 2 factors: 1) The application of a scaling factor, which is derived from the relative values of the target density declared by the app and the current device's actual density 2) The absolute dimensions of the bounding container into which this image is being inflated (may just be the screen dimens)
 * @return the bitmap, or null if none could be created from the source
 */
public static Bitmap getBitmapScaledForNativeDensity(DisplayMetrics metrics,String imageFilepath,int containerHeight,int containerWidth,int targetDensity){
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inJustDecodeBounds=true;
  o.inScaled=false;
  BitmapFactory.decodeFile(imageFilepath,o);
  int imageHeight=o.outHeight;
  int imageWidth=o.outWidth;
  Log.i(""String_Node_Str"",""String_Node_Str"" + imageHeight + ""String_Node_Str""+ imageWidth);
  double scaleFactor=computeInflationScaleFactor(metrics,targetDensity);
  int calculatedHeight=Math.round((float)(imageHeight * scaleFactor));
  int calculatedWidth=Math.round((float)(imageWidth * scaleFactor));
  Log.i(""String_Node_Str"",""String_Node_Str"" + calculatedHeight + ""String_Node_Str""+ calculatedWidth);
  int boundingHeight=Math.min(containerHeight,calculatedHeight);
  int boundingWidth=Math.min(containerWidth,calculatedWidth);
  if (boundingHeight < imageHeight || boundingWidth < imageWidth) {
    return getBitmapScaledToContainer(imageFilepath,boundingHeight,boundingWidth);
  }
 else {
    return attemptBoundedScaleUp(imageFilepath,calculatedHeight,calculatedWidth,containerHeight,containerWidth);
  }
}","/** 
 * Attempt to inflate an image source into a bitmap whose final dimensions are based upon 2 factors: 1) The application of a scaling factor, which is derived from the relative values of the target density declared by the app and the current device's actual density 2) The absolute dimensions of the bounding container into which this image is being inflated (may just be the screen dimens)
 * @return the bitmap, or null if none could be created from the source
 */
public static Bitmap getBitmapScaledForNativeDensity(DisplayMetrics metrics,String imageFilepath,int containerHeight,int containerWidth,int targetDensity){
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inJustDecodeBounds=true;
  o.inScaled=false;
  BitmapFactory.decodeFile(imageFilepath,o);
  int imageHeight=o.outHeight;
  int imageWidth=o.outWidth;
  Log.i(""String_Node_Str"",""String_Node_Str"" + imageHeight + ""String_Node_Str""+ imageWidth);
  double scaleFactor=computeInflationScaleFactor(metrics,targetDensity);
  int calculatedHeight=Math.round((float)(imageHeight * scaleFactor));
  int calculatedWidth=Math.round((float)(imageWidth * scaleFactor));
  Log.i(""String_Node_Str"",""String_Node_Str"" + calculatedHeight + ""String_Node_Str""+ calculatedWidth);
  if (containerHeight < imageHeight || calculatedHeight < imageHeight) {
    return getBitmapScaledDownExact(imageFilepath,imageHeight,imageWidth,calculatedHeight,calculatedWidth,containerHeight,containerWidth);
  }
 else {
    return attemptBoundedScaleUp(imageFilepath,calculatedHeight,calculatedWidth,containerHeight,containerWidth);
  }
}",0.8288009888751545
142167,"public static void setupPrototypeFactory(){
  LivePrototypeFactory prototypeFactory=new LivePrototypeFactory();
  PrototypeFactory.setStaticHasher(prototypeFactory);
  DbUtil.setDBUtilsPrototypeFactory(prototypeFactory);
}","public static void setupPrototypeFactory(){
  LivePrototypeFactory prototypeFactory=new LivePrototypeFactory();
  PrototypeFactory.setStaticHasher(prototypeFactory.getLiveHasher());
  DbUtil.setDBUtilsPrototypeFactory(prototypeFactory);
}",0.9652173913043478
142168,"@Override protected Integer doTaskBackground(Void... params){
  if (!CommCareSessionService.sessionAliveLock.tryLock()) {
    return UNKNOWN_FAILURE;
  }
  try {
    publishProgress(PROGRESS_STARTED);
    CommCareApp app=CommCareApplication._().getCurrentApp();
    SharedPreferences prefs=app.getAppPreferences();
    String keyServer=prefs.getString(""String_Node_Str"",null);
    mTotalItems=-1;
    mCurrentProgress=-1;
    boolean useExternalKeys=!(keyServer == null || keyServer.equals(""String_Node_Str""));
    boolean loginNeeded=true;
    boolean useRequestFlags=false;
    try {
      loginNeeded=!CommCareApplication._().getSession().isActive();
    }
 catch (    SessionUnavailableException sue) {
    }
    int responseError=UNKNOWN_FAILURE;
    prefs.edit().putLong(""String_Node_Str"",new Date().getTime()).commit();
    HttpRequestGenerator requestor=new HttpRequestGenerator(username,password);
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c,requestor){
      boolean publishedAuth=false;
      @Override public void reportProgress(      int progress){
        if (!publishedAuth) {
          DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
          publishedAuth=true;
        }
      }
    }
;
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
    long bytesRead=-1;
    UserKeyRecord ukr=null;
    try {
      if (loginNeeded) {
        if (!useExternalKeys) {
          SecretKey newKey=CryptUtil.generateSemiRandomKey();
          if (newKey == null) {
            this.publishProgress(PROGRESS_DONE);
            return UNKNOWN_FAILURE;
          }
          String sandboxId=PropertyUtils.genUUID().replace(""String_Node_Str"",""String_Node_Str"");
          ukr=new UserKeyRecord(username,UserKeyRecord.generatePwdHash(password),CryptUtil.wrapKey(newKey.getEncoded(),password),new Date(),new Date(Long.MAX_VALUE),sandboxId);
        }
 else {
          ukr=ManageKeyRecordTask.getCurrentValidRecord(app,username,password,true);
          if (ukr == null) {
            Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
            this.publishProgress(PROGRESS_DONE);
            return UNKNOWN_FAILURE;
          }
        }
        byte[] wrappedKey=CryptUtil.wrapKey(ukr.getEncryptedKey(),password);
        factory.initUserParser(wrappedKey);
      }
 else {
        factory.initUserParser(CommCareApplication._().getSession().getLoggedInUser().getWrappedKey());
        purgeCases();
        useRequestFlags=true;
      }
      this.publishProgress(PROGRESS_CLEANED);
      RemoteDataPullResponse pullResponse=dataPullRequester.makeDataPullRequest(this,requestor,server,useRequestFlags);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + pullResponse.responseCode);
      if (pullResponse.responseCode == 401) {
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        return AUTH_FAILED;
      }
 else       if (pullResponse.responseCode >= 200 && pullResponse.responseCode < 300) {
        if (loginNeeded) {
          CommCareApplication._().startUserSession(CryptUtil.unWrapKey(ukr.getEncryptedKey(),password),ukr);
          wasKeyLoggedIn=true;
        }
        this.publishProgress(PROGRESS_AUTHED,0);
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        try {
          BitCache cache=pullResponse.writeResponseToCache(c);
          InputStream cacheIn=cache.retrieveCache();
          String syncToken=readInput(cacheIn,factory);
          updateUserSyncToken(syncToken);
          Editor e=prefs.edit();
          e.putLong(""String_Node_Str"",new Date().getTime());
          e.commit();
          if (loginNeeded) {
            CommCareApplication._().getAppStorage(UserKeyRecord.class).write(ukr);
          }
          Intent i=new Intent(""String_Node_Str"");
          this.c.sendBroadcast(i);
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
          this.publishProgress(PROGRESS_DONE);
          return DOWNLOAD_SUCCESS;
        }
 catch (        InvalidStructureException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
          return BAD_DATA;
        }
catch (        XmlPullParserException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
          return BAD_DATA;
        }
catch (        UnfullfilledRequirementsException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
        }
catch (        IllegalStateException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
        }
catch (        RecordTooLargeException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
        }
      }
 else       if (pullResponse.responseCode == 412) {
        int returnCode=recover(requestor,factory);
        if (returnCode == PROGRESS_DONE) {
          this.publishProgress(PROGRESS_DONE);
          return DOWNLOAD_SUCCESS;
        }
 else         if (returnCode == PROGRESS_RECOVERY_FAIL_SAFE) {
          if (loginNeeded) {
            CommCareApplication._().releaseUserResourcesAndServices();
          }
          this.publishProgress(PROGRESS_DONE);
          return UNKNOWN_FAILURE;
        }
 else         if (returnCode == PROGRESS_RECOVERY_FAIL_BAD) {
          if (loginNeeded) {
            CommCareApplication._().releaseUserResourcesAndServices();
          }
          this.publishProgress(PROGRESS_DONE);
          return UNKNOWN_FAILURE;
        }
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
      }
 else       if (pullResponse.responseCode == 500) {
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        return SERVER_ERROR;
      }
    }
 catch (    SocketTimeoutException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=CONNECTION_TIMEOUT;
    }
catch (    ConnectTimeoutException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=CONNECTION_TIMEOUT;
    }
catch (    ClientProtocolException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
    }
catch (    UnknownHostException e) {
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=UNREACHABLE_HOST;
    }
catch (    IOException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
    }
catch (    SessionUnavailableException sue) {
      sue.printStackTrace();
    }
    if (loginNeeded) {
      CommCareApplication._().releaseUserResourcesAndServices();
    }
    this.publishProgress(PROGRESS_DONE);
    return responseError;
  }
  finally {
    CommCareSessionService.sessionAliveLock.unlock();
  }
}","@Override protected Integer doTaskBackground(Void... params){
  if (!CommCareSessionService.sessionAliveLock.tryLock()) {
    return UNKNOWN_FAILURE;
  }
  try {
    publishProgress(PROGRESS_STARTED);
    CommCareApp app=CommCareApplication._().getCurrentApp();
    SharedPreferences prefs=app.getAppPreferences();
    String keyServer=prefs.getString(""String_Node_Str"",null);
    mTotalItems=-1;
    mCurrentProgress=-1;
    boolean useExternalKeys=!(keyServer == null || keyServer.equals(""String_Node_Str""));
    boolean loginNeeded=true;
    boolean useRequestFlags=false;
    try {
      loginNeeded=!CommCareApplication._().getSession().isActive();
    }
 catch (    SessionUnavailableException sue) {
    }
    int responseError=UNKNOWN_FAILURE;
    prefs.edit().putLong(""String_Node_Str"",new Date().getTime()).commit();
    HttpRequestGenerator requestor=new HttpRequestGenerator(username,password);
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c,requestor){
      boolean publishedAuth=false;
      @Override public void reportProgress(      int progress){
        if (!publishedAuth) {
          DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
          publishedAuth=true;
        }
      }
    }
;
    Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
    long bytesRead=-1;
    UserKeyRecord ukr=null;
    try {
      if (loginNeeded) {
        if (!useExternalKeys) {
          SecretKey newKey=CryptUtil.generateSemiRandomKey();
          if (newKey == null) {
            this.publishProgress(PROGRESS_DONE);
            return UNKNOWN_FAILURE;
          }
          String sandboxId=PropertyUtils.genUUID().replace(""String_Node_Str"",""String_Node_Str"");
          ukr=new UserKeyRecord(username,UserKeyRecord.generatePwdHash(password),CryptUtil.wrapKey(newKey.getEncoded(),password),new Date(),new Date(Long.MAX_VALUE),sandboxId);
        }
 else {
          ukr=ManageKeyRecordTask.getCurrentValidRecord(app,username,password,true);
          if (ukr == null) {
            Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
            this.publishProgress(PROGRESS_DONE);
            return UNKNOWN_FAILURE;
          }
        }
        byte[] wrappedKey=CryptUtil.wrapKey(ukr.getEncryptedKey(),password);
        factory.initUserParser(wrappedKey);
      }
 else {
        factory.initUserParser(CommCareApplication._().getSession().getLoggedInUser().getWrappedKey());
        purgeCases();
        useRequestFlags=true;
      }
      this.publishProgress(PROGRESS_CLEANED);
      RemoteDataPullResponse pullResponse=dataPullRequester.makeDataPullRequest(this,requestor,server,useRequestFlags);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + pullResponse.responseCode);
      if (pullResponse.responseCode == 401) {
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        return AUTH_FAILED;
      }
 else       if (pullResponse.responseCode >= 200 && pullResponse.responseCode < 300) {
        if (loginNeeded) {
          CommCareApplication._().startUserSession(CryptUtil.unWrapKey(ukr.getEncryptedKey(),password),ukr);
          wasKeyLoggedIn=true;
        }
        this.publishProgress(PROGRESS_AUTHED,0);
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        try {
          BitCache cache=pullResponse.writeResponseToCache(c);
          InputStream cacheIn=cache.retrieveCache();
          String syncToken=readInput(cacheIn,factory);
          updateUserSyncToken(syncToken);
          Editor e=prefs.edit();
          e.putLong(""String_Node_Str"",new Date().getTime());
          e.commit();
          if (loginNeeded) {
            CommCareApplication._().getAppStorage(UserKeyRecord.class).write(ukr);
          }
          Intent i=new Intent(""String_Node_Str"");
          this.c.sendBroadcast(i);
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
          this.publishProgress(PROGRESS_DONE);
          return DOWNLOAD_SUCCESS;
        }
 catch (        InvalidStructureException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
          return BAD_DATA;
        }
catch (        XmlPullParserException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
          return BAD_DATA;
        }
catch (        UnfullfilledRequirementsException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
        }
catch (        IllegalStateException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
        }
catch (        RecordTooLargeException e) {
          e.printStackTrace();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
          return STORAGE_FULL;
        }
      }
 else       if (pullResponse.responseCode == 412) {
        int returnCode=recover(requestor,factory);
        if (returnCode == PROGRESS_DONE) {
          this.publishProgress(PROGRESS_DONE);
          return DOWNLOAD_SUCCESS;
        }
 else         if (returnCode == PROGRESS_RECOVERY_FAIL_SAFE) {
          if (loginNeeded) {
            CommCareApplication._().releaseUserResourcesAndServices();
          }
          this.publishProgress(PROGRESS_DONE);
          return UNKNOWN_FAILURE;
        }
 else         if (returnCode == PROGRESS_RECOVERY_FAIL_BAD) {
          if (loginNeeded) {
            CommCareApplication._().releaseUserResourcesAndServices();
          }
          this.publishProgress(PROGRESS_DONE);
          return UNKNOWN_FAILURE;
        }
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
      }
 else       if (pullResponse.responseCode == 500) {
        if (loginNeeded) {
          CommCareApplication._().releaseUserResourcesAndServices();
        }
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        return SERVER_ERROR;
      }
    }
 catch (    SocketTimeoutException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=CONNECTION_TIMEOUT;
    }
catch (    ConnectTimeoutException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=CONNECTION_TIMEOUT;
    }
catch (    ClientProtocolException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
    }
catch (    UnknownHostException e) {
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
      responseError=UNREACHABLE_HOST;
    }
catch (    IOException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
    }
catch (    SessionUnavailableException sue) {
      sue.printStackTrace();
    }
    if (loginNeeded) {
      CommCareApplication._().releaseUserResourcesAndServices();
    }
    this.publishProgress(PROGRESS_DONE);
    return responseError;
  }
  finally {
    CommCareSessionService.sessionAliveLock.unlock();
  }
}",0.9979078085982318
142169,"private String readInput(InputStream stream,CommCareTransactionParserFactory factory) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, SessionUnavailableException {
  DataModelPullParser parser;
  factory.initCaseParser();
  factory.initStockParser();
  Hashtable<String,String> formNamespaces=new Hashtable<String,String>();
  for (  String xmlns : CommCareApplication._().getCommCarePlatform().getInstalledForms()) {
    Cursor cur=c.getContentResolver().query(CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns),new String[]{FormsColumns.FORM_FILE_PATH},null,null,null);
    if (cur.moveToFirst()) {
      String path=cur.getString(cur.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      formNamespaces.put(xmlns,path);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns));
    }
    cur.close();
  }
  factory.initFormInstanceParser(formNamespaces);
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  try {
    db.beginTransaction();
    parser=new DataModelPullParser(stream,factory,this);
    parser.parse();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  return factory.getSyncToken();
}","private String readInput(InputStream stream,CommCareTransactionParserFactory factory) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, SessionUnavailableException {
  DataModelPullParser parser;
  factory.initCaseParser();
  factory.initStockParser();
  Hashtable<String,String> formNamespaces=new Hashtable<String,String>();
  for (  String xmlns : CommCareApplication._().getCommCarePlatform().getInstalledForms()) {
    Cursor cur=c.getContentResolver().query(CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns),new String[]{FormsColumns.FORM_FILE_PATH},null,null,null);
    if (cur.moveToFirst()) {
      String path=cur.getString(cur.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      formNamespaces.put(xmlns,path);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns));
    }
    cur.close();
  }
  factory.initFormInstanceParser(formNamespaces);
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  try {
    db.beginTransaction();
    parser=new DataModelPullParser(stream,factory,true,false,this);
    parser.parse();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  return factory.getSyncToken();
}",0.995803128576879
142170,"@Override protected boolean onForwardSwipe(){
  int event=mFormController.getEvent(mFormController.getNextFormIndex(mFormController.getFormIndex(),true));
  if (event != FormEntryController.EVENT_END_OF_FORM) {
    showNextView();
    return true;
  }
  return false;
}","@Override protected boolean onForwardSwipe(){
  ImageButton nextButton=(ImageButton)this.findViewById(R.id.nav_btn_next);
  if (nextButton.getTag().equals(NAV_STATE_NEXT)) {
    showNextView();
    return true;
  }
  return false;
}",0.2075848303393213
142171,"/** 
 * Update progress bar's max and value, and the various buttons and navigation cues associated with navigation
 * @param view ODKView to update
 */
public void updateNavigationCues(View view){
  updateFloatingLabels(view);
  PreferencesActivity.ProgressBarMode mode=PreferencesActivity.getProgressBarMode(activity);
  if (mode == PreferencesActivity.ProgressBarMode.None) {
    return;
  }
  FormNavigationController.NavigationDetails details;
  try {
    details=FormNavigationController.calculateNavigationStatus(mFormController,mCurrentView);
  }
 catch (  XPathTypeMismatchException e) {
    Logger.exception(e);
    CommCareActivity.createErrorDialog(activity,e.getMessage(),true);
    return;
  }
  if (mode == PreferencesActivity.ProgressBarMode.ProgressOnly && view instanceof ODKView) {
    ((ODKView)view).updateProgressBar(details.completedQuestions,details.totalQuestions);
    return;
  }
  ProgressBar progressBar=(ProgressBar)activity.findViewById(R.id.nav_prog_bar);
  ImageButton nextButton=(ImageButton)activity.findViewById(R.id.nav_btn_next);
  ImageButton prevButton=(ImageButton)activity.findViewById(R.id.nav_btn_prev);
  if (!details.relevantBeforeCurrentScreen) {
    prevButton.setImageResource(R.drawable.icon_close_darkwarm);
    prevButton.setTag(""String_Node_Str"");
  }
 else {
    prevButton.setImageResource(R.drawable.icon_chevron_left_brand);
    prevButton.setTag(""String_Node_Str"");
  }
  Rect bounds=progressBar.getProgressDrawable().getBounds();
  Log.i(""String_Node_Str"",""String_Node_Str"" + details.totalQuestions + ""String_Node_Str""+ details.completedQuestions);
  progressBar.setMax(details.totalQuestions);
  if (details.relevantAfterCurrentScreen == 0 && (details.requiredOnScreen == details.answeredOnScreen || details.requiredOnScreen < 1)) {
    nextButton.setImageResource(R.drawable.icon_chevron_right_attnpos);
    nextButton.setTag(""String_Node_Str"");
    progressBar.setProgressDrawable(activity.getResources().getDrawable(R.drawable.progressbar_full));
    Log.i(""String_Node_Str"",""String_Node_Str"");
    progressBar.setProgress(details.totalQuestions);
  }
 else {
    nextButton.setImageResource(R.drawable.icon_chevron_right_brand);
    nextButton.setTag(""String_Node_Str"");
    progressBar.setProgressDrawable(activity.getResources().getDrawable(R.drawable.progressbar_modern));
    progressBar.setProgress(details.completedQuestions);
  }
  progressBar.getProgressDrawable().setBounds(bounds);
}","/** 
 * Update progress bar's max and value, and the various buttons and navigation cues associated with navigation
 * @param view ODKView to update
 */
public void updateNavigationCues(View view){
  updateFloatingLabels(view);
  PreferencesActivity.ProgressBarMode mode=PreferencesActivity.getProgressBarMode(activity);
  if (mode == PreferencesActivity.ProgressBarMode.None) {
    return;
  }
  FormNavigationController.NavigationDetails details;
  try {
    details=FormNavigationController.calculateNavigationStatus(mFormController,mCurrentView);
  }
 catch (  XPathTypeMismatchException e) {
    Logger.exception(e);
    CommCareActivity.createErrorDialog(activity,e.getMessage(),true);
    return;
  }
  if (mode == PreferencesActivity.ProgressBarMode.ProgressOnly && view instanceof ODKView) {
    ((ODKView)view).updateProgressBar(details.completedQuestions,details.totalQuestions);
    return;
  }
  ProgressBar progressBar=(ProgressBar)activity.findViewById(R.id.nav_prog_bar);
  ImageButton nextButton=(ImageButton)activity.findViewById(R.id.nav_btn_next);
  ImageButton prevButton=(ImageButton)activity.findViewById(R.id.nav_btn_prev);
  if (!details.relevantBeforeCurrentScreen) {
    prevButton.setImageResource(R.drawable.icon_close_darkwarm);
    prevButton.setTag(""String_Node_Str"");
  }
 else {
    prevButton.setImageResource(R.drawable.icon_chevron_left_brand);
    prevButton.setTag(""String_Node_Str"");
  }
  Rect bounds=progressBar.getProgressDrawable().getBounds();
  Log.i(""String_Node_Str"",""String_Node_Str"" + details.totalQuestions + ""String_Node_Str""+ details.completedQuestions);
  progressBar.setMax(details.totalQuestions);
  if (details.relevantAfterCurrentScreen == 0 && (details.requiredOnScreen == details.answeredOnScreen || details.requiredOnScreen < 1)) {
    nextButton.setImageResource(R.drawable.icon_chevron_right_attnpos);
    nextButton.setTag(""String_Node_Str"");
    progressBar.setProgressDrawable(activity.getResources().getDrawable(R.drawable.progressbar_full));
    Log.i(""String_Node_Str"",""String_Node_Str"");
    progressBar.setProgress(details.totalQuestions);
  }
 else {
    nextButton.setImageResource(R.drawable.icon_chevron_right_brand);
    nextButton.setTag(FormEntryActivity.NAV_STATE_NEXT);
    progressBar.setProgressDrawable(activity.getResources().getDrawable(R.drawable.progressbar_modern));
    progressBar.setProgress(details.completedQuestions);
  }
  progressBar.getProgressDrawable().setBounds(bounds);
}",0.9912761209170216
142172,"private void showNextView(boolean resuming){
  if (currentPromptIsQuestion()) {
    if (!saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS)) {
      return;
    }
  }
  if (mFormController.getEvent() != FormEntryController.EVENT_END_OF_FORM) {
    int event;
    try {
      group_skip:       do {
        event=mFormController.stepToNextEvent(FormController.STEP_OVER_GROUP);
switch (event) {
case FormEntryController.EVENT_QUESTION:
case FormEntryController.EVENT_END_OF_FORM:
          View next=createView();
        if (!resuming) {
          showView(next,AnimationType.RIGHT);
        }
 else {
          showView(next,AnimationType.FADE,false);
        }
      break group_skip;
case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
    createRepeatDialog();
  break group_skip;
case FormEntryController.EVENT_GROUP:
if (mFormController.indexIsInFieldList() && mFormController.getQuestionPrompts().length != 0) {
  View nextGroupView=createView();
  if (!resuming) {
    showView(nextGroupView,AnimationType.RIGHT);
  }
 else {
    showView(nextGroupView,AnimationType.FADE,false);
  }
  break group_skip;
}
break;
case FormEntryController.EVENT_REPEAT:
Log.i(TAG,""String_Node_Str"" + mFormController.getFormIndex().getReference());
break;
case FormEntryController.EVENT_REPEAT_JUNCTURE:
Log.i(TAG,""String_Node_Str"" + mFormController.getFormIndex().getReference());
break;
default :
Log.w(TAG,""String_Node_Str"");
break;
}
}
 while (event != FormEntryController.EVENT_END_OF_FORM);
}
 catch (XPathTypeMismatchException e) {
Logger.exception(e);
CommCareActivity.createErrorDialog(this,e.getMessage(),EXIT);
}
}
 else {
mBeenSwiped=false;
}
}","private void showNextView(boolean resuming){
  if (currentPromptIsQuestion()) {
    if (!saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS)) {
      return;
    }
  }
  if (mFormController.getEvent() != FormEntryController.EVENT_END_OF_FORM) {
    int event;
    try {
      group_skip:       do {
        event=mFormController.stepToNextEvent(FormController.STEP_OVER_GROUP);
switch (event) {
case FormEntryController.EVENT_QUESTION:
          View next=createView();
        if (!resuming) {
          showView(next,AnimationType.RIGHT);
        }
 else {
          showView(next,AnimationType.FADE,false);
        }
      break group_skip;
case FormEntryController.EVENT_END_OF_FORM:
    Logger.log(AndroidLogger.SOFT_ASSERT,""String_Node_Str"");
  showPreviousView(false);
break group_skip;
case FormEntryController.EVENT_PROMPT_NEW_REPEAT:
createRepeatDialog();
break group_skip;
case FormEntryController.EVENT_GROUP:
if (mFormController.indexIsInFieldList() && mFormController.getQuestionPrompts().length != 0) {
View nextGroupView=createView();
if (!resuming) {
showView(nextGroupView,AnimationType.RIGHT);
}
 else {
showView(nextGroupView,AnimationType.FADE,false);
}
break group_skip;
}
break;
case FormEntryController.EVENT_REPEAT:
Log.i(TAG,""String_Node_Str"" + mFormController.getFormIndex().getReference());
break;
case FormEntryController.EVENT_REPEAT_JUNCTURE:
Log.i(TAG,""String_Node_Str"" + mFormController.getFormIndex().getReference());
break;
default :
Log.w(TAG,""String_Node_Str"");
break;
}
}
 while (event != FormEntryController.EVENT_END_OF_FORM);
}
 catch (XPathTypeMismatchException e) {
Logger.exception(e);
CommCareActivity.createErrorDialog(this,e.getMessage(),EXIT);
}
}
 else {
mBeenSwiped=false;
}
}",0.851455733808675
142173,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void setColor(int backgroundColor){
  ColorDrawable colorDrawable=new ColorDrawable(backgroundColor);
  ColorDrawable disabledColor=new ColorDrawable(getResources().getColor(R.color.grey));
  int color=ViewUtil.getColorDrawableColor(colorDrawable);
  float[] hsvOutput=new float[3];
  Color.colorToHSV(color,hsvOutput);
  hsvOutput[2]=(float)(hsvOutput[2] / 1.5);
  int selectedColor=Color.HSVToColor(hsvOutput);
  ColorDrawable pressedBackground=new ColorDrawable(selectedColor);
  StateListDrawable sld=new StateListDrawable();
  sld.addState(new int[]{android.R.attr.state_enabled},colorDrawable);
  sld.addState(new int[]{android.R.attr.state_pressed},pressedBackground);
  sld.addState(StateSet.WILD_CARD,disabledColor);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    this.setBackground(sld);
  }
 else {
    this.setBackgroundDrawable(sld);
  }
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void setColor(int backgroundColor){
  ColorDrawable colorDrawable=new ColorDrawable(backgroundColor);
  ColorDrawable disabledColor=new ColorDrawable(getResources().getColor(R.color.grey));
  int color=ViewUtil.getColorDrawableColor(colorDrawable);
  float[] hsvOutput=new float[3];
  Color.colorToHSV(color,hsvOutput);
  hsvOutput[2]=(float)(hsvOutput[2] / 1.5);
  int selectedColor=Color.HSVToColor(hsvOutput);
  ColorDrawable pressedBackground=new ColorDrawable(selectedColor);
  StateListDrawable sld=new StateListDrawable();
  sld.addState(new int[]{-android.R.attr.state_enabled},disabledColor);
  sld.addState(new int[]{android.R.attr.state_pressed},pressedBackground);
  sld.addState(StateSet.WILD_CARD,colorDrawable);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    this.setBackground(sld);
  }
 else {
    this.setBackgroundDrawable(sld);
  }
}",0.9713668287412208
142174,"@Override public void onCreate(){
  super.onCreate();
  StethoInitializer.initStetho(this);
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  AndroidUtil.initializeStaticHandlers();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  SessionUnavailableException|StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  if (dbState != STATE_MIGRATION_FAILED && dbState != STATE_MIGRATION_QUESTIONABLE) {
    initializeAppResourcesOnStartup();
  }
  ACRAUtil.initACRA(this);
}","@Override public void onCreate(){
  super.onCreate();
  StethoInitializer.initStetho(this);
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  AndroidUtil.initializeStaticHandlers();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  SessionUnavailableException|StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  if (dbState != STATE_MIGRATION_FAILED && dbState != STATE_MIGRATION_QUESTIONABLE) {
    initializeAnAppOnStartup();
  }
  ACRAUtil.initACRA(this);
}",0.994011976047904
142175,"public static Bitmap getBitmapScaledToDisplay(File f,int screenHeight,int screenWidth){
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(f.getAbsolutePath(),o);
  int heightScale=o.outHeight / screenHeight;
  int widthScale=o.outWidth / screenWidth;
  int scale=Math.max(widthScale,heightScale);
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inSampleSize=scale;
  Bitmap b=BitmapFactory.decodeFile(f.getAbsolutePath(),options);
  if (b != null) {
    Log.i(t,""String_Node_Str"" + screenHeight + ""String_Node_Str""+ screenWidth+ ""String_Node_Str""+ scale+ ""String_Node_Str""+ b.getHeight()+ ""String_Node_Str""+ b.getWidth());
  }
  return b;
}","public static Bitmap getBitmapScaledToDisplay(File f,int screenHeight,int screenWidth){
  BitmapFactory.Options o=new BitmapFactory.Options();
  o.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(f.getAbsolutePath(),o);
  int imageHeight=o.outHeight;
  int imageWidth=o.outWidth;
  int heightScale=Math.round((float)imageHeight / screenHeight);
  int widthScale=Math.round((float)imageWidth / screenWidth);
  int scale=Math.max(widthScale,heightScale);
  if (scale == 0) {
    scale=1;
  }
  return performSafeScaleDown(f,scale);
}",0.5421303656597775
142176,"private View findAndLoadCaseTile(final Activity activity){
  final View holder=LayoutInflater.from(activity).inflate(R.layout.com_tile_holder,null);
  final Pair<View,TreeReference> tileData=this.loadTile(activity);
  View tile=tileData == null ? null : tileData.first;
  if (tile == null) {
    return null;
  }
  final String inlineDetail=(String)tile.getTag();
  ((ViewGroup)holder.findViewById(R.id.com_tile_holder_frame)).addView(tile,LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  final ImageButton infoButton=((ImageButton)holder.findViewById(R.id.com_tile_holder_btn_open));
  OnClickListener toggleButtonClickListener=new OnClickListener(){
    private boolean isClosed=true;
    @Override public void onClick(    View v){
      if (isClosed) {
        if (mInternalDetailView == null) {
          mInternalDetailView=(TabbedDetailView)holder.findViewById(R.id.com_tile_holder_detail_frame);
          mInternalDetailView.setRoot(mInternalDetailView);
          AndroidSessionWrapper asw=CommCareApplication._().getCurrentSessionWrapper();
          CommCareSession session=asw.getSession();
          NodeEntityFactory factory=new NodeEntityFactory(session.getDetail(inlineDetail),session.getEvaluationContext(new CommCareInstanceInitializer(session)));
          Detail detail=factory.getDetail();
          mInternalDetailView.setDetail(detail);
          mInternalDetailView.refresh(factory.getDetail(),tileData.second,0,false);
        }
        infoButton.setImageResource(R.drawable.icon_info_fill_brandbg);
        expand(activity,holder.findViewById(R.id.com_tile_holder_detail_master));
        isClosed=false;
      }
 else {
        infoButton.setImageResource(R.drawable.icon_info_outline_brandbg);
        collapse(holder.findViewById(R.id.com_tile_holder_detail_master),new Runnable(){
          @Override public void run(){
          }
        }
);
        isClosed=true;
      }
    }
  }
;
  infoButton.setOnClickListener(toggleButtonClickListener);
  return holder;
}","private View findAndLoadCaseTile(final Activity activity){
  final View holder=LayoutInflater.from(activity).inflate(R.layout.com_tile_holder,null);
  final Pair<View,TreeReference> tileData=this.loadTile(activity);
  View tile=tileData == null ? null : tileData.first;
  if (tile == null) {
    return null;
  }
  final String inlineDetail=(String)tile.getTag();
  ((ViewGroup)holder.findViewById(R.id.com_tile_holder_frame)).addView(tile,LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  final ImageButton infoButton=((ImageButton)holder.findViewById(R.id.com_tile_holder_btn_open));
  Detail contextDetail=CommCareApplication._().getCurrentSessionWrapper().getSession().getDetail(inlineDetail);
  if (contextDetail == null) {
    infoButton.setVisibility(View.GONE);
  }
  OnClickListener toggleButtonClickListener=new OnClickListener(){
    private boolean isClosed=true;
    @Override public void onClick(    View v){
      if (isClosed) {
        if (mInternalDetailView == null) {
          mInternalDetailView=(TabbedDetailView)holder.findViewById(R.id.com_tile_holder_detail_frame);
          mInternalDetailView.setRoot(mInternalDetailView);
          AndroidSessionWrapper asw=CommCareApplication._().getCurrentSessionWrapper();
          CommCareSession session=asw.getSession();
          NodeEntityFactory factory=new NodeEntityFactory(session.getDetail(inlineDetail),session.getEvaluationContext(new CommCareInstanceInitializer(session)));
          Detail detail=factory.getDetail();
          mInternalDetailView.setDetail(detail);
          mInternalDetailView.refresh(factory.getDetail(),tileData.second,0,false);
        }
        infoButton.setImageResource(R.drawable.icon_info_fill_brandbg);
        expand(activity,holder.findViewById(R.id.com_tile_holder_detail_master));
        isClosed=false;
      }
 else {
        infoButton.setImageResource(R.drawable.icon_info_outline_brandbg);
        collapse(holder.findViewById(R.id.com_tile_holder_detail_master),new Runnable(){
          @Override public void run(){
          }
        }
);
        isClosed=true;
      }
    }
  }
;
  infoButton.setOnClickListener(toggleButtonClickListener);
  return holder;
}",0.9551954242135366
142177,"@Override public IAnswerData getAnswer(){
  mDatePicker.clearFocus();
  DateTime ldt=new DateTime(mDatePicker.getYear(),mDatePicker.getMonth() + 1,mDatePicker.getDayOfMonth(),0,0);
  return new DateData(ldt.toDate());
}","@Override public IAnswerData getAnswer(){
  mDatePicker.clearFocus();
  LocalDate ldt=new LocalDate(mDatePicker.getYear(),mDatePicker.getMonth() + 1,mDatePicker.getDayOfMonth());
  return new DateData(ldt.toDate());
}",0.9220183486238532
142178,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!isTaskRoot()) {
    Intent intent=getIntent();
    String action=intent.getAction();
    if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) && action != null && action.equals(Intent.ACTION_MAIN)) {
      finish();
      return;
    }
  }
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  ACRAUtil.registerAppData();
  setContentView((Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) ? R.layout.mainnew_modern_v10 : R.layout.mainnew_modern);
  adapter=new HomeScreenAdapter(this);
  final View topBanner=View.inflate(this,R.layout.grid_header_top_banner,null);
  this.topBannerImageView=(ImageView)topBanner.findViewById(R.id.main_top_banner);
  final View grid=findViewById(R.id.home_gridview_buttons);
  if (BuildConfig.DEBUG) {
    Log.v(TAG,""String_Node_Str"" + grid + ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str""+ grid.getTag());
  }
  if (grid instanceof StaggeredGridView) {
    newGridView=(StaggeredGridView)grid;
    newGridView.addHeaderView(topBanner);
    newGridView.setAdapter(adapter);
  }
 else {
    gridView=(GridViewWithHeaderAndFooter)grid;
    gridView.addHeaderView(topBanner);
    gridView.setAdapter(adapter);
  }
  if (!(((Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) && newGridView != null) || ((Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD_MR1) && gridView != null))) {
    Log.v(TAG,""String_Node_Str"" + grid + ""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      throw new AssertionError(""String_Node_Str"" + grid + ""String_Node_Str"");
    }
  }
  grid.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
      if (adapter.getItem(0) == null) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        grid.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
 else {
        grid.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
      grid.requestLayout();
      adapter.notifyDataSetChanged();
      configUi();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!isTaskRoot()) {
    Intent intent=getIntent();
    String action=intent.getAction();
    if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) && action != null && action.equals(Intent.ACTION_MAIN)) {
      finish();
      return;
    }
  }
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  ACRAUtil.registerAppData();
  setContentView((Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) ? R.layout.mainnew_modern_v10 : R.layout.mainnew_modern);
  adapter=new HomeScreenAdapter(this);
  final View topBanner=View.inflate(this,R.layout.grid_header_top_banner,null);
  this.topBannerImageView=(ImageView)topBanner.findViewById(R.id.main_top_banner);
  final View grid=findViewById(R.id.home_gridview_buttons);
  if (BuildConfig.DEBUG) {
    Log.v(TAG,""String_Node_Str"" + grid + ""String_Node_Str""+ Build.VERSION.SDK_INT+ ""String_Node_Str""+ grid.getTag());
  }
  if (grid instanceof StaggeredGridView) {
    newGridView=(StaggeredGridView)grid;
    newGridView.addHeaderView(topBanner);
    newGridView.setAdapter(adapter);
  }
 else {
    gridView=(GridViewWithHeaderAndFooter)grid;
    gridView.addHeaderView(topBanner);
    gridView.setAdapter(adapter);
  }
  if (!(((Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) && newGridView != null) || ((Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD_MR1) && gridView != null))) {
    Log.v(TAG,""String_Node_Str"" + grid + ""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      throw new AssertionError(""String_Node_Str"" + grid + ""String_Node_Str"");
    }
  }
  grid.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
      if (adapter.getItem(0) == null) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
        grid.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
 else {
        grid.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
      grid.requestLayout();
      adapter.notifyDataSetChanged();
      configUi();
    }
  }
);
}",0.9956521739130436
142179,"public void setAVT(TextView text,String audioURI,String imageURI,final String videoURI,final String bigImageURI,final String qrCodeContent){
  mView_Text=text;
  RelativeLayout.LayoutParams textParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams audioParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams imageParams=new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  imageParams.addRule(CENTER_IN_PARENT);
  RelativeLayout.LayoutParams videoParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams topPaneParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout topPane=new RelativeLayout(this.getContext());
  topPane.setId(2342134);
  this.addView(topPane,topPaneParams);
  if (audioURI != null) {
    mAudioButton=new AudioButton(getContext(),audioURI,true);
    mAudioButton.setId(3245345);
  }
  if (videoURI != null) {
    mVideoButton=new ImageButton(getContext());
    mVideoButton.setImageResource(android.R.drawable.ic_media_play);
    mVideoButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        String videoFilename=""String_Node_Str"";
        try {
          videoFilename=ReferenceManager._().DeriveReference(videoURI).getLocalURI();
        }
 catch (        InvalidReferenceException e) {
          Log.e(t,""String_Node_Str"");
          e.printStackTrace();
        }
        File videoFile=new File(videoFilename);
        if (!videoFile.exists()) {
          String errorMsg=getContext().getString(R.string.file_missing,videoFilename);
          Log.e(t,errorMsg);
          Toast.makeText(getContext(),errorMsg,Toast.LENGTH_LONG).show();
          return;
        }
        Intent i=new Intent(""String_Node_Str"");
        i.setDataAndType(Uri.fromFile(videoFile),""String_Node_Str"");
        try {
          String uri=Uri.fromFile(videoFile).getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
          Logger.log(""String_Node_Str"",""String_Node_Str"" + uri);
          getContext().startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(getContext(),getContext().getString(R.string.activity_not_found,""String_Node_Str""),Toast.LENGTH_SHORT).show();
        }
      }
    }
);
    mVideoButton.setId(234982340);
  }
  if (mAudioButton != null && mVideoButton == null) {
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
    topPane.addView(mAudioButton,audioParams);
  }
 else   if (mAudioButton == null && mVideoButton != null) {
    videoParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mVideoButton.getId());
    topPane.addView(mVideoButton,videoParams);
  }
 else   if (mAudioButton != null && mVideoButton != null) {
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
    videoParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    videoParams.addRule(RelativeLayout.BELOW,mAudioButton.getId());
    topPane.addView(mAudioButton,audioParams);
    topPane.addView(mVideoButton,videoParams);
  }
 else {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
  }
  boolean textVisible=(mView_Text.getVisibility() != GONE);
  if (textVisible) {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    topPane.addView(mView_Text,textParams);
  }
  String errorMsg=null;
  View imageView=null;
  if (qrCodeContent != null) {
    Bitmap image;
    Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    int screenWidth=display.getWidth();
    int screenHeight=display.getHeight();
    int minimumDim=Math.min(screenWidth,screenHeight);
    try {
      QRCodeEncoder qrCodeEncoder=new QRCodeEncoder(qrCodeContent,minimumDim);
      image=qrCodeEncoder.encodeAsBitmap();
      mImageView=new ResizingImageView(getContext());
      mImageView.setPadding(10,10,10,10);
      mImageView.setAdjustViewBounds(true);
      mImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
      mImageView.setImageBitmap(image);
      mImageView.setId(23423534);
      imageView=mImageView;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (imageURI != null) {
    try {
      DisplayMetrics metrics=this.getContext().getResources().getDisplayMetrics();
      int maxWidth=metrics.widthPixels;
      int maxHeight=metrics.heightPixels;
      if (mView_Text != null) {
        maxHeight=maxHeight - mView_Text.getHeight();
      }
      if (mVideoButton != null) {
        maxHeight=maxHeight - mVideoButton.getHeight();
      }
 else       if (mAudioButton != null) {
        maxHeight=maxHeight - mAudioButton.getHeight();
      }
      maxHeight=(2 * maxHeight) / 3;
      final String imageFilename=ReferenceManager._().DeriveReference(imageURI).getLocalURI();
      final File imageFile=new File(imageFilename);
      if (imageFile.exists()) {
        Bitmap b=null;
        try {
          Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
          int screenWidth=display.getWidth();
          int screenHeight=display.getHeight();
          b=FileUtils.getBitmapScaledToDisplay(imageFile,screenHeight,screenWidth);
        }
 catch (        OutOfMemoryError e) {
          errorMsg=""String_Node_Str"" + e.getMessage();
        }
        if (b != null) {
          mImageView=new ResizingImageView(getContext(),imageURI,bigImageURI);
          mImageView.setPadding(10,10,10,10);
          mImageView.setAdjustViewBounds(true);
          if (ResizingImageView.resizeMethod.equals(""String_Node_Str"") || ResizingImageView.resizeMethod.equals(""String_Node_Str"")) {
            mImageView.setMaxHeight(maxHeight);
            mImageView.setMaxWidth(maxWidth);
          }
          mImageView.setImageBitmap(b);
          mImageView.setId(23423534);
          imageView=mImageView;
        }
 else         if (errorMsg == null) {
          errorMsg=getContext().getString(R.string.file_invalid,imageFile);
        }
      }
 else {
        errorMsg=getContext().getString(R.string.file_missing,imageFile);
      }
      if (errorMsg != null) {
        Log.e(t,errorMsg);
        mMissingImage=new TextView(getContext());
        mMissingImage.setText(errorMsg);
        mMissingImage.setPadding(10,10,10,10);
        mMissingImage.setId(234873453);
        imageView=mMissingImage;
      }
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (imageView != null) {
    RelativeLayout parent=this;
    imageParams.addRule(RelativeLayout.BELOW,topPane.getId());
    if (mAudioButton != null) {
      if (!textVisible) {
        imageParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
        parent=topPane;
      }
    }
    if (mVideoButton != null) {
      if (!textVisible) {
        imageParams.addRule(RelativeLayout.LEFT_OF,mVideoButton.getId());
        parent=topPane;
      }
    }
    parent.addView(imageView,imageParams);
  }
}","public void setAVT(TextView text,String audioURI,String imageURI,final String videoURI,final String bigImageURI,final String qrCodeContent){
  mView_Text=text;
  RelativeLayout.LayoutParams textParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams audioParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams imageParams=new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
  imageParams.addRule(CENTER_IN_PARENT);
  RelativeLayout.LayoutParams videoParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams topPaneParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout topPane=new RelativeLayout(this.getContext());
  topPane.setId(2342134);
  this.addView(topPane,topPaneParams);
  if (audioURI != null) {
    mAudioButton=new AudioButton(getContext(),audioURI,true);
    mAudioButton.setId(3245345);
  }
  if (videoURI != null) {
    mVideoButton=new ImageButton(getContext());
    mVideoButton.setImageResource(android.R.drawable.ic_media_play);
    mVideoButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        String videoFilename=""String_Node_Str"";
        try {
          videoFilename=ReferenceManager._().DeriveReference(videoURI).getLocalURI();
        }
 catch (        InvalidReferenceException e) {
          Log.e(t,""String_Node_Str"");
          e.printStackTrace();
        }
        File videoFile=new File(videoFilename);
        if (!videoFile.exists()) {
          String errorMsg=getContext().getString(R.string.file_missing,videoFilename);
          Log.e(t,errorMsg);
          Toast.makeText(getContext(),errorMsg,Toast.LENGTH_LONG).show();
          return;
        }
        Intent i=new Intent(""String_Node_Str"");
        i.setDataAndType(Uri.fromFile(videoFile),""String_Node_Str"");
        try {
          String uri=Uri.fromFile(videoFile).getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
          Logger.log(""String_Node_Str"",""String_Node_Str"" + uri);
          getContext().startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(getContext(),getContext().getString(R.string.activity_not_found,""String_Node_Str""),Toast.LENGTH_SHORT).show();
        }
      }
    }
);
    mVideoButton.setId(234982340);
  }
  if (mAudioButton != null && mVideoButton == null) {
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
    topPane.addView(mAudioButton,audioParams);
  }
 else   if (mAudioButton == null && mVideoButton != null) {
    videoParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mVideoButton.getId());
    topPane.addView(mVideoButton,videoParams);
  }
 else   if (mAudioButton != null && mVideoButton != null) {
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
    videoParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    videoParams.addRule(RelativeLayout.BELOW,mAudioButton.getId());
    topPane.addView(mAudioButton,audioParams);
    topPane.addView(mVideoButton,videoParams);
  }
 else {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
  }
  boolean textVisible=(mView_Text.getVisibility() != GONE);
  if (textVisible) {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    topPane.addView(mView_Text,textParams);
  }
  String errorMsg=null;
  View imageView=null;
  if (qrCodeContent != null) {
    Bitmap image;
    Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    int screenWidth=display.getWidth();
    int screenHeight=display.getHeight();
    int minimumDim=Math.min(screenWidth,screenHeight);
    try {
      QRCodeEncoder qrCodeEncoder=new QRCodeEncoder(qrCodeContent,minimumDim);
      image=qrCodeEncoder.encodeAsBitmap();
      mImageView=new ResizingImageView(getContext());
      mImageView.setPadding(10,10,10,10);
      mImageView.setAdjustViewBounds(true);
      mImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
      mImageView.setImageBitmap(image);
      mImageView.setId(23423534);
      imageView=mImageView;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (imageURI != null) {
    try {
      DisplayMetrics metrics=this.getContext().getResources().getDisplayMetrics();
      int maxWidth=metrics.widthPixels;
      int maxHeight=metrics.heightPixels;
      if (mView_Text != null) {
        maxHeight=maxHeight - mView_Text.getHeight();
      }
      if (mVideoButton != null) {
        maxHeight=maxHeight - mVideoButton.getHeight();
      }
 else       if (mAudioButton != null) {
        maxHeight=maxHeight - mAudioButton.getHeight();
      }
      maxHeight=(2 * maxHeight) / 3;
      final String imageFilename=ReferenceManager._().DeriveReference(imageURI).getLocalURI();
      final File imageFile=new File(imageFilename);
      if (imageFile.exists()) {
        Bitmap b=null;
        try {
          Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
          int screenWidth=display.getWidth();
          int screenHeight=display.getHeight();
          b=FileUtils.getBitmapScaledToDisplay(imageFile,screenHeight,screenWidth);
        }
 catch (        OutOfMemoryError e) {
          errorMsg=""String_Node_Str"" + e.getMessage();
        }
        if (b != null) {
          ImageView mImageView=new ImageView(getContext());
          ;
          if (ResizingImageView.resizeMethod.equals(""String_Node_Str"") || ResizingImageView.resizeMethod.equals(""String_Node_Str"") || ResizingImageView.resizeMethod.equals(""String_Node_Str"")) {
            mImageView=new ResizingImageView(getContext(),imageURI,bigImageURI);
            mImageView.setAdjustViewBounds(true);
            mImageView.setMaxHeight(maxHeight);
            mImageView.setMaxWidth(maxWidth);
          }
          mImageView.setPadding(10,10,10,10);
          mImageView.setImageBitmap(b);
          mImageView.setId(23423534);
          imageView=mImageView;
        }
 else         if (errorMsg == null) {
          errorMsg=getContext().getString(R.string.file_invalid,imageFile);
        }
      }
 else {
        errorMsg=getContext().getString(R.string.file_missing,imageFile);
      }
      if (errorMsg != null) {
        Log.e(t,errorMsg);
        mMissingImage=new TextView(getContext());
        mMissingImage.setText(errorMsg);
        mMissingImage.setPadding(10,10,10,10);
        mMissingImage.setId(234873453);
        imageView=mMissingImage;
      }
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (imageView != null) {
    RelativeLayout parent=this;
    imageParams.addRule(RelativeLayout.BELOW,topPane.getId());
    if (mAudioButton != null) {
      if (!textVisible) {
        imageParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
        parent=topPane;
      }
    }
    if (mVideoButton != null) {
      if (!textVisible) {
        imageParams.addRule(RelativeLayout.LEFT_OF,mVideoButton.getId());
        parent=topPane;
      }
    }
    parent.addView(imageView,imageParams);
  }
}",0.9522404078347196
142180,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case SEAT_APP_ACTIVITY:
    if (resultCode == RESULT_OK) {
      loadFields(false);
      welcomeMessage.setText(Localization.get(""String_Node_Str""));
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        refreshActionBar();
      }
    }
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
switch (requestCode) {
case SEAT_APP_ACTIVITY:
    if (resultCode == RESULT_OK) {
      refreshForNewApp();
    }
}
}",0.6505190311418685
142181,"private void refreshView(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    refreshActionBar();
  }
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getUsableAppRecords();
  if (readyApps.size() == 1) {
    spinner.setVisibility(View.GONE);
    welcomeMessage.setText(Localization.get(""String_Node_Str""));
    ApplicationRecord r=readyApps.get(0);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    prefs.edit().putString(KEY_LAST_APP,r.getUniqueId()).commit();
  }
 else {
    welcomeMessage.setText(Localization.get(""String_Node_Str""));
    ArrayList<String> appNames=new ArrayList<>();
    for (    ApplicationRecord r : readyApps) {
      appNames.add(r.getDisplayName());
      appIdDropdownList.add(r.getUniqueId());
    }
    ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text_view,appNames);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
    spinner.setOnItemSelectedListener(this);
    String currAppId=CommCareApplication._().getCurrentApp().getUniqueId();
    int position=appIdDropdownList.indexOf(currAppId);
    spinner.setSelection(position);
    spinner.setVisibility(View.VISIBLE);
  }
}","private void refreshView(){
  refreshForNewApp();
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getUsableAppRecords();
  if (readyApps.size() == 1) {
    spinner.setVisibility(View.GONE);
    welcomeMessage.setText(Localization.get(""String_Node_Str""));
    ApplicationRecord r=readyApps.get(0);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    prefs.edit().putString(KEY_LAST_APP,r.getUniqueId()).commit();
  }
 else {
    welcomeMessage.setText(Localization.get(""String_Node_Str""));
    ArrayList<String> appNames=new ArrayList<>();
    appIdDropdownList.clear();
    for (    ApplicationRecord r : readyApps) {
      appNames.add(r.getDisplayName());
      appIdDropdownList.add(r.getUniqueId());
    }
    ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text_view,appNames);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
    spinner.setOnItemSelectedListener(this);
    String currAppId=CommCareApplication._().getCurrentApp().getUniqueId();
    int position=appIdDropdownList.indexOf(currAppId);
    spinner.setSelection(position);
    spinner.setVisibility(View.VISIBLE);
  }
}",0.9459783913565426
142182,"private void startValidationActivity(){
  Intent i=new Intent(this,CommCareVerificationActivity.class);
  CommCareHomeActivity.this.startActivityForResult(i,MEDIA_VALIDATOR_ACTIVITY);
}","private void startValidationActivity(){
  Intent i=new Intent(this,CommCareVerificationActivity.class);
  i.putExtra(CommCareVerificationActivity.KEY_LAUNCH_FROM_SETTINGS,true);
  CommCareHomeActivity.this.startActivityForResult(i,MEDIA_VALIDATOR_ACTIVITY);
}",0.8333333333333334
142183,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.missing_multimedia_layout);
  retryButton=(Button)findViewById(R.id.screen_multimedia_retry);
  retryButton.setOnClickListener(this);
  this.fromManager=this.getIntent().getBooleanExtra(AppManagerActivity.KEY_LAUNCH_FROM_MANAGER,false);
  if (fromManager) {
    Button skipButton=(Button)findViewById(R.id.skip_verification_button);
    skipButton.setVisibility(View.VISIBLE);
    skipButton.setOnClickListener(this);
  }
  missingMediaPrompt=(TextView)findViewById(R.id.MissingMediaPrompt);
  fire();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.missing_multimedia_layout);
  retryButton=(Button)findViewById(R.id.screen_multimedia_retry);
  retryButton.setOnClickListener(this);
  this.fromSettings=this.getIntent().getBooleanExtra(KEY_LAUNCH_FROM_SETTINGS,false);
  this.fromManager=this.getIntent().getBooleanExtra(AppManagerActivity.KEY_LAUNCH_FROM_MANAGER,false);
  if (fromManager) {
    Button skipButton=(Button)findViewById(R.id.skip_verification_button);
    skipButton.setVisibility(View.VISIBLE);
    skipButton.setOnClickListener(this);
  }
  missingMediaPrompt=(TextView)findViewById(R.id.MissingMediaPrompt);
  fire();
}",0.9347496206373292
142184,"@Override public void onResume(){
  super.onResume();
  boolean shouldBeHere=fromManager || CommCareApplication._().shouldSeeMMVerification();
  if (!shouldBeHere) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    startActivity(i);
  }
}","@Override public void onResume(){
  super.onResume();
  boolean shouldBeHere=fromManager || fromSettings || CommCareApplication._().shouldSeeMMVerification();
  if (!shouldBeHere) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    startActivity(i);
  }
}",0.9691119691119692
142185,"private void markSenseIncompleteUnsent(final SQLiteDatabase db){
  if (inSenseMode) {
    SqlStorage<FormRecord> storage=new SqlStorage<FormRecord>(FormRecord.STORAGE_KEY,FormRecord.class,new ConcreteDbHelper(c,db));
    for (    FormRecord record : storage) {
      if (FormRecord.STATUS_INCOMPLETE.equals(record.getStatus())) {
        storage.write(record.updateStatus(record.getInstanceURI().toString(),FormRecord.STATUS_COMPLETE));
      }
    }
  }
}","private void markSenseIncompleteUnsent(final SQLiteDatabase db){
  if (inSenseMode) {
    SqlStorage<FormRecord> storage=new SqlStorage<FormRecord>(FormRecord.STORAGE_KEY,FormRecord.class,new ConcreteDbHelper(c,db));
    for (    FormRecord record : storage) {
      if (FormRecord.STATUS_INCOMPLETE.equals(record.getStatus())) {
        storage.write(record.updateInstanceAndStatus(record.getInstanceURI().toString(),FormRecord.STATUS_COMPLETE));
      }
    }
  }
}",0.9880823401950164
142186,"public static void migrateData(Context c,CommCareApp app,UserKeyRecord incomingSandbox,byte[] unwrappedOldKey,UserKeyRecord newSandbox,byte[] unwrappedNewKey) throws IOException {
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + newSandbox.getUsername());
  File oldDb=c.getDatabasePath(CommCareUserOpenHelper.getDbName(incomingSandbox.getUuid()));
  File newDb=c.getDatabasePath(CommCareUserOpenHelper.getDbName(newSandbox.getUuid()));
  if (newDb.exists()) {
    if (!newDb.delete()) {
      throw new IOException(""String_Node_Str"" + newDb.getAbsolutePath() + ""String_Node_Str"");
    }
  }
  FileUtil.copyFile(oldDb,newDb);
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  String oldKeyEncoded=getSqlCipherEncodedKey(unwrappedOldKey);
  String newKeyEncoded=getSqlCipherEncodedKey(unwrappedNewKey);
  SQLiteDatabase rawDbHandle=SQLiteDatabase.openDatabase(newDb.getAbsolutePath(),oldKeyEncoded,null,SQLiteDatabase.OPEN_READWRITE);
  rawDbHandle.execSQL(""String_Node_Str"" + oldKeyEncoded + ""String_Node_Str"");
  rawDbHandle.execSQL(""String_Node_Str"" + newKeyEncoded + ""String_Node_Str"");
  rawDbHandle.close();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  final SQLiteDatabase db=new CommCareUserOpenHelper(CommCareApplication._(),newSandbox.getUuid()).getWritableDatabase(newKeyEncoded);
  try {
    DbHelper dbh=new DbHelper(c){
      @Override public SQLiteDatabase getHandle(){
        return db;
      }
    }
;
    SqlStorage<DeviceReportRecord> reports=new SqlStorage<DeviceReportRecord>(DeviceReportRecord.STORAGE_KEY,DeviceReportRecord.class,dbh);
    for (    DeviceReportRecord r : reports) {
      File oldPath=new File(r.getFilePath());
      File newPath=FileUtil.getNewFileLocation(oldPath,newSandbox.getUuid(),true);
      FileUtil.copyFile(oldPath,newPath);
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    ContentResolver cr=c.getContentResolver();
    SqlStorage<FormRecord> formRecords=new SqlStorage<FormRecord>(FormRecord.STORAGE_KEY,FormRecord.class,dbh);
    for (    FormRecord record : formRecords) {
      Uri instanceURI=record.getInstanceURI();
      if (instanceURI == null) {
        continue;
      }
      ContentValues values=new ContentValues();
      File oldForm;
{
        Cursor oldRecord=cr.query(instanceURI,new String[]{InstanceColumns.INSTANCE_FILE_PATH,InstanceColumns.DISPLAY_NAME,InstanceColumns.SUBMISSION_URI,InstanceColumns.JR_FORM_ID,InstanceColumns.STATUS,InstanceColumns.CAN_EDIT_WHEN_COMPLETE,InstanceColumns.LAST_STATUS_CHANGE_DATE,InstanceColumns.DISPLAY_SUBTEXT},null,null,null);
        if (!oldRecord.moveToFirst()) {
          throw new IOException(""String_Node_Str"" + instanceURI.toString());
        }
        values.put(InstanceColumns.DISPLAY_NAME,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.DISPLAY_NAME)));
        values.put(InstanceColumns.SUBMISSION_URI,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.SUBMISSION_URI)));
        values.put(InstanceColumns.JR_FORM_ID,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.JR_FORM_ID)));
        values.put(InstanceColumns.STATUS,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.STATUS)));
        values.put(InstanceColumns.CAN_EDIT_WHEN_COMPLETE,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.CAN_EDIT_WHEN_COMPLETE)));
        values.put(InstanceColumns.LAST_STATUS_CHANGE_DATE,oldRecord.getLong(oldRecord.getColumnIndex(InstanceColumns.LAST_STATUS_CHANGE_DATE)));
        values.put(InstanceColumns.DISPLAY_SUBTEXT,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.DISPLAY_SUBTEXT)));
        oldForm=new File(oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH)));
        oldRecord.close();
      }
      File oldFolder=oldForm.getParentFile();
      File newFolder=FileUtil.getNewFileLocation(oldFolder,newSandbox.getUuid(),true);
      FileUtil.copyFileDeep(oldFolder,newFolder);
      File newfileToWrite=null;
      for (      File f : newFolder.listFiles()) {
        if (f.getName().equals(oldForm.getName())) {
          newfileToWrite=f;
        }
      }
      values.put(InstanceColumns.INSTANCE_FILE_PATH,newfileToWrite.getAbsolutePath());
      Uri newUri=cr.insert(InstanceColumns.CONTENT_URI,values);
      record=record.updateStatus(newUri.toString(),record.getStatus());
      formRecords.write(record);
    }
  }
  finally {
    db.close();
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  SqlStorage<UserKeyRecord> ukr=app.getStorage(UserKeyRecord.class);
  SQLiteDatabase ukrdb=ukr.getAccessLock();
  ukrdb.beginTransaction();
  try {
    incomingSandbox.setType(UserKeyRecord.TYPE_PENDING_DELETE);
    ukr.write(incomingSandbox);
    newSandbox.setType(UserKeyRecord.TYPE_NORMAL);
    ukr.write(newSandbox);
    ukrdb.setTransactionSuccessful();
  }
  finally {
    ukrdb.endTransaction();
  }
}","public static void migrateData(Context c,CommCareApp app,UserKeyRecord incomingSandbox,byte[] unwrappedOldKey,UserKeyRecord newSandbox,byte[] unwrappedNewKey) throws IOException {
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + newSandbox.getUsername());
  File oldDb=c.getDatabasePath(CommCareUserOpenHelper.getDbName(incomingSandbox.getUuid()));
  File newDb=c.getDatabasePath(CommCareUserOpenHelper.getDbName(newSandbox.getUuid()));
  if (newDb.exists()) {
    if (!newDb.delete()) {
      throw new IOException(""String_Node_Str"" + newDb.getAbsolutePath() + ""String_Node_Str"");
    }
  }
  FileUtil.copyFile(oldDb,newDb);
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  String oldKeyEncoded=getSqlCipherEncodedKey(unwrappedOldKey);
  String newKeyEncoded=getSqlCipherEncodedKey(unwrappedNewKey);
  SQLiteDatabase rawDbHandle=SQLiteDatabase.openDatabase(newDb.getAbsolutePath(),oldKeyEncoded,null,SQLiteDatabase.OPEN_READWRITE);
  rawDbHandle.execSQL(""String_Node_Str"" + oldKeyEncoded + ""String_Node_Str"");
  rawDbHandle.execSQL(""String_Node_Str"" + newKeyEncoded + ""String_Node_Str"");
  rawDbHandle.close();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  final SQLiteDatabase db=new CommCareUserOpenHelper(CommCareApplication._(),newSandbox.getUuid()).getWritableDatabase(newKeyEncoded);
  try {
    DbHelper dbh=new DbHelper(c){
      @Override public SQLiteDatabase getHandle(){
        return db;
      }
    }
;
    SqlStorage<DeviceReportRecord> reports=new SqlStorage<DeviceReportRecord>(DeviceReportRecord.STORAGE_KEY,DeviceReportRecord.class,dbh);
    for (    DeviceReportRecord r : reports) {
      File oldPath=new File(r.getFilePath());
      File newPath=FileUtil.getNewFileLocation(oldPath,newSandbox.getUuid(),true);
      FileUtil.copyFile(oldPath,newPath);
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    ContentResolver cr=c.getContentResolver();
    SqlStorage<FormRecord> formRecords=new SqlStorage<FormRecord>(FormRecord.STORAGE_KEY,FormRecord.class,dbh);
    for (    FormRecord record : formRecords) {
      Uri instanceURI=record.getInstanceURI();
      if (instanceURI == null) {
        continue;
      }
      ContentValues values=new ContentValues();
      File oldForm;
{
        Cursor oldRecord=cr.query(instanceURI,new String[]{InstanceColumns.INSTANCE_FILE_PATH,InstanceColumns.DISPLAY_NAME,InstanceColumns.SUBMISSION_URI,InstanceColumns.JR_FORM_ID,InstanceColumns.STATUS,InstanceColumns.CAN_EDIT_WHEN_COMPLETE,InstanceColumns.LAST_STATUS_CHANGE_DATE,InstanceColumns.DISPLAY_SUBTEXT},null,null,null);
        if (!oldRecord.moveToFirst()) {
          throw new IOException(""String_Node_Str"" + instanceURI.toString());
        }
        values.put(InstanceColumns.DISPLAY_NAME,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.DISPLAY_NAME)));
        values.put(InstanceColumns.SUBMISSION_URI,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.SUBMISSION_URI)));
        values.put(InstanceColumns.JR_FORM_ID,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.JR_FORM_ID)));
        values.put(InstanceColumns.STATUS,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.STATUS)));
        values.put(InstanceColumns.CAN_EDIT_WHEN_COMPLETE,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.CAN_EDIT_WHEN_COMPLETE)));
        values.put(InstanceColumns.LAST_STATUS_CHANGE_DATE,oldRecord.getLong(oldRecord.getColumnIndex(InstanceColumns.LAST_STATUS_CHANGE_DATE)));
        values.put(InstanceColumns.DISPLAY_SUBTEXT,oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.DISPLAY_SUBTEXT)));
        oldForm=new File(oldRecord.getString(oldRecord.getColumnIndex(InstanceColumns.INSTANCE_FILE_PATH)));
        oldRecord.close();
      }
      File oldFolder=oldForm.getParentFile();
      File newFolder=FileUtil.getNewFileLocation(oldFolder,newSandbox.getUuid(),true);
      FileUtil.copyFileDeep(oldFolder,newFolder);
      File newfileToWrite=null;
      for (      File f : newFolder.listFiles()) {
        if (f.getName().equals(oldForm.getName())) {
          newfileToWrite=f;
        }
      }
      values.put(InstanceColumns.INSTANCE_FILE_PATH,newfileToWrite.getAbsolutePath());
      Uri newUri=cr.insert(InstanceColumns.CONTENT_URI,values);
      record=record.updateInstanceAndStatus(newUri.toString(),record.getStatus());
      formRecords.write(record);
    }
  }
  finally {
    db.close();
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  SqlStorage<UserKeyRecord> ukr=app.getStorage(UserKeyRecord.class);
  SQLiteDatabase ukrdb=ukr.getAccessLock();
  ukrdb.beginTransaction();
  try {
    incomingSandbox.setType(UserKeyRecord.TYPE_PENDING_DELETE);
    ukr.write(incomingSandbox);
    newSandbox.setType(UserKeyRecord.TYPE_NORMAL);
    ukr.write(newSandbox);
    ukrdb.setTransactionSuccessful();
  }
  finally {
    ukrdb.endTransaction();
  }
}",0.998888102698878
142187,"/** 
 * Clears out all of the elements of this wrapper which are for an individual traversal. Includes any cached info (since the casedb might have changed) and the individual id's and such.
 */
private void cleanVolatiles(){
  formRecordId=-1;
  instanceUri=null;
  instanceStatus=null;
  sessionStateRecordId=-1;
  initializer=null;
}","/** 
 * Clears out all of the elements of this wrapper which are for an individual traversal. Includes any cached info (since the casedb might have changed) and the individual id's and such.
 */
private void cleanVolatiles(){
  formRecordId=-1;
  sessionStateRecordId=-1;
  initializer=null;
}",0.931637519872814
142188,"/** 
 * Performs deep checks on the current form data to establish whether or not the files are in a consistent state. Returns a (human readable) report if not to aid in debugging
 * @param r A Form Record to process
 * @return A tuple whose first argument is a boolean specifying whether the record has passed the verification process.The second argument is a human readable report for debugging.
 */
public Pair<Boolean,String> verifyFormRecordIntegrity(FormRecord r){
  StringBuilder reporter=new StringBuilder();
  try {
    reporter.append(""String_Node_Str"").append(r.toString()).append(""String_Node_Str"");
    String formPath;
    try {
      formPath=r.getPath(c);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      reporter.append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"");
      return new Pair<Boolean,String>(false,reporter.toString());
    }
    File recordFile=new File(formPath);
    if (!recordFile.exists()) {
      reporter.append(""String_Node_Str"");
      return new Pair<Boolean,String>(false,reporter.toString());
    }
    reporter.append(""String_Node_Str"");
    File folder=recordFile.getParentFile();
    for (    File f : folder.listFiles()) {
      reporter.append(String.format(""String_Node_Str"",f.getName(),String.valueOf(f.length()),new Date(f.lastModified()).toString()));
    }
    reporter.append(""String_Node_Str"");
    reporter.append(String.format(""String_Node_Str"",String.valueOf(recordFile.length())));
    if (!performLinearFileScan(r,recordFile,false,reporter,""String_Node_Str"")) {
      return new Pair(false,reporter.toString());
    }
    if (!performLinearFileScan(r,recordFile,true,reporter,""String_Node_Str"")) {
      return new Pair(false,reporter.toString());
    }
    if (!attemptXmlScan(r,recordFile,reporter)) {
      return new Pair(false,reporter.toString());
    }
    return new Pair(true,reporter.toString());
  }
 catch (  Exception e) {
    return new Pair(false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ reporter.toString());
  }
}","/** 
 * Performs deep checks on the current form data to establish whether or not the files are in a consistent state. Returns a (human readable) report if not to aid in debugging
 * @param r A Form Record to process
 * @return A tuple whose first argument is a boolean specifying whether therecord has passed the verification process.  The second argument is a human readable report for debugging.
 */
public Pair<Boolean,String> verifyFormRecordIntegrity(FormRecord r){
  StringBuilder reporter=new StringBuilder();
  try {
    reporter.append(""String_Node_Str"").append(r.toString()).append(""String_Node_Str"");
    String formPath;
    try {
      formPath=r.getPath(c);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
      reporter.append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"");
      return new Pair<Boolean,String>(false,reporter.toString());
    }
    File recordFile=new File(formPath);
    if (!recordFile.exists()) {
      reporter.append(""String_Node_Str"");
      return new Pair<Boolean,String>(false,reporter.toString());
    }
    reporter.append(""String_Node_Str"");
    File folder=recordFile.getParentFile();
    for (    File f : folder.listFiles()) {
      reporter.append(String.format(""String_Node_Str"",f.getName(),String.valueOf(f.length()),new Date(f.lastModified()).toString()));
    }
    reporter.append(""String_Node_Str"");
    reporter.append(String.format(""String_Node_Str"",String.valueOf(recordFile.length())));
    if (!performLinearFileScan(r,recordFile,false,reporter,""String_Node_Str"")) {
      return new Pair(false,reporter.toString());
    }
    if (!performLinearFileScan(r,recordFile,true,reporter,""String_Node_Str"")) {
      return new Pair(false,reporter.toString());
    }
    if (!attemptXmlScan(r,recordFile,reporter)) {
      return new Pair(false,reporter.toString());
    }
    return new Pair(true,reporter.toString());
  }
 catch (  Exception e) {
    return new Pair(false,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ reporter.toString());
  }
}",0.99927060539752
142189,"public FormRecord updateRecordStatus(FormRecord record,String newStatus) throws IOException, StorageFullException {
  record=record.updateStatus(record.getInstanceURI().toString(),newStatus);
  storage.write(record);
  return record;
}","public FormRecord updateRecordStatus(FormRecord record,String newStatus) throws IOException, StorageFullException {
  record=record.updateInstanceAndStatus(record.getInstanceURI().toString(),newStatus);
  storage.write(record);
  return record;
}",0.9771309771309772
142190,"/** 
 * Remove form record and associated session state descriptor from storage and delete form instance files linked to the form record.
 */
private static void wipeRecord(Context context,int sessionId,int formRecordId,SqlStorage<FormRecord> frStorage,SqlStorage<SessionStateDescriptor> ssdStorage){
  if (sessionId != -1) {
    try {
      SessionStateDescriptor ssd=ssdStorage.read(sessionId);
      int ssdFrid=ssd.getFormRecordId();
      if (formRecordId == -1) {
        formRecordId=ssdFrid;
      }
 else       if (formRecordId != ssdFrid) {
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
  String dataPath=null;
  if (formRecordId != -1) {
    try {
      FormRecord r=frStorage.read(formRecordId);
      dataPath=r.getPath(context);
      if (sessionId == -1) {
        Vector<Integer> sessionIds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,formRecordId);
        if (sessionIds.size() == 1) {
          sessionId=sessionIds.firstElement();
        }
 else         if (sessionIds.size() > 1) {
          sessionId=sessionIds.firstElement();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
  if (sessionId != -1) {
    ssdStorage.remove(sessionId);
  }
  if (formRecordId != -1) {
    frStorage.remove(formRecordId);
  }
  if (dataPath != null) {
    String selection=InstanceColumns.INSTANCE_FILE_PATH + ""String_Node_Str"";
    Cursor c=context.getContentResolver().query(InstanceColumns.CONTENT_URI,new String[]{InstanceColumns._ID},selection,new String[]{dataPath},null);
    if (c.moveToFirst()) {
      long id=c.getLong(0);
      context.getContentResolver().delete(ContentUris.withAppendedId(InstanceColumns.CONTENT_URI,id),null,null);
    }
 else {
      FileUtil.deleteFileOrDir(dataPath);
    }
    c.close();
  }
}","/** 
 * Remove form record and associated session state descriptor from storage and delete form instance files linked to the form record.
 */
private static void wipeRecord(Context context,int sessionId,int formRecordId,SqlStorage<FormRecord> frStorage,SqlStorage<SessionStateDescriptor> ssdStorage){
  if (sessionId != -1) {
    try {
      SessionStateDescriptor ssd=ssdStorage.read(sessionId);
      int ssdFrid=ssd.getFormRecordId();
      if (formRecordId == -1) {
        formRecordId=ssdFrid;
      }
 else       if (formRecordId != ssdFrid) {
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
  String dataPath=null;
  if (formRecordId != -1) {
    try {
      FormRecord r=frStorage.read(formRecordId);
      dataPath=r.getPath(context);
      if (sessionId == -1) {
        Vector<Integer> sessionIds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,formRecordId);
        if (sessionIds.size() == 1) {
          sessionId=sessionIds.firstElement();
        }
 else         if (sessionIds.size() > 1) {
          sessionId=sessionIds.firstElement();
          Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
        }
      }
    }
 catch (    Exception e) {
      Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"");
    }
  }
  if (sessionId != -1) {
    ssdStorage.remove(sessionId);
  }
  if (formRecordId != -1) {
    frStorage.remove(formRecordId);
  }
  if (dataPath != null) {
    String selection=InstanceColumns.INSTANCE_FILE_PATH + ""String_Node_Str"";
    Cursor c=context.getContentResolver().query(InstanceColumns.CONTENT_URI,new String[]{InstanceColumns._ID},selection,new String[]{dataPath},null);
    try {
      if (c.moveToFirst()) {
        long id=c.getLong(0);
        context.getContentResolver().delete(ContentUris.withAppendedId(InstanceColumns.CONTENT_URI,id),null,null);
      }
 else {
        FileUtil.deleteFileOrDir(dataPath);
      }
    }
  finally {
      c.close();
    }
  }
}",0.988538681948424
142191,"/** 
 * Reparse the saved form instance associated with the form record and apply any updates found to the form record, such as UUID and date modified, returning an updated copy.
 * @param context   Used to get the filepath of the form instanceassociated with the record.
 * @param r         Reparse this record and return an updated copy of it
 * @param newStatus The new form record status
 * @return The reparsed form record and the associated case id, if present
 * @throws IOException                       Problem opening the saved formattached to the record.
 * @throws InvalidStructureException         Occurs during reparsing of theform attached to record.
 * @throws XmlPullParserException
 * @throws UnfullfilledRequirementsException Parsing encountered a platformversioning problem
 */
private static Pair<FormRecord,String> reparseRecord(Context context,FormRecord r,String newStatus) throws IOException, InvalidStructureException, XmlPullParserException, UnfullfilledRequirementsException {
  final String[] caseIDs=new String[1];
  final Date[] modified=new Date[]{new Date(0)};
  final String[] uuid=new String[1];
  TransactionParserFactory factory=new TransactionParserFactory(){
    @Override public TransactionParser getParser(    KXmlParser parser){
      String name=parser.getName();
      if (""String_Node_Str"".equals(name)) {
        return buildCaseParser(parser.getNamespace(),parser,caseIDs);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(name)) {
        return buildMetaParser(uuid,modified,parser);
      }
      return null;
    }
  }
;
  String path=r.getPath(context);
  InputStream is;
  FileInputStream fis=new FileInputStream(path);
  try {
    Cipher decrypter=Cipher.getInstance(""String_Node_Str"");
    decrypter.init(Cipher.DECRYPT_MODE,new SecretKeySpec(r.getAesKey(),""String_Node_Str""));
    is=new CipherInputStream(fis,decrypter);
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  NoSuchPaddingException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  InvalidKeyException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
  DataModelPullParser parser=new DataModelPullParser(is,factory);
  parser.parse();
  fis.close();
  is.close();
  FormRecord parsed=new FormRecord(r.getInstanceURI().toString(),newStatus,r.getFormNamespace(),r.getAesKey(),uuid[0],modified[0]);
  parsed.setID(r.getID());
  if (!newStatus.equals(FormRecord.STATUS_INCOMPLETE) && !newStatus.equals(FormRecord.STATUS_UNSTARTED)) {
    ContentValues cv=new ContentValues();
    cv.put(InstanceColumns.CAN_EDIT_WHEN_COMPLETE,Boolean.toString(false));
    context.getContentResolver().update(r.getInstanceURI(),cv,null,null);
  }
  return new Pair<>(parsed,caseIDs[0]);
}","/** 
 * Reparse the saved form instance associated with the form record and apply any updates found to the form record, such as UUID and date modified, returning an updated copy with status set to saved.
 * @param context   Used to get the filepath of the form instanceassociated with the record.
 * @param r         Reparse this record and return an updated copy of it
 * @return The reparsed form record and the associated case id, if present
 * @throws IOException                       Problem opening the saved formattached to the record.
 * @throws InvalidStructureException         Occurs during reparsing of theform attached to record.
 * @throws XmlPullParserException
 * @throws UnfullfilledRequirementsException Parsing encountered a platformversioning problem
 */
private static Pair<FormRecord,String> reparseRecord(Context context,FormRecord r) throws IOException, InvalidStructureException, XmlPullParserException, UnfullfilledRequirementsException {
  final String[] caseIDs=new String[1];
  final Date[] modified=new Date[]{new Date(0)};
  final String[] uuid=new String[1];
  TransactionParserFactory factory=new TransactionParserFactory(){
    @Override public TransactionParser getParser(    KXmlParser parser){
      String name=parser.getName();
      if (""String_Node_Str"".equals(name)) {
        return buildCaseParser(parser.getNamespace(),parser,caseIDs);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(name)) {
        return buildMetaParser(uuid,modified,parser);
      }
      return null;
    }
  }
;
  String path=r.getPath(context);
  InputStream is=null;
  FileInputStream fis=new FileInputStream(path);
  try {
    Cipher decrypter=Cipher.getInstance(""String_Node_Str"");
    decrypter.init(Cipher.DECRYPT_MODE,new SecretKeySpec(r.getAesKey(),""String_Node_Str""));
    is=new CipherInputStream(fis,decrypter);
    DataModelPullParser parser=new DataModelPullParser(is,factory);
    parser.parse();
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  NoSuchPaddingException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  InvalidKeyException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
 finally {
    fis.close();
    if (is != null) {
      is.close();
    }
  }
  FormRecord parsed=new FormRecord(r.getInstanceURI().toString(),r.getStatus(),r.getFormNamespace(),r.getAesKey(),uuid[0],modified[0]);
  parsed.setID(r.getID());
  ContentValues cv=new ContentValues();
  cv.put(InstanceColumns.CAN_EDIT_WHEN_COMPLETE,Boolean.toString(false));
  context.getContentResolver().update(r.getInstanceURI(),cv,null,null);
  return new Pair<>(parsed,caseIDs[0]);
}",0.9100284495021336
142192,"@Override protected Integer doTaskBackground(Void... params){
  SqlStorage<FormRecord> storage=CommCareApplication._().getUserStorage(FormRecord.class);
  Vector<Integer> recordsToRemove=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new String[]{FormRecord.STATUS_SAVED});
  int oldrecords=recordsToRemove.size();
  Vector<Integer> unindexedRecords=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new String[]{FormRecord.STATUS_UNINDEXED});
  int count=0;
  for (  int recordID : unindexedRecords) {
    FormRecord r=storage.read(recordID);
    try {
      updateAndWriteRecord(context,platform,r,FormRecord.STATUS_SAVED,storage);
    }
 catch (    FileNotFoundException|InvalidStructureException e) {
      recordsToRemove.add(recordID);
    }
catch (    XmlPullParserException|IOException|UnfullfilledRequirementsException e) {
    }
    count++;
    this.publishProgress(count,unindexedRecords.size());
  }
  this.publishProgress(STATUS_CLEANUP);
  SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
  for (  int recordID : recordsToRemove) {
    wipeRecord(context,-1,recordID,storage,ssdStorage);
  }
  Log.d(TAG,""String_Node_Str"" + unindexedRecords.size() + ""String_Node_Str""+ oldrecords+ ""String_Node_Str""+ (recordsToRemove.size() - oldrecords)+ ""String_Node_Str"");
  return SUCCESS;
}","@Override protected Integer doTaskBackground(Void... params){
  SqlStorage<FormRecord> storage=CommCareApplication._().getUserStorage(FormRecord.class);
  Vector<Integer> recordsToRemove=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new String[]{FormRecord.STATUS_SAVED});
  int oldrecords=recordsToRemove.size();
  Vector<Integer> unindexedRecords=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new String[]{FormRecord.STATUS_UNINDEXED});
  int count=0;
  for (  int recordID : unindexedRecords) {
    FormRecord r=storage.read(recordID);
    try {
      updateAndWriteUnindexedRecord(context,platform,r,storage);
    }
 catch (    FileNotFoundException|InvalidStructureException e) {
      recordsToRemove.add(recordID);
    }
catch (    XmlPullParserException|IOException|UnfullfilledRequirementsException e) {
    }
    count++;
    this.publishProgress(count,unindexedRecords.size());
  }
  this.publishProgress(STATUS_CLEANUP);
  SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
  for (  int recordID : recordsToRemove) {
    wipeRecord(context,-1,recordID,storage,ssdStorage);
  }
  Log.d(TAG,""String_Node_Str"" + unindexedRecords.size() + ""String_Node_Str""+ oldrecords+ ""String_Node_Str""+ (recordsToRemove.size() - oldrecords)+ ""String_Node_Str"");
  return SUCCESS;
}",0.9800362976406534
142193,"/** 
 * Reparse the saved form instance associated with the form record and apply any updates found to the form record, such as UUID and date modified, returning an updated copy.  Write the updated record to storage. If the record is associated with a case id, recompute and write the SessionStateDescriptor too.
 * @param context   Used to get the filepath of the form instanceassociated with the record.
 * @param oldRecord Reparse this record and return an updated copy of it
 * @param newStatus The new form record status
 * @param storage   User storage where updated FormRecord is written
 * @return The reparsed form record and the associated case id, if present
 * @throws IOException                       Problem opening the saved formattached to the record.
 * @throws InvalidStructureException         Occurs during reparsing of theform attached to record.
 * @throws XmlPullParserException
 * @throws UnfullfilledRequirementsException Parsing encountered a platformversioning problem
 */
public static FormRecord updateAndWriteRecord(Context context,CommCarePlatform platform,FormRecord oldRecord,String newStatus,SqlStorage<FormRecord> storage) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  Pair<FormRecord,String> recordUpdates=reparseRecord(context,oldRecord,newStatus);
  FormRecord updated=recordUpdates.first;
  String caseId=recordUpdates.second;
  if (caseId != null && FormRecord.STATUS_UNINDEXED.equals(oldRecord.getStatus()) && !FormRecord.STATUS_UNINDEXED.equals(newStatus)) {
    AndroidSessionWrapper asw=AndroidSessionWrapper.mockEasiestRoute(platform,oldRecord.getFormNamespace(),caseId);
    asw.setFormRecordId(updated.getID());
    SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
    try {
      ssdStorage.write(asw.getSessionStateDescriptor());
    }
 catch (    StorageFullException e) {
    }
  }
  storage.write(updated);
  return updated;
}","/** 
 * Reparse the saved form instance associated with the form record and apply any updates found to the form record, such as UUID and date modified, returning an updated copy with the status set to saved.  Write the updated record to storage.
 * @param context   Used to get the filepath of the form instanceassociated with the record.
 * @param oldRecord Reparse this record and return an updated copy of it
 * @param storage   User storage where updated FormRecord is written
 * @return The reparsed form record and the associated case id, if present
 * @throws IOException                       Problem opening the saved formattached to the record.
 * @throws InvalidStructureException         Occurs during reparsing of theform attached to record.
 * @throws XmlPullParserException
 * @throws UnfullfilledRequirementsException Parsing encountered a platformversioning problem
 */
public static FormRecord updateAndWriteRecord(Context context,FormRecord oldRecord,SqlStorage<FormRecord> storage) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  Pair<FormRecord,String> recordUpdates=reparseRecord(context,oldRecord);
  FormRecord updated=recordUpdates.first;
  String caseId=recordUpdates.second;
  if (caseId != null && FormRecord.STATUS_UNINDEXED.equals(oldRecord.getStatus())) {
    throw new RuntimeException(""String_Node_Str"");
  }
  storage.write(updated);
  return updated;
}",0.7306913508822679
142194,"@Override public void onResume(){
  super.onResume();
  if (!mFromManager && CommCareApplication._().usableAppsPresent()) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    startActivity(i);
  }
}","@Override public void onResume(){
  super.onResume();
  if (!mFromManager && !inUpgradeMode && CommCareApplication._().usableAppsPresent()) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    startActivity(i);
  }
}",0.9587155963302753
142195,"@Override protected void onResume(){
  super.onResume();
  if (CommCareApplication._().getCurrentApp() != null) {
    platform=CommCareApplication._().getCommCarePlatform();
  }
  refreshActionBar();
  dispatchHomeScreen();
}","@Override protected void onResume(){
  super.onResume();
  if (CommCareApplication._().getCurrentApp() != null) {
    platform=CommCareApplication._().getCommCarePlatform();
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    refreshActionBar();
  }
  dispatchHomeScreen();
}",0.8653846153846154
142196,"/** 
 * Populate an input string with attribute keys formatted as {{ attr_key }} with attribute values.
 * @param input String input
 * @param mapping Bundle of key-value mappings with which to complete replacements
 * @return The populated String
 */
private static String replace(String input,Bundle mapping){
  String[] tokens=TemplatePrinterUtils.splitKeepDelimiter(input,""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i];
    if (i % 2 == 1) {
      String[] tokenSplits=TemplatePrinterUtils.splitKeepDelimiter(token,""String_Node_Str"",""String_Node_Str"");
      for (int j=1; j < tokenSplits.length - 1; j++) {
        String tokenSplit=tokenSplits[j];
        if (!tokenSplit.startsWith(""String_Node_Str"")) {
          String key=TemplatePrinterUtils.remove(tokenSplit,""String_Node_Str"");
          if (mapping.containsKey(key) && (key=mapping.getString(key)) != null) {
            tokenSplits[j]=key;
          }
 else {
            tokenSplits[j]=""String_Node_Str"";
          }
        }
      }
      tokenSplits[0]=""String_Node_Str"";
      tokenSplits[tokenSplits.length - 1]=""String_Node_Str"";
      tokens[i]=TemplatePrinterUtils.join(tokenSplits);
    }
  }
  return TemplatePrinterUtils.join(tokens);
}","/** 
 * Populate an input string with attribute keys formatted as {{ attr_key }} with attribute values.
 * @param input String input
 * @param mapping Bundle of key-value mappings with which to complete replacements
 * @return The populated String
 */
private static String replace(String input,Bundle mapping){
  String[] tokens=TemplatePrinterUtils.splitKeepDelimiter(input,""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < tokens.length; i++) {
    String token=tokens[i];
    if (i % 2 == 1) {
      String[] tokenSplits=TemplatePrinterUtils.splitKeepDelimiter(token,""String_Node_Str"",""String_Node_Str"");
      for (int j=1; j < tokenSplits.length - 1; j++) {
        String tokenSplit=tokenSplits[j];
        if (!tokenSplit.startsWith(""String_Node_Str"")) {
          String key=TemplatePrinterUtils.remove(tokenSplit,""String_Node_Str"");
          String value;
          if (mapping.containsKey(key) && (value=mapping.getString(key)) != null) {
            value.replaceAll(""String_Node_Str"",""String_Node_Str"");
            tokenSplits[j]=value;
          }
 else {
            tokenSplits[j]=""String_Node_Str"";
          }
        }
      }
      tokenSplits[0]=""String_Node_Str"";
      tokenSplits[tokenSplits.length - 1]=""String_Node_Str"";
      tokens[i]=TemplatePrinterUtils.join(tokenSplits);
    }
  }
  return TemplatePrinterUtils.join(tokens);
}",0.9360090874668686
142197,"/** 
 * Populates an html print template based on the given set of key-value pairings and save the newly-populated template to a temp location
 * @param input the html print template
 * @param mapping the mapping of keywords to case property values
 * @throws IOException , PrintValidationException
 */
private static void populateAndSaveHtml(File input,Bundle mapping,String outputPath) throws IOException, PrintValidationException {
  String fileText=TemplatePrinterUtils.docToString(input).toLowerCase();
  int startBodyIndex=fileText.indexOf(""String_Node_Str"");
  String beforeBodySection=fileText.substring(0,startBodyIndex);
  String bodySection=fileText.substring(startBodyIndex);
  validateString(bodySection);
  bodySection=replace(bodySection,mapping);
  TemplatePrinterUtils.writeStringToFile(beforeBodySection + bodySection,outputPath);
}","/** 
 * Populates an html print template based on the given set of key-value pairings and save the newly-populated template to a temp location
 * @param input the html print template
 * @param mapping the mapping of keywords to case property values
 * @throws IOException , PrintValidationException
 */
private static void populateAndSaveHtml(File input,Bundle mapping,String outputPath) throws IOException, PrintValidationException {
  String fileText=TemplatePrinterUtils.docToString(input);
  int startBodyIndex=fileText.toLowerCase().indexOf(""String_Node_Str"");
  String beforeBodySection=fileText.substring(0,startBodyIndex);
  String bodySection=fileText.substring(startBodyIndex);
  validateString(bodySection);
  bodySection=replace(bodySection,mapping);
  TemplatePrinterUtils.writeStringToFile(beforeBodySection + bodySection,outputPath);
}",0.963529411764706
142198,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int w=MeasureSpec.getSize(widthMeasureSpec);
  int h=MeasureSpec.getSize(heightMeasureSpec);
  w=Math.max(w,h);
  h=w;
  setMeasuredDimension(w,w);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int w=MeasureSpec.getSize(widthMeasureSpec);
  int h=MeasureSpec.getSize(heightMeasureSpec);
  if (w == 0 || h == 0) {
    w=Math.max(w,h);
  }
 else {
    w=Math.min(w,h);
  }
  h=w;
  setMeasuredDimension(w,w);
}",0.8766603415559773
142199,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int w=MeasureSpec.getSize(widthMeasureSpec);
  int h=MeasureSpec.getSize(heightMeasureSpec);
  w=Math.max(w,h);
  h=w;
  setMeasuredDimension(w,w);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int canvasWidth=MeasureSpec.getSize(widthMeasureSpec);
  int canvasHeight=MeasureSpec.getSize(heightMeasureSpec);
  int squareCanvasDimension=Math.min(canvasWidth,canvasHeight);
  if (squareCanvasDimension <= 0) {
    squareCanvasDimension=Math.max(canvasWidth,canvasHeight);
  }
  setMeasuredDimension(squareCanvasDimension,squareCanvasDimension);
}",0.4675716440422323
142200,"public void setupImageLayout(View layout,final String source){
  ImageView iv=(ImageView)layout;
  Bitmap b;
  if (!source.equals(""String_Node_Str"")) {
    try {
      b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(source).getStream());
      if (b == null) {
        iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
      }
 else {
        iv.setImageBitmap(b);
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
catch (    InvalidReferenceException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.color.white));
  }
}","public void setupImageLayout(View layout,final String source){
  ImageView iv=(ImageView)layout;
  Bitmap b;
  if (!source.equals(""String_Node_Str"")) {
    try {
      b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(source).getStream());
      if (b == null) {
        iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
      }
 else {
        iv.setImageBitmap(b);
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
catch (    InvalidReferenceException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.color.transparent));
  }
}",0.9902319902319904
142201,"/** 
 * Initializes the first ""usable"" application from the list of globally installed app records
 */
public void initFirstUsableAppRecord(){
  for (  ApplicationRecord record : getUsableAppRecords()) {
    initializeAppResources(new CommCareApp(record));
  }
}","/** 
 * Initializes the first ""usable"" application from the list of globally installed app records
 */
public void initFirstUsableAppRecord(){
  for (  ApplicationRecord record : getUsableAppRecords()) {
    initializeAppResources(new CommCareApp(record));
    break;
  }
}",0.9794392523364486
142202,"protected void returnToLogin(){
  Intent i=new Intent(getApplicationContext(),LoginActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
  startActivity(i);
}","protected void returnToLogin(){
  Intent i=new Intent(getApplicationContext(),LoginActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
  i.putExtra(LoginActivity.REDIRECT_TO_HOMESCREEN,true);
  startActivity(i);
}",0.8345679012345679
142203,"@Override protected void onResume(){
  super.onResume();
  if (unredirectedSessionExpiration) {
    unredirectedSessionExpiration=false;
    returnToLogin();
  }
 else {
    registerReceiver(userSessionExpiredReceiver,new IntentFilter(SessionAwareFragmentActivity.USER_SESSION_EXPIRED));
  }
}","@Override protected void onResume(){
  super.onResume();
  if (unredirectedSessionExpiration) {
    unredirectedSessionExpiration=false;
    returnToLogin();
  }
  registerReceiver(userSessionExpiredReceiver,new IntentFilter(SessionAwareFragmentActivity.USER_SESSION_EXPIRED));
}",0.9755244755244756
142204,"private void done(){
  Intent i=new Intent();
  setResult(RESULT_OK,i);
  ACRAUtil.registerUserData();
  CommCareApplication._().clearNotifications(NOTIFICATION_MESSAGE_LOGIN);
  finish();
}","private void done(){
  Intent parentIntent=getIntent();
  boolean redirectHome=parentIntent.getBooleanExtra(LoginActivity.REDIRECT_TO_HOMESCREEN,false);
  ACRAUtil.registerUserData();
  CommCareApplication._().clearNotifications(NOTIFICATION_MESSAGE_LOGIN);
  if (redirectHome) {
    Intent i=new Intent(getApplicationContext(),CommCareHomeActivity.class);
    startActivity(i);
  }
 else {
    Intent i=new Intent();
    setResult(RESULT_OK,i);
    finish();
  }
}",0.2473282442748091
142205,"@Override protected void onResume(){
  super.onResume();
  try {
    if (CommCareApplication._().getSession().isActive() && CommCareApplication._().getSession().getLoggedInUser() != null) {
      Intent i=new Intent();
      i.putExtra(ALREADY_LOGGED_IN,true);
      setResult(RESULT_OK,i);
      CommCareApplication._().clearNotifications(NOTIFICATION_MESSAGE_LOGIN);
      finish();
      return;
    }
  }
 catch (  SessionUnavailableException sue) {
  }
  refreshView();
}","@Override protected void onResume(){
  super.onResume();
  try {
    if (CommCareApplication._().getSession().isActive() && CommCareApplication._().getSession().getLoggedInUser() != null) {
      Intent i=new Intent();
      i.putExtra(ALREADY_LOGGED_IN,true);
      setResult(RESULT_OK,i);
      CommCareApplication._().clearNotifications(NOTIFICATION_MESSAGE_LOGIN);
      finish();
      return;
    }
  }
 catch (  SessionUnavailableException sue) {
  }
}",0.9818181818181818
142206,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case CommCareHomeActivity.INIT_APP:
    boolean installFailed=intent != null && intent.getBooleanExtra(CommCareSetupActivity.KEY_INSTALL_FAILED,false);
  if (resultCode == RESULT_OK && !installFailed) {
    if (!CommCareApplication._().getCurrentApp().areResourcesValidated()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      i.putExtra(KEY_LAUNCH_FROM_MANAGER,true);
      this.startActivityForResult(i,CommCareHomeActivity.MISSING_MEDIA_ACTIVITY);
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
    break;
  }
case CommCareHomeActivity.MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(""String_Node_Str"");
  builder.setMessage(R.string.skipped_verification_warning).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.show();
}
 else if (resultCode == RESULT_OK) {
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
}
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case CommCareHomeActivity.INIT_APP:
    boolean installFailed=intent != null && intent.getBooleanExtra(CommCareSetupActivity.KEY_INSTALL_FAILED,false);
  if (resultCode == RESULT_OK && !installFailed) {
    if (!CommCareApplication._().getCurrentApp().areResourcesValidated()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      i.putExtra(KEY_LAUNCH_FROM_MANAGER,true);
      this.startActivityForResult(i,CommCareHomeActivity.MISSING_MEDIA_ACTIVITY);
    }
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
break;
case CommCareHomeActivity.MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
AlertDialog.Builder builder=new AlertDialog.Builder(this);
builder.setTitle(""String_Node_Str"");
builder.setMessage(R.string.skipped_verification_warning).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
  @Override public void onClick(  DialogInterface dialog,  int which){
    dialog.dismiss();
  }
}
);
AlertDialog dialog=builder.create();
dialog.show();
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
}
break;
}
}",0.9705197827773469
142207,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  String result=null;
switch (requestCode) {
case BARCODE_CAPTURE:
    if (resultCode == Activity.RESULT_OK) {
      result=data.getStringExtra(""String_Node_Str"");
      String dbg=""String_Node_Str"" + result;
      Log.i(TAG,dbg);
    }
  break;
case ARCHIVE_INSTALL:
if (resultCode == Activity.RESULT_OK) {
  result=data.getStringExtra(InstallArchiveActivity.ARCHIVE_REFERENCE);
}
break;
}
if (result == null) return;
incomingRef=result;
this.uiState=UiState.ready;
try {
ReferenceManager._().DeriveReference(incomingRef);
}
 catch (InvalidReferenceException ire) {
incomingRef=null;
Toast.makeText(getApplicationContext(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
this.uiState=UiState.basic;
uiStateScreenTransition();
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  String result=null;
switch (requestCode) {
case BARCODE_CAPTURE:
    if (resultCode == Activity.RESULT_OK) {
      result=data.getStringExtra(""String_Node_Str"");
      String dbg=""String_Node_Str"" + result;
      Log.i(TAG,dbg);
    }
  break;
case ARCHIVE_INSTALL:
if (resultCode == Activity.RESULT_OK) {
  result=data.getStringExtra(InstallArchiveActivity.ARCHIVE_REFERENCE);
}
break;
}
if (result == null) return;
incomingRef=result;
this.uiState=UiState.ready;
try {
ReferenceManager._().DeriveReference(incomingRef);
}
 catch (InvalidReferenceException ire) {
incomingRef=null;
Toast.makeText(getApplicationContext(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
this.uiState=UiState.basic;
}
uiStateScreenTransition();
}",0.9695603156708004
142208,"/** 
 * Returns the chosen URL in the UI, prefixing it with http:// if not set.
 * @return The current URL
 */
public String getURL(){
  int selectedPrefix=prefixURLSpinner.getSelectedItemPosition();
  String url=profileLocation.getText().toString();
  if (url == null || url.length() == 0) {
    return url;
  }
  if (selectedPrefix < prefixURLSpinner.getCount() - 1) {
    url=prefixURLSpinner.getSelectedItem() + ""String_Node_Str"" + url;
    if (!url.startsWith(""String_Node_Str"")) {
      url=""String_Node_Str"" + url;
    }
  }
  return url;
}","/** 
 * Returns the chosen URL in the UI, prefixing it with http:// if not set.
 * @return The current URL
 */
public String getURL(){
  int selectedPrefix=prefixURLSpinner.getSelectedItemPosition();
  String url=profileLocation.getText().toString();
  if (url == null || url.length() == 0) {
    return url;
  }
  if (BuildConfig.DEBUG) {
    Log.v(TAG,""String_Node_Str"" + selectedPrefix + ""String_Node_Str""+ prefixURLSpinner.getSelectedItem());
  }
  if (selectedPrefix < prefixURLSpinner.getCount() - 1) {
    url=prefixURLSpinner.getSelectedItem() + ""String_Node_Str"" + url;
  }
 else {
    if (BuildConfig.DEBUG) {
      if (!(prefixURLSpinner.getSelectedItem().toString().equalsIgnoreCase(""String_Node_Str""))) {
        throw new AssertionError(""String_Node_Str"");
      }
    }
    if (url.indexOf(""String_Node_Str"") == -1) {
      url=""String_Node_Str"" + url;
    }
  }
  return url;
}",0.7444444444444445
142209,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.missing_multimedia_layout);
  retryButton=(Button)findViewById(R.id.screen_multimedia_retry);
  retryButton.setOnClickListener(this);
  boolean fromManager=this.getIntent().getBooleanExtra(AppManagerActivity.KEY_LAUNCH_FROM_MANAGER,false);
  Log.i(""String_Node_Str"",""String_Node_Str"" + fromManager);
  if (fromManager) {
    skipButton=(Button)findViewById(R.id.skip_verification_button);
    skipButton.setVisibility(View.VISIBLE);
    skipButton.setOnClickListener(this);
  }
  missingMediaPrompt=(TextView)findViewById(R.id.MissingMediaPrompt);
  fire();
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.missing_multimedia_layout);
  retryButton=(Button)findViewById(R.id.screen_multimedia_retry);
  retryButton.setOnClickListener(this);
  this.fromManager=this.getIntent().getBooleanExtra(AppManagerActivity.KEY_LAUNCH_FROM_MANAGER,false);
  if (fromManager) {
    skipButton=(Button)findViewById(R.id.skip_verification_button);
    skipButton.setVisibility(View.VISIBLE);
    skipButton.setOnClickListener(this);
  }
  missingMediaPrompt=(TextView)findViewById(R.id.MissingMediaPrompt);
  fire();
}",0.9430132708821234
142210,"public void done(boolean requireRefresh){
  if (Intent.ACTION_VIEW.equals(CommCareVerificationActivity.this.getIntent().getAction())) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Intent i=new Intent(getApplicationContext(),CommCareHomeActivity.class);
    i.putExtra(KEY_REQUIRE_REFRESH,requireRefresh);
    startActivity(i);
    finish();
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Intent i=new Intent(getIntent());
    boolean fromManager=this.getIntent().getBooleanExtra(AppManagerActivity.KEY_LAUNCH_FROM_MANAGER,false);
    Log.i(""String_Node_Str"",""String_Node_Str"" + fromManager);
    i.putExtra(KEY_REQUIRE_REFRESH,requireRefresh);
    setResult(RESULT_OK,i);
    finish();
  }
}","public void done(boolean requireRefresh){
  if (Intent.ACTION_VIEW.equals(CommCareVerificationActivity.this.getIntent().getAction())) {
    Intent i=new Intent(getApplicationContext(),CommCareHomeActivity.class);
    i.putExtra(KEY_REQUIRE_REFRESH,requireRefresh);
    startActivity(i);
    finish();
    return;
  }
 else {
    Intent i=new Intent(getIntent());
    i.putExtra(KEY_REQUIRE_REFRESH,requireRefresh);
    setResult(RESULT_OK,i);
    finish();
    return;
  }
}",0.7058823529411765
142211,"@Override public void onResume(){
  super.onResume();
  boolean shouldBeHere=(CommCareApplication._().getVisibleAppRecords().size() == 1 && CommCareApplication._().getReadyAppRecords().size() == 0);
  if (!shouldBeHere) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    this.startActivity(i);
  }
}","@Override public void onResume(){
  super.onResume();
  boolean shouldBeHere=(CommCareApplication._().getVisibleAppRecords().size() == 1 && CommCareApplication._().getReadyAppRecords().size() == 0);
  if (!fromManager && !shouldBeHere) {
    Intent i=new Intent(this,CommCareHomeActivity.class);
    this.startActivity(i);
  }
}",0.975
142212,"/** 
 * TODO: At some point in the future this kind of division will be more central but this generates an input stream for a URL using the best package for your application
 * @param url
 * @return a Stream to that URL 
 */
public InputStream simpleGet(URL url) throws IOException {
  if (android.os.Build.VERSION.SDK_INT > 11) {
    if (passwordAuthentication != null) {
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          return passwordAuthentication;
        }
      }
);
    }
    int responseCode=-1;
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
    setup(con);
    con.connect();
    try {
      responseCode=con.getResponseCode();
      if (responseCode == 301) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        URL newUrl=con.getURL();
        con.disconnect();
        con=(HttpURLConnection)newUrl.openConnection();
        setup(con);
        con.connect();
      }
      if (!HttpRequestGenerator.isValidRedirect(url,con.getURL())) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        throw new IOException(""String_Node_Str"");
      }
      return con.getInputStream();
    }
 catch (    IOException e) {
      if (e.getMessage().toLowerCase().contains(""String_Node_Str"") || responseCode == 401) {
      }
 else {
        throw e;
      }
    }
  }
  Log.i(LOG_COMMCARE_NETWORK,""String_Node_Str"");
  HttpResponse get=get(url.toString());
  if (get.getStatusLine().getStatusCode() == 404) {
    throw new FileNotFoundException(""String_Node_Str"" + url.toString());
  }
  return get.getEntity().getContent();
}","/** 
 * TODO: At some point in the future this kind of division will be more central but this generates an input stream for a URL using the best package for your application
 * @return a Stream to that URL
 */
public InputStream simpleGet(URL url) throws IOException {
  if (android.os.Build.VERSION.SDK_INT > 11) {
    if (passwordAuthentication != null) {
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          return passwordAuthentication;
        }
      }
);
    }
    int responseCode=-1;
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
    setup(con);
    con.connect();
    try {
      responseCode=con.getResponseCode();
      if (responseCode == 301) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        URL newUrl=con.getURL();
        con.disconnect();
        con=(HttpURLConnection)newUrl.openConnection();
        setup(con);
        con.connect();
      }
      if (!HttpRequestGenerator.isValidRedirect(url,con.getURL())) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        throw new IOException(""String_Node_Str"");
      }
      return con.getInputStream();
    }
 catch (    IOException e) {
      if (e.getMessage().toLowerCase().contains(""String_Node_Str"") || responseCode == 401) {
      }
 else {
        throw e;
      }
    }
  }
  Log.i(LOG_COMMCARE_NETWORK,""String_Node_Str"");
  HttpResponse get=get(url.toString());
  if (get.getStatusLine().getStatusCode() == 404) {
    throw new FileNotFoundException(""String_Node_Str"" + url.toString());
  }
  return get.getEntity().getContent();
}",0.9887021217966382
142213,"/** 
 * Http requests are not so simple as ""opening a request"". Occasionally we may have to deal with redirects. We don't want to just accept any redirect, though, since we may be directed away from a secure connection. For now we'll only accept redirects from HTTP -> * servers, or HTTPS -> HTTPS severs on the same domain
 * @param client
 * @param request
 * @return
 */
private HttpResponse execute(HttpClient client,HttpUriRequest request) throws IOException {
  HttpContext context=new BasicHttpContext();
  HttpResponse response=client.execute(request,context);
  HttpUriRequest currentReq=(HttpUriRequest)context.getAttribute(ExecutionContext.HTTP_REQUEST);
  HttpHost currentHost=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
  String currentUrl=currentHost.toURI() + currentReq.getURI();
  URL originalRequest=request.getURI().toURL();
  URL finalRedirect=new URL(currentUrl);
  if (!isValidRedirect(originalRequest,finalRedirect)) {
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + originalRequest.toString() + ""String_Node_Str""+ finalRedirect.toString());
    throw new IOException(""String_Node_Str"");
  }
  return response;
}","/** 
 * Http requests are not so simple as ""opening a request"". Occasionally we may have to deal with redirects. We don't want to just accept any redirect, though, since we may be directed away from a secure connection. For now we'll only accept redirects from HTTP -> * servers, or HTTPS -> HTTPS severs on the same domain
 */
private HttpResponse execute(HttpClient client,HttpUriRequest request) throws IOException {
  HttpContext context=new BasicHttpContext();
  HttpResponse response=client.execute(request,context);
  HttpUriRequest currentReq=(HttpUriRequest)context.getAttribute(ExecutionContext.HTTP_REQUEST);
  HttpHost currentHost=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
  String currentUrl=currentHost.toURI() + currentReq.getURI();
  URL originalRequest=request.getURI().toURL();
  URL finalRedirect=new URL(currentUrl);
  if (!isValidRedirect(originalRequest,finalRedirect)) {
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + originalRequest.toString() + ""String_Node_Str""+ finalRedirect.toString());
    throw new IOException(""String_Node_Str"");
  }
  return response;
}",0.9801210025929128
142214,"/** 
 * @param con
 * @throws IOException
 */
private void setup(HttpURLConnection con) throws IOException {
  con.setConnectTimeout(GlobalConstants.CONNECTION_TIMEOUT);
  con.setReadTimeout(GlobalConstants.CONNECTION_SO_TIMEOUT);
  con.setRequestMethod(""String_Node_Str"");
  con.setDoInput(true);
  con.setInstanceFollowRedirects(true);
}","private void setup(HttpURLConnection con) throws IOException {
  con.setConnectTimeout(GlobalConstants.CONNECTION_TIMEOUT);
  con.setReadTimeout(GlobalConstants.CONNECTION_SO_TIMEOUT);
  con.setRequestMethod(""String_Node_Str"");
  con.setDoInput(true);
  con.setInstanceFollowRedirects(true);
}",0.9272151898734176
142215,"private void dispatchHomeScreen(){
  try {
    if (CommCareApplication._().getAppResourceState() == CommCareApplication.STATE_CORRUPTED || CommCareApplication._().getDatabaseState() == CommCareApplication.STATE_CORRUPTED) {
      if (!CommCareApplication._().isStorageAvailable()) {
        createNoStorageDialog();
      }
 else {
        try {
          CommCareApplication._().getSession();
          showDialog(DIALOG_CORRUPTED);
        }
 catch (        SessionUnavailableException sue) {
          returnToLogin();
        }
      }
    }
 else     if (CommCareApplication._().getAppResourceState() != CommCareApplication.STATE_READY || CommCareApplication._().getDatabaseState() != CommCareApplication.STATE_READY) {
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      this.startActivityForResult(i,INIT_APP);
    }
 else     if (!CommCareApplication._().getCurrentApp().areResourcesValidated() && !DeveloperPreferences.isSuperuserEnabled()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      this.startActivityForResult(i,MISSING_MEDIA_ACTIVITY);
    }
 else     if (!CommCareApplication._().getSession().isActive()) {
      returnToLogin();
    }
 else     if (this.getIntent().hasExtra(SESSION_REQUEST)) {
      wasExternal=true;
      String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
      SessionStateDescriptor ssd=new SessionStateDescriptor();
      ssd.fromBundle(sessionRequest);
      CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
      this.startNextFetch();
      return;
    }
 else     if (this.getIntent().hasExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT)) {
      CommCareApplication._().getCurrentSession().setCommand(this.getIntent().getStringExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT));
      startNextFetch();
      this.getIntent().removeExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT);
    }
 else     if (CommCareApplication._().isUpdatePending()) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
      String ref=prefs.getString(""String_Node_Str"",null);
      i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
      i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
      i.putExtra(CommCareSetupActivity.KEY_AUTO,true);
      startActivityForResult(i,UPGRADE_APP);
      return;
    }
 else     if (CommCareApplication._().isSyncPending(false)) {
      long lastSync=CommCareApplication._().getCurrentApp().getAppPreferences().getLong(""String_Node_Str"",0);
      String footer=lastSync == 0 ? ""String_Node_Str"" : SimpleDateFormat.getDateTimeInstance().format(lastSync);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + footer);
      refreshView();
      this.syncData(false);
    }
 else {
      refreshView();
    }
  }
 catch (  SessionUnavailableException sue) {
    returnToLogin();
  }
}","private void dispatchHomeScreen(){
  try {
    if (CommCareApplication._().getAppResourceState() == CommCareApplication.STATE_CORRUPTED || CommCareApplication._().getDatabaseState() == CommCareApplication.STATE_CORRUPTED) {
      if (!CommCareApplication._().isStorageAvailable()) {
        createNoStorageDialog();
      }
 else {
        try {
          CommCareApplication._().getSession();
          showDialog(DIALOG_CORRUPTED);
        }
 catch (        SessionUnavailableException sue) {
          returnToLogin();
        }
      }
    }
 else     if (CommCareApplication._().getAppResourceState() != CommCareApplication.STATE_READY || CommCareApplication._().getDatabaseState() != CommCareApplication.STATE_READY) {
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      this.startActivityForResult(i,INIT_APP);
    }
 else     if (!CommCareApplication._().getCurrentApp().areResourcesValidated() && !DeveloperPreferences.isSuperuserEnabled()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      this.startActivityForResult(i,MISSING_MEDIA_ACTIVITY);
    }
 else     if (!CommCareApplication._().getSession().isActive()) {
      returnToLogin();
    }
 else     if (this.getIntent().hasExtra(SESSION_REQUEST)) {
      wasExternal=true;
      String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
      SessionStateDescriptor ssd=new SessionStateDescriptor();
      ssd.fromBundle(sessionRequest);
      CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
      this.startNextFetch();
      return;
    }
 else     if (this.getIntent().hasExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT)) {
      CommCareApplication._().getCurrentSession().setCommand(this.getIntent().getStringExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT));
      startNextFetch();
      this.getIntent().removeExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT);
    }
 else     if (CommCareApplication._().isUpdatePending()) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
      String ref=prefs.getString(""String_Node_Str"",null);
      i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
      i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
      i.putExtra(CommCareSetupActivity.KEY_AUTO,true);
      startActivityForResult(i,UPGRADE_APP);
      return;
    }
 else     if (CommCareApplication._().isSyncPending(false)) {
      long lastSync=CommCareApplication._().getCurrentApp().getAppPreferences().getLong(""String_Node_Str"",0);
      String footer=lastSync == 0 ? ""String_Node_Str"" : SimpleDateFormat.getDateTimeInstance().format(lastSync);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + footer);
      refreshView();
      if (!this.checkAndStartUnsentTask(true)) {
        this.syncData(false);
      }
    }
 else {
      refreshView();
    }
  }
 catch (  SessionUnavailableException sue) {
    returnToLogin();
  }
}",0.9904236325271872
142216,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    startNextFetch();
    return;
  }
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        configUi();
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      try {
        CommCareApplication._().getSession().closeSession(false);
      }
 catch (      SessionUnavailableException e) {
      }
    }
    SharedPreferences preferences=CommCareApplication._().getCurrentApp().getAppPreferences();
    preferences.edit().putBoolean(CommCarePreferences.AUTO_TRIGGER_UPDATE,true);
    return;
  }
break;
case PREFERENCES_ACTIVITY:
configUi();
return;
case MEDIA_VALIDATOR_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case DUMP_FORMS_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == DumpTask.BULK_DUMP_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,false);
refreshView();
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),Toast.LENGTH_LONG).show();
refreshView();
return;
}
case CONNECTION_DIAGNOSTIC_ACTIVITY:
return;
case WIFI_DIRECT_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
 else if (resultCode == WipeTask.WIPE_TASK_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(false);
if (isDemoUser()) {
showDemoModeWarning();
}
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(SessionFrame.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(SessionFrame.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
boolean fetchNext=processReturnFromFormEntry(resultCode,intent);
if (!fetchNext) {
return;
}
break;
}
startNextFetch();
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
super.onActivityResult(requestCode,resultCode,intent);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    startNextFetch();
    return;
  }
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        configUi();
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      try {
        CommCareApplication._().getSession().closeSession(false);
      }
 catch (      SessionUnavailableException e) {
      }
    }
    SharedPreferences preferences=CommCareApplication._().getCurrentApp().getAppPreferences();
    preferences.edit().putBoolean(CommCarePreferences.AUTO_TRIGGER_UPDATE,true);
    return;
  }
break;
case PREFERENCES_ACTIVITY:
configUi();
return;
case MEDIA_VALIDATOR_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case DUMP_FORMS_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == DumpTask.BULK_DUMP_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,false);
refreshView();
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),Toast.LENGTH_LONG).show();
refreshView();
return;
}
case CONNECTION_DIAGNOSTIC_ACTIVITY:
return;
case WIFI_DIRECT_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
 else if (resultCode == WipeTask.WIPE_TASK_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
if (!CommCareApplication._().isSyncPending(false)) {
checkAndStartUnsentTask(false);
}
if (isDemoUser()) {
showDemoModeWarning();
}
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(SessionFrame.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(SessionFrame.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
boolean fetchNext=processReturnFromFormEntry(resultCode,intent);
if (!fetchNext) {
return;
}
break;
}
startNextFetch();
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
super.onActivityResult(requestCode,resultCode,intent);
}",0.995032065757384
142217,"private void dispatchHomeScreen(){
  try {
    if (CommCareApplication._().getAppResourceState() == CommCareApplication.STATE_CORRUPTED || CommCareApplication._().getDatabaseState() == CommCareApplication.STATE_CORRUPTED) {
      if (!CommCareApplication._().isStorageAvailable()) {
        createNoStorageDialog();
      }
 else {
        try {
          CommCareApplication._().getSession();
          showDialog(DIALOG_CORRUPTED);
        }
 catch (        SessionUnavailableException sue) {
          returnToLogin();
        }
      }
    }
 else     if (CommCareApplication._().getAppResourceState() != CommCareApplication.STATE_READY || CommCareApplication._().getDatabaseState() != CommCareApplication.STATE_READY) {
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      this.startActivityForResult(i,INIT_APP);
    }
 else     if (!CommCareApplication._().getCurrentApp().areResourcesValidated() && !DeveloperPreferences.isSuperuserEnabled()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      this.startActivityForResult(i,MISSING_MEDIA_ACTIVITY);
    }
 else     if (!CommCareApplication._().getSession().isActive()) {
      returnToLogin();
    }
 else     if (this.getIntent().hasExtra(SESSION_REQUEST)) {
      wasExternal=true;
      String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
      SessionStateDescriptor ssd=new SessionStateDescriptor();
      ssd.fromBundle(sessionRequest);
      CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
      this.startNextFetch();
      return;
    }
 else     if (this.getIntent().hasExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT)) {
      CommCareApplication._().getCurrentSession().setCommand(this.getIntent().getStringExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT));
      startNextFetch();
      this.getIntent().removeExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT);
    }
 else     if (CommCareApplication._().isUpdatePending()) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
      String ref=prefs.getString(""String_Node_Str"",null);
      i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
      i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
      i.putExtra(CommCareSetupActivity.KEY_AUTO,true);
      startActivityForResult(i,UPGRADE_APP);
      return;
    }
 else     if (CommCareApplication._().isSyncPending(false)) {
      long lastSync=CommCareApplication._().getCurrentApp().getAppPreferences().getLong(""String_Node_Str"",0);
      String footer=lastSync == 0 ? ""String_Node_Str"" : SimpleDateFormat.getDateTimeInstance().format(lastSync);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + footer);
      refreshView();
      this.syncData(false);
    }
 else {
      refreshView();
    }
  }
 catch (  SessionUnavailableException sue) {
    returnToLogin();
  }
}","private void dispatchHomeScreen(){
  try {
    if (CommCareApplication._().getAppResourceState() == CommCareApplication.STATE_CORRUPTED || CommCareApplication._().getDatabaseState() == CommCareApplication.STATE_CORRUPTED) {
      if (!CommCareApplication._().isStorageAvailable()) {
        createNoStorageDialog();
      }
 else {
        try {
          CommCareApplication._().getSession();
          showDialog(DIALOG_CORRUPTED);
        }
 catch (        SessionUnavailableException sue) {
          returnToLogin();
        }
      }
    }
 else     if (CommCareApplication._().getAppResourceState() != CommCareApplication.STATE_READY || CommCareApplication._().getDatabaseState() != CommCareApplication.STATE_READY) {
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      this.startActivityForResult(i,INIT_APP);
    }
 else     if (!CommCareApplication._().getCurrentApp().areResourcesValidated() && !DeveloperPreferences.isSuperuserEnabled()) {
      Intent i=new Intent(this,CommCareVerificationActivity.class);
      this.startActivityForResult(i,MISSING_MEDIA_ACTIVITY);
    }
 else     if (!CommCareApplication._().getSession().isActive()) {
      returnToLogin();
    }
 else     if (this.getIntent().hasExtra(SESSION_REQUEST)) {
      wasExternal=true;
      String sessionRequest=this.getIntent().getStringExtra(SESSION_REQUEST);
      SessionStateDescriptor ssd=new SessionStateDescriptor();
      ssd.fromBundle(sessionRequest);
      CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
      this.startNextFetch();
      return;
    }
 else     if (this.getIntent().hasExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT)) {
      CommCareApplication._().getCurrentSession().setCommand(this.getIntent().getStringExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT));
      startNextFetch();
      this.getIntent().removeExtra(AndroidShortcuts.EXTRA_KEY_SHORTCUT);
    }
 else     if (CommCareApplication._().isUpdatePending()) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
      SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
      String ref=prefs.getString(""String_Node_Str"",null);
      i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
      i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
      i.putExtra(CommCareSetupActivity.KEY_AUTO,true);
      startActivityForResult(i,UPGRADE_APP);
      return;
    }
 else     if (CommCareApplication._().isSyncPending(false)) {
      long lastSync=CommCareApplication._().getCurrentApp().getAppPreferences().getLong(""String_Node_Str"",0);
      String footer=lastSync == 0 ? ""String_Node_Str"" : SimpleDateFormat.getDateTimeInstance().format(lastSync);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + footer);
      refreshView();
      if (!this.checkAndStartUnsentTask(true)) {
        this.syncData(false);
      }
    }
 else {
      refreshView();
    }
  }
 catch (  SessionUnavailableException sue) {
    returnToLogin();
  }
}",0.9904236325271872
142218,"public static String getStringRobust(Context c,int resId,String args){
  String resourceName=c.getResources().getResourceEntryName(resId);
  try {
    return Localization.get(""String_Node_Str"" + resourceName,new String[]{args});
  }
 catch (  NoLocalizedTextException e) {
    return c.getString(resId,args);
  }
}","public static String getStringRobust(Context c,int resId,String[] args){
  String resourceName=c.getResources().getResourceEntryName(resId);
  try {
    return Localization.get(""String_Node_Str"" + resourceName,args);
  }
 catch (  NoLocalizedTextException e) {
    return c.getString(resId,args);
  }
}",0.5
142219,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(getString(R.string.app_name) + ""String_Node_Str"" + getString(R.string.get_location));
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mProviders=GeoUtils.evaluateProviders(mLocationManager);
  setupLocationDialog();
  long mLong=-1;
  if (savedInstanceState != null) {
    mLong=savedInstanceState.getLong(""String_Node_Str"",-1);
  }
  if (mLong > 0) {
    mTimer=new ODKTimer(mLong,this);
  }
 else {
    mTimer=new ODKTimer(millisToWait,this);
  }
  mTimer.start();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setTitle(StringUtils.getStringRobust(this,R.string.app_name) + ""String_Node_Str"" + StringUtils.getStringRobust(this,R.string.get_location));
  mLocationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  mProviders=GeoUtils.evaluateProviders(mLocationManager);
  setupLocationDialog();
  long mLong=-1;
  if (savedInstanceState != null) {
    mLong=savedInstanceState.getLong(""String_Node_Str"",-1);
  }
  if (mLong > 0) {
    mTimer=new ODKTimer(mLong,this);
  }
 else {
    mTimer=new ODKTimer(millisToWait,this);
  }
  mTimer.start();
}",0.9323899371069182
142220,"@Override public void onStatusChanged(String provider,int status,Bundle extras){
switch (status) {
case LocationProvider.AVAILABLE:
    if (mLocation != null) {
      mLocationDialog.setMessage(getString(R.string.location_accuracy,(int)mLocation.getAccuracy()));
    }
  break;
case LocationProvider.OUT_OF_SERVICE:
break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
break;
}
}","@Override public void onStatusChanged(String provider,int status,Bundle extras){
switch (status) {
case LocationProvider.AVAILABLE:
    if (mLocation != null) {
      mLocationDialog.setMessage(StringUtils.getStringRobust(this,R.string.location_accuracy,""String_Node_Str"" + (int)mLocation.getAccuracy()));
    }
  break;
case LocationProvider.OUT_OF_SERVICE:
break;
case LocationProvider.TEMPORARILY_UNAVAILABLE:
break;
}
}",0.921544209215442
142221,"@Override public void onLocationChanged(Location location){
  mLocation=location;
  if (mLocation != null) {
    mLocationDialog.setMessage(getString(R.string.location_provider_accuracy,mLocation.getProvider(),truncateDouble(mLocation.getAccuracy())));
    if (mLocation.getAccuracy() <= GeoUtils.GOOD_ACCURACY) {
      returnLocation();
    }
    mLocationDialog.setLocationFound(mLocation.getAccuracy() < GeoUtils.ACCEPTABLE_ACCURACY || mTimer.getMillisUntilFinished() == 0);
  }
}","@Override public void onLocationChanged(Location location){
  mLocation=location;
  if (mLocation != null) {
    String[] args={mLocation.getProvider(),truncateDouble(mLocation.getAccuracy())};
    mLocationDialog.setMessage(StringUtils.getStringRobust(this,R.string.location_provider_accuracy,args));
    if (mLocation.getAccuracy() <= GeoUtils.GOOD_ACCURACY) {
      returnLocation();
    }
    mLocationDialog.setLocationFound(mLocation.getAccuracy() < GeoUtils.ACCEPTABLE_ACCURACY || mTimer.getMillisUntilFinished() == 0);
  }
}",0.8019704433497536
142222,"/** 
 * Sets up the look and actions for the progress dialog while the GPS is searching.
 */
private void setupLocationDialog(){
  OnClickListener cancelButtonListener=new OnClickListener(){
    @Override public void onClick(    View v){
      mLocation=null;
      finish();
    }
  }
;
  OnClickListener okButtonListener=new OnClickListener(){
    public void onClick(    View v){
      returnLocation();
    }
  }
;
  mLocationDialog=new GeoProgressDialog(this,getString(R.string.found_location),getString(R.string.finding_location));
  mLocationDialog.setCancelable(false);
  mLocationDialog.setImage(getResources().getDrawable(R.drawable.green_check_mark));
  mLocationDialog.setMessage(getString(R.string.please_wait_long));
  mLocationDialog.setOKButton(getString(R.string.accept_location),okButtonListener);
  mLocationDialog.setCancelButton(getString(R.string.cancel_location),cancelButtonListener);
}","/** 
 * Sets up the look and actions for the progress dialog while the GPS is searching.
 */
private void setupLocationDialog(){
  OnClickListener cancelButtonListener=new OnClickListener(){
    @Override public void onClick(    View v){
      mLocation=null;
      finish();
    }
  }
;
  OnClickListener okButtonListener=new OnClickListener(){
    public void onClick(    View v){
      returnLocation();
    }
  }
;
  mLocationDialog=new GeoProgressDialog(this,StringUtils.getStringRobust(this,R.string.found_location),StringUtils.getStringRobust(this,R.string.finding_location));
  mLocationDialog.setCancelable(false);
  mLocationDialog.setImage(getResources().getDrawable(R.drawable.green_check_mark));
  mLocationDialog.setMessage(StringUtils.getStringRobust(this,R.string.please_wait_long));
  mLocationDialog.setOKButton(StringUtils.getStringRobust(this,R.string.accept_location),okButtonListener);
  mLocationDialog.setCancelButton(StringUtils.getStringRobust(this,R.string.cancel_location),cancelButtonListener);
}",0.8888888888888888
142223,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  boolean resultSet=false;
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    resultSet=true;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getExtras().getString(key);
    if (!resultSet) {
      resultSet=true;
      this.searchbox.setText(result);
      break;
    }
  }
}
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  boolean resultSet=false;
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    resultSet=true;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getExtras().getString(key);
    if (result != null && !resultSet) {
      resultSet=true;
      this.searchbox.setText(result);
      break;
    }
  }
}
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9953416149068324
142224,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    break;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getStringExtra(key);
    if (result != null) {
      this.searchbox.setText(result);
      break;
    }
  }
}
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
  this.displayReferenceAwesome(r,adapter.getPosition(r));
  updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    break;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getExtras().getString(key);
    if (result != null) {
      this.searchbox.setText(result);
      break;
    }
  }
}
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9919527896995708
142225,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    break;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getStringExtra(key);
    if (result != null) {
      this.searchbox.setText(result);
      break;
    }
  }
}
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
  this.displayReferenceAwesome(r,adapter.getPosition(r));
  updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CALLOUT:
if (resultCode == Activity.RESULT_OK) {
  String result=intent.getStringExtra(""String_Node_Str"");
  if (result != null) {
    this.searchbox.setText(result);
    break;
  }
  Callout callout=shortSelect.getCallout();
  for (  String key : callout.getResponses()) {
    result=intent.getExtras().getString(key);
    if (result != null) {
      this.searchbox.setText(result);
      break;
    }
  }
}
break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK && !mViewMode) {
returnWithResult(intent);
return;
}
 else {
if (mResultIsMap) {
mResultIsMap=false;
Intent i=new Intent(this,EntityMapActivity.class);
this.startActivityForResult(i,MAP_SELECT);
return;
}
if (inAwesomeMode) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (r != null && adapter != null) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
updateSelectedItem(r,true);
}
releaseCurrentMediaEntity();
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
if (inAwesomeMode) {
this.displayReferenceAwesome(r,adapter.getPosition(r));
}
 else {
Intent i=this.getDetailIntent(r,null);
if (mNoDetailMode) {
returnWithResult(i);
}
 else {
mResultIsMap=true;
i.putExtra(""String_Node_Str"",adapter.getPosition(r));
startActivityForResult(i,CONFIRM_SELECT);
}
return;
}
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9919527896995708
142226,"public static void addDisplayToMenu(Context context,Menu menu,int menuId,DisplayUnit display){
  Bitmap b=ViewUtil.inflateDisplayImage(context,display.getImageURI().evaluate());
  MenuItem item=menu.add(0,menuId,menuId,Localizer.clearArguments(display.getText().evaluate()).trim());
  if (b != null) {
    item.setIcon(new BitmapDrawable(context.getResources(),b));
  }
}","public static void addDisplayToMenu(Context context,Menu menu,int menuId,DisplayData display){
  MenuItem item=menu.add(0,menuId,menuId,Localizer.clearArguments(display.getName()).trim());
  if (display.getImageURI() != null) {
    Bitmap b=ViewUtil.inflateDisplayImage(context,display.getImageURI());
    if (b != null) {
      item.setIcon(new BitmapDrawable(context.getResources(),b));
    }
  }
}",0.6355382619974059
142227,"public static void addDisplayToMenu(Context context,Menu menu,int menuId,DisplayUnit display){
  Bitmap b=ViewUtil.inflateDisplayImage(context,display.getImageURI().evaluate());
  MenuItem item=menu.add(0,menuId,menuId,Localizer.clearArguments(display.getText().evaluate()).trim());
  if (b != null) {
    item.setIcon(new BitmapDrawable(context.getResources(),b));
  }
}","public static void addDisplayToMenu(Context context,Menu menu,int menuId,DisplayData display){
  MenuItem item=menu.add(0,menuId,menuId,Localizer.clearArguments(display.getName()).trim());
  if (display.getImageURI() != null) {
    Bitmap b=ViewUtil.inflateDisplayImage(context,display.getImageURI());
    if (b != null) {
      item.setIcon(new BitmapDrawable(context.getResources(),b));
    }
  }
}",0.6355382619974059
142228,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          intent.removeExtra(EntityDetailActivity.CONTEXT_REFERENCE);
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  mViewMode=session.isViewCommand(session.getCommand());
  Callout callout=shortSelect.getCallout();
  if (callout == null) {
    calloutButton=(ImageButton)findViewById(R.id.barcodeButton);
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(""String_Node_Str"");
        try {
          startActivityForResult(i,BARCODE_FETCH);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
 else {
    CalloutData calloutData=callout.evaluate();
    if (calloutData.getImage() != null) {
      setupImageLayout(calloutButton,calloutData.getImage());
    }
    final String actionName=calloutData.getActionName();
    final Hashtable<String,String> extras=calloutData.getExtras();
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(actionName);
        for (        String key : extras.keySet()) {
          i.putExtra(key,extras.get(key));
        }
        try {
          startActivityForResult(i,CALLOUT);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + actionName,Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          intent.removeExtra(EntityDetailActivity.CONTEXT_REFERENCE);
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  mViewMode=session.isViewCommand(session.getCommand());
  Callout callout=shortSelect.getCallout();
  calloutButton=(ImageButton)findViewById(R.id.barcodeButton);
  if (callout == null) {
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(""String_Node_Str"");
        try {
          startActivityForResult(i,BARCODE_FETCH);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
 else {
    CalloutData calloutData=callout.evaluate();
    if (calloutData.getImage() != null) {
      setupImageLayout(calloutButton,calloutData.getImage());
    }
    final String actionName=calloutData.getActionName();
    final Hashtable<String,String> extras=calloutData.getExtras();
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(actionName);
        for (        String key : extras.keySet()) {
          i.putExtra(key,extras.get(key));
        }
        try {
          startActivityForResult(i,CALLOUT);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + actionName,Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}",0.9867412471514398
142229,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          intent.removeExtra(EntityDetailActivity.CONTEXT_REFERENCE);
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  mViewMode=session.isViewCommand(session.getCommand());
  Callout callout=shortSelect.getCallout();
  if (callout == null) {
    calloutButton=(ImageButton)findViewById(R.id.barcodeButton);
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(""String_Node_Str"");
        try {
          startActivityForResult(i,BARCODE_FETCH);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
 else {
    CalloutData calloutData=callout.evaluate();
    if (calloutData.getImage() != null) {
      setupImageLayout(calloutButton,calloutData.getImage());
    }
    final String actionName=calloutData.getActionName();
    final Hashtable<String,String> extras=calloutData.getExtras();
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(actionName);
        for (        String key : extras.keySet()) {
          i.putExtra(key,extras.get(key));
        }
        try {
          startActivityForResult(i,CALLOUT);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + actionName,Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          intent.removeExtra(EntityDetailActivity.CONTEXT_REFERENCE);
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  mViewMode=session.isViewCommand(session.getCommand());
  Callout callout=shortSelect.getCallout();
  calloutButton=(ImageButton)findViewById(R.id.barcodeButton);
  if (callout == null) {
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(""String_Node_Str"");
        try {
          startActivityForResult(i,BARCODE_FETCH);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
 else {
    CalloutData calloutData=callout.evaluate();
    if (calloutData.getImage() != null) {
      setupImageLayout(calloutButton,calloutData.getImage());
    }
    final String actionName=calloutData.getActionName();
    final Hashtable<String,String> extras=calloutData.getExtras();
    calloutButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(actionName);
        for (        String key : extras.keySet()) {
          i.putExtra(key,extras.get(key));
        }
        try {
          startActivityForResult(i,CALLOUT);
        }
 catch (        ActivityNotFoundException anfe) {
          Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"" + actionName,Toast.LENGTH_LONG);
          noReader.show();
        }
      }
    }
);
  }
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}",0.9867412471514398
142230,"public AndroidCaseInstanceTreeElement(AbstractTreeElement instanceRoot,SqlStorage<ACase> storage,boolean reportMode){
  super(instanceRoot,storage,reportMode);
  mCaseIndexTable=new CaseIndexTable();
}","public AndroidCaseInstanceTreeElement(AbstractTreeElement instanceRoot,SqlStorage<ACase> storage,boolean reportMode,CaseIndexTable caseIndexTable){
  super(instanceRoot,storage,reportMode);
  mCaseIndexTable=caseIndexTable;
}",0.8497652582159625
142231,"@Before public void setupTests(){
  PrototypeFactory.setStaticHasher(factory);
  AndroidUtil.initializeStaticHandlers();
}","@Before public void setupTests(){
  TestUtils.initializeStaticTestStorage();
}",0.65
142232,"@Test public void testTypeChange(){
  processResourceTransaction(""String_Node_Str"");
  Case c=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getTypeId());
  processResourceTransaction(""String_Node_Str"");
  Case c2=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c2.getTypeId());
}","@Test public void testTypeChange(){
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getTypeId());
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c2=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c2.getTypeId());
}",0.9564270152505446
142233,"@Test public void testIndexRemoval(){
  processResourceTransaction(""String_Node_Str"");
  Case c=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getName());
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getPropertyString(""String_Node_Str""));
  processResourceTransaction(""String_Node_Str"");
  Case c2=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c2.getPropertyString(""String_Node_Str""));
  processResourceTransaction(""String_Node_Str"");
  Case c3=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c3.getIndices().elementAt(0).getTarget());
  processResourceTransaction(""String_Node_Str"");
  Case c4=getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",0,c4.getIndices().size());
}","@Test public void testIndexRemoval(){
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getName());
  assertEquals(""String_Node_Str"",""String_Node_Str"",c.getPropertyString(""String_Node_Str""));
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c2=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c2.getPropertyString(""String_Node_Str""));
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c3=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",c3.getIndices().elementAt(0).getTarget());
  TestUtils.processResourceTransaction(""String_Node_Str"");
  Case c4=TestUtils.getCaseStorage().getRecordForValue(ACase.INDEX_CASE_ID,""String_Node_Str"");
  assertEquals(""String_Node_Str"",0,c4.getIndices().size());
}",0.9607072691552064
142234,"public MenuAdapter(Context context,CommCarePlatform platform,String menuID){
  this.mPlatform=platform;
  this.context=context;
  Vector<Object> items=new Vector<Object>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  asw=CommCareApplication._().getCurrentSessionWrapper();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          if (ec == null) {
            ec=asw.getEvaluationContext();
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (m.getId().equals(menuID)) {
        if (menuTitle == null) {
          try {
            menuTitle=m.getName().evaluate();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        for (        String command : m.getCommandIds()) {
          try {
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              if (ec == null) {
                ec=asw.getEvaluationContext();
              }
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + ret);
                throw new RuntimeException(""String_Node_Str"" + ret);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (asw.getSession().getNeededDatum(e) == null) {
                continue;
              }
            }
            items.add(e);
          }
 catch (          XPathSyntaxException xpse) {
            String xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
            CommCareApplication._().triggerHandledAppExit(context,Localization.get(""String_Node_Str"",new String[]{xpathExpression,xpse.getMessage()}));
            objectData=new Object[0];
            return;
          }
catch (          XPathException xpe) {
            String xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
            CommCareApplication._().triggerHandledAppExit(context,Localization.get(""String_Node_Str"",new String[]{xpathExpression,xpe.getMessage()}));
            objectData=new Object[0];
            return;
          }
        }
        continue;
      }
      if (menuID.equals(m.getRoot())) {
        boolean idExists=false;
        for (        Object o : items) {
          if (o instanceof Menu) {
            if (((Menu)o).getId().equals(m.getId())) {
              idExists=true;
              break;
            }
          }
        }
        if (!idExists) {
          items.add(m);
        }
      }
    }
  }
  objectData=new Object[items.size()];
  items.copyInto(objectData);
}","public MenuAdapter(Context context,CommCarePlatform platform,String menuID){
  this.mPlatform=platform;
  this.context=context;
  Vector<Object> items=new Vector<Object>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  asw=CommCareApplication._().getCurrentSessionWrapper();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          if (ec == null) {
            ec=asw.getEvaluationContext(m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (m.getId().equals(menuID)) {
        if (menuTitle == null) {
          try {
            menuTitle=m.getName().evaluate();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        for (        String command : m.getCommandIds()) {
          try {
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              if (ec == null) {
                ec=asw.getEvaluationContext();
              }
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + ret);
                throw new RuntimeException(""String_Node_Str"" + ret);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (asw.getSession().getNeededDatum(e) == null) {
                continue;
              }
            }
            items.add(e);
          }
 catch (          XPathSyntaxException xpse) {
            String xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
            CommCareApplication._().triggerHandledAppExit(context,Localization.get(""String_Node_Str"",new String[]{xpathExpression,xpse.getMessage()}));
            objectData=new Object[0];
            return;
          }
catch (          XPathException xpe) {
            String xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
            CommCareApplication._().triggerHandledAppExit(context,Localization.get(""String_Node_Str"",new String[]{xpathExpression,xpe.getMessage()}));
            objectData=new Object[0];
            return;
          }
        }
        continue;
      }
      if (menuID.equals(m.getRoot())) {
        boolean idExists=false;
        for (        Object o : items) {
          if (o instanceof Menu) {
            if (((Menu)o).getId().equals(m.getId())) {
              idExists=true;
              break;
            }
          }
        }
        if (!idExists) {
          items.add(m);
        }
      }
    }
  }
  objectData=new Object[items.size()];
  items.copyInto(objectData);
}",0.9986423291597526
142235,"public EvaluationContext getEvaluationContext(){
  return session.getEvaluationContext(getIIF());
}","/** 
 * @param commandId The id of the command to evaluate against
 * @return The evaluation context relevant for the provided command id 
 */
public EvaluationContext getEvaluationContext(String commandId){
  return session.getEvaluationContext(getIIF(),commandId);
}",0.5395095367847411
142236,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(localize(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
 else         if (oldActivity.selectedIntent != null) {
          startActivityForResult(oldActivity.selectedIntent,CONFIRM_SELECT);
          startOther=true;
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && (prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str""))) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.createDataSetObserver();
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    asw=CommCareApplication._().getCurrentSessionWrapper();
    session=asw.getSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  shortSelect=session.getDetail(selectDatum.getShortDetail());
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(localize(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        Intent intent=this.getIntent();
        TreeReference selectedRef=SerializationUtil.deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
        if (selectedRef != null) {
          intent.removeExtra(EntityDetailActivity.CONTEXT_REFERENCE);
          Intent detailIntent=getDetailIntent(selectedRef,null);
          startOther=true;
          startActivityForResult(detailIntent,CONFIRM_SELECT);
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchLabel.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      searchbox.performClick();
      InputMethodManager inputMethodManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.showSoftInput(searchbox,InputMethodManager.SHOW_IMPLICIT);
    }
  }
);
  searchbox=(EditText)findViewById(R.id.searchbox);
  searchbox.setMaxLines(3);
  searchbox.setHorizontallyScrolling(false);
  searchResultStatus=(TextView)findViewById(R.id.no_search_results);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && (prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str""))) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    if (adapter != null) {
      adapter.setController(this);
      ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
      findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
      adapter.unregisterDataSetObserver(oldActivity.mListStateObserver);
      adapter.registerDataSetObserver(this.mListStateObserver);
    }
  }
}",0.9709090909090908
142237,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    startNextFetch();
    return;
  }
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        configUi();
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().getSession().startLogout();
    }
    SharedPreferences preferences=CommCareApplication._().getCurrentApp().getAppPreferences();
    preferences.edit().putBoolean(CommCarePreferences.AUTO_TRIGGER_UPDATE,true);
    return;
  }
break;
case PREFERENCES_ACTIVITY:
configUi();
return;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case DUMP_FORMS_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == DumpTask.BULK_DUMP_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,false);
refreshView();
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),Toast.LENGTH_LONG).show();
refreshView();
return;
}
case CONNECTION_DIAGNOSTIC_ACTIVITY:
return;
case WIFI_DIRECT_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
 else if (resultCode == WipeTask.WIPE_TASK_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(false);
if (isDemoUser()) {
showDemoModeWarning();
}
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(SessionFrame.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(SessionFrame.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
if (!CommCareApplication._().getSession().isLoggedIn()) {
CommCareApplication._().getCurrentSessionWrapper().reset();
returnToLogin();
}
 else {
processReturnFromFormEntry(resultCode,intent);
}
break;
}
startNextFetch();
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
super.onActivityResult(requestCode,resultCode,intent);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (resultCode == RESULT_RESTART) {
    startNextFetch();
    return;
  }
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        configUi();
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().logout();
    }
    SharedPreferences preferences=CommCareApplication._().getCurrentApp().getAppPreferences();
    preferences.edit().putBoolean(CommCarePreferences.AUTO_TRIGGER_UPDATE,true);
    return;
  }
break;
case PREFERENCES_ACTIVITY:
configUi();
return;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
return;
}
case DUMP_FORMS_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == DumpTask.BULK_DUMP_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,false);
refreshView();
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareFormDumpActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),Toast.LENGTH_LONG).show();
refreshView();
return;
}
case CONNECTION_DIAGNOSTIC_ACTIVITY:
return;
case WIFI_DIRECT_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == SendTask.BULK_SEND_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
 else if (resultCode == WipeTask.WIPE_TASK_ID) {
int dumpedCount=intent.getIntExtra(CommCareWiFiDirectActivity.KEY_NUMBER_DUMPED,-1);
displayMessage(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + dumpedCount}),false,true);
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
refreshView();
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(false);
if (isDemoUser()) {
showDemoModeWarning();
}
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(""String_Node_Str"",-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getUserStorage(FormRecord.class).read(record);
SqlStorage<SessionStateDescriptor> ssdStorage=CommCareApplication._().getUserStorage(SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(SessionFrame.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(SessionFrame.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
if (!CommCareApplication._().getSession().isLoggedIn()) {
CommCareApplication._().getCurrentSessionWrapper().reset();
returnToLogin();
}
 else {
processReturnFromFormEntry(resultCode,intent);
}
break;
}
startNextFetch();
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
super.onActivityResult(requestCode,resultCode,intent);
}",0.9981227707903136
142238,"/** 
 * Process user returning home from the form entry activity. Triggers form submission cycle, cleans up some session state.
 * @param resultCode exit code of form entry activity
 * @param intent points to form instance
 */
private void processReturnFromFormEntry(int resultCode,Intent intent){
  AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
  FormRecord current=currentState.getFormRecord();
  if (FormRecord.STATUS_COMPLETE.equals(current.getStatus()) || FormRecord.STATUS_SAVED.equals(current.getStatus()) || FormRecord.STATUS_UNSENT.equals(current.getStatus())) {
    currentState.reset();
    if (wasExternal) {
      this.finish();
    }
 else {
      goToFormArchive(false,current);
    }
    return;
  }
  if (resultCode == RESULT_OK) {
    Uri resultInstanceURI=intent.getData();
    if (resultInstanceURI == null) {
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
      Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
      clearSessionAndExit(currentState);
      return;
    }
    Cursor c=getContentResolver().query(resultInstanceURI,null,null,null,null);
    if (!c.moveToFirst()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String instanceStatus=c.getString(c.getColumnIndexOrThrow(InstanceProviderAPI.InstanceColumns.STATUS));
    boolean complete=InstanceProviderAPI.STATUS_COMPLETE.equals(instanceStatus);
    if (complete) {
      checkAndStartUnsentTask(false);
      refreshView();
      if (wasExternal) {
        this.finish();
      }
      if (!currentState.terminateSession()) {
        return;
      }
    }
 else {
      clearSessionAndExit(currentState);
      return;
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
    if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
      FormRecordCleanupTask.wipeRecord(this,currentState);
    }
    currentState.reset();
    if (wasExternal) {
      this.finish();
      return;
    }
 else     if (current.getStatus().equals(FormRecord.STATUS_INCOMPLETE)) {
      goToFormArchive(true,current);
      return;
    }
 else {
      currentState.getSession().stepBack();
      currentState.setFormRecordId(-1);
    }
  }
}","/** 
 * Process user returning home from the form entry activity. Triggers form submission cycle, cleans up some session state.
 * @param resultCode exit code of form entry activity
 * @param intent points to form instance
 */
private void processReturnFromFormEntry(int resultCode,Intent intent){
  AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
  FormRecord current=currentState.getFormRecord();
  if (current == null) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
    Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
    clearSessionAndExit(currentState);
  }
  if (FormRecord.STATUS_COMPLETE.equals(current.getStatus()) || FormRecord.STATUS_SAVED.equals(current.getStatus()) || FormRecord.STATUS_UNSENT.equals(current.getStatus())) {
    currentState.reset();
    if (wasExternal) {
      this.finish();
    }
 else {
      goToFormArchive(false,current);
    }
    return;
  }
  if (resultCode == RESULT_OK) {
    Uri resultInstanceURI=intent.getData();
    if (resultInstanceURI == null) {
      CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
      Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
      clearSessionAndExit(currentState);
      return;
    }
    Cursor c=getContentResolver().query(resultInstanceURI,null,null,null,null);
    if (!c.moveToFirst()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String instanceStatus=c.getString(c.getColumnIndexOrThrow(InstanceProviderAPI.InstanceColumns.STATUS));
    boolean complete=InstanceProviderAPI.STATUS_COMPLETE.equals(instanceStatus);
    if (complete) {
      checkAndStartUnsentTask(false);
      refreshView();
      if (wasExternal) {
        this.finish();
      }
      if (!currentState.terminateSession()) {
        return;
      }
    }
 else {
      clearSessionAndExit(currentState);
      return;
    }
  }
 else   if (resultCode == RESULT_CANCELED) {
    Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
    if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
      FormRecordCleanupTask.wipeRecord(this,currentState);
    }
    currentState.reset();
    if (wasExternal) {
      this.finish();
      return;
    }
 else     if (current.getStatus().equals(FormRecord.STATUS_INCOMPLETE)) {
      goToFormArchive(true,current);
      return;
    }
 else {
      currentState.getSession().stepBack();
      currentState.setFormRecordId(-1);
    }
  }
}",0.7389830508474576
142239,"/** 
 * Begin closing down the session by notifying any pending forms that they need to saved and waiting for that to occur before closing down key pool and user database.
 */
public void startLogout(){
  this.sendBroadcast(new Intent(KEY_SESSION_ENDING));
  if (formSaver != null) {
    formSaver.formSaveCallback();
  }
}","/** 
 * Begin closing down the session by notifying any pending form that it needs to save. Logout is then completed in finishLogout after waiting for the form save to finish/timeout, after which key pool and user database are closed down.
 */
public void startLogout(){
  if (formSaver != null) {
    formSaver.formSaveCallback();
  }
}",0.5181818181818182
142240,"/** 
 * Conclude closing down the session by closing down key pool and user database.
 */
public void finishLogout(){
synchronized (lock) {
    key=null;
    String msg=""String_Node_Str"";
    Intent i=new Intent(""String_Node_Str"");
    this.sendBroadcast(i);
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,msg);
    if (user != null) {
      if (user.getUsername() != null) {
        msg=""String_Node_Str"" + user.getUsername();
      }
      user=null;
    }
    if (userDatabase != null) {
      if (userDatabase.isOpen()) {
        userDatabase.close();
      }
      userDatabase=null;
    }
    if (maintenanceTimer != null) {
      maintenanceTimer.cancel();
    }
    logoutStartedAt=-1;
    pool.expire();
    this.stopForeground(true);
  }
}","/** 
 * Conclude closing down the session by closing down key pool and user database.
 */
public void finishLogout(){
synchronized (lock) {
    if (!isLoggedIn()) {
      return;
    }
    key=null;
    String msg=""String_Node_Str"";
    Intent i=new Intent(""String_Node_Str"");
    this.sendBroadcast(i);
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,msg);
    if (user != null) {
      if (user.getUsername() != null) {
        msg=""String_Node_Str"" + user.getUsername();
      }
      user=null;
    }
    if (userDatabase != null) {
      if (userDatabase.isOpen()) {
        userDatabase.close();
      }
      userDatabase=null;
    }
    if (maintenanceTimer != null) {
      maintenanceTimer.cancel();
    }
    logoutStartedAt=-1;
    pool.expire();
    this.stopForeground(true);
  }
}",0.9707981829980532
142241,"private void maintenance(){
  long time=new Date().getTime();
  if (logoutStartedAt != -1 && time > (logoutStartedAt + LOGOUT_TIMEOUT)) {
    finishLogout();
  }
  if (isLoggedIn() && logoutStartedAt == -1 && (time > sessionExpireDate.getTime() || (sessionExpireDate.getTime() - time > SESSION_LENGTH))) {
    logoutStartedAt=new Date().getTime();
    startLogout();
    showLoggedOutNotification();
  }
}","private void maintenance(){
  long time=new Date().getTime();
  if (logoutStartedAt != -1 && time > (logoutStartedAt + LOGOUT_TIMEOUT)) {
    finishLogout();
    Intent loginIntent=new Intent(getApplicationContext(),CommCareHomeActivity.class);
    loginIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
    loginIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(loginIntent);
  }
  if (isLoggedIn() && logoutStartedAt == -1 && (time > sessionExpireDate.getTime() || (sessionExpireDate.getTime() - time > SESSION_LENGTH))) {
    logoutStartedAt=new Date().getTime();
    CommCareApplication._().logout();
    showLoggedOutNotification();
  }
}",0.7457943925233644
142242,"public void formSaveCallback(){
  savingFormOnKeySessionExpiration=true;
  saveDataToDisk(EXIT,false,null,true);
}","public void formSaveCallback(){
  if (!hasSaved) {
    savingFormOnKeySessionExpiration=true;
    saveDataToDisk(EXIT,false,null,true);
  }
}",0.8941176470588236
142243,"@Override protected void onPause(){
  super.onPause();
  dismissDialogs();
  if (mCurrentView != null && currentPromptIsQuestion()) {
    saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);
  }
  if (mNoGPSReceiver != null) {
    unregisterReceiver(mNoGPSReceiver);
  }
  if (mKeySessionCloseReceiver != null) {
    unregisterReceiver(mKeySessionCloseReceiver);
  }
}","@Override protected void onPause(){
  super.onPause();
  dismissDialogs();
  if (mCurrentView != null && currentPromptIsQuestion()) {
    saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);
  }
  if (mNoGPSReceiver != null) {
    unregisterReceiver(mNoGPSReceiver);
  }
}",0.8523076923076923
142244,"/** 
 * Setup BroadcastReceivers for: - going to login screen when key session closes - asking user if they want to enable gps
 */
private void registerFormEntryReceivers(){
  mKeySessionCloseReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Intent i=new Intent(getApplicationContext(),LoginActivity.class);
      i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      startActivity(i);
    }
  }
;
  registerReceiver(mKeySessionCloseReceiver,new IntentFilter(CommCareSessionService.KEY_SESSION_ENDING));
  mNoGPSReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      context.removeStickyBroadcast(intent);
      LocationManager manager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
      Set<String> providers=GeoUtils.evaluateProviders(manager);
      if (providers.isEmpty()) {
        DialogInterface.OnClickListener onChangeListener=new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int i){
            if (i == DialogInterface.BUTTON_POSITIVE) {
              Intent intent=new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
              startActivity(intent);
            }
          }
        }
;
        GeoUtils.showNoGpsDialog(FormEntryActivity.this,onChangeListener);
      }
    }
  }
;
  registerReceiver(mNoGPSReceiver,new IntentFilter(GeoUtils.ACTION_CHECK_GPS_ENABLED));
}","/** 
 * Setup BroadcastReceiver for asking user if they want to enable gps
 */
private void registerFormEntryReceivers(){
  mNoGPSReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      context.removeStickyBroadcast(intent);
      LocationManager manager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
      Set<String> providers=GeoUtils.evaluateProviders(manager);
      if (providers.isEmpty()) {
        DialogInterface.OnClickListener onChangeListener=new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int i){
            if (i == DialogInterface.BUTTON_POSITIVE) {
              Intent intent=new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
              startActivity(intent);
            }
          }
        }
;
        GeoUtils.showNoGpsDialog(FormEntryActivity.this,onChangeListener);
      }
    }
  }
;
  registerReceiver(mNoGPSReceiver,new IntentFilter(GeoUtils.ACTION_CHECK_GPS_ENABLED));
}",0.8263380824027724
142245,"/** 
 * {@inheritDoc}Display save status notification and exit or continue on in the form. If form entry is being saved because key session is expiring then broadcast the successful save.
 * @see org.odk.collect.android.listeners.FormSavedListener#savingComplete(int)
 */
@Override public void savingComplete(int saveStatus,boolean headless){
  if (!headless) {
    dismissDialog(SAVING_DIALOG);
  }
  if (savingFormOnKeySessionExpiration) {
    CommCareApplication._().getSession().finishLogout();
    savingFormOnKeySessionExpiration=false;
    return;
  }
 else {
switch (saveStatus) {
case SaveToDiskTask.SAVED:
      Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_ok),Toast.LENGTH_SHORT).show();
    hasSaved=true;
  break;
case SaveToDiskTask.SAVED_AND_EXIT:
Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_ok),Toast.LENGTH_SHORT).show();
hasSaved=true;
finishReturnInstance();
break;
case SaveToDiskTask.SAVE_ERROR:
Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_error),Toast.LENGTH_LONG).show();
break;
case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:
case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:
refreshCurrentView();
next();
break;
}
}
}","/** 
 * {@inheritDoc}Display save status notification and exit or continue on in the form. If form entry is being saved because key session is expiring then broadcast the successful save.
 * @see org.odk.collect.android.listeners.FormSavedListener#savingComplete(int)
 */
@Override public void savingComplete(int saveStatus,boolean headless){
  if (!headless) {
    dismissDialog(SAVING_DIALOG);
  }
  if (savingFormOnKeySessionExpiration) {
    try {
      CommCareApplication._().getSession().finishLogout();
    }
 catch (    SessionUnavailableException sue) {
    }
    savingFormOnKeySessionExpiration=false;
    if (saveStatus == SaveToDiskTask.SAVED || saveStatus == SaveToDiskTask.SAVED_AND_EXIT) {
      hasSaved=true;
    }
    Intent loginIntent=new Intent(getApplicationContext(),CommCareHomeActivity.class);
    loginIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
    loginIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(loginIntent);
    return;
  }
 else {
switch (saveStatus) {
case SaveToDiskTask.SAVED:
      Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_ok),Toast.LENGTH_SHORT).show();
    hasSaved=true;
  break;
case SaveToDiskTask.SAVED_AND_EXIT:
Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_ok),Toast.LENGTH_SHORT).show();
hasSaved=true;
finishReturnInstance();
break;
case SaveToDiskTask.SAVE_ERROR:
Toast.makeText(this,StringUtils.getStringSpannableRobust(this,R.string.data_saved_error),Toast.LENGTH_LONG).show();
break;
case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:
case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY:
refreshCurrentView();
next();
break;
}
}
}",0.8538565629228687
142246,"public void setParams(FormRecord record,String dataTitle,Long timestamp) throws SessionUnavailableException {
  if (names.containsKey(record.getFormNamespace())) {
    Text name=names.get(record.getFormNamespace());
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),name.evaluate()));
  }
 else {
    formExists=false;
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
  }
  if (dataTitle != null) {
    mLowerTextView.setText(dataTitle);
  }
  if (timestamp != 0) {
    mRightTextView.setText(DateUtils.formatSameDayTime(timestamp,start.getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT));
  }
 else {
    mRightTextView.setText(""String_Node_Str"");
  }
  if (record.getStatus() == FormRecord.STATUS_UNSENT) {
    mUpperRight.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
    mUpperRight.setTextAppearance(getContext(),R.style.WarningTextStyle);
    mUpperRight.setCompoundDrawablesWithIntrinsicBounds(null,null,rightHandSync,null);
  }
 else {
    mUpperRight.setText(""String_Node_Str"");
    mUpperRight.setCompoundDrawables(null,null,null,null);
  }
}","public void setParams(FormRecord record,String dataTitle,Long timestamp) throws SessionUnavailableException {
  if (names.containsKey(record.getFormNamespace())) {
    Text name=names.get(record.getFormNamespace());
    mPrimaryTextView.setText(MarkupUtil.styleSpannable(IncompleteFormRecordView.this.getContext(),name.evaluate()));
  }
 else {
    formExists=false;
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
  }
  if (dataTitle != null) {
    mLowerTextView.setText(dataTitle);
  }
  if (timestamp != 0) {
    mRightTextView.setText(DateUtils.formatSameDayTime(timestamp,start.getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT));
  }
 else {
    mRightTextView.setText(""String_Node_Str"");
  }
  if (record.getStatus() == FormRecord.STATUS_UNSENT) {
    mUpperRight.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
    mUpperRight.setTextAppearance(getContext(),R.style.WarningTextStyle);
    mUpperRight.setCompoundDrawablesWithIntrinsicBounds(null,null,rightHandSync,null);
  }
 else {
    mUpperRight.setText(""String_Node_Str"");
    mUpperRight.setCompoundDrawables(null,null,null,null);
  }
}",0.995967741935484
142247,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  btnRunTest.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ConnectionDiagnosticTask<ConnectionDiagnosticActivity> mConnectionDiagnosticTask=new ConnectionDiagnosticTask<ConnectionDiagnosticActivity>(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform()){
        @Override protected void deliverResult(        ConnectionDiagnosticActivity receiver,        ConnectionDiagnosticTask.Test failedTest){
          if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
            String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
            receiver.txtInteractiveMessages.setText(localize(displayMessage));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.reportButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == null) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.INVISIBLE);
            receiver.reportButton.setVisibility(View.INVISIBLE);
          }
          return;
        }
        @Override protected void deliverUpdate(        ConnectionDiagnosticActivity receiver,        String... update){
          receiver.txtInteractiveMessages.setText((Localization.get(""String_Node_Str"")));
        }
        @Override protected void deliverError(        ConnectionDiagnosticActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mConnectionDiagnosticTask.connect(ConnectionDiagnosticActivity.this);
      mConnectionDiagnosticTask.execute();
    }
  }
);
  this.settingsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
    }
  }
);
  this.reportButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      String url=settings.getString(""String_Node_Str"",null);
      if (url != null) {
        LogSubmissionTask reportSubmitter=new LogSubmissionTask(CommCareApplication._(),true,CommCareApplication._().getSession().startDataSubmissionListener(R.string.submission_logs_title),url);
        reportSubmitter.execute();
        ConnectionDiagnosticActivity.this.finish();
        Toast.makeText(CommCareApplication._(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      }
 else {
        Logger.log(ConnectionDiagnosticTask.CONNECTION_DIAGNOSTIC_REPORT,logUnsetPostURLMessage);
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setText(MarkupUtil.localizeStyleSpannable(ConnectionDiagnosticActivity.this,""String_Node_Str""));
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setVisibility(View.VISIBLE);
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  btnRunTest.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ConnectionDiagnosticTask<ConnectionDiagnosticActivity> mConnectionDiagnosticTask=new ConnectionDiagnosticTask<ConnectionDiagnosticActivity>(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform()){
        @Override protected void deliverResult(        ConnectionDiagnosticActivity receiver,        ConnectionDiagnosticTask.Test failedTest){
          if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
            String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
            receiver.txtInteractiveMessages.setText(displayMessage);
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.reportButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == null) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.INVISIBLE);
            receiver.reportButton.setVisibility(View.INVISIBLE);
          }
          return;
        }
        @Override protected void deliverUpdate(        ConnectionDiagnosticActivity receiver,        String... update){
          receiver.txtInteractiveMessages.setText((Localization.get(""String_Node_Str"")));
        }
        @Override protected void deliverError(        ConnectionDiagnosticActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mConnectionDiagnosticTask.connect(ConnectionDiagnosticActivity.this);
      mConnectionDiagnosticTask.execute();
    }
  }
);
  this.settingsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
    }
  }
);
  this.reportButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      String url=settings.getString(""String_Node_Str"",null);
      if (url != null) {
        LogSubmissionTask reportSubmitter=new LogSubmissionTask(CommCareApplication._(),true,CommCareApplication._().getSession().startDataSubmissionListener(R.string.submission_logs_title),url);
        reportSubmitter.execute();
        ConnectionDiagnosticActivity.this.finish();
        Toast.makeText(CommCareApplication._(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      }
 else {
        Logger.log(ConnectionDiagnosticTask.CONNECTION_DIAGNOSTIC_REPORT,logUnsetPostURLMessage);
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setText(MarkupUtil.localizeStyleSpannable(ConnectionDiagnosticActivity.this,""String_Node_Str""));
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setVisibility(View.VISIBLE);
      }
    }
  }
);
}",0.9986641731231632
142248,"@Override protected void deliverResult(ConnectionDiagnosticActivity receiver,ConnectionDiagnosticTask.Test failedTest){
  if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
    String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
    receiver.txtInteractiveMessages.setText(localize(displayMessage));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.reportButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == null) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.INVISIBLE);
    receiver.reportButton.setVisibility(View.INVISIBLE);
  }
  return;
}","@Override protected void deliverResult(ConnectionDiagnosticActivity receiver,ConnectionDiagnosticTask.Test failedTest){
  if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
    String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
    receiver.txtInteractiveMessages.setText(displayMessage);
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.reportButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == null) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.INVISIBLE);
    receiver.reportButton.setVisibility(View.INVISIBLE);
  }
  return;
}",0.9957555178268253
142249,"public void setParams(FormRecord record,String dataTitle,Long timestamp) throws SessionUnavailableException {
  if (names.containsKey(record.getFormNamespace())) {
    Text name=names.get(record.getFormNamespace());
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),name.evaluate()));
  }
 else {
    formExists=false;
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
  }
  if (dataTitle != null) {
    mLowerTextView.setText(dataTitle);
  }
  if (timestamp != 0) {
    mRightTextView.setText(DateUtils.formatSameDayTime(timestamp,start.getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT));
  }
 else {
    mRightTextView.setText(""String_Node_Str"");
  }
  if (record.getStatus() == FormRecord.STATUS_UNSENT) {
    mUpperRight.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
    mUpperRight.setTextAppearance(getContext(),R.style.WarningTextStyle);
    mUpperRight.setCompoundDrawablesWithIntrinsicBounds(null,null,rightHandSync,null);
  }
 else {
    mUpperRight.setText(""String_Node_Str"");
    mUpperRight.setCompoundDrawables(null,null,null,null);
  }
}","public void setParams(FormRecord record,String dataTitle,Long timestamp) throws SessionUnavailableException {
  if (names.containsKey(record.getFormNamespace())) {
    Text name=names.get(record.getFormNamespace());
    mPrimaryTextView.setText(MarkupUtil.styleSpannable(IncompleteFormRecordView.this.getContext(),name.evaluate()));
  }
 else {
    formExists=false;
    mPrimaryTextView.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
  }
  if (dataTitle != null) {
    mLowerTextView.setText(dataTitle);
  }
  if (timestamp != 0) {
    mRightTextView.setText(DateUtils.formatSameDayTime(timestamp,start.getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT));
  }
 else {
    mRightTextView.setText(""String_Node_Str"");
  }
  if (record.getStatus() == FormRecord.STATUS_UNSENT) {
    mUpperRight.setText(MarkupUtil.localizeStyleSpannable(IncompleteFormRecordView.this.getContext(),""String_Node_Str""));
    mUpperRight.setTextAppearance(getContext(),R.style.WarningTextStyle);
    mUpperRight.setCompoundDrawablesWithIntrinsicBounds(null,null,rightHandSync,null);
  }
 else {
    mUpperRight.setText(""String_Node_Str"");
    mUpperRight.setCompoundDrawables(null,null,null,null);
  }
}",0.995967741935484
142250,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  btnRunTest.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ConnectionDiagnosticTask<ConnectionDiagnosticActivity> mConnectionDiagnosticTask=new ConnectionDiagnosticTask<ConnectionDiagnosticActivity>(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform()){
        @Override protected void deliverResult(        ConnectionDiagnosticActivity receiver,        ConnectionDiagnosticTask.Test failedTest){
          if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
            String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
            receiver.txtInteractiveMessages.setText(localize(displayMessage));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.reportButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == null) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.INVISIBLE);
            receiver.reportButton.setVisibility(View.INVISIBLE);
          }
          return;
        }
        @Override protected void deliverUpdate(        ConnectionDiagnosticActivity receiver,        String... update){
          receiver.txtInteractiveMessages.setText((Localization.get(""String_Node_Str"")));
        }
        @Override protected void deliverError(        ConnectionDiagnosticActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mConnectionDiagnosticTask.connect(ConnectionDiagnosticActivity.this);
      mConnectionDiagnosticTask.execute();
    }
  }
);
  this.settingsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
    }
  }
);
  this.reportButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      String url=settings.getString(""String_Node_Str"",null);
      if (url != null) {
        LogSubmissionTask reportSubmitter=new LogSubmissionTask(CommCareApplication._(),true,CommCareApplication._().getSession().startDataSubmissionListener(R.string.submission_logs_title),url);
        reportSubmitter.execute();
        ConnectionDiagnosticActivity.this.finish();
        Toast.makeText(CommCareApplication._(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      }
 else {
        Logger.log(ConnectionDiagnosticTask.CONNECTION_DIAGNOSTIC_REPORT,logUnsetPostURLMessage);
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setText(MarkupUtil.localizeStyleSpannable(ConnectionDiagnosticActivity.this,""String_Node_Str""));
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setVisibility(View.VISIBLE);
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  btnRunTest.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      ConnectionDiagnosticTask<ConnectionDiagnosticActivity> mConnectionDiagnosticTask=new ConnectionDiagnosticTask<ConnectionDiagnosticActivity>(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform()){
        @Override protected void deliverResult(        ConnectionDiagnosticActivity receiver,        ConnectionDiagnosticTask.Test failedTest){
          if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
            String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
            receiver.txtInteractiveMessages.setText(displayMessage);
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.reportButton.setVisibility(View.VISIBLE);
          }
 else           if (failedTest == null) {
            receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
            receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
            receiver.settingsButton.setVisibility(View.INVISIBLE);
            receiver.reportButton.setVisibility(View.INVISIBLE);
          }
          return;
        }
        @Override protected void deliverUpdate(        ConnectionDiagnosticActivity receiver,        String... update){
          receiver.txtInteractiveMessages.setText((Localization.get(""String_Node_Str"")));
        }
        @Override protected void deliverError(        ConnectionDiagnosticActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mConnectionDiagnosticTask.connect(ConnectionDiagnosticActivity.this);
      mConnectionDiagnosticTask.execute();
    }
  }
);
  this.settingsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));
    }
  }
);
  this.reportButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      String url=settings.getString(""String_Node_Str"",null);
      if (url != null) {
        LogSubmissionTask reportSubmitter=new LogSubmissionTask(CommCareApplication._(),true,CommCareApplication._().getSession().startDataSubmissionListener(R.string.submission_logs_title),url);
        reportSubmitter.execute();
        ConnectionDiagnosticActivity.this.finish();
        Toast.makeText(CommCareApplication._(),Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      }
 else {
        Logger.log(ConnectionDiagnosticTask.CONNECTION_DIAGNOSTIC_REPORT,logUnsetPostURLMessage);
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setText(MarkupUtil.localizeStyleSpannable(ConnectionDiagnosticActivity.this,""String_Node_Str""));
        ConnectionDiagnosticActivity.this.txtInteractiveMessages.setVisibility(View.VISIBLE);
      }
    }
  }
);
}",0.9986641731231632
142251,"@Override protected void deliverResult(ConnectionDiagnosticActivity receiver,ConnectionDiagnosticTask.Test failedTest){
  if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
    String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
    receiver.txtInteractiveMessages.setText(localize(displayMessage));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.reportButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == null) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.INVISIBLE);
    receiver.reportButton.setVisibility(View.INVISIBLE);
  }
  return;
}","@Override protected void deliverResult(ConnectionDiagnosticActivity receiver,ConnectionDiagnosticTask.Test failedTest){
  if (failedTest == ConnectionDiagnosticTask.Test.isOnline || failedTest == ConnectionDiagnosticTask.Test.googlePing) {
    String displayMessage=failedTest == ConnectionDiagnosticTask.Test.isOnline ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str"");
    receiver.txtInteractiveMessages.setText(displayMessage);
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == ConnectionDiagnosticTask.Test.commCarePing) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.reportButton.setVisibility(View.VISIBLE);
  }
 else   if (failedTest == null) {
    receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
    receiver.txtInteractiveMessages.setVisibility(View.VISIBLE);
    receiver.settingsButton.setVisibility(View.INVISIBLE);
    receiver.reportButton.setVisibility(View.INVISIBLE);
  }
  return;
}",0.9957555178268253
142252,"@Override public void run(){
  current=matchList;
  if (actionEnabled) {
    actionPosition=current.size();
  }
  currentSearchTerms=searchTerms;
  update();
}","@Override public void run(){
  setCurrent(matchList);
  currentSearchTerms=searchTerms;
  update();
}",0.7384615384615385
142253,"private void search(){
  Locale currentLocale=Locale.getDefault();
  long startTime=System.currentTimeMillis();
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  db.beginTransaction();
  full:   for (int index=0; index < full.size(); ++index) {
    if (index % 500 == 0) {
      db.yieldIfContendedSafely();
    }
    Entity<TreeReference> e=full.get(index);
    if (cancelled) {
      break;
    }
    if (""String_Node_Str"".equals(filterRaw)) {
      matchList.add(e);
      continue;
    }
    boolean add=false;
    int score=0;
    filter:     for (    String filter : searchTerms) {
      add=false;
      for (int i=0; i < e.getNumFields(); ++i) {
        String field=e.getNormalizedField(i);
        if (field != ""String_Node_Str"" && field.toLowerCase(currentLocale).contains(filter)) {
          add=true;
          continue filter;
        }
 else {
          if (mFuzzySearchEnabled) {
            for (            String fieldChunk : e.getSortFieldPieces(i)) {
              Pair<Boolean,Integer> match=StringUtils.fuzzyMatch(fieldChunk,filter);
              if (match.first) {
                add=true;
                score+=match.second;
                continue filter;
              }
            }
          }
        }
      }
      if (!add) {
        break;
      }
    }
    if (add) {
      matchScores.add(Pair.create(index,score));
      continue full;
    }
  }
  if (mAsyncMode) {
    Collections.sort(matchScores,new Comparator<Pair<Integer,Integer>>(){
      @Override public int compare(      Pair<Integer,Integer> lhs,      Pair<Integer,Integer> rhs){
        return lhs.second - rhs.second;
      }
    }
);
  }
  for (  Pair<Integer,Integer> match : matchScores) {
    matchList.add(full.get(match.first));
  }
  db.setTransactionSuccessful();
  db.endTransaction();
  if (cancelled) {
    return;
  }
  long time=System.currentTimeMillis() - startTime;
  if (time > 1000) {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + time + ""String_Node_Str"");
  }
  context.runOnUiThread(new Runnable(){
    @Override public void run(){
      current=matchList;
      if (actionEnabled) {
        actionPosition=current.size();
      }
      currentSearchTerms=searchTerms;
      update();
    }
  }
);
}","private void search(){
  Locale currentLocale=Locale.getDefault();
  long startTime=System.currentTimeMillis();
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  db.beginTransaction();
  full:   for (int index=0; index < full.size(); ++index) {
    if (index % 500 == 0) {
      db.yieldIfContendedSafely();
    }
    Entity<TreeReference> e=full.get(index);
    if (cancelled) {
      break;
    }
    if (""String_Node_Str"".equals(filterRaw)) {
      matchList.add(e);
      continue;
    }
    boolean add=false;
    int score=0;
    filter:     for (    String filter : searchTerms) {
      add=false;
      for (int i=0; i < e.getNumFields(); ++i) {
        String field=e.getNormalizedField(i);
        if (field != ""String_Node_Str"" && field.toLowerCase(currentLocale).contains(filter)) {
          add=true;
          continue filter;
        }
 else {
          if (mFuzzySearchEnabled) {
            for (            String fieldChunk : e.getSortFieldPieces(i)) {
              Pair<Boolean,Integer> match=StringUtils.fuzzyMatch(fieldChunk,filter);
              if (match.first) {
                add=true;
                score+=match.second;
                continue filter;
              }
            }
          }
        }
      }
      if (!add) {
        break;
      }
    }
    if (add) {
      matchScores.add(Pair.create(index,score));
      continue full;
    }
  }
  if (mAsyncMode) {
    Collections.sort(matchScores,new Comparator<Pair<Integer,Integer>>(){
      @Override public int compare(      Pair<Integer,Integer> lhs,      Pair<Integer,Integer> rhs){
        return lhs.second - rhs.second;
      }
    }
);
  }
  for (  Pair<Integer,Integer> match : matchScores) {
    matchList.add(full.get(match.first));
  }
  db.setTransactionSuccessful();
  db.endTransaction();
  if (cancelled) {
    return;
  }
  long time=System.currentTimeMillis() - startTime;
  if (time > 1000) {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + time + ""String_Node_Str"");
  }
  context.runOnUiThread(new Runnable(){
    @Override public void run(){
      setCurrent(matchList);
      currentSearchTerms=searchTerms;
      update();
    }
  }
);
}",0.948486217803886
142254,"public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,TextToSpeech tts,AudioController controller,NodeEntityFactory factory) throws SessionUnavailableException {
  this.detail=detail;
  this.full=full;
  current=new ArrayList<Entity<TreeReference>>();
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<DataSetObserver>();
  mNodeFactory=factory;
  mAsyncMode=(factory instanceof AsyncNodeEntityFactory);
  if (!mAsyncMode) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    current=new ArrayList<Entity<TreeReference>>(full);
    actionPosition=current.size();
  }
  this.tts=tts;
  this.controller=controller;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context,SCALE_FACTOR);
  }
 else {
    mImageLoader=null;
  }
  if (detail.getCustomAction() != null) {
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
  actionEnabled=detail.getCustomAction() != null;
}","public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,TextToSpeech tts,AudioController controller,NodeEntityFactory factory) throws SessionUnavailableException {
  this.detail=detail;
  actionEnabled=detail.getCustomAction() != null;
  this.full=full;
  setCurrent(new ArrayList<Entity<TreeReference>>());
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<DataSetObserver>();
  mNodeFactory=factory;
  mAsyncMode=(factory instanceof AsyncNodeEntityFactory);
  if (!mAsyncMode) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    setCurrent(new ArrayList<Entity<TreeReference>>(full));
  }
  this.tts=tts;
  this.controller=controller;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context,SCALE_FACTOR);
  }
 else {
    mImageLoader=null;
  }
  if (detail.getCustomAction() != null) {
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
}",0.9073992024811696
142255,"public StringWidget(Context context,FormEntryPrompt prompt,boolean secret){
  super(context,prompt);
  mAnswer=new EditText(context);
  mAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP,mAnswerFontsize);
  mAnswer.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  mAnswer.setOnClickListener(this);
  TableLayout.LayoutParams params=new TableLayout.LayoutParams();
  params.setMargins(7,5,7,5);
  mAnswer.setLayoutParams(params);
  mAnswer.addTextChangedListener(this);
  try {
    addAnswerFilter(new InputFilter.LengthFilter(guessMaxStringLength(prompt)));
  }
 catch (  UnpivotableExpressionException e) {
  }
  this.secret=secret;
  if (!secret) {
    mAnswer.setKeyListener(new TextKeyListener(Capitalize.SENTENCES,false));
  }
  setTextInputType(mAnswer);
  mAnswer.setHorizontallyScrolling(false);
  if (!secret) {
    mAnswer.setSingleLine(false);
  }
  if (prompt != null) {
    mReadOnly=prompt.isReadOnly();
    String s=prompt.getAnswerText();
    if (s != null) {
      mAnswer.setText(s);
    }
    if (mReadOnly) {
      if (s == null) {
        mAnswer.setText(""String_Node_Str"");
      }
      mAnswer.setBackgroundDrawable(null);
      mAnswer.setFocusable(false);
      mAnswer.setClickable(false);
    }
  }
  addView(mAnswer);
}","public StringWidget(Context context,FormEntryPrompt prompt,boolean secret){
  super(context,prompt);
  mAnswer=new EditText(context);
  mAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP,mAnswerFontsize);
  mAnswer.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  mAnswer.setOnClickListener(this);
  TableLayout.LayoutParams params=new TableLayout.LayoutParams();
  params.setMargins(7,5,7,5);
  mAnswer.setLayoutParams(params);
  mAnswer.addTextChangedListener(this);
  try {
    addAnswerFilter(new InputFilter.LengthFilter(guessMaxStringLength(prompt)));
  }
 catch (  UnpivotableExpressionException e) {
  }
  this.secret=secret;
  if (!secret) {
    mAnswer.setKeyListener(new TextKeyListener(Capitalize.SENTENCES,false));
  }
  setTextInputType(mAnswer);
  mAnswer.setHorizontallyScrolling(false);
  if (!secret) {
    mAnswer.setSingleLine(false);
  }
  if (prompt != null) {
    mReadOnly=prompt.isReadOnly();
    IAnswerData value=prompt.getAnswerValue();
    if (value != null) {
      mAnswer.setText(value.getDisplayText());
    }
    if (mReadOnly) {
      if (value == null) {
        mAnswer.setText(""String_Node_Str"");
      }
      mAnswer.setBackgroundDrawable(null);
      mAnswer.setFocusable(false);
      mAnswer.setClickable(false);
    }
  }
  addView(mAnswer);
}",0.9727810650887574
142256,"@Override protected Vector<Integer> union(Vector<Integer> selectedCases,Vector<Integer> cases){
  HashSet<Integer> selected=new HashSet<Integer>(selectedCases);
  selected.addAll(selectedCases);
  HashSet<Integer> other=new HashSet<Integer>();
  other.addAll(cases);
  selected.retainAll(other);
  selectedCases.clear();
  selectedCases.addAll(selected);
  return selectedCases;
}","@Override protected Vector<Integer> union(Vector<Integer> selectedCases,Vector<Integer> cases){
  return DataUtil.union(selectedCases,cases);
}",0.4894837476099426
142257,"@Override public void onCreate(){
  super.onCreate();
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  resourceState=STATE_UNINSTALLED;
  resourceState=initializeAppResources();
}","@Override public void onCreate(){
  super.onCreate();
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  AndroidUtil.initializeStaticHandlers();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  resourceState=STATE_UNINSTALLED;
  resourceState=initializeAppResources();
}",0.9807339449541284
142258,"@Override protected Vector<Integer> union(Vector<Integer> selectedCases,Vector<Integer> cases){
  HashSet<Integer> selected=new HashSet<Integer>(selectedCases);
  selected.addAll(selectedCases);
  HashSet<Integer> other=new HashSet<Integer>();
  other.addAll(cases);
  selected.retainAll(other);
  selectedCases.clear();
  selectedCases.addAll(selected);
  return selectedCases;
}","@Override protected Vector<Integer> union(Vector<Integer> selectedCases,Vector<Integer> cases){
  return DataUtil.union(selectedCases,cases);
}",0.4894837476099426
142259,"@Override public void onCreate(){
  super.onCreate();
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  resourceState=STATE_UNINSTALLED;
  resourceState=initializeAppResources();
}","@Override public void onCreate(){
  super.onCreate();
  Collect.setStaticApplicationContext(this);
  AndroidClassHasher.registerAndroidClassHashStrategy();
  AndroidUtil.initializeStaticHandlers();
  CommCareApplication.app=this;
  PreInitLogger pil=new PreInitLogger();
  Logger.registerLogger(pil);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Thread.setDefaultUncaughtExceptionHandler(new CommCareExceptionHandler(Thread.getDefaultUncaughtExceptionHandler()));
  PropertyManager.setPropertyManager(new ODKPropertyManager());
  SQLiteDatabase.loadLibs(this);
  setRoots();
  prepareTemporaryStorage();
  dbState=initGlobalDb();
  try {
    LegacyInstallUtils.checkForLegacyInstall(this,this.getGlobalStorage(ApplicationRecord.class));
  }
 catch (  StorageFullException sfe) {
    throw new RuntimeException(sfe);
  }
 finally {
    Logger.registerLogger(new AndroidLogger(this.getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class)));
    pil.dumpToNewLogger();
  }
  intializeDefaultLocalizerData();
  resourceState=STATE_UNINSTALLED;
  resourceState=initializeAppResources();
}",0.9807339449541284
142260,"private void populateAvailableAppsSpinner(){
  Spinner spinner=(Spinner)findViewById(R.id.app_selection_spinner);
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getReadyAppRecords();
  ArrayList<String> appNames=new ArrayList<String>();
  for (  ApplicationRecord r : readyApps) {
    String name=r.getDisplayName();
    appNames.add(name);
    namesToRecords.put(name,r);
  }
  if (appNames.size() > 1) {
    ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.spinner_text_view,appNames);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
    spinner.setOnItemSelectedListener(this);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    spinner.setSelection(prefs.getInt(KEY_LAST_POSITION,0));
    spinner.setVisibility(View.VISIBLE);
  }
 else   spinner.setVisibility(View.GONE);
}","private void populateAvailableAppsSpinner(){
  Spinner spinner=(Spinner)findViewById(R.id.app_selection_spinner);
  ArrayList<ApplicationRecord> readyApps=CommCareApplication._().getReadyAppRecords();
  ArrayList<String> appNames=new ArrayList<String>();
  for (  ApplicationRecord r : readyApps) {
    String name=r.getDisplayName();
    appNames.add(name);
    namesToRecords.put(name,r);
  }
  if (appNames.size() > 1) {
    ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.spinner_text_view,appNames);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    spinner.setAdapter(adapter);
    spinner.setOnItemSelectedListener(this);
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    int lastPosition=prefs.getInt(KEY_LAST_POSITION,0);
    if (lastPosition >= appNames.size()) {
      lastPosition=0;
    }
    spinner.setSelection(lastPosition);
    spinner.setVisibility(View.VISIBLE);
  }
 else   spinner.setVisibility(View.GONE);
}",0.9237113402061856
142261,"private static int countDaysFromMinDay(int toYear,int toMonth,int toDay){
  if (toYear < MIN_YEAR || toYear > MAX_YEAR || toMonth < 1 || toMonth > 12 || toDay < 1 || toDay > NEPALI_YEAR_MONTHS.get(toYear)[toMonth]) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int daysFromMinDay=0;
  for (int year=MIN_YEAR; year <= toYear; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        daysFromMinDay++;
        if (year == toYear && month == toMonth && day == toDay) {
          return daysFromMinDay;
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","private static int countDaysFromMinDay(int toYear,int toMonth,int toDay){
  if (toYear < MIN_YEAR || toYear > MAX_YEAR || toMonth < 1 || toMonth > 12 || toDay < 1 || toDay > NEPALI_YEAR_MONTHS.get(toYear)[toMonth]) {
    throw new RuntimeException(""String_Node_Str"");
  }
  int daysFromMinDay=-1;
  for (int year=MIN_YEAR; year <= toYear; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        daysFromMinDay++;
        if (year == toYear && month == toMonth && day == toDay) {
          return daysFromMinDay;
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9979852249832102
142262,"@Override protected UniversalDate fromMillis(long millisFromJavaEpoch){
  long millisFromMinDay=millisFromJavaEpoch - MIN_MILLIS_FROM_JAVA_EPOCH;
  long daysFromMinDay=millisFromMinDay / AbstractUniversalDateWidget.MILLIS_IN_DAY;
  int days=0;
  for (int year=MIN_YEAR; year <= MAX_YEAR; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        days++;
        if (days == daysFromMinDay) {
          return new UniversalDate(year,month,day,millisFromJavaEpoch);
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","@Override protected UniversalDate fromMillis(long millisFromJavaEpoch){
  long millisFromMinDay=millisFromJavaEpoch - MIN_MILLIS_FROM_JAVA_EPOCH;
  long daysFromMinDay=millisFromMinDay / AbstractUniversalDateWidget.MILLIS_IN_DAY;
  int days=-1;
  for (int year=MIN_YEAR; year <= MAX_YEAR; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        days++;
        if (days == daysFromMinDay) {
          return new UniversalDate(year,month,day,millisFromJavaEpoch);
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.99784327821711
142263,"private boolean upgradeTwoThree(SQLiteDatabase db,int oldVersion,int newVersion){
  db.beginTransaction();
  try {
    SqlStorage<Persistable> storage=new SqlStorage<Persistable>(ApplicationRecord.STORAGE_KEY,ApplicationRecordV1.class,new ConcreteDbHelper(c,db));
    for (int i=0; i < storage.getNumRecords(); i++) {
      ApplicationRecordV1 oldRecord=(ApplicationRecordV1)storage.read(0);
      ApplicationRecord newRecord=new ApplicationRecord(oldRecord.getApplicationId(),oldRecord.getStatus());
      newRecord.setID(oldRecord.getID());
      newRecord.setResourcesStatus(true);
      newRecord.setArchiveStatus(false);
      newRecord.setUniqueId(null);
      newRecord.setDisplayName(null);
      storage.write(newRecord);
    }
    return true;
  }
  finally {
    db.endTransaction();
  }
}","private boolean upgradeTwoThree(SQLiteDatabase db,int oldVersion,int newVersion){
  db.beginTransaction();
  try {
    SqlStorage<Persistable> storage=new SqlStorage<Persistable>(ApplicationRecord.STORAGE_KEY,ApplicationRecordV1.class,new ConcreteDbHelper(c,db));
    for (int i=0; i < storage.getNumRecords(); i++) {
      ApplicationRecordV1 oldRecord=(ApplicationRecordV1)storage.read(i);
      ApplicationRecord newRecord=new ApplicationRecord(oldRecord.getApplicationId(),oldRecord.getStatus());
      newRecord.setID(oldRecord.getID());
      newRecord.setResourcesStatus(true);
      newRecord.setArchiveStatus(false);
      newRecord.setUniqueId(null);
      newRecord.setDisplayName(null);
      storage.write(newRecord);
    }
    return true;
  }
  finally {
    db.endTransaction();
  }
}",0.99875
142264,"/** 
 * Get the current widget date in other chronology
 * @return
 */
private long getCurrentMillis(){
  int day=Integer.parseInt(txtDay.getText().toString());
  int month=monthArrayPointer + 1;
  int year=Integer.parseInt(txtYear.getText().toString());
  return toMillisFromJavaEpoch(year,month,day);
}","/** 
 * Get the current widget date in other chronology
 * @return
 */
private long getCurrentMillis(){
  int day=Integer.parseInt(txtDay.getText().toString());
  int month=monthArrayPointer + 1;
  int year=Integer.parseInt(txtYear.getText().toString());
  return toMillisFromJavaEpoch(year,month,day,millisOfDayOffset);
}",0.9712460063897764
142265,"protected abstract long toMillisFromJavaEpoch(int year,int month,int day);","protected abstract long toMillisFromJavaEpoch(int year,int month,int day,long millisOffset);",0.891566265060241
142266,"@Override public void clearAnswer(){
  Date date=new Date();
  updateDateDisplay(date.getTime());
  updateGregorianDateHelperDisplay();
}","@Override public void clearAnswer(){
  Date date=new Date();
  millisOfDayOffset=date.getTime() % MILLIS_IN_DAY;
  updateDateDisplay(date.getTime());
  updateGregorianDateHelperDisplay();
}",0.8404907975460123
142267,"@Override protected long toMillisFromJavaEpoch(int year,int month,int day){
  DateTime dt=new DateTime(CHRON_ETH).withYear(year).withMonthOfYear(month).withDayOfMonth(day);
  return dt.getMillis();
}","@Override protected long toMillisFromJavaEpoch(int year,int month,int day,long millisOffset){
  DateTime dt=new DateTime(CHRON_ETH).withYear(year).withMonthOfYear(month).withDayOfMonth(day).withMillisOfDay((int)millisOffset);
  return dt.getMillis();
}",0.8824833702882483
142268,"@Override protected UniversalDate decrementYear(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  year--;
  if (year < MIN_YEAR) {
    year=MAX_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day));
}","@Override protected UniversalDate decrementYear(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  year--;
  if (year < MIN_YEAR) {
    year=MAX_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day,millisFromJavaEpoch % MILLIS_IN_DAY));
}",0.9617021276595744
142269,"@Override protected UniversalDate incrementMonth(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  month++;
  if (month > 12) {
    month=1;
    year++;
  }
  if (year > MAX_YEAR) {
    year=MIN_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day));
}","@Override protected UniversalDate incrementMonth(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  month++;
  if (month > 12) {
    month=1;
    year++;
  }
  if (year > MAX_YEAR) {
    year=MIN_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day,millisFromJavaEpoch % MILLIS_IN_DAY));
}",0.965451055662188
142270,"@Override protected UniversalDate incrementYear(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  year++;
  if (year > MAX_YEAR) {
    year=MIN_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day));
}","@Override protected UniversalDate incrementYear(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  year++;
  if (year > MAX_YEAR) {
    year=MIN_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day,millisFromJavaEpoch % MILLIS_IN_DAY));
}",0.9617021276595744
142271,"@Override protected UniversalDate fromMillis(long millisFromJavaEpoch){
  long millisFromMinDay=millisFromJavaEpoch - MIN_MILLIS_FROM_JAVA_EPOCH;
  long daysFromMinDay=millisFromMinDay / AbstractUniversalDateWidget.MILLIS_IN_DAY;
  int days=-1;
  for (int year=MIN_YEAR; year <= MAX_YEAR; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        days++;
        if (days == daysFromMinDay) {
          return new UniversalDate(year,month,day,millisFromJavaEpoch);
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","@Override protected UniversalDate fromMillis(long millisFromJavaEpoch){
  long millisFromMinDay=millisFromJavaEpoch - MIN_MILLIS_FROM_JAVA_EPOCH;
  long daysFromMinDay=millisFromMinDay / MILLIS_IN_DAY;
  int days=-1;
  for (int year=MIN_YEAR; year <= MAX_YEAR; year++) {
    int[] monthsInYear=NEPALI_YEAR_MONTHS.get(year);
    for (int month=1; month <= 12; month++) {
      int daysInMonth=monthsInYear[month];
      for (int day=1; day <= daysInMonth; day++) {
        days++;
        if (days == daysFromMinDay) {
          return new UniversalDate(year,month,day,millisFromJavaEpoch);
        }
      }
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9794721407624634
142272,"@Override protected UniversalDate decrementMonth(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  month--;
  if (month < 1) {
    month=12;
    year--;
  }
  if (year < MIN_YEAR) {
    year=MAX_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day));
}","@Override protected UniversalDate decrementMonth(long millisFromJavaEpoch){
  UniversalDate origDate=fromMillis(millisFromJavaEpoch);
  int year=origDate.year;
  int month=origDate.month;
  int day=origDate.day;
  month--;
  if (month < 1) {
    month=12;
    year--;
  }
  if (year < MIN_YEAR) {
    year=MAX_YEAR;
  }
  if (day > NEPALI_YEAR_MONTHS.get(year)[month]) {
    day=NEPALI_YEAR_MONTHS.get(year)[month];
  }
  return new UniversalDate(year,month,day,toMillisFromJavaEpoch(year,month,day,millisFromJavaEpoch % MILLIS_IN_DAY));
}",0.965451055662188
142273,"@Override protected long toMillisFromJavaEpoch(int year,int month,int day){
  int daysFromMinDay=countDaysFromMinDay(year,month,day);
  long millisFromMinDay=daysFromMinDay * AbstractUniversalDateWidget.MILLIS_IN_DAY;
  return millisFromMinDay + MIN_MILLIS_FROM_JAVA_EPOCH;
}","@Override protected long toMillisFromJavaEpoch(int year,int month,int day,long millisOffset){
  int daysFromMinDay=countDaysFromMinDay(year,month,day);
  long millisFromMinDay=daysFromMinDay * MILLIS_IN_DAY;
  return millisFromMinDay + MIN_MILLIS_FROM_JAVA_EPOCH + millisOffset;
}",0.8900900900900901
142274,"private boolean upgradeFiveSix(SQLiteDatabase db,int oldVersion,int newVersion){
  db.beginTransaction();
  try {
    db.execSQL(""String_Node_Str"");
    DbUtil.createNumbersTable(db);
    db.execSQL(EntityStorageCache.getTableDefinition());
    EntityStorageCache.createIndexes(db);
    db.execSQL(CaseIndexTable.getTableDefinition());
    CaseIndexTable.createIndexes(db);
    CaseIndexTable cit=new CaseIndexTable();
    for (    ACase c : CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACasePreV6Model.class)) {
      cit.indexCase(c);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}","private boolean upgradeFiveSix(SQLiteDatabase db,int oldVersion,int newVersion){
  db.beginTransaction();
  try {
    db.execSQL(""String_Node_Str"");
    DbUtil.createNumbersTable(db);
    db.execSQL(EntityStorageCache.getTableDefinition());
    EntityStorageCache.createIndexes(db);
    db.execSQL(CaseIndexTable.getTableDefinition());
    CaseIndexTable.createIndexes(db);
    CaseIndexTable cit=new CaseIndexTable();
    SqlStorage<ACase> caseStorage=new SqlStorage<ACase>(ACase.STORAGE_KEY,ACasePreV6Model.class,new ConcreteDbHelper(c,db));
    for (    ACase c : caseStorage) {
      cit.indexCase(c);
    }
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}",0.8818782098312545
142275,"private boolean upgradeSixSeven(SQLiteDatabase db,int oldVersion,int newVersion){
  db.beginTransaction();
  try {
    updateModels(CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACasePreV6Model.class));
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
  }
}","private boolean upgradeSixSeven(SQLiteDatabase db,int oldVersion,int newVersion){
  long start=System.currentTimeMillis();
  db.beginTransaction();
  try {
    SqlStorage<ACase> caseStorage=new SqlStorage<ACase>(ACase.STORAGE_KEY,ACasePreV6Model.class,new ConcreteDbHelper(c,db));
    updateModels(caseStorage);
    db.setTransactionSuccessful();
    return true;
  }
  finally {
    db.endTransaction();
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - start) + ""String_Node_Str"");
  }
}",0.6189320388349514
142276,"/** 
 * The graphical representation of a series.
 * @param canvas the canvas to paint to
 * @param paint the paint to be used for drawing
 * @param points the array of points to be used for drawing the series: [x1, y1, x2, y2, ... ]
 * @param seriesRenderer the series renderer
 * @param yAxisValue the minimum value of the y axis
 * @param seriesIndex the index of the series currently being drawn
 * @param startIndex the start index of the rendering points
 */
@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){
  float lineWidth=paint.getStrokeWidth();
  paint.setStrokeWidth(renderer.getLineWidth());
  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();
  for (  FillOutsideLine fill : fillOutsideLine) {
    if (fill.getType() != FillOutsideLine.Type.NONE) {
      paint.setColor(fill.getColor());
      List<Float> fillPoints=new ArrayList<Float>();
      int[] range=fill.getFillRange();
      if (range == null) {
        fillPoints.addAll(points);
      }
 else {
        if (points.size() > range[0] * 2 && points.size() > range[1] * 2) {
          fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));
        }
      }
      final float referencePoint;
      final float boundary;
switch (fill.getType()) {
case BOUNDS_ALL:
        referencePoint=yAxisValue;
      boundary=yAxisValue;
    break;
case BOUNDS_BELOW:
  referencePoint=yAxisValue;
boundary=yAxisValue;
break;
case BOUNDS_ABOVE:
referencePoint=yAxisValue;
boundary=yAxisValue;
break;
case BELOW:
referencePoint=canvas.getHeight();
boundary=0;
break;
case ABOVE:
referencePoint=0;
boundary=canvas.getHeight();
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {
List<Float> boundsPoints=new ArrayList<Float>();
boolean add=false;
int length=fillPoints.size();
if (length > 0 && fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {
boundsPoints.add(fillPoints.get(0));
boundsPoints.add(fillPoints.get(1));
add=true;
}
for (int i=3; i < length; i+=2) {
float prevValue=fillPoints.get(i - 2);
float value=fillPoints.get(i);
if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {
float prevX=fillPoints.get(i - 3);
float x=fillPoints.get(i - 1);
boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));
boundsPoints.add(referencePoint);
if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {
i+=2;
add=false;
}
 else {
boundsPoints.add(x);
boundsPoints.add(value);
add=true;
}
}
 else {
if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {
boundsPoints.add(fillPoints.get(i - 1));
boundsPoints.add(value);
}
}
}
fillPoints.clear();
fillPoints.addAll(boundsPoints);
}
int length=fillPoints.size();
if (length > 0) {
fillPoints.set(0,fillPoints.get(0) + 1);
int i=0;
while (i < length) {
if (yOutOfBounds(fillPoints.get(i + 1),fill.getType(),canvas)) {
int currentIndex=i;
if (i >= 2 && !yOutOfBounds(fillPoints.get(i - 1),fill.getType(),canvas)) {
fillPoints.add(i,getXIntermediary(fillPoints.subList(i - 2,i + 2),canvas.getWidth()));
fillPoints.add(i + 1,boundary);
i+=2;
length+=2;
currentIndex+=2;
}
if (i + 2 < fillPoints.size() && !yOutOfBounds(fillPoints.get(i + 3),fill.getType(),canvas)) {
fillPoints.add(i + 2,getXIntermediary(fillPoints.subList(i,i + 4),canvas.getWidth()));
fillPoints.add(i + 3,boundary);
i+=2;
length+=2;
}
fillPoints.set(currentIndex + 1,boundary);
}
i+=2;
}
fillPoints.add(fillPoints.get(length - 2));
fillPoints.add(referencePoint);
fillPoints.add(fillPoints.get(0));
fillPoints.add(fillPoints.get(length + 1));
paint.setStyle(Style.FILL);
drawPath(canvas,fillPoints,paint,true);
}
}
}
paint.setColor(renderer.getColor());
paint.setStyle(Style.STROKE);
drawPath(canvas,points,paint,false);
paint.setStrokeWidth(lineWidth);
}","/** 
 * The graphical representation of a series.
 * @param canvas the canvas to paint to
 * @param paint the paint to be used for drawing
 * @param points the array of points to be used for drawing the series: [x1, y1, x2, y2, ... ]
 * @param seriesRenderer the series renderer
 * @param yAxisValue the minimum value of the y axis
 * @param seriesIndex the index of the series currently being drawn
 * @param startIndex the start index of the rendering points
 */
@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){
  float lineWidth=paint.getStrokeWidth();
  paint.setStrokeWidth(renderer.getLineWidth());
  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();
  for (  FillOutsideLine fill : fillOutsideLine) {
    if (fill.getType() != FillOutsideLine.Type.NONE) {
      paint.setColor(fill.getColor());
      List<Float> fillPoints=new ArrayList<Float>();
      int[] range=fill.getFillRange();
      if (range == null) {
        fillPoints.addAll(points);
      }
 else {
        if (points.size() > range[0] * 2 && points.size() > range[1] * 2) {
          fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));
        }
      }
      final float referencePoint;
      final float boundary;
switch (fill.getType()) {
case BOUNDS_ALL:
        referencePoint=yAxisValue;
      boundary=yAxisValue;
    break;
case BOUNDS_BELOW:
  referencePoint=yAxisValue;
boundary=yAxisValue;
break;
case BOUNDS_ABOVE:
referencePoint=yAxisValue;
boundary=yAxisValue;
break;
case BELOW:
referencePoint=canvas.getHeight();
boundary=0;
break;
case ABOVE:
referencePoint=0;
boundary=canvas.getHeight();
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {
List<Float> boundsPoints=new ArrayList<Float>();
boolean add=false;
int length=fillPoints.size();
if (length > 0 && fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {
boundsPoints.add(fillPoints.get(0));
boundsPoints.add(fillPoints.get(1));
add=true;
}
for (int i=3; i < length; i+=2) {
float prevValue=fillPoints.get(i - 2);
float value=fillPoints.get(i);
if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {
float prevX=fillPoints.get(i - 3);
float x=fillPoints.get(i - 1);
boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));
boundsPoints.add(referencePoint);
if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {
i+=2;
add=false;
}
 else {
boundsPoints.add(x);
boundsPoints.add(value);
add=true;
}
}
 else {
if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {
boundsPoints.add(fillPoints.get(i - 1));
boundsPoints.add(value);
}
}
}
fillPoints.clear();
fillPoints.addAll(boundsPoints);
}
int length=fillPoints.size();
if (length > 0) {
fillPoints.set(0,fillPoints.get(0) + 1);
int i=0;
while (i < length) {
if (yOutOfBounds(fillPoints.get(i + 1),fill.getType(),canvas)) {
int currentIndex=i;
if (i >= 2 && !yOutOfBounds(fillPoints.get(i - 1),fill.getType(),canvas)) {
float newY=fill.getType() == FillOutsideLine.Type.ABOVE && fillPoints.get(i - 1) < canvas.getHeight() / 2 ? 0 : boundary;
System.out.println(""String_Node_Str"" + newY + ""String_Node_Str""+ fill.getType()+ ""String_Node_Str""+ fillPoints.get(i - 1));
fillPoints.add(i,getXIntermediary(fillPoints.subList(i - 2,i + 2),canvas.getWidth()));
fillPoints.add(i + 1,newY);
i+=2;
length+=2;
currentIndex+=2;
}
if (i + 2 < fillPoints.size() && !yOutOfBounds(fillPoints.get(i + 3),fill.getType(),canvas)) {
float newY=fill.getType() == FillOutsideLine.Type.ABOVE && fillPoints.get(i + 3) < canvas.getHeight() / 2 ? 0 : boundary;
System.out.println(""String_Node_Str"" + newY + ""String_Node_Str""+ fill.getType()+ ""String_Node_Str""+ fillPoints.get(i + 3));
fillPoints.add(i + 2,getXIntermediary(fillPoints.subList(i,i + 4),canvas.getWidth()));
fillPoints.add(i + 3,newY);
i+=2;
length+=2;
}
fillPoints.set(currentIndex + 1,fill.getType() == FillOutsideLine.Type.ABOVE && fillPoints.get(currentIndex + 1) < 0 ? referencePoint : boundary);
}
i+=2;
}
fillPoints.add(fillPoints.get(length - 2));
fillPoints.add(referencePoint);
fillPoints.add(fillPoints.get(0));
fillPoints.add(fillPoints.get(length + 1));
paint.setStyle(Style.FILL);
drawPath(canvas,fillPoints,paint,true);
}
}
}
paint.setColor(renderer.getColor());
paint.setStyle(Style.STROKE);
drawPath(canvas,points,paint,false);
paint.setStrokeWidth(lineWidth);
}",0.9331896551724138
142277,"private boolean yOutOfBounds(float y,FillOutsideLine.Type type,Canvas canvas){
  if (type == FillOutsideLine.Type.BOUNDS_ALL) {
    return false;
  }
  if (type == FillOutsideLine.Type.BOUNDS_BELOW) {
    return false;
  }
  if (type == FillOutsideLine.Type.BOUNDS_ABOVE) {
    return false;
  }
  if (type == FillOutsideLine.Type.ABOVE) {
    return y > canvas.getHeight();
  }
  if (type == FillOutsideLine.Type.BELOW) {
    return y < 0;
  }
  throw new RuntimeException(""String_Node_Str"");
}","private boolean yOutOfBounds(float y,FillOutsideLine.Type type,Canvas canvas){
  if (type == FillOutsideLine.Type.BOUNDS_ALL) {
    return false;
  }
  if (type == FillOutsideLine.Type.BOUNDS_BELOW) {
    return false;
  }
  if (type == FillOutsideLine.Type.BOUNDS_ABOVE) {
    return false;
  }
  if (type == FillOutsideLine.Type.ABOVE) {
    return y > canvas.getHeight() || y < 0;
  }
  if (type == FillOutsideLine.Type.BELOW) {
    return y < 0;
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.990990990990991
142278,"public static boolean isActionBarEnabled(){
  SharedPreferences properties=CommCareApplication._().getCurrentApp().getAppPreferences();
  return properties.getString(ACTION_BAR_ENABLED,CommCarePreferences.NO).equals(CommCarePreferences.YES);
}","public static boolean isActionBarEnabled(){
  return doesPropertyMatch(ACTION_BAR_ENABLED,CommCarePreferences.NO,CommCarePreferences.YES);
}",0.6736292428198434
142279,"public static boolean isNewNavEnabled(){
  SharedPreferences properties=CommCareApplication._().getCurrentApp().getAppPreferences();
  return properties.getString(NAV_UI_ENABLED,CommCarePreferences.NO).equals(CommCarePreferences.YES);
}","public static boolean isNewNavEnabled(){
  return doesPropertyMatch(NAV_UI_ENABLED,CommCarePreferences.NO,CommCarePreferences.YES);
}",0.6612466124661247
142280,"public static boolean isSuperuserEnabled(){
  SharedPreferences properties=CommCareApplication._().getCurrentApp().getAppPreferences();
  return properties.getString(SUPERUSER_ENABLED,BuildConfig.DEBUG ? CommCarePreferences.YES : CommCarePreferences.NO).equals(CommCarePreferences.YES);
}","public static boolean isSuperuserEnabled(){
  return doesPropertyMatch(SUPERUSER_ENABLED,BuildConfig.DEBUG ? CommCarePreferences.YES : CommCarePreferences.NO,CommCarePreferences.YES);
}",0.7357293868921776
142281,"public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,TextToSpeech tts,AudioController controller,NodeEntityFactory factory) throws SessionUnavailableException {
  this.detail=detail;
  this.full=full;
  current=new ArrayList<Entity<TreeReference>>();
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<DataSetObserver>();
  mNodeFactory=factory;
  if (!(factory instanceof AsyncNodeEntityFactory)) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    current=new ArrayList<Entity<TreeReference>>(full);
  }
  this.tts=tts;
  this.controller=controller;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context,SCALE_FACTOR);
  }
 else {
    mImageLoader=null;
  }
  if (detail.getCustomAction() != null) {
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
  actionEnabled=detail.getCustomAction() != null;
}","public EntityListAdapter(Activity activity,Detail detail,List<TreeReference> references,List<Entity<TreeReference>> full,int[] sort,TextToSpeech tts,AudioController controller,NodeEntityFactory factory) throws SessionUnavailableException {
  this.detail=detail;
  this.full=full;
  current=new ArrayList<Entity<TreeReference>>();
  this.references=references;
  this.context=activity;
  this.observers=new ArrayList<DataSetObserver>();
  mNodeFactory=factory;
  if (!(factory instanceof AsyncNodeEntityFactory)) {
    if (sort.length != 0) {
      sort(sort);
    }
    filterValues(""String_Node_Str"");
  }
 else {
    current=new ArrayList<Entity<TreeReference>>(full);
    actionPosition=current.size();
  }
  this.tts=tts;
  this.controller=controller;
  if (android.os.Build.VERSION.SDK_INT >= 14) {
    mImageLoader=new CachingAsyncImageLoader(context,SCALE_FACTOR);
  }
 else {
    mImageLoader=null;
  }
  if (detail.getCustomAction() != null) {
  }
  usesGridView=detail.usesGridView();
  this.mFuzzySearchEnabled=CommCarePreferences.isFuzzySearchEnabled();
  actionEnabled=detail.getCustomAction() != null;
}",0.9840836743974534
142282,"@Override public void onResume(){
  super.onResume();
  if (tile != null) {
    ViewGroup vg=(ViewGroup)this.getActivity().findViewById(R.id.universal_frame_tile);
    if (vg != null) {
      vg.addView(tile,LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
      mInternalDetailView=null;
    }
  }
  if (this.getActivity() instanceof CommCareActivity) {
    String title=((CommCareActivity)this.getActivity()).getActivityTitle();
    if (title != null) {
      if (!breadCrumbsEnabled) {
        ActionBar actionBar=this.getActivity().getActionBar();
        actionBar.setSubtitle(title);
      }
 else {
        if (localIdPart != -1) {
          TextView text=(TextView)this.getActivity().getActionBar().getCustomView().findViewById(localIdPart);
          if (text != null) {
            text.setText(title);
          }
        }
      }
    }
  }
}","@Override public void onResume(){
  super.onResume();
  if (tile != null) {
    ViewGroup vg=(ViewGroup)this.getActivity().findViewById(R.id.universal_frame_tile);
    if (vg != null) {
      if (((ViewGroup)tile.getParent()) != null) {
        ((ViewGroup)tile.getParent()).removeView(tile);
      }
      vg.addView(tile,LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
      mInternalDetailView=null;
    }
  }
  if (this.getActivity() instanceof CommCareActivity) {
    String title=((CommCareActivity)this.getActivity()).getActivityTitle();
    if (title != null) {
      if (!breadCrumbsEnabled) {
        ActionBar actionBar=this.getActivity().getActionBar();
        actionBar.setSubtitle(title);
      }
 else {
        if (localIdPart != -1) {
          TextView text=(TextView)this.getActivity().getActionBar().getCustomView().findViewById(localIdPart);
          if (text != null) {
            text.setText(title);
          }
        }
      }
    }
  }
}",0.9372613202400436
142283,"public AbstractTreeElement generateRoot(ExternalDataInstance instance){
  CommCareApplication app=CommCareApplication._();
  String ref=instance.getReference();
  if (ref.indexOf(LedgerInstanceTreeElement.MODEL_NAME) != -1) {
    if (stockbase == null) {
      SqlStorage<Ledger> storage=app.getUserStorage(Ledger.STORAGE_KEY,Ledger.class);
      stockbase=new LedgerInstanceTreeElement(instance.getBase(),storage);
    }
 else {
      stockbase.rebase(instance.getBase());
    }
    return stockbase;
  }
 else   if (ref.indexOf(CaseInstanceTreeElement.MODEL_NAME) != -1) {
    if (casebase == null) {
      SqlStorage<ACase> storage=app.getUserStorage(ACase.STORAGE_KEY,ACase.class);
      casebase=new AndroidCaseInstanceTreeElement(instance.getBase(),storage,false);
    }
 else {
      casebase.rebase(instance.getBase());
    }
    return casebase;
  }
 else   if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    String userId=""String_Node_Str"";
    User u=CommCareApplication._().getSession().getLoggedInUser();
    if (u != null) {
      userId=u.getUniqueId();
    }
    String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
    FormInstance fixture=CommCareUtil.loadFixture(refId,userId);
    if (fixture == null) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    User u=app.getSession().getLoggedInUser();
    TreeElement root=session.getSessionInstance(app.getPhoneId(),app.getCurrentVersionString(),u.getUsername(),u.getUniqueId(),u.getProperties()).getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  return null;
}","public AbstractTreeElement generateRoot(ExternalDataInstance instance){
  CommCareApplication app=CommCareApplication._();
  String ref=instance.getReference();
  if (ref.indexOf(LedgerInstanceTreeElement.MODEL_NAME) != -1) {
    if (stockbase == null) {
      SqlStorage<Ledger> storage=app.getUserStorage(Ledger.STORAGE_KEY,Ledger.class);
      stockbase=new LedgerInstanceTreeElement(instance.getBase(),storage);
    }
 else {
      stockbase.rebase(instance.getBase());
    }
    return stockbase;
  }
 else   if (ref.indexOf(CaseInstanceTreeElement.MODEL_NAME) != -1) {
    if (casebase == null) {
      SqlStorage<ACase> storage=app.getUserStorage(ACase.STORAGE_KEY,ACase.class);
      casebase=new AndroidCaseInstanceTreeElement(instance.getBase(),storage,false);
    }
 else {
      casebase.rebase(instance.getBase());
    }
    return casebase;
  }
 else   if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    String userId=""String_Node_Str"";
    User u=CommCareApplication._().getSession().getLoggedInUser();
    if (u != null) {
      userId=u.getUniqueId();
    }
    String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
    try {
      FormInstance fixture=CommCareUtil.loadFixture(refId,userId);
      if (fixture == null) {
        throw new RuntimeException(""String_Node_Str"" + ref);
      }
      TreeElement root=fixture.getRoot();
      root.setParent(instance.getBase());
      return root;
    }
 catch (    IllegalStateException ise) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
  }
  if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    User u=app.getSession().getLoggedInUser();
    TreeElement root=session.getSessionInstance(app.getPhoneId(),app.getCurrentVersionString(),u.getUsername(),u.getUniqueId(),u.getProperties()).getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  return null;
}",0.9564270152505446
142284,"public AbstractTreeElement generateRoot(ExternalDataInstance instance){
  CommCareApplication app=CommCareApplication._();
  String ref=instance.getReference();
  if (ref.indexOf(LedgerInstanceTreeElement.MODEL_NAME) != -1) {
    if (stockbase == null) {
      SqlStorage<Ledger> storage=app.getUserStorage(Ledger.STORAGE_KEY,Ledger.class);
      stockbase=new LedgerInstanceTreeElement(instance.getBase(),storage);
    }
 else {
      stockbase.rebase(instance.getBase());
    }
    return stockbase;
  }
 else   if (ref.indexOf(CaseInstanceTreeElement.MODEL_NAME) != -1) {
    if (casebase == null) {
      SqlStorage<ACase> storage=app.getUserStorage(ACase.STORAGE_KEY,ACase.class);
      casebase=new AndroidCaseInstanceTreeElement(instance.getBase(),storage,false);
    }
 else {
      casebase.rebase(instance.getBase());
    }
    return casebase;
  }
 else   if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    String userId=""String_Node_Str"";
    User u=CommCareApplication._().getSession().getLoggedInUser();
    if (u != null) {
      userId=u.getUniqueId();
    }
    String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
    FormInstance fixture=CommCareUtil.loadFixture(refId,userId);
    if (fixture == null) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    User u=app.getSession().getLoggedInUser();
    TreeElement root=session.getSessionInstance(app.getPhoneId(),app.getCurrentVersionString(),u.getUsername(),u.getUniqueId(),u.getProperties()).getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  return null;
}","public AbstractTreeElement generateRoot(ExternalDataInstance instance){
  CommCareApplication app=CommCareApplication._();
  String ref=instance.getReference();
  if (ref.indexOf(LedgerInstanceTreeElement.MODEL_NAME) != -1) {
    if (stockbase == null) {
      SqlStorage<Ledger> storage=app.getUserStorage(Ledger.STORAGE_KEY,Ledger.class);
      stockbase=new LedgerInstanceTreeElement(instance.getBase(),storage);
    }
 else {
      stockbase.rebase(instance.getBase());
    }
    return stockbase;
  }
 else   if (ref.indexOf(CaseInstanceTreeElement.MODEL_NAME) != -1) {
    if (casebase == null) {
      SqlStorage<ACase> storage=app.getUserStorage(ACase.STORAGE_KEY,ACase.class);
      casebase=new AndroidCaseInstanceTreeElement(instance.getBase(),storage,false);
    }
 else {
      casebase.rebase(instance.getBase());
    }
    return casebase;
  }
 else   if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    String userId=""String_Node_Str"";
    User u=CommCareApplication._().getSession().getLoggedInUser();
    if (u != null) {
      userId=u.getUniqueId();
    }
    String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
    try {
      FormInstance fixture=CommCareUtil.loadFixture(refId,userId);
      if (fixture == null) {
        throw new RuntimeException(""String_Node_Str"" + ref);
      }
      TreeElement root=fixture.getRoot();
      root.setParent(instance.getBase());
      return root;
    }
 catch (    IllegalStateException ise) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
  }
  if (instance.getReference().indexOf(""String_Node_Str"") != -1) {
    User u=app.getSession().getLoggedInUser();
    TreeElement root=session.getSessionInstance(app.getPhoneId(),app.getCurrentVersionString(),u.getUsername(),u.getUniqueId(),u.getProperties()).getRoot();
    root.setParent(instance.getBase());
    return root;
  }
  return null;
}",0.9564270152505446
142285,"public void setupImageLayout(View layout,final String source){
  ImageView iv=(ImageView)layout;
  Bitmap b;
  if (!source.equals(""String_Node_Str"")) {
    try {
      b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(source).getStream());
      if (b == null) {
        iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
      }
 else {
        iv.setImageBitmap(b);
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
catch (    InvalidReferenceException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
  }
}","public void setupImageLayout(View layout,final String source){
  ImageView iv=(ImageView)layout;
  Bitmap b;
  if (!source.equals(""String_Node_Str"")) {
    try {
      b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(source).getStream());
      if (b == null) {
        iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
      }
 else {
        iv.setImageBitmap(b);
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
catch (    InvalidReferenceException ex) {
      ex.printStackTrace();
      iv.setImageDrawable(getResources().getDrawable(R.drawable.ic_menu_archive));
    }
  }
 else {
    iv.setImageDrawable(getResources().getDrawable(R.drawable.white));
  }
}",0.991504854368932
142286,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MENU_PREFERENCES:
    createPreferencesMenu();
  return true;
case MENU_UPDATE:
if (isAirplaneModeOn()) {
  CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode));
  return true;
}
Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
String ref=prefs.getString(""String_Node_Str"",null);
i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
startActivityForResult(i,UPGRADE_APP);
return true;
case MENU_CALL_LOG:
createCallLogActivity();
return true;
case MENU_REPORT_PROBLEM:
startReportActivity();
return true;
case MENU_VALIDATE_MEDIA:
startValidationActivity();
return true;
case MENU_DUMP_FORMS:
startFormDumpActivity();
return true;
case MENU_WIFI_DIRECT:
startWifiDirectActivity();
return true;
case MENU_CONNECTION_DIAGNOSTIC:
startMenuConnectionActivity();
return true;
case MENU_SAVED_FORMS:
goToFormArchive(false);
return true;
case MENU_SAVED_FORMS:
goToFormArchive(false);
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MENU_PREFERENCES:
    createPreferencesMenu();
  return true;
case MENU_UPDATE:
if (isAirplaneModeOn()) {
  CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode));
  return true;
}
Intent i=new Intent(getApplicationContext(),CommCareSetupActivity.class);
SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
String ref=prefs.getString(""String_Node_Str"",null);
i.putExtra(CommCareSetupActivity.KEY_PROFILE_REF,ref);
i.putExtra(CommCareSetupActivity.KEY_UPGRADE_MODE,true);
startActivityForResult(i,UPGRADE_APP);
return true;
case MENU_CALL_LOG:
createCallLogActivity();
return true;
case MENU_REPORT_PROBLEM:
startReportActivity();
return true;
case MENU_VALIDATE_MEDIA:
startValidationActivity();
return true;
case MENU_DUMP_FORMS:
startFormDumpActivity();
return true;
case MENU_WIFI_DIRECT:
startWifiDirectActivity();
return true;
case MENU_CONNECTION_DIAGNOSTIC:
startMenuConnectionActivity();
return true;
case MENU_SAVED_FORMS:
goToFormArchive(false);
return true;
}
return super.onOptionsItemSelected(item);
}",0.9757477768795472
142287,"public void setParams(CommCareSession session,Detail d,Entity e,int index,int detailNumber){
  String labelText=d.getFields()[index].getHeader().evaluate();
  label.setText(labelText);
  spacer.setText(labelText);
  Object field=e.getField(index);
  String textField=e.getFieldString(index);
  boolean veryLong=false;
  String form=d.getTemplateForms()[index];
  if (FORM_PHONE.equals(form)) {
    callout.setText(textField);
    if (current != PHONE) {
      callout.setOnClickListener(new OnClickListener(){
        public void onClick(        View v){
          listener.callRequested(callout.getText().toString());
        }
      }
);
      this.removeView(currentView);
      updateCurrentView(PHONE,callout);
    }
  }
 else   if (FORM_ADDRESS.equals(form)) {
    final String address=textField;
    addressText.setText(address);
    if (current != ADDRESS) {
      addressButton.setOnClickListener(new OnClickListener(){
        public void onClick(        View v){
          listener.addressRequested(MediaUtil.getGeoIntentURI(address));
        }
      }
);
      updateCurrentView(ADDRESS,addressView);
    }
  }
 else   if (FORM_IMAGE.equals(form)) {
    String imageLocation=textField;
    Bitmap b=MediaUtil.getScaledImageFromReference(this.getContext(),imageLocation);
    if (b == null) {
      imageView.setImageDrawable(null);
    }
 else {
      if (b.getWidth() > (getScreenWidth() / 2)) {
        veryLong=true;
      }
      imageView.setPadding(10,10,10,10);
      imageView.setAdjustViewBounds(true);
      imageView.setImageBitmap(b);
      imageView.setId(23422634);
    }
    updateCurrentView(IMAGE,imageView);
  }
 else   if (FORM_GRAPH.equals(form) && field instanceof GraphData) {
    GraphView g=new GraphView(getContext(),(GraphData)field);
    g.setTitle(labelText);
    g.setWidth(getScreenWidth());
    g.setHeight(getScreenWidth() / 2);
    graphLayout.addView(g.getView(),g.getLayoutParams());
    if (current != GRAPH) {
      LinearLayout.LayoutParams graphValueLayout=new LinearLayout.LayoutParams(origValue);
      graphValueLayout.weight=10;
      valuePane.setLayoutParams(graphValueLayout);
      label.setVisibility(View.GONE);
      data.setVisibility(View.GONE);
      updateCurrentView(GRAPH,graphLayout);
    }
  }
 else   if (FORM_AUDIO.equals(form)) {
    ViewId uniqueId=new ViewId(detailNumber,index,true);
    audioButton.modifyButtonForNewView(uniqueId,textField,true);
    updateCurrentView(AUDIO,audioButton);
  }
 else   if (FORM_VIDEO.equals(form)) {
    String videoLocation=textField;
    String localLocation=null;
    try {
      localLocation=ReferenceManager._().DeriveReference(videoLocation).getLocalURI();
      if (localLocation.startsWith(""String_Node_Str"")) {
        localLocation=FileUtil.getGlobalStringUri(localLocation);
      }
    }
 catch (    InvalidReferenceException ire) {
      Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + localLocation + ""String_Node_Str""+ ire.getMessage());
    }
    final String location=localLocation;
    videoButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        listener.playVideo(location);
      }
    }
);
    if (location == null) {
      videoButton.setEnabled(false);
      Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + videoLocation);
    }
 else {
      videoButton.setEnabled(true);
    }
    updateCurrentView(VIDEO,videoButton);
  }
 else {
    String text=textField;
    data.setText(text);
    if (text != null && text.length() > this.getContext().getResources().getInteger(R.integer.detail_size_cutoff)) {
      veryLong=true;
    }
    updateCurrentView(TEXT,data);
  }
  if (veryLong) {
    detailRow.setOrientation(LinearLayout.VERTICAL);
    spacer.setVisibility(View.GONE);
    label.setLayoutParams(fill);
    valuePane.setLayoutParams(fill);
  }
 else {
    if (detailRow.getOrientation() != LinearLayout.HORIZONTAL) {
      detailRow.setOrientation(LinearLayout.HORIZONTAL);
      spacer.setVisibility(View.INVISIBLE);
      label.setLayoutParams(origLabel);
      valuePane.setLayoutParams(origValue);
    }
  }
}","public void setParams(CommCareSession session,Detail d,Entity e,int index,int detailNumber){
  String labelText=d.getFields()[index].getHeader().evaluate();
  label.setText(labelText);
  spacer.setText(labelText);
  Object field=e.getField(index);
  String textField=e.getFieldString(index);
  boolean veryLong=false;
  String form=d.getTemplateForms()[index];
  if (FORM_PHONE.equals(form)) {
    callout.setText(textField);
    if (current != PHONE) {
      callout.setOnClickListener(new OnClickListener(){
        public void onClick(        View v){
          listener.callRequested(callout.getText().toString());
        }
      }
);
      this.removeView(currentView);
      updateCurrentView(PHONE,callout);
    }
  }
 else   if (FORM_ADDRESS.equals(form)) {
    final String address=textField;
    addressText.setText(address);
    if (current != ADDRESS) {
      addressButton.setOnClickListener(new OnClickListener(){
        public void onClick(        View v){
          listener.addressRequested(MediaUtil.getGeoIntentURI(address));
        }
      }
);
      updateCurrentView(ADDRESS,addressView);
    }
  }
 else   if (FORM_IMAGE.equals(form)) {
    String imageLocation=textField;
    Bitmap b=MediaUtil.getScaledImageFromReference(this.getContext(),imageLocation);
    if (b == null) {
      imageView.setImageDrawable(null);
    }
 else {
      if (b.getWidth() > (getScreenWidth() / 2)) {
        veryLong=true;
      }
      imageView.setPadding(10,10,10,10);
      imageView.setAdjustViewBounds(true);
      imageView.setImageBitmap(b);
      imageView.setId(23422634);
    }
    updateCurrentView(IMAGE,imageView);
  }
 else   if (FORM_GRAPH.equals(form) && field instanceof GraphData) {
    GraphView g=new GraphView(getContext(),(GraphData)field);
    g.setTitle(labelText);
    g.setWidth(getScreenWidth());
    g.setHeight(getScreenWidth() / 2);
    graphLayout.removeAllViews();
    graphLayout.addView(g.getView(),g.getLayoutParams());
    if (current != GRAPH) {
      LinearLayout.LayoutParams graphValueLayout=new LinearLayout.LayoutParams(origValue);
      graphValueLayout.weight=10;
      valuePane.setLayoutParams(graphValueLayout);
      label.setVisibility(View.GONE);
      data.setVisibility(View.GONE);
      updateCurrentView(GRAPH,graphLayout);
    }
  }
 else   if (FORM_AUDIO.equals(form)) {
    ViewId uniqueId=new ViewId(detailNumber,index,true);
    audioButton.modifyButtonForNewView(uniqueId,textField,true);
    updateCurrentView(AUDIO,audioButton);
  }
 else   if (FORM_VIDEO.equals(form)) {
    String videoLocation=textField;
    String localLocation=null;
    try {
      localLocation=ReferenceManager._().DeriveReference(videoLocation).getLocalURI();
      if (localLocation.startsWith(""String_Node_Str"")) {
        localLocation=FileUtil.getGlobalStringUri(localLocation);
      }
    }
 catch (    InvalidReferenceException ire) {
      Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + localLocation + ""String_Node_Str""+ ire.getMessage());
    }
    final String location=localLocation;
    videoButton.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        listener.playVideo(location);
      }
    }
);
    if (location == null) {
      videoButton.setEnabled(false);
      Logger.log(AndroidLogger.TYPE_ERROR_CONFIG_STRUCTURE,""String_Node_Str"" + videoLocation);
    }
 else {
      videoButton.setEnabled(true);
    }
    updateCurrentView(VIDEO,videoButton);
  }
 else {
    String text=textField;
    data.setText(text);
    if (text != null && text.length() > this.getContext().getResources().getInteger(R.integer.detail_size_cutoff)) {
      veryLong=true;
    }
    updateCurrentView(TEXT,data);
  }
  if (veryLong) {
    detailRow.setOrientation(LinearLayout.VERTICAL);
    spacer.setVisibility(View.GONE);
    label.setLayoutParams(fill);
    valuePane.setLayoutParams(fill);
  }
 else {
    if (detailRow.getOrientation() != LinearLayout.HORIZONTAL) {
      detailRow.setOrientation(LinearLayout.HORIZONTAL);
      spacer.setVisibility(View.INVISIBLE);
      label.setLayoutParams(origLabel);
      valuePane.setLayoutParams(origValue);
    }
  }
}",0.9959154252763096
142288,"private void startFormEntry(AndroidSessionWrapper state) throws SessionUnavailableException {
  try {
    if (state.getFormRecordId() == -1) {
      if (CommCarePreferences.isIncompleteFormsEnabled()) {
        SessionStateDescriptor existing=state.searchForDuplicates();
        if (existing != null && existing.getSessionDescriptor().contains(SessionFrame.STATE_DATUM_VAL)) {
          createAskUseOldDialog(state,existing);
          return;
        }
      }
      state.commitStub();
    }
 else {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    FormRecord record=state.getFormRecord();
    formEntry(platform.getFormContentUri(record.getFormNamespace()),record,CommCareActivity.getTitle(this,null));
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(e);
  }
}","private void startFormEntry(AndroidSessionWrapper state) throws SessionUnavailableException {
  try {
    if (state.getFormRecordId() == -1) {
      if (CommCarePreferences.isIncompleteFormsEnabled()) {
        SessionStateDescriptor existing=state.searchForDuplicates();
        if (existing != null && existing.getSessionDescriptor().contains(SessionFrame.STATE_DATUM_VAL)) {
          createAskUseOldDialog(state,existing);
          return;
        }
      }
      state.commitStub();
    }
 else {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    FormRecord record=state.getFormRecord();
    if (platform == null) {
      platform=CommCareApplication._().getCurrentApp() == null ? null : CommCareApplication._().getCurrentApp().getCommCarePlatform();
    }
    formEntry(platform.getFormContentUri(record.getFormNamespace()),record,CommCareActivity.getTitle(this,null));
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(e);
  }
}",0.9047887323943662
142289,"public void onResume(){
  super.onResume();
  if (this.isFinishing() || startOther) {
    return;
  }
  if (!resuming && !mNoDetailMode && this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=getEntityFromID(this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      if (inAwesomeMode) {
        displayReferenceAwesome(entity,adapter.getPosition(entity));
        updateSelectedItem(entity,true);
      }
 else {
        this.getIntent().removeExtra(EXTRA_ENTITY_KEY);
        Intent i=getDetailIntent(entity);
        if (adapter != null) {
          i.putExtra(""String_Node_Str"",adapter.getPosition(entity));
        }
        startActivityForResult(i,CONFIRM_SELECT);
        return;
      }
    }
  }
  refreshView();
}","public void onResume(){
  super.onResume();
  if (this.isFinishing() || startOther) {
    return;
  }
  if (!resuming && !mNoDetailMode && this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=getEntityFromID(this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      if (inAwesomeMode) {
        if (adapter != null) {
          displayReferenceAwesome(entity,adapter.getPosition(entity));
          updateSelectedItem(entity,true);
        }
      }
 else {
        this.getIntent().removeExtra(EXTRA_ENTITY_KEY);
        Intent i=getDetailIntent(entity);
        if (adapter != null) {
          i.putExtra(""String_Node_Str"",adapter.getPosition(entity));
        }
        startActivityForResult(i,CONFIRM_SELECT);
        return;
      }
    }
  }
  refreshView();
}",0.9715370018975332
142290,"/** 
 * TODO: At some point in the future this kind of division will be more central but this generates an input stream for a URL using the best package for your application
 * @param url
 * @return a Stream to that URL 
 */
public InputStream simpleGet(URL url) throws IOException {
  if (android.os.Build.VERSION.SDK_INT > 11) {
    if (passwordAuthentication != null) {
      Authenticator.setDefault(new Authenticator(){
        protected PasswordAuthentication getPasswordAuthentication(){
          return passwordAuthentication;
        }
      }
);
    }
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
    setup(con);
    con.connect();
    try {
      int responseCode=con.getResponseCode();
      if (responseCode == 301) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        URL newUrl=con.getURL();
        con.disconnect();
        con=(HttpURLConnection)newUrl.openConnection();
        setup(con);
        con.connect();
      }
      if (!HttpRequestGenerator.isValidRedirect(url,con.getURL())) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        throw new IOException(""String_Node_Str"");
      }
      return con.getInputStream();
    }
 catch (    IOException e) {
      if (e.getMessage().toLowerCase().contains(""String_Node_Str"")) {
      }
 else {
        throw e;
      }
    }
  }
  Log.i(LOG_COMMCARE_NETWORK,""String_Node_Str"");
  HttpResponse get=get(url.toString());
  if (get.getStatusLine().getStatusCode() == 404) {
    throw new IOException(""String_Node_Str"" + url.toString());
  }
  return get.getEntity().getContent();
}","/** 
 * TODO: At some point in the future this kind of division will be more central but this generates an input stream for a URL using the best package for your application
 * @param url
 * @return a Stream to that URL 
 */
public InputStream simpleGet(URL url) throws IOException {
  if (android.os.Build.VERSION.SDK_INT > 11) {
    if (passwordAuthentication != null) {
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          return passwordAuthentication;
        }
      }
);
    }
    int responseCode=-1;
    HttpURLConnection con=(HttpURLConnection)url.openConnection();
    setup(con);
    con.connect();
    try {
      responseCode=con.getResponseCode();
      if (responseCode == 301) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        URL newUrl=con.getURL();
        con.disconnect();
        con=(HttpURLConnection)newUrl.openConnection();
        setup(con);
        con.connect();
      }
      if (!HttpRequestGenerator.isValidRedirect(url,con.getURL())) {
        Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + url.toString() + ""String_Node_Str""+ con.getURL().toString());
        throw new IOException(""String_Node_Str"");
      }
      return con.getInputStream();
    }
 catch (    IOException e) {
      if (e.getMessage().toLowerCase().contains(""String_Node_Str"") || responseCode == 401) {
      }
 else {
        throw e;
      }
    }
  }
  Log.i(LOG_COMMCARE_NETWORK,""String_Node_Str"");
  HttpResponse get=get(url.toString());
  if (get.getStatusLine().getStatusCode() == 404) {
    throw new IOException(""String_Node_Str"" + url.toString());
  }
  return get.getEntity().getContent();
}",0.9826330532212884
142291,"protected PasswordAuthentication getPasswordAuthentication(){
  return passwordAuthentication;
}","@Override protected PasswordAuthentication getPasswordAuthentication(){
  return passwordAuthentication;
}",0.9504950495049505
142292,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  setContentView(R.layout.mainnew);
  configUi();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!isTaskRoot()) {
    Intent intent=getIntent();
    String action=intent.getAction();
    if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) && action != null && action.equals(Intent.ACTION_MAIN)) {
      finish();
      return;
    }
  }
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  setContentView(R.layout.mainnew);
  configUi();
}",0.6767091541135574
142293,"public T newObject(byte[] data){
  try {
    T e=(T)ctype.newInstance();
    e.readExternal(new DataInputStream(new ByteArrayInputStream(data)),helper.getPrototypeFactory());
    return e;
  }
 catch (  IllegalAccessException e1) {
    e1.printStackTrace();
  }
catch (  InstantiationException e1) {
    e1.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  DeserializationException e) {
    e.printStackTrace();
  }
  return null;
}","public T newObject(byte[] data){
  try {
    T e=(T)ctype.newInstance();
    e.readExternal(new DataInputStream(new ByteArrayInputStream(data)),helper.getPrototypeFactory());
    return e;
  }
 catch (  IllegalAccessException e) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ctype.getName());
    re.initCause(e);
    Logger.log(AndroidLogger.TYPE_ERROR_STORAGE,ExceptionReportTask.getStackTrace(re,true));
    throw re;
  }
catch (  InstantiationException e) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ctype.getName());
    re.initCause(e);
    Logger.log(AndroidLogger.TYPE_ERROR_STORAGE,ExceptionReportTask.getStackTrace(re,true));
    throw re;
  }
catch (  IOException e) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ctype.getName());
    re.initCause(e);
    Logger.log(AndroidLogger.TYPE_ERROR_STORAGE,ExceptionReportTask.getStackTrace(re,true));
    throw re;
  }
catch (  DeserializationException e) {
    RuntimeException re=new RuntimeException(""String_Node_Str"" + ctype.getName());
    re.initCause(e);
    Logger.log(AndroidLogger.TYPE_ERROR_STORAGE,ExceptionReportTask.getStackTrace(re,true));
    throw re;
  }
}",0.4546001202645821
142294,"public static String getStackTrace(Throwable e){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  e.printStackTrace(new PrintStream(bos));
  return new String(bos.toByteArray());
}","public static String getStackTrace(Throwable e,boolean fullContext){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  e.printStackTrace(new PrintStream(bos));
  String retString=new String(bos.toByteArray());
  if (fullContext && e.getCause() != null) {
    retString+=""String_Node_Str"" + getStackTrace(e.getCause(),false);
  }
  return retString;
}",0.6666666666666666
142295,"public void resetRecords() throws SessionUnavailableException {
  if (loader.getStatus() == Status.RUNNING) {
    loader.cancel(false);
    loader=loader.spawn();
  }
 else   if (loader.getStatus() == Status.FINISHED) {
    loader=loader.spawn();
  }
  SqlStorage<FormRecord> storage=CommCareApplication._().getUserStorage(FormRecord.class);
  if (filter == null) {
    filter=FormRecordFilter.SubmittedAndPending;
  }
  records=new Vector<FormRecord>();
  for (  String status : filter.getStatus()) {
    records.addAll(storage.getRecordsForValues(new String[]{FormRecord.META_STATUS},new Object[]{status}));
  }
  Collections.sort(records,new Comparator<FormRecord>(){
    public int compare(    FormRecord one,    FormRecord two){
      long ot=one.lastModified().getTime();
      long tt=two.lastModified().getTime();
      return ot > tt ? -1 : ot == tt ? 0 : 1;
    }
  }
);
  searchCache=new Hashtable<Integer,String[]>();
  current=new ArrayList<FormRecord>();
  this.filterValues(currentQuery);
  loader.init(searchCache);
  loader.execute(records.toArray(new FormRecord[0]));
}","public void resetRecords() throws SessionUnavailableException {
  if (loader.getStatus() == Status.RUNNING) {
    loader.cancel(false);
    loader=loader.spawn();
  }
 else   if (loader.getStatus() == Status.FINISHED) {
    loader=loader.spawn();
  }
  SqlStorage<FormRecord> storage=CommCareApplication._().getUserStorage(FormRecord.class);
  if (filter == null) {
    filter=FormRecordFilter.SubmittedAndPending;
  }
  records=new Vector<FormRecord>();
  for (  String status : filter.getStatus()) {
    records.addAll(storage.getRecordsForValues(new String[]{FormRecord.META_STATUS},new Object[]{status}));
  }
  Collections.sort(records,new Comparator<FormRecord>(){
    public int compare(    FormRecord one,    FormRecord two){
      long ot=one.lastModified().getTime();
      long tt=two.lastModified().getTime();
      return ot > tt ? -1 : ot == tt ? 0 : 1;
    }
  }
);
  searchCache=new Hashtable<Integer,String[]>();
  current=new ArrayList<FormRecord>();
  this.filterValues(currentQuery);
  loader.init(searchCache,names);
  loader.execute(records.toArray(new FormRecord[0]));
}",0.9972477064220184
142296,"public void init(Hashtable<Integer,String[]> searchCache){
  this.searchCache=searchCache;
  if (descriptorCache == null) {
    descriptorCache=new Hashtable<String,String>();
  }
  priorityQueue=new LinkedList<FormRecord>();
  loaded=new HashSet<Integer>();
}","public void init(Hashtable<Integer,String[]> searchCache,Hashtable<String,Text> formNames){
  this.searchCache=searchCache;
  if (descriptorCache == null) {
    descriptorCache=new Hashtable<String,String>();
  }
  priorityQueue=new LinkedList<FormRecord>();
  loaded=new HashSet<Integer>();
  this.formNames=formNames;
}",0.8950086058519794
142297,"@Override protected Integer doInBackground(FormRecord... params){
  int progress=0;
  int target=params.length;
  while (progress < target && !isCancelled()) {
    FormRecord current=null;
synchronized (priorityQueue) {
      if (!priorityQueue.isEmpty()) {
        current=priorityQueue.poll();
        loaded.add(current.getID());
      }
      if (current == null) {
        current=params[progress++];
        if (loaded.contains(current.getID())) {
          continue;
        }
 else {
          loaded.add(current.getID());
        }
      }
    }
    ArrayList<String> cache=new ArrayList<String>();
    cache.add(android.text.format.DateUtils.formatDateTime(context,current.lastModified().getTime(),android.text.format.DateUtils.FORMAT_NO_MONTH_DAY | android.text.format.DateUtils.FORMAT_NO_YEAR).toLowerCase());
    SessionStateDescriptor ssd=null;
    try {
      ssd=descriptorStorage.getRecordForValue(SessionStateDescriptor.META_FORM_RECORD_ID,current.getID());
    }
 catch (    NoSuchElementException nsee) {
    }
    String dataTitle=""String_Node_Str"";
    if (ssd != null) {
      String descriptor=ssd.getSessionDescriptor();
      if (!descriptorCache.containsKey(descriptor)) {
        AndroidSessionWrapper asw=new AndroidSessionWrapper(platform);
        asw.loadFromStateDescription(ssd);
        try {
          dataTitle=asw.getTitle();
        }
 catch (        RuntimeException e) {
          dataTitle=""String_Node_Str"";
        }
        dataTitle=dataTitle == null ? ""String_Node_Str"" : dataTitle;
        descriptorCache.put(descriptor,dataTitle);
      }
 else {
        dataTitle=descriptorCache.get(descriptor);
      }
    }
    cache.add(dataTitle);
    this.publishProgress(new Pair<Integer,ArrayList<String>>(current.getID(),cache));
  }
  return 1;
}","@Override protected Integer doInBackground(FormRecord... params){
  int progress=0;
  int target=params.length;
  while (progress < target && !isCancelled()) {
    FormRecord current=null;
synchronized (priorityQueue) {
      if (!priorityQueue.isEmpty()) {
        current=priorityQueue.poll();
        loaded.add(current.getID());
      }
      if (current == null) {
        current=params[progress++];
        if (loaded.contains(current.getID())) {
          continue;
        }
 else {
          loaded.add(current.getID());
        }
      }
    }
    ArrayList<String> cache=new ArrayList<String>();
    cache.add(android.text.format.DateUtils.formatDateTime(context,current.lastModified().getTime(),android.text.format.DateUtils.FORMAT_NO_MONTH_DAY | android.text.format.DateUtils.FORMAT_NO_YEAR).toLowerCase());
    SessionStateDescriptor ssd=null;
    try {
      ssd=descriptorStorage.getRecordForValue(SessionStateDescriptor.META_FORM_RECORD_ID,current.getID());
    }
 catch (    NoSuchElementException nsee) {
    }
    String dataTitle=""String_Node_Str"";
    if (ssd != null) {
      String descriptor=ssd.getSessionDescriptor();
      if (!descriptorCache.containsKey(descriptor)) {
        AndroidSessionWrapper asw=new AndroidSessionWrapper(platform);
        asw.loadFromStateDescription(ssd);
        try {
          dataTitle=asw.getTitle();
        }
 catch (        RuntimeException e) {
          dataTitle=""String_Node_Str"";
        }
        dataTitle=dataTitle == null ? ""String_Node_Str"" : dataTitle;
        descriptorCache.put(descriptor,dataTitle);
      }
 else {
        dataTitle=descriptorCache.get(descriptor);
      }
    }
    cache.add(dataTitle);
    if (formNames.containsKey(current.getFormNamespace())) {
      Text name=formNames.get(current.getFormNamespace());
      cache.add(name.evaluate());
    }
    this.publishProgress(new Pair<Integer,ArrayList<String>>(current.getID(),cache));
  }
  return 1;
}",0.9572421165152324
142298,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    platform=CommCareApplication._().getCommCarePlatform();
    setContentView(R.layout.entity_select_layout);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
    searchbox=(EditText)findViewById(R.id.searchbox);
    header=(LinearLayout)findViewById(R.id.entity_select_header);
    barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
    filterSelect=(Spinner)findViewById(R.id.entity_select_filter_dropdown);
    listView=(ListView)findViewById(R.id.screen_entity_select_list);
    listView.setOnItemClickListener(this);
    header.setVisibility(View.GONE);
    barcodeButton.setVisibility(View.GONE);
    TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
    searchLabel.setText(Localization.get(""String_Node_Str""));
    searchbox.addTextChangedListener(this);
    FormRecordLoaderTask task=new FormRecordLoaderTask(this,CommCareApplication._().getUserStorage(SessionStateDescriptor.class),platform);
    task.setListener(this);
    adapter=new IncompleteFormListAdapter(this,platform,task);
    FormRecordFilter filter=null;
    initialSelection=this.getIntent().getIntExtra(KEY_INITIAL_RECORD_ID,-1);
    if (this.getIntent().hasExtra(FormRecord.META_STATUS)) {
      String incomingFilter=this.getIntent().getStringExtra(FormRecord.META_STATUS);
      if (incomingFilter.equals(FormRecord.STATUS_INCOMPLETE)) {
        filter=FormRecordFilter.Incomplete;
      }
    }
 else {
      filter=FormRecordFilter.SubmittedAndPending;
      FormRecordFilter[] filters=FormRecordFilter.values();
      String[] names=new String[filters.length];
      for (int i=0; i < filters.length; ++i) {
        names[i]=Localization.get(filters[i].getMessage());
      }
      ArrayAdapter<String> spinneritems=new ArrayAdapter<String>(this,R.layout.form_filter_display,names);
      filterSelect.setAdapter(spinneritems);
      spinneritems.setDropDownViewResource(R.layout.form_filter_item);
      filterSelect.setOnItemSelectedListener(new OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> arg0,        View arg1,        int index,        long id){
          adapter.setFormFilter(FormRecordFilter.values()[index]);
          adapter.resetRecords();
          adapter.notifyDataSetChanged();
          invalidateOptionsMenu();
        }
        @Override public void onNothingSelected(        AdapterView<?> arg0){
        }
      }
);
      filterSelect.setVisibility(View.VISIBLE);
    }
    if (filter != null) {
      adapter.setFormFilter(filter);
    }
    this.registerForContextMenu(listView);
    refreshView();
  }
 catch (  SessionUnavailableException sue) {
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    platform=CommCareApplication._().getCommCarePlatform();
    setContentView(R.layout.entity_select_layout);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
    searchbox=(EditText)findViewById(R.id.searchbox);
    header=(LinearLayout)findViewById(R.id.entity_select_header);
    barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
    filterSelect=(Spinner)findViewById(R.id.entity_select_filter_dropdown);
    listView=(ListView)findViewById(R.id.screen_entity_select_list);
    listView.setOnItemClickListener(this);
    header.setVisibility(View.GONE);
    barcodeButton.setVisibility(View.GONE);
    TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
    searchLabel.setText(Localization.get(""String_Node_Str""));
    searchbox.addTextChangedListener(this);
    FormRecordLoaderTask task=new FormRecordLoaderTask(this,CommCareApplication._().getUserStorage(SessionStateDescriptor.class),platform);
    task.setListener(this);
    adapter=new IncompleteFormListAdapter(this,platform,task);
    FormRecordFilter filter=null;
    initialSelection=this.getIntent().getIntExtra(KEY_INITIAL_RECORD_ID,-1);
    if (this.getIntent().hasExtra(FormRecord.META_STATUS)) {
      String incomingFilter=this.getIntent().getStringExtra(FormRecord.META_STATUS);
      if (incomingFilter.equals(FormRecord.STATUS_INCOMPLETE)) {
        filter=FormRecordFilter.Incomplete;
      }
    }
 else {
      filter=FormRecordFilter.SubmittedAndPending;
      FormRecordFilter[] filters=FormRecordFilter.values();
      String[] names=new String[filters.length];
      for (int i=0; i < filters.length; ++i) {
        names[i]=Localization.get(filters[i].getMessage());
      }
      ArrayAdapter<String> spinneritems=new ArrayAdapter<String>(this,R.layout.form_filter_display,names);
      filterSelect.setAdapter(spinneritems);
      spinneritems.setDropDownViewResource(R.layout.form_filter_item);
      filterSelect.setOnItemSelectedListener(new OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> arg0,        View arg1,        int index,        long id){
          adapter.setFormFilter(FormRecordFilter.values()[index]);
          adapter.resetRecords();
          adapter.notifyDataSetChanged();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            invalidateOptionsMenu();
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> arg0){
        }
      }
);
      filterSelect.setVisibility(View.VISIBLE);
    }
    if (filter != null) {
      adapter.setFormFilter(filter);
    }
    this.registerForContextMenu(listView);
    refreshView();
  }
 catch (  SessionUnavailableException sue) {
  }
}",0.984773371104816
142299,"@Override public void onItemSelected(AdapterView<?> arg0,View arg1,int index,long id){
  adapter.setFormFilter(FormRecordFilter.values()[index]);
  adapter.resetRecords();
  adapter.notifyDataSetChanged();
  invalidateOptionsMenu();
}","@Override public void onItemSelected(AdapterView<?> arg0,View arg1,int index,long id){
  adapter.setFormFilter(FormRecordFilter.values()[index]);
  adapter.resetRecords();
  adapter.notifyDataSetChanged();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    invalidateOptionsMenu();
  }
}",0.8698884758364313
142300,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  try {
    Reference local=ReferenceManager._().DeriveReference(localLocation);
    Suite mSuite=(new SuiteParser(local.getStream(),new DummyResourceTable(),null){
      @Override protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
        return null;
      }
    }
).parse();
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Enumeration e=menus.elements();
    while (e.hasMoreElements()) {
      Menu mMenu=(Menu)e.nextElement();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      try {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        if (!aRef.doesBinaryExist()) {
          String audioLocalReference=aRef.getLocalURI();
          problems.addElement(new MissingMediaException(r,""String_Node_Str"" + audioLocalReference,audioLocalReference));
        }
      }
 catch (      InvalidReferenceException ire) {
      }
      try {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        if (!iRef.doesBinaryExist()) {
          String imageLocalReference=iRef.getLocalURI();
          problems.addElement(new MissingMediaException(r,""String_Node_Str"" + imageLocalReference,imageLocalReference));
        }
      }
 catch (      InvalidReferenceException ire) {
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  try {
    Reference local=ReferenceManager._().DeriveReference(localLocation);
    Suite mSuite=(new SuiteParser(local.getStream(),new DummyResourceTable(),null){
      @Override protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
        return null;
      }
      @Override protected boolean inValidationMode(){
        return true;
      }
    }
).parse();
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Enumeration e=menus.elements();
    while (e.hasMoreElements()) {
      Menu mMenu=(Menu)e.nextElement();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      try {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        if (!aRef.doesBinaryExist()) {
          String audioLocalReference=aRef.getLocalURI();
          problems.addElement(new MissingMediaException(r,""String_Node_Str"" + audioLocalReference,audioLocalReference));
        }
      }
 catch (      InvalidReferenceException ire) {
      }
      try {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        if (!iRef.doesBinaryExist()) {
          String imageLocalReference=iRef.getLocalURI();
          problems.addElement(new MissingMediaException(r,""String_Node_Str"" + imageLocalReference,imageLocalReference));
        }
      }
 catch (      InvalidReferenceException ire) {
      }
    }
  }
 catch (  Exception e) {
    Logger.log(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}",0.9394110985277464
142301,"public void setParams(Entity e,boolean currentlySelected){
  for (int i=0; i < e.getNumFields(); ++i) {
    if (views[i] == null) {
      continue;
    }
    if (e.getField(i) == null) {
      continue;
    }
    if (""String_Node_Str"".equals(forms[i])) {
      ImageView iv=(ImageView)views[i];
      Bitmap b;
      try {
        if (!e.getField(i).equals(""String_Node_Str"")) {
          b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(e.getField(i)).getStream());
          iv.setImageBitmap(b);
        }
      }
 catch (      IOException ex) {
        ex.printStackTrace();
        iv.setImageBitmap(null);
      }
catch (      InvalidReferenceException ex) {
        ex.printStackTrace();
        iv.setImageBitmap(null);
      }
    }
 else {
      setupLayout(views[i],e.getField(i));
    }
  }
  if (currentlySelected) {
    this.setBackgroundResource(R.drawable.grey_bordered_box);
  }
 else {
    this.setBackgroundDrawable(null);
  }
}","public void setParams(Entity e,boolean currentlySelected){
  for (int i=0; i < e.getNumFields(); ++i) {
    if (views[i] == null) {
      continue;
    }
    if (e.getField(i) == null) {
      continue;
    }
    if (""String_Node_Str"".equals(forms[i])) {
      ImageView iv=(ImageView)views[i];
      Bitmap b;
      try {
        if (!e.getField(i).equals(""String_Node_Str"")) {
          b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(e.getField(i)).getStream());
          iv.setImageBitmap(b);
        }
 else {
          iv.setImageBitmap(null);
        }
      }
 catch (      IOException ex) {
        ex.printStackTrace();
        iv.setImageBitmap(null);
      }
catch (      InvalidReferenceException ex) {
        ex.printStackTrace();
        iv.setImageBitmap(null);
      }
    }
 else {
      setupLayout(views[i],e.getField(i));
    }
  }
  if (currentlySelected) {
    this.setBackgroundResource(R.drawable.grey_bordered_box);
  }
 else {
    this.setBackgroundDrawable(null);
  }
}",0.973245835436648
142302,"public SqlStorageIterator<T> iterate(){
  Cursor c=helper.getHandle().query(table,new String[]{DbUtil.ID_COL},null,null,null,null,DbUtil.ID_COL);
  return new SqlStorageIterator<T>(c,this);
}","public SqlStorageIterator<T> iterate(){
  Cursor c=helper.getHandle().query(table,new String[]{DbUtil.ID_COL,DbUtil.DATA_COL},null,null,null,null,DbUtil.ID_COL);
  return new SqlStorageIterator<T>(c,this);
}",0.9597989949748744
142303,"/** 
 * Clear all local state and return this session to completely fresh
 */
public void reset(){
  this.session.clearAllState();
  formRecordId=-1;
  instanceUri=null;
  instanceStatus=null;
  sessionStateRecordId=-1;
}","/** 
 * Clear all local state and return this session to completely fresh
 */
public void reset(){
  this.session.clearAllState();
  cleanVolatiles();
}",0.7774798927613941
142304,"/** 
 * Finish and seal the current session. Run any stack operations mandated by the current entry and pop a new frame from the stack, if one exists.
 */
public boolean terminateSession(){
  Vector<StackOperation> ops=session.getCurrentEntry().getPostEntrySessionOperations();
  if (ops.size() > 0) {
    EvaluationContext ec=getEC();
    for (    StackOperation op : ops) {
      session.executeStackOperation(op,ec);
    }
  }
  if (session.finishAndPop()) {
    formRecordId=-1;
    instanceUri=null;
    instanceStatus=null;
    sessionStateRecordId=-1;
    return true;
  }
 else {
    reset();
    return false;
  }
}","/** 
 * Finish and seal the current session. Run any stack operations mandated by the current entry and pop a new frame from the stack, if one exists.
 */
public boolean terminateSession(){
  Vector<StackOperation> ops=session.getCurrentEntry().getPostEntrySessionOperations();
  if (ops.size() > 0) {
    EvaluationContext ec=getEC();
    for (    StackOperation op : ops) {
      session.executeStackOperation(op,ec);
    }
  }
  if (session.finishAndPop()) {
    cleanVolatiles();
    return true;
  }
 else {
    reset();
    return false;
  }
}",0.908780903665814
142305,"private String readInput(InputStream stream,CommCareTransactionParserFactory factory) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, SessionUnavailableException {
  DataModelPullParser parser;
  factory.initCaseParser();
  Hashtable<String,String> formNamespaces=new Hashtable<String,String>();
  for (  String xmlns : CommCareApplication._().getCommCarePlatform().getInstalledForms()) {
    Cursor cur=c.getContentResolver().query(CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns),new String[]{FormsColumns.FORM_FILE_PATH},null,null,null);
    if (cur.moveToFirst()) {
      String path=cur.getString(cur.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      formNamespaces.put(xmlns,path);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns));
    }
    cur.close();
  }
  factory.initFormInstanceParser(formNamespaces);
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  try {
    db.beginTransaction();
    parser=new DataModelPullParser(stream,factory);
    parser.parse();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  return factory.getSyncToken();
}","private String readInput(InputStream stream,CommCareTransactionParserFactory factory) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, SessionUnavailableException {
  DataModelPullParser parser;
  factory.initCaseParser();
  factory.initStockParser();
  Hashtable<String,String> formNamespaces=new Hashtable<String,String>();
  for (  String xmlns : CommCareApplication._().getCommCarePlatform().getInstalledForms()) {
    Cursor cur=c.getContentResolver().query(CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns),new String[]{FormsColumns.FORM_FILE_PATH},null,null,null);
    if (cur.moveToFirst()) {
      String path=cur.getString(cur.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      formNamespaces.put(xmlns,path);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + CommCareApplication._().getCommCarePlatform().getFormContentUri(xmlns));
    }
    cur.close();
  }
  factory.initFormInstanceParser(formNamespaces);
  SQLiteDatabase db=CommCareApplication._().getUserDbHandle();
  try {
    db.beginTransaction();
    parser=new DataModelPullParser(stream,factory);
    parser.parse();
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  return factory.getSyncToken();
}",0.9887203422792687
142306,"private FormRecord process(FormRecord record) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, StorageFullException {
  String form=record.getPath(c);
  DataModelPullParser parser;
  final File f=new File(form);
  final Cipher decrypter=FormUploadUtil.getDecryptCipher((new SecretKeySpec(record.getAesKey(),""String_Node_Str"")));
  InputStream is=new CipherInputStream(new FileInputStream(f),decrypter);
  parser=new DataModelPullParser(is,new TransactionParserFactory(){
    public TransactionParser getParser(    String name,    String namespace,    KXmlParser parser){
      if (name.toLowerCase().equals(""String_Node_Str"")) {
        return new AndroidCaseXmlParser(parser,CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACase.class),decrypter,null,f.getParentFile());
      }
      return null;
    }
  }
,true,true);
  parser.parse();
  is.close();
  return updateRecordStatus(record,FormRecord.STATUS_UNSENT);
}","/** 
 * This is the entry point for processing a form. New transaction types should all be declared here. 
 * @param record
 * @return
 * @throws InvalidStructureException
 * @throws IOException
 * @throws XmlPullParserException
 * @throws UnfullfilledRequirementsException
 * @throws StorageFullException
 */
private FormRecord process(FormRecord record) throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException, StorageFullException {
  String form=record.getPath(c);
  DataModelPullParser parser;
  final File f=new File(form);
  final Cipher decrypter=FormUploadUtil.getDecryptCipher((new SecretKeySpec(record.getAesKey(),""String_Node_Str"")));
  InputStream is=new CipherInputStream(new FileInputStream(f),decrypter);
  parser=new DataModelPullParser(is,new TransactionParserFactory(){
    public TransactionParser getParser(    String name,    String namespace,    KXmlParser parser){
      if (StockXmlParsers.STOCK_XML_NAMESPACE.equals(namespace)) {
        return new StockXmlParsers(parser,CommCareApplication._().getUserStorage(Stock.STORAGE_KEY,Stock.class));
      }
 else       if (name.toLowerCase().equals(""String_Node_Str"")) {
        return new AndroidCaseXmlParser(parser,CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACase.class),decrypter,null,f.getParentFile());
      }
      return null;
    }
  }
,true,true);
  parser.parse();
  is.close();
  return updateRecordStatus(record,FormRecord.STATUS_UNSENT);
}",0.6305139619587211
142307,"public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new AndroidCaseXmlParser(parser,CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACase.class),decrypter,null,f.getParentFile());
  }
  return null;
}","public TransactionParser getParser(String name,String namespace,KXmlParser parser){
  if (StockXmlParsers.STOCK_XML_NAMESPACE.equals(namespace)) {
    return new StockXmlParsers(parser,CommCareApplication._().getUserStorage(Stock.STORAGE_KEY,Stock.class));
  }
 else   if (name.toLowerCase().equals(""String_Node_Str"")) {
    return new AndroidCaseXmlParser(parser,CommCareApplication._().getUserStorage(ACase.STORAGE_KEY,ACase.class),decrypter,null,f.getParentFile());
  }
  return null;
}",0.5433962264150943
142308,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    session=CommCareApplication._().getCurrentSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        if (oldActivity.selectedIntent != null) {
          startActivityForResult(oldActivity.selectedIntent,CONFIRM_SELECT);
          startOther=true;
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str"")) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  try {
    session=CommCareApplication._().getCurrentSession();
  }
 catch (  SessionUnavailableException sue) {
    this.setResult(Activity.RESULT_CANCELED);
    this.finish();
    return;
  }
  selectDatum=session.getNeededDatum();
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        if (oldActivity.selectedIntent != null) {
          startActivityForResult(oldActivity.selectedIntent,CONFIRM_SELECT);
          startOther=true;
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && (prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str""))) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  }
}",0.9996634129922584
142309,"@Override protected Boolean doTaskBackground(String... params){
  Log.d(CommCareWiFiDirectActivity.TAG,""String_Node_Str"");
  for (int i=0; i < records.length; ++i) {
    FormRecord record=records[i];
    FormRecordCleanupTask.wipeRecord(c,platform,record);
  }
  return true;
}","@Override protected Boolean doTaskBackground(String... params){
  Log.d(CommCareWiFiDirectActivity.TAG,""String_Node_Str"");
  for (int i=0; i < records.length; ++i) {
    FormRecord record=records[i];
    FormRecordCleanupTask.wipeRecord(c,record);
  }
  return true;
}",0.98348623853211
142310,"public void fail(NotificationMessage message,boolean alwaysNotify,boolean canRetry){
  Toast.makeText(this,message.getTitle(),Toast.LENGTH_LONG).show();
  setUiState(UiState.error);
  retryCount++;
  if (retryCount > RETRY_LIMIT) {
    canRetry=false;
  }
  if (isAuto || alwaysNotify) {
    CommCareApplication._().reportNotificationMessage(message);
  }
  if (isAuto) {
    done(false);
  }
 else {
    if (alwaysNotify) {
      this.displayMessage=Localization.get(""String_Node_Str"",new String[]{message.getDetails()});
      this.canRetry=canRetry;
    }
 else {
      this.displayMessage=message.getDetails();
      this.canRetry=canRetry;
      String fullErrorMessage=message.getDetails();
      if (alwaysNotify) {
        fullErrorMessage=fullErrorMessage + message.getAction();
      }
      mainMessage.setText(fullErrorMessage);
    }
  }
  refreshView();
}","public void fail(NotificationMessage message,boolean alwaysNotify,boolean canRetry){
  Toast.makeText(this,message.getTitle(),Toast.LENGTH_LONG).show();
  setUiState(UiState.error);
  retryCount++;
  if (retryCount > RETRY_LIMIT) {
    canRetry=false;
  }
  if (isAuto || alwaysNotify) {
    CommCareApplication._().reportNotificationMessage(message);
  }
  if (isAuto) {
    done(false);
  }
 else {
    if (alwaysNotify) {
      this.displayMessage=Localization.get(""String_Node_Str"",new String[]{message.getDetails()});
      this.canRetry=canRetry;
      mainMessage.setText(displayMessage);
    }
 else {
      this.displayMessage=message.getDetails();
      this.canRetry=canRetry;
      String fullErrorMessage=message.getDetails();
      if (alwaysNotify) {
        fullErrorMessage=fullErrorMessage + message.getAction();
      }
      mainMessage.setText(fullErrorMessage);
    }
  }
  refreshView();
}",0.9758562605277934
142311,"private void processAndSend(FormRecord[] records,final boolean syncAfterwards){
  SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
  int sendTaskId=syncAfterwards ? ProcessAndSendTask.SEND_PHASE_ID : -1;
  ProcessAndSendTask<CommCareHomeActivity> mProcess=new ProcessAndSendTask<CommCareHomeActivity>(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)),sendTaskId){
    @Override protected void deliverResult(    CommCareHomeActivity receiver,    Integer result){
      if (result == ProcessAndSendTask.PROGRESS_LOGGED_OUT) {
        returnToLogin(Localization.get(""String_Node_Str""));
        return;
      }
      try {
        receiver.refreshView();
      }
 catch (      SessionUnavailableException sue) {
        receiver.returnToLogin(Localization.get(""String_Node_Str""));
      }
      int successfulSends=this.getSuccesfulSends();
      if (result == ProcessAndSendTask.FULL_SUCCESS) {
        String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
        if (successfulSends > 1) {
          label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
        }
        receiver.displayMessage(label);
        if (syncAfterwards) {
          syncData(true);
        }
      }
 else       if (result == ProcessAndSendTask.FAILURE) {
      }
 else {
        receiver.displayMessage(Localization.get(""String_Node_Str""),true);
      }
    }
    @Override protected void deliverUpdate(    CommCareHomeActivity receiver,    Long... update){
    }
    @Override protected void deliverError(    CommCareHomeActivity receiver,    Exception e){
      receiver.displayMessage(Localization.get(""String_Node_Str""),true);
    }
  }
;
  mProcess.setListeners(CommCareApplication._().getSession().startDataSubmissionListener());
  mProcess.connect(this);
  mProcess.execute(records);
}","@SuppressLint(""String_Node_Str"") private void processAndSend(FormRecord[] records,final boolean syncAfterwards){
  SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
  int sendTaskId=syncAfterwards ? ProcessAndSendTask.SEND_PHASE_ID : -1;
  ProcessAndSendTask<CommCareHomeActivity> mProcess=new ProcessAndSendTask<CommCareHomeActivity>(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)),sendTaskId){
    @Override protected void deliverResult(    CommCareHomeActivity receiver,    Integer result){
      if (result == ProcessAndSendTask.PROGRESS_LOGGED_OUT) {
        returnToLogin(Localization.get(""String_Node_Str""));
        return;
      }
      try {
        receiver.refreshView();
      }
 catch (      SessionUnavailableException sue) {
        receiver.returnToLogin(Localization.get(""String_Node_Str""));
      }
      int successfulSends=this.getSuccesfulSends();
      if (result == ProcessAndSendTask.FULL_SUCCESS) {
        String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
        if (successfulSends > 1) {
          label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
        }
        receiver.displayMessage(label);
        if (syncAfterwards) {
          syncData(true);
        }
      }
 else       if (result == ProcessAndSendTask.FAILURE) {
      }
 else {
        receiver.displayMessage(Localization.get(""String_Node_Str""),true);
      }
    }
    @Override protected void deliverUpdate(    CommCareHomeActivity receiver,    Long... update){
    }
    @Override protected void deliverError(    CommCareHomeActivity receiver,    Exception e){
      receiver.displayMessage(Localization.get(""String_Node_Str""),true);
    }
  }
;
  mProcess.setListeners(CommCareApplication._().getSession().startDataSubmissionListener());
  mProcess.connect(this);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mProcess.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,records);
  }
 else {
    mProcess.execute(records);
  }
}",0.953113371371868
142312,"/** 
 * Set the callback to null so we don't accidentally leak the  Activity instance.
 */
@Override public void onDetach(){
  super.onDetach();
  if (this.lastActivity != null) {
    lastActivity=boundActivity;
  }
  if (currentTask != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + this.currentTask);
    currentTask.disconnect();
    unlock();
  }
}","/** 
 * Set the callback to null so we don't accidentally leak the  Activity instance.
 */
@Override public void onDetach(){
  super.onDetach();
  if (this.boundActivity != null) {
    lastActivity=boundActivity;
  }
  if (currentTask != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + this.currentTask);
    currentTask.disconnect();
    unlock();
  }
}",0.9875518672199172
142313,"public void setModeToBasic(String message){
  this.uiState=UiState.basic;
  editProfileRef.setText(""String_Node_Str"");
  this.incomingRef=null;
  mainMessage.setText(message);
  addressEntryButton.setVisibility(View.VISIBLE);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.VISIBLE);
  startOverButton.setVisibility(View.GONE);
  installButton.setVisibility(View.GONE);
  retryButton.setVisibility(View.GONE);
}","public void setModeToBasic(String message){
  this.uiState=UiState.basic;
  buttonView.setVisibility(View.VISIBLE);
  editProfileRef.setText(""String_Node_Str"");
  this.incomingRef=null;
  mainMessage.setText(message);
  addressEntryButton.setVisibility(View.VISIBLE);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.VISIBLE);
  startOverButton.setVisibility(View.GONE);
  installButton.setVisibility(View.GONE);
  retryButton.setVisibility(View.GONE);
}",0.9548387096774194
142314,"public void setModeToError(String message,boolean canRetry){
  this.uiState=UiState.error;
  mainMessage.setText(message);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.GONE);
  installButton.setVisibility(View.GONE);
  startOverButton.setVisibility(View.VISIBLE);
  addressEntryButton.setVisibility(View.GONE);
  if (upgradeMode) {
    retryButton.setText(Localization.get(""String_Node_Str""));
    startOverButton.setText(Localization.get(""String_Node_Str""));
  }
 else {
    retryButton.setText(Localization.get(""String_Node_Str""));
    startOverButton.setText(Localization.get(""String_Node_Str""));
  }
  if (canRetry) {
    retryButton.setVisibility(View.VISIBLE);
  }
 else {
    retryButton.setVisibility(View.GONE);
  }
}","public void setModeToError(String message,boolean canRetry){
  buttonView.setVisibility(View.VISIBLE);
  this.uiState=UiState.error;
  mainMessage.setText(message);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.GONE);
  installButton.setVisibility(View.GONE);
  startOverButton.setVisibility(View.VISIBLE);
  addressEntryButton.setVisibility(View.GONE);
  if (upgradeMode) {
    retryButton.setText(Localization.get(""String_Node_Str""));
    startOverButton.setText(Localization.get(""String_Node_Str""));
  }
 else {
    retryButton.setText(Localization.get(""String_Node_Str""));
    startOverButton.setText(Localization.get(""String_Node_Str""));
  }
  if (canRetry) {
    retryButton.setVisibility(View.VISIBLE);
  }
 else {
    retryButton.setVisibility(View.GONE);
  }
}",0.9731800766283524
142315,"public void setModeToAutoUpgrade(){
  mScanBarcodeButton.setVisibility(View.GONE);
  installButton.setVisibility(View.GONE);
  startOverButton.setVisibility(View.GONE);
  addressEntryButton.setVisibility(View.GONE);
  retryButton.setVisibility(View.GONE);
}","public void setModeToAutoUpgrade(){
  buttonView.setVisibility(View.INVISIBLE);
}",0.4142011834319526
142316,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  editProfileRef=(EditText)this.findViewById(R.id.edit_profile_location);
  advancedView=this.findViewById(R.id.advanced_panel);
  mainMessage=(TextView)this.findViewById(R.id.str_setup_message);
  urlSpinner=(Spinner)this.findViewById(R.id.url_spinner);
  installButton=(Button)this.findViewById(R.id.start_install);
  mScanBarcodeButton=(Button)this.findViewById(R.id.btn_fetch_uri);
  addressEntryButton=(Button)this.findViewById(R.id.enter_app_location);
  startOverButton=(Button)this.findViewById(R.id.start_over);
  retryButton=(Button)this.findViewById(R.id.retry_install);
  if (savedInstanceState == null) {
    incomingRef=this.getIntent().getStringExtra(KEY_PROFILE_REF);
    upgradeMode=this.getIntent().getBooleanExtra(KEY_UPGRADE_MODE,false);
    isAuto=this.getIntent().getBooleanExtra(KEY_AUTO,false);
  }
 else {
    String uiStateEncoded=savedInstanceState.getString(""String_Node_Str"");
    this.uiState=uiStateEncoded == null ? UiState.basic : UiState.valueOf(UiState.class,uiStateEncoded);
    incomingRef=savedInstanceState.getString(""String_Node_Str"");
    upgradeMode=savedInstanceState.getBoolean(KEY_UPGRADE_MODE);
    isAuto=savedInstanceState.getBoolean(KEY_AUTO);
    startAllowed=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  editProfileRef.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
  urlSpinner.setAdapter(new WrappingSpinnerAdapter(urlSpinner.getAdapter(),getResources().getStringArray(R.array.url_list_selected_display)));
  urlVals=getResources().getStringArray(R.array.url_vals);
  retryButton.setText(Localization.get(""String_Node_Str""));
  installButton.setText(Localization.get(""String_Node_Str""));
  urlSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      if ((previousUrlPosition == 0 || previousUrlPosition == 1) && arg2 == 2) {
        editProfileRef.setText(R.string.default_app_server);
      }
 else       if (previousUrlPosition == 2 && (arg2 == 0 || arg2 == 1)) {
        editProfileRef.setText(""String_Node_Str"");
      }
      previousUrlPosition=arg2;
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  dbState=CommCareApplication._().getDatabaseState();
  resourceState=CommCareApplication._().getAppResourceState();
  if (Intent.ACTION_VIEW.equals(this.getIntent().getAction())) {
    incomingRef=this.getIntent().getData().toString();
  }
 else {
    if (dbState == CommCareApplication.STATE_READY && resourceState == CommCareApplication.STATE_READY && !upgradeMode) {
      Intent i=new Intent(getIntent());
      setResult(RESULT_OK,i);
      finish();
      return;
    }
  }
  mScanBarcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      try {
        Intent i=new Intent(""String_Node_Str"");
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        CommCareSetupActivity.this.startActivityForResult(i,BARCODE_CAPTURE);
      }
 catch (      ActivityNotFoundException e) {
        Toast.makeText(CommCareSetupActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        mScanBarcodeButton.setVisibility(View.GONE);
      }
    }
  }
);
  addressEntryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      setModeToAdvanced();
    }
  }
);
  addressEntryButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (upgradeMode) {
        startResourceInstall(true);
      }
 else {
        retryCount=0;
        partialMode=false;
        setModeToBasic();
      }
    }
  }
);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  retryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!upgradeMode) {
        partialMode=true;
      }
      startResourceInstall(false);
    }
  }
);
  if (incomingRef == null || uiState == UiState.advanced) {
    editProfileRef.setText(""String_Node_Str"");
    if (this.uiState == UiState.advanced) {
      this.setModeToAdvanced();
    }
 else {
      this.setModeToBasic();
    }
  }
 else {
    this.setModeToReady(incomingRef);
  }
  installButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (dbState == CommCareApplication.STATE_READY) {
      }
      if (resourceState == CommCareApplication.STATE_READY) {
        if (!upgradeMode) {
          fail(NotificationMessageFactory.message(ResourceEngineOutcomes.StatusFailState),true);
        }
      }
 else       if (resourceState == CommCareApplication.STATE_UNINSTALLED) {
        startResourceInstall();
      }
 else       if (resourceState == CommCareApplication.STATE_UPGRADE && upgradeMode) {
        startResourceInstall();
      }
    }
  }
);
  banner=this.findViewById(R.id.screen_first_start_banner);
  final View activityRootView=findViewById(R.id.screen_first_start_main);
  activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      int hideAll=CommCareSetupActivity.this.getResources().getInteger(R.integer.login_screen_hide_all_cuttoff);
      int hideBanner=CommCareSetupActivity.this.getResources().getInteger(R.integer.login_screen_hide_banner_cuttoff);
      int height=activityRootView.getHeight();
      if (height < hideAll) {
        banner.setVisibility(View.GONE);
      }
 else       if (height < hideBanner) {
        banner.setVisibility(View.GONE);
      }
 else {
        banner.setVisibility(View.VISIBLE);
      }
    }
  }
);
  findViewById(R.id.mainLayout).requestFocus();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  CommCareSetupActivity oldActivity=(CommCareSetupActivity)this.getDestroyedActivityState();
  editProfileRef=(EditText)this.findViewById(R.id.edit_profile_location);
  advancedView=this.findViewById(R.id.advanced_panel);
  mainMessage=(TextView)this.findViewById(R.id.str_setup_message);
  urlSpinner=(Spinner)this.findViewById(R.id.url_spinner);
  installButton=(Button)this.findViewById(R.id.start_install);
  mScanBarcodeButton=(Button)this.findViewById(R.id.btn_fetch_uri);
  addressEntryButton=(Button)this.findViewById(R.id.enter_app_location);
  startOverButton=(Button)this.findViewById(R.id.start_over);
  retryButton=(Button)this.findViewById(R.id.retry_install);
  if (savedInstanceState == null) {
    incomingRef=this.getIntent().getStringExtra(KEY_PROFILE_REF);
    upgradeMode=this.getIntent().getBooleanExtra(KEY_UPGRADE_MODE,false);
    isAuto=this.getIntent().getBooleanExtra(KEY_AUTO,false);
  }
 else {
    String uiStateEncoded=savedInstanceState.getString(""String_Node_Str"");
    this.uiState=uiStateEncoded == null ? UiState.basic : UiState.valueOf(UiState.class,uiStateEncoded);
    incomingRef=savedInstanceState.getString(""String_Node_Str"");
    upgradeMode=savedInstanceState.getBoolean(KEY_UPGRADE_MODE);
    isAuto=savedInstanceState.getBoolean(KEY_AUTO);
    startAllowed=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  editProfileRef.setInputType(InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
  urlSpinner.setAdapter(new WrappingSpinnerAdapter(urlSpinner.getAdapter(),getResources().getStringArray(R.array.url_list_selected_display)));
  urlVals=getResources().getStringArray(R.array.url_vals);
  retryButton.setText(Localization.get(""String_Node_Str""));
  installButton.setText(Localization.get(""String_Node_Str""));
  urlSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      if ((previousUrlPosition == 0 || previousUrlPosition == 1) && arg2 == 2) {
        editProfileRef.setText(R.string.default_app_server);
      }
 else       if (previousUrlPosition == 2 && (arg2 == 0 || arg2 == 1)) {
        editProfileRef.setText(""String_Node_Str"");
      }
      previousUrlPosition=arg2;
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  dbState=CommCareApplication._().getDatabaseState();
  resourceState=CommCareApplication._().getAppResourceState();
  if (Intent.ACTION_VIEW.equals(this.getIntent().getAction())) {
    incomingRef=this.getIntent().getData().toString();
  }
 else {
    if (dbState == CommCareApplication.STATE_READY && resourceState == CommCareApplication.STATE_READY && !upgradeMode) {
      Intent i=new Intent(getIntent());
      setResult(RESULT_OK,i);
      finish();
      return;
    }
  }
  mScanBarcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      try {
        Intent i=new Intent(""String_Node_Str"");
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        CommCareSetupActivity.this.startActivityForResult(i,BARCODE_CAPTURE);
      }
 catch (      ActivityNotFoundException e) {
        Toast.makeText(CommCareSetupActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        mScanBarcodeButton.setVisibility(View.GONE);
      }
    }
  }
);
  addressEntryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      setModeToAdvanced();
    }
  }
);
  addressEntryButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (upgradeMode) {
        startResourceInstall(true);
      }
 else {
        retryCount=0;
        partialMode=false;
        setModeToBasic();
      }
    }
  }
);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  retryButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (!upgradeMode) {
        partialMode=true;
      }
      startResourceInstall(false);
    }
  }
);
  if (incomingRef == null || uiState == UiState.advanced) {
    editProfileRef.setText(""String_Node_Str"");
    if (this.uiState == UiState.advanced) {
      this.setModeToAdvanced();
    }
 else {
      this.setModeToBasic();
    }
  }
 else {
    this.setModeToReady(incomingRef);
  }
  installButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (dbState == CommCareApplication.STATE_READY) {
      }
      if (resourceState == CommCareApplication.STATE_READY) {
        if (!upgradeMode) {
          fail(NotificationMessageFactory.message(ResourceEngineOutcomes.StatusFailState),true);
        }
      }
 else       if (resourceState == CommCareApplication.STATE_UNINSTALLED) {
        startResourceInstall();
      }
 else       if (resourceState == CommCareApplication.STATE_UPGRADE && upgradeMode) {
        startResourceInstall();
      }
    }
  }
);
  banner=this.findViewById(R.id.screen_first_start_banner);
  final View activityRootView=findViewById(R.id.screen_first_start_main);
  activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      int hideAll=CommCareSetupActivity.this.getResources().getInteger(R.integer.login_screen_hide_all_cuttoff);
      int hideBanner=CommCareSetupActivity.this.getResources().getInteger(R.integer.login_screen_hide_banner_cuttoff);
      int height=activityRootView.getHeight();
      if (height < hideAll) {
        banner.setVisibility(View.GONE);
      }
 else       if (height < hideBanner) {
        banner.setVisibility(View.GONE);
      }
 else {
        banner.setVisibility(View.VISIBLE);
      }
    }
  }
);
  if (oldActivity != null) {
    this.ccApp=oldActivity.ccApp;
  }
  findViewById(R.id.mainLayout).requestFocus();
}",0.9865568811964376
142317,"public void setModeToReady(String incomingRef){
  this.uiState=UiState.ready;
  mainMessage.setText(Localization.get(""String_Node_Str""));
  editProfileRef.setText(incomingRef);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.GONE);
  installButton.setVisibility(View.VISIBLE);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setVisibility(View.VISIBLE);
  addressEntryButton.setVisibility(View.GONE);
  retryButton.setVisibility(View.GONE);
}","public void setModeToReady(String incomingRef){
  buttonView.setVisibility(View.VISIBLE);
  this.uiState=UiState.ready;
  mainMessage.setText(Localization.get(""String_Node_Str""));
  editProfileRef.setText(incomingRef);
  advancedView.setVisibility(View.GONE);
  mScanBarcodeButton.setVisibility(View.GONE);
  installButton.setVisibility(View.VISIBLE);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setVisibility(View.VISIBLE);
  addressEntryButton.setVisibility(View.GONE);
  retryButton.setVisibility(View.GONE);
}",0.960377358490566
142318,"public void setModeToAdvanced(){
  if (this.uiState == uiState.ready) {
    previousUrlPosition=-1;
    urlSpinner.setSelection(2);
  }
  this.uiState=UiState.advanced;
  mainMessage.setText(Localization.get(""String_Node_Str""));
  advancedView.setVisibility(View.VISIBLE);
  mScanBarcodeButton.setVisibility(View.GONE);
  addressEntryButton.setVisibility(View.GONE);
  installButton.setVisibility(View.VISIBLE);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setVisibility(View.VISIBLE);
  installButton.setEnabled(true);
  retryButton.setVisibility(View.GONE);
}","public void setModeToAdvanced(){
  if (this.uiState == uiState.ready) {
    previousUrlPosition=-1;
    urlSpinner.setSelection(2);
  }
  buttonView.setVisibility(View.VISIBLE);
  this.uiState=UiState.advanced;
  mainMessage.setText(Localization.get(""String_Node_Str""));
  advancedView.setVisibility(View.VISIBLE);
  mScanBarcodeButton.setVisibility(View.GONE);
  addressEntryButton.setVisibility(View.GONE);
  installButton.setVisibility(View.VISIBLE);
  startOverButton.setText(Localization.get(""String_Node_Str""));
  startOverButton.setVisibility(View.VISIBLE);
  installButton.setEnabled(true);
  retryButton.setVisibility(View.GONE);
}",0.9660743134087236
142319,"@Override public void writeTo(OutputStream outstream) throws IOException {
  super.writeTo(new CountingOutputStream(outstream,listener,submissionId));
}","@Override public void writeTo(OutputStream outstream) throws IOException {
  if (attempt != 1) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + attempt);
  }
  super.writeTo(new CountingOutputStream(outstream,listener,submissionId));
  attempt++;
}",0.7581047381546134
142320,"private boolean submit(DeviceReportRecord slr,int index){
  File f=new File(slr.getFilePath());
  if (f.length() == 0) {
    return true;
  }
  this.startSubmission(index,f.length());
  HttpRequestGenerator generator;
  User user=CommCareApplication._().getSession().getLoggedInUser();
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(CommCareApplication._().getSession().getLoggedInUser());
  }
  MultipartEntity entity=new DataSubmissionEntity(this,index);
  EncryptedFileBody fb=new EncryptedFileBody(f,getDecryptCipher(new SecretKeySpec(slr.getKey(),""String_Node_Str"")),""String_Node_Str"");
  entity.addPart(""String_Node_Str"",fb);
  HttpResponse response=null;
  try {
    response=generator.postData(submissionUrl,entity);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
    return false;
  }
  int responseCode=response.getStatusLine().getStatusCode();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (responseCode >= 200 && responseCode < 300) {
    return true;
  }
 else {
    return false;
  }
}","private boolean submit(DeviceReportRecord slr,int index){
  File f=new File(slr.getFilePath());
  if (f.length() == 0) {
    return true;
  }
  this.startSubmission(index,f.length());
  HttpRequestGenerator generator;
  User user=CommCareApplication._().getSession().getLoggedInUser();
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  MultipartEntity entity=new DataSubmissionEntity(this,index);
  EncryptedFileBody fb=new EncryptedFileBody(f,getDecryptCipher(new SecretKeySpec(slr.getKey(),""String_Node_Str"")),""String_Node_Str"");
  entity.addPart(""String_Node_Str"",fb);
  HttpResponse response=null;
  try {
    response=generator.postData(submissionUrl,entity);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
    return false;
  }
  int responseCode=response.getStatusLine().getStatusCode();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (responseCode >= 200 && responseCode < 300) {
    return true;
  }
 else {
    return false;
  }
}",0.9804318488529016
142321,"/** 
 * This method wipes out all local user data (users, referrals, etc) but leaves application resources in place. It makes no attempt to make sure this is a safe operation when called, so it shouldn't be used lightly.
 */
public void clearUserData() throws SessionUnavailableException {
  final String username=this.getSession().getLoggedInUser().getUsername();
  final Set<String> dbIdsToRemove=new HashSet<String>();
  this.getAppStorage(UserKeyRecord.class).removeAll(new EntityFilter<UserKeyRecord>(){
    @Override public boolean matches(    UserKeyRecord ukr){
      dbIdsToRemove.add(ukr.getUuid());
      return ukr.getUsername().toLowerCase().equals(username.toLowerCase());
    }
  }
);
  logout();
  Editor sharedPreferencesEditor=CommCareApplication._().getCurrentApp().getAppPreferences().edit();
  sharedPreferencesEditor.putString(CommCarePreferences.LAST_LOGGED_IN_USER,null);
  sharedPreferencesEditor.commit();
  for (  String id : dbIdsToRemove) {
    this.getDatabasePath(CommCareUserOpenHelper.getDbName(id));
  }
}","/** 
 * This method wipes out all local user data (users, referrals, etc) but leaves application resources in place. It makes no attempt to make sure this is a safe operation when called, so it shouldn't be used lightly.
 */
public void clearUserData() throws SessionUnavailableException {
  final String username=this.getSession().getLoggedInUser().getUsername();
  final Set<String> dbIdsToRemove=new HashSet<String>();
  this.getAppStorage(UserKeyRecord.class).removeAll(new EntityFilter<UserKeyRecord>(){
    @Override public boolean matches(    UserKeyRecord ukr){
      dbIdsToRemove.add(ukr.getUuid());
      return ukr.getUsername().toLowerCase().equals(username.toLowerCase());
    }
  }
);
  logout();
  Editor sharedPreferencesEditor=CommCareApplication._().getCurrentApp().getAppPreferences().edit();
  sharedPreferencesEditor.putString(CommCarePreferences.LAST_LOGGED_IN_USER,null);
  sharedPreferencesEditor.commit();
  for (  String id : dbIdsToRemove) {
    this.getDatabasePath(CommCareUserOpenHelper.getDbName(id)).delete();
  }
}",0.9956875898418784
142322,"private void fire(){
  CommCareVerificationActivity last=(CommCareVerificationActivity)this.getLastNonConfigurationInstance();
  if (last == null) {
    missingMediaPrompt.setText(""String_Node_Str"");
    retryButton.setText(""String_Node_Str"");
    verifyResourceInstall();
  }
 else {
    missingMediaPrompt.setText(last.missingMediaPrompt.getText());
    if (last.task != null && last.task.getStatus() == Status.RUNNING) {
      this.task=last.task;
      last.task.setListener(this);
    }
 else {
    }
  }
}","private void fire(){
  CommCareVerificationActivity last=(CommCareVerificationActivity)this.getDestroyedActivityState();
  if (last == null) {
    missingMediaPrompt.setText(""String_Node_Str"");
    retryButton.setText(""String_Node_Str"");
    verifyResourceInstall();
  }
 else {
    missingMediaPrompt.setText(last.missingMediaPrompt.getText());
    if (last.task != null && last.task.getStatus() == Status.RUNNING) {
      this.task=last.task;
      last.task.setListener(this);
    }
 else {
    }
  }
}",0.9547244094488188
142323,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getLastNonConfigurationInstance();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  session=CommCareApplication._().getCurrentSession();
  selectDatum=session.getNeededDatum();
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        if (oldActivity.selectedIntent != null) {
          startActivityForResult(oldActivity.selectedIntent,CONFIRM_SELECT);
          startOther=true;
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str"")) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  EntitySelectActivity oldActivity=(EntitySelectActivity)this.getDestroyedActivityState();
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  session=CommCareApplication._().getCurrentSession();
  selectDatum=session.getNeededDatum();
  mNoDetailMode=selectDatum.getLongDetail() == null;
  if (this.getString(R.string.panes).equals(""String_Node_Str"") && !mNoDetailMode) {
    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
      setContentView(R.layout.screen_compound_select);
      View.inflate(this,R.layout.entity_select_layout,(ViewGroup)findViewById(R.id.screen_compound_select_left_pane));
      inAwesomeMode=true;
      rightFrame=(FrameLayout)findViewById(R.id.screen_compound_select_right_pane);
      TextView message=(TextView)findViewById(R.id.screen_compound_select_prompt);
      message.setText(Localization.get(""String_Node_Str"",new String[]{Localization.get(""String_Node_Str"")}));
    }
 else {
      setContentView(R.layout.entity_select_layout);
      if (oldActivity != null) {
        if (oldActivity.selectedIntent != null) {
          startActivityForResult(oldActivity.selectedIntent,CONFIRM_SELECT);
          startOther=true;
        }
      }
    }
  }
 else {
    setContentView(R.layout.entity_select_layout);
  }
  ((ListView)this.findViewById(R.id.screen_entity_select_list)).setOnItemClickListener(this);
  TextView searchLabel=(TextView)findViewById(R.id.screen_entity_select_search_label);
  searchLabel.setText(Localization.get(""String_Node_Str""));
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  if (entries.size() == 1 && prototype.getXFormNamespace() == null || prototype.getXFormNamespace().equals(""String_Node_Str"")) {
    mViewMode=true;
  }
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  if (oldActivity != null) {
    adapter=oldActivity.adapter;
    ((ListView)this.findViewById(R.id.screen_entity_select_list)).setAdapter(adapter);
    findViewById(R.id.entity_select_loading).setVisibility(View.GONE);
  }
}",0.9915284151076598
142324,"@Override protected Boolean doTaskBackground(FormRecord... params){
  publishProgress(Localization.get(""String_Node_Str""));
  if (!(dumpDirectory.isDirectory())) {
    return false;
  }
  File[] files=dumpDirectory.listFiles();
  int counter=0;
  results=new Long[files.length];
  for (int i=0; i < files.length; ++i) {
    results[i]=FormUploadUtil.FAILURE;
  }
  boolean allSuccessful=true;
  for (int i=0; i < files.length; i++) {
    publishProgress(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + (i + 1)}));
    File f=files[i];
    if (!(f.isDirectory())) {
      return false;
    }
    try {
      User user=CommCareApplication._().getSession().getLoggedInUser();
      results[i]=FormUploadUtil.sendInstance(counter,f,url,user);
      if (results[i] == FormUploadUtil.FULL_SUCCESS) {
        FileUtil.deleteFile(f);
      }
 else       if (results[i] == FormUploadUtil.TRANSPORT_FAILURE) {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str""));
      }
 else {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}));
      }
      counter++;
    }
 catch (    FileNotFoundException fe) {
      Log.e(""String_Node_Str"",Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}),fe);
      publishProgress(Localization.get(""String_Node_Str"",new String[]{fe.getMessage()}));
    }
  }
  return allSuccessful;
}","@Override protected Boolean doTaskBackground(FormRecord... params){
  publishProgress(Localization.get(""String_Node_Str""));
  if (!(dumpDirectory.isDirectory())) {
    return false;
  }
  File[] files=dumpDirectory.listFiles();
  int counter=0;
  results=new Long[files.length];
  for (int i=0; i < files.length; ++i) {
    results[i]=FormUploadUtil.FAILURE;
  }
  boolean allSuccessful=true;
  for (int i=0; i < files.length; i++) {
    publishProgress(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + (i + 1)}));
    File f=files[i];
    if (!(f.isDirectory())) {
      return false;
    }
    try {
      User user=CommCareApplication._().getSession().getLoggedInUser();
      results[i]=FormUploadUtil.sendInstance(counter,f,url,user);
      if (results[i] == FormUploadUtil.FULL_SUCCESS) {
        FileUtil.deleteFile(f);
      }
 else       if (results[i] == FormUploadUtil.TRANSPORT_FAILURE) {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str""));
        return allSuccessful;
      }
 else {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}));
      }
      counter++;
    }
 catch (    FileNotFoundException fe) {
      Log.e(""String_Node_Str"",Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}),fe);
      publishProgress(Localization.get(""String_Node_Str"",new String[]{fe.getMessage()}));
    }
  }
  return allSuccessful;
}",0.9897820163487738
142325,"public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new SessionUnavailableException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=0;
  for (int j=0; j < files.length; j++) {
    boolean supported=false;
    for (    String ext : SUPPORTED_FILE_EXTS) {
      if (files[j].getName().endsWith(ext)) {
        supported=true;
        break;
      }
    }
    if (!supported) {
      continue;
    }
    bytes+=files[j].length();
    System.out.println(""String_Node_Str"" + files[j].getName() + ""String_Node_Str""+ bytes);
  }
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  String t=""String_Node_Str"";
  if (files == null) {
    Log.e(t,""String_Node_Str"");
    listener.cancel(true);
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  for (int j=0; j < files.length; j++) {
    File f=files[j];
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      if (key != null) {
        fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),""String_Node_Str"");
      }
 else {
        fb=new FileBody(f,""String_Node_Str"");
      }
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(t,""String_Node_Str"" + f.getName());
    }
  }
  HttpResponse response=null;
  try {
    response=generator.postData(url,entity);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IOException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
  String serverLocation=null;
  Header[] h=response.getHeaders(""String_Node_Str"");
  if (h != null && h.length > 0) {
    serverLocation=h[0].getValue();
  }
 else {
    Log.e(t,""String_Node_Str"");
  }
  int responseCode=response.getStatusLine().getStatusCode();
  Log.e(t,""String_Node_Str"" + responseCode);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(new String(bos.toByteArray()));
  if (responseCode >= 200 && responseCode < 300) {
    return FULL_SUCCESS;
  }
 else {
    return FAILURE;
  }
}","public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new SessionUnavailableException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=0;
  for (int j=0; j < files.length; j++) {
    boolean supported=false;
    for (    String ext : SUPPORTED_FILE_EXTS) {
      if (files[j].getName().endsWith(ext)) {
        supported=true;
        break;
      }
    }
    if (!supported) {
      continue;
    }
    bytes+=files[j].length();
    System.out.println(""String_Node_Str"" + files[j].getName() + ""String_Node_Str""+ bytes);
  }
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  String t=""String_Node_Str"";
  if (files == null) {
    Log.e(t,""String_Node_Str"");
    listener.cancel(true);
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  for (int j=0; j < files.length; j++) {
    File f=files[j];
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      if (key != null) {
        fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),""String_Node_Str"");
      }
 else {
        fb=new FileBody(f,""String_Node_Str"");
      }
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(t,""String_Node_Str"" + f.getName());
    }
  }
  HttpResponse response=null;
  try {
    response=generator.postData(url,entity);
  }
 catch (  ClientProtocolException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IllegalStateException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
  String serverLocation=null;
  Header[] h=response.getHeaders(""String_Node_Str"");
  if (h != null && h.length > 0) {
    serverLocation=h[0].getValue();
  }
 else {
    Log.e(t,""String_Node_Str"");
  }
  int responseCode=response.getStatusLine().getStatusCode();
  Log.e(t,""String_Node_Str"" + responseCode);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(new String(bos.toByteArray()));
  if (responseCode >= 200 && responseCode < 300) {
    return FULL_SUCCESS;
  }
 else {
    return FAILURE;
  }
}",0.9846153846153848
142326,"public void setAVT(String displayText,String audioURI,String imageURI){
  this.removeAllViews();
  String mDisplayText=displayText;
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mTextView=(TextView)inflater.inflate(R.layout.entity_item_text,null);
  mTextView.setText(displayText);
  RelativeLayout.LayoutParams textParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams audioParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams imageParams=new RelativeLayout.LayoutParams(imageDimension,imageDimension);
  String audioFilename=""String_Node_Str"";
  if (audioURI != null && !audioURI.equals(""String_Node_Str"")) {
    try {
      audioFilename=ReferenceManager._().DeriveReference(audioURI).getLocalURI();
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  File audioFile=new File(audioFilename);
  if (audioFilename != ""String_Node_Str"" && audioFile.exists()) {
    mAudioButton=new AudioButton(getContext(),audioURI);
    mAudioButton.setId(3245345);
    mAudioButton.setFocusable(false);
    mAudioButton.setFocusableInTouchMode(false);
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    audioParams.addRule(CENTER_VERTICAL);
    addView(mAudioButton,audioParams);
  }
  String errorMsg=null;
  if (imageURI != null && !imageURI.equals(""String_Node_Str"")) {
    try {
      String imageFilename=ReferenceManager._().DeriveReference(imageURI).getLocalURI();
      final File imageFile=new File(imageFilename);
      if (imageFile.exists()) {
        Bitmap b=null;
        try {
          Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
          int screenWidth=display.getWidth();
          int screenHeight=display.getHeight();
          b=FileUtils.getBitmapScaledToDisplay(imageFile,screenHeight,screenWidth);
        }
 catch (        OutOfMemoryError e) {
          errorMsg=""String_Node_Str"" + e.getMessage();
        }
        if (b != null) {
          mImageView=new ImageView(getContext());
          mImageView.setPadding(10,10,10,10);
          mImageView.setAdjustViewBounds(true);
          mImageView.setImageBitmap(b);
          mImageView.setId(23422634);
          imageParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
          addView(mImageView,imageParams);
        }
 else         if (errorMsg == null) {
          errorMsg=getContext().getString(R.string.file_invalid,imageFile);
        }
      }
 else       if (errorMsg == null) {
        errorMsg=getContext().getString(R.string.file_missing,imageFile);
      }
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  textParams.addRule(RelativeLayout.CENTER_VERTICAL);
  textParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  if (imageURI != null && !imageURI.equals(""String_Node_Str"") && mImageView != null) {
    textParams.addRule(RelativeLayout.RIGHT_OF,mImageView.getId());
  }
 else {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
  }
  if (mAudioButton != null) {
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
  }
  addView(mTextView,textParams);
  System.out.println(""String_Node_Str"");
}","public void setAVT(String displayText,String audioURI,String imageURI){
  this.removeAllViews();
  String mDisplayText=displayText;
  LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mTextView=(TextView)inflater.inflate(R.layout.entity_item_text,null);
  mTextView.setText(displayText);
  RelativeLayout.LayoutParams textParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams audioParams=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  RelativeLayout.LayoutParams imageParams=new RelativeLayout.LayoutParams(imageDimension,imageDimension);
  String audioFilename=""String_Node_Str"";
  if (audioURI != null && !audioURI.equals(""String_Node_Str"")) {
    try {
      audioFilename=ReferenceManager._().DeriveReference(audioURI).getLocalURI();
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  File audioFile=new File(audioFilename);
  if (audioFilename != ""String_Node_Str"" && audioFile.exists()) {
    mAudioButton=new AudioButton(getContext(),audioURI);
    mAudioButton.setId(3245345);
    mAudioButton.setFocusable(false);
    mAudioButton.setFocusableInTouchMode(false);
    audioParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    audioParams.addRule(CENTER_VERTICAL);
    addView(mAudioButton,audioParams);
  }
  String errorMsg=null;
  if (imageURI != null && !imageURI.equals(""String_Node_Str"")) {
    try {
      String imageFilename=ReferenceManager._().DeriveReference(imageURI).getLocalURI();
      final File imageFile=new File(imageFilename);
      if (imageFile.exists()) {
        Bitmap b=null;
        try {
          Display display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
          int screenWidth=display.getWidth();
          int screenHeight=display.getHeight();
          b=FileUtils.getBitmapScaledToDisplay(imageFile,screenHeight,screenWidth);
        }
 catch (        OutOfMemoryError e) {
          errorMsg=""String_Node_Str"" + e.getMessage();
        }
        if (b != null) {
          mImageView=new ImageView(getContext());
          mImageView.setPadding(10,10,10,10);
          mImageView.setAdjustViewBounds(true);
          mImageView.setImageBitmap(b);
          mImageView.setId(23422634);
          imageParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
          addView(mImageView,imageParams);
        }
 else         if (errorMsg == null) {
          errorMsg=getContext().getString(R.string.file_invalid,imageFile);
        }
      }
 else       if (errorMsg == null) {
        errorMsg=getContext().getString(R.string.file_missing,imageFile);
      }
    }
 catch (    InvalidReferenceException e) {
      Log.e(t,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  textParams.addRule(RelativeLayout.CENTER_VERTICAL);
  textParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  if (imageURI != null && !imageURI.equals(""String_Node_Str"") && mImageView != null) {
    textParams.addRule(RelativeLayout.RIGHT_OF,mImageView.getId());
  }
 else {
    textParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
  }
  if (mAudioButton != null) {
    textParams.addRule(RelativeLayout.LEFT_OF,mAudioButton.getId());
  }
  addView(mTextView,textParams);
}",0.9939767885999706
142327,"@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  Vector<Integer> ids=getUnsyncedForms();
  File[] files=getDumpFiles();
  formsOnSD=files.length;
  formsOnPhone=ids.size();
  setDisplayText();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=getDumpFiles().length;
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask mSendTask=new SendTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),settings.getString(""String_Node_Str"",url),txtInteractiveMessages,getFolderPath()){
        protected int taskId=BULK_SEND_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_SEND_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      DumpTask mDumpTask=new DumpTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),txtInteractiveMessages){
        protected int taskId=BULK_DUMP_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_DUMP_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  mAlertDialog=popupWarningMessage();
  if (!acknowledgedRisk) {
    mAlertDialog.show();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  Vector<Integer> ids=getUnsyncedForms();
  File[] files=getDumpFiles();
  updateCounters();
  formsOnPhone=ids.size();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=getDumpFiles().length;
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask mSendTask=new SendTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),settings.getString(""String_Node_Str"",url),txtInteractiveMessages,getFolderPath()){
        protected int taskId=BULK_SEND_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_SEND_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      DumpTask mDumpTask=new DumpTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),txtInteractiveMessages){
        protected int taskId=BULK_DUMP_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_DUMP_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  mAlertDialog=popupWarningMessage();
  if (!acknowledgedRisk) {
    mAlertDialog.show();
  }
}",0.9929060665362036
142328,"public DumpTask(Context c,CommCarePlatform platform,TextView outputTextView) throws SessionUnavailableException {
  this.c=c;
  storage=CommCareApplication._().getUserStorage(FormRecord.class);
  this.outputTextView=outputTextView;
  platform=this.platform;
}","public DumpTask(Context c,CommCarePlatform platform,TextView outputTextView) throws SessionUnavailableException {
  this.c=c;
  storage=CommCareApplication._().getUserStorage(FormRecord.class);
  this.outputTextView=outputTextView;
  taskId=CommCareFormDumpActivity.BULK_DUMP_ID;
  platform=this.platform;
}",0.9151943462897526
142329,"public SendTask(Context c,CommCarePlatform platform,String url,TextView outputTextView) throws SessionUnavailableException {
  this.c=c;
  this.url=url;
  storage=CommCareApplication._().getUserStorage(FormRecord.class);
  this.outputTextView=outputTextView;
  platform=this.platform;
}","public SendTask(Context c,CommCarePlatform platform,String url,TextView outputTextView) throws SessionUnavailableException {
  this.c=c;
  this.url=url;
  storage=CommCareApplication._().getUserStorage(FormRecord.class);
  this.outputTextView=outputTextView;
  taskId=CommCareFormDumpActivity.BULK_SEND_ID;
  platform=this.platform;
}",0.9225806451612903
142330,"@Override protected Boolean doTaskBackground(FormRecord... params){
  publishProgress(Localization.get(""String_Node_Str""));
  ArrayList<String> externalMounts=FileUtil.getExternalMounts();
  String baseDir=externalMounts.get(0);
  String folderName=Localization.get(""String_Node_Str"");
  File dumpDirectory=new File(baseDir + ""String_Node_Str"" + folderName);
  if (!(dumpDirectory.isDirectory())) {
    return false;
  }
  File[] files=dumpDirectory.listFiles();
  int counter=0;
  results=new Long[files.length];
  for (int i=0; i < files.length; ++i) {
    results[i]=FormUploadUtil.FAILURE;
  }
  boolean allSuccessful=true;
  for (int i=0; i < files.length; i++) {
    publishProgress(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + (i + 1)}));
    File f=files[i];
    if (!(f.isDirectory())) {
      return false;
    }
    try {
      User user=CommCareApplication._().getSession().getLoggedInUser();
      results[i]=FormUploadUtil.sendInstance(counter,f,url,user);
      if (results[i] == FormUploadUtil.FULL_SUCCESS) {
        FileUtil.deleteFile(f);
      }
 else       if (results[i] == FormUploadUtil.TRANSPORT_FAILURE) {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str""));
      }
 else {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}));
      }
      counter++;
    }
 catch (    FileNotFoundException fe) {
      Log.e(""String_Node_Str"",Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}),fe);
      publishProgress(Localization.get(""String_Node_Str"",new String[]{fe.getMessage()}));
    }
  }
  return allSuccessful;
}","@Override protected Boolean doTaskBackground(FormRecord... params){
  publishProgress(Localization.get(""String_Node_Str""));
  ArrayList<String> externalMounts=FileUtil.getExternalMounts();
  String baseDir=externalMounts.get(0);
  SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
  String folderName=settings.getString(CommCarePreferences.DUMP_FOLDER_PATH,""String_Node_Str"");
  File dumpDirectory=new File(baseDir + ""String_Node_Str"" + folderName);
  if (!(dumpDirectory.isDirectory())) {
    return false;
  }
  File[] files=dumpDirectory.listFiles();
  int counter=0;
  results=new Long[files.length];
  for (int i=0; i < files.length; ++i) {
    results[i]=FormUploadUtil.FAILURE;
  }
  boolean allSuccessful=true;
  for (int i=0; i < files.length; i++) {
    publishProgress(Localization.get(""String_Node_Str"",new String[]{""String_Node_Str"" + (i + 1)}));
    File f=files[i];
    if (!(f.isDirectory())) {
      return false;
    }
    try {
      User user=CommCareApplication._().getSession().getLoggedInUser();
      results[i]=FormUploadUtil.sendInstance(counter,f,url,user);
      if (results[i] == FormUploadUtil.FULL_SUCCESS) {
        FileUtil.deleteFile(f);
      }
 else       if (results[i] == FormUploadUtil.TRANSPORT_FAILURE) {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str""));
      }
 else {
        allSuccessful=false;
        publishProgress(Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}));
      }
      counter++;
    }
 catch (    FileNotFoundException fe) {
      Log.e(""String_Node_Str"",Localization.get(""String_Node_Str"",new String[]{f.getAbsolutePath()}),fe);
      publishProgress(Localization.get(""String_Node_Str"",new String[]{fe.getMessage()}));
    }
  }
  return allSuccessful;
}",0.9540656205420828
142331,"public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new SessionUnavailableException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=0;
  for (int j=0; j < files.length; j++) {
    boolean supported=false;
    for (    String ext : SUPPORTED_FILE_EXTS) {
      if (files[j].getName().endsWith(ext)) {
        supported=true;
        break;
      }
    }
    if (!supported) {
      continue;
    }
    bytes+=files[j].length();
    System.out.println(""String_Node_Str"" + files[j].getName() + ""String_Node_Str""+ bytes);
  }
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  String t=""String_Node_Str"";
  if (files == null) {
    Log.e(t,""String_Node_Str"");
    listener.cancel(true);
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  for (int j=0; j < files.length; j++) {
    File f=files[j];
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),""String_Node_Str"");
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(t,""String_Node_Str"" + f.getName());
    }
  }
  HttpResponse response=null;
  try {
    response=generator.postData(url,entity);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IOException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
  String serverLocation=null;
  Header[] h=response.getHeaders(""String_Node_Str"");
  if (h != null && h.length > 0) {
    serverLocation=h[0].getValue();
  }
 else {
    Log.e(t,""String_Node_Str"");
  }
  int responseCode=response.getStatusLine().getStatusCode();
  Log.e(t,""String_Node_Str"" + responseCode);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(new String(bos.toByteArray()));
  if (responseCode >= 200 && responseCode < 300) {
    return FULL_SUCCESS;
  }
 else {
    return FAILURE;
  }
}","public static long sendInstance(int submissionNumber,File folder,SecretKeySpec key,String url,AsyncTask listener,User user) throws FileNotFoundException {
  boolean hasListener=false;
  DataSubmissionListener myListener=null;
  if (listener instanceof DataSubmissionListener) {
    hasListener=true;
    myListener=(DataSubmissionListener)listener;
  }
  File[] files=folder.listFiles();
  if (files == null) {
    String state=Environment.getExternalStorageState();
    if (!Environment.MEDIA_MOUNTED.equals(state)) {
      throw new SessionUnavailableException(""String_Node_Str"");
    }
 else {
      throw new FileNotFoundException(""String_Node_Str"" + folder.getAbsoluteFile());
    }
  }
  long bytes=0;
  for (int j=0; j < files.length; j++) {
    boolean supported=false;
    for (    String ext : SUPPORTED_FILE_EXTS) {
      if (files[j].getName().endsWith(ext)) {
        supported=true;
        break;
      }
    }
    if (!supported) {
      continue;
    }
    bytes+=files[j].length();
    System.out.println(""String_Node_Str"" + files[j].getName() + ""String_Node_Str""+ bytes);
  }
  if (hasListener) {
    myListener.startSubmission(submissionNumber,bytes);
  }
  HttpRequestGenerator generator;
  if (user.getUserType().equals(User.TYPE_DEMO)) {
    generator=new HttpRequestGenerator();
  }
 else {
    generator=new HttpRequestGenerator(user);
  }
  String t=""String_Node_Str"";
  if (files == null) {
    Log.e(t,""String_Node_Str"");
    listener.cancel(true);
  }
  MultipartEntity entity=new DataSubmissionEntity(myListener,submissionNumber);
  for (int j=0; j < files.length; j++) {
    File f=files[j];
    ContentBody fb;
    if (f.getName().endsWith(""String_Node_Str"")) {
      if (key != null) {
        fb=new EncryptedFileBody(f,FormUploadUtil.getDecryptCipher(key),""String_Node_Str"");
      }
 else {
        fb=new FileBody(f,""String_Node_Str"");
      }
      entity.addPart(""String_Node_Str"",fb);
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else     if (f.getName().endsWith(""String_Node_Str"")) {
      fb=new FileBody(f,""String_Node_Str"");
      if (fb.getContentLength() <= MAX_BYTES) {
        entity.addPart(f.getName(),fb);
        Log.i(t,""String_Node_Str"" + f.getName());
      }
 else {
        Log.i(t,""String_Node_Str"" + f.getName() + ""String_Node_Str"");
      }
    }
 else {
      Log.w(t,""String_Node_Str"" + f.getName());
    }
  }
  HttpResponse response=null;
  try {
    response=generator.postData(url,entity);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IOException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
catch (  IllegalStateException e) {
    e.printStackTrace();
    return TRANSPORT_FAILURE;
  }
  String serverLocation=null;
  Header[] h=response.getHeaders(""String_Node_Str"");
  if (h != null && h.length > 0) {
    serverLocation=h[0].getValue();
  }
 else {
    Log.e(t,""String_Node_Str"");
  }
  int responseCode=response.getStatusLine().getStatusCode();
  Log.e(t,""String_Node_Str"" + responseCode);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),bos);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  System.out.println(new String(bos.toByteArray()));
  if (responseCode >= 200 && responseCode < 300) {
    return FULL_SUCCESS;
  }
 else {
    return FAILURE;
  }
}",0.9881112881480574
142332,"private void configUi(){
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  startButton=(Button)findViewById(R.id.home_start);
  startButton.setText(Localization.get(""String_Node_Str""));
  startButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),MenuList.class);
      startActivityForResult(i,GET_COMMAND);
    }
  }
);
  viewIncomplete=(Button)findViewById(R.id.home_forms_incomplete);
  viewIncomplete.setText(Localization.get(""String_Node_Str""));
  viewIncomplete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      goToFormArchive(true);
    }
  }
);
  logoutButton=(Button)findViewById(R.id.home_logout);
  logoutButton.setText(Localization.get(""String_Node_Str""));
  logoutButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      CommCareApplication._().logout();
      returnToLogin(null);
    }
  }
);
  TextView formGroupLabel=(TextView)findViewById(R.id.home_formrecords_label);
  formGroupLabel.setText(Localization.get(""String_Node_Str""));
  viewOldForms=(Button)findViewById(R.id.home_forms_old);
  viewOldForms.setText(Localization.get(""String_Node_Str""));
  viewOldForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      goToFormArchive(false);
    }
  }
);
  syncButton=(Button)findViewById(R.id.home_sync);
  syncButton.setText(Localization.get(""String_Node_Str""));
  syncButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (isAirplaneModeOn()) {
        CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode,LoginActivity.NOTIFICATION_MESSAGE_LOGIN));
        return;
      }
      boolean formsToSend=checkAndStartUnsentTask(new ProcessTaskListener(){
        public void processTaskAllProcessed(){
        }
        public void processAndSendFinished(        int result,        int successfulSends){
          if (currentHome != CommCareHomeActivity.this) {
            System.out.println(""String_Node_Str"");
          }
          if (result == ProcessAndSendTask.FULL_SUCCESS) {
            currentHome.dismissDialog(mCurrentDialog);
            String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
            refreshView();
            displayMessage(label);
            syncData();
          }
 else           if (result == ProcessAndSendTask.FAILURE) {
            currentHome.dismissDialog(mCurrentDialog);
          }
 else {
            currentHome.dismissDialog(mCurrentDialog);
            displayMessage(Localization.get(""String_Node_Str""),true);
          }
        }
      }
);
      if (!formsToSend) {
        syncData();
      }
    }
  }
);
}","private void configUi(){
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  startButton=(Button)findViewById(R.id.home_start);
  startButton.setText(Localization.get(""String_Node_Str""));
  startButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),MenuList.class);
      startActivityForResult(i,GET_COMMAND);
    }
  }
);
  viewIncomplete=(Button)findViewById(R.id.home_forms_incomplete);
  viewIncomplete.setText(Localization.get(""String_Node_Str""));
  viewIncomplete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      goToFormArchive(true);
    }
  }
);
  logoutButton=(Button)findViewById(R.id.home_logout);
  logoutButton.setText(Localization.get(""String_Node_Str""));
  logoutButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      CommCareApplication._().logout();
      returnToLogin(null);
    }
  }
);
  TextView formGroupLabel=(TextView)findViewById(R.id.home_formrecords_label);
  formGroupLabel.setText(Localization.get(""String_Node_Str""));
  viewOldForms=(Button)findViewById(R.id.home_forms_old);
  viewOldForms.setText(Localization.get(""String_Node_Str""));
  viewOldForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      goToFormArchive(false);
    }
  }
);
  syncButton=(Button)findViewById(R.id.home_sync);
  syncButton.setText(Localization.get(""String_Node_Str""));
  syncButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (isAirplaneModeOn()) {
        CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.Sync_AirplaneMode,AIRPLANE_MODE_CATEGORY));
        return;
      }
 else {
        CommCareApplication._().clearNotifications(AIRPLANE_MODE_CATEGORY);
      }
      boolean formsToSend=checkAndStartUnsentTask(new ProcessTaskListener(){
        public void processTaskAllProcessed(){
        }
        public void processAndSendFinished(        int result,        int successfulSends){
          if (currentHome != CommCareHomeActivity.this) {
            System.out.println(""String_Node_Str"");
          }
          if (result == ProcessAndSendTask.FULL_SUCCESS) {
            currentHome.dismissDialog(mCurrentDialog);
            String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
            refreshView();
            displayMessage(label);
            syncData();
          }
 else           if (result == ProcessAndSendTask.FAILURE) {
            currentHome.dismissDialog(mCurrentDialog);
          }
 else {
            currentHome.dismissDialog(mCurrentDialog);
            displayMessage(Localization.get(""String_Node_Str""),true);
          }
        }
      }
);
      if (!formsToSend) {
        syncData();
      }
    }
  }
);
}",0.97206132879046
142333,"@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  Vector<Integer> ids=getUnsyncedForms();
  File[] files=CommCareFormDumpActivity.getDumpFiles();
  formsOnPhone=ids.size();
  formsOnSD=files.length;
  setDisplayText();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=CommCareFormDumpActivity.getDumpFiles().length;
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask mSendTask=new SendTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),settings.getString(""String_Node_Str"",url),txtInteractiveMessages){
        protected int taskId=BULK_SEND_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_SEND_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      DumpTask mDumpTask=new DumpTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),txtInteractiveMessages){
        protected int taskId=BULK_DUMP_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_DUMP_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  mAlertDialog=popupWarningMessage();
  if (!acknowledgedRisk) {
    mAlertDialog.show();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  final String url=this.getString(R.string.PostURL);
  super.onCreate(savedInstanceState);
  Vector<Integer> ids=getUnsyncedForms();
  File[] files=CommCareFormDumpActivity.getDumpFiles();
  formsOnSD=files.length;
  formsOnPhone=ids.size();
  setDisplayText();
  btnSubmitForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      formsOnSD=CommCareFormDumpActivity.getDumpFiles().length;
      if (formsOnSD == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      SendTask mSendTask=new SendTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),settings.getString(""String_Node_Str"",url),txtInteractiveMessages){
        protected int taskId=BULK_SEND_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnSD);
            receiver.setResult(BULK_SEND_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_SEND_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mSendTask.connect(CommCareFormDumpActivity.this);
      mSendTask.execute();
    }
  }
);
  btnDumpForms.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (formsOnPhone == 0) {
        txtInteractiveMessages.setText(Localization.get(""String_Node_Str""));
        TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        return;
      }
      SharedPreferences settings=CommCareApplication._().getCurrentApp().getAppPreferences();
      DumpTask mDumpTask=new DumpTask(getApplicationContext(),CommCareApplication._().getCurrentApp().getCommCarePlatform(),txtInteractiveMessages){
        protected int taskId=BULK_DUMP_ID;
        @Override protected void deliverResult(        CommCareFormDumpActivity receiver,        Boolean result){
          if (result == Boolean.TRUE) {
            Intent i=new Intent(getIntent());
            i.putExtra(KEY_NUMBER_DUMPED,formsOnPhone);
            receiver.setResult(BULK_DUMP_ID,i);
            receiver.finish();
            return;
          }
 else {
            receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
          }
        }
        @Override protected void deliverUpdate(        CommCareFormDumpActivity receiver,        String... update){
          receiver.updateProgress(BULK_DUMP_ID,update[0]);
          receiver.txtInteractiveMessages.setText(update[0]);
        }
        @Override protected void deliverError(        CommCareFormDumpActivity receiver,        Exception e){
          receiver.txtInteractiveMessages.setText(Localization.get(""String_Node_Str"",new String[]{e.getMessage()}));
          receiver.TransplantStyle(txtInteractiveMessages,R.layout.template_text_notification_problem);
        }
      }
;
      mDumpTask.connect(CommCareFormDumpActivity.this);
      mDumpTask.execute();
    }
  }
);
  mAlertDialog=popupWarningMessage();
  if (!acknowledgedRisk) {
    mAlertDialog.show();
  }
}",0.9934703748488511
142334,"public static File[] getDumpFiles(){
  ArrayList<String> externalMounts=FileUtil.getExternalMounts();
  if (externalMounts.size() == 0) {
    return new File[]{};
  }
  String baseDir=externalMounts.get(0);
  String folderName=Localization.get(""String_Node_Str"");
  File dumpDirectory=new File(baseDir + ""String_Node_Str"" + folderName);
  File[] files=dumpDirectory.listFiles();
  return files;
}","public static File[] getDumpFiles(){
  ArrayList<String> externalMounts=FileUtil.getExternalMounts();
  if (externalMounts.size() == 0) {
    return new File[]{};
  }
  String baseDir=externalMounts.get(0);
  String folderName=Localization.get(""String_Node_Str"");
  File dumpDirectory=new File(baseDir + ""String_Node_Str"" + folderName);
  File[] files=dumpDirectory.listFiles();
  if (files == null) {
    files=new File[]{};
  }
  return files;
}",0.9062870699881376
142335,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  Localization.setLocale(sharedPreferences.getString(key,""String_Node_Str""));
}","public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  if (key.equals(""String_Node_Str"")) {
    Localization.setLocale(sharedPreferences.getString(key,""String_Node_Str""));
  }
}",0.8806366047745358
142336,"public static FormInstance loadFixture(String refId,String userId){
  IStorageUtilityIndexed<FormInstance> userFixtureStorage=CommCareApplication._().getUserStorage(""String_Node_Str"",FormInstance.class);
  IStorageUtilityIndexed<FormInstance> appFixtureStorage=CommCareApplication._().getAppStorage(""String_Node_Str"",FormInstance.class);
  Vector<Integer> userFixtures=userFixtureStorage.getIDsForValue(FormInstance.META_ID,refId);
  if (userFixtures.size() == 1) {
    return (FormInstance)userFixtureStorage.read(userFixtures.elementAt(0).intValue());
  }
 else   if (userFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=userFixtureStorage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(userFixtures,relevantUserFixtures);
      if (userFixture != null) {
        return (FormInstance)userFixtureStorage.read(userFixture.intValue());
      }
    }
  }
  Vector<Integer> appFixtures=appFixtureStorage.getIDsForValue(FormInstance.META_ID,refId);
  Integer globalFixture=ArrayUtilities.intersectSingle(appFixtureStorage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),appFixtures);
  if (globalFixture != null) {
    return (FormInstance)appFixtureStorage.read(globalFixture.intValue());
  }
 else {
    return null;
  }
}","public static FormInstance loadFixture(String refId,String userId){
  IStorageUtilityIndexed<FormInstance> userFixtureStorage=CommCareApplication._().getUserStorage(""String_Node_Str"",FormInstance.class);
  IStorageUtilityIndexed<FormInstance> appFixtureStorage=CommCareApplication._().getAppStorage(""String_Node_Str"",FormInstance.class);
  Vector<Integer> userFixtures=userFixtureStorage.getIDsForValue(FormInstance.META_ID,refId);
  if (userFixtures.size() == 1) {
    return (FormInstance)userFixtureStorage.read(userFixtures.elementAt(0).intValue());
  }
 else   if (userFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=userFixtureStorage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(userFixtures,relevantUserFixtures);
      if (userFixture != null) {
        return (FormInstance)userFixtureStorage.read(userFixture.intValue());
      }
    }
  }
  Vector<Integer> appFixtures=appFixtureStorage.getIDsForValue(FormInstance.META_ID,refId);
  Integer globalFixture=ArrayUtilities.intersectSingle(appFixtureStorage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),appFixtures);
  if (globalFixture != null) {
    return (FormInstance)appFixtureStorage.read(globalFixture.intValue());
  }
 else {
    Integer userFixture=ArrayUtilities.intersectSingle(appFixtureStorage.getIDsForValue(FormInstance.META_XMLNS,userId),appFixtures);
    if (userFixture != null) {
      return (FormInstance)appFixtureStorage.read(userFixture.intValue());
    }
    return null;
  }
}",0.9089055064581916
142337,"@Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){
  init();
  SQLiteDatabase db=mDbHelper.getWritableDatabase();
  int count=0;
switch (sUriMatcher.match(uri)) {
case FORMS:
    if (values.containsKey(FormsColumns.MD5_HASH)) {
      values.remove(FormsColumns.MD5_HASH);
    }
  if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
    String formFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
    values.put(FormsColumns.MD5_HASH,FileUtil.getMd5Hash(new File(formFile)));
  }
Cursor c=null;
try {
c=this.query(uri,null,where,whereArgs,null);
if (c.getCount() > 0) {
  c.moveToPosition(-1);
  while (c.moveToNext()) {
    if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
      String newFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
      String delFile=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      if (newFile.equalsIgnoreCase(delFile)) {
      }
 else {
        FileUtil.deleteFileOrDir(delFile);
      }
      FileUtil.deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
    }
  }
}
}
  finally {
if (c != null) {
  c.close();
}
}
if (values.containsKey(FormsColumns.DATE) == true) {
Date today=new Date();
String ts=new SimpleDateFormat(""String_Node_Str"").format(today);
values.put(FormsColumns.DISPLAY_SUBTEXT,""String_Node_Str"" + ts);
}
count=db.update(FORMS_TABLE_NAME,values,where,whereArgs);
break;
case FORM_ID:
String formId=uri.getPathSegments().get(1);
Cursor update=null;
try {
update=this.query(uri,null,where,whereArgs,null);
if (update.getCount() > 0) {
update.moveToFirst();
if (values.containsKey(FormsColumns.MD5_HASH)) {
values.remove(FormsColumns.MD5_HASH);
}
if (values.containsKey(FormsColumns.JRCACHE_FILE_PATH)) {
FileUtil.deleteFileOrDir(update.getString(update.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
}
if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
String formFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
String oldFile=update.getString(update.getColumnIndex(FormsColumns.FORM_FILE_PATH));
if (formFile != null && formFile.equalsIgnoreCase(oldFile)) {
}
 else {
FileUtil.deleteFileOrDir(oldFile);
}
FileUtil.deleteFileOrDir(update.getString(update.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
String newMd5=FileUtil.getMd5Hash(new File(formFile));
values.put(FormsColumns.MD5_HASH,newMd5);
values.put(FormsColumns.JRCACHE_FILE_PATH,""String_Node_Str"" + newMd5 + ""String_Node_Str"");
}
if (values.containsKey(FormsColumns.DATE) == true) {
Date today=new Date();
String ts=new SimpleDateFormat(""String_Node_Str"").format(today);
values.put(FormsColumns.DISPLAY_SUBTEXT,""String_Node_Str"" + ts);
}
count=db.update(FORMS_TABLE_NAME,values,FormsColumns._ID + ""String_Node_Str"" + formId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
}
 else {
Log.e(t,""String_Node_Str"");
}
}
  finally {
if (update != null) {
update.close();
}
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
getContext().getContentResolver().notifyChange(uri,null);
return count;
}","@Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){
  init();
  SQLiteDatabase db=mDbHelper.getWritableDatabase();
  int count=0;
switch (sUriMatcher.match(uri)) {
case FORMS:
    if (values.containsKey(FormsColumns.MD5_HASH)) {
      values.remove(FormsColumns.MD5_HASH);
    }
  if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
    String formFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
    values.put(FormsColumns.MD5_HASH,FileUtil.getMd5Hash(new File(formFile)));
  }
Cursor c=null;
try {
c=this.query(uri,null,where,whereArgs,null);
if (c.getCount() > 0) {
  c.moveToPosition(-1);
  while (c.moveToNext()) {
    if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
      String newFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
      String delFile=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));
      if (newFile.equalsIgnoreCase(delFile)) {
      }
 else {
        FileUtil.deleteFileOrDir(delFile);
      }
      FileUtil.deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
    }
  }
}
}
  finally {
if (c != null) {
  c.close();
}
}
if (values.containsKey(FormsColumns.DATE) == true) {
Date today=new Date();
String ts=new SimpleDateFormat(""String_Node_Str"").format(today);
values.put(FormsColumns.DISPLAY_SUBTEXT,""String_Node_Str"" + ts);
}
count=db.update(FORMS_TABLE_NAME,values,where,whereArgs);
break;
case FORM_ID:
String formId=uri.getPathSegments().get(1);
Cursor update=null;
try {
update=this.query(uri,null,where,whereArgs,null);
if (update.getCount() > 0) {
update.moveToFirst();
if (values.containsKey(FormsColumns.MD5_HASH)) {
values.remove(FormsColumns.MD5_HASH);
}
if (values.containsKey(FormsColumns.JRCACHE_FILE_PATH)) {
FileUtil.deleteFileOrDir(update.getString(update.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
}
if (values.containsKey(FormsColumns.FORM_FILE_PATH)) {
String formFile=values.getAsString(FormsColumns.FORM_FILE_PATH);
String oldFile=update.getString(update.getColumnIndex(FormsColumns.FORM_FILE_PATH));
try {
if (new File(oldFile).getCanonicalPath().equals(new File(formFile).getCanonicalPath())) {
}
 else {
FileUtil.deleteFileOrDir(oldFile);
}
}
 catch (IOException ioe) {
}
FileUtil.deleteFileOrDir(update.getString(update.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));
String newMd5=FileUtil.getMd5Hash(new File(formFile));
values.put(FormsColumns.MD5_HASH,newMd5);
values.put(FormsColumns.JRCACHE_FILE_PATH,""String_Node_Str"" + newMd5 + ""String_Node_Str"");
}
if (values.containsKey(FormsColumns.DATE) == true) {
Date today=new Date();
String ts=new SimpleDateFormat(""String_Node_Str"").format(today);
values.put(FormsColumns.DISPLAY_SUBTEXT,""String_Node_Str"" + ts);
}
count=db.update(FORMS_TABLE_NAME,values,FormsColumns._ID + ""String_Node_Str"" + formId+ (!TextUtils.isEmpty(where) ? ""String_Node_Str"" + where + ')' : ""String_Node_Str""),whereArgs);
}
 else {
Log.e(t,""String_Node_Str"");
}
}
  finally {
if (update != null) {
update.close();
}
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
getContext().getContentResolver().notifyChange(uri,null);
return count;
}",0.9608188069726532
142338,"private View getView(Context context,String text,String form){
  System.out.println(""String_Node_Str"");
  View retVal;
  if (""String_Node_Str"".equals(form)) {
    ImageView iv=(ImageView)View.inflate(context,R.layout.entity_item_image,null);
    retVal=iv;
    if (text != null) {
      try {
        Bitmap b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(text).getStream());
        iv.setImageBitmap(b);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InvalidReferenceException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    TextView tv=(TextView)View.inflate(context,R.layout.entity_item_text,null);
    retVal=tv;
    if (text != null) {
      tv.setText(text);
    }
  }
  return retVal;
}","private View getView(Context context,String text,String form){
  View retVal;
  if (""String_Node_Str"".equals(form)) {
    ImageView iv=(ImageView)View.inflate(context,R.layout.entity_item_image,null);
    retVal=iv;
    if (text != null) {
      try {
        Bitmap b=BitmapFactory.decodeStream(ReferenceManager._().DeriveReference(text).getStream());
        iv.setImageBitmap(b);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      InvalidReferenceException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    TextView tv=(TextView)View.inflate(context,R.layout.entity_item_text,null);
    retVal=tv;
    if (text != null) {
      tv.setText(text);
    }
  }
  return retVal;
}",0.972648432288192
142339,"private void refreshView() throws SessionUnavailableException {
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  boolean syncOK=true;
  TextView syncMessage=(TextView)findViewById(R.id.home_sync_message);
  Pair<Long,int[]> syncDetails=CommCareApplication._().getSyncDisplayParameters();
  SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
  unsentFormNumberLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_NUMBER_KEY,""String_Node_Str""));
  unsentFormTimeLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_TIME_KEY,""String_Node_Str""));
  CharSequence syncTime=syncDetails.first == 0 ? Localization.get(""String_Node_Str"") : DateUtils.formatSameDayTime(syncDetails.first,new Date().getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT);
  String message=""String_Node_Str"";
  if (syncDetails.second[0] == 1) {
    message+=Localization.get(""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (syncDetails.second[0] > 1) {
    message+=Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0])}) + ""String_Node_Str"";
  }
  if (syncDetails.second[0] > 0) {
    syncButton.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0]),Localization.get(""String_Node_Str"")}));
  }
 else {
    syncButton.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[1] > 0) {
    viewIncomplete.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[1]),Localization.get(""String_Node_Str"")}));
  }
 else {
    viewIncomplete.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[0] > unsentFormNumberLimit && (prefs.getString(""String_Node_Str"",""String_Node_Str"") == ""String_Node_Str"")) {
    syncOK=false;
  }
  long then=syncDetails.first;
  long now=new Date().getTime();
  int secs_ago=(int)((then - now) / 1000);
  int days_ago=secs_ago / 86400;
  if (days_ago > unsentFormTimeLimit) {
    syncOK=false;
  }
  int[] padding={syncMessage.getPaddingLeft(),syncMessage.getPaddingTop(),syncMessage.getPaddingRight(),syncMessage.getPaddingBottom()};
  if (!syncOK) {
    syncMessage.setTextColor(getResources().getColor(R.color.red));
    syncMessage.setTypeface(null,Typeface.BOLD);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble_danger));
  }
 else {
    syncMessage.setTextColor(getResources().getColor(R.color.solid_black));
    syncMessage.setTypeface(null,Typeface.NORMAL);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble));
  }
  syncMessage.setPadding(padding[0],padding[1],padding[2],padding[3]);
  message+=Localization.get(""String_Node_Str"",new String[]{syncTime.toString()});
  syncMessage.setText(message);
  Profile p=CommCareApplication._().getCommCarePlatform().getCurrentProfile();
  if (p != null && p.isFeatureActive(Profile.FEATURE_REVIEW)) {
    viewOldForms.setVisibility(Button.VISIBLE);
  }
  mDataPullTask=CommCareApplication._().getSession().getCurrentTask();
  if (mDataPullTask != null) {
    this.attachPullTask(mDataPullTask);
    if (mDataPullTask.getStatus() == Status.FINISHED) {
      this.dismissDialog(DIALOG_PROCESS);
    }
  }
  View formRecordPane=this.findViewById(R.id.home_formspanel);
  if (!CommCarePreferences.isFormManagementEnabled()) {
    formRecordPane.setVisibility(View.GONE);
  }
 else {
    formRecordPane.setVisibility(View.VISIBLE);
  }
}","private void refreshView() throws SessionUnavailableException {
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  boolean syncOK=true;
  TextView syncMessage=(TextView)findViewById(R.id.home_sync_message);
  Pair<Long,int[]> syncDetails=CommCareApplication._().getSyncDisplayParameters();
  SharedPreferences prefs=CommCareApplication._().getCurrentApp().getAppPreferences();
  unsentFormNumberLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_NUMBER_KEY,""String_Node_Str""));
  unsentFormTimeLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_TIME_KEY,""String_Node_Str""));
  CharSequence syncTime=syncDetails.first == 0 ? Localization.get(""String_Node_Str"") : DateUtils.formatSameDayTime(syncDetails.first,new Date().getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT);
  String message=""String_Node_Str"";
  if (syncDetails.second[0] == 1) {
    message+=Localization.get(""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (syncDetails.second[0] > 1) {
    message+=Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0])}) + ""String_Node_Str"";
  }
  if (syncDetails.second[0] > 0) {
    syncButton.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0]),Localization.get(""String_Node_Str"")}));
  }
 else {
    syncButton.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[1] > 0) {
    viewIncomplete.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[1]),Localization.get(""String_Node_Str"")}));
  }
 else {
    viewIncomplete.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[0] > unsentFormNumberLimit) {
    syncOK=false;
  }
  long then=syncDetails.first;
  long now=new Date().getTime();
  int secs_ago=(int)((then - now) / 1000);
  int days_ago=secs_ago / 86400;
  if ((-days_ago) > unsentFormTimeLimit && (prefs.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str""))) {
    syncOK=false;
  }
  int[] padding={syncMessage.getPaddingLeft(),syncMessage.getPaddingTop(),syncMessage.getPaddingRight(),syncMessage.getPaddingBottom()};
  if (!syncOK) {
    syncMessage.setTextColor(getResources().getColor(R.color.red));
    syncMessage.setTypeface(null,Typeface.BOLD);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble_danger));
  }
 else {
    syncMessage.setTextColor(getResources().getColor(R.color.solid_black));
    syncMessage.setTypeface(null,Typeface.NORMAL);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble));
  }
  syncMessage.setPadding(padding[0],padding[1],padding[2],padding[3]);
  message+=Localization.get(""String_Node_Str"",new String[]{syncTime.toString()});
  syncMessage.setText(message);
  Profile p=CommCareApplication._().getCommCarePlatform().getCurrentProfile();
  if (p != null && p.isFeatureActive(Profile.FEATURE_REVIEW)) {
    viewOldForms.setVisibility(Button.VISIBLE);
  }
  mDataPullTask=CommCareApplication._().getSession().getCurrentTask();
  if (mDataPullTask != null) {
    this.attachPullTask(mDataPullTask);
    if (mDataPullTask.getStatus() == Status.FINISHED) {
      this.dismissDialog(DIALOG_PROCESS);
    }
  }
  View formRecordPane=this.findViewById(R.id.home_formspanel);
  if (!CommCarePreferences.isFormManagementEnabled()) {
    formRecordPane.setVisibility(View.GONE);
  }
 else {
    formRecordPane.setVisibility(View.VISIBLE);
  }
}",0.9740592930444698
142340,"public static void checkForLegacyInstall(Context c,SqlIndexedStorageUtility<ApplicationRecord> currentAppStorage) throws StorageFullException {
  SharedPreferences globalPreferences=PreferenceManager.getDefaultSharedPreferences(c);
  if (globalPreferences.getString(LEGACY_UPGRADE_PROGRESS,""String_Node_Str"").equals(UPGRADE_COMPLETE)) {
    return;
  }
  if (!c.getDatabasePath(GlobalConstants.CC_DB_NAME).exists()) {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  int installedApps=currentAppStorage.getNumRecords();
  ApplicationRecord record=null;
  if (installedApps == 0) {
  }
 else   if (installedApps == 1) {
    for (    ApplicationRecord r : currentAppStorage) {
      int status=r.getStatus();
      if (status == ApplicationRecord.STATUS_SPECIAL_LEGACY) {
        record=r;
      }
    }
    if (record == null) {
      globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      return;
    }
  }
 else {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  final android.database.sqlite.SQLiteDatabase olddb=new LegacyCommCareOpenHelper(c).getReadableDatabase();
  LegacyDbHelper ldbh=new LegacyDbHelper(c){
    @Override public android.database.sqlite.SQLiteDatabase getHandle(){
      return olddb;
    }
  }
;
  LegacySqlIndexedStorageUtility<Resource> legacyResources=new LegacySqlIndexedStorageUtility<Resource>(""String_Node_Str"",Resource.class,ldbh);
  boolean hasProfile=false;
  boolean allInstalled=true;
  int oldDbSize=0;
  for (  Resource r : legacyResources) {
    if (r.getStatus() != Resource.RESOURCE_STATUS_INSTALLED) {
      allInstalled=false;
    }
    if (r.getResourceId().equals(""String_Node_Str"")) {
      hasProfile=true;
    }
    oldDbSize++;
  }
  if (hasProfile && allInstalled) {
  }
 else {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  if (record == null) {
    record=new ApplicationRecord(""String_Node_Str"",ApplicationRecord.STATUS_SPECIAL_LEGACY);
  }
  CommCareApp app=new CommCareApp(record);
  app.setupSandbox();
  SqlIndexedStorageUtility<Resource> newInstallTable=app.getStorage(""String_Node_Str"",Resource.class);
  SqlIndexedStorageUtility.cleanCopy(legacyResources,newInstallTable);
  LegacySqlIndexedStorageUtility<FormInstance> legacyFixtures=new LegacySqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,ldbh);
  SqlIndexedStorageUtility<FormInstance> newFixtures=app.getStorage(""String_Node_Str"",FormInstance.class);
  SqlIndexedStorageUtility.cleanCopy(legacyFixtures,newFixtures);
  LegacySqlIndexedStorageUtility<AndroidLogEntry> legacyLogs=new LegacySqlIndexedStorageUtility<AndroidLogEntry>(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class,ldbh);
  if (legacyLogs.isEmpty()) {
  }
 else {
    SqlIndexedStorageUtility<AndroidLogEntry> newLogs=app.getStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class);
    SqlIndexedStorageUtility.cleanCopy(legacyLogs,newLogs);
    legacyLogs.removeAll();
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  File oldRoot=new File(getOldFileSystemRoot());
  String newRoot=app.fsPath(""String_Node_Str"");
  oldRoot.renameTo(new File(newRoot));
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  Cursor ef=c.getContentResolver().query(FormsProviderAPI.FormsColumns.CONTENT_URI,new String[]{FormsProviderAPI.FormsColumns.FORM_FILE_PATH,FormsProviderAPI.FormsColumns._ID},null,null,null);
  ArrayList<Pair<Uri,String>> toReplace=new ArrayList<Pair<Uri,String>>();
  while (ef.moveToNext()) {
    String filePath=ef.getString(ef.getColumnIndex(FormsProviderAPI.FormsColumns.FORM_FILE_PATH));
    String newFilePath=replaceOldRoot(filePath,getOldFileSystemRoot(),newRoot);
    if (!newFilePath.equals(filePath)) {
      Uri uri=ContentUris.withAppendedId(FormsProviderAPI.FormsColumns.CONTENT_URI,ef.getLong(ef.getColumnIndex(FormsProviderAPI.FormsColumns._ID)));
      toReplace.add(new Pair<Uri,String>(uri,newFilePath));
    }
  }
  for (  Pair<Uri,String> p : toReplace) {
    ContentValues cv=new ContentValues();
    cv.put(FormsProviderAPI.FormsColumns.FORM_FILE_PATH,p.second);
    int updated=c.getContentResolver().update(p.first,cv,null,null);
    if (updated != 1) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + updated);
    }
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + toReplace.size() + ""String_Node_Str"");
  Map<String,?> oldPrefs=globalPreferences.getAll();
  Editor e=app.getAppPreferences().edit();
  for (  String k : oldPrefs.keySet()) {
    Object o=oldPrefs.get(k);
    if (o instanceof String) {
      e.putString(k,(String)o);
    }
 else     if (o instanceof Integer) {
      e.putInt(k,(Integer)o);
    }
 else     if (o instanceof Long) {
      e.putLong(k,(Long)o);
    }
 else     if (o instanceof Boolean) {
      e.putBoolean(k,(Boolean)o);
    }
 else     if (o instanceof Float) {
      e.putFloat(k,(Float)o);
    }
  }
  e.commit();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  SqlIndexedStorageUtility<UserKeyRecord> newUserKeyRecords=app.getStorage(UserKeyRecord.class);
  LegacySqlIndexedStorageUtility<User> legacyUsers=new LegacySqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,ldbh);
  ArrayList<User> oldUsers=new ArrayList<User>();
  for (  User u : legacyUsers) {
    oldUsers.add(u);
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + oldUsers.size() + ""String_Node_Str"");
  olddb.close();
  User preferred=null;
  for (  User u : oldUsers) {
    if (newUserKeyRecords.getIDsForValue(UserKeyRecord.META_USERNAME,u.getUsername()).size() > 0) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + u.getUsername() + ""String_Node_Str"");
      continue;
    }
    if (preferred == null || u.getUsername().toLowerCase().equals(globalPreferences.getString(CommCarePreferences.LAST_LOGGED_IN_USER,""String_Node_Str"").toLowerCase())) {
      preferred=u;
    }
    if (newUserKeyRecords.getIDsForValue(UserKeyRecord.META_USERNAME,u.getUsername()).size() == 0) {
      UserKeyRecord ukr=new UserKeyRecord(u.getUsername(),u.getPassword(),u.getWrappedKey(),new Date(0),new Date(Long.MAX_VALUE),u.getUniqueId(),UserKeyRecord.TYPE_LEGACY_TRANSITION);
      newUserKeyRecords.write(ukr);
    }
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  app.writeInstalled();
  globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  if (preferred != null) {
    for (    UserKeyRecord ukr : newUserKeyRecords.getRecordsForValues(new String[]{UserKeyRecord.META_USERNAME},new String[]{preferred.getUsername()})) {
      if (ukr.getType() == UserKeyRecord.TYPE_LEGACY_TRANSITION) {
        try {
          transitionLegacyUserStorage(c,app,generateOldTestKey().getEncoded(),ukr);
        }
 catch (        RuntimeException re) {
          re.printStackTrace();
        }
        break;
      }
    }
  }
  String toSkip=preferred == null ? null : preferred.getUsername();
  for (  UserKeyRecord ukr : newUserKeyRecords) {
    if (ukr.getUsername().equals(toSkip)) {
      continue;
    }
    if (ukr.getType() == UserKeyRecord.TYPE_LEGACY_TRANSITION) {
      try {
        transitionLegacyUserStorage(c,app,generateOldTestKey().getEncoded(),ukr);
      }
 catch (      RuntimeException re) {
        re.printStackTrace();
      }
      break;
    }
  }
  app.teardownSandbox();
}","public static void checkForLegacyInstall(Context c,SqlIndexedStorageUtility<ApplicationRecord> currentAppStorage) throws StorageFullException {
  SharedPreferences globalPreferences=PreferenceManager.getDefaultSharedPreferences(c);
  if (globalPreferences.getString(LEGACY_UPGRADE_PROGRESS,""String_Node_Str"").equals(UPGRADE_COMPLETE)) {
    return;
  }
  if (!c.getDatabasePath(GlobalConstants.CC_DB_NAME).exists()) {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  int installedApps=currentAppStorage.getNumRecords();
  ApplicationRecord record=null;
  if (installedApps == 0) {
  }
 else   if (installedApps == 1) {
    for (    ApplicationRecord r : currentAppStorage) {
      int status=r.getStatus();
      if (status == ApplicationRecord.STATUS_SPECIAL_LEGACY) {
        record=r;
      }
    }
    if (record == null) {
      globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      return;
    }
  }
 else {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  final android.database.sqlite.SQLiteDatabase olddb=new LegacyCommCareOpenHelper(c).getReadableDatabase();
  LegacyDbHelper ldbh=new LegacyDbHelper(c){
    @Override public android.database.sqlite.SQLiteDatabase getHandle(){
      return olddb;
    }
  }
;
  LegacySqlIndexedStorageUtility<Resource> legacyResources=new LegacySqlIndexedStorageUtility<Resource>(""String_Node_Str"",Resource.class,ldbh);
  boolean hasProfile=false;
  boolean allInstalled=true;
  int oldDbSize=0;
  for (  Resource r : legacyResources) {
    if (r.getStatus() != Resource.RESOURCE_STATUS_INSTALLED) {
      allInstalled=false;
    }
    if (r.getResourceId().equals(""String_Node_Str"")) {
      hasProfile=true;
    }
    oldDbSize++;
  }
  if (hasProfile && allInstalled) {
  }
 else {
    globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    return;
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  if (record == null) {
    record=new ApplicationRecord(""String_Node_Str"",ApplicationRecord.STATUS_SPECIAL_LEGACY);
  }
  CommCareApp app=new CommCareApp(record);
  app.setupSandbox();
  SqlIndexedStorageUtility<Resource> newInstallTable=app.getStorage(""String_Node_Str"",Resource.class);
  SqlIndexedStorageUtility.cleanCopy(legacyResources,newInstallTable);
  LegacySqlIndexedStorageUtility<FormInstance> legacyFixtures=new LegacySqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,ldbh);
  SqlIndexedStorageUtility<FormInstance> newFixtures=app.getStorage(""String_Node_Str"",FormInstance.class);
  SqlIndexedStorageUtility.cleanCopy(legacyFixtures,newFixtures);
  LegacySqlIndexedStorageUtility<AndroidLogEntry> legacyLogs=new LegacySqlIndexedStorageUtility<AndroidLogEntry>(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class,ldbh);
  if (legacyLogs.isEmpty()) {
  }
 else {
    SqlIndexedStorageUtility<AndroidLogEntry> newLogs=CommCareApplication._().getGlobalStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class);
    SqlIndexedStorageUtility.cleanCopy(legacyLogs,newLogs);
    legacyLogs.removeAll();
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  File oldRoot=new File(getOldFileSystemRoot());
  String newRoot=app.fsPath(""String_Node_Str"");
  oldRoot.renameTo(new File(newRoot));
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  Cursor ef=c.getContentResolver().query(FormsProviderAPI.FormsColumns.CONTENT_URI,new String[]{FormsProviderAPI.FormsColumns.FORM_FILE_PATH,FormsProviderAPI.FormsColumns._ID},null,null,null);
  ArrayList<Pair<Uri,String>> toReplace=new ArrayList<Pair<Uri,String>>();
  while (ef.moveToNext()) {
    String filePath=ef.getString(ef.getColumnIndex(FormsProviderAPI.FormsColumns.FORM_FILE_PATH));
    String newFilePath=replaceOldRoot(filePath,getOldFileSystemRoot(),newRoot);
    if (!newFilePath.equals(filePath)) {
      Uri uri=ContentUris.withAppendedId(FormsProviderAPI.FormsColumns.CONTENT_URI,ef.getLong(ef.getColumnIndex(FormsProviderAPI.FormsColumns._ID)));
      toReplace.add(new Pair<Uri,String>(uri,newFilePath));
    }
  }
  for (  Pair<Uri,String> p : toReplace) {
    ContentValues cv=new ContentValues();
    cv.put(FormsProviderAPI.FormsColumns.FORM_FILE_PATH,p.second);
    int updated=c.getContentResolver().update(p.first,cv,null,null);
    if (updated != 1) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + updated);
    }
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + toReplace.size() + ""String_Node_Str"");
  Map<String,?> oldPrefs=globalPreferences.getAll();
  Editor e=app.getAppPreferences().edit();
  for (  String k : oldPrefs.keySet()) {
    Object o=oldPrefs.get(k);
    if (o instanceof String) {
      e.putString(k,(String)o);
    }
 else     if (o instanceof Integer) {
      e.putInt(k,(Integer)o);
    }
 else     if (o instanceof Long) {
      e.putLong(k,(Long)o);
    }
 else     if (o instanceof Boolean) {
      e.putBoolean(k,(Boolean)o);
    }
 else     if (o instanceof Float) {
      e.putFloat(k,(Float)o);
    }
  }
  e.commit();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  SqlIndexedStorageUtility<UserKeyRecord> newUserKeyRecords=app.getStorage(UserKeyRecord.class);
  LegacySqlIndexedStorageUtility<User> legacyUsers=new LegacySqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,ldbh);
  ArrayList<User> oldUsers=new ArrayList<User>();
  for (  User u : legacyUsers) {
    oldUsers.add(u);
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + oldUsers.size() + ""String_Node_Str"");
  olddb.close();
  User preferred=null;
  for (  User u : oldUsers) {
    if (newUserKeyRecords.getIDsForValue(UserKeyRecord.META_USERNAME,u.getUsername()).size() > 0) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + u.getUsername() + ""String_Node_Str"");
      continue;
    }
    if (preferred == null || u.getUsername().toLowerCase().equals(globalPreferences.getString(CommCarePreferences.LAST_LOGGED_IN_USER,""String_Node_Str"").toLowerCase())) {
      preferred=u;
    }
    if (newUserKeyRecords.getIDsForValue(UserKeyRecord.META_USERNAME,u.getUsername()).size() == 0) {
      UserKeyRecord ukr=new UserKeyRecord(u.getUsername(),u.getPassword(),u.getWrappedKey(),new Date(0),new Date(Long.MAX_VALUE),u.getUniqueId(),UserKeyRecord.TYPE_LEGACY_TRANSITION);
      newUserKeyRecords.write(ukr);
    }
  }
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  app.writeInstalled();
  globalPreferences.edit().putString(LEGACY_UPGRADE_PROGRESS,UPGRADE_COMPLETE).commit();
  app.getAppPreferences().edit().putLong(CommCarePreferences.LOG_LAST_DAILY_SUBMIT,0).commit();
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
  if (preferred != null) {
    for (    UserKeyRecord ukr : newUserKeyRecords.getRecordsForValues(new String[]{UserKeyRecord.META_USERNAME},new String[]{preferred.getUsername()})) {
      if (ukr.getType() == UserKeyRecord.TYPE_LEGACY_TRANSITION) {
        try {
          transitionLegacyUserStorage(c,app,generateOldTestKey().getEncoded(),ukr);
        }
 catch (        RuntimeException re) {
          re.printStackTrace();
        }
        break;
      }
    }
  }
  String toSkip=preferred == null ? null : preferred.getUsername();
  for (  UserKeyRecord ukr : newUserKeyRecords) {
    if (ukr.getUsername().equals(toSkip)) {
      continue;
    }
    if (ukr.getType() == UserKeyRecord.TYPE_LEGACY_TRANSITION) {
      try {
        transitionLegacyUserStorage(c,app,generateOldTestKey().getEncoded(),ukr);
      }
 catch (      RuntimeException re) {
        re.printStackTrace();
      }
      break;
    }
  }
  app.teardownSandbox();
}",0.9915590863952334
142341,"public static void transitionLegacyUserStorage(final Context c,CommCareApp app,final byte[] oldKey,UserKeyRecord ukr) throws StorageFullException {
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + ukr.getUsername());
  try {
    final CipherPool pool=new CipherPool(){
      Object lock=new Object();
      byte[] key=oldKey;
      @Override public Cipher generateNewCipher(){
synchronized (lock) {
          try {
synchronized (key) {
              SecretKeySpec spec=new SecretKeySpec(key,""String_Node_Str"");
              Cipher decrypter=Cipher.getInstance(""String_Node_Str"");
              decrypter.init(Cipher.DECRYPT_MODE,spec);
              return decrypter;
            }
          }
 catch (          InvalidKeyException e) {
            e.printStackTrace();
          }
catch (          NoSuchAlgorithmException e) {
            e.printStackTrace();
          }
catch (          NoSuchPaddingException e) {
            e.printStackTrace();
          }
        }
        return null;
      }
    }
;
    final android.database.sqlite.SQLiteDatabase olddb=new LegacyCommCareOpenHelper(c,new LegacyCommCareDBCursorFactory(getLegacyEncryptedModels()){
      protected CipherPool getCipherPool() throws SessionUnavailableException {
        return pool;
      }
    }
).getReadableDatabase();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    LegacyDbHelper ldbh=new LegacyDbHelper(c,pool.borrow()){
      @Override public android.database.sqlite.SQLiteDatabase getHandle(){
        return olddb;
      }
    }
;
    final String newFileSystemRoot=app.fsPath(""String_Node_Str"");
    final String oldRoot=getOldFileSystemRoot();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    LegacySqlIndexedStorageUtility<User> legacyUserStorage=new LegacySqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,ldbh);
    try {
      for (      User u : legacyUserStorage) {
      }
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
      return;
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    final SQLiteDatabase currentUserDatabase=new CommCareUserOpenHelper(CommCareApplication._(),ukr.getUuid()).getWritableDatabase(CommCareSessionService.getKeyVal(oldKey));
    DbHelper newDbHelper=new DbHelper(c){
      @Override public SQLiteDatabase getHandle(){
        return currentUserDatabase;
      }
    }
;
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    try {
      LegacySqlIndexedStorageUtility<ACase> legacyCases=new LegacySqlIndexedStorageUtility<ACase>(ACase.STORAGE_KEY,ACase.class,ldbh);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + legacyCases.getNumRecords() + ""String_Node_Str"");
      Map m=SqlIndexedStorageUtility.cleanCopy(legacyCases,new SqlIndexedStorageUtility<ACase>(ACase.STORAGE_KEY,ACase.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + m.size() + ""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(legacyUserStorage,new SqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      final Map<Integer,Integer> formRecordMapping=SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,ldbh),new SqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,newDbHelper),new CopyMapper<FormRecord>(){
        @Override public FormRecord transform(        FormRecord t){
          String formRecordPath;
          try {
            formRecordPath=t.getPath(c);
            String newPath=replaceOldRoot(formRecordPath,oldRoot,newFileSystemRoot);
            if (newPath != formRecordPath) {
              ContentValues cv=new ContentValues();
              cv.put(InstanceColumns.INSTANCE_FILE_PATH,newPath);
              c.getContentResolver().update(t.getInstanceURI(),cv,null,null);
            }
            return t;
          }
 catch (          FileNotFoundException e) {
            return t;
          }
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,ldbh),new SqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,newDbHelper),new CopyMapper<SessionStateDescriptor>(){
        @Override public SessionStateDescriptor transform(        SessionStateDescriptor t){
          return t.reMapFormRecordId(formRecordMapping.get(t.getFormRecordId()));
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<GeocodeCacheModel>(GeocodeCacheModel.STORAGE_KEY,GeocodeCacheModel.class,ldbh),new SqlIndexedStorageUtility<GeocodeCacheModel>(GeocodeCacheModel.STORAGE_KEY,GeocodeCacheModel.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<AndroidLogEntry>(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class,ldbh),new SqlIndexedStorageUtility<AndroidLogEntry>(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,ldbh),new SqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,newDbHelper),new CopyMapper<DeviceReportRecord>(){
        @Override public DeviceReportRecord transform(        DeviceReportRecord t){
          return new DeviceReportRecord(replaceOldRoot(t.getFilePath(),oldRoot,newFileSystemRoot),t.getKey());
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,ldbh),new SqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,newDbHelper));
    }
 catch (    StorageFullException sfe) {
      throw new RuntimeException(sfe);
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    ukr.setType(UserKeyRecord.TYPE_NORMAL);
    app.getStorage(UserKeyRecord.class).write(ukr);
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    new LegacySqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,ldbh).removeAll();
    new LegacySqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,ldbh).removeAll();
    new LegacySqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,ldbh).removeAll();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    olddb.close();
    currentUserDatabase.close();
  }
  finally {
  }
}","public static void transitionLegacyUserStorage(final Context c,CommCareApp app,final byte[] oldKey,UserKeyRecord ukr) throws StorageFullException {
  Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + ukr.getUsername());
  try {
    final CipherPool pool=new CipherPool(){
      Object lock=new Object();
      byte[] key=oldKey;
      @Override public Cipher generateNewCipher(){
synchronized (lock) {
          try {
synchronized (key) {
              SecretKeySpec spec=new SecretKeySpec(key,""String_Node_Str"");
              Cipher decrypter=Cipher.getInstance(""String_Node_Str"");
              decrypter.init(Cipher.DECRYPT_MODE,spec);
              return decrypter;
            }
          }
 catch (          InvalidKeyException e) {
            e.printStackTrace();
          }
catch (          NoSuchAlgorithmException e) {
            e.printStackTrace();
          }
catch (          NoSuchPaddingException e) {
            e.printStackTrace();
          }
        }
        return null;
      }
    }
;
    final android.database.sqlite.SQLiteDatabase olddb=new LegacyCommCareOpenHelper(c,new LegacyCommCareDBCursorFactory(getLegacyEncryptedModels()){
      protected CipherPool getCipherPool() throws SessionUnavailableException {
        return pool;
      }
    }
).getReadableDatabase();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    LegacyDbHelper ldbh=new LegacyDbHelper(c,pool.borrow()){
      @Override public android.database.sqlite.SQLiteDatabase getHandle(){
        return olddb;
      }
    }
;
    final String newFileSystemRoot=app.fsPath(""String_Node_Str"");
    final String oldRoot=getOldFileSystemRoot();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    LegacySqlIndexedStorageUtility<User> legacyUserStorage=new LegacySqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,ldbh);
    try {
      for (      User u : legacyUserStorage) {
      }
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
      return;
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    final SQLiteDatabase currentUserDatabase=new CommCareUserOpenHelper(CommCareApplication._(),ukr.getUuid()).getWritableDatabase(CommCareSessionService.getKeyVal(oldKey));
    DbHelper newDbHelper=new DbHelper(c){
      @Override public SQLiteDatabase getHandle(){
        return currentUserDatabase;
      }
    }
;
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    try {
      LegacySqlIndexedStorageUtility<ACase> legacyCases=new LegacySqlIndexedStorageUtility<ACase>(ACase.STORAGE_KEY,ACase.class,ldbh);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + legacyCases.getNumRecords() + ""String_Node_Str"");
      Map m=SqlIndexedStorageUtility.cleanCopy(legacyCases,new SqlIndexedStorageUtility<ACase>(ACase.STORAGE_KEY,ACase.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + m.size() + ""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(legacyUserStorage,new SqlIndexedStorageUtility<User>(""String_Node_Str"",User.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      final Map<Integer,Integer> formRecordMapping=SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,ldbh),new SqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,newDbHelper),new CopyMapper<FormRecord>(){
        @Override public FormRecord transform(        FormRecord t){
          String formRecordPath;
          try {
            formRecordPath=t.getPath(c);
            String newPath=replaceOldRoot(formRecordPath,oldRoot,newFileSystemRoot);
            if (newPath != formRecordPath) {
              ContentValues cv=new ContentValues();
              cv.put(InstanceColumns.INSTANCE_FILE_PATH,newPath);
              c.getContentResolver().update(t.getInstanceURI(),cv,null,null);
            }
            return t;
          }
 catch (          FileNotFoundException e) {
            return t;
          }
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,ldbh),new SqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,newDbHelper),new CopyMapper<SessionStateDescriptor>(){
        @Override public SessionStateDescriptor transform(        SessionStateDescriptor t){
          return t.reMapFormRecordId(formRecordMapping.get(t.getFormRecordId()));
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<GeocodeCacheModel>(GeocodeCacheModel.STORAGE_KEY,GeocodeCacheModel.class,ldbh),new SqlIndexedStorageUtility<GeocodeCacheModel>(GeocodeCacheModel.STORAGE_KEY,GeocodeCacheModel.class,newDbHelper));
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,ldbh),new SqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,newDbHelper),new CopyMapper<DeviceReportRecord>(){
        @Override public DeviceReportRecord transform(        DeviceReportRecord t){
          return new DeviceReportRecord(replaceOldRoot(t.getFilePath(),oldRoot,newFileSystemRoot),t.getKey());
        }
      }
);
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
      SqlIndexedStorageUtility.cleanCopy(new LegacySqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,ldbh),new SqlIndexedStorageUtility<FormInstance>(""String_Node_Str"",FormInstance.class,newDbHelper));
    }
 catch (    StorageFullException sfe) {
      throw new RuntimeException(sfe);
    }
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    ukr.setType(UserKeyRecord.TYPE_NORMAL);
    app.getStorage(UserKeyRecord.class).write(ukr);
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    new LegacySqlIndexedStorageUtility<DeviceReportRecord>(""String_Node_Str"",DeviceReportRecord.class,ldbh).removeAll();
    new LegacySqlIndexedStorageUtility<FormRecord>(""String_Node_Str"",FormRecord.class,ldbh).removeAll();
    new LegacySqlIndexedStorageUtility<SessionStateDescriptor>(""String_Node_Str"",SessionStateDescriptor.class,ldbh).removeAll();
    Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    olddb.close();
    currentUserDatabase.close();
  }
  finally {
  }
}",0.9764807113150724
142342,"@Override protected Integer doInBackground(FormRecord... params){
  int progress=0;
  int target=params.length;
  while (progress < target && !isCancelled()) {
    FormRecord current=null;
synchronized (priorityQueue) {
      if (!priorityQueue.isEmpty()) {
        current=priorityQueue.poll();
        loaded.add(current.getID());
      }
      if (current == null) {
        current=params[progress++];
        if (loaded.contains(current.getID())) {
          continue;
        }
 else {
          loaded.add(current.getID());
        }
      }
    }
    ArrayList<String> cache=new ArrayList<String>();
    cache.add(android.text.format.DateUtils.formatDateTime(context,current.lastModified().getTime(),android.text.format.DateUtils.FORMAT_NO_MONTH_DAY | android.text.format.DateUtils.FORMAT_NO_YEAR).toLowerCase());
    SessionStateDescriptor ssd=null;
    try {
      ssd=descriptorStorage.getRecordForValue(SessionStateDescriptor.META_FORM_RECORD_ID,current.getID());
    }
 catch (    NoSuchElementException nsee) {
    }
    String dataTitle=""String_Node_Str"";
    if (ssd != null) {
      String descriptor=ssd.getSessionDescriptor();
      if (!descriptorCache.containsKey(descriptor)) {
        AndroidSessionWrapper asw=new AndroidSessionWrapper(platform);
        asw.loadFromStateDescription(ssd);
        dataTitle=asw.getTitle();
        dataTitle=dataTitle == null ? ""String_Node_Str"" : dataTitle;
        descriptorCache.put(descriptor,dataTitle);
      }
    }
    cache.add(dataTitle);
    this.publishProgress(new Pair<Integer,ArrayList<String>>(current.getID(),cache));
  }
  return 1;
}","@Override protected Integer doInBackground(FormRecord... params){
  int progress=0;
  int target=params.length;
  while (progress < target && !isCancelled()) {
    FormRecord current=null;
synchronized (priorityQueue) {
      if (!priorityQueue.isEmpty()) {
        current=priorityQueue.poll();
        loaded.add(current.getID());
      }
      if (current == null) {
        current=params[progress++];
        if (loaded.contains(current.getID())) {
          continue;
        }
 else {
          loaded.add(current.getID());
        }
      }
    }
    ArrayList<String> cache=new ArrayList<String>();
    cache.add(android.text.format.DateUtils.formatDateTime(context,current.lastModified().getTime(),android.text.format.DateUtils.FORMAT_NO_MONTH_DAY | android.text.format.DateUtils.FORMAT_NO_YEAR).toLowerCase());
    SessionStateDescriptor ssd=null;
    try {
      ssd=descriptorStorage.getRecordForValue(SessionStateDescriptor.META_FORM_RECORD_ID,current.getID());
    }
 catch (    NoSuchElementException nsee) {
    }
    String dataTitle=""String_Node_Str"";
    if (ssd != null) {
      String descriptor=ssd.getSessionDescriptor();
      if (!descriptorCache.containsKey(descriptor)) {
        AndroidSessionWrapper asw=new AndroidSessionWrapper(platform);
        asw.loadFromStateDescription(ssd);
        dataTitle=asw.getTitle();
        dataTitle=dataTitle == null ? ""String_Node_Str"" : dataTitle;
        descriptorCache.put(descriptor,dataTitle);
      }
 else {
        dataTitle=descriptorCache.get(descriptor);
      }
    }
    cache.add(dataTitle);
    this.publishProgress(new Pair<Integer,ArrayList<String>>(current.getID(),cache));
  }
  return 1;
}",0.9796290665855883
142343,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().getSession().logout();
    }
    return;
  }
break;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(this);
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(FormRecord.STORAGE_KEY,-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class).read(record);
SqlIndexedStorageUtility<SessionStateDescriptor> ssdStorage=CommCareApplication._().getStorage(SessionStateDescriptor.STORAGE_KEY,SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(CommCareSession.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(CommCareSession.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == 1) {
if (intent.hasExtra(""String_Node_Str"")) {
Throwable ex=(Throwable)intent.getSerializableExtra(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
 else {
RuntimeException ex=new RuntimeException(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG);
currentState.reset();
refreshView();
break;
}
 else if (resultCode == RESULT_OK) {
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_COMPLETE || current.getStatus() == FormRecord.STATUS_SAVED) {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Uri resultInstanceURI=intent.getData();
if (resultInstanceURI == null) {
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Cursor c=managedQuery(resultInstanceURI,null,null,null,null);
boolean complete=false;
try {
complete=currentState.beginRecordTransaction(resultInstanceURI,c);
}
 catch (IllegalArgumentException iae) {
iae.printStackTrace();
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"" + iae.getMessage());
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
 finally {
c.close();
}
try {
current=currentState.commitRecordTransaction();
}
 catch (Exception e) {
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",Toast.LENGTH_LONG);
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
ExceptionReportTask ert=new ExceptionReportTask();
ert.execute(e);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (complete) {
SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
mProcess.setListeners(this,CommCareApplication._().getSession().startDataSubmissionListener());
refreshView();
showDialog(DIALOG_PROCESS);
mProcess.execute(current);
if (wasExternal) {
this.finish();
}
currentState.reset();
return;
}
 else {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
}
 else {
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
}
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
}
startNextFetch();
super.onActivityResult(requestCode,resultCode,intent);
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().getSession().logout();
    }
    return;
  }
break;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(this);
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(FormRecord.STORAGE_KEY,-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class).read(record);
SqlIndexedStorageUtility<SessionStateDescriptor> ssdStorage=CommCareApplication._().getStorage(SessionStateDescriptor.STORAGE_KEY,SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(CommCareSession.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(CommCareSession.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == 1) {
if (intent.hasExtra(""String_Node_Str"")) {
Throwable ex=(Throwable)intent.getSerializableExtra(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
 else {
RuntimeException ex=new RuntimeException(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG);
currentState.reset();
refreshView();
break;
}
 else if (resultCode == RESULT_OK) {
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_COMPLETE || current.getStatus() == FormRecord.STATUS_SAVED) {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Uri resultInstanceURI=intent.getData();
if (resultInstanceURI == null) {
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Cursor c=managedQuery(resultInstanceURI,null,null,null,null);
boolean complete=false;
try {
complete=currentState.beginRecordTransaction(resultInstanceURI,c);
}
 catch (IllegalArgumentException iae) {
iae.printStackTrace();
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"" + iae.getMessage());
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
 finally {
c.close();
}
try {
current=currentState.commitRecordTransaction();
}
 catch (Exception e) {
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",Toast.LENGTH_LONG);
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
ExceptionReportTask ert=new ExceptionReportTask();
ert.execute(e);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (complete) {
SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
mProcess.setListeners(this,CommCareApplication._().getSession().startDataSubmissionListener());
refreshView();
showDialog(DIALOG_PROCESS);
mProcess.execute(current);
if (wasExternal) {
this.finish();
}
currentState.reset();
return;
}
 else {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
}
 else {
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
}
if (wasExternal) {
this.finish();
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
currentState.setFormRecordId(-1);
}
}
}
startNextFetch();
super.onActivityResult(requestCode,resultCode,intent);
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
}",0.9902676399026764
142344,"private void refreshView() throws SessionUnavailableException {
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  boolean syncOK=true;
  TextView syncMessage=(TextView)findViewById(R.id.home_sync_message);
  Pair<Long,int[]> syncDetails=CommCareApplication._().getSyncDisplayParameters();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  unsentFormNumberLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_NUMBER_KEY,""String_Node_Str""));
  unsentFormTimeLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_TIME_KEY,""String_Node_Str""));
  CharSequence syncTime=syncDetails.first == 0 ? Localization.get(""String_Node_Str"") : DateUtils.formatSameDayTime(syncDetails.first,new Date().getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT);
  String message=""String_Node_Str"";
  if (syncDetails.second[0] == 1) {
    message+=Localization.get(""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (syncDetails.second[0] > 1) {
    message+=Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second)}) + ""String_Node_Str"";
  }
  if (syncDetails.second[0] > 0) {
    syncButton.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0]),Localization.get(""String_Node_Str"")}));
  }
 else {
    syncButton.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[1] > 0) {
    viewIncomplete.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[1]),Localization.get(""String_Node_Str"")}));
    viewIncomplete.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[0] > unsentFormNumberLimit) {
    syncOK=false;
  }
  long then=syncDetails.first;
  long now=new Date().getTime();
  int secs_ago=(int)((then - now) / 1000);
  int days_ago=secs_ago / 86400;
  if (days_ago > unsentFormTimeLimit) {
    syncOK=false;
  }
  int[] padding={syncMessage.getPaddingLeft(),syncMessage.getPaddingTop(),syncMessage.getPaddingRight(),syncMessage.getPaddingBottom()};
  if (!syncOK) {
    syncMessage.setTextColor(getResources().getColor(R.color.red));
    syncMessage.setTypeface(null,Typeface.BOLD);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble_danger));
  }
 else {
    syncMessage.setTextColor(getResources().getColor(R.color.solid_black));
    syncMessage.setTypeface(null,Typeface.NORMAL);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble));
  }
  syncMessage.setPadding(padding[0],padding[1],padding[2],padding[3]);
  message+=Localization.get(""String_Node_Str"",new String[]{syncTime.toString()});
  syncMessage.setText(message);
  Profile p=CommCareApplication._().getCommCarePlatform().getCurrentProfile();
  if (p != null && p.isFeatureActive(Profile.FEATURE_REVIEW)) {
    viewOldForms.setVisibility(Button.VISIBLE);
  }
  mDataPullTask=CommCareApplication._().getSession().getCurrentTask();
  if (mDataPullTask != null) {
    this.attachPullTask(mDataPullTask);
    if (mDataPullTask.getStatus() == Status.FINISHED) {
      this.dismissDialog(DIALOG_PROCESS);
    }
  }
  View formRecordPane=this.findViewById(R.id.home_formspanel);
  if (!CommCarePreferences.isFormManagementEnabled()) {
    formRecordPane.setVisibility(View.GONE);
  }
 else {
    formRecordPane.setVisibility(View.VISIBLE);
  }
}","private void refreshView() throws SessionUnavailableException {
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  boolean syncOK=true;
  TextView syncMessage=(TextView)findViewById(R.id.home_sync_message);
  Pair<Long,int[]> syncDetails=CommCareApplication._().getSyncDisplayParameters();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  unsentFormNumberLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_NUMBER_KEY,""String_Node_Str""));
  unsentFormTimeLimit=Integer.parseInt(prefs.getString(UNSENT_FORM_TIME_KEY,""String_Node_Str""));
  CharSequence syncTime=syncDetails.first == 0 ? Localization.get(""String_Node_Str"") : DateUtils.formatSameDayTime(syncDetails.first,new Date().getTime(),DateFormat.DEFAULT,DateFormat.DEFAULT);
  String message=""String_Node_Str"";
  if (syncDetails.second[0] == 1) {
    message+=Localization.get(""String_Node_Str"") + ""String_Node_Str"";
  }
 else   if (syncDetails.second[0] > 1) {
    message+=Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second)}) + ""String_Node_Str"";
  }
  if (syncDetails.second[0] > 0) {
    syncButton.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[0]),Localization.get(""String_Node_Str"")}));
  }
 else {
    syncButton.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[1] > 0) {
    viewIncomplete.setText(Localization.get(""String_Node_Str"",new String[]{String.valueOf(syncDetails.second[1]),Localization.get(""String_Node_Str"")}));
  }
 else {
    viewIncomplete.setText(Localization.get(""String_Node_Str""));
  }
  if (syncDetails.second[0] > unsentFormNumberLimit) {
    syncOK=false;
  }
  long then=syncDetails.first;
  long now=new Date().getTime();
  int secs_ago=(int)((then - now) / 1000);
  int days_ago=secs_ago / 86400;
  if (days_ago > unsentFormTimeLimit) {
    syncOK=false;
  }
  int[] padding={syncMessage.getPaddingLeft(),syncMessage.getPaddingTop(),syncMessage.getPaddingRight(),syncMessage.getPaddingBottom()};
  if (!syncOK) {
    syncMessage.setTextColor(getResources().getColor(R.color.red));
    syncMessage.setTypeface(null,Typeface.BOLD);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble_danger));
  }
 else {
    syncMessage.setTextColor(getResources().getColor(R.color.solid_black));
    syncMessage.setTypeface(null,Typeface.NORMAL);
    syncMessage.setBackgroundDrawable(getResources().getDrawable(R.drawable.bubble));
  }
  syncMessage.setPadding(padding[0],padding[1],padding[2],padding[3]);
  message+=Localization.get(""String_Node_Str"",new String[]{syncTime.toString()});
  syncMessage.setText(message);
  Profile p=CommCareApplication._().getCommCarePlatform().getCurrentProfile();
  if (p != null && p.isFeatureActive(Profile.FEATURE_REVIEW)) {
    viewOldForms.setVisibility(Button.VISIBLE);
  }
  mDataPullTask=CommCareApplication._().getSession().getCurrentTask();
  if (mDataPullTask != null) {
    this.attachPullTask(mDataPullTask);
    if (mDataPullTask.getStatus() == Status.FINISHED) {
      this.dismissDialog(DIALOG_PROCESS);
    }
  }
  View formRecordPane=this.findViewById(R.id.home_formspanel);
  if (!CommCarePreferences.isFormManagementEnabled()) {
    formRecordPane.setVisibility(View.GONE);
  }
 else {
    formRecordPane.setVisibility(View.VISIBLE);
  }
}",0.9982394366197184
142345,"protected boolean checkAndStartUnsentTask(ProcessTaskListener listener) throws SessionUnavailableException {
  SqlIndexedStorageUtility<FormRecord> storage=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class);
  Vector<Integer> ids=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new Object[]{FormRecord.STATUS_UNSENT});
  ids.addAll(storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new Object[]{FormRecord.STATUS_COMPLETE}));
  if (ids.size() > 0) {
    FormRecord[] records=new FormRecord[ids.size()];
    for (int i=0; i < ids.size(); ++i) {
      records[i]=storage.read(ids.elementAt(i).intValue());
    }
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
    mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
    mProcess.setListeners(this,CommCareApplication._().getSession().startDataSubmissionListener());
    showDialog(DIALOG_SEND_UNSENT);
    mProcess.execute(records);
    return true;
  }
 else {
    return false;
  }
}","protected boolean checkAndStartUnsentTask(ProcessTaskListener listener) throws SessionUnavailableException {
  SqlIndexedStorageUtility<FormRecord> storage=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class);
  Vector<Integer> ids=storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new Object[]{FormRecord.STATUS_UNSENT});
  ids.addAll(storage.getIDsForValues(new String[]{FormRecord.META_STATUS},new Object[]{FormRecord.STATUS_COMPLETE}));
  if (ids.size() > 0) {
    FormRecord[] records=new FormRecord[ids.size()];
    for (int i=0; i < ids.size(); ++i) {
      records[i]=storage.read(ids.elementAt(i).intValue());
    }
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
    mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
    mProcess.setListeners(listener,CommCareApplication._().getSession().startDataSubmissionListener());
    showDialog(DIALOG_SEND_UNSENT);
    mProcess.execute(records);
    return true;
  }
 else {
    return false;
  }
}",0.9945750452079566
142346,"private void configUi(){
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  platform=CommCareApplication._().getCommCarePlatform();
  startButton=(Button)findViewById(R.id.home_start);
  startButton.setText(Localization.get(""String_Node_Str""));
  startButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),MenuList.class);
      startActivityForResult(i,GET_COMMAND);
    }
  }
);
  viewIncomplete=(Button)findViewById(R.id.home_forms_incomplete);
  viewIncomplete.setText(Localization.get(""String_Node_Str""));
  viewIncomplete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),FormRecordListActivity.class);
      i.putExtra(FormRecord.META_STATUS,FormRecord.STATUS_INCOMPLETE);
      startActivityForResult(i,GET_INCOMPLETE_FORM);
    }
  }
);
  logoutButton=(Button)findViewById(R.id.home_logout);
  logoutButton.setText(Localization.get(""String_Node_Str""));
  logoutButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      CommCareApplication._().logout();
      dispatchHomeScreen();
    }
  }
);
  TextView formGroupLabel=(TextView)findViewById(R.id.home_formrecords_label);
  formGroupLabel.setText(Localization.get(""String_Node_Str""));
  viewOldForms=(Button)findViewById(R.id.home_forms_old);
  viewOldForms.setText(Localization.get(""String_Node_Str""));
  viewOldForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),FormRecordListActivity.class);
      startActivityForResult(i,GET_INCOMPLETE_FORM);
    }
  }
);
  syncButton=(Button)findViewById(R.id.home_sync);
  syncButton.setText(Localization.get(""String_Node_Str""));
  syncButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      boolean formsToSend=checkAndStartUnsentTask(new ProcessTaskListener(){
        public void processTaskAllProcessed(){
        }
        public void processAndSendFinished(        int result,        int successfulSends){
          if (currentHome != CommCareHomeActivity.this) {
            System.out.println(""String_Node_Str"");
          }
          if (result == ProcessAndSendTask.FULL_SUCCESS) {
            String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
            Toast.makeText(currentHome,label,Toast.LENGTH_LONG).show();
            refreshView();
            syncData();
          }
 else           if (result == ProcessAndSendTask.FAILURE) {
            currentHome.dismissDialog(mCurrentDialog);
          }
 else {
            currentHome.dismissDialog(mCurrentDialog);
            Toast.makeText(currentHome,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
          }
        }
      }
);
      if (!formsToSend) {
        syncData();
      }
    }
  }
);
}","private void configUi(){
  TextView version=(TextView)findViewById(R.id.str_version);
  version.setText(CommCareApplication._().getCurrentVersionString());
  platform=CommCareApplication._().getCommCarePlatform();
  startButton=(Button)findViewById(R.id.home_start);
  startButton.setText(Localization.get(""String_Node_Str""));
  startButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),MenuList.class);
      startActivityForResult(i,GET_COMMAND);
    }
  }
);
  viewIncomplete=(Button)findViewById(R.id.home_forms_incomplete);
  viewIncomplete.setText(Localization.get(""String_Node_Str""));
  viewIncomplete.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),FormRecordListActivity.class);
      i.putExtra(FormRecord.META_STATUS,FormRecord.STATUS_INCOMPLETE);
      startActivityForResult(i,GET_INCOMPLETE_FORM);
    }
  }
);
  logoutButton=(Button)findViewById(R.id.home_logout);
  logoutButton.setText(Localization.get(""String_Node_Str""));
  logoutButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      CommCareApplication._().logout();
      dispatchHomeScreen();
    }
  }
);
  TextView formGroupLabel=(TextView)findViewById(R.id.home_formrecords_label);
  formGroupLabel.setText(Localization.get(""String_Node_Str""));
  viewOldForms=(Button)findViewById(R.id.home_forms_old);
  viewOldForms.setText(Localization.get(""String_Node_Str""));
  viewOldForms.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(getApplicationContext(),FormRecordListActivity.class);
      startActivityForResult(i,GET_INCOMPLETE_FORM);
    }
  }
);
  syncButton=(Button)findViewById(R.id.home_sync);
  syncButton.setText(Localization.get(""String_Node_Str""));
  syncButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      boolean formsToSend=checkAndStartUnsentTask(new ProcessTaskListener(){
        public void processTaskAllProcessed(){
        }
        public void processAndSendFinished(        int result,        int successfulSends){
          if (currentHome != CommCareHomeActivity.this) {
            System.out.println(""String_Node_Str"");
          }
          if (result == ProcessAndSendTask.FULL_SUCCESS) {
            currentHome.dismissDialog(mCurrentDialog);
            String label=Localization.get(""String_Node_Str"",new String[]{String.valueOf(successfulSends)});
            Toast.makeText(currentHome,label,Toast.LENGTH_LONG).show();
            refreshView();
            syncData();
          }
 else           if (result == ProcessAndSendTask.FAILURE) {
            currentHome.dismissDialog(mCurrentDialog);
          }
 else {
            currentHome.dismissDialog(mCurrentDialog);
            Toast.makeText(currentHome,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
          }
        }
      }
);
      if (!formsToSend) {
        syncData();
      }
    }
  }
);
}",0.9909939413787456
142347,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  currentHome=this;
  setContentView(R.layout.mainnew);
  configUi();
  Intent startup=this.getIntent();
  if (startup != null && startup.hasExtra(SESSION_REQUEST)) {
    wasExternal=true;
    String sessionRequest=startup.getStringExtra(SESSION_REQUEST);
    SessionStateDescriptor ssd=new SessionStateDescriptor();
    ssd.fromBundle(sessionRequest);
    CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
    this.startNextFetch();
    return;
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    wasExternal=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  if (currentHome != null) {
    this.mCurrentDialog=currentHome.mCurrentDialog;
  }
  currentHome=this;
  setContentView(R.layout.mainnew);
  configUi();
  Intent startup=this.getIntent();
  if (startup != null && startup.hasExtra(SESSION_REQUEST)) {
    wasExternal=true;
    String sessionRequest=startup.getStringExtra(SESSION_REQUEST);
    SessionStateDescriptor ssd=new SessionStateDescriptor();
    ssd.fromBundle(sessionRequest);
    CommCareApplication._().getCurrentSessionWrapper().loadFromStateDescription(ssd);
    this.startNextFetch();
    return;
  }
}",0.945825366475462
142348,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  setContentView(R.layout.mainnew);
  CommCareHomeActivity.currentHome=this;
  configUi();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  setContentView(R.layout.mainnew);
  if (currentHome != null) {
    this.mCurrentDialog=currentHome.mCurrentDialog;
  }
  CommCareHomeActivity.currentHome=this;
  configUi();
  refreshView();
}",0.7704280155642024
142349,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().getSession().logout();
    }
    return;
  }
break;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(this);
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(FormRecord.STORAGE_KEY,-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class).read(record);
SqlIndexedStorageUtility<SessionStateDescriptor> ssdStorage=CommCareApplication._().getStorage(SessionStateDescriptor.STORAGE_KEY,SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(CommCareSession.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(CommCareSession.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == 1) {
if (intent.hasExtra(""String_Node_Str"")) {
Throwable ex=(Throwable)intent.getSerializableExtra(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
 else {
RuntimeException ex=new RuntimeException(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG);
currentState.reset();
refreshView();
break;
}
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_COMPLETE || current.getStatus() == FormRecord.STATUS_SAVED || current.getStatus() == FormRecord.STATUS_UNSENT) {
currentState.reset();
if (wasExternal) {
this.finish();
}
 else {
goToFormArchive(false,current);
}
return;
}
if (resultCode == RESULT_OK) {
Uri resultInstanceURI=intent.getData();
if (resultInstanceURI == null) {
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Cursor c=managedQuery(resultInstanceURI,null,null,null,null);
boolean complete=false;
try {
complete=currentState.beginRecordTransaction(resultInstanceURI,c);
}
 catch (IllegalArgumentException iae) {
iae.printStackTrace();
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"" + iae.getMessage());
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
 finally {
c.close();
}
try {
current=currentState.commitRecordTransaction();
}
 catch (Exception e) {
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",Toast.LENGTH_LONG);
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
ExceptionReportTask ert=new ExceptionReportTask();
ert.execute(e);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (complete) {
SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
mProcess.setListeners(this,CommCareApplication._().getSession().startDataSubmissionListener());
refreshView();
showDialog(DIALOG_PROCESS);
mProcess.execute(current);
if (wasExternal) {
this.finish();
}
currentState.reset();
return;
}
 else {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
}
 else {
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
}
if (wasExternal) {
this.finish();
currentState.reset();
return;
}
 else {
if (current.getStatus() == FormRecord.STATUS_INCOMPLETE) {
currentState.reset();
goToFormArchive(true,current);
return;
}
 else {
currentState.getSession().stepBack();
currentState.setFormRecordId(-1);
}
}
}
}
startNextFetch();
super.onActivityResult(requestCode,resultCode,intent);
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  try {
switch (requestCode) {
case INIT_APP:
      if (resultCode == RESULT_CANCELED) {
        this.finish();
        return;
      }
 else       if (resultCode == RESULT_OK) {
        return;
      }
    break;
case UPGRADE_APP:
  if (resultCode == RESULT_CANCELED) {
    return;
  }
 else   if (resultCode == RESULT_OK) {
    if (intent.getBooleanExtra(CommCareSetupActivity.KEY_REQUIRE_REFRESH,true)) {
      Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG).show();
      CommCareApplication._().getSession().logout();
    }
    return;
  }
break;
case MISSING_MEDIA_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
return;
}
case REPORT_PROBLEM_ACTIVITY:
if (resultCode == RESULT_CANCELED) {
return;
}
 else if (resultCode == RESULT_OK) {
CommCareApplication._().notifyLogsPending();
refreshView();
return;
}
case LOGIN_USER:
if (resultCode == RESULT_CANCELED) {
this.finish();
return;
}
 else if (resultCode == RESULT_OK) {
if (intent.getBooleanExtra(LoginActivity.ALREADY_LOGGED_IN,false)) {
}
 else {
refreshView();
checkAndStartUnsentTask(this);
}
return;
}
break;
case GET_INCOMPLETE_FORM:
AndroidSessionWrapper currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
refreshView();
return;
}
 else if (resultCode == RESULT_OK) {
int record=intent.getIntExtra(FormRecord.STORAGE_KEY,-1);
if (record == -1) {
break;
}
FormRecord r=CommCareApplication._().getStorage(FormRecord.STORAGE_KEY,FormRecord.class).read(record);
SqlIndexedStorageUtility<SessionStateDescriptor> ssdStorage=CommCareApplication._().getStorage(SessionStateDescriptor.STORAGE_KEY,SessionStateDescriptor.class);
Vector<Integer> ssds=ssdStorage.getIDsForValue(SessionStateDescriptor.META_FORM_RECORD_ID,r.getID());
if (ssds.size() == 1) {
currentState.loadFromStateDescription(ssdStorage.read(ssds.firstElement()));
}
 else {
currentState.setFormRecordId(r.getID());
}
formEntry(platform.getFormContentUri(r.getFormNamespace()),r);
return;
}
break;
case GET_COMMAND:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
if (currentState.getSession().getCommand() == null) {
currentState.reset();
refreshView();
return;
}
 else {
currentState.getSession().stepBack();
break;
}
}
 else if (resultCode == RESULT_OK) {
String command=intent.getStringExtra(CommCareSession.STATE_COMMAND_ID);
currentState.getSession().setCommand(command);
break;
}
break;
case GET_CASE:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == RESULT_CANCELED) {
currentState.getSession().stepBack();
break;
}
 else if (resultCode == RESULT_OK) {
currentState.getSession().setDatum(currentState.getSession().getNeededDatum().getDataId(),intent.getStringExtra(CommCareSession.STATE_DATUM_VAL));
if (intent.hasExtra(CallOutActivity.CALL_DURATION)) {
platform.setCallDuration(intent.getLongExtra(CallOutActivity.CALL_DURATION,0));
}
break;
}
case MODEL_RESULT:
currentState=CommCareApplication._().getCurrentSessionWrapper();
if (resultCode == 1) {
if (intent.hasExtra(""String_Node_Str"")) {
Throwable ex=(Throwable)intent.getSerializableExtra(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
 else {
RuntimeException ex=new RuntimeException(""String_Node_Str"");
ExceptionReportTask task=new ExceptionReportTask();
task.execute(ex);
}
Toast.makeText(this,Localization.get(""String_Node_Str""),Toast.LENGTH_LONG);
currentState.reset();
refreshView();
break;
}
FormRecord current=currentState.getFormRecord();
if (current.getStatus() == FormRecord.STATUS_COMPLETE || current.getStatus() == FormRecord.STATUS_SAVED || current.getStatus() == FormRecord.STATUS_UNSENT) {
currentState.reset();
if (wasExternal) {
this.finish();
}
 else {
goToFormArchive(false,current);
}
return;
}
if (resultCode == RESULT_OK) {
Uri resultInstanceURI=intent.getData();
if (resultInstanceURI == null) {
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"");
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Cursor c=managedQuery(resultInstanceURI,null,null,null,null);
boolean complete=false;
try {
complete=currentState.beginRecordTransaction(resultInstanceURI,c);
}
 catch (IllegalArgumentException iae) {
iae.printStackTrace();
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG);
Logger.log(AndroidLogger.TYPE_ERROR_WORKFLOW,""String_Node_Str"" + iae.getMessage());
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
 finally {
c.close();
}
try {
current=currentState.commitRecordTransaction();
}
 catch (Exception e) {
CommCareApplication._().reportNotificationMessage(NotificationMessageFactory.message(StockMessages.FormEntry_Unretrievable));
Toast.makeText(this,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"",Toast.LENGTH_LONG);
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
ExceptionReportTask ert=new ExceptionReportTask();
ert.execute(e);
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (complete) {
SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
mProcess=new ProcessAndSendTask(this,platform,settings.getString(""String_Node_Str"",this.getString(R.string.PostURL)));
mProcess.setListeners(this,CommCareApplication._().getSession().startDataSubmissionListener());
refreshView();
showDialog(DIALOG_PROCESS);
mProcess.execute(current);
if (wasExternal) {
this.finish();
}
currentState.reset();
return;
}
 else {
currentState.reset();
if (wasExternal) {
this.finish();
}
refreshView();
return;
}
}
 else {
Logger.log(AndroidLogger.TYPE_FORM_ENTRY,""String_Node_Str"");
if (current.getStatus() == FormRecord.STATUS_UNSTARTED) {
new FormRecordCleanupTask(this,platform).wipeRecord(currentState);
}
if (wasExternal) {
this.finish();
currentState.reset();
return;
}
 else {
if (current.getStatus() == FormRecord.STATUS_INCOMPLETE) {
currentState.reset();
goToFormArchive(true,current);
return;
}
 else {
currentState.getSession().stepBack();
currentState.setFormRecordId(-1);
}
}
}
}
startNextFetch();
}
 catch (SessionUnavailableException sue) {
returnToLogin();
}
super.onActivityResult(requestCode,resultCode,intent);
}",0.9905283409797248
142350,"private void returnToLogin(String message){
  Toast.makeText(this,message,Toast.LENGTH_LONG);
  Intent i=new Intent(getApplicationContext(),LoginActivity.class);
  startActivityForResult(i,LOGIN_USER);
}","private void returnToLogin(String message){
  Toast.makeText(this,message,Toast.LENGTH_LONG);
  Intent i=new Intent(getApplicationContext(),LoginActivity.class);
  i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
  startActivityForResult(i,LOGIN_USER);
}",0.8845315904139434
142351,"@Override protected Dialog onCreateDialog(int id){
  AlertDialog mNoStorageDialog=new AlertDialog.Builder(this).create();
  mNoStorageDialog.setTitle(title);
  mNoStorageDialog.setMessage(message + ""String_Node_Str"" + Localization.get(""String_Node_Str""));
  DialogInterface.OnClickListener noStorageButton=new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int i){
      Intent intent=new Intent(UnrecoverableErrorActivity.this,CommCareHomeActivity.class);
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP| Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      UnrecoverableErrorActivity.this.startActivity(intent);
      System.runFinalizersOnExit(true);
      System.exit(0);
    }
  }
;
  mNoStorageDialog.setCancelable(false);
  mNoStorageDialog.setButton(Localization.get(""String_Node_Str""),noStorageButton);
  return mNoStorageDialog;
}","@Override protected Dialog onCreateDialog(int id){
  AlertDialog mNoStorageDialog=new AlertDialog.Builder(this).create();
  mNoStorageDialog.setTitle(title);
  mNoStorageDialog.setMessage(message + ""String_Node_Str"" + Localization.get(""String_Node_Str""));
  DialogInterface.OnClickListener noStorageButton=new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int i){
      Intent intent=new Intent(UnrecoverableErrorActivity.this,CommCareHomeActivity.class);
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP| Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
      UnrecoverableErrorActivity.this.startActivity(intent);
      UnrecoverableErrorActivity.this.moveTaskToBack(true);
      System.runFinalizersOnExit(true);
      System.exit(0);
    }
  }
;
  mNoStorageDialog.setCancelable(false);
  mNoStorageDialog.setButton(Localization.get(""String_Node_Str""),noStorageButton);
  return mNoStorageDialog;
}",0.9698189134808852
142352,"public void onClick(DialogInterface dialog,int i){
  Intent intent=new Intent(UnrecoverableErrorActivity.this,CommCareHomeActivity.class);
  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP| Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  UnrecoverableErrorActivity.this.startActivity(intent);
  System.runFinalizersOnExit(true);
  System.exit(0);
}","public void onClick(DialogInterface dialog,int i){
  Intent intent=new Intent(UnrecoverableErrorActivity.this,CommCareHomeActivity.class);
  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP| Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  UnrecoverableErrorActivity.this.startActivity(intent);
  UnrecoverableErrorActivity.this.moveTaskToBack(true);
  System.runFinalizersOnExit(true);
  System.exit(0);
}",0.922566371681416
142353,"protected Integer doInBackground(Void... params){
  publishProgress(PROGRESS_STARTED);
  boolean loginNeeded=true;
  try {
    loginNeeded=!CommCareApplication._().getSession().isLoggedIn();
  }
 catch (  SessionUnavailableException sue) {
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(c);
  prefs.edit().putLong(""String_Node_Str"",new Date().getTime()).commit();
  CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c){
    @Override public void reportProgress(    int progress){
      DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
    }
  }
;
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  HttpRequestGenerator requestor=new HttpRequestGenerator(username,password);
  try {
    SecretKeySpec spec=null;
    if (loginNeeded) {
      spec=generateTestKey();
      if (spec == null) {
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      byte[] wrappedKey=CryptUtil.wrapKey(spec,password);
      factory.initUserParser(wrappedKey);
    }
 else {
      factory.initUserParser(CommCareApplication._().getSession().getLoggedInUser().getWrappedKey());
    }
    if (loginNeeded) {
      CommCareApplication._().logIn(spec.getEncoded(),null);
    }
    purgeCases();
    this.publishProgress(PROGRESS_CLEANED);
    HttpResponse response=requestor.makeCaseFetchRequest(server);
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode == 401) {
      if (loginNeeded) {
        CommCareApplication._().logout();
      }
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
      return AUTH_FAILED;
    }
 else     if (responseCode >= 200 && responseCode < 300) {
      this.publishProgress(PROGRESS_AUTHED,0);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
      int dataSizeGuess=-1;
      if (response.containsHeader(""String_Node_Str"")) {
        String length=response.getFirstHeader(""String_Node_Str"").getValue();
        try {
          dataSizeGuess=Integer.parseInt(length);
        }
 catch (        Exception e) {
        }
      }
      BitCache cache=BitCacheFactory.getCache(c,dataSizeGuess);
      cache.initializeCache();
      try {
        OutputStream cacheOut=cache.getCacheStream();
        AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),cacheOut);
        InputStream cacheIn=cache.retrieveCache();
        String syncToken=readInput(cacheIn,factory);
        updateUserSyncToken(syncToken);
        Editor e=prefs.edit();
        e.putLong(""String_Node_Str"",new Date().getTime());
        e.commit();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 catch (      InvalidStructureException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
        return BAD_DATA;
      }
catch (      XmlPullParserException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
        return BAD_DATA;
      }
catch (      UnfullfilledRequirementsException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
catch (      IllegalStateException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
catch (      StorageFullException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
 finally {
        cache.release();
      }
    }
 else     if (responseCode == 412) {
      int returnCode=recover(requestor,factory);
      if (returnCode == PROGRESS_DONE) {
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 else       if (returnCode == PROGRESS_RECOVERY_FAIL_SAFE) {
        if (loginNeeded) {
          CommCareApplication._().logout();
        }
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
 else       if (returnCode == PROGRESS_RECOVERY_FAIL_BAD) {
        if (loginNeeded) {
          CommCareApplication._().logout();
        }
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      if (loginNeeded) {
        CommCareApplication._().logout();
      }
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
  }
catch (  UnknownHostException e) {
    this.publishProgress(PROGRESS_DONE);
    if (loginNeeded) {
      CommCareApplication._().logout();
    }
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
    return UNREACHABLE_HOST;
  }
catch (  IOException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
  }
catch (  SessionUnavailableException sue) {
    sue.printStackTrace();
    CommCareApplication._().logout();
  }
  if (loginNeeded) {
    CommCareApplication._().logout();
  }
  this.publishProgress(PROGRESS_DONE);
  return UNKNOWN_FAILURE;
}","protected Integer doInBackground(Void... params){
  publishProgress(PROGRESS_STARTED);
  boolean loginNeeded=true;
  boolean useRequestFlags=false;
  try {
    loginNeeded=!CommCareApplication._().getSession().isLoggedIn();
  }
 catch (  SessionUnavailableException sue) {
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(c);
  prefs.edit().putLong(""String_Node_Str"",new Date().getTime()).commit();
  CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c){
    @Override public void reportProgress(    int progress){
      DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
    }
  }
;
  Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"");
  HttpRequestGenerator requestor=new HttpRequestGenerator(username,password);
  try {
    SecretKeySpec spec=null;
    if (loginNeeded) {
      spec=generateTestKey();
      if (spec == null) {
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      byte[] wrappedKey=CryptUtil.wrapKey(spec,password);
      factory.initUserParser(wrappedKey);
    }
 else {
      factory.initUserParser(CommCareApplication._().getSession().getLoggedInUser().getWrappedKey());
      purgeCases();
      useRequestFlags=true;
    }
    this.publishProgress(PROGRESS_CLEANED);
    if (loginNeeded) {
      CommCareApplication._().logIn(spec.getEncoded(),null);
    }
    HttpResponse response=requestor.makeCaseFetchRequest(server,useRequestFlags);
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode == 401) {
      if (loginNeeded) {
        CommCareApplication._().logout();
      }
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
      return AUTH_FAILED;
    }
 else     if (responseCode >= 200 && responseCode < 300) {
      this.publishProgress(PROGRESS_AUTHED,0);
      Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
      int dataSizeGuess=-1;
      if (response.containsHeader(""String_Node_Str"")) {
        String length=response.getFirstHeader(""String_Node_Str"").getValue();
        try {
          dataSizeGuess=Integer.parseInt(length);
        }
 catch (        Exception e) {
        }
      }
      BitCache cache=BitCacheFactory.getCache(c,dataSizeGuess);
      cache.initializeCache();
      try {
        OutputStream cacheOut=cache.getCacheStream();
        AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),cacheOut);
        InputStream cacheIn=cache.retrieveCache();
        String syncToken=readInput(cacheIn,factory);
        updateUserSyncToken(syncToken);
        Editor e=prefs.edit();
        e.putLong(""String_Node_Str"",new Date().getTime());
        e.commit();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + username);
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 catch (      InvalidStructureException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
        return BAD_DATA;
      }
catch (      XmlPullParserException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_USER,""String_Node_Str"" + e.getMessage());
        return BAD_DATA;
      }
catch (      UnfullfilledRequirementsException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
catch (      IllegalStateException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
catch (      StorageFullException e) {
        e.printStackTrace();
        Logger.log(AndroidLogger.TYPE_ERROR_ASSERTION,""String_Node_Str"" + e.getMessage());
      }
 finally {
        cache.release();
      }
    }
 else     if (responseCode == 412) {
      int returnCode=recover(requestor,factory);
      if (returnCode == PROGRESS_DONE) {
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 else       if (returnCode == PROGRESS_RECOVERY_FAIL_SAFE) {
        if (loginNeeded) {
          CommCareApplication._().logout();
        }
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
 else       if (returnCode == PROGRESS_RECOVERY_FAIL_BAD) {
        if (loginNeeded) {
          CommCareApplication._().logout();
        }
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      if (loginNeeded) {
        CommCareApplication._().logout();
      }
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
  }
catch (  UnknownHostException e) {
    this.publishProgress(PROGRESS_DONE);
    if (loginNeeded) {
      CommCareApplication._().logout();
    }
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"");
    return UNREACHABLE_HOST;
  }
catch (  IOException e) {
    e.printStackTrace();
    Logger.log(AndroidLogger.TYPE_WARNING_NETWORK,""String_Node_Str"" + e.getMessage());
  }
catch (  SessionUnavailableException sue) {
    sue.printStackTrace();
    CommCareApplication._().logout();
  }
  if (loginNeeded) {
    CommCareApplication._().logout();
  }
  this.publishProgress(PROGRESS_DONE);
  return UNKNOWN_FAILURE;
}",0.9722143731750964
142354,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(""String_Node_Str"",uiState.toString());
  outState.putString(""String_Node_Str"",uiState == UiState.advanced ? editProfileRef.getText().toString() : incomingRef);
  outState.putBoolean(KEY_UPGRADE_MODE,upgradeMode);
  outState.putBoolean(KEY_AUTO,isAuto);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(""String_Node_Str"",uiState.toString());
  outState.putString(""String_Node_Str"",incomingRef);
  outState.putBoolean(KEY_UPGRADE_MODE,upgradeMode);
  outState.putBoolean(KEY_AUTO,isAuto);
}",0.9008746355685132
142355,"private int initResources(){
  try {
    AndroidCommCarePlatform platform=CommCareApplication._().getCommCarePlatform();
    ResourceTable global=platform.getGlobalResourceTable();
    Resource profile=global.getResourceWithId(""String_Node_Str"");
    if (profile != null && profile.getStatus() == Resource.RESOURCE_STATUS_INSTALLED) {
      platform.initialize(global);
      Localization.setLocale(Localization.getGlobalLocalizerAdvanced().getAvailableLocales()[0]);
      SizeBoundVector<UnresolvedResourceException> problems=new SizeBoundVector<UnresolvedResourceException>(10);
      if (problems.size() > 0) {
        System.out.println(""String_Node_Str"");
      }
      global.verifyInstallation(problems);
      return STATE_READY;
    }
 else {
      return STATE_UNINSTALLED;
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Log.i(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    ExceptionReportTask ert=new ExceptionReportTask();
    ert.execute(e);
    return STATE_CORRUPTED;
  }
}","private int initResources(){
  try {
    AndroidCommCarePlatform platform=CommCareApplication._().getCommCarePlatform();
    ResourceTable global=platform.getGlobalResourceTable();
    Resource profile=global.getResourceWithId(""String_Node_Str"");
    if (profile != null && profile.getStatus() == Resource.RESOURCE_STATUS_INSTALLED) {
      platform.initialize(global);
      Localization.setLocale(Localization.getGlobalLocalizerAdvanced().getAvailableLocales()[0]);
      return STATE_READY;
    }
 else {
      return STATE_UNINSTALLED;
    }
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Log.i(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    ExceptionReportTask ert=new ExceptionReportTask();
    ert.execute(e);
    return STATE_CORRUPTED;
  }
}",0.8701642819289878
142356,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  setContentView(R.layout.entity_select_layout);
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  session=CommCareApplication._().getCurrentSession();
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  setTitle(getString(R.string.application_name) + ""String_Node_Str"" + ""String_Node_Str"");
  selectDatum=session.getNeededDatum();
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  if (selectDatum.getLongDetail() != null && this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=getEntityFromID(this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      Intent i=getDetailIntent(entity);
      startActivityForResult(i,CONFIRM_SELECT);
    }
 else {
      refreshView();
    }
  }
 else {
    refreshView();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mResultIsMap=savedInstanceState.getBoolean(EXTRA_IS_MAP,false);
  }
  setContentView(R.layout.entity_select_layout);
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  session=CommCareApplication._().getCurrentSession();
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  setTitle(getString(R.string.application_name) + ""String_Node_Str"" + ""String_Node_Str"");
  selectDatum=session.getNeededDatum();
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
}",0.822262118491921
142357,"public void afterTextChanged(Editable s){
  if (searchbox.getText() == s) {
    adapter.applyFilter(s.toString());
  }
}","public void afterTextChanged(Editable s){
  if (searchbox.getText() == s) {
    if (adapter != null) {
      adapter.applyFilter(s.toString());
    }
  }
}",0.8727272727272727
142358,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CONFIRM_SELECT:
if (resultCode == RESULT_OK) {
  Intent i=new Intent(this.getIntent());
  i.putExtras(intent.getExtras());
  setResult(RESULT_OK,i);
  finish();
  return;
}
 else {
  if (mResultIsMap) {
    mResultIsMap=false;
    Intent i=new Intent(this,EntityMapActivity.class);
    this.startActivityForResult(i,MAP_SELECT);
    return;
  }
  Intent i=new Intent(this.getIntent());
  setResult(RESULT_CANCELED,i);
  if (this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    refreshView();
  }
  return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=CommCareApplication._().deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
Intent i=this.getDetailIntent(r);
mResultIsMap=true;
startActivityForResult(i,CONFIRM_SELECT);
return;
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CONFIRM_SELECT:
if (resultCode == RESULT_OK) {
  Intent i=new Intent(this.getIntent());
  i.putExtras(intent.getExtras());
  setResult(RESULT_OK,i);
  finish();
  return;
}
 else {
  if (mResultIsMap) {
    mResultIsMap=false;
    Intent i=new Intent(this,EntityMapActivity.class);
    this.startActivityForResult(i,MAP_SELECT);
    return;
  }
  resuming=true;
  return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=CommCareApplication._().deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
Intent i=this.getDetailIntent(r);
mResultIsMap=true;
startActivityForResult(i,CONFIRM_SELECT);
return;
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9294642857142856
142359,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CONFIRM_SELECT:
if (resultCode == RESULT_OK) {
  Intent i=new Intent(this.getIntent());
  i.putExtras(intent.getExtras());
  setResult(RESULT_OK,i);
  finish();
  return;
}
 else {
  if (mResultIsMap) {
    mResultIsMap=false;
    Intent i=new Intent(this,EntityMapActivity.class);
    this.startActivityForResult(i,MAP_SELECT);
    return;
  }
  resuming=true;
  return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=CommCareApplication._().deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
Intent i=this.getDetailIntent(r);
mResultIsMap=true;
startActivityForResult(i,CONFIRM_SELECT);
return;
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent intent){
switch (requestCode) {
case BARCODE_FETCH:
    if (resultCode == Activity.RESULT_OK) {
      String result=intent.getStringExtra(""String_Node_Str"");
      this.searchbox.setText(result);
    }
  break;
case CONFIRM_SELECT:
resuming=true;
if (resultCode == RESULT_OK) {
Intent i=new Intent(this.getIntent());
i.putExtras(intent.getExtras());
setResult(RESULT_OK,i);
finish();
return;
}
 else {
if (mResultIsMap) {
  mResultIsMap=false;
  Intent i=new Intent(this,EntityMapActivity.class);
  this.startActivityForResult(i,MAP_SELECT);
  return;
}
return;
}
case MAP_SELECT:
if (resultCode == RESULT_OK) {
TreeReference r=CommCareApplication._().deserializeFromIntent(intent,EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class);
Intent i=this.getDetailIntent(r);
mResultIsMap=true;
startActivityForResult(i,CONFIRM_SELECT);
return;
}
 else {
refreshView();
return;
}
default :
super.onActivityResult(requestCode,resultCode,intent);
}
}",0.9654178674351584
142360,"@Override protected LogSubmitOutcomes doInBackground(Void... params){
  try {
    SqlIndexedStorageUtility<DeviceReportRecord> storage=CommCareApplication._().getStorage(DeviceReportRecord.STORAGE_KEY,DeviceReportRecord.class);
    if (serializeCurrentLogs) {
      SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
      settings.edit().putLong(CommCarePreferences.LOG_LAST_DAILY_SUBMIT,new Date().getTime()).commit();
      DeviceReportRecord record=DeviceReportRecord.GenerateNewRecordStub();
      try {
        DeviceReportWriter reporter;
        try {
          reporter=new DeviceReportWriter(record);
        }
 catch (        IOException e) {
          e.printStackTrace();
          return LogSubmitOutcomes.Error;
        }
        AndroidLogSerializer serializer=new AndroidLogSerializer(CommCareApplication._().getStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class));
        reporter.addReportElement(serializer);
        reporter.write();
        storage.write(record);
        serializer.purge();
      }
 catch (      Exception e) {
        e.printStackTrace();
        return LogSubmitOutcomes.Error;
      }
    }
    int numberOfLogsToSubmit=storage.getNumRecords();
    this.beginSubmissionProcess(numberOfLogsToSubmit);
    int index=0;
    ArrayList<Integer> submittedSuccesfullyIds=new ArrayList<Integer>();
    ArrayList<DeviceReportRecord> submittedSuccesfully=new ArrayList<DeviceReportRecord>();
    for (    DeviceReportRecord slr : storage) {
      try {
        if (submit(slr,index)) {
          submittedSuccesfullyIds.add(slr.getID());
          submittedSuccesfully.add(slr);
        }
        index++;
      }
 catch (      Exception e) {
      }
    }
    try {
      storage.remove(submittedSuccesfullyIds);
    }
 catch (    Exception e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + e.getMessage());
      return LogSubmitOutcomes.Serialized;
    }
    for (    DeviceReportRecord record : submittedSuccesfully) {
      try {
        File f=new File(record.getFilePath());
        f.delete();
      }
 catch (      Exception e) {
      }
    }
    if (submittedSuccesfully.size() > 0) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + submittedSuccesfully.size() + ""String_Node_Str"");
    }
    if (submittedSuccesfully.size() == numberOfLogsToSubmit) {
      return LogSubmitOutcomes.Submitted;
    }
 else {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,numberOfLogsToSubmit - submittedSuccesfully.size() + ""String_Node_Str"");
      return LogSubmitOutcomes.Serialized;
    }
  }
 catch (  SessionUnavailableException sue) {
    return LogSubmitOutcomes.Error;
  }
}","@Override protected LogSubmitOutcomes doInBackground(Void... params){
  try {
    SqlIndexedStorageUtility<DeviceReportRecord> storage=CommCareApplication._().getStorage(DeviceReportRecord.STORAGE_KEY,DeviceReportRecord.class);
    if (serializeCurrentLogs) {
      SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(CommCareApplication._());
      settings.edit().putLong(CommCarePreferences.LOG_LAST_DAILY_SUBMIT,new Date().getTime()).commit();
      DeviceReportRecord record=DeviceReportRecord.GenerateNewRecordStub();
      try {
        DeviceReportWriter reporter;
        try {
          reporter=new DeviceReportWriter(record);
        }
 catch (        IOException e) {
          e.printStackTrace();
          return LogSubmitOutcomes.Error;
        }
        AndroidLogSerializer serializer=new AndroidLogSerializer(CommCareApplication._().getStorage(AndroidLogEntry.STORAGE_KEY,AndroidLogEntry.class));
        reporter.addReportElement(serializer);
        reporter.write();
        storage.write(record);
        serializer.purge();
      }
 catch (      Exception e) {
        e.printStackTrace();
        return LogSubmitOutcomes.Error;
      }
    }
    int numberOfLogsToSubmit=storage.getNumRecords();
    if (numberOfLogsToSubmit == 0) {
      return LogSubmitOutcomes.Submitted;
    }
    this.beginSubmissionProcess(numberOfLogsToSubmit);
    int index=0;
    ArrayList<Integer> submittedSuccesfullyIds=new ArrayList<Integer>();
    ArrayList<DeviceReportRecord> submittedSuccesfully=new ArrayList<DeviceReportRecord>();
    for (    DeviceReportRecord slr : storage) {
      try {
        if (submit(slr,index)) {
          submittedSuccesfullyIds.add(slr.getID());
          submittedSuccesfully.add(slr);
        }
        index++;
      }
 catch (      Exception e) {
      }
    }
    try {
      storage.remove(submittedSuccesfullyIds);
    }
 catch (    Exception e) {
      e.printStackTrace();
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + e.getMessage());
      return LogSubmitOutcomes.Serialized;
    }
    for (    DeviceReportRecord record : submittedSuccesfully) {
      try {
        File f=new File(record.getFilePath());
        f.delete();
      }
 catch (      Exception e) {
      }
    }
    if (submittedSuccesfully.size() > 0) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"" + submittedSuccesfully.size() + ""String_Node_Str"");
    }
    if (submittedSuccesfully.size() == numberOfLogsToSubmit) {
      return LogSubmitOutcomes.Submitted;
    }
 else {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,numberOfLogsToSubmit - submittedSuccesfully.size() + ""String_Node_Str"");
      return LogSubmitOutcomes.Serialized;
    }
  }
 catch (  SessionUnavailableException sue) {
    return LogSubmitOutcomes.Error;
  }
}",0.9847149793202662
142361,"private boolean upgradeTwoEighttoTwoNine(SQLiteDatabase database){
  String ssdTable=TableBuilder.scrubName(SessionStateDescriptor.STORAGE_KEY);
  String tempssdTable=TableBuilder.scrubName(SessionStateDescriptor.STORAGE_KEY + ""String_Node_Str"");
  int oldRows=countRows(database,ssdTable);
  try {
    database.beginTransaction();
    TableBuilder builder=new TableBuilder(AndroidLogEntry.STORAGE_KEY);
    builder.addData(new AndroidLogEntry());
    database.execSQL(builder.getTableCreateString());
    builder=new TableBuilder(DeviceReportRecord.STORAGE_KEY);
    builder.addData(new DeviceReportRecord());
    database.execSQL(builder.getTableCreateString());
    database.execSQL(String.format(""String_Node_Str"",ssdTable,tempssdTable));
    builder=new TableBuilder(SessionStateDescriptor.STORAGE_KEY);
    builder.setUnique(SessionStateDescriptor.META_FORM_RECORD_ID);
    builder.addData(new SessionStateDescriptor());
    database.execSQL(builder.getTableCreateString());
    String cols=builder.getColumns();
    database.execSQL(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ssdTable,cols,cols,tempssdTable));
    database.execSQL(String.format(""String_Node_Str"",tempssdTable));
    database.setTransactionSuccessful();
    int newRows=countRows(database,ssdTable);
    if (oldRows != newRows) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,""String_Node_Str"");
    }
    return true;
  }
  finally {
    database.endTransaction();
  }
}","private boolean upgradeTwoEighttoTwoNine(SQLiteDatabase database){
  String ssdTable=TableBuilder.scrubName(SessionStateDescriptor.STORAGE_KEY);
  String tempssdTable=TableBuilder.scrubName(SessionStateDescriptor.STORAGE_KEY + ""String_Node_Str"");
  int oldRows=countRows(database,ssdTable);
  try {
    database.beginTransaction();
    TableBuilder builder=new TableBuilder(AndroidLogEntry.STORAGE_KEY);
    builder.addData(new AndroidLogEntry());
    database.execSQL(builder.getTableCreateString());
    builder=new TableBuilder(DeviceReportRecord.STORAGE_KEY);
    builder.addData(new DeviceReportRecord());
    database.execSQL(builder.getTableCreateString());
    database.execSQL(String.format(""String_Node_Str"",ssdTable,tempssdTable));
    builder=new TableBuilder(SessionStateDescriptor.STORAGE_KEY);
    builder.setUnique(SessionStateDescriptor.META_FORM_RECORD_ID);
    builder.addData(new SessionStateDescriptor());
    database.execSQL(builder.getTableCreateString());
    String cols=builder.getColumns();
    database.execSQL(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",ssdTable,cols,cols,tempssdTable));
    database.execSQL(String.format(""String_Node_Str"",tempssdTable));
    database.setTransactionSuccessful();
    int newRows=countRows(database,ssdTable);
    if (oldRows != newRows) {
      Logger.log(AndroidLogger.TYPE_MAINTENANCE,String.format(""String_Node_Str"",String.valueOf(newRows - oldRows)));
    }
    return true;
  }
  finally {
    database.endTransaction();
  }
}",0.9836721092969012
142362,"private int countRows(SQLiteDatabase database,String table){
  try {
    Cursor c=database.rawQuery(String.format(""String_Node_Str"",table),new String[0]);
    return c.getInt(0);
  }
 catch (  Exception e) {
    return -1;
  }
}","private int countRows(SQLiteDatabase database,String table){
  try {
    Cursor c=database.rawQuery(String.format(""String_Node_Str"",table),new String[0]);
    c.moveToFirst();
    return c.getInt(0);
  }
 catch (  Exception e) {
    return -1;
  }
}",0.9559748427672956
142363,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  if (advanced) {
    menu.removeItem(MODE_ADVANCED);
  }
 else {
    menu.removeItem(MODE_BASIC);
    menu.add(0,MODE_ADVANCED,0,""String_Node_Str"").setIcon(android.R.drawable.ic_menu_edit);
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  if (advanced) {
    if (!basicOn) {
      menu.removeItem(MODE_ADVANCED);
      menu.add(0,MODE_BASIC,0,""String_Node_Str"").setIcon(android.R.drawable.ic_menu_help);
      advancedOn=false;
      basicOn=true;
    }
  }
 else   if (!advancedOn) {
    menu.removeItem(MODE_BASIC);
    menu.add(0,MODE_ADVANCED,0,""String_Node_Str"").setIcon(android.R.drawable.ic_menu_edit);
    advancedOn=true;
    basicOn=false;
  }
  return true;
}",0.6602409638554216
142364,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (!upgradeMode) {
switch (item.getItemId()) {
case MODE_BASIC:
      advanced=false;
    advancedView.setVisibility(View.INVISIBLE);
  return true;
case MODE_ADVANCED:
advanced=true;
advancedView.setVisibility(View.VISIBLE);
mScanBarcodeButton.setVisibility(View.GONE);
installButton.setVisibility(View.VISIBLE);
installButton.setEnabled(true);
return true;
}
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (!upgradeMode) {
switch (item.getItemId()) {
case MODE_BASIC:
      advanced=false;
    advancedView.setVisibility(View.INVISIBLE);
  mScanBarcodeButton.setVisibility(View.VISIBLE);
return true;
case MODE_ADVANCED:
advanced=true;
advancedView.setVisibility(View.VISIBLE);
mScanBarcodeButton.setVisibility(View.INVISIBLE);
installButton.setVisibility(View.VISIBLE);
installButton.setEnabled(true);
return true;
}
}
return super.onOptionsItemSelected(item);
}",0.9428284854563692
142365,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  if (advanced) {
    if (!basicOn) {
      menu.removeItem(MODE_ADVANCED);
      menu.add(0,MODE_BASIC,0,""String_Node_Str"").setIcon(android.R.drawable.ic_menu_help);
      advancedOn=false;
      basicOn=true;
    }
  }
 else   if (!advancedOn) {
    menu.removeItem(MODE_BASIC);
    menu.add(0,MODE_ADVANCED,0,""String_Node_Str"").setIcon(android.R.drawable.ic_menu_edit);
    advancedOn=true;
    basicOn=false;
  }
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  manageIcons(menu,advanced);
  return true;
}",0.3699248120300752
142366,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == BARCODE_CAPTURE) {
    if (resultCode == Activity.RESULT_CANCELED) {
    }
 else     if (resultCode == Activity.RESULT_OK) {
      String result=data.getStringExtra(""String_Node_Str"");
      editProfileRef.setText(result);
      incomingRef=result;
      this.installButton.setVisibility(View.VISIBLE);
      mainMessage.setText(""String_Node_Str"");
      mScanBarcodeButton.setVisibility(View.GONE);
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == BARCODE_CAPTURE) {
    if (resultCode == Activity.RESULT_CANCELED) {
    }
 else     if (resultCode == Activity.RESULT_OK) {
      String result=data.getStringExtra(""String_Node_Str"");
      editProfileRef.setText(result);
      incomingRef=result;
      urlSet=true;
      this.installButton.setVisibility(View.VISIBLE);
      mainMessage.setText(""String_Node_Str"");
      mScanBarcodeButton.setVisibility(View.GONE);
    }
  }
}",0.983718937446444
142367,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (!upgradeMode) {
switch (item.getItemId()) {
case MODE_BASIC:
      advanced=false;
    advancedView.setVisibility(View.INVISIBLE);
  mScanBarcodeButton.setVisibility(View.VISIBLE);
return true;
case MODE_ADVANCED:
advanced=true;
advancedView.setVisibility(View.VISIBLE);
mScanBarcodeButton.setVisibility(View.INVISIBLE);
installButton.setVisibility(View.VISIBLE);
installButton.setEnabled(true);
return true;
}
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (!upgradeMode) {
switch (item.getItemId()) {
case MODE_BASIC:
      setModeToBasic();
    return true;
case MODE_ADVANCED:
  setModeToAdvanced();
return true;
}
}
return super.onOptionsItemSelected(item);
}",0.4555694618272841
142368,"public void loadFromStateDescription(SessionStateDescriptor descriptor){
  this.sessionStateRecordId=descriptor.getID();
  this.formRecordId=descriptor.getFormRecordId();
  descriptor.loadSession(this.session);
}","public void loadFromStateDescription(SessionStateDescriptor descriptor){
  this.reset();
  this.sessionStateRecordId=descriptor.getID();
  this.formRecordId=descriptor.getFormRecordId();
  descriptor.loadSession(this.session);
}",0.9636363636363636
142369,"private void startNextFetch() throws SessionUnavailableException {
  CommCareSession session=CommCareApplication._().getCurrentSession();
  String needed=session.getNeededData();
  String[] lastPopped=session.getPoppedStep();
  if (needed == null) {
    startFormEntry(CommCareApplication._().getCurrentSessionWrapper());
  }
 else   if (needed == CommCareSession.STATE_COMMAND_ID) {
    Intent i=new Intent(getApplicationContext(),MenuList.class);
    i.putExtra(CommCareSession.STATE_COMMAND_ID,session.getCommand());
    startActivityForResult(i,GET_COMMAND);
  }
 else   if (needed == CommCareSession.STATE_DATUM_VAL) {
    Intent i=new Intent(getApplicationContext(),EntitySelectActivity.class);
    i.putExtra(CommCareSession.STATE_COMMAND_ID,session.getCommand());
    if (lastPopped != null && CommCareSession.STATE_DATUM_VAL.equals(lastPopped[0])) {
      i.putExtra(EntitySelectActivity.EXTRA_ENTITY_KEY,lastPopped[1]);
    }
    startActivityForResult(i,GET_CASE);
  }
 else   if (needed == CommCareSession.STATE_DATUM_COMPUTED) {
    SessionDatum datum=session.getNeededDatum();
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    EvaluationContext ec=session.getEvaluationContext(new CommCareInstanceInitializer(session));
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      session.setXmlns(XPathFuncExpr.toString(form.eval(ec)));
      session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(ec)));
    }
    startNextFetch();
    return;
  }
}","private void startNextFetch() throws SessionUnavailableException {
  CommCareSession session=CommCareApplication._().getCurrentSession();
  String needed=session.getNeededData();
  String[] lastPopped=session.getPoppedStep();
  if (needed == null) {
    startFormEntry(CommCareApplication._().getCurrentSessionWrapper());
  }
 else   if (needed == CommCareSession.STATE_COMMAND_ID) {
    Intent i=new Intent(getApplicationContext(),MenuList.class);
    i.putExtra(CommCareSession.STATE_COMMAND_ID,session.getCommand());
    startActivityForResult(i,GET_COMMAND);
  }
 else   if (needed == CommCareSession.STATE_DATUM_VAL) {
    Intent i=new Intent(getApplicationContext(),EntitySelectActivity.class);
    i.putExtra(CommCareSession.STATE_COMMAND_ID,session.getCommand());
    if (lastPopped != null && CommCareSession.STATE_DATUM_VAL.equals(lastPopped[0])) {
      i.putExtra(EntitySelectActivity.EXTRA_ENTITY_KEY,lastPopped[2]);
    }
    startActivityForResult(i,GET_CASE);
  }
 else   if (needed == CommCareSession.STATE_DATUM_COMPUTED) {
    SessionDatum datum=session.getNeededDatum();
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    EvaluationContext ec=session.getEvaluationContext(new CommCareInstanceInitializer(session));
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      session.setXmlns(XPathFuncExpr.toString(form.eval(ec)));
      session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(ec)));
    }
    startNextFetch();
    return;
  }
}",0.999421965317919
142370,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.entity_select_layout);
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  session=CommCareApplication._().getCurrentSession();
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  setTitle(getString(R.string.app_name) + ""String_Node_Str"" + ""String_Node_Str"");
  selectDatum=session.getNeededDatum();
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  if (selectDatum.getLongDetail() != null && this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=getEntityFromID(this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    Intent i=getDetailIntent(entity);
    startActivityForResult(i,CONFIRM_SELECT);
  }
 else {
    refreshView();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.entity_select_layout);
  searchbox=(EditText)findViewById(R.id.searchbox);
  header=(LinearLayout)findViewById(R.id.entity_select_header);
  barcodeButton=(ImageButton)findViewById(R.id.barcodeButton);
  searchbox.addTextChangedListener(this);
  searchbox.requestFocus();
  session=CommCareApplication._().getCurrentSession();
  Vector<Entry> entries=session.getEntriesForCommand(session.getCommand());
  prototype=entries.elementAt(0);
  setTitle(getString(R.string.app_name) + ""String_Node_Str"" + ""String_Node_Str"");
  selectDatum=session.getNeededDatum();
  barcodeButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(""String_Node_Str"");
      try {
        startActivityForResult(i,BARCODE_FETCH);
      }
 catch (      ActivityNotFoundException anfe) {
        Toast noReader=Toast.makeText(EntitySelectActivity.this,""String_Node_Str"",Toast.LENGTH_LONG);
        noReader.show();
      }
    }
  }
);
  if (selectDatum.getLongDetail() != null && this.getIntent().hasExtra(EXTRA_ENTITY_KEY)) {
    TreeReference entity=getEntityFromID(this.getIntent().getStringExtra(EXTRA_ENTITY_KEY));
    if (entity != null) {
      Intent i=getDetailIntent(entity);
      startActivityForResult(i,CONFIRM_SELECT);
    }
 else {
      refreshView();
    }
  }
 else {
    refreshView();
  }
}",0.9695484774238712
142371,"public DeviceReport(CommCareApplication application){
  this.mContext=application;
  TelephonyManager mTelephonyManager=(TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
  String did=mTelephonyManager.getDeviceId();
  document=new Document();
  reportNode=document.createElement(XMLNS,""String_Node_Str"");
  document.addChild(Element.ELEMENT,reportNode);
  Element deviceId=reportNode.createElement(null,""String_Node_Str"");
  deviceId.addChild(Element.TEXT,did);
  reportNode.addChild(Element.ELEMENT,deviceId);
  Element appVersion=reportNode.createElement(null,""String_Node_Str"");
  appVersion.addChild(Element.TEXT,application.getCurrentVersionString());
  reportNode.addChild(Element.ELEMENT,appVersion);
  Element reportDate=reportNode.createElement(null,""String_Node_Str"");
  reportDate.addChild(Element.TEXT,DateUtils.formatDate(new Date(),DateUtils.FORMAT_ISO8601));
  reportNode.addChild(Element.ELEMENT,reportDate);
}","public DeviceReport(CommCareApplication application){
  this.mContext=application;
  String did=application.getPhoneId();
  document=new Document();
  reportNode=document.createElement(XMLNS,""String_Node_Str"");
  document.addChild(Element.ELEMENT,reportNode);
  Element deviceId=reportNode.createElement(null,""String_Node_Str"");
  deviceId.addChild(Element.TEXT,did);
  reportNode.addChild(Element.ELEMENT,deviceId);
  Element appVersion=reportNode.createElement(null,""String_Node_Str"");
  appVersion.addChild(Element.TEXT,application.getCurrentVersionString());
  reportNode.addChild(Element.ELEMENT,appVersion);
  Element reportDate=reportNode.createElement(null,""String_Node_Str"");
  reportDate.addChild(Element.TEXT,DateUtils.formatDate(new Date(),DateUtils.FORMAT_ISO8601));
  reportNode.addChild(Element.ELEMENT,reportDate);
}",0.904494382022472
142372,"private void startFormEntry(AndroidSessionWrapper state) throws SessionUnavailableException {
  try {
    if (state.getFormRecordId() == -1) {
      SessionStateDescriptor existing=state.searchForDuplicates();
      if (existing != null) {
        createAskUseOldDialog(state,existing);
        return;
      }
      state.commitStub();
    }
 else {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    FormRecord record=state.getFormRecord();
    formEntry(platform.getFormContentUri(record.getFormNamespace()),record);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(e);
  }
}","private void startFormEntry(AndroidSessionWrapper state) throws SessionUnavailableException {
  try {
    if (state.getFormRecordId() == -1) {
      SessionStateDescriptor existing=state.searchForDuplicates();
      if (existing != null && existing.getSessionDescriptor().contains(CommCareSession.STATE_DATUM_VAL)) {
        createAskUseOldDialog(state,existing);
        return;
      }
      state.commitStub();
    }
 else {
      Logger.log(""String_Node_Str"",""String_Node_Str"");
    }
    FormRecord record=state.getFormRecord();
    formEntry(platform.getFormContentUri(record.getFormNamespace()),record);
  }
 catch (  StorageFullException e) {
    throw new RuntimeException(e);
  }
}",0.9409961685823754
142373,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    setContentView(R.layout.entity_detail);
    next=(Button)findViewById(R.id.entity_select_button);
    next.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(EntityDetailActivity.this.getIntent());
        loadOutgoingIntent(i);
        setResult(RESULT_OK,i);
        finish();
      }
    }
);
    if (getIntent().getBooleanExtra(IS_DEAD_END,false)) {
      next.setText(""String_Node_Str"");
    }
    String passedCommand=getIntent().getStringExtra(CommCareSession.STATE_COMMAND_ID);
    Vector<Entry> entries=session.getEntriesForCommand(passedCommand == null ? session.getCommand() : passedCommand);
    prototype=entries.elementAt(0);
    factory=new NodeEntityFactory(session.getDetail(getIntent().getStringExtra(EntityDetailActivity.DETAIL_ID)),session.getEvaluationContext(new CommCareInstanceInitializer(session)));
    entity=factory.getEntity(CommCareApplication._().deserializeFromIntent(getIntent(),EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class));
    setTitle(getString(R.string.app_name) + ""String_Node_Str"" + ""String_Node_Str"");
    refreshView();
  }
 catch (  SessionUnavailableException sue) {
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    setContentView(R.layout.entity_detail);
    next=(Button)findViewById(R.id.entity_select_button);
    next.setOnClickListener(new OnClickListener(){
      public void onClick(      View v){
        Intent i=new Intent(EntityDetailActivity.this.getIntent());
        loadOutgoingIntent(i);
        setResult(RESULT_OK,i);
        finish();
      }
    }
);
    if (getIntent().getBooleanExtra(IS_DEAD_END,false)) {
      next.setText(""String_Node_Str"");
    }
    session=CommCareApplication._().getCurrentSession();
    String passedCommand=getIntent().getStringExtra(CommCareSession.STATE_COMMAND_ID);
    Vector<Entry> entries=session.getEntriesForCommand(passedCommand == null ? session.getCommand() : passedCommand);
    prototype=entries.elementAt(0);
    factory=new NodeEntityFactory(session.getDetail(getIntent().getStringExtra(EntityDetailActivity.DETAIL_ID)),session.getEvaluationContext(new CommCareInstanceInitializer(session)));
    entity=factory.getEntity(CommCareApplication._().deserializeFromIntent(getIntent(),EntityDetailActivity.CONTEXT_REFERENCE,TreeReference.class));
    setTitle(getString(R.string.app_name) + ""String_Node_Str"" + ""String_Node_Str"");
    refreshView();
  }
 catch (  SessionUnavailableException sue) {
  }
}",0.9785472337222432
142374,"public String createSessionDescriptor(CommCareSession session){
  String descriptor=""String_Node_Str"";
  for (  String[] step : session.getSteps()) {
    descriptor+=step[0] + ""String_Node_Str"";
    if (step[0] == CommCareSession.STATE_COMMAND_ID) {
      descriptor+=step[1] + ""String_Node_Str"";
    }
 else     if (step[0] == CommCareSession.STATE_DATUM_VAL || step[0] == CommCareSession.STATE_DATUM_COMPUTED) {
      descriptor+=step[1] + ""String_Node_Str"" + step[2]+ ""String_Node_Str"";
    }
  }
  return descriptor.trim();
}","private String createSessionDescriptor(CommCareSession session){
  String descriptor=""String_Node_Str"";
  for (  String[] step : session.getSteps()) {
    descriptor+=step[0] + ""String_Node_Str"";
    if (step[0] == CommCareSession.STATE_COMMAND_ID) {
      descriptor+=step[1] + ""String_Node_Str"";
    }
 else     if (step[0] == CommCareSession.STATE_DATUM_VAL || step[0] == CommCareSession.STATE_DATUM_COMPUTED) {
      descriptor+=step[1] + ""String_Node_Str"" + step[2]+ ""String_Node_Str"";
    }
  }
  return descriptor.trim();
}",0.9896128423040604
142375,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  currentActivity=this;
  setContentView(R.layout.login);
  login=(Button)findViewById(R.id.login_button);
  userLabel=(TextView)findViewById(R.id.text_username);
  passLabel=(TextView)findViewById(R.id.text_password);
  username=(EditText)findViewById(R.id.edit_username);
  password=(EditText)findViewById(R.id.edit_password);
  checkServer=(CheckBox)findViewById(R.id.checkserver);
  login.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (!checkServer.isChecked() && tryLocalLogin()) {
        return;
      }
      if (false) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        return;
      }
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(LoginActivity.this);
      String un=username.getText().toString();
      if (prefs.contains(""String_Node_Str"")) {
        un+=""String_Node_Str"" + prefs.getString(""String_Node_Str"",null);
      }
      dataPuller=new DataPullTask(un,password.getText().toString(),prefs.getString(""String_Node_Str"",LoginActivity.this.getString(R.string.ota_restore_url)),prefs.getString(""String_Node_Str"",LoginActivity.this.getString(R.string.key_server)),LoginActivity.this);
      dataPuller.setPullListener(LoginActivity.this);
      LoginActivity.this.showDialog(DIALOG_CHECKING_SERVER);
      dataPuller.execute();
    }
  }
);
  TextView versionDisplay=(TextView)findViewById(R.id.str_version);
  versionDisplay.setText(CommCareApplication._().getCurrentVersionString());
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  currentActivity=this;
  setContentView(R.layout.login);
  login=(Button)findViewById(R.id.login_button);
  userLabel=(TextView)findViewById(R.id.text_username);
  passLabel=(TextView)findViewById(R.id.text_password);
  username=(EditText)findViewById(R.id.edit_username);
  password=(EditText)findViewById(R.id.edit_password);
  checkServer=(CheckBox)findViewById(R.id.checkserver);
  login.setOnClickListener(new OnClickListener(){
    public void onClick(    View arg0){
      if (!checkServer.isChecked() && tryLocalLogin()) {
        return;
      }
      if (false) {
        Toast.makeText(LoginActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        return;
      }
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(LoginActivity.this);
      String un=getUsername();
      if (prefs.contains(""String_Node_Str"")) {
        un+=""String_Node_Str"" + prefs.getString(""String_Node_Str"",null);
      }
      dataPuller=new DataPullTask(un,password.getText().toString(),prefs.getString(""String_Node_Str"",LoginActivity.this.getString(R.string.ota_restore_url)),prefs.getString(""String_Node_Str"",LoginActivity.this.getString(R.string.key_server)),LoginActivity.this);
      dataPuller.setPullListener(LoginActivity.this);
      LoginActivity.this.showDialog(DIALOG_CHECKING_SERVER);
      dataPuller.execute();
    }
  }
);
  TextView versionDisplay=(TextView)findViewById(R.id.str_version);
  versionDisplay.setText(CommCareApplication._().getCurrentVersionString());
}",0.9928057553956836
142376,"private boolean tryLocalLogin(){
  try {
    String passwd=password.getText().toString();
    for (    User u : storage()) {
      String hash=u.getPassword();
      if (hash.contains(""String_Node_Str"")) {
        String alg=""String_Node_Str"";
        String salt=hash.split(""String_Node_Str"")[1];
        String check=hash.split(""String_Node_Str"")[2];
        MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
        BigInteger number=new BigInteger(1,md.digest((salt + passwd).getBytes()));
        String hashed=number.toString(16);
        while (hashed.length() < check.length()) {
          hashed=""String_Node_Str"" + hashed;
        }
        if (hash.equals(alg + ""String_Node_Str"" + salt+ ""String_Node_Str""+ hashed)) {
          byte[] key=CryptUtil.unWrapKey(u.getWrappedKey(),passwd);
          u.setCachedPwd(passwd);
          logIn(u,key);
          return true;
        }
      }
 else {
        if (u.getPassword().equals(passwd)) {
          byte[] key=CryptUtil.unWrapKey(u.getWrappedKey(),passwd);
          u.setCachedPwd(passwd);
          logIn(u,key);
          return true;
        }
      }
    }
    return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}","private boolean tryLocalLogin(){
  try {
    String passwd=password.getText().toString();
    for (    User u : storage()) {
      if (!u.getUsername().equals(getUsername())) {
        continue;
      }
      String hash=u.getPassword();
      if (hash.contains(""String_Node_Str"")) {
        String alg=""String_Node_Str"";
        String salt=hash.split(""String_Node_Str"")[1];
        String check=hash.split(""String_Node_Str"")[2];
        MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
        BigInteger number=new BigInteger(1,md.digest((salt + passwd).getBytes()));
        String hashed=number.toString(16);
        while (hashed.length() < check.length()) {
          hashed=""String_Node_Str"" + hashed;
        }
        if (hash.equals(alg + ""String_Node_Str"" + salt+ ""String_Node_Str""+ hashed)) {
          byte[] key=CryptUtil.unWrapKey(u.getWrappedKey(),passwd);
          u.setCachedPwd(passwd);
          logIn(u,key);
          return true;
        }
      }
 else {
        if (u.getPassword().equals(passwd)) {
          byte[] key=CryptUtil.unWrapKey(u.getWrappedKey(),passwd);
          u.setCachedPwd(passwd);
          logIn(u,key);
          return true;
        }
      }
    }
    return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}",0.9692913385826772
142377,"void doBindService(final byte[] key,final User user){
  mConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName className,    IBinder service){
      mBoundService=((CommCareSessionService.LocalBinder)service).getService();
      mBoundService.logIn(key,user);
      if (database != null && database.isOpen()) {
        database.close();
      }
      CursorFactory factory=new CommCareDBCursorFactory(CommCareApplication.this.encryptedModels()){
        protected Cipher getReadCipher(){
          return mBoundService.getDecrypter();
        }
      }
;
      database=new CommCareOpenHelper(CommCareApplication.this,factory).getWritableDatabase();
      if (user != null) {
        attachCallListener(user);
      }
    }
    public void onServiceDisconnected(    ComponentName className){
      mBoundService=null;
    }
  }
;
  bindService(new Intent(this,CommCareSessionService.class),mConnection,Context.BIND_AUTO_CREATE);
  mIsBound=true;
}","void doBindService(final byte[] key,final User user){
  mConnection=new ServiceConnection(){
    public void onServiceConnected(    ComponentName className,    IBinder service){
      mBoundService=((CommCareSessionService.LocalBinder)service).getService();
synchronized (mBoundService) {
        mBoundService.logIn(key,user);
      }
      mIsBound=true;
      mIsBinding=false;
      if (database != null && database.isOpen()) {
        database.close();
      }
      CursorFactory factory=new CommCareDBCursorFactory(CommCareApplication.this.encryptedModels()){
        protected Cipher getReadCipher(){
          return mBoundService.getDecrypter();
        }
      }
;
      database=new CommCareOpenHelper(CommCareApplication.this,factory).getWritableDatabase();
      if (user != null) {
        attachCallListener(user);
      }
    }
    public void onServiceDisconnected(    ComponentName className){
      mBoundService=null;
    }
  }
;
  bindService(new Intent(this,CommCareSessionService.class),mConnection,Context.BIND_AUTO_CREATE);
  mIsBinding=true;
}",0.953216374269006
142378,"public SecretKey createNewSymetricKey(){
  return mBoundService.createNewSymetricKey();
}","public SecretKey createNewSymetricKey(){
synchronized (mBoundService) {
    return mBoundService.createNewSymetricKey();
  }
}",0.827906976744186
142379,"public void onServiceConnected(ComponentName className,IBinder service){
  mBoundService=((CommCareSessionService.LocalBinder)service).getService();
  mBoundService.logIn(key,user);
  if (database != null && database.isOpen()) {
    database.close();
  }
  CursorFactory factory=new CommCareDBCursorFactory(CommCareApplication.this.encryptedModels()){
    protected Cipher getReadCipher(){
      return mBoundService.getDecrypter();
    }
  }
;
  database=new CommCareOpenHelper(CommCareApplication.this,factory).getWritableDatabase();
  if (user != null) {
    attachCallListener(user);
  }
}","public void onServiceConnected(ComponentName className,IBinder service){
  mBoundService=((CommCareSessionService.LocalBinder)service).getService();
synchronized (mBoundService) {
    mBoundService.logIn(key,user);
  }
  mIsBound=true;
  mIsBinding=false;
  if (database != null && database.isOpen()) {
    database.close();
  }
  CursorFactory factory=new CommCareDBCursorFactory(CommCareApplication.this.encryptedModels()){
    protected Cipher getReadCipher(){
      return mBoundService.getDecrypter();
    }
  }
;
  database=new CommCareOpenHelper(CommCareApplication.this,factory).getWritableDatabase();
  if (user != null) {
    attachCallListener(user);
  }
}",0.9412698412698411
142380,"public CommCareSessionService getSession() throws SessionUnavailableException {
  if (mIsBound) {
    return mBoundService;
  }
 else {
    throw new SessionUnavailableException();
  }
}","public CommCareSessionService getSession() throws SessionUnavailableException {
  while (mIsBinding)   ;
  if (mIsBound) {
synchronized (mBoundService) {
      return mBoundService;
    }
  }
 else {
    throw new SessionUnavailableException();
  }
}",0.8532110091743119
142381,"protected Integer doInBackground(Void... params){
  boolean loginNeeded=true;
  try {
    loginNeeded=!CommCareApplication._().getSession().isLoggedIn();
  }
 catch (  SessionUnavailableException sue) {
  }
  if (loginNeeded) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(c);
    if (""String_Node_Str"".equals(prefs.getString(""String_Node_Str"",""String_Node_Str""))) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",new Date().getTime());
      e.commit();
    }
  }
  CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c){
    @Override public void reportProgress(    int progress){
      DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
    }
  }
;
  DefaultHttpClient client=new DefaultHttpClient();
  client.getCredentialsProvider().setCredentials(AuthScope.ANY,credentials);
  try {
    SecretKeySpec spec=null;
    if (loginNeeded) {
      spec=generateTestKey();
      if (spec == null) {
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      byte[] wrappedKey=CryptUtil.wrapKey(spec,credentials.getPassword());
      factory.initUserParser(wrappedKey);
    }
    HttpResponse response=client.execute(new HttpGet(server));
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode == 401) {
      return AUTH_FAILED;
    }
    if (responseCode >= 200 && responseCode < 300) {
      this.publishProgress(PROGRESS_AUTHED,0);
      if (loginNeeded) {
        CommCareApplication._().logIn(spec.getEncoded(),null);
      }
      int dataSizeGuess=-1;
      if (response.containsHeader(""String_Node_Str"")) {
        String length=response.getFirstHeader(""String_Node_Str"").getValue();
        try {
          dataSizeGuess=Integer.parseInt(length);
        }
 catch (        Exception e) {
        }
      }
      BitCache cache=BitCacheFactory.getCache(c,dataSizeGuess);
      cache.initializeCache();
      try {
        OutputStream cacheOut=cache.getCacheStream();
        AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),cacheOut);
        InputStream cacheIn=cache.retrieveCache();
        readInput(cacheIn,factory);
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 catch (      InvalidStructureException e) {
        e.printStackTrace();
        return BAD_DATA;
      }
catch (      XmlPullParserException e) {
        e.printStackTrace();
        return BAD_DATA;
      }
catch (      UnfullfilledRequirementsException e) {
        e.printStackTrace();
      }
catch (      IllegalStateException e) {
        e.printStackTrace();
      }
 finally {
        cache.release();
      }
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  UnknownHostException e) {
    this.publishProgress(PROGRESS_DONE);
    return UNREACHABLE_HOST;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SessionUnavailableException sue) {
  }
  this.publishProgress(PROGRESS_DONE);
  return UNKNOWN_FAILURE;
}","protected Integer doInBackground(Void... params){
  boolean loginNeeded=true;
  try {
    loginNeeded=!CommCareApplication._().getSession().isLoggedIn();
  }
 catch (  SessionUnavailableException sue) {
  }
  if (loginNeeded) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(c);
    if (""String_Node_Str"".equals(prefs.getString(""String_Node_Str"",""String_Node_Str""))) {
      Editor e=prefs.edit();
      e.putLong(""String_Node_Str"",new Date().getTime());
      e.commit();
    }
  }
  CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(c){
    @Override public void reportProgress(    int progress){
      DataPullTask.this.publishProgress(PROGRESS_AUTHED,progress);
    }
  }
;
  DefaultHttpClient client=new DefaultHttpClient();
  client.getCredentialsProvider().setCredentials(AuthScope.ANY,credentials);
  try {
    SecretKeySpec spec=null;
    if (loginNeeded) {
      spec=generateTestKey();
      if (spec == null) {
        this.publishProgress(PROGRESS_DONE);
        return UNKNOWN_FAILURE;
      }
      byte[] wrappedKey=CryptUtil.wrapKey(spec,credentials.getPassword());
      factory.initUserParser(wrappedKey);
    }
    HttpResponse response=client.execute(new HttpGet(server));
    int responseCode=response.getStatusLine().getStatusCode();
    if (responseCode == 401) {
      return AUTH_FAILED;
    }
    if (responseCode >= 200 && responseCode < 300) {
      this.publishProgress(PROGRESS_AUTHED,0);
      if (loginNeeded) {
        CommCareApplication._().logIn(spec.getEncoded(),null);
      }
      int dataSizeGuess=-1;
      if (response.containsHeader(""String_Node_Str"")) {
        String length=response.getFirstHeader(""String_Node_Str"").getValue();
        try {
          dataSizeGuess=Integer.parseInt(length);
        }
 catch (        Exception e) {
        }
      }
      BitCache cache=BitCacheFactory.getCache(c,dataSizeGuess);
      cache.initializeCache();
      try {
        OutputStream cacheOut=cache.getCacheStream();
        AndroidStreamUtil.writeFromInputToOutput(response.getEntity().getContent(),cacheOut);
        InputStream cacheIn=cache.retrieveCache();
        readInput(cacheIn,factory);
        this.publishProgress(PROGRESS_DONE);
        return DOWNLOAD_SUCCESS;
      }
 catch (      InvalidStructureException e) {
        e.printStackTrace();
        return BAD_DATA;
      }
catch (      XmlPullParserException e) {
        e.printStackTrace();
        return BAD_DATA;
      }
catch (      UnfullfilledRequirementsException e) {
        e.printStackTrace();
      }
catch (      IllegalStateException e) {
        e.printStackTrace();
      }
 finally {
        cache.release();
      }
    }
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  UnknownHostException e) {
    this.publishProgress(PROGRESS_DONE);
    return UNREACHABLE_HOST;
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SessionUnavailableException sue) {
    sue.printStackTrace();
  }
  this.publishProgress(PROGRESS_DONE);
  return UNKNOWN_FAILURE;
}",0.995606183889341
142382,"private void refresh(){
  this.removeAllViews();
  TableLayout table=new TableLayout(this.getContext());
  int days=data.days().length;
  int rows=(int)Math.ceil(days / TABLE_LENGTH);
  dayViews=new View[days];
  table.setShrinkAllColumns(true);
  table.setStretchAllColumns(true);
  tRows=new TableRow[rows];
  for (int i=0; i < tRows.length; ++i) {
    tRows[i]=new TableRow(this.getContext());
  }
  Calendar c=Calendar.getInstance();
  c.setTime(data.anchor());
  c.roll(Calendar.DAY_OF_YEAR,-(data.days().length - 1));
  int currentRow=0;
  for (int i=0; i < days; ++i) {
    DotsDay day=data.days()[i];
    TableRow.LayoutParams dayParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    dayParams.setMargins(1,1,1,1);
    View dayView=getDayView(c,day,i);
    tRows[currentRow].addView(dayView);
    dayViews[i]=dayView;
    if (i % TABLE_LENGTH == TABLE_LENGTH - 1) {
      currentRow=currentRow + 1;
    }
    c.roll(Calendar.DAY_OF_YEAR,1);
  }
  for (int i=0; i < tRows.length; ++i) {
    table.addView(tRows[i]);
  }
  Button done=new Button(this.getContext());
  done.setId(666);
  done.setText(""String_Node_Str"");
  done.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      listener.doneWithDOTS();
    }
  }
);
  RelativeLayout topPane=new RelativeLayout(this.getContext());
  LayoutParams params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.ABOVE,done.getId());
  params.addRule(RelativeLayout.ALIGN_PARENT_TOP,RelativeLayout.TRUE);
  this.addView(topPane,params);
  table.setGravity(Gravity.CENTER_VERTICAL);
  params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.CENTER_VERTICAL,RelativeLayout.TRUE);
  topPane.addView(table,params);
  params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,RelativeLayout.TRUE);
  this.addView(done,params);
}","private void refresh(){
  this.removeAllViews();
  TableLayout table=new TableLayout(this.getContext());
  int days=data.days().length;
  int rows=(int)Math.ceil(days / TABLE_LENGTH);
  dayViews=new View[days];
  table.setShrinkAllColumns(true);
  table.setStretchAllColumns(true);
  tRows=new TableRow[rows];
  for (int i=0; i < tRows.length; ++i) {
    tRows[i]=new TableRow(this.getContext());
  }
  Calendar c=Calendar.getInstance();
  c.setTime(data.anchor());
  c.add(Calendar.DATE,-(data.days().length - 1));
  int currentRow=0;
  for (int i=0; i < days; ++i) {
    DotsDay day=data.days()[i];
    TableRow.LayoutParams dayParams=new TableRow.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
    dayParams.setMargins(1,1,1,1);
    View dayView=getDayView(c,day,i);
    tRows[currentRow].addView(dayView);
    dayViews[i]=dayView;
    if (i % TABLE_LENGTH == TABLE_LENGTH - 1) {
      currentRow=currentRow + 1;
    }
    c.add(Calendar.DATE,1);
  }
  for (int i=0; i < tRows.length; ++i) {
    table.addView(tRows[i]);
  }
  Button done=new Button(this.getContext());
  done.setId(666);
  done.setText(""String_Node_Str"");
  done.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      listener.doneWithDOTS();
    }
  }
);
  RelativeLayout topPane=new RelativeLayout(this.getContext());
  LayoutParams params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.ABOVE,done.getId());
  params.addRule(RelativeLayout.ALIGN_PARENT_TOP,RelativeLayout.TRUE);
  this.addView(topPane,params);
  table.setGravity(Gravity.CENTER_VERTICAL);
  params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.CENTER_VERTICAL,RelativeLayout.TRUE);
  topPane.addView(table,params);
  params=new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT);
  params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,RelativeLayout.TRUE);
  this.addView(done,params);
}",0.9910313901345292
142383,"public Referral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  Date followup=created;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText().trim();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText().trim();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        Referral pr=new Referral((String)s,created,refId,caseId,followup);
        commit(pr);
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      Referral r=retrieve(refId,refType);
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText().trim();
        r.close();
        commit(r);
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}","public Referral parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  this.nextTag(""String_Node_Str"");
  String refId=parser.nextText().trim();
  Date followup=created;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String followupDate=parser.nextText().trim();
      followup=DateUtils.parseDate(followupDate);
    }
    if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String referralTypes=parser.nextText().trim();
      for (      Object s : DateUtils.split(referralTypes,""String_Node_Str"",true)) {
        Referral pr=new Referral((String)s,created,refId,caseId,followup);
        Referral r=retrieve(refId,(String)s);
        if (r != null) {
          pr.setID(r.getID());
        }
        commit(pr);
      }
      if (this.nextTagInBlock(""String_Node_Str"")) {
        throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      this.getNextTagInBlock(""String_Node_Str"");
      checkNode(""String_Node_Str"");
      String refType=parser.nextText().trim();
      Referral r=retrieve(refId,refType);
      r.setDateDue(followup);
      if (this.nextTagInBlock(""String_Node_Str"")) {
        String dateClosed=parser.nextText().trim();
        r.close();
        commit(r);
        if (this.nextTagInBlock(""String_Node_Str"")) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
    }
  }
  return null;
}",0.9661631419939576
142384,"public static Screen load(String screenClassName){
  screenClassName=""String_Node_Str"" + screenClassName;
  Screen newScreen=null;
  if (!screens.containsKey(screenClassName)) {
    try {
      Class<?> screenClass=Class.forName(screenClassName);
      Constructor<?> constructor=screenClass.getConstructor(Game.class);
      newScreen=(Screen)constructor.newInstance(game);
      screens.put(screenClassName,newScreen);
    }
 catch (    InvocationTargetException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
catch (    NoSuchMethodException ex) {
    }
catch (    ClassNotFoundException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
catch (    InstantiationException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
catch (    IllegalAccessException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
  }
 else {
    newScreen=screens.get(screenClassName);
  }
  if (currentScreen != null) {
    currentScreen.dispose();
  }
  currentScreen=newScreen;
  return currentScreen;
}","public static Screen load(String screenClassName){
  screenClassName=""String_Node_Str"" + screenClassName;
  Screen newScreen=null;
  if (!screens.containsKey(screenClassName)) {
    try {
      Class<?> screenClass=Class.forName(screenClassName);
      Constructor<?> constructor=screenClass.getConstructor(Game.class);
      newScreen=(Screen)constructor.newInstance(game);
      screens.put(screenClassName,newScreen);
    }
 catch (    InvocationTargetException ex) {
      System.err.println(ex.getMessage() + ""String_Node_Str"");
    }
catch (    NoSuchMethodException ex) {
    }
catch (    ClassNotFoundException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
catch (    InstantiationException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
catch (    IllegalAccessException ex) {
      System.err.println(ex + ""String_Node_Str"");
    }
  }
 else {
    newScreen=screens.get(screenClassName);
  }
  if (currentScreen != null) {
    currentScreen.dispose();
  }
  currentScreen=newScreen;
  return currentScreen;
}",0.9937649880095925
142385,"@Override public Vector<Graphic> load(DataInputStream file) throws IOException {
  Vector<Graphic> inits=new Vector<Graphic>();
  try {
    file.skipBytes(4);
    int numGraphics=Util.leShort(file.readShort());
    file.skipBytes(2);
    inits.setSize(numGraphics + 1);
    inits.setElementAt(new Graphic(0,0,0,0,0,0,0,new int[0],0),0);
    int grh=Util.leShort(file.readShort());
    file.skipBytes(2);
    while (grh > 0) {
      int fileNum=0, sX=0, sY=0, numFrames, pixelWidth, pixelHeight, frames[]=new int[0];
      float speed=0.0f, tileWidth, tileHeight;
      numFrames=Util.leShort(file.readShort());
      if (numFrames > 1) {
        frames=new int[numFrames];
        for (int j=0; j < numFrames; j++) {
          frames[j]=Util.leShort(file.readShort());
          file.skipBytes(2);
          if (frames[j] <= 0)           throw new IOException(""String_Node_Str"" + frames[j]);
        }
        file.skipBytes(4);
        speed=(numFrames * 1000) / 60;
        if (speed <= 0)         throw new IOException(""String_Node_Str"");
        pixelWidth=inits.get(frames[0]).getPixelWidth();
        if (pixelWidth <= 0)         throw new IOException(""String_Node_Str"");
        pixelHeight=inits.get(frames[0]).getPixelHeight();
        if (pixelHeight <= 0)         throw new IOException(""String_Node_Str"");
        tileWidth=inits.get(frames[0]).getTileWidth();
        if (tileWidth <= 0)         throw new IOException(""String_Node_Str"");
        tileHeight=inits.get(frames[0]).getTileHeight();
        if (tileHeight <= 0)         throw new IOException(""String_Node_Str"");
      }
 else {
        fileNum=Util.leShort(file.readShort());
        file.skipBytes(2);
        if (fileNum <= 0)         throw new IOException(""String_Node_Str"");
        sX=Util.leShort(file.readShort());
        if (sX < 0)         throw new IOException(""String_Node_Str"");
        sY=Util.leShort(file.readShort());
        if (sY < 0)         throw new IOException(""String_Node_Str"");
        pixelWidth=Util.leShort(file.readShort());
        if (pixelWidth <= 0)         throw new IOException(""String_Node_Str"");
        pixelHeight=Util.leShort(file.readShort());
        if (pixelHeight <= 0)         throw new IOException(""String_Node_Str"");
        tileWidth=(float)pixelWidth / Tile.TILE_PIXEL_WIDTH;
        tileHeight=(float)pixelHeight / Tile.TILE_PIXEL_HEIGHT;
      }
      inits.setElementAt(new Graphic(sX,sY,fileNum,pixelWidth,pixelHeight,tileWidth,tileHeight,frames,speed),grh);
      grh=Util.leShort(file.readShort());
      file.skipBytes(2);
    }
  }
 catch (  EOFException ex) {
    return inits;
  }
  return null;
}","@Override public Vector<Graphic> load(DataInputStream file) throws IOException {
  Vector<Graphic> inits=new Vector<Graphic>();
  file.skipBytes(4);
  int numGraphics=Util.leShort(file.readShort());
  file.skipBytes(2);
  inits.setSize(numGraphics + 1);
  inits.setElementAt(new Graphic(0,0,0,0,0,0,0,new int[0],0),0);
  int grh=Util.leShort(file.readShort());
  file.skipBytes(2);
  try {
    while (grh > 0) {
      int fileNum=0, sX=0, sY=0, numFrames, pixelWidth, pixelHeight, frames[]=new int[0];
      float speed=0.0f, tileWidth, tileHeight;
      numFrames=Util.leShort(file.readShort());
      if (numFrames > 1) {
        frames=new int[numFrames];
        for (int j=0; j < numFrames; j++) {
          frames[j]=Util.leShort(file.readShort());
          file.skipBytes(2);
          if (frames[j] <= 0)           throw new IOException(""String_Node_Str"" + frames[j]);
        }
        file.skipBytes(4);
        speed=(numFrames * 1000) / 60;
        if (speed <= 0)         throw new IOException(""String_Node_Str"");
        pixelWidth=inits.get(frames[0]).getPixelWidth();
        if (pixelWidth <= 0)         throw new IOException(""String_Node_Str"");
        pixelHeight=inits.get(frames[0]).getPixelHeight();
        if (pixelHeight <= 0)         throw new IOException(""String_Node_Str"");
        tileWidth=inits.get(frames[0]).getTileWidth();
        if (tileWidth <= 0)         throw new IOException(""String_Node_Str"");
        tileHeight=inits.get(frames[0]).getTileHeight();
        if (tileHeight <= 0)         throw new IOException(""String_Node_Str"");
      }
 else {
        fileNum=Util.leShort(file.readShort());
        file.skipBytes(2);
        if (fileNum <= 0)         throw new IOException(""String_Node_Str"");
        sX=Util.leShort(file.readShort());
        if (sX < 0)         throw new IOException(""String_Node_Str"");
        sY=Util.leShort(file.readShort());
        if (sY < 0)         throw new IOException(""String_Node_Str"");
        pixelWidth=Util.leShort(file.readShort());
        if (pixelWidth <= 0)         throw new IOException(""String_Node_Str"");
        pixelHeight=Util.leShort(file.readShort());
        if (pixelHeight <= 0)         throw new IOException(""String_Node_Str"");
        tileWidth=(float)pixelWidth / Tile.TILE_PIXEL_WIDTH;
        tileHeight=(float)pixelHeight / Tile.TILE_PIXEL_HEIGHT;
      }
      inits.setElementAt(new Graphic(sX,sY,fileNum,pixelWidth,pixelHeight,tileWidth,tileHeight,frames,speed),grh);
      grh=Util.leShort(file.readShort());
      file.skipBytes(2);
    }
  }
 catch (  EOFException ex) {
    return inits;
  }
  return null;
}",0.9942878903274944
142386,"@Override public Map loadMap(String map){
  Reader<Map> reader=new Reader<Map>();
  MapLoader loader=new MapLoader();
  return reader.read(Game.GAME_MAPS_PATH + map + ""String_Node_Str"",loader);
}","@Override public Map loadMap(String map){
  Reader<Map> reader=new Reader<Map>();
  MapLoader loader=new MapLoader();
  return reader.read(Game.GAME_MAPS_PATH + ""String_Node_Str"" + map+ ""String_Node_Str"",loader);
}",0.9486552567237164
142387,"@Override public void place(){
  float offsetCounterX=0.0f, offsetCounterY=0.0f;
  if (this.mNextX != 0) {
    offsetCounterX=this.mNextX * this.mSpeed * this.mDeltaTime;
    this.mX+=offsetCounterX;
    if (this.mNextX == 1) {
      if (this.mX >= (this.mUserPosX) * TILE_PIXEL_WIDTH) {
        this.updateUserPos();
        this.mMoving=false;
        this.mNextX=0;
      }
    }
 else     if (this.mNextX == -1) {
      if (this.mX <= (this.mUserPosX) * TILE_PIXEL_WIDTH) {
        this.updateUserPos();
        this.mMoving=false;
        this.mNextX=0;
      }
    }
  }
  if (this.mNextY != 0) {
    offsetCounterY=this.mNextY * this.mSpeed * this.mDeltaTime;
    this.mY+=offsetCounterY;
    if (this.mNextY == 1) {
      if (this.mY >= (this.mUserPosY) * TILE_PIXEL_HEIGHT) {
        this.updateUserPos();
        this.mMoving=false;
        this.mNextY=0;
      }
    }
 else     if (this.mNextY == -1) {
      if (this.mY <= (this.mUserPosY) * TILE_PIXEL_HEIGHT) {
        this.updateUserPos();
        this.mMoving=false;
        this.mNextY=0;
      }
    }
  }
  this.updateLight(this.mX,this.mY);
}","@Override public void place(){
  float offsetCounterX=0.0f, offsetCounterY=0.0f;
  offsetCounterX=this.mNextX * this.mSpeed * this.mDeltaTime;
  this.mX+=offsetCounterX;
  offsetCounterY=this.mNextY * this.mSpeed * this.mDeltaTime;
  this.mY+=offsetCounterY;
  if (this.mNextX == 1) {
    if (this.mX >= (this.mUserPosX) * TILE_PIXEL_WIDTH) {
      this.updateUserPos();
      this.mMoving=false;
      this.mNextX=0;
    }
  }
 else   if (this.mNextX == -1) {
    if (this.mX <= (this.mUserPosX) * TILE_PIXEL_WIDTH) {
      this.updateUserPos();
      this.mMoving=false;
      this.mNextX=0;
    }
  }
  if (this.mNextY == 1) {
    if (this.mY >= (this.mUserPosY) * TILE_PIXEL_HEIGHT) {
      this.updateUserPos();
      this.mMoving=false;
      this.mNextY=0;
    }
  }
 else   if (this.mNextY == -1) {
    if (this.mY <= (this.mUserPosY) * TILE_PIXEL_HEIGHT) {
      this.updateUserPos();
      this.mMoving=false;
      this.mNextY=0;
    }
  }
  this.updateLight(this.mX,this.mY);
}",0.8487155090390105
142388,"public void initEngine(){
  this.mWorld=new World(new Vector2(),true);
  this.mDebugRenderer=new Box2DDebugRenderer();
  this.mDebugRenderer.setDrawBodies(false);
  RayHandler.setGammaCorrection(true);
  RayHandler.useDiffuseLight(true);
  this.mRayHandler=new RayHandler(this.mWorld);
  this.mRayHandler.setCulling(true);
  this.mRayHandler.setBlurNum(5);
  this.setLightHandler(new LightHandler(this.mGame));
}","public void initEngine(){
  this.mWorld=new World(new Vector2(),true);
  this.mDebugRenderer=new Box2DDebugRenderer();
  this.mDebugRenderer.setDrawBodies(false);
  RayHandler.setGammaCorrection(true);
  RayHandler.useDiffuseLight(true);
  this.mRayHandler=new RayHandler(this.mWorld);
  this.mRayHandler.setCulling(true);
  this.mRayHandler.setBlurNum(5);
  this.mLightHandler=new LightHandler(this.mGame);
}",0.9914738124238732
142389,"public int createLight(float x,float y,Color pColor,float pSize){
  int index=this.mLights.size() + 1;
  this.mLights.put(index,new PointLight(this.mGame.getEngine().getRayHandler(),DEFAULT_NUM_RAYS,pColor,pSize,x - (TILE_PIXEL_WIDTH / 2f),y - (TILE_PIXEL_HEIGHT / 2f)));
  return index;
}","public int createLight(Light pLight){
  int index=this.mLights.size() + 1;
  this.mLights.put(index,pLight);
  return index;
}",0.563855421686747
142390,"@Override public void update(float dt){
  Gdx.graphics.setTitle(""String_Node_Str"" + String.valueOf(Gdx.graphics.getFramesPerSecond() + ""String_Node_Str"" + map+ ""String_Node_Str""+ this.mGame.getCharacterHandler().getPlayer().getUserPosX()+ ""String_Node_Str""+ this.mGame.getCharacterHandler().getPlayer().getUserPosY()));
  if (Gdx.input.isKeyPressed(Input.Keys.UP)) {
    this.mGame.getCharacterHandler().getPlayer().moveUp();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) {
    this.mGame.getCharacterHandler().getPlayer().moveLeft();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) {
    this.mGame.getCharacterHandler().getPlayer().moveDown();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {
    this.mGame.getCharacterHandler().getPlayer().moveRight();
  }
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  Gdx.gl.glEnable(GL20.GL_BLEND);
  Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE);
  this.mGame.getSpriteBatch().begin();
  this.mGame.getSpriteBatch().setProjectionMatrix(this.mGame.getCamera().combined);
  this.mGame.getCamera().update();
  this.mGame.getEngine().update(dt);
  this.mGame.getSpriteBatch().end();
  this.mGame.getEngine().updatePhysics(dt);
}","@Override public void update(float dt){
  Gdx.graphics.setTitle(""String_Node_Str"" + String.valueOf(Gdx.graphics.getFramesPerSecond() + ""String_Node_Str"" + map+ ""String_Node_Str""+ this.mGame.getCharacterHandler().getPlayer().getUserPosX()+ ""String_Node_Str""+ this.mGame.getCharacterHandler().getPlayer().getUserPosY()));
  if (Gdx.input.isKeyPressed(Input.Keys.UP)) {
    this.mGame.getCharacterHandler().getPlayer().moveUp();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) {
    this.mGame.getCharacterHandler().getPlayer().moveLeft();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) {
    this.mGame.getCharacterHandler().getPlayer().moveDown();
  }
  if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {
    this.mGame.getCharacterHandler().getPlayer().moveRight();
  }
  Gdx.gl.glClearColor(0,0,0,1);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  Gdx.gl.glEnable(GL20.GL_BLEND);
  Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE);
  this.mGame.getSpriteBatch().setProjectionMatrix(this.mGame.getCamera().combined);
  this.mGame.getCamera().update();
  this.mGame.getSpriteBatch().begin();
  this.mGame.getEngine().update(dt);
  this.mGame.getSpriteBatch().end();
  this.mGame.getSpriteBatch().setProjectionMatrix(this.mGame.getCamera().combined);
  this.mGame.getCamera().update();
  this.mGame.getEngine().updatePhysics(dt);
}",0.8920298390263055
142391,"/** 
 * This method returns the contents of the provided file as byte array. Null is returned iff file can not be found or is longer than Integer.MAX_VALUE. 
 * @param fileName the file to be read
 * @return the contents of the file to be read
 */
public static byte[] readFromFile(String fileName){
  RandomAccessFile raf=null;
  try {
    raf=new RandomAccessFile(fileName,""String_Node_Str"");
    int length;
    long lengthLong=raf.length();
    if (lengthLong > Integer.MAX_VALUE) {
      raf.close();
      return null;
    }
 else {
      length=(int)lengthLong;
    }
    byte[] file=new byte[length];
    raf.readFully(file);
    raf.close();
    return file;
  }
 catch (  FileNotFoundException e) {
    System.out.println(e.getMessage());
    return null;
  }
catch (  IOException e) {
    return null;
  }
 finally {
    if (raf != null) {
      try {
        raf.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","/** 
 * This method returns the contents of the provided file as byte array. Null is returned iff file can not be found or is longer than Integer.MAX_VALUE. 
 * @param fileName the file to be read
 * @return the contents of the file to be read
 */
public static byte[] readFromFile(String fileName){
  try {
    return Files.readAllBytes(Paths.get(fileName));
  }
 catch (  IOException e) {
    BasicLogger.logException(PersonalizationFileHelper.class,e);
    return null;
  }
}",0.5126760563380282
142392,"/** 
 * (Recursively) search DF (identifed by DF name)
 * @param df
 * @param dfIdentifier
 * @return
 * @throws FileNotFoundException 
 */
private CardFile getFileForName(DedicatedFile df,DedicatedFileIdentifier dfIdentifier) throws FileNotFoundException {
  if (dfIdentifier.matches(df)) {
    return df;
  }
  for (  CardObject curChild : df.getChildren()) {
    if (curChild instanceof DedicatedFile) {
      try {
        return getFileForName((DedicatedFile)curChild,dfIdentifier);
      }
 catch (      FileNotFoundException e) {
        continue;
      }
    }
  }
  throw new FileNotFoundException();
}","/** 
 * (Recursively) search DF (identifed by DF name)
 * @param df
 * @param dfIdentifier
 * @return
 * @throws FileNotFoundException 
 */
private CardFile getFileForName(DedicatedFile df,DedicatedFileIdentifier dfIdentifier) throws FileNotFoundException {
  if (dfIdentifier.matches(df)) {
    return df;
  }
  for (  CardObject curChild : df.getChildren()) {
    if (curChild instanceof DedicatedFile) {
      CardFile candidate=getFileForName((DedicatedFile)curChild,dfIdentifier);
      if (candidate == null) {
        continue;
      }
 else {
        return candidate;
      }
    }
  }
  throw new FileNotFoundException(""String_Node_Str"" + dfIdentifier.toString());
}",0.7148407148407149
142393,"@Test public void testEraseFileOddInstructionInvalidOffsetDataObject() throws Exception {
  ProcessingData processingData=new ProcessingData();
  byte[] apduBytes=new byte[]{0x00,(byte)0x0F,0x00,0x00,0x02,0x54,0x00};
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes));
  secStatus.updateMechanisms(new SecStatusMechanismUpdatePropagation(SecContext.GLOBAL,new CurrentFileSecMechanism(elementaryFileUnderMf)));
  fileProtocol.process(processingData);
  assertEquals(processingData.getResponseApdu().getStatusWord(),Iso7816.SW_6984_REFERENCE_DATA_NOT_USABLE);
  assertArrayEquals(new byte[]{1,2,3,4,5,6},elementaryFileContent);
}","@Test public void testEraseFileOddInstructionInvalidOffsetDataObject() throws Exception {
  ProcessingData processingData=new ProcessingData();
  byte[] apduBytes=new byte[]{0x00,(byte)0x0F,0x00,0x00,0x02,0x54,0x00};
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes));
  secStatus.updateMechanisms(new SecStatusMechanismUpdatePropagation(SecContext.GLOBAL,new CurrentFileSecMechanism(elementaryFileUnderMf)));
  try {
    fileProtocol.process(processingData);
  }
 catch (  ProcessingException e) {
    assertEquals(Iso7816.SW_6984_REFERENCE_DATA_NOT_USABLE,e.getStatusWord());
    assertArrayEquals(new byte[]{1,2,3,4,5,6},elementaryFileContent);
    return;
  }
  fail(""String_Node_Str"");
}",0.8819007686932215
142394,"@Test public void testEraseFileEvenInstructionValidOffset() throws Exception {
  ProcessingData processingData=new ProcessingData();
  byte[] apduBytes=new byte[]{0x00,(byte)0x0E,0x00,0x00,0x01,0x02};
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes));
  secStatus.updateMechanisms(new SecStatusMechanismUpdatePropagation(SecContext.GLOBAL,new CurrentFileSecMechanism(elementaryFileUnderMf)));
  fileProtocol.process(processingData);
  assertEquals(""String_Node_Str"",processingData.getResponseApdu().getStatusWord(),Iso7816.SW_9000_NO_ERROR);
  assertArrayEquals(new byte[]{1,2,0,0,0,0},elementaryFileContent);
}","@Test public void testEraseFileEvenInstructionValidOffset() throws Exception {
  ProcessingData processingData=new ProcessingData();
  byte[] apduBytes=new byte[]{0x00,(byte)0x0E,0x00,0x02};
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes));
  secStatus.updateMechanisms(new SecStatusMechanismUpdatePropagation(SecContext.GLOBAL,new CurrentFileSecMechanism(elementaryFileUnderMf)));
  fileProtocol.process(processingData);
  assertEquals(""String_Node_Str"",processingData.getResponseApdu().getStatusWord(),Iso7816.SW_9000_NO_ERROR);
  assertArrayEquals(new byte[]{1,2,0,0,0,0},elementaryFileContent);
}",0.9924585218702866
142395,"protected void processCommandEraseBinaryOdd(){
  CardFile file;
  try {
    file=(CardFile)getFile(processingData.getCommandApdu(),cardState,true);
  }
 catch (  FileNotFoundException e) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A82_FILE_NOT_FOUND);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  ElementaryFile ef;
  if (!(file instanceof ElementaryFile)) {
    throw new ProcessingException(Iso7816.SW_6986_COMMAND_NOT_ALLOWED_NO_EF,""String_Node_Str"");
  }
 else {
    ef=(ElementaryFile)file;
  }
  int startingOffset=-1;
  try {
    startingOffset=Utils.getIntFromUnsignedByteArray(getDDO(processingData.getCommandApdu(),0).getValueField());
  }
 catch (  TagNotFoundException|IllegalArgumentException e) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6984_REFERENCE_DATA_NOT_USABLE);
    this.processingData.updateResponseAPDU(this,e.getMessage(),resp);
    return;
  }
  try {
    try {
      int endingOffset=Utils.getIntFromUnsignedByteArray(getDDO(processingData.getCommandApdu(),1).getValueField());
      ef.erase(startingOffset,endingOffset);
    }
 catch (    TagNotFoundException e) {
      ef.erase(startingOffset);
    }
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_9000_NO_ERROR);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
  }
 catch (  AccessDeniedException e) {
    throw new ProcessingException(Iso7816.SW_6982_SECURITY_STATUS_NOT_SATISFIED,""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new ProcessingException(Iso7816.SW_6B00_WRONG_P1P2,""String_Node_Str"");
  }
}","protected void processCommandEraseBinaryOdd(){
  CardFile file;
  try {
    file=(CardFile)getFile(processingData.getCommandApdu(),cardState,true);
  }
 catch (  FileNotFoundException e) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A82_FILE_NOT_FOUND);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  ElementaryFile ef;
  if (!(file instanceof ElementaryFile)) {
    throw new ProcessingException(Iso7816.SW_6986_COMMAND_NOT_ALLOWED_NO_EF,""String_Node_Str"");
  }
 else {
    ef=(ElementaryFile)file;
  }
  try {
    int startingOffset=-1;
    int endingOffset=-1;
    try {
      startingOffset=Utils.getIntFromUnsignedByteArray(getDDO(processingData.getCommandApdu(),0).getValueField());
      endingOffset=Utils.getIntFromUnsignedByteArray(getDDO(processingData.getCommandApdu(),1).getValueField());
    }
 catch (    TagNotFoundException e) {
    }
    if (startingOffset < 0) {
      ef.erase();
    }
 else     if (endingOffset < 0) {
      ef.erase(startingOffset);
    }
 else {
      ef.erase(startingOffset,endingOffset);
    }
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_9000_NO_ERROR);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
  }
 catch (  AccessDeniedException e) {
    throw new ProcessingException(Iso7816.SW_6982_SECURITY_STATUS_NOT_SATISFIED,""String_Node_Str"");
  }
catch (  IllegalArgumentException e) {
    throw new ProcessingException(Iso7816.SW_6984_REFERENCE_DATA_NOT_USABLE,""String_Node_Str"");
  }
}",0.8174651303820497
142396,"protected void processCommandEraseBinary(){
  CardFile file;
  try {
    file=(CardFile)getFile(processingData.getCommandApdu(),cardState,false);
  }
 catch (  FileNotFoundException e) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A82_FILE_NOT_FOUND);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  ElementaryFile ef;
  if (!(file instanceof ElementaryFile)) {
    throw new ProcessingException(Iso7816.SW_6986_COMMAND_NOT_ALLOWED_NO_EF,""String_Node_Str"");
  }
 else {
    ef=(ElementaryFile)file;
  }
  TlvValue apduData=processingData.getCommandApdu().getCommandData();
  try {
    if (apduData.getLength() > 0) {
      int startingOffset=Utils.getIntFromUnsignedByteArray(apduData.toByteArray());
      ef.erase(startingOffset);
    }
 else {
      ef.erase();
    }
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_9000_NO_ERROR);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
  }
 catch (  AccessDeniedException e) {
    throw new ProcessingException(Iso7816.SW_6982_SECURITY_STATUS_NOT_SATISFIED,""String_Node_Str"");
  }
}","protected void processCommandEraseBinary(){
  CardFile file;
  try {
    file=(CardFile)getFile(processingData.getCommandApdu(),cardState,false);
  }
 catch (  FileNotFoundException e) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A82_FILE_NOT_FOUND);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  ElementaryFile ef;
  if (!(file instanceof ElementaryFile)) {
    throw new ProcessingException(Iso7816.SW_6986_COMMAND_NOT_ALLOWED_NO_EF,""String_Node_Str"");
  }
 else {
    ef=(ElementaryFile)file;
  }
  int startingOffset=getOffset(processingData.getCommandApdu());
  TlvValue apduData=processingData.getCommandApdu().getCommandData();
  try {
    if (apduData.getLength() > 0) {
      int endingOffset=Utils.getIntFromUnsignedByteArray(apduData.toByteArray());
      ef.erase(startingOffset,endingOffset);
    }
 else {
      ef.erase(startingOffset);
    }
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_9000_NO_ERROR);
    this.processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
  }
 catch (  AccessDeniedException e) {
    throw new ProcessingException(Iso7816.SW_6982_SECURITY_STATUS_NOT_SATISFIED,""String_Node_Str"");
  }
}",0.959709911361805
142397,"@PostConstruct public void createComposite(Composite parentComposite){
  parent=parentComposite;
  parent.setLayout(new GridLayout(2,false));
  txtOutput=createConsoleOut(parent);
  addConsoleOutMenu(txtOutput);
  slider=createSlider(parent);
  txtOutput.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      int count=e.count;
      slider.setSelection(slider.getSelection() - count);
      buildNewConsoleContent();
    }
  }
);
  txtOutput.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.ARROW_DOWN) {
        slider.setSelection(slider.getSelection() + 1);
      }
 else       if (e.keyCode == SWT.ARROW_UP) {
        slider.setSelection(slider.getSelection() - 1);
      }
      buildNewConsoleContent();
    }
  }
);
  parent.setLayout(new GridLayout(2,false));
  createConsoleIn(parent);
  lockScroller=new Button(parent,SWT.TOGGLE);
  lockScroller.setText(""String_Node_Str"");
  lockScroller.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      if (locked) {
        lockScroller.setText(""String_Node_Str"");
        locked=false;
      }
 else {
        lockScroller.setText(""String_Node_Str"");
        locked=true;
      }
    }
  }
);
  Activator.addLogListener();
  updateThread=createUpdateThread();
  updateThread.setDaemon(true);
  updateThread.start();
}","@PostConstruct public void createComposite(Composite parentComposite){
  parent=parentComposite;
  parent.setLayout(new GridLayout(2,false));
  txtOutput=createConsoleOut(parent);
  addConsoleOutMenu(txtOutput);
  slider=createSlider(parent);
  txtOutput.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      int count=e.count;
      slider.setSelection(slider.getSelection() - count);
      buildNewConsoleContent();
    }
  }
);
  txtOutput.addKeyListener(new KeyListener(){
    @Override public void keyReleased(    KeyEvent e){
    }
    @Override public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.ARROW_DOWN) {
        slider.setSelection(slider.getSelection() + 1);
      }
 else       if (e.keyCode == SWT.ARROW_UP) {
        slider.setSelection(slider.getSelection() - 1);
      }
      buildNewConsoleContent();
    }
  }
);
  txtOutput.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event e){
      final LinkedListLogListener listener=Activator.getListLogListener();
      if (listener == null) {
        txtOutput.setText(""String_Node_Str"" + System.lineSeparator());
      }
 else {
        buildNewConsoleContent();
        showNewOutput();
      }
    }
  }
);
  parent.setLayout(new GridLayout(2,false));
  createConsoleIn(parent);
  lockScroller=new Button(parent,SWT.TOGGLE);
  lockScroller.setText(""String_Node_Str"");
  lockScroller.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event e){
      if (locked) {
        lockScroller.setText(""String_Node_Str"");
        locked=false;
      }
 else {
        lockScroller.setText(""String_Node_Str"");
        locked=true;
      }
    }
  }
);
  Activator.addLogListener();
  updateThread=createUpdateThread();
  updateThread.setDaemon(true);
  updateThread.start();
}",0.8916592460670822
142398,"private boolean checkForRefresh(LinkedListLogListener listener){
  if (!txtOutput.isDisposed()) {
    if (listener.isRefreshNeeded()) {
      return true;
    }
 else     if (txtOutput.getText().equals(""String_Node_Str"") && listener.getNumberOfCachedLines() > 0) {
      return true;
    }
  }
  return false;
}","private boolean checkForRefresh(LinkedListLogListener listener){
  if (!txtOutput.isDisposed()) {
    if (listener.isRefreshNeeded() && !locked) {
      return true;
    }
 else     if (txtOutput.getText().equals(""String_Node_Str"") && listener.getNumberOfCachedLines() > 0) {
      return true;
    }
  }
  return false;
}",0.9826224328593997
142399,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AuthorizationStore other=(AuthorizationStore)obj;
  Authorization currentAuthThis, currentAuthOther;
  for (  Oid currentOid : authorizations.keySet()) {
    currentAuthThis=getAuthorization(currentOid);
    currentAuthOther=other.getAuthorization(currentOid);
    if (currentAuthThis != currentAuthOther) {
      if (!currentAuthThis.equals(currentAuthOther)) {
        return false;
      }
    }
  }
  for (  Oid currentOid : other.authorizations.keySet()) {
    currentAuthThis=getAuthorization(currentOid);
    currentAuthOther=other.getAuthorization(currentOid);
    if (currentAuthThis != currentAuthOther) {
      if (!currentAuthThis.equals(currentAuthOther)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AuthorizationStore other=(AuthorizationStore)obj;
  Authorization currentAuthThis, currentAuthOther;
  for (  Oid currentOid : authorizations.keySet()) {
    currentAuthThis=getAuthorization(currentOid);
    currentAuthOther=other.getAuthorization(currentOid);
    if (currentAuthThis != currentAuthOther) {
      if (!currentAuthThis.equals(currentAuthOther)) {
        return false;
      }
    }
  }
  for (  Oid currentOid : other.authorizations.keySet()) {
    currentAuthThis=getAuthorization(currentOid);
    currentAuthOther=other.getAuthorization(currentOid);
    if (currentAuthOther != currentAuthThis) {
      if (!currentAuthOther.equals(currentAuthThis)) {
        return false;
      }
    }
  }
  return true;
}",0.91731843575419
142400,"@Override @PostConstruct public void createComposite(Composite parentComposite){
  super.createComposite(parentComposite);
  ;
  getSimAndConnectToNativeDriver();
}","@Override @PostConstruct public void createComposite(Composite parentComposite){
  super.createComposite(parentComposite);
  getSimAndConnectToNativeDriver();
}",0.9876543209876544
142401,"private static Personalization getPerso(String identifier){
  String filePath=""String_Node_Str"";
  File xmlFile=new File(identifier);
  if (xmlFile.exists() && xmlFile.isFile()) {
    filePath=identifier;
  }
 else {
    try {
      int personalizationNumber=Integer.parseInt(identifier);
      if (personalizationNumber > 10) {
        log(CommandParser.class,""String_Node_Str"" + personalizationNumber + ""String_Node_Str"",INFO);
        return null;
      }
      log(CommandParser.class,""String_Node_Str"" + personalizationNumber,INFO);
      Bundle plugin=Activator.getContext().getBundle();
      URL url=plugin.getEntry(persoPath);
      URL resolvedUrl;
      File folder=null;
      try {
        resolvedUrl=FileLocator.resolve(url);
        folder=new File(resolvedUrl.getFile());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      if (personalizationNumber < 10) {
        identifier=""String_Node_Str"" + personalizationNumber;
      }
      filePath=folder.getAbsolutePath() + File.separator + ""String_Node_Str""+ identifier+ ""String_Node_Str"";
    }
 catch (    Exception e) {
      log(CommandParser.class,""String_Node_Str"",ERROR);
      return null;
    }
  }
  try {
    return parsePersonalization(filePath);
  }
 catch (  FileNotFoundException e) {
    log(CommandParser.class,""String_Node_Str"" + e.getMessage(),ERROR);
    log(CommandParser.class,""String_Node_Str"",ERROR);
    return null;
  }
}","/** 
 * This method parses the given identifier and loads the personalization
 * @param identifier
 * @return a personalization object
 */
private static Personalization getPerso(String identifier){
  String filePath=""String_Node_Str"";
  int personalizationNumber=0;
  File xmlFile=new File(identifier);
  if (xmlFile.exists() && xmlFile.isFile()) {
    filePath=identifier;
  }
 else {
    try {
      personalizationNumber=Integer.parseInt(identifier);
    }
 catch (    NumberFormatException e) {
      log(CommandParser.class,""String_Node_Str"",ERROR);
      return null;
    }
    if (personalizationNumber > 10) {
      log(CommandParser.class,""String_Node_Str"" + personalizationNumber + ""String_Node_Str"",INFO);
      return null;
    }
    log(CommandParser.class,""String_Node_Str"" + personalizationNumber,INFO);
    Bundle plugin=Activator.getContext().getBundle();
    URL url=plugin.getEntry(persoPath);
    URL resolvedUrl;
    File folder=null;
    try {
      resolvedUrl=FileLocator.resolve(url);
      folder=new File(resolvedUrl.getFile());
    }
 catch (    IOException e) {
      log(CommandParser.class,e.getMessage(),ERROR);
    }
    if (personalizationNumber < 10) {
      identifier=""String_Node_Str"" + personalizationNumber;
    }
    filePath=folder.getAbsolutePath() + File.separator + ""String_Node_Str""+ identifier+ ""String_Node_Str"";
    xmlFile=new File(filePath);
    if (!xmlFile.exists() || !xmlFile.isFile()) {
      log(CommandParser.class,""String_Node_Str"",ERROR);
      return null;
    }
  }
  try {
    return parsePersonalization(filePath);
  }
 catch (  FileNotFoundException e) {
    log(CommandParser.class,""String_Node_Str"" + e.getMessage(),ERROR);
    log(CommandParser.class,""String_Node_Str"",ERROR);
    return null;
  }
}",0.3346837020878778
142402,"public int processEvent(int msg){
  int evConsumed=0;
  if (m_initialized == false)   return 0;
  this.continueProcessing=true;
  do {
    evConsumed=0;
switch (stateVar) {
case COMMAND_PROCESSOR:
switch (stateVarCOMMAND_PROCESSOR) {
case END_OF_STACK_OR_EMPTY:
        if (true) {
          if (apduHasBeenProcessed()) {
            evConsumed=16;
            returnResult();
            stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
          }
 else {
            evConsumed=16;
            setProtocolPointerToFirstElementOfProtocolList();
            stateVarCOMMAND_PROCESSOR=WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
          }
        }
 else {
        }
      break;
case PROTOCOL_FROM_LIST_ACTIVE:
    if (true) {
      if (apduHasBeenProcessed() || protocolAtPointerWantsToGetOnStack()) {
        evConsumed=16;
        addProtocolAtProtocolPointerToStack();
        stateVarCOMMAND_PROCESSOR=PROTOCOL_PROCESSED;
      }
 else {
        evConsumed=16;
        stateVarCOMMAND_PROCESSOR=PROTOCOL_UNABLE_TO_PROCESS_APDU;
      }
    }
 else {
    }
  break;
case PROTOCOL_FROM_STACK_ACTIVE:
if (true) {
  evConsumed=16;
  currentProtocolProcess();
  stateVarCOMMAND_PROCESSOR=PROTOCOL_PROCESSED;
}
 else {
}
break;
case PROTOCOL_INACTIVE:
if (true) {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=START_OF_STACK;
}
 else {
}
break;
case PROTOCOL_PROCESSED:
if (true) {
if (isProtocolFinished()) {
evConsumed=16;
removeCurrentProtocolAndAboveFromStack();
stateVarCOMMAND_PROCESSOR=PROTOCOL_INACTIVE;
}
 else {
evConsumed=16;
incrementStackPointer();
stateVarCOMMAND_PROCESSOR=PROTOCOL_INACTIVE;
}
}
 else {
}
break;
case PROTOCOL_UNABLE_TO_PROCESS_APDU:
if (true) {
if (protocolAtProtocolPointerIsLastElementOfProtocolList()) {
evConsumed=16;
setStatusWordForUnsupportedCommand();
returnResult();
stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
}
 else {
evConsumed=16;
setProtocolPointerToNextElementOfProtocolList();
stateVarCOMMAND_PROCESSOR=WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
}
}
 else {
}
break;
case START_OF_STACK:
if (true) {
if (stackPointerIsNull()) {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=END_OF_STACK_OR_EMPTY;
}
 else {
evConsumed=16;
makeStackPointerCurrentlyActiveProtocol();
stateVarCOMMAND_PROCESSOR=PROTOCOL_FROM_STACK_ACTIVE;
}
}
 else {
}
break;
case WAITING_FOR_COMMAND:
if (true) {
evConsumed=16;
setStackPointerToBottom();
stateVarCOMMAND_PROCESSOR=START_OF_STACK;
}
 else {
}
break;
case WAITING_FOR_PROTOCOL_TO_PROCESS_APDU:
if (true) {
evConsumed=16;
resetProtocolAtProtocolPointer();
makeProtocolAtProtocolPointerCurrentlyActiveProtocol();
currentProtocolProcess();
stateVarCOMMAND_PROCESSOR=PROTOCOL_FROM_LIST_ACTIVE;
}
 else {
}
break;
default :
break;
}
break;
case INITIALIZATION:
if (true) {
evConsumed=16;
returnResult();
stateVar=COMMAND_PROCESSOR;
stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
}
 else {
}
break;
default :
break;
}
}
 while (this.continueProcessing);
return evConsumed;
}","public int processEvent(int msg){
  int evConsumed=0;
  if (m_initialized == false)   return 0;
  this.continueProcessing=true;
  do {
    evConsumed=0;
switch (stateVar) {
case COMMAND_PROCESSOR:
switch (stateVarCOMMAND_PROCESSOR) {
case END_OF_STACK_OR_EMPTY:
        if (true) {
          if (apduHasBeenProcessed()) {
            evConsumed=16;
            returnResult();
            stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
          }
 else {
            evConsumed=16;
            setProtocolPointerToFirstElementOfProtocolList();
            stateVarCOMMAND_PROCESSOR=START_PROTOCOL_ITERATION;
          }
        }
 else {
        }
      break;
case PROTOCOL_FROM_LIST_ACTIVE:
    if (true) {
      if (apduHasBeenProcessed() || protocolAtPointerWantsToGetOnStack()) {
        evConsumed=16;
        addProtocolAtProtocolPointerToStack();
        stateVarCOMMAND_PROCESSOR=PROTOCOL_PROCESSED;
      }
 else {
        evConsumed=16;
        setProtocolPointerToNextElementOfProtocolList();
        stateVarCOMMAND_PROCESSOR=PROTOCOL_UNABLE_TO_PROCESS_APDU;
      }
    }
 else {
    }
  break;
case PROTOCOL_FROM_STACK_ACTIVE:
if (true) {
  evConsumed=16;
  currentProtocolProcess();
  stateVarCOMMAND_PROCESSOR=PROTOCOL_PROCESSED;
}
 else {
}
break;
case PROTOCOL_INACTIVE:
if (true) {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=START_OF_STACK;
}
 else {
}
break;
case PROTOCOL_PROCESSED:
if (true) {
if (isProtocolFinished()) {
evConsumed=16;
removeCurrentProtocolAndAboveFromStack();
stateVarCOMMAND_PROCESSOR=PROTOCOL_INACTIVE;
}
 else {
evConsumed=16;
incrementStackPointer();
stateVarCOMMAND_PROCESSOR=PROTOCOL_INACTIVE;
}
}
 else {
}
break;
case PROTOCOL_UNABLE_TO_PROCESS_APDU:
if (true) {
if (allProtocolsOfProtocolListProcessed()) {
evConsumed=16;
setStatusWordForUnsupportedCommand();
returnResult();
stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
}
 else {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
}
}
 else {
}
break;
case START_OF_STACK:
if (true) {
if (stackPointerIsNull()) {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=END_OF_STACK_OR_EMPTY;
}
 else {
evConsumed=16;
makeStackPointerCurrentlyActiveProtocol();
stateVarCOMMAND_PROCESSOR=PROTOCOL_FROM_STACK_ACTIVE;
}
}
 else {
}
break;
case START_PROTOCOL_ITERATION:
if (true) {
if (allProtocolsOfProtocolListProcessed()) {
evConsumed=16;
setStatusWordForUnsupportedCommand();
returnResult();
stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
}
 else {
evConsumed=16;
stateVarCOMMAND_PROCESSOR=WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
}
}
 else {
}
break;
case WAITING_FOR_COMMAND:
if (true) {
evConsumed=16;
setStackPointerToBottom();
stateVarCOMMAND_PROCESSOR=START_OF_STACK;
}
 else {
}
break;
case WAITING_FOR_PROTOCOL_TO_PROCESS_APDU:
if (true) {
evConsumed=16;
resetProtocolAtProtocolPointer();
makeProtocolAtProtocolPointerCurrentlyActiveProtocol();
currentProtocolProcess();
stateVarCOMMAND_PROCESSOR=PROTOCOL_FROM_LIST_ACTIVE;
}
 else {
}
break;
default :
break;
}
break;
case INITIALIZATION:
if (true) {
evConsumed=16;
returnResult();
stateVar=COMMAND_PROCESSOR;
stateVarCOMMAND_PROCESSOR=WAITING_FOR_COMMAND;
}
 else {
}
break;
default :
break;
}
}
 while (this.continueProcessing);
return evConsumed;
}",0.9052494718023728
142403,"public int getInnermostActiveState(){
  if (isInWAITING_FOR_PROTOCOL_TO_PROCESS_APDU()) {
    return WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
  }
 else   if (isInSTART_OF_STACK()) {
    return START_OF_STACK;
  }
 else   if (isInWAITING_FOR_COMMAND()) {
    return WAITING_FOR_COMMAND;
  }
 else   if (isInPROTOCOL_FROM_LIST_ACTIVE()) {
    return PROTOCOL_FROM_LIST_ACTIVE;
  }
 else   if (isInPROTOCOL_PROCESSED()) {
    return PROTOCOL_PROCESSED;
  }
 else   if (isInPROTOCOL_FROM_STACK_ACTIVE()) {
    return PROTOCOL_FROM_STACK_ACTIVE;
  }
 else   if (isInPROTOCOL_INACTIVE()) {
    return PROTOCOL_INACTIVE;
  }
 else   if (isInEND_OF_STACK_OR_EMPTY()) {
    return END_OF_STACK_OR_EMPTY;
  }
 else   if (isInPROTOCOL_UNABLE_TO_PROCESS_APDU()) {
    return PROTOCOL_UNABLE_TO_PROCESS_APDU;
  }
 else   if (isInINITIALIZATION()) {
    return INITIALIZATION;
  }
 else {
    return __UNKNOWN_STATE__;
  }
}","public int getInnermostActiveState(){
  if (isInWAITING_FOR_PROTOCOL_TO_PROCESS_APDU()) {
    return WAITING_FOR_PROTOCOL_TO_PROCESS_APDU;
  }
 else   if (isInSTART_PROTOCOL_ITERATION()) {
    return START_PROTOCOL_ITERATION;
  }
 else   if (isInSTART_OF_STACK()) {
    return START_OF_STACK;
  }
 else   if (isInWAITING_FOR_COMMAND()) {
    return WAITING_FOR_COMMAND;
  }
 else   if (isInPROTOCOL_FROM_LIST_ACTIVE()) {
    return PROTOCOL_FROM_LIST_ACTIVE;
  }
 else   if (isInPROTOCOL_PROCESSED()) {
    return PROTOCOL_PROCESSED;
  }
 else   if (isInPROTOCOL_FROM_STACK_ACTIVE()) {
    return PROTOCOL_FROM_STACK_ACTIVE;
  }
 else   if (isInPROTOCOL_INACTIVE()) {
    return PROTOCOL_INACTIVE;
  }
 else   if (isInEND_OF_STACK_OR_EMPTY()) {
    return END_OF_STACK_OR_EMPTY;
  }
 else   if (isInPROTOCOL_UNABLE_TO_PROCESS_APDU()) {
    return PROTOCOL_UNABLE_TO_PROCESS_APDU;
  }
 else   if (isInINITIALIZATION()) {
    return INITIALIZATION;
  }
 else {
    return __UNKNOWN_STATE__;
  }
}",0.9542346133613888
142404,"/** 
 * Returns the kind of secure messaging the provided APDU's CLA byte indicates according to ISO 7816-4: <ul> <li>0  0  � No SM or no indication</li>  <li>0  1  � Proprietary SM format </li> <li>1  0  � SM according to 6, command header not processed according to 6.2.3.1</li> <li>1  1  � SM according to 6, command header authenticated according to 6.2.3.1</li> </ul> <p/>
 * @param apdu the APDU
 * @return the kind of secure messaging the provided APDU's CLA byte indicates one of{@link Iso7816#SM_OFF_OR_NO_INDICATION},<br/>  {@link Iso7816#SM_PROPRIETARY},<br/>  {@link Iso7816#SM_COMMAND_HEADER_NOT_PROCESSED},<br/>  {@link Iso7816#SM_COMMAND_HEADER_AUTHENTICATED},
 */
public static byte getSecureMessagingStatus(byte[] apdu){
  byte cla=apdu[OFFSET_CLA];
  byte isoFormat=getISOFormat(apdu);
  if (isoFormat == ISO_FORMAT_FIRSTINTERINDUSTRY) {
    cla=(byte)(cla & (byte)0x0C);
    return (byte)(cla >> 2);
  }
 else {
    if (isoFormat == ISO_FORMAT_FURTHERINTERINDUSTRY) {
      cla=(byte)(cla & (byte)0x20);
      return (byte)(cla >> 4);
    }
 else {
      if (isoFormat >= ISO_FORMAT_PROPRIETARY) {
        ISO7816Exception.throwIt(Iso7816.SW_6E00_CLA_NOT_SUPPORTED);
      }
 else {
      }
      return Byte.MIN_VALUE;
    }
  }
}","/** 
 * Returns the kind of secure messaging the provided APDU's CLA byte indicates according to ISO 7816-4: <ul> <li>0  0  - No SM or no indication</li>  <li>0  1  - Proprietary SM format </li> <li>1  0  - SM according to 6, command header not processed according to 6.2.3.1</li> <li>1  1  - SM according to 6, command header authenticated according to 6.2.3.1</li> </ul> <p/>
 * @param apdu the APDU
 * @return the kind of secure messaging the provided APDU's CLA byte indicates one of{@link Iso7816#SM_OFF_OR_NO_INDICATION},<br/>  {@link Iso7816#SM_PROPRIETARY},<br/>  {@link Iso7816#SM_COMMAND_HEADER_NOT_PROCESSED},<br/>  {@link Iso7816#SM_COMMAND_HEADER_AUTHENTICATED},
 */
public static byte getSecureMessagingStatus(byte[] apdu){
  byte cla=apdu[OFFSET_CLA];
  byte isoFormat=getISOFormat(apdu);
  if (isoFormat == ISO_FORMAT_FIRSTINTERINDUSTRY) {
    cla=(byte)(cla & (byte)0x0C);
    return (byte)(cla >> 2);
  }
 else {
    if (isoFormat == ISO_FORMAT_FURTHERINTERINDUSTRY) {
      cla=(byte)(cla & (byte)0x20);
      return (byte)(cla >> 4);
    }
 else {
      if (isoFormat >= ISO_FORMAT_PROPRIETARY) {
        ISO7816Exception.throwIt(Iso7816.SW_6E00_CLA_NOT_SUPPORTED);
      }
 else {
      }
      return Byte.MIN_VALUE;
    }
  }
}",0.9968
142405,"/** 
 * Returns whether the provided APDU matches the provided secure messaging indication according to ISO 7816-4: 0  0  � No SM or no indication  0  1  � Proprietary SM format  1  0  � SM according to 6, command header not processed according to 6.2.3.1 1  1  � SM according to 6, command header authenticated according to 6.2.3.1
 * @param apdu the APDU
 * @param specification some secure messaging status
 * @return whether the provided APDU matches the provided secure messaging status
 */
public static boolean isSecureMessagingCLA(byte[] apdu,byte specification){
  return specification == getSecureMessagingStatus(apdu);
}","/** 
 * Returns whether the provided APDU matches the provided secure messaging indication according to ISO 7816-4: 0  0  - No SM or no indication  0  1  - Proprietary SM format  1  0  - SM according to 6, command header not processed according to 6.2.3.1 1  1  - SM according to 6, command header authenticated according to 6.2.3.1
 * @param apdu the APDU
 * @param specification some secure messaging status
 * @return whether the provided APDU matches the provided secure messaging status
 */
public static boolean isSecureMessagingCLA(byte[] apdu,byte specification){
  return specification == getSecureMessagingStatus(apdu);
}",0.993660855784469
142406,"@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context) throws NullPointerException {
  if (reader.getNodeName().equals(""String_Node_Str"")) {
    getValuesFromXML(reader,context);
  }
  if (point == null || curve == null || n == null) {
    log(ECParameterSpecConverter.class,""String_Node_Str"",ERROR);
    throw new NullPointerException(""String_Node_Str"");
  }
  return new ECParameterSpec(curve,point,n,h);
}","@Override public Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context) throws NullPointerException {
  if (reader.getNodeName().toLowerCase().endsWith(""String_Node_Str"")) {
    getValuesFromXML(reader,context);
  }
  if (point == null || curve == null || n == null) {
    log(ECParameterSpecConverter.class,""String_Node_Str"",ERROR);
    throw new NullPointerException(""String_Node_Str"");
  }
  return new ECParameterSpec(curve,point,n,h);
}",0.9693654266958424
142407,"public void widgetSelected(SelectionEvent e){
  txtOutput.setText(""String_Node_Str"");
  for (int i=0; i < txtOutput.getBounds().height / txtOutput.getFont().getFontData()[0].getHeight(); i++) {
    consoleStrings.indexOf(consoleStrings.get(slider.getSelection() + i));
    appendToGuiFromList((consoleStrings.get(slider.getSelection() + i)));
  }
}","public void widgetSelected(SelectionEvent e){
  txtOutput.setText(""String_Node_Str"");
  consoleStrings.indexOf(consoleStrings.get(slider.getSelection()));
  appendToGuiFromList((consoleStrings.get(slider.getSelection())));
  for (int i=0; i < 35; i++) {
    if (slider.getSelection() + i < consoleStrings.size()) {
      consoleStrings.indexOf(consoleStrings.get(slider.getSelection() + i));
      appendToGuiFromList((consoleStrings.get(slider.getSelection() + i)));
    }
 else     return;
  }
}",0.5207100591715976
142408,"protected void appendToGui(String s){
  if (consoleStrings.size() < maxLines && !s.equals(""String_Node_Str"")) {
    consoleStrings.add(s);
  }
 else   if (!s.equals(""String_Node_Str"")) {
    consoleStrings.pollFirst();
    consoleStrings.add(s);
  }
}","protected void appendToGui(String s){
  if (consoleStrings.size() < maxLines && !s.equals(""String_Node_Str"")) {
    consoleStrings.add(s);
    sync.asyncExec(new Runnable(){
      @Override public void run(){
        slider.setMaximum(consoleStrings.size());
      }
    }
);
  }
 else   if (!s.equals(""String_Node_Str"")) {
    consoleStrings.pollFirst();
    consoleStrings.add(s);
  }
}",0.7856025039123631
142409,"@PostConstruct public void createComposite(Composite parentComposite){
  parent=parentComposite;
  grabSysOut();
  grabSysIn();
  parent.setLayout(new GridLayout(2,false));
  txtOutput=new Text(parent,SWT.READ_ONLY | SWT.MULTI | SWT.BORDER| SWT.WRAP);
  TextLengthLimiter tl=new TextLengthLimiter();
  txtOutput.addModifyListener(tl);
  txtOutput.setText(""String_Node_Str"" + System.lineSeparator());
  txtOutput.setEditable(false);
  txtOutput.setCursor(null);
  txtOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Slider slider=new Slider(parent,SWT.V_SCROLL);
  slider.setIncrement(1);
  slider.setPageIncrement(10);
  slider.setMaximum(maxLines);
  slider.setMinimum(0);
  slider.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  SelectionListener sliderListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      txtOutput.setText(""String_Node_Str"");
      for (int i=0; i < txtOutput.getBounds().height / txtOutput.getFont().getFontData()[0].getHeight(); i++) {
        consoleStrings.indexOf(consoleStrings.get(slider.getSelection() + i));
        appendToGuiFromList((consoleStrings.get(slider.getSelection() + i)));
      }
    }
  }
;
  slider.addSelectionListener(sliderListener);
  parent.setLayout(new GridLayout(2,false));
  txtInput=new Text(parent,SWT.BORDER);
  txtInput.setMessage(""String_Node_Str"");
  txtInput.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if ((e.character == SWT.CR) || (e.character == SWT.LF)) {
        String line=txtInput.getText();
        txtOutput.append(line + System.lineSeparator());
        inWriter.println(line);
        inWriter.flush();
        txtInput.setText(""String_Node_Str"");
      }
    }
  }
);
  txtInput.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  PersoSim sim=new PersoSim();
  sim.loadPersonalization(""String_Node_Str"");
  Thread simThread=new Thread(sim);
  simThread.start();
  Thread uiBufferThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
        appendToGui(""String_Node_Str"");
      }
    }
  }
);
  uiBufferThread.start();
}","@PostConstruct public void createComposite(Composite parentComposite){
  parent=parentComposite;
  grabSysOut();
  grabSysIn();
  parent.setLayout(new GridLayout(2,false));
  txtOutput=new Text(parent,SWT.READ_ONLY | SWT.MULTI | SWT.BORDER| SWT.WRAP);
  TextLengthLimiter tl=new TextLengthLimiter();
  txtOutput.addModifyListener(tl);
  txtOutput.setText(""String_Node_Str"" + System.lineSeparator());
  txtOutput.setEditable(false);
  txtOutput.setCursor(null);
  txtOutput.setLayoutData(new GridData(GridData.FILL_BOTH));
  consoleStrings.add(""String_Node_Str"");
  slider=new Slider(parent,SWT.V_SCROLL);
  slider.setIncrement(1);
  slider.setPageIncrement(10);
  slider.setMaximum(consoleStrings.size());
  slider.setMinimum(0);
  slider.setThumb(consoleStrings.size());
  slider.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  SelectionListener sliderListener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      txtOutput.setText(""String_Node_Str"");
      consoleStrings.indexOf(consoleStrings.get(slider.getSelection()));
      appendToGuiFromList((consoleStrings.get(slider.getSelection())));
      for (int i=0; i < 35; i++) {
        if (slider.getSelection() + i < consoleStrings.size()) {
          consoleStrings.indexOf(consoleStrings.get(slider.getSelection() + i));
          appendToGuiFromList((consoleStrings.get(slider.getSelection() + i)));
        }
 else         return;
      }
    }
  }
;
  try {
    slider.addSelectionListener(sliderListener);
  }
 catch (  IndexOutOfBoundsException IoobExc) {
  }
 finally {
    slider.setSelection(consoleStrings.size());
  }
  parent.setLayout(new GridLayout(2,false));
  txtInput=new Text(parent,SWT.BORDER);
  txtInput.setMessage(""String_Node_Str"");
  txtInput.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if ((e.character == SWT.CR) || (e.character == SWT.LF)) {
        String line=txtInput.getText();
        txtOutput.append(line + System.lineSeparator());
        inWriter.println(line);
        inWriter.flush();
        txtInput.setText(""String_Node_Str"");
      }
    }
  }
);
  txtInput.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  PersoSim sim=new PersoSim();
  sim.loadPersonalization(""String_Node_Str"");
  Thread simThread=new Thread(sim);
  simThread.start();
  Thread uiBufferThread=new Thread(new Runnable(){
    @Override public void run(){
      while (true) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
        appendToGui(""String_Node_Str"");
      }
    }
  }
);
  uiBufferThread.start();
}",0.8538681948424068
142410,"public static ECPoint doublePoint(EllipticCurve curve,ECPoint ecPoint){
  if (ecPoint.equals(ECPoint.POINT_INFINITY)) {
    return ecPoint;
  }
  BigInteger p=((ECFieldFp)curve.getField()).getP();
  BigInteger a=curve.getA();
  BigInteger x=ecPoint.getAffineX();
  BigInteger y=ecPoint.getAffineY();
  BigInteger lambda=((((x.pow(2)).multiply(THREE)).add(a)).multiply((y.multiply(TWO)).modInverse(p))).mod(p);
  BigInteger xDoubled=((lambda.pow(2)).subtract(x.multiply(TWO))).mod(p);
  BigInteger yDoubled=(((lambda.multiply(x.subtract(xDoubled)))).subtract(y)).mod(p);
  ECPoint ecPointDoubled=new ECPoint(xDoubled,yDoubled);
  return ecPointDoubled;
}","/** 
 * This method performs EC point doubling
 * @param curve the elliptic curve to be used
 * @param ecPointP the second point for addition
 * @return the result of the point doubling
 */
public static ECPoint doublePoint(EllipticCurve curve,ECPoint ecPointP){
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  BigInteger p=((ECFieldFp)curve.getField()).getP();
  BigInteger a=curve.getA();
  BigInteger xp=ecPointP.getAffineX();
  BigInteger yp=ecPointP.getAffineY();
  BigInteger lambda=((((xp.pow(2)).multiply(THREE)).add(a)).multiply((yp.multiply(TWO)).modInverse(p))).mod(p);
  BigInteger xr=computeXr(p,lambda,xp);
  BigInteger yr=computeYr(p,lambda,xp,yp,xr);
  ECPoint ecPointR=new ECPoint(xr,yr);
  return ecPointR;
}",0.6183368869936035
142411,"public static ECPoint doublePointBc(EllipticCurve curve,ECPoint ecPoint){
  if (ecPoint.equals(ECPoint.POINT_INFINITY)) {
    return ecPoint;
  }
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint pointBc, pointBcTwice;
  curveBc=EC5Util.convertCurve(curve);
  pointBc=EC5Util.convertPoint(curveBc,ecPoint,false);
  pointBcTwice=pointBc.twice();
  ECFieldElement ecfX=pointBcTwice.normalize().getXCoord();
  ECFieldElement ecfY=pointBcTwice.normalize().getYCoord();
  BigInteger x=ecfX.toBigInteger();
  BigInteger y=ecfY.toBigInteger();
  ECPoint ecPointTwice=new ECPoint(x,y);
  return ecPointTwice;
}","/** 
 * This method performs EC point doubling relying on Bouncy Castle
 * @param curve the elliptic curve to be used
 * @param ecPointP the second point for addition
 * @return the result of the point doubling
 */
public static ECPoint doublePointBc(EllipticCurve curve,ECPoint ecPointP){
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint ecPointPbc, ecPointRbc;
  curveBc=EC5Util.convertCurve(curve);
  ecPointPbc=EC5Util.convertPoint(curveBc,ecPointP,false);
  ecPointRbc=ecPointPbc.twice();
  ECFieldElement ecfX=ecPointRbc.normalize().getXCoord();
  ECFieldElement ecfY=ecPointRbc.normalize().getYCoord();
  BigInteger rx=ecfX.toBigInteger();
  BigInteger ry=ecfY.toBigInteger();
  ECPoint ecPointR=new ECPoint(rx,ry);
  return ecPointR;
}",0.645466847090663
142412,"/** 
 * TODO remove BC dependency, maybe move to a dedicated helper class This method performs EC point addition
 * @param curve the elliptic curve to be used
 * @param ecPointQ the first point for addition
 * @param ecPointP the second point for addition
 * @return the addition result
 */
public static ECPoint addPointBc(EllipticCurve curve,ECPoint ecPointQ,ECPoint ecPointP){
  if (ecPointQ.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointQ;
  }
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint pointBc1, pointBc2, pointBcAdd;
  curveBc=EC5Util.convertCurve(curve);
  pointBc1=EC5Util.convertPoint(curveBc,ecPointQ,false);
  pointBc2=EC5Util.convertPoint(curveBc,ecPointP,false);
  pointBcAdd=pointBc1.add(pointBc2);
  ECFieldElement ecfX=pointBcAdd.normalize().getXCoord();
  ECFieldElement ecfY=pointBcAdd.normalize().getYCoord();
  BigInteger x=ecfX.toBigInteger();
  BigInteger y=ecfY.toBigInteger();
  ECPoint ecPointAdd=new ECPoint(x,y);
  return ecPointAdd;
}","/** 
 * This method performs EC point addition relying on Bouncy Castle
 * @param curve the elliptic curve to be used
 * @param ecPointQ the first point for addition
 * @param ecPointP the second point for addition
 * @return the result of the point addition
 */
public static ECPoint addPointBc(EllipticCurve curve,ECPoint ecPointQ,ECPoint ecPointP){
  if (ecPointQ.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointQ;
  }
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint ecPointQbc, ecPointPbc, ecPointRbc;
  curveBc=EC5Util.convertCurve(curve);
  ecPointQbc=EC5Util.convertPoint(curveBc,ecPointQ,false);
  ecPointPbc=EC5Util.convertPoint(curveBc,ecPointP,false);
  ecPointRbc=ecPointQbc.add(ecPointPbc);
  ECFieldElement ecfX=ecPointRbc.normalize().getXCoord();
  ECFieldElement ecfY=ecPointRbc.normalize().getYCoord();
  BigInteger rx=ecfX.toBigInteger();
  BigInteger ry=ecfY.toBigInteger();
  ECPoint ecPointR=new ECPoint(rx,ry);
  return ecPointR;
}",0.7747663551401869
142413,"public static ECPoint addPoint(EllipticCurve curve,ECPoint ecPointQ,ECPoint ecPointP){
  BigInteger p=((ECFieldFp)curve.getField()).getP();
  BigInteger xq=ecPointQ.getAffineX();
  BigInteger yq=ecPointQ.getAffineY();
  BigInteger xp=ecPointP.getAffineX();
  BigInteger yp=ecPointP.getAffineY();
  if (ecPointQ.equals(ecPointP)) {
    return doublePoint(curve,ecPointQ);
  }
  if (ecPointQ.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointQ;
  }
  BigInteger lambda=((yq.subtract(yp)).multiply(xq.subtract(xp).modInverse(p))).mod(p);
  BigInteger addedX=(((lambda.modPow(TWO,p).subtract(xq))).subtract(xp)).mod(p);
  BigInteger addedY=((lambda.multiply(ecPointP.getAffineX().subtract(addedX)).mod(p)).subtract(yp)).mod(p);
  ECPoint ecPointAdded=new ECPoint(addedX,addedY);
  return ecPointAdded;
}","/** 
 * This method performs EC point addition
 * @param curve the elliptic curve to be used
 * @param ecPointQ the first point for addition
 * @param ecPointP the second point for addition
 * @return the result of the point addition
 */
public static ECPoint addPoint(EllipticCurve curve,ECPoint ecPointQ,ECPoint ecPointP){
  if (ecPointQ.equals(ecPointP)) {
    return doublePoint(curve,ecPointQ);
  }
  if (ecPointQ.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointQ;
  }
  BigInteger p=((ECFieldFp)curve.getField()).getP();
  BigInteger xq=ecPointQ.getAffineX();
  BigInteger yq=ecPointQ.getAffineY();
  BigInteger xp=ecPointP.getAffineX();
  BigInteger yp=ecPointP.getAffineY();
  BigInteger lambda=((yq.subtract(yp)).multiply(xq.subtract(xp).modInverse(p))).mod(p);
  BigInteger xr=computeXr(p,lambda,xp,xq);
  BigInteger yr=computeYr(p,lambda,xp,yp,xr);
  ECPoint ecPointR=new ECPoint(xr,yr);
  return ecPointR;
}",0.2916666666666667
142414,"/** 
 * This method performs EC scalar point multiplication using Double-and-add method.
 * @param curve the elliptic curve to be used
 * @param ecPoint the point to be multiplied
 * @param multiplicator the scalar multiplier
 * @return the multiplied EC point
 */
public static ECPoint scalarPointMultiplication(EllipticCurve curve,ECPoint ecPoint,BigInteger multiplicator){
  if (ecPoint.equals(ECPoint.POINT_INFINITY)) {
    return ecPoint;
  }
  BigInteger p=((ECFieldFp)curve.getField()).getP();
  BigInteger scalar=multiplicator.mod(p);
  ECPoint ecPointMult=ECPoint.POINT_INFINITY;
  int length=scalar.bitLength();
  System.out.println(""String_Node_Str"" + length);
  System.out.println(""String_Node_Str"" + HexString.encode(scalar));
  System.out.println(""String_Node_Str"" + scalar);
  System.out.println(""String_Node_Str"" + scalar.toString(2));
  for (int i=length - 1; i >= 0; i--) {
    ecPointMult=doublePoint(curve,ecPointMult);
    if (scalar.testBit(i)) {
      ecPointMult=addPoint(curve,ecPointMult,ecPoint);
    }
  }
  return ecPointMult;
}","/** 
 * This method performs EC scalar point multiplication using Double-and-add method.
 * @param curve the elliptic curve to be used
 * @param ecPointP the point to be multiplied
 * @param scalar the scalar multiplier
 * @return the multiplied EC point
 */
public static ECPoint scalarPointMultiplication(EllipticCurve curve,ECPoint ecPointP,BigInteger scalar){
  if (ecPointP.equals(ECPoint.POINT_INFINITY)) {
    return ecPointP;
  }
  ECPoint ecPointR=ECPoint.POINT_INFINITY;
  for (int i=(scalar.bitLength()) - 1; i >= 0; i--) {
    ecPointR=doublePoint(curve,ecPointR);
    if (scalar.testBit(i)) {
      ecPointR=addPoint(curve,ecPointR,ecPointP);
    }
  }
  return ecPointR;
}",0.7320711417096959
142415,"/** 
 * TODO remove BC dependency, maybe move to a dedicated helper class This method performs EC scalar point multiplication
 * @param curve the elliptic curve to be used
 * @param ecPoint the point to be multiplied
 * @param multiplicator the scalar multiplier
 * @return the multiplied EC point
 */
public static ECPoint scalarPointMultiplicationBc(EllipticCurve curve,ECPoint ecPoint,BigInteger multiplicator){
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint pointBc, pointBcMult;
  curveBc=EC5Util.convertCurve(curve);
  pointBc=EC5Util.convertPoint(curveBc,ecPoint,false);
  pointBcMult=pointBc.multiply(multiplicator);
  ECFieldElement ecfX=pointBcMult.normalize().getXCoord();
  ECFieldElement ecfY=pointBcMult.normalize().getYCoord();
  BigInteger x=ecfX.toBigInteger();
  BigInteger y=ecfY.toBigInteger();
  ECPoint ecPointMult=new ECPoint(x,y);
  return ecPointMult;
}","/** 
 * This method performs EC scalar point multiplication relying on Bouncy Castle
 * @param curve the elliptic curve to be used
 * @param ecPointP the point to be multiplied
 * @param multiplicator the scalar multiplier
 * @return the multiplied EC point
 */
public static ECPoint scalarPointMultiplicationBc(EllipticCurve curve,ECPoint ecPointP,BigInteger multiplicator){
  org.bouncycastle.math.ec.ECCurve curveBc;
  org.bouncycastle.math.ec.ECPoint ecPointPbc, ecPointRbc;
  curveBc=EC5Util.convertCurve(curve);
  ecPointPbc=EC5Util.convertPoint(curveBc,ecPointP,false);
  ecPointRbc=ecPointPbc.multiply(multiplicator);
  ECFieldElement ecfX=ecPointRbc.normalize().getXCoord();
  ECFieldElement ecfY=ecPointRbc.normalize().getYCoord();
  BigInteger rx=ecfX.toBigInteger();
  BigInteger ry=ecfY.toBigInteger();
  ECPoint ecPointR=new ECPoint(rx,ry);
  return ecPointR;
}",0.7540616246498599
142416,"@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}","@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}",0.4392439243924392
142417,"/** 
 * Return the single used SignerInfo <p/> If more than one SignerInfo is used override   {@link #getSignerInfos()} and ignore this method
 * @param eContent the encapContentInfo to be signed  
 * @return
 */
protected TlvDataObject getSignerInfo(ConstructedTlvDataObject eContent){
  TlvDataObject version=new PrimitiveTlvDataObject(new TlvTag(Asn1.INTEGER),new byte[]{0x01});
  TlvDataObject sid=getSid();
  TlvDataObject digestAlgorithm=getDigestAlgorithm();
  TlvDataObject signedAttrs=getSignedAttrs(eContent);
  TlvDataObject signatureAlgorithm=new ConstructedTlvDataObject(HexString.toByteArray(""String_Node_Str""));
  byte[] signatureBytes;
  if (signedAttrs != null) {
    byte[] sigInput=signedAttrs.toByteArray();
    sigInput[0]=Asn1.SEQUENCE;
    signatureBytes=getSignature(sigInput);
  }
 else {
    signatureBytes=getSignature(eContent.toByteArray());
  }
  TlvDataObject signature=new PrimitiveTlvDataObject(TAG_OCTET_STRING,signatureBytes);
  ConstructedTlvDataObject signerInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
  signerInfo.addTlvDataObject(version);
  signerInfo.addTlvDataObject(sid);
  signerInfo.addTlvDataObject(digestAlgorithm);
  signerInfo.addTlvDataObject(signedAttrs);
  signerInfo.addTlvDataObject(signatureAlgorithm);
  signerInfo.addTlvDataObject(signature);
  return signerInfo;
}","/** 
 * Return the single used SignerInfo <p/> If more than one SignerInfo is used override   {@link #getSignerInfos()} and ignore this method
 * @param eContent the encapContentInfo to be signed  
 * @return
 */
protected TlvDataObject getSignerInfo(ConstructedTlvDataObject eContent){
  TlvDataObject version=new PrimitiveTlvDataObject(new TlvTag(Asn1.INTEGER),new byte[]{0x01});
  TlvDataObject sid=getSid();
  TlvDataObject digestAlgorithm=getDigestAlgorithm();
  TlvDataObject signedAttrs=getSignedAttrs(eContent);
  TlvDataObject signatureAlgorithm=new ConstructedTlvDataObject(HexString.toByteArray(""String_Node_Str""));
  byte[] signatureBytes;
  if (signedAttrs != null) {
    byte[] sigInput=signedAttrs.toByteArray();
    sigInput[0]=Asn1.SET;
    signatureBytes=getSignature(sigInput);
  }
 else {
    signatureBytes=getSignature(eContent.toByteArray());
  }
  TlvDataObject signature=new PrimitiveTlvDataObject(TAG_OCTET_STRING,signatureBytes);
  ConstructedTlvDataObject signerInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
  signerInfo.addTlvDataObject(version);
  signerInfo.addTlvDataObject(sid);
  signerInfo.addTlvDataObject(digestAlgorithm);
  signerInfo.addTlvDataObject(signedAttrs);
  signerInfo.addTlvDataObject(signatureAlgorithm);
  signerInfo.addTlvDataObject(signature);
  return signerInfo;
}",0.9973574933937336
142418,"@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}","@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}",0.5080385852090032
142419,"@Override public Collection<String> getSupportedProfiles(){
  HashSet<String> retVal=new HashSet<String>();
  retVal.add(GtConstants.PROFILE_CA2);
  retVal.add(GtConstants.PROFILE_ECDH);
  retVal.add(GtConstants.PROFILE_PACE);
  retVal.add(GtConstants.PROFILE_PACE_CAN);
  retVal.add(GtConstants.PROFILE_PACE_ECDH);
  retVal.add(GtConstants.PROFILE_PACE_GM);
  retVal.add(GtConstants.PROFILE_TA2);
  retVal.add(GtConstants.PROFILE_EPASSPORT);
  retVal.add(GtConstants.PROFILE_eID);
  retVal.add(GtConstants.PROFILE_MIG);
  retVal.add(GtConstants.PROFILE_ECDSA);
  retVal.add(GtConstants.PROFILE_EPASSPORT_DG3);
  retVal.add(GtConstants.PROFILE_EPASSPORT_DG4);
  retVal.add(GtConstants.PROFILE_RI);
  retVal.add(GtConstants.PROFILE_AUX);
  retVal.add(GtConstants.PROFILE_CNG_PIN_PUK);
  retVal.add(GtConstants.PROFILE_CNG_PIN_AR);
  retVal.add(GtConstants.PROFILE_CNG_CAN_AR);
  retVal.add(GtConstants.PROFILE_eID_DG1);
  retVal.add(GtConstants.PROFILE_eID_DG2);
  retVal.add(GtConstants.PROFILE_eID_DG3);
  retVal.add(GtConstants.PROFILE_eID_DG4);
  retVal.add(GtConstants.PROFILE_eID_DG5);
  retVal.add(GtConstants.PROFILE_eID_DG6);
  retVal.add(GtConstants.PROFILE_eID_DG7);
  retVal.add(GtConstants.PROFILE_eID_DG8);
  retVal.add(GtConstants.PROFILE_eID_DG9);
  retVal.add(GtConstants.PROFILE_eID_DG13);
  retVal.add(GtConstants.PROFILE_eID_DG17);
  retVal.add(GtConstants.PROFILE_eID_DG18);
  return retVal;
}","@Override public Collection<String> getSupportedProfiles(){
  HashSet<String> retVal=new HashSet<String>();
  retVal.add(GtConstants.PROFILE_CA2);
  retVal.add(GtConstants.PROFILE_CS);
  retVal.add(GtConstants.PROFILE_ECDH);
  retVal.add(GtConstants.PROFILE_PACE);
  retVal.add(GtConstants.PROFILE_PACE_CAN);
  retVal.add(GtConstants.PROFILE_PACE_ECDH);
  retVal.add(GtConstants.PROFILE_PACE_GM);
  retVal.add(GtConstants.PROFILE_TA2);
  retVal.add(GtConstants.PROFILE_EPASSPORT);
  retVal.add(GtConstants.PROFILE_eID);
  retVal.add(GtConstants.PROFILE_MIG);
  retVal.add(GtConstants.PROFILE_ECDSA);
  retVal.add(GtConstants.PROFILE_EPASSPORT_DG3);
  retVal.add(GtConstants.PROFILE_EPASSPORT_DG4);
  retVal.add(GtConstants.PROFILE_RI);
  retVal.add(GtConstants.PROFILE_AUX);
  retVal.add(GtConstants.PROFILE_CNG_PIN_PUK);
  retVal.add(GtConstants.PROFILE_CNG_PIN_AR);
  retVal.add(GtConstants.PROFILE_CNG_CAN_AR);
  retVal.add(GtConstants.PROFILE_eID_DG1);
  retVal.add(GtConstants.PROFILE_eID_DG2);
  retVal.add(GtConstants.PROFILE_eID_DG3);
  retVal.add(GtConstants.PROFILE_eID_DG4);
  retVal.add(GtConstants.PROFILE_eID_DG5);
  retVal.add(GtConstants.PROFILE_eID_DG6);
  retVal.add(GtConstants.PROFILE_eID_DG7);
  retVal.add(GtConstants.PROFILE_eID_DG8);
  retVal.add(GtConstants.PROFILE_eID_DG9);
  retVal.add(GtConstants.PROFILE_eID_DG13);
  retVal.add(GtConstants.PROFILE_eID_DG17);
  retVal.add(GtConstants.PROFILE_eID_DG18);
  return retVal;
}",0.986731843575419
142420,"@Override public void process(ProcessingData processingData){
  byte cla=processingData.getCommandApdu().getCla();
  byte ins=processingData.getCommandApdu().getIns();
  if (cla == (byte)0xff && ins == INS_86_GENERAL_AUTHENTICATE) {
    processInitPaceBypass(processingData);
  }
 else   if (cla != 0xff && ((cla & 0x03) == 0x03)) {
    processSm(processingData);
  }
}","@Override public void process(ProcessingData processingData){
  byte cla=processingData.getCommandApdu().getCla();
  byte ins=processingData.getCommandApdu().getIns();
  if (cla == (byte)0xff && ins == INS_86_GENERAL_AUTHENTICATE) {
    processInitPaceBypass(processingData);
  }
 else {
    processSm(processingData);
  }
}",0.935064935064935
142421,"/** 
 * Handle pseudo SM APDU. <p/> After PACE was successfully initialized through  {@link #processInitPaceBypass(ProcessingData)} pseudo SM is initiated,that does not provide any kind of security. This is indicated by usage of the otherwise unused logical Channel 3 e.g. the lowest two bits of CLA are set. <p/> This method removes these flagging bits and ensures that the ""decoded"" commandApdu correctly returns on {@link IsoSecureMessagingCommandApdu#wasSecureMessaging()}<p/> Responses are simply returned in plain. Pseudo SM is aborted when an SM 6987 or 6988 is returned or whenever a plain (unflagged) APDU is transmitted.
 */
private void processSm(ProcessingData processingData){
  CommandApdu commandApdu=processingData.getCommandApdu();
  byte cla=commandApdu.getCla();
  if ((cla & 0x03) != 0x03) {
    if (pseudoSmIsActive) {
      log(this,""String_Node_Str"");
      pseudoSmIsActive=false;
      processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
    }
  }
  if (!pseudoSmIsActive) {
    return;
  }
  SmMarkerApdu smMarkerApdu=new SmMarkerApdu(commandApdu);
  processingData.updateCommandApdu(this,""String_Node_Str"",smMarkerApdu);
  byte[] apduBytes=commandApdu.toByteArray();
  apduBytes[0]&=(byte)0xFC;
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes,smMarkerApdu));
}","/** 
 * Handle pseudo SM APDU. <p/> After PACE was successfully initialized through  {@link #processInitPaceBypass(ProcessingData)} pseudo SM is initiated,that does not provide any kind of security. This is indicated by usage of the otherwise unused logical Channel 3 e.g. the lowest two bits of CLA are set. <p/> This method removes these flagging bits and ensures that the ""decoded"" commandApdu correctly returns on {@link IsoSecureMessagingCommandApdu#wasSecureMessaging()}<p/> Responses are simply returned in plain. Pseudo SM is aborted when an SM 6987 or 6988 is returned or whenever a plain (unflagged) APDU is transmitted.
 */
private void processSm(ProcessingData processingData){
  CommandApdu commandApdu=processingData.getCommandApdu();
  byte cla=commandApdu.getCla();
  if ((cla & 0x03) != 0x03) {
    if (pseudoSmIsActive) {
      if (!(commandApdu instanceof IsoSecureMessagingCommandApdu) || !((IsoSecureMessagingCommandApdu)commandApdu).wasSecureMessaging()) {
        log(this,""String_Node_Str"");
        pseudoSmIsActive=false;
        processingData.addUpdatePropagation(this,""String_Node_Str"",new ProtocolUpdate(true));
      }
    }
    return;
  }
  if (!pseudoSmIsActive) {
    return;
  }
  SmMarkerApdu smMarkerApdu=new SmMarkerApdu(commandApdu);
  processingData.updateCommandApdu(this,""String_Node_Str"",smMarkerApdu);
  byte[] apduBytes=commandApdu.toByteArray();
  apduBytes[0]&=(byte)0xFC;
  processingData.updateCommandApdu(this,""String_Node_Str"",CommandApduFactory.createCommandApdu(apduBytes,smMarkerApdu));
}",0.9435124957206436
142422,"@Override public void reset(){
  pseudoSmIsActive=false;
}","@Override public void reset(){
}",0.7111111111111111
142423,"/** 
 * Try to initiate a Pace Bypass <p>
 */
private void processInitPaceBypass(ProcessingData processingData){
  TlvDataObjectContainer commandData=processingData.getCommandApdu().getCommandDataObjectContainer();
  PasswordAuthObject passwordObject;
  TlvDataObject tlvObject=commandData.getTlvDataObject(TAG_83);
  CardObject pwdCandidate=cardState.getObject(new AuthObjectIdentifier(tlvObject.getValueField()),Scope.FROM_MF);
  if (pwdCandidate instanceof PasswordAuthObject) {
    passwordObject=(PasswordAuthObject)pwdCandidate;
    log(this,""String_Node_Str"" + AbstractPaceProtocol.getPasswordName(passwordObject.getPasswordIdentifier()),DEBUG);
  }
 else {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A88_REFERENCE_DATA_NOT_FOUND);
    processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  tlvObject=commandData.getTlvDataObject(TAG_92);
  if (tlvObject == null) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A80_WRONG_DATA);
    processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  byte[] providedPassword=tlvObject.getValueField();
  CertificateHolderAuthorizationTemplate usedChat=null;
  TrustPointCardObject trustPoint=null;
  tlvObject=commandData.getTlvDataObject(TAG_7F4C);
  if (tlvObject != null) {
    ConstructedTlvDataObject chatData=(ConstructedTlvDataObject)tlvObject;
    TlvDataObject oidData=chatData.getTlvDataObject(TAG_06);
    byte[] roleData=chatData.getTlvDataObject(TAG_53).getValueField();
    TaOid chatOid=new TaOid(oidData.getValueField());
    RelativeAuthorization authorization=new RelativeAuthorization(CertificateRole.getFromMostSignificantBits(roleData[0]),BitField.buildFromBigEndian((roleData.length * 8) - 2,roleData));
    usedChat=new CertificateHolderAuthorizationTemplate(chatOid,authorization);
    TerminalType terminalType=usedChat.getTerminalType();
    trustPoint=(TrustPointCardObject)cardState.getObject(new TrustPointIdentifier(terminalType),Scope.FROM_MF);
    if (!AbstractPaceProtocol.checkPasswordAndAccessRights(usedChat,passwordObject)) {
      ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A80_WRONG_DATA);
      processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
      return;
    }
  }
  boolean paceSuccessful;
  short sw;
  String note;
  if (Arrays.equals(providedPassword,passwordObject.getPassword())) {
    log(this,""String_Node_Str"",DEBUG);
    if (passwordObject instanceof PasswordAuthObjectWithRetryCounter) {
      ResponseData pinResponse=AbstractPaceProtocol.getMutualAuthenticatePinManagementResponsePaceSuccessful(passwordObject,cardState);
      sw=pinResponse.getStatusWord();
      note=pinResponse.getResponse();
      paceSuccessful=!Iso7816Lib.isReportingError(sw);
    }
 else {
      sw=Iso7816.SW_9000_NO_ERROR;
      note=""String_Node_Str"";
      paceSuccessful=true;
    }
  }
 else {
    log(this,""String_Node_Str"",DEBUG);
    paceSuccessful=false;
    if (passwordObject.getPasswordIdentifier() == Pace.PWD_PIN) {
      ResponseData pinResponse=AbstractPaceProtocol.getMutualAuthenticatePinManagementResponsePaceFailed((PasswordAuthObjectWithRetryCounter)passwordObject);
      sw=pinResponse.getStatusWord();
      note=pinResponse.getResponse();
    }
 else {
      sw=Iso7816.SW_6A80_WRONG_DATA;
      note=""String_Node_Str"";
    }
  }
  ResponseApdu responseApdu;
  if (paceSuccessful) {
    TlvDataObjectContainer responseObjects=new TlvDataObjectContainer();
    byte[] compEphermeralPublicKey=HexString.toByteArray(""String_Node_Str"");
    TlvDataObject primitive86=new PrimitiveTlvDataObject(TAG_86,compEphermeralPublicKey);
    responseObjects.addTlvDataObject(primitive86);
    if (trustPoint != null) {
      if (trustPoint.getCurrentCertificate() != null && trustPoint.getCurrentCertificate().getCertificateHolderReference() instanceof PublicKeyReference) {
        responseObjects.addTlvDataObject(new PrimitiveTlvDataObject(TAG_87,trustPoint.getCurrentCertificate().getCertificateHolderReference().getBytes()));
        if (trustPoint.getPreviousCertificate() != null && trustPoint.getPreviousCertificate().getCertificateHolderReference() instanceof PublicKeyReference) {
          responseObjects.addTlvDataObject(new PrimitiveTlvDataObject(TAG_88,trustPoint.getPreviousCertificate().getCertificateHolderReference().getBytes()));
        }
      }
    }
    TlvValue responseData=new TlvDataObjectContainer(responseObjects);
    PaceMechanism paceMechanism=new PaceMechanism(passwordObject,compEphermeralPublicKey,usedChat);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new SecStatusMechanismUpdatePropagation(SecContext.APPLICATION,paceMechanism));
    responseApdu=new ResponseApdu(responseData,sw);
    processingData.updateResponseAPDU(this,""String_Node_Str"",responseApdu);
  }
 else {
    responseApdu=new ResponseApdu(sw);
  }
  processingData.updateResponseAPDU(this,note,responseApdu);
}","/** 
 * Try to initiate a Pace Bypass <p>
 */
private void processInitPaceBypass(ProcessingData processingData){
  TlvDataObjectContainer commandData=processingData.getCommandApdu().getCommandDataObjectContainer();
  PasswordAuthObject passwordObject;
  TlvDataObject tlvObject=commandData.getTlvDataObject(TAG_83);
  CardObject pwdCandidate=cardState.getObject(new AuthObjectIdentifier(tlvObject.getValueField()),Scope.FROM_MF);
  if (pwdCandidate instanceof PasswordAuthObject) {
    passwordObject=(PasswordAuthObject)pwdCandidate;
    log(this,""String_Node_Str"" + AbstractPaceProtocol.getPasswordName(passwordObject.getPasswordIdentifier()),DEBUG);
  }
 else {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A88_REFERENCE_DATA_NOT_FOUND);
    processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  tlvObject=commandData.getTlvDataObject(TAG_92);
  if (tlvObject == null) {
    ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A80_WRONG_DATA);
    processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
    return;
  }
  byte[] providedPassword=tlvObject.getValueField();
  CertificateHolderAuthorizationTemplate usedChat=null;
  TrustPointCardObject trustPoint=null;
  tlvObject=commandData.getTlvDataObject(TAG_7F4C);
  if (tlvObject != null) {
    ConstructedTlvDataObject chatData=(ConstructedTlvDataObject)tlvObject;
    TlvDataObject oidData=chatData.getTlvDataObject(TAG_06);
    byte[] roleData=chatData.getTlvDataObject(TAG_53).getValueField();
    TaOid chatOid=new TaOid(oidData.getValueField());
    RelativeAuthorization authorization=new RelativeAuthorization(CertificateRole.getFromMostSignificantBits(roleData[0]),BitField.buildFromBigEndian((roleData.length * 8) - 2,roleData));
    usedChat=new CertificateHolderAuthorizationTemplate(chatOid,authorization);
    TerminalType terminalType=usedChat.getTerminalType();
    trustPoint=(TrustPointCardObject)cardState.getObject(new TrustPointIdentifier(terminalType),Scope.FROM_MF);
    if (!AbstractPaceProtocol.checkPasswordAndAccessRights(usedChat,passwordObject)) {
      ResponseApdu resp=new ResponseApdu(Iso7816.SW_6A80_WRONG_DATA);
      processingData.updateResponseAPDU(this,""String_Node_Str"",resp);
      return;
    }
  }
  boolean paceSuccessful;
  short sw;
  String note;
  if (Arrays.equals(providedPassword,passwordObject.getPassword())) {
    log(this,""String_Node_Str"",DEBUG);
    if (passwordObject instanceof PasswordAuthObjectWithRetryCounter) {
      ResponseData pinResponse=AbstractPaceProtocol.getMutualAuthenticatePinManagementResponsePaceSuccessful(passwordObject,cardState);
      sw=pinResponse.getStatusWord();
      note=pinResponse.getResponse();
      paceSuccessful=!Iso7816Lib.isReportingError(sw);
    }
 else {
      sw=Iso7816.SW_9000_NO_ERROR;
      note=""String_Node_Str"";
      paceSuccessful=true;
    }
  }
 else {
    log(this,""String_Node_Str"",DEBUG);
    paceSuccessful=false;
    if (passwordObject.getPasswordIdentifier() == Pace.PWD_PIN) {
      ResponseData pinResponse=AbstractPaceProtocol.getMutualAuthenticatePinManagementResponsePaceFailed((PasswordAuthObjectWithRetryCounter)passwordObject);
      sw=pinResponse.getStatusWord();
      note=pinResponse.getResponse();
    }
 else {
      sw=Iso7816.SW_6A80_WRONG_DATA;
      note=""String_Node_Str"";
    }
  }
  ResponseApdu responseApdu;
  if (paceSuccessful) {
    TlvDataObjectContainer responseObjects=new TlvDataObjectContainer();
    byte[] compEphermeralPublicKey=HexString.toByteArray(""String_Node_Str"");
    TlvDataObject primitive86=new PrimitiveTlvDataObject(TAG_86,compEphermeralPublicKey);
    responseObjects.addTlvDataObject(primitive86);
    if (trustPoint != null) {
      if (trustPoint.getCurrentCertificate() != null && trustPoint.getCurrentCertificate().getCertificateHolderReference() instanceof PublicKeyReference) {
        responseObjects.addTlvDataObject(new PrimitiveTlvDataObject(TAG_87,trustPoint.getCurrentCertificate().getCertificateHolderReference().getBytes()));
        if (trustPoint.getPreviousCertificate() != null && trustPoint.getPreviousCertificate().getCertificateHolderReference() instanceof PublicKeyReference) {
          responseObjects.addTlvDataObject(new PrimitiveTlvDataObject(TAG_88,trustPoint.getPreviousCertificate().getCertificateHolderReference().getBytes()));
        }
      }
    }
    TlvValue responseData=new TlvDataObjectContainer(responseObjects);
    pseudoSmIsActive=true;
    PaceMechanism paceMechanism=new PaceMechanism(passwordObject,compEphermeralPublicKey,usedChat);
    processingData.addUpdatePropagation(this,""String_Node_Str"",new SecStatusMechanismUpdatePropagation(SecContext.APPLICATION,paceMechanism));
    responseApdu=new ResponseApdu(responseData,sw);
    processingData.updateResponseAPDU(this,""String_Node_Str"",responseApdu);
  }
 else {
    responseApdu=new ResponseApdu(sw);
  }
  processingData.updateResponseAPDU(this,note,responseApdu);
}",0.9972563763845138
142424,"private void configureGtServer() throws Exception {
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setSupportedProfiles(getSupportedProfiles());
  transmitPasswords();
}","private void configureGtServer() throws Exception {
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setSupportedProfiles(getSupportedProfiles());
  transmitPasswords();
  transmitEidData();
}",0.9817549956559514
142425,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate01();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile01();
  }
  return persoCache;
}",0.9072847682119204
142426,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate02();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile02();
  }
  return persoCache;
}",0.9072847682119204
142427,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate03();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile03();
  }
  return persoCache;
}",0.9072847682119204
142428,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate04();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile04();
  }
  return persoCache;
}",0.9072847682119204
142429,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate05();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile05();
  }
  return persoCache;
}",0.9072847682119204
142430,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate06();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile06();
  }
  return persoCache;
}",0.9072847682119204
142431,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate07();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile07();
  }
  return persoCache;
}",0.9072847682119204
142432,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate08();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile08();
  }
  return persoCache;
}",0.9072847682119204
142433,"@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new DefaultPersoTestPkiTemplate09();
  }
  return persoCache;
}","@Override public Personalization getPersonalization(){
  if (persoCache == null) {
    persoCache=new Profile09();
  }
  return persoCache;
}",0.9072847682119204
142434,"/** 
 * Filters the provided Collection of classes and returns a new Collection containing only those classes that are usable by JAXB (according to its Annotations).
 * @param allClasses Collection of classes to be searched
 * @return Collection containing the subset of classes from allClasses thatcontain JAXB Annotations
 */
private static Collection<Class<?>> getJaxbAnnotatedClasses(Collection<Class<?>> allClasses){
  ArrayList<Class<?>> annotatedClasses=new ArrayList<>();
  for (  Class<?> curClass : allClasses) {
    for (    Annotation curAnnotation : curClass.getAnnotations()) {
      if (curAnnotation.annotationType() == XmlRootElement.class) {
        annotatedClasses.add(curClass);
        System.out.println(""String_Node_Str"" + curClass.getName() + ""String_Node_Str"");
        break;
      }
    }
  }
  annotatedClasses.add(de.persosim.simulator.cardobjects.AuthObjectIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ByteDataAuxObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ChangeablePasswordAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DateAuxObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DateTimeCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DedicatedFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DedicatedFileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DomainParameterSetCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ElementaryFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.FileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.KeyObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MasterFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MasterFileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MrzAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.OidIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PasswordAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PasswordAuthObjectWithRetryCounter.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PinObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.TrustPointCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.TrustPointIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.crypto.certificates.CardVerifiableCertificate.class);
  annotatedClasses.add(de.persosim.simulator.crypto.DomainParameterSetEcdh.class);
  annotatedClasses.add(de.persosim.simulator.crypto.EcParameterSpecAdapter.EcParameterSpecRepresentation.class);
  annotatedClasses.add(de.persosim.simulator.perso.DefaultNpaUnmarshallerCallback.class);
  annotatedClasses.add(de.persosim.simulator.perso.DefaultSecInfoCmsBuilder.class);
  annotatedClasses.add(de.persosim.simulator.perso.SignedDataFileCache.class);
  annotatedClasses.add(de.persosim.simulator.perso.XmlPersonalization.class);
  annotatedClasses.add(de.persosim.simulator.protocols.auxVerification.AuxProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ca.CaOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ca.CaProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.file.FileProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.Oid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pace.PaceOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pace.PaceProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pin.PinProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ri.RiOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ri.RiProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.CertificateHolderAuthorizationTemplate.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.RelativeAuthorization.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.TaOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.TaProtocol.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.NullSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.PaceSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.PaceWithPasswordSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.TaSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.utils.BitField.class);
  return annotatedClasses;
}","/** 
 * Filters the provided Collection of classes and returns a new Collection containing only those classes that are usable by JAXB (according to its Annotations).
 * @param allClasses Collection of classes to be searched
 * @return Collection containing the subset of classes from allClasses thatcontain JAXB Annotations
 */
private static Collection<Class<?>> getJaxbAnnotatedClasses(Collection<Class<?>> allClasses){
  ArrayList<Class<?>> annotatedClasses=new ArrayList<>();
  for (  Class<?> curClass : allClasses) {
    for (    Annotation curAnnotation : curClass.getAnnotations()) {
      if (curAnnotation.annotationType() == XmlRootElement.class) {
        annotatedClasses.add(curClass);
        System.out.println(""String_Node_Str"" + curClass.getName() + ""String_Node_Str"");
        break;
      }
    }
  }
  annotatedClasses.add(de.persosim.simulator.cardobjects.AuthObjectIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ByteDataAuxObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ChangeablePasswordAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DateAuxObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DateTimeCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DedicatedFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DedicatedFileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.DomainParameterSetCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.ElementaryFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.FileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.KeyObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MasterFile.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MasterFileIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.MrzAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.OidIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PasswordAuthObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PasswordAuthObjectWithRetryCounter.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.PinObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.TrustPointCardObject.class);
  annotatedClasses.add(de.persosim.simulator.cardobjects.TrustPointIdentifier.class);
  annotatedClasses.add(de.persosim.simulator.crypto.certificates.CardVerifiableCertificate.class);
  annotatedClasses.add(de.persosim.simulator.crypto.DomainParameterSetEcdh.class);
  annotatedClasses.add(de.persosim.simulator.crypto.EcParameterSpecAdapter.EcParameterSpecRepresentation.class);
  annotatedClasses.add(de.persosim.simulator.perso.DefaultNpaUnmarshallerCallback.class);
  annotatedClasses.add(de.persosim.simulator.perso.DefaultSecInfoCmsBuilder.class);
  annotatedClasses.add(de.persosim.simulator.perso.SignedDataFileCache.class);
  annotatedClasses.add(de.persosim.simulator.perso.XmlPersonalization.class);
  annotatedClasses.add(de.persosim.simulator.protocols.NpaProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.auxVerification.AuxProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ca.CaOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ca.CaProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.file.FileProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.Oid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pace.PaceOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pace.PaceProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.pin.PinProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ri.RiOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ri.RiProtocol.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.CertificateHolderAuthorizationTemplate.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.RelativeAuthorization.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.TaOid.class);
  annotatedClasses.add(de.persosim.simulator.protocols.ta.TaProtocol.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.NullSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.PaceSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.PaceWithPasswordSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.secstatus.TaSecurityCondition.class);
  annotatedClasses.add(de.persosim.simulator.utils.BitField.class);
  return annotatedClasses;
}",0.9920542430342196
142435,"@Override protected void buildProtocolList(){
  protocols=new ArrayList<>();
  PaceProtocol paceProtocol=new PaceProtocol();
  paceProtocol.init();
  protocols.add(paceProtocol);
  FileProtocol fileManagementProtocol=new FileProtocol();
  fileManagementProtocol.init();
  protocols.add(fileManagementProtocol);
  TaProtocol taProtocol=new TaProtocol();
  taProtocol.init();
  protocols.add(taProtocol);
  RiProtocol riProtocol=new RiProtocol();
  protocols.add(riProtocol);
  CaProtocol caProtocol=new CaProtocol();
  caProtocol.init();
  protocols.add(caProtocol);
  protocols.add(new AuxProtocol());
  PinProtocol pinProtocol=new PinProtocol();
  pinProtocol.init();
  protocols.add(pinProtocol);
}","@Override protected void buildProtocolList(){
  protocols=new ArrayList<>();
  PaceProtocol paceProtocol=new PaceProtocol();
  paceProtocol.init();
  protocols.add(paceProtocol);
  FileProtocol fileManagementProtocol=new FileProtocol();
  fileManagementProtocol.init();
  protocols.add(fileManagementProtocol);
  TaProtocol taProtocol=new TaProtocol();
  taProtocol.init();
  protocols.add(taProtocol);
  RiProtocol riProtocol=new RiProtocol();
  protocols.add(riProtocol);
  CaProtocol caProtocol=new CaProtocol();
  caProtocol.init();
  protocols.add(caProtocol);
  protocols.add(new AuxProtocol());
  PinProtocol pinProtocol=new PinProtocol();
  pinProtocol.init();
  protocols.add(pinProtocol);
  protocols.add(new NpaProtocol());
}",0.9749303621169916
142436,"@Override public Collection<TlvDataObject> getSecInfos(SecInfoPublicity publicity,MasterFile mf){
  OidIdentifier caOidIdentifier=new OidIdentifier(OID_id_CA);
  Collection<CardObject> caKeyCardObjects=mf.findChildren(new KeyIdentifier(),caOidIdentifier);
  ArrayList<TlvDataObject> secInfos=new ArrayList<>();
  ArrayList<TlvDataObject> privKeysPublicKeyInfos=new ArrayList<>();
  ArrayList<TlvDataObject> unprivKeysPublicKeyInfos=new ArrayList<>();
  for (  CardObject curKey : caKeyCardObjects) {
    if (!(curKey instanceof KeyObject)) {
      continue;
    }
    Collection<CardObjectIdentifier> identifiers=curKey.getAllIdentifiers();
    int keyId=-1;
    for (    CardObjectIdentifier curIdentifier : identifiers) {
      if (curIdentifier instanceof KeyIdentifier) {
        keyId=((KeyIdentifier)curIdentifier).getKeyReference();
        break;
      }
    }
    if (keyId == -1)     continue;
    byte[] genericCaOidBytes=null;
    for (    CardObjectIdentifier curIdentifier : identifiers) {
      if (caOidIdentifier.matches(curIdentifier)) {
        byte[] oidBytes=((OidIdentifier)curIdentifier).getOid().toByteArray();
        genericCaOidBytes=Arrays.copyOfRange(oidBytes,0,9);
        ConstructedTlvDataObject caInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,oidBytes));
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{2}));
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
        secInfos.add(caInfo);
      }
    }
    ConstructedTlvDataObject encKey=new ConstructedTlvDataObject(((KeyObject)curKey).getKeyPair().getPublic().getEncoded());
    ConstructedTlvDataObject algIdentifier=(ConstructedTlvDataObject)encKey.getTlvDataObject(TAG_SEQUENCE);
    TlvDataObject subjPubKey=encKey.getTlvDataObject(TAG_BIT_STRING);
    algIdentifier=StandardizedDomainParameters.simplifyAlgorithmIdentifier(algIdentifier);
    ConstructedTlvDataObject caDomainInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    caDomainInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,genericCaOidBytes));
    caDomainInfo.addTlvDataObject(algIdentifier);
    caDomainInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
    secInfos.add(caDomainInfo);
    ConstructedTlvDataObject subjPubKeyInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    subjPubKeyInfo.addTlvDataObject(algIdentifier);
    subjPubKeyInfo.addTlvDataObject(subjPubKey);
    if ((publicity == SecInfoPublicity.AUTHENTICATED) || (publicity == SecInfoPublicity.PRIVILEGED)) {
      ConstructedTlvDataObject caPublicKeyInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
      caPublicKeyInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,Utils.concatByteArrays(Tr03110.id_PK,new byte[]{genericCaOidBytes[8]})));
      caPublicKeyInfo.addTlvDataObject(subjPubKeyInfo);
      caPublicKeyInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
      secInfos.add(caPublicKeyInfo);
      if (((KeyObject)curKey).isPrivilegedOnly()) {
        privKeysPublicKeyInfos.add(caPublicKeyInfo);
      }
 else {
        unprivKeysPublicKeyInfos.add(caPublicKeyInfo);
      }
    }
  }
  if ((publicity == SecInfoPublicity.AUTHENTICATED) || (publicity == SecInfoPublicity.PRIVILEGED)) {
    secInfos.addAll(unprivKeysPublicKeyInfos);
  }
  if ((publicity == SecInfoPublicity.PRIVILEGED)) {
    ConstructedTlvDataObject privilegedTerminalInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    privilegedTerminalInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,Tr03110.id_PT));
    ConstructedTlvDataObject privKeys=new ConstructedTlvDataObject(TAG_SET);
    privKeys.addAll(privKeysPublicKeyInfos);
    privilegedTerminalInfo.addTlvDataObject(privKeys);
    secInfos.add(privilegedTerminalInfo);
  }
  return secInfos;
}","@Override public Collection<TlvDataObject> getSecInfos(SecInfoPublicity publicity,MasterFile mf){
  OidIdentifier caOidIdentifier=new OidIdentifier(OID_id_CA);
  Collection<CardObject> caKeyCardObjects=mf.findChildren(new KeyIdentifier(),caOidIdentifier);
  ArrayList<TlvDataObject> secInfos=new ArrayList<>();
  ArrayList<TlvDataObject> privilegedSecInfos=new ArrayList<>();
  ArrayList<TlvDataObject> unprivilegedPublicKeyInfos=new ArrayList<>();
  ArrayList<TlvDataObject> privilegedPublicKeyInfos=new ArrayList<>();
  for (  CardObject curObject : caKeyCardObjects) {
    if (!(curObject instanceof KeyObject)) {
      continue;
    }
    KeyObject curKey=(KeyObject)curObject;
    Collection<CardObjectIdentifier> identifiers=curKey.getAllIdentifiers();
    int keyId=-1;
    for (    CardObjectIdentifier curIdentifier : identifiers) {
      if (curIdentifier instanceof KeyIdentifier) {
        keyId=((KeyIdentifier)curIdentifier).getKeyReference();
        break;
      }
    }
    if (keyId == -1)     continue;
    byte[] genericCaOidBytes=null;
    for (    CardObjectIdentifier curIdentifier : identifiers) {
      if (caOidIdentifier.matches(curIdentifier)) {
        byte[] oidBytes=((OidIdentifier)curIdentifier).getOid().toByteArray();
        genericCaOidBytes=Arrays.copyOfRange(oidBytes,0,9);
        ConstructedTlvDataObject caInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,oidBytes));
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{2}));
        caInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
        if (curKey.isPrivilegedOnly()) {
          privilegedSecInfos.add(caInfo);
        }
 else {
          secInfos.add(caInfo);
        }
      }
    }
    ConstructedTlvDataObject encKey=new ConstructedTlvDataObject(curKey.getKeyPair().getPublic().getEncoded());
    ConstructedTlvDataObject algIdentifier=(ConstructedTlvDataObject)encKey.getTlvDataObject(TAG_SEQUENCE);
    TlvDataObject subjPubKey=encKey.getTlvDataObject(TAG_BIT_STRING);
    algIdentifier=StandardizedDomainParameters.simplifyAlgorithmIdentifier(algIdentifier);
    ConstructedTlvDataObject caDomainInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    caDomainInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,genericCaOidBytes));
    caDomainInfo.addTlvDataObject(algIdentifier);
    caDomainInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
    if (curKey.isPrivilegedOnly()) {
      privilegedSecInfos.add(caDomainInfo);
    }
 else {
      secInfos.add(caDomainInfo);
    }
    ConstructedTlvDataObject subjPubKeyInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    subjPubKeyInfo.addTlvDataObject(algIdentifier);
    subjPubKeyInfo.addTlvDataObject(subjPubKey);
    if ((publicity == SecInfoPublicity.AUTHENTICATED) || (publicity == SecInfoPublicity.PRIVILEGED)) {
      ConstructedTlvDataObject caPublicKeyInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
      caPublicKeyInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,Utils.concatByteArrays(Tr03110.id_PK,new byte[]{genericCaOidBytes[8]})));
      caPublicKeyInfo.addTlvDataObject(subjPubKeyInfo);
      caPublicKeyInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_INTEGER,new byte[]{(byte)keyId}));
      if (curKey.isPrivilegedOnly()) {
        privilegedPublicKeyInfos.add(caPublicKeyInfo);
      }
 else {
        unprivilegedPublicKeyInfos.add(caPublicKeyInfo);
      }
    }
  }
  if ((publicity == SecInfoPublicity.AUTHENTICATED) || (publicity == SecInfoPublicity.PRIVILEGED)) {
    secInfos.addAll(unprivilegedPublicKeyInfos);
  }
  if (privilegedSecInfos.size() + privilegedPublicKeyInfos.size() > 0) {
    ConstructedTlvDataObject privilegedTerminalInfo=new ConstructedTlvDataObject(TAG_SEQUENCE);
    privilegedTerminalInfo.addTlvDataObject(new PrimitiveTlvDataObject(TAG_OID,Tr03110.id_PT));
    ConstructedTlvDataObject privilegedTerminaInfoSet=new ConstructedTlvDataObject(TAG_SET);
    privilegedTerminalInfo.addTlvDataObject(privilegedTerminaInfoSet);
    privilegedTerminaInfoSet.addAll(privilegedSecInfos);
    if ((publicity == SecInfoPublicity.PRIVILEGED)) {
      privilegedTerminaInfoSet.addAll(privilegedPublicKeyInfos);
    }
    secInfos.add(privilegedTerminalInfo);
  }
  return secInfos;
}",0.8383508644662072
142437,"private void configureGtServer() throws Exception {
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setSupportedProfiles(getSupportedProfiles());
  transmitPasswords();
}","private void configureGtServer() throws Exception {
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_TESTMANAGER,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setPreferences(GtServerConnection.PREF_QUALIFIER_LOGGING,""String_Node_Str"",""String_Node_Str"");
  gtServer.setSupportedProfiles(getSupportedProfiles());
  transmitPasswords();
  transmitEidData();
}",0.9817549956559514
142438,"@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(GtConstants.SUITE_EAC2_ISO7816_M);
  retVal.add(GtConstants.SUITE_EAC2_ISO7816_N);
  retVal.add(new SimulatorReset());
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}","@Override public Collection<JobDescriptor> getAllApplicableGtTests(){
  Collection<JobDescriptor> retVal=new ArrayList<JobDescriptor>();
  retVal.add(new GtSuiteDescriptor(GtConstants.PROJECT_EPA_EAC2_BSI,""String_Node_Str""));
  return retVal;
}",0.7870967741935484
142439,"@Override protected void addAuxData(){
  byte[] communityId;
  initPersonalizationDataContainer();
  try {
    communityId=persoDataContainer.getDg18PlainData().getBytes(""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    communityId=new byte[0];
  }
  Date dateOfBirth=Utils.getDate(persoDataContainer.getDg8PlainData(),Utils.DATE_SET_MAX_VALUE);
  Date validityDate=Utils.getDate(persoDataContainer.getDg3PlainData());
  mf.addChild(new ByteDataAuxObject(new OidIdentifier(TaOid.id_CommunityID),communityId));
  mf.addChild(new DateAuxObject(new OidIdentifier(TaOid.id_DateOfBirth),dateOfBirth));
  mf.addChild(new DateAuxObject(new OidIdentifier(TaOid.id_DateOfExpiry),validityDate));
}","@Override protected void addAuxData(){
  initPersonalizationDataContainer();
  byte[] communityId=HexString.toByteArray(persoDataContainer.getDg18PlainData());
  mf.addChild(new ByteDataAuxObject(new OidIdentifier(TaOid.id_CommunityID),communityId));
  Date dateOfBirth=Utils.getDate(persoDataContainer.getDg8PlainData(),Utils.DATE_SET_MAX_VALUE);
  mf.addChild(new DateAuxObject(new OidIdentifier(TaOid.id_DateOfBirth),dateOfBirth));
  Date validityDate=Utils.getDate(persoDataContainer.getDg3PlainData());
  mf.addChild(new DateAuxObject(new OidIdentifier(TaOid.id_DateOfExpiry),validityDate));
}",0.5615615615615616
142440,"/** 
 * Add the eID application to the card and fill it with content
 */
protected void addEidApplication(){
  DedicatedFile eIdAppl=new DedicatedFile(null,new DedicatedFileIdentifier(HexString.toByteArray(""String_Node_Str"")));
  mf.addChild(eIdAppl);
  addEidDg1(eIdAppl);
  addEidDg2(eIdAppl);
  addEidDg3(eIdAppl);
  addEidDg4(eIdAppl);
  addEidDg5(eIdAppl);
  addEidDg6(eIdAppl);
  addEidDg7(eIdAppl);
  addEidDg8(eIdAppl);
  addEidDg9(eIdAppl);
  addEidDg10(eIdAppl);
  addEidDg11(eIdAppl);
  addEidDg12(eIdAppl);
  addEidDg13(eIdAppl);
  addEidDg17(eIdAppl);
  addEidDg18(eIdAppl);
  addEidDg19(eIdAppl);
  addEidDg20(eIdAppl);
  addEidDg21(eIdAppl);
}","/** 
 * Add the eID application to the card and fill it with content
 */
protected void addEidApplication(){
  DedicatedFile eIdAppl=new DedicatedFile(null,new DedicatedFileIdentifier(HexString.toByteArray(AID_EID)));
  mf.addChild(eIdAppl);
  addEidDg1(eIdAppl);
  addEidDg2(eIdAppl);
  addEidDg3(eIdAppl);
  addEidDg4(eIdAppl);
  addEidDg5(eIdAppl);
  addEidDg6(eIdAppl);
  addEidDg7(eIdAppl);
  addEidDg8(eIdAppl);
  addEidDg9(eIdAppl);
  addEidDg10(eIdAppl);
  addEidDg11(eIdAppl);
  addEidDg12(eIdAppl);
  addEidDg13(eIdAppl);
  addEidDg17(eIdAppl);
  addEidDg18(eIdAppl);
  addEidDg19(eIdAppl);
  addEidDg20(eIdAppl);
  addEidDg21(eIdAppl);
}",0.9831546707503828
142441,"/** 
 * This method creates a   {@link Date} object from a {@link String} representation with respect to year, month and day.The provided String is expected to be exactly 8 characters long and encoded as follows: YYYYMMDD. If the String parts for month or day contain non-numeric characters, they will be handled according to the second provided parameter: -1: the minimum possible value will be chosen 0: a NumberFormatException will be thrown 1: the maximum possible value will be chosen Well formatted date strings will not be checked for validity, e.g. december 34th would not be discarded.
 * @param dateString the date encoded as follows: YYYYMMDD
 * @param handleNonNumericCharacters determine how non-numeric characters will be handled
 * @return a {@link Date} object
 */
public static Date getDate(String dateString,byte handleNonNumericCharacters){
  if (dateString == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (dateString.length() != 8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Calendar calendar=Calendar.getInstance();
  int year=Integer.parseInt(dateString.substring(0,4));
  calendar.set(Calendar.YEAR,year);
  int month, day;
  try {
    month=Integer.parseInt(dateString.substring(4,6));
  }
 catch (  NumberFormatException e) {
switch (handleNonNumericCharacters) {
case -1:
      month=Calendar.JANUARY;
    break;
case 0:
  throw e;
case 1:
month=Calendar.DECEMBER;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
calendar.set(Calendar.MONTH,month);
try {
day=Integer.parseInt(dateString.substring(6,8));
}
 catch (NumberFormatException e) {
switch (handleNonNumericCharacters) {
case -1:
day=1;
break;
case 0:
throw e;
case 1:
day=calendar.getActualMaximum(Calendar.DATE);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
calendar.set(Calendar.DATE,day);
calendar.set(Calendar.HOUR_OF_DAY,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime();
}","/** 
 * This method creates a   {@link Date} object from a {@link String} representation with respect to year, month and day.The provided String is expected to be exactly 8 characters long and encoded as follows: YYYYMMDD. If the String parts for month or day contain non-numeric characters, they will be handled according to the second provided parameter: -1: the minimum possible value will be chosen 0: a NumberFormatException will be thrown 1: the maximum possible value will be chosen Well formatted date strings will not be checked for validity, e.g. december 34th would not be discarded.
 * @param dateString the date encoded as follows: YYYYMMDD
 * @param handleNonNumericCharacters determine how non-numeric characters will be handled
 * @return a {@link Date} object
 */
public static Date getDate(String dateString,byte handleNonNumericCharacters){
  if (dateString == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (dateString.length() != 8) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Calendar calendar=Calendar.getInstance();
  int year=Integer.parseInt(dateString.substring(0,4));
  calendar.set(Calendar.YEAR,year);
  int month, day;
  try {
    month=Integer.parseInt(dateString.substring(4,6));
  }
 catch (  NumberFormatException e) {
switch (handleNonNumericCharacters) {
case -1:
      month=Calendar.JANUARY;
    break;
case 0:
  throw e;
case 1:
month=Calendar.DECEMBER;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
calendar.set(Calendar.MONTH,month - 1);
try {
day=Integer.parseInt(dateString.substring(6,8));
}
 catch (NumberFormatException e) {
switch (handleNonNumericCharacters) {
case -1:
day=1;
break;
case 0:
throw e;
case 1:
day=calendar.getActualMaximum(Calendar.DATE);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}
calendar.set(Calendar.DATE,day);
calendar.set(Calendar.HOUR_OF_DAY,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime();
}",0.9990286546867412
142442,"@Override public byte[] comp(PublicKey publicKey){
  ECPublicKey ecPublicKey;
  if (publicKey instanceof ECPublicKey) {
    ecPublicKey=(ECPublicKey)publicKey;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ECPoint publicPoint=ecPublicKey.getW();
  BigInteger publicPointX=publicPoint.getAffineX();
  ECField field=ecPublicKey.getParams().getCurve().getField();
  if (field instanceof ECFieldFp) {
    ECFieldFp fieldFp=(ECFieldFp)field;
    int expectedLength=(int)Math.ceil(Utils.logarithm(fieldFp.getP().doubleValue(),256));
    byte[] result=Utils.toUnsignedByteArray(publicPointX);
    if (result.length < expectedLength) {
      byte[] padding=new byte[expectedLength - result.length];
      result=Utils.concatByteArrays(result,padding);
    }
    return result;
  }
  return null;
}","@Override public byte[] comp(PublicKey publicKey){
  ECPublicKey ecPublicKey;
  if (publicKey instanceof ECPublicKey) {
    ecPublicKey=(ECPublicKey)publicKey;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ECPoint publicPoint=ecPublicKey.getW();
  BigInteger publicPointX=publicPoint.getAffineX();
  ECField field=ecPublicKey.getParams().getCurve().getField();
  if (field instanceof ECFieldFp) {
    ECFieldFp fieldFp=(ECFieldFp)field;
    int expectedLength=(int)Math.ceil(Utils.logarithm(fieldFp.getP().doubleValue(),256));
    byte[] result=Utils.toUnsignedByteArray(publicPointX);
    if (result.length < expectedLength) {
      byte[] padding=new byte[expectedLength - result.length];
      result=Utils.concatByteArrays(padding,result);
    }
    return result;
  }
  return null;
}",0.9841463414634146
142443,"@Override public byte[] comp(PublicKey publicKey){
  ECPublicKey ecPublicKey;
  if (publicKey instanceof ECPublicKey) {
    ecPublicKey=(ECPublicKey)publicKey;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ECPoint publicPoint=ecPublicKey.getW();
  BigInteger publicPointX=publicPoint.getAffineX();
  ECField field=ecPublicKey.getParams().getCurve().getField();
  if (field instanceof ECFieldFp) {
    ECFieldFp fieldFp=(ECFieldFp)field;
    int expectedLength=(int)Math.ceil(Utils.logarithm(fieldFp.getP().doubleValue(),256));
    byte[] result=Utils.toUnsignedByteArray(publicPointX);
    if (result.length < expectedLength) {
      byte[] padding=new byte[expectedLength - result.length];
      result=Utils.concatByteArrays(result,padding);
    }
    return result;
  }
  return null;
}","@Override public byte[] comp(PublicKey publicKey){
  ECPublicKey ecPublicKey;
  if (publicKey instanceof ECPublicKey) {
    ecPublicKey=(ECPublicKey)publicKey;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ECPoint publicPoint=ecPublicKey.getW();
  BigInteger publicPointX=publicPoint.getAffineX();
  ECField field=ecPublicKey.getParams().getCurve().getField();
  if (field instanceof ECFieldFp) {
    ECFieldFp fieldFp=(ECFieldFp)field;
    int expectedLength=(int)Math.ceil(Utils.logarithm(fieldFp.getP().doubleValue(),256));
    byte[] result=Utils.toUnsignedByteArray(publicPointX);
    if (result.length < expectedLength) {
      byte[] padding=new byte[expectedLength - result.length];
      result=Utils.concatByteArrays(padding,result);
    }
    return result;
  }
  return null;
}",0.9841463414634146
142444,"public Artifact resolveArtifact(String coord) throws ArtifactResolutionException {
  DefaultArtifact artifact=new DefaultArtifact(coord);
  return resolveArtifact(artifact);
}","public Artifact resolveArtifact(String coord){
  DefaultArtifact artifact=new DefaultArtifact(coord);
  return resolveArtifact(artifact);
}",0.8853503184713376
142445,"public Set<Artifact> resolveArtifacts(Set<String> coords) throws ArtifactResolutionException {
  Set<Artifact> result=new LinkedHashSet<Artifact>();
  for (  String coord : coords) {
    result.add(resolveArtifact(coord));
  }
  return result;
}","public Set<Artifact> resolveArtifacts(Set<String> coords){
  Set<Artifact> result=new LinkedHashSet<Artifact>();
  for (  String coord : coords) {
    Artifact artifact=resolveArtifact(coord);
    if (artifact != null) {
      result.add(artifact);
    }
  }
  return result;
}",0.3486590038314176
142446,"public AetherUtil(RepositorySystem repoSystem,RepositorySystemSession repoSession,List<RemoteRepository> remoteRepos,File localRepository){
  this.repoSystem=repoSystem;
  this.repoSession=repoSession;
  this.remoteRepos=remoteRepos;
  this.localRepository=localRepository;
}","public AetherUtil(RepositorySystem repoSystem,RepositorySystemSession repoSession,List<RemoteRepository> remoteRepos,File localRepository,Log log){
  this.repoSystem=repoSystem;
  this.repoSession=repoSession;
  this.remoteRepos=remoteRepos;
  this.localRepository=localRepository;
  this.log=log;
}",0.9581881533101044
142447,"public void execute() throws MojoExecutionException, MojoFailureException {
  aetherUtil=new AetherUtil(repoSystem,repoSession,remoteRepos,localRepo);
  try {
    Set<Artifact> featureArtifacts=new LinkedHashSet<Artifact>();
    featureArtifacts.addAll(aetherUtil.resolveDependencies(MvnToAetherMapper.toAether(project.getDependencies()),new KarafFeaturesDependencyFilter()));
    Set<Features> features=FeatureUtil.readFeatures(featureArtifacts);
    features.addAll(FeatureUtil.findAllFeaturesRecursively(aetherUtil,features,FeatureUtil.featuresRepositoryToCoords(features)));
    for (    Features feature : features) {
      getLog().info(""String_Node_Str"" + feature.getName());
    }
    Set<Artifact> artifacts=aetherUtil.resolveArtifacts(FeatureUtil.featuresToCoords(features));
    artifacts.addAll(featureArtifacts);
    for (    Artifact artifact : artifacts) {
      getLog().info(""String_Node_Str"" + artifact.toString());
    }
    if (localRepo != null) {
      aetherUtil.installArtifacts(artifacts);
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  aetherUtil=new AetherUtil(repoSystem,repoSession,remoteRepos,localRepo,getLog());
  try {
    Set<Artifact> featureArtifacts=readFeatureCfg();
    featureArtifacts.addAll(aetherUtil.resolveDependencies(MvnToAetherMapper.toAether(project.getDependencies()),new KarafFeaturesDependencyFilter()));
    Set<Features> features=FeatureUtil.readFeatures(featureArtifacts);
    features.addAll(FeatureUtil.findAllFeaturesRecursively(aetherUtil,features,FeatureUtil.featuresRepositoryToCoords(features)));
    for (    Features feature : features) {
      getLog().info(""String_Node_Str"" + feature.getName());
    }
    Set<Artifact> artifacts=aetherUtil.resolveArtifacts(FeatureUtil.featuresToCoords(features));
    artifacts.addAll(featureArtifacts);
    for (    Artifact artifact : artifacts) {
      getLog().info(""String_Node_Str"" + artifact.toString());
    }
    if (localRepo != null) {
      aetherUtil.installArtifacts(artifacts);
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}",0.9775179856115108
142448,"public Artifact resolveArtifact(String coord) throws ArtifactResolutionException {
  DefaultArtifact artifact=new DefaultArtifact(coord);
  return resolveArtifact(artifact);
}","public Artifact resolveArtifact(String coord){
  DefaultArtifact artifact=new DefaultArtifact(coord);
  return resolveArtifact(artifact);
}",0.8853503184713376
142449,"public Set<Artifact> resolveArtifacts(Set<String> coords) throws ArtifactResolutionException {
  Set<Artifact> result=new LinkedHashSet<Artifact>();
  for (  String coord : coords) {
    result.add(resolveArtifact(coord));
  }
  return result;
}","public Set<Artifact> resolveArtifacts(Set<String> coords){
  Set<Artifact> result=new LinkedHashSet<Artifact>();
  for (  String coord : coords) {
    Artifact artifact=resolveArtifact(coord);
    if (artifact != null) {
      result.add(artifact);
    }
  }
  return result;
}",0.3486590038314176
142450,"public AetherUtil(RepositorySystem repoSystem,RepositorySystemSession repoSession,List<RemoteRepository> remoteRepos,File localRepository){
  this.repoSystem=repoSystem;
  this.repoSession=repoSession;
  this.remoteRepos=remoteRepos;
  this.localRepository=localRepository;
}","public AetherUtil(RepositorySystem repoSystem,RepositorySystemSession repoSession,List<RemoteRepository> remoteRepos,File localRepository,Log log){
  this.repoSystem=repoSystem;
  this.repoSession=repoSession;
  this.remoteRepos=remoteRepos;
  this.localRepository=localRepository;
  this.log=log;
}",0.9581881533101044
142451,"public void execute() throws MojoExecutionException, MojoFailureException {
  aetherUtil=new AetherUtil(repoSystem,repoSession,remoteRepos,localRepo);
  try {
    Set<Artifact> featureArtifacts=new LinkedHashSet<Artifact>();
    featureArtifacts.addAll(aetherUtil.resolveDependencies(MvnToAetherMapper.toAether(project.getDependencies()),new KarafFeaturesDependencyFilter()));
    Set<Features> features=FeatureUtil.readFeatures(featureArtifacts);
    features.addAll(FeatureUtil.findAllFeaturesRecursively(aetherUtil,features,FeatureUtil.featuresRepositoryToCoords(features)));
    for (    Features feature : features) {
      getLog().info(""String_Node_Str"" + feature.getName());
    }
    Set<Artifact> artifacts=aetherUtil.resolveArtifacts(FeatureUtil.featuresToCoords(features));
    artifacts.addAll(featureArtifacts);
    for (    Artifact artifact : artifacts) {
      getLog().info(""String_Node_Str"" + artifact.toString());
    }
    if (localRepo != null) {
      aetherUtil.installArtifacts(artifacts);
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}","public void execute() throws MojoExecutionException, MojoFailureException {
  aetherUtil=new AetherUtil(repoSystem,repoSession,remoteRepos,localRepo,getLog());
  try {
    Set<Artifact> featureArtifacts=readFeatureCfg();
    featureArtifacts.addAll(aetherUtil.resolveDependencies(MvnToAetherMapper.toAether(project.getDependencies()),new KarafFeaturesDependencyFilter()));
    Set<Features> features=FeatureUtil.readFeatures(featureArtifacts);
    features.addAll(FeatureUtil.findAllFeaturesRecursively(aetherUtil,features,FeatureUtil.featuresRepositoryToCoords(features)));
    for (    Features feature : features) {
      getLog().info(""String_Node_Str"" + feature.getName());
    }
    Set<Artifact> artifacts=aetherUtil.resolveArtifacts(FeatureUtil.featuresToCoords(features));
    artifacts.addAll(featureArtifacts);
    for (    Artifact artifact : artifacts) {
      getLog().info(""String_Node_Str"" + artifact.toString());
    }
    if (localRepo != null) {
      aetherUtil.installArtifacts(artifacts);
    }
  }
 catch (  Exception e) {
    throw new MojoExecutionException(""String_Node_Str"",e);
  }
}",0.9775179856115108
142452,"public static String getNodeName(FilePath path){
  Node node=workspaceToNode(path);
  String nodeName=nameOf(node);
  return nodeName.isEmpty() ? MASTER_NODE_NAME : nodeName;
}","/** 
 * Helper: find the node name used for the build
 * @param path Jenkins workspace on build node
 * @return Node name
 */
public static String getNodeName(FilePath path){
  Node node=workspaceToNode(path);
  String nodeName=nameOf(node);
  return nodeName.isEmpty() ? MASTER_NODE_NAME : nodeName;
}",0.7364016736401674
142453,"/** 
 * Helper: find the Remote/Local Computer used for build
 * @param workspace Jenkins workspace on build node
 */
private static Computer workspaceToComputer(FilePath workspace){
  if (workspace != null) {
    return workspace.toComputer();
  }
  return null;
}","/** 
 * Helper: find the Remote/Local Computer used for build
 * @param workspace Jenkins workspace on build node
 * @return Computer
 */
private static Computer workspaceToComputer(FilePath workspace){
  if (workspace != null) {
    return workspace.toComputer();
  }
  return null;
}",0.9636363636363636
142454,"/** 
 * Helper: find the Node for slave build or return current instance.
 * @param workspace Jenkins workspace on build node
 */
public static Node workspaceToNode(FilePath workspace){
  Computer computer=workspaceToComputer(workspace);
  if (computer != null) {
    return computer.getNode();
  }
  return Jenkins.getInstance();
}","/** 
 * Helper: find the Node for slave build or return current instance.
 * @param workspace Jenkins workspace on build node
 * @return Node
 */
public static Node workspaceToNode(FilePath workspace){
  Computer computer=workspaceToComputer(workspace);
  if (computer != null) {
    return computer.getNode();
  }
  return Jenkins.getInstance();
}",0.976470588235294
142455,"public static P4Browser findBrowser(String scmCredential){
  StaplerRequest req=Stapler.getCurrentRequest();
  Job job=req == null ? null : req.findAncestorObject(Job.class);
  P4BaseCredentials credentials=job == null ? ConnectionHelper.findCredential(scmCredential,Jenkins.getActiveInstance()) : ConnectionHelper.findCredential(scmCredential,job);
  if (credentials == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(credentials,null);
    return new SwarmBrowser(connection.getSwarm());
  }
 catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}","public static P4Browser findBrowser(String scmCredential){
  StaplerRequest req=Stapler.getCurrentRequest();
  Job job=req == null ? null : req.findAncestorObject(Job.class);
  P4BaseCredentials credentials=job == null ? ConnectionHelper.findCredential(scmCredential,Jenkins.getActiveInstance()) : ConnectionHelper.findCredential(scmCredential,job);
  if (credentials == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(credentials,null);
    String url=connection.getSwarm();
    if (url != null) {
      return new SwarmBrowser(url);
    }
 else {
      return null;
    }
  }
 catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}",0.907539118065434
142456,"public ChangeLogHandler(Run<?,?> run,RepositoryBrowser<?> browser,String credential) throws P4JavaException {
  this.run=run;
  this.browser=browser;
  this.p4=new ConnectionHelper(run,credential,null);
  if (browser == null) {
    this.browser=new SwarmBrowser(p4.getSwarm());
  }
}","public ChangeLogHandler(Run<?,?> run,RepositoryBrowser<?> browser,String credential) throws P4JavaException {
  this.run=run;
  this.browser=browser;
  this.p4=new ConnectionHelper(run,credential,null);
  if (browser == null) {
    String url=p4.getSwarm();
    if (url != null) {
      this.browser=new SwarmBrowser(url);
    }
  }
}",0.8654781199351702
142457,"public String getSwarm() throws P4JavaException {
  GetPropertyOptions propOpts=new GetPropertyOptions();
  String key=""String_Node_Str"";
  propOpts.setName(key);
  List<IProperty> values=connection.getProperty(propOpts);
  for (  IProperty prop : values) {
    if (key.equals(prop.getName())) {
      String url=prop.getValue();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 1);
      }
      return url;
    }
  }
  return null;
}","public String getSwarm() throws P4JavaException {
  GetPropertyOptions propOpts=new GetPropertyOptions();
  String key=""String_Node_Str"";
  propOpts.setName(key);
  List<IProperty> values=connection.getProperty(propOpts);
  for (  IProperty prop : values) {
    if (key.equals(prop.getName())) {
      String url=prop.getValue();
      if (url != null && url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 1);
      }
      return url;
    }
  }
  return null;
}",0.9844236760124612
142458,"public boolean approveReview(String id,ApproveState state,String description) throws Exception {
  if (id == null || id.isEmpty()) {
    p4.log(""String_Node_Str"");
    return false;
  }
  if (""String_Node_Str"".equalsIgnoreCase(id)) {
    p4.log(""String_Node_Str"");
    return false;
  }
  String url=getApiUrl() + ""String_Node_Str"" + id+ ""String_Node_Str"";
  Map<String,Object> parameters=new HashedMap();
  parameters.put(""String_Node_Str"",state.getId());
  if (state.isCommit()) {
    parameters.put(""String_Node_Str"",true);
  }
  if (description != null && !description.isEmpty()) {
    parameters.put(""String_Node_Str"",description);
  }
  HttpResponse<JsonNode> res=Unirest.patch(url).basicAuth(user,ticket).fields(parameters).asJson();
  if (res.getStatus() != 200) {
    p4.log(""String_Node_Str"" + id + ""String_Node_Str""+ state.getDescription());
    return true;
  }
 else {
    p4.log(""String_Node_Str"" + url + ""String_Node_Str""+ res.getStatus());
    String error=res.getBody().getObject().getString(""String_Node_Str"");
    p4.log(""String_Node_Str"" + error);
    throw new SwarmException(res);
  }
}","public boolean approveReview(String id,ApproveState state,String description) throws Exception {
  if (id == null || id.isEmpty()) {
    p4.log(""String_Node_Str"");
    return false;
  }
  if (""String_Node_Str"".equalsIgnoreCase(id)) {
    p4.log(""String_Node_Str"");
    return false;
  }
  String url=getApiUrl() + ""String_Node_Str"" + id+ ""String_Node_Str"";
  Map<String,Object> parameters=new HashedMap();
  parameters.put(""String_Node_Str"",state.getId());
  if (state.isCommit()) {
    parameters.put(""String_Node_Str"",true);
  }
  if (description != null && !description.isEmpty()) {
    parameters.put(""String_Node_Str"",description);
  }
  HttpResponse<JsonNode> res=Unirest.patch(url).basicAuth(user,ticket).fields(parameters).asJson();
  if (res.getStatus() == 200) {
    p4.log(""String_Node_Str"" + id + ""String_Node_Str""+ state.getDescription());
    return true;
  }
 else {
    p4.log(""String_Node_Str"" + url + ""String_Node_Str""+ res.getStatus());
    String error=res.getBody().getObject().getString(""String_Node_Str"");
    p4.log(""String_Node_Str"" + error);
    throw new SwarmException(res);
  }
}",0.9990974729241876
142459,"public static P4Browser findBrowser(String scmCredential){
  StaplerRequest req=Stapler.getCurrentRequest();
  Job job=req == null ? null : req.findAncestorObject(Job.class);
  P4BaseCredentials credentials=job == null ? ConnectionHelper.findCredential(scmCredential,Jenkins.getActiveInstance()) : ConnectionHelper.findCredential(scmCredential,job);
  if (credentials == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(credentials,null);
    return new SwarmBrowser(connection.getSwarm());
  }
 catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}","public static P4Browser findBrowser(String scmCredential){
  StaplerRequest req=Stapler.getCurrentRequest();
  Job job=req == null ? null : req.findAncestorObject(Job.class);
  P4BaseCredentials credentials=job == null ? ConnectionHelper.findCredential(scmCredential,Jenkins.getActiveInstance()) : ConnectionHelper.findCredential(scmCredential,job);
  if (credentials == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(credentials,null);
    String url=connection.getSwarm();
    if (url != null) {
      return new SwarmBrowser(url);
    }
 else {
      return null;
    }
  }
 catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}",0.907539118065434
142460,"public ChangeLogHandler(Run<?,?> run,RepositoryBrowser<?> browser,String credential) throws P4JavaException {
  this.run=run;
  this.browser=browser;
  this.p4=new ConnectionHelper(run,credential,null);
  if (browser == null) {
    this.browser=new SwarmBrowser(p4.getSwarm());
  }
}","public ChangeLogHandler(Run<?,?> run,RepositoryBrowser<?> browser,String credential) throws P4JavaException {
  this.run=run;
  this.browser=browser;
  this.p4=new ConnectionHelper(run,credential,null);
  if (browser == null) {
    String url=p4.getSwarm();
    if (url != null) {
      this.browser=new SwarmBrowser(url);
    }
  }
}",0.8654781199351702
142461,"public String getSwarm() throws P4JavaException {
  GetPropertyOptions propOpts=new GetPropertyOptions();
  String key=""String_Node_Str"";
  propOpts.setName(key);
  List<IProperty> values=connection.getProperty(propOpts);
  for (  IProperty prop : values) {
    if (key.equals(prop.getName())) {
      String url=prop.getValue();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 1);
      }
      return url;
    }
  }
  return null;
}","public String getSwarm() throws P4JavaException {
  GetPropertyOptions propOpts=new GetPropertyOptions();
  String key=""String_Node_Str"";
  propOpts.setName(key);
  List<IProperty> values=connection.getProperty(propOpts);
  for (  IProperty prop : values) {
    if (key.equals(prop.getName())) {
      String url=prop.getValue();
      if (url != null && url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 1);
      }
      return url;
    }
  }
  return null;
}",0.9844236760124612
142462,"public String getName(){
  String p=getPath();
  if (p.startsWith(""String_Node_Str"")) {
    p=p.substring(""String_Node_Str"".length());
    p=p.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String r=getRevision();
  if (r != null && r.startsWith(""String_Node_Str"")) {
    r=r.substring(""String_Node_Str"".length());
  }
  r=r.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return p + ""String_Node_Str"" + r;
}","public String getName(){
  String p=getPath();
  if (p.startsWith(""String_Node_Str"")) {
    p=p.substring(""String_Node_Str"".length());
    p=p.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  String r=getRevision();
  if (r != null) {
    if (r.startsWith(""String_Node_Str"")) {
      r=r.substring(""String_Node_Str"".length());
    }
    r=r.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return p + ""String_Node_Str"" + r;
}",0.969626168224299
142463,"@Override protected P4Groovy run() throws Exception {
  GetP4 p4Groovy=new GetP4(step.getCredential(),step.getWorkspace());
  p4Groovy.perform(run,workspace,launcher,listener);
  return p4Groovy.getP4Groovy();
}","@Override protected P4Groovy run() throws Exception {
  GetP4 p4Groovy=new GetP4(step.getCredential(),step.getWorkspace());
  p4Groovy.perform(getContext().get(Run.class),getContext().get(FilePath.class),getContext().get(Launcher.class),getContext().get(TaskListener.class));
  return p4Groovy.getP4Groovy();
}",0.7063339731285988
142464,"public Identifier() throws IOException, XmlPullParserException {
  ResourceBundle bundle=ResourceBundle.getBundle(""String_Node_Str"");
  MavenXpp3Reader reader=new MavenXpp3Reader();
  Model model=reader.read(new FileReader(""String_Node_Str""));
  version=model.getVersion();
  product=model.getArtifactId();
  String platform=System.getProperty(""String_Node_Str"");
  platform=platform.replaceAll(""String_Node_Str"",""String_Node_Str"");
  version+=""String_Node_Str"" + platform;
}","public Identifier() throws IOException, XmlPullParserException {
  MavenXpp3Reader reader=new MavenXpp3Reader();
  Model model=reader.read(new InputStreamReader(new FileInputStream(""String_Node_Str""),""String_Node_Str""));
  version=model.getVersion();
  product=model.getArtifactId();
  String platform=System.getProperty(""String_Node_Str"");
  platform=platform.replaceAll(""String_Node_Str"",""String_Node_Str"");
  version+=""String_Node_Str"" + platform;
}",0.86084142394822
142465,"@Override public RepositoryBrowser<?> guessBrowser(){
  String scmCredential=getCredential();
  if (scmCredential == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  StaplerRequest req=Stapler.getCurrentRequest();
  if (req == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  Job job=req.findAncestorObject(Job.class);
  if (req == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(job,scmCredential,null);
    String swarm=connection.getSwarm();
    URL url=new URL(swarm);
    return new SwarmBrowser(url);
  }
 catch (  MalformedURLException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}","@Override public RepositoryBrowser<?> guessBrowser(){
  String scmCredential=getCredential();
  if (scmCredential == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  StaplerRequest req=Stapler.getCurrentRequest();
  if (req == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  Job job=req.findAncestorObject(Job.class);
  if (job == null) {
    logger.fine(""String_Node_Str"");
    return null;
  }
  try {
    ConnectionHelper connection=new ConnectionHelper(job,scmCredential,null);
    String swarm=connection.getSwarm();
    URL url=new URL(swarm);
    return new SwarmBrowser(url);
  }
 catch (  MalformedURLException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
catch (  P4JavaException e) {
    logger.info(""String_Node_Str"");
    return null;
  }
}",0.9962825278810408
142466,"static public ListBoxModel doFillCredentialItems(Item project,String credentialsId){
  if (project == null && !Jenkins.getActiveInstance().hasPermission(Jenkins.ADMINISTER) || project != null && !project.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel().includeCurrentValue(credentialsId);
  }
  CredentialsMatchers.instanceOf(P4BaseCredentials.class);
  return new StandardListBoxModel().includeEmptyValue().includeMatchingAs(project instanceof Queue.Task ? Tasks.getAuthenticationOf((Queue.Task)project) : ACL.SYSTEM,project,P4BaseCredentials.class,Collections.<DomainRequirement>emptyList(),CredentialsMatchers.instanceOf(P4BaseCredentials.class));
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") static public ListBoxModel doFillCredentialItems(Item project,String credentialsId){
  if (project == null && !Jenkins.getActiveInstance().hasPermission(Jenkins.ADMINISTER) || project != null && !project.hasPermission(Item.EXTENDED_READ)) {
    return new StandardListBoxModel().includeCurrentValue(credentialsId);
  }
  CredentialsMatchers.instanceOf(P4BaseCredentials.class);
  return new StandardListBoxModel().includeEmptyValue().includeMatchingAs(project instanceof Queue.Task ? Tasks.getAuthenticationOf((Queue.Task)project) : ACL.SYSTEM,project,P4BaseCredentials.class,Collections.<DomainRequirement>emptyList(),CredentialsMatchers.instanceOf(P4BaseCredentials.class));
}",0.9462665736217724
142467,"protected P4Revision getRevision(P4Head head,TaskListener listener) throws Exception {
  try (ClientHelper p4=new ClientHelper(credential,listener,ScmSourceClient,charset)){
    long change=p4.getHead(head.getPath() + ""String_Node_Str"");
    P4Revision revision=new P4Revision(head,change);
    return revision;
  }
 }","protected P4Revision getRevision(P4Head head,TaskListener listener) throws Exception {
  try (ClientHelper p4=new ClientHelper(credential,listener,scmSourceClient,charset)){
    long change=p4.getHead(head.getPath() + ""String_Node_Str"");
    P4Revision revision=new P4Revision(head,change);
    return revision;
  }
 }",0.9968553459119496
142468,"public P4Probe(String credential,TaskListener listener,String charset,String base){
  this.base=base;
  this.p4=new ClientHelper(credential,listener,ScmSourceClient,charset);
}","public P4Probe(String credential,TaskListener listener,String charset,String base){
  this.base=base;
  this.p4=new ClientHelper(credential,listener,scmSourceClient,charset);
}",0.9943181818181818
142469,"private List<P4Revision> listChanges(String ws) throws Exception {
  List<P4Revision> list=new ArrayList<P4Revision>();
  Descriptor<SCM> scm=Jenkins.getInstance().getDescriptor(PerforceScm.class);
  PerforceScm.DescriptorImpl p4scm=(PerforceScm.DescriptorImpl)scm;
  int CHANGE_COUNT_LIMIT=p4scm.getMaxChanges();
  GetChangelistsOptions opts=new GetChangelistsOptions();
  opts.setMaxMostRecent(CHANGE_COUNT_LIMIT);
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(ws);
  List<IChangelistSummary> cngs=connection.getChangelists(spec,opts);
  if (cngs != null) {
    for (    IChangelistSummary c : cngs) {
      if (c != null && c.getId() != -1) {
        P4Revision rev=new P4Revision(c.getId());
        if (!(list.contains(rev))) {
          list.add(rev);
        }
      }
    }
  }
  Collections.sort(list);
  Collections.reverse(list);
  return list;
}","private List<P4Revision> listChanges(String ws) throws Exception {
  List<P4Revision> list=new ArrayList<P4Revision>();
  GetChangelistsOptions opts=new GetChangelistsOptions();
  Jenkins j=Jenkins.getInstance();
  if (j != null) {
    Descriptor dsc=j.getDescriptor(PerforceScm.class);
    if (dsc instanceof PerforceScm.DescriptorImpl) {
      PerforceScm.DescriptorImpl p4scm=(PerforceScm.DescriptorImpl)dsc;
      int CHANGE_COUNT_LIMIT=p4scm.getMaxChanges();
      opts.setMaxMostRecent(CHANGE_COUNT_LIMIT);
    }
  }
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(ws);
  List<IChangelistSummary> cngs=connection.getChangelists(spec,opts);
  if (cngs != null) {
    for (    IChangelistSummary c : cngs) {
      if (c != null && c.getId() != -1) {
        P4Revision rev=new P4Revision(c.getId());
        if (!(list.contains(rev))) {
          list.add(rev);
        }
      }
    }
  }
  Collections.sort(list);
  Collections.reverse(list);
  return list;
}",0.7891304347826087
142470,"private List<P4Revision> listChanges(String ws) throws Exception {
  List<P4Revision> list=new ArrayList<P4Revision>();
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(ws);
  GetChangelistsOptions opts=new GetChangelistsOptions();
  opts.setMaxMostRecent(100);
  List<IChangelistSummary> cngs=connection.getChangelists(spec,opts);
  if (cngs != null) {
    for (    IChangelistSummary c : cngs) {
      if (c != null && c.getId() != -1) {
        if (!(list.contains(c.getId()))) {
          list.add(new P4Revision(c.getId()));
        }
      }
    }
  }
  Collections.sort(list);
  Collections.reverse(list);
  return list;
}","private List<P4Revision> listChanges(String ws) throws Exception {
  List<P4Revision> list=new ArrayList<P4Revision>();
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(ws);
  GetChangelistsOptions opts=new GetChangelistsOptions();
  opts.setMaxMostRecent(100);
  List<IChangelistSummary> cngs=connection.getChangelists(spec,opts);
  if (cngs != null) {
    for (    IChangelistSummary c : cngs) {
      if (c != null && c.getId() != -1) {
        P4Revision rev=new P4Revision(c.getId());
        if (!(list.contains(rev))) {
          list.add(rev);
        }
      }
    }
  }
  Collections.sort(list);
  Collections.reverse(list);
  return list;
}",0.893353941267388
142471,"@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    Jenkins j=Jenkins.getInstance();
    if (j != null) {
      @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
      DescriptorImpl p4scm=(DescriptorImpl)scm;
      if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
        String ticket=tagAction.getTicket();
        env.put(""String_Node_Str"",ticket);
      }
    }
    env.put(""String_Node_Str"",changelogFilename);
  }
}","@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    Jenkins j=Jenkins.getInstance();
    if (j != null) {
      @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
      DescriptorImpl p4scm=(DescriptorImpl)scm;
      if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
        String ticket=tagAction.getTicket();
        env.put(""String_Node_Str"",ticket);
      }
    }
  }
}",0.9777580071174378
142472,"/** 
 * The checkout method is expected to check out modified files into the project workspace. In Perforce terms a 'p4 sync' on the project's workspace. Authorisation
 */
@Override public void checkout(Run<?,?> run,Launcher launcher,FilePath buildWorkspace,TaskListener listener,File changelogFile,SCMRevisionState baseline) throws IOException, InterruptedException {
  PrintStream log=listener.getLogger();
  boolean success=true;
  changelogFilename=changelogFile.getAbsolutePath();
  CheckoutTask task=new CheckoutTask(populate);
  task.setListener(listener);
  task.setCredential(credential);
  Workspace ws=task.setEnvironment(run,workspace,buildWorkspace);
  ws=task.setNextChange(ws,changes);
  changes=new ArrayList<Integer>();
  task.setWorkspace(ws);
  task.initialise();
  TagAction tag=new TagAction(run);
  tag.setCredential(credential);
  tag.setWorkspace(ws);
  tag.setBuildChange(task.getSyncChange());
  run.addAction(tag);
  String node=ws.getExpand().get(""String_Node_Str"");
  Job<?,?> job=run.getParent();
  if (run instanceof MatrixBuild) {
    parentChange=task.getSyncChange();
    if (isBuildParent(job)) {
      log.println(""String_Node_Str"" + node);
      success&=buildWorkspace.act(task);
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
      success=true;
    }
  }
 else {
    if (job instanceof MatrixProject) {
      if (parentChange != null) {
        log.println(""String_Node_Str"" + parentChange);
        task.setBuildChange(parentChange);
      }
      log.println(""String_Node_Str"" + node);
    }
 else {
      log.println(""String_Node_Str"" + node);
    }
    success&=buildWorkspace.act(task);
  }
  if (success) {
    listener.getLogger().println(""String_Node_Str"");
    List<P4ChangeEntry> changes=calculateChanges(run,task);
    P4ChangeSet.store(changelogFile,changes);
    listener.getLogger().println(""String_Node_Str"");
  }
 else {
    String msg=""String_Node_Str"";
    logger.warning(msg);
    throw new AbortException(msg);
  }
}","/** 
 * The checkout method is expected to check out modified files into the project workspace. In Perforce terms a 'p4 sync' on the project's workspace. Authorisation
 */
@Override public void checkout(Run<?,?> run,Launcher launcher,FilePath buildWorkspace,TaskListener listener,File changelogFile,SCMRevisionState baseline) throws IOException, InterruptedException {
  PrintStream log=listener.getLogger();
  boolean success=true;
  changelogFilename=changelogFile.getAbsolutePath();
  CheckoutTask task=new CheckoutTask(populate);
  task.setListener(listener);
  task.setCredential(credential);
  Workspace ws=task.setEnvironment(run,workspace,buildWorkspace);
  ws=task.setNextChange(ws,changes);
  changes=new ArrayList<Integer>();
  task.setWorkspace(ws);
  task.initialise();
  TagAction tag=new TagAction(run);
  tag.setCredential(credential);
  tag.setWorkspace(ws);
  tag.setBuildChange(task.getSyncChange());
  run.addAction(tag);
  String node=ws.getExpand().get(""String_Node_Str"");
  Job<?,?> job=run.getParent();
  if (run instanceof MatrixBuild) {
    parentChange=task.getSyncChange();
    if (isBuildParent(job)) {
      log.println(""String_Node_Str"" + node);
      success&=buildWorkspace.act(task);
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
      success=true;
    }
  }
 else {
    if (job instanceof MatrixProject) {
      if (parentChange != null) {
        log.println(""String_Node_Str"" + parentChange);
        task.setBuildChange(parentChange);
      }
      log.println(""String_Node_Str"" + node);
    }
 else {
      log.println(""String_Node_Str"" + node);
    }
    success&=buildWorkspace.act(task);
  }
  if (success) {
  }
 else {
    String msg=""String_Node_Str"";
    logger.warning(msg);
    throw new AbortException(msg);
  }
}",0.9307610993657506
142473,"@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    Jenkins j=Jenkins.getInstance();
    if (j != null) {
      @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
      DescriptorImpl p4scm=(DescriptorImpl)scm;
      if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
        String ticket=tagAction.getTicket();
        env.put(""String_Node_Str"",ticket);
      }
    }
    if (changelogFilename != null) {
      env.put(""String_Node_Str"",changelogFilename);
    }
 else {
      env.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
}","@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    Jenkins j=Jenkins.getInstance();
    if (j != null) {
      @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
      DescriptorImpl p4scm=(DescriptorImpl)scm;
      if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
        String ticket=tagAction.getTicket();
        env.put(""String_Node_Str"",ticket);
      }
    }
    env.put(""String_Node_Str"",changelogFilename);
  }
}",0.929846409298464
142474,"public void onChange(Saveable o,XmlFile xml){
  @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=Jenkins.getInstance().getDescriptor(PerforceScm.class);
  DescriptorImpl p4scm=(DescriptorImpl)scm;
  if (!p4scm.isAutoSave()) {
    return;
  }
  ClientHelper p4=null;
  try {
    String file=xml.getFile().getCanonicalPath();
    logger.info(""String_Node_Str"" + file);
    p4=getClientHelper(p4scm);
    p4.versionFile(file,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    p4.disconnect();
  }
}","public void onChange(Saveable o,XmlFile xml){
  Jenkins j=Jenkins.getInstance();
  if (j == null) {
    return;
  }
  @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
  DescriptorImpl p4scm=(DescriptorImpl)scm;
  if (!p4scm.isAutoSave()) {
    return;
  }
  try {
    String file=xml.getFile().getCanonicalPath();
    logger.info(""String_Node_Str"" + file);
    ClientHelper p4=getClientHelper(p4scm);
    p4.versionFile(file,""String_Node_Str"");
    p4.disconnect();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8330341113105925
142475,"private ClientHelper getClientHelper(DescriptorImpl p4scm) throws Exception {
  LogTaskListener listener=new LogTaskListener(logger,Level.INFO);
  String credential=p4scm.getCredential();
  String clientName=p4scm.getClientName();
  String depotPath=p4scm.getDepotPath();
  depotPath=depotPath.endsWith(""String_Node_Str"") ? depotPath : depotPath + ""String_Node_Str"";
  String rootPath=Jenkins.getInstance().getRootDir().getCanonicalPath();
  StringBuffer view=new StringBuffer();
  view.append(depotPath + ""String_Node_Str"");
  view.append(""String_Node_Str"");
  view.append(""String_Node_Str"" + clientName + ""String_Node_Str"");
  WorkspaceSpec spec=new WorkspaceSpec(true,true,false,false,false,false,""String_Node_Str"",""String_Node_Str"",view.toString());
  ManualWorkspaceImpl workspace=new ManualWorkspaceImpl(""String_Node_Str"",false,clientName,spec);
  workspace.setExpand(new HashMap<String,String>());
  workspace.setRootPath(rootPath);
  ClientHelper p4=new ClientHelper(credential,listener,clientName,""String_Node_Str"");
  p4.setClient(workspace);
  return p4;
}","private ClientHelper getClientHelper(DescriptorImpl p4scm) throws Exception {
  LogTaskListener listener=new LogTaskListener(logger,Level.INFO);
  String credential=p4scm.getCredential();
  String clientName=p4scm.getClientName();
  String depotPath=p4scm.getDepotPath();
  depotPath=depotPath.endsWith(""String_Node_Str"") ? depotPath : depotPath + ""String_Node_Str"";
  Jenkins j=Jenkins.getInstance();
  if (j == null) {
    return null;
  }
  String rootPath=j.getRootDir().getCanonicalPath();
  StringBuffer view=new StringBuffer();
  view.append(depotPath + ""String_Node_Str"");
  view.append(""String_Node_Str"");
  view.append(""String_Node_Str"" + clientName + ""String_Node_Str"");
  WorkspaceSpec spec=new WorkspaceSpec(true,true,false,false,false,false,""String_Node_Str"",""String_Node_Str"",view.toString());
  ManualWorkspaceImpl workspace=new ManualWorkspaceImpl(""String_Node_Str"",false,clientName,spec);
  workspace.setExpand(new HashMap<String,String>());
  workspace.setRootPath(rootPath);
  ClientHelper p4=new ClientHelper(credential,listener,clientName,""String_Node_Str"");
  p4.setClient(workspace);
  return p4;
}",0.95568752855185
142476,"/** 
 * This method does the actual polling and returns a PollingResult. The change attribute of the PollingResult the significance of the changes detected by this poll.
 */
@Override public PollingResult compareRemoteRevisionWith(Job<?,?> job,Launcher launcher,FilePath buildWorkspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  PollingResult state=PollingResult.NO_CHANGES;
  Node node=workspaceToNode(buildWorkspace);
  if (buildWorkspace == null || FilterPollMasterImpl.isMasterPolling(filter)) {
    buildWorkspace=Jenkins.getInstance().getRootPath();
    TagAction action=job.getLastBuild().getAction(TagAction.class);
    P4Revision last=action.getBuildChange();
    FilterPollMasterImpl pollM=FilterPollMasterImpl.findSelf(filter);
    pollM.setLastChange(last);
  }
  if (job.isBuilding()) {
    listener.getLogger().println(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
  if (job instanceof MatrixProject) {
    if (isBuildParent(job)) {
      EnvVars envVars=job.getEnvironment(node,listener);
      state=pollWorkspace(envVars,listener,buildWorkspace);
    }
 else {
      MatrixProject matrixProj=(MatrixProject)job;
      Collection<MatrixConfiguration> configs=matrixProj.getActiveConfigurations();
      for (      MatrixConfiguration config : configs) {
        EnvVars envVars=config.getEnvironment(node,listener);
        state=pollWorkspace(envVars,listener,buildWorkspace);
        if (state == PollingResult.BUILD_NOW) {
          return PollingResult.BUILD_NOW;
        }
      }
    }
  }
 else {
    EnvVars envVars=job.getEnvironment(node,listener);
    state=pollWorkspace(envVars,listener,buildWorkspace);
  }
  return state;
}","/** 
 * This method does the actual polling and returns a PollingResult. The change attribute of the PollingResult the significance of the changes detected by this poll.
 */
@Override public PollingResult compareRemoteRevisionWith(Job<?,?> job,Launcher launcher,FilePath buildWorkspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  PollingResult state=PollingResult.NO_CHANGES;
  Node node=workspaceToNode(buildWorkspace);
  if (buildWorkspace == null || FilterPollMasterImpl.isMasterPolling(filter)) {
    Jenkins j=Jenkins.getInstance();
    if (j == null) {
      return PollingResult.NO_CHANGES;
    }
    buildWorkspace=j.getRootPath();
    TagAction action=job.getLastBuild().getAction(TagAction.class);
    P4Revision last=action.getBuildChange();
    FilterPollMasterImpl pollM=FilterPollMasterImpl.findSelf(filter);
    pollM.setLastChange(last);
  }
  if (job.isBuilding()) {
    listener.getLogger().println(""String_Node_Str"");
    return PollingResult.NO_CHANGES;
  }
  if (job instanceof MatrixProject) {
    if (isBuildParent(job)) {
      EnvVars envVars=job.getEnvironment(node,listener);
      state=pollWorkspace(envVars,listener,buildWorkspace);
    }
 else {
      MatrixProject matrixProj=(MatrixProject)job;
      Collection<MatrixConfiguration> configs=matrixProj.getActiveConfigurations();
      for (      MatrixConfiguration config : configs) {
        EnvVars envVars=config.getEnvironment(node,listener);
        state=pollWorkspace(envVars,listener,buildWorkspace);
        if (state == PollingResult.BUILD_NOW) {
          return PollingResult.BUILD_NOW;
        }
      }
    }
  }
 else {
    EnvVars envVars=job.getEnvironment(node,listener);
    state=pollWorkspace(envVars,listener,buildWorkspace);
  }
  return state;
}",0.7953448765256883
142477,"@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=Jenkins.getInstance().getDescriptor(PerforceScm.class);
    DescriptorImpl p4scm=(DescriptorImpl)scm;
    if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
      String ticket=tagAction.getTicket();
      env.put(""String_Node_Str"",ticket);
    }
  }
}","@Override public void buildEnvVars(AbstractBuild<?,?> build,Map<String,String> env){
  super.buildEnvVars(build,env);
  TagAction tagAction=build.getAction(TagAction.class);
  if (tagAction != null) {
    if (tagAction.getBuildChange() != null) {
      String change=getChangeNumber(tagAction);
      env.put(""String_Node_Str"",change);
    }
    if (tagAction.getClient() != null) {
      String client=tagAction.getClient();
      env.put(""String_Node_Str"",client);
    }
    if (tagAction.getPort() != null) {
      String port=tagAction.getPort();
      env.put(""String_Node_Str"",port);
    }
    if (tagAction.getUser() != null) {
      String user=tagAction.getUser();
      env.put(""String_Node_Str"",user);
    }
    Jenkins j=Jenkins.getInstance();
    if (j != null) {
      @SuppressWarnings(""String_Node_Str"") Descriptor<SCM> scm=j.getDescriptor(PerforceScm.class);
      DescriptorImpl p4scm=(DescriptorImpl)scm;
      if (tagAction.getTicket() != null && !p4scm.isHideTicket()) {
        String ticket=tagAction.getTicket();
        env.put(""String_Node_Str"",ticket);
      }
    }
  }
}",0.954248366013072
142478,"@Override public URL getDiffLink(IFileSpec file) throws Exception {
  if (file.getAction() != FileAction.EDIT && file.getAction() != FileAction.INTEGRATE) {
    return null;
  }
  int r=new Integer(file.getEndRevision());
  if (r <= 1) {
    return null;
  }
  return new URL(url.toString() + file.getDepotPathString() + p4DiffEnd+ ""String_Node_Str""+ (r - 1)+ ""String_Node_Str""+ (r));
}","@Override public URL getDiffLink(IFileSpec file) throws Exception {
  if (file.getAction() != FileAction.EDIT && file.getAction() != FileAction.INTEGRATE) {
    return null;
  }
  int r=file.getEndRevision();
  if (r <= 1) {
    return null;
  }
  return new URL(url.toString() + file.getDepotPathString() + p4DiffEnd+ ""String_Node_Str""+ (r - 1)+ ""String_Node_Str""+ (r));
}",0.9828722002635046
142479,"@Override public URL getFileLink(IFileSpec file) throws Exception {
  int r=new Integer(file.getEndRevision());
  String path=file.getDepotPathString();
  path=path.replace(""String_Node_Str"",""String_Node_Str"");
  String rev=""String_Node_Str"" + r;
  return new URL(url.toString() + path + rev);
}","@Override public URL getFileLink(IFileSpec file) throws Exception {
  int r=file.getEndRevision();
  String path=file.getDepotPathString();
  path=path.replace(""String_Node_Str"",""String_Node_Str"");
  String rev=""String_Node_Str"" + r;
  return new URL(url.toString() + path + rev);
}",0.977469670710572
142480,"public Date getDate(){
  return date;
}","public Date getDate(){
  return (Date)date.clone();
}",0.8478260869565217
142481,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.pop();
    changeEntries.add(entry);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      if (text.toString().trim().length() != 0 && (qName.equalsIgnoreCase(""String_Node_Str"") || qName.equalsIgnoreCase(""String_Node_Str""))) {
        Job<?,?> job=run.getParent();
        AbstractProject<?,?> project=(AbstractProject<?,?>)job;
        PerforceScm scm=(PerforceScm)project.getScm();
        String credential=scm.getCredential();
        ConnectionHelper p4=new ConnectionHelper(credential,null);
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          int id=new Integer(text.toString());
          IChangelistSummary summary=p4.getChangeSummary(id);
          entry.setChange(p4,summary);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          String id=text.toString();
          entry.setLabel(p4,id);
        }
        p4.disconnect();
      }
 else {
        String elementText=text.toString().trim();
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          int id=new Integer(elementText);
          entry.setId(new P4Revision(id));
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setShelved(elementText.equals(""String_Node_Str""));
          text.setLength(0);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setMsg(elementText);
          text.setLength(0);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setClientId(elementText);
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setAuthor(elementText);
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setDate(elementText);
          text.setLength(0);
          return;
        }
      }
      text.setLength(0);
      return;
    }
 catch (    Exception e) {
      entry=null;
    }
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.pop();
    changeEntries.add(entry);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      if (text.toString().trim().length() != 0 && (qName.equalsIgnoreCase(""String_Node_Str"") || qName.equalsIgnoreCase(""String_Node_Str""))) {
        Job<?,?> job=run.getParent();
        AbstractProject<?,?> project=(AbstractProject<?,?>)job;
        PerforceScm scm=(PerforceScm)project.getScm();
        String credential=scm.getCredential();
        ConnectionHelper p4=new ConnectionHelper(credential,null);
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          int id=Integer.parseInt(text.toString());
          IChangelistSummary summary=p4.getChangeSummary(id);
          entry.setChange(p4,summary);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          String id=text.toString();
          entry.setLabel(p4,id);
        }
        p4.disconnect();
      }
 else {
        String elementText=text.toString().trim();
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          int id=Integer.parseInt(elementText);
          entry.setId(new P4Revision(id));
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setShelved(elementText.equals(""String_Node_Str""));
          text.setLength(0);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setMsg(elementText);
          text.setLength(0);
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setClientId(elementText);
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setAuthor(elementText);
          text.setLength(0);
          return;
        }
        if (qName.equalsIgnoreCase(""String_Node_Str"")) {
          entry.setDate(elementText);
          text.setLength(0);
          return;
        }
      }
      text.setLength(0);
      return;
    }
 catch (    Exception e) {
      entry=null;
    }
  }
}",0.9944868532654793
142482,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    text.setLength(0);
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    objects.push(new P4ChangeEntry(changeSet));
    text.setLength(0);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        IFileSpec temp=new FileSpec();
        String safePath=attributes.getValue(""String_Node_Str"");
        String depotPath=URLDecoder.decode(safePath,""String_Node_Str"");
        temp.setDepotPath(depotPath);
        String action=attributes.getValue(""String_Node_Str"");
        temp.setAction(FileAction.fromString(action));
        String strRev=attributes.getValue(""String_Node_Str"");
        int endRevision=new Integer(strRev);
        temp.setEndRevision(endRevision);
        entry.files.add(temp);
        text.setLength(0);
        return;
      }
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        IFix temp=new Fix();
        String id=attributes.getValue(""String_Node_Str"");
        temp.setJobId(id);
        String status=attributes.getValue(""String_Node_Str"");
        temp.setStatus(status);
        entry.jobs.add(temp);
        text.setLength(0);
        return;
      }
    }
 catch (    Exception e) {
      entry=null;
    }
  }
  text.setLength(0);
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    text.setLength(0);
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    objects.push(new P4ChangeEntry(changeSet));
    text.setLength(0);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        IFileSpec temp=new FileSpec();
        String safePath=attributes.getValue(""String_Node_Str"");
        String depotPath=URLDecoder.decode(safePath,""String_Node_Str"");
        temp.setDepotPath(depotPath);
        String action=attributes.getValue(""String_Node_Str"");
        temp.setAction(FileAction.fromString(action));
        String strRev=attributes.getValue(""String_Node_Str"");
        int endRevision=Integer.parseInt(strRev);
        temp.setEndRevision(endRevision);
        entry.files.add(temp);
        text.setLength(0);
        return;
      }
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        IFix temp=new Fix();
        String id=attributes.getValue(""String_Node_Str"");
        temp.setJobId(id);
        String status=attributes.getValue(""String_Node_Str"");
        temp.setStatus(status);
        entry.jobs.add(temp);
        text.setLength(0);
        return;
      }
    }
 catch (    UnsupportedEncodingException e) {
      entry=null;
    }
  }
  text.setLength(0);
}",0.989459815546772
142483,"public static void store(File file,List<P4ChangeEntry> changes){
  try {
    FileOutputStream o=new FileOutputStream(file);
    BufferedOutputStream b=new BufferedOutputStream(o);
    Charset c=Charset.forName(""String_Node_Str"");
    OutputStreamWriter w=new OutputStreamWriter(b,c);
    WriterOutputStream s=new WriterOutputStream(w);
    PrintStream stream=new PrintStream(s);
    stream.println(""String_Node_Str"");
    stream.println(""String_Node_Str"");
    for (    P4ChangeEntry cl : changes) {
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.getId() + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.getClientId() + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getMsg()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getAuthor().getDisplayName()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getChangeTime()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.isShelved() + ""String_Node_Str"");
      stream.println(""String_Node_Str"");
      for (      IFileSpec filespec : cl.getFiles()) {
        FileAction action=filespec.getAction();
        int revision=filespec.getEndRevision();
        String depotPath=filespec.getDepotPathString();
        String safePath=URLEncoder.encode(depotPath,""String_Node_Str"");
        stream.println(""String_Node_Str"" + revision + ""String_Node_Str""+ action.name()+ ""String_Node_Str""+ safePath+ ""String_Node_Str"");
      }
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
      List<IFix> jobs=cl.getJobs();
      if (jobs != null) {
        for (        IFix job : jobs) {
          String id=job.getJobId();
          String status=job.getStatus();
          stream.println(""String_Node_Str"" + id + ""String_Node_Str""+ status+ ""String_Node_Str"");
        }
      }
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
    }
    stream.println(""String_Node_Str"");
    stream.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
}","public static void store(File file,List<P4ChangeEntry> changes){
  try {
    FileOutputStream o=new FileOutputStream(file);
    BufferedOutputStream b=new BufferedOutputStream(o);
    Charset c=Charset.forName(""String_Node_Str"");
    OutputStreamWriter w=new OutputStreamWriter(b,c);
    WriterOutputStream s=new WriterOutputStream(w);
    PrintStream stream=new PrintStream(s,true,""String_Node_Str"");
    stream.println(""String_Node_Str"");
    stream.println(""String_Node_Str"");
    for (    P4ChangeEntry cl : changes) {
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.getId() + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.getClientId() + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getMsg()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getAuthor().getDisplayName()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + StringEscapeUtils.escapeXml(cl.getChangeTime()) + ""String_Node_Str"");
      stream.println(""String_Node_Str"" + cl.isShelved() + ""String_Node_Str"");
      stream.println(""String_Node_Str"");
      for (      IFileSpec filespec : cl.getFiles()) {
        FileAction action=filespec.getAction();
        int revision=filespec.getEndRevision();
        String depotPath=filespec.getDepotPathString();
        String safePath=URLEncoder.encode(depotPath,""String_Node_Str"");
        stream.println(""String_Node_Str"" + revision + ""String_Node_Str""+ action.name()+ ""String_Node_Str""+ safePath+ ""String_Node_Str"");
      }
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
      List<IFix> jobs=cl.getJobs();
      if (jobs != null) {
        for (        IFix job : jobs) {
          String id=job.getJobId();
          String status=job.getStatus();
          stream.println(""String_Node_Str"" + id + ""String_Node_Str""+ status+ ""String_Node_Str"");
        }
      }
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
      stream.println(""String_Node_Str"");
    }
    stream.println(""String_Node_Str"");
    stream.close();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
}",0.9949901982138968
142484,"private void tidyRevisions(String path,Populate populate) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"");
  boolean delete=((AutoCleanImpl)populate).isDelete();
  boolean replace=((AutoCleanImpl)populate).isReplace();
  String[] base={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> list=new ArrayList<String>();
  list.addAll(Arrays.asList(base));
  String[] args=list.toArray(new String[list.size()]);
  ReconcileFilesOptions statusOpts=new ReconcileFilesOptions(args);
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(path);
  List<IFileSpec> status=iclient.reconcileFiles(files,statusOpts);
  validate.check(status,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<IFileSpec> update=new ArrayList<IFileSpec>();
  for (  IFileSpec s : status) {
    if (s.getOpStatus() == FileSpecOpStatus.VALID) {
      String local=s.getLocalPathString();
      if (local == null) {
        local=depotToLocal(s);
      }
switch (s.getAction()) {
case ADD:
        if (local != null && delete) {
          File unlink=new File(local);
          unlink.delete();
        }
      break;
default :
    update.add(s);
  break;
}
}
 else {
String msg=s.getStatusMessage();
if (msg.contains(""String_Node_Str"")) {
String rev=msg.substring(0,msg.indexOf(""String_Node_Str""));
IFileSpec spec=new FileSpec(rev);
update.add(spec);
}
}
}
if (!update.isEmpty() && replace) {
SyncOptions syncOpts=new SyncOptions();
syncOpts.setForceUpdate(true);
syncOpts.setQuiet(populate.isQuiet());
List<IFileSpec> syncMsg=iclient.sync(update,syncOpts);
validate.check(syncMsg,""String_Node_Str"",""String_Node_Str"");
}
log(""String_Node_Str"" + timer.toString() + ""String_Node_Str"");
}","private void tidyRevisions(String path,Populate populate) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"");
  boolean delete=((AutoCleanImpl)populate).isDelete();
  boolean replace=((AutoCleanImpl)populate).isReplace();
  String[] base={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> list=new ArrayList<String>();
  list.addAll(Arrays.asList(base));
  String[] args=list.toArray(new String[list.size()]);
  ReconcileFilesOptions statusOpts=new ReconcileFilesOptions(args);
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(path);
  List<IFileSpec> status=iclient.reconcileFiles(files,statusOpts);
  validate.check(status,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<IFileSpec> update=new ArrayList<IFileSpec>();
  for (  IFileSpec s : status) {
    if (s.getOpStatus() == FileSpecOpStatus.VALID) {
      String local=s.getLocalPathString();
      if (local == null) {
        local=depotToLocal(s);
      }
switch (s.getAction()) {
case ADD:
        if (local != null && delete) {
          File unlink=new File(local);
          boolean ok=unlink.delete();
          if (!ok) {
            log(""String_Node_Str"" + local);
          }
        }
      break;
default :
    update.add(s);
  break;
}
}
 else {
String msg=s.getStatusMessage();
if (msg.contains(""String_Node_Str"")) {
String rev=msg.substring(0,msg.indexOf(""String_Node_Str""));
IFileSpec spec=new FileSpec(rev);
update.add(spec);
}
}
}
if (!update.isEmpty() && replace) {
SyncOptions syncOpts=new SyncOptions();
syncOpts.setForceUpdate(true);
syncOpts.setQuiet(populate.isQuiet());
List<IFileSpec> syncMsg=iclient.sync(update,syncOpts);
validate.check(syncMsg,""String_Node_Str"",""String_Node_Str"");
}
log(""String_Node_Str"" + timer.toString() + ""String_Node_Str"");
}",0.9687002652519894
142485,"private void tidyPending(String path) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"");
  RevertFilesOptions rOpts=new RevertFilesOptions();
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(path);
  List<IFileSpec> list=iclient.revertFiles(files,rOpts);
  validate.check(list,""String_Node_Str"");
  log(""String_Node_Str"");
  for (  IFileSpec file : list) {
    if (file.getAction() == FileAction.ABANDONED) {
      String local=file.getLocalPathString();
      if (local == null) {
        local=depotToLocal(file);
      }
      if (local != null) {
        File unlink=new File(local);
        unlink.delete();
      }
    }
  }
  log(""String_Node_Str"" + timer.toString() + ""String_Node_Str"");
}","private void tidyPending(String path) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"");
  RevertFilesOptions rOpts=new RevertFilesOptions();
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(path);
  List<IFileSpec> list=iclient.revertFiles(files,rOpts);
  validate.check(list,""String_Node_Str"");
  log(""String_Node_Str"");
  for (  IFileSpec file : list) {
    if (file.getAction() == FileAction.ABANDONED) {
      String local=file.getLocalPathString();
      if (local == null) {
        local=depotToLocal(file);
      }
      if (local != null) {
        File unlink=new File(local);
        boolean ok=unlink.delete();
        if (!ok) {
          log(""String_Node_Str"" + local);
        }
      }
    }
  }
  log(""String_Node_Str"" + timer.toString() + ""String_Node_Str"");
}",0.9469598965071152
142486,"private int CheckNativeUse(String revisions,SyncOptions syncOpts,ParallelSync parallel) throws AccessException, RequestException, ConnectionException, IOException {
  try {
    String p4=parallel.getPath();
    List<String> command=new ArrayList<String>();
    command.add(p4);
    command.add(""String_Node_Str"" + iclient.getName());
    command.add(""String_Node_Str"" + p4credential.getP4port());
    command.add(""String_Node_Str"" + p4credential.getUsername());
    command.add(""String_Node_Str"");
    if (syncOpts.isForceUpdate()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isQuiet()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isClientBypass()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isSafetyCheck()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isServerBypass()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isNoUpdate()) {
      command.add(""String_Node_Str"");
    }
    String threads=parallel.getThreads();
    String minfiles=parallel.getMinfiles();
    String minbytes=parallel.getMinbytes();
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"" + threads + ""String_Node_Str""+ minfiles+ ""String_Node_Str""+ minbytes);
    command.add(revisions);
    ProcessBuilder builder=new ProcessBuilder(command);
    final Process process=builder.start();
    InputStream inputStream=process.getInputStream();
    InputStream errorStream=process.getErrorStream();
    BufferedReader inputStreamReader=new BufferedReader(new InputStreamReader(inputStream));
    BufferedReader errorStreamReader=new BufferedReader(new InputStreamReader(errorStream));
    log(""String_Node_Str"" + StringUtils.join(command,""String_Node_Str""));
    log(""String_Node_Str"");
    String line;
    while ((line=inputStreamReader.readLine()) != null) {
      log(line);
    }
    while ((line=errorStreamReader.readLine()) != null) {
      log(line);
    }
    int exitCode=process.waitFor();
    log(""String_Node_Str"" + Integer.toString(exitCode));
    log(""String_Node_Str"");
    return exitCode;
  }
 catch (  Exception e) {
    log(e.getMessage());
    return 1;
  }
}","private int CheckNativeUse(String revisions,SyncOptions syncOpts,ParallelSync parallel){
  try {
    String p4=parallel.getPath();
    List<String> command=new ArrayList<String>();
    command.add(p4);
    command.add(""String_Node_Str"" + iclient.getName());
    command.add(""String_Node_Str"" + p4credential.getP4port());
    command.add(""String_Node_Str"" + p4credential.getUsername());
    command.add(""String_Node_Str"");
    if (syncOpts.isForceUpdate()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isQuiet()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isClientBypass()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isSafetyCheck()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isServerBypass()) {
      command.add(""String_Node_Str"");
    }
    if (syncOpts.isNoUpdate()) {
      command.add(""String_Node_Str"");
    }
    String threads=parallel.getThreads();
    String minfiles=parallel.getMinfiles();
    String minbytes=parallel.getMinbytes();
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"" + threads + ""String_Node_Str""+ minfiles+ ""String_Node_Str""+ minbytes);
    command.add(revisions);
    ProcessBuilder builder=new ProcessBuilder(command);
    final Process process=builder.start();
    InputStream inputStream=process.getInputStream();
    InputStream errorStream=process.getErrorStream();
    BufferedReader inputStreamReader=new BufferedReader(new InputStreamReader(inputStream,""String_Node_Str""));
    BufferedReader errorStreamReader=new BufferedReader(new InputStreamReader(errorStream,""String_Node_Str""));
    log(""String_Node_Str"" + StringUtils.join(command,""String_Node_Str""));
    log(""String_Node_Str"");
    String line;
    while ((line=inputStreamReader.readLine()) != null) {
      log(line);
    }
    while ((line=errorStreamReader.readLine()) != null) {
      log(line);
    }
    int exitCode=process.waitFor();
    inputStreamReader.close();
    errorStreamReader.close();
    log(""String_Node_Str"" + Integer.toString(exitCode));
    log(""String_Node_Str"");
    return exitCode;
  }
 catch (  UnsupportedEncodingException e) {
    log(e.getMessage());
  }
catch (  IOException e) {
    log(e.getMessage());
  }
catch (  InterruptedException e) {
    log(e.getMessage());
  }
  return 1;
}",0.0795352993744414
142487,"@CheckForNull public String getTicketValue(){
  return ticket.getTicketValue();
}","@CheckForNull public String getTicketValue(){
  return (ticket == null) ? ""String_Node_Str"" : ticket.getTicketValue();
}",0.8059701492537313
142488,"public boolean isTicketPathSet(){
  return ticket.isTicketPathSet();
}","public boolean isTicketPathSet(){
  return (ticket == null) ? false : ticket.isTicketPathSet();
}",0.8383233532934131
142489,"public boolean isTicketValueSet(){
  return ticket.isTicketValueSet();
}","public boolean isTicketValueSet(){
  return (ticket == null) ? false : ticket.isTicketValueSet();
}",0.8421052631578947
142490,"@CheckForNull public String getTicketPath(){
  return ticket.getTicketPath();
}","@CheckForNull public String getTicketPath(){
  return (ticket == null) ? ""String_Node_Str"" : ticket.getTicketPath();
}",0.8020304568527918
142491,"@DataBoundConstructor public TicketModeImpl(@CheckForNull String value,@CheckForNull String ticketValue,@CheckForNull String ticketPath){
  this.value=value;
  this.ticketValue=ticketValue;
  this.ticketPath=ticketPath;
}","@DataBoundConstructor public TicketModeImpl(String value,String ticketValue,String ticketPath){
  this.value=value;
  this.ticketValue=ticketValue;
  this.ticketPath=ticketPath;
}",0.895
142492,"/** 
 * Construct workspace from environment and then look for changes.
 * @param envVars
 * @param listener
 * @return
 * @throws InterruptedException
 * @throws IOException
 */
private PollingResult pollWorkspace(EnvVars envVars,TaskListener listener,FilePath buildWorkspace) throws InterruptedException, IOException {
  PrintStream log=listener.getLogger();
  Node node=workspaceToNode(buildWorkspace);
  String nodeName=node.getNodeName();
  nodeName=(nodeName.isEmpty()) ? ""String_Node_Str"" : nodeName;
  envVars.put(""String_Node_Str"",envVars.get(""String_Node_Str"",nodeName));
  Workspace ws=(Workspace)workspace.clone();
  ws.setExpand(envVars);
  String client=ws.getFullName();
  log.println(""String_Node_Str"" + nodeName + ""String_Node_Str""+ client);
  String pin=populate.getPin();
  if (pin != null && !pin.isEmpty()) {
    pin=ws.getExpand().format(pin,false);
    ws.getExpand().set(ReviewProp.LABEL.toString(),pin);
  }
  PollTask task=new PollTask(filter);
  task.setCredential(credential);
  task.setWorkspace(ws);
  task.setListener(listener);
  task.setLimit(pin);
  changes=buildWorkspace.act(task);
  if (!changes.isEmpty()) {
    return PollingResult.BUILD_NOW;
  }
  return PollingResult.NO_CHANGES;
}","/** 
 * Construct workspace from environment and then look for changes.
 * @param envVars
 * @param listener
 * @throws InterruptedException
 * @throws IOException
 */
private PollingResult pollWorkspace(EnvVars envVars,TaskListener listener,FilePath buildWorkspace) throws InterruptedException, IOException {
  PrintStream log=listener.getLogger();
  Node node=workspaceToNode(buildWorkspace);
  String nodeName=node.getNodeName();
  nodeName=(nodeName.isEmpty()) ? ""String_Node_Str"" : nodeName;
  envVars.put(""String_Node_Str"",envVars.get(""String_Node_Str"",nodeName));
  Workspace ws=(Workspace)workspace.clone();
  ws.setExpand(envVars);
  String client=ws.getFullName();
  log.println(""String_Node_Str"" + nodeName + ""String_Node_Str""+ client);
  String pin=populate.getPin();
  if (pin != null && !pin.isEmpty()) {
    pin=ws.getExpand().format(pin,false);
    ws.getExpand().set(ReviewProp.LABEL.toString(),pin);
  }
  PollTask task=new PollTask(filter);
  task.setCredential(credential);
  task.setWorkspace(ws);
  task.setListener(listener);
  task.setLimit(pin);
  changes=buildWorkspace.act(task);
  if (!changes.isEmpty()) {
    return PollingResult.BUILD_NOW;
  }
  return PollingResult.NO_CHANGES;
}",0.9954788327168104
142493,"/** 
 * Helper: find the Remote/Local Computer used for build
 * @param workspace
 * @return
 */
private static Computer workspaceToComputer(FilePath workspace){
  Jenkins jenkins=Jenkins.getInstance();
  if (workspace != null && workspace.isRemote()) {
    for (    Computer computer : jenkins.getComputers()) {
      if (computer.getChannel() == workspace.getChannel()) {
        return computer;
      }
    }
  }
  return null;
}","/** 
 * Helper: find the Remote/Local Computer used for build
 * @param workspace
 */
private static Computer workspaceToComputer(FilePath workspace){
  Jenkins jenkins=Jenkins.getInstance();
  if (workspace != null && workspace.isRemote()) {
    for (    Computer computer : jenkins.getComputers()) {
      if (computer.getChannel() == workspace.getChannel()) {
        return computer;
      }
    }
  }
  return null;
}",0.9871345029239766
142494,"/** 
 * Helper: find the Node for slave build or return current instance.
 * @param workspace
 * @return
 */
private static Node workspaceToNode(FilePath workspace){
  Computer computer=workspaceToComputer(workspace);
  if (computer != null) {
    return computer.getNode();
  }
  Jenkins jenkins=Jenkins.getInstance();
  return jenkins;
}","/** 
 * Helper: find the Node for slave build or return current instance.
 * @param workspace
 */
private static Node workspaceToNode(FilePath workspace){
  Computer computer=workspaceToComputer(workspace);
  if (computer != null) {
    return computer.getNode();
  }
  Jenkins jenkins=Jenkins.getInstance();
  return jenkins;
}",0.9835082458770614
142495,"/** 
 * Called before a workspace is deleted on the given node, to provide SCM an opportunity to perform clean up.
 */
@Override public boolean processWorkspaceBeforeDeletion(Job<?,?> job,FilePath workspace,Node node) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  String scmCredential=getCredential();
  Run<?,?> run=job.getLastBuild();
  if (run == null) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  String client=""String_Node_Str"";
  try {
    EnvVars envVars=run.getEnvironment(null);
    client=envVars.get(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  ConnectionHelper connection=new ConnectionHelper(scmCredential,null);
  try {
    if (!connection.isClient(client)) {
      logger.warning(""String_Node_Str"" + client);
      return false;
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  RemoveClientTask task=new RemoveClientTask(scmCredential,client,populate);
  boolean clean=workspace.act(task);
  logger.info(""String_Node_Str"" + clean);
  return clean;
}","/** 
 * Called before a workspace is deleted on the given node, to provide SCM an opportunity to perform clean up.
 */
@Override public boolean processWorkspaceBeforeDeletion(Job<?,?> job,FilePath workspace,Node node) throws IOException, InterruptedException {
  logger.info(""String_Node_Str"");
  String scmCredential=getCredential();
  Run<?,?> run=job.getLastBuild();
  if (run == null) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  LogTaskListener listener=new LogTaskListener(logger,Level.INFO);
  EnvVars envVars=run.getEnvironment(listener);
  String client=envVars.get(""String_Node_Str"");
  if (client == null || client.isEmpty()) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  ConnectionHelper connection=new ConnectionHelper(scmCredential,null);
  try {
    if (!connection.isClient(client)) {
      logger.warning(""String_Node_Str"" + client);
      return false;
    }
  }
 catch (  Exception e) {
    logger.warning(""String_Node_Str"");
    return false;
  }
  RemoveClientTask task=new RemoveClientTask(scmCredential,client,populate);
  boolean clean=workspace.act(task);
  logger.info(""String_Node_Str"" + clean);
  return clean;
}",0.6583044982698962
142496,"/** 
 * Determines the link to the diff between the version. in the  {@link PerforceChangeLogEntry.Change.File} to its previous version.
 * @return null if the browser doesn't have any URL for diff.
 */
public abstract URL getDiffLink(IFileSpec file) throws Exception ;","/** 
 * Determines the link to the diff between the version.
 * @return null if the browser doesn't have any URL for diff.
 */
public abstract URL getDiffLink(IFileSpec file) throws Exception ;",0.8354978354978355
142497,"/** 
 * Workaround for p4java bug. The 'setLocalSyntax(true)' option does not provide local syntax, so I have to use 'p4 where' to translate through the client view.
 * @param fileSpec
 * @return
 * @throws Exception
 */
private String depotToLocal(IFileSpec fileSpec) throws Exception {
  String depotPath=fileSpec.getDepotPathString();
  if (depotPath == null) {
    depotPath=fileSpec.getOriginalPathString();
  }
  if (depotPath == null) {
    return null;
  }
  List<IFileSpec> dSpec=FileSpecBuilder.makeFileSpecList(depotPath);
  List<IFileSpec> lSpec=iclient.where(dSpec);
  String path=lSpec.get(0).getLocalPathString();
  return path;
}","/** 
 * Workaround for p4java bug. The 'setLocalSyntax(true)' option does not provide local syntax, so I have to use 'p4 where' to translate through the client view.
 * @param fileSpec
 * @return Local syntax
 * @throws Exception
 */
private String depotToLocal(IFileSpec fileSpec) throws Exception {
  String depotPath=fileSpec.getDepotPathString();
  if (depotPath == null) {
    depotPath=fileSpec.getOriginalPathString();
  }
  if (depotPath == null) {
    return null;
  }
  List<IFileSpec> dSpec=FileSpecBuilder.makeFileSpecList(depotPath);
  List<IFileSpec> lSpec=iclient.where(dSpec);
  String path=lSpec.get(0).getLocalPathString();
  return path;
}",0.990023023791251
142498,"/** 
 * Get the change number for the last change within the scope of the workspace view.
 * @return
 * @throws Exception
 */
public int getClientHead() throws Exception {
  String latestChange=connection.getCounter(""String_Node_Str"");
  int change=Integer.parseInt(latestChange);
  String ws=""String_Node_Str"" + iclient.getName() + ""String_Node_Str"";
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(ws);
  GetChangelistsOptions opts=new GetChangelistsOptions();
  opts.setType(IChangelist.Type.SUBMITTED);
  opts.setMaxMostRecent(1);
  List<IChangelistSummary> list=connection.getChangelists(files,opts);
  if (!list.isEmpty() && list.get(0) != null) {
    change=list.get(0).getId();
  }
 else {
    log(""String_Node_Str"" + ws + ""String_Node_Str""+ change);
  }
  return change;
}","/** 
 * Get the change number for the last change within the scope of the workspace view.
 * @return Perforce change
 * @throws Exception
 */
public int getClientHead() throws Exception {
  String latestChange=connection.getCounter(""String_Node_Str"");
  int change=Integer.parseInt(latestChange);
  String ws=""String_Node_Str"" + iclient.getName() + ""String_Node_Str"";
  List<IFileSpec> files=FileSpecBuilder.makeFileSpecList(ws);
  GetChangelistsOptions opts=new GetChangelistsOptions();
  opts.setType(IChangelist.Type.SUBMITTED);
  opts.setMaxMostRecent(1);
  List<IChangelistSummary> list=connection.getChangelists(files,opts);
  if (!list.isEmpty() && list.get(0) != null) {
    change=list.get(0).getId();
  }
 else {
    log(""String_Node_Str"" + ws + ""String_Node_Str""+ change);
  }
  return change;
}",0.9899749373433584
142499,"/** 
 * Creates a server connection; provides a connection to the Perforce Server, initially client is undefined.
 * @return
 * @throws Exception
 */
public static IOptionsServer getConnection(ConnectionConfig config) throws Exception {
  IOptionsServer iserver=getRawConnection(config);
  if (config.isSsl()) {
    String serverTrust=iserver.getTrust();
    if (!serverTrust.equalsIgnoreCase(config.getTrust())) {
      logger.warning(""String_Node_Str"" + serverTrust);
    }
 else {
      iserver.addTrust(config.getTrust());
    }
  }
  iserver.connect();
  currentP4=iserver;
  return iserver;
}","/** 
 * Creates a server connection; provides a connection to the Perforce Server, initially client is undefined.
 * @throws Exception
 */
public static IOptionsServer getConnection(ConnectionConfig config) throws Exception {
  IOptionsServer iserver=getRawConnection(config);
  if (config.isSsl()) {
    String serverTrust=iserver.getTrust();
    if (!serverTrust.equalsIgnoreCase(config.getTrust())) {
      logger.warning(""String_Node_Str"" + serverTrust);
    }
 else {
      iserver.addTrust(config.getTrust());
    }
  }
  iserver.connect();
  currentP4=iserver;
  return iserver;
}",0.9907172995780592
142500,"/** 
 * Get Perforce Label
 * @param id
 * @return
 * @throws Exception
 */
public Label getLabel(String id) throws Exception {
  return (Label)connection.getLabel(id);
}","/** 
 * Get Perforce Label
 * @param id
 * @return Perforce Label
 * @throws Exception
 */
public Label getLabel(String id) throws Exception {
  return (Label)connection.getLabel(id);
}",0.9577464788732394
142501,"/** 
 * Find all files within a shelf.
 * @param id
 * @return
 * @throws Exception
 */
public List<IFileSpec> getShelvedFiles(int id) throws Exception {
  String cmd=CmdSpec.DESCRIBE.name();
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + id};
  List<Map<String,Object>> resultMaps;
  resultMaps=connection.execMapCmdList(cmd,args,null);
  List<IFileSpec> list=new ArrayList<IFileSpec>();
  if (resultMaps != null) {
    if ((resultMaps.size() > 0) && (resultMaps.get(0) != null)) {
      Map<String,Object> map=resultMaps.get(0);
      if (map.containsKey(""String_Node_Str"")) {
        for (int i=0; map.get(""String_Node_Str"" + i) != null; i++) {
          FileSpec fSpec=new FileSpec(map,connection,i);
          fSpec.setChangelistId(id);
          list.add(fSpec);
        }
      }
    }
  }
  return list;
}","/** 
 * Find all files within a shelf.
 * @param id
 * @return List of file specs
 * @throws Exception
 */
public List<IFileSpec> getShelvedFiles(int id) throws Exception {
  String cmd=CmdSpec.DESCRIBE.name();
  String[] args=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + id};
  List<Map<String,Object>> resultMaps;
  resultMaps=connection.execMapCmdList(cmd,args,null);
  List<IFileSpec> list=new ArrayList<IFileSpec>();
  if (resultMaps != null) {
    if ((resultMaps.size() > 0) && (resultMaps.get(0) != null)) {
      Map<String,Object> map=resultMaps.get(0);
      if (map.containsKey(""String_Node_Str"")) {
        for (int i=0; map.get(""String_Node_Str"" + i) != null; i++) {
          FileSpec fSpec=new FileSpec(map,connection,i);
          fSpec.setChangelistId(id);
          list.add(fSpec);
        }
      }
    }
  }
  return list;
}",0.988959907030796
142502,"/** 
 * Gets the Changelist (p4 describe -s); shouldn't need a client, but p4-java throws an exception if one is not set.
 * @param id
 * @return
 * @throws Exception
 */
public Changelist getChange(int id) throws Exception {
  try {
    return (Changelist)connection.getChangelist(id);
  }
 catch (  RequestException e) {
    ChangelistOptions opts=new ChangelistOptions();
    opts.setOriginalChangelist(true);
    return (Changelist)connection.getChangelist(id,opts);
  }
}","/** 
 * Gets the Changelist (p4 describe -s); shouldn't need a client, but p4-java throws an exception if one is not set.
 * @param id
 * @return Perforce Changelist
 * @throws Exception
 */
public Changelist getChange(int id) throws Exception {
  try {
    return (Changelist)connection.getChangelist(id);
  }
 catch (  RequestException e) {
    ChangelistOptions opts=new ChangelistOptions();
    opts.setOriginalChangelist(true);
    return (Changelist)connection.getChangelist(id,opts);
  }
}",0.9794238683127572
142503,"/** 
 * Retry Connection with back off for each failed attempt.
 * @param attempt
 */
private void connectionRetry(){
  int trys=0;
  int attempt=getRetry();
  while (trys <= attempt) {
    if (connect()) {
      return;
    }
    trys++;
    String err=""String_Node_Str"" + trys;
    logger.severe(err);
    log(err);
    try {
      TimeUnit.SECONDS.sleep(trys ^ 2);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  String err=""String_Node_Str"";
  logger.severe(err);
  log(err);
}","/** 
 * Retry Connection with back off for each failed attempt.
 */
private void connectionRetry(){
  int trys=0;
  int attempt=getRetry();
  while (trys <= attempt) {
    if (connect()) {
      return;
    }
    trys++;
    String err=""String_Node_Str"" + trys;
    logger.severe(err);
    log(err);
    try {
      TimeUnit.SECONDS.sleep(trys ^ 2);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  String err=""String_Node_Str"";
  logger.severe(err);
  log(err);
}",0.9827586206896552
142504,"/** 
 * Find all files within a label or change. (Max results limited by limit)
 * @param label
 * @param limit
 * @return
 * @throws Exception
 */
public List<IFileSpec> getLabelFiles(String id,int limit) throws Exception {
  String path=""String_Node_Str"" + id;
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(path);
  GetDepotFilesOptions opts=new GetDepotFilesOptions();
  opts.setMaxResults(limit);
  List<IFileSpec> tagged=connection.getDepotFiles(spec,opts);
  return tagged;
}","/** 
 * Find all files within a label or change. (Max results limited by limit)
 * @param id
 * @param limit
 * @return List of file specs
 * @throws Exception
 */
public List<IFileSpec> getLabelFiles(String id,int limit) throws Exception {
  String path=""String_Node_Str"" + id;
  List<IFileSpec> spec=FileSpecBuilder.makeFileSpecList(path);
  GetDepotFilesOptions opts=new GetDepotFilesOptions();
  opts.setMaxResults(limit);
  List<IFileSpec> tagged=connection.getDepotFiles(spec,opts);
  return tagged;
}",0.9739478957915833
142505,"/** 
 * Delete a client workspace
 * @param userName
 * @return
 * @throws Exception
 */
public void deleteClient(String name) throws Exception {
  DeleteClientOptions opts=new DeleteClientOptions();
  connection.deleteClient(name,opts);
}","/** 
 * Delete a client workspace
 * @param name
 * @throws Exception
 */
public void deleteClient(String name) throws Exception {
  DeleteClientOptions opts=new DeleteClientOptions();
  connection.deleteClient(name,opts);
}",0.9503239740820736
142506,"/** 
 * Checks the Perforce server version number and returns true if greater than or equal to the min version. The value of min must be of the form 20092 or 20073 (corresponding to 2009.2 and 2007.3 respectively).
 * @param min
 * @return
 */
public boolean checkVersion(int min){
  int ver=connection.getServerVersionNumber();
  return (ver >= min);
}","/** 
 * Checks the Perforce server version number and returns true if greater than or equal to the min version. The value of min must be of the form 20092 or 20073 (corresponding to 2009.2 and 2007.3 respectively).
 * @param min
 * @return true if version supported.
 */
public boolean checkVersion(int min){
  int ver=connection.getServerVersionNumber();
  return (ver >= min);
}",0.9631650750341064
142507,"/** 
 * Create/Update a Perforce Label
 * @param id
 * @return
 * @throws Exception
 */
public void setLabel(Label label) throws Exception {
  String user=connection.getUserName();
  label.setOwnerName(user);
  connection.updateLabel(label);
}","/** 
 * Create/Update a Perforce Label
 * @param label
 * @throws Exception
 */
public void setLabel(Label label) throws Exception {
  String user=connection.getUserName();
  label.setOwnerName(user);
  connection.updateLabel(label);
}",0.9623430962343096
142508,"/** 
 * Jelly Method
 * @return
 */
public List<StringParameterValue> getAvailableParameters(){
  List<StringParameterValue> stringParameters=new ArrayList<StringParameterValue>();
  for (  ParameterDefinition parameterDefinition : getParameterDefinitions()) {
    StringParameterValue stringParameter=new StringParameterValue(parameterDefinition.getName(),parameterDefinition.getDescription());
    stringParameters.add(stringParameter);
  }
  return stringParameters;
}","/** 
 * Jelly Method
 */
public List<StringParameterValue> getAvailableParameters(){
  List<StringParameterValue> stringParameters=new ArrayList<StringParameterValue>();
  for (  ParameterDefinition parameterDefinition : getParameterDefinitions()) {
    StringParameterValue stringParameter=new StringParameterValue(parameterDefinition.getName(),parameterDefinition.getDescription());
    stringParameters.add(stringParameter);
  }
  return stringParameters;
}",0.9881847475832438
142509,"/** 
 * Method used by Jelly code to show Label information (do not remove)
 * @param tag
 * @return
 * @throws Exception
 */
public Label getLabel(String tag) throws Exception {
  ClientHelper p4=new ClientHelper(credential,null,client,charset);
  Label label=p4.getLabel(tag);
  return label;
}","/** 
 * Method used by Jelly code to show Label information (do not remove)
 * @param tag
 * @throws Exception
 */
public Label getLabel(String tag) throws Exception {
  ClientHelper p4=new ClientHelper(credential,null,client,charset);
  Label label=p4.getLabel(tag);
  return label;
}",0.9810671256454389
142510,"public void labelBuild(TaskListener listener,String name,String description,final FilePath nodeWorkspace) throws Exception {
  EnvVars env=getRun().getEnvironment(listener);
  Expand expand=new Expand(env);
  name=expand.format(name,false);
  description=expand.format(description,false);
  TaggingTask task=new TaggingTask(name,description);
  task.setListener(listener);
  task.setCredential(credential);
  task.setWorkspace(workspace);
  task.setBuildChange(buildChange);
  FilePath buildWorkspace=nodeWorkspace;
  if (nodeWorkspace == null) {
    buildWorkspace=build.getWorkspace();
  }
  buildWorkspace.act(task);
  if (!tags.contains(name)) {
    tags.add(name);
    getRun().save();
  }
}","public void labelBuild(TaskListener listener,String name,String description,final FilePath nodeWorkspace) throws Exception {
  EnvVars env=getRun().getEnvironment(listener);
  Expand expand=new Expand(env);
  name=expand.format(name,false);
  description=expand.format(description,false);
  TaggingTask task=new TaggingTask(name,description);
  task.setListener(listener);
  task.setCredential(credential);
  task.setWorkspace(workspace);
  task.setBuildChange(buildChange);
  FilePath buildWorkspace=nodeWorkspace;
  if (nodeWorkspace == null) {
    buildWorkspace=build.getWorkspace();
  }
  if (buildWorkspace == null) {
    logger.warning(""String_Node_Str"");
    return;
  }
  Boolean ok=buildWorkspace.act(task);
  if (ok && !tags.contains(name)) {
    tags.add(name);
    getRun().save();
  }
}",0.93048128342246
142511,"/** 
 * The checkout method is expected to check out modified files into the project workspace. In Perforce terms a 'p4 sync' on the project's workspace. Authorisation
 */
@Override public void checkout(Run<?,?> run,Launcher launcher,FilePath buildWorkspace,TaskListener listener,File changelogFile,SCMRevisionState baseline) throws IOException, InterruptedException {
  PrintStream log=listener.getLogger();
  boolean success=true;
  EnvVars envVars=run.getEnvironment(listener);
  envVars.put(""String_Node_Str"",envVars.get(""String_Node_Str"",""String_Node_Str""));
  Workspace ws=(Workspace)workspace.clone();
  ws.setExpand(envVars);
  ws.setRootPath(buildWorkspace.getRemote());
  if (ws.isPinHost()) {
    String hostname=getHostName(buildWorkspace);
    ws.setHostName(hostname);
  }
 else {
    ws.setHostName(""String_Node_Str"");
  }
  if (changes != null) {
    if (!changes.isEmpty()) {
      String label=Integer.toString(changes.get(0));
      ws.getExpand().set(ReviewProp.LABEL.toString(),label);
    }
  }
  CheckoutTask task=new CheckoutTask(populate);
  task.setListener(listener);
  task.setCredential(credential);
  task.setWorkspace(ws);
  task.initialise();
  TagAction tag=new TagAction(run);
  tag.setCredential(credential);
  tag.setWorkspace(ws);
  tag.setBuildChange(task.getSyncChange());
  run.addAction(tag);
  String node=ws.getExpand().get(""String_Node_Str"");
  Job<?,?> job=run.getParent();
  if (run instanceof MatrixBuild) {
    parentChange=task.getSyncChange();
    if (isBuildParent(job)) {
      log.println(""String_Node_Str"" + node);
      success&=buildWorkspace.act(task);
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
      success=true;
    }
  }
 else {
    if (job instanceof MatrixProject) {
      if (parentChange != null) {
        log.println(""String_Node_Str"" + parentChange);
        task.setBuildChange(parentChange);
      }
      log.println(""String_Node_Str"" + node);
    }
 else {
      log.println(""String_Node_Str"" + node);
    }
    success&=buildWorkspace.act(task);
  }
  if (success) {
    listener.getLogger().println(""String_Node_Str"");
    List<Object> changes=calculateChanges(run,task);
    P4ChangeSet.store(changelogFile,changes);
    listener.getLogger().println(""String_Node_Str"");
  }
 else {
    String msg=""String_Node_Str"";
    logger.warning(msg);
    throw new AbortException(msg);
  }
}","/** 
 * The checkout method is expected to check out modified files into the project workspace. In Perforce terms a 'p4 sync' on the project's workspace. Authorisation
 */
@Override public void checkout(Run<?,?> run,Launcher launcher,FilePath buildWorkspace,TaskListener listener,File changelogFile,SCMRevisionState baseline) throws IOException, InterruptedException {
  PrintStream log=listener.getLogger();
  boolean success=true;
  EnvVars envVars=run.getEnvironment(listener);
  envVars.put(""String_Node_Str"",envVars.get(""String_Node_Str"",""String_Node_Str""));
  Workspace ws=(Workspace)workspace.clone();
  ws.setExpand(envVars);
  ws.setRootPath(buildWorkspace.getRemote());
  if (ws.isPinHost()) {
    String hostname=getHostName(buildWorkspace);
    ws.setHostName(hostname);
  }
 else {
    ws.setHostName(""String_Node_Str"");
  }
  if (changes != null) {
    if (!changes.isEmpty()) {
      String label=Integer.toString(changes.get(0));
      ws.getExpand().set(ReviewProp.LABEL.toString(),label);
    }
  }
  CheckoutTask task=new CheckoutTask(populate);
  task.setListener(listener);
  task.setCredential(credential);
  task.setWorkspace(ws);
  task.initialise();
  TagAction tag=new TagAction(run);
  tag.setCredential(credential);
  tag.setWorkspace(ws);
  tag.setBuildChange(task.getSyncChange());
  run.addAction(tag);
  String node=ws.getExpand().get(""String_Node_Str"");
  Job<?,?> job=run.getParent();
  if (run instanceof MatrixBuild) {
    parentChange=task.getSyncChange();
    if (isBuildParent(job)) {
      log.println(""String_Node_Str"" + node);
      success&=buildWorkspace.act(task);
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
      success=true;
    }
  }
 else {
    if (job instanceof MatrixProject) {
      if (parentChange != null) {
        log.println(""String_Node_Str"" + parentChange);
        task.setBuildChange(parentChange);
      }
      log.println(""String_Node_Str"" + node);
    }
 else {
      log.println(""String_Node_Str"" + node);
    }
    success&=buildWorkspace.act(task);
  }
  if (success) {
    if (changelogFile != null) {
      listener.getLogger().println(""String_Node_Str"");
      List<Object> changes=calculateChanges(run,task);
      P4ChangeSet.store(changelogFile,changes);
      listener.getLogger().println(""String_Node_Str"");
    }
 else {
      listener.getLogger().println(""String_Node_Str"");
    }
  }
 else {
    String msg=""String_Node_Str"";
    logger.warning(msg);
    throw new AbortException(msg);
  }
}",0.9762392462105696
142512,"public boolean setClient(Workspace workspace) throws Exception {
  if (isUnicode()) {
    String charset=""String_Node_Str"";
    connection.setCharsetName(charset);
  }
  iclient=workspace.setClient(connection,authorisationConfig.getUsername());
  if (!isClientValid(workspace)) {
    return false;
  }
  if (workspace instanceof StaticWorkspaceImpl) {
    connection.setCurrentClient(iclient);
    return true;
  }
  if (workspace.getRootPath() != null) {
    iclient.setRoot(workspace.getRootPath());
  }
  if (workspace.getHostName() != null) {
    iclient.setHostName(workspace.getHostName());
  }
  IClientOptions options=iclient.getOptions();
  options.setClobber(true);
  iclient.setOptions(options);
  iclient.update();
  connection.setCurrentClient(iclient);
  return true;
}","public void setClient(Workspace workspace) throws Exception {
  if (isUnicode()) {
    String charset=""String_Node_Str"";
    connection.setCharsetName(charset);
  }
  iclient=workspace.setClient(connection,authorisationConfig.getUsername());
  if (!isClientValid(workspace)) {
    String err=""String_Node_Str"" + workspace.getFullName();
    throw new AbortException(err);
  }
  if (workspace instanceof StaticWorkspaceImpl) {
    connection.setCurrentClient(iclient);
    return;
  }
  if (workspace.getRootPath() != null) {
    iclient.setRoot(workspace.getRootPath());
  }
  if (workspace.getHostName() != null) {
    iclient.setHostName(workspace.getHostName());
  }
  IClientOptions options=iclient.getOptions();
  options.setClobber(true);
  iclient.setOptions(options);
  iclient.update();
  connection.setCurrentClient(iclient);
  return;
}",0.9251533742331288
142513,"private void pop(MarkupText text){
  text.hide(0,text.length());
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  text.addMarkup(text.length(),sb.toString());
}","private void pop(MarkupText text){
  text.hide(0,text.length());
  if (depth > 0) {
    StringBuffer sb=new StringBuffer();
    sb.append(""String_Node_Str"");
    text.addMarkup(text.length(),sb.toString());
    depth--;
  }
}",0.8970588235294118
142514,"private void push(MarkupText text){
  text.hide(0,COMMAND.length());
  String head=""String_Node_Str"";
  text.addMarkup(COMMAND.length(),head);
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  text.addMarkup(text.length() - 1,sb.toString());
  text.hide(text.length() - 1,text.length());
  id++;
}","private void push(MarkupText text){
  text.hide(0,COMMAND.length());
  String head=""String_Node_Str"";
  text.addMarkup(COMMAND.length(),head);
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + id);
  sb.append(""String_Node_Str"");
  text.addMarkup(text.length() - 1,sb.toString());
  text.hide(text.length() - 1,text.length());
  id++;
  depth++;
}",0.9927679158448388
142515,"protected boolean checkConnection(ClientHelper p4){
  p4.log(""String_Node_Str"");
  if (!p4.isConnected()) {
    p4.log(""String_Node_Str"" + getCredential().getP4port());
    return false;
  }
  p4.log(""String_Node_Str"" + getCredential().getP4port());
  String host;
  try {
    host=InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    host=""String_Node_Str"";
  }
  p4.log(""String_Node_Str"" + host);
  if (p4.getClient() == null) {
    p4.log(""String_Node_Str"" + getClient());
    return false;
  }
  p4.log(""String_Node_Str"" + getClient() + ""String_Node_Str"");
  return true;
}","protected boolean checkConnection(ClientHelper p4){
  p4.log(""String_Node_Str"");
  if (!p4.isConnected()) {
    p4.log(""String_Node_Str"" + getCredential().getP4port());
    return false;
  }
  p4.log(""String_Node_Str"" + getCredential().getP4port());
  String host;
  try {
    host=InetAddress.getLocalHost().getHostName();
  }
 catch (  UnknownHostException e) {
    host=""String_Node_Str"";
  }
  p4.log(""String_Node_Str"" + host);
  return true;
}",0.8260869565217391
142516,"public void setWorkspace(Workspace workspace) throws AbortException {
  this.workspace=workspace;
  this.client=workspace.getFullName();
  ClientHelper p4=getConnection();
  if (!checkConnection(p4)) {
    String err=""String_Node_Str"";
    logger.severe(err);
    p4.log(err);
    throw new AbortException(err);
  }
  boolean status=false;
  try {
    status=p4.setClient(workspace);
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e;
    logger.severe(err);
    p4.log(err);
    throw new AbortException(err);
  }
 finally {
    p4.disconnect();
  }
  if (!status) {
    String err=""String_Node_Str"" + workspace.getFullName();
    logger.severe(err);
    p4.log(err);
    throw new AbortException(err);
  }
}","public void setWorkspace(Workspace workspace) throws AbortException {
  this.workspace=workspace;
  this.client=workspace.getFullName();
  ClientHelper p4=getConnection();
  if (!checkConnection(p4)) {
    String err=""String_Node_Str"";
    logger.severe(err);
    p4.log(err);
    throw new AbortException(err);
  }
  try {
    p4.setClient(workspace);
    p4.log(""String_Node_Str"" + getClient() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    String err=""String_Node_Str"" + e;
    logger.severe(err);
    p4.log(err);
    throw new AbortException(err);
  }
 finally {
    p4.disconnect();
  }
}",0.8093443858327054
142517,"public Boolean invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  ClientHelper p4=getConnection();
  try {
    if (!checkConnection(p4)) {
      return false;
    }
    boolean open=p4.buildChange();
    if (open) {
      p4.publishChange(publish);
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e;
    logger.warning(msg);
    throw new InterruptedException(msg);
  }
 finally {
    p4.disconnect();
  }
  return true;
}","public Boolean invoke(File f,VirtualChannel channel) throws IOException, InterruptedException {
  ClientHelper p4=getConnection();
  try {
    if (!checkConnection(p4)) {
      return false;
    }
    boolean open=p4.buildChange();
    if (open) {
      p4.publishChange(publish);
    }
  }
 catch (  Exception e) {
    p4.log(""String_Node_Str"");
    String msg=""String_Node_Str"" + e;
    logger.warning(msg);
    throw new InterruptedException(msg);
  }
 finally {
    p4.disconnect();
  }
  return true;
}",0.9684638860630722
142518,"/** 
 * Unshelve review into workspace. Workspace is sync'ed to head first then review unshelved.
 * @param review
 * @throws Exception
 */
public void unshelveFiles(int review) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"" + review);
  List<IFileSpec> files;
  String path=iclient.getRoot() + ""String_Node_Str"";
  files=FileSpecBuilder.makeFileSpecList(path);
  SyncOptions syncOpts=new SyncOptions();
  log(""String_Node_Str"" + path);
  List<IFileSpec> syncMsg=iclient.sync(files,syncOpts);
  validateFileSpecs(syncMsg,""String_Node_Str"");
  List<IFileSpec> shelveMsg;
  log(""String_Node_Str"" + review + ""String_Node_Str""+ path);
  shelveMsg=iclient.unshelveChangelist(review,files,0,true,false);
  validateFileSpecs(shelveMsg,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IFileSpec spec : shelveMsg) {
    if (spec.getOpStatus() != FileSpecOpStatus.VALID) {
      String msg=spec.getStatusMessage();
      if (msg.contains(""String_Node_Str"")) {
        String rev=msg.substring(0,msg.indexOf(""String_Node_Str""));
        printFile(rev);
        log(""String_Node_Str"" + rev);
      }
    }
  }
  RevertFilesOptions rOpts=new RevertFilesOptions();
  rOpts.setNoUpdate(true);
  log(""String_Node_Str"" + path);
  List<IFileSpec> rvtMsg=iclient.revertFiles(files,rOpts);
  validateFileSpecs(rvtMsg,""String_Node_Str"");
  log(""String_Node_Str"" + timer.toString());
}","/** 
 * Unshelve review into workspace. Workspace is sync'ed to head first then review unshelved.
 * @param review
 * @throws Exception
 */
public void unshelveFiles(int review) throws Exception {
  TimeTask timer=new TimeTask();
  log(""String_Node_Str"" + review);
  List<IFileSpec> files;
  String path=iclient.getRoot() + ""String_Node_Str"";
  files=FileSpecBuilder.makeFileSpecList(path);
  SyncOptions syncOpts=new SyncOptions();
  log(""String_Node_Str"" + path);
  List<IFileSpec> syncMsg=iclient.sync(files,syncOpts);
  validateFileSpecs(syncMsg,""String_Node_Str"");
  List<IFileSpec> shelveMsg;
  log(""String_Node_Str"" + review);
  shelveMsg=iclient.unshelveChangelist(review,null,0,true,false);
  validateFileSpecs(shelveMsg,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (  IFileSpec spec : shelveMsg) {
    if (spec.getOpStatus() != FileSpecOpStatus.VALID) {
      String msg=spec.getStatusMessage();
      if (msg.contains(""String_Node_Str"")) {
        String rev=msg.substring(0,msg.indexOf(""String_Node_Str""));
        printFile(rev);
        log(""String_Node_Str"" + rev);
      }
    }
  }
  RevertFilesOptions rOpts=new RevertFilesOptions();
  rOpts.setNoUpdate(true);
  log(""String_Node_Str"" + path);
  List<IFileSpec> rvtMsg=iclient.revertFiles(files,rOpts);
  validateFileSpecs(rvtMsg,""String_Node_Str"");
  log(""String_Node_Str"" + timer.toString());
}",0.9874506991753316
142519,"public void setChange(ConnectionHelper p4,int changeId){
  try {
    Changelist changelist=(Changelist)p4.getChange(changeId);
    id=changelist.getId();
    String user=changelist.getUsername();
    author=User.get(user);
    date=changelist.getDate();
    clientId=changelist.getClientId();
    msg=changelist.getDescription();
    if (changelist.getStatus() == ChangelistStatus.PENDING) {
      files=p4.loadShelvedFiles(changeId);
      shelved=true;
    }
 else {
      files=p4.getFiles(""String_Node_Str"" + changeId,FILE_COUNT_LIMIT + 1);
      shelved=false;
    }
    if (files.size() > FILE_COUNT_LIMIT) {
      fileLimit=true;
      files=files.subList(0,FILE_COUNT_LIMIT);
    }
    List<String> affectedPaths=new ArrayList<String>();
    for (    IFileSpec item : files) {
      affectedPaths.add(item.getDepotPathString());
    }
    this.jobs=changelist.getJobs();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void setChange(ConnectionHelper p4,int changeId) throws Exception {
  Changelist changelist=(Changelist)p4.getChange(changeId);
  id=changelist.getId();
  String user=changelist.getUsername();
  author=User.get(user);
  date=changelist.getDate();
  clientId=changelist.getClientId();
  msg=changelist.getDescription();
  if (changelist.getStatus() == ChangelistStatus.PENDING) {
    files=p4.loadShelvedFiles(changeId);
    shelved=true;
  }
 else {
    files=p4.getFiles(""String_Node_Str"" + changeId,FILE_COUNT_LIMIT + 1);
    shelved=false;
  }
  if (files.size() > FILE_COUNT_LIMIT) {
    fileLimit=true;
    files=files.subList(0,FILE_COUNT_LIMIT);
  }
  List<String> affectedPaths=new ArrayList<String>();
  for (  IFileSpec item : files) {
    affectedPaths.add(item.getDepotPathString());
  }
  this.jobs=changelist.getJobs();
}",0.8550561797752809
142520,"public void setLabel(ConnectionHelper p4,String labelId){
  try {
    label=true;
    Label label=(Label)p4.getLabel(labelId);
    id=labelId;
    String user=label.getOwnerName();
    author=User.get(user);
    date=label.getLastAccess();
    clientId=labelId;
    msg=label.getDescription();
    files=p4.getFiles(labelId,FILE_COUNT_LIMIT + 1);
    if (files.size() > FILE_COUNT_LIMIT) {
      fileLimit=true;
      files=files.subList(0,FILE_COUNT_LIMIT);
    }
    List<String> affectedPaths=new ArrayList<String>();
    for (    IFileSpec item : files) {
      affectedPaths.add(item.getDepotPathString());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void setLabel(ConnectionHelper p4,String labelId) throws Exception {
  label=true;
  Label label=(Label)p4.getLabel(labelId);
  id=labelId;
  String user=label.getOwnerName();
  author=User.get(user);
  date=label.getLastAccess();
  clientId=labelId;
  msg=label.getDescription();
  files=p4.getFiles(labelId,FILE_COUNT_LIMIT + 1);
  if (files.size() > FILE_COUNT_LIMIT) {
    fileLimit=true;
    files=files.subList(0,FILE_COUNT_LIMIT);
  }
  List<String> affectedPaths=new ArrayList<String>();
  for (  IFileSpec item : files) {
    affectedPaths.add(item.getDepotPathString());
  }
}",0.831496062992126
142521,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.pop();
    changeEntries.add(entry);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      AbstractProject<?,?> project=build.getProject();
      PerforceScm scm=(PerforceScm)project.getScm();
      String credential=scm.getCredential();
      ConnectionHelper p4=new ConnectionHelper(credential,null);
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        int id=new Integer(text.toString());
        entry.setChange(p4,id);
      }
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        String id=text.toString();
        entry.setLabel(p4,id);
      }
      p4.disconnect();
      return;
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    return;
  }
  if (qName.equalsIgnoreCase(""String_Node_Str"")) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.pop();
    changeEntries.add(entry);
    return;
  }
  if (objects.peek() instanceof P4ChangeEntry) {
    P4ChangeEntry entry=(P4ChangeEntry)objects.peek();
    try {
      AbstractProject<?,?> project=build.getProject();
      PerforceScm scm=(PerforceScm)project.getScm();
      String credential=scm.getCredential();
      ConnectionHelper p4=new ConnectionHelper(credential,null);
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        int id=new Integer(text.toString());
        entry.setChange(p4,id);
      }
      if (qName.equalsIgnoreCase(""String_Node_Str"")) {
        String id=text.toString();
        entry.setLabel(p4,id);
      }
      p4.disconnect();
      return;
    }
 catch (    Exception e) {
      entry=null;
    }
  }
}",0.986758214811182
142522,"/** 
 * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
 * @param resid The resource id of the EditText that registers to the custom keyboard.
 */
public void registerEditText(int resid){
  EditText edittext=(EditText)mHostActivity.findViewById(resid);
  edittext.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus)       showCustomKeyboard(v);
 else       hideCustomKeyboard();
    }
  }
);
  edittext.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      showCustomKeyboard(v);
    }
  }
);
  edittext.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      EditText edittext=(EditText)v;
      int inType=edittext.getInputType();
      edittext.setInputType(InputType.TYPE_NULL);
      edittext.onTouchEvent(event);
      edittext.setInputType(inType);
      return true;
    }
  }
);
  edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
}","/** 
 * Register <var>EditText<var> with resource id <var>resid</var> (on the hosting activity) for using this custom keyboard.
 * @param resid The resource id of the EditText that registers to the custom keyboard.
 */
public void registerEditText(int resid){
  EditText edittext=(EditText)mHostActivity.findViewById(resid);
  edittext.setOnFocusChangeListener(new OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus)       showCustomKeyboard(v);
 else       hideCustomKeyboard();
    }
  }
);
  edittext.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      showCustomKeyboard(v);
    }
  }
);
  edittext.setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      EditText edittext=(EditText)v;
      int inType=edittext.getInputType();
      edittext.setInputType(InputType.TYPE_NULL);
      edittext.onTouchEvent(event);
      edittext.setInputType(inType);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        Layout layout=((EditText)v).getLayout();
      float x=event.getX() + v.getScrollX();
    int offset=layout.getOffsetForHorizontal(0,x);
  if (offset > 0)   if (x > layout.getLineMax(0)) {
    ((EditText)v).setSelection(offset);
  }
 else   ((EditText)v).setSelection(offset - 1);
break;
}
return true;
}
}
);
edittext.setInputType(edittext.getInputType() | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
}",0.8502451904941531
142523,"@Override public boolean onTouch(View v,MotionEvent event){
  EditText edittext=(EditText)v;
  int inType=edittext.getInputType();
  edittext.setInputType(InputType.TYPE_NULL);
  edittext.onTouchEvent(event);
  edittext.setInputType(inType);
  return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
  EditText edittext=(EditText)v;
  int inType=edittext.getInputType();
  edittext.setInputType(InputType.TYPE_NULL);
  edittext.onTouchEvent(event);
  edittext.setInputType(inType);
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    Layout layout=((EditText)v).getLayout();
  float x=event.getX() + v.getScrollX();
int offset=layout.getOffsetForHorizontal(0,x);
if (offset > 0) if (x > layout.getLineMax(0)) {
((EditText)v).setSelection(offset);
}
 else ((EditText)v).setSelection(offset - 1);
break;
}
return true;
}",0.5785123966942148
142524,"public AttributeModel getModel(Workspace workspace){
  AttributeModel model=workspace.getLookup().lookup(AttributeModel.class);
  if (model != null) {
    return model;
  }
  model=new IndexedAttributeModel();
  workspace.add(model);
  return model;
}","public synchronized AttributeModel getModel(Workspace workspace){
  AttributeModel model=workspace.getLookup().lookup(AttributeModel.class);
  if (model != null) {
    return model;
  }
  model=new IndexedAttributeModel();
  workspace.add(model);
  return model;
}",0.974757281553398
142525,"public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    timeIntervalCellEditor.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}","public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    timeIntervalCellEditor.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  ((ETableColumnModel)outlineTable.getColumnModel()).clearSortedColumns();
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}",0.968044311887516
142526,"public void readRow(XMLStreamReader reader,AbstractAttributeModel model,AttributeTableImpl table,AttributeRowImpl row) throws XMLStreamException {
  row.setRowVersion(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  AttributeColumnImpl col=null;
  String value=""String_Node_Str"";
  boolean end=false;
  while (reader.hasNext() && !end) {
    int t=reader.next();
switch (t) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VALUE.equalsIgnoreCase(name)) {
      col=(AttributeColumnImpl)table.getColumn(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
    }
  break;
case XMLStreamReader.CHARACTERS:
if (!reader.isWhiteSpace() && col != null) {
  value+=reader.getText();
}
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_NODE_ROW.equalsIgnoreCase(reader.getLocalName()) || ELEMENT_EDGE_ROW.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
if (!value.isEmpty() && col != null) {
AttributeType type=col.getType();
Object v=type.parse(value);
v=model.getManagedValue(v,type);
row.setValue(col,value);
}
value=""String_Node_Str"";
col=null;
break;
}
}
}","public void readRow(XMLStreamReader reader,AbstractAttributeModel model,AttributeTableImpl table,AttributeRowImpl row) throws XMLStreamException {
  row.setRowVersion(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  AttributeColumnImpl col=null;
  String value=""String_Node_Str"";
  boolean end=false;
  while (reader.hasNext() && !end) {
    int t=reader.next();
switch (t) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VALUE.equalsIgnoreCase(name)) {
      col=(AttributeColumnImpl)table.getColumn(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
    }
  break;
case XMLStreamReader.CHARACTERS:
if (!reader.isWhiteSpace() && col != null) {
  value+=reader.getText();
}
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_NODE_ROW.equalsIgnoreCase(reader.getLocalName()) || ELEMENT_EDGE_ROW.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
if (!value.isEmpty() && col != null) {
AttributeType type=col.getType();
Object v=type.parse(value);
v=model.getManagedValue(v,type);
row.setValue(col,v);
}
value=""String_Node_Str"";
col=null;
break;
}
}
}",0.9982517482517482
142527,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      row.setValue(triCount,triangles[v]);
    }
  }
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      row.setValue(triCount,triangles[v]);
    }
  }
}",0.9917264202978489
142528,"private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}","public void triangles(HierarchicalGraph hgraph){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s.getNodeData().getRootNode(),index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  totalTriangles=0;
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.9854143292194262
142529,"public Color getColor(Color parentColor){
  if (customColor == null) {
    return parentColor;
  }
  return customColor;
}","public Color getColor(Color parentColor){
  if (mode.equals(Mode.CUSTOM) && customColor != null) {
    return customColor;
  }
  return parentColor;
}",0.6985294117647058
142530,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=(isDirected) ? 2 * graph.getNodeCount() : graph.getNodeCount();
  graph.readUnlockAll();
}",0.9905277401894452
142531,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  degreeDist=new HashMap<Float,Integer>();
  inDegreeDist=new HashMap<Float,Integer>();
  outDegreeDist=new HashMap<Float,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn degCol=nodeTable.getColumn(WDEGREE);
  AttributeColumn inCol=nodeTable.getColumn(WINDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(WOUTDEGREE);
  if (degCol == null) {
    degCol=nodeTable.addColumn(WDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(WINDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(WOUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  int i=0;
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    float totalWeight=0;
    for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
      Edge e=(Edge)it.next();
      totalWeight+=e.getWeight();
    }
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      float totalInWeight=0;
      float totalOutWeight=0;
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        if (e.getSource().equals(n)) {
          totalOutWeight+=e.getWeight();
        }
        if (e.getTarget().equals(n)) {
          totalInWeight+=e.getWeight();
        }
      }
      row.setValue(inCol,totalInWeight);
      row.setValue(outCol,totalOutWeight);
      if (!inDegreeDist.containsKey(totalInWeight)) {
        inDegreeDist.put(totalInWeight,0);
      }
      inDegreeDist.put(totalInWeight,inDegreeDist.get(totalInWeight) + 1);
      if (!outDegreeDist.containsKey(totalOutWeight)) {
        outDegreeDist.put(totalOutWeight,0);
      }
      outDegreeDist.put(totalOutWeight,outDegreeDist.get(totalOutWeight) + 1);
    }
    row.setValue(degCol,totalWeight);
    avgWDegree+=totalWeight;
    if (!degreeDist.containsKey(totalWeight)) {
      degreeDist.put(totalWeight,0);
    }
    degreeDist.put(totalWeight,degreeDist.get(totalWeight) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgWDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  degreeDist=new HashMap<Float,Integer>();
  inDegreeDist=new HashMap<Float,Integer>();
  outDegreeDist=new HashMap<Float,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn degCol=nodeTable.getColumn(WDEGREE);
  AttributeColumn inCol=nodeTable.getColumn(WINDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(WOUTDEGREE);
  if (degCol == null) {
    degCol=nodeTable.addColumn(WDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(WINDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(WOUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  int i=0;
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    float totalWeight=0;
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      float totalInWeight=0;
      float totalOutWeight=0;
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        if (e.getSource().equals(n)) {
          totalOutWeight+=e.getWeight();
        }
        if (e.getTarget().equals(n)) {
          totalInWeight+=e.getWeight();
        }
      }
      totalWeight=totalInWeight + totalOutWeight;
      row.setValue(inCol,totalInWeight);
      row.setValue(outCol,totalOutWeight);
      if (!inDegreeDist.containsKey(totalInWeight)) {
        inDegreeDist.put(totalInWeight,0);
      }
      inDegreeDist.put(totalInWeight,inDegreeDist.get(totalInWeight) + 1);
      if (!outDegreeDist.containsKey(totalOutWeight)) {
        outDegreeDist.put(totalOutWeight,0);
      }
      outDegreeDist.put(totalOutWeight,outDegreeDist.get(totalOutWeight) + 1);
    }
 else {
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        totalWeight+=e.getWeight();
      }
    }
    row.setValue(degCol,totalWeight);
    avgWDegree+=totalWeight;
    if (!degreeDist.containsKey(totalWeight)) {
      degreeDist.put(totalWeight,0);
    }
    degreeDist.put(totalWeight,degreeDist.get(totalWeight) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgWDegree/=(isDirected) ? 2 * graph.getNodeCount() : graph.getNodeCount();
  graph.readUnlockAll();
}",0.8154829011649756
142532,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.setTrimWhitespace(false);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9960925124089132
142533,"public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.setTrimWhitespace(false);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9921259842519684
142534,"private void refreshChooser(){
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  if (model != null) {
    for (    LayoutBuilder builder : Lookup.getDefault().lookupAll(LayoutBuilder.class)) {
      LayoutBuilderWrapper item=new LayoutBuilderWrapper(builder);
      comboBoxModel.addElement(item);
      if (model.getSelectedLayout() != null && builder == model.getSelectedBuilder()) {
        comboBoxModel.setSelectedItem(item);
      }
    }
  }
  layoutCombobox.setModel(comboBoxModel);
  if (model != null) {
    layoutCombobox.setEnabled(!model.isRunning());
  }
}","private void refreshChooser(){
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  if (model != null) {
    List<LayoutBuilder> builders=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
    Collections.sort(builders,new Comparator(){
      public int compare(      Object o1,      Object o2){
        return ((LayoutBuilder)o1).getName().compareTo(((LayoutBuilder)o2).getName());
      }
    }
);
    for (    LayoutBuilder builder : builders) {
      LayoutBuilderWrapper item=new LayoutBuilderWrapper(builder);
      comboBoxModel.addElement(item);
      if (model.getSelectedLayout() != null && builder == model.getSelectedBuilder()) {
        comboBoxModel.setSelectedItem(item);
      }
    }
  }
  layoutCombobox.setModel(comboBoxModel);
  if (model != null) {
    layoutCombobox.setEnabled(!model.isRunning());
  }
}",0.7652811735941321
142535,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      int inDegree=hdg.getTotalInDegree(n);
      int outDegree=hdg.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9190443052655995
142536,"public void readTreeStructure(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  graphStructure.getMainView().setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_TREESTRUCTURE_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode absNode=new AbstractNode(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")),0,0,0,0,parentNode);
      absNode.setEnabled(enabled);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      absNode.setEnabledInDegree(inDegree);
      absNode.setEnabledOutDegree(outDegree);
      absNode.setEnabledMutualDegree(mutualDegree);
      absNode.getNodeData().setAttributes(factory.newNodeAttributes(absNode.getNodeData()));
      absNode.getNodeData().setTextData(factory.newTextData());
      treeStructure.insertAsChild(absNode,parentNode);
      graphStructure.addToDictionnary(absNode);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_TREESTRUCTURE.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
}","public void readTreeStructure(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  graphStructure.getMainView().setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_TREESTRUCTURE_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode absNode=new AbstractNode(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")),0,0,0,0,parentNode);
      absNode.setEnabled(enabled);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      absNode.setEnabledInDegree(inDegree);
      absNode.setEnabledOutDegree(outDegree);
      absNode.setEnabledMutualDegree(mutualDegree);
      absNode.getNodeData().setAttributes(factory.newNodeAttributes(absNode.getNodeData()));
      absNode.getNodeData().setId(String.valueOf(absNode.getId()));
      absNode.getNodeData().setTextData(factory.newTextData());
      treeStructure.insertAsChild(absNode,parentNode);
      graphStructure.addToDictionnary(absNode);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_TREESTRUCTURE.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
}",0.9851657940663175
142537,"public void readEdges(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    Integer source=0;
  Integer target=0;
Integer id=0;
Boolean directed=false;
Float weight=0f;
for (int i=0; i < reader.getAttributeCount(); i++) {
String attName=reader.getAttributeName(i).getLocalPart();
if (""String_Node_Str"".equalsIgnoreCase(attName)) {
id=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
source=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
target=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
directed=Boolean.parseBoolean(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
weight=Float.parseFloat(reader.getAttributeValue(i));
}
}
AbstractNode srcNode=treeStructure.getNodeAt(source);
AbstractNode destNode=treeStructure.getNodeAt(target);
AbstractEdge edge;
if (ELEMENT_EDGES_PROPER.equalsIgnoreCase(name)) {
edge=new ProperEdgeImpl(id,srcNode,destNode);
}
 else if (ELEMENT_EDGES_MIXED.equalsIgnoreCase(name)) {
edge=new MixedEdgeImpl(id,srcNode,destNode,directed);
}
 else {
edge=new SelfLoopImpl(id,srcNode);
}
edge.setWeight(weight);
edge.getEdgeData().setAttributes(factory.newEdgeAttributes(edge.getEdgeData()));
edge.getEdgeData().setTextData(factory.newTextData());
srcNode.getEdgesOutTree().add(edge);
destNode.getEdgesInTree().add(edge);
graphStructure.addToDictionnary(edge);
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_EDGES.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
break;
}
}
graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}","public void readEdges(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    Integer source=0;
  Integer target=0;
Integer id=0;
Boolean directed=false;
Float weight=0f;
for (int i=0; i < reader.getAttributeCount(); i++) {
String attName=reader.getAttributeName(i).getLocalPart();
if (""String_Node_Str"".equalsIgnoreCase(attName)) {
id=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
source=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
target=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
directed=Boolean.parseBoolean(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
weight=Float.parseFloat(reader.getAttributeValue(i));
}
}
AbstractNode srcNode=treeStructure.getNodeAt(source);
AbstractNode destNode=treeStructure.getNodeAt(target);
AbstractEdge edge;
if (ELEMENT_EDGES_PROPER.equalsIgnoreCase(name)) {
edge=new ProperEdgeImpl(id,srcNode,destNode);
}
 else if (ELEMENT_EDGES_MIXED.equalsIgnoreCase(name)) {
edge=new MixedEdgeImpl(id,srcNode,destNode,directed);
}
 else {
edge=new SelfLoopImpl(id,srcNode);
}
edge.setWeight(weight);
edge.getEdgeData().setAttributes(factory.newEdgeAttributes(edge.getEdgeData()));
edge.getEdgeData().setId(String.valueOf(edge.getId()));
edge.getEdgeData().setTextData(factory.newTextData());
srcNode.getEdgesOutTree().add(edge);
destNode.getEdgesInTree().add(edge);
graphStructure.addToDictionnary(edge);
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_EDGES.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
break;
}
}
graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9863813229571984
142538,"public void writeNodeData(XMLStreamWriter writer,NodeDataImpl nodeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_NODEDATA);
  AbstractNode node=nodeData.getRootNode();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getPre()));
  if (nodeData.getId() != null && !nodeData.getId().equals(""String_Node_Str"" + node.getId())) {
    writer.writeAttribute(""String_Node_Str"",nodeData.getId());
  }
  writer.writeStartElement(ELEMENT_NODEDATA_POSITION);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.x()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.y()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.z()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.alpha()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_SIZE);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.getSize()));
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeNodeData(XMLStreamWriter writer,NodeDataImpl nodeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_NODEDATA);
  AbstractNode node=nodeData.getRootNode();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getPre()));
  if (nodeData.getId() != null && !nodeData.getId().equals(String.valueOf(node.getId()))) {
    writer.writeAttribute(""String_Node_Str"",nodeData.getId());
  }
  writer.writeStartElement(ELEMENT_NODEDATA_POSITION);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.x()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.y()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.z()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.alpha()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_SIZE);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.getSize()));
  writer.writeEndElement();
  writer.writeEndElement();
}",0.986046511627907
142539,"public void writeEdgeData(XMLStreamWriter writer,EdgeDataImpl edgeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_EDGEDATA);
  AbstractEdge edge=edgeData.getEdge();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getSource().getPre()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget().getPre()));
  if (edgeData.getId() != null && !edgeData.getId().equals(""String_Node_Str"" + edge.getId())) {
    writer.writeAttribute(""String_Node_Str"",edgeData.getId());
  }
  writer.writeStartElement(ELEMENT_EDGEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.alpha()));
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeEdgeData(XMLStreamWriter writer,EdgeDataImpl edgeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_EDGEDATA);
  AbstractEdge edge=edgeData.getEdge();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getSource().getPre()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget().getPre()));
  if (edgeData.getId() != null && !edgeData.getId().equals(String.valueOf(edge.getId()))) {
    writer.writeAttribute(""String_Node_Str"",edgeData.getId());
  }
  writer.writeStartElement(ELEMENT_EDGEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.alpha()));
  writer.writeEndElement();
  writer.writeEndElement();
}",0.9805194805194806
142540,"public void exportCurrentTable(ExportMode exportMode){
  JTable table;
  if (classDisplayed == classDisplayed.NODE) {
    table=nodeTable.getOutlineTable();
  }
 else {
    table=edgeTable.getTable();
  }
switch (exportMode) {
case CSV:
    showCSVExportUI(table);
  break;
}
}","public void exportCurrentTable(ExportMode exportMode){
  JTable table;
  String fileName=prepareTableExportFileName();
  if (classDisplayed == classDisplayed.NODE) {
    table=nodeTable.getOutlineTable();
    fileName+=""String_Node_Str"";
  }
 else {
    table=edgeTable.getTable();
    fileName+=""String_Node_Str"";
  }
  fileName+=""String_Node_Str"";
switch (exportMode) {
case CSV:
    showCSVExportUI(table,fileName);
  break;
}
}",0.7824858757062146
142541,"/** 
 * <p>Exports a JTable to a CSV file showing first a dialog to select the file to write.</p>
 * @param parent Parent window
 * @param table Table to export
 * @param separator Separator to use for separating values of a row in the CSV file. If null ',' will be used.
 * @param charset Charset encoding for the file
 * @param columnsToExport Indicates the indexes of the columns to export. All columns will be exported if null
 */
public static void exportTableAsCSV(JComponent parent,JTable table,Character separator,Charset charset,Integer[] columnsToExport){
  String lastPath=NbPreferences.forModule(TableCSVExporter.class).get(LAST_PATH,null);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.setAcceptAllFileFilterUsed(false);
  DialogFileFilter dialogFileFilter=new DialogFileFilter(NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  dialogFileFilter.addExtension(""String_Node_Str"");
  chooser.addChoosableFileFilter(dialogFileFilter);
  File selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"");
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  if (!file.getPath().endsWith(""String_Node_Str"")) {
    file=new File(file.getPath() + ""String_Node_Str"");
  }
  String defaultDirectory=file.getParentFile().getAbsolutePath();
  NbPreferences.forModule(TableCSVExporter.class).put(LAST_PATH,defaultDirectory);
  try {
    TableCSVExporter.writeCSVFile(table,file,separator,charset,columnsToExport);
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
  }
}","/** 
 * <p>Exports a JTable to a CSV file showing first a dialog to select the file to write.</p>
 * @param parent Parent window
 * @param table Table to export
 * @param separator Separator to use for separating values of a row in the CSV file. If null ',' will be used.
 * @param charset Charset encoding for the file
 * @param columnsToExport Indicates the indexes of the columns to export. All columns will be exported if null
 */
public static void exportTableAsCSV(JComponent parent,JTable table,Character separator,Charset charset,Integer[] columnsToExport,String fileName){
  String lastPath=NbPreferences.forModule(TableCSVExporter.class).get(LAST_PATH,null);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.setAcceptAllFileFilterUsed(false);
  DialogFileFilter dialogFileFilter=new DialogFileFilter(NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  dialogFileFilter.addExtension(""String_Node_Str"");
  chooser.addChoosableFileFilter(dialogFileFilter);
  File selectedFile=new File(chooser.getCurrentDirectory(),fileName);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  if (!file.getPath().endsWith(""String_Node_Str"")) {
    file=new File(file.getPath() + ""String_Node_Str"");
  }
  String defaultDirectory=file.getParentFile().getAbsolutePath();
  NbPreferences.forModule(TableCSVExporter.class).put(LAST_PATH,defaultDirectory);
  try {
    TableCSVExporter.writeCSVFile(table,file,separator,charset,columnsToExport);
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
  }
}",0.9899562194179758
142542,"private void showCSVExportUI(JTable table){
  CSVExportUI csvUI=new CSVExportUI(table);
  DialogDescriptor dd=new DialogDescriptor(csvUI,csvUI.getDisplayName());
  if (DialogDisplayer.getDefault().notify(dd).equals(DialogDescriptor.OK_OPTION)) {
    DataTableTopComponent.exportTableAsCSV(this,table,csvUI.getSelectedSeparator(),csvUI.getSelectedCharset(),csvUI.getSelectedColumnsIndexes());
  }
  csvUI.unSetup();
}","private void showCSVExportUI(JTable table,String fileName){
  CSVExportUI csvUI=new CSVExportUI(table);
  DialogDescriptor dd=new DialogDescriptor(csvUI,csvUI.getDisplayName());
  if (DialogDisplayer.getDefault().notify(dd).equals(DialogDescriptor.OK_OPTION)) {
    DataTableTopComponent.exportTableAsCSV(this,table,csvUI.getSelectedSeparator(),csvUI.getSelectedCharset(),csvUI.getSelectedColumnsIndexes(),fileName);
  }
  csvUI.unSetup();
}",0.970828471411902
142543,"private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (s.charAt(0) >= 'a' && s.charAt(0) <= 'z' && edge.getAttributes().getValue(i) != null) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)edge.getAttributes().getValue(i));
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (!(s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') && edge.getAttributes().getValue(i) != null) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.985792349726776
142544,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  if (normalize) {
    computeNormalizeValues(graph);
  }
  graph.readLock();
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}",0.967479674796748
142545,"private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (s.charAt(0) >= 'a' && s.charAt(0) <= 'z' && node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)node.getAttributes().getValue(i));
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (!(s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') && node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9943280977312392
142546,"private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getId());
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getId());
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9446419502285424
142547,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return !cancel;
}",0.9910786699107867
142548,"private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9617793133232564
142549,"private void importData(LineNumberReader reader) throws Exception {
  Progress.start(progressTicket);
  ArrayList list;
  StreamTokenizer tokenizer=new StreamTokenizer(reader);
  tokenizer.ordinaryChar('[');
  tokenizer.ordinaryChar(']');
  tokenizer.wordChars('_','_');
  list=parseList(tokenizer);
  boolean ret=false;
  for (int i=0; i < list.size(); i++) {
    if (""String_Node_Str"".equals(list.get(i)) && list.size() >= i + 2 && list.get(i + 1) instanceof ArrayList) {
      ret=parseGraph((ArrayList)list.get(i + 1));
    }
  }
  if (!ret) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str""),Issue.Level.SEVERE));
  }
  Progress.finish(progressTicket);
}","private void importData(LineNumberReader reader) throws Exception {
  Progress.start(progressTicket);
  ArrayList list;
  StreamTokenizer tokenizer=new StreamTokenizer(reader);
  tokenizer.ordinaryChar('[');
  tokenizer.ordinaryChar(']');
  tokenizer.wordChars('_','_');
  String allowed=""String_Node_Str"";
  for (int i=0; i < allowed.length(); i++)   tokenizer.wordChars(allowed.charAt(i),allowed.charAt(i));
  list=parseList(tokenizer);
  boolean ret=false;
  for (int i=0; i < list.size(); i++) {
    if (""String_Node_Str"".equals(list.get(i)) && list.size() >= i + 2 && list.get(i + 1) instanceof ArrayList) {
      ret=parseGraph((ArrayList)list.get(i + 1));
    }
  }
  if (!ret) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str""),Issue.Level.SEVERE));
  }
  Progress.finish(progressTicket);
}",0.9093281148075668
142550,"private void initTransformersUI(){
  for (  ButtonGroup bg : buttonGroups) {
    for (Enumeration<AbstractButton> btns=bg.getElements(); btns.hasMoreElements(); ) {
      AbstractButton btn=btns.nextElement();
      remove(btn);
    }
  }
  if (model != null) {
    for (    String elmtType : controller.getElementTypes()) {
      ButtonGroup buttonGroup=new ButtonGroup();
      for (      final Transformer t : model.getTransformers(elmtType)) {
        TransformerUI u=controller.getUI(t);
        if (u != null) {
          JToggleButton btn=new JToggleButton(u.getIcon());
          btn.setToolTipText(u.getDisplayName());
          btn.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              model.setCurrentTransformer(t);
            }
          }
);
          btn.setName(u.getDisplayName());
          btn.setFocusPainted(false);
          buttonGroup.add(btn);
          add(btn);
        }
      }
      buttonGroups.add(buttonGroup);
    }
  }
}","private void initTransformersUI(){
  for (  ButtonGroup bg : buttonGroups) {
    for (Enumeration<AbstractButton> btns=bg.getElements(); btns.hasMoreElements(); ) {
      AbstractButton btn=btns.nextElement();
      remove(btn);
    }
  }
  buttonGroups.clear();
  if (model != null) {
    for (    String elmtType : controller.getElementTypes()) {
      ButtonGroup buttonGroup=new ButtonGroup();
      for (      final Transformer t : model.getTransformers(elmtType)) {
        TransformerUI u=controller.getUI(t);
        if (u != null) {
          JToggleButton btn=new JToggleButton(u.getIcon());
          btn.setToolTipText(u.getDisplayName());
          btn.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              model.setCurrentTransformer(t);
            }
          }
);
          btn.setName(u.getDisplayName());
          btn.setFocusPainted(false);
          buttonGroup.add(btn);
          add(btn);
        }
      }
      buttonGroups.add(buttonGroup);
    }
  }
}",0.9884169884169884
142551,"private synchronized AttributeColumnImpl addColumn(String id,String title,AttributeType type,AttributeOrigin origin,Object defaultValue,AttributeValueDelegateProvider attributeValueDelegateProvider){
  if (title == null || title.isEmpty() || hasColumn(title)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultValue != null) {
    if (defaultValue.getClass() != type.getType()) {
      if (defaultValue.getClass() == String.class) {
        defaultValue=type.parse((String)defaultValue);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    defaultValue=model.getManagedValue(defaultValue,type);
  }
  AttributeColumnImpl column=new AttributeColumnImpl(this,columns.size(),id,title,type,origin,defaultValue,attributeValueDelegateProvider);
  columns.add(column);
  columnsMap.put(id,column);
  if (title != null && !title.equals(id)) {
    columnsMap.put(title.toLowerCase(),column);
  }
  columnsSet.put(column,column);
  version++;
  model.fireAttributeEvent(new ColumnEvent(AttributeEvent.EventType.ADD_COLUMN,column));
  return column;
}","private synchronized AttributeColumnImpl addColumn(String id,String title,AttributeType type,AttributeOrigin origin,Object defaultValue,AttributeValueDelegateProvider attributeValueDelegateProvider){
  if (title == null || title.isEmpty() || hasColumn(title)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultValue != null) {
    if (defaultValue.getClass() != type.getType()) {
      if (defaultValue.getClass() == String.class) {
        defaultValue=type.parse((String)defaultValue);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    defaultValue=model.getManagedValue(defaultValue,type);
  }
  AttributeColumnImpl column=new AttributeColumnImpl(this,columns.size(),id,title,type,origin,defaultValue,attributeValueDelegateProvider);
  columns.add(column);
  columnsMap.put(id,column);
  if (title != null && !title.equals(id)) {
    columnsMap.put(title,column);
  }
  columnsSet.put(column,column);
  version++;
  model.fireAttributeEvent(new ColumnEvent(AttributeEvent.EventType.ADD_COLUMN,column));
  return column;
}",0.9936708860759492
142552,"public boolean add(int node){
  nodes.addLast(new Integer(node));
  weightSum+=structure.weights[node];
  if (!isRandomized) {
    min=Math.min(node,min);
  }
  return true;
}","public boolean add(int node){
  nodes.addLast(new Integer(node));
  weightSum+=structure.weights[node];
  return true;
}",0.8135593220338984
142553,"public void seed(int node){
  nodes.add(node);
  weightSum+=structure.weights[node];
  min=node;
}","public void seed(int node){
  nodes.add(node);
  weightSum+=structure.weights[node];
}",0.9347826086956522
142554,"private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnections=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnections[index]=new HashMap<Community,Integer>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connections.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      int weight=com.connections.get(adjCom);
      weightSum+=weight;
      ModEdge e=new ModEdge(index,target,weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnections[i].put(nodeCommunities[e.target],e.weight);
      com.connections.put(nodeCommunities[e.target],e.weight);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}","private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnections=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnections[index]=new HashMap<Community,Integer>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connections.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      int weight=com.connections.get(adjCom);
      if (target == index)       weightSum+=2 * weight;
 else       weightSum+=weight;
      ModEdge e=new ModEdge(index,target,weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnections[i].put(nodeCommunities[e.target],e.weight);
      com.connections.put(nodeCommunities[e.target],e.weight);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}",0.9795783926218709
142555,"public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new CommunityStructure(hgraph);
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0;
        double current=q(i,structure.nodeCommunities[i]);
        Community bestCommunity=null;
        int smallest=Integer.MAX_VALUE;
        Set<Community> iter=structure.nodeConnections[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com) - current;
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
            smallest=com.getMin();
          }
 else           if ((qValue == best) && (com.getMin() < smallest)) {
            best=qValue;
            bestCommunity=com;
            smallest=com.getMin();
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel);
  hgraph.readUnlock();
}","public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new CommunityStructure(hgraph);
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0.;
        Community bestCommunity=null;
        Community nodecom=structure.nodeCommunities[i];
        Set<Community> iter=structure.nodeConnections[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com);
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel);
  hgraph.readUnlock();
}",0.913716814159292
142556,"public boolean remove(int node){
  boolean result=nodes.remove(new Integer(node));
  weightSum-=structure.weights[node];
  if (nodes.size() == 0) {
    structure.communities.remove(this);
  }
  if (!isRandomized) {
    if (node == min.intValue()) {
      min=Integer.MAX_VALUE;
      for (      Integer other : nodes) {
        min=Math.min(other,min);
      }
    }
  }
  return result;
}","public boolean remove(int node){
  boolean result=nodes.remove(new Integer(node));
  weightSum-=structure.weights[node];
  if (nodes.size() == 0) {
    structure.communities.remove(this);
  }
  return result;
}",0.6510851419031719
142557,"private double q(int node,Community community){
  Integer edgesToInt=structure.nodeConnections[node].get(community);
  double edgesTo=0;
  if (edgesToInt != null) {
    edgesTo=edgesToInt.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  return qValue;
}","private double q(int node,Community community){
  Integer edgesToInt=structure.nodeConnections[node].get(community);
  double edgesTo=0;
  if (edgesToInt != null) {
    edgesTo=edgesToInt.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() == 1)) {
    qValue=0.;
  }
  return qValue;
}",0.8945783132530121
142558,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9230595157275402
142559,"private void refreshSharedConfig(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  setEnable(!vizModel.isDefaultModel());
  if (vizModel.isDefaultModel()) {
    return;
  }
  if (showEdgesCheckbox.isSelected() != vizModel.isShowEdges()) {
    showEdgesCheckbox.setSelected(vizModel.isShowEdges());
  }
  float[] edgeCol=vizModel.getEdgeUniColor();
  ((JColorButton)edgeColorButton).setColor(new Color(edgeCol[0],edgeCol[1],edgeCol[2],edgeCol[3]));
  if (sourceNodeColorCheckbox.isSelected() != !vizModel.isEdgeHasUniColor()) {
    sourceNodeColorCheckbox.setSelected(!vizModel.isEdgeHasUniColor());
  }
  if (selectionColorCheckbox.isSelected() != vizModel.isEdgeSelectionColor()) {
    selectionColorCheckbox.setSelected(vizModel.isEdgeSelectionColor());
  }
  Color in=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeInSelectionColor(),1f);
  Color out=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeOutSelectionColor(),1f);
  Color both=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeBothSelectionColor(),1f);
  if (!edgeInSelectionColorChooser.getColor().equals(in)) {
    edgeInSelectionColorChooser.setColor(in);
  }
  if (!edgeBothSelectionColorChooser.getColor().equals(out)) {
    edgeBothSelectionColorChooser.setColor(out);
  }
  if (!edgeOutSelectionColorChooser.getColor().equals(both)) {
    edgeOutSelectionColorChooser.setColor(both);
  }
  if (scaleSlider.getValue() / 10f + 0.1f != vizModel.getEdgeScale()) {
    scaleSlider.setValue((int)((vizModel.getEdgeScale() - 0.1f) * 10));
  }
  if (metaScaleSlider.getValue() / 50f + 0.0001f != vizModel.getMetaEdgeScale()) {
    metaScaleSlider.setValue((int)((vizModel.getMetaEdgeScale() - 0.0001f) * 50));
  }
}","private void refreshSharedConfig(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  setEnable(!vizModel.isDefaultModel());
  if (vizModel.isDefaultModel()) {
    return;
  }
  if (showEdgesCheckbox.isSelected() != vizModel.isShowEdges()) {
    showEdgesCheckbox.setSelected(vizModel.isShowEdges());
  }
  float[] edgeCol=vizModel.getEdgeUniColor();
  ((JColorButton)edgeColorButton).setColor(new Color(edgeCol[0],edgeCol[1],edgeCol[2],edgeCol[3]));
  if (sourceNodeColorCheckbox.isSelected() != !vizModel.isEdgeHasUniColor()) {
    sourceNodeColorCheckbox.setSelected(!vizModel.isEdgeHasUniColor());
  }
  if (selectionColorCheckbox.isSelected() != vizModel.isEdgeSelectionColor()) {
    selectionColorCheckbox.setSelected(vizModel.isEdgeSelectionColor());
  }
  Color in=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeInSelectionColor(),1f);
  Color out=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeOutSelectionColor(),1f);
  Color both=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeBothSelectionColor(),1f);
  if (!edgeInSelectionColorChooser.getColor().equals(in)) {
    edgeInSelectionColorChooser.setColor(in);
  }
  if (!edgeBothSelectionColorChooser.getColor().equals(both)) {
    edgeBothSelectionColorChooser.setColor(both);
  }
  if (!edgeOutSelectionColorChooser.getColor().equals(out)) {
    edgeOutSelectionColorChooser.setColor(out);
  }
  if (scaleSlider.getValue() / 10f + 0.1f != vizModel.getEdgeScale()) {
    scaleSlider.setValue((int)((vizModel.getEdgeScale() - 0.1f) * 10));
  }
  if (metaScaleSlider.getValue() / 50f + 0.0001f != vizModel.getMetaEdgeScale()) {
    metaScaleSlider.setValue((int)((vizModel.getMetaEdgeScale() - 0.0001f) * 50));
  }
}",0.9920318725099602
142560,"private void readDataTablesModel(XMLStreamReader reader,Workspace workspace) throws XMLStreamException {
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  AttributeTable nodesTable=attributeModel.getNodeTable();
  AttributeTable edgesTable=attributeModel.getEdgeTable();
  DataTablesModel dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel());
  }
  AvailableColumnsModel nodeColumns=dataTablesModel.getNodeAvailableColumnsModel();
  nodeColumns.removeAllColumns();
  AvailableColumnsModel edgeColumns=dataTablesModel.getEdgeAvailableColumnsModel();
  edgeColumns.removeAllColumns();
  boolean end=false;
  while (reader.hasNext() && !end) {
    Integer eventType=reader.next();
    if (eventType.equals(XMLEvent.START_ELEMENT)) {
      String name=reader.getLocalName();
      if (NODE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=nodesTable.getColumn(id);
        if (column != null) {
          nodeColumns.addAvailableColumn(column);
        }
      }
 else       if (EDGE_COLUMN.equalsIgnoreCase(name)) {
        String id=reader.getAttributeValue(null,""String_Node_Str"");
        AttributeColumn column=edgesTable.getColumn(id);
        if (column != null) {
          edgeColumns.addAvailableColumn(column);
        }
      }
    }
 else     if (eventType.equals(XMLStreamReader.END_ELEMENT)) {
      if (AVAILABLE_COLUMNS.equalsIgnoreCase(reader.getLocalName())) {
        end=true;
      }
    }
  }
}","private void readDataTablesModel(XMLStreamReader reader,Workspace workspace) throws XMLStreamException {
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  AttributeTable nodesTable=attributeModel.getNodeTable();
  AttributeTable edgesTable=attributeModel.getEdgeTable();
  DataTablesModel dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel());
  }
  AvailableColumnsModel nodeColumns=dataTablesModel.getNodeAvailableColumnsModel();
  nodeColumns.removeAllColumns();
  AvailableColumnsModel edgeColumns=dataTablesModel.getEdgeAvailableColumnsModel();
  edgeColumns.removeAllColumns();
  boolean end=false;
  while (reader.hasNext() && !end) {
    Integer eventType=reader.next();
    if (eventType.equals(XMLEvent.START_ELEMENT)) {
      String name=reader.getLocalName();
      if (NODE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=nodesTable.getColumn(id);
        if (column != null) {
          nodeColumns.addAvailableColumn(column);
        }
      }
 else       if (EDGE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=edgesTable.getColumn(id);
        if (column != null) {
          edgeColumns.addAvailableColumn(column);
        }
      }
    }
 else     if (eventType.equals(XMLStreamReader.END_ELEMENT)) {
      if (AVAILABLE_COLUMNS.equalsIgnoreCase(reader.getLocalName())) {
        end=true;
      }
    }
  }
}",0.9882988298829884
142561,"public boolean execute(){
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph=null;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return !cancel;
}","public boolean execute(){
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return !cancel;
}",0.9508196721311476
142562,"private void exportData(Graph graph) throws Exception {
  int max=graph.getNodeCount(), i=1;
  HashMap<Integer,Integer> idx=new HashMap<Integer,Integer>(3 * max / 2 + 1);
  Progress.start(progressTicket,max);
  writer.append(""String_Node_Str"" + max + ""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    writer.append(Integer.toString(i));
    writer.append(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
    if (nodeCoords) {
      writer.append(""String_Node_Str"" + node.getNodeData().x() + ""String_Node_Str""+ node.getNodeData().y()+ ""String_Node_Str""+ node.getNodeData().z());
    }
    writer.append(""String_Node_Str"");
    idx.put(node.getId(),i++);
  }
  if (graph instanceof UndirectedGraph) {
    writer.append(""String_Node_Str"");
  }
 else {
    writer.append(""String_Node_Str"");
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    if (edge != null) {
      writer.append(Integer.toString(idx.get(edge.getSource().getId())) + ""String_Node_Str"");
      writer.append(Integer.toString(idx.get(edge.getTarget().getId())));
      if (edgeWeight) {
        writer.append(""String_Node_Str"" + edge.getWeight());
      }
      writer.append(""String_Node_Str"");
    }
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}","private void exportData(HierarchicalGraph graph) throws Exception {
  int max=graph.getNodeCount(), i=1;
  HashMap<String,Integer> idx=new HashMap<String,Integer>(3 * max / 2 + 1);
  Progress.start(progressTicket,max);
  graph.readLock();
  writer.append(""String_Node_Str"" + max + ""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    writer.append(Integer.toString(i));
    writer.append(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
    if (nodeCoords) {
      writer.append(""String_Node_Str"" + node.getNodeData().x() + ""String_Node_Str""+ node.getNodeData().y()+ ""String_Node_Str""+ node.getNodeData().z());
    }
    writer.append(""String_Node_Str"");
    idx.put(node.getNodeData().getId(),i++);
  }
  if (graph instanceof UndirectedGraph) {
    writer.append(""String_Node_Str"");
  }
 else {
    writer.append(""String_Node_Str"");
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    if (edge != null) {
      writer.append(Integer.toString(idx.get(edge.getSource().getNodeData().getId())) + ""String_Node_Str"");
      writer.append(Integer.toString(idx.get(edge.getTarget().getNodeData().getId())));
      if (edgeWeight) {
        writer.append(""String_Node_Str"" + edge.getWeight());
      }
      writer.append(""String_Node_Str"");
    }
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}",0.9637155297532656
142563,"public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str"";
}","public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ ""String_Node_Str""+ totalTriangles+ ""String_Node_Str""+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.953144786829886
142564,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  bruteForce(hgraph,attributeModel);
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
}",0.9442379182156134
142565,"private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : hgraph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}","private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      row.setValue(triCount,triangles[v]);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.9522773623385452
142566,"public String getReport(){
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ componentCount+ ""String_Node_Str""+ (isDirected ? ""String_Node_Str"" + stronglyCount + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"";
  return report;
}","public String getReport(){
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ componentCount+ ""String_Node_Str""+ (isDirected ? ""String_Node_Str"" + stronglyCount + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.935738444193912
142567,"/** 
 * @return
 */
public String getReport(){
  String htmlIMG1=""String_Node_Str"";
  String htmlIMG2=""String_Node_Str"";
  String htmlIMG3=""String_Node_Str"";
  try {
    TempDir tempDir=TempDirUtils.createTempDir();
    htmlIMG1=createImageFile(tempDir,betweenness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG2=createImageFile(tempDir,closeness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG3=createImageFile(tempDir,eccentricity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ diameter+ ""String_Node_Str""+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ avgDist+ ""String_Node_Str""+ ""String_Node_Str""+ shortestPaths+ ""String_Node_Str""+ htmlIMG1+ ""String_Node_Str""+ htmlIMG2+ ""String_Node_Str""+ htmlIMG3+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String htmlIMG1=""String_Node_Str"";
  String htmlIMG2=""String_Node_Str"";
  String htmlIMG3=""String_Node_Str"";
  try {
    TempDir tempDir=TempDirUtils.createTempDir();
    htmlIMG1=createImageFile(tempDir,betweenness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG2=createImageFile(tempDir,closeness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG3=createImageFile(tempDir,eccentricity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ diameter+ ""String_Node_Str""+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ avgDist+ ""String_Node_Str""+ ""String_Node_Str""+ shortestPaths+ ""String_Node_Str""+ htmlIMG1+ ""String_Node_Str""+ htmlIMG2+ ""String_Node_Str""+ htmlIMG3+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9749230092388912
142568,"/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> distHubs=new HashMap<Double,Integer>();
  for (  Node node : hub_list) {
    int n_index=indicies.get(node);
    Double d=hubs[n_index];
    if (distHubs.containsKey(d)) {
      Integer v=distHubs.get(d);
      distHubs.put(d,v + 1);
    }
 else {
      distHubs.put(d,1);
    }
  }
  Map<Double,Integer> distAuthorities=new HashMap<Double,Integer>();
  for (  Node node : auth_list) {
    int n_index=indicies.get(node);
    Double d=authority[n_index];
    if (distAuthorities.containsKey(d)) {
      Integer v=distAuthorities.get(d);
      distAuthorities.put(d,v + 1);
    }
 else {
      distAuthorities.put(d,1);
    }
  }
  XYSeries dHubsSeries=ChartUtils.createXYSeries(distHubs,""String_Node_Str"");
  XYSeries dAuthsSeries=ChartUtils.createXYSeries(distAuthorities,""String_Node_Str"");
  XYSeriesCollection datasetHubs=new XYSeriesCollection();
  datasetHubs.addSeries(dHubsSeries);
  XYSeriesCollection datasetAuths=new XYSeriesCollection();
  datasetAuths.addSeries(dAuthsSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetHubs,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dHubsSeries,true);
  String imageFile1=ChartUtils.renderChart(chart,""String_Node_Str"");
  JFreeChart chart2=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetAuths,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart2);
  ChartUtils.scaleChart(chart,dAuthsSeries,true);
  String imageFile2=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.epsilon + ""String_Node_Str""+ imageFile1+ ""String_Node_Str""+ imageFile2+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> distHubs=new HashMap<Double,Integer>();
  for (  Node node : hub_list) {
    int n_index=indicies.get(node);
    Double d=hubs[n_index];
    if (distHubs.containsKey(d)) {
      Integer v=distHubs.get(d);
      distHubs.put(d,v + 1);
    }
 else {
      distHubs.put(d,1);
    }
  }
  Map<Double,Integer> distAuthorities=new HashMap<Double,Integer>();
  for (  Node node : auth_list) {
    int n_index=indicies.get(node);
    Double d=authority[n_index];
    if (distAuthorities.containsKey(d)) {
      Integer v=distAuthorities.get(d);
      distAuthorities.put(d,v + 1);
    }
 else {
      distAuthorities.put(d,1);
    }
  }
  XYSeries dHubsSeries=ChartUtils.createXYSeries(distHubs,""String_Node_Str"");
  XYSeries dAuthsSeries=ChartUtils.createXYSeries(distAuthorities,""String_Node_Str"");
  XYSeriesCollection datasetHubs=new XYSeriesCollection();
  datasetHubs.addSeries(dHubsSeries);
  XYSeriesCollection datasetAuths=new XYSeriesCollection();
  datasetAuths.addSeries(dAuthsSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetHubs,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dHubsSeries,true);
  String imageFile1=ChartUtils.renderChart(chart,""String_Node_Str"");
  JFreeChart chart2=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetAuths,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart2);
  ChartUtils.scaleChart(chart,dAuthsSeries,true);
  String imageFile2=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.epsilon + ""String_Node_Str""+ imageFile1+ ""String_Node_Str""+ imageFile2+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9852063327277446
142569,"public String getReport(){
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + (isRandomized ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(modularity)+ ""String_Node_Str""+ ""String_Node_Str""+ structure.communities.size()+ ""String_Node_Str"";
  return report;
}","public String getReport(){
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + (isRandomized ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(modularity)+ ""String_Node_Str""+ ""String_Node_Str""+ structure.communities.size()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9361702127659576
142570,"/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < pageranks.length; i++) {
    Double d=pageranks[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,true);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + epsilon + ""String_Node_Str""+ ""String_Node_Str""+ probability+ ""String_Node_Str""+ imageFile+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < pageranks.length; i++) {
    Double d=pageranks[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,true);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + epsilon + ""String_Node_Str""+ ""String_Node_Str""+ probability+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.971990171990172
142571,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
    currentState=TimelineState.RESIZE_FROM;
  break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
currentState=TimelineState.MOVING;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
currentState=TimelineState.RESIZE_TO;
break;
default :
break;
}
}
double delta=0;
if (latestMousePositionX != null) {
delta=x - latestMousePositionX;
}
latestMousePositionX=x;
int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
if ((sf + delta) >= (st - s)) {
sf=st - s;
}
 else {
if (sf + delta <= 0) {
sf=0;
}
 else {
sf+=delta;
}
}
break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
st=sf + s;
}
 else {
if ((st + delta >= w)) {
st=w;
}
 else {
st+=delta;
}
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.84098051539912
142572,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
    currentState=TimelineState.RESIZE_FROM;
  break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
currentState=TimelineState.MOVING;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
currentState=TimelineState.RESIZE_TO;
break;
default :
break;
}
}
}",0.7614942528735632
142573,"public void mouseMoved(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  float w=getWidth();
  int r=settings.selection.visibleHookWidth;
  HighlightedComponent old=highlightedComponent;
  Cursor newCursor=null;
  int a=0;
  if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
    newCursor=CURSOR_LEFT_HOOK;
    highlightedComponent=HighlightedComponent.LEFT_HOOK;
  }
 else   if (inRange(x,(int)sf + r,(int)st - r)) {
    highlightedComponent=HighlightedComponent.CENTER_HOOK;
    newCursor=CURSOR_CENTRAL_HOOK;
  }
 else   if (inRange(x,(int)st - r - 1,(int)st + 1)) {
    highlightedComponent=HighlightedComponent.RIGHT_HOOK;
    newCursor=CURSOR_RIGHT_HOOK;
  }
 else {
    highlightedComponent=HighlightedComponent.NONE;
    newCursor=CURSOR_DEFAULT;
  }
  if (newCursor != getCursor()) {
    setCursor(newCursor);
  }
  repaint();
}","public void mouseMoved(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  float w=getWidth();
  int r=settings.selection.visibleHookWidth;
  HighlightedComponent old=highlightedComponent;
  Cursor newCursor=null;
  int a=0;
  int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
    newCursor=CURSOR_LEFT_HOOK;
  highlightedComponent=HighlightedComponent.LEFT_HOOK;
break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
newCursor=CURSOR_CENTRAL_HOOK;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
newCursor=CURSOR_RIGHT_HOOK;
break;
default :
highlightedComponent=HighlightedComponent.NONE;
newCursor=CURSOR_DEFAULT;
break;
}
if (newCursor != getCursor()) {
setCursor(newCursor);
}
repaint();
}",0.7287173666288309
142574,"public void actionPerformed(ActionEvent e){
  ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
  if (exporterUI != null) {
    JPanel panel=exporterUI.getPanel();
    exporterUI.setup(selectedExporter);
    DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
    Object result=DialogDisplayer.getDefault().notify(dd);
    exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
  }
}","public void actionPerformed(ActionEvent e){
  ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
  if (exporterUI != null) {
    JPanel panel=exporterUI.getPanel();
    exporterUI.setup(selectedExporter);
    DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
    TopDialog topDialog=new TopDialog(dialog,dd.getTitle(),dd.isModal(),dd,dd.getClosingOptions(),dd.getButtonListener());
    topDialog.setVisible(true);
    Object result=(dd.getValue() != null) ? dd.getValue() : NotifyDescriptor.CLOSED_OPTION;
    exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
  }
}",0.7880794701986755
142575,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        TopDialog topDialog=new TopDialog(dialog,dd.getTitle(),dd.isModal(),dd,dd.getClosingOptions(),dd.getButtonListener());
        topDialog.setVisible(true);
        Object result=(dd.getValue() != null) ? dd.getValue() : NotifyDescriptor.CLOSED_OPTION;
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
  dialog=null;
}",0.9721826640083548
142576,"@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}","@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}",0.9923809523809524
142577,"private PreviewTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    previewPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  if (UIUtils.isAquaLookAndFeel()) {
    southToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  bannerPanel.setVisible(false);
  sketch=new ProcessingPreview();
  sketchPanel.add(sketch,BorderLayout.CENTER);
  Thread initProcessing=new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          sketch.init();
          sketch.registerPost(processingListener);
          sketch.registerPre(processingListener);
        }
      }
);
    }
  }
);
  initProcessing.start();
  PreviewUIController.findInstance();
  ((JColorButton)backgroundButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
      controller.setBackgroundColor((Color)evt.getNewValue());
    }
  }
);
  southBusyLabel.setVisible(false);
  resetZoomButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      sketch.resetZoom();
    }
  }
);
}","private PreviewTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    previewPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  if (UIUtils.isAquaLookAndFeel()) {
    southToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  bannerPanel.setVisible(false);
  sketch=new ProcessingPreview();
  sketch.init();
  sketch.registerPost(processingListener);
  sketch.registerPre(processingListener);
  sketchPanel.add(sketch,BorderLayout.CENTER);
  PreviewUIController.findInstance();
  ((JColorButton)backgroundButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
      controller.setBackgroundColor((Color)evt.getNewValue());
    }
  }
);
  southBusyLabel.setVisible(false);
  resetZoomButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      sketch.resetZoom();
    }
  }
);
}",0.7898975109809663
142578,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9937658289499318
142579,"@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}","@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}",0.9441117764471058
142580,"@Override public Connection getConnection(String connectionUrl,String username,String passwd) throws SQLException {
  return DriverManager.getConnection(connectionUrl,username,passwd);
}","@Override public Connection getConnection(String connectionUrl,String username,String passwd) throws SQLException {
  if (!connectionUrl.contains(""String_Node_Str"")) {
    String dbname=connectionUrl.substring(connectionUrl.lastIndexOf('/') + 1);
    String url=connectionUrl.substring(0,connectionUrl.lastIndexOf('/'));
    connectionUrl=url + ""String_Node_Str"" + dbname;
  }
  return DriverManager.getConnection(connectionUrl,username,passwd);
}",0.5876777251184834
142581,"public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}","public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
 else {
    result.removeAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}",0.9819462791721708
142582,"private void attributesEdgeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!isEdgeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  edgeColumns=cols.toArray(new AttributeColumn[0]);
}","private void attributesEdgeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (exportAttributes && attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!isEdgeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  edgeColumns=cols.toArray(new AttributeColumn[0]);
}",0.9751861042183624
142583,"private void attributesNodeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!isNodeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  nodeColumns=cols.toArray(new AttributeColumn[0]);
}","private void attributesNodeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (exportAttributes && attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!isNodeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  nodeColumns=cols.toArray(new AttributeColumn[0]);
}",0.9751861042183624
142584,"public Float getUpperFloat(){
  return upperFloat;
}","public Float getUpperFloat(){
  return (Float)upperNumber;
}",0.8392857142857143
142585,"public boolean isInRange(Object value){
  if (rangeType == Double.class) {
    return isInRange((Double)value);
  }
 else   if (rangeType == Float.class) {
    return isInRange((Float)value);
  }
 else   if (rangeType == Integer.class) {
    return isInRange((Integer)value);
  }
 else   if (rangeType == Long.class) {
    return isInRange((Long)value);
  }
  return false;
}","public boolean isInRange(Number value){
  if (rangeType == Double.class) {
    return isInRange((Double)value);
  }
 else   if (rangeType == Float.class) {
    return isInRange((Float)value);
  }
 else   if (rangeType == Integer.class) {
    return isInRange((Integer)value);
  }
 else   if (rangeType == Long.class) {
    return isInRange((Long)value);
  }
 else   if (rangeType == Byte.class) {
    return isInRange((Byte)value);
  }
 else   if (rangeType == Short.class) {
    return isInRange((Short)value);
  }
  return false;
}",0.7797356828193832
142586,"public Object getUpperBound(){
  if (rangeType == Double.class) {
    return upperDouble;
  }
 else   if (rangeType == Float.class) {
    return upperFloat;
  }
 else   if (rangeType == Integer.class) {
    return upperInteger;
  }
 else   if (rangeType == Long.class) {
    return upperLong;
  }
  return null;
}","public Object getUpperBound(){
  return upperNumber;
}",0.2833787465940054
142587,"public Range(Object lowerBound,Object upperBound){
  if (lowerBound instanceof Double) {
    lowerDouble=(Double)lowerBound;
    upperDouble=(Double)upperBound;
    rangeType=Double.class;
  }
 else   if (lowerBound instanceof Float) {
    lowerFloat=(Float)lowerBound;
    upperFloat=(Float)upperBound;
    rangeType=Float.class;
  }
 else   if (lowerBound instanceof Integer) {
    lowerInteger=(Integer)lowerBound;
    upperInteger=(Integer)upperBound;
    rangeType=Integer.class;
  }
 else   if (lowerBound instanceof Long) {
    lowerLong=(Long)lowerBound;
    upperLong=(Long)upperBound;
    rangeType=Long.class;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public Range(Number lowerBound,Number upperBound,Number min,Number max){
  this(lowerBound,upperBound);
  if (!min.getClass().equals(lowerBound.getClass()) || !min.getClass().equals(max.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.min=min;
  this.max=max;
}",0.1790744466800805
142588,"public Double getLowerDouble(){
  return lowerDouble;
}","public Double getLowerDouble(){
  return (Double)lowerNumber;
}",0.847457627118644
142589,"public Float getLowerFloat(){
  return lowerFloat;
}","public Float getLowerFloat(){
  return (Float)lowerNumber;
}",0.8392857142857143
142590,"public Integer getUpperInteger(){
  return upperInteger;
}","public Integer getUpperInteger(){
  return (Integer)upperNumber;
}",0.8548387096774194
142591,"public Integer getLowerInteger(){
  return lowerInteger;
}","public Integer getLowerInteger(){
  return (Integer)lowerNumber;
}",0.8548387096774194
142592,"public Double getUpperDouble(){
  return upperDouble;
}","public Double getUpperDouble(){
  return (Double)upperNumber;
}",0.847457627118644
142593,"@Override public String toString(){
  if (rangeType == Double.class) {
    return lowerDouble.toString() + ""String_Node_Str"" + upperDouble.toString();
  }
 else   if (rangeType == Float.class) {
    return lowerFloat.toString() + ""String_Node_Str"" + upperFloat.toString();
  }
 else   if (rangeType == Integer.class) {
    return lowerInteger.toString() + ""String_Node_Str"" + upperInteger.toString();
  }
 else   if (rangeType == Long.class) {
    return lowerLong.toString() + ""String_Node_Str"" + upperLong.toString();
  }
  return ""String_Node_Str"";
}","@Override public String toString(){
  return lowerNumber + ""String_Node_Str"" + upperNumber;
}",0.2755417956656347
142594,"public Object getLowerBound(){
  if (rangeType == Double.class) {
    return lowerDouble;
  }
 else   if (rangeType == Float.class) {
    return lowerFloat;
  }
 else   if (rangeType == Integer.class) {
    return lowerInteger;
  }
 else   if (rangeType == Long.class) {
    return lowerLong;
  }
  return null;
}","public Number getLowerBound(){
  return lowerNumber;
}",0.2615803814713896
142595,"public Long getUpperLong(){
  return upperLong;
}","public Long getUpperLong(){
  return (Long)upperNumber;
}",0.8490566037735849
142596,"public Long getLowerLong(){
  return lowerLong;
}","public Long getLowerLong(){
  return (Long)lowerNumber;
}",0.8490566037735849
142597,"private boolean isDynamic(Filter filter){
  Query filterQuery=null;
  for (  Query q : filterModel.getCurrentQuery().getQueries(filter.getClass())) {
    if (q.getFilter() == filter) {
      filterQuery=q;
      break;
    }
  }
  if (filterQuery != null) {
    for (    Query query : filterQuery.getDescendantsAndSelf()) {
      if (query.getFilter().getClass().equals(DynamicRangeFilter.class)) {
        return true;
      }
    }
  }
  return false;
}","private boolean isDynamic(Filter filter){
  if (filterModel.getCurrentQuery() == null) {
    return false;
  }
  Query filterQuery=null;
  for (  Query q : filterModel.getCurrentQuery().getQueries(filter.getClass())) {
    if (q.getFilter() == filter) {
      filterQuery=q;
      break;
    }
  }
  if (filterQuery != null) {
    for (    Query query : filterQuery.getDescendantsAndSelf()) {
      if (query.getFilter().getClass().equals(DynamicRangeFilter.class)) {
        return true;
      }
    }
  }
  return false;
}",0.8416751787538305
142598,"public void finish(){
  refreshRange();
}","public void finish(){
}",0.71875
142599,"public boolean init(Graph graph){
  HierarchicalGraph hg=graph.getGraphModel().getHierarchicalGraphVisible();
  dynamicHelper=new DynamicAttributesHelper(this,hg);
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Object>();
  return true;
}","public boolean init(Graph graph){
  HierarchicalGraph hg=graph.getGraphModel().getHierarchicalGraphVisible();
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    if (graph.getNodeCount() == 0) {
      return false;
    }
  }
 else   if (AttributeUtils.getDefault().isEdgeColumn(column)) {
    if (hg.getTotalEdgeCount() == 0) {
      return false;
    }
  }
  dynamicHelper=new DynamicAttributesHelper(this,hg);
  refreshValues(hg);
  return true;
}",0.4721845318860244
142600,"public Object[] getValues(){
  if (values == null) {
    GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
    HierarchicalGraph hgraph=gm.getHierarchicalGraphVisible();
    List<Object> vals=new ArrayList<Object>();
    if (AttributeUtils.getDefault().isNodeColumn(column)) {
      for (      Node n : hgraph.getNodes()) {
        Object val=n.getNodeData().getAttributes().getValue(column.getIndex());
        val=dynamicHelper.getDynamicValue(val);
        if (val != null) {
          vals.add(val);
        }
      }
    }
 else {
      for (      Edge e : hgraph.getEdgesAndMetaEdges()) {
        Object val=e.getEdgeData().getAttributes().getValue(column.getIndex());
        val=dynamicHelper.getDynamicValue(val);
        if (val != null) {
          vals.add(val);
        }
      }
    }
    if (vals.isEmpty()) {
      vals.add(0);
    }
    Comparable[] comparableArray=ComparableArrayConverter.convert(vals);
    min=AttributeUtils.getDefault().getMin(column,comparableArray);
    max=AttributeUtils.getDefault().getMax(column,comparableArray);
    refreshRange();
    return comparableArray;
  }
 else {
    Comparable[] comparableArray=ComparableArrayConverter.convert(values);
    min=AttributeUtils.getDefault().getMin(column,comparableArray);
    max=AttributeUtils.getDefault().getMax(column,comparableArray);
    return comparableArray;
  }
}","public Object[] getValues(){
  return values;
}",0.0654596100278551
142601,"public boolean evaluate(Graph graph,Edge edge){
  Object val=edge.getEdgeData().getAttributes().getValue(column.getIndex());
  val=dynamicHelper.getDynamicValue(val);
  if (val != null) {
    values.add(val);
    return range.isInRange(val);
  }
  return false;
}","public boolean evaluate(Graph graph,Edge edge){
  Object val=edge.getEdgeData().getAttributes().getValue(column.getIndex());
  val=dynamicHelper.getDynamicValue(val);
  if (val != null) {
    return range.isInRange((Number)val);
  }
  return false;
}",0.9434697855750488
142602,"public boolean init(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  dynamicHelper=new DynamicAttributesHelper(this,hgraph);
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Float>(hgraph.getTotalEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  if (hgraph.getTotalEdgeCount() == 0) {
    return false;
  }
  dynamicHelper=new DynamicAttributesHelper(this,hgraph);
  refreshValues(graph);
  return true;
}",0.5252525252525253
142603,"public Object[] getValues(){
  if (values == null) {
    GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
    HierarchicalGraph hgraph=gm.getHierarchicalGraphVisible();
    Float[] weights=new Float[hgraph.getTotalEdgeCount()];
    int i=0;
    min=Float.MAX_VALUE;
    max=Float.MIN_VALUE;
    for (    Edge e : hgraph.getEdgesAndMetaEdges()) {
      float weight=dynamicHelper.getEdgeWeight(e);
      min=Math.min(min,weight);
      max=Math.max(max,weight);
      weights[i++]=weight;
    }
    refreshRange();
    return weights;
  }
 else {
    return values.toArray(new Float[0]);
  }
}","public Object[] getValues(){
  return values.toArray(new Float[0]);
}",0.2005813953488372
142604,"public void finish(){
  refreshRange();
}","public void finish(){
}",0.71875
142605,"public boolean evaluate(Graph graph,Edge edge){
  float weight=dynamicHelper.getEdgeWeight(edge);
  min=Math.min(min,weight);
  max=Math.max(max,weight);
  values.add(new Float(weight));
  return range.isInRange(weight);
}","public boolean evaluate(Graph graph,Edge edge){
  float weight=dynamicHelper.getEdgeWeight(edge);
  return range.isInRange(weight);
}",0.7492957746478873
142606,"private void initEvents(){
  resetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      for (      Query query : filterModel.getQueries()) {
        controller.remove(query);
      }
      uiModel.setSelectedQuery(null);
      controller.selectVisible(null);
      controller.filterVisible(null);
      ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
    }
  }
);
  filterButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(null);
      }
    }
  }
);
  selectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(null);
      }
    }
  }
);
  exportColumnButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        NotifyDescriptor.InputLine question=new NotifyDescriptor.InputLine(NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""),NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""));
        if (DialogDisplayer.getDefault().notify(question) == NotifyDescriptor.OK_OPTION) {
          String input=question.getInputText();
          if (input != null && !input.isEmpty()) {
            controller.exportToColumn(input,uiModel.getSelectedRoot());
          }
        }
      }
    }
  }
);
  exportWorkspaceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToNewWorkspace(uiModel.getSelectedRoot());
      }
    }
  }
);
  exportLabelVisible.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToLabelVisible(uiModel.getSelectedRoot());
      }
    }
  }
);
  updateEnabled(false);
}","private void initEvents(){
  resetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      for (      Query query : filterModel.getQueries()) {
        controller.remove(query);
      }
      controller.selectVisible(null);
      controller.filterVisible(null);
      ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
    }
  }
);
  filterButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(null);
      }
    }
  }
);
  selectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(null);
      }
    }
  }
);
  exportColumnButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        NotifyDescriptor.InputLine question=new NotifyDescriptor.InputLine(NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""),NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""));
        if (DialogDisplayer.getDefault().notify(question) == NotifyDescriptor.OK_OPTION) {
          String input=question.getInputText();
          if (input != null && !input.isEmpty()) {
            controller.exportToColumn(input,uiModel.getSelectedRoot());
          }
        }
      }
    }
  }
);
  exportWorkspaceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToNewWorkspace(uiModel.getSelectedRoot());
      }
    }
  }
);
  exportLabelVisible.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToLabelVisible(uiModel.getSelectedRoot());
      }
    }
  }
);
  updateEnabled(false);
}",0.9935549525101764
142607,"public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filterVisible(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.selectVisible(uiModel.getSelectedRoot());
    }
  }
  updateControls();
  updateEnabled(true);
}","public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filterVisible(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.selectVisible(uiModel.getSelectedRoot());
    }
  }
 else   if (e.getSource() instanceof FilterModel) {
    if (uiModel.getSelectedQuery() != null && filterModel.getCurrentQuery() == null) {
      uiModel.setSelectedQuery(null);
    }
 else     if (filterModel.getCurrentQuery() != null && filterModel.getCurrentQuery() != uiModel.getSelectedQuery()) {
      uiModel.setSelectedQuery(filterModel.getCurrentQuery());
    }
  }
  updateControls();
  updateEnabled(true);
}",0.7608695652173914
142608,"public void setNodeFixed(Node node,boolean fixed){
  if (isNodeInGraph(node)) {
    node.getNodeData().setFixed(fixed);
  }
}","public void setNodeFixed(Node node,boolean fixed){
  node.getNodeData().setFixed(fixed);
}",0.8372093023255814
142609,"private void removeEdge(Edge edge,Graph graph){
  if (isEdgeInGraph(edge)) {
    graph.removeEdge(edge);
  }
}","private void removeEdge(Edge edge,Graph graph){
  graph.removeEdge(edge);
}",0.8108108108108109
142610,"public Node duplicateNode(Node node){
  if (isNodeInGraph(node)) {
    HierarchicalGraph hg=getHierarchicalGraph();
    Node copy=copyNodeRecursively(node,hg.getParent(node),hg);
    return copy;
  }
 else {
    return null;
  }
}","public Node duplicateNode(Node node){
  HierarchicalGraph hg=getHierarchicalGraph();
  Node copy=copyNodeRecursively(node,hg.getParent(node),hg);
  return copy;
}",0.826530612244898
142611,"private void removeNode(Node node,Graph graph){
  if (isNodeInGraph(node)) {
    graph.removeNode(node);
  }
}","private void removeNode(Node node,Graph graph){
  graph.removeNode(node);
}",0.8108108108108109
142612,"public void createEdges(Node source,Node[] allNodes,boolean directed){
  if (isNodeInGraph(source) && areNodesInGraph(allNodes)) {
    for (    Node n : allNodes) {
      if (n != source) {
        createEdge(source,n,directed);
      }
    }
  }
}","public void createEdges(Node source,Node[] allNodes,boolean directed){
  for (  Node n : allNodes) {
    if (n != source) {
      createEdge(source,n,directed);
    }
  }
}",0.819047619047619
142613,"public boolean canMoveNodeToGroup(Node node,Node group){
  HierarchicalGraph hg=getHierarchicalGraph();
  return node != group && hg.getParent(node) == hg.getParent(group) && canUngroupNode(group) && isNodeInGraph(node);
}","public boolean canMoveNodeToGroup(Node node,Node group){
  HierarchicalGraph hg=getHierarchicalGraph();
  return node != group && hg.getParent(node) == hg.getParent(group) && canUngroupNode(group);
}",0.9453681710213776
142614,"public boolean canUngroupNode(Node node){
  if (!isNodeInGraph(node)) {
    return false;
  }
  boolean canUngroup;
  HierarchicalGraph hg=getHierarchicalGraph();
  canUngroup=getNodeChildrenCount(hg,node) > 0;
  return canUngroup;
}","public boolean canUngroupNode(Node node){
  boolean canUngroup;
  HierarchicalGraph hg=getHierarchicalGraph();
  canUngroup=getNodeChildrenCount(hg,node) > 0;
  return canUngroup;
}",0.8743961352657005
142615,"public boolean canGroupNodes(Node[] nodes){
  if (!areNodesInGraph(nodes)) {
    return false;
  }
  HierarchicalGraph hg=getHierarchicalGraph();
  Node parent=hg.getParent(nodes[0]);
  for (  Node n : nodes) {
    if (hg.getParent(n) != parent) {
      return false;
    }
  }
  return true;
}","public boolean canGroupNodes(Node[] nodes){
  HierarchicalGraph hg=getHierarchicalGraph();
  Node parent=hg.getParent(nodes[0]);
  for (  Node n : nodes) {
    if (hg.getParent(n) != parent) {
      return false;
    }
  }
  return true;
}",0.8968105065666041
142616,"public boolean isNodeInGroup(Node node){
  if (!isNodeInGraph(node)) {
    return false;
  }
  HierarchicalGraph hg=getHierarchicalGraph();
  return hg.getParent(node) != null;
}","public boolean isNodeInGroup(Node node){
  HierarchicalGraph hg=getHierarchicalGraph();
  return hg.getParent(node) != null;
}",0.8289473684210527
142617,"protected GLCapabilities getCaps(){
  GLCapabilities caps=new GLCapabilities();
  caps.setAlphaBits(8);
  caps.setDoubleBuffered(true);
  caps.setHardwareAccelerated(true);
  int antialisaing=vizController.getVizConfig().getAntialiasing();
  if (antialisaing == 0) {
    caps.setSampleBuffers(false);
  }
 else   if (antialisaing == 2) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(2);
  }
 else   if (antialisaing == 4) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(4);
  }
 else   if (antialisaing == 8) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(8);
  }
 else   if (antialisaing == 16) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(16);
  }
  return caps;
}","protected GLCapabilities getCaps(){
  GLCapabilities caps=new GLCapabilities();
  try {
    caps.setAlphaBits(8);
    caps.setDoubleBuffered(true);
    caps.setHardwareAccelerated(true);
    int antialisaing=vizController.getVizConfig().getAntialiasing();
    if (antialisaing == 0) {
      caps.setSampleBuffers(false);
    }
 else     if (antialisaing == 2) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(2);
    }
 else     if (antialisaing == 4) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(4);
    }
 else     if (antialisaing == 8) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(8);
    }
 else     if (antialisaing == 16) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(16);
    }
  }
 catch (  javax.media.opengl.GLException ex) {
    Exceptions.printStackTrace(ex);
  }
  return caps;
}",0.8908742820676452
142618,"/** 
 * Hack to have a current workpace when opening workspace
 * @param temporaryOpeningWorkspace the opening workspace or null
 */
public void setTemporaryOpeningWorkspace(WorkspaceImpl temporaryOpeningWorkspace){
  this.temporaryOpeningWorkspace=temporaryOpeningWorkspace;
}","/** 
 * Hack to have a current workpace when opening workspace
 * @param temporaryOpeningWorkspace the opening workspace or null
 */
public void setTemporaryOpeningWorkspace(WorkspaceImpl temporaryOpeningWorkspace){
  this.temporaryOpeningWorkspace=temporaryOpeningWorkspace;
  if (temporaryOpeningWorkspace != null) {
    fireWorkspaceEvent(EventType.INITIALIZE,temporaryOpeningWorkspace);
  }
}",0.8231797919762258
142619,"public void run(){
  JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
  String title=frame.getTitle() + ""String_Node_Str"" + project.getLookup().lookup(ProjectInformation.class).getName();
  frame.setTitle(title);
}","public void run(){
  JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
  String title=frame.getTitle();
  title=title.substring(0,title.indexOf('-') - 1);
  frame.setTitle(title);
}",0.7370892018779343
142620,"public void deleteWorkspace(){
  controller.deleteWorkspace(controller.getCurrentWorkspace());
}","public void deleteWorkspace(){
  if (controller.getCurrentProject().getLookup().lookup(WorkspaceProvider.class).getWorkspaces().length == 1) {
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
  }
  controller.deleteWorkspace(controller.getCurrentWorkspace());
}",0.1391304347826087
142621,"private void createDefaultGroups(){
  groups=new VizToolbarGroup[4];
  groups[0]=new GlobalGroupBar();
  groups[1]=new NodeGroupBar();
  groups[2]=new EdgeGroupBar();
  groups[3]=new LabelGroupBar();
  VizModel model=VizController.getInstance().getVizModel();
  model.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        VizModel model=VizController.getInstance().getVizModel();
        toolbar.setEnable(!model.isDefaultModel());
      }
    }
  }
);
}","private void createDefaultGroups(){
  groups=new VizToolbarGroup[4];
  groups[0]=new GlobalGroupBar();
  groups[1]=new NodeGroupBar();
  groups[2]=new EdgeGroupBar();
  groups[3]=new LabelGroupBar();
  VizModel model=VizController.getInstance().getVizModel();
  model.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        VizModel model=VizController.getInstance().getVizModel();
        toolbar.setEnable(!model.isDefaultModel());
        ((NodeGroupBar)groups[1]).setModelValues(model);
        ((EdgeGroupBar)groups[2]).setModelValues(model);
        ((LabelGroupBar)groups[3]).setModelValues(model);
      }
    }
  }
);
}",0.8720238095238095
142622,"public JComponent[] getToolbarComponents(){
  JComponent[] components=new JComponent[6];
  TextModel model=VizController.getInstance().getVizModel().getTextModel();
  final JPopupButton labelSizeModeButton=new JPopupButton();
  TextManager textManager=VizController.getInstance().getTextManager();
  for (  final SizeMode sm : textManager.getSizeModes()) {
    labelSizeModeButton.addItem(sm,sm.getIcon());
  }
  labelSizeModeButton.setSelectedItem(model.getSizeMode());
  labelSizeModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SizeMode sm=(SizeMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setSizeMode(sm);
    }
  }
);
  labelSizeModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelSizeModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getSizeMode() != labelSizeModeButton.getSelectedItem()) {
        labelSizeModeButton.setSelectedItem(model.getSizeMode());
      }
    }
  }
);
  components[0]=labelSizeModeButton;
  final JPopupButton labelColorModeButton=new JPopupButton();
  for (  final ColorMode cm : textManager.getColorModes()) {
    labelColorModeButton.addItem(cm,cm.getIcon());
  }
  labelColorModeButton.setSelectedItem(textManager.getModel().getColorMode());
  labelColorModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      ColorMode cm=(ColorMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setColorMode(cm);
    }
  }
);
  labelColorModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelColorModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getColorMode() != labelColorModeButton.getSelectedItem()) {
        labelColorModeButton.setSelectedItem(model.getColorMode());
      }
    }
  }
);
  components[1]=labelColorModeButton;
  final JButton fontButton=new JButton(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
  fontButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      Font font=JFontChooser.showDialog(WindowManager.getDefault().getMainWindow(),model.getNodeFont());
      if (font != null && font != model.getNodeFont()) {
        model.setNodeFont(font);
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      fontButton.setText(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
    }
  }
);
  components[2]=fontButton;
  final JSlider fontSizeSlider=new JSlider(0,100,(int)(model.getNodeSizeFactor() * 100f));
  fontSizeSlider.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontSizeSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setNodeSizeFactor(fontSizeSlider.getValue() / 100f);
    }
  }
);
  fontSizeSlider.setPreferredSize(new Dimension(100,20));
  fontSizeSlider.setMaximumSize(new Dimension(100,20));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (((int)(model.getNodeSizeFactor() * 100f)) != fontSizeSlider.getValue()) {
        fontSizeSlider.setValue((int)(model.getNodeSizeFactor() * 100f));
      }
    }
  }
);
  components[3]=fontSizeSlider;
  final ColorChooser colorChooser=new ColorChooser(model.getNodeColor());
  colorChooser.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  colorChooser.setPreferredSize(new Dimension(16,16));
  colorChooser.setMaximumSize(new Dimension(16,16));
  colorChooser.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(ColorChooser.PROP_COLOR)) {
        TextModel model=VizController.getInstance().getVizModel().getTextModel();
        model.setNodeColor(colorChooser.getColor());
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (!model.getNodeColor().equals(colorChooser.getColor())) {
        colorChooser.setColor(model.getNodeColor());
      }
    }
  }
);
  components[4]=colorChooser;
  final JButton attributesButton=new JButton();
  attributesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  attributesButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  attributesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      LabelAttributesPanel panel=new LabelAttributesPanel();
      panel.setup(model);
      DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VizBarController.class,""String_Node_Str""),true,NotifyDescriptor.OK_CANCEL_OPTION,null,null);
      if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
        panel.unsetup();
        return;
      }
    }
  }
);
  components[5]=attributesButton;
  return components;
}","public JComponent[] getToolbarComponents(){
  TextModel model=VizController.getInstance().getVizModel().getTextModel();
  final JPopupButton labelSizeModeButton=new JPopupButton();
  TextManager textManager=VizController.getInstance().getTextManager();
  for (  final SizeMode sm : textManager.getSizeModes()) {
    labelSizeModeButton.addItem(sm,sm.getIcon());
  }
  labelSizeModeButton.setSelectedItem(model.getSizeMode());
  labelSizeModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SizeMode sm=(SizeMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setSizeMode(sm);
    }
  }
);
  labelSizeModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelSizeModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getSizeMode() != labelSizeModeButton.getSelectedItem()) {
        labelSizeModeButton.setSelectedItem(model.getSizeMode());
      }
    }
  }
);
  components[0]=labelSizeModeButton;
  final JPopupButton labelColorModeButton=new JPopupButton();
  for (  final ColorMode cm : textManager.getColorModes()) {
    labelColorModeButton.addItem(cm,cm.getIcon());
  }
  labelColorModeButton.setSelectedItem(textManager.getModel().getColorMode());
  labelColorModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      ColorMode cm=(ColorMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setColorMode(cm);
    }
  }
);
  labelColorModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelColorModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getColorMode() != labelColorModeButton.getSelectedItem()) {
        labelColorModeButton.setSelectedItem(model.getColorMode());
      }
    }
  }
);
  components[1]=labelColorModeButton;
  final JButton fontButton=new JButton(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
  fontButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      Font font=JFontChooser.showDialog(WindowManager.getDefault().getMainWindow(),model.getNodeFont());
      if (font != null && font != model.getNodeFont()) {
        model.setNodeFont(font);
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      fontButton.setText(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
    }
  }
);
  components[2]=fontButton;
  final JSlider fontSizeSlider=new JSlider(0,100,(int)(model.getNodeSizeFactor() * 100f));
  fontSizeSlider.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontSizeSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setNodeSizeFactor(fontSizeSlider.getValue() / 100f);
    }
  }
);
  fontSizeSlider.setPreferredSize(new Dimension(100,20));
  fontSizeSlider.setMaximumSize(new Dimension(100,20));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (((int)(model.getNodeSizeFactor() * 100f)) != fontSizeSlider.getValue()) {
        fontSizeSlider.setValue((int)(model.getNodeSizeFactor() * 100f));
      }
    }
  }
);
  components[3]=fontSizeSlider;
  final ColorChooser colorChooser=new ColorChooser(model.getNodeColor());
  colorChooser.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  colorChooser.setPreferredSize(new Dimension(16,16));
  colorChooser.setMaximumSize(new Dimension(16,16));
  colorChooser.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(ColorChooser.PROP_COLOR)) {
        TextModel model=VizController.getInstance().getVizModel().getTextModel();
        model.setNodeColor(colorChooser.getColor());
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (!model.getNodeColor().equals(colorChooser.getColor())) {
        colorChooser.setColor(model.getNodeColor());
      }
    }
  }
);
  components[4]=colorChooser;
  final JButton attributesButton=new JButton();
  attributesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  attributesButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  attributesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      LabelAttributesPanel panel=new LabelAttributesPanel();
      panel.setup(model);
      DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VizBarController.class,""String_Node_Str""),true,NotifyDescriptor.OK_CANCEL_OPTION,null,null);
      if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
        panel.unsetup();
        return;
      }
    }
  }
);
  components[5]=attributesButton;
  return components;
}",0.9963765198486192
142623,"public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}","public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}",0.9892569382273948
142624,"public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
  }
  mouseInside=false;
  repaint();
}","public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=false;
  repaint();
}",0.8074245939675174
142625,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.8516687268232386
142626,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  float w=getWidth();
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}",0.9378612716763006
142627,"public void mouseReleased(MouseEvent evt){
  latestMousePositionX=null;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}","public void mouseReleased(MouseEvent evt){
  latestMousePositionX=evt.getX();
  currentMousePositionX=latestMousePositionX;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}",0.8353658536585366
142628,"public void mouseEntered(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
  mouseInside=true;
}","public void mouseEntered(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=true;
}",0.8433734939759037
142629,"public void mouseClicked(MouseEvent e){
}","public void mouseClicked(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
}",0.5093167701863354
142630,"public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}","public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
    unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}",0.8218111002921129
142631,"public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) ? DateTime.class : null;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}","public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}",0.9371980676328504
142632,"public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equals(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}","public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATETIME);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}",0.9116161616161615
142633,"public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}",0.8183520599250936
142634,"public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.9676425269645608
142635,"public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.9676425269645608
142636,"private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}","private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equalsIgnoreCase(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}",0.98677831643896
142637,"public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
  }
  mouseInside=false;
  repaint();
}","public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=false;
  repaint();
}",0.8074245939675174
142638,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.8516687268232386
142639,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  float w=getWidth();
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}",0.9378612716763006
142640,"public void mouseReleased(MouseEvent evt){
  latestMousePositionX=null;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}","public void mouseReleased(MouseEvent evt){
  latestMousePositionX=evt.getX();
  currentMousePositionX=latestMousePositionX;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}",0.8353658536585366
142641,"public void mouseEntered(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
  mouseInside=true;
}","public void mouseEntered(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=true;
}",0.8433734939759037
142642,"public void mouseClicked(MouseEvent e){
}","public void mouseClicked(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
}",0.5093167701863354
142643,"public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}","public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
    unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}",0.8218111002921129
142644,"public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) ? DateTime.class : null;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}","public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}",0.9371980676328504
142645,"public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equals(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}","public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATETIME);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}",0.9116161616161615
142646,"public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}",0.8183520599250936
142647,"public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.9676425269645608
142648,"public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.9676425269645608
142649,"private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}","private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equalsIgnoreCase(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}",0.98677831643896
142650,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn eigenCol=nodeTable.getColumn(EIGENVECTOR);
  if (eigenCol == null) {
    eigenCol=nodeTable.addColumn(EIGENVECTOR,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  int N=hgraph.getNodeCount();
  hgraph.readLock();
  double[] tmp=new double[N];
  centralities=new double[N];
  Progress.start(progress,numRuns);
  HashMap<Integer,Node> indicies=new HashMap<Integer,Node>();
  HashMap<Node,Integer> invIndicies=new HashMap<Node,Integer>();
  int count=0;
  for (  Node u : hgraph.getNodes()) {
    indicies.put(count,u);
    invIndicies.put(u,count);
    centralities[count]=1;
    count++;
  }
  for (int s=0; s < numRuns; s++) {
    double max=0;
    for (int i=0; i < N; i++) {
      Node u=indicies.get(i);
      EdgeIterable iter=null;
      if (isDirected) {
        iter=((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(u);
      }
 else {
        iter=hgraph.getEdges(u);
      }
      for (      Edge e : iter) {
        Node v=hgraph.getOpposite(u,e);
        Integer id=invIndicies.get(v);
        tmp[i]+=centralities[id];
      }
      max=Math.max(max,tmp[i]);
      if (isCanceled) {
        return;
      }
    }
    sumChange=0;
    for (int k=0; k < N; k++) {
      if (max != 0) {
        sumChange+=Math.abs(centralities[k] - (tmp[k] / max));
        centralities[k]=tmp[k] / max;
      }
      if (isCanceled) {
        return;
      }
    }
    if (isCanceled) {
      return;
    }
    Progress.progress(progress);
  }
  for (int i=0; i < N; i++) {
    Node s=indicies.get(i);
    AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
    row.setValue(eigenCol,centralities[i]);
    if (isCanceled) {
      return;
    }
  }
  hgraph.readUnlock();
  Progress.finish(progress);
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn eigenCol=nodeTable.getColumn(EIGENVECTOR);
  if (eigenCol == null) {
    eigenCol=nodeTable.addColumn(EIGENVECTOR,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  int N=hgraph.getNodeCount();
  hgraph.readLock();
  double[] tmp=new double[N];
  centralities=new double[N];
  Progress.start(progress,numRuns);
  HashMap<Integer,Node> indicies=new HashMap<Integer,Node>();
  HashMap<Node,Integer> invIndicies=new HashMap<Node,Integer>();
  int count=0;
  for (  Node u : hgraph.getNodes()) {
    indicies.put(count,u);
    invIndicies.put(u,count);
    centralities[count]=1;
    count++;
  }
  for (int s=0; s < numRuns; s++) {
    double max=0;
    for (int i=0; i < N; i++) {
      Node u=indicies.get(i);
      EdgeIterable iter=null;
      if (isDirected) {
        iter=((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(u);
      }
 else {
        iter=((HierarchicalUndirectedGraph)hgraph).getEdgesAndMetaEdges(u);
      }
      for (      Edge e : iter) {
        Node v=hgraph.getOpposite(u,e);
        Integer id=invIndicies.get(v);
        tmp[i]+=centralities[id];
      }
      max=Math.max(max,tmp[i]);
      if (isCanceled) {
        return;
      }
    }
    sumChange=0;
    for (int k=0; k < N; k++) {
      if (max != 0) {
        sumChange+=Math.abs(centralities[k] - (tmp[k] / max));
        centralities[k]=tmp[k] / max;
      }
      if (isCanceled) {
        return;
      }
    }
    if (isCanceled) {
      return;
    }
    Progress.progress(progress);
  }
  for (int i=0; i < N; i++) {
    Node s=indicies.get(i);
    AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
    row.setValue(eigenCol,centralities[i]);
    if (isCanceled) {
      return;
    }
  }
  hgraph.readUnlock();
  Progress.finish(progress);
}",0.9836829836829836
142651,"public void writeGraphView(XMLStreamWriter writer,GraphViewImpl graphView) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_VIEW);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    writer.writeStartElement(ELEMENT_TREESTRUCTURE_NODE);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
    writer.writeEndElement();
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      writer.writeStartElement(ELEMENT_VIEW_EDGE);
      writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}","public void writeGraphView(XMLStreamWriter writer,GraphViewImpl graphView) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_VIEW);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    writer.writeStartElement(ELEMENT_VIEW_NODE);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
    writer.writeEndElement();
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      writer.writeStartElement(ELEMENT_VIEW_EDGE);
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}",0.950374531835206
142652,"public void readGraphView(XMLStreamReader reader,GraphStructure graphStructure) throws XMLStreamException {
  GraphViewImpl graphView=graphStructure.createView(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure mainStructure=graphStructure.getMainView().getStructure();
  TreeStructure treeStructure=graphView.getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VIEW_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode mainNode=mainStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode node=new AbstractNode(mainNode.getNodeData(),graphView.getViewId(),0,0,0,parentNode);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      node.setEnabledInDegree(inDegree);
      node.setEnabledOutDegree(outDegree);
      node.setEnabledMutualDegree(mutualDegree);
      node.setEnabled(enabled);
      treeStructure.insertAsChild(node,parentNode);
    }
 else     if (ELEMENT_VIEW_EDGE.equalsIgnoreCase(name)) {
      AbstractEdge edge=graphStructure.getEdgeFromDictionnary(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_VIEW.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
}","public void readGraphView(XMLStreamReader reader,GraphStructure graphStructure) throws XMLStreamException {
  GraphViewImpl graphView=graphStructure.createView(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure mainStructure=graphStructure.getMainView().getStructure();
  TreeStructure treeStructure=graphView.getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VIEW_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode mainNode=mainStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode node=new AbstractNode(mainNode.getNodeData(),graphView.getViewId(),0,0,0,parentNode);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      node.setEnabledInDegree(inDegree);
      node.setEnabledOutDegree(outDegree);
      node.setEnabledMutualDegree(mutualDegree);
      node.setEnabled(enabled);
      treeStructure.insertAsChild(node,parentNode);
    }
 else     if (ELEMENT_VIEW_EDGE.equalsIgnoreCase(name)) {
      AbstractEdge edge=graphStructure.getEdgeFromDictionnary(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode source=edge.getSource(graphView.getViewId());
      AbstractNode target=edge.getTarget(graphView.getViewId());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_VIEW.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9503887449092928
142653,"private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}","private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
int i=firstParts;
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}",0.9906542056074766
142654,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else   if (column.getType() == AttributeType.BOOLEAN) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}",0.9532820816085156
142655,"public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else {
    return String.class;
  }
}","public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.BOOLEAN) {
    return Boolean.class;
  }
 else {
    return String.class;
  }
}",0.9175355450236968
142656,"private boolean addEdgeAttributes(EdgeDraft edge,String prefix,ArrayList list){
  boolean ret=true;
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      continue;
    }
    if (value instanceof ArrayList) {
      ret=addEdgeAttributes(edge,prefix + ""String_Node_Str"" + key,(ArrayList)value);
      if (!ret) {
        break;
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        EdgeDraft.EdgeType type=((Double)value) == 1 ? EdgeDraft.EdgeType.DIRECTED : EdgeDraft.EdgeType.UNDIRECTED;
        edge.setType(type);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str"",edge.toString()),Issue.Level.WARNING));
      }
    }
 else {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      AttributeColumn column=null;
      if ((column=edgeClass.getColumn(key)) == null) {
        column=edgeClass.addColumn(key,AttributeType.STRING);
        report.log(""String_Node_Str"" + column.getTitle() + ""String_Node_Str""+ column.getType()+ ""String_Node_Str"");
      }
      edge.addAttributeValue(column,value.toString());
    }
  }
  return ret;
}","private boolean addEdgeAttributes(EdgeDraft edge,String prefix,ArrayList list){
  boolean ret=true;
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      continue;
    }
    if (value instanceof ArrayList) {
      ret=addEdgeAttributes(edge,prefix + ""String_Node_Str"" + key,(ArrayList)value);
      if (!ret) {
        break;
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        EdgeDraft.EdgeType type=((Double)value) == 1 ? EdgeDraft.EdgeType.DIRECTED : EdgeDraft.EdgeType.UNDIRECTED;
        edge.setType(type);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str"",edge.toString()),Issue.Level.WARNING));
      }
    }
 else {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      AttributeColumn column=null;
      if ((column=edgeClass.getColumn(key)) == null) {
        column=edgeClass.addColumn(key,AttributeType.STRING);
        report.log(""String_Node_Str"" + column.getTitle() + ""String_Node_Str""+ column.getType()+ ""String_Node_Str"");
      }
      edge.addAttributeValue(column,value.toString());
    }
  }
  return ret;
}",0.9884643114635904
142657,"private boolean parseEdge(ArrayList list){
  EdgeDraft edgeDraft=container.factory().newEdgeDraft();
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key)) {
      NodeDraft source=container.getNode(value.toString());
      edgeDraft.setSource(source);
    }
 else     if (""String_Node_Str"".equals(key)) {
      NodeDraft target=container.getNode(value.toString());
      edgeDraft.setTarget(target);
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        edgeDraft.setWeight(((Double)value).floatValue());
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      edgeDraft.setLabel(value.toString());
    }
  }
  boolean ret=addEdgeAttributes(edgeDraft,""String_Node_Str"",list);
  container.addEdge(edgeDraft);
  return ret;
}","private boolean parseEdge(ArrayList list){
  EdgeDraft edgeDraft=container.factory().newEdgeDraft();
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key)) {
      NodeDraft source=container.getNode(value.toString());
      edgeDraft.setSource(source);
    }
 else     if (""String_Node_Str"".equals(key)) {
      NodeDraft target=container.getNode(value.toString());
      edgeDraft.setTarget(target);
    }
 else     if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        edgeDraft.setWeight(((Double)value).floatValue());
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      edgeDraft.setLabel(value.toString());
    }
  }
  boolean ret=addEdgeAttributes(edgeDraft,""String_Node_Str"",list);
  container.addEdge(edgeDraft);
  return ret;
}",0.9814710836608648
142658,"public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
  }
  nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
  edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  attributeModel.addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  refreshAll();
}","public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
  }
  nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
  edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
  hideTable();
  enableTableControls();
  attributeModel.addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  refreshAllOnce();
}",0.978450786255096
142659,"private void clearAll(){
  clearTableControls();
  clearColumnManipulators();
  clearGeneralActionsButtons();
}","private void clearAll(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearTableControls();
      clearColumnManipulators();
      clearGeneralActionsButtons();
    }
  }
);
}",0.7047619047619048
142660,"private void hideTable(){
  tableScrollPane.setViewportView(null);
}","private void hideTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      tableScrollPane.setViewportView(null);
    }
  }
);
}",0.6153846153846154
142661,"private void refreshAll(){
  if (nodesButton.isEnabled()) {
    refreshTable();
    refreshColumnManipulators();
    refreshGeneralActionsButtons();
  }
}","private synchronized void refreshAll(){
  if (nodesButton.isEnabled()) {
    refreshTable();
    refreshColumnManipulators();
    refreshGeneralActionsButtons();
  }
}",0.9595015576323987
142662,"public void selectEdgesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.EDGE;
      refreshAll();
    }
  }
);
}","public void selectEdgesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.EDGE;
      refreshAllOnce();
    }
  }
);
}",0.9887640449438202
142663,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  visibleOnly=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false);
  useSparklines=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_SPARKLINES,false);
  timeIntervalGraphics=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_TIME_INTERVAL_GRAPHICS,false);
  showEdgesNodesLabels=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_EDGES_NODES_LABELS,false);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  if (UIUtils.isAquaLookAndFeel()) {
    columnManipulatorsPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  columnManipulatorsPanel.setLayout(new WrapLayout(WrapLayout.CENTER,25,20));
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  nodeTable.setUseSparklines(useSparklines);
  nodeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setUseSparklines(useSparklines);
  edgeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setShowEdgesNodesLabels(showEdgesNodesLabels);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  Workspace workspace=pc.getCurrentWorkspace();
  if (workspace == null) {
    clearAll();
  }
 else {
    AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
    dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
    if (dataTablesModel == null) {
      workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
    }
    nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
    edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
    refreshAll();
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  visibleOnly=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false);
  useSparklines=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_SPARKLINES,false);
  timeIntervalGraphics=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_TIME_INTERVAL_GRAPHICS,false);
  showEdgesNodesLabels=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_EDGES_NODES_LABELS,false);
  initComponents();
  if (UIUtils.isAquaLookAndFeel()) {
    columnManipulatorsPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  columnManipulatorsPanel.setLayout(new WrapLayout(WrapLayout.CENTER,25,20));
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  nodeTable.setUseSparklines(useSparklines);
  nodeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setUseSparklines(useSparklines);
  edgeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setShowEdgesNodesLabels(showEdgesNodesLabels);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  Workspace workspace=pc.getCurrentWorkspace();
  if (workspace == null) {
    clearAll();
  }
 else {
    AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
    dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
    if (dataTablesModel == null) {
      workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
    }
    nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
    edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
    refreshAllOnce();
  }
  bannerPanel.setVisible(false);
}",0.9517819706498952
142664,"public void selectNodesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.NODE;
      refreshAll();
    }
  }
);
}","public void selectNodesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.NODE;
      refreshAllOnce();
    }
  }
);
}",0.9887640449438202
142665,"private void initNodesView(){
  Runnable initNodesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,nodeTable.getOutlineTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=nodeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        nodeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        nodeTable.scrollToFirstNodeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  Future future=taskExecutor.submit(initNodesRunnable);
}","private void initNodesView(){
  Runnable initNodesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,nodeTable.getOutlineTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=nodeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        nodeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        nodeTable.scrollToFirstNodeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  SwingUtilities.invokeLater(initNodesRunnable);
}",0.977245508982036
142666,"private void refreshOnce(boolean refreshTableOnly){
  if (refreshOnceHelperThread == null || !refreshOnceHelperThread.isAlive() || (refreshOnceHelperThread.refreshTableOnly && !refreshTableOnly)) {
    refreshOnceHelperThread=new RefreshOnceHelperThread(refreshTableOnly);
    refreshOnceHelperThread.start();
  }
 else {
    refreshOnceHelperThread.eventAttended();
  }
}","/** 
 * This method ensures that the refreshing of all Data laboratory or table only happens once in a short time period.
 * @param refreshTableOnly True to refresh only table values, false to refresh all UI including manipulators
 */
private void refreshOnce(boolean refreshTableOnly){
  if (refreshOnceHelperThread == null || !refreshOnceHelperThread.isAlive() || (refreshOnceHelperThread.refreshTableOnly && !refreshTableOnly)) {
    refreshOnceHelperThread=new RefreshOnceHelperThread(refreshTableOnly);
    refreshOnceHelperThread.start();
  }
 else {
    refreshOnceHelperThread.eventAttended();
  }
}",0.7599591419816139
142667,"@Override public void componentOpened(){
  refreshAll();
}","@Override public void componentOpened(){
  refreshAllOnce();
}",0.9666666666666668
142668,"private void availableColumnsButtonActionPerformed(java.awt.event.ActionEvent evt){
  AttributeTable table;
  AvailableColumnsModel availableColumnsModel;
  if (classDisplayed == classDisplayed.NODE) {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
  }
 else {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
  }
  availableColumnsModel=getTableAvailableColumnsModel(table);
  DialogDescriptor dd=new DialogDescriptor(new AvailableColumnsPanel(table,availableColumnsModel).getValidationPanel(),NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  dd.setOptions(new Object[]{DialogDescriptor.OK_OPTION});
  DialogDisplayer.getDefault().notify(dd);
  refreshAll();
  availableColumnsButton.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",true));
}","private void availableColumnsButtonActionPerformed(java.awt.event.ActionEvent evt){
  AttributeTable table;
  AvailableColumnsModel availableColumnsModel;
  if (classDisplayed == classDisplayed.NODE) {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
  }
 else {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
  }
  availableColumnsModel=getTableAvailableColumnsModel(table);
  DialogDescriptor dd=new DialogDescriptor(new AvailableColumnsPanel(table,availableColumnsModel).getValidationPanel(),NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  dd.setOptions(new Object[]{DialogDescriptor.OK_OPTION});
  DialogDisplayer.getDefault().notify(dd);
  refreshAllOnce();
  availableColumnsButton.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",true));
}",0.9976717112922002
142669,"/** 
 * Column manipulators related methods:
 */
private void refreshColumnManipulators(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearColumnManipulators();
      prepareAddColumnButton();
      prepareMergeColumnsButton();
      prepareColumnManipulatorsButtons();
      columnManipulatorsPanel.updateUI();
    }
  }
);
}","/** 
 * Column manipulators related methods:
 */
private void refreshColumnManipulators(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearColumnManipulators();
      prepareAddColumnButton();
      prepareMergeColumnsButton();
      prepareColumnManipulatorsButtons();
    }
  }
);
}",0.9375
142670,"public void refreshCurrentTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      refreshTable();
    }
  }
);
}","public void refreshCurrentTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      refreshOnce(true);
    }
  }
);
}",0.9608540925266904
142671,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      if (dataTablesModel == null) {
        workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
      }
      nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
      edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      attributeModel.addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      nodeAvailableColumnsModel=null;
      edgeAvailableColumnsModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  columnComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      refreshFilter();
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      if (dataTablesModel == null) {
        workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
      }
      nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
      edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
      hideTable();
      enableTableControls();
      attributeModel.addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      refreshAllOnce();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      nodeAvailableColumnsModel=null;
      edgeAvailableColumnsModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  columnComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      refreshFilter();
    }
  }
);
}",0.9935075217735552
142672,"private void initEdgesView(){
  Runnable initEdgesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,edgeTable.getTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=edgeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        edgeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        edgeTable.scrollToFirstEdgeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  Future future=taskExecutor.submit(initEdgesRunnable);
}","private void initEdgesView(){
  Runnable initEdgesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,edgeTable.getTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=edgeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        edgeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        edgeTable.scrollToFirstEdgeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  SwingUtilities.invokeLater(initEdgesRunnable);
}",0.9731031714171016
142673,"private void enableTableControls(){
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  configurationButton.setEnabled(true);
  availableColumnsButton.setEnabled(true);
  filterTextField.setEnabled(true);
  columnComboBox.setEnabled(true);
  labelFilter.setEnabled(true);
}","private void enableTableControls(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      configurationButton.setEnabled(true);
      availableColumnsButton.setEnabled(true);
      filterTextField.setEnabled(true);
      columnComboBox.setEnabled(true);
      labelFilter.setEnabled(true);
    }
  }
);
}",0.6559297218155198
142674,"public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        outlineTable.setModel(mdl);
        NodeDataTable.this.dataTablesModel=dataTablesModel;
        setNodesSelection(selectedNodes);
        selectedNodes=null;
      }
    }
);
  }
 catch (  InterruptedException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  InvocationTargetException ex) {
    Exceptions.printStackTrace(ex);
  }
  refreshingTable=false;
}","public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}",0.7507186858316222
142675,"/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
  }
  model.setRunning(pStatistics,true);
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        model.setRunning(pStatistics,false);
        for (        StatisticsUI s : uis) {
          model.addResult(s);
          s.unsetup();
        }
        model.addReport(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    model.setRunning(pStatistics,false);
    for (    StatisticsUI s : uis) {
      model.addResult(s);
      s.unsetup();
    }
    model.addReport(pStatistics);
  }
}","/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
  }
  model.setRunning(pStatistics,true);
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        model.setRunning(pStatistics,false);
        for (        StatisticsUI s : uis) {
          model.addResult(s);
          s.unsetup();
        }
        model.addReport(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    model.setRunning(pStatistics,false);
    for (    StatisticsUI s : uis) {
      model.addResult(s);
      s.unsetup();
    }
    model.addReport(pStatistics);
    if (listener != null) {
      listener.taskFinished(null);
    }
  }
}",0.8871191135734072
142676,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  double edgesCount=graph.getEdgeCount();
  double nodesCount=graph.getNodeCount();
  double multiplier=1;
  if (!isDirected) {
    multiplier=2;
  }
  density=(multiplier * edgesCount) / (nodesCount * nodesCount - nodesCount);
}","public void execute(GraphModel graphModel,AttributeModel attributeModel){
  HierarchicalGraph hgraph;
  if (isDirected) {
    hgraph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else {
    hgraph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
  double edgesCount=hgraph.getTotalEdgeCount();
  double nodesCount=hgraph.getNodeCount();
  double multiplier=1;
  if (!isDirected) {
    multiplier=2;
  }
  density=(multiplier * edgesCount) / (nodesCount * nodesCount - nodesCount);
}",0.6575342465753424
142677,"/** 
 * @param struct
 * @param degrees
 * @param graph
 * @return
 */
public double finalQ(int[] struct,double[] degrees,HierarchicalUndirectedGraph graph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn modCol=nodeTable.getColumn(MODULARITY_CLASS);
  if (modCol == null) {
    modCol=nodeTable.addColumn(MODULARITY_CLASS,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  double res=0;
  double[] internal=new double[degrees.length];
  for (  Node n : graph.getNodes()) {
    int n_index=structure.map.get(n);
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(modCol,struct[n_index]);
    for (    Node neighbor : graph.getNeighbors(n)) {
      if (n == neighbor) {
        continue;
      }
      int neigh_index=structure.map.get(neighbor);
      if (struct[neigh_index] == struct[n_index]) {
        internal[struct[neigh_index]]++;
      }
    }
  }
  for (int i=0; i < degrees.length; i++) {
    internal[i]/=2.0;
    res+=(internal[i] / graph.getEdgeCount()) - Math.pow(degrees[i] / (2 * graph.getEdgeCount()),2);
  }
  return res;
}","/** 
 * @param struct
 * @param degrees
 * @param hgraph
 * @return
 */
public double finalQ(int[] struct,double[] degrees,HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn modCol=nodeTable.getColumn(MODULARITY_CLASS);
  if (modCol == null) {
    modCol=nodeTable.addColumn(MODULARITY_CLASS,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  double res=0;
  double[] internal=new double[degrees.length];
  for (  Node n : hgraph.getNodes()) {
    int n_index=structure.map.get(n);
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(modCol,struct[n_index]);
    for (    Node neighbor : hgraph.getNeighbors(n)) {
      if (n == neighbor) {
        continue;
      }
      int neigh_index=structure.map.get(neighbor);
      if (struct[neigh_index] == struct[n_index]) {
        internal[struct[neigh_index]]++;
      }
    }
  }
  for (int i=0; i < degrees.length; i++) {
    internal[i]/=2.0;
    res+=(internal[i] / hgraph.getTotalEdgeCount()) - Math.pow(degrees[i] / (2 * hgraph.getTotalEdgeCount()),2);
  }
  return res;
}",0.9778911564625852
142678,"public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  graph.readLock();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
  graph.readUnlock();
}","public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  graph.readLock();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    if (!e.getSource().equals(e.getTarget())) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=getEdgeForce().calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
  System.out.println(""String_Node_Str"" + energy0 + ""String_Node_Str""+ energy);
  graph.readUnlock();
}",0.9538171536286524
142679,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(graph,attributeModel);
}","private void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
}",0.9588014981273408
142680,"/** 
 * @param v - The specific node to count the triangles on.
 */
public void newVertex(int v){
  int[] A=new int[N];
  for (int i=network[v].length() - 1; (i >= 0) && (network[v].get(i) > v); i--) {
    int neighbor=network[v].get(i);
    A[neighbor]=network[v].getCount(i);
  }
  for (int i=network[v].length() - 1; i >= 0; i--) {
    int neighbor=network[v].get(i);
    for (int j=closest_in_array(neighbor); j >= 0; j--) {
      int next=network[neighbor].get(j);
      if (A[next] > 0) {
        triangles[next]+=network[v].getCount(i);
        triangles[v]+=network[v].getCount(i);
        triangles[neighbor]+=A[next];
      }
    }
  }
}","/** 
 * @param v - The specific node to count the triangles on.
 */
private void newVertex(int v){
  int[] A=new int[N];
  for (int i=network[v].length() - 1; (i >= 0) && (network[v].get(i) > v); i--) {
    int neighbor=network[v].get(i);
    A[neighbor]=network[v].getCount(i);
  }
  for (int i=network[v].length() - 1; i >= 0; i--) {
    int neighbor=network[v].get(i);
    for (int j=closest_in_array(neighbor); j >= 0; j--) {
      int next=network[neighbor].get(j);
      if (A[next] > 0) {
        triangles[next]+=network[v].getCount(i);
        triangles[v]+=network[v].getCount(i);
        triangles[neighbor]+=A[next];
      }
    }
  }
}",0.9915057915057915
142681,"/** 
 * @param u
 * @param v
 */
public void tr_link_nohigh(int u,int v,int count){
  int iu=0, iv=0, w;
  while ((iu < network[u].length()) && (iv < network[v].length())) {
    if (network[u].get(iu) < network[v].get(iv)) {
      iu++;
    }
 else     if (network[u].get(iu) > network[v].get(iv)) {
      iv++;
    }
 else {
      w=network[u].get(iu);
      if (w >= K) {
        triangles[w]+=count;
      }
      iu++;
      iv++;
    }
  }
}","private void tr_link_nohigh(int u,int v,int count){
  int iu=0, iv=0, w;
  while ((iu < network[u].length()) && (iv < network[v].length())) {
    if (network[u].get(iu) < network[v].get(iv)) {
      iu++;
    }
 else     if (network[u].get(iu) > network[v].get(iv)) {
      iv++;
    }
 else {
      w=network[u].get(iu);
      if (w >= K) {
        triangles[w]+=count;
      }
      iu++;
      iv++;
    }
  }
}",0.9511627906976744
142682,"public void triangles(HierarchicalGraph graph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * graph.getNodeCount());
  graph.readLock();
  N=graph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : graph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : graph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)graph).getInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)graph).getOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : graph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  graph.readUnlock();
}","private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : hgraph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.986409966024915
142683,"/** 
 * @param v
 * @return
 */
public int closest_in_array(int v){
  int right=network[v].length() - 1;
  if (right < 0) {
    return (-1);
  }
  if (network[v].get(0) >= v) {
    return (-1);
  }
  if (network[v].get(right) < v) {
    return (right);
  }
  if (network[v].get(right) == v) {
    return (right - 1);
  }
  int left=0, mid;
  while (right > left) {
    mid=(left + right) / 2;
    if (v < network[v].get(mid)) {
      right=mid - 1;
    }
 else     if (v > network[v].get(mid)) {
      left=mid + 1;
    }
 else {
      return (mid - 1);
    }
  }
  if (v > network[v].get(right)) {
    return (right);
  }
 else {
    return right - 1;
  }
}","private int closest_in_array(int v){
  int right=network[v].length() - 1;
  if (right < 0) {
    return (-1);
  }
  if (network[v].get(0) >= v) {
    return (-1);
  }
  if (network[v].get(right) < v) {
    return (right);
  }
  if (network[v].get(right) == v) {
    return (right - 1);
  }
  int left=0, mid;
  while (right > left) {
    mid=(left + right) / 2;
    if (v < network[v].get(mid)) {
      right=mid - 1;
    }
 else     if (v > network[v].get(mid)) {
      left=mid + 1;
    }
 else {
      return (mid - 1);
    }
  }
  if (v > network[v].get(right)) {
    return (right);
  }
 else {
    return right - 1;
  }
}",0.9680933852140078
142684,"public void weaklyConnected(HierarchicalUndirectedGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  componentCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(WEAKLY);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(WEAKLY,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  List<Integer> sizeList=new ArrayList<Integer>();
  graph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,index);
    index++;
  }
  int N=graph.getNodeCount();
  int[] color=new int[N];
  Progress.start(progress,graph.getNodeCount());
  int seenCount=0;
  while (seenCount < N) {
    LinkedList<Node> Q=new LinkedList<Node>();
    LinkedList<Node> component=new LinkedList<Node>();
    NodeIterable iter=graph.getNodes();
    for (    Node first : iter) {
      if (color[indicies.get(first)] == 0) {
        Q.add(first);
        iter.doBreak();
        break;
      }
    }
    while (!Q.isEmpty()) {
      if (isCanceled) {
        graph.readUnlock();
        return;
      }
      Node u=Q.removeFirst();
      component.add(u);
      EdgeIterable edgeIter=graph.getEdges(u);
      for (      Edge edge : edgeIter) {
        Node reachable=graph.getOpposite(u,edge);
        int id=indicies.get(reachable);
        if (color[id] == 0) {
          color[id]=1;
          Q.addLast(reachable);
          Progress.progress(progress,seenCount);
        }
      }
      color[indicies.get(u)]=2;
      seenCount++;
    }
    for (    Node s : component) {
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(componentCol,componentCount);
    }
    sizeList.add(component.size());
    componentCount++;
  }
  graph.readUnlock();
  componentsSize=new int[sizeList.size()];
  for (int i=0; i < sizeList.size(); i++) {
    componentsSize[i]=sizeList.get(i);
  }
}","public void weaklyConnected(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  componentCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(WEAKLY);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(WEAKLY,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  List<Integer> sizeList=new ArrayList<Integer>();
  hgraph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    index++;
  }
  int N=hgraph.getNodeCount();
  int[] color=new int[N];
  Progress.start(progress,hgraph.getNodeCount());
  int seenCount=0;
  while (seenCount < N) {
    LinkedList<Node> Q=new LinkedList<Node>();
    LinkedList<Node> component=new LinkedList<Node>();
    NodeIterable iter=hgraph.getNodes();
    for (    Node first : iter) {
      if (color[indicies.get(first)] == 0) {
        Q.add(first);
        iter.doBreak();
        break;
      }
    }
    while (!Q.isEmpty()) {
      if (isCanceled) {
        hgraph.readUnlock();
        return;
      }
      Node u=Q.removeFirst();
      component.add(u);
      EdgeIterable edgeIter=hgraph.getEdgesAndMetaEdges(u);
      for (      Edge edge : edgeIter) {
        Node reachable=hgraph.getOpposite(u,edge);
        int id=indicies.get(reachable);
        if (color[id] == 0) {
          color[id]=1;
          Q.addLast(reachable);
          Progress.progress(progress,seenCount);
        }
      }
      color[indicies.get(u)]=2;
      seenCount++;
    }
    for (    Node s : component) {
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(componentCol,componentCount);
    }
    sizeList.add(component.size());
    componentCount++;
  }
  hgraph.readUnlock();
  componentsSize=new int[sizeList.size()];
  for (int i=0; i < sizeList.size(); i++) {
    componentsSize[i]=sizeList.get(i);
  }
}",0.9945382323733865
142685,"/** 
 * @param col
 * @param S
 * @param graph
 * @param f
 * @param index
 * @param low_index
 * @param indicies
 */
private void tarjans(AttributeColumn col,LinkedList<Node> S,HierarchicalDirectedGraph graph,Node f,int[] index,int[] low_index,HashMap<Node,Integer> indicies){
  int id=indicies.get(f);
  index[id]=count;
  low_index[id]=count;
  count++;
  S.addFirst(f);
  EdgeIterable edgeIter=graph.getOutEdges(f);
  for (  Edge e : edgeIter) {
    Node u=graph.getOpposite(f,e);
    int x=indicies.get(u);
    if (index[x] == 0) {
      tarjans(col,S,graph,u,index,low_index,indicies);
      low_index[id]=Math.min(low_index[x],low_index[id]);
    }
 else     if (S.contains(u)) {
      low_index[id]=Math.min(low_index[id],index[x]);
    }
  }
  if (low_index[id] == index[id]) {
    Node v=null;
    while (v != f) {
      v=S.removeFirst();
      AttributeRow row=(AttributeRow)v.getNodeData().getAttributes();
      row.setValue(col,stronglyCount);
    }
    stronglyCount++;
  }
}","private void tarjans(AttributeColumn col,LinkedList<Node> S,HierarchicalDirectedGraph hgraph,Node f,int[] index,int[] low_index,HashMap<Node,Integer> indicies){
  int id=indicies.get(f);
  index[id]=count;
  low_index[id]=count;
  count++;
  S.addFirst(f);
  EdgeIterable edgeIter=hgraph.getOutEdgesAndMetaOutEdges(f);
  for (  Edge e : edgeIter) {
    Node u=hgraph.getOpposite(f,e);
    int x=indicies.get(u);
    if (index[x] == 0) {
      tarjans(col,S,hgraph,u,index,low_index,indicies);
      low_index[id]=Math.min(low_index[x],low_index[id]);
    }
 else     if (S.contains(u)) {
      low_index[id]=Math.min(low_index[id],index[x]);
    }
  }
  if (low_index[id] == index[id]) {
    Node v=null;
    while (v != f) {
      v=S.removeFirst();
      AttributeRow row=(AttributeRow)v.getNodeData().getAttributes();
      row.setValue(col,stronglyCount);
    }
    stronglyCount++;
  }
}",0.912373871481678
142686,"public void top_tarjans(HierarchicalDirectedGraph graph,AttributeModel attributeModel){
  count=1;
  stronglyCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(STRONG);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(STRONG,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  graph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int v=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,v);
    v++;
  }
  int N=graph.getNodeCount();
  int[] index=new int[N];
  int[] low_index=new int[N];
  while (true) {
    LinkedList<Node> S=new LinkedList<Node>();
    Node first=null;
    NodeIterable iter=graph.getNodes();
    for (    Node u : iter) {
      if (index[indicies.get(u)] == 0) {
        first=u;
        iter.doBreak();
        break;
      }
    }
    if (first == null) {
      graph.readUnlockAll();
      return;
    }
    tarjans(componentCol,S,graph,first,index,low_index,indicies);
  }
}","private void top_tarjans(HierarchicalDirectedGraph hgraph,AttributeModel attributeModel){
  count=1;
  stronglyCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(STRONG);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(STRONG,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  hgraph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int v=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,v);
    v++;
  }
  int N=hgraph.getNodeCount();
  int[] index=new int[N];
  int[] low_index=new int[N];
  while (true) {
    LinkedList<Node> S=new LinkedList<Node>();
    Node first=null;
    NodeIterable iter=hgraph.getNodes();
    for (    Node u : iter) {
      if (index[indicies.get(u)] == 0) {
        first=u;
        iter.doBreak();
        break;
      }
    }
    if (first == null) {
      hgraph.readUnlockAll();
      return;
    }
    tarjans(componentCol,S,hgraph,first,index,low_index,indicies);
  }
}",0.9905660377358492
142687,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  if (isDirected) {
    inDistribution=new double[2][2 * graph.getNodeCount()];
    outDistribution=new double[2][2 * graph.getNodeCount()];
  }
 else {
    combinedDistribution=new double[2][2 * graph.getNodeCount()];
  }
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    if (isDirected) {
      int inDegree=((HierarchicalDirectedGraph)graph).getTotalInDegree(node);
      int outDegree=((HierarchicalDirectedGraph)graph).getTotalOutDegree(node);
      inDistribution[1][inDegree]++;
      outDistribution[1][outDegree]++;
      inDistribution[0][inDegree]=inDegree;
      outDistribution[0][outDegree]=outDegree;
    }
 else {
      int combinedDegree=((HierarchicalUndirectedGraph)graph).getTotalDegree(node);
      combinedDistribution[1][combinedDegree]++;
      combinedDistribution[0][combinedDegree]=combinedDegree;
    }
    Progress.progress(progress,nodeCount);
    nodeCount++;
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  if (isDirected) {
    double[] inFit=new double[2];
    double[] outFit=new double[2];
    leastSquares(inDistribution[1],inFit);
    leastSquares(outDistribution[1],outFit);
    inAlpha=inFit[1];
    inBeta=inFit[0];
    outAlpha=outFit[1];
    outBeta=outFit[0];
  }
 else {
    double[] fit=new double[2];
    leastSquares(combinedDistribution[1],fit);
    combinedAlpha=fit[1];
    combinedBeta=fit[0];
  }
}","private void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  if (isDirected) {
    inDistribution=new double[2][2 * graph.getNodeCount()];
    outDistribution=new double[2][2 * graph.getNodeCount()];
  }
 else {
    combinedDistribution=new double[2][2 * graph.getNodeCount()];
  }
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    if (isDirected) {
      int inDegree=((HierarchicalDirectedGraph)graph).getTotalInDegree(node);
      int outDegree=((HierarchicalDirectedGraph)graph).getTotalOutDegree(node);
      inDistribution[1][inDegree]++;
      outDistribution[1][outDegree]++;
      inDistribution[0][inDegree]=inDegree;
      outDistribution[0][outDegree]=outDegree;
    }
 else {
      int combinedDegree=((HierarchicalUndirectedGraph)graph).getTotalDegree(node);
      combinedDistribution[1][combinedDegree]++;
      combinedDistribution[0][combinedDegree]=combinedDegree;
    }
    Progress.progress(progress,nodeCount);
    nodeCount++;
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  if (isDirected) {
    double[] inFit=new double[2];
    double[] outFit=new double[2];
    leastSquares(inDistribution[1],inFit);
    leastSquares(outDistribution[1],outFit);
    inAlpha=inFit[1];
    inBeta=inFit[0];
    outAlpha=outFit[1];
    outBeta=outFit[0];
  }
 else {
    double[] fit=new double[2];
    leastSquares(combinedDistribution[1],fit);
    combinedAlpha=fit[1];
    combinedBeta=fit[0];
  }
}",0.9965222889661712
142688,"public WorkspaceInformationImpl(Project project,String name){
  this.project=project;
  this.name=name;
}","public WorkspaceInformationImpl(Project project,String name){
  this.project=project;
  this.name=name;
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    count=0;
  }
  count++;
}",0.5898876404494382
142689,"public SearchOptions(Edge[] edgesToSearch,Pattern regexPattern,boolean onlyMatchWholeAttributeValue){
  this.edgesToSearch=edgesToSearch;
  this.regexPattern=regexPattern;
  this.onlyMatchWholeAttributeValue=onlyMatchWholeAttributeValue;
  searchNodes=false;
}","/** 
 * Setup options to search on edges with the given pattern. If edgesToSearch is null, all edges of the graph will be used.
 * @param edgesToSearch
 * @param regexPattern
 * @param onlyMatchWholeAttributeValue
 */
public SearchOptions(Edge[] edgesToSearch,Pattern regexPattern,boolean onlyMatchWholeAttributeValue){
  this.edgesToSearch=edgesToSearch;
  this.regexPattern=regexPattern;
  this.onlyMatchWholeAttributeValue=onlyMatchWholeAttributeValue;
  searchNodes=false;
}",0.7046070460704607
142690,"private SearchResult findOnNodes(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Node[] nodes=searchOptions.getNodesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < nodes.length; rowIndex++) {
    if (!gec.isNodeInGraph(nodes[rowIndex])) {
      continue;
    }
    row=(AttributeRow)nodes[rowIndex].getNodeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      value=row.getValue(columnIndex);
      result=matchRegex(value,searchOptions,rowIndex,columnIndex);
      if (result != null) {
        result.setFoundNode(nodes[rowIndex]);
        return result;
      }
      searchOptions.setRegionStart(0);
    }
    columnIndex=0;
  }
  return result;
}","private SearchResult findOnNodes(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Set<Integer> columnsToSearch=searchOptions.getColumnsToSearch();
  boolean searchAllColumns=columnsToSearch.isEmpty();
  Node[] nodes=searchOptions.getNodesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < nodes.length; rowIndex++) {
    if (!gec.isNodeInGraph(nodes[rowIndex])) {
      continue;
    }
    row=(AttributeRow)nodes[rowIndex].getNodeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      if (searchAllColumns || columnsToSearch.contains(columnIndex)) {
        value=row.getValue(columnIndex);
        result=matchRegex(value,searchOptions,rowIndex,columnIndex);
        if (result != null) {
          result.setFoundNode(nodes[rowIndex]);
          return result;
        }
      }
      searchOptions.setRegionStart(0);
    }
    searchOptions.setRegionStart(0);
    columnIndex=0;
  }
  return result;
}",0.8550649350649351
142691,"private SearchResult findOnEdges(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Edge[] edges=searchOptions.getEdgesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < edges.length; rowIndex++) {
    if (!gec.isEdgeInGraph(edges[rowIndex])) {
      continue;
    }
    row=(AttributeRow)edges[rowIndex].getEdgeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      value=row.getValue(columnIndex);
      result=matchRegex(value,searchOptions,rowIndex,columnIndex);
      if (result != null) {
        result.setFoundEdge(edges[rowIndex]);
        return result;
      }
      searchOptions.setRegionStart(0);
    }
    columnIndex=0;
  }
  return result;
}","private SearchResult findOnEdges(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Set<Integer> columnsToSearch=searchOptions.getColumnsToSearch();
  boolean searchAllColumns=columnsToSearch.isEmpty();
  Edge[] edges=searchOptions.getEdgesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < edges.length; rowIndex++) {
    if (!gec.isEdgeInGraph(edges[rowIndex])) {
      continue;
    }
    row=(AttributeRow)edges[rowIndex].getEdgeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      if (searchAllColumns || columnsToSearch.contains(columnIndex)) {
        value=row.getValue(columnIndex);
        result=matchRegex(value,searchOptions,rowIndex,columnIndex);
        if (result != null) {
          result.setFoundEdge(edges[rowIndex]);
          return result;
        }
      }
      searchOptions.setRegionStart(0);
    }
    searchOptions.setRegionStart(0);
    columnIndex=0;
  }
  return result;
}",0.8550649350649351
142692,"private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  HierarchicalGraph hg=(HierarchicalGraph)graph;
  for (  Edge e : hg.getEdgesAndMetaEdges()) {
    edgeColors=edgeColors || e.getEdgeData().r() != -1;
    edgeLabels=edgeLabels || (e.getEdgeData().getLabel() != null && !e.getEdgeData().getLabel().isEmpty());
  }
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    if (cancel) {
      break;
    }
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  if (!cancel) {
    writer.append(stringBuilder);
  }
  Progress.finish(progressTicket);
}","private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  HierarchicalGraph hg=(HierarchicalGraph)graph;
  for (  Edge e : hg.getEdgesAndMetaEdges()) {
    edgeColors=edgeColors || e.getEdgeData().r() != -1;
    edgeLabels=edgeLabels || (e.getEdgeData().getLabel() != null && !e.getEdgeData().getLabel().isEmpty());
  }
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    if (cancel) {
      break;
    }
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : edgeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  if (!cancel) {
    writer.append(stringBuilder);
  }
  Progress.finish(progressTicket);
}",0.9995075508864084
142693,"private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return edgeLabels;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight(visibleInterval.getLow(),visibleInterval.getHigh()));
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors && edgeColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      if (edge.getEdgeData().r() != -1) {
        String quote=""String_Node_Str"";
        builder.append(quote);
        builder.append((int)(edge.getEdgeData().r() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().g() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().b() * 255f));
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}","private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return edgeLabels;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight(visibleInterval.getLow(),visibleInterval.getHigh()));
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors && edgeColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      if (edge.getEdgeData().r() != -1) {
        String quote=""String_Node_Str"";
        builder.append(quote);
        builder.append((int)(edge.getEdgeData().r() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().g() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().b() * 255f));
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  EdgeColumnsGDF edgeIdColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.VARCHAR){
    @Override public boolean isEnable(){
      return false;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[7];
  defaultEdgeColumnsGDFs[0]=edgeIdColumn;
  defaultEdgeColumnsGDFs[1]=labelColumn;
  defaultEdgeColumnsGDFs[2]=weightColumn;
  defaultEdgeColumnsGDFs[3]=directedColumn;
  defaultEdgeColumnsGDFs[4]=colorColumn;
  defaultEdgeColumnsGDFs[5]=visibleColumn;
  defaultEdgeColumnsGDFs[6]=labelVisibleColumn;
}",0.9403544648943422
142694,"private boolean isEdgeDefaultColumn(String id){
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.title.equals(id.toLowerCase())) {
      return true;
    }
  }
  return false;
}","private boolean isEdgeDefaultColumn(String id){
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.title.equalsIgnoreCase(id)) {
      return true;
    }
  }
  return false;
}",0.9578947368421052
142695,"private boolean isNodeDefaultColumn(String id){
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.title.equals(id.toLowerCase())) {
      return true;
    }
  }
  return false;
}","private boolean isNodeDefaultColumn(String id){
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.title.equalsIgnoreCase(id)) {
      return true;
    }
  }
  return false;
}",0.9578947368421052
142696,"private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty()) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.9872195399034364
142697,"private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (exportHierarchy && graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}","private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColorR(document,n);
    nodeE.appendChild(colorE);
    colorE=createNodeColorG(document,n);
    nodeE.appendChild(colorE);
    colorE=createNodeColorB(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (exportHierarchy && graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}",0.9562874251497006
142698,"private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}","private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorRKeyE=document.createElement(""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorRKeyE);
    Element colorGKeyE=document.createElement(""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorGKeyE);
    Element colorBKeyE=document.createElement(""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorBKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}",0.9197463371965888
142699,"private void writeAttributes(XMLStreamWriter xmlWriter,AttributeColumn[] cols,String mode,String attClass) throws Exception {
  xmlWriter.writeStartElement(ATTRIBUTES);
  xmlWriter.writeAttribute(ATTRIBUTES_CLASS,attClass);
  xmlWriter.writeAttribute(ATTRIBUTES_MODE,mode);
  for (  AttributeColumn col : cols) {
    if (!col.getOrigin().equals(AttributeOrigin.PROPERTY) || (exportDynamic && col.getOrigin().equals(AttributeOrigin.PROPERTY) && col.getIndex() == PropertiesColumn.EDGE_WEIGHT.getIndex())) {
      xmlWriter.writeStartElement(ATTRIBUTE);
      xmlWriter.writeAttribute(ATTRIBUTE_ID,col.getId());
      xmlWriter.writeAttribute(ATTRIBUTE_TITLE,col.getTitle());
      if (col.getType().equals(AttributeType.INT)) {
        xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
      }
 else       if (col.getType().isListType()) {
        if (col.getType().equals(AttributeType.LIST_INTEGER)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else         if (col.getType().equals(AttributeType.LIST_CHARACTER)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (col.getType().isDynamicType()) {
        AttributeType staticType=TypeConvertor.getStaticType(col.getType());
        if (staticType.equals(AttributeType.INT)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,staticType.getTypeString().toLowerCase());
        }
      }
 else {
        xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase());
      }
      if (col.getDefaultValue() != null) {
        xmlWriter.writeStartElement(ATTRIBUTE_DEFAULT);
        xmlWriter.writeCharacters(col.getDefaultValue().toString());
        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();
    }
  }
  xmlWriter.writeEndElement();
}","private void writeAttributes(XMLStreamWriter xmlWriter,AttributeColumn[] cols,String mode,String attClass) throws Exception {
  if (exportAttributes) {
    xmlWriter.writeStartElement(ATTRIBUTES);
    xmlWriter.writeAttribute(ATTRIBUTES_CLASS,attClass);
    xmlWriter.writeAttribute(ATTRIBUTES_MODE,mode);
    for (    AttributeColumn col : cols) {
      if (!col.getOrigin().equals(AttributeOrigin.PROPERTY) || (exportDynamic && col.getOrigin().equals(AttributeOrigin.PROPERTY) && col.getIndex() == PropertiesColumn.EDGE_WEIGHT.getIndex())) {
        xmlWriter.writeStartElement(ATTRIBUTE);
        xmlWriter.writeAttribute(ATTRIBUTE_ID,col.getId());
        xmlWriter.writeAttribute(ATTRIBUTE_TITLE,col.getTitle());
        if (col.getType().equals(AttributeType.INT)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else         if (col.getType().isListType()) {
          if (col.getType().equals(AttributeType.LIST_INTEGER)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else           if (col.getType().equals(AttributeType.LIST_CHARACTER)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else         if (col.getType().isDynamicType()) {
          AttributeType staticType=TypeConvertor.getStaticType(col.getType());
          if (staticType.equals(AttributeType.INT)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,staticType.getTypeString().toLowerCase());
          }
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase());
        }
        if (col.getDefaultValue() != null) {
          xmlWriter.writeStartElement(ATTRIBUTE_DEFAULT);
          xmlWriter.writeCharacters(col.getDefaultValue().toString());
          xmlWriter.writeEndElement();
        }
        xmlWriter.writeEndElement();
      }
    }
    xmlWriter.writeEndElement();
  }
}",0.9738927738927738
142700,"private void writeEdges(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(EDGES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  EdgeIterable edgeIterable=exportHierarchy ? graph.getEdgesTree() : graph.getEdgesAndMetaEdges();
  for (  Edge edge : edgeIterable) {
    xmlWriter.writeStartElement(EDGE);
    if (edge.getEdgeData().getId() != null && !edge.getEdgeData().getId().equals(Integer.toString(edge.getId()))) {
      xmlWriter.writeAttribute(EDGE_ID,edge.getEdgeData().getId());
    }
    xmlWriter.writeAttribute(EDGE_SOURCE,edge.getSource().getNodeData().getId());
    xmlWriter.writeAttribute(EDGE_TARGET,edge.getTarget().getNodeData().getId());
    if (edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
 else     if (!edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
    String label=edge.getEdgeData().getLabel();
    if (label != null && !label.isEmpty() && !label.equals(edge.getEdgeData().getId())) {
      xmlWriter.writeAttribute(EDGE_LABEL,label);
    }
    float weight=edge.getWeight();
    if (weight != 1f) {
      xmlWriter.writeAttribute(EDGE_WEIGHT,""String_Node_Str"" + weight);
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)edge.getEdgeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    writeEdgeColor(xmlWriter,edge);
    if (exportAttributes && edge.getEdgeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)edge.getEdgeData().getAttributes();
      writeAttValue(xmlWriter,attributeRow,visibleInterval);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeEdges(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(EDGES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  EdgeIterable edgeIterable=exportHierarchy ? graph.getEdgesTree() : graph.getEdgesAndMetaEdges();
  for (  Edge edge : edgeIterable) {
    xmlWriter.writeStartElement(EDGE);
    if (edge.getEdgeData().getId() != null && !edge.getEdgeData().getId().equals(Integer.toString(edge.getId()))) {
      xmlWriter.writeAttribute(EDGE_ID,edge.getEdgeData().getId());
    }
    xmlWriter.writeAttribute(EDGE_SOURCE,edge.getSource().getNodeData().getId());
    xmlWriter.writeAttribute(EDGE_TARGET,edge.getTarget().getNodeData().getId());
    if (edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
 else     if (!edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
    String label=edge.getEdgeData().getLabel();
    if (label != null && !label.isEmpty() && !label.equals(edge.getEdgeData().getId())) {
      xmlWriter.writeAttribute(EDGE_LABEL,label);
    }
    float weight=edge.getWeight();
    if (weight != 1f) {
      xmlWriter.writeAttribute(EDGE_WEIGHT,""String_Node_Str"" + weight);
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)edge.getEdgeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    writeEdgeColor(xmlWriter,edge);
    if (exportAttributes && edge.getEdgeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)edge.getEdgeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.9997586290127928
142701,"private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValue(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.999719495091164
142702,"/** 
 * <p>Creates and edge between source and target node (if it does not already exist), directed or undirected.</p> <p>If a edge with the given id already exists, no edge will be created.</p> <p>This will not create a self-loop.</p>
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);","/** 
 * <p>Creates and edge between source and target node (if it does not already exist), directed or undirected.</p> <p>If a edge with the given id already exists, no edge will be created.</p>
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);",0.9570680628272252
142703,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      source=graph.getNode(sourceId);
      target=graph.getNode(targetId);
      if ((source == null || target == null) && !createNewNodes) {
        continue;
      }
 else {
        if (source == null) {
          source=gec.createNode(null,sourceId);
        }
        if (target == null) {
          target=gec.createNode(null,targetId);
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9276203032300592
142704,"public AttributeColumn createBooleanMatchesColumn(AttributeTable table,AttributeColumn column,String newColumnTitle,Pattern pattern){
  if (pattern != null) {
    AttributeColumn newColumn=addAttributeColumn(table,newColumnTitle,AttributeType.BOOLEAN);
    if (newColumn == null) {
      return null;
    }
    Matcher matcher;
    Object value;
    for (    Attributes row : getTableAttributeRows(table)) {
      value=row.getValue(column.getIndex());
      if (value != null) {
        matcher=pattern.matcher(value.toString());
      }
 else {
        matcher=pattern.matcher(""String_Node_Str"");
      }
      row.setValue(newColumn.getIndex(),new Boolean(matcher.matches()));
    }
    return newColumn;
  }
 else {
    return null;
  }
}","public AttributeColumn createBooleanMatchesColumn(AttributeTable table,AttributeColumn column,String newColumnTitle,Pattern pattern){
  if (pattern != null) {
    AttributeColumn newColumn=addAttributeColumn(table,newColumnTitle,AttributeType.BOOLEAN);
    if (newColumn == null) {
      return null;
    }
    Matcher matcher;
    Object value;
    for (    Attributes row : getTableAttributeRows(table)) {
      value=row.getValue(column.getIndex());
      if (value != null) {
        matcher=pattern.matcher(value.toString());
      }
 else {
        matcher=pattern.matcher(""String_Node_Str"");
      }
      row.setValue(newColumn.getIndex(),matcher.matches());
    }
    return newColumn;
  }
 else {
    return null;
  }
}",0.991162474507138
142705,"public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          node=graph.getNode(id);
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9808861859252824
142706,"public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (getGraph().getEdge(id) == null) {
    if (source != target) {
      if (directed) {
        newEdge=buildEdge(id,source,target,true);
        if (getDirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
 else {
        newEdge=buildEdge(id,source,target,false);
        if (getUndirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}","public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (source != target) {
    if (directed) {
      newEdge=buildEdge(id,source,target,true);
      if (getDirectedGraph().addEdge(newEdge)) {
        return newEdge;
      }
 else {
        return null;
      }
    }
 else {
      newEdge=buildEdge(id,source,target,false);
      if (getUndirectedGraph().addEdge(newEdge)) {
        return newEdge;
      }
 else {
        return null;
      }
    }
  }
 else {
    return null;
  }
}",0.3278969957081545
142707,"private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}","private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode();
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}",0.9957983193277312
142708,"/** 
 * <p>Adds a new column to the specified table with the given title and type of column.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table to add the column
 * @param title Title for the new column, can't be repeated in the table, null or empty string
 * @param type Type for the new column
 * @return The created column or null if title is not correct
 */
AttributeColumn addAttributeColumn(AttributeTable table,String title,AttributeType type);","/** 
 * <p>Adds a new column to the specified table with the given title and type of column.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table to add the column
 * @param title Title for the new column, can't be repeated in the table, null or empty string
 * @param type Type for the new column
 * @return The created column or null if the column could not be created
 */
AttributeColumn addAttributeColumn(AttributeTable table,String title,AttributeType type);",0.9658060013956734
142709,"/** 
 * <p>Duplicates a given column of a table and copies al row values.</p> <p>If the <code>AttributeType</code> for the new column is different from the old column type, it will try to parse each value. If it is not possible, the value will be set to null.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table of the column to duplicate
 * @param column Column to duplicate
 * @param title Title for the new column
 * @param type AttributeType for the new column
 * @return The created column or null if title is not correct
 */
AttributeColumn duplicateColumn(AttributeTable table,AttributeColumn column,String title,AttributeType type);","/** 
 * <p>Duplicates a given column of a table and copies al row values.</p> <p>If the <code>AttributeType</code> for the new column is different from the old column type, it will try to parse each value. If it is not possible, the value will be set to null.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table of the column to duplicate
 * @param column Column to duplicate
 * @param title Title for the new column
 * @param type AttributeType for the new column
 * @return The created column or null if the column could not be created
 */
AttributeColumn duplicateColumn(AttributeTable table,AttributeColumn column,String title,AttributeType type);",0.972913211719182
142710,"public void actionPerformed(ActionEvent e){
  try {
    stream.reset();
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
  importController.importStream(stream,importer);
  WelcomeTopComponent.this.close();
}","public void actionPerformed(ActionEvent e){
  try {
    stream.reset();
  }
 catch (  IOException ex) {
  }
  ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
  importController.importStream(stream,importer);
  WelcomeTopComponent.this.close();
}",0.940983606557377
142711,"private void loadSamples(){
  net.miginfocom.swing.MigLayout migLayout1=new net.miginfocom.swing.MigLayout();
  migLayout1.setColumnConstraints(""String_Node_Str"");
  samplesPanel.setLayout(migLayout1);
  String[] samplePath=new String[3];
  samplePath[0]=""String_Node_Str"";
  samplePath[1]=""String_Node_Str"";
  samplePath[2]=""String_Node_Str"";
  String[] sampleTooltip=new String[3];
  sampleTooltip[0]=""String_Node_Str"";
  sampleTooltip[1]=""String_Node_Str"";
  sampleTooltip[2]=""String_Node_Str"";
  try {
    for (int i=0; i < samplePath.length; i++) {
      String s=samplePath[i];
      String tooltip=sampleTooltip[i];
      final InputStream stream=WelcomeTopComponent.class.getResourceAsStream(s);
      String fileName=s.substring(s.lastIndexOf('/') + 1,s.length());
      final String importer=fileName.substring(fileName.lastIndexOf('.'),fileName.length());
      JXHyperlink fileLink=new JXHyperlink(new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          try {
            stream.reset();
          }
 catch (          IOException ex) {
            Exceptions.printStackTrace(ex);
          }
          ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
          importController.importStream(stream,importer);
          WelcomeTopComponent.this.close();
        }
      }
);
      fileLink.setText(fileName);
      fileLink.setToolTipText(tooltip);
      fileLink.putClientProperty(LINK_PATH,importer);
      samplesPanel.add(fileLink,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}","private void loadSamples(){
  net.miginfocom.swing.MigLayout migLayout1=new net.miginfocom.swing.MigLayout();
  migLayout1.setColumnConstraints(""String_Node_Str"");
  samplesPanel.setLayout(migLayout1);
  String[] samplePath=new String[3];
  samplePath[0]=""String_Node_Str"";
  samplePath[1]=""String_Node_Str"";
  samplePath[2]=""String_Node_Str"";
  String[] sampleTooltip=new String[3];
  sampleTooltip[0]=""String_Node_Str"";
  sampleTooltip[1]=""String_Node_Str"";
  sampleTooltip[2]=""String_Node_Str"";
  try {
    for (int i=0; i < samplePath.length; i++) {
      String s=samplePath[i];
      String tooltip=sampleTooltip[i];
      final InputStream stream=WelcomeTopComponent.class.getResourceAsStream(s);
      String fileName=s.substring(s.lastIndexOf('/') + 1,s.length());
      final String importer=fileName.substring(fileName.lastIndexOf('.'),fileName.length());
      JXHyperlink fileLink=new JXHyperlink(new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          try {
            stream.reset();
          }
 catch (          IOException ex) {
          }
          ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
          importController.importStream(stream,importer);
          WelcomeTopComponent.this.close();
        }
      }
);
      fileLink.setText(fileName);
      fileLink.setToolTipText(tooltip);
      fileLink.putClientProperty(LINK_PATH,importer);
      samplesPanel.add(fileLink,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}",0.986232790988736
142712,"public EdgeDataTable(){
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  table=new JXTable();
  prepareRenderers();
  table.setHighlighters(HighlighterFactory.createAlternateStriping());
  table.setColumnControlVisible(true);
  table.setSortable(true);
  table.setRowFilter(rowFilter);
  propertiesColumns=new PropertyEdgeDataColumn[FAKE_COLUMNS_COUNT];
  propertiesColumns[0]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getSource().getNodeData().getLabel();
      }
 else {
        return edge.getSource().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[1]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getTarget().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getLabel();
      }
 else {
        return edge.getTarget().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[2]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (edge.isDirected()) {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
 else {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
    }
  }
;
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (table.getSelectedRow() != -1) {
            edc.editEdges(getEdgesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  table.addMouseListener(new PopupAdapter());
  table.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Edge[] selectedEdges=getEdgesFromSelectedRows();
        if (selectedEdges.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          EdgesManipulator del=dlh.getDeleEdgesManipulator();
          if (del != null) {
            del.setup(selectedEdges,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}","public EdgeDataTable(){
  attributeUtils=AttributeUtils.getDefault();
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  table=new JXTable();
  prepareRenderers();
  table.setHighlighters(HighlighterFactory.createAlternateStriping());
  table.setColumnControlVisible(true);
  table.setSortable(true);
  table.setRowFilter(rowFilter);
  propertiesColumns=new PropertyEdgeDataColumn[FAKE_COLUMNS_COUNT];
  propertiesColumns[0]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getSource().getNodeData().getLabel();
      }
 else {
        return edge.getSource().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[1]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getTarget().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getLabel();
      }
 else {
        return edge.getTarget().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[2]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (edge.isDirected()) {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
 else {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
    }
  }
;
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (table.getSelectedRow() != -1) {
            edc.editEdges(getEdgesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  table.addMouseListener(new PopupAdapter());
  table.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Edge[] selectedEdges=getEdgesFromSelectedRows();
        if (selectedEdges.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          EdgesManipulator del=dlh.getDeleEdgesManipulator();
          if (del != null) {
            del.setup(selectedEdges,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}",0.9922402159244263
142713,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (AttributeUtils.getDefault().isNumberListColumn(column) || AttributeUtils.getDefault().isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}",0.9328214971209212
142714,"public Class getColumnClass(){
  if (useSparklines && AttributeUtils.getDefault().isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && AttributeUtils.getDefault().isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else {
    return String.class;
  }
}","public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else {
    return String.class;
  }
}",0.8596881959910914
142715,"public NodeDataTable(){
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
  prepareRenderers();
  outlineTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (outlineTable.getSelectedRow() != -1) {
            edc.editNodes(getNodesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  outlineTable.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Node[] selectedNodes=getNodesFromSelectedRows();
        if (selectedNodes.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          NodesManipulator del=dlh.getDeleteNodesManipulator();
          if (del != null) {
            del.setup(selectedNodes,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}","public NodeDataTable(){
  attributeUtils=AttributeUtils.getDefault();
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
  prepareRenderers();
  outlineTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (outlineTable.getSelectedRow() != -1) {
            edc.editNodes(getNodesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  outlineTable.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Node[] selectedNodes=getNodesFromSelectedRows();
        if (selectedNodes.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          NodesManipulator del=dlh.getDeleteNodesManipulator();
          if (del != null) {
            del.setup(selectedNodes,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}",0.9870349492671928
142716,"public Object getMaximum(){
  return max;
}","public Object getMaximum(){
  if (max == null) {
    refreshValues();
  }
  return max;
}",0.6515151515151515
142717,"public Object getMinimun(){
  return min;
}","public Object getMinimun(){
  if (min == null) {
    refreshValues();
  }
  return min;
}",0.6515151515151515
142718,"public EqualNumberFilter(AttributeColumn column){
  this.column=column;
  this.dynamicHelper=new DynamicAttributesHelper(this,null);
  GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph graph=gm.getGraph();
  List<Object> vals=new ArrayList<Object>();
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    for (    Node n : graph.getNodes()) {
      Object val=n.getNodeData().getAttributes().getValue(column.getIndex());
      if (val != null) {
        vals.add(val);
      }
    }
  }
 else {
    for (    Edge e : graph.getEdges()) {
      Object val=e.getEdgeData().getAttributes().getValue(column.getIndex());
      if (val != null) {
        vals.add(val);
      }
    }
  }
  Comparable[] comparableArray=ComparableArrayConverter.convert(vals);
  min=AttributeUtils.getDefault().getMin(column,comparableArray);
  max=AttributeUtils.getDefault().getMax(column,comparableArray);
}","public EqualNumberFilter(AttributeColumn column){
  this.column=column;
  this.dynamicHelper=new DynamicAttributesHelper(this,null);
}",0.2525918944392083
142719,"public void finish(){
  if (!Double.isInfinite(min)) {
    timelineController.setMin(min);
  }
  if (!Double.isInfinite(max)) {
    timelineController.setMax(max);
  }
}","public void finish(){
  if (!Double.isInfinite(min)) {
  }
  if (!Double.isInfinite(max)) {
  }
}",0.7293233082706767
142720,"public boolean evaluate(Graph graph,Edge edge){
  Object value=edge.getEdgeData().getAttributes().getValue(partition.getColumn().getIndex());
  if (value != null) {
    int size=parts.size();
    for (int i=0; i < size; i++) {
      Object obj=parts.get(i).getValue();
      if (obj == null && value == null) {
        return true;
      }
 else       if (obj != null && obj.equals(value)) {
        return true;
      }
    }
  }
  return false;
}","public boolean evaluate(Graph graph,Edge edge){
  Object value=edge.getEdgeData().getAttributes().getValue(partition.getColumn().getIndex());
  int size=parts.size();
  for (int i=0; i < size; i++) {
    Object obj=parts.get(i).getValue();
    if (obj == null && value == null) {
      return true;
    }
 else     if (obj != null && value != null && obj.equals(value)) {
      return true;
    }
  }
  return false;
}",0.8337182448036952
142721,"public void selectVisible(Query query){
  if (query != null && model.getCurrentQuery() == query && !model.isFiltering()) {
    return;
  }
  model.setFiltering(false);
  model.setCurrentQuery(query);
  if (model.getFilterThread() != null) {
    model.getFilterThread().setRunning(false);
    model.setFilterThread(null);
  }
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  graphModel.setVisibleView(null);
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  if (query != null) {
    FilterThread filterThread=new FilterThread(model);
    model.setFilterThread(filterThread);
    filterThread.setRootQuery((AbstractQueryImpl)query);
    filterThread.start();
  }
 else {
  }
}","public void selectVisible(Query query){
  if (query != null && model.getCurrentQuery() == query && !model.isFiltering()) {
    return;
  }
  model.setFiltering(false);
  model.setCurrentQuery(query);
  if (model.getFilterThread() != null) {
    model.getFilterThread().setRunning(false);
    model.setFilterThread(null);
  }
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  graphModel.setVisibleView(null);
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  if (query != null) {
    FilterThread filterThread=new FilterThread(model);
    model.setFilterThread(filterThread);
    filterThread.setRootQuery((AbstractQueryImpl)query);
    filterThread.start();
  }
 else {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(null);
    }
  }
}",0.899268429938098
142722,"public void selectNodes(Node[] nodes){
  if (!isCustomSelection()) {
    setCustomSelection();
  }
  Model[] models=new Model[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    models[i]=nodes[i].getNodeData().getModel();
  }
  engine.selectObject(models);
}","public void selectNodes(Node[] nodes){
  if (nodes == null) {
    resetSelection();
    return;
  }
  if (!isCustomSelection()) {
    setCustomSelection();
  }
  Model[] models=new Model[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    models[i]=nodes[i].getNodeData().getModel();
  }
  engine.selectObject(models);
}",0.8974789915966387
142723,"public FilterProperty[] getProperties(){
  try {
    return new FilterProperty[]{FilterProperty.createProperty(this,String.class,""String_Node_Str""),FilterProperty.createProperty(this,Integer.class,""String_Node_Str"")};
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
  return new FilterProperty[0];
}","public FilterProperty[] getProperties(){
  try {
    return new FilterProperty[]{FilterProperty.createProperty(this,String.class,""String_Node_Str""),FilterProperty.createProperty(this,Integer.class,""String_Node_Str""),FilterProperty.createProperty(this,Boolean.class,""String_Node_Str"")};
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
  return new FilterProperty[0];
}",0.9047619047619048
142724,"public Graph filter(Graph graph){
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : graph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if (n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : graph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  for (  Node node : graph.getNodes().toArray()) {
    if (!result.contains(node)) {
      graph.removeNode(node);
    }
  }
  return graph;
}","public Graph filter(Graph graph){
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : graph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if (n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : graph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : graph.getNodes().toArray()) {
    if (!result.contains(node)) {
      graph.removeNode(node);
    }
  }
  return graph;
}",0.977977977977978
142725,"public EdgeProcessor(Dhns dhns,GraphViewImpl view){
  this.dhns=dhns;
  this.treeStructure=view.getStructure();
  this.idGen=dhns.getIdGen();
  this.view=view;
  this.viewId=view.getViewId();
  this.edgeIterator=new ParamAVLIterator<AbstractEdge>();
}","public EdgeProcessor(Dhns dhns,GraphViewImpl view){
  this.dhns=dhns;
  this.treeStructure=view.getStructure();
  this.view=view;
  this.viewId=view.getViewId();
  this.edgeIterator=new ParamAVLIterator<AbstractEdge>();
}",0.9364406779661016
142726,"public void attributesChanged(AttributeEvent event){
  if (event.getEventType().equals(AttributeEvent.EventType.ADD_COLUMN) || event.getEventType().equals(AttributeEvent.EventType.REMOVE_COLUMN)) {
    fireChangeEvent();
  }
}","public void attributesChanged(AttributeEvent event){
  if (event.getEventType().equals(AttributeEvent.EventType.ADD_COLUMN) || event.getEventType().equals(AttributeEvent.EventType.REMOVE_COLUMN)) {
    if (refreshTimer != null) {
      refreshTimer.restart();
    }
 else {
      refreshTimer=new Timer(1000,new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          fireChangeEvent();
        }
      }
);
      refreshTimer.setRepeats(false);
      refreshTimer.start();
    }
  }
}",0.6083445491251682
142727,"public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}","public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  Workspace toSelectWorkspace=null;
  if (getCurrentWorkspace() == workspace) {
    toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
  }
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    if (toSelectWorkspace == null) {
      closeCurrentProject();
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}",0.6770670826833073
142728,"/** 
 * Used for export (writes XML date strings).
 * @param d a double to convert from
 * @return an XML date string.
 * @throws IllegalArgumentException if {@code d} is infinite.
 */
public static String getXMLDateStringFromDouble(double d){
  try {
    DatatypeFactory dateFactory=DatatypeFactory.newInstance();
    if (Double.isInfinite(d)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    GregorianCalendar gc=new GregorianCalendar();
    gc.setTimeInMillis((long)d);
    return dateFactory.newXMLGregorianCalendar(gc).toXMLFormat().substring(0,23);
  }
 catch (  DatatypeConfigurationException ex) {
    Exceptions.printStackTrace(ex);
    return ""String_Node_Str"";
  }
}","/** 
 * Used for export (writes XML date strings).
 * @param d a double to convert from
 * @return an XML date string.
 * @throws IllegalArgumentException if {@code d} is infinite.
 */
public static String getXMLDateStringFromDouble(double d){
  try {
    DatatypeFactory dateFactory=DatatypeFactory.newInstance();
    if (d == Double.NEGATIVE_INFINITY) {
      return ""String_Node_Str"";
    }
 else     if (d == Double.POSITIVE_INFINITY) {
      return ""String_Node_Str"";
    }
    GregorianCalendar gc=new GregorianCalendar();
    gc.setTimeInMillis((long)d);
    return dateFactory.newXMLGregorianCalendar(gc).toXMLFormat().substring(0,23);
  }
 catch (  DatatypeConfigurationException ex) {
    Exceptions.printStackTrace(ex);
    return ""String_Node_Str"";
  }
}",0.8888888888888888
142729,"/** 
 * Returns the leftmost point or   {@code Double.POSITIVE_INFINITY} in caseof no intervals.
 * @return the leftmost point.
 */
public double getLow(){
  if (isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
  return minimum().getLow();
}","/** 
 * Returns the leftmost point or   {@code Double.NEGATIVE_INFINITY} in caseof no intervals.
 * @return the leftmost point.
 */
public double getLow(){
  if (isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
  return minimum().getLow();
}",0.967479674796748
142730,"/** 
 * Returns the rightmost point or   {@code Double.NEGATIVE_INFINITY} in caseof no intervals.
 * @return the rightmost point.
 */
public double getHigh(){
  if (isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
  return root.left.max;
}","/** 
 * Returns the rightmost point or   {@code Double.POSITIVE_INFINITY} in caseof no intervals.
 * @return the rightmost point.
 */
public double getHigh(){
  if (isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
  return root.left.max;
}",0.9672131147540984
142731,"public double getMax(){
  if (lowMap.isEmpty() && highMap.isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
 else   if (highMap.isEmpty()) {
    return lowMap.lastKey();
  }
 else {
    return highMap.lastKey();
  }
}","public double getMax(){
  if (highMap.isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
 else {
    return highMap.lastKey();
  }
}",0.7584269662921348
142732,"public double getMin(){
  if (lowMap.isEmpty() && highMap.isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
 else   if (lowMap.isEmpty()) {
    return highMap.firstKey();
  }
 else {
    return lowMap.firstKey();
  }
}","public double getMin(){
  if (lowMap.isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
 else {
    return lowMap.firstKey();
  }
}",0.7528089887640449
142733,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.992195989331226
142734,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9917631112501304
142735,"public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}","public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  boolean refreshed=RankingFactory.refreshRanking((AbstractRanking)ranking,graph);
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
  if (refreshed) {
    rankingModelImpl.fireChangeEvent();
  }
}",0.9502046384720328
142736,"private void fireChangeEvent(){
  ChangeEvent changeEvent=new ChangeEvent(this);
  for (  ChangeListener changeListener : listeners) {
    changeListener.stateChanged(changeEvent);
  }
}","public void fireChangeEvent(){
  ChangeEvent changeEvent=new ChangeEvent(this);
  for (  ChangeListener changeListener : listeners) {
    changeListener.stateChanged(changeEvent);
  }
}",0.9757412398921832
142737,"public void setTimeIntervalMax(String timeIntervalMax){
  try {
    this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
  }
 catch (  Exception ex) {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex2) {
    }
  }
  if (this.timeIntervalMax == null) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.5737704918032787
142738,"public void setTimeIntervalMin(String timeIntervalMin){
  try {
    this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
  }
 catch (  Exception ex) {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex2) {
    }
  }
  if (this.timeIntervalMin == null) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.5737704918032787
142739,"public void actionPerformed(ActionEvent e){
  for (  Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
    entry.setValue(Color.BLACK);
  }
  setup(partition,edgeColorTransformer);
  revalidate();
  repaint();
}","public void actionPerformed(ActionEvent e){
  for (  Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
    entry.setValue(Color.BLACK);
  }
  setup(partition,edgeColorTransformer,false);
  revalidate();
  repaint();
}",0.9872881355932204
142740,"public void setup(Partition partition,Transformer transformer){
  removeAll();
  edgeColorTransformer=(EdgeColorTransformer)transformer;
  if (edgeColorTransformer.getMap().isEmpty()) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      edgeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  this.partition=partition;
  for (  final Part p : partition.getParts()) {
    JLabel partLabel=new JLabel(p.getDisplayName());
    add(partLabel);
    final ColorChooser colorChooser=new ColorChooser(edgeColorTransformer.getMap().get(p.getValue()));
    colorChooser.setPreferredSize(new Dimension(16,16));
    colorChooser.setMaximumSize(new Dimension(16,16));
    colorChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        edgeColorTransformer.getMap().put(p.getValue(),colorChooser.getColor());
      }
    }
);
    add(colorChooser,""String_Node_Str"");
  }
}","public void setup(Partition partition,Transformer transformer,boolean color){
  removeAll();
  edgeColorTransformer=(EdgeColorTransformer)transformer;
  if (color) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      edgeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  this.partition=partition;
  for (  final Part p : partition.getParts()) {
    JLabel partLabel=new JLabel(p.getDisplayName());
    add(partLabel);
    final ColorChooser colorChooser=new ColorChooser(edgeColorTransformer.getMap().get(p.getValue()));
    colorChooser.setPreferredSize(new Dimension(16,16));
    colorChooser.setMaximumSize(new Dimension(16,16));
    colorChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        edgeColorTransformer.getMap().put(p.getValue(),colorChooser.getColor());
      }
    }
);
    add(colorChooser,""String_Node_Str"");
  }
}",0.9717898832684824
142741,"private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(EdgeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      edgeColorTransformer.getMap().clear();
      setup(partition,edgeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,edgeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}","private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(EdgeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",false));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      edgeColorTransformer.getMap().clear();
      setup(partition,edgeColorTransformer,true);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,edgeColorTransformer,false);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}",0.953405017921147
142742,"public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer);
}","public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer,true);
}",0.976303317535545
142743,"private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeColorTransformer.getMap().clear();
      setup(partition,nodeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : nodeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,nodeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}","private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",false));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeColorTransformer.getMap().clear();
      setup(partition,nodeColorTransformer,true);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : nodeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,nodeColorTransformer,false);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}",0.953405017921147
142744,"public void setup(Partition partition,Transformer transformer){
  nodeColorTransformer=(NodeColorTransformer)transformer;
  List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
  int i=0;
  for (  Part p : partition.getParts()) {
    nodeColorTransformer.getMap().put(p.getValue(),colors.get(i));
    i++;
  }
  NumberFormat formatter=NumberFormat.getPercentInstance();
  formatter.setMaximumFractionDigits(2);
  this.partition=partition;
  Part[] partsArray=partition.getParts();
  Arrays.sort(partsArray);
  String[] columnNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DefaultTableModel model=new DefaultTableModel(columnNames,partsArray.length){
    @Override public boolean isCellEditable(    int row,    int column){
      return column == 0;
    }
  }
;
  table.setModel(model);
  TableColumn partCol=table.getColumnModel().getColumn(1);
  partCol.setCellRenderer(new TextRenderer());
  TableColumn percCol=table.getColumnModel().getColumn(2);
  percCol.setCellRenderer(new TextRenderer());
  percCol.setPreferredWidth(60);
  percCol.setMaxWidth(60);
  TableColumn colorCol=table.getColumnModel().getColumn(0);
  colorCol.setCellEditor(new ColorChooserEditor());
  colorCol.setCellRenderer(new ColorChooserRenderer());
  colorCol.setPreferredWidth(16);
  colorCol.setMaxWidth(16);
  for (int j=0; j < partsArray.length; j++) {
    final Part p=partsArray[partsArray.length - 1 - j];
    model.setValueAt(p.getValue(),j,0);
    model.setValueAt(p.getDisplayName(),j,1);
    String perc=""String_Node_Str"" + formatter.format(p.getPercentage()) + ""String_Node_Str"";
    model.setValueAt(perc,j,2);
  }
}","public void setup(Partition partition,Transformer transformer,boolean color){
  nodeColorTransformer=(NodeColorTransformer)transformer;
  if (color) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      nodeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  NumberFormat formatter=NumberFormat.getPercentInstance();
  formatter.setMaximumFractionDigits(2);
  this.partition=partition;
  Part[] partsArray=partition.getParts();
  Arrays.sort(partsArray);
  String[] columnNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DefaultTableModel model=new DefaultTableModel(columnNames,partsArray.length){
    @Override public boolean isCellEditable(    int row,    int column){
      return column == 0;
    }
  }
;
  table.setModel(model);
  TableColumn partCol=table.getColumnModel().getColumn(1);
  partCol.setCellRenderer(new TextRenderer());
  TableColumn percCol=table.getColumnModel().getColumn(2);
  percCol.setCellRenderer(new TextRenderer());
  percCol.setPreferredWidth(60);
  percCol.setMaxWidth(60);
  TableColumn colorCol=table.getColumnModel().getColumn(0);
  colorCol.setCellEditor(new ColorChooserEditor());
  colorCol.setCellRenderer(new ColorChooserRenderer());
  colorCol.setPreferredWidth(16);
  colorCol.setMaxWidth(16);
  for (int j=0; j < partsArray.length; j++) {
    final Part p=partsArray[partsArray.length - 1 - j];
    model.setValueAt(p.getValue(),j,0);
    model.setValueAt(p.getDisplayName(),j,1);
    String perc=""String_Node_Str"" + formatter.format(p.getPercentage()) + ""String_Node_Str"";
    model.setValueAt(perc,j,2);
  }
}",0.9860492727812408
142745,"public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer);
}","public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer,true);
}",0.976303317535545
142746,"private void setValue(int index,AttributeValueImpl value){
  updateColumns();
  this.values[index]=value;
  attributeTable.model.fireAttributeEvent(new ValueEvent(EventType.SET_VALUE,attributeTable,object,value));
}","private void setValue(int index,AttributeValueImpl value){
  updateColumns();
  AttributeValueImpl oldValue=this.values[index];
  this.values[index]=value;
  if (!((oldValue == null && value == null) || (oldValue != null && oldValue.equals(value.getValue())))) {
    attributeTable.model.fireAttributeEvent(new ValueEvent(EventType.SET_VALUE,attributeTable,object,value));
  }
}",0.7048903878583473
142747,"public Object getValue(){
  if (column.getOrigin() != AttributeOrigin.DELEGATE) {
    return value;
  }
 else {
    if (value == null)     return null;
    AttributeValueDelegateProvider attributeValueDelegateProvider=column.getProvider();
    Object result;
    if (AttributeUtilsImpl.getDefault().isEdgeColumn(column))     result=attributeValueDelegateProvider.getEdgeValue(column,value);
 else     if (AttributeUtilsImpl.getDefault().isNodeColumn(column))     result=attributeValueDelegateProvider.getNodeValue(column,value);
 else     throw new AssertionError();
    if (result.getClass().isArray())     result=ListFactory.fromArray(result);
    return result;
  }
}","public Object getValue(){
  if (column.getOrigin() != AttributeOrigin.DELEGATE) {
    return value;
  }
 else {
    if (value == null) {
      return null;
    }
    AttributeValueDelegateProvider attributeValueDelegateProvider=column.getProvider();
    Object result;
    if (AttributeUtilsImpl.getDefault().isEdgeColumn(column)) {
      result=attributeValueDelegateProvider.getEdgeValue(column,value);
    }
 else     if (AttributeUtilsImpl.getDefault().isNodeColumn(column)) {
      result=attributeValueDelegateProvider.getNodeValue(column,value);
    }
 else {
      throw new AssertionError();
    }
    if (result.getClass().isArray()) {
      result=ListFactory.fromArray(result);
    }
    return result;
  }
}",0.9107913669064748
142748,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  Progress.start(progress);
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=0;
  if (exportHierarchy) {
    for (    Node n : graph.getNodesTree()) {
      max++;
    }
    for (    Edge e : graph.getEdgesTree()) {
      max++;
    }
  }
 else {
    max=graph.getNodeCount();
    for (    Edge e : graph.getEdgesAndMetaEdges()) {
      max++;
    }
  }
  Progress.switchToDeterminate(progress,max);
  try {
    XMLOutputFactory outputFactory=XMLOutputFactory.newInstance();
    outputFactory.setProperty(""String_Node_Str"",Boolean.FALSE);
    XMLStreamWriter xmlWriter=outputFactory.createXMLStreamWriter(writer);
    xmlWriter=new IndentingXMLStreamWriter(xmlWriter);
    xmlWriter.writeStartDocument(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.setPrefix(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeStartElement(GEXF_NAMESPACE,GEXF);
    xmlWriter.writeNamespace(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeAttribute(GEXF_VERSION,""String_Node_Str"");
    if (exportColors || exportPosition || exportSize) {
      xmlWriter.writeNamespace(VIZ,VIZ_NAMESPACE);
    }
    xmlWriter.writeAttribute(""String_Node_Str"",GEXF_NAMESPACE_LOCATION);
    if (exportDynamic) {
      DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
      DynamicModel dynamicModel=dynamicController != null ? dynamicController.getModel(workspace) : null;
      visibleInterval=dynamicModel == null ? null : exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
    }
    writeMeta(xmlWriter);
    writeGraph(xmlWriter,graph);
    xmlWriter.writeEndElement();
    xmlWriter.writeEndDocument();
    xmlWriter.close();
  }
 catch (  Exception e) {
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new RuntimeException(e);
  }
  Progress.finish(progress);
  return !cancel;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  Progress.start(progress);
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=0;
  if (exportHierarchy) {
    for (    Node n : graph.getNodesTree()) {
      max++;
    }
    for (    Edge e : graph.getEdgesTree()) {
      max++;
    }
  }
 else {
    max=graph.getNodeCount();
    for (    Edge e : graph.getEdgesAndMetaEdges()) {
      max++;
    }
  }
  Progress.switchToDeterminate(progress,max);
  try {
    XMLOutputFactory outputFactory=XMLOutputFactory.newInstance();
    outputFactory.setProperty(""String_Node_Str"",Boolean.FALSE);
    XMLStreamWriter xmlWriter=outputFactory.createXMLStreamWriter(writer);
    xmlWriter=new IndentingXMLStreamWriter(xmlWriter);
    xmlWriter.writeStartDocument(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.setPrefix(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeStartElement(GEXF_NAMESPACE,GEXF);
    xmlWriter.writeNamespace(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeAttribute(GEXF_VERSION,""String_Node_Str"");
    if (exportColors || exportPosition || exportSize) {
      xmlWriter.writeNamespace(VIZ,VIZ_NAMESPACE);
    }
    xmlWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.writeAttribute(""String_Node_Str"",GEXF_NAMESPACE_LOCATION);
    if (exportDynamic) {
      DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
      DynamicModel dynamicModel=dynamicController != null ? dynamicController.getModel(workspace) : null;
      visibleInterval=dynamicModel == null ? null : exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
    }
    writeMeta(xmlWriter);
    writeGraph(xmlWriter,graph);
    xmlWriter.writeEndElement();
    xmlWriter.writeEndDocument();
    xmlWriter.close();
  }
 catch (  Exception e) {
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new RuntimeException(e);
  }
  Progress.finish(progress);
  return !cancel;
}",0.9854632241267086
142749,"public float getSize(float normalizedValue){
  if (interpolator != null) {
    normalizedValue=interpolator.interpolate(normalizedValue);
  }
  return normalizedValue * maxSize + minSize;
}","public float getSize(float normalizedValue){
  if (interpolator != null) {
    normalizedValue=interpolator.interpolate(normalizedValue);
  }
  return normalizedValue * (maxSize - minSize) + minSize;
}",0.9692307692307692
142750,"public FilterLibraryImpl(){
  content=new InstanceContent();
  lookup=new AbstractLookup(content);
  for (  FilterBuilder builder : Lookup.getDefault().lookupAll(FilterBuilder.class)) {
    content.add(builder);
  }
  for (  Query query : Lookup.getDefault().lookupAll(Query.class)) {
    content.add(query);
  }
  for (  CategoryBuilder catBuilder : Lookup.getDefault().lookupAll(CategoryBuilder.class)) {
    content.add(catBuilder);
  }
  content.add(new HierarchicalGraphMask());
  buildBuildersMap();
}","public FilterLibraryImpl(){
  content=new InstanceContent();
  lookup=new AbstractLookup(content);
  for (  FilterBuilder builder : Lookup.getDefault().lookupAll(FilterBuilder.class)) {
    content.add(builder);
  }
  for (  Query query : Lookup.getDefault().lookupAll(Query.class)) {
    content.add(query);
  }
  for (  CategoryBuilder catBuilder : Lookup.getDefault().lookupAll(CategoryBuilder.class)) {
    content.add(catBuilder);
  }
  content.add(new HierarchicalGraphMask());
}",0.9778225806451613
142751,"public FilterBuilder getBuilder(Filter filter){
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  buildBuildersMap();
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  return null;
}","public FilterBuilder getBuilder(Filter filter){
  if (buildersMap == null) {
    buildBuildersMap();
  }
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  buildBuildersMap();
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  return null;
}",0.9110764430577224
142752,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  this.metaEdge=edge instanceof MetaEdge;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.9783505154639176
142753,"/** 
 * Creates a preview graph from the given mixed graph.
 * @param sourceGraph   the mixed graph
 * @return              a generated preview graph
 */
public GraphImpl createPreviewGraph(PreviewModel model,HierarchicalMixedGraph sourceGraph){
  GraphImpl previewGraph=new GraphImpl(model);
  for (  org.gephi.graph.api.Node sourceNode : sourceGraph.getNodes()) {
    createPreviewNode(previewGraph,sourceNode);
  }
  for (  org.gephi.graph.api.Edge sourceEdge : sourceGraph.getEdgesAndMetaEdges()) {
    if (sourceEdge.getWeight() <= 0) {
      continue;
    }
    if (sourceEdge.isSelfLoop()) {
      createPreviewSelfLoop(previewGraph,sourceEdge);
      continue;
    }
    if (sourceEdge.isDirected()) {
      if (isBidirectional(sourceGraph,sourceEdge)) {
        createPreviewBidirectionalEdge(previewGraph,sourceEdge);
      }
 else {
        createPreviewUnidirectionalEdge(previewGraph,sourceEdge);
      }
    }
 else {
      createPreviewUndirectedEdge(previewGraph,sourceEdge);
    }
  }
  nodeMap.clear();
  return previewGraph;
}","/** 
 * Creates a preview graph from the given mixed graph.
 * @param sourceGraph   the mixed graph
 * @return              a generated preview graph
 */
public GraphImpl createPreviewGraph(PreviewModel model,HierarchicalMixedGraph sourceGraph){
  GraphImpl previewGraph=new GraphImpl(model);
  for (  org.gephi.graph.api.Node sourceNode : sourceGraph.getNodes()) {
    createPreviewNode(previewGraph,sourceNode);
  }
  calculateMinMaxWeight(sourceGraph,previewGraph);
  for (  org.gephi.graph.api.Edge sourceEdge : sourceGraph.getEdgesAndMetaEdges()) {
    if (sourceEdge.getWeight() <= 0) {
      continue;
    }
    if (sourceEdge.isSelfLoop()) {
      createPreviewSelfLoop(previewGraph,sourceEdge);
      continue;
    }
    if (sourceEdge.isDirected()) {
      if (isBidirectional(sourceGraph,sourceEdge)) {
        createPreviewBidirectionalEdge(previewGraph,sourceEdge);
      }
 else {
        createPreviewUnidirectionalEdge(previewGraph,sourceEdge);
      }
    }
 else {
      createPreviewUndirectedEdge(previewGraph,sourceEdge);
    }
  }
  nodeMap.clear();
  return previewGraph;
}",0.9761793554413826
142754,"@Override public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","@Override public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9768246281563472
142755,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9754098360655736
142756,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9767441860465116
142757,"/** 
 * Adds the given edge to the list of the supervised edges. It updates the edges with the supervisor's values.
 * @param edge  the edge to supervise
 */
public void addEdge(EdgeImpl edge){
  getSupervisedEdges().add(edge);
  colorEdge(edge);
  colorEdgeLabel(edge);
  updateEdgeLabelValue(edge);
  adjustEdgeLabelFont(edge);
}","/** 
 * Adds the given edge to the list of the supervised edges. It updates the edges with the supervisor's values.
 * @param edge  the edge to supervise
 */
public void addEdge(EdgeImpl edge){
  getSupervisedEdges().add(edge);
  colorEdge(edge);
  colorEdgeLabel(edge);
  updateEdgeLabelValue(edge);
  adjustEdgeLabelFont(edge);
  if (rescaleWeight) {
    float min=edge.getMetaEdge() ? edge.getGraph().getMinMetaWeight() : edge.getGraph().getMinWeight();
    float max=edge.getMetaEdge() ? edge.getGraph().getMaxMetaWeight() : edge.getGraph().getMaxWeight();
    float ratio=(GraphImpl.WEIGHT_MAXIMUM - GraphImpl.WEIGHT_MINIMUM) / (max - min);
    float weight=(edge.getThickness() - min) * ratio + GraphImpl.WEIGHT_MINIMUM;
    edge.setThickness(weight);
  }
}",0.6051188299817185
142758,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.8908594815825375
142759,"public void defaultValues(){
  show=true;
  colorizer=new CustomColorMode(0,0,0);
  edgeScale=new Float(1f);
}","public void defaultValues(){
  show=true;
  colorizer=new CustomColorMode(0,0,0);
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.88
142760,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9537931034482758
142761,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9493243243243245
142762,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeB1ColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeB1ColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9752883031301482
142763,"@Override public boolean isInOctreeLeaf(Octant leaf){
  return ((ModelImpl)obj.getModel()).getOctants()[0] == leaf;
}","@Override public boolean isInOctreeLeaf(Octant leaf){
  if (obj.getModel() == null) {
    return false;
  }
  return ((ModelImpl)obj.getModel()).getOctants()[0] == leaf;
}",0.8125
142764,"public void initArchitecture(){
  model=VizController.getInstance().getVizModel().getTextModel();
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  initRenderer();
  for (  SizeMode s : sizeModes) {
    s.init();
  }
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!nodeRenderer.getFont().equals(model.getNodeFont())) {
        nodeRenderer.setFont(model.getNodeFont());
      }
      if (!edgeRenderer.getFont().equals(model.getEdgeFont())) {
        edgeRenderer.setFont(model.getEdgeFont());
      }
      nodeRefresh=true;
      edgeRefresh=true;
    }
  }
);
  VizController.getInstance().getVizModel().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
        if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
          AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
          if (attributeController != null && attributeController.getModel() != null) {
            AttributeModel attributeModel=attributeController.getModel();
            AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
            AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
            model.setTextColumns(nodeCols,edgeCols);
          }
        }
        DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
        currentTimeInterval=dynamicController.getModel().getVisibleInterval();
      }
    }
  }
);
  antialised=vizConfig.isLabelAntialiased();
  mipmap=vizConfig.isLabelMipMap();
  fractionalMetrics=vizConfig.isLabelFractionalMetrics();
  renderer3d=false;
  DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  dynamicController.addModelListener(new DynamicModelListener(){
    public void dynamicModelChanged(    DynamicModelEvent event){
      currentTimeInterval=(TimeInterval)event.getData();
    }
  }
);
}","public void initArchitecture(){
  model=VizController.getInstance().getVizModel().getTextModel();
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  initRenderer();
  for (  SizeMode s : sizeModes) {
    s.init();
  }
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!nodeRenderer.getFont().equals(model.getNodeFont())) {
        nodeRenderer.setFont(model.getNodeFont());
      }
      if (!edgeRenderer.getFont().equals(model.getEdgeFont())) {
        edgeRenderer.setFont(model.getEdgeFont());
      }
      nodeRefresh=true;
      edgeRefresh=true;
    }
  }
);
  VizController.getInstance().getVizModel().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
        if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
          AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
          if (attributeController != null && attributeController.getModel() != null) {
            AttributeModel attributeModel=attributeController.getModel();
            AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
            AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
            model.setTextColumns(nodeCols,edgeCols);
          }
        }
        DynamicModel dynamicModel=dynamicController.getModel();
        if (dynamicModel != null) {
          currentTimeInterval=dynamicModel.getVisibleInterval();
        }
 else {
          currentTimeInterval=null;
        }
      }
    }
  }
);
  antialised=vizConfig.isLabelAntialiased();
  mipmap=vizConfig.isLabelMipMap();
  fractionalMetrics=vizConfig.isLabelFractionalMetrics();
  renderer3d=false;
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  dynamicController.addModelListener(new DynamicModelListener(){
    public void dynamicModelChanged(    DynamicModelEvent event){
      currentTimeInterval=(TimeInterval)event.getData();
    }
  }
);
}",0.812933025404157
142765,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(""String_Node_Str"")) {
    TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
      AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
      if (attributeController != null && attributeController.getModel() != null) {
        AttributeModel attributeModel=attributeController.getModel();
        AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
        AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
        model.setTextColumns(nodeCols,edgeCols);
      }
    }
    DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
    currentTimeInterval=dynamicController.getModel().getVisibleInterval();
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(""String_Node_Str"")) {
    TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
      AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
      if (attributeController != null && attributeController.getModel() != null) {
        AttributeModel attributeModel=attributeController.getModel();
        AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
        AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
        model.setTextColumns(nodeCols,edgeCols);
      }
    }
    DynamicModel dynamicModel=dynamicController.getModel();
    if (dynamicModel != null) {
      currentTimeInterval=dynamicModel.getVisibleInterval();
    }
 else {
      currentTimeInterval=null;
    }
  }
}",0.8779803646563815
142766,"private void finishImport(Container container){
  if (container.verify()) {
    Report report=container.getReport();
    ReportPanel reportPanel=new ReportPanel();
    reportPanel.setData(report,container);
    DialogDescriptor dd=new DialogDescriptor(reportPanel,NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str""));
    if (!DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
      reportPanel.destroy();
      return;
    }
    reportPanel.destroy();
    final Processor processor=reportPanel.getProcessor();
    Workspace workspace=null;
    ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
    ProjectControllerUI pcui=Lookup.getDefault().lookup(ProjectControllerUI.class);
    if (pc.getCurrentProject() == null) {
      pcui.newProject();
      workspace=pc.getCurrentWorkspace();
    }
    final ProcessorUI pui=getProcessorUI(processor);
    if (pui != null) {
      if (pui != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
              JPanel panel=pui.getPanel();
              pui.setup(processor);
              final DialogDescriptor dd2=new DialogDescriptor(panel,title);
              if (panel instanceof ValidationPanel) {
                ValidationPanel vp=(ValidationPanel)panel;
                vp.addChangeListener(new ChangeListener(){
                  public void stateChanged(                  ChangeEvent e){
                    dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
                  }
                }
);
                dd2.setValid(!vp.isProblem());
              }
              Object result=DialogDisplayer.getDefault().notify(dd2);
              if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
                pui.unsetup();
                return;
              }
              pui.unsetup();
            }
          }
);
        }
 catch (        InterruptedException ex) {
          Exceptions.printStackTrace(ex);
        }
catch (        InvocationTargetException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
    controller.process(container,processor,workspace);
    String source=container.getSource();
    if (source.isEmpty()) {
      source=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
    }
    StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"",source));
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}","private void finishImport(Container container){
  if (container.verify()) {
    Report report=container.getReport();
    ReportPanel reportPanel=new ReportPanel();
    reportPanel.setData(report,container);
    DialogDescriptor dd=new DialogDescriptor(reportPanel,NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str""));
    if (!DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
      reportPanel.destroy();
      return;
    }
    reportPanel.destroy();
    final Processor processor=reportPanel.getProcessor();
    Workspace workspace=null;
    ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
    ProjectControllerUI pcui=Lookup.getDefault().lookup(ProjectControllerUI.class);
    if (pc.getCurrentProject() == null) {
      pcui.newProject();
      workspace=pc.getCurrentWorkspace();
    }
    final ProcessorUI pui=getProcessorUI(processor);
    final ValidResult validResult=new ValidResult();
    if (pui != null) {
      if (pui != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
              JPanel panel=pui.getPanel();
              pui.setup(processor);
              final DialogDescriptor dd2=new DialogDescriptor(panel,title);
              if (panel instanceof ValidationPanel) {
                ValidationPanel vp=(ValidationPanel)panel;
                vp.addChangeListener(new ChangeListener(){
                  public void stateChanged(                  ChangeEvent e){
                    dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
                  }
                }
);
                dd2.setValid(!vp.isProblem());
              }
              Object result=DialogDisplayer.getDefault().notify(dd2);
              if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
                validResult.setResult(false);
              }
 else {
                pui.unsetup();
                validResult.setResult(true);
              }
            }
          }
);
        }
 catch (        InterruptedException ex) {
          Exceptions.printStackTrace(ex);
        }
catch (        InvocationTargetException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
    if (validResult.isResult()) {
      controller.process(container,processor,workspace);
      String source=container.getSource();
      if (source.isEmpty()) {
        source=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
      }
      StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"",source));
    }
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}",0.9467989179440938
142767,"public void run(){
  String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
  JPanel panel=pui.getPanel();
  pui.setup(processor);
  final DialogDescriptor dd2=new DialogDescriptor(panel,title);
  if (panel instanceof ValidationPanel) {
    ValidationPanel vp=(ValidationPanel)panel;
    vp.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
      }
    }
);
    dd2.setValid(!vp.isProblem());
  }
  Object result=DialogDisplayer.getDefault().notify(dd2);
  if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
    pui.unsetup();
    return;
  }
  pui.unsetup();
}","public void run(){
  String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
  JPanel panel=pui.getPanel();
  pui.setup(processor);
  final DialogDescriptor dd2=new DialogDescriptor(panel,title);
  if (panel instanceof ValidationPanel) {
    ValidationPanel vp=(ValidationPanel)panel;
    vp.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
      }
    }
);
    dd2.setValid(!vp.isProblem());
  }
  Object result=DialogDisplayer.getDefault().notify(dd2);
  if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
    validResult.setResult(false);
  }
 else {
    pui.unsetup();
    validResult.setResult(true);
  }
}",0.9152759948652118
142768,"@Override public BigDecimal getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<BigDecimal> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(values.get(i));
return total.divide(new BigDecimal(values.size()));
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=values.get(values.size() / 2 - 1);
bd=bd.add(values.get(values.size() / 2));
return bd.divide(new BigDecimal(2));
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(values.get(i));
return sum;
case MIN:
BigDecimal minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
BigDecimal maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public BigDecimal getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<BigDecimal>(low,high,false,false),estimator);
}",0.1967049425861208
142769,"@Override public BigInteger getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<BigInteger> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(values.get(i));
return total.divide(BigInteger.valueOf(values.size()));
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=values.get(values.size() / 2 - 1);
bi=bi.add(values.get(values.size() / 2));
return bi.divide(BigInteger.valueOf(2));
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(values.get(i));
return sum;
case MIN:
BigInteger minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
BigInteger maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public BigInteger getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<BigInteger>(low,high,false,false),estimator);
}",0.1951461119366022
142770,"@Override public Boolean getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Boolean> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
Boolean minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
Boolean maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Boolean getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Boolean>(low,high,false,false),estimator);
}",0.2184105202973127
142771,"@Override public Byte getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Byte> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).byteValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).byteValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.byteValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.byteValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.byteValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Byte getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Byte>(low,high,false,false),estimator);
}",0.164079822616408
142772,"@Override public Character getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Character> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
Character minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
Character maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Character getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Character>(low,high,false,false),estimator);
}",0.221465076660988
142773,"@Override public Double getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Double> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(new BigDecimal(values.get(i)));
return total.divide(new BigDecimal(values.size())).doubleValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=new BigDecimal(values.get(values.size() / 2 - 1));
bd=bd.add(new BigDecimal(values.get(values.size() / 2)));
return bd.divide(new BigDecimal(2)).doubleValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(new BigDecimal(values.get(i)));
return sum.doubleValue();
case MIN:
BigDecimal minimum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(new BigDecimal(values.get(i))) > 0) minimum=new BigDecimal(values.get(i));
return minimum.doubleValue();
case MAX:
BigDecimal maximum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(new BigDecimal(values.get(i))) < 0) maximum=new BigDecimal(values.get(i));
return maximum.doubleValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Double getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Double>(low,high,false,false),estimator);
}",0.1705006765899864
142774,"@Override public Float getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Float> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(new BigDecimal(values.get(i)));
return total.divide(new BigDecimal(values.size())).floatValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=new BigDecimal(values.get(values.size() / 2 - 1));
bd=bd.add(new BigDecimal(values.get(values.size() / 2)));
return bd.divide(new BigDecimal(2)).floatValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(new BigDecimal(values.get(i)));
return sum.floatValue();
case MIN:
BigDecimal minimum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(new BigDecimal(values.get(i))) > 0) minimum=new BigDecimal(values.get(i));
return minimum.floatValue();
case MAX:
BigDecimal maximum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(new BigDecimal(values.get(i))) < 0) maximum=new BigDecimal(values.get(i));
return maximum.floatValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Float getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Float>(low,high,false,false),estimator);
}",0.1693840579710145
142775,"@Override public Integer getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Integer> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).intValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).intValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.intValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.intValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.intValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Integer getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Integer>(low,high,false,false),estimator);
}",0.1688770999115826
142776,"@Override public Long getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Long> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).longValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).longValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.longValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.longValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.longValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Long getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Long>(low,high,false,false),estimator);
}",0.164079822616408
142777,"@Override public Short getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Short> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).shortValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).shortValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.shortValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.shortValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.shortValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Short getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Short>(low,high,false,false),estimator);
}",0.1651943462897526
142778,"@Override public String getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<String> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
String minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
String maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public String getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<String>(low,high,false,false),estimator);
}",0.216867469879518
142779,"private boolean isSelected(){
  return FiltersTopComponent.findInstance().getUiModel().getSelectedRoot() == query;
}","private boolean isSelected(){
  FilterController fc=Lookup.getDefault().lookup(FilterController.class);
  return fc.getModel().getCurrentQuery() == query;
}",0.5294117647058824
142780,"@Override public void restored(){
  initGephi();
  UIManager.put(""String_Node_Str"",""String_Node_Str"");
  Logger.getLogger(""String_Node_Str"").addHandler(new ReporterHandler());
}","@Override public void restored(){
  initGephi();
  UIManager.put(""String_Node_Str"",""String_Node_Str"");
  UIManager.put(""String_Node_Str"",Boolean.FALSE);
  Logger.getLogger(""String_Node_Str"").addHandler(new ReporterHandler());
}",0.8316831683168316
142781,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9674698795180724
142782,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9813322019516334
142783,"@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  FilterLibrary library=filterController.getModel().getLibrary();
  library.saveQuery(queryNode.qetQuery());
  return null;
}","@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  FilterLibrary library=filterController.getModel().getLibrary();
  library.saveQuery(queryNode.getQuery());
  return null;
}",0.9968253968253968
142784,"@Override public PasteType getDropType(final Transferable t,int action,int index){
  if (category == null || !category.equals(FiltersExplorer.QUERIES)) {
    return null;
  }
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        FilterLibrary library=filterController.getModel().getLibrary();
        library.saveQuery(queryNode.qetQuery());
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(final Transferable t,int action,int index){
  if (category == null || !category.equals(FiltersExplorer.QUERIES)) {
    return null;
  }
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        FilterLibrary library=filterController.getModel().getLibrary();
        library.saveQuery(queryNode.getQuery());
        return null;
      }
    }
;
  }
  return null;
}",0.9986206896551724
142785,"private void saveExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    boolean parameterExpanded=false;
    if (firstChild != null && firstChild instanceof ParameterNode) {
      parameterExpanded=isExpanded(firstChild);
    }
    uiModel.setExpand(queryNode.qetQuery(),isExpanded(queryNode),parameterExpanded);
    for (    Node n : queryNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
}","private void saveExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    boolean parameterExpanded=false;
    if (firstChild != null && firstChild instanceof ParameterNode) {
      parameterExpanded=isExpanded(firstChild);
    }
    uiModel.setExpand(queryNode.getQuery(),isExpanded(queryNode),parameterExpanded);
    for (    Node n : queryNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
}",0.9985569985569984
142786,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
    if (uiModel == null) {
      return;
    }
    Node[] nodeArray=(Node[])evt.getNewValue();
    if (nodeArray.length > 0) {
      Node node=((Node[])evt.getNewValue())[0];
      if (node instanceof RootNode) {
        uiModel.setSelectedQuery(null);
        return;
      }
      while (!(node instanceof QueryNode)) {
        node=node.getParentNode();
        if (node.getParentNode() == null) {
          uiModel.setSelectedQuery(null);
          return;
        }
      }
      QueryNode queryNode=(QueryNode)node;
      final Query query=queryNode.qetQuery();
      new Thread(new Runnable(){
        public void run(){
          uiModel.setSelectedQuery(query);
        }
      }
).start();
    }
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
    if (uiModel == null) {
      return;
    }
    Node[] nodeArray=(Node[])evt.getNewValue();
    if (nodeArray.length > 0) {
      Node node=((Node[])evt.getNewValue())[0];
      if (node instanceof RootNode) {
        uiModel.setSelectedQuery(null);
        return;
      }
      while (!(node instanceof QueryNode)) {
        node=node.getParentNode();
        if (node.getParentNode() == null) {
          uiModel.setSelectedQuery(null);
          return;
        }
      }
      QueryNode queryNode=(QueryNode)node;
      final Query query=queryNode.getQuery();
      new Thread(new Runnable(){
        public void run(){
          uiModel.setSelectedQuery(query);
        }
      }
).start();
    }
  }
}",0.99880810488677
142787,"private void loadExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    if (uiModel.isExpanded(queryNode.qetQuery())) {
      expandNode(queryNode);
    }
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    if (firstChild != null && firstChild instanceof ParameterNode) {
      if (uiModel.isParametersExpanded(queryNode.qetQuery())) {
        expandNode(firstChild);
      }
    }
    for (    Node n : queryNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
}","private void loadExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    if (uiModel.isExpanded(queryNode.getQuery())) {
      expandNode(queryNode);
    }
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    if (firstChild != null && firstChild instanceof ParameterNode) {
      if (uiModel.isParametersExpanded(queryNode.getQuery())) {
        expandNode(firstChild);
      }
    }
    for (    Node n : queryNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
}",0.9971988795518208
142788,"@Override public Transferable paste() throws IOException {
  SavedQueryNode node=(SavedQueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  filterController.add(node.getQuery());
  return null;
}","@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  filterController.removeSubQuery(queryNode.getQuery(),queryNode.getQuery().getParent());
  filterController.add(queryNode.getQuery());
  return null;
}",0.7609427609427609
142789,"@Override public PasteType getDropType(Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    try {
      final FilterBuilder fb=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
      return new PasteType(){
        @Override public Transferable paste() throws IOException {
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query f=filterController.createQuery(fb.getFilter());
          filterController.add(f);
          return null;
        }
      }
;
    }
 catch (    UnsupportedFlavorException ex) {
      ex.printStackTrace();
    }
catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
 else   if (dropNode != null && dropNode instanceof SavedQueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        SavedQueryNode node=(SavedQueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.add(node.getQuery());
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    try {
      final FilterBuilder fb=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
      return new PasteType(){
        @Override public Transferable paste() throws IOException {
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query f=filterController.createQuery(fb.getFilter());
          filterController.add(f);
          return null;
        }
      }
;
    }
 catch (    UnsupportedFlavorException ex) {
      ex.printStackTrace();
    }
catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
 else   if (dropNode != null && dropNode instanceof SavedQueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        SavedQueryNode node=(SavedQueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.add(node.getQuery());
        return null;
      }
    }
;
  }
 else   if (dropNode != null && dropNode instanceof QueryNode && ((QueryNode)dropNode).getQuery().getParent() != null) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.removeSubQuery(queryNode.getQuery(),queryNode.getQuery().getParent());
        filterController.add(queryNode.getQuery());
        return null;
      }
    }
;
  }
  return null;
}",0.8082832331329325
142790,"@Override public PasteType getDropType(final Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.setSubQuery(parent,queryNode.qetQuery());
        return null;
      }
    }
;
  }
 else   if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        try {
          FilterBuilder builder=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query query=filterController.createQuery(builder.getFilter());
          filterController.setSubQuery(parent,query);
        }
 catch (        UnsupportedFlavorException ex) {
          Exceptions.printStackTrace(ex);
        }
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(final Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.setSubQuery(parent,queryNode.getQuery());
        return null;
      }
    }
;
  }
 else   if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        try {
          FilterBuilder builder=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query query=filterController.createQuery(builder.getFilter());
          filterController.setSubQuery(parent,query);
        }
 catch (        UnsupportedFlavorException ex) {
          Exceptions.printStackTrace(ex);
        }
        return null;
      }
    }
;
  }
  return null;
}",0.999185667752443
142791,"@Override public boolean accept(File file){
  if (file.isDirectory() || extensions.size() == 0) {
    return true;
  }
  String nomFichier=file.getName().toLowerCase();
  for (  String extension : extensions) {
    if (nomFichier.endsWith(extension)) {
      return true;
    }
  }
  return false;
}","@Override public boolean accept(File file){
  if (file.isDirectory() || extensions.size() == 0) {
    return true;
  }
  String fileName=file.getName().toLowerCase();
  for (  String extension : extensions) {
    if (fileName.endsWith(extension)) {
      return true;
    }
  }
  return false;
}",0.4377104377104377
142792,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public BidirectionalEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB2Out(this));
  arrows.add(new EdgeArrowB1In(this));
  getDirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public BidirectionalEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB2Out(this));
  arrows.add(new EdgeArrowB1In(this));
  getDirectedEdgeSupervisor().addEdge(this);
}",0.8823016564952049
142793,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}",0.9008082292432036
142794,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.7926757235676314
142795,"/** 
 * Creates a preview unidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview unidirectional edge
 */
private UnidirectionalEdgeImpl createPreviewUnidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UnidirectionalEdgeImpl previewEdge=new UnidirectionalEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUnidirectionalEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview unidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview unidirectional edge
 */
private UnidirectionalEdgeImpl createPreviewUnidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UnidirectionalEdgeImpl previewEdge=new UnidirectionalEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUnidirectionalEdge(previewEdge);
  return previewEdge;
}",0.9945105215004576
142796,"/** 
 * Creates a preview bidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview bidirectional edge
 */
private BidirectionalEdgeImpl createPreviewBidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  BidirectionalEdgeImpl previewEdge=new BidirectionalEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addBidirectionalEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview bidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview bidirectional edge
 */
private BidirectionalEdgeImpl createPreviewBidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  BidirectionalEdgeImpl previewEdge=new BidirectionalEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addBidirectionalEdge(previewEdge);
  return previewEdge;
}",0.994475138121547
142797,"/** 
 * Creates a preview self-loop from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview self-loop
 */
private SelfLoopImpl createPreviewSelfLoop(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  SelfLoopImpl previewSelfLoop=new SelfLoopImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()));
  previewGraph.addSelfLoop(previewSelfLoop);
  return previewSelfLoop;
}","/** 
 * Creates a preview self-loop from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview self-loop
 */
private SelfLoopImpl createPreviewSelfLoop(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  SelfLoopImpl previewSelfLoop=new SelfLoopImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()));
  previewGraph.addSelfLoop(previewSelfLoop);
  return previewSelfLoop;
}",0.9897435897435898
142798,"/** 
 * Creates a preview undirected edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview undirected edge
 */
private UndirectedEdgeImpl createPreviewUndirectedEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UndirectedEdgeImpl previewEdge=new UndirectedEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUndirectedEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview undirected edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview undirected edge
 */
private UndirectedEdgeImpl createPreviewUndirectedEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UndirectedEdgeImpl previewEdge=new UndirectedEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUndirectedEdge(previewEdge);
  return previewEdge;
}",0.9943661971830986
142799,"/** 
 * Constructor.
 * @param parent     the parent graph of the self-loop
 * @param thickness  the self-loop's thickness
 * @param node       the self-loop's related node
 */
public SelfLoopImpl(GraphImpl parent,float thickness,NodeImpl node){
  super(parent,thickness);
  this.node=node;
  genCurve();
  getSelfLoopSupervisor().addSelfLoop(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the self-loop
 * @param thickness  the self-loop's thickness
 * @param node       the self-loop's related node
 */
public SelfLoopImpl(GraphImpl parent,Edge edge,NodeImpl node){
  super(parent,edge.getWeight());
  this.node=node;
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurve();
  getSelfLoopSupervisor().addSelfLoop(this);
}",0.721058434399118
142800,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UndirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  getUndirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UndirectedEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  getUndirectedEdgeSupervisor().addEdge(this);
}",0.9625126646403244
142801,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UnidirectionalEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  getDirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UnidirectionalEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  getDirectedEdgeSupervisor().addEdge(this);
}",0.9626639757820384
142802,"@Override public void setAsText(String s){
  if (supportsCustomColorMode() && colorizerFactory.matchCustomColorMode(s)) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(s);
    if (m.lookingAt()) {
      int r=Integer.valueOf(m.group(1));
      int g=Integer.valueOf(m.group(2));
      int b=Integer.valueOf(m.group(3));
      setValue(colorizerFactory.createCustomColorMode(r,g,b));
    }
  }
 else   if (supportsNodeOriginalColorMode() && colorizerFactory.matchNodeOriginalColorMode(s)) {
    setValue(colorizerFactory.createNodeOriginalColorMode());
  }
 else   if (supportsParentColorMode() && colorizerFactory.matchParentColorMode(s)) {
    setValue(colorizerFactory.createParentColorMode());
  }
 else   if (supportsEdgeB1ColorMode() && colorizerFactory.matchEdgeB1ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB1ColorMode());
  }
 else   if (supportsEdgeB2ColorMode() && colorizerFactory.matchEdgeB2ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB2ColorMode());
  }
 else   if (supportsEdgeBothBColorMode() && colorizerFactory.matchEdgeBothBColorMode(s)) {
    setValue(colorizerFactory.createEdgeBothBColorMode());
  }
}","@Override public void setAsText(String s){
  if (supportsCustomColorMode() && colorizerFactory.matchCustomColorMode(s)) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(s);
    if (m.lookingAt()) {
      int r=Integer.valueOf(m.group(1));
      int g=Integer.valueOf(m.group(2));
      int b=Integer.valueOf(m.group(3));
      setValue(colorizerFactory.createCustomColorMode(r,g,b));
    }
  }
 else   if (supportsNodeOriginalColorMode() && colorizerFactory.matchNodeOriginalColorMode(s)) {
    setValue(colorizerFactory.createNodeOriginalColorMode());
  }
 else   if (supportsParentColorMode() && colorizerFactory.matchParentColorMode(s)) {
    setValue(colorizerFactory.createParentColorMode());
  }
 else   if (supportsEdgeB1ColorMode() && colorizerFactory.matchEdgeB1ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB1ColorMode());
  }
 else   if (supportsEdgeB2ColorMode() && colorizerFactory.matchEdgeB2ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB2ColorMode());
  }
 else   if (supportsEdgeBothBColorMode() && colorizerFactory.matchEdgeBothBColorMode(s)) {
    setValue(colorizerFactory.createEdgeBothBColorMode());
  }
 else   if (supportEdgeOriginalColorMode() && colorizerFactory.matchEdgeOriginalColorMode(s)) {
    setValue(colorizerFactory.createEdgeOriginalColorMode());
  }
}",0.9354581673306772
142803,"@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  p=new ParentColorModePanelDecorator(this,p);
  return p;
}","@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeOriginalColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  p=new ParentColorModePanelDecorator(this,p);
  return p;
}",0.9224011713030746
142804,"@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  return p;
}","@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeOriginalColorModePanelDecorator(this,p);
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  return p;
}",0.9100169779286928
142805,"/** 
 * Creates a preview node from the given source node.
 * @param previewGraph  the parent preview graph
 * @param sourceNode    the source node
 * @return              the generated preview node
 */
private NodeImpl createPreviewNode(GraphImpl previewGraph,org.gephi.graph.api.Node sourceNode){
  org.gephi.graph.api.NodeData sourceNodeData=sourceNode.getNodeData();
  org.gephi.graph.api.TextData sourceNodeTextData=sourceNodeData.getTextData();
  String label=sourceNodeData.getLabel();
  if (sourceNodeTextData != null && sourceNodeTextData.getText() != null && sourceNodeTextData.getText().isEmpty()) {
    label=sourceNodeTextData.getText();
  }
  float labelSize=1f;
  if (sourceNodeTextData != null) {
    labelSize=sourceNodeTextData.getSize();
  }
  if (previewGraph.getModel().getNodeSupervisor().getProportionalLabelSize()) {
    labelSize*=sourceNodeData.getRadius() / 10f;
  }
  NodeImpl previewNode=new NodeImpl(previewGraph,sourceNodeData.x(),-sourceNodeData.y(),sourceNodeData.getRadius(),label,labelSize,sourceNodeData.r(),sourceNodeData.g(),sourceNodeData.b());
  previewGraph.addNode(previewNode);
  nodeMap.put(sourceNode.getId(),previewNode);
  return previewNode;
}","/** 
 * Creates a preview node from the given source node.
 * @param previewGraph  the parent preview graph
 * @param sourceNode    the source node
 * @return              the generated preview node
 */
private NodeImpl createPreviewNode(GraphImpl previewGraph,org.gephi.graph.api.Node sourceNode){
  org.gephi.graph.api.NodeData sourceNodeData=sourceNode.getNodeData();
  org.gephi.graph.api.TextData sourceNodeTextData=sourceNodeData.getTextData();
  String label=sourceNodeData.getLabel();
  if (sourceNodeTextData != null && sourceNodeTextData.getText() != null && !sourceNodeTextData.getText().isEmpty()) {
    label=sourceNodeTextData.getText();
  }
  float labelSize=1f;
  if (sourceNodeTextData != null) {
    labelSize=sourceNodeTextData.getSize();
  }
  if (previewGraph.getModel().getNodeSupervisor().getProportionalLabelSize()) {
    labelSize*=sourceNodeData.getRadius() / 10f;
  }
  NodeImpl previewNode=new NodeImpl(previewGraph,sourceNodeData.x(),-sourceNodeData.y(),sourceNodeData.getRadius(),label,labelSize,sourceNodeData.r(),sourceNodeData.g(),sourceNodeData.b());
  previewGraph.addNode(previewNode);
  nodeMap.put(sourceNode.getId(),previewNode);
  return previewNode;
}",0.9995803608896348
142806,"public void renderGraphLabelBorders(Graph graph){
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}","public void renderGraphLabelBorders(Graph graph){
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()&& n.getLabel().getFont() != null) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}",0.9281045751633988
142807,"public void renderGraphLabels(Graph graph){
  textFont(uniEdgeMiniLabelFont);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  textFont(biEdgeMiniLabelFont);
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  textFont(uniEdgeMiniLabelFont);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  textFont(biEdgeMiniLabelFont);
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9321266968325792
142808,"public void renderGraphLabels(Graph graph){
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9272237196765498
142809,"public void renderGraphLabelBorders(Graph graph){
  labelBorderGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.insertBefore(labelBorderGroupElem,labelGroupElem);
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}","public void renderGraphLabelBorders(Graph graph){
  labelBorderGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.insertBefore(labelBorderGroupElem,labelGroupElem);
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()&& n.getLabel().getFont() != null) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}",0.9527896995708156
142810,"public void renderGraphLabels(Graph graph){
  labelGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.appendChild(labelGroupElem);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  labelGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.appendChild(labelGroupElem);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9337910740559098
142811,"public Boolean showLabel(){
  if (!hasLabel()) {
    return false;
  }
  EdgeSupervisor supervisor=getEdgeSupervisor();
  int labelCharCount=supervisor.getShortenLabelsFlag() ? supervisor.getLabelMaxChar() : 10;
  float minlength=node1.getRadius() + node2.getRadius() + 0.65f * labelCharCount * label.getFont().getSize();
  return supervisor.getShowLabelsFlag() && length >= minlength;
}","public Boolean showLabel(){
  if (!hasLabel() || getLabel().getFont() == null) {
    return false;
  }
  EdgeSupervisor supervisor=getEdgeSupervisor();
  int labelCharCount=supervisor.getShortenLabelsFlag() ? supervisor.getLabelMaxChar() : 10;
  float minlength=node1.getRadius() + node2.getRadius() + 0.65f * labelCharCount * label.getFont().getSize();
  return supervisor.getShowLabelsFlag() && length >= minlength;
}",0.9602977667493796
142812,"/** 
 * Adjusts the font of the given label client.
 * @param client   the label to adjust the font
 */
public static void adjustFont(LabelFontAdjusterClient client){
  Font baseFont=client.getBaseFont();
  int newSize=(int)(baseFont.getSize() * client.getSizeFactor());
  Font font=new Font(baseFont.getName(),baseFont.getStyle(),newSize);
  client.setFont(font);
}","/** 
 * Adjusts the font of the given label client.
 * @param client   the label to adjust the font
 */
public static void adjustFont(LabelFontAdjusterClient client){
  Font baseFont=client.getBaseFont();
  int newSize=Math.round(baseFont.getSize() * client.getSizeFactor());
  if (newSize > 0) {
    Font font=new Font(baseFont.getName(),baseFont.getStyle(),newSize);
    client.setFont(font);
  }
}",0.9425587467362924
142813,"public void removeChangeListener(ChangeListener listener){
  listeners.remove(listener);
}","public void removeChangeListener(ChangeListener listener){
  if (listeners != null) {
    listeners.remove(listener);
  }
}",0.8450704225352113
142814,"public Component getStatusLineElement(){
  panel=new WorkspaceUISelectorPanel();
  return panel;
}","public Component getStatusLineElement(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(this);
  panel=new WorkspaceUISelectorPanel();
  return panel;
}",0.6426229508196721
142815,"public void setEnable(boolean enable){
  System.out.println(""String_Node_Str"" + enable);
  if (enable) {
    graphModel.addGraphListener(this);
  }
 else {
    graphModel.removeGraphListener(this);
    refresh.set(false);
  }
  if (!isAlive()) {
    start();
  }
}","public void setEnable(boolean enable){
  if (enable) {
    graphModel.addGraphListener(this);
  }
 else {
    graphModel.removeGraphListener(this);
    refresh.set(false);
  }
  if (!isAlive()) {
    start();
  }
}",0.1924686192468619
142816,"@Override public void run(){
  while (running) {
    try {
      if (refresh.compareAndSet(true,false)) {
        if (filterModel.getFilterThread() != null && filterModel.getCurrentQuery() != null) {
          filterModel.getFilterThread().setRootQuery((AbstractQueryImpl)filterModel.getCurrentQuery());
          System.out.println(""String_Node_Str"");
        }
      }
      Thread.sleep(TIMER);
    }
 catch (    InterruptedException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
}","@Override public void run(){
  while (running) {
    try {
      if (refresh.compareAndSet(true,false)) {
        manualRefresh();
      }
      Thread.sleep(TIMER);
    }
 catch (    InterruptedException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
}",0.6569148936170213
142817,"public void removeSubQuery(Query query,Query parent){
  AbstractQueryImpl impl=(AbstractQueryImpl)parent;
  impl.removeSubQuery(query);
  ((AbstractQueryImpl)query).setParent(null);
  fireChangeEvent();
}","public void removeSubQuery(Query query,Query parent){
  AbstractQueryImpl impl=(AbstractQueryImpl)parent;
  impl.removeSubQuery(query);
  ((AbstractQueryImpl)query).setParent(null);
  fireChangeEvent();
  autoRefreshor.manualRefresh();
}",0.9251700680272108
142818,"public void setSubQuery(Query query,Query subQuery){
  if (queries.contains(subQuery)) {
    queries.remove(subQuery);
  }
  if (subQuery.getParent() != null) {
    ((AbstractQueryImpl)subQuery.getParent()).removeSubQuery(subQuery);
  }
  AbstractQueryImpl impl=(AbstractQueryImpl)query;
  impl.addSubQuery(subQuery);
  fireChangeEvent();
}","public void setSubQuery(Query query,Query subQuery){
  if (queries.contains(subQuery)) {
    queries.remove(subQuery);
  }
  if (subQuery.getParent() != null) {
    ((AbstractQueryImpl)subQuery.getParent()).removeSubQuery(subQuery);
  }
  AbstractQueryImpl impl=(AbstractQueryImpl)query;
  impl.addSubQuery(subQuery);
  fireChangeEvent();
  autoRefreshor.manualRefresh();
}",0.9537166900420756
142819,"public void updateParameters(Query query){
  ((FilterQueryImpl)query).updateParameters();
  fireChangeEvent();
}","public void updateParameters(Query query){
  if (query instanceof FilterQueryImpl) {
    ((FilterQueryImpl)query).updateParameters();
    fireChangeEvent();
  }
}",0.8175182481751825
142820,"public Element writeXML(Document document){
  Element modelE=document.createElement(""String_Node_Str"");
  Element resultsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<StatisticsUI,String> entry : resultMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element resultE=document.createElement(""String_Node_Str"");
      resultE.setAttribute(""String_Node_Str"",entry.getKey().getClass().getName());
      resultE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(resultE);
    }
  }
  modelE.appendChild(resultsE);
  Element reportsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<Class,String> entry : reportMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element reportE=document.createElement(""String_Node_Str"");
      reportE.setAttribute(""String_Node_Str"",entry.getKey().getName());
      reportE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(reportE);
    }
  }
  modelE.appendChild(reportsE);
  return modelE;
}","public Element writeXML(Document document){
  Element modelE=document.createElement(""String_Node_Str"");
  Element resultsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<StatisticsUI,String> entry : resultMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element resultE=document.createElement(""String_Node_Str"");
      resultE.setAttribute(""String_Node_Str"",entry.getKey().getClass().getName());
      resultE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(resultE);
    }
  }
  modelE.appendChild(resultsE);
  Element reportsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<Class,String> entry : reportMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element reportE=document.createElement(""String_Node_Str"");
      reportE.setAttribute(""String_Node_Str"",entry.getKey().getName());
      reportE.setAttribute(""String_Node_Str"",entry.getValue());
      reportsE.appendChild(reportE);
    }
  }
  modelE.appendChild(reportsE);
  return modelE;
}",0.9972426470588236
142821,"/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (this.mDirected ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mDensity);
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (this.mDirected ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mDensity+ ""String_Node_Str"");
  return report;
}",0.972181551976574
142822,"private void updateEdges(HierarchicalGraph graph){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  float minWeight=Float.POSITIVE_INFINITY;
  float maxWeight=Float.NEGATIVE_INFINITY;
  for (  Edge edge : edgeIterable) {
    if (edge.getSource().getNodeData().getModel() == null || edge.getTarget().getNodeData().getModel() == null) {
      continue;
    }
    minWeight=Math.min(minWeight,edge.getWeight());
    maxWeight=Math.max(maxWeight,edge.getWeight());
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
 else {
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
  limits.setMinWeight(minWeight);
  limits.setMaxWeight(maxWeight);
}","private void updateEdges(HierarchicalGraph graph){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  float minWeight=Float.POSITIVE_INFINITY;
  float maxWeight=Float.NEGATIVE_INFINITY;
  for (  Edge edge : edgeIterable) {
    if (edge.getSource().getNodeData().getModel() == null || edge.getTarget().getNodeData().getModel() == null) {
      continue;
    }
    minWeight=Math.min(minWeight,edge.getWeight());
    maxWeight=Math.max(maxWeight,edge.getWeight());
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
 else {
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()&& edge.isDirected()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
  limits.setMinWeight(minWeight);
  limits.setMaxWeight(maxWeight);
}",0.9945474372955287
142823,"public void exportToNewWorkspace(Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=graphModel.getGraphVisible();
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  final Graph graphView=result;
  new Thread(new Runnable(){
    public void run(){
      ProgressTicketProvider progressProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
      ProgressTicket ticket=null;
      if (progressProvider != null) {
        ticket=progressProvider.createTicket(""String_Node_Str"",null);
      }
      Progress.start(ticket);
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      Workspace newWorkspace=pc.duplicateWorkspace(pc.getCurrentWorkspace());
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel(newWorkspace);
      graphModel.clear();
      graphModel.pushFrom(graphView);
      Progress.finish(ticket);
      String workspaceName=newWorkspace.getLookup().lookup(WorkspaceInformation.class).getName();
    }
  }
,""String_Node_Str"").start();
}","public void exportToNewWorkspace(Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    GraphView view=model.getCurrentResult();
    if (view == null) {
      return;
    }
    result=graphModel.getGraph(view);
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  final Graph graphView=result;
  new Thread(new Runnable(){
    public void run(){
      ProgressTicketProvider progressProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
      ProgressTicket ticket=null;
      if (progressProvider != null) {
        ticket=progressProvider.createTicket(""String_Node_Str"",null);
      }
      Progress.start(ticket);
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      Workspace newWorkspace=pc.duplicateWorkspace(pc.getCurrentWorkspace());
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel(newWorkspace);
      graphModel.clear();
      graphModel.pushFrom(graphView);
      Progress.finish(ticket);
      String workspaceName=newWorkspace.getLookup().lookup(WorkspaceInformation.class).getName();
    }
  }
,""String_Node_Str"").start();
}",0.9625550660792952
142824,"public void exportToColumn(String title,Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=graphModel.getGraphVisible();
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn nodeCol=am.getNodeTable().getColumn(""String_Node_Str"" + title);
  if (nodeCol == null) {
    nodeCol=am.getNodeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  AttributeColumn edgeCol=am.getEdgeTable().getColumn(""String_Node_Str"" + title);
  if (edgeCol == null) {
    edgeCol=am.getEdgeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  result.readLock();
  for (  Node n : result.getNodes()) {
    n.getNodeData().getAttributes().setValue(nodeCol.getIndex(),Boolean.TRUE);
  }
  for (  Edge e : result.getEdges()) {
    e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(),Boolean.TRUE);
  }
  result.readUnlock();
}","public void exportToColumn(String title,Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    GraphView view=model.getCurrentResult();
    if (view != null) {
      return;
    }
    result=graphModel.getGraph(view);
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn nodeCol=am.getNodeTable().getColumn(""String_Node_Str"" + title);
  if (nodeCol == null) {
    nodeCol=am.getNodeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  AttributeColumn edgeCol=am.getEdgeTable().getColumn(""String_Node_Str"" + title);
  if (edgeCol == null) {
    edgeCol=am.getEdgeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  result.readLock();
  for (  Node n : result.getNodes()) {
    n.getNodeData().getAttributes().setValue(nodeCol.getIndex(),Boolean.TRUE);
  }
  for (  Edge e : result.getEdges()) {
    e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(),Boolean.TRUE);
  }
  result.readUnlock();
}",0.9629090909090908
142825,"private void select(AbstractQueryImpl query){
  FilterProcessor processor=new FilterProcessor();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph result=processor.process((AbstractQueryImpl)query,graphModel);
  if (running) {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(result.getNodes().toArray());
      visController.selectEdges(result.getEdges().toArray());
    }
  }
 else {
  }
  graphModel.destroyView(result.getView());
}","private void select(AbstractQueryImpl query){
  FilterProcessor processor=new FilterProcessor();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph result=processor.process((AbstractQueryImpl)query,graphModel);
  if (running) {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(result.getNodes().toArray());
      visController.selectEdges(result.getEdges().toArray());
    }
    GraphView view=result.getView();
    model.setCurrentResult(view);
  }
 else {
    graphModel.destroyView(result.getView());
  }
}",0.9391304347826088
142826,"private void readEdgelistRow(String row,int pointer,double startTime,double endTime){
  StringTokenizer rowkonizer=new StringTokenizer(row,""String_Node_Str"");
  String from=rowkonizer.nextToken();
  String to=rowkonizer.nextToken();
  double weight=-1;
  String weightParse=rowkonizer.nextToken();
  weight=1.0;
  try {
    weight=Double.parseDouble(weightParse);
  }
 catch (  Exception e) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterDL.class,""String_Node_Str"",weightParse,getLineNumber(pointer)),Issue.Level.WARNING));
  }
  NodeDraft sourceNode=container.getNode(from);
  NodeDraft targetNode=container.getNode(to);
  EdgeDraft edgeDraft=null;
  if (container.edgeExists(sourceNode,targetNode)) {
    edgeDraft=container.getEdge(sourceNode,targetNode);
  }
 else {
    edgeDraft=container.factory().newEdgeDraft();
    edgeDraft.setSource(sourceNode);
    edgeDraft.setTarget(targetNode);
    edgeDraft.setWeight((float)weight);
    container.addEdge(edgeDraft);
  }
}","private void readEdgelistRow(String row,int pointer,double startTime,double endTime){
  StringTokenizer rowkonizer=new StringTokenizer(row,""String_Node_Str"");
  String from=rowkonizer.nextToken();
  String to=rowkonizer.nextToken();
  double weight=1.0;
  if (rowkonizer.hasMoreTokens()) {
    String weightParse=rowkonizer.nextToken();
    try {
      weight=Double.parseDouble(weightParse);
    }
 catch (    Exception e) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterDL.class,""String_Node_Str"",weightParse,getLineNumber(pointer)),Issue.Level.WARNING));
    }
  }
  NodeDraft sourceNode=container.getNode(from);
  NodeDraft targetNode=container.getNode(to);
  EdgeDraft edgeDraft=null;
  if (container.edgeExists(sourceNode,targetNode)) {
    edgeDraft=container.getEdge(sourceNode,targetNode);
  }
 else {
    edgeDraft=container.factory().newEdgeDraft();
    edgeDraft.setSource(sourceNode);
    edgeDraft.setTarget(targetNode);
    edgeDraft.setWeight((float)weight);
    container.addEdge(edgeDraft);
  }
}",0.915136476426799
142827,"private void readHeaderLine(String line){
  StringTokenizer firstLineTokenizer=new StringTokenizer(line,""String_Node_Str"");
  while (firstLineTokenizer.hasMoreTokens()) {
    String tag=firstLineTokenizer.nextToken().toLowerCase();
    if (tag.indexOf(""String_Node_Str"") != -1) {
      headerMap.put(tag.substring(0,tag.indexOf(""String_Node_Str"")).trim(),tag.substring(tag.indexOf(""String_Node_Str"") + 1).trim());
    }
 else {
    }
  }
}","private void readHeaderLine(String line){
  line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
  StringTokenizer firstLineTokenizer=new StringTokenizer(line,""String_Node_Str"");
  while (firstLineTokenizer.hasMoreTokens()) {
    String tag=firstLineTokenizer.nextToken().toLowerCase();
    if (tag.indexOf(""String_Node_Str"") != -1) {
      headerMap.put(tag.substring(0,tag.indexOf(""String_Node_Str"")).trim(),tag.substring(tag.indexOf(""String_Node_Str"") + 1).trim());
    }
 else {
    }
  }
}",0.9350372736954208
142828,"public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        if (parameters.isUndirectedSumDirectedEdgesWeight()) {
          opposite.setWeight(edge.getWeight() + opposite.getWeight());
        }
 else {
          opposite.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
        }
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          if (parameters.isUndirectedSumDirectedEdgesWeight()) {
            edge.setWeight(edge.getWeight() + opposite.getWeight());
          }
 else {
            edge.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
          }
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  if (!allowAutoNode()) {
    for (    NodeDraftImpl nodeDraftImpl : nodeMap.values().toArray(new NodeDraftImpl[0])) {
      if (nodeDraftImpl.isCreatedAuto()) {
        nodeMap.remove(nodeDraftImpl.getId());
        for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
          EdgeDraftImpl edge=itr.next();
          if (edge.getSource() == nodeDraftImpl || edge.getTarget() == nodeDraftImpl) {
            itr.remove();
          }
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o2.getHeight()).compareTo(o1.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (node.getLabel() == null) {
      node.setLabel(node.getId());
    }
  }
}","public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        if (parameters.isUndirectedSumDirectedEdgesWeight()) {
          opposite.setWeight(edge.getWeight() + opposite.getWeight());
        }
 else {
          opposite.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
        }
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          if (parameters.isUndirectedSumDirectedEdgesWeight()) {
            edge.setWeight(edge.getWeight() + opposite.getWeight());
          }
 else {
            edge.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
          }
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  if (!allowAutoNode()) {
    for (    NodeDraftImpl nodeDraftImpl : nodeMap.values().toArray(new NodeDraftImpl[0])) {
      if (nodeDraftImpl.isCreatedAuto()) {
        nodeMap.remove(nodeDraftImpl.getId());
        for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
          EdgeDraftImpl edge=itr.next();
          if (edge.getSource() == nodeDraftImpl || edge.getTarget() == nodeDraftImpl) {
            itr.remove();
          }
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o2.getHeight()).compareTo(o1.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (node.getLabel() == null) {
      node.setLabel(node.getId());
    }
  }
  boolean customPosition=false;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (Float.isNaN(node.getX())) {
      node.setX(0);
    }
    if (Float.isNaN(node.getY())) {
      node.setY(0);
    }
    if (Float.isNaN(node.getZ())) {
      node.setZ(0);
    }
    if (node.getX() != 0f || node.getY() != 0) {
      customPosition=true;
    }
  }
  if (!customPosition) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      node.setX((float)((0.01 + Math.random()) * 1000) - 500);
      node.setY((float)((0.01 + Math.random()) * 1000) - 500);
    }
  }
}",0.9084178335747626
142829,"protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  node.getNodeData().setX(nodeDraft.getX());
  node.getNodeData().setY(nodeDraft.getY());
  node.getNodeData().setZ(nodeDraft.getZ());
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.873836831854577
142830,"public void setCameraDistance(float distance){
  fireProperyChange(""String_Node_Str"",null,distance);
}","public void setCameraDistance(float distance){
}",0.64
142831,"public void setup(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  vizModel.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
        refreshZoom();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshZoom();
      }
    }
  }
);
  refreshSharedConfig();
  hightlightCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setLightenNonSelectedAuto(hightlightCheckBox.isSelected());
    }
  }
);
  ((JColorButton)backgroundColorButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setBackgroundColor(((JColorButton)backgroundColorButton).getColor());
    }
  }
);
  autoSelectNeigborCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setAutoSelectNeighbor(autoSelectNeigborCheckbox.isSelected());
    }
  }
);
  zoomSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int cam=(int)VizController.getInstance().getVizModel().getCameraDistance();
      if (zoomSlider.getValue() != cam && cam < zoomSlider.getMaximum()) {
        GraphIO io=VizController.getInstance().getGraphIO();
        io.setCameraDistance(zoomSlider.getValue());
      }
    }
  }
);
}","public void setup(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  vizModel.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
    }
  }
);
  refreshSharedConfig();
  hightlightCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setLightenNonSelectedAuto(hightlightCheckBox.isSelected());
    }
  }
);
  ((JColorButton)backgroundColorButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setBackgroundColor(((JColorButton)backgroundColorButton).getColor());
    }
  }
);
  autoSelectNeigborCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setAutoSelectNeighbor(autoSelectNeigborCheckbox.isSelected());
    }
  }
);
  zoomSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int cam=(int)VizController.getInstance().getVizModel().getCameraDistance();
      if (zoomSlider.getValue() != cam && cam < zoomSlider.getMaximum()) {
        GraphIO io=VizController.getInstance().getGraphIO();
        io.setCameraDistance(zoomSlider.getValue());
      }
    }
  }
);
}",0.9713609467455622
142832,"public void centerOnGraph(){
  float graphWidth=Math.abs(limits.getMaxXoctree() - limits.getMinXoctree());
  float graphHeight=Math.abs(limits.getMaxYoctree() - limits.getMinYoctree());
  float currentDistanceGraphRatioX=Math.abs(graphDrawable.viewport.get(2) / (float)graphDrawable.getDraggingMarkerX()) / graphDrawable.cameraLocation[2];
  float currentDistanceGraphRatioY=Math.abs(graphDrawable.viewport.get(3) / (float)graphDrawable.getDraggingMarkerY()) / graphDrawable.cameraLocation[2];
  float newCameraLocationX=graphWidth / currentDistanceGraphRatioX;
  float newCameraLocationY=graphHeight / currentDistanceGraphRatioY;
  float newCameraLocation=Math.max(newCameraLocationX,newCameraLocationY);
  graphDrawable.cameraLocation[0]=limits.getMinXoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[1]=limits.getMinYoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[2]=newCameraLocation;
  graphDrawable.cameraTarget[0]=graphDrawable.cameraLocation[0];
  graphDrawable.cameraTarget[1]=graphDrawable.cameraLocation[1];
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnGraph(){
  float graphWidth=Math.abs(limits.getMaxXoctree() - limits.getMinXoctree());
  float graphHeight=Math.abs(limits.getMaxYoctree() - limits.getMinYoctree());
  float currentDistanceGraphRatioX=Math.abs(graphDrawable.viewport.get(2) / (float)graphDrawable.getDraggingMarkerX()) / graphDrawable.cameraLocation[2];
  float currentDistanceGraphRatioY=Math.abs(graphDrawable.viewport.get(3) / (float)graphDrawable.getDraggingMarkerY()) / graphDrawable.cameraLocation[2];
  float newCameraLocationX=graphWidth / currentDistanceGraphRatioX;
  float newCameraLocationY=graphHeight / currentDistanceGraphRatioY;
  float newCameraLocation=Math.max(newCameraLocationX,newCameraLocationY);
  graphDrawable.cameraLocation[0]=limits.getMinXoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[1]=limits.getMinYoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[2]=newCameraLocation;
  graphDrawable.cameraTarget[0]=graphDrawable.cameraLocation[0];
  graphDrawable.cameraTarget[1]=graphDrawable.cameraLocation[1];
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
}",0.961061189559264
142833,"public void centerOnCoordinate(float x,float y,float z){
  graphDrawable.cameraTarget[0]=x;
  graphDrawable.cameraTarget[1]=y;
  graphDrawable.cameraTarget[2]=z;
  graphDrawable.cameraLocation[0]=x;
  graphDrawable.cameraLocation[1]=y;
  graphDrawable.cameraLocation[2]=z + 100;
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnCoordinate(float x,float y,float z){
  graphDrawable.cameraTarget[0]=x;
  graphDrawable.cameraTarget[1]=y;
  graphDrawable.cameraTarget[2]=z;
  graphDrawable.cameraLocation[0]=x;
  graphDrawable.cameraLocation[1]=y;
  graphDrawable.cameraLocation[2]=z + 100;
}",0.8602150537634409
142834,"public void centerOnZero(){
  graphDrawable.cameraLocation[0]=0;
  graphDrawable.cameraLocation[1]=0;
  graphDrawable.cameraLocation[2]=100;
  graphDrawable.cameraTarget[0]=0;
  graphDrawable.cameraTarget[1]=0;
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnZero(){
  graphDrawable.cameraLocation[0]=0;
  graphDrawable.cameraLocation[1]=0;
  graphDrawable.cameraLocation[2]=100;
  graphDrawable.cameraTarget[0]=0;
  graphDrawable.cameraTarget[1]=0;
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
}",0.8663729809104258
142835,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && AttributeUtils.getDefault().isNumberListColumn(column)) {
    return value;
  }
 else {
    return value != null ? value.toString() : null;
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (AttributeUtils.getDefault().isNumberListColumn(column) || AttributeUtils.getDefault().isDynamicNumberColumn(column))) {
    return value;
  }
 else {
    return value != null ? value.toString() : null;
  }
}",0.9289740698985344
142836,"/** 
 * Constructs an empty   {@code IntervalTree}.
 */
public IntervalTree(){
  nil=new Node();
  nil.left=nil.right=nil.p=nil;
  root=nil;
}","public IntervalTree(IntervalTree intervalTree){
  nil=new Node();
  nil.left=nil.right=nil.p=nil;
  root=nil;
  copy(intervalTree.root.left,intervalTree.nil);
}",0.5695364238410596
142837,"private void exportData(Graph graph) throws Exception {
  stringBuilder=new StringBuilder();
  int max=graph.getNodeCount();
  Progress.start(progressTicket,max);
  if (!list) {
    if (header) {
      stringBuilder.append(SEPARATOR);
      for (      Node n : graph.getNodes()) {
        writeMatrixNode(n);
      }
      stringBuilder.deleteCharAt(stringBuilder.length() - 1);
      stringBuilder.append(EOL);
    }
  }
  if (list) {
    for (    Node n : graph.getNodes()) {
      writeListNode(n);
      for (      Edge e : graph.getEdges(n)) {
        if (!e.isDirected() || (e.isDirected() && n == e.getSource())) {
          Node m=graph.getOpposite(n,e);
          writeListNode(m);
        }
      }
      stringBuilder.deleteCharAt(stringBuilder.length() - 1);
      stringBuilder.append(EOL);
    }
  }
 else {
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=directedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
 else     if (graph instanceof UndirectedGraph) {
      UndirectedGraph undirectedGraph=(UndirectedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=undirectedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
 else {
      MixedGraph mixedGraph=(MixedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=mixedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
  }
  if (!cancel) {
    writer.append(stringBuilder);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}","private void exportData(Graph graph) throws Exception {
  int max=graph.getNodeCount();
  Progress.start(progressTicket,max);
  if (!list) {
    if (header) {
      writer.append(SEPARATOR);
      Node[] nodes=graph.getNodes().toArray();
      for (int i=0; i < nodes.length; i++) {
        writeMatrixNode(nodes[i],i < nodes.length - 1);
      }
      writer.append(EOL);
    }
  }
  if (list) {
    Node[] nodes=graph.getNodes().toArray();
    for (int i=0; i < nodes.length; i++) {
      Node n=nodes[i];
      List<Node> neighbours=new ArrayList<Node>();
      for (      Edge e : graph.getEdges(n)) {
        if (!e.isDirected() || (e.isDirected() && n == e.getSource())) {
          Node m=graph.getOpposite(n,e);
          neighbours.add(m);
        }
      }
      writeListNode(n,!neighbours.isEmpty());
      for (int j=0; j < neighbours.size(); j++) {
        writeListNode(neighbours.get(j),j < neighbours.size() - 1);
      }
      writer.append(EOL);
    }
  }
 else {
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : nodes) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=directedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
 else     if (graph instanceof UndirectedGraph) {
      UndirectedGraph undirectedGraph=(UndirectedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : nodes) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=undirectedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
 else {
      MixedGraph mixedGraph=(MixedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=mixedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}",0.7068896853843091
142838,"private void writeMatrixNode(Node node){
  if (header) {
    String label=node.getNodeData().getLabel();
    if (label == null) {
      label=node.getNodeData().getId();
    }
    stringBuilder.append(label);
    stringBuilder.append(SEPARATOR);
  }
}","private void writeMatrixNode(Node node,boolean writeSeparator) throws IOException {
  if (header) {
    String label=node.getNodeData().getLabel();
    if (label == null) {
      label=node.getNodeData().getId();
    }
    writer.append(label);
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
}",0.8070796460176991
142839,"private void writeEdge(Edge edge){
  if (edge != null) {
    if (edgeWeight) {
      stringBuilder.append(Float.toString(edge.getWeight()));
    }
 else {
      stringBuilder.append(Float.toString(1f));
    }
    stringBuilder.append(SEPARATOR);
  }
 else {
    if (writeZero) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(SEPARATOR);
  }
}","private void writeEdge(Edge edge,boolean writeSeparator) throws IOException {
  if (edge != null) {
    if (edgeWeight) {
      writer.append(Float.toString(edge.getWeight()));
    }
 else {
      writer.append(Float.toString(1f));
    }
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
 else {
    if (writeZero) {
      writer.append(""String_Node_Str"");
    }
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
}",0.5970873786407767
142840,"private void writeListNode(Node node){
  String label=node.getNodeData().getLabel();
  if (label == null) {
    label=node.getNodeData().getId();
  }
  stringBuilder.append(label);
  stringBuilder.append(SEPARATOR);
}","private void writeListNode(Node node,boolean writeSeparator) throws IOException {
  String label=node.getNodeData().getLabel();
  if (label == null) {
    label=node.getNodeData().getId();
  }
  writer.append(label);
  if (writeSeparator) {
    writer.append(SEPARATOR);
  }
}",0.7058823529411765
142841,"@Override public void actionPerformed(ActionEvent e){
  for (  Perspective g : perspectives) {
    if (g != perspective) {
      TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
      tpg.close();
    }
  }
  TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
  tpg.open();
  Perspective closingPerspective=getPerspective(selectedPerspective);
  for (  PerspectiveMember member : members) {
    if (member.close(closingPerspective)) {
      if (member instanceof TopComponent) {
        ((TopComponent)member).close();
      }
    }
  }
  for (  PerspectiveMember member : members) {
    if (member.open(perspective)) {
      if (member instanceof TopComponent) {
        ((TopComponent)member).open();
      }
    }
  }
  selectedPerspective=perspective.getName();
}","@Override public void actionPerformed(ActionEvent e){
  for (  Perspective g : perspectives) {
    if (g != perspective) {
      TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
      tpg.close();
    }
  }
  TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
  tpg.open();
  PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
  Perspective closingPerspective=getPerspective(selectedPerspective);
  for (  PerspectiveMember member : members) {
    if (member.close(closingPerspective)) {
      if (member instanceof TopComponent) {
        boolean closed=((TopComponent)member).close();
        System.out.println(""String_Node_Str"" + member + ""String_Node_Str""+ closed);
      }
    }
  }
  for (  PerspectiveMember member : members) {
    if (member.open(perspective)) {
      if (member instanceof TopComponent && !((TopComponent)member).isOpened()) {
        ((TopComponent)member).open();
        System.out.println(""String_Node_Str"" + member);
      }
    }
  }
  selectedPerspective=perspective.getName();
}",0.7912306925759841
142842,"private void addGroupTabs(){
  final Perspective[] perspectives=Lookup.getDefault().lookupAll(Perspective.class).toArray(new Perspective[0]);
  final PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
  buttons=new JPerspectiveButton[perspectives.length];
  int i=0;
  for (  final Perspective perspective : perspectives) {
    JPerspectiveButton toggleButton=new JPerspectiveButton(perspective.getDisplayName(),perspective.getIcon());
    toggleButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        for (        Perspective g : perspectives) {
          if (g != perspective) {
            TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
            tpg.close();
          }
        }
        TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
        tpg.open();
        Perspective closingPerspective=getPerspective(selectedPerspective);
        for (        PerspectiveMember member : members) {
          if (member.close(closingPerspective)) {
            if (member instanceof TopComponent) {
              ((TopComponent)member).close();
            }
          }
        }
        for (        PerspectiveMember member : members) {
          if (member.open(perspective)) {
            if (member instanceof TopComponent) {
              ((TopComponent)member).open();
            }
          }
        }
        selectedPerspective=perspective.getName();
      }
    }
);
    perspectivesButtonGroup.add(toggleButton);
    buttonsPanel.add(toggleButton);
    buttons[i++]=toggleButton;
  }
  refreshSelectedPerspective();
}","private void addGroupTabs(){
  final Perspective[] perspectives=Lookup.getDefault().lookupAll(Perspective.class).toArray(new Perspective[0]);
  buttons=new JPerspectiveButton[perspectives.length];
  int i=0;
  for (  final Perspective perspective : perspectives) {
    JPerspectiveButton toggleButton=new JPerspectiveButton(perspective.getDisplayName(),perspective.getIcon());
    toggleButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        for (        Perspective g : perspectives) {
          if (g != perspective) {
            TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
            tpg.close();
          }
        }
        TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
        tpg.open();
        PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
        Perspective closingPerspective=getPerspective(selectedPerspective);
        for (        PerspectiveMember member : members) {
          if (member.close(closingPerspective)) {
            if (member instanceof TopComponent) {
              boolean closed=((TopComponent)member).close();
              System.out.println(""String_Node_Str"" + member + ""String_Node_Str""+ closed);
            }
          }
        }
        for (        PerspectiveMember member : members) {
          if (member.open(perspective)) {
            if (member instanceof TopComponent && !((TopComponent)member).isOpened()) {
              ((TopComponent)member).open();
              System.out.println(""String_Node_Str"" + member);
            }
          }
        }
        selectedPerspective=perspective.getName();
      }
    }
);
    perspectivesButtonGroup.add(toggleButton);
    buttonsPanel.add(toggleButton);
    buttons[i++]=toggleButton;
  }
  refreshSelectedPerspective();
}",0.2955957849229937
142843,"private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f && maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}","private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}",0.9987333755541482
142844,"private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f && maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}","private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}",0.9995244888254874
142845,"private void readAttribute(XMLStreamReader reader,String classAtt,String typeAtt) throws Exception {
  String id=""String_Node_Str"";
  String type=""String_Node_Str"";
  String title=""String_Node_Str"";
  String defaultStr=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (ATTRIBUTE_ID.equalsIgnoreCase(attName)) {
      id=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TYPE.equalsIgnoreCase(attName) || ATTRIBUTE_TYPE2.equalsIgnoreCase(attName)) {
      type=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TITLE.equalsIgnoreCase(attName)) {
      title=reader.getAttributeValue(i);
    }
  }
  if (title.isEmpty()) {
    title=id;
  }
  if (!id.isEmpty() && !type.isEmpty()) {
    if (classAtt.isEmpty() || !(classAtt.equalsIgnoreCase(""String_Node_Str"") || classAtt.equalsIgnoreCase(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
    }
    boolean end=false;
    boolean defaultFlag=false;
    while (reader.hasNext() && !end) {
      int xmltype=reader.next();
switch (xmltype) {
case XMLStreamReader.START_ELEMENT:
        if (ATTRIBUTE_DEFAULT.equalsIgnoreCase(xmlReader.getLocalName())) {
          defaultFlag=true;
        }
      break;
case XMLStreamReader.CHARACTERS:
    if (defaultFlag && !xmlReader.isWhiteSpace()) {
      defaultStr=xmlReader.getText();
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ATTRIBUTE.equalsIgnoreCase(xmlReader.getLocalName())) {
  end=true;
}
break;
}
}
boolean dynamic=typeAtt.equalsIgnoreCase(""String_Node_Str"");
AttributeType attributeType=AttributeType.STRING;
if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_FLOAT : AttributeType.FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_DOUBLE : AttributeType.DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_STRING : AttributeType.STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGDECIMAL : AttributeType.BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGINTEGER : AttributeType.BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BYTE : AttributeType.BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_CHAR : AttributeType.CHAR;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_SHORT : AttributeType.SHORT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_INTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_CHARACTER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_SHORT;
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",type),Issue.Level.SEVERE));
return;
}
Object defaultValue=null;
if (!defaultStr.isEmpty()) {
try {
defaultValue=attributeType.parse(defaultStr);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultStr,title));
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()),Issue.Level.SEVERE));
}
}
if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getNodeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getNodeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
 else if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getEdgeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getEdgeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
}
}","private void readAttribute(XMLStreamReader reader,String classAtt,String typeAtt) throws Exception {
  String id=""String_Node_Str"";
  String type=""String_Node_Str"";
  String title=""String_Node_Str"";
  String defaultStr=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (ATTRIBUTE_ID.equalsIgnoreCase(attName)) {
      id=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TYPE.equalsIgnoreCase(attName) || ATTRIBUTE_TYPE2.equalsIgnoreCase(attName)) {
      type=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TITLE.equalsIgnoreCase(attName)) {
      title=reader.getAttributeValue(i);
    }
  }
  if (title.isEmpty()) {
    title=id;
  }
  if (!id.isEmpty() && !type.isEmpty()) {
    if (classAtt.isEmpty() || !(classAtt.equalsIgnoreCase(""String_Node_Str"") || classAtt.equalsIgnoreCase(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
    }
    boolean end=false;
    boolean defaultFlag=false;
    while (reader.hasNext() && !end) {
      int xmltype=reader.next();
switch (xmltype) {
case XMLStreamReader.START_ELEMENT:
        if (ATTRIBUTE_DEFAULT.equalsIgnoreCase(xmlReader.getLocalName())) {
          defaultFlag=true;
        }
      break;
case XMLStreamReader.CHARACTERS:
    if (defaultFlag && !xmlReader.isWhiteSpace()) {
      defaultStr=xmlReader.getText();
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ATTRIBUTE.equalsIgnoreCase(xmlReader.getLocalName())) {
  end=true;
}
break;
}
}
boolean dynamic=typeAtt.equalsIgnoreCase(""String_Node_Str"");
AttributeType attributeType=AttributeType.STRING;
if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_FLOAT : AttributeType.FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_DOUBLE : AttributeType.DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_STRING : AttributeType.STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGDECIMAL : AttributeType.BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGINTEGER : AttributeType.BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BYTE : AttributeType.BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_CHAR : AttributeType.CHAR;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_SHORT : AttributeType.SHORT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_INTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_CHARACTER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_SHORT;
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",type),Issue.Level.SEVERE));
return;
}
Object defaultValue=null;
if (!defaultStr.isEmpty()) {
try {
defaultValue=attributeType.parse(defaultStr);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultStr,title));
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()),Issue.Level.SEVERE));
}
}
if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getNodeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getNodeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
 else if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getEdgeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getEdgeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
}
}",0.9924307586444177
142846,"protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout.getBuilder();
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}","protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout != null ? selectedLayout.getBuilder() : null;
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}",0.9602977667493796
142847,"public void deleteWorkspace(Workspace workspace){
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
  workspaceProvider.removeWorkspace(workspace);
}","public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}",0.6088379705400983
142848,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  panel.refreshList();
}",0.780952380952381
142849,"public boolean init(Graph graph){
  visibleInterval=dynamicModel.getVisibleInterval();
  min=Double.NEGATIVE_INFINITY;
  max=Double.POSITIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  visibleInterval=dynamicModel.getVisibleInterval();
  min=Double.POSITIVE_INFINITY;
  max=Double.NEGATIVE_INFINITY;
  return true;
}",0.9520958083832336
142850,"public void finish(){
  timelineController.setMin(min);
  timelineController.setMax(max);
}","public void finish(){
  if (!Double.isInfinite(min)) {
    timelineController.setMin(min);
  }
  if (!Double.isInfinite(max)) {
    timelineController.setMax(max);
  }
}",0.7
142851,"public boolean evaluate(Graph graph,Edge edge){
  if (edgeColumn != null) {
    Object obj=edge.getEdgeData().getAttributes().getValue(edgeColumn.getIndex());
    if (obj != null) {
      TimeInterval timeInterval=(TimeInterval)obj;
      min=Math.min(min,timeInterval.getLow());
      max=Math.max(max,timeInterval.getHigh());
      return timeInterval.isInRange(visibleInterval.getLow(),visibleInterval.getHigh());
    }
  }
  return true;
}","public boolean evaluate(Graph graph,Edge edge){
  if (edgeColumn != null) {
    Object obj=edge.getEdgeData().getAttributes().getValue(edgeColumn.getIndex());
    if (obj != null) {
      TimeInterval timeInterval=(TimeInterval)obj;
      min=Math.min(min,Double.isInfinite(timeInterval.getLow()) ? min : timeInterval.getLow());
      max=Math.max(max,Double.isInfinite(timeInterval.getHigh()) ? max : timeInterval.getHigh());
      return timeInterval.isInRange(visibleInterval.getLow(),visibleInterval.getHigh());
    }
  }
  return true;
}",0.899492385786802
142852,"public boolean cancel(){
  return true;
}","public boolean cancel(){
  cancel=true;
  return true;
}",0.845360824742268
142853,"public void readWorkspaceChildren(Workspace workspace,Element workspaceE) throws Exception {
  NodeList children=workspaceE.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Element childE=(Element)child;
      WorkspacePersistenceProvider pp=providers.get(childE.getTagName());
      if (pp != null) {
        try {
          pp.readXML(childE,workspace);
        }
 catch (        UnsupportedOperationException e) {
        }
      }
    }
  }
}","public void readWorkspaceChildren(Workspace workspace,Element workspaceE) throws Exception {
  NodeList children=workspaceE.getChildNodes();
  for (int i=0; i < children.getLength() && !cancel; i++) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Element childE=(Element)child;
      WorkspacePersistenceProvider pp=providers.get(childE.getTagName());
      if (pp != null) {
        try {
          pp.readXML(childE,workspace);
        }
 catch (        UnsupportedOperationException e) {
        }
      }
    }
  }
}",0.9901697944593388
142854,"public void readProject(XPath xpath,Element projectE) throws Exception {
  ProjectInformationImpl info=project.getLookup().lookup(ProjectInformationImpl.class);
  WorkspaceProviderImpl workspaces=project.getLookup().lookup(WorkspaceProviderImpl.class);
  info.setName(projectE.getAttribute(""String_Node_Str""));
  XPathExpression exp=xpath.compile(""String_Node_Str"");
  NodeList workSpaceList=(NodeList)exp.evaluate(projectE,XPathConstants.NODESET);
  for (int i=0; i < workSpaceList.getLength(); i++) {
    Element workspaceE=(Element)workSpaceList.item(i);
    Workspace workspace=readWorkspace(xpath,workspaceE);
    if (workspace.getLookup().lookup(WorkspaceInformationImpl.class).isOpen()) {
      workspaces.setCurrentWorkspace(workspace);
    }
  }
}","public void readProject(XPath xpath,Element projectE) throws Exception {
  ProjectInformationImpl info=project.getLookup().lookup(ProjectInformationImpl.class);
  WorkspaceProviderImpl workspaces=project.getLookup().lookup(WorkspaceProviderImpl.class);
  info.setName(projectE.getAttribute(""String_Node_Str""));
  XPathExpression exp=xpath.compile(""String_Node_Str"");
  NodeList workSpaceList=(NodeList)exp.evaluate(projectE,XPathConstants.NODESET);
  for (int i=0; i < workSpaceList.getLength() && !cancel; i++) {
    Element workspaceE=(Element)workSpaceList.item(i);
    Workspace workspace=readWorkspace(xpath,workspaceE);
    if (workspace.getLookup().lookup(WorkspaceInformationImpl.class).isOpen()) {
      workspaces.setCurrentWorkspace(workspace);
    }
  }
}",0.9927774130006566
142855,"public boolean cancel(){
  cancel=true;
  gephiReader.cancel();
  return true;
}","public boolean cancel(){
  cancel=true;
  if (gephiReader != null) {
    gephiReader.cancel();
  }
  return true;
}",0.8205128205128205
142856,"public void run(){
  try {
    Progress.start(progressTicket);
    Progress.setDisplayName(progressTicket,NbBundle.getMessage(SaveTask.class,""String_Node_Str""));
    FileObject fileObject=FileUtil.toFileObject(file);
    if (FileUtil.isArchiveFile(fileObject)) {
      fileObject=FileUtil.getArchiveRoot(fileObject).getChildren()[0];
    }
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document doc=builder.parse(fileObject.getInputStream());
    Project project=new ProjectImpl();
    project.getLookup().lookup(ProjectInformationImpl.class).setFile(file);
    String version=doc.getDocumentElement().getAttribute(""String_Node_Str"");
    if (version == null || version.isEmpty() || Double.parseDouble(version) != 0.7) {
      throw new GephiFormatException(""String_Node_Str"");
    }
    gephiReader=new GephiReader();
    project=gephiReader.readAll(doc.getDocumentElement(),project);
    if (!cancel) {
      ProjectControllerImpl pc=Lookup.getDefault().lookup(ProjectControllerImpl.class);
      pc.openProject(project);
    }
    Progress.finish(progressTicket);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    if (ex instanceof GephiFormatException) {
      throw (GephiFormatException)ex;
    }
    throw new GephiFormatException(GephiReader.class,ex);
  }
}","public void run(){
  try {
    Progress.start(progressTicket);
    Progress.setDisplayName(progressTicket,NbBundle.getMessage(SaveTask.class,""String_Node_Str""));
    FileObject fileObject=FileUtil.toFileObject(file);
    if (FileUtil.isArchiveFile(fileObject)) {
      fileObject=FileUtil.getArchiveRoot(fileObject).getChildren()[0];
    }
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document doc=builder.parse(fileObject.getInputStream());
    if (!cancel) {
      Project project=new ProjectImpl();
      project.getLookup().lookup(ProjectInformationImpl.class).setFile(file);
      String version=doc.getDocumentElement().getAttribute(""String_Node_Str"");
      if (version == null || version.isEmpty() || Double.parseDouble(version) != 0.7) {
        throw new GephiFormatException(""String_Node_Str"");
      }
      gephiReader=new GephiReader();
      project=gephiReader.readAll(doc.getDocumentElement(),project);
      if (!cancel) {
        ProjectControllerImpl pc=Lookup.getDefault().lookup(ProjectControllerImpl.class);
        pc.openProject(project);
      }
    }
    Progress.finish(progressTicket);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    if (ex instanceof GephiFormatException) {
      throw (GephiFormatException)ex;
    }
    throw new GephiFormatException(GephiReader.class,ex);
  }
}",0.982367758186398
142857,"public PartitionControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new PartitionModelImpl());
    }
    public void select(    Workspace workspace){
      model=workspace.getLookup().lookup(PartitionModelImpl.class);
      refreshPartitions=true;
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
    public void unselect(    Workspace workspace){
      model=null;
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().removeAttributeListener(PartitionControllerImpl.this);
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      untrackViewChange(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    model=pc.getCurrentWorkspace().getLookup().lookup(PartitionModelImpl.class);
    if (model == null) {
      model=new PartitionModelImpl();
      Workspace workspace=pc.getCurrentWorkspace();
      pc.getCurrentWorkspace().add(new PartitionModelImpl());
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
  }
}","public PartitionControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new PartitionModelImpl());
    }
    public void select(    Workspace workspace){
      model=workspace.getLookup().lookup(PartitionModelImpl.class);
      refreshPartitions=true;
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
    public void unselect(    Workspace workspace){
      model=null;
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().removeAttributeListener(PartitionControllerImpl.this);
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      untrackViewChange(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    refreshPartitions=true;
    model=pc.getCurrentWorkspace().getLookup().lookup(PartitionModelImpl.class);
    if (model == null) {
      model=new PartitionModelImpl();
      Workspace workspace=pc.getCurrentWorkspace();
      pc.getCurrentWorkspace().add(model);
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
  }
}",0.9855293221629856
142858,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  NumberList numberList=(NumberList)value;
  if (numberList == null) {
    return super.getTableCellRendererComponent(table,""String_Node_Str"",isSelected,hasFocus,row,column);
  }
 else   if (numberList.size() < 2) {
    return super.getTableCellRendererComponent(table,numberList.toString(),isSelected,hasFocus,row,column);
  }
  ArrayList<Number> numbers=new ArrayList<Number>();
  Number n;
  for (int i=0; i < numberList.size(); i++) {
    n=(Number)numberList.getItem(i);
    if (n != null) {
      numbers.add(n);
    }
  }
  JLabel label=new JLabel();
  Color background;
  if (isSelected) {
    background=SELECTED_BACKGROUND;
  }
 else {
    background=UNSELECTED_BACKGROUND;
  }
  final SizeParams size=new SizeParams(table.getColumnModel().getColumn(column).getWidth(),table.getRowHeight(row) - 1,1);
  final BufferedImage i=LineGraph.createGraph(numbers.toArray(new Number[0]),size,Color.BLUE,background);
  label.setIcon(new ImageIcon(i));
  label.setToolTipText(numberList.toString());
  return label;
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  NumberList numberList=(NumberList)value;
  if (numberList == null) {
    return super.getTableCellRendererComponent(table,""String_Node_Str"",isSelected,hasFocus,row,column);
  }
 else   if (numberList.size() < 2) {
    return super.getTableCellRendererComponent(table,numberList.toString(),isSelected,hasFocus,row,column);
  }
  JLabel label=new JLabel();
  ArrayList<Number> numbers=new ArrayList<Number>();
  Number n;
  for (int i=0; i < numberList.size(); i++) {
    n=(Number)numberList.getItem(i);
    if (n != null) {
      numbers.add(n);
    }
  }
  Color background;
  if (isSelected) {
    background=SELECTED_BACKGROUND;
  }
 else {
    background=UNSELECTED_BACKGROUND;
  }
  final SizeParams size=new SizeParams(table.getColumnModel().getColumn(column).getWidth(),table.getRowHeight(row) - 1,1);
  final BufferedImage i=LineGraph.createGraph(numbers.toArray(new Number[0]),size,Color.BLUE,background);
  label.setIcon(new ImageIcon(i));
  label.setToolTipText(numberList.toString());
  return label;
}",0.9749134948096886
142859,"/** 
 * Creates and edge between source and target node (if does not already exist), directed or undirected. This will not create a self-loop.
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return True if the edge was created succesfully, false otherwise
 */
boolean createEdge(Node source,Node target,boolean directed);","/** 
 * Creates and edge between source and target node (if does not already exist), directed or undirected. If a edge with the given id already exists, no edge will be created. This will not create a self-loop.
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);",0.8584579976985041
142860,"public Node createNode(String label,String id){
  Graph graph=getGraph();
  if (graph.getNode(id) == null) {
    Node newNode=buildNode(label,id);
    graph.addNode(newNode);
    return newNode;
  }
 else   return null;
}","public Node createNode(String label,String id){
  Graph graph=getGraph();
  if (graph.getNode(id) == null) {
    Node newNode=buildNode(label,id);
    graph.addNode(newNode);
    return newNode;
  }
 else {
    return null;
  }
}",0.9155555555555556
142861,"public boolean createEdge(Node source,Node target,boolean directed){
  if (isNodeInGraph(source) && isNodeInGraph(target)) {
    if (source != target) {
      if (directed) {
        return getDirectedGraph().addEdge(source,target);
      }
 else {
        return getUndirectedGraph().addEdge(source,target);
      }
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (getGraph().getEdge(id) == null) {
    if (source != target) {
      if (directed) {
        newEdge=buildEdge(id,source,target,true);
        if (getDirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
 else {
        newEdge=buildEdge(id,source,target,false);
        if (getUndirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}",0.1320388349514563
142862,"private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}","private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}",0.9282511210762332
142863,"/** 
 * Does export the preview graph as an SVG image.
 * @param file         the output SVG file
 * @param supportSize  the support size of the exported image
 * @throws Exception
 */
private void exportData(GraphSheet graphSheet) throws Exception {
  SupportSize supportSize=new SupportSize(210,297,LengthUnit.MILLIMETER);
  Progress.start(progress);
  Graph graph=graphSheet.getGraph();
  int max=0;
  if (graph.showNodes()) {
    max+=graph.countNodes();
  }
  if (graph.showEdges()) {
    max+=graph.countUnidirectionalEdges() + graph.countBidirectionalEdges();
    if (graph.showSelfLoops()) {
      max+=graph.countSelfLoops();
    }
  }
  Progress.switchToDeterminate(progress,max);
  buildDOM(graphSheet,supportSize);
  SVGTranscoder t=new SVGTranscoder();
  t.addTranscodingHint(SVGTranscoder.KEY_XML_DECLARATION,new String(""String_Node_Str""));
  TranscoderInput input=new TranscoderInput(doc);
  try {
    TranscoderOutput output=new TranscoderOutput(writer);
    t.transcode(input,output);
  }
  finally {
    writer.close();
  }
  Progress.finish(progress);
}","/** 
 * Does export the preview graph as an SVG image.
 * @param file         the output SVG file
 * @param supportSize  the support size of the exported image
 * @throws Exception
 */
private void exportData(GraphSheet graphSheet) throws Exception {
  SupportSize supportSize=new SupportSize(210,297,LengthUnit.MILLIMETER);
  Progress.start(progress);
  Graph graph=graphSheet.getGraph();
  int max=0;
  if (graph.showNodes()) {
    max+=graph.countNodes();
  }
  if (graph.showEdges()) {
    max+=graph.countUnidirectionalEdges() + graph.countBidirectionalEdges();
    if (graph.showSelfLoops()) {
      max+=graph.countSelfLoops();
    }
  }
  Progress.switchToDeterminate(progress,max);
  buildDOM(graphSheet,supportSize);
  SVGTranscoder t=new SVGTranscoder();
  t.addTranscodingHint(SVGTranscoder.KEY_XML_DECLARATION,new String(""String_Node_Str""));
  TranscoderInput input=new TranscoderInput(doc);
  try {
    TranscoderOutput output=new TranscoderOutput(new OutputStreamWriter(new WriterOutputStream(writer),Charset.forName(""String_Node_Str"")));
    t.transcode(input,output);
  }
  finally {
    writer.close();
  }
  Progress.finish(progress);
}",0.957341715312079
142864,"@Test public void testNode(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  NodeDraftGetter n1=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n2=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n3=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n4=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n5=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n6=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n7=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n8=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n9=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotNull(n3);
  assertNotNull(n4);
  assertNotNull(n5);
  assertNotNull(n6);
  assertNotNull(n7);
  assertNotNull(n8);
  assertNotNull(n9);
  ContainerUnloader unloader=container.getUnloader();
  AttributeColumn col0=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col1=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col2=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col3=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col4=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",n1.getLabel());
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[1]));
    AttributeValue[] values1=n1.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values1[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values1[col3.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values1[col0.getIndex()].getValue()).getValue());
    assertEquals(new Float(1),((DynamicType)values1[col3.getIndex()].getValue()).getValue());
    AttributeValue[] values2=n2.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values2[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values2[col2.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values2[col0.getIndex()].getValue()).getValue());
    assertEquals(new StringList(""String_Node_Str""),values2[col2.getIndex()].getValue());
    AttributeValue[] values3=n3.getAttributeRow().getValues();
    DynamicType val4=(DynamicType)values3[col4.getIndex()].getValue();
    double low=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    double high=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    assertEquals(new Float(3f),val4.getValue(low,high));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
    assertEquals(2,n3.getTimeInterval().getValues().size());
    container.verify();
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[1]));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  container.closeLoader();
  System.out.println(container.getReport().getText());
}","@Test public void testNode(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  NodeDraftGetter n1=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n2=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n3=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n4=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n5=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n6=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n7=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n8=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n9=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotNull(n3);
  assertNotNull(n4);
  assertNotNull(n5);
  assertNotNull(n6);
  assertNotNull(n7);
  assertNotNull(n8);
  assertNotNull(n9);
  ContainerUnloader unloader=container.getUnloader();
  AttributeColumn col0=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col1=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col2=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col3=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col4=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",n1.getLabel());
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[1]));
    AttributeValue[] values1=n1.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values1[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values1[col3.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values1[col0.getIndex()].getValue()).getValue());
    assertEquals(new Float(1),((DynamicType)values1[col3.getIndex()].getValue()).getValue());
    AttributeValue[] values2=n2.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values2[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values2[col2.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values2[col0.getIndex()].getValue()).getValue());
    assertEquals(new StringList(""String_Node_Str""),values2[col2.getIndex()].getValue());
    AttributeValue[] values3=n3.getAttributeRow().getValues();
    DynamicType val4=(DynamicType)values3[col4.getIndex()].getValue();
    double low=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    double high=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    assertEquals(new Float(3f),val4.getValue(low,high));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
    assertEquals(2,n3.getTimeInterval().getValues().size());
    container.verify();
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  container.closeLoader();
  System.out.println(container.getReport().getText());
}",0.944084097517334
142865,"public synchronized void removeColumn(AttributeColumn column){
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}","public synchronized void removeColumn(AttributeColumn column){
  int index=columns.indexOf(column);
  if (index == -1) {
    return;
  }
  AttributeColumnImpl c;
  for (index=index + 1; index < columns.size(); index++) {
    c=columns.get(index);
    c.index--;
  }
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}",0.8031037827352085
142866,"/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mAvgInDegree+ ""String_Node_Str""+ mAvgOutDegree+ ""String_Node_Str"");
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mAvgDegree+ ""String_Node_Str""+ mAvgInDegree+ ""String_Node_Str""+ mAvgOutDegree+ ""String_Node_Str"");
  return report;
}",0.9395509499136442
142867,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (graphModel.isDirected()) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  Graph graph=graphModel.getGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      row.setValue(inCol,directedGraph.getInDegree(n));
      row.setValue(outCol,directedGraph.getOutDegree(n));
      mAvgInDegree+=directedGraph.getInDegree(n);
      mAvgOutDegree+=directedGraph.getOutDegree(n);
    }
    row.setValue(degCol,graph.getDegree(n));
    mAvgDegree+=graph.getDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.8147004323656578
142868,"protected void createPropertiesColumn(){
  PropertiesColumn[] columnsForNodeTable={PropertiesColumn.NODE_ID,PropertiesColumn.NODE_LABEL};
  PropertiesColumn[] columnsForEdgeTable={PropertiesColumn.EDGE_ID,PropertiesColumn.EDGE_LABEL};
  for (  PropertiesColumn columnForNodeTable : columnsForNodeTable)   nodeTable.addPropertiesColumn(columnForNodeTable);
  for (  PropertiesColumn columnForEdgeTable : columnsForEdgeTable)   edgeTable.addPropertiesColumn(columnForEdgeTable);
}","protected void createPropertiesColumn(){
  PropertiesColumn[] columnsForNodeTable={PropertiesColumn.NODE_ID,PropertiesColumn.NODE_LABEL};
  PropertiesColumn[] columnsForEdgeTable={PropertiesColumn.EDGE_ID,PropertiesColumn.EDGE_LABEL,PropertiesColumn.EDGE_WEIGHT};
  for (  PropertiesColumn columnForNodeTable : columnsForNodeTable)   nodeTable.addPropertiesColumn(columnForNodeTable);
  for (  PropertiesColumn columnForEdgeTable : columnsForEdgeTable)   edgeTable.addPropertiesColumn(columnForEdgeTable);
}",0.9705583756345176
142869,"public AbstractEdge(AbstractEdge edge,AbstractNode source,AbstractNode target){
  this.source=source;
  this.target=target;
  this.ID=edge.ID;
  this.edgeData=edge.edgeData;
  this.weight=edge.weight;
}","public AbstractEdge(AbstractEdge edge,AbstractNode source,AbstractNode target){
  this.source=source;
  this.target=target;
  this.ID=edge.ID;
  this.edgeData=edge.edgeData;
}",0.9283819628647216
142870,"public float getWeight(){
  return weight;
}","public float getWeight(){
  return edgeData.getWeight();
}",0.8431372549019608
142871,"public void setWeight(float weight){
  this.weight=weight;
}","public void setWeight(float weight){
  edgeData.setWeight(weight);
}",0.78125
142872,"public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount + edgeWeight) / (edgeCount + 1);
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}","public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount + edgeWeight) / (edgeCount + 1);
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}",0.9856781802864364
142873,"public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount - edgeWeight) / (edgeCount - 1);
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}","public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount - edgeWeight) / (edgeCount - 1);
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}",0.985774058577406
142874,"public MetaEdgeImpl(int ID,AbstractNode source,AbstractNode target){
  super(ID,source,target);
  this.weight=0f;
}","public MetaEdgeImpl(int ID,AbstractNode source,AbstractNode target){
  super(ID,source,target);
  setWeight(0f);
}",0.9519650655021834
142875,"public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (edge.getSource() == metaEdge.getSource() || edge.getSource() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight+=edgeWeight / div;
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}","public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (edge.getSource() == metaEdge.getSource() || edge.getSource() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight+=edgeWeight / div;
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}",0.984186046511628
142876,"public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight-=edgeWeight / div;
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}","public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight-=edgeWeight / div;
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}",0.9830508474576272
142877,"private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}","private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
        dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}",0.7912885662431942
142878,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.98280759455823
142879,"@Test public void testAttributeModel(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  ContainerUnloader unloader=container.getUnloader();
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getEdgeTable().getColumn(""String_Node_Str"",AttributeType.FLOAT));
}","@Test public void testAttributeModel(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  ContainerUnloader unloader=container.getUnloader();
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getEdgeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
}",0.9974570883661792
142880,"public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          Node nodeParent=graph.getParent(node);
          if (nodeParent != null) {
            parents.add(nodeParent);
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null) {
            Node nodeParent=graph.getParent(node);
            if (nodeParent != null) {
              parents.add(nodeParent);
            }
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9213389121338912
142881,"public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (node != null && graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.9859525899912204
142882,"public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}","public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (node != null && graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (node != null && graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}",0.9775596072931276
142883,"public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5379146919431279
142884,"public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    graph.removeNode(nodeData.getRootNode());
  }
}","public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl model : selectedNodeModels) {
    NodeData nodeData=(NodeData)model.getObj();
    Node node=nodeData.getRootNode();
    if (node != null) {
      graph.removeNode(node);
    }
  }
}",0.828169014084507
142885,"public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.9857651245551602
142886,"public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9897172236503856
142887,"public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5390070921985816
142888,"public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.9856887298747764
142889,"public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final Node[] newGroup=new Node[selectedNodeModels.length];
  for (int i=0; i < selectedNodeModels.length; i++) {
    newGroup[i]=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup);
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.length + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final List<Node> newGroup=new ArrayList<Node>();
  for (int i=0; i < selectedNodeModels.length; i++) {
    Node node=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
    if (node != null) {
      newGroup.add(node);
    }
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup.toArray(new Node[0]));
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.size() + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.7977087729876394
142890,"public void setValue(FilterProperty property,Object value,Callback callback){
  if (model != null) {
    Query query=model.getQuery(property.getFilter());
    if (query == null) {
      callback.setValue(value);
      return;
    }
    AbstractQueryImpl rootQuery=((AbstractQueryImpl)query).getRoot();
    FilterThread filterThread=null;
    if ((filterThread=model.getFilterThread()) != null && model.getCurrentQuery() == rootQuery) {
      filterThread.addModifier(new PropertyModifier(query,property,value,callback));
      filterThread.setRootQuery(rootQuery);
    }
 else {
      callback.setValue(value);
      model.updateParameters(query);
    }
  }
}","public void setValue(FilterProperty property,Object value,Callback callback){
  if (model != null) {
    Query query=model.getQuery(property.getFilter());
    if (query == null) {
      callback.setValue(value);
      return;
    }
    AbstractQueryImpl rootQuery=((AbstractQueryImpl)query).getRoot();
    FilterThread filterThread=null;
    if ((filterThread=model.getFilterThread()) != null && model.getCurrentQuery() == rootQuery) {
      filterThread.addModifier(new PropertyModifier(query,property,value,callback));
      filterThread.setRootQuery(rootQuery);
    }
 else {
      callback.setValue(value);
      model.updateParameters(query);
    }
  }
 else {
    callback.setValue(value);
  }
}",0.9691176470588236
142891,"private Query readQuery(Element queryE){
  String builderClassName=queryE.getAttribute(""String_Node_Str"");
  FilterBuilder builder=null;
  for (  FilterBuilder fb : filterLibraryImpl.getLookup().lookupAll(FilterBuilder.class)) {
    if (fb.getClass().getName().equals(builderClassName)) {
      builder=fb;
    }
  }
  if (builder != null) {
    Filter filter=builder.getFilter();
    FilterController fc=Lookup.getDefault().lookup(FilterController.class);
    Query query=fc.createQuery(filter);
    NodeList paramList=queryE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < paramList.getLength(); i++) {
      Node n=paramList.item(i);
      if (n.getNodeType() == Node.ELEMENT_NODE) {
        Element paramE=(Element)n;
        int index=Integer.parseInt(paramE.getAttribute(""String_Node_Str""));
        FilterProperty property=query.getFilter().getProperties()[index];
        try {
          PropertyEditor editor=property.getPropertyEditor();
          if (editor == null) {
            editor=PropertyEditorManager.findEditor(property.getValueType());
          }
          if (editor != null) {
            String textValue=paramE.getTextContent();
            editor.setAsText(textValue);
            property.setValue(editor.getValue());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    return query;
  }
  return null;
}","private Query readQuery(Element queryE){
  String builderClassName=queryE.getAttribute(""String_Node_Str"");
  FilterBuilder builder=null;
  for (  FilterBuilder fb : filterLibraryImpl.getLookup().lookupAll(FilterBuilder.class)) {
    if (fb.getClass().getName().equals(builderClassName)) {
      builder=fb;
    }
  }
  if (builder != null) {
    Filter filter=builder.getFilter();
    FilterController fc=Lookup.getDefault().lookup(FilterController.class);
    Query query=fc.createQuery(filter);
    NodeList paramList=queryE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < paramList.getLength(); i++) {
      Node n=paramList.item(i);
      if (n.getNodeType() == Node.ELEMENT_NODE) {
        Element paramE=(Element)n;
        int index=Integer.parseInt(paramE.getAttribute(""String_Node_Str""));
        FilterProperty property=query.getFilter().getProperties()[index];
        try {
          PropertyEditor editor=property.getPropertyEditor();
          if (editor == null) {
            editor=PropertyEditorManager.findEditor(property.getValueType());
          }
          if (editor != null) {
            String textValue=paramE.getTextContent();
            editor.setAsText(textValue);
            property.setValue(editor.getValue());
            updateParameters(query);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    return query;
  }
  return null;
}",0.987031195233088
142892,"public synchronized void removeColumn(AttributeColumn column){
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}","public synchronized void removeColumn(AttributeColumn column){
  int index=columns.indexOf(column);
  if (index == -1) {
    return;
  }
  AttributeColumnImpl c;
  for (index=index + 1; index < columns.size(); index++) {
    c=columns.get(index);
    c.index--;
  }
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}",0.8031037827352085
142893,"public AbstractEdge newEdge(String id,Node source,Node target,float weight,boolean directed){
  if (source == null || target == null) {
    throw new NullPointerException();
  }
  AbstractNode nodeSource=(AbstractNode)source;
  AbstractNode nodeTarget=(AbstractNode)target;
  AbstractEdge edge;
  if (source == target) {
    edge=new SelfLoopImpl(idGen.newEdgeId(),nodeSource);
  }
 else {
    edge=new MixedEdgeImpl(idGen.newEdgeId(),nodeSource,nodeTarget,directed);
  }
  edge.setWeight(weight);
  edge.setAttributes(newEdgeAttributes());
  edge.getEdgeData().setTextData(newTextData());
  if (id != null) {
    edge.getEdgeData().setId(id);
  }
 else {
    edge.getEdgeData().setId(""String_Node_Str"" + edge.getId());
  }
  return edge;
}","public AbstractEdge newEdge(String id,Node source,Node target,float weight,boolean directed){
  if (source == null || target == null) {
    throw new NullPointerException();
  }
  AbstractNode nodeSource=(AbstractNode)source;
  AbstractNode nodeTarget=(AbstractNode)target;
  AbstractEdge edge;
  if (source == target) {
    edge=new SelfLoopImpl(idGen.newEdgeId(),nodeSource);
  }
 else {
    edge=new MixedEdgeImpl(idGen.newEdgeId(),nodeSource,nodeTarget,directed);
  }
  edge.setAttributes(newEdgeAttributes());
  edge.setWeight(weight);
  edge.getEdgeData().setTextData(newTextData());
  if (id != null) {
    edge.getEdgeData().setId(id);
  }
 else {
    edge.getEdgeData().setId(""String_Node_Str"" + edge.getId());
  }
  return edge;
}",0.941891891891892
142894,"protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.9868500910378312
142895,"protected void flushToEdge(EdgeDraftGetter edgeDraft,Edge edge){
  if (edgeDraft.getColor() != null) {
    edge.getEdgeData().setR(edgeDraft.getColor().getRed() / 255f);
    edge.getEdgeData().setG(edgeDraft.getColor().getGreen() / 255f);
    edge.getEdgeData().setB(edgeDraft.getColor().getBlue() / 255f);
  }
 else {
    edge.getEdgeData().setR(-1f);
    edge.getEdgeData().setG(-1f);
    edge.getEdgeData().setB(-1f);
  }
  if (edgeDraft.getLabel() != null) {
    edge.getEdgeData().setLabel(edgeDraft.getLabel());
  }
  if (edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setVisible(edgeDraft.isLabelVisible());
  }
  if (edgeDraft.getLabelSize() != -1f && edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setSize(edgeDraft.getLabelSize());
  }
  if (edgeDraft.getLabelColor() != null && edge.getEdgeData().getTextData() != null) {
    Color labelColor=edgeDraft.getLabelColor();
    edge.getEdgeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (edgeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getEdgeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    edge.getEdgeData().getAttributes().setValue(col.getIndex(),edgeDraft.getTimeInterval());
  }
  if (edge.getEdgeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)edge.getEdgeData().getAttributes();
    for (    AttributeValue val : edgeDraft.getAttributeRow().getValues()) {
      if (val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToEdge(EdgeDraftGetter edgeDraft,Edge edge){
  if (edgeDraft.getColor() != null) {
    edge.getEdgeData().setR(edgeDraft.getColor().getRed() / 255f);
    edge.getEdgeData().setG(edgeDraft.getColor().getGreen() / 255f);
    edge.getEdgeData().setB(edgeDraft.getColor().getBlue() / 255f);
  }
 else {
    edge.getEdgeData().setR(-1f);
    edge.getEdgeData().setG(-1f);
    edge.getEdgeData().setB(-1f);
  }
  if (edgeDraft.getLabel() != null) {
    edge.getEdgeData().setLabel(edgeDraft.getLabel());
  }
  if (edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setVisible(edgeDraft.isLabelVisible());
  }
  if (edgeDraft.getLabelSize() != -1f && edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setSize(edgeDraft.getLabelSize());
  }
  if (edgeDraft.getLabelColor() != null && edge.getEdgeData().getTextData() != null) {
    Color labelColor=edgeDraft.getLabelColor();
    edge.getEdgeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (edgeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getEdgeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    edge.getEdgeData().getAttributes().setValue(col.getIndex(),edgeDraft.getTimeInterval());
  }
  if (edge.getEdgeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)edge.getEdgeData().getAttributes();
    for (    AttributeValue val : edgeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.9827723297111052
142896,"private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
        dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}","private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        if (deletedEdges[j] != null) {
          dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
          dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
        }
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}",0.9735924265072248
142897,"public void readXML(Element textModelElement){
  Element showNodeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showNodeLabels=Boolean.parseBoolean(showNodeE.getAttribute(""String_Node_Str""));
  Element showEdgeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showEdgeLabels=Boolean.parseBoolean(showEdgeE.getAttribute(""String_Node_Str""));
  Element selectedOnlyE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  selectedOnly=Boolean.parseBoolean(selectedOnlyE.getAttribute(""String_Node_Str""));
  Element nodeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String nodeFontName=nodeFontE.getAttribute(""String_Node_Str"");
  int nodeFontSize=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  int nodeFontStyle=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  nodeFont=new Font(nodeFontName,nodeFontStyle,nodeFontSize);
  Element edgeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String edgeFontName=edgeFontE.getAttribute(""String_Node_Str"");
  int edgeFontSize=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  int edgeFontStyle=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  edgeFont=new Font(edgeFontName,edgeFontStyle,edgeFontSize);
  Element nodeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeColor=ColorUtils.decode(nodeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element edgeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeColor=ColorUtils.decode(edgeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element nodeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeSizeFactor=Float.parseFloat(nodeSizeFactorE.getTextContent());
  Element edgeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeSizeFactor=Float.parseFloat(edgeSizeFactorE.getTextContent());
  Element colorModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String colorModeClass=colorModeE.getAttribute(""String_Node_Str"");
  if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[1];
  }
  Element sizeModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String sizeModeClass=sizeModeE.getAttribute(""String_Node_Str"");
  if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[2];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[1];
  }
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  if (attributeController != null && attributeController.getModel() != null) {
    AttributeModel attributeModel=attributeController.getModel();
    List<AttributeColumn> nodeCols=new ArrayList<AttributeColumn>();
    List<AttributeColumn> edgeCols=new ArrayList<AttributeColumn>();
    Element nodeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList nodeColumnList=nodeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeColumnList.getLength(); i++) {
      if (nodeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element nodeColumnE=(Element)nodeColumnList.item(i);
        String id=nodeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getNodeTable().getColumn(id);
        if (col != null) {
          nodeCols.add(col);
        }
      }
    }
    Element edgeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList edgeColumnList=edgeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < edgeColumnList.getLength(); i++) {
      if (edgeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element edgeColumnE=(Element)edgeColumnList.item(i);
        String id=edgeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getEdgeTable().getColumn(id);
        if (col != null) {
          edgeCols.add(col);
        }
      }
    }
    nodeTextColumns=nodeCols.toArray(new AttributeColumn[0]);
    edgeTextColumns=edgeCols.toArray(new AttributeColumn[0]);
  }
}","public void readXML(Element textModelElement){
  Element showNodeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showNodeLabels=Boolean.parseBoolean(showNodeE.getAttribute(""String_Node_Str""));
  Element showEdgeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showEdgeLabels=Boolean.parseBoolean(showEdgeE.getAttribute(""String_Node_Str""));
  Element selectedOnlyE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  selectedOnly=Boolean.parseBoolean(selectedOnlyE.getAttribute(""String_Node_Str""));
  Element nodeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String nodeFontName=nodeFontE.getAttribute(""String_Node_Str"");
  int nodeFontSize=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  int nodeFontStyle=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  nodeFont=new Font(nodeFontName,nodeFontStyle,nodeFontSize);
  Element edgeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String edgeFontName=edgeFontE.getAttribute(""String_Node_Str"");
  int edgeFontSize=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  int edgeFontStyle=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  edgeFont=new Font(edgeFontName,edgeFontStyle,edgeFontSize);
  Element nodeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeColor=ColorUtils.decode(nodeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element edgeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeColor=ColorUtils.decode(edgeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element nodeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeSizeFactor=Float.parseFloat(nodeSizeFactorE.getTextContent());
  Element edgeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeSizeFactor=Float.parseFloat(edgeSizeFactorE.getTextContent());
  Element colorModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String colorModeClass=colorModeE.getAttribute(""String_Node_Str"");
  if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[1];
  }
  Element sizeModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String sizeModeClass=sizeModeE.getAttribute(""String_Node_Str"");
  if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[0];
  }
 else   if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[2];
  }
 else   if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[1];
  }
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  if (attributeController != null && attributeController.getModel() != null) {
    AttributeModel attributeModel=attributeController.getModel();
    List<AttributeColumn> nodeCols=new ArrayList<AttributeColumn>();
    List<AttributeColumn> edgeCols=new ArrayList<AttributeColumn>();
    Element nodeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList nodeColumnList=nodeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeColumnList.getLength(); i++) {
      if (nodeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element nodeColumnE=(Element)nodeColumnList.item(i);
        String id=nodeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getNodeTable().getColumn(id);
        if (col != null) {
          nodeCols.add(col);
        }
      }
    }
    Element edgeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList edgeColumnList=edgeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < edgeColumnList.getLength(); i++) {
      if (edgeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element edgeColumnE=(Element)edgeColumnList.item(i);
        String id=edgeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getEdgeTable().getColumn(id);
        if (col != null) {
          edgeCols.add(col);
        }
      }
    }
    nodeTextColumns=nodeCols.toArray(new AttributeColumn[0]);
    edgeTextColumns=edgeCols.toArray(new AttributeColumn[0]);
  }
}",0.998109640831758
142898,"/** 
 * Used for iterating through all nodes of the graph
 * @return Array with all graph nodes
 */
private Node[] getNodesArray(){
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  return graph.getNodes().toArray();
}","/** 
 * Used for iterating through all nodes of the graph
 * @return Array with all graph nodes
 */
private Node[] getNodesArray(){
  return Lookup.getDefault().lookup(GraphController.class).getModel().getHierarchicalGraph().getNodesTree().toArray();
}",0.5854616895874263
142899,"public void select(Workspace workspace){
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  refreshAll();
}","public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  refreshAll();
}",0.9069958847736626
142900,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9818801300913736
142901,"public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          Node nodeParent=graph.getParent(node);
          if (nodeParent != null) {
            parents.add(nodeParent);
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null) {
            Node nodeParent=graph.getParent(node);
            if (nodeParent != null) {
              parents.add(nodeParent);
            }
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9213389121338912
142902,"public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (node != null && graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.9859525899912204
142903,"public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}","public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (node != null && graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (node != null && graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}",0.9775596072931276
142904,"public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5379146919431279
142905,"public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    graph.removeNode(nodeData.getRootNode());
  }
}","public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl model : selectedNodeModels) {
    NodeData nodeData=(NodeData)model.getObj();
    Node node=nodeData.getRootNode();
    if (node != null) {
      graph.removeNode(node);
    }
  }
}",0.828169014084507
142906,"public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.9857651245551602
142907,"public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9897172236503856
142908,"public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5390070921985816
142909,"public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.9856887298747764
142910,"public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final Node[] newGroup=new Node[selectedNodeModels.length];
  for (int i=0; i < selectedNodeModels.length; i++) {
    newGroup[i]=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup);
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.length + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final List<Node> newGroup=new ArrayList<Node>();
  for (int i=0; i < selectedNodeModels.length; i++) {
    Node node=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
    if (node != null) {
      newGroup.add(node);
    }
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup.toArray(new Node[0]));
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.size() + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.7977087729876394
142911,"public void unselectAll(){
  filterProperties[1].setValue(new ArrayList<Part>());
}","public void unselectAll(){
  getProperties()[1].setValue(new ArrayList<Part>());
}",0.9454545454545454
142912,"public void removePart(Part part){
  List<Part> newParts=new ArrayList<Part>(parts);
  if (newParts.remove(part)) {
    filterProperties[1].setValue(newParts);
  }
}","public void removePart(Part part){
  List<Part> newParts=new ArrayList<Part>(parts);
  if (newParts.remove(part)) {
    getProperties()[1].setValue(newParts);
  }
}",0.972644376899696
142913,"public void selectAll(){
  filterProperties[1].setValue(Arrays.asList(partition.getParts()));
}","public void selectAll(){
  getProperties()[1].setValue(Arrays.asList(partition.getParts()));
}",0.9523809523809524
142914,"public void addPart(Part part){
  if (!parts.contains(part)) {
    List<Part> newParts=new ArrayList<Part>(parts.size() + 1);
    newParts.addAll(parts);
    newParts.add(part);
    filterProperties[1].setValue(newParts);
  }
}","public void addPart(Part part){
  if (!parts.contains(part)) {
    List<Part> newParts=new ArrayList<Part>(parts.size() + 1);
    newParts.addAll(parts);
    newParts.add(part);
    getProperties()[1].setValue(newParts);
  }
}",0.9757174392935982
142915,"private SearchResult matchRegex(Object value,SearchOptions searchOptions,int rowIndex,int columnIndex){
  boolean found;
  String str=value != null ? value.toString() : ""String_Node_Str"";
  Matcher matcher=searchOptions.getRegexPattern().matcher(str);
  if (searchOptions.getRegionStart() >= str.length()) {
    return null;
  }
  if (searchOptions.isOnlyMatchWholeAttributeValue()) {
    found=matcher.matches();
  }
 else {
    matcher.region(searchOptions.getRegionStart(),str.length());
    found=matcher.find();
  }
  if (found) {
    searchOptions.setStartingRow(rowIndex);
    searchOptions.setStartingColumn(columnIndex);
    searchOptions.setRegionStart(matcher.end() + 1);
    return new SearchResult(searchOptions,null,null,rowIndex,columnIndex,matcher.start(),matcher.end());
  }
 else {
    return null;
  }
}","private SearchResult matchRegex(Object value,SearchOptions searchOptions,int rowIndex,int columnIndex){
  boolean found;
  String str=value != null ? value.toString() : ""String_Node_Str"";
  Matcher matcher=searchOptions.getRegexPattern().matcher(str);
  if (searchOptions.getRegionStart() >= str.length()) {
    return null;
  }
  if (searchOptions.isOnlyMatchWholeAttributeValue()) {
    found=matcher.matches();
  }
 else {
    matcher.region(searchOptions.getRegionStart(),str.length());
    found=matcher.find();
  }
  if (found) {
    searchOptions.setStartingRow(rowIndex);
    searchOptions.setStartingColumn(columnIndex);
    searchOptions.setRegionStart(matcher.end());
    return new SearchResult(searchOptions,null,null,rowIndex,columnIndex,matcher.start(),matcher.end());
  }
 else {
    return null;
  }
}",0.997560975609756
142916,"public void execute(){
  SearchReplaceUI ui=Lookup.getDefault().lookup(SearchReplaceUI.class);
  if (Lookup.getDefault().lookup(DataTablesController.class).isNodeTableMode()) {
    ui.setMode(SearchReplaceUI.Mode.NODES_TABLE);
  }
 else {
    ui.setMode(SearchReplaceUI.Mode.EDGES_TABLE);
  }
  DialogDescriptor dd=new DialogDescriptor(ui,getName());
  dd.setModal(false);
  dd.setOptions(new Object[]{NbBundle.getMessage(SearchReplace.class,""String_Node_Str"")});
  DialogDisplayer.getDefault().notify(dd);
}","public void execute(){
  SearchReplaceUI ui=Lookup.getDefault().lookup(SearchReplaceUI.class);
  if (Lookup.getDefault().lookup(DataTablesController.class).isNodeTableMode()) {
    ui.setMode(SearchReplaceUI.Mode.NODES_TABLE);
  }
 else {
    ui.setMode(SearchReplaceUI.Mode.EDGES_TABLE);
  }
  DialogDescriptor dd=new DialogDescriptor(ui,getName());
  dd.setModal(true);
  dd.setOptions(new Object[]{NbBundle.getMessage(SearchReplace.class,""String_Node_Str"")});
  DialogDisplayer.getDefault().notify(dd);
}",0.993103448275862
142917,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9961117002474372
142918,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localImportDialogTitle);
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.CANCEL_OPTION)       return;
      final File neo4jDirectory=fileChooser.getSelectedFile();
      if (graphDB != null)       graphDB.shutdown();
      graphDB=Neo4jUtils.localDatabase(neo4jDirectory);
      String traversalDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      final TraversalPanel traversalPanel=new TraversalPanel(graphDB);
      ValidationPanel validationPanel=traversalPanel.createValidationPanel();
      if (validationPanel.showOkCancelDialog(traversalDialogTitle)) {
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
          final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
          LongTaskExecutor executor=new LongTaskExecutor(true);
          executor.execute((LongTask)neo4jImporter,new Runnable(){
            @Override public void run(){
              neo4jImporter.importDatabase(graphDB,traversalPanel.getStartNodeId(),traversalPanel.getOrder(),traversalPanel.getMaxDepth(),traversalPanel.getRelationshipInfos());
            }
          }
);
        }
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localExportDialogTitle);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteImportDialogTitle)) {
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            if (graphDB != null)             graphDB.shutdown();
            graphDB=Neo4jUtils.remoteDatabase(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
            neo4jImporter.importDatabase(graphDB);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteExportDialogTitle)) {
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportRemote(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
          }
        }
);
      }
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localImportDialogTitle);
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      Neo4jCustomDirectoryProvider.setEnabled(false);
      if (dialogResult == JFileChooser.CANCEL_OPTION)       return;
      final File neo4jDirectory=fileChooser.getSelectedFile();
      if (graphDB != null)       graphDB.shutdown();
      graphDB=Neo4jUtils.localDatabase(neo4jDirectory);
      String traversalDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      final TraversalPanel traversalPanel=new TraversalPanel(graphDB);
      ValidationPanel validationPanel=traversalPanel.createValidationPanel();
      if (validationPanel.showOkCancelDialog(traversalDialogTitle)) {
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
          final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
          LongTaskExecutor executor=new LongTaskExecutor(true);
          executor.execute((LongTask)neo4jImporter,new Runnable(){
            @Override public void run(){
              neo4jImporter.importDatabase(graphDB,traversalPanel.getStartNodeId(),traversalPanel.getOrder(),traversalPanel.getMaxDepth(),traversalPanel.getRelationshipInfos());
            }
          }
);
        }
      }
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localExportDialogTitle);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteImportDialogTitle)) {
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            if (graphDB != null)             graphDB.shutdown();
            graphDB=Neo4jUtils.remoteDatabase(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
            neo4jImporter.importDatabase(graphDB);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteExportDialogTitle)) {
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportRemote(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
          }
        }
);
      }
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.9897338403041824
142919,"public Object getValue(){
  if (!column.getOrigin().isDelegate())   return value;
 else {
    Object delegateIdValue=row.getDelegateIdValue();
    PropertiesColumn propertiesColumn=column.getOrigin().getPropertiesColumn();
    AttributeValueDelegateProvider attributeValueDelegateProvider=PropertyColumnToAttributeValueDelegateProviderMapper.getInstance().get(propertiesColumn);
    if (row.attributeTable.isEdgeTable())     return attributeValueDelegateProvider.getEdgeValue(column,delegateIdValue);
 else     if (row.attributeTable.isNodeTable())     return attributeValueDelegateProvider.getNodeValue(column,delegateIdValue);
 else     throw new AssertionError();
  }
}","public Object getValue(){
  if (!column.getOrigin().isDelegate()) {
    System.out.println(""String_Node_Str"" + column.getOrigin());
    System.out.println(""String_Node_Str"" + column.getOrigin().isDelegate());
    System.out.println();
    return value;
  }
 else {
    System.out.println(""String_Node_Str"");
    Object delegateIdValue=1L;
    PropertiesColumn propertiesColumn=column.getOrigin().getPropertiesColumn();
    AttributeValueDelegateProvider attributeValueDelegateProvider=PropertyColumnToAttributeValueDelegateProviderMapper.getInstance().get(propertiesColumn);
    return attributeValueDelegateProvider.getEdgeValue(column,delegateIdValue);
  }
}",0.6126126126126126
142920,"void setAttributeRow(AttributeRowImpl row){
  this.row=row;
}","void setAttributeRow(AttributeRowImpl row){
  System.out.println(""String_Node_Str"" + row);
  this.row=row;
}",0.7218934911242604
142921,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.8534283916963724
142922,"@Override public void run(){
  neo4jImporter.importLocal(neo4jDirectory);
}","@Override public void run(){
  neo4jExporter.exportLocal(neo4jDirectory);
}",0.9466666666666668
142923,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}","public void select(Workspace workspace){
  hideTable();
  enableControls();
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.7874015748031497
142924,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    clear();
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.8487848784878488
142925,"private void clear(){
  tableScrollPane.setViewport(null);
}","private void clear(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  hideTable();
}",0.2339181286549707
142926,"private void refresh(){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    initEdgesView();
  }
}","private void refresh(){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    nodesButton.setSelected(true);
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    edgesButton.setSelected(true);
    initEdgesView();
  }
}",0.841897233201581
142927,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      hideTable();
      enableControls();
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9103406140216892
142928,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}","public void disable(){
  clear();
}",0.2229299363057325
142929,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}",0.9297297297297298
142930,"public void refreshModel(StatisticsModel model){
  currentModel=model;
  if (model == null) {
    runButton.setText(RUN);
    runButton.setEnabled(false);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    currentStatistics=null;
    return;
  }
  runButton.setEnabled(true);
  if (model.isRunning(statisticsUI)) {
    runButton.setText(CANCEL);
    busyLabel.setVisible(true);
    busyLabel.setBusy(true);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
  }
 else {
    runButton.setText(RUN);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    currentStatistics=null;
    refreshResult(model);
  }
}","public void refreshModel(StatisticsModel model){
  currentModel=model;
  if (model == null) {
    runButton.setText(RUN);
    runButton.setEnabled(false);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    currentStatistics=null;
    return;
  }
  runButton.setEnabled(true);
  if (model.isRunning(statisticsUI)) {
    runButton.setText(CANCEL);
    busyLabel.setVisible(true);
    busyLabel.setBusy(true);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    if (currentStatistics == null) {
      currentStatistics=currentModel.getStatistics(statisticsUI);
    }
  }
 else {
    runButton.setText(RUN);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    currentStatistics=null;
    refreshResult(model);
  }
}",0.9318323952470294
142931,"public void run(){
  pStatistics.execute(graphModel,attributeModel);
  for (  StatisticsUI s : uis) {
    model.setRunning(s,false);
  }
  model.addStatistics(pStatistics);
}","public void run(){
  pStatistics.execute(graphModel,attributeModel);
  for (  StatisticsUI s : uis) {
    model.setRunning(s,false);
  }
}",0.8846153846153846
142932,"/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
    model.setRunning(s,true);
  }
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        for (        StatisticsUI s : uis) {
          model.setRunning(s,false);
        }
        model.addStatistics(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    for (    StatisticsUI s : uis) {
      model.setRunning(s,false);
    }
    model.addStatistics(pStatistics);
  }
}","/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  model.addStatistics(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
    model.setRunning(s,true);
  }
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        for (        StatisticsUI s : uis) {
          model.setRunning(s,false);
        }
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    for (    StatisticsUI s : uis) {
      model.setRunning(s,false);
    }
  }
}",0.95565749235474
142933,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
}","public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.991150442477876
142934,"public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
}","public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
  clear();
}",0.9865361077111384
142935,"private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    initEdgesView();
  }
}","private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt){
  refresh();
}",0.4804469273743016
142936,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  clear();
}",0.8817204301075269
142937,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.9887733887733888
142938,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9886965231077408
142939,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
}","public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}",0.979890310786106
142940,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}",0.9297297297297298
142941,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
}","public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.991150442477876
142942,"public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
}","public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
  clear();
}",0.9865361077111384
142943,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  clear();
}",0.8817204301075269
142944,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.9887733887733888
142945,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9886965231077408
142946,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
}","public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}",0.979890310786106
142947,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}",0.9297297297297298
142948,"private JMenuItem createMenuItemFromEdgesManipulator(final EdgesManipulator em){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(em.getName());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      em.execute();
    }
  }
);
  return menuItem;
}","private JMenuItem createMenuItemFromEdgesManipulator(final EdgesManipulator em){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(em.getName());
  menuItem.setIcon(em.getIcon());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      em.execute();
    }
  }
);
  return menuItem;
}",0.9478527607361964
142949,"private JMenuItem createMenuItemFromNodesManipulator(final NodesManipulator nm){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(nm.getName());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nm.execute();
    }
  }
);
  return menuItem;
}","private JMenuItem createMenuItemFromNodesManipulator(final NodesManipulator nm){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(nm.getName());
  menuItem.setIcon(nm.getIcon());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nm.execute();
    }
  }
);
  return menuItem;
}",0.9478527607361964
142950,"private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  propertySheet=new PropertySheet();
  propertySheet.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(propertySheet,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    refreshButton.setEnabled(true);
  }
  PreviewUIController.findInstance();
  ratioSlider.addChangeListener(new ChangeListener(){
    NumberFormat formatter=NumberFormat.getPercentInstance();
    public void stateChanged(    ChangeEvent e){
      float val=ratioSlider.getValue() / 100f;
      if (val == 0f) {
        ratioLabel.setText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
      }
 else {
        ratioLabel.setText(formatter.format(val));
      }
    }
  }
);
  presetComboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      PreviewController pc=Lookup.getDefault().lookup(PreviewController.class);
      PreviewModel previewModel=pc.getModel();
      if (previewModel != null && presetComboBox.getSelectedItem() instanceof PreviewPreset) {
        if (previewModel.getCurrentPreset() != presetComboBox.getSelectedItem()) {
          pc.setCurrentPreset((PreviewPreset)presetComboBox.getSelectedItem());
          propertySheet.setNodes(new Node[]{new PreviewNode()});
        }
      }
    }
  }
);
  svgExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      VectorialFileExporterUI ui=Lookup.getDefault().lookup(VectorialFileExporterUI.class);
      ui.action();
    }
  }
);
  refreshModel();
}","private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  propertySheet=new PropertySheet();
  propertySheet.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(propertySheet,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    enableRefreshButton();
  }
  PreviewUIController.findInstance();
  ratioSlider.addChangeListener(new ChangeListener(){
    NumberFormat formatter=NumberFormat.getPercentInstance();
    public void stateChanged(    ChangeEvent e){
      float val=ratioSlider.getValue() / 100f;
      if (val == 0f) {
        ratioLabel.setText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
      }
 else {
        ratioLabel.setText(formatter.format(val));
      }
    }
  }
);
  presetComboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      PreviewController pc=Lookup.getDefault().lookup(PreviewController.class);
      PreviewModel previewModel=pc.getModel();
      if (previewModel != null && presetComboBox.getSelectedItem() instanceof PreviewPreset) {
        if (previewModel.getCurrentPreset() != presetComboBox.getSelectedItem()) {
          pc.setCurrentPreset((PreviewPreset)presetComboBox.getSelectedItem());
          propertySheet.setNodes(new Node[]{new PreviewNode()});
        }
      }
    }
  }
);
  svgExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      VectorialFileExporterUI ui=Lookup.getDefault().lookup(VectorialFileExporterUI.class);
      ui.action();
    }
  }
);
  refreshModel();
}",0.9934469200524246
142951,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
      LongTaskExecutor executor=new LongTaskExecutor(true);
      executor.execute((LongTask)neo4jImporter,new Runnable(){
        @Override public void run(){
          neo4jImporter.importRemote(""String_Node_Str"");
        }
      }
);
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.9256311121219012
142952,"@Override public void run(){
  neo4jImporter.importLocal(neo4jDirectory);
}","@Override public void run(){
  neo4jImporter.importRemote(""String_Node_Str"");
}",0.7792207792207793
142953,"protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}","protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout.getBuilder();
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}",0.92797783933518
142954,"public void setRunning(boolean running){
  this.running=running;
}","public void setRunning(boolean running){
  this.running=running;
synchronized (this.lock) {
    lock.notify();
  }
}",0.7252747252747253
142955,"@Override public void run(){
  while (running) {
    AbstractQueryImpl q;
    while ((q=rootQuery.getAndSet(null)) == null) {
      try {
synchronized (this.lock) {
          lock.wait();
        }
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    Query modifiedQuery=null;
    for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
      PropertyModifier pm=itr.next();
      itr.remove();
      pm.callback.setValue(pm.value);
      modifiedQuery=pm.query;
    }
    if (modifiedQuery != null) {
      model.updateParameters(modifiedQuery);
    }
    ProgressTicket progressTicket=null;
    ProgressTicketProvider progressTicketProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
    if (progressTicketProvider != null) {
      progressTicket=progressTicketProvider.createTicket(""String_Node_Str"",null);
      Progress.start(progressTicket);
    }
    if (filtering) {
      filter(q);
    }
 else {
      select(q);
    }
    Progress.finish(progressTicket);
  }
  Query q=null;
  for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
    PropertyModifier pm=itr.next();
    pm.callback.setValue(pm.value);
    q=pm.query;
  }
  modifiersMap.clear();
  if (q != null) {
    model.updateParameters(q);
  }
}","@Override public void run(){
  while (running) {
    AbstractQueryImpl q;
    while ((q=rootQuery.getAndSet(null)) == null && running) {
      try {
synchronized (this.lock) {
          lock.wait();
        }
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    if (!running) {
      return;
    }
    Query modifiedQuery=null;
    for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
      PropertyModifier pm=itr.next();
      itr.remove();
      pm.callback.setValue(pm.value);
      modifiedQuery=pm.query;
    }
    if (modifiedQuery != null) {
      model.updateParameters(modifiedQuery);
    }
    ProgressTicket progressTicket=null;
    ProgressTicketProvider progressTicketProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
    if (progressTicketProvider != null) {
      progressTicket=progressTicketProvider.createTicket(""String_Node_Str"",null);
      Progress.start(progressTicket);
    }
    if (filtering) {
      filter(q);
    }
 else {
      select(q);
    }
    Progress.finish(progressTicket);
  }
  Query q=null;
  for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
    PropertyModifier pm=itr.next();
    pm.callback.setValue(pm.value);
    q=pm.query;
  }
  modifiersMap.clear();
  if (q != null) {
    model.updateParameters(q);
  }
}",0.9814612868047984
142956,"private void importXML(InputStream stream,Importer importer,final Container container){
  final Document document=getDocument(stream);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      if (t instanceof OutOfMemoryError) {
        return;
      }
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (xmlImporter.importData(document,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}","private void importXML(final InputStream stream,Importer importer,final Container container){
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      if (t instanceof OutOfMemoryError) {
        return;
      }
      t.printStackTrace();
      NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getCause().getMessage(),NotifyDescriptor.WARNING_MESSAGE);
      DialogDisplayer.getDefault().notify(msg);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        final Document document=getDocument(stream);
        if (xmlImporter.importData(document,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}",0.4880662445202143
142957,"private void importText(InputStream stream,Importer importer,final Container container){
  final LineNumberReader reader=getTextReader(stream);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (textImporter.importData(reader,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}","private void importText(InputStream stream,Importer importer,final Container container){
  final LineNumberReader reader=getTextReader(stream);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      t.printStackTrace();
      NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getCause().getMessage(),NotifyDescriptor.WARNING_MESSAGE);
      DialogDisplayer.getDefault().notify(msg);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (textImporter.importData(reader,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}",0.5111456713322965
142958,"public void addStatistics(Statistics statistics){
  statisticsList.add(statistics);
  fireChangeEvent();
}","public void addStatistics(Statistics statistics){
  if (!statisticsList.contains(statistics)) {
    statisticsList.add(statistics);
    fireChangeEvent();
  }
}",0.7969924812030075
142959,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(""String_Node_Str"");
  AttributeColumn outCol=nodeTable.getColumn(""String_Node_Str"");
  if (inCol == null) {
    inCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree+=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(""String_Node_Str"");
  AttributeColumn outCol=nodeTable.getColumn(""String_Node_Str"");
  if (inCol == null) {
    inCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9877408056042032
142960,"public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    force.multiply((float)(1.0 / maxForce));
    getDisplacement().moveNode(data,force);
  }
  postAlgo();
}","public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
}",0.9866117404737385
142961,"private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 2 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    label=initial_split[1].trim();
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}","private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}",0.9864546525323912
142962,"public TextLine(String text){
  this.text=text;
}","public TextLine(String text,Rectangle2D bounds){
  this.text=text;
  this.bounds=bounds;
}",0.7050359712230215
142963,"public void setLine(String line){
  this.line=new TextLine(line);
}","public void setLine(String line){
  this.line=new TextLine(line,this.line.bounds);
}",0.8874172185430463
142964,"private void deleteNode(AbstractNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    dhns.getGraphStructure().getNodeDictionnary().remove(descendant);
  }
  treeStructure.deleteDescendantAndSelf(node);
}","private void deleteNode(AbstractNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().getNodeDictionnary().remove(descendant);
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}",0.9572815533980582
142965,"protected void setSyntax(StreamTokenizer tk){
  tk.resetSyntax();
  tk.eolIsSignificant(false);
  tk.slashStarComments(true);
  tk.slashSlashComments(true);
  tk.whitespaceChars(0,' ');
  tk.wordChars(' ' + 1,'\u00ff');
  tk.ordinaryChar('[');
  tk.ordinaryChar(']');
  tk.ordinaryChar('{');
  tk.ordinaryChar('}');
  tk.ordinaryChar('-');
  tk.ordinaryChar('>');
  tk.ordinaryChar('/');
  tk.ordinaryChar('*');
  tk.quoteChar('""');
  tk.whitespaceChars(';',';');
  tk.ordinaryChar('=');
}","protected void setSyntax(StreamTokenizer tk){
  tk.resetSyntax();
  tk.eolIsSignificant(false);
  tk.slashStarComments(true);
  tk.slashSlashComments(true);
  tk.whitespaceChars(0,' ');
  tk.wordChars(' ' + 1,'\u00ff');
  tk.ordinaryChar('[');
  tk.ordinaryChar(']');
  tk.ordinaryChar('{');
  tk.ordinaryChar('}');
  tk.ordinaryChar('-');
  tk.ordinaryChar('>');
  tk.ordinaryChar('/');
  tk.ordinaryChar('*');
  tk.ordinaryChar(',');
  tk.quoteChar('""');
  tk.whitespaceChars(';',';');
  tk.ordinaryChar('=');
}",0.9760479041916168
142966,"public Node getPredecessor(Node node){
  return predecessors.get(node).getSource();
}","public Node getPredecessor(Node node){
  Edge edge=predecessors.get(node);
  if (edge != null) {
    if (edge.getSource() != node) {
      return edge.getSource();
    }
 else {
      return edge.getTarget();
    }
  }
  return null;
}",0.46875
142967,"public void compute(){
  graph.readLock();
  Set<Node> nodes=new HashSet<Node>();
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
    nodes.add(node);
    nodeCount++;
  }
  distances.put(sourceNode,0d);
  while (!nodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : nodes) {
      Double dist=distances.get(k);
      if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    Node currentNode=minDistanceNode;
    nodes.remove(currentNode);
    for (    Edge edge : graph.getEdges(currentNode)) {
      Node neighbor=graph.getOpposite(currentNode,edge);
      if (distances.get(neighbor).equals(Double.POSITIVE_INFINITY)) {
        double dist=edgeWeight(edge) + distances.get(currentNode);
        distances.put(neighbor,dist);
        maxDistance=Math.max(maxDistance,dist);
      }
 else {
        double testDistance=distances.get(currentNode) + edgeWeight(edge);
        if (testDistance < distances.get(neighbor)) {
          distances.put(neighbor,testDistance);
          maxDistance=Math.max(maxDistance,testDistance);
        }
      }
    }
  }
  graph.readUnlock();
}","public void compute(){
  graph.readLock();
  Set<Node> nodes=new HashSet<Node>();
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
    nodes.add(node);
    nodeCount++;
  }
  distances.put(sourceNode,0d);
  while (!nodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : nodes) {
      Double dist=distances.get(k);
      if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    Node currentNode=minDistanceNode;
    nodes.remove(currentNode);
    for (    Edge edge : graph.getEdges(currentNode)) {
      Node neighbor=graph.getOpposite(currentNode,edge);
      double dist=edgeWeight(edge) + distances.get(currentNode);
      if (distances.get(neighbor).equals(Double.POSITIVE_INFINITY)) {
        distances.put(neighbor,dist);
        maxDistance=Math.max(maxDistance,dist);
        predecessors.put(neighbor,edge);
      }
 else {
        if (dist < distances.get(neighbor)) {
          distances.put(neighbor,dist);
          maxDistance=Math.max(maxDistance,dist);
          predecessors.put(neighbor,edge);
        }
      }
    }
  }
  graph.readUnlock();
}",0.8654690618762475
142968,"public DijkstraShortestPathAlgorithm(Graph graph,Node sourceNode){
  super(sourceNode);
  this.graph=graph;
}","public DijkstraShortestPathAlgorithm(Graph graph,Node sourceNode){
  super(sourceNode);
  this.graph=graph;
  predecessors=new HashMap<Node,Edge>();
}",0.8416988416988417
142969,"public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget();
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget(view.getViewId());
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.9784366576819408
142970,"public void applyPreset(PreviewPreset preset){
  Map<String,String> propertiesMap=preset.getProperties();
  for (  Property p : getPropertiesMap().values()) {
    try {
      PropertyEditor editor=p.getPropertyEditor();
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(p.getValueType());
      }
      if (editor != null) {
        String valueStr=propertiesMap.get(p.getName());
        if (valueStr != null && !valueStr.isEmpty()) {
          editor.setAsText(valueStr);
          Object value=editor.getValue();
          if (value != null) {
            p.setValue(value);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void applyPreset(PreviewPreset preset){
  Map<String,String> propertiesMap=preset.getProperties();
  for (  Property p : getPropertiesMap().values()) {
    try {
      PropertyEditor editor=p.getPropertyEditor();
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(p.getValueType());
      }
      if (editor != null) {
        String valueStr=propertiesMap.get(p.getName());
        if (valueStr != null && !valueStr.isEmpty()) {
          editor.setAsText(valueStr);
          if (p.getValueType().equals(Font.class)) {
            editor.setValue(Font.decode(valueStr));
          }
          Object value=editor.getValue();
          if (value != null) {
            p.setValue(value);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9233791748526524
142971,"/** 
 * Returns the Processing font related to the given classic font.
 * @param font  a classic font
 * @return      the related Processing font
 */
private PFont getPFont(Font font){
  if (fontMap.containsKey(font)) {
    return fontMap.get(font);
  }
  PFont pFont=createFont(font);
  fontMap.put(font,pFont);
  return pFont;
}","/** 
 * Returns the Processing font related to the given classic font.
 * @param font  a classic font
 * @return      the related Processing font
 */
private PFont getPFont(Font font){
  String fontName=font.getName();
  if (fontMap.containsKey(fontName)) {
    return fontMap.get(fontName);
  }
  PFont pFont=createFont(font);
  fontMap.put(fontName,pFont);
  return pFont;
}",0.9348441926345608
142972,"public void renderEdgeLabel(EdgeLabel label){
  textFont(getPFont(label.getFont()));
  textAlign(CENTER,BASELINE);
  pushMatrix();
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  translate(label.getPosition().getX(),label.getPosition().getY());
  rotate(label.getAngle());
  text(label.getValue(),0,0);
  popMatrix();
}","public void renderEdgeLabel(EdgeLabel label){
  textFont(label.getFont());
  textAlign(CENTER,BASELINE);
  pushMatrix();
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  translate(label.getPosition().getX(),label.getPosition().getY());
  rotate(label.getAngle());
  text(label.getValue(),0,0);
  popMatrix();
}",0.9608938547486032
142973,"/** 
 * Refreshes the preview using the current graph from the preview controller.
 */
public void refresh(){
  PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel model=controller.getModel();
  fontMap.clear();
  if (model != null) {
    uniEdgeMiniLabelFont=getPFont(model.getUniEdgeSupervisor().getMiniLabelFont());
    biEdgeMiniLabelFont=getPFont(model.getBiEdgeSupervisor().getMiniLabelFont());
  }
  redraw();
}","/** 
 * Refreshes the preview using the current graph from the preview controller.
 */
public void refresh(){
  PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel model=controller.getModel();
  if (model != null) {
    uniEdgeMiniLabelFont=getPFont(model.getUniEdgeSupervisor().getMiniLabelFont());
    biEdgeMiniLabelFont=getPFont(model.getBiEdgeSupervisor().getMiniLabelFont());
  }
  redraw();
}",0.9790518191841234
142974,"public void renderNodeLabel(NodeLabel label){
  textFont(getPFont(label.getFont()));
  textAlign(CENTER,CENTER);
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  text(label.getValue(),label.getPosition().getX(),label.getPosition().getY() - (textAscent() + textDescent()) * 0.1f);
}","public void renderNodeLabel(NodeLabel label){
  textFont(label.getFont());
  textAlign(CENTER,CENTER);
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  text(label.getValue(),label.getPosition().getX(),label.getPosition().getY() - (textAscent() + textDescent()) * 0.1f);
}",0.9561128526645768
142975,"/** 
 * Creates a Processing font from a classic font.
 * @param font  a font to transform
 * @return      a Processing font
 */
private PFont createFont(Font font){
  return createFont(font.getName(),font.getSize());
}","/** 
 * Creates a Processing font from a classic font.
 * @param font  a font to transform
 * @return      a Processing font
 */
private PFont createFont(Font font){
  return createFont(font.getName(),1);
}",0.9647058823529412
142976,"public void actionPerformed(ActionEvent e){
  select(tool);
  propertiesBar.select(toolUI.getPropertiesBar(tool));
}","public void actionPerformed(ActionEvent e){
  if (tool == currentTool) {
    toolbar.clearSelection();
    unselect();
  }
 else {
    select(tool);
    propertiesBar.select(toolUI.getPropertiesBar(tool));
  }
}",0.6238532110091743
142977,"public void stateChanged(ChangeEvent e){
  SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
  if (selectionManager.isRectangleSelection() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
    toolbar.clearSelection();
    unselect();
  }
}","public void stateChanged(ChangeEvent e){
  SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
  if (selectionManager.isRectangleSelection() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isDraggingEnabled() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
}",0.8748748748748749
142978,"public JComponent getToolbar(){
  HashMap<ToolUI,Tool> toolMap=new HashMap<ToolUI,Tool>();
  List<ToolUI> toolsUI=new ArrayList<ToolUI>();
  for (  Tool tool : tools) {
    ToolUI ui=tool.getUI();
    if (ui != null) {
      toolsUI.add(ui);
      toolMap.put(ui,tool);
    }
  }
  Collections.sort(toolsUI,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Integer p1=((ToolUI)o1).getPosition();
      Integer p2=((ToolUI)o2).getPosition();
      return p1.compareTo(p2);
    }
  }
);
  final Toolbar toolbar=new Toolbar();
  for (  final ToolUI toolUI : toolsUI) {
    final Tool tool=toolMap.get(toolUI);
    JToggleButton btn;
    if (toolUI.getIcon() != null) {
      btn=new JToggleButton(toolUI.getIcon());
    }
 else {
      btn=new JToggleButton(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    }
    btn.setToolTipText(toolUI.getName() + ""String_Node_Str"" + toolUI.getDescription());
    btn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        select(tool);
        propertiesBar.select(toolUI.getPropertiesBar(tool));
      }
    }
);
    toolbar.add(btn);
  }
  VizController.getInstance().getSelectionManager().addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
      if (selectionManager.isRectangleSelection() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
        toolbar.clearSelection();
        unselect();
      }
    }
  }
);
  return toolbar;
}","public JComponent getToolbar(){
  HashMap<ToolUI,Tool> toolMap=new HashMap<ToolUI,Tool>();
  List<ToolUI> toolsUI=new ArrayList<ToolUI>();
  for (  Tool tool : tools) {
    ToolUI ui=tool.getUI();
    if (ui != null) {
      toolsUI.add(ui);
      toolMap.put(ui,tool);
    }
  }
  Collections.sort(toolsUI,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Integer p1=((ToolUI)o1).getPosition();
      Integer p2=((ToolUI)o2).getPosition();
      return p1.compareTo(p2);
    }
  }
);
  final Toolbar toolbar=new Toolbar();
  for (  final ToolUI toolUI : toolsUI) {
    final Tool tool=toolMap.get(toolUI);
    JToggleButton btn;
    if (toolUI.getIcon() != null) {
      btn=new JToggleButton(toolUI.getIcon());
    }
 else {
      btn=new JToggleButton(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    }
    btn.setToolTipText(toolUI.getName() + ""String_Node_Str"" + toolUI.getDescription());
    btn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (tool == currentTool) {
          toolbar.clearSelection();
          unselect();
        }
 else {
          select(tool);
          propertiesBar.select(toolUI.getPropertiesBar(tool));
        }
      }
    }
);
    toolbar.add(btn);
  }
  VizController.getInstance().getSelectionManager().addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
      if (selectionManager.isRectangleSelection() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isDraggingEnabled() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
    }
  }
);
  return toolbar;
}",0.9116719242902208
142979,"public void setDraggingMouseSelection(){
  engine.setRectangleSelection(false);
  vizConfig.setDraggingEnable(true);
  vizConfig.setSelectionEnable(true);
  vizConfig.setCustomSelection(false);
  this.blocked=false;
  fireChangeEvent();
}","public void setDraggingMouseSelection(){
  engine.setRectangleSelection(false);
  vizConfig.setDraggingEnable(true);
  vizConfig.setMouseSelectionUpdateWhileDragging(false);
  vizConfig.setSelectionEnable(true);
  vizConfig.setCustomSelection(false);
  this.blocked=false;
  fireChangeEvent();
}",0.8930581613508443
142980,"public void updateWorld(){
  cacheMarker++;
  GraphModel graphModel=controller.getModel();
  if (graphModel == null) {
    engine.worldUpdated(cacheMarker);
    return;
  }
  HierarchicalGraph graph;
  if (graphModel.isDirected()) {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else   if (graphModel.isUndirected()) {
    undirected=true;
    graph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
 else   if (graphModel.isMixed()) {
    undirected=false;
    graph=graphModel.getHierarchicalMixedGraphVisible();
  }
 else {
    return;
  }
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  graphView=graph.getView().getViewId();
  ModelClass[] object3dClasses=engine.getModelClasses();
  graph.readLock();
  ModelClass nodeClass=object3dClasses[AbstractEngine.CLASS_NODE];
  if (nodeClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updateNodes(graph);
    nodeClass.setCacheMarker(cacheMarker);
  }
  ModelClass edgeClass=object3dClasses[AbstractEngine.CLASS_EDGE];
  if (edgeClass.isEnabled() && (graph.getEdgeVersion() > edgeVersion || modeManager.requireModeChange())) {
    updateEdges(graph);
    updateMetaEdges(graph);
    edgeClass.setCacheMarker(cacheMarker);
    if (!undirected && vizConfig.isShowArrows()) {
      object3dClasses[AbstractEngine.CLASS_ARROW].setCacheMarker(cacheMarker);
    }
  }
  ModelClass potatoClass=object3dClasses[AbstractEngine.CLASS_POTATO];
  if (potatoClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updatePotatoes(graph);
    potatoClass.setCacheMarker(cacheMarker);
  }
  nodeVersion=graph.getNodeVersion();
  edgeVersion=graph.getEdgeVersion();
  graph.readUnlock();
  engine.worldUpdated(cacheMarker);
}","public void updateWorld(){
  cacheMarker++;
  GraphModel graphModel=controller.getModel();
  if (graphModel == null) {
    engine.worldUpdated(cacheMarker);
    return;
  }
  HierarchicalGraph graph;
  if (graphModel.isDirected()) {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else   if (graphModel.isUndirected()) {
    undirected=true;
    graph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
 else   if (graphModel.isMixed()) {
    undirected=false;
    graph=graphModel.getHierarchicalMixedGraphVisible();
  }
 else {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  graphView=graph.getView().getViewId();
  ModelClass[] object3dClasses=engine.getModelClasses();
  graph.readLock();
  ModelClass nodeClass=object3dClasses[AbstractEngine.CLASS_NODE];
  if (nodeClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updateNodes(graph);
    nodeClass.setCacheMarker(cacheMarker);
  }
  ModelClass edgeClass=object3dClasses[AbstractEngine.CLASS_EDGE];
  if (edgeClass.isEnabled() && (graph.getEdgeVersion() > edgeVersion || modeManager.requireModeChange())) {
    updateEdges(graph);
    updateMetaEdges(graph);
    edgeClass.setCacheMarker(cacheMarker);
    if (!undirected && vizConfig.isShowArrows()) {
      object3dClasses[AbstractEngine.CLASS_ARROW].setCacheMarker(cacheMarker);
    }
  }
  ModelClass potatoClass=object3dClasses[AbstractEngine.CLASS_POTATO];
  if (potatoClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updatePotatoes(graph);
    potatoClass.setCacheMarker(cacheMarker);
  }
  nodeVersion=graph.getNodeVersion();
  edgeVersion=graph.getEdgeVersion();
  graph.readUnlock();
  engine.worldUpdated(cacheMarker);
}",0.9785752544188536
142981,"public boolean requireUpdate(){
  if (graph == null) {
    GraphModel graphModel=controller.getModel();
    if (graphModel != null) {
      if (!graphModel.isDirected() && !graphModel.isUndirected() && !graphModel.isMixed()) {
        return false;
      }
 else {
        graph=graphModel.getHierarchicalGraphVisible();
      }
    }
  }
  if (graph != null) {
    if (graph.getGraphModel().getVisibleView().getViewId() != graphView) {
      reset();
    }
    return graph.getNodeVersion() > nodeVersion || graph.getEdgeVersion() > edgeVersion;
  }
  return false;
}","public boolean requireUpdate(){
  if (graph == null) {
    GraphModel graphModel=controller.getModel();
    if (graphModel != null) {
      graph=graphModel.getHierarchicalGraphVisible();
    }
  }
  if (graph != null) {
    if (graph.getGraphModel().getVisibleView().getViewId() != graphView) {
      reset();
    }
    return graph.getNodeVersion() > nodeVersion || graph.getEdgeVersion() > edgeVersion;
  }
  return false;
}",0.7698492462311558
142982,"public void renameProject(Project project,final String name){
  project.getLookup().lookup(ProjectInformationImpl.class);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle();
      title=title.substring(0,title.indexOf('-') - 1);
      title+=""String_Node_Str"" + name;
      frame.setTitle(title);
    }
  }
);
}","public void renameProject(Project project,final String name){
  project.getLookup().lookup(ProjectInformationImpl.class).setName(name);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle();
      title=title.substring(0,title.indexOf('-') - 1);
      title+=""String_Node_Str"" + name;
      frame.setTitle(title);
    }
  }
);
}",0.9841628959276018
142983,"public void save(Project project){
  ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);
  if (info != null) {
    if (!titleTextField.getText().isEmpty() && !titleTextField.getText().equals(info.getName())) {
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      pc.renameProject(project,titleTextField.getText());
    }
  }
  ProjectMetaData metaData=project.getLookup().lookup(ProjectMetaData.class);
  if (metaData != null) {
    metaData.setTitle(nameTextField.getText());
    metaData.setAuthor(authorTextField.getText());
    metaData.setKeywords(keywordsTextField.getText());
    metaData.setDescription(descriptionTextArea.getText());
  }
}","public void save(Project project){
  ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);
  if (info != null) {
    if (!nameTextField.getText().isEmpty() && !nameTextField.getText().equals(info.getName())) {
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      pc.renameProject(project,nameTextField.getText());
    }
  }
  ProjectMetaData metaData=project.getLookup().lookup(ProjectMetaData.class);
  if (metaData != null) {
    metaData.setTitle(titleTextField.getText());
    metaData.setAuthor(authorTextField.getText());
    metaData.setKeywords(keywordsTextField.getText());
    metaData.setDescription(descriptionTextArea.getText());
  }
}",0.980169971671388
142984,"public boolean init(Graph graph){
  values=new ArrayList<Object>();
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Object>();
  return true;
}",0.7241379310344828
142985,"public boolean init(Graph graph){
  values=new ArrayList<Float>(graph.getEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Float>(graph.getEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}",0.8375634517766497
142986,"private void refreshRange(){
  Float lowerBound=range.getLowerFloat();
  Float upperBound=range.getUpperFloat();
  if ((Float)min > lowerBound || (Float)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Float)min;
  }
  if ((Float)min > upperBound || (Float)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Float)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2846441947565543
142987,"public boolean init(Graph graph){
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.8288770053475936
142988,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
142989,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
142990,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
142991,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
142992,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
142993,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
142994,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
142995,"public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        edgeMap.remove(opposite.getId());
        edgeSourceTargetMap.remove(oppositekey);
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o1.getHeight()).compareTo(o2.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
}","public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o1.getHeight()).compareTo(o2.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
}",0.6032219570405728
142996,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  String defaultExtention=((DialogFileFilter)chooser.getFileFilter()).getExtensions().get(0);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultExtention);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}",0.9704804998922646
142997,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  String defaultExtention=((DialogFileFilter)chooser.getFileFilter()).getExtensions().get(0);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultExtention);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}",0.9690185436454092
142998,"public Element writeXML(Document document,Workspace workspace){
  Dhns dhns=workspace.getLookup().lookup(Dhns.class);
  DHNSSerializer serializer=new DHNSSerializer();
  return serializer.writeDhns(document,dhns);
}","public Element writeXML(Document document,Workspace workspace){
  DhnsGraphController graphController=Lookup.getDefault().lookup(DhnsGraphController.class);
  Dhns dhns=(Dhns)graphController.getModel(workspace);
  DHNSSerializer serializer=new DHNSSerializer();
  return serializer.writeDhns(document,dhns);
}",0.6679389312977099
142999,"private synchronized void refreshModel(){
  refreshSelectedRankings();
  Ranking[] rankings=new Ranking[0];
  if (modelUI.getRanking() == RankingUIModel.NODE_RANKING) {
    rankings=model.getNodeRanking();
  }
 else {
    rankings=model.getEdgeRanking();
  }
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  for (  Ranking r : rankings) {
    String elem=r.toString();
    comboBoxModel.addElement(elem);
    if (selectedRanking != null && selectedRanking.toString().equals(r.toString())) {
      comboBoxModel.setSelectedItem(elem);
    }
  }
  rankingComboBox.setModel(comboBoxModel);
  if (centerPanel != null) {
    remove(centerPanel);
  }
  applyButton.setVisible(false);
  splineButton.setVisible(false);
  if (selectedRanking != null) {
    Transformer transformer=getSelectedTransformer();
    TransformerUI transformerUI;
    if (transformer != null) {
      transformerUI=getUIForTransformer(transformer);
    }
 else {
      transformerUI=getUIForTransformer();
      if (transformerUI != null) {
        transformer=transformerUI.buildTransformer(selectedRanking);
        addTransformer(transformer);
      }
    }
    centerPanel=transformerUI.getPanel(transformer,selectedRanking);
    centerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5,5,0,5),BorderFactory.createEtchedBorder()));
    centerPanel.setOpaque(false);
    add(centerPanel,BorderLayout.CENTER);
    applyButton.setVisible(true);
    splineButton.setVisible(true);
  }
  revalidate();
  repaint();
}","public synchronized void refreshModel(){
  refreshSelectedRankings();
  Ranking[] rankings=new Ranking[0];
  if (modelUI.getRanking() == RankingUIModel.NODE_RANKING) {
    rankings=model.getNodeRanking();
  }
 else {
    rankings=model.getEdgeRanking();
  }
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  for (  Ranking r : rankings) {
    String elem=r.toString();
    comboBoxModel.addElement(elem);
    if (selectedRanking != null && selectedRanking.toString().equals(r.toString())) {
      comboBoxModel.setSelectedItem(elem);
    }
  }
  rankingComboBox.setModel(comboBoxModel);
  if (centerPanel != null) {
    remove(centerPanel);
  }
  applyButton.setVisible(false);
  splineButton.setVisible(false);
  if (selectedRanking != null) {
    Transformer transformer=getSelectedTransformer();
    TransformerUI transformerUI;
    if (transformer != null) {
      transformerUI=getUIForTransformer(transformer);
    }
 else {
      transformerUI=getUIForTransformer();
      if (transformerUI != null) {
        transformer=transformerUI.buildTransformer(selectedRanking);
        addTransformer(transformer);
      }
    }
    centerPanel=transformerUI.getPanel(transformer,selectedRanking);
    centerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5,5,0,5),BorderFactory.createEtchedBorder()));
    centerPanel.setOpaque(false);
    add(centerPanel,BorderLayout.CENTER);
    applyButton.setVisible(true);
    splineButton.setVisible(true);
  }
  revalidate();
  repaint();
}",0.9966122574684324
143000,"private void initEvents(){
  model=new RankingUIModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new RankingUIModel());
    }
    public void select(    Workspace workspace){
      enabled=true;
      RankingUIModel newModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (newModel != null) {
        model.loadModel(newModel);
      }
      refreshModel();
    }
    public void unselect(    Workspace workspace){
      RankingUIModel oldModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (oldModel != null) {
        workspace.remove(oldModel);
      }
      workspace.add(model.saveModel());
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      enabled=false;
      refreshModel();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    RankingUIModel newModel=pc.getCurrentWorkspace().getLookup().lookup(RankingUIModel.class);
    if (newModel != null) {
      model.loadModel(newModel);
    }
  }
}","private void initEvents(){
  model=new RankingUIModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new RankingUIModel());
    }
    public void select(    Workspace workspace){
      enabled=true;
      RankingUIModel newModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (newModel != null) {
        model.loadModel(newModel);
      }
      refreshModel();
    }
    public void unselect(    Workspace workspace){
      RankingUIModel oldModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (oldModel != null) {
        workspace.remove(oldModel);
      }
      workspace.add(model.saveModel());
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      enabled=false;
      refreshModel();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    enabled=true;
    RankingUIModel newModel=pc.getCurrentWorkspace().getLookup().lookup(RankingUIModel.class);
    if (newModel != null) {
      model.loadModel(newModel);
    }
  }
}",0.9921875
