record_number,buggy_code,fixed_code,code_similarity
46001,"@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(0,1,1),BINARY,BINARY,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(0,1,1),BINARY,BINARY,false},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false},{GET,newInt(1,1,1),newInt(1,1,1),newInt(1,1,1),newInt(1,1,1),OBJECT,null,null},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,2,0),newInt(1,1,1),OBJECT,BINARY,true},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,2,0),newInt(1,1,1),OBJECT,BINARY,false},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,true},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,1,0),newInt(1,1,0),OBJECT,OBJECT,false}});
}","@Parameters(name=""String_Node_Str"") public static Collection<Object[]> parameters(){
  return asList(new Object[][]{{GET,newInt(1,1,1),newInt(0,0,0),newInt(1,0,0),newInt(0,1,1),BINARY,null,null},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(0,1,1),BINARY,BINARY,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,1,0),newInt(0,1,1),BINARY,BINARY,false},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,true},{GET,newInt(1,1,0),newInt(0,0,0),newInt(1,0,0),newInt(0,1,0),BINARY,OBJECT,false},{GET,newInt(1,1,1),newInt(1,1,1),newInt(1,0,0),newInt(1,0,0),OBJECT,null,null},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,0,0),newInt(1,0,0),OBJECT,BINARY,true},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,0,0),newInt(1,0,0),OBJECT,BINARY,false},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,true},{GET,newInt(1,1,0),newInt(1,1,0),newInt(1,0,0),newInt(1,0,0),OBJECT,OBJECT,false}});
}",0.9129032258064516
46002,"@Override public Map<K,V> getAll(Set<K> keys){
  if (CollectionUtil.isEmpty(keys)) {
    return emptyMap();
  }
  int keysSize=keys.size();
  List<Data> dataKeys=new ArrayList<Data>(keysSize);
  List<Object> resultingKeyValuePairs=new ArrayList<Object>(keysSize * 2);
  getAllInternal(keys,dataKeys,resultingKeyValuePairs);
  Map<K,V> result=createHashMap(keysSize);
  for (int i=0; i < resultingKeyValuePairs.size(); ) {
    K key=toObject(resultingKeyValuePairs.get(i++));
    V value=toObject(resultingKeyValuePairs.get(i++));
    result.put(key,value);
  }
  return result;
}","@Override public Map<K,V> getAll(Set<K> keys){
  if (CollectionUtil.isEmpty(keys)) {
    return emptyMap();
  }
  int keysSize=keys.size();
  List<Data> dataKeys=new LinkedList<Data>();
  List<Object> resultingKeyValuePairs=new ArrayList<Object>(keysSize * 2);
  getAllInternal(keys,dataKeys,resultingKeyValuePairs);
  Map<K,V> result=createHashMap(keysSize);
  for (int i=0; i < resultingKeyValuePairs.size(); ) {
    K key=toObject(resultingKeyValuePairs.get(i++));
    V value=toObject(resultingKeyValuePairs.get(i++));
    result.put(key,value);
  }
  return result;
}",0.9834926151172894
46003,"private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : toObject(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}","private void populateResultFromRemote(int currentSize,List<Object> resultingKeyValuePairs,Map<Object,Long> reservations,Map<Data,Object> reverseKeyMap){
  for (int i=currentSize; i < resultingKeyValuePairs.size(); i+=2) {
    Data keyData=(Data)resultingKeyValuePairs.get(i);
    Data valueData=(Data)resultingKeyValuePairs.get(i + 1);
    Object ncKey=serializeKeys ? keyData : reverseKeyMap.get(keyData);
    if (!serializeKeys) {
      resultingKeyValuePairs.set(i,ncKey);
    }
    Long reservationId=reservations.get(ncKey);
    if (reservationId != null) {
      Object cachedValue=tryPublishReserved(ncKey,valueData,reservationId);
      resultingKeyValuePairs.set(i + 1,cachedValue);
      reservations.remove(ncKey);
    }
  }
}",0.5774058577405857
46004,"private void populateResultFromNearCache(Collection keys,List<Object> resultingKeyValuePairs){
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    Object value=getCachedValue(key,true);
    if (value != null && value != NOT_CACHED) {
      resultingKeyValuePairs.add(toObject(key));
      resultingKeyValuePairs.add(toObject(value));
      iterator.remove();
    }
  }
}","private void populateResultFromNearCache(Collection keys,List<Object> resultingKeyValuePairs){
  Iterator iterator=keys.iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    Object value=getCachedValue(key,true);
    if (value != null && value != NOT_CACHED) {
      resultingKeyValuePairs.add(key);
      resultingKeyValuePairs.add(value);
      iterator.remove();
    }
  }
}",0.9635922330097088
46005,"@Override protected void getAllInternal(Set<K> keys,List<Data> dataKeys,List<Object> resultingKeyValuePairs){
  Map<Object,Data> keyMap=null;
  if (serializeKeys) {
    keyMap=toDataKeys(keys,dataKeys);
  }
  Collection ncKeys=serializeKeys ? dataKeys : new ArrayList<K>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  if (!serializeKeys) {
    keyMap=toDataKeys(ncKeys,dataKeys);
  }
  Map<Object,Long> reservations=getNearCacheReservations(ncKeys,keyMap);
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,dataKeys,resultingKeyValuePairs);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations);
  }
  finally {
    releaseReservedKeys(reservations);
  }
}","@Override protected void getAllInternal(Set<K> keys,List<Data> dataKeys,List<Object> resultingKeyValuePairs){
  if (serializeKeys) {
    toDataKeysWithReservations(keys,dataKeys,null,null);
  }
  Collection<?> ncKeys=serializeKeys ? dataKeys : new LinkedList<K>(keys);
  populateResultFromNearCache(ncKeys,resultingKeyValuePairs);
  if (ncKeys.isEmpty()) {
    return;
  }
  Map<Object,Long> reservations=createHashMap(ncKeys.size());
  Map<Data,Object> reverseKeyMap=null;
  if (!serializeKeys) {
    reverseKeyMap=createHashMap(ncKeys.size());
    toDataKeysWithReservations(ncKeys,dataKeys,reservations,reverseKeyMap);
  }
 else {
    createNearCacheReservations((Collection<Data>)ncKeys,reservations);
  }
  try {
    int currentSize=resultingKeyValuePairs.size();
    super.getAllInternal(keys,dataKeys,resultingKeyValuePairs);
    populateResultFromRemote(currentSize,resultingKeyValuePairs,reservations,reverseKeyMap);
  }
  finally {
    releaseReservedKeys(reservations);
  }
}",0.4776962168266516
46006,"void fillMetrics(final StringBuilder stats,final ClientConnection ownerConnection){
  stats.append(""String_Node_Str"").append(KEY_VALUE_SEPARATOR).append(System.currentTimeMillis());
  addStat(stats,""String_Node_Str"",enterprise);
  addStat(stats,""String_Node_Str"",ClientType.JAVA.toString());
  addStat(stats,""String_Node_Str"",ownerConnection.getStartTime());
  stats.append(STAT_SEPARATOR).append(""String_Node_Str"").append(KEY_VALUE_SEPARATOR).append(ownerConnection.getInetAddress().getHostAddress()).append(""String_Node_Str"").append(ownerConnection.getPort());
  addStat(stats,""String_Node_Str"",client.getName());
  Credentials credentials=client.getCredentials();
  if (!(credentials instanceof UsernamePasswordCredentials)) {
    addStat(stats,""String_Node_Str"",credentials.getPrincipal());
  }
  for (  Map.Entry<String,StringRenderer> entry : allMetrics.entrySet()) {
    stats.append(STAT_SEPARATOR).append(entry.getKey()).append(KEY_VALUE_SEPARATOR);
    entry.getValue().render(stats);
  }
}","void fillMetrics(final StringBuilder stats,final ClientConnection ownerConnection){
  stats.append(""String_Node_Str"").append(KEY_VALUE_SEPARATOR).append(System.currentTimeMillis());
  addStat(stats,""String_Node_Str"",enterprise);
  addStat(stats,""String_Node_Str"",ClientType.JAVA.toString());
  addStat(stats,""String_Node_Str"",ownerConnection.getStartTime());
  stats.append(STAT_SEPARATOR).append(""String_Node_Str"").append(KEY_VALUE_SEPARATOR).append(ownerConnection.getInetAddress().getHostAddress()).append(""String_Node_Str"").append(ownerConnection.getPort());
  addStat(stats,""String_Node_Str"",client.getName());
  Credentials credentials=client.getCredentials();
  if (!(credentials instanceof UsernamePasswordCredentials)) {
    addStat(stats,""String_Node_Str"",credentials.getPrincipal());
  }
  for (  Map.Entry<String,Gauge> entry : allMetrics.entrySet()) {
    stats.append(STAT_SEPARATOR).append(entry.getKey()).append(KEY_VALUE_SEPARATOR);
    entry.getValue().render(stats);
  }
}",0.9904570567553992
46007,"PeriodicStatistics(final MetricsRegistry metricsRegistry){
  for (  String name : statisticNames) {
    allMetrics.put(name,metricsRegistry.newStringRendererGauge(name));
  }
}","PeriodicStatistics(final MetricsRegistry metricsRegistry){
  for (  String name : statisticNames) {
    allMetrics.put(name,metricsRegistry.newGauge(name));
  }
}",0.9585798816568049
46008,"/** 
 * Creates a LongGauge for a given metric name. If no gauge exists for the name, it will be created but no probe is set. The reason to do so is that you don't want to depend on the order of registration. Perhaps you want to read out e.g. operations.count gauge, but the OperationService has not started yet and the metric is not yet available. Another cause is that perhaps a probe is not registered, but the metric is created. For example when experimenting with a new implementation, e.g. a new OperationService implementation, that doesn't provide the operation.count probe. Multiple calls with the same name, return different Gauge instances; so the Gauge instance is not cached. This is done to prevent memory leaks.
 * @param name the name of the metric.
 * @return the created LongGauge.
 * @throws NullPointerException if name is null.
 */
LongGauge newLongGauge(String name);","/** 
 * Creates a   {@link LongGauge} for a given metric name.If no gauge exists for the name, it will be created but no probe is set. The reason to do so is that you don't want to depend on the order of registration. Perhaps you want to read out e.g. operations.count gauge, but the OperationService has not started yet and the metric is not yet available. Another cause is that perhaps a probe is not registered, but the metric is created. For example when experimenting with a new implementation, e.g. a new OperationService implementation, that doesn't provide the operation.count probe. Multiple calls with the same name, return different Gauge instances; so the Gauge instance is not cached. This is done to prevent memory leaks.
 * @param name the name of the metric.
 * @return the created LongGauge.
 * @throws NullPointerException if name is null.
 */
LongGauge newLongGauge(String name);",0.9938444320089536
46009,"/** 
 * Creates a DoubleProbe for a given metric name.
 * @param name name of the metric
 * @return the create DoubleGauge
 * @throws NullPointerException if name is null.
 * @see #newLongGauge(String)
 */
DoubleGauge newDoubleGauge(String name);","/** 
 * Creates a   {@link DoubleGauge} for a given metric name.
 * @param name name of the metric
 * @return the create DoubleGauge
 * @throws NullPointerException if name is null.
 * @see #newLongGauge(String)
 */
DoubleGauge newDoubleGauge(String name);",0.9362549800796812
46010,"/** 
 * @return A per client unique reference id.
 */
public long getNextReferenceId(){
  return referenceIdCounter.incrementAndGet();
}","/** 
 * @return A per client unique reference ID
 */
public long getNextReferenceId(){
  return referenceIdCounter.incrementAndGet();
}",0.981549815498155
46011,"/** 
 * Registers all client statistics and schedules peridic collection of stats.
 */
public final void start(){
  if (!enabled) {
    return;
  }
  long periodSeconds=properties.getSeconds(PERIOD_SECONDS);
  if (periodSeconds <= 0) {
    long defaultValue=Long.parseLong(PERIOD_SECONDS.getDefaultValue());
    logger.warning(""String_Node_Str"" + PERIOD_SECONDS.getName() + ""String_Node_Str""+ periodSeconds+ ""String_Node_Str""+ defaultValue+ ""String_Node_Str"");
    periodSeconds=defaultValue;
  }
  periodicStats=new PeriodicStatistics(metricsRegistry);
  schedulePeriodicStatisticsSendTask(periodSeconds);
  logger.info(""String_Node_Str"" + periodSeconds + ""String_Node_Str"");
}","/** 
 * Registers all client statistics and schedules periodic collection of stats.
 */
public final void start(){
  if (!enabled) {
    return;
  }
  long periodSeconds=properties.getSeconds(PERIOD_SECONDS);
  if (periodSeconds <= 0) {
    long defaultValue=Long.parseLong(PERIOD_SECONDS.getDefaultValue());
    logger.warning(""String_Node_Str"" + PERIOD_SECONDS.getName() + ""String_Node_Str""+ periodSeconds+ ""String_Node_Str""+ defaultValue+ ""String_Node_Str"");
    periodSeconds=defaultValue;
  }
  periodicStats=new PeriodicStatistics(metricsRegistry);
  schedulePeriodicStatisticsSendTask(periodSeconds);
  logger.info(""String_Node_Str"" + periodSeconds + ""String_Node_Str"");
}",0.9992630803242448
46012,"@Override public void run(){
  ClientConnection ownerConnection=getOwnerConnection();
  if (null == ownerConnection) {
    logger.finest(""String_Node_Str"");
    return;
  }
  final StringBuilder stats=new StringBuilder();
  periodicStats.fillMetrics(stats,ownerConnection);
  addNearCachStats(stats);
  sendStats(stats.toString(),ownerConnection);
}","@Override public void run(){
  ClientConnection ownerConnection=getOwnerConnection();
  if (null == ownerConnection) {
    logger.finest(""String_Node_Str"");
    return;
  }
  final StringBuilder stats=new StringBuilder();
  periodicStats.fillMetrics(stats,ownerConnection);
  addNearCacheStats(stats);
  sendStats(stats.toString(),ownerConnection);
}",0.9985693848354792
46013,"/** 
 * @param stat statistics string to be split
 * @param start The start index for splitting
 * @param splitChar A special character to be used for split, e.g. '='
 * @return A list of splitted strings
 */
public static List<String> split(String stat,int start,char splitChar){
  int bufferLen=stat.length();
  if (bufferLen == 0) {
    return null;
  }
  List<String> result=new ArrayList<String>();
  int strStart=start;
  int index=start;
  char previousChar='a';
  for (char currentChar; index < bufferLen; previousChar=currentChar, ++index) {
    currentChar=stat.charAt(index);
    if (currentChar == splitChar) {
      if (previousChar == ESCAPE_CHAR) {
        continue;
      }
      result.add(stat.substring(strStart,index));
      strStart=index + 1;
    }
  }
  if (index > strStart) {
    result.add(stat.substring(strStart,index));
  }
  return result;
}","/** 
 * @param stat      statistics string to be split
 * @param start     the start index for splitting
 * @param splitChar A special character to be used for split, e.g. '='
 * @return a list of split strings
 */
public static List<String> split(String stat,int start,char splitChar){
  int bufferLen=stat.length();
  if (bufferLen == 0) {
    return null;
  }
  List<String> result=new ArrayList<String>();
  int strStart=start;
  int index=start;
  char previousChar='a';
  for (char currentChar; index < bufferLen; previousChar=currentChar, ++index) {
    currentChar=stat.charAt(index);
    if (currentChar == splitChar) {
      if (previousChar == ESCAPE_CHAR) {
        continue;
      }
      result.add(stat.substring(strStart,index));
      strStart=index + 1;
    }
  }
  if (index > strStart) {
    result.add(stat.substring(strStart,index));
  }
  return result;
}",0.9748571428571428
46014,"/** 
 * @param periodSeconds The interval at which the statistics collection and send is being run.
 */
private void schedulePeriodicStatisticsSendTask(long periodSeconds){
  client.getExecutionService().scheduleWithRepetition(new Runnable(){
    @Override public void run(){
      ClientConnection ownerConnection=getOwnerConnection();
      if (null == ownerConnection) {
        logger.finest(""String_Node_Str"");
        return;
      }
      final StringBuilder stats=new StringBuilder();
      periodicStats.fillMetrics(stats,ownerConnection);
      addNearCachStats(stats);
      sendStats(stats.toString(),ownerConnection);
    }
  }
,0,periodSeconds,SECONDS);
}","/** 
 * @param periodSeconds the interval at which the statistics collection and send is being run
 */
private void schedulePeriodicStatisticsSendTask(long periodSeconds){
  client.getExecutionService().scheduleWithRepetition(new Runnable(){
    @Override public void run(){
      ClientConnection ownerConnection=getOwnerConnection();
      if (null == ownerConnection) {
        logger.finest(""String_Node_Str"");
        return;
      }
      final StringBuilder stats=new StringBuilder();
      periodicStats.fillMetrics(stats,ownerConnection);
      addNearCacheStats(stats);
      sendStats(stats.toString(),ownerConnection);
    }
  }
,0,periodSeconds,SECONDS);
}",0.9970104633781764
46015,"/** 
 * @return The owner connection to the server for the client only if the server supports the client statistics feature.
 */
private ClientConnection getOwnerConnection(){
  Address ownerConnectionAddress=client.getClientClusterService().getOwnerConnectionAddress();
  if (null == ownerConnectionAddress) {
    return null;
  }
  ClientConnection connection=(ClientConnection)client.getConnectionManager().getConnection(ownerConnectionAddress);
  if (null == connection) {
    return null;
  }
  int serverVersion=connection.getConnectedServerVersion();
  if (serverVersion < FEATURE_SUPPORTED_SINCE_VERSION) {
    if (ownerAddress == null || !ownerConnectionAddress.equals(ownerAddress)) {
      if (logger.isFinestEnabled()) {
        logger.finest(format(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ ""String_Node_Str"",FEATURE_SUPPORTED_SINCE_VERSION_STRING));
      }
    }
    ownerAddress=ownerConnectionAddress;
    return null;
  }
  return connection;
}","/** 
 * @return the owner connection to the server for the client only if the server supports the client statistics feature
 */
private ClientConnection getOwnerConnection(){
  Address ownerConnectionAddress=client.getClientClusterService().getOwnerConnectionAddress();
  if (null == ownerConnectionAddress) {
    return null;
  }
  ClientConnection connection=(ClientConnection)client.getConnectionManager().getConnection(ownerConnectionAddress);
  if (null == connection) {
    return null;
  }
  int serverVersion=connection.getConnectedServerVersion();
  if (serverVersion < FEATURE_SUPPORTED_SINCE_VERSION) {
    if (ownerAddress == null || !ownerConnectionAddress.equals(ownerAddress)) {
      if (logger.isFinestEnabled()) {
        logger.finest(format(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ ""String_Node_Str"",FEATURE_SUPPORTED_SINCE_VERSION_STRING));
      }
    }
    ownerAddress=ownerConnectionAddress;
    return null;
  }
  return connection;
}",0.9984748347737672
46016,"/** 
 * @param listener The listener to be registered.
 * @return The registration id.
 */
String addMembershipListener(MembershipListener listener);","/** 
 * @param listener The listener to be registered.
 * @return The registration ID
 */
String addMembershipListener(MembershipListener listener);",0.9831649831649832
46017,"/** 
 * Creates a new client proxy with the given id.
 * @param id the ID of the client proxy
 * @return the client proxy
 */
ClientProxy create(String id);","/** 
 * Creates a new client proxy with the given ID
 * @param id the ID of the client proxy
 * @return the client proxy
 */
ClientProxy create(String id);",0.9839228295819936
46018,"/** 
 * Creates a new client proxy with the given id.
 * @param id      the ID of the client proxy
 * @param context the {@link ClientContext} of the client proxy
 * @return the client proxy
 */
public abstract ClientProxy create(String id,ClientContext context);","/** 
 * Creates a new client proxy with the given ID.
 * @param id      the ID of the client proxy
 * @param context the {@link ClientContext} of the client proxy
 * @return the client proxy
 */
public abstract ClientProxy create(String id,ClientContext context);",0.9011406844106464
46019,"/** 
 * Alias registration id is same as registration id in the beginning. If listener had to be re-registered new registration id is stored as server registration id. When user try to remove the listener with registration id, related server registration is send to subscribed member to remove the listener.
 * @return server registration Id
 */
public String getServerRegistrationId(){
  return serverRegistrationId;
}","/** 
 * Alias registration ID is same as registration ID in the beginning. If listener had to be re-registered new registration ID is stored as server registration ID. When user try to remove the listener with registration ID, related server registration is send to subscribed member to remove the listener.
 * @return server registration ID
 */
public String getServerRegistrationId(){
  return serverRegistrationId;
}",0.8926014319809069
46020,"/** 
 * Call id of first event registration request
 * @return call id
 */
public long getCallId(){
  return callId;
}","/** 
 * Call ID of first event registration request
 * @return call ID
 */
public long getCallId(){
  return callId;
}",0.9661016949152542
46021,"@Override public void register(final Channel channel){
  NioChannel nioChannel=checkInstanceOf(NioChannel.class,channel);
  try {
    nioChannel.socketChannel().configureBlocking(false);
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
  NioChannelReader reader=newChannelReader(nioChannel);
  NioChannelWriter writer=newChannelWriter(nioChannel);
  nioChannel.setReader(reader);
  nioChannel.setWriter(writer);
  ioBalancer.channelAdded(reader,writer);
  String metricsId=channel.getLocalSocketAddress() + ""String_Node_Str"" + channel.getRemoteSocketAddress();
  metricsRegistry.scanAndRegister(writer,""String_Node_Str"" + metricsId + ""String_Node_Str"");
  metricsRegistry.scanAndRegister(reader,""String_Node_Str"" + metricsId + ""String_Node_Str"");
  reader.start();
  writer.start();
  channel.addCloseListener(channelCloseListener);
}","@Override public void register(final Channel channel){
  NioChannel nioChannel=checkInstanceOf(NioChannel.class,channel);
  try {
    nioChannel.socketChannel().configureBlocking(false);
  }
 catch (  IOException e) {
    throw rethrow(e);
  }
  NioChannelReader reader=newChannelReader(nioChannel);
  NioChannelWriter writer=newChannelWriter(nioChannel);
  channels.add(nioChannel);
  nioChannel.setReader(reader);
  nioChannel.setWriter(writer);
  ioBalancer.channelAdded(reader,writer);
  String metricsId=channel.getLocalSocketAddress() + ""String_Node_Str"" + channel.getRemoteSocketAddress();
  metricsRegistry.scanAndRegister(writer,""String_Node_Str"" + metricsId + ""String_Node_Str"");
  metricsRegistry.scanAndRegister(reader,""String_Node_Str"" + metricsId + ""String_Node_Str"");
  reader.start();
  writer.start();
  channel.addCloseListener(channelCloseListener);
}",0.983644859813084
46022,"private <T>Future<T> checkSync(ClientInvocationFuture f,String uuid,int partitionId,boolean preventSync,T defaultValue){
  boolean sync=isSyncComputation(preventSync);
  if (sync) {
    Object response=retrieveResultFromMessage(f);
    Executor userExecutor=getContext().getExecutionService().getUserExecutor();
    return new CompletedFuture<T>(getSerializationService(),response,userExecutor);
  }
 else {
    return new ClientPartitionCancellableDelegatingFuture<T>(f,getContext(),uuid,partitionId,defaultValue,SUBMIT_TO_PARTITION_DECODER);
  }
}","private <T>Future<T> checkSync(ClientInvocationFuture f,String uuid,int partitionId,boolean preventSync,T defaultValue){
  boolean sync=isSyncComputation(preventSync);
  if (sync) {
    Object response=retrieveResultFromMessage(f);
    Executor userExecutor=getContext().getExecutionService().getUserExecutor();
    return new CompletedFuture<T>(getSerializationService(),response,userExecutor);
  }
 else {
    return new IExecutorDelegatingFuture<T>(f,getContext(),uuid,defaultValue,SUBMIT_TO_PARTITION_DECODER,partitionId);
  }
}",0.8769657724329325
46023,"@Test public void testNoOperationTimeoutException_whenUserCodeLongRunning(){
  Config config=getConfig();
  config.setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(),""String_Node_Str"");
  hazelcastFactory.newHazelcastInstance(config);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  IMap<Object,Object> map=client.getMap(randomMapName());
  SleepyProcessor sleepyProcessor=new SleepyProcessor(SECONDS.toMillis(10));
  String key=randomString();
  String value=randomString();
  map.put(key,value);
  assertEquals(value,map.executeOnKey(key,sleepyProcessor));
}","@Test @Category(NightlyTest.class) public void testNoOperationTimeoutException_whenUserCodeLongRunning(){
  Config config=getConfig();
  long callTimeoutMillis=SECONDS.toMillis(10);
  config.setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(),String.valueOf(callTimeoutMillis));
  hazelcastFactory.newHazelcastInstance(config);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  IMap<Object,Object> map=client.getMap(randomMapName());
  SleepyProcessor sleepyProcessor=new SleepyProcessor(2 * callTimeoutMillis);
  String key=randomString();
  String value=randomString();
  map.put(key,value);
  assertEquals(value,map.executeOnKey(key,sleepyProcessor));
}",0.8669322709163346
46024,"protected Object getInternal(final K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getCachedValue(keyData,!async);
  if (cached != NOT_CACHED) {
    return asCompletedFutureOrValue(cached,async);
  }
  final long reservationId=tryReserveForUpdate(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Throwable t) {
    invalidateNearCache(keyData);
    throw rethrow(t);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,reservationId,false);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
          invalidateNearCache(keyData);
        }
      }
,false);
    }
    return delegatingFuture;
  }
 else {
    try {
      V value=toObject(delegatingFuture.get());
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getResponse(),value,reservationId,false);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      invalidateNearCache(keyData);
      throw rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}","protected Object getInternal(final K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getCachedValue(keyData,!async);
  if (cached != NOT_CACHED) {
    return asCompletedFutureOrValue(cached,async);
  }
  final long reservationId=tryReserveForUpdate(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(keyData);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Throwable t) {
    invalidateNearCache(keyData);
    throw rethrow(t);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,reservationId,false);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
          invalidateNearCache(keyData);
        }
      }
,false);
    }
    return delegatingFuture;
  }
 else {
    try {
      V value=delegatingFuture.get();
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getRaw(),value,reservationId,false);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      invalidateNearCache(keyData);
      throw rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}",0.9955906242747736
46025,"private <T>Future<T> checkSync(ClientInvocationFuture f,String uuid,int partitionId,boolean preventSync,T defaultValue){
  boolean sync=isSyncComputation(preventSync);
  if (sync) {
    Object response=retrieveResultFromMessage(f);
    Executor userExecutor=getContext().getExecutionService().getUserExecutor();
    return new CompletedFuture<T>(getContext().getSerializationService(),response,userExecutor);
  }
 else {
    return new ClientPartitionCancellableDelegatingFuture<T>(f,getContext(),uuid,partitionId,defaultValue,SUBMIT_TO_PARTITION_DECODER);
  }
}","private <T>Future<T> checkSync(ClientInvocationFuture f,String uuid,int partitionId,boolean preventSync,T defaultValue){
  boolean sync=isSyncComputation(preventSync);
  if (sync) {
    Object response=retrieveResultFromMessage(f);
    Executor userExecutor=getContext().getExecutionService().getUserExecutor();
    return new CompletedFuture<T>(getContext().getSerializationService(),response,userExecutor);
  }
 else {
    return new IExecutorDelegatingFuture<T>(f,getContext(),uuid,defaultValue,SUBMIT_TO_PARTITION_DECODER,partitionId);
  }
}",0.9467028003613368
46026,"@Override public ChannelFactory getChannelFactory(){
  return new NioChannelFactory();
}","@Override public ChannelFactory getChannelFactory(){
  boolean spinning=Boolean.getBoolean(""String_Node_Str"");
  return spinning ? new SpinningChannelFactory() : new NioChannelFactory();
}",0.6376811594202898
46027,"public SpinningChannel(SocketChannel socketChannel,boolean client){
  super(socketChannel,client);
}","public SpinningChannel(SocketChannel socketChannel,boolean clientMode){
  super(socketChannel,clientMode);
}",0.9615384615384616
46028,"private boolean init() throws IOException {
  InitResult<ChannelInboundHandler> init=initializer.initInbound(channel);
  if (init == null) {
    return false;
  }
  this.inboundHandler=init.getHandler();
  this.inputBuffer=init.getByteBuffer();
  return true;
}","private boolean init() throws IOException {
  InitResult<ChannelInboundHandler> init=initializer.initInbound(channel);
  if (init == null) {
    return false;
  }
  this.inboundHandler=init.getHandler();
  this.inputBuffer=init.getByteBuffer();
  if (inboundHandler instanceof ChannelInboundHandlerWithCounters) {
    ChannelInboundHandlerWithCounters withCounters=(ChannelInboundHandlerWithCounters)inboundHandler;
    withCounters.setNormalPacketsRead(normalFramesRead);
    withCounters.setPriorityPacketsRead(priorityFramesRead);
  }
  return true;
}",0.6085889570552148
46029,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}",0.916030534351145
46030,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}",0.916030534351145
46031,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectNow_NioEventLoopGroupFactory();
  super.setup();
}",0.916030534351145
46032,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}",0.9230769230769232
46033,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}",0.9230769230769232
46034,"@Before public void setup() throws Exception {
  threadingModelFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new SelectWithSelectorFix_NioEventLoopGroupFactory();
  super.setup();
}",0.9230769230769232
46035,"@Before public void setup() throws Exception {
  threadingModelFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}",0.9140625
46036,"@Before public void setup() throws Exception {
  threadingModelFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}",0.9140625
46037,"@Before public void setup() throws Exception {
  threadingModelFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Select_NioEventLoopGroupFactory();
  super.setup();
}",0.9140625
46038,"@Before public void setup() throws Exception {
  threadingModelFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}",0.9133858267716536
46039,"@Before public void setup() throws Exception {
  threadingModelFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}",0.9133858267716536
46040,"@Before public void setup() throws Exception {
  threadingModelFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}","@Before public void setup() throws Exception {
  eventLoopGroupFactory=new Spinning_EventLoopGroupFactory();
  super.setup();
}",0.9133858267716536
46041,"@Override public ChannelFactory getChannelFactory(){
  return new NioChannelFactory();
}","@Override public ChannelFactory getChannelFactory(){
  return channelFactory;
}",0.934131736526946
46042,"public MockIOService(int port) throws Exception {
  loggingService=new LoggingServiceImpl(""String_Node_Str"",""String_Node_Str"",BuildInfoProvider.BUILD_INFO);
  serverSocketChannel=ServerSocketChannel.open();
  ServerSocket serverSocket=serverSocketChannel.socket();
  serverSocket.setReuseAddress(true);
  serverSocket.setSoTimeout(1000);
  serverSocket.bind(new InetSocketAddress(""String_Node_Str"",port));
  thisAddress=new Address(""String_Node_Str"",port);
  this.serializationService=new DefaultSerializationServiceBuilder().addDataSerializableFactory(TestDataFactory.FACTORY_ID,new TestDataFactory()).build();
}","public MockIOService(int port,ChannelFactory channelFactory) throws Exception {
  loggingService=new LoggingServiceImpl(""String_Node_Str"",""String_Node_Str"",BuildInfoProvider.BUILD_INFO);
  serverSocketChannel=ServerSocketChannel.open();
  ServerSocket serverSocket=serverSocketChannel.socket();
  serverSocket.setReuseAddress(true);
  serverSocket.setSoTimeout(1000);
  serverSocket.bind(new InetSocketAddress(""String_Node_Str"",port));
  thisAddress=new Address(""String_Node_Str"",port);
  this.channelFactory=channelFactory;
  this.serializationService=new DefaultSerializationServiceBuilder().addDataSerializableFactory(TestDataFactory.FACTORY_ID,new TestDataFactory()).build();
}",0.947449768160742
46043,"protected TcpIpConnectionManager newConnectionManager(int port,MetricsRegistry metricsRegistry) throws Exception {
  MockIOService ioService=new MockIOService(port);
  return new TcpIpConnectionManager(ioService,ioService.serverSocketChannel,ioService.loggingService,metricsRegistry,threadingModelFactory.create(ioService,metricsRegistry));
}","protected TcpIpConnectionManager newConnectionManager(int port,MetricsRegistry metricsRegistry) throws Exception {
  MockIOService ioService=new MockIOService(port,eventLoopGroupFactory.createChannelFactory());
  return new TcpIpConnectionManager(ioService,ioService.serverSocketChannel,ioService.loggingService,metricsRegistry,eventLoopGroupFactory.create(ioService,metricsRegistry));
}",0.8998628257887518
46044,"/** 
 * Removes the   {@code member} if it has not sent any master confirmation in{@link GroupProperty#MAX_NO_MASTER_CONFIRMATION_SECONDS}.
 * @param now    the current cluster clock time
 * @param member the member which needs to be checked
 * @return if the member has been removed
 */
private boolean removeMemberIfMasterConfirmationExpired(long now,MemberImpl member){
  Long lastConfirmation=masterConfirmationTimes.get(member);
  if (lastConfirmation == null) {
    lastConfirmation=0L;
  }
  if (now - lastConfirmation > maxNoMasterConfirmationMillis) {
    String reason=format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",member,maxNoMasterConfirmationMillis,timeToString(Clock.currentTimeMillis()),timeToString(now),timeToString(lastConfirmation));
    logger.warning(reason);
    clusterService.suspectMember(member,reason,true);
    return true;
  }
  return false;
}","/** 
 * Removes the   {@code member} if it has not sent any master confirmation in{@link GroupProperty#MAX_NO_MASTER_CONFIRMATION_SECONDS}.
 * @param now    the current cluster clock time
 * @param member the member which needs to be checked
 * @return if the member has been removed
 */
private boolean removeMemberIfMasterConfirmationExpired(long now,MemberImpl member){
  if (clusterService.getClusterJoinManager().isMastershipClaimInProgress()) {
    return false;
  }
  Long lastConfirmation=masterConfirmationTimes.get(member);
  if (lastConfirmation == null) {
    lastConfirmation=0L;
  }
  if (now - lastConfirmation > maxNoMasterConfirmationMillis) {
    String reason=format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",member,maxNoMasterConfirmationMillis,timeToString(Clock.currentTimeMillis()),timeToString(now),timeToString(lastConfirmation));
    logger.warning(reason);
    clusterService.suspectMember(member,reason,true);
    return true;
  }
  return false;
}",0.9479708636836628
46045,"@Override public void run(){
  MembersView newMembersView=decideNewMembersView(localMemberView,membersToAsk);
  clusterServiceLock.lock();
  try {
    if (!clusterService.isJoined()) {
      logger.fine(""String_Node_Str"" + newMembersView + ""String_Node_Str"");
      return;
    }
    updateMembers(newMembersView);
    clusterService.getClusterJoinManager().reset();
    sendMemberListToOthers();
    logger.info(""String_Node_Str"" + newMembersView);
  }
  finally {
    clusterServiceLock.unlock();
  }
}","@Override public void run(){
  MembersView newMembersView=decideNewMembersView(localMemberView,membersToAsk);
  clusterServiceLock.lock();
  try {
    if (!clusterService.isJoined()) {
      logger.fine(""String_Node_Str"" + newMembersView + ""String_Node_Str"");
      return;
    }
    updateMembers(newMembersView);
    clusterService.getClusterHeartbeatManager().resetMemberMasterConfirmations();
    clusterService.getClusterJoinManager().reset();
    sendMemberListToOthers();
    logger.info(""String_Node_Str"" + newMembersView);
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9247706422018348
46046,"@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.getAsync(""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.getAsync(""String_Node_Str"");
  future.get();
}",0.9655172413793104
46047,"@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.getAsync(""String_Node_Str"");
  foo.get();
}","@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.getAsync(""String_Node_Str"");
  future.get();
}",0.95625
46048,"@Test public void testRemoveAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.removeAsync(""String_Node_Str"");
  foo.get();
}","@Test public void testRemoveAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.removeAsync(""String_Node_Str"");
  future.get();
}",0.9578313253012049
46049,"@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.getAsync(""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.getAsync(""String_Node_Str"");
  future.get();
}",0.9655172413793104
46050,"@Test(expected=ExecutionException.class) public void testPutAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.putAsync(""String_Node_Str"",""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testPutAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.putAsync(""String_Node_Str"",""String_Node_Str"");
  future.get();
}",0.9683257918552036
46051,"@Test public void testPutAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.putAsync(""String_Node_Str"",""String_Node_Str"");
  foo.get();
}","@Test public void testPutAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.putAsync(""String_Node_Str"",""String_Node_Str"");
  future.get();
}",0.9606741573033708
46052,"@Test(expected=ExecutionException.class) public void testRemoveAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.removeAsync(""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testRemoveAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.removeAsync(""String_Node_Str"");
  future.get();
}",0.9665071770334928
46053,"@Test public void testSubmitToKeyOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future foo=map1.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  foo.get();
}","@Test public void testSubmitToKeyOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future future=map1.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  future.get();
}",0.963157894736842
46054,"@Test(expected=ExecutionException.class) public void testSubmitToKeyOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future foo=map4.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  foo.get();
}","@Test(expected=ExecutionException.class) public void testSubmitToKeyOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future future=map4.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  future.get();
}",0.9699570815450644
46055,"@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.getAsync(""String_Node_Str"");
  foo.get();
}","@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.getAsync(""String_Node_Str"");
  future.get();
}",0.95625
46056,"@Test public void testRemoveAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.removeAsync(""String_Node_Str"");
  foo.get();
}","@Test public void testRemoveAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.removeAsync(""String_Node_Str"");
  future.get();
}",0.9578313253012049
46057,"@Test(expected=ExecutionException.class) public void testPutAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.putAsync(""String_Node_Str"",""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testPutAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.putAsync(""String_Node_Str"",""String_Node_Str"");
  future.get();
}",0.9683257918552036
46058,"@Test public void testSubmmtToKeyOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future foo=map1.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  foo.get();
}","@Test public void testSubmmtToKeyOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future future=map1.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  future.get();
}",0.963157894736842
46059,"@Test public void testPutAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> foo=map1.putAsync(""String_Node_Str"",""String_Node_Str"");
  foo.get();
}","@Test public void testPutAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<Object> future=map1.putAsync(""String_Node_Str"",""String_Node_Str"");
  future.get();
}",0.9606741573033708
46060,"@Test(expected=ExecutionException.class) public void testRemoveAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> foo=map4.removeAsync(""String_Node_Str"");
  foo.get();
}","@Test(expected=ExecutionException.class) public void testRemoveAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<Object> future=map4.removeAsync(""String_Node_Str"");
  future.get();
}",0.9665071770334928
46061,"@Test(expected=ExecutionException.class) public void testSubmitToKeyOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future foo=map4.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  foo.get();
}","@Test(expected=ExecutionException.class) public void testSubmitToKeyOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future future=map4.submitToKey(""String_Node_Str"",new TestLoggingEntryProcessor());
  future.get();
}",0.9699570815450644
46062,"private static void initializeCaches(){
  cachingProvider1=HazelcastClientCachingProvider.createCachingProvider(c1);
  cachingProvider2=HazelcastClientCachingProvider.createCachingProvider(c2);
  cachingProvider3=HazelcastClientCachingProvider.createCachingProvider(c3);
  cachingProvider4=HazelcastClientCachingProvider.createCachingProvider(c4);
  cachingProvider5=HazelcastClientCachingProvider.createCachingProvider(c5);
  String cacheName=CACHE_NAME_PREFIX + randomString();
  cache1=(ICache)cachingProvider1.getCacheManager().getCache(cacheName);
  cache2=(ICache)cachingProvider2.getCacheManager().getCache(cacheName);
  cache3=(ICache)cachingProvider3.getCacheManager().getCache(cacheName);
  cache4=(ICache)cachingProvider4.getCacheManager().getCache(cacheName);
  cache5=(ICache)cachingProvider5.getCacheManager().getCache(cacheName);
}","private static void initializeCaches(){
  HazelcastClientCachingProvider cachingProvider1=HazelcastClientCachingProvider.createCachingProvider(c1);
  HazelcastClientCachingProvider cachingProvider2=HazelcastClientCachingProvider.createCachingProvider(c2);
  HazelcastClientCachingProvider cachingProvider3=HazelcastClientCachingProvider.createCachingProvider(c3);
  HazelcastClientCachingProvider cachingProvider4=HazelcastClientCachingProvider.createCachingProvider(c4);
  HazelcastClientCachingProvider cachingProvider5=HazelcastClientCachingProvider.createCachingProvider(c5);
  String cacheName=CACHE_NAME_PREFIX + randomString();
  cache1=(ICache<Integer,String>)cachingProvider1.getCacheManager().<Integer,String>getCache(cacheName);
  cache2=(ICache<Integer,String>)cachingProvider2.getCacheManager().<Integer,String>getCache(cacheName);
  cache3=(ICache<Integer,String>)cachingProvider3.getCacheManager().<Integer,String>getCache(cacheName);
  cache4=(ICache<Integer,String>)cachingProvider4.getCacheManager().<Integer,String>getCache(cacheName);
  cache5=(ICache<Integer,String>)cachingProvider5.getCacheManager().<Integer,String>getCache(cacheName);
}",0.8430493273542601
46063,"@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<String> foo=cache4.getAsync(1);
  foo.get();
}","@Test(expected=ExecutionException.class) public void testGetAsyncOperationThrowsExceptionWhenQuorumSizeNotMet() throws Exception {
  Future<String> future=cache4.getAsync(1);
  future.get();
}",0.9629629629629628
46064,"@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<String> foo=cache1.getAsync(1);
  foo.get();
}","@Test public void testGetAsyncOperationSuccessfulWhenQuorumSizeMet() throws Exception {
  Future<String> future=cache1.getAsync(1);
  future.get();
}",0.952054794520548
46065,"@BeforeClass public static void initialize() throws Exception {
  QuorumConfig quorumConfig=new QuorumConfig();
  quorumConfig.setName(QUORUM_ID);
  quorumConfig.setType(QuorumType.READ);
  quorumConfig.setEnabled(true);
  quorumConfig.setSize(3);
  CacheSimpleConfig cacheConfig=new CacheSimpleConfig();
  cacheConfig.setName(CACHE_NAME_PREFIX + ""String_Node_Str"");
  cacheConfig.setQuorumName(QUORUM_ID);
  factory=new TestHazelcastFactory();
  cluster=new PartitionedCluster(factory).createFiveMemberCluster(cacheConfig,quorumConfig);
  initializeClients();
  initializeCaches();
  cluster.splitFiveMembersThreeAndTwo();
  verifyClients();
}","@BeforeClass public static void initialize(){
  QuorumConfig quorumConfig=new QuorumConfig();
  quorumConfig.setName(QUORUM_ID);
  quorumConfig.setType(QuorumType.READ);
  quorumConfig.setEnabled(true);
  quorumConfig.setSize(3);
  CacheSimpleConfig cacheConfig=new CacheSimpleConfig();
  cacheConfig.setName(CACHE_NAME_PREFIX + ""String_Node_Str"");
  cacheConfig.setQuorumName(QUORUM_ID);
  factory=new TestHazelcastFactory();
  cluster=new PartitionedCluster(factory).createFiveMemberCluster(cacheConfig,quorumConfig);
  initializeClients();
  initializeCaches();
  cluster.splitFiveMembersThreeAndTwo();
  verifyClients();
}",0.9858267716535432
46066,"@Test public void testLifecycleListener_registeredViaClassName(){
  assertTrue(StaticListener.calledAtLeastOnce);
}","@Test public void testLifecycleListener_registeredViaClassName(){
  assertTrue(StaticListener.CALLED_AT_LEAST_ONCE.get());
}",0.8368200836820083
46067,"@Override public void stateChanged(LifecycleEvent event){
  calledAtLeastOnce=true;
}","@Override public void stateChanged(LifecycleEvent event){
  CALLED_AT_LEAST_ONCE.set(true);
}",0.7752808988764045
46068,"@Test(timeout=120000) public void testPresharedAttributes() throws Exception {
  Config c=new Config();
  JoinConfig join=c.getNetworkConfig().getJoin();
  join.getTcpIpConfig().addMember(""String_Node_Str"").setEnabled(true);
  join.getMulticastConfig().setEnabled(false);
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  HazelcastInstance h1=hazelcastFactory.newHazelcastInstance(c);
  Member m1=h1.getCluster().getLocalMember();
  m1.setIntAttribute(""String_Node_Str"",123);
  HazelcastInstance h2=hazelcastFactory.newHazelcastInstance(c);
  assertClusterSize(2,h2);
  Member member=null;
  for (  Member m : h2.getCluster().getMembers()) {
    if (m == h2.getCluster().getLocalMember()) {
      continue;
    }
    member=m;
  }
  assertNotNull(member);
  assertEquals(m1,member);
  assertNotNull(member.getIntAttribute(""String_Node_Str""));
  assertEquals(123,(int)member.getIntAttribute(""String_Node_Str""));
  boolean found=false;
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  Collection<Member> members=client.getCluster().getMembers();
  for (  Member m : members) {
    if (m.equals(m1)) {
      assertEquals(123,(int)m.getIntAttribute(""String_Node_Str""));
      found=true;
    }
  }
  assertTrue(found);
}","@Test(timeout=120000) public void testPresharedAttributes() throws Exception {
  Config c=new Config();
  JoinConfig join=c.getNetworkConfig().getJoin();
  join.getTcpIpConfig().addMember(""String_Node_Str"").setEnabled(true);
  join.getMulticastConfig().setEnabled(false);
  HazelcastInstance h1=hazelcastFactory.newHazelcastInstance(c);
  Member m1=h1.getCluster().getLocalMember();
  m1.setIntAttribute(""String_Node_Str"",123);
  HazelcastInstance h2=hazelcastFactory.newHazelcastInstance(c);
  assertClusterSize(2,h2);
  Member member=null;
  for (  Member m : h2.getCluster().getMembers()) {
    if (m == h2.getCluster().getLocalMember()) {
      continue;
    }
    member=m;
  }
  assertNotNull(member);
  assertEquals(m1,member);
  assertNotNull(member.getIntAttribute(""String_Node_Str""));
  assertEquals(123,(int)member.getIntAttribute(""String_Node_Str""));
  boolean found=false;
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  Collection<Member> members=client.getCluster().getMembers();
  for (  Member m : members) {
    if (m.equals(m1)) {
      assertEquals(123,(int)m.getIntAttribute(""String_Node_Str""));
      found=true;
    }
  }
  assertTrue(found);
}",0.9697712418300654
46069,"@Test(timeout=120000) public void testMemberAddedWithListeners_thenCheckOperationsNotHanging() throws Exception {
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setProperty(ClientExecutionServiceImpl.INTERNAL_EXECUTOR_POOL_SIZE.getName(),""String_Node_Str"");
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap map=client.getMap(""String_Node_Str"");
  map.addEntryListener(mock(MapListener.class),true);
  HazelcastInstance h2=hazelcastFactory.newHazelcastInstance();
  String key=generateKeyOwnedBy(h2);
  map.get(key);
}","@Test(timeout=120000) public void testMemberAddedWithListeners_thenCheckOperationsNotHanging(){
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setProperty(ClientExecutionServiceImpl.INTERNAL_EXECUTOR_POOL_SIZE.getName(),""String_Node_Str"");
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap map=client.getMap(""String_Node_Str"");
  map.addEntryListener(mock(MapListener.class),true);
  HazelcastInstance h2=hazelcastFactory.newHazelcastInstance();
  String key=generateKeyOwnedBy(h2);
  map.get(key);
}",0.9850746268656716
46070,"@Test public void testInterceptor() throws InterruptedException {
  final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance();
  final HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  final MapInterceptorImpl interceptor=new MapInterceptorImpl();
  final String id=map.addInterceptor(interceptor);
  assertNotNull(id);
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  assertFalse(map.replace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertTrue(map.replace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",map.remove(""String_Node_Str""));
}","@Test public void testInterceptor(){
  hazelcastFactory.newHazelcastInstance();
  final HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  final MapInterceptorImpl interceptor=new MapInterceptorImpl();
  final String id=map.addInterceptor(interceptor);
  assertNotNull(id);
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  assertFalse(map.replace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertTrue(map.replace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  map.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",map.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",map.remove(""String_Node_Str""));
}",0.9747762408462164
46071,"public void testListenerReconnect() throws InterruptedException {
  final HazelcastInstance instance1=hazelcastFactory.newHazelcastInstance();
  final HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch latch=new CountDownLatch(2);
  final IMap<Object,Object> m=client.getMap(""String_Node_Str"");
  final String id=m.addEntryListener(new EntryAdapter(){
    public void entryAdded(    EntryEvent event){
      latch.countDown();
    }
    @Override public void entryUpdated(    EntryEvent event){
      latch.countDown();
    }
  }
,true);
  m.put(""String_Node_Str"",""String_Node_Str"");
  final HazelcastInstance instance2=hazelcastFactory.newHazelcastInstance();
  instance1.shutdown();
  final Thread thread=new Thread(){
    @Override public void run(){
      while (!isInterrupted()) {
        m.put(""String_Node_Str"",""String_Node_Str"");
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
;
  thread.start();
  assertOpenEventually(latch,10);
  thread.interrupt();
  assertTrue(m.removeEntryListener(id));
  assertFalse(m.removeEntryListener(""String_Node_Str""));
}","public void testListenerReconnect(){
  final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance();
  final HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch latch=new CountDownLatch(2);
  final IMap<Object,Object> m=client.getMap(""String_Node_Str"");
  final String id=m.addEntryListener(new EntryAdapter(){
    public void entryAdded(    EntryEvent event){
      latch.countDown();
    }
    @Override public void entryUpdated(    EntryEvent event){
      latch.countDown();
    }
  }
,true);
  m.put(""String_Node_Str"",""String_Node_Str"");
  hazelcastFactory.newHazelcastInstance();
  instance.shutdown();
  final Thread thread=new Thread(){
    @Override public void run(){
      while (!isInterrupted()) {
        m.put(""String_Node_Str"",""String_Node_Str"");
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
;
  thread.start();
  assertOpenEventually(latch,10);
  thread.interrupt();
  assertJoinable(thread);
  assertTrue(m.removeEntryListener(id));
  assertFalse(m.removeEntryListener(""String_Node_Str""));
}",0.9314359637774904
46072,"@Test public void testMapDestroyIssue764() throws Exception {
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  assertNoOfDistributedObject(""String_Node_Str"",0,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",0,client.getDistributedObjects());
  IMap map=client.getMap(""String_Node_Str"");
  assertNoOfDistributedObject(""String_Node_Str"",1,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",1,client.getDistributedObjects());
  map.destroy();
  Collection<DistributedObject> serverDistributedObjects=server.getDistributedObjects();
  Collection<DistributedObject> clientDistributedObjects=client.getDistributedObjects();
  assertNoOfDistributedObject(""String_Node_Str"",0,serverDistributedObjects);
  assertNoOfDistributedObject(""String_Node_Str"",0,clientDistributedObjects);
}","@Test public void testMapDestroyIssue764(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  assertNoOfDistributedObject(""String_Node_Str"",0,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",0,client.getDistributedObjects());
  IMap map=client.getMap(""String_Node_Str"");
  assertNoOfDistributedObject(""String_Node_Str"",1,server.getDistributedObjects());
  assertNoOfDistributedObject(""String_Node_Str"",1,client.getDistributedObjects());
  map.destroy();
  Collection<DistributedObject> serverDistributedObjects=server.getDistributedObjects();
  Collection<DistributedObject> clientDistributedObjects=client.getDistributedObjects();
  assertNoOfDistributedObject(""String_Node_Str"",0,serverDistributedObjects);
  assertNoOfDistributedObject(""String_Node_Str"",0,clientDistributedObjects);
}",0.9901531728665208
46073,"@Test(timeout=60000) public void testOperationRedo() throws Exception {
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,""String_Node_Str"" + i);
  }
  thread.join();
  assertEquals(expected,map.size());
}","@Test(timeout=60000) public void testOperationRedo(){
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap<Integer,String> map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,""String_Node_Str"" + i);
  }
  assertJoinable(thread);
  assertEquals(expected,map.size());
}",0.4459055588762701
46074,"@Test public void testOperationRedo_smartRoutingDisabled() throws Exception {
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setRedoOperation(true);
  clientConfig.setSmartRouting(false);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,i);
  }
  thread.join();
  assertEquals(expected,map.size());
}","@Test public void testOperationRedo_smartRoutingDisabled(){
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setRedoOperation(true);
  clientConfig.setSmartRouting(false);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final Thread thread=new Thread(){
    public void run(){
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      hz1.getLifecycleService().shutdown();
    }
  }
;
  final IMap<Integer,Integer> map=client.getMap(""String_Node_Str"");
  thread.start();
  int expected=1000;
  for (int i=0; i < expected; i++) {
    map.put(i,i);
  }
  assertJoinable(thread);
  assertEquals(expected,map.size());
}",0.4263657957244655
46075,"@Category(NightlyTest.class) @Test public void testLock_WhenSmartClientAndOwnerNodeDiesTogether() throws InterruptedException {
  testLock_WhenClientAndOwnerNodeDiesTogether(true);
}","@Category(NightlyTest.class) @Test public void testLock_WhenSmartClientAndOwnerNodeDiesTogether() throws Exception {
  testLock_WhenClientAndOwnerNodeDiesTogether(true);
}",0.9688385269121812
46076,"/** 
 * Test for issues #267 and #493
 */
@Test public void testIssue493() throws Exception {
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final ILock lock=client.getLock(""String_Node_Str"");
  for (int k=0; k < 10; k++) {
    lock.lock();
    try {
      Thread.sleep(100);
    }
  finally {
      lock.unlock();
    }
  }
  lock.lock();
  hz1.shutdown();
  lock.unlock();
}","/** 
 * Test for issues #267 and #493
 */
@Test public void testIssue493(){
  final HazelcastInstance hz1=hazelcastFactory.newHazelcastInstance();
  hazelcastFactory.newHazelcastInstance();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  final ILock lock=client.getLock(""String_Node_Str"");
  for (int k=0; k < 10; k++) {
    lock.lock();
    try {
      sleepMillis(100);
    }
  finally {
      lock.unlock();
    }
  }
  lock.lock();
  hz1.shutdown();
  lock.unlock();
}",0.9749798224374496
46077,"private void testLock_WhenClientAndOwnerNodeDiesTogether(boolean smart) throws InterruptedException {
  hazelcastFactory.newHazelcastInstance();
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(smart);
  final int tryCount=5;
  for (int i=0; i < tryCount; i++) {
    final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance();
    final HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
    final ILock lock=client.getLock(""String_Node_Str"");
    assertTrue(lock.tryLock(1,TimeUnit.MINUTES));
    client.getLifecycleService().terminate();
    instance.getLifecycleService().terminate();
  }
}","private void testLock_WhenClientAndOwnerNodeDiesTogether(boolean smart) throws Exception {
  hazelcastFactory.newHazelcastInstance();
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(smart);
  final int tryCount=5;
  for (int i=0; i < tryCount; i++) {
    final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance();
    final HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
    final ILock lock=client.getLock(""String_Node_Str"");
    assertTrue(lock.tryLock(1,TimeUnit.MINUTES));
    client.getLifecycleService().terminate();
    instance.getLifecycleService().terminate();
  }
}",0.991929567131328
46078,"@Test public void testCredentials(){
  final Config config=new Config();
  config.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  final HazelcastInstance instance=hazelcastFactory.newHazelcastInstance(config);
  final ClientConfig clientConfig=new ClientConfig();
  final ClientSecurityConfig securityConfig=clientConfig.getSecurityConfig();
  securityConfig.setCredentialsClassname(MyCredentials.class.getName());
  final HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
}","@Test public void testCredentials(){
  final Config config=new Config();
  config.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  hazelcastFactory.newHazelcastInstance(config);
  final ClientConfig clientConfig=new ClientConfig();
  final ClientSecurityConfig securityConfig=clientConfig.getSecurityConfig();
  securityConfig.setCredentialsClassname(MyCredentials.class.getName());
  hazelcastFactory.newHazelcastClient(clientConfig);
}",0.9357429718875502
46079,"@Category(NightlyTest.class) @Test public void testLock_WhenDummyClientAndOwnerNodeDiesTogether() throws InterruptedException {
  testLock_WhenClientAndOwnerNodeDiesTogether(false);
}","@Category(NightlyTest.class) @Test public void testLock_WhenDummyClientAndOwnerNodeDiesTogether() throws Exception {
  testLock_WhenClientAndOwnerNodeDiesTogether(false);
}",0.9690140845070424
46080,"@Test public void testClientReconnect_thenCheckRequestsAreRetriedWithoutException() throws Exception {
  final HazelcastInstance hazelcastInstance=hazelcastFactory.newHazelcastInstance();
  final CountDownLatch clientStartedDoingRequests=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        clientStartedDoingRequests.await();
      }
 catch (      InterruptedException ignored) {
      }
      hazelcastInstance.shutdown();
      hazelcastFactory.newHazelcastInstance();
    }
  }
).start();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.setProperty(ClientProperty.INVOCATION_TIMEOUT_SECONDS.getName(),String.valueOf(Integer.MAX_VALUE));
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> map=client.getMap(randomMapName());
  int mapSize=1000;
  for (int i=0; i < mapSize; i++) {
    if (i == mapSize / 4) {
      clientStartedDoingRequests.countDown();
    }
    try {
      map.put(i,i);
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"" + i,false);
    }
  }
}","@Test public void testClientReconnect_thenCheckRequestsAreRetriedWithoutException(){
  final HazelcastInstance hazelcastInstance=hazelcastFactory.newHazelcastInstance();
  final CountDownLatch clientStartedDoingRequests=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        clientStartedDoingRequests.await();
      }
 catch (      InterruptedException ignored) {
      }
      hazelcastInstance.shutdown();
      hazelcastFactory.newHazelcastInstance();
    }
  }
).start();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.setProperty(ClientProperty.INVOCATION_TIMEOUT_SECONDS.getName(),String.valueOf(Integer.MAX_VALUE));
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IMap<Object,Object> map=client.getMap(randomMapName());
  int mapSize=1000;
  for (int i=0; i < mapSize; i++) {
    if (i == mapSize / 4) {
      clientStartedDoingRequests.countDown();
    }
    try {
      map.put(i,i);
    }
 catch (    Exception e) {
      assertTrue(""String_Node_Str"" + i,false);
    }
  }
}",0.9926829268292684
46081,"@Test public void testClientConnectionEvents() throws InterruptedException {
  final LinkedList<LifecycleState> list=new LinkedList<LifecycleState>();
  list.offer(LifecycleState.STARTING);
  list.offer(LifecycleState.STARTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  list.offer(LifecycleState.CLIENT_DISCONNECTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  list.offer(LifecycleState.CLIENT_DISCONNECTED);
  list.offer(LifecycleState.SHUTTING_DOWN);
  list.offer(LifecycleState.SHUTDOWN);
  hazelcastFactory.newHazelcastInstance();
  final CountDownLatch latch=new CountDownLatch(list.size());
  final CountDownLatch connectedLatch=new CountDownLatch(2);
  final CountDownLatch disconnectedLatch=new CountDownLatch(2);
  LifecycleListener listener=new LifecycleListener(){
    public void stateChanged(    LifecycleEvent event){
      Logger.getLogger(getClass()).info(""String_Node_Str"" + event);
      final LifecycleState state=list.poll();
      LifecycleState eventState=event.getState();
      if (state != null && state.equals(eventState)) {
        latch.countDown();
      }
      if (LifecycleState.CLIENT_CONNECTED.equals(eventState)) {
        connectedLatch.countDown();
      }
      if (LifecycleState.CLIENT_DISCONNECTED.equals(eventState)) {
        disconnectedLatch.countDown();
      }
    }
  }
;
  final ListenerConfig listenerConfig=new ListenerConfig(listener);
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.addListenerConfig(listenerConfig);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(100);
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient(clientConfig);
  hazelcastFactory.shutdownAllMembers();
  hazelcastFactory.newHazelcastInstance();
  assertOpenEventually(""String_Node_Str"",connectedLatch);
  hazelcastFactory.shutdownAllMembers();
  assertOpenEventually(""String_Node_Str"",disconnectedLatch);
  hazelcastClient.shutdown();
  assertOpenEventually(""String_Node_Str"",latch);
}","@Test public void testClientConnectionEvents(){
  final LinkedList<LifecycleState> list=new LinkedList<LifecycleState>();
  list.offer(LifecycleState.STARTING);
  list.offer(LifecycleState.STARTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  list.offer(LifecycleState.CLIENT_DISCONNECTED);
  list.offer(LifecycleState.CLIENT_CONNECTED);
  list.offer(LifecycleState.CLIENT_DISCONNECTED);
  list.offer(LifecycleState.SHUTTING_DOWN);
  list.offer(LifecycleState.SHUTDOWN);
  hazelcastFactory.newHazelcastInstance();
  final CountDownLatch latch=new CountDownLatch(list.size());
  final CountDownLatch connectedLatch=new CountDownLatch(2);
  final CountDownLatch disconnectedLatch=new CountDownLatch(2);
  LifecycleListener listener=new LifecycleListener(){
    public void stateChanged(    LifecycleEvent event){
      Logger.getLogger(getClass()).info(""String_Node_Str"" + event);
      final LifecycleState state=list.poll();
      LifecycleState eventState=event.getState();
      if (state != null && state.equals(eventState)) {
        latch.countDown();
      }
      if (LifecycleState.CLIENT_CONNECTED.equals(eventState)) {
        connectedLatch.countDown();
      }
      if (LifecycleState.CLIENT_DISCONNECTED.equals(eventState)) {
        disconnectedLatch.countDown();
      }
    }
  }
;
  final ListenerConfig listenerConfig=new ListenerConfig(listener);
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.addListenerConfig(listenerConfig);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(100);
  HazelcastInstance hazelcastClient=hazelcastFactory.newHazelcastClient(clientConfig);
  hazelcastFactory.shutdownAllMembers();
  hazelcastFactory.newHazelcastInstance();
  assertOpenEventually(""String_Node_Str"",connectedLatch);
  hazelcastFactory.shutdownAllMembers();
  assertOpenEventually(""String_Node_Str"",disconnectedLatch);
  hazelcastClient.shutdown();
  assertOpenEventually(""String_Node_Str"",latch);
}",0.9926302414231258
46082,"@Test public void testClientPortConnection(){
  final Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getNetworkConfig().setPort(5701);
  final HazelcastInstance instance1=Hazelcast.newHazelcastInstance(config1);
  instance1.getMap(""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"");
  final Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getNetworkConfig().setPort(5702);
  HazelcastInstance instance2=Hazelcast.newHazelcastInstance(config2);
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.getGroupConfig().setName(""String_Node_Str"");
  final HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  assertNull(map.put(""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,map.size());
}","@Test public void testClientPortConnection(){
  final Config config1=new Config();
  config1.getGroupConfig().setName(""String_Node_Str"");
  config1.getNetworkConfig().setPort(5701);
  final HazelcastInstance instance1=Hazelcast.newHazelcastInstance(config1);
  instance1.getMap(""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"");
  final Config config2=new Config();
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getNetworkConfig().setPort(5702);
  Hazelcast.newHazelcastInstance(config2);
  final ClientConfig clientConfig=new ClientConfig();
  clientConfig.getGroupConfig().setName(""String_Node_Str"");
  final HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final IMap<Object,Object> map=client.getMap(""String_Node_Str"");
  assertNull(map.put(""String_Node_Str"",""String_Node_Str""));
  assertEquals(1,map.size());
}",0.984198645598194
46083,"@Test public void testClientConnectionBeforeServerReady() throws InterruptedException {
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  executorService.submit(new Runnable(){
    @Override public void run(){
      Hazelcast.newHazelcastInstance();
    }
  }
);
  final CountDownLatch clientLatch=new CountDownLatch(1);
  executorService.submit(new Runnable(){
    @Override public void run(){
      ClientConfig config=new ClientConfig();
      config.getNetworkConfig().setConnectionAttemptLimit(10);
      HazelcastInstance client=HazelcastClient.newHazelcastClient(config);
      clientLatch.countDown();
    }
  }
);
  assertOpenEventually(clientLatch);
}","@Test public void testClientConnectionBeforeServerReady() throws InterruptedException {
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  executorService.submit(new Runnable(){
    @Override public void run(){
      Hazelcast.newHazelcastInstance();
    }
  }
);
  final CountDownLatch clientLatch=new CountDownLatch(1);
  executorService.submit(new Runnable(){
    @Override public void run(){
      ClientConfig config=new ClientConfig();
      config.getNetworkConfig().setConnectionAttemptLimit(10);
      HazelcastClient.newHazelcastClient(config);
      clientLatch.countDown();
    }
  }
);
  assertOpenEventually(clientLatch);
}",0.9812734082397004
46084,"@Override public void run(){
  ClientConfig config=new ClientConfig();
  config.getNetworkConfig().setConnectionAttemptLimit(10);
  HazelcastInstance client=HazelcastClient.newHazelcastClient(config);
  clientLatch.countDown();
}","@Override public void run(){
  ClientConfig config=new ClientConfig();
  config.getNetworkConfig().setConnectionAttemptLimit(10);
  HazelcastClient.newHazelcastClient(config);
  clientLatch.countDown();
}",0.8637413394919169
46085,"@Test(timeout=20000,expected=IllegalStateException.class) public void testTimeoutToOutsideNetwork() throws Exception {
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  IList<Object> list=client.getList(""String_Node_Str"");
}","@Test(timeout=20000,expected=IllegalStateException.class) public void testTimeoutToOutsideNetwork() throws Exception {
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  clientConfig.getNetworkConfig().addAddress(""String_Node_Str"");
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  client.getList(""String_Node_Str"");
}",0.9565217391304348
46086,"public static void main(String[] args){
  final ClientConfig clientConfig=new ClientConfig();
  final HazelcastInstance instance1=Hazelcast.newHazelcastInstance();
  final HazelcastInstance instance2=Hazelcast.newHazelcastInstance();
  final HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final Stats stats=new Stats();
  if (args != null && args.length > 0) {
    for (    String arg : args) {
      arg=arg.trim();
      if (arg.startsWith(""String_Node_Str"")) {
        THREAD_COUNT=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        ENTRY_COUNT=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        VALUE_SIZE=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        GET_PERCENTAGE=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        PUT_PERCENTAGE=Integer.parseInt(arg.substring(1));
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + THREAD_COUNT);
  System.out.println(""String_Node_Str"" + ENTRY_COUNT);
  System.out.println(""String_Node_Str"" + VALUE_SIZE);
  System.out.println(""String_Node_Str"" + GET_PERCENTAGE);
  System.out.println(""String_Node_Str"" + PUT_PERCENTAGE);
  System.out.println(""String_Node_Str"" + (100 - (PUT_PERCENTAGE + GET_PERCENTAGE)));
  ExecutorService es=Executors.newFixedThreadPool(THREAD_COUNT);
  for (int i=0; i < THREAD_COUNT; i++) {
    es.submit(new Runnable(){
      public void run(){
        IMap<String,Object> map=client.getMap(""String_Node_Str"");
        while (true) {
          int key=(int)(Math.random() * ENTRY_COUNT);
          int operation=((int)(Math.random() * 100));
          if (operation < GET_PERCENTAGE) {
            map.get(String.valueOf(key));
            stats.gets.incrementAndGet();
          }
 else           if (operation < GET_PERCENTAGE + PUT_PERCENTAGE) {
            map.put(String.valueOf(key),new byte[VALUE_SIZE]);
            stats.puts.incrementAndGet();
          }
 else {
            map.remove(String.valueOf(key));
            stats.removes.incrementAndGet();
          }
        }
      }
    }
);
  }
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(STATS_SECONDS * 1000);
          System.out.println(""String_Node_Str"" + client.getCluster().getMembers().size());
          Stats currentStats=stats.getAndReset();
          System.out.println(currentStats);
          System.out.println(""String_Node_Str"" + currentStats.total() / STATS_SECONDS);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
}","public static void main(String[] args){
  final ClientConfig clientConfig=new ClientConfig();
  Hazelcast.newHazelcastInstance();
  Hazelcast.newHazelcastInstance();
  final HazelcastInstance client=HazelcastClient.newHazelcastClient(clientConfig);
  final Stats stats=new Stats();
  if (args != null && args.length > 0) {
    for (    String arg : args) {
      arg=arg.trim();
      if (arg.startsWith(""String_Node_Str"")) {
        THREAD_COUNT=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        ENTRY_COUNT=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        VALUE_SIZE=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        GET_PERCENTAGE=Integer.parseInt(arg.substring(1));
      }
 else       if (arg.startsWith(""String_Node_Str"")) {
        PUT_PERCENTAGE=Integer.parseInt(arg.substring(1));
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + THREAD_COUNT);
  System.out.println(""String_Node_Str"" + ENTRY_COUNT);
  System.out.println(""String_Node_Str"" + VALUE_SIZE);
  System.out.println(""String_Node_Str"" + GET_PERCENTAGE);
  System.out.println(""String_Node_Str"" + PUT_PERCENTAGE);
  System.out.println(""String_Node_Str"" + (100 - (PUT_PERCENTAGE + GET_PERCENTAGE)));
  ExecutorService es=Executors.newFixedThreadPool(THREAD_COUNT);
  for (int i=0; i < THREAD_COUNT; i++) {
    es.submit(new Runnable(){
      public void run(){
        IMap<String,Object> map=client.getMap(""String_Node_Str"");
        while (true) {
          int key=(int)(Math.random() * ENTRY_COUNT);
          int operation=((int)(Math.random() * 100));
          if (operation < GET_PERCENTAGE) {
            map.get(String.valueOf(key));
            stats.gets.incrementAndGet();
          }
 else           if (operation < GET_PERCENTAGE + PUT_PERCENTAGE) {
            map.put(String.valueOf(key),new byte[VALUE_SIZE]);
            stats.puts.incrementAndGet();
          }
 else {
            map.remove(String.valueOf(key));
            stats.removes.incrementAndGet();
          }
        }
      }
    }
);
  }
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    public void run(){
      while (true) {
        try {
          Thread.sleep(STATS_SECONDS * 1000);
          System.out.println(""String_Node_Str"" + client.getCluster().getMembers().size());
          Stats currentStats=stats.getAndReset();
          System.out.println(currentStats);
          System.out.println(""String_Node_Str"" + currentStats.total() / STATS_SECONDS);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
}",0.9883601506333448
46087,"protected void testLoggingWithConfiguration(boolean programmaticConfiguration) throws IOException {
  hazelcastFactory=new TestHazelcastFactory();
  Config cg=new Config();
  cg.setProperty(""String_Node_Str"",""String_Node_Str"");
  hazelcastFactory.newHazelcastInstance(cg);
  ClientConfig config=new ClientConfig();
  if (programmaticConfiguration) {
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  client=hazelcastFactory.newHazelcastClient(config);
  ILogger clientLogger=client.getLoggingService().getLogger(""String_Node_Str"");
  ILogger actualLogger=(ILogger)getFromField(clientLogger,""String_Node_Str"");
  Class<?> clientLoggerClass=actualLogger.getClass();
  ILogger expectedLogger=new Log4j2Factory().getLogger(""String_Node_Str"");
  Class<?> expectedLoggerClass=expectedLogger.getClass();
  assertSame(expectedLoggerClass,clientLoggerClass);
}","protected void testLoggingWithConfiguration(boolean programmaticConfiguration) throws IOException {
  hazelcastFactory=new TestHazelcastFactory();
  Config cg=new Config();
  cg.setProperty(""String_Node_Str"",""String_Node_Str"");
  hazelcastFactory.newHazelcastInstance(cg);
  ClientConfig config=new ClientConfig();
  if (programmaticConfiguration) {
    config.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(config);
  ILogger clientLogger=client.getLoggingService().getLogger(""String_Node_Str"");
  ILogger actualLogger=(ILogger)getFromField(clientLogger,""String_Node_Str"");
  Class<?> clientLoggerClass=actualLogger.getClass();
  ILogger expectedLogger=new Log4j2Factory().getLogger(""String_Node_Str"");
  Class<?> expectedLoggerClass=expectedLogger.getClass();
  assertSame(expectedLoggerClass,clientLoggerClass);
}",0.9905263157894736
46088,"@Before public void init(){
  Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().setPort(5701);
  config.getGroupConfig().setName(""String_Node_Str"");
  config.getGroupConfig().setPassword(""String_Node_Str"");
  final HazelcastInstance hz1=Hazelcast.newHazelcastInstance(config);
  Config config2=new Config();
  config2.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config2.getNetworkConfig().setPort(5702);
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  final HazelcastInstance hz2=Hazelcast.newHazelcastInstance(config2);
}","@Before public void init(){
  Config config=new Config();
  config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config.getNetworkConfig().setPort(5701);
  config.getGroupConfig().setName(""String_Node_Str"");
  config.getGroupConfig().setPassword(""String_Node_Str"");
  Hazelcast.newHazelcastInstance(config);
  Config config2=new Config();
  config2.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);
  config2.getNetworkConfig().setPort(5702);
  config2.getGroupConfig().setName(""String_Node_Str"");
  config2.getGroupConfig().setPassword(""String_Node_Str"");
  Hazelcast.newHazelcastInstance(config2);
}",0.9286775631500744
46089,"@Test public void testMultiClusterMultipleClients() throws MalformedURLException, URISyntaxException {
  final String cacheName=""String_Node_Str"";
  final String key1=""String_Node_Str"";
  final String valuecm1=""String_Node_Str"";
  final String valuecm2=""String_Node_Str"";
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  final CacheManager cm1=cachingProvider.getCacheManager(uri1,null);
  final CacheManager cm2=cachingProvider.getCacheManager(uri2,null);
  final CacheConfig<String,String> cacheConfig=new CacheConfig<String,String>();
  final Cache<String,String> cache1=cm1.createCache(cacheName,cacheConfig);
  final Cache<String,String> cache2=cm2.createCache(cacheName,cacheConfig);
  cache1.put(key1,valuecm1);
  cache2.put(key1,valuecm2);
  assertEquals(valuecm1,cache1.get(key1));
  assertEquals(valuecm2,cache2.get(key1));
  cachingProvider.close(uri1,null);
  cachingProvider.close(uri2,null);
  final CacheManager cm11=cachingProvider.getCacheManager(uri1,null);
  final Cache<String,String> cache11=cm11.getCache(cacheName);
  assertEquals(valuecm1,cache11.get(key1));
  cm11.close();
}","@Test public void testMultiClusterMultipleClients(){
  final String cacheName=""String_Node_Str"";
  final String key1=""String_Node_Str"";
  final String valuecm1=""String_Node_Str"";
  final String valuecm2=""String_Node_Str"";
  final HazelcastClientCachingProvider cachingProvider=new HazelcastClientCachingProvider();
  final CacheManager cm1=cachingProvider.getCacheManager(uri1,null);
  final CacheManager cm2=cachingProvider.getCacheManager(uri2,null);
  final CacheConfig<String,String> cacheConfig=new CacheConfig<String,String>();
  final Cache<String,String> cache1=cm1.createCache(cacheName,cacheConfig);
  final Cache<String,String> cache2=cm2.createCache(cacheName,cacheConfig);
  cache1.put(key1,valuecm1);
  cache2.put(key1,valuecm2);
  assertEquals(valuecm1,cache1.get(key1));
  assertEquals(valuecm2,cache2.get(key1));
  cachingProvider.close(uri1,null);
  cachingProvider.close(uri2,null);
  final CacheManager cm11=cachingProvider.getCacheManager(uri1,null);
  final Cache<String,String> cache11=cm11.getCache(cacheName);
  assertEquals(valuecm1,cache11.get(key1));
  cm11.close();
}",0.9776984834968778
46090,"protected void testLoadAllNearCacheInvalidation(InMemoryFormat inMemoryFormat) throws Exception {
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  Set<Integer> testKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT);
  Set<Integer> loadKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT / 2);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    if (i % 2 == 0) {
      loadKeys.add(i);
    }
    testKeys.add(i);
  }
  for (  int i : testKeys) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  final CountDownLatch completed=new CountDownLatch(1);
  nearCacheTestContext1.cache.loadAll(loadKeys,true,new CompletionListener(){
    @Override public void onCompletion(){
      completed.countDown();
    }
    @Override public void onException(    Exception e){
    }
  }
);
  completed.await(3,TimeUnit.SECONDS);
  for (  int i : loadKeys) {
    final int key=i;
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        Data keyData=nearCacheTestContext2.serializationService.toData(key);
        assertNull(nearCacheTestContext2.nearCache.get(keyData));
      }
    }
);
  }
}","protected void testLoadAllNearCacheInvalidation(InMemoryFormat inMemoryFormat) throws Exception {
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  Set<Integer> testKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT);
  Set<Integer> loadKeys=new HashSet<Integer>(DEFAULT_RECORD_COUNT / 2);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    if (i % 2 == 0) {
      loadKeys.add(i);
    }
    testKeys.add(i);
  }
  for (  int i : testKeys) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  final CountDownLatch completed=new CountDownLatch(1);
  nearCacheTestContext1.cache.loadAll(loadKeys,true,new CompletionListener(){
    @Override public void onCompletion(){
      completed.countDown();
    }
    @Override public void onException(    Exception e){
    }
  }
);
  assertTrue(completed.await(3,TimeUnit.SECONDS));
  for (  int i : loadKeys) {
    final int key=i;
    assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        Data keyData=nearCacheTestContext2.serializationService.toData(key);
        assertNull(nearCacheTestContext2.nearCache.get(keyData));
      }
    }
);
  }
}",0.9957924263674616
46091,"@Test public void cacheEntryListenerCountIncreasedAndDecreasedCorrectly(){
  final CachingProvider provider=getCachingProvider();
  CacheManager cacheManager=provider.getCacheManager();
  CompleteConfiguration<String,String> config=new MutableConfiguration<String,String>().addCacheEntryListenerConfiguration(new MutableCacheEntryListenerConfiguration<String,String>(FactoryBuilder.factoryOf(new TestListener(new AtomicInteger())),null,true,true));
  final Cache<String,String> cache=cacheManager.createCache(""String_Node_Str"",config);
}","@Test public void cacheEntryListenerCountIncreasedAndDecreasedCorrectly(){
  final CachingProvider provider=getCachingProvider();
  CacheManager cacheManager=provider.getCacheManager();
  CompleteConfiguration<String,String> config=new MutableConfiguration<String,String>().addCacheEntryListenerConfiguration(new MutableCacheEntryListenerConfiguration<String,String>(FactoryBuilder.factoryOf(new TestListener(new AtomicInteger())),null,true,true));
  cacheManager.createCache(""String_Node_Str"",config);
}",0.968299711815562
46092,"@Test public void testLoadAll() throws InterruptedException {
  ICache<String,String> cache=createCache();
  String cacheName=cache.getName();
  Map<String,String> entries=createAndFillEntries();
  final CountDownLatch latch=new CountDownLatch(1);
  cache.loadAll(entries.keySet(),true,new CompletionListener(){
    @Override public void onCompletion(){
      latch.countDown();
    }
    @Override public void onException(    Exception e){
      latch.countDown();
    }
  }
);
  latch.await(60,TimeUnit.SECONDS);
  for (  Map.Entry<String,String> entry : entries.entrySet()) {
    String key=entry.getKey();
    String expectedValue=entries.get(key);
    String actualValue=cache.get(key);
    assertEquals(expectedValue,actualValue);
  }
  Node node=getNode(hazelcastInstance);
  InternalPartitionService partitionService=node.getPartitionService();
  SerializationService serializationService=node.getSerializationService();
  for (  Map.Entry<String,String> entry : entries.entrySet()) {
    String key=entry.getKey();
    String expectedValue=entries.get(key);
    Data keyData=serializationService.toData(key);
    int keyPartitionId=partitionService.getPartitionId(keyData);
    for (int i=0; i < INSTANCE_COUNT; i++) {
      Node n=getNode(hazelcastInstances[i]);
      ICacheService cacheService=n.getNodeEngine().getService(ICacheService.SERVICE_NAME);
      ICacheRecordStore recordStore=cacheService.getRecordStore(""String_Node_Str"" + cacheName,keyPartitionId);
      assertNotNull(recordStore);
      String actualValue=serializationService.toObject(recordStore.get(keyData,null));
      assertEquals(expectedValue,actualValue);
    }
  }
}","@Test public void testLoadAll() throws InterruptedException {
  ICache<String,String> cache=createCache();
  String cacheName=cache.getName();
  Map<String,String> entries=createAndFillEntries();
  final CountDownLatch latch=new CountDownLatch(1);
  cache.loadAll(entries.keySet(),true,new CompletionListener(){
    @Override public void onCompletion(){
      latch.countDown();
    }
    @Override public void onException(    Exception e){
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(60,TimeUnit.SECONDS));
  for (  Map.Entry<String,String> entry : entries.entrySet()) {
    String key=entry.getKey();
    String expectedValue=entries.get(key);
    String actualValue=cache.get(key);
    assertEquals(expectedValue,actualValue);
  }
  Node node=getNode(hazelcastInstance);
  InternalPartitionService partitionService=node.getPartitionService();
  SerializationService serializationService=node.getSerializationService();
  for (  Map.Entry<String,String> entry : entries.entrySet()) {
    String key=entry.getKey();
    String expectedValue=entries.get(key);
    Data keyData=serializationService.toData(key);
    int keyPartitionId=partitionService.getPartitionId(keyData);
    for (int i=0; i < INSTANCE_COUNT; i++) {
      Node n=getNode(hazelcastInstances[i]);
      ICacheService cacheService=n.getNodeEngine().getService(ICacheService.SERVICE_NAME);
      ICacheRecordStore recordStore=cacheService.getRecordStore(""String_Node_Str"" + cacheName,keyPartitionId);
      assertNotNull(recordStore);
      String actualValue=serializationService.toObject(recordStore.get(keyData,null));
      assertEquals(expectedValue,actualValue);
    }
  }
}",0.9963855421686748
46093,"@Override public void write(Cache.Entry<? extends Integer,? extends Integer> entry) throws CacheWriterException {
  Integer value=entry.getValue().intValue();
  if (!isAcceptableValue(value)) {
    throw new CacheWriterException(""String_Node_Str"" + value);
  }
}","@Override public void write(Cache.Entry<? extends Integer,? extends Integer> entry) throws CacheWriterException {
  Integer value=entry.getValue();
  if (!isAcceptableValue(value)) {
    throw new CacheWriterException(""String_Node_Str"" + value);
  }
}",0.9785575048732944
46094,"private int getPartitionCount(){
  Node node=getNode(getHazelcastInstance());
  if (node != null) {
    return node.getProperties().getInteger(GroupProperty.PARTITION_COUNT);
  }
  return Integer.valueOf(GroupProperty.PARTITION_COUNT.getDefaultValue());
}","private int getPartitionCount(){
  Node node=getNode(getHazelcastInstance());
  if (node != null) {
    return node.getProperties().getInteger(GroupProperty.PARTITION_COUNT);
  }
  return parseInt(GroupProperty.PARTITION_COUNT.getDefaultValue());
}",0.9542743538767396
46095,"@Test public void whenConfigLocationAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,HazelcastCachingProvider.propertiesByLocation(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION));
  assertCacheManagerInstance(cacheManager,instance3);
}","@Test public void whenConfigLocationAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,propertiesByLocation(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION));
  assertCacheManagerInstance(cacheManager,instance3);
}",0.9654218533886584
46096,"@Test public void whenInstanceItselfAsProperty_andInvalidConfigURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,HazelcastCachingProvider.propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenInstanceItselfAsProperty_andInvalidConfigURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.9646393210749646
46097,"@Test(expected=CacheException.class) public void whenInvalidConfigLocationAsUri_thenFails() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}","@Test(expected=CacheException.class) public void whenInvalidConfigLocationAsUri_thenFails() throws URISyntaxException {
  cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}",0.8669724770642202
46098,"@Test public void whenDefaultURI_instanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(null,null,HazelcastCachingProvider.propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenDefaultURI_instanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(null,null,propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.9612403100775194
46099,"@Test public void whenInstanceItselfAsProperty_andValidConfigURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION),null,HazelcastCachingProvider.propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenInstanceItselfAsProperty_andValidConfigURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION),null,propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.9670619235836628
46100,"@Test public void whenOtherURI_instanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,HazelcastCachingProvider.propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenOtherURI_instanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.9635036496350364
46101,"@Test public void whenInstanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,HazelcastCachingProvider.propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenInstanceNameAsProperty_thenThatInstanceIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,propertiesByInstanceName(INSTANCE_2_NAME));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.9625187406296852
46102,"@Test(expected=CacheException.class) public void whenOtherURI_noInstanceName_thenFails() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}","@Test(expected=CacheException.class) public void whenOtherURI_noInstanceName_thenFails() throws URISyntaxException {
  cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}",0.8651162790697674
46103,"@Test(expected=CacheException.class) public void whenOtherURI_invalidInstanceNameAsProperty_thenFails() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,HazelcastCachingProvider.propertiesByInstanceName(""String_Node_Str""));
}","@Test(expected=CacheException.class) public void whenOtherURI_invalidInstanceNameAsProperty_thenFails() throws URISyntaxException {
  cachingProvider.getCacheManager(new URI(""String_Node_Str""),null,propertiesByInstanceName(""String_Node_Str""));
}",0.8551483420593369
46104,"@Test public void whenInstanceItselfAsProperty_andValidInstanceNameURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION),null,HazelcastCachingProvider.propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}","@Test public void whenInstanceItselfAsProperty_andValidInstanceNameURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str"" + CONFIG_CLASSPATH_LOCATION),null,propertiesByInstanceItself(instance2));
  assertCacheManagerInstance(cacheManager,instance2);
}",0.96757457846952
46105,"@Test(expected=CacheException.class) public void whenDefaultURI_invalidInstanceNameAsProperty_thenFails() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(null,null,HazelcastCachingProvider.propertiesByInstanceName(""String_Node_Str""));
}","@Test(expected=CacheException.class) public void whenDefaultURI_invalidInstanceNameAsProperty_thenFails() throws URISyntaxException {
  cachingProvider.getCacheManager(null,null,propertiesByInstanceName(""String_Node_Str""));
}",0.776735459662289
46106,"@Test(expected=CacheException.class) public void whenInvalidInstanceNameAsUri_thenFails() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}","@Test(expected=CacheException.class) public void whenInvalidInstanceNameAsUri_thenFails() throws URISyntaxException {
  cachingProvider.getCacheManager(new URI(""String_Node_Str""),null);
}",0.8657407407407407
46107,"@Test public void whenInstanceItselfAsProperty_andDefaultURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(null,null,HazelcastCachingProvider.propertiesByInstanceItself(instance3));
  assertCacheManagerInstance(cacheManager,instance3);
}","@Test public void whenInstanceItselfAsProperty_andDefaultURI_thenInstanceItselfIsUsed() throws URISyntaxException {
  HazelcastCacheManager cacheManager=(HazelcastCacheManager)cachingProvider.getCacheManager(null,null,propertiesByInstanceItself(instance3));
  assertCacheManagerInstance(cacheManager,instance3);
}",0.9615975422427036
46108,"@Test public void testAveragePutTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  long start=System.nanoTime();
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long end=System.nanoTime();
  float avgPutTime=(end - start) / 1000;
  assertTrue(stats.getAveragePutTime() > 0);
  assertTrue(stats.getAveragePutTime() < avgPutTime);
}","@Test public void testAveragePutTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  long start=System.nanoTime();
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long end=System.nanoTime();
  float avgPutTime=NANOSECONDS.toMicros(end - start);
  assertTrue(stats.getAveragePutTime() > 0);
  assertTrue(stats.getAveragePutTime() < avgPutTime);
}",0.8668796592119276
46109,"@Test public void testAverageGetTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long start=System.nanoTime();
  for (int i=0; i < 2 * ENTRY_COUNT; i++) {
    cache.get(i);
  }
  long end=System.nanoTime();
  float avgGetTime=(end - start) / 1000;
  assertTrue(stats.getAverageGetTime() > 0);
  assertTrue(stats.getAverageGetTime() < avgGetTime);
}","@Test public void testAverageGetTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long start=System.nanoTime();
  for (int i=0; i < 2 * ENTRY_COUNT; i++) {
    cache.get(i);
  }
  long end=System.nanoTime();
  float avgGetTime=NANOSECONDS.toMicros(end - start);
  assertTrue(stats.getAverageGetTime() > 0);
  assertTrue(stats.getAverageGetTime() < avgGetTime);
}",0.9747899159663864
46110,"@Test public void testAverageRemoveTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long start=System.nanoTime();
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.remove(i);
  }
  long end=System.nanoTime();
  float avgRemoveTime=(end - start) / 1000;
  assertTrue(stats.getAverageRemoveTime() > 0);
  assertTrue(stats.getAverageRemoveTime() < avgRemoveTime);
  float currentAverageRemoveTime=stats.getAverageRemoveTime();
  sleepAtLeastMillis(1);
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.remove(i);
  }
  assertEquals(currentAverageRemoveTime,stats.getAverageRemoveTime(),0.0f);
}","@Test public void testAverageRemoveTimeStat(){
  ICache<Integer,String> cache=createCache();
  CacheStatistics stats=cache.getLocalCacheStatistics();
  final int ENTRY_COUNT=100;
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.put(i,""String_Node_Str"" + i);
  }
  long start=System.nanoTime();
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.remove(i);
  }
  long end=System.nanoTime();
  float avgRemoveTime=NANOSECONDS.toMicros(end - start);
  assertTrue(stats.getAverageRemoveTime() > 0);
  assertTrue(stats.getAverageRemoveTime() < avgRemoveTime);
  float currentAverageRemoveTime=stats.getAverageRemoveTime();
  sleepAtLeastMillis(1);
  for (int i=0; i < ENTRY_COUNT; i++) {
    cache.remove(i);
  }
  assertEquals(currentAverageRemoveTime,stats.getAverageRemoveTime(),0.0f);
}",0.9826589595375722
46111,"/** 
 * Stores the Near Cache keys from the supplied iterator.
 * @param iterator {@link Iterator} over the key set of a {@link com.hazelcast.internal.nearcache.NearCacheRecordStore}
 */
public void storeKeys(Iterator<K> iterator){
  long startedNanos=System.nanoTime();
  FileOutputStream fos=null;
  try {
    lastWrittenBytes=0;
    lastKeyCount=0;
    fos=new FileOutputStream(tmpStoreFile,false);
    writeInt(fos,MAGIC_BYTES);
    writeInt(fos,FileFormat.INTERLEAVED_LENGTH_FIELD.ordinal());
    writeKeySet(fos,fos.getChannel(),iterator);
    if (lastKeyCount == 0) {
      deleteQuietly(storeFile);
      updatePersistenceStats(startedNanos);
      return;
    }
    fos.flush();
    rename(tmpStoreFile,storeFile);
    updatePersistenceStats(startedNanos);
  }
 catch (  Exception e) {
    logger.warning(format(""String_Node_Str"",nearCacheName,storeFile.getAbsolutePath()),e);
    nearCacheStats.addPersistenceFailure(e);
  }
 finally {
    deleteQuietly(tmpStoreFile);
    closeResource(fos);
  }
}","/** 
 * Stores the Near Cache keys from the supplied iterator.
 * @param iterator {@link Iterator} over the key set of a {@link com.hazelcast.internal.nearcache.NearCacheRecordStore}
 */
public void storeKeys(Iterator<K> iterator){
  long startedNanos=System.nanoTime();
  FileOutputStream fos=null;
  try {
    lastWrittenBytes=0;
    lastKeyCount=0;
    fos=new FileOutputStream(tmpStoreFile,false);
    writeInt(fos,MAGIC_BYTES);
    writeInt(fos,FileFormat.INTERLEAVED_LENGTH_FIELD.ordinal());
    writeKeySet(fos,fos.getChannel(),iterator);
    if (lastKeyCount == 0) {
      deleteQuietly(storeFile);
      updatePersistenceStats(startedNanos);
      return;
    }
    fos.flush();
    closeResource(fos);
    rename(tmpStoreFile,storeFile);
    updatePersistenceStats(startedNanos);
  }
 catch (  Exception e) {
    logger.warning(format(""String_Node_Str"",nearCacheName,storeFile.getAbsolutePath()),e);
    nearCacheStats.addPersistenceFailure(e);
  }
 finally {
    closeResource(fos);
    deleteQuietly(tmpStoreFile);
  }
}",0.9647058823529412
46112,"@Test(timeout=TEST_TIMEOUT) @Category(SlowTest.class) public void testCreateStoreFile_withInvalidDirectory(){
  String directory=""String_Node_Str"";
  nearCacheConfig.getPreloaderConfig().setStoreInitialDelaySeconds(1).setStoreIntervalSeconds(1).setDirectory(directory);
  expectedException.expectMessage(""String_Node_Str"" + directory + getDefaultStoreFile().getName());
  expectedException.expect(HazelcastException.class);
  createContext(true);
}","@Test(timeout=TEST_TIMEOUT) @Category(SlowTest.class) public void testCreateStoreFile_withInvalidDirectory(){
  String directory=""String_Node_Str"";
  nearCacheConfig.getPreloaderConfig().setStoreInitialDelaySeconds(1).setStoreIntervalSeconds(1).setDirectory(directory);
  File lockFile=new File(directory,getDefaultStoreFile().getName());
  expectedException.expectMessage(""String_Node_Str"" + lockFile.getAbsolutePath());
  expectedException.expect(HazelcastException.class);
  createContext(true);
}",0.8607594936708861
46113,"/** 
 * Stores the Near Cache keys from the supplied iterator.
 * @param iterator {@link Iterator} over the key set of a {@link com.hazelcast.internal.nearcache.NearCacheRecordStore}
 */
public void storeKeys(Iterator<K> iterator){
  long startedNanos=System.nanoTime();
  FileOutputStream fos=null;
  try {
    lastWrittenBytes=0;
    lastKeyCount=0;
    fos=new FileOutputStream(tmpStoreFile,false);
    writeInt(fos,MAGIC_BYTES);
    writeInt(fos,FileFormat.INTERLEAVED_LENGTH_FIELD.ordinal());
    writeKeySet(fos,fos.getChannel(),iterator);
    if (lastKeyCount == 0) {
      deleteQuietly(storeFile);
      updatePersistenceStats(startedNanos);
      return;
    }
    fos.flush();
    rename(tmpStoreFile,storeFile);
    updatePersistenceStats(startedNanos);
  }
 catch (  Exception e) {
    logger.warning(format(""String_Node_Str"",nearCacheName,storeFile.getAbsolutePath()),e);
    nearCacheStats.addPersistenceFailure(e);
  }
 finally {
    deleteQuietly(tmpStoreFile);
    closeResource(fos);
  }
}","/** 
 * Stores the Near Cache keys from the supplied iterator.
 * @param iterator {@link Iterator} over the key set of a {@link com.hazelcast.internal.nearcache.NearCacheRecordStore}
 */
public void storeKeys(Iterator<K> iterator){
  long startedNanos=System.nanoTime();
  FileOutputStream fos=null;
  try {
    lastWrittenBytes=0;
    lastKeyCount=0;
    fos=new FileOutputStream(tmpStoreFile,false);
    writeInt(fos,MAGIC_BYTES);
    writeInt(fos,FileFormat.INTERLEAVED_LENGTH_FIELD.ordinal());
    writeKeySet(fos,fos.getChannel(),iterator);
    if (lastKeyCount == 0) {
      deleteQuietly(storeFile);
      updatePersistenceStats(startedNanos);
      return;
    }
    fos.flush();
    closeResource(fos);
    rename(tmpStoreFile,storeFile);
    updatePersistenceStats(startedNanos);
  }
 catch (  Exception e) {
    logger.warning(format(""String_Node_Str"",nearCacheName,storeFile.getAbsolutePath()),e);
    nearCacheStats.addPersistenceFailure(e);
  }
 finally {
    closeResource(fos);
    deleteQuietly(tmpStoreFile);
  }
}",0.9647058823529412
46114,"@Test(timeout=TEST_TIMEOUT) @Category(SlowTest.class) public void testCreateStoreFile_withInvalidDirectory(){
  String directory=""String_Node_Str"";
  nearCacheConfig.getPreloaderConfig().setStoreInitialDelaySeconds(1).setStoreIntervalSeconds(1).setDirectory(directory);
  expectedException.expectMessage(""String_Node_Str"" + directory + getStoreFile().getName());
  expectedException.expect(HazelcastException.class);
  createContext(true);
}","@Test(timeout=TEST_TIMEOUT) @Category(SlowTest.class) public void testCreateStoreFile_withInvalidDirectory(){
  String directory=""String_Node_Str"";
  nearCacheConfig.getPreloaderConfig().setStoreInitialDelaySeconds(1).setStoreIntervalSeconds(1).setDirectory(directory);
  File lockFile=new File(directory,getStoreFile().getName());
  expectedException.expectMessage(""String_Node_Str"" + lockFile.getAbsolutePath());
  expectedException.expect(HazelcastException.class);
  createContext(true);
}",0.8715203426124197
46115,"@Override public void start(){
  if (logger.isFineEnabled()) {
    logger.fine(""String_Node_Str"" + inputThreadCount + ""String_Node_Str""+ outputThreads+ ""String_Node_Str"");
  }
  logger.log(getSelectorMode() != SELECT ? INFO : FINE,""String_Node_Str"" + getSelectorMode());
  this.inputThreads=new NonBlockingIOThread[inputThreadCount];
  for (int i=0; i < inputThreads.length; i++) {
    NonBlockingIOThread thread=new NonBlockingIOThread(hazelcastThreadGroup.getInternalThreadGroup(),hazelcastThreadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + ""String_Node_Str"" + i,loggingService.getLogger(NonBlockingIOThread.class),oomeHandler,selectorMode,idleStrategy);
    thread.id=i;
    thread.setSelectorWorkaroundTest(selectorWorkaroundTest);
    inputThreads[i]=thread;
    metricsRegistry.scanAndRegister(thread,""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
    thread.start();
  }
  this.outputThreads=new NonBlockingIOThread[outputThreadCount];
  for (int i=0; i < outputThreads.length; i++) {
    NonBlockingIOThread thread=new NonBlockingIOThread(hazelcastThreadGroup.getInternalThreadGroup(),hazelcastThreadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + ""String_Node_Str"" + i,loggingService.getLogger(NonBlockingIOThread.class),oomeHandler,selectorMode,idleStrategy);
    thread.id=i;
    thread.setSelectorWorkaroundTest(selectorWorkaroundTest);
    outputThreads[i]=thread;
    metricsRegistry.scanAndRegister(thread,""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
    thread.start();
  }
  startIOBalancer();
  if (metricsRegistry.minimumLevel().isEnabled(DEBUG)) {
    metricsRegistry.scheduleAtFixedRate(new PublishAllTask(),1,SECONDS);
  }
}","@Override public void start(){
  if (logger.isFineEnabled()) {
    logger.fine(""String_Node_Str"" + inputThreadCount + ""String_Node_Str""+ outputThreadCount+ ""String_Node_Str"");
  }
  logger.log(getSelectorMode() != SELECT ? INFO : FINE,""String_Node_Str"" + getSelectorMode());
  this.inputThreads=new NonBlockingIOThread[inputThreadCount];
  for (int i=0; i < inputThreads.length; i++) {
    NonBlockingIOThread thread=new NonBlockingIOThread(hazelcastThreadGroup.getInternalThreadGroup(),hazelcastThreadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + ""String_Node_Str"" + i,loggingService.getLogger(NonBlockingIOThread.class),oomeHandler,selectorMode,idleStrategy);
    thread.id=i;
    thread.setSelectorWorkaroundTest(selectorWorkaroundTest);
    inputThreads[i]=thread;
    metricsRegistry.scanAndRegister(thread,""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
    thread.start();
  }
  this.outputThreads=new NonBlockingIOThread[outputThreadCount];
  for (int i=0; i < outputThreads.length; i++) {
    NonBlockingIOThread thread=new NonBlockingIOThread(hazelcastThreadGroup.getInternalThreadGroup(),hazelcastThreadGroup.getThreadPoolNamePrefix(""String_Node_Str"") + ""String_Node_Str"" + i,loggingService.getLogger(NonBlockingIOThread.class),oomeHandler,selectorMode,idleStrategy);
    thread.id=i;
    thread.setSelectorWorkaroundTest(selectorWorkaroundTest);
    outputThreads[i]=thread;
    metricsRegistry.scanAndRegister(thread,""String_Node_Str"" + thread.getName() + ""String_Node_Str"");
    thread.start();
  }
  startIOBalancer();
  if (metricsRegistry.minimumLevel().isEnabled(DEBUG)) {
    metricsRegistry.scheduleAtFixedRate(new PublishAllTask(),1,SECONDS);
  }
}",0.998217468805704
46116,"public ClientInvocationFuture invoke(){
  assert(clientMessage != null);
  try {
    if (urgent) {
      clientMessage.setCorrelationId(callIdSequence.renew());
    }
 else {
      clientMessage.setCorrelationId(callIdSequence.next());
    }
    invokeOnSelection();
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
  return clientInvocationFuture;
}","public ClientInvocationFuture invoke(){
  assert(clientMessage != null);
  try {
    if (callId == 0) {
      callId=urgent ? callIdSequence.forceNext() : callIdSequence.next();
    }
    clientMessage.setCorrelationId(callId);
    invokeOnSelection();
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
  return clientInvocationFuture;
}",0.7827050997782705
46117,"@Override public void run(){
  try {
    callIdSequence.complete();
    invoke();
  }
 catch (  Throwable e) {
    clientInvocationFuture.complete(e);
  }
}","@Override public void run(){
  callId=callIdSequence.forceNext();
  callIdSequence.complete();
  try {
    invoke();
  }
 catch (  Throwable e) {
    clientInvocationFuture.complete(e);
  }
}",0.8645533141210374
46118,"public ClientInvocationFuture invokeUrgent(){
  urgent=true;
  return invoke();
}","public ClientInvocationFuture invokeUrgent(){
  assert(clientMessage != null);
  clientMessage.setCorrelationId(callIdSequence.forceNext());
  invokeOnSelection();
  return clientInvocationFuture;
}",0.5448028673835126
46119,"public ClientInvocationFuture invoke(){
  assert(clientMessage != null);
  try {
    if (urgent) {
      clientMessage.setCorrelationId(callIdSequence.renew());
    }
 else {
      clientMessage.setCorrelationId(callIdSequence.next());
    }
    invokeOnSelection();
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
  return clientInvocationFuture;
}","public ClientInvocationFuture invoke(){
  assert(clientMessage != null);
  clientMessage.setCorrelationId(callIdSequence.next());
  invokeOnSelection();
  return clientInvocationFuture;
}",0.57984496124031
46120,"@Override public void run(){
  try {
    callIdSequence.complete();
    invoke();
  }
 catch (  Throwable e) {
    clientInvocationFuture.complete(e);
  }
}","@Override public void run(){
  retry();
}",0.3959390862944162
46121,"private void invokeOnSelection() throws IOException {
  if (isBindToSingleConnection()) {
    invocationService.invokeOnConnection(this,(ClientConnection)connection);
  }
 else   if (partitionId != -1) {
    invocationService.invokeOnPartitionOwner(this,partitionId);
  }
 else   if (address != null) {
    invocationService.invokeOnTarget(this,address);
  }
 else {
    invocationService.invokeOnRandomTarget(this);
  }
}","private void invokeOnSelection(){
  try {
    if (isBindToSingleConnection()) {
      invocationService.invokeOnConnection(this,(ClientConnection)connection);
    }
 else     if (partitionId != -1) {
      invocationService.invokeOnPartitionOwner(this,partitionId);
    }
 else     if (address != null) {
      invocationService.invokeOnTarget(this,address);
    }
 else {
      invocationService.invokeOnRandomTarget(this);
    }
  }
 catch (  Exception e) {
    if (e instanceof HazelcastOverloadException) {
      throw (HazelcastOverloadException)e;
    }
    notifyException(e);
  }
}",0.1325420375865479
46122,"@Override public Class<?>[] getParameterTypes(){
  return parameterTypes;
}","@Override @SuppressFBWarnings(""String_Node_Str"") public Class<?>[] getParameterTypes(){
  return parameterTypes;
}",0.7936507936507936
46123,"/** 
 * Lock a specific key on a local partition only
 * @param key         the key to lock
 * @param caller      the identifier for the caller
 * @param threadId    the identifier for the thread on the caller
 * @param referenceId the identifier for the invocation of the caller (e.g. operation call ID)
 * @param leaseTime   the lease duration in milliseconds
 * @return if the lock was successfully acquired
 */
boolean localLock(Data key,String caller,long threadId,long referenceId,long leaseTime);","/** 
 * Lock a specific key on a local partition only. Does not observe LOCK_MAX_LEASE_TIME_SECONDS
 * @see com.hazelcast.spi.properties.GroupProperty#LOCK_MAX_LEASE_TIME_SECONDS
 * @param key         the key to lock
 * @param caller      the identifier for the caller
 * @param threadId    the identifier for the thread on the caller
 * @param referenceId the identifier for the invocation of the caller (e.g. operation call ID)
 * @param leaseTime   the lease duration in milliseconds
 * @return if the lock was successfully acquired
 */
boolean localLock(Data key,String caller,long threadId,long referenceId,long leaseTime);",0.8894783377541998
46124,"@Override public boolean localLock(Data key,String caller,long threadId,long referenceId,long leaseTime){
  leaseTime=getLeaseTime(leaseTime);
  LockResourceImpl lock=getLock(key);
  return lock.lock(caller,threadId,referenceId,leaseTime,false,false,true);
}","@Override public boolean localLock(Data key,String caller,long threadId,long referenceId,long leaseTime){
  LockResourceImpl lock=getLock(key);
  return lock.lock(caller,threadId,referenceId,leaseTime,false,false,true);
}",0.9227557411273486
46125,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  name=in.readUTF();
  String modificationTypeName=in.readUTF();
  modificationType=modificationTypeName.equals(""String_Node_Str"") ? null : EntryEventType.valueOf(modificationTypeName);
  oldValue=in.readData();
  value=in.readData();
  caller=in.readUTF();
  threadId=in.readLong();
  begin=in.readLong();
  entryBackupProcessor=in.readObject();
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  String modificationTypeName=in.readUTF();
  modificationType=modificationTypeName.equals(""String_Node_Str"") ? null : EntryEventType.valueOf(modificationTypeName);
  oldValue=in.readData();
  value=in.readData();
  caller=in.readUTF();
  begin=in.readLong();
  entryBackupProcessor=in.readObject();
}",0.9452852153667056
46126,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(name);
  out.writeUTF(modificationType != null ? modificationType.name() : ""String_Node_Str"");
  out.writeData(oldValue);
  out.writeData(value);
  out.writeUTF(caller);
  out.writeLong(threadId);
  out.writeLong(begin);
  out.writeObject(entryBackupProcessor);
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(modificationType != null ? modificationType.name() : ""String_Node_Str"");
  out.writeData(oldValue);
  out.writeData(value);
  out.writeUTF(caller);
  out.writeLong(begin);
  out.writeObject(entryBackupProcessor);
}",0.5887207702888583
46127,"public EntryOffloadableSetUnlockOperation(String name,EntryEventType modificationType,Data key,Data oldValue,Data value,String caller,long threadId,long begin,EntryBackupProcessor entryBackupProcessor){
  super(name,key,value);
  this.name=name;
  this.value=value;
  this.oldValue=oldValue;
  this.caller=caller;
  this.begin=begin;
  this.threadId=threadId;
  this.modificationType=modificationType;
  this.entryBackupProcessor=entryBackupProcessor;
}","public EntryOffloadableSetUnlockOperation(String name,EntryEventType modificationType,Data key,Data oldValue,Data value,String caller,long threadId,long begin,EntryBackupProcessor entryBackupProcessor){
  super(name,key,value);
  this.value=value;
  this.oldValue=oldValue;
  this.caller=caller;
  this.begin=begin;
  this.modificationType=modificationType;
  this.entryBackupProcessor=entryBackupProcessor;
  this.setThreadId(threadId);
}",0.5717488789237668
46128,"@SuppressWarnings(""String_Node_Str"") private void runOffloadedModifyingEntryProcessor(final Object previousValue,String executorName){
  final OperationServiceImpl ops=(OperationServiceImpl)getNodeEngine().getOperationService();
  final Data finalDataKey=dataKey;
  final String finalCaller=getCallerUuid();
  final long finalThreadId=threadId;
  final long finalCallId=getCallId();
  final long finalBegin=begin;
  recordStore.localLock(finalDataKey,finalCaller,finalThreadId,finalCallId,Long.MAX_VALUE);
  ops.onStartAsyncOperation(this);
  getNodeEngine().getExecutionService().execute(executorName,new Runnable(){
    @Override public void run(){
      try {
        final Map.Entry entry=createMapEntry(dataKey,previousValue);
        final Data result=process(entry);
        if (!noOp(entry,previousValue)) {
          Data newValue=toData(entry.getValue());
          EntryEventType modificationType;
          if (entry.getValue() == null) {
            modificationType=REMOVED;
          }
 else {
            modificationType=(previousValue == null) ? ADDED : UPDATED;
          }
          updateAndUnlock(toData(previousValue),newValue,modificationType,finalCaller,finalThreadId,result,finalBegin);
        }
 else {
          unlockOnly(result,finalCaller,finalThreadId,finalBegin);
        }
      }
 catch (      Throwable t) {
        unlockOnly(t,finalCaller,finalThreadId,finalBegin);
      }
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") private void runOffloadedModifyingEntryProcessor(final Object previousValue,String executorName){
  final OperationServiceImpl ops=(OperationServiceImpl)getNodeEngine().getOperationService();
  final Data finalDataKey=dataKey;
  final String finalCaller=getCallerUuid();
  final long finalThreadId=threadId;
  final long finalCallId=getCallId();
  final long finalBegin=begin;
  recordStore.localLock(finalDataKey,finalCaller,finalThreadId,finalCallId,-1);
  ops.onStartAsyncOperation(this);
  getNodeEngine().getExecutionService().execute(executorName,new Runnable(){
    @Override public void run(){
      try {
        final Map.Entry entry=createMapEntry(dataKey,previousValue);
        final Data result=process(entry);
        if (!noOp(entry,previousValue)) {
          Data newValue=toData(entry.getValue());
          EntryEventType modificationType;
          if (entry.getValue() == null) {
            modificationType=REMOVED;
          }
 else {
            modificationType=(previousValue == null) ? ADDED : UPDATED;
          }
          updateAndUnlock(toData(previousValue),newValue,modificationType,finalCaller,finalThreadId,result,finalBegin);
        }
 else {
          unlockOnly(result,finalCaller,finalThreadId,finalBegin);
        }
      }
 catch (      Throwable t) {
        unlockOnly(t,finalCaller,finalThreadId,finalBegin);
      }
    }
  }
);
}",0.9943701618578464
46129,"@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,((Long)strategy.getOrNull(third)).longValue());
  assertNull(strategy.getOrNull(fourth));
  if (System.getenv(""String_Node_Str"") != null) {
    assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
    assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
    assertEquals(300,((Long)strategy.getOrNull(""String_Node_Str"",third)).longValue());
    assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
  }
}","@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,((Integer)strategy.getOrNull(third)).intValue());
  assertNull(strategy.getOrNull(fourth));
  if (System.getenv(""String_Node_Str"") != null) {
    assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
    assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
    assertEquals(300,((Integer)strategy.getOrNull(""String_Node_Str"",third)).intValue());
    assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
  }
}",0.98856416772554
46130,"@Test public void testExecuteScriptRequest_whenTargetAllMembers() throws Exception {
  ExecuteScriptRequest request=new ExecuteScriptRequest(""String_Node_Str"",""String_Node_Str"",true,null);
  JsonObject jsonObject=new JsonObject();
  request.writeResponse(managementCenterService,jsonObject);
  JsonObject result=(JsonObject)jsonObject.get(""String_Node_Str"");
  String response=(String)request.readResponse(result);
  assertEquals(format(""String_Node_Str""),response);
}","@Test public void testExecuteScriptRequest_whenTargetAllMembers() throws Exception {
  ExecuteScriptRequest request=new ExecuteScriptRequest(""String_Node_Str"",""String_Node_Str"",true,null);
  JsonObject jsonObject=new JsonObject();
  request.writeResponse(managementCenterService,jsonObject);
  JsonObject result=(JsonObject)jsonObject.get(""String_Node_Str"");
  String response=(String)request.readResponse(result);
  assertEquals(""String_Node_Str"",response);
}",0.9913793103448276
46131,"@Test public void testLifecycle(){
  hz.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
);
}","@Test public void testLifecycle(){
  hz.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"" + LINE_SEPARATOR + ""String_Node_Str"");
    }
  }
);
}",0.935672514619883
46132,"@Test(expected=InvalidConfigurationException.class) public void testImportEmptyResourceContent() throws Exception {
  File config=createConfigFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(config);
  String config1Xml=HAZELCAST_CLIENT_START_TAG + ""String_Node_Str"" + config.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"";
  writeStringToStreamAndClose(os,""String_Node_Str"");
  buildConfig(config1Xml);
}","@Test(expected=InvalidConfigurationException.class) public void testImportEmptyResourceContent() throws Exception {
  File config=createConfigFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(config);
  String configXml=HAZELCAST_CLIENT_START_TAG + ""String_Node_Str"" + config.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"";
  writeStringToStreamAndClose(os,""String_Node_Str"");
  buildConfig(configXml);
}",0.9977777777777778
46133,"@Test public void testLifecycle(){
  hz.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
);
}","@Test public void testLifecycle(){
  hz.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"" + LINE_SEPARATOR + ""String_Node_Str"");
    }
  }
);
}",0.935672514619883
46134,"@Test public void testExecuteScriptRequest_whenTargetAllMembers() throws Exception {
  ExecuteScriptRequest request=new ExecuteScriptRequest(""String_Node_Str"",""String_Node_Str"",true,null);
  JsonObject jsonObject=new JsonObject();
  request.writeResponse(managementCenterService,jsonObject);
  JsonObject result=(JsonObject)jsonObject.get(""String_Node_Str"");
  String response=(String)request.readResponse(result);
  assertEquals(format(""String_Node_Str""),response);
}","@Test public void testExecuteScriptRequest_whenTargetAllMembers() throws Exception {
  ExecuteScriptRequest request=new ExecuteScriptRequest(""String_Node_Str"",""String_Node_Str"",true,null);
  JsonObject jsonObject=new JsonObject();
  request.writeResponse(managementCenterService,jsonObject);
  JsonObject result=(JsonObject)jsonObject.get(""String_Node_Str"");
  String response=(String)request.readResponse(result);
  assertEquals(""String_Node_Str"",response);
}",0.9913793103448276
46135,"@Test(expected=InvalidConfigurationException.class) public void testImportEmptyResourceContent() throws Exception {
  File config=createConfigFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(config);
  String config1Xml=HAZELCAST_CLIENT_START_TAG + ""String_Node_Str"" + config.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"";
  writeStringToStreamAndClose(os,""String_Node_Str"");
  buildConfig(config1Xml);
}","@Test(expected=InvalidConfigurationException.class) public void testImportEmptyResourceContent() throws Exception {
  File config=createConfigFile(""String_Node_Str"",""String_Node_Str"");
  FileOutputStream os=new FileOutputStream(config);
  String configXml=HAZELCAST_CLIENT_START_TAG + ""String_Node_Str"" + config.getAbsolutePath()+ ""String_Node_Str""+ ""String_Node_Str"";
  writeStringToStreamAndClose(os,""String_Node_Str"");
  buildConfig(configXml);
}",0.9977777777777778
46136,"@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,strategy.getOrNull(third));
  assertNull(strategy.getOrNull(fourth));
  assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
  assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
  assertEquals(300,strategy.getOrNull(""String_Node_Str"",third));
  assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
}","@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,strategy.getOrNull(third));
  assertNull(strategy.getOrNull(fourth));
  if (System.getenv(""String_Node_Str"") != null) {
    assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
    assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
    assertEquals(300,strategy.getOrNull(""String_Node_Str"",third));
    assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
  }
}",0.9793471019320452
46137,"@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,strategy.getOrNull(third));
  assertNull(strategy.getOrNull(fourth));
  assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
  assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
  assertEquals(300,strategy.getOrNull(""String_Node_Str"",third));
  assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
}","@Test public void test_AbstractDiscoveryStrategy_getOrNull() throws Exception {
  PropertyDefinition first=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.STRING);
  PropertyDefinition second=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.BOOLEAN);
  PropertyDefinition third=new SimplePropertyDefinition(""String_Node_Str"",PropertyTypeConverter.INTEGER);
  PropertyDefinition fourth=new SimplePropertyDefinition(""String_Node_Str"",true,PropertyTypeConverter.STRING);
  Map<String,Comparable> properties=new HashMap<String,Comparable>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  properties.put(""String_Node_Str"",Boolean.FALSE);
  properties.put(""String_Node_Str"",100);
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  setEnvironment(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  PropertyDiscoveryStrategy strategy=new PropertyDiscoveryStrategy(LOGGER,properties);
  assertEquals(""String_Node_Str"",strategy.getOrNull(first));
  assertEquals(Boolean.FALSE,strategy.getOrNull(second));
  assertEquals(100,strategy.getOrNull(third));
  assertNull(strategy.getOrNull(fourth));
  if (System.getenv(""String_Node_Str"") != null) {
    assertEquals(""String_Node_Str"",strategy.getOrNull(""String_Node_Str"",first));
    assertEquals(Boolean.TRUE,strategy.getOrNull(""String_Node_Str"",second));
    assertEquals(300,strategy.getOrNull(""String_Node_Str"",third));
    assertNull(strategy.getOrNull(""String_Node_Str"",fourth));
  }
}",0.9793471019320452
46138,"TaskPollThread(){
  super(threadGroup.getInternalThreadGroup(),threadGroup.getThreadNamePrefix(""String_Node_Str""));
  register(new ThreadDumpRequest());
  register(new ExecuteScriptRequest());
  register(new ConsoleCommandRequest());
  register(new MapConfigRequest());
  register(new ChangeWanStateRequest());
  register(new MemberConfigRequest());
  register(new ClusterPropsRequest());
  register(new RunGcRequest());
  register(new GetMemberSystemPropertiesRequest());
  register(new GetMapEntryRequest());
  register(new GetCacheEntryRequest());
  register(new GetClusterStateRequest());
  register(new ChangeClusterStateRequest());
  register(new ShutdownClusterRequest());
  register(new ForceStartNodeRequest());
  register(new TriggerPartialStartRequest());
  register(new ClearWanQueuesRequest());
}","TaskPollThread(){
  super(threadGroup.getInternalThreadGroup(),threadGroup.getThreadNamePrefix(""String_Node_Str""));
  register(new ThreadDumpRequest());
  register(new ExecuteScriptRequest());
  register(new ConsoleCommandRequest());
  register(new MapConfigRequest());
  register(new ChangeWanStateRequest());
  register(new MemberConfigRequest());
  register(new ClusterPropsRequest());
  register(new RunGcRequest());
  register(new GetMemberSystemPropertiesRequest());
  register(new GetMapEntryRequest());
  if (JCacheDetector.isJCacheAvailable(instance.node.getNodeEngine().getConfigClassLoader(),logger)) {
    register(new GetCacheEntryRequest());
  }
 else {
    logger.finest(""String_Node_Str"");
  }
  register(new GetClusterStateRequest());
  register(new ChangeClusterStateRequest());
  register(new ShutdownClusterRequest());
  register(new ForceStartNodeRequest());
  register(new TriggerPartialStartRequest());
  register(new ClearWanQueuesRequest());
}",0.9105233539673608
46139,"private ClientConfig newClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  nearCacheConfig.setInMemoryFormat(getNearCacheInMemoryFormat());
  nearCacheConfig.setName(mapName);
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}","protected ClientConfig newClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  nearCacheConfig.setInMemoryFormat(getNearCacheInMemoryFormat());
  nearCacheConfig.setName(mapName);
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}",0.9861111111111112
46140,"private void waitResponseFromAllPartitionsForPutAll(List<FutureEntriesTuple> futureEntriesTuples,long start,Map<Data,Boolean> markers){
  Throwable error=null;
  for (  FutureEntriesTuple tuple : futureEntriesTuples) {
    Future future=tuple.future;
    List<Map.Entry<Data,Data>> entries=tuple.entries;
    try {
      future.get();
      if (nearCache != null) {
        handleNearCacheOnPutAll(entries,markers);
      }
      if (statisticsEnabled) {
        statistics.increaseCachePuts(entries.size());
      }
    }
 catch (    Throwable t) {
      if (nearCache != null) {
        handleNearCacheOnPutAll(entries,markers);
      }
      logger.finest(""String_Node_Str"",t);
      if (error == null) {
        error=t;
      }
    }
  }
  if (statisticsEnabled) {
    statistics.addPutTimeNanos(System.nanoTime() - start);
  }
  if (error != null) {
    throw rethrow(error);
  }
}","private void waitResponseFromAllPartitionsForPutAll(List<FutureEntriesTuple> futureEntriesTuples,long start){
  Throwable error=null;
  for (  FutureEntriesTuple tuple : futureEntriesTuples) {
    Future future=tuple.future;
    List<Map.Entry<Data,Data>> entries=tuple.entries;
    try {
      future.get();
      if (nearCache != null) {
        handleNearCacheOnPutAll(entries);
      }
      if (statisticsEnabled) {
        statistics.increaseCachePuts(entries.size());
      }
    }
 catch (    Throwable t) {
      if (nearCache != null) {
        handleNearCacheOnPutAll(entries);
      }
      logger.finest(""String_Node_Str"",t);
      if (error == null) {
        error=t;
      }
    }
  }
  if (statisticsEnabled) {
    statistics.addPutTimeNanos(System.nanoTime() - start);
  }
  if (error != null) {
    throw rethrow(error);
  }
}",0.9757505773672056
46141,"@Override public boolean replace(K key,V value,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  final Future<Boolean> f=replaceInternal(key,null,value,expiryPolicy,false,true,false);
  try {
    boolean replaced=f.get();
    if (statisticsEnabled) {
      handleStatisticsOnReplace(false,start,replaced);
    }
    return replaced;
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public boolean replace(K key,V value,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  final Future<Boolean> f=replaceInternal(key,null,value,expiryPolicy,false,true,false);
  try {
    boolean replaced=f.get();
    if (statisticsEnabled) {
      handleStatisticsOnReplace(false,start,replaced);
    }
    return replaced;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9157427937915744
46142,"public void onFailure(Throwable t){
  resetToUnmarkedState(keyData);
}","public void onFailure(Throwable t){
  invalidateNearCache(keyData);
}",0.8057553956834532
46143,"public void onResponse(Data valueData){
  storeInNearCache(keyData,valueData,null,marked);
  if (statisticsEnabled) {
    handleStatisticsOnGet(start,valueData);
  }
}","public void onResponse(Data valueData){
  storeInNearCache(keyData,valueData,null,reservationId,false);
  if (statisticsEnabled) {
    handleStatisticsOnGet(start,valueData);
  }
}",0.9394812680115274
46144,"@Override public void putAll(Map<? extends K,? extends V> map,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(map);
  ClientPartitionService partitionService=clientContext.getPartitionService();
  int partitionCount=partitionService.getPartitionCount();
  Map<Data,Boolean> markers=createHashMap(map.size());
  try {
    List<Map.Entry<Data,Data>>[] entriesPerPartition=groupDataToPartitions(map,partitionService,partitionCount);
    putToAllPartitionsAndWaitForCompletion(entriesPerPartition,expiryPolicy,start,markers);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
 finally {
    unmarkRemainingMarkedKeys(markers);
  }
}","@Override public void putAll(Map<? extends K,? extends V> map,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(map);
  try {
    ClientPartitionService partitionService=clientContext.getPartitionService();
    int partitionCount=partitionService.getPartitionCount();
    List<Map.Entry<Data,Data>>[] entriesPerPartition=groupDataToPartitions(map,partitionService,partitionCount);
    putToAllPartitionsAndWaitForCompletion(entriesPerPartition,expiryPolicy,start);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.8803149606299212
46145,"@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> keySet=new HashSet<Data>(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=getAllFromNearCache(keySet);
  if (keySet.isEmpty()) {
    return result;
  }
  List<Map.Entry<Data,Data>> entries;
  Map<Data,Boolean> markers=createHashMap(keySet.size());
  try {
    for (    Data key : keySet) {
      markers.put(key,keyStateMarker.markIfUnmarked(key));
    }
    Data expiryPolicyData=toData(expiryPolicy);
    ClientMessage request=CacheGetAllCodec.encodeRequest(nameWithPrefix,keySet,expiryPolicyData);
    ClientMessage responseMessage=invoke(request);
    entries=CacheGetAllCodec.decodeResponse(responseMessage).response;
    for (    Map.Entry<Data,Data> dataEntry : entries) {
      Data keyData=dataEntry.getKey();
      Data valueData=dataEntry.getValue();
      K key=toObject(keyData);
      V value=toObject(valueData);
      result.put(key,value);
      storeInNearCache(keyData,valueData,value,markers.remove(keyData));
    }
  }
  finally {
    unmarkRemainingMarkedKeys(markers);
  }
  if (statisticsEnabled) {
    statistics.increaseCacheHits(entries.size());
    statistics.addGetTimeNanos(System.nanoTime() - start);
  }
  return result;
}","@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return emptyMap();
  }
  final Set<Data> keySet=new HashSet<Data>(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=createHashMap(keys.size());
  populateResultFromNearCache(keySet,result);
  if (keySet.isEmpty()) {
    return result;
  }
  List<Map.Entry<Data,Data>> entries;
  Map<Data,Long> reservations=createHashMap(keySet.size());
  try {
    for (    Data key : keySet) {
      long reservationId=tryReserveForUpdate(key);
      if (reservationId != NOT_RESERVED) {
        reservations.put(key,reservationId);
      }
    }
    Data expiryPolicyData=toData(expiryPolicy);
    ClientMessage request=CacheGetAllCodec.encodeRequest(nameWithPrefix,keySet,expiryPolicyData);
    ClientMessage responseMessage=invoke(request);
    entries=CacheGetAllCodec.decodeResponse(responseMessage).response;
    for (    Map.Entry<Data,Data> dataEntry : entries) {
      Data keyData=dataEntry.getKey();
      Data valueData=dataEntry.getValue();
      K key=toObject(keyData);
      V value=toObject(valueData);
      result.put(key,value);
      Long reservationId=reservations.get(keyData);
      if (reservationId != null) {
        storeInNearCache(keyData,valueData,value,reservationId,false);
        reservations.remove(keyData);
      }
    }
  }
  finally {
    releaseRemainingReservedKeys(reservations);
  }
  if (statisticsEnabled) {
    statistics.increaseCacheHits(entries.size());
    statistics.addGetTimeNanos(System.nanoTime() - start);
  }
  return result;
}",0.715140069247718
46146,"protected Object getInternal(K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getFromNearCache(keyData,async);
  if (cached != null) {
    return cached;
  }
  final boolean marked=keyStateMarker.markIfUnmarked(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(key);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,marked);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
          resetToUnmarkedState(keyData);
        }
      }
);
    }
    return delegatingFuture;
  }
 else {
    try {
      Object value=toObject(delegatingFuture.get());
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getResponse(),(V)value,marked);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      resetToUnmarkedState(keyData);
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}","protected Object getInternal(final K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getCachedValue(keyData,!async);
  if (cached != NOT_CACHED) {
    return asCompletedFutureOrValue(cached,async);
  }
  final long reservationId=tryReserveForUpdate(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(key);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Throwable t) {
    invalidateNearCache(keyData);
    throw rethrow(t);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,reservationId,false);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
          invalidateNearCache(keyData);
        }
      }
);
    }
    return delegatingFuture;
  }
 else {
    try {
      V value=toObject(delegatingFuture.get());
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getResponse(),value,reservationId,false);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      invalidateNearCache(keyData);
      throw rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}",0.692920768870136
46147,"@Override public V getAndReplace(K key,V value,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  final Future<V> f=replaceAndGetAsyncInternal(key,null,value,expiryPolicy,false,true,false);
  try {
    V oldValue=f.get();
    if (statisticsEnabled) {
      handleStatisticsOnReplace(true,start,oldValue);
    }
    return oldValue;
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","@Override public V getAndReplace(K key,V value,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  final Future<V> f=replaceAndGetAsyncInternal(key,null,value,expiryPolicy,false,true,false);
  try {
    V oldValue=f.get();
    if (statisticsEnabled) {
      handleStatisticsOnReplace(true,start,oldValue);
    }
    return oldValue;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
}",0.9153674832962138
46148,"@Override public int size(){
  ensureOpen();
  try {
    ClientMessage request=CacheSizeCodec.encodeRequest(nameWithPrefix);
    ClientMessage resultMessage=invoke(request);
    return CacheSizeCodec.decodeResponse(resultMessage).response;
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrowAllowedTypeFirst(t,CacheException.class);
  }
}","@Override public int size(){
  ensureOpen();
  try {
    ClientMessage request=CacheSizeCodec.encodeRequest(nameWithPrefix);
    ClientMessage resultMessage=invoke(request);
    return CacheSizeCodec.decodeResponse(resultMessage).response;
  }
 catch (  Throwable t) {
    throw rethrowAllowedTypeFirst(t,CacheException.class);
  }
}",0.888235294117647
46149,"private void putToAllPartitionsAndWaitForCompletion(List<Map.Entry<Data,Data>>[] entriesPerPartition,ExpiryPolicy expiryPolicy,long start,Map<Data,Boolean> markers) throws ExecutionException, InterruptedException {
  Data expiryPolicyData=toData(expiryPolicy);
  List<FutureEntriesTuple> futureEntriesTuples=new ArrayList<FutureEntriesTuple>(entriesPerPartition.length);
  for (int partitionId=0; partitionId < entriesPerPartition.length; partitionId++) {
    List<Map.Entry<Data,Data>> entries=entriesPerPartition[partitionId];
    if (entries != null) {
      for (      Map.Entry<Data,Data> entry : entries) {
        Data key=entry.getKey();
        markers.put(key,!cacheOnUpdate || keyStateMarker.markIfUnmarked(key));
      }
      int completionId=nextCompletionId();
      ClientMessage request=CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId);
      Future f=invoke(request,partitionId,completionId);
      futureEntriesTuples.add(new FutureEntriesTuple(f,entries));
    }
  }
  waitResponseFromAllPartitionsForPutAll(futureEntriesTuples,start,markers);
}","private void putToAllPartitionsAndWaitForCompletion(List<Map.Entry<Data,Data>>[] entriesPerPartition,ExpiryPolicy expiryPolicy,long start) throws ExecutionException, InterruptedException {
  Data expiryPolicyData=toData(expiryPolicy);
  List<FutureEntriesTuple> futureEntriesTuples=new ArrayList<FutureEntriesTuple>(entriesPerPartition.length);
  for (int partitionId=0; partitionId < entriesPerPartition.length; partitionId++) {
    List<Map.Entry<Data,Data>> entries=entriesPerPartition[partitionId];
    if (entries != null) {
      int completionId=nextCompletionId();
      ClientMessage request=CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId);
      Future f=invoke(request,partitionId,completionId);
      futureEntriesTuples.add(new FutureEntriesTuple(f,entries));
    }
  }
  waitResponseFromAllPartitionsForPutAll(futureEntriesTuples,start);
}",0.5846308387744852
46150,"private void handleNearCacheOnPutAll(List<Map.Entry<Data,Data>> entries,Map<Data,Boolean> markers){
  if (nearCache != null) {
    if (cacheOnUpdate) {
      for (      Map.Entry<Data,Data> entry : entries) {
        Data key=entry.getKey();
        storeInNearCache(key,entry.getValue(),null,markers.get(key));
      }
    }
 else {
      for (      Map.Entry<Data,Data> entry : entries) {
        invalidateNearCache(entry.getKey());
      }
    }
  }
}","private void handleNearCacheOnPutAll(List<Map.Entry<Data,Data>> entries){
  if (nearCache == null) {
    return;
  }
  for (  Map.Entry<Data,Data> entry : entries) {
    if (cacheOnUpdate) {
      storeInNearCache(entry.getKey(),entry.getValue(),null,NOT_RESERVED,cacheOnUpdate);
    }
 else {
      invalidateNearCache(entry.getKey());
    }
  }
}",0.4757160647571606
46151,"private Object putInternalAsync(final V value,final boolean isGet,final long start,final Data keyData,final Data valueData,ClientInvocationFuture future,final boolean marked){
  OneShotExecutionCallback<V> oneShotExecutionCallback=null;
  if (nearCache != null || statisticsEnabled) {
    oneShotExecutionCallback=new OneShotExecutionCallback<V>(){
      @Override protected void onResponseInternal(      V responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          handleStatisticsOnPut(isGet,start,responseData);
        }
      }
      @Override protected void onFailureInternal(      Throwable t){
        if (nearCache != null && cacheOnUpdate) {
          resetToUnmarkedState(keyData);
        }
      }
    }
;
  }
  SerializationService serializationService=clientContext.getSerializationService();
  if (oneShotExecutionCallback == null) {
    return new ClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER);
  }
  ClientDelegatingFuture<V> delegatingFuture=new CallbackAwareClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER,oneShotExecutionCallback);
  delegatingFuture.andThen(oneShotExecutionCallback);
  return delegatingFuture;
}","private Object putInternalAsync(final V value,final boolean isGet,final long start,final Data keyData,final Data valueData,ClientInvocationFuture future){
  OneShotExecutionCallback<V> oneShotExecutionCallback=null;
  if (nearCache != null || statisticsEnabled) {
    oneShotExecutionCallback=new OneShotExecutionCallback<V>(){
      @Override protected void onResponseInternal(      V responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          handleStatisticsOnPut(isGet,start,responseData);
        }
      }
      @Override protected void onFailureInternal(      Throwable t){
      }
    }
;
  }
  SerializationService serializationService=clientContext.getSerializationService();
  if (oneShotExecutionCallback == null) {
    return new ClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER);
  }
  ClientDelegatingFuture<V> delegatingFuture=new CallbackAwareClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER,oneShotExecutionCallback);
  delegatingFuture.andThen(oneShotExecutionCallback);
  return delegatingFuture;
}",0.942962962962963
46152,"@Override public void onResponse(Boolean responseData){
  if (nearCache != null) {
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value,marked);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
  if (statisticsEnabled) {
    Object response=clientContext.getSerializationService().toObject(responseData);
    handleStatisticsOnPutIfAbsent(start,(Boolean)response);
  }
}","@Override public void onResponse(Boolean responseData){
  if (nearCache != null) {
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
  if (statisticsEnabled) {
    Object response=clientContext.getSerializationService().toObject(responseData);
    handleStatisticsOnPutIfAbsent(start,(Boolean)response);
  }
}",0.9609756097560976
46153,"protected Object putInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  Data expiryPolicyData=toData(expiryPolicy);
  boolean marked=!cacheOnUpdate || keyStateMarker.markIfUnmarked(keyData);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  if (async) {
    return putInternalAsync(value,isGet,start,keyData,valueData,future,marked);
  }
  return putInternalSync(value,isGet,start,keyData,valueData,future,marked);
}","protected Object putInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  Data expiryPolicyData=toData(expiryPolicy);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
  if (async) {
    return putInternalAsync(value,isGet,start,keyData,valueData,future);
  }
  return putInternalSync(value,isGet,start,keyData,valueData,future);
}",0.7379679144385026
46154,"@Override protected void onFailureInternal(Throwable t){
  if (nearCache != null && cacheOnUpdate) {
    resetToUnmarkedState(keyData);
  }
}","@Override protected void onFailureInternal(Throwable t){
}",0.5829145728643216
46155,"protected void invalidateNearCache(Data key){
  if (nearCache != null) {
    nearCache.remove(key);
  }
}","protected void invalidateNearCache(Data key){
  if (nearCache == null || key == null) {
    return;
  }
  nearCache.remove(key);
}",0.851063829787234
46156,"@Override protected void onResponseInternal(V responseData){
  if (nearCache != null) {
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value,marked);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
  if (statisticsEnabled) {
    handleStatisticsOnPut(isGet,start,responseData);
  }
}","@Override protected void onResponseInternal(V responseData){
  if (nearCache != null) {
    if (cacheOnUpdate) {
      storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
    }
 else {
      invalidateNearCache(keyData);
    }
  }
  if (statisticsEnabled) {
    handleStatisticsOnPut(isGet,start,responseData);
  }
}",0.9506172839506172
46157,"private void registerInvalidationListener(){
  if (nearCache == null || !nearCache.isInvalidatedOnChange()) {
    return;
  }
  int partitionCount=getContext().getPartitionService().getPartitionCount();
  nearCache=asInvalidationAware(nearCache,partitionCount);
  keyStateMarker=((InvalidationAwareWrapper)nearCache).getKeyStateMarker();
  ListenerMessageCodec listenerCodec=createInvalidationListenerCodec();
  ClientListenerService listenerService=clientContext.getListenerService();
  EventHandler eventHandler=createInvalidationEventHandler();
  nearCacheMembershipRegistrationId=listenerService.registerListener(listenerCodec,eventHandler);
}","private void registerInvalidationListener(){
  if (nearCache == null || !nearCache.isInvalidatedOnChange()) {
    return;
  }
  ListenerMessageCodec listenerCodec=createInvalidationListenerCodec();
  ClientListenerService listenerService=clientContext.getListenerService();
  EventHandler eventHandler=createInvalidationEventHandler();
  nearCacheMembershipRegistrationId=listenerService.registerListener(listenerCodec,eventHandler);
}",0.8040665434380776
46158,"@Override public void onFailure(Throwable t){
  if (nearCache != null && cacheOnUpdate) {
    resetToUnmarkedState(keyData);
  }
}","@Override public void onFailure(Throwable t){
}",0.5310734463276836
46159,"protected void storeInNearCache(Data key,Data valueData,V value,boolean marked){
  if (!marked) {
    return;
  }
  try {
    if (nearCache == null || valueData == null) {
      return;
    }
    Object valueToStore=nearCache.selectToSave(value,valueData);
    nearCache.put(key,valueToStore);
  }
  finally {
    resetToUnmarkedState(key);
  }
}","protected void storeInNearCache(Data key,Data valueData,V value,long reservationId,boolean cacheOnUpdate){
  if (nearCache == null || valueData == null) {
    return;
  }
  if (cacheOnUpdate) {
    Object valueToStore=nearCache.selectToSave(value,valueData);
    nearCache.put(key,valueToStore);
    return;
  }
  if (reservationId != NOT_RESERVED) {
    Object valueToStore=nearCache.selectToSave(value,valueData);
    nearCache.tryPublishReserved(key,valueToStore,reservationId,false);
  }
}",0.600715137067938
46160,"protected Object putIfAbsentInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  boolean marked=!cacheOnUpdate || keyStateMarker.markIfUnmarked(keyData);
  Data expiryPolicyData=toData(expiryPolicy);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  ClientDelegatingFuture<Boolean> delegatingFuture=new ClientDelegatingFuture<Boolean>(future,clientContext.getSerializationService(),PUT_IF_ABSENT_RESPONSE_DECODER);
  if (async) {
    return putIfAbsentInternalAsync(value,start,keyData,valueData,delegatingFuture,marked);
  }
  return putIfAbsentInternalSync(value,start,keyData,valueData,delegatingFuture,marked);
}","protected Object putIfAbsentInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  Data expiryPolicyData=toData(expiryPolicy);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Throwable t) {
    throw rethrow(t);
  }
  ClientDelegatingFuture<Boolean> delegatingFuture=new ClientDelegatingFuture<Boolean>(future,clientContext.getSerializationService(),PUT_IF_ABSENT_RESPONSE_DECODER);
  if (async) {
    return putIfAbsentInternalAsync(value,start,keyData,valueData,delegatingFuture);
  }
  return putIfAbsentInternalSync(value,start,keyData,valueData,delegatingFuture);
}",0.9340463458110516
46161,"private Object putInternalSync(V value,boolean isGet,long start,Data keyData,Data valueData,ClientInvocationFuture future,boolean marked){
  try {
    ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),PUT_RESPONSE_DECODER);
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPut(isGet,start,response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}","private Object putInternalSync(V value,boolean isGet,long start,Data keyData,Data valueData,ClientInvocationFuture future){
  try {
    ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),PUT_RESPONSE_DECODER);
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPut(isGet,start,response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}",0.8967874231032126
46162,"private Object putIfAbsentInternalAsync(final V value,final long start,final Data keyData,final Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,final boolean marked){
  if (nearCache != null || statisticsEnabled) {
    delegatingFuture.andThen(new ExecutionCallback<Boolean>(){
      @Override public void onResponse(      Boolean responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          Object response=clientContext.getSerializationService().toObject(responseData);
          handleStatisticsOnPutIfAbsent(start,(Boolean)response);
        }
      }
      @Override public void onFailure(      Throwable t){
        if (nearCache != null && cacheOnUpdate) {
          resetToUnmarkedState(keyData);
        }
      }
    }
);
  }
  return delegatingFuture;
}","private Object putIfAbsentInternalAsync(final V value,final long start,final Data keyData,final Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture){
  if (nearCache != null || statisticsEnabled) {
    delegatingFuture.andThen(new ExecutionCallback<Boolean>(){
      @Override public void onResponse(      Boolean responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          Object response=clientContext.getSerializationService().toObject(responseData);
          handleStatisticsOnPutIfAbsent(start,(Boolean)response);
        }
      }
      @Override public void onFailure(      Throwable t){
      }
    }
);
  }
  return delegatingFuture;
}",0.8824786324786325
46163,"private Object putIfAbsentInternalSync(V value,long start,Data keyData,Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,boolean marked){
  try {
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPutIfAbsent(start,(Boolean)response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}","private Object putIfAbsentInternalSync(V value,long start,Data keyData,Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture){
  try {
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPutIfAbsent(start,(Boolean)response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,NOT_RESERVED,cacheOnUpdate);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}",0.8608624898291294
46164,"@Override public boolean containsKey(K key){
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=nearCache != null ? nearCache.get(keyData) : null;
  if (cached != null && !NearCache.NULL_OBJECT.equals(cached)) {
    return true;
  }
  ClientMessage request=CacheContainsKeyCodec.encodeRequest(nameWithPrefix,keyData);
  ClientMessage result=invoke(request,keyData);
  return CacheContainsKeyCodec.decodeResponse(result).response;
}","@Override public boolean containsKey(K key){
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getCachedValue(keyData,false);
  if (cached != NOT_CACHED) {
    return true;
  }
  ClientMessage request=CacheContainsKeyCodec.encodeRequest(nameWithPrefix,keyData);
  ClientMessage result=invoke(request,keyData);
  return CacheContainsKeyCodec.decodeResponse(result).response;
}",0.8248587570621468
46165,"public ExtractedParams(List<Data> keys,List<String> sourceUuids,List<UUID> partitionUuids,List<Long> sequences){
  this.keys=keys;
  this.sourceUuids=sourceUuids;
  this.partitionUuids=partitionUuids;
  this.sequences=sequences;
}","ExtractedParams(List<Data> keys,List<String> sourceUuids,List<UUID> partitionUuids,List<Long> sequences){
  this.keys=keys;
  this.sourceUuids=sourceUuids;
  this.partitionUuids=partitionUuids;
  this.sequences=sequences;
}",0.9845474613686536
46166,"@Override public Iterator<QueryableEntry> iterator(){
  if (entries == null) {
    if (indexedResults.isEmpty()) {
      entries=Collections.emptySet();
    }
 else {
      if (indexedResults.size() == 1) {
        entries=new HashSet<QueryableEntry>(indexedResults.get(0));
      }
 else {
        entries=new HashSet<QueryableEntry>();
        for (        Set<QueryableEntry> result : indexedResults) {
          entries.addAll(result);
        }
      }
    }
  }
  return entries.iterator();
}","@Override public Iterator<QueryableEntry> iterator(){
  return getEntries().iterator();
}",0.2862010221465076
46167,"@Override public int size(){
  if (indexedResults.isEmpty()) {
    return 0;
  }
 else {
    return indexedResults.get(0).size();
  }
}","@Override public int size(){
  return getEntries().size();
}",0.5435897435897435
46168,"@Override public Iterator<QueryableEntry> iterator(){
  if (entries == null) {
    if (indexedResults.isEmpty()) {
      entries=Collections.emptySet();
    }
 else {
      if (indexedResults.size() == 1) {
        entries=new HashSet<QueryableEntry>(indexedResults.get(0));
      }
 else {
        entries=new HashSet<QueryableEntry>();
        for (        Set<QueryableEntry> result : indexedResults) {
          entries.addAll(result);
        }
      }
    }
  }
  return entries.iterator();
}","@Override public Iterator<QueryableEntry> iterator(){
  return getEntries().iterator();
}",0.2862010221465076
46169,"@Override public int size(){
  if (indexedResults.isEmpty()) {
    return 0;
  }
 else {
    return indexedResults.get(0).size();
  }
}","@Override public int size(){
  return getEntries().size();
}",0.5435897435897435
46170,"@Test public void testListenersSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.8665377176015474
46171,"@Test public void testListenersNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.6414473684210527
46172,"@Test public void testListenersNonSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.75
46173,"private void testListenersWaitMemberDestroy() throws InterruptedException {
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final int clusterSize=allHazelcastInstances.size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertTrue(disconnectedLatch.await(30,TimeUnit.SECONDS));
  assertTrue(connectedLatch.await(30,TimeUnit.SECONDS));
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  validateRegistrations(clusterSize - 1,registrationId,clientInstanceImpl);
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersWaitMemberDestroy(){
  setupListener();
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertOpenEventually(disconnectedLatch);
  assertOpenEventually(connectedLatch);
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  clusterSize=clusterSize - 1;
  validateRegistrationsAndListenerFunctionality();
}",0.7744041789095658
46174,"private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(20).setConnectionAttemptPeriod(2000);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}","private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}",0.6786570743405276
46175,"@Test public void testClusterReconnectDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9105058365758756
46176,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9475587703435804
46177,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9486725663716814
46178,protected abstract String addListener(final AtomicInteger eventCount);,protected abstract String addListener();,0.7272727272727273
46179,"private void validateListenerFunctionality(final AtomicInteger eventCount){
  eventCount.set(0);
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
,5);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}","private void validateListenerFunctionality(){
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}",0.9576338928856916
46180,"@Test public void testListenersSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8503253796095445
46181,"@Test public void testTemporaryBlockedNoDisconnectionSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.945179584120983
46182,"@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9125475285171104
46183,"@Test public void testListenersSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8577319587628865
46184,"@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9463955637707948
46185,"private void testListenersTemporaryNetworkBlockage(){
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  final int clusterSize=factory.getAllHazelcastInstances().size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final boolean smartRouting=clientInstanceImpl.getClientConfig().getNetworkConfig().isSmartRouting();
  final int expectedRegistrationsSize=smartRouting ? clusterSize : 1;
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  validateListenerFunctionality(eventCount);
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersTemporaryNetworkBlockage(){
  setupListener();
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  validateRegistrationsAndListenerFunctionality();
}",0.6706096451319381
46186,"@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9148148148148147
46187,"@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9163636363636364
46188,"@Test public void testListenersNonSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersNonSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.6596385542168675
46189,"@Override protected String addListener(final AtomicInteger eventCount){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}",0.955621301775148
46190,"@Override protected String addListener(final AtomicInteger eventCount){
  iList=client.getList(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}","@Override protected String addListener(){
  iList=client.getList(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}",0.958217270194986
46191,"@Override protected String addListener(final AtomicInteger eventCount){
  multiMap=client.getMultiMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  multiMap=client.getMultiMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}",0.9572649572649572
46192,"@Override protected String addListener(final AtomicInteger eventCount){
  iQueue=client.getQueue(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}","@Override protected String addListener(){
  iQueue=client.getQueue(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}",0.9585635359116024
46193,"@Override protected String addListener(final AtomicInteger eventCount){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}","@Override protected String addListener(){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}",0.9584487534626038
46194,"@Override protected String addListener(final AtomicInteger eventCount){
  iSet=client.getSet(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}","@Override protected String addListener(){
  iSet=client.getSet(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}",0.9578651685393258
46195,"@Override protected String addListener(final AtomicInteger eventCount){
  topic=client.getTopic(randomString());
  MessageListener listener=new MessageListener(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}","@Override protected String addListener(){
  topic=client.getTopic(randomString());
  MessageListener listener=new MessageListener(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}",0.95
46196,"@Test public void testListenersSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.8665377176015474
46197,"@Test public void testListenersNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.6414473684210527
46198,"@Test public void testListenersNonSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.75
46199,"private void testListenersWaitMemberDestroy() throws InterruptedException {
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final int clusterSize=allHazelcastInstances.size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertTrue(disconnectedLatch.await(30,TimeUnit.SECONDS));
  assertTrue(connectedLatch.await(30,TimeUnit.SECONDS));
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  validateRegistrations(clusterSize - 1,registrationId,clientInstanceImpl);
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersWaitMemberDestroy(){
  setupListener();
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertOpenEventually(disconnectedLatch);
  assertOpenEventually(connectedLatch);
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  clusterSize=clusterSize - 1;
  validateRegistrationsAndListenerFunctionality();
}",0.7744041789095658
46200,"private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(20).setConnectionAttemptPeriod(2000).setConnectionTimeout(5000);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}","private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}",0.6596980255516841
46201,"@Test public void testClusterReconnectDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9105058365758756
46202,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9475587703435804
46203,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9486725663716814
46204,protected abstract String addListener(final AtomicInteger eventCount);,protected abstract String addListener();,0.7272727272727273
46205,"private void validateListenerFunctionality(final AtomicInteger eventCount){
  eventCount.set(0);
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
,5);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}","private void validateListenerFunctionality(){
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}",0.9576338928856916
46206,"@Test public void testListenersSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8503253796095445
46207,"@Test public void testTemporaryBlockedNoDisconnectionSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.945179584120983
46208,"@Test @Ignore(value=""String_Node_Str"") public void testClusterReconnectDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.8586762075134168
46209,"@Test public void testListenersSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8577319587628865
46210,"@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9463955637707948
46211,"private void testListenersTemporaryNetworkBlockage(){
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  final int clusterSize=factory.getAllHazelcastInstances().size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final boolean smartRouting=clientInstanceImpl.getClientConfig().getNetworkConfig().isSmartRouting();
  final int expectedRegistrationsSize=smartRouting ? clusterSize : 1;
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  validateListenerFunctionality(eventCount);
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersTemporaryNetworkBlockage(){
  setupListener();
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  validateRegistrationsAndListenerFunctionality();
}",0.6706096451319381
46212,"@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9148148148148147
46213,"@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9163636363636364
46214,"@Test public void testListenersNonSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersNonSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.6596385542168675
46215,"@Override protected String addListener(final AtomicInteger eventCount){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}",0.955621301775148
46216,"@Override protected String addListener(final AtomicInteger eventCount){
  iList=client.getList(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}","@Override protected String addListener(){
  iList=client.getList(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}",0.96
46217,"@Override protected String addListener(final AtomicInteger eventCount){
  multiMap=client.getMultiMap(randomString());
  EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  multiMap=client.getMultiMap(randomString());
  EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}",0.9577464788732394
46218,"@Override protected String addListener(final AtomicInteger eventCount){
  iQueue=client.getQueue(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}","@Override protected String addListener(){
  iQueue=client.getQueue(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}",0.9603174603174603
46219,"@Override protected String addListener(final AtomicInteger eventCount){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}","@Override protected String addListener(){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}",0.9595687331536388
46220,"@Override protected String addListener(final AtomicInteger eventCount){
  iSet=client.getSet(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}","@Override protected String addListener(){
  iSet=client.getSet(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}",0.9596774193548387
46221,"@Override protected String addListener(final AtomicInteger eventCount){
  topic=client.getTopic(randomString());
  MessageListener<String> listener=new MessageListener<String>(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}","@Override protected String addListener(){
  topic=client.getTopic(randomString());
  MessageListener<String> listener=new MessageListener<String>(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}",0.9525316455696202
46222,"private void authenticate(final Address target,final ClientConnection connection,final boolean asOwner,final AuthenticationFuture callback){
  SerializationService ss=client.getSerializationService();
  final ClientClusterServiceImpl clusterService=(ClientClusterServiceImpl)client.getClientClusterService();
  ClientPrincipal principal=clusterService.getPrincipal();
  byte serializationVersion=((InternalSerializationService)client.getSerializationService()).getVersion();
  String uuid=null;
  String ownerUuid=null;
  if (principal != null) {
    uuid=principal.getUuid();
    ownerUuid=principal.getOwnerUuid();
  }
  ClientMessage clientMessage=encodeAuthenticationRequest(asOwner,ss,serializationVersion,uuid,ownerUuid);
  ClientInvocation clientInvocation=new ClientInvocation(client,clientMessage,connection);
  ClientInvocationFuture future=clientInvocation.invokeUrgent();
  future.andThen(new ExecutionCallback<ClientMessage>(){
    @Override public void onResponse(    ClientMessage response){
      ClientAuthenticationCodec.ResponseParameters result=ClientAuthenticationCodec.decodeResponse(response);
      AuthenticationStatus authenticationStatus=AuthenticationStatus.getById(result.status);
switch (authenticationStatus) {
case AUTHENTICATED:
        if (asOwner) {
          connection.setIsAuthenticatedAsOwner();
          clusterService.setPrincipal(new ClientPrincipal(result.uuid,result.ownerUuid));
        }
      connection.setConnectedServerVersion(result.serverHazelcastVersion);
    connection.setClientUnregisteredMembers(result.clientUnregisteredMembers);
  connection.setRemoteEndpoint(result.address);
onAuthenticated(target,connection);
callback.onSuccess(connection,asOwner);
break;
case CREDENTIALS_FAILED:
AuthenticationException e=new AuthenticationException(""String_Node_Str"");
onAuthenticationFailed(target,connection,e);
callback.onFailure(e);
break;
default :
AuthenticationException exception=new AuthenticationException(""String_Node_Str"" + authenticationStatus);
onAuthenticationFailed(target,connection,exception);
callback.onFailure(exception);
}
}
@Override public void onFailure(Throwable t){
onAuthenticationFailed(target,connection,t);
callback.onFailure(t);
}
}
,executionService.getInternalExecutor());
}","private void authenticate(final Address target,final ClientConnection connection,final boolean asOwner,final AuthenticationFuture callback){
  SerializationService ss=client.getSerializationService();
  final ClientClusterServiceImpl clusterService=(ClientClusterServiceImpl)client.getClientClusterService();
  final ClientPrincipal principal=clusterService.getPrincipal();
  byte serializationVersion=((InternalSerializationService)client.getSerializationService()).getVersion();
  String uuid=null;
  String ownerUuid=null;
  if (principal != null) {
    uuid=principal.getUuid();
    ownerUuid=principal.getOwnerUuid();
  }
  ClientMessage clientMessage=encodeAuthenticationRequest(asOwner,ss,serializationVersion,uuid,ownerUuid);
  ClientInvocation clientInvocation=new ClientInvocation(client,clientMessage,connection);
  ClientInvocationFuture future=clientInvocation.invokeUrgent();
  if (asOwner && clientInvocation.getSendConnection() != null) {
    correlationIddOfLastAuthentication.set(clientInvocation.getClientMessage().getCorrelationId());
  }
  future.andThen(new ExecutionCallback<ClientMessage>(){
    @Override public void onResponse(    ClientMessage response){
      ClientAuthenticationCodec.ResponseParameters result=ClientAuthenticationCodec.decodeResponse(response);
      AuthenticationStatus authenticationStatus=AuthenticationStatus.getById(result.status);
switch (authenticationStatus) {
case AUTHENTICATED:
        connection.setConnectedServerVersion(result.serverHazelcastVersion);
      connection.setClientUnregisteredMembers(result.clientUnregisteredMembers);
    connection.setRemoteEndpoint(result.address);
  if (asOwner) {
    if (!(correlationIddOfLastAuthentication.get() == response.getCorrelationId())) {
      onFailure(new AuthenticationException(""String_Node_Str"" + target + ""String_Node_Str""+ principal));
      return;
    }
    connection.setIsAuthenticatedAsOwner();
    ClientPrincipal principal=new ClientPrincipal(result.uuid,result.ownerUuid);
    clusterService.setPrincipal(principal);
    clusterService.setOwnerConnectionAddress(connection.getEndPoint());
    logger.info(""String_Node_Str"" + connection + ""String_Node_Str""+ principal);
  }
onAuthenticated(target,connection);
callback.onSuccess(connection,asOwner);
break;
case CREDENTIALS_FAILED:
onFailure(new AuthenticationException(""String_Node_Str"" + principal));
break;
default :
onFailure(new AuthenticationException(""String_Node_Str"" + authenticationStatus));
}
}
@Override public void onFailure(Throwable t){
onAuthenticationFailed(target,connection,t);
callback.onFailure(t);
}
}
,executionService.getInternalExecutor());
}",0.6719738722188202
46223,"@Override public void onResponse(ClientMessage response){
  ClientAuthenticationCodec.ResponseParameters result=ClientAuthenticationCodec.decodeResponse(response);
  AuthenticationStatus authenticationStatus=AuthenticationStatus.getById(result.status);
switch (authenticationStatus) {
case AUTHENTICATED:
    if (asOwner) {
      connection.setIsAuthenticatedAsOwner();
      clusterService.setPrincipal(new ClientPrincipal(result.uuid,result.ownerUuid));
    }
  connection.setConnectedServerVersion(result.serverHazelcastVersion);
connection.setClientUnregisteredMembers(result.clientUnregisteredMembers);
connection.setRemoteEndpoint(result.address);
onAuthenticated(target,connection);
callback.onSuccess(connection,asOwner);
break;
case CREDENTIALS_FAILED:
AuthenticationException e=new AuthenticationException(""String_Node_Str"");
onAuthenticationFailed(target,connection,e);
callback.onFailure(e);
break;
default :
AuthenticationException exception=new AuthenticationException(""String_Node_Str"" + authenticationStatus);
onAuthenticationFailed(target,connection,exception);
callback.onFailure(exception);
}
}","@Override public void onResponse(ClientMessage response){
  ClientAuthenticationCodec.ResponseParameters result=ClientAuthenticationCodec.decodeResponse(response);
  AuthenticationStatus authenticationStatus=AuthenticationStatus.getById(result.status);
switch (authenticationStatus) {
case AUTHENTICATED:
    connection.setConnectedServerVersion(result.serverHazelcastVersion);
  connection.setClientUnregisteredMembers(result.clientUnregisteredMembers);
connection.setRemoteEndpoint(result.address);
if (asOwner) {
if (!(correlationIddOfLastAuthentication.get() == response.getCorrelationId())) {
  onFailure(new AuthenticationException(""String_Node_Str"" + target + ""String_Node_Str""+ principal));
  return;
}
connection.setIsAuthenticatedAsOwner();
ClientPrincipal principal=new ClientPrincipal(result.uuid,result.ownerUuid);
clusterService.setPrincipal(principal);
clusterService.setOwnerConnectionAddress(connection.getEndPoint());
logger.info(""String_Node_Str"" + connection + ""String_Node_Str""+ principal);
}
onAuthenticated(target,connection);
callback.onSuccess(connection,asOwner);
break;
case CREDENTIALS_FAILED:
onFailure(new AuthenticationException(""String_Node_Str"" + principal));
break;
default :
onFailure(new AuthenticationException(""String_Node_Str"" + authenticationStatus));
}
}",0.5008305647840532
46224,"protected boolean shouldRetry(){
  return System.currentTimeMillis() < retryTimeoutPointInMillis;
}","private boolean shouldRetry(){
  return System.currentTimeMillis() < retryTimeoutPointInMillis;
}",0.9591836734693876
46225,"private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    Connection connection=null;
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"" + address);
      }
      connection=connectionManager.getOrConnect(address,true);
      ownerConnectionAddress=connection.getEndPoint();
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      client.getListenerService().onClusterConnect((ClientConnection)connection);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
      if (null != connection) {
        connection.close(""String_Node_Str"" + inetSocketAddress + ""String_Node_Str"",e);
      }
    }
  }
  return false;
}","private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    Connection connection=null;
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      logger.info(""String_Node_Str"" + address + ""String_Node_Str"");
      connection=connectionManager.getOrConnect(address,true);
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      client.getListenerService().onClusterConnect((ClientConnection)connection);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
      if (null != connection) {
        connection.close(""String_Node_Str"" + inetSocketAddress + ""String_Node_Str"",e);
      }
    }
  }
  return false;
}",0.9423597678916829
46226,"@Override public void run() throws Exception {
  Member instance2Member=instance2.getCluster().getLocalMember();
  Set<Partition> partitions=client.getPartitionService().getPartitions();
  boolean found=false;
  for (  Partition p : partitions) {
    if (p.getOwner().equals(instance2Member)) {
      found=true;
      break;
    }
  }
  assertTrue(found);
}","@Override public void run() throws Exception {
  String uuid=instance3.getLocalEndpoint().getUuid();
  assertEquals(uuid,getClientEngineImpl(instance3).getOwnerUuid(client.getLocalEndpoint().getUuid()));
  assertEquals(uuid,getClientEngineImpl(instance2).getOwnerUuid(client.getLocalEndpoint().getUuid()));
  assertEquals(uuid,clientClusterService.getPrincipal().getOwnerUuid());
  assertEquals(instance3.getCluster().getLocalMember().getAddress(),clientClusterService.getOwnerConnectionAddress());
}",0.1934731934731934
46227,"public boolean removeOwnershipMapping(String clientUuid,String memberUuid){
  return ownershipMappings.remove(clientUuid,memberUuid);
}","public boolean removeOwnershipMapping(String clientUuid,String memberUuid){
  lastAuthenticationCorrelationIds.remove(clientUuid);
  return ownershipMappings.remove(clientUuid,memberUuid);
}",0.8307692307692308
46228,"public ReAuthenticationOperationSupplier(String uuid){
  this.uuid=uuid;
}","public ReAuthenticationOperationSupplier(String uuid,long authCorrelationId){
  this.uuid=uuid;
  this.authCorrelationId=authCorrelationId;
}",0.6883720930232559
46229,"@Override public Operation get(){
  return new ClientReAuthOperation(uuid);
}","@Override public Operation get(){
  return new ClientReAuthOperation(uuid,authCorrelationId);
}",0.8953488372093024
46230,"public ClientReAuthOperation(String clientUuid){
  this.clientUuid=clientUuid;
}","public ClientReAuthOperation(String clientUuid,long authCorrelationId){
  this.clientUuid=clientUuid;
  this.authCorrelationId=authCorrelationId;
}",0.7048458149779736
46231,"@Override public void run() throws Exception {
  String memberUuid=getCallerUuid();
  ClientEngineImpl engine=getService();
  Set<ClientEndpoint> endpoints=engine.getEndpointManager().getEndpoints(clientUuid);
  for (  ClientEndpoint endpoint : endpoints) {
    ClientPrincipal principal=new ClientPrincipal(clientUuid,memberUuid);
    endpoint.authenticated(principal);
  }
  String previousMemberUuid=engine.addOwnershipMapping(clientUuid,memberUuid);
  clientDisconnectOperationRun=previousMemberUuid == null;
}","@Override public void run() throws Exception {
  ClientEngineImpl engine=getService();
  String memberUuid=getCallerUuid();
  if (!engine.trySetLastAuthenticationCorrelationId(clientUuid,authCorrelationId)) {
    String message=""String_Node_Str"" + clientUuid + ""String_Node_Str""+ memberUuid;
    getLogger().info(message);
    throw new AuthenticationException(message);
  }
  Set<ClientEndpoint> endpoints=engine.getEndpointManager().getEndpoints(clientUuid);
  for (  ClientEndpoint endpoint : endpoints) {
    ClientPrincipal principal=new ClientPrincipal(clientUuid,memberUuid);
    endpoint.authenticated(principal);
  }
  String previousMemberUuid=engine.addOwnershipMapping(clientUuid,memberUuid);
  clientDisconnectOperationRun=previousMemberUuid == null;
}",0.7490226739640344
46232,"@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  clientUuid=in.readUTF();
}","@Override protected void readInternal(ObjectDataInput in) throws IOException {
  super.readInternal(in);
  clientUuid=in.readUTF();
  authCorrelationId=in.readLong();
}",0.8837209302325582
46233,"@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(clientUuid);
}","@Override protected void writeInternal(ObjectDataOutput out) throws IOException {
  super.writeInternal(out);
  out.writeUTF(clientUuid);
  out.writeLong(authCorrelationId);
}",0.8853503184713376
46234,"@Override protected Object reduce(Map<Member,Object> map) throws Throwable {
  for (  Map.Entry<Member,Object> entry : map.entrySet()) {
    Member member=entry.getKey();
    Object response=entry.getValue();
    if (response instanceof Throwable) {
      if (response instanceof MemberLeftException) {
        cleanedUpMembers.add(member);
        continue;
      }
      logger.warning(""String_Node_Str"" + member,(Throwable)response);
      return prepareUnauthenticatedClientMessage();
    }
    boolean isClientDisconnectOperationRun=(Boolean)response;
    if (isClientDisconnectOperationRun) {
      cleanedUpMembers.add(member);
    }
  }
  return prepareAuthenticatedClientMessage();
}","@Override protected Object reduce(Map<Member,Object> map) throws Throwable {
  for (  Map.Entry<Member,Object> entry : map.entrySet()) {
    Member member=entry.getKey();
    Object response=entry.getValue();
    if (response instanceof Throwable) {
      if (response instanceof MemberLeftException) {
        cleanedUpMembers.add(member);
        continue;
      }
      throw (Throwable)response;
    }
    boolean isClientDisconnectOperationRun=(Boolean)response;
    if (isClientDisconnectOperationRun) {
      cleanedUpMembers.add(member);
    }
  }
  return prepareAuthenticatedClientMessage();
}",0.9235521235521236
46235,"private ClientMessage prepareAuthenticatedClientMessage(){
  Connection connection=endpoint.getConnection();
  ILogger logger=clientEngine.getLogger(getClass());
  endpoint.authenticated(principal,credentials,isOwnerConnection(),clientVersion);
  setConnectionType();
  logger.log(Level.INFO,""String_Node_Str"" + connection + ""String_Node_Str""+ ""String_Node_Str""+ principal+ ""String_Node_Str""+ isOwnerConnection()+ ""String_Node_Str""+ clientVersion);
  endpointManager.registerEndpoint(endpoint);
  clientEngine.bind(endpoint);
  final Address thisAddress=clientEngine.getThisAddress();
  byte status=AuthenticationStatus.AUTHENTICATED.getId();
  return encodeAuth(status,thisAddress,principal.getUuid(),principal.getOwnerUuid(),serializationService.getVersion(),cleanedUpMembers);
}","private ClientMessage prepareAuthenticatedClientMessage(){
  Connection connection=endpoint.getConnection();
  ILogger logger=clientEngine.getLogger(getClass());
  endpoint.authenticated(principal,credentials,isOwnerConnection(),clientVersion);
  setConnectionType();
  logger.info(""String_Node_Str"" + connection + ""String_Node_Str""+ ""String_Node_Str""+ principal+ ""String_Node_Str""+ isOwnerConnection()+ ""String_Node_Str""+ clientVersion);
  endpointManager.registerEndpoint(endpoint);
  clientEngine.bind(endpoint);
  final Address thisAddress=clientEngine.getThisAddress();
  byte status=AuthenticationStatus.AUTHENTICATED.getId();
  return encodeAuth(status,thisAddress,principal.getUuid(),principal.getOwnerUuid(),serializationService.getVersion(),cleanedUpMembers);
}",0.9871134020618556
46236,"@Override protected Supplier<Operation> createOperationSupplier(){
  return new ReAuthenticationOperationSupplier(getUuid());
}","@Override protected Supplier<Operation> createOperationSupplier(){
  return new ReAuthenticationOperationSupplier(getUuid(),clientMessage.getCorrelationId());
}",0.8850174216027874
46237,"private URL newGetTaskUrl() throws MalformedURLException {
  GroupConfig groupConfig=instance.getConfig().getGroupConfig();
  Address localAddress=instance.node.getClusterService().getLocalMember().getAddress();
  String urlString=cleanupUrl(managementCenterUrl) + ""String_Node_Str"" + localAddress.getHost()+ ""String_Node_Str""+ localAddress.getPort()+ ""String_Node_Str""+ groupConfig.getName();
  return new URL(urlString);
}","private URL newGetTaskUrl() throws IOException {
  GroupConfig groupConfig=instance.getConfig().getGroupConfig();
  Address localAddress=instance.node.getClusterService().getLocalMember().getAddress();
  String urlString=cleanupUrl(managementCenterUrl) + ""String_Node_Str"" + localAddress.getHost()+ ""String_Node_Str""+ localAddress.getPort()+ ""String_Node_Str""+ encode(groupConfig.getName(),""String_Node_Str"");
  return new URL(urlString);
}",0.1296296296296296
46238,"private Config getManagementCenterConfig(){
  Config config=new Config();
  config.getManagementCenterConfig().setEnabled(true);
  config.getManagementCenterConfig().setUrl(format(""String_Node_Str"",portNum,""String_Node_Str""));
  return config;
}","private Config getManagementCenterConfig(){
  Config config=new Config();
  config.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  config.getManagementCenterConfig().setEnabled(true);
  config.getManagementCenterConfig().setUrl(format(""String_Node_Str"",portNum,""String_Node_Str""));
  return config;
}",0.8521739130434782
46239,"@Override public void run() throws Exception {
  CloseableHttpClient client=HttpClientBuilder.create().disableRedirectHandling().build();
  HttpUriRequest request=new HttpGet(""String_Node_Str"" + portNum + ""String_Node_Str"");
  HttpResponse response=client.execute(request);
  HttpEntity entity=response.getEntity();
  String responseString=EntityUtils.toString(entity);
  assertNotEquals(""String_Node_Str"",responseString);
  JsonObject object=JsonObject.readFrom(responseString);
  TimedMemberState memberState=new TimedMemberState();
  memberState.fromJson(object);
  assertEquals(""String_Node_Str"",memberState.getClusterName());
}","@Override public void run() throws Exception {
  CloseableHttpClient client=HttpClientBuilder.create().disableRedirectHandling().build();
  HttpUriRequest request=new HttpGet(""String_Node_Str"" + portNum + ""String_Node_Str"");
  HttpResponse response=client.execute(request);
  HttpEntity entity=response.getEntity();
  String responseString=EntityUtils.toString(entity);
  assertEquals(""String_Node_Str"",responseString);
}",0.7996201329534662
46240,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getPathInfo().contains(""String_Node_Str"")) {
    if (memberState != null) {
      resp.getWriter().write(memberState.toJson().toString());
    }
 else {
      resp.getWriter().write(""String_Node_Str"");
    }
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getPathInfo().contains(""String_Node_Str"")) {
    if (memberState != null) {
      resp.getWriter().write(memberState.toJson().toString());
    }
 else {
      resp.getWriter().write(""String_Node_Str"");
    }
  }
 else   if (req.getPathInfo().contains(""String_Node_Str"")) {
    clusterName=req.getParameter(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getPathInfo().contains(""String_Node_Str"")) {
    resp.getWriter().write(clusterName);
  }
}",0.7162303664921466
46241,"@Test public void testListenersSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.8665377176015474
46242,"@Test public void testListenersNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.6414473684210527
46243,"@Test public void testListenersNonSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.75
46244,"private void testListenersWaitMemberDestroy() throws InterruptedException {
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final int clusterSize=allHazelcastInstances.size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertTrue(disconnectedLatch.await(30,TimeUnit.SECONDS));
  assertTrue(connectedLatch.await(30,TimeUnit.SECONDS));
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  validateRegistrations(clusterSize - 1,registrationId,clientInstanceImpl);
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersWaitMemberDestroy(){
  setupListener();
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertOpenEventually(disconnectedLatch);
  assertOpenEventually(connectedLatch);
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  clusterSize=clusterSize - 1;
  validateRegistrationsAndListenerFunctionality();
}",0.7744041789095658
46245,"private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(20).setConnectionAttemptPeriod(2000);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}","private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}",0.6786570743405276
46246,"@Test public void testClusterReconnectDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9105058365758756
46247,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9475587703435804
46248,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9486725663716814
46249,protected abstract String addListener(final AtomicInteger eventCount);,protected abstract String addListener();,0.7272727272727273
46250,"private void validateListenerFunctionality(final AtomicInteger eventCount){
  eventCount.set(0);
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
,5);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}","private void validateListenerFunctionality(){
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}",0.9576338928856916
46251,"@Test public void testListenersSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8503253796095445
46252,"@Test public void testTemporaryBlockedNoDisconnectionSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.945179584120983
46253,"@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9125475285171104
46254,"@Test public void testListenersSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8577319587628865
46255,"@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9463955637707948
46256,"private void testListenersTemporaryNetworkBlockage(){
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  final int clusterSize=factory.getAllHazelcastInstances().size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final boolean smartRouting=clientInstanceImpl.getClientConfig().getNetworkConfig().isSmartRouting();
  final int expectedRegistrationsSize=smartRouting ? clusterSize : 1;
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  validateListenerFunctionality(eventCount);
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersTemporaryNetworkBlockage(){
  setupListener();
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  validateRegistrationsAndListenerFunctionality();
}",0.6706096451319381
46257,"@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9148148148148147
46258,"@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9163636363636364
46259,"@Test public void testListenersNonSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersNonSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.6596385542168675
46260,"@Override protected String addListener(final AtomicInteger eventCount){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}",0.955621301775148
46261,"@Override protected String addListener(final AtomicInteger eventCount){
  iList=client.getList(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}","@Override protected String addListener(){
  iList=client.getList(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}",0.958217270194986
46262,"@Override protected String addListener(final AtomicInteger eventCount){
  multiMap=client.getMultiMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  multiMap=client.getMultiMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}",0.9572649572649572
46263,"@Override protected String addListener(final AtomicInteger eventCount){
  iQueue=client.getQueue(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}","@Override protected String addListener(){
  iQueue=client.getQueue(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}",0.9585635359116024
46264,"@Override protected String addListener(final AtomicInteger eventCount){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}","@Override protected String addListener(){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}",0.9584487534626038
46265,"@Override protected String addListener(final AtomicInteger eventCount){
  iSet=client.getSet(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}","@Override protected String addListener(){
  iSet=client.getSet(randomString());
  ItemListener listener=new ItemListener(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}",0.9578651685393258
46266,"@Override protected String addListener(final AtomicInteger eventCount){
  topic=client.getTopic(randomString());
  MessageListener listener=new MessageListener(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}","@Override protected String addListener(){
  topic=client.getTopic(randomString());
  MessageListener listener=new MessageListener(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}",0.95
46267,"@Test public void testListenersSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.8665377176015474
46268,"@Test public void testListenersNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.6414473684210527
46269,"@Test public void testListenersNonSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersNonSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.75
46270,"private void testListenersWaitMemberDestroy() throws InterruptedException {
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final int clusterSize=allHazelcastInstances.size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertTrue(disconnectedLatch.await(30,TimeUnit.SECONDS));
  assertTrue(connectedLatch.await(30,TimeUnit.SECONDS));
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  validateRegistrations(clusterSize - 1,registrationId,clientInstanceImpl);
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersWaitMemberDestroy(){
  setupListener();
  Collection<HazelcastInstance> allHazelcastInstances=factory.getAllHazelcastInstances();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  final CountDownLatch connectedLatch=new CountDownLatch(1);
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED == event.getState()) {
        disconnectedLatch.countDown();
      }
      if (LifecycleEvent.LifecycleState.CLIENT_CONNECTED == event.getState()) {
        connectedLatch.countDown();
      }
    }
  }
);
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance ownerMember=getOwnerServer(factory,clientInstanceImpl);
  for (  HazelcastInstance member : allHazelcastInstances) {
    blockMessagesFromInstance(member,client);
  }
  ownerMember.getLifecycleService().terminate();
  for (  HazelcastInstance member : allHazelcastInstances) {
    unblockMessagesFromInstance(member,client);
  }
  assertOpenEventually(disconnectedLatch);
  assertOpenEventually(connectedLatch);
  sleepAtLeastMillis(ENDPOINT_REMOVE_DELAY_MILLISECONDS + 2000);
  clusterSize=clusterSize - 1;
  validateRegistrationsAndListenerFunctionality();
}",0.7744041789095658
46271,"private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(20).setConnectionAttemptPeriod(2000).setConnectionTimeout(5000);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}","private ClientConfig getSmartClientConfig(){
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  clientConfig.getNetworkConfig().setRedoOperation(true);
  clientConfig.setProperty(ClientProperty.HEARTBEAT_TIMEOUT.getName(),""String_Node_Str"");
  clientConfig.setProperty(ClientProperty.HEARTBEAT_INTERVAL.getName(),""String_Node_Str"");
  return clientConfig;
}",0.6596980255516841
46272,"@Test public void testClusterReconnectDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9105058365758756
46273,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9475587703435804
46274,"@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionMultipleServerNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9486725663716814
46275,protected abstract String addListener(final AtomicInteger eventCount);,protected abstract String addListener();,0.7272727272727273
46276,"private void validateListenerFunctionality(final AtomicInteger eventCount){
  eventCount.set(0);
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
,5);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}","private void validateListenerFunctionality(){
  for (int i=0; i < EVENT_COUNT; i++) {
    produceEvent();
  }
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertTrue(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,count >= EVENT_COUNT);
    }
  }
);
  assertTrueAllTheTime(new AssertTask(){
    @Override public void run() throws Exception {
      int count=eventCount.get();
      assertEquals(""String_Node_Str"" + count + ""String_Node_Str""+ EVENT_COUNT,EVENT_COUNT,eventCount.get());
    }
  }
,3);
}",0.9576338928856916
46277,"@Test public void testListenersSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8503253796095445
46278,"@Test public void testTemporaryBlockedNoDisconnectionSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.945179584120983
46279,"@Test @Ignore(value=""String_Node_Str"") public void testClusterReconnectDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectDueToHeartbeatNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.8586762075134168
46280,"@Test public void testListenersSmartRoutingMultipleServer() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=createClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersInternal();
}","@Test public void testListenersSmartRoutingMultipleServer(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateOwnerNode();
}",0.8577319587628865
46281,"@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}","@Test public void testTemporaryBlockedNoDisconnectionNonSmartRouting(){
  factory.newHazelcastInstance();
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTemporaryNetworkBlockage();
}",0.9463955637707948
46282,"private void testListenersTemporaryNetworkBlockage(){
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  final int clusterSize=factory.getAllHazelcastInstances().size();
  assertClusterSizeEventually(clusterSize,client);
  final AtomicInteger eventCount=new AtomicInteger();
  final String registrationId=addListener(eventCount);
  final boolean smartRouting=clientInstanceImpl.getClientConfig().getNetworkConfig().isSmartRouting();
  final int expectedRegistrationsSize=smartRouting ? clusterSize : 1;
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  validateListenerFunctionality(eventCount);
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  assertEquals(expectedRegistrationsSize,getClientEventRegistrations(client,registrationId).size());
  validateListenerFunctionality(eventCount);
  assertTrue(removeListener(registrationId));
}","private void testListenersTemporaryNetworkBlockage(){
  setupListener();
  HazelcastClientInstanceImpl clientInstanceImpl=getHazelcastClientInstanceImpl(client);
  HazelcastInstance server=getOwnerServer(factory,clientInstanceImpl);
  long timeout=clientInstanceImpl.getProperties().getMillis(HEARTBEAT_TIMEOUT);
  long heartbeatTimeout=timeout > 0 ? timeout : Integer.parseInt(HEARTBEAT_TIMEOUT.getDefaultValue());
  long waitTime=heartbeatTimeout / 2;
  long endTime=System.currentTimeMillis() + waitTime;
  blockMessagesFromInstance(server,client);
  long sleepTime=endTime - System.currentTimeMillis();
  if (sleepTime > 0) {
    sleepMillis((int)sleepTime);
  }
  unblockMessagesFromInstance(server,client);
  validateRegistrationsAndListenerFunctionality();
}",0.6706096451319381
46283,"@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServersDueToHeartbeatSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9148148148148147
46284,"@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting() throws InterruptedException {
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersForHeartbeat();
}","@Test public void testClusterReconnectMultipleServerDueToHeartbeatNonSmartRouting(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersHeartbeatTimeoutToOwner();
}",0.9163636363636364
46285,"@Test public void testListenersNonSmartRoutingTerminateRandomNode() throws InterruptedException {
  factory.newHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  clientConfig.getNetworkConfig().setSmartRouting(false);
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(Integer.MAX_VALUE);
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNodeInternal();
}","@Test public void testListenersNonSmartRoutingTerminateRandomNode(){
  factory.newInstances(null,3);
  ClientConfig clientConfig=getNonSmartClientConfig();
  client=factory.newHazelcastClient(clientConfig);
  testListenersTerminateRandomNode();
}",0.6596385542168675
46286,"@Override protected String addListener(final AtomicInteger eventCount){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  iMap=client.getMap(randomString());
  final EntryAdapter<Object,Object> listener=new EntryAdapter<Object,Object>(){
    public void onEntryEvent(    EntryEvent<Object,Object> event){
      eventCount.incrementAndGet();
    }
  }
;
  return iMap.addEntryListener(listener,true);
}",0.955621301775148
46287,"@Override protected String addListener(final AtomicInteger eventCount){
  iList=client.getList(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}","@Override protected String addListener(){
  iList=client.getList(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iList.addItemListener(listener,true);
}",0.96
46288,"@Override protected String addListener(final AtomicInteger eventCount){
  multiMap=client.getMultiMap(randomString());
  EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}","@Override protected String addListener(){
  multiMap=client.getMultiMap(randomString());
  EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return multiMap.addEntryListener(listener,true);
}",0.9577464788732394
46289,"@Override protected String addListener(final AtomicInteger eventCount){
  iQueue=client.getQueue(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}","@Override protected String addListener(){
  iQueue=client.getQueue(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iQueue.addItemListener(listener,true);
}",0.9603174603174603
46290,"@Override protected String addListener(final AtomicInteger eventCount){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}","@Override protected String addListener(){
  replicatedMap=client.getReplicatedMap(randomString());
  final EntryAdapter<String,String> listener=new EntryAdapter<String,String>(){
    @Override public void onEntryEvent(    EntryEvent<String,String> event){
      eventCount.incrementAndGet();
    }
  }
;
  return replicatedMap.addEntryListener(listener);
}",0.9595687331536388
46291,"@Override protected String addListener(final AtomicInteger eventCount){
  iSet=client.getSet(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}","@Override protected String addListener(){
  iSet=client.getSet(randomString());
  ItemListener<String> listener=new ItemListener<String>(){
    @Override public void itemAdded(    ItemEvent item){
      eventCount.incrementAndGet();
    }
    @Override public void itemRemoved(    ItemEvent item){
    }
  }
;
  return iSet.addItemListener(listener,true);
}",0.9596774193548387
46292,"@Override protected String addListener(final AtomicInteger eventCount){
  topic=client.getTopic(randomString());
  MessageListener<String> listener=new MessageListener<String>(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}","@Override protected String addListener(){
  topic=client.getTopic(randomString());
  MessageListener<String> listener=new MessageListener<String>(){
    @Override public void onMessage(    Message message){
      eventCount.incrementAndGet();
    }
  }
;
  return topic.addMessageListener(listener);
}",0.9525316455696202
46293,"private URL newGetTaskUrl() throws MalformedURLException {
  GroupConfig groupConfig=instance.getConfig().getGroupConfig();
  Address localAddress=instance.node.getClusterService().getLocalMember().getAddress();
  String urlString=cleanupUrl(managementCenterUrl) + ""String_Node_Str"" + localAddress.getHost()+ ""String_Node_Str""+ localAddress.getPort()+ ""String_Node_Str""+ groupConfig.getName();
  return new URL(urlString);
}","private URL newGetTaskUrl() throws IOException {
  GroupConfig groupConfig=instance.getConfig().getGroupConfig();
  Address localAddress=instance.node.getClusterService().getLocalMember().getAddress();
  String urlString=cleanupUrl(managementCenterUrl) + ""String_Node_Str"" + localAddress.getHost()+ ""String_Node_Str""+ localAddress.getPort()+ ""String_Node_Str""+ encode(groupConfig.getName(),""String_Node_Str"");
  return new URL(urlString);
}",0.1296296296296296
46294,"private Config getManagementCenterConfig(){
  Config config=new Config();
  config.getManagementCenterConfig().setEnabled(true);
  config.getManagementCenterConfig().setUrl(format(""String_Node_Str"",portNum,""String_Node_Str""));
  return config;
}","private Config getManagementCenterConfig(){
  Config config=new Config();
  config.getGroupConfig().setName(""String_Node_Str"").setPassword(""String_Node_Str"");
  config.getManagementCenterConfig().setEnabled(true);
  config.getManagementCenterConfig().setUrl(format(""String_Node_Str"",portNum,""String_Node_Str""));
  return config;
}",0.8521739130434782
46295,"@Override public void run() throws Exception {
  CloseableHttpClient client=HttpClientBuilder.create().disableRedirectHandling().build();
  HttpUriRequest request=new HttpGet(""String_Node_Str"" + portNum + ""String_Node_Str"");
  HttpResponse response=client.execute(request);
  HttpEntity entity=response.getEntity();
  String responseString=EntityUtils.toString(entity);
  assertNotEquals(""String_Node_Str"",responseString);
  JsonObject object=JsonObject.readFrom(responseString);
  TimedMemberState memberState=new TimedMemberState();
  memberState.fromJson(object);
  assertEquals(""String_Node_Str"",memberState.getClusterName());
}","@Override public void run() throws Exception {
  CloseableHttpClient client=HttpClientBuilder.create().disableRedirectHandling().build();
  HttpUriRequest request=new HttpGet(""String_Node_Str"" + portNum + ""String_Node_Str"");
  HttpResponse response=client.execute(request);
  HttpEntity entity=response.getEntity();
  String responseString=EntityUtils.toString(entity);
  assertEquals(""String_Node_Str"",responseString);
}",0.7996201329534662
46296,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getPathInfo().contains(""String_Node_Str"")) {
    if (memberState != null) {
      resp.getWriter().write(memberState.toJson().toString());
    }
 else {
      resp.getWriter().write(""String_Node_Str"");
    }
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getPathInfo().contains(""String_Node_Str"")) {
    if (memberState != null) {
      resp.getWriter().write(memberState.toJson().toString());
    }
 else {
      resp.getWriter().write(""String_Node_Str"");
    }
  }
 else   if (req.getPathInfo().contains(""String_Node_Str"")) {
    clusterName=req.getParameter(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getPathInfo().contains(""String_Node_Str"")) {
    resp.getWriter().write(clusterName);
  }
}",0.7162303664921466
46297,"@Test(timeout=10000) public void test_doNotRescheduleEntryWithinSameSecond_postpone(){
  scheduler=new SecondsBasedEntryTaskScheduler<Integer,Integer>(executorService,entryProcessor,POSTPONE);
  int delayMillis=0;
  int startSecond;
  boolean firstResult;
  boolean secondResult;
  int stopSecond;
  do {
    startSecond=findRelativeSecond(delayMillis);
    firstResult=scheduler.schedule(delayMillis,1,1);
    secondResult=scheduler.schedule(delayMillis,1,1);
    stopSecond=findRelativeSecond(delayMillis);
  }
 while (startSecond != stopSecond);
  assertTrue(""String_Node_Str"",firstResult);
  assertFalse(""String_Node_Str"",secondResult);
  assertNotNull(scheduler.get(1));
  assertEquals(1,scheduler.size());
}","@Test(timeout=10000) public void test_doNotRescheduleEntryWithinSameSecond_postpone(){
  scheduler=new SecondsBasedEntryTaskScheduler<Integer,Integer>(executorService,entryProcessor,POSTPONE);
  final int delayMillis=0;
  final int key=1;
  int startSecond;
  boolean firstResult;
  boolean secondResult;
  int stopSecond=0;
  do {
    while ((startSecond=findRelativeSecond(delayMillis)) == stopSecond) {
      sleepMillis(1);
    }
    firstResult=scheduler.schedule(delayMillis,key,1);
    secondResult=scheduler.schedule(delayMillis,key,1);
    stopSecond=findRelativeSecond(delayMillis);
  }
 while (startSecond != stopSecond);
  assertTrue(""String_Node_Str"",firstResult);
  assertFalse(""String_Node_Str"",secondResult);
  assertNotNull(scheduler.get(key));
  assertEquals(1,scheduler.size());
}",0.9365079365079364
46298,"private void appendDate(){
  write(calendar.get(DAY_OF_MONTH));
  write('-');
  write(calendar.get(MONTH));
  write('-');
  write(calendar.get(YEAR));
}","private void appendDate(){
  write(calendar.get(DAY_OF_MONTH));
  write('-');
  write(calendar.get(MONTH) + 1);
  write('-');
  write(calendar.get(YEAR));
}",0.987012987012987
46299,"@Test(timeout=10000) public void test_doNotRescheduleEntryWithinSameSecond_postpone(){
  scheduler=new SecondsBasedEntryTaskScheduler<Integer,Integer>(executorService,entryProcessor,POSTPONE);
  int delayMillis=0;
  int startSecond;
  boolean firstResult;
  boolean secondResult;
  int stopSecond;
  do {
    startSecond=findRelativeSecond(delayMillis);
    firstResult=scheduler.schedule(delayMillis,1,1);
    secondResult=scheduler.schedule(delayMillis,1,1);
    stopSecond=findRelativeSecond(delayMillis);
  }
 while (startSecond != stopSecond);
  assertTrue(""String_Node_Str"",firstResult);
  assertFalse(""String_Node_Str"",secondResult);
  assertNotNull(scheduler.get(1));
  assertEquals(1,scheduler.size());
}","@Test(timeout=10000) public void test_doNotRescheduleEntryWithinSameSecond_postpone(){
  scheduler=new SecondsBasedEntryTaskScheduler<Integer,Integer>(executorService,entryProcessor,POSTPONE);
  final int delayMillis=0;
  final int key=1;
  int startSecond;
  boolean firstResult;
  boolean secondResult;
  int stopSecond=0;
  do {
    while ((startSecond=findRelativeSecond(delayMillis)) == stopSecond) {
      sleepMillis(1);
    }
    firstResult=scheduler.schedule(delayMillis,key,1);
    secondResult=scheduler.schedule(delayMillis,key,1);
    stopSecond=findRelativeSecond(delayMillis);
  }
 while (startSecond != stopSecond);
  assertTrue(""String_Node_Str"",firstResult);
  assertFalse(""String_Node_Str"",secondResult);
  assertNotNull(scheduler.get(key));
  assertEquals(1,scheduler.size());
}",0.9365079365079364
46300,"public void onFailure(Throwable t){
}","public void onFailure(Throwable t){
  resetToUnmarkedState(keyData);
}",0.6915887850467289
46301,"@Override public void putAll(Map<? extends K,? extends V> map,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(map);
  ClientPartitionService partitionService=clientContext.getPartitionService();
  int partitionCount=partitionService.getPartitionCount();
  try {
    Map<Data,Boolean> markers=createHashMap(map.size());
    List<Map.Entry<Data,Data>>[] entriesPerPartition=groupDataToPartitions(map,partitionService,partitionCount);
    putToAllPartitionsAndWaitForCompletion(entriesPerPartition,expiryPolicy,start,markers);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}","@Override public void putAll(Map<? extends K,? extends V> map,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(map);
  ClientPartitionService partitionService=clientContext.getPartitionService();
  int partitionCount=partitionService.getPartitionCount();
  Map<Data,Boolean> markers=createHashMap(map.size());
  try {
    List<Map.Entry<Data,Data>>[] entriesPerPartition=groupDataToPartitions(map,partitionService,partitionCount);
    putToAllPartitionsAndWaitForCompletion(entriesPerPartition,expiryPolicy,start,markers);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
 finally {
    unmarkRemainingMarkedKeys(markers);
  }
}",0.94457099468489
46302,"@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> keySet=new HashSet<Data>(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=getAllFromNearCache(keySet);
  if (keySet.isEmpty()) {
    return result;
  }
  Map<Data,Boolean> markers=createHashMap(keySet.size());
  for (  Data key : keySet) {
    markers.put(key,keyStateMarker.tryMark(key));
  }
  Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetAllCodec.encodeRequest(nameWithPrefix,keySet,expiryPolicyData);
  ClientMessage responseMessage=invoke(request);
  List<Map.Entry<Data,Data>> entries=CacheGetAllCodec.decodeResponse(responseMessage).response;
  for (  Map.Entry<Data,Data> dataEntry : entries) {
    Data keyData=dataEntry.getKey();
    Data valueData=dataEntry.getValue();
    K key=toObject(keyData);
    V value=toObject(valueData);
    result.put(key,value);
    storeInNearCache(keyData,valueData,value,markers.get(keyData));
  }
  if (statisticsEnabled) {
    statistics.increaseCacheHits(entries.size());
    statistics.addGetTimeNanos(System.nanoTime() - start);
  }
  return result;
}","@Override public Map<K,V> getAll(Set<? extends K> keys,ExpiryPolicy expiryPolicy){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(keys);
  if (keys.isEmpty()) {
    return Collections.EMPTY_MAP;
  }
  final Set<Data> keySet=new HashSet<Data>(keys.size());
  for (  K key : keys) {
    final Data k=toData(key);
    keySet.add(k);
  }
  Map<K,V> result=getAllFromNearCache(keySet);
  if (keySet.isEmpty()) {
    return result;
  }
  List<Map.Entry<Data,Data>> entries;
  Map<Data,Boolean> markers=createHashMap(keySet.size());
  try {
    for (    Data key : keySet) {
      markers.put(key,keyStateMarker.markIfUnmarked(key));
    }
    Data expiryPolicyData=toData(expiryPolicy);
    ClientMessage request=CacheGetAllCodec.encodeRequest(nameWithPrefix,keySet,expiryPolicyData);
    ClientMessage responseMessage=invoke(request);
    entries=CacheGetAllCodec.decodeResponse(responseMessage).response;
    for (    Map.Entry<Data,Data> dataEntry : entries) {
      Data keyData=dataEntry.getKey();
      Data valueData=dataEntry.getValue();
      K key=toObject(keyData);
      V value=toObject(valueData);
      result.put(key,value);
      storeInNearCache(keyData,valueData,value,markers.remove(keyData));
    }
  }
  finally {
    unmarkRemainingMarkedKeys(markers);
  }
  if (statisticsEnabled) {
    statistics.increaseCacheHits(entries.size());
    statistics.addGetTimeNanos(System.nanoTime() - start);
  }
  return result;
}",0.9186671443926908
46303,"protected Object getInternal(K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getFromNearCache(keyData,async);
  if (cached != null) {
    return cached;
  }
  final boolean marked=keyStateMarker.tryMark(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(key);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,marked);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
        }
      }
);
    }
    return delegatingFuture;
  }
 else {
    try {
      Object value=toObject(delegatingFuture.get());
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getResponse(),(V)value,marked);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}","protected Object getInternal(K key,ExpiryPolicy expiryPolicy,boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key);
  final Data keyData=toData(key);
  Object cached=getFromNearCache(keyData,async);
  if (cached != null) {
    return cached;
  }
  final boolean marked=keyStateMarker.markIfUnmarked(keyData);
  final Data expiryPolicyData=toData(expiryPolicy);
  ClientMessage request=CacheGetCodec.encodeRequest(nameWithPrefix,keyData,expiryPolicyData);
  ClientInvocationFuture future;
  try {
    final int partitionId=clientContext.getPartitionService().getPartitionId(key);
    final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
    final ClientInvocation clientInvocation=new ClientInvocation(client,request,partitionId);
    future=clientInvocation.invoke();
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  SerializationService serializationService=clientContext.getSerializationService();
  ClientDelegatingFuture<V> delegatingFuture=new ClientDelegatingFuture<V>(future,serializationService,cacheGetResponseDecoder);
  if (async) {
    if (nearCache != null) {
      delegatingFuture.andThenInternal(new ExecutionCallback<Data>(){
        public void onResponse(        Data valueData){
          storeInNearCache(keyData,valueData,null,marked);
          if (statisticsEnabled) {
            handleStatisticsOnGet(start,valueData);
          }
        }
        public void onFailure(        Throwable t){
          resetToUnmarkedState(keyData);
        }
      }
);
    }
    return delegatingFuture;
  }
 else {
    try {
      Object value=toObject(delegatingFuture.get());
      if (nearCache != null) {
        storeInNearCache(keyData,(Data)delegatingFuture.getResponse(),(V)value,marked);
      }
      if (statisticsEnabled) {
        handleStatisticsOnGet(start,value);
      }
      return value;
    }
 catch (    Throwable e) {
      resetToUnmarkedState(keyData);
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
}",0.9673807205452776
46304,"private void putToAllPartitionsAndWaitForCompletion(List<Map.Entry<Data,Data>>[] entriesPerPartition,ExpiryPolicy expiryPolicy,long start,Map<Data,Boolean> markers) throws ExecutionException, InterruptedException {
  Data expiryPolicyData=toData(expiryPolicy);
  List<FutureEntriesTuple> futureEntriesTuples=new ArrayList<FutureEntriesTuple>(entriesPerPartition.length);
  for (int partitionId=0; partitionId < entriesPerPartition.length; partitionId++) {
    List<Map.Entry<Data,Data>> entries=entriesPerPartition[partitionId];
    if (entries != null) {
      for (      Map.Entry<Data,Data> entry : entries) {
        Data key=entry.getKey();
        markers.put(key,keyStateMarker.tryMark(key));
      }
      int completionId=nextCompletionId();
      ClientMessage request=CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId);
      Future f=invoke(request,partitionId,completionId);
      futureEntriesTuples.add(new FutureEntriesTuple(f,entries));
    }
  }
  waitResponseFromAllPartitionsForPutAll(futureEntriesTuples,start,markers);
}","private void putToAllPartitionsAndWaitForCompletion(List<Map.Entry<Data,Data>>[] entriesPerPartition,ExpiryPolicy expiryPolicy,long start,Map<Data,Boolean> markers) throws ExecutionException, InterruptedException {
  Data expiryPolicyData=toData(expiryPolicy);
  List<FutureEntriesTuple> futureEntriesTuples=new ArrayList<FutureEntriesTuple>(entriesPerPartition.length);
  for (int partitionId=0; partitionId < entriesPerPartition.length; partitionId++) {
    List<Map.Entry<Data,Data>> entries=entriesPerPartition[partitionId];
    if (entries != null) {
      for (      Map.Entry<Data,Data> entry : entries) {
        Data key=entry.getKey();
        markers.put(key,!cacheOnUpdate || keyStateMarker.markIfUnmarked(key));
      }
      int completionId=nextCompletionId();
      ClientMessage request=CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId);
      Future f=invoke(request,partitionId,completionId);
      futureEntriesTuples.add(new FutureEntriesTuple(f,entries));
    }
  }
  waitResponseFromAllPartitionsForPutAll(futureEntriesTuples,start,markers);
}",0.9848415250344512
46305,"private Object putInternalAsync(final V value,final boolean isGet,final long start,final Data keyData,final Data valueData,ClientInvocationFuture future,final boolean marked){
  OneShotExecutionCallback<V> oneShotExecutionCallback=null;
  if (nearCache != null || statisticsEnabled) {
    oneShotExecutionCallback=new OneShotExecutionCallback<V>(){
      @Override protected void onResponseInternal(      V responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          handleStatisticsOnPut(isGet,start,responseData);
        }
      }
      @Override protected void onFailureInternal(      Throwable t){
      }
    }
;
  }
  SerializationService serializationService=clientContext.getSerializationService();
  if (oneShotExecutionCallback == null) {
    return new ClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER);
  }
  ClientDelegatingFuture<V> delegatingFuture=new CallbackAwareClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER,oneShotExecutionCallback);
  delegatingFuture.andThen(oneShotExecutionCallback);
  return delegatingFuture;
}","private Object putInternalAsync(final V value,final boolean isGet,final long start,final Data keyData,final Data valueData,ClientInvocationFuture future,final boolean marked){
  OneShotExecutionCallback<V> oneShotExecutionCallback=null;
  if (nearCache != null || statisticsEnabled) {
    oneShotExecutionCallback=new OneShotExecutionCallback<V>(){
      @Override protected void onResponseInternal(      V responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          handleStatisticsOnPut(isGet,start,responseData);
        }
      }
      @Override protected void onFailureInternal(      Throwable t){
        if (nearCache != null && cacheOnUpdate) {
          resetToUnmarkedState(keyData);
        }
      }
    }
;
  }
  SerializationService serializationService=clientContext.getSerializationService();
  if (oneShotExecutionCallback == null) {
    return new ClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER);
  }
  ClientDelegatingFuture<V> delegatingFuture=new CallbackAwareClientDelegatingFuture<V>(future,serializationService,PUT_RESPONSE_DECODER,oneShotExecutionCallback);
  delegatingFuture.andThen(oneShotExecutionCallback);
  return delegatingFuture;
}",0.9626064420584968
46306,"protected Object putInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  Data expiryPolicyData=toData(expiryPolicy);
  boolean marked=cacheOnUpdate ? keyStateMarker.tryMark(keyData) : true;
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
  if (async) {
    return putInternalAsync(value,isGet,start,keyData,valueData,future,marked);
  }
  return putInternalSync(value,isGet,start,keyData,valueData,future,marked);
}","protected Object putInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean isGet,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  Data expiryPolicyData=toData(expiryPolicy);
  boolean marked=!cacheOnUpdate || keyStateMarker.markIfUnmarked(keyData);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  if (async) {
    return putInternalAsync(value,isGet,start,keyData,valueData,future,marked);
  }
  return putInternalSync(value,isGet,start,keyData,valueData,future,marked);
}",0.9565661727133368
46307,"@Override protected void onFailureInternal(Throwable t){
}","@Override protected void onFailureInternal(Throwable t){
  if (nearCache != null && cacheOnUpdate) {
    resetToUnmarkedState(keyData);
  }
}",0.5829145728643216
46308,"@Override public void onFailure(Throwable t){
}","@Override public void onFailure(Throwable t){
  if (nearCache != null && cacheOnUpdate) {
    resetToUnmarkedState(keyData);
  }
}",0.5310734463276836
46309,"protected void storeInNearCache(Data key,Data valueData,V value,boolean marked){
  if (nearCache != null && valueData != null && marked) {
    Object valueToStore=nearCache.selectToSave(value,valueData);
    try {
      nearCache.put(key,valueToStore);
    }
  finally {
      if (!keyStateMarker.tryUnmark(key)) {
        invalidateNearCache(key);
        keyStateMarker.forceUnmark(key);
      }
    }
  }
}","protected void storeInNearCache(Data key,Data valueData,V value,boolean marked){
  if (!marked) {
    return;
  }
  try {
    if (nearCache == null || valueData == null) {
      return;
    }
    Object valueToStore=nearCache.selectToSave(value,valueData);
    nearCache.put(key,valueToStore);
  }
  finally {
    resetToUnmarkedState(key);
  }
}",0.5960264900662252
46310,"protected Object putIfAbsentInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  boolean marked=cacheOnUpdate ? keyStateMarker.tryMark(keyData) : true;
  Data expiryPolicyData=toData(expiryPolicy);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
  ClientDelegatingFuture<Boolean> delegatingFuture=new ClientDelegatingFuture<Boolean>(future,clientContext.getSerializationService(),PUT_IF_ABSENT_RESPONSE_DECODER);
  if (async) {
    return putIfAbsentInternalAsync(value,start,keyData,valueData,delegatingFuture,marked);
  }
  return putIfAbsentInternalSync(value,start,keyData,valueData,delegatingFuture,marked);
}","protected Object putIfAbsentInternal(K key,V value,ExpiryPolicy expiryPolicy,boolean withCompletionEvent,boolean async){
  long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  Data keyData=toData(key);
  Data valueData=toData(value);
  boolean marked=!cacheOnUpdate || keyStateMarker.markIfUnmarked(keyData);
  Data expiryPolicyData=toData(expiryPolicy);
  int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutIfAbsentCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    resetToUnmarkedState(keyData);
    throw rethrow(e);
  }
  ClientDelegatingFuture<Boolean> delegatingFuture=new ClientDelegatingFuture<Boolean>(future,clientContext.getSerializationService(),PUT_IF_ABSENT_RESPONSE_DECODER);
  if (async) {
    return putIfAbsentInternalAsync(value,start,keyData,valueData,delegatingFuture,marked);
  }
  return putIfAbsentInternalSync(value,start,keyData,valueData,delegatingFuture,marked);
}",0.9635349635349636
46311,"private Object putInternalSync(V value,boolean isGet,long start,Data keyData,Data valueData,ClientInvocationFuture future,boolean marked){
  try {
    ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),PUT_RESPONSE_DECODER);
    Object response=delegatingFuture.get();
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
    if (statisticsEnabled) {
      handleStatisticsOnPut(isGet,start,response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","private Object putInternalSync(V value,boolean isGet,long start,Data keyData,Data valueData,ClientInvocationFuture future,boolean marked){
  try {
    ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),PUT_RESPONSE_DECODER);
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPut(isGet,start,response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}",0.7373527373527373
46312,"private Object putIfAbsentInternalAsync(final V value,final long start,final Data keyData,final Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,final boolean marked){
  if (nearCache != null || statisticsEnabled) {
    delegatingFuture.andThen(new ExecutionCallback<Boolean>(){
      @Override public void onResponse(      Boolean responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          Object response=clientContext.getSerializationService().toObject(responseData);
          handleStatisticsOnPutIfAbsent(start,(Boolean)response);
        }
      }
      @Override public void onFailure(      Throwable t){
      }
    }
);
  }
  return delegatingFuture;
}","private Object putIfAbsentInternalAsync(final V value,final long start,final Data keyData,final Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,final boolean marked){
  if (nearCache != null || statisticsEnabled) {
    delegatingFuture.andThen(new ExecutionCallback<Boolean>(){
      @Override public void onResponse(      Boolean responseData){
        if (nearCache != null) {
          if (cacheOnUpdate) {
            storeInNearCache(keyData,valueData,value,marked);
          }
 else {
            invalidateNearCache(keyData);
          }
        }
        if (statisticsEnabled) {
          Object response=clientContext.getSerializationService().toObject(responseData);
          handleStatisticsOnPutIfAbsent(start,(Boolean)response);
        }
      }
      @Override public void onFailure(      Throwable t){
        if (nearCache != null && cacheOnUpdate) {
          resetToUnmarkedState(keyData);
        }
      }
    }
);
  }
  return delegatingFuture;
}",0.9460758142018152
46313,"private Object putIfAbsentInternalSync(V value,long start,Data keyData,Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,boolean marked){
  try {
    Object response=delegatingFuture.get();
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
    if (statisticsEnabled) {
      handleStatisticsOnPutIfAbsent(start,(Boolean)response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
}","private Object putIfAbsentInternalSync(V value,long start,Data keyData,Data valueData,ClientDelegatingFuture<Boolean> delegatingFuture,boolean marked){
  try {
    Object response=delegatingFuture.get();
    if (statisticsEnabled) {
      handleStatisticsOnPutIfAbsent(start,(Boolean)response);
    }
    return response;
  }
 catch (  Throwable e) {
    throw rethrowAllowedTypeFirst(e,CacheException.class);
  }
 finally {
    if (nearCache != null) {
      if (cacheOnUpdate) {
        storeInNearCache(keyData,valueData,value,marked);
      }
 else {
        invalidateNearCache(keyData);
      }
    }
  }
}",0.684863523573201
46314,"@Override protected void getAllObjectInternal(List<Data> keys,List<Object> resultingKeyValuePairs){
  Map<Data,Boolean> keyStates=null;
  try {
    getCachedValue(keys,resultingKeyValuePairs);
    keyStates=createHashMap(keys.size());
    for (    Data key : keys) {
      keyStates.put(key,keyStateMarker.tryMark(key));
    }
    int currentSize=resultingKeyValuePairs.size();
    super.getAllObjectInternal(keys,resultingKeyValuePairs);
    for (int i=currentSize; i < resultingKeyValuePairs.size(); ) {
      Data key=toData(resultingKeyValuePairs.get(i++));
      Data value=toData(resultingKeyValuePairs.get(i++));
      boolean marked=keyStates.remove(key);
      if (marked) {
        tryToPutNearCache(key,value);
      }
    }
  }
  finally {
    unmarkRemainingMarkedKeys(keyStates);
  }
}","@Override protected void getAllObjectInternal(List<Data> keys,List<Object> resultingKeyValuePairs){
  Map<Data,Boolean> keyStates=createHashMap(keys.size());
  try {
    getCachedValue(keys,resultingKeyValuePairs);
    for (    Data key : keys) {
      keyStates.put(key,keyStateMarker.tryMark(key));
    }
    int currentSize=resultingKeyValuePairs.size();
    super.getAllObjectInternal(keys,resultingKeyValuePairs);
    for (int i=currentSize; i < resultingKeyValuePairs.size(); ) {
      Data key=toData(resultingKeyValuePairs.get(i++));
      Data value=toData(resultingKeyValuePairs.get(i++));
      boolean marked=keyStates.remove(key);
      if (marked) {
        tryToPutNearCache(key,value);
      }
    }
  }
  finally {
    unmarkRemainingMarkedKeys(keyStates);
  }
}",0.9543726235741444
46315,"@Before public void setup(){
  Config config=new Config();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addQueryCacheConfig(TEST_MAP_NAME,new QueryCacheConfig(QUERY_CACHE_NAME).setPredicateConfig(new PredicateConfig(predicate)).setIncludeValue(includeValues));
  if (useNearCache) {
    clientConfig.addNearCacheConfig(new NearCacheConfig().setName(TEST_MAP_NAME).setCacheLocalEntries(true));
  }
  clientConfig.setProperty(MapEventPublisherImpl.LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES.getName(),Boolean.toString(useQueryCacheNaturalFilteringStrategy));
  factory=new TestHazelcastFactory();
  factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  map=client.getMap(TEST_MAP_NAME);
  queryCache=map.getQueryCache(QUERY_CACHE_NAME);
}","@Before public void setup(){
  Config config=new Config();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addQueryCacheConfig(TEST_MAP_NAME,new QueryCacheConfig(QUERY_CACHE_NAME).setPredicateConfig(new PredicateConfig(predicate)).setIncludeValue(includeValues));
  if (useNearCache) {
    clientConfig.addNearCacheConfig(new NearCacheConfig().setName(TEST_MAP_NAME).setInvalidateOnChange(true));
  }
  clientConfig.setProperty(MapEventPublisherImpl.LISTENER_WITH_PREDICATE_PRODUCES_NATURAL_EVENT_TYPES.getName(),Boolean.toString(useQueryCacheNaturalFilteringStrategy));
  factory=new TestHazelcastFactory();
  factory.newHazelcastInstance(config);
  HazelcastInstance client=factory.newHazelcastClient(clientConfig);
  map=client.getMap(TEST_MAP_NAME);
  queryCache=map.getQueryCache(QUERY_CACHE_NAME);
}",0.9786455155582672
46316,"@Override public void dispatchEvent(Object eventData,ListenerAdapter listener){
  if (eventData instanceof QueryCacheEventData) {
    dispatchQueryCacheEventData((QueryCacheEventData)eventData,listener);
    return;
  }
  if (eventData instanceof BatchEventData) {
    dispatchBatchEventData((BatchEventData)eventData,listener);
    return;
  }
  if (eventData instanceof LocalEntryEventData) {
    dispatchLocalEventData(((LocalEntryEventData)eventData),listener);
    return;
  }
  if (eventData instanceof LocalCacheWideEventData) {
    dispatchLocalEventData(((LocalCacheWideEventData)eventData),listener);
    return;
  }
  if (eventData instanceof EntryEventData) {
    dispatchEntryEventData((EntryEventData)eventData,listener);
    return;
  }
  if (eventData instanceof MapEventData) {
    dispatchMapEventData((MapEventData)eventData,listener);
    return;
  }
  if (eventData instanceof MapPartitionEventData) {
    dispatchMapPartitionLostEventData((MapPartitionEventData)eventData,listener);
    return;
  }
  if (eventData instanceof Invalidation) {
    listener.onEvent(eventData);
    incrementEventStats(((Invalidation)eventData));
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + eventData + ']');
}","@Override @SuppressWarnings(""String_Node_Str"") public void dispatchEvent(Object eventData,ListenerAdapter listener){
  if (eventData instanceof QueryCacheEventData) {
    dispatchQueryCacheEventData((QueryCacheEventData)eventData,listener);
    return;
  }
  if (eventData instanceof BatchEventData) {
    dispatchBatchEventData((BatchEventData)eventData,listener);
    return;
  }
  if (eventData instanceof LocalEntryEventData) {
    dispatchLocalEventData(((LocalEntryEventData)eventData),listener);
    return;
  }
  if (eventData instanceof LocalCacheWideEventData) {
    dispatchLocalEventData(((LocalCacheWideEventData)eventData),listener);
    return;
  }
  if (eventData instanceof EntryEventData) {
    dispatchEntryEventData((EntryEventData)eventData,listener);
    return;
  }
  if (eventData instanceof MapEventData) {
    dispatchMapEventData((MapEventData)eventData,listener);
    return;
  }
  if (eventData instanceof MapPartitionEventData) {
    dispatchMapPartitionLostEventData((MapPartitionEventData)eventData,listener);
    return;
  }
  if (eventData instanceof Invalidation) {
    listener.onEvent(eventData);
    incrementEventStats(((Invalidation)eventData));
    return;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + eventData + ']');
}",0.9853116315998413
46317,"@Override public void onResponse(Data response){
  if (marked) {
    tryToPutNearCache(keyData,response);
  }
}","@Override public void onResponse(Data response){
  if (marked) {
    tryToPutNearCache(key,response);
  }
}",0.981651376146789
46318,"@Override public void onFailure(Throwable t){
}","@Override public void onFailure(Throwable t){
  if (marked) {
    resetToUnmarkedState(key);
  }
}",0.6482758620689655
46319,"@Override protected V getInternal(Data key){
  Object cached=nearCache.get(key);
  if (cached != null) {
    if (NULL_OBJECT == cached) {
      return null;
    }
    return (V)cached;
  }
  boolean marked=keyStateMarker.tryMark(key);
  V value=super.getInternal(key);
  if (marked) {
    tryToPutNearCache(key,value);
  }
  return value;
}","@Override protected V getInternal(Data key){
  Object cached=nearCache.get(key);
  if (cached != null) {
    if (NULL_OBJECT == cached) {
      return null;
    }
    return (V)cached;
  }
  boolean marked=keyStateMarker.tryMark(key);
  V value;
  try {
    value=super.getInternal(key);
    if (marked) {
      tryToPutNearCache(key,value);
    }
  }
 catch (  Throwable t) {
    resetToUnmarkedState(key);
    throw ExceptionUtil.rethrow(t);
  }
  return value;
}",0.84472049689441
46320,"@Override public ICompletableFuture<V> getAsyncInternal(final Data keyData){
  Object cached=nearCache.get(keyData);
  if (cached != null && NULL_OBJECT != cached) {
    return new CompletedFuture<V>(getContext().getSerializationService(),cached,getContext().getExecutionService().getAsyncExecutor());
  }
  final boolean marked=keyStateMarker.tryMark(keyData);
  ICompletableFuture<V> future=super.getAsyncInternal(keyData);
  ((ClientDelegatingFuture)future).andThenInternal(new ExecutionCallback<Data>(){
    @Override public void onResponse(    Data response){
      if (marked) {
        tryToPutNearCache(keyData,response);
      }
    }
    @Override public void onFailure(    Throwable t){
    }
  }
);
  return future;
}","@Override public ICompletableFuture<V> getAsyncInternal(final Data key){
  Object cached=nearCache.get(key);
  if (cached != null && NULL_OBJECT != cached) {
    return new CompletedFuture<V>(getContext().getSerializationService(),cached,getContext().getExecutionService().getAsyncExecutor());
  }
  final boolean marked=keyStateMarker.tryMark(key);
  ICompletableFuture<V> future;
  try {
    future=super.getAsyncInternal(key);
  }
 catch (  Throwable t) {
    resetToUnmarkedState(key);
    throw ExceptionUtil.rethrow(t);
  }
  ((ClientDelegatingFuture)future).andThenInternal(new ExecutionCallback<Data>(){
    @Override public void onResponse(    Data response){
      if (marked) {
        tryToPutNearCache(key,response);
      }
    }
    @Override public void onFailure(    Throwable t){
      if (marked) {
        resetToUnmarkedState(key);
      }
    }
  }
);
  return future;
}",0.8723010487353485
46321,"@Override protected List<MapGetAllCodec.ResponseParameters> getAllInternal(Map<Integer,List<Data>> pIdToKeyData,Map<K,V> result){
  Map<Data,Boolean> markers=EMPTY_MAP;
  for (  Entry<Integer,List<Data>> partitionKeyEntry : pIdToKeyData.entrySet()) {
    List<Data> keyList=partitionKeyEntry.getValue();
    Iterator<Data> iterator=keyList.iterator();
    while (iterator.hasNext()) {
      Data key=iterator.next();
      Object cached=nearCache.get(key);
      if (cached != null && NULL_OBJECT != cached) {
        result.put((K)toObject(key),(V)cached);
        iterator.remove();
      }
 else       if (invalidateOnChange) {
        if (markers == EMPTY_MAP) {
          markers=new HashMap<Data,Boolean>();
        }
        markers.put(key,keyStateMarker.tryMark(key));
      }
    }
  }
  List<MapGetAllCodec.ResponseParameters> responses=super.getAllInternal(pIdToKeyData,result);
  for (  MapGetAllCodec.ResponseParameters resultParameters : responses) {
    for (    Entry<Data,Data> entry : resultParameters.response) {
      Data key=entry.getKey();
      Data value=entry.getValue();
      Boolean marked=markers.get(key);
      if ((null != marked && marked)) {
        tryToPutNearCache(key,value);
      }
 else       if (!invalidateOnChange) {
        nearCache.put(key,value);
      }
    }
  }
  return responses;
}","@Override protected List<MapGetAllCodec.ResponseParameters> getAllInternal(Map<Integer,List<Data>> pIdToKeyData,Map<K,V> result){
  Map<Data,Boolean> markers=EMPTY_MAP;
  List<MapGetAllCodec.ResponseParameters> responses;
  try {
    for (    Entry<Integer,List<Data>> partitionKeyEntry : pIdToKeyData.entrySet()) {
      List<Data> keyList=partitionKeyEntry.getValue();
      Iterator<Data> iterator=keyList.iterator();
      while (iterator.hasNext()) {
        Data key=iterator.next();
        Object cached=nearCache.get(key);
        if (cached != null && NULL_OBJECT != cached) {
          result.put((K)toObject(key),(V)cached);
          iterator.remove();
        }
 else         if (invalidateOnChange) {
          if (markers == EMPTY_MAP) {
            markers=new HashMap<Data,Boolean>();
          }
          markers.put(key,keyStateMarker.tryMark(key));
        }
      }
    }
    responses=super.getAllInternal(pIdToKeyData,result);
    for (    MapGetAllCodec.ResponseParameters resultParameters : responses) {
      for (      Entry<Data,Data> entry : resultParameters.response) {
        Data key=entry.getKey();
        Data value=entry.getValue();
        Boolean marked=markers.remove(key);
        if ((null != marked && marked)) {
          tryToPutNearCache(key,value);
        }
 else         if (!invalidateOnChange) {
          nearCache.put(key,value);
        }
      }
    }
  }
  finally {
    unmarkRemainingMarkedKeys(markers);
  }
  return responses;
}",0.8301486199575372
46322,"private void tryToPutNearCache(Data key,Object response){
  try {
    nearCache.put(key,response);
  }
  finally {
    if (!keyStateMarker.tryUnmark(key)) {
      invalidateNearCache(key);
      keyStateMarker.forceUnmark(key);
    }
  }
}","private void tryToPutNearCache(Data key,Object response){
  try {
    nearCache.put(key,response);
  }
  finally {
    resetToUnmarkedState(key);
  }
}",0.7384615384615385
46323,"public ClientSubscriberContext(QueryCacheContext context){
  super(context);
  clientSubscriberContextSupport=new ClientSubscriberContextSupport();
}","public ClientSubscriberContext(QueryCacheContext context){
  super(context);
  clientSubscriberContextSupport=new ClientSubscriberContextSupport(context.getSerializationService());
}",0.9003021148036254
46324,"public ClientSubscriberContextSupport(){
}","public ClientSubscriberContextSupport(SerializationService serializationService){
  this.serializationService=serializationService;
}",0.48
46325,"private void createPublishAccumulatorWithIncludeValue(AccumulatorInfo info){
  Data data=context.getSerializationService().toData(info.getPredicate());
  ClientMessage request=EnterpriseMapPublisherCreateWithValueCodec.encodeRequest(info.getMapName(),info.getCacheName(),data,info.getBatchSize(),info.getBufferSize(),info.getDelaySeconds(),info.isPopulate(),info.isCoalesce());
  InvokerWrapper invokerWrapper=context.getInvokerWrapper();
  ClientMessage response=(ClientMessage)invokerWrapper.invoke(request);
  Collection<Map.Entry<Data,Data>> result=EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).entries;
  populateWithValues(queryCache,result);
}","private void createPublishAccumulatorWithIncludeValue(AccumulatorInfo info){
  Data data=context.getSerializationService().toData(info.getPredicate());
  ClientMessage request=EnterpriseMapPublisherCreateWithValueCodec.encodeRequest(info.getMapName(),info.getCacheName(),data,info.getBatchSize(),info.getBufferSize(),info.getDelaySeconds(),info.isPopulate(),info.isCoalesce());
  InvokerWrapper invokerWrapper=context.getInvokerWrapper();
  ClientMessage response=(ClientMessage)invokerWrapper.invoke(request);
  Collection<Map.Entry<Data,Data>> result=EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response;
  populateWithValues(queryCache,result);
}",0.9888475836431226
46326,"private void createPublishAccumulatorWithoutIncludeValue(AccumulatorInfo info){
  Data data=context.getSerializationService().toData(info.getPredicate());
  ClientMessage request=EnterpriseMapPublisherCreateCodec.encodeRequest(info.getMapName(),info.getCacheName(),data,info.getBatchSize(),info.getBufferSize(),info.getDelaySeconds(),info.isPopulate(),info.isCoalesce());
  InvokerWrapper invokerWrapper=context.getInvokerWrapper();
  ClientMessage response=(ClientMessage)invokerWrapper.invoke(request);
  Collection<Data> result=EnterpriseMapPublisherCreateCodec.decodeResponse(response).list;
  populateWithoutValues(queryCache,result);
}","private void createPublishAccumulatorWithoutIncludeValue(AccumulatorInfo info){
  Data data=context.getSerializationService().toData(info.getPredicate());
  ClientMessage request=EnterpriseMapPublisherCreateCodec.encodeRequest(info.getMapName(),info.getCacheName(),data,info.getBatchSize(),info.getBufferSize(),info.getDelaySeconds(),info.isPopulate(),info.isCoalesce());
  InvokerWrapper invokerWrapper=context.getInvokerWrapper();
  ClientMessage response=(ClientMessage)invokerWrapper.invoke(request);
  Collection<Data> result=EnterpriseMapPublisherCreateCodec.decodeResponse(response).response;
  populateWithoutValues(queryCache,result);
}",0.9906687402799378
46327,"@Override public ClientMessage encodeAddRequest(boolean localOnly){
  return CacheAddInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
}","@Override public ClientMessage encodeAddRequest(boolean localOnly){
  if (supportsRepairableNearCache()) {
    return CacheAddNearCacheInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
  }
  return CacheAddInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
}",0.6891891891891891
46328,"@Override public String decodeAddResponse(ClientMessage clientMessage){
  return CacheAddInvalidationListenerCodec.decodeResponse(clientMessage).response;
}","@Override public String decodeAddResponse(ClientMessage clientMessage){
  if (supportsRepairableNearCache()) {
    return CacheAddNearCacheInvalidationListenerCodec.decodeResponse(clientMessage).response;
  }
  return CacheAddInvalidationListenerCodec.decodeResponse(clientMessage).response;
}",0.6948775055679287
46329,"@Override public void handle(String name,Collection<Data> keys,Collection<String> sourceUuids,Collection<UUID> partitionUuids,Collection<Long> sequences){
  repairingHandler.handle(keys,sourceUuids,partitionUuids,sequences);
}","@Override public void handle(String name,Collection<Data> keys,Collection<String> sourceUuids,Collection<UUID> partitionUuids,Collection<Long> sequences){
  if (sourceUuids != null && !sourceUuids.isEmpty()) {
    Iterator<Data> keysIt=keys.iterator();
    Iterator<String> sourceUuidsIt=sourceUuids.iterator();
    while (keysIt.hasNext() && sourceUuidsIt.hasNext()) {
      Data key=keysIt.next();
      String sourceUuid=sourceUuidsIt.next();
      if (!clientUuid.equals(sourceUuid)) {
        nearCache.remove(key);
      }
    }
  }
 else {
    for (    Data key : keys) {
      nearCache.remove(key);
    }
  }
}",0.4023668639053254
46330,"private ListenerMessageCodec createInvalidationListenerCodec(){
  return new ListenerMessageCodec(){
    @Override public ClientMessage encodeAddRequest(    boolean localOnly){
      return CacheAddInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
    }
    @Override public String decodeAddResponse(    ClientMessage clientMessage){
      return CacheAddInvalidationListenerCodec.decodeResponse(clientMessage).response;
    }
    @Override public ClientMessage encodeRemoveRequest(    String realRegistrationId){
      return CacheRemoveEntryListenerCodec.encodeRequest(nameWithPrefix,realRegistrationId);
    }
    @Override public boolean decodeRemoveResponse(    ClientMessage clientMessage){
      return CacheRemoveEntryListenerCodec.decodeResponse(clientMessage).response;
    }
  }
;
}","private ListenerMessageCodec createInvalidationListenerCodec(){
  return new ListenerMessageCodec(){
    @Override public ClientMessage encodeAddRequest(    boolean localOnly){
      if (supportsRepairableNearCache()) {
        return CacheAddNearCacheInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
      }
      return CacheAddInvalidationListenerCodec.encodeRequest(nameWithPrefix,localOnly);
    }
    @Override public String decodeAddResponse(    ClientMessage clientMessage){
      if (supportsRepairableNearCache()) {
        return CacheAddNearCacheInvalidationListenerCodec.decodeResponse(clientMessage).response;
      }
      return CacheAddInvalidationListenerCodec.decodeResponse(clientMessage).response;
    }
    @Override public ClientMessage encodeRemoveRequest(    String realRegistrationId){
      return CacheRemoveEntryListenerCodec.encodeRequest(nameWithPrefix,realRegistrationId);
    }
    @Override public boolean decodeRemoveResponse(    ClientMessage clientMessage){
      return CacheRemoveEntryListenerCodec.decodeResponse(clientMessage).response;
    }
  }
;
}",0.8441896821261073
46331,"private void registerInvalidationListener(){
  if (nearCache == null || !nearCache.isInvalidatedOnChange()) {
    return;
  }
  int partitionCount=getContext().getPartitionService().getPartitionCount();
  nearCache=asInvalidationAware(nearCache,partitionCount);
  keyStateMarker=((InvalidationAwareWrapper)nearCache).getKeyStateMarker();
  RepairingTask repairingTask=clientContext.getRepairingTask(SERVICE_NAME);
  repairingHandler=repairingTask.registerAndGetHandler(nameWithPrefix,nearCache);
  EventHandler handler=new NearCacheRepairingHandlerAdapter();
  ListenerMessageCodec listenerCodec=createInvalidationListenerCodec();
  ClientListenerService listenerService=clientContext.getListenerService();
  nearCacheMembershipRegistrationId=listenerService.registerListener(listenerCodec,handler);
}","private void registerInvalidationListener(){
  if (nearCache == null || !nearCache.isInvalidatedOnChange()) {
    return;
  }
  int partitionCount=getContext().getPartitionService().getPartitionCount();
  nearCache=asInvalidationAware(nearCache,partitionCount);
  keyStateMarker=((InvalidationAwareWrapper)nearCache).getKeyStateMarker();
  ListenerMessageCodec listenerCodec=createInvalidationListenerCodec();
  ClientListenerService listenerService=clientContext.getListenerService();
  EventHandler eventHandler=createInvalidationEventHandler();
  nearCacheMembershipRegistrationId=listenerService.registerListener(listenerCodec,eventHandler);
}",0.643646408839779
46332,"Collection<Address> terminateNodes(int count) throws InterruptedException {
  List<HazelcastInstance> instances=new ArrayList<HazelcastInstance>(factory.getAllHazelcastInstances());
  assertThat(instances.size(),greaterThanOrEqualTo(count));
  Collections.shuffle(instances);
  if (count == 1) {
    HazelcastInstance hz=instances.get(0);
    Address address=getNode(hz).getThisAddress();
    TestUtil.terminateInstance(hz);
    return Collections.singleton(address);
  }
 else {
    final CountDownLatch latch=new CountDownLatch(count);
    Collection<Address> addresses=new HashSet<Address>();
    for (int i=0; i < count; i++) {
      final HazelcastInstance hz=instances.get(i);
      addresses.add(getNode(hz).getThisAddress());
      new Thread(){
        public void run(){
          TestUtil.terminateInstance(hz);
          latch.countDown();
        }
      }
.start();
    }
    assertTrue(latch.await(2,TimeUnit.MINUTES));
    return addresses;
  }
}","Collection<Address> terminateNodes(int count) throws InterruptedException {
  List<HazelcastInstance> instances=new ArrayList<HazelcastInstance>(factory.getAllHazelcastInstances());
  assertThat(instances.size(),greaterThanOrEqualTo(count));
  Collections.shuffle(instances);
  if (count == 1) {
    HazelcastInstance hz=instances.get(0);
    Address address=getNode(hz).getThisAddress();
    TestUtil.terminateInstance(hz);
    return Collections.singleton(address);
  }
 else {
    final CountDownLatch latch=new CountDownLatch(count);
    final Throwable[] error=new Throwable[1];
    Collection<Address> addresses=new HashSet<Address>();
    for (int i=0; i < count; i++) {
      final HazelcastInstance hz=instances.get(i);
      addresses.add(getNode(hz).getThisAddress());
      new Thread(){
        public void run(){
          try {
            TestUtil.terminateInstance(hz);
          }
 catch (          Throwable e) {
            error[0]=e;
          }
 finally {
            latch.countDown();
          }
        }
      }
.start();
    }
    assertTrue(latch.await(2,TimeUnit.MINUTES));
    if (error[0] != null) {
      ExceptionUtil.sneakyThrow(error[0]);
    }
    return addresses;
  }
}",0.8696453247351451
46333,"@Override public void stop(){
  logger.fine(""String_Node_Str"");
  live=false;
  final Member localMember=node.getLocalMember();
  final Address thisAddress=localMember.getAddress();
  for (  Address address : registry.getAddresses()) {
    if (address.equals(thisAddress)) {
      continue;
    }
    Node otherNode=registry.getNode(address);
    if (otherNode != null && otherNode.getState() != NodeState.SHUT_DOWN) {
      logger.fine(otherNode.getThisAddress() + ""String_Node_Str"");
      ILogger otherLogger=otherNode.getLogger(MockConnectionManager.class);
      otherLogger.fine(localMember + ""String_Node_Str"" + ""String_Node_Str"");
      ClusterServiceImpl clusterService=otherNode.getClusterService();
      clusterService.removeAddress(localMember.getAddress(),localMember.getUuid(),""String_Node_Str"" + localMember);
    }
  }
  for (  Connection connection : mapConnections.values()) {
    connection.close(null,null);
  }
}","@Override public void stop(){
  logger.fine(""String_Node_Str"");
  live=false;
  final Member localMember=node.getLocalMember();
  final Address thisAddress=localMember.getAddress();
  for (  Address address : registry.getAddresses()) {
    if (address.equals(thisAddress)) {
      continue;
    }
    Node otherNode=registry.getNode(address);
    if (otherNode != null && otherNode.getState() != NodeState.SHUT_DOWN) {
      logger.fine(otherNode.getThisAddress() + ""String_Node_Str"");
      ILogger otherLogger=otherNode.getLogger(MockConnectionManager.class);
      otherLogger.fine(localMember + ""String_Node_Str"" + ""String_Node_Str"");
      try {
        ClusterServiceImpl clusterService=otherNode.getClusterService();
        clusterService.removeAddress(localMember.getAddress(),localMember.getUuid(),""String_Node_Str"" + localMember);
      }
 catch (      Throwable e) {
        otherLogger.warning(""String_Node_Str"" + thisAddress,e);
      }
    }
  }
  for (  Connection connection : mapConnections.values()) {
    connection.close(null,null);
  }
}",0.9372804816859006
46334,"@Test(timeout=TimeoutInMillis.MINUTE) public void testIntegerSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(INTEGER);
  long expectation=Sums.sumValueContainer(values,INTEGER);
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.integerSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  long result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}","@Test(timeout=TimeoutInMillis.MINUTE) public void testIntegerSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(INTEGER);
  long expectation=Sums.sumValueContainer(values,INTEGER).intValue();
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.integerSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  long result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}",0.9893719806763284
46335,"@Test(timeout=TimeoutInMillis.MINUTE) public void testLongSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(LONG);
  long expectation=Sums.sumValueContainer(values,LONG);
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.longSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  long result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}","@Test(timeout=TimeoutInMillis.MINUTE) public void testLongSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(LONG);
  long expectation=Sums.sumValueContainer(values,LONG).longValue();
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.longSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  long result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}",0.9881422924901184
46336,"@Test(timeout=TimeoutInMillis.MINUTE) public void testFloatingPointSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(NUMBER);
  addValues(values,DOUBLE);
  double expectation=Sums.sumValueContainer(values,NUMBER);
  Aggregator<Double,ValueContainer,ValueContainer> aggregation=Aggregators.floatingPointSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(closeTo(expectation,ERROR)));
}","@Test(timeout=TimeoutInMillis.MINUTE) public void testFloatingPointSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(NUMBER);
  addValues(values,DOUBLE);
  double expectation=Sums.sumValueContainer(values,NUMBER).doubleValue();
  Aggregator<Double,ValueContainer,ValueContainer> aggregation=Aggregators.floatingPointSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(closeTo(expectation,ERROR)));
}",0.9876977152899824
46337,"@Test(timeout=TimeoutInMillis.MINUTE) public void testDoubleSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(DOUBLE);
  double expectation=Sums.sumValueContainer(values,DOUBLE);
  Aggregator<Double,ValueContainer,ValueContainer> aggregation=Aggregators.doubleSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}","@Test(timeout=TimeoutInMillis.MINUTE) public void testDoubleSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(DOUBLE);
  double expectation=Sums.sumValueContainer(values,DOUBLE).doubleValue();
  Aggregator<Double,ValueContainer,ValueContainer> aggregation=Aggregators.doubleSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}",0.9865642994241842
46338,"@Test(timeout=TimeoutInMillis.MINUTE) public void testFixedPointSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(NUMBER);
  addValues(values,BIG_INTEGER);
  double expectation=Sums.sumValueContainer(values,NUMBER);
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.fixedPointSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}","@Test(timeout=TimeoutInMillis.MINUTE) public void testFixedPointSum_withAttributePath(){
  List<ValueContainer> values=sampleValueContainers(NUMBER);
  addValues(values,BIG_INTEGER);
  double expectation=Sums.sumValueContainer(values,NUMBER).doubleValue();
  Aggregator<Long,ValueContainer,ValueContainer> aggregation=Aggregators.fixedPointSum(""String_Node_Str"");
  for (  ValueContainer value : values) {
    aggregation.accumulate(createExtractableEntryWithValue(value));
  }
  double result=aggregation.aggregate();
  assertThat(result,is(equalTo(expectation)));
}",0.9875
46339,"Collection<Address> terminateNodes(int count) throws InterruptedException {
  List<HazelcastInstance> instances=new ArrayList<HazelcastInstance>(factory.getAllHazelcastInstances());
  assertThat(instances.size(),greaterThanOrEqualTo(count));
  Collections.shuffle(instances);
  if (count == 1) {
    HazelcastInstance hz=instances.get(0);
    Address address=getNode(hz).getThisAddress();
    TestUtil.terminateInstance(hz);
    return Collections.singleton(address);
  }
 else {
    final CountDownLatch latch=new CountDownLatch(count);
    Collection<Address> addresses=new HashSet<Address>();
    for (int i=0; i < count; i++) {
      final HazelcastInstance hz=instances.get(i);
      addresses.add(getNode(hz).getThisAddress());
      new Thread(){
        public void run(){
          TestUtil.terminateInstance(hz);
          latch.countDown();
        }
      }
.start();
    }
    assertTrue(latch.await(2,TimeUnit.MINUTES));
    return addresses;
  }
}","Collection<Address> terminateNodes(int count) throws InterruptedException {
  List<HazelcastInstance> instances=new ArrayList<HazelcastInstance>(factory.getAllHazelcastInstances());
  assertThat(instances.size(),greaterThanOrEqualTo(count));
  Collections.shuffle(instances);
  if (count == 1) {
    HazelcastInstance hz=instances.get(0);
    Address address=getNode(hz).getThisAddress();
    TestUtil.terminateInstance(hz);
    return Collections.singleton(address);
  }
 else {
    final CountDownLatch latch=new CountDownLatch(count);
    final Throwable[] error=new Throwable[1];
    Collection<Address> addresses=new HashSet<Address>();
    for (int i=0; i < count; i++) {
      final HazelcastInstance hz=instances.get(i);
      addresses.add(getNode(hz).getThisAddress());
      new Thread(){
        public void run(){
          try {
            TestUtil.terminateInstance(hz);
          }
 catch (          Throwable e) {
            error[0]=e;
          }
 finally {
            latch.countDown();
          }
        }
      }
.start();
    }
    assertTrue(latch.await(2,TimeUnit.MINUTES));
    if (error[0] != null) {
      ExceptionUtil.sneakyThrow(error[0]);
    }
    return addresses;
  }
}",0.8696453247351451
46340,"@Override public void stop(){
  logger.fine(""String_Node_Str"");
  live=false;
  final Member localMember=node.getLocalMember();
  final Address thisAddress=localMember.getAddress();
  for (  Address address : registry.getAddresses()) {
    if (address.equals(thisAddress)) {
      continue;
    }
    Node otherNode=registry.getNode(address);
    if (otherNode != null && otherNode.getState() != NodeState.SHUT_DOWN) {
      logger.fine(otherNode.getThisAddress() + ""String_Node_Str"");
      ILogger otherLogger=otherNode.getLogger(MockConnectionManager.class);
      otherLogger.fine(localMember + ""String_Node_Str"" + ""String_Node_Str"");
      ClusterServiceImpl clusterService=otherNode.getClusterService();
      clusterService.removeAddress(localMember.getAddress(),localMember.getUuid(),""String_Node_Str"" + localMember);
    }
  }
  for (  Connection connection : mapConnections.values()) {
    connection.close(null,null);
  }
}","@Override public void stop(){
  logger.fine(""String_Node_Str"");
  live=false;
  final Member localMember=node.getLocalMember();
  final Address thisAddress=localMember.getAddress();
  for (  Address address : registry.getAddresses()) {
    if (address.equals(thisAddress)) {
      continue;
    }
    Node otherNode=registry.getNode(address);
    if (otherNode != null && otherNode.getState() != NodeState.SHUT_DOWN) {
      logger.fine(otherNode.getThisAddress() + ""String_Node_Str"");
      ILogger otherLogger=otherNode.getLogger(MockConnectionManager.class);
      otherLogger.fine(localMember + ""String_Node_Str"" + ""String_Node_Str"");
      try {
        ClusterServiceImpl clusterService=otherNode.getClusterService();
        clusterService.removeAddress(localMember.getAddress(),localMember.getUuid(),""String_Node_Str"" + localMember);
      }
 catch (      Throwable e) {
        otherLogger.warning(""String_Node_Str"" + thisAddress,e);
      }
    }
  }
  for (  Connection connection : mapConnections.values()) {
    connection.close(null,null);
  }
}",0.9372804816859006
46341,"@Override public void close(String reason,Throwable cause){
  if (!alive.compareAndSet(true,false)) {
    return;
  }
  closeCause=cause;
  closeReason=reason;
  closedTime=System.currentTimeMillis();
  String message=""String_Node_Str"" + getRemoteSocketAddress() + ""String_Node_Str"";
  if (cause != null) {
    message+=cause.getClass().getName() + '[' + cause.getMessage()+ ']';
  }
 else {
    message+=""String_Node_Str"";
  }
  try {
    innerClose();
  }
 catch (  Exception e) {
    logger.warning(e);
  }
  if (lifecycleService.isRunning()) {
    logger.warning(message);
  }
 else {
    logger.finest(message);
  }
  connectionManager.onClose(this);
  client.getMetricsRegistry().discardMetrics(this);
}","@Override public void close(String reason,Throwable cause){
  if (!alive.compareAndSet(true,false)) {
    return;
  }
  closeCause=cause;
  closeReason=reason;
  closedTime=System.currentTimeMillis();
  String message=""String_Node_Str"" + getRemoteSocketAddress() + ""String_Node_Str"";
  if (cause != null) {
    message+=cause.getClass().getName() + '[' + cause.getMessage()+ ']';
  }
 else {
    message+=""String_Node_Str"";
  }
  try {
    innerClose();
  }
 catch (  Exception e) {
    logger.warning(e);
  }
  if (lifecycleService.isRunning()) {
    logger.warning(message);
  }
 else {
    logger.finest(message);
  }
  connectionManager.onClose(this);
  client.getMetricsRegistry().discardMetrics(this);
  closed=true;
}",0.9895324494068388
46342,"@Before public void before(){
  factory=new TestHazelcastFactory();
  instances=factory.newInstances(new Config(),3);
  for (  HazelcastInstance instance : instances) {
    assertClusterSizeEventually(3,instance);
  }
  instance=instances[instances.length - 1];
}","@Before public void before(){
  factory=new TestHazelcastFactory();
  instances=factory.newInstances(new Config(),4);
  for (  HazelcastInstance instance : instances) {
    assertClusterSizeEventually(4,instance);
  }
  instance=instances[instances.length - 1];
}",0.9923954372623576
46343,"public long[] runningOperations(){
  return runningOperations;
}","@SuppressFBWarnings(""String_Node_Str"") public long[] runningOperations(){
  return runningOperations;
}",0.7664670658682635
46344,"public long[] operationsToCancel(){
  return operationsToCancel;
}","@SuppressFBWarnings(""String_Node_Str"") public long[] operationsToCancel(){
  return operationsToCancel;
}",0.7719298245614035
46345,"public OperationControl(long[] runningOperations,long[] operationsToCancel){
  this.runningOperations=runningOperations;
  this.operationsToCancel=operationsToCancel;
}","@SuppressFBWarnings(""String_Node_Str"") public OperationControl(long[] runningOperations,long[] operationsToCancel){
  this.runningOperations=runningOperations;
  this.operationsToCancel=operationsToCancel;
}",0.896
46346,"/** 
 * Init the ObjectDataInput for the given Data skipping the header-bytes, - in case of DataSerializable, it skips the first header byte, and then the class-name - in case of IdentifiedDataSerializable, it skips the first header byte, and then the factoryId and classId integer bytes
 * @param data data to initialize the ObjectDataInput with.
 * @return the initialized ObjectDataInput without the header.
 * @throws IOException
 */
public ObjectDataInput initDataSerializableInputAndSkipTheHeader(Data data) throws IOException {
  ObjectDataInput input=createObjectDataInput(data);
  byte header=input.readByte();
  if (header == IDENTIFIED_DATA_SERIALIZABLE_HEADER_VALUE) {
    input.skipBytes(FACTORY_AND_CLASS_ID_BYTE_LENGTH);
  }
 else   if (header == DATA_SERIALIZABLE_HEADER_VALUE) {
    input.readUTF();
  }
 else {
    throw new HazelcastSerializationException(""String_Node_Str"");
  }
  return input;
}","/** 
 * Init the ObjectDataInput for the given Data skipping the header-bytes, - in case of DataSerializable, it skips the first header byte, and then the class-name - in case of IdentifiedDataSerializable, it skips the first header byte, and then the factoryId and classId integer bytes
 * @param data data to initialize the ObjectDataInput with.
 * @return the initialized ObjectDataInput without the header.
 * @throws IOException
 */
public ObjectDataInput initDataSerializableInputAndSkipTheHeader(Data data) throws IOException {
  ObjectDataInput input=createObjectDataInput(data);
  byte header=input.readByte();
  if (header == IDENTIFIED_DATA_SERIALIZABLE_HEADER_VALUE) {
    if (input.skipBytes(FACTORY_AND_CLASS_ID_BYTE_LENGTH) != FACTORY_AND_CLASS_ID_BYTE_LENGTH) {
      throw new HazelcastSerializationException(""String_Node_Str"");
    }
  }
 else   if (header == DATA_SERIALIZABLE_HEADER_VALUE) {
    input.readUTF();
  }
 else {
    throw new HazelcastSerializationException(""String_Node_Str"");
  }
  return input;
}",0.9404517453798767
46347,"private void authenticated(Address target,ClientConnection connection){
  ClientConnection oldConnection=connections.put(connection.getRemoteEndpoint(),connection);
  if (oldConnection == null) {
    if (logger.isFinestEnabled()) {
      logger.finest(""String_Node_Str"" + connection + ""String_Node_Str"");
    }
    fireConnectionAddedEvent(connection);
  }
 else {
    if (logger.isFinestEnabled()) {
      logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ oldConnection+ ""String_Node_Str"");
      destroyConnection(oldConnection,""String_Node_Str"",null);
    }
  }
  connectionsInProgress.remove(target);
  logger.info(""String_Node_Str"" + connection.getRemoteEndpoint() + ""String_Node_Str""+ connection.getConnectedServerVersionString()+ ""String_Node_Str""+ connection.getLocalSocketAddress());
}","private void authenticated(Address target,ClientConnection connection){
  ClientConnection oldConnection=connections.put(addressTranslator.translate(connection.getRemoteEndpoint()),connection);
  if (oldConnection == null) {
    if (logger.isFinestEnabled()) {
      logger.finest(""String_Node_Str"" + connection + ""String_Node_Str"");
    }
    fireConnectionAddedEvent(connection);
  }
 else {
    if (logger.isFinestEnabled()) {
      logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ oldConnection+ ""String_Node_Str"");
      destroyConnection(oldConnection,""String_Node_Str"",null);
    }
  }
  connectionsInProgress.remove(target);
  logger.info(""String_Node_Str"" + connection.getRemoteEndpoint() + ""String_Node_Str""+ connection.getConnectedServerVersionString()+ ""String_Node_Str""+ connection.getLocalSocketAddress());
}",0.9824135839902972
46348,"@Override public Connection getOrConnect(Address address,boolean asOwner) throws IOException {
  try {
    while (true) {
      Connection connection=getConnection(address,asOwner);
      if (connection != null) {
        return connection;
      }
      AuthenticationFuture firstCallback=triggerConnect(address,asOwner);
      connection=firstCallback.get(connectionTimeout);
      if (!asOwner) {
        return connection;
      }
      if (firstCallback.authenticatedAsOwner) {
        return connection;
      }
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override public Connection getOrConnect(Address address,boolean asOwner) throws IOException {
  try {
    while (true) {
      Connection connection=getConnection(address,asOwner);
      if (connection != null) {
        return connection;
      }
      AuthenticationFuture firstCallback=triggerConnect(addressTranslator.translate(address),asOwner);
      connection=firstCallback.get(connectionTimeout);
      if (!asOwner) {
        return connection;
      }
      if (firstCallback.authenticatedAsOwner) {
        return connection;
      }
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9761709120788824
46349,"private Map<String,String> getLookupTable(){
  Map<String,String> table=privateToPublic;
  return table != null ? table : Collections.<String,String>emptyMap();
}","private Map<String,String> getLookupTable(){
  return privateToPublic;
}",0.5897435897435898
46350,"/** 
 * @param address
 * @return public address of network whose private address is given, if addressnot founds returns null.
 */
public Address translate(Address address){
  if (isInsideAws) {
    return address;
  }
  if (address == null) {
    return null;
  }
  String publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  refresh();
  publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  return null;
}","/** 
 * @param address
 * @return public address of network whose private address is given, if addressnot founds returns null.
 */
public Address translate(Address address){
  if (isInsideAws) {
    return address;
  }
  if (address == null) {
    return null;
  }
  String publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  if (privateToPublic.values().contains(address.getHost())) {
    return address;
  }
  refresh();
  publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  return null;
}",0.93343653250774
46351,"@Override protected AggregationResult reduce(Collection<AggregationResult> results){
  if (results.isEmpty()) {
    return EMPTY_AGGREGATION_RESULT;
  }
  AggregationResult combinedResult=null;
  try {
    for (    AggregationResult result : results) {
      if (combinedResult == null) {
        combinedResult=result;
      }
 else {
        combinedResult.combine(result);
      }
    }
  }
  finally {
    combinedResult.onCombineFinished();
  }
  return combinedResult;
}","@Override protected AggregationResult reduce(Collection<AggregationResult> results){
  if (results.isEmpty()) {
    return EMPTY_AGGREGATION_RESULT;
  }
  AggregationResult combinedResult=null;
  try {
    for (    AggregationResult result : results) {
      if (combinedResult == null) {
        combinedResult=result;
      }
 else {
        combinedResult.combine(result);
      }
    }
  }
  finally {
    if (combinedResult != null) {
      combinedResult.onCombineFinished();
    }
  }
  return combinedResult;
}",0.9577464788732394
46352,"public InternalPartitionImpl(int partitionId,PartitionListener listener,Address thisAddress,Address[] addresses){
  this(partitionId,listener,thisAddress);
  this.addresses=addresses;
}","@SuppressFBWarnings(""String_Node_Str"") public InternalPartitionImpl(int partitionId,PartitionListener listener,Address thisAddress,Address[] addresses){
  this(partitionId,listener,thisAddress);
  this.addresses=addresses;
}",0.904645476772616
46353,"private void monitor(String memberUuid,ClientEndpointImpl clientEndpoint){
  if (clientEndpoint.isFirstConnection() && ClientType.CPP.equals(clientEndpoint.getClientType())) {
    return;
  }
  final Connection connection=clientEndpoint.getConnection();
  final long lastTimePackageReceived=connection.lastReadTimeMillis();
  final long timeoutInMillis=SECONDS.toMillis(heartbeatTimeoutSeconds);
  final long currentTimeMillis=Clock.currentTimeMillis();
  if (lastTimePackageReceived + timeoutInMillis < currentTimeMillis) {
    if (memberUuid.equals(clientEndpoint.getPrincipal().getOwnerUuid())) {
      String message=""String_Node_Str"" + connection + ""String_Node_Str""+ timeToString(lastTimePackageReceived)+ ""String_Node_Str""+ timeToString(lastTimePackageReceived);
      logger.log(Level.WARNING,message);
      connection.close(message,null);
    }
  }
}","private void monitor(String memberUuid,ClientEndpointImpl clientEndpoint){
  if (clientEndpoint.isFirstConnection() && ClientType.CPP.equals(clientEndpoint.getClientType())) {
    return;
  }
  final Connection connection=clientEndpoint.getConnection();
  final long lastTimePacketReceived=connection.lastReadTimeMillis();
  final long timeoutInMillis=SECONDS.toMillis(heartbeatTimeoutSeconds);
  final long currentTimeMillis=Clock.currentTimeMillis();
  if (lastTimePacketReceived + timeoutInMillis < currentTimeMillis) {
    if (memberUuid.equals(clientEndpoint.getPrincipal().getOwnerUuid())) {
      String message=""String_Node_Str"" + connection + ""String_Node_Str""+ timeToString(currentTimeMillis)+ ""String_Node_Str""+ timeToString(lastTimePacketReceived);
      logger.log(Level.WARNING,message);
      connection.close(message,null);
    }
  }
}",0.967855055523086
46354,"private void reRegisterAll(){
  for (  ClientRegistrationKey key : registrations.keySet()) {
    logger.finest(""String_Node_Str"" + key + ""String_Node_Str"");
    deregister(key,getMemberUuids());
    try {
      register(key);
    }
 catch (    Exception e) {
      Map<Member,ClientEventRegistration> registrationMap=registrations.get(key);
      if (null == registrationMap) {
        registrations.put(key,new ConcurrentHashMap<Member,ClientEventRegistration>());
      }
      ExceptionUtil.rethrow(e);
    }
    logger.finest(""String_Node_Str"" + key + ""String_Node_Str"");
  }
}","private void reRegisterAll(){
  for (  Map.Entry<ClientRegistrationKey,Map<Member,ClientEventRegistration>> entry : registrations.entrySet()) {
    ClientRegistrationKey key=entry.getKey();
    logger.finest(""String_Node_Str"" + key + ""String_Node_Str"");
    deregister(key,getMemberUuids());
    try {
      register(key);
    }
 catch (    Exception e) {
      Map<Member,ClientEventRegistration> registrationMap=entry.getValue();
      if (null == registrationMap) {
        registrations.put(key,new ConcurrentHashMap<Member,ClientEventRegistration>());
      }
      ExceptionUtil.rethrow(e);
    }
    logger.finest(""String_Node_Str"" + key + ""String_Node_Str"");
  }
}",0.8491620111731844
46355,"protected Data serializeCacheConfig(Object response){
  if (null == response) {
    return nodeEngine.toData(response);
  }
  Data responseData=null;
  int clientVersion=getClientVersion();
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == clientVersion) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}","protected Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}",0.8607825295723385
46356,"protected Data serializeCacheConfig(Object response){
  if (null == response) {
    return nodeEngine.toData(response);
  }
  Data responseData=null;
  int clientVersion=getClientVersion();
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == clientVersion) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}","protected Data serializeCacheConfig(Object response){
  Data responseData=null;
  if (BuildInfo.UNKNOWN_HAZELCAST_VERSION == getClientVersion()) {
    boolean compatibilityEnabled=nodeEngine.getProperties().getBoolean(GroupProperty.COMPATIBILITY_3_6_CLIENT_ENABLED);
    if (compatibilityEnabled) {
      responseData=nodeEngine.toData(new LegacyCacheConfig((CacheConfig)response));
    }
  }
  if (null == responseData) {
    responseData=nodeEngine.toData(response);
  }
  return responseData;
}",0.8607825295723385
46357,"@Override protected void afterExecute(Runnable r,Throwable t){
  super.afterExecute(r,t);
  if (t == null && r instanceof ScheduledFuture && ((ScheduledFuture)r).isDone()) {
    try {
      ((Future)r).get();
    }
 catch (    CancellationException ce) {
      t=ce;
    }
catch (    ExecutionException e) {
      t=e.getCause();
    }
catch (    InterruptedException i) {
      t=i;
      currentThread().interrupt();
    }
  }
  if (t != null) {
    logger.severe(""String_Node_Str"" + r,t);
  }
}","@Override protected void afterExecute(Runnable runnable,Throwable throwable){
  super.afterExecute(runnable,throwable);
  if (throwable == null && runnable instanceof ScheduledFuture && ((ScheduledFuture)runnable).isDone()) {
    try {
      ((Future)runnable).get();
    }
 catch (    CancellationException ce) {
      throwable=ce;
    }
catch (    ExecutionException e) {
      throwable=e.getCause();
    }
catch (    InterruptedException i) {
      throwable=i;
      currentThread().interrupt();
    }
  }
  if (throwable != null) {
    logger.severe(""String_Node_Str"" + runnable,throwable);
  }
}",0.9036363636363636
46358,"public LoggingDelegatingFuture(Object task,RunnableScheduledFuture delegate){
  this.task=task;
  this.delegate=delegate;
}","LoggingDelegatingFuture(Object task,RunnableScheduledFuture<V> delegate){
  this.task=task;
  this.delegate=delegate;
}",0.9586776859504132
46359,"public Thread newThread(Runnable r){
  return new Thread(r);
}","@Override public Thread newThread(Runnable r){
  return new Thread(r);
}",0.9253731343283582
46360,"private void initOutputBuffer(TcpIpConnection connection,SocketWriter writer,String protocol){
  IOService ioService=connection.getConnectionManager().getIoService();
  int size=CLUSTER.equals(protocol) ? ioService.getSocketSendBufferSize() : ioService.getSocketClientReceiveBufferSize();
  ByteBuffer outputBuffer=newByteBuffer(size * KILO_BYTE,ioService.isSocketBufferDirect());
  if (CLUSTER.equals(protocol)) {
    outputBuffer.put(stringToBytes(CLUSTER));
  }
  writer.initOutputBuffer(outputBuffer);
  try {
    connection.setSendBufferSize(size);
  }
 catch (  SocketException e) {
    logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ size+ ""String_Node_Str"",e);
  }
}","private void initOutputBuffer(TcpIpConnection connection,SocketWriter writer,String protocol){
  IOService ioService=connection.getConnectionManager().getIoService();
  int sizeKb=CLUSTER.equals(protocol) ? ioService.getSocketSendBufferSize() : ioService.getSocketClientReceiveBufferSize();
  int size=KILO_BYTE * sizeKb;
  ByteBuffer outputBuffer=newByteBuffer(size,ioService.isSocketBufferDirect());
  if (CLUSTER.equals(protocol)) {
    outputBuffer.put(stringToBytes(CLUSTER));
  }
  writer.initOutputBuffer(outputBuffer);
  try {
    connection.setSendBufferSize(size);
  }
 catch (  SocketException e) {
    logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ size+ ""String_Node_Str"",e);
  }
}",0.9224199288256228
46361,"public static int calculateVersion(String version){
  if (null == version) {
    return UNKNOWN_HAZELCAST_VERSION;
  }
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (matcher.matches()) {
    try {
      int calculatedVersion=MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1)) + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));
      int groupCount=matcher.groupCount();
      if (groupCount >= PATCH_GROUP_COUNT) {
        String patchVersionString=matcher.group(PATCH_GROUP_COUNT);
        if (null != patchVersionString && !patchVersionString.startsWith(""String_Node_Str"")) {
          calculatedVersion+=Integer.valueOf(patchVersionString);
        }
      }
      return calculatedVersion;
    }
 catch (    Exception e) {
      Logger.getLogger(BuildInfo.class).warning(""String_Node_Str"" + version,e);
    }
  }
  return UNKNOWN_HAZELCAST_VERSION;
}","public static int calculateVersion(String version){
  if (null == version) {
    return UNKNOWN_HAZELCAST_VERSION;
  }
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (matcher.matches()) {
    try {
      int calculatedVersion=MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1)) + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));
      int groupCount=matcher.groupCount();
      if (groupCount >= PATCH_GROUP_COUNT) {
        String patchVersionString=matcher.group(PATCH_GROUP_COUNT);
        if (null != patchVersionString && !patchVersionString.startsWith(""String_Node_Str"")) {
          calculatedVersion+=Integer.parseInt(patchVersionString);
        }
      }
      return calculatedVersion;
    }
 catch (    Exception e) {
      Logger.getLogger(BuildInfo.class).warning(""String_Node_Str"" + version,e);
    }
  }
  return UNKNOWN_HAZELCAST_VERSION;
}",0.9747048903878583
46362,"private void initOutputBuffer(TcpIpConnection connection,SocketWriter writer,String protocol){
  IOService ioService=connection.getConnectionManager().getIoService();
  int size=CLUSTER.equals(protocol) ? ioService.getSocketSendBufferSize() : ioService.getSocketClientReceiveBufferSize();
  ByteBuffer outputBuffer=newByteBuffer(size * KILO_BYTE,ioService.isSocketBufferDirect());
  if (CLUSTER.equals(protocol)) {
    outputBuffer.put(stringToBytes(CLUSTER));
  }
  writer.initOutputBuffer(outputBuffer);
  try {
    connection.setSendBufferSize(size);
  }
 catch (  SocketException e) {
    logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ size+ ""String_Node_Str"",e);
  }
}","private void initOutputBuffer(TcpIpConnection connection,SocketWriter writer,String protocol){
  IOService ioService=connection.getConnectionManager().getIoService();
  int sizeKb=CLUSTER.equals(protocol) ? ioService.getSocketSendBufferSize() : ioService.getSocketClientReceiveBufferSize();
  int size=KILO_BYTE * sizeKb;
  ByteBuffer outputBuffer=newByteBuffer(size,ioService.isSocketBufferDirect());
  if (CLUSTER.equals(protocol)) {
    outputBuffer.put(stringToBytes(CLUSTER));
  }
  writer.initOutputBuffer(outputBuffer);
  try {
    connection.setSendBufferSize(size);
  }
 catch (  SocketException e) {
    logger.finest(""String_Node_Str"" + connection + ""String_Node_Str""+ size+ ""String_Node_Str"",e);
  }
}",0.9224199288256228
46363,"@Override public void onRead(ByteBuffer src) throws Exception {
  int messagesCreated=0;
  while (src.hasRemaining()) {
    final boolean complete=message.readFrom(src);
    if (!complete) {
      messageCounter.inc(messagesCreated);
    }
    if (message.isFlagSet(BEGIN_AND_END_FLAGS)) {
      handleMessage(message);
      message=ClientMessage.create();
      messagesCreated++;
      continue;
    }
    if (message.isFlagSet(BEGIN_FLAG)) {
      final BufferBuilder builder=new BufferBuilder();
      builderBySessionIdMap.put(message.getCorrelationId(),builder);
      builder.append(message.buffer(),0,message.getFrameLength());
    }
 else {
      final BufferBuilder builder=builderBySessionIdMap.get(message.getCorrelationId());
      if (builder.position() == 0) {
        throw new IllegalStateException();
      }
      builder.append(message.buffer(),message.getDataOffset(),message.getFrameLength() - message.getDataOffset());
      if (message.isFlagSet(END_FLAG)) {
        final int msgLength=builder.position();
        ClientMessage cm=ClientMessage.createForDecode(builder.buffer(),0);
        cm.setFrameLength(msgLength);
        handleMessage(cm);
        builderBySessionIdMap.remove(message.getCorrelationId());
      }
    }
    message=ClientMessage.create();
    messagesCreated++;
  }
}","@Override public void onRead(ByteBuffer src) throws Exception {
  int messagesCreated=0;
  while (src.hasRemaining()) {
    final boolean complete=message.readFrom(src);
    if (!complete) {
      messageCounter.inc(messagesCreated);
      return;
    }
    if (message.isFlagSet(BEGIN_AND_END_FLAGS)) {
      handleMessage(message);
      message=ClientMessage.create();
      messagesCreated++;
      continue;
    }
    if (message.isFlagSet(BEGIN_FLAG)) {
      final BufferBuilder builder=new BufferBuilder();
      builderBySessionIdMap.put(message.getCorrelationId(),builder);
      builder.append(message.buffer(),0,message.getFrameLength());
    }
 else {
      final BufferBuilder builder=builderBySessionIdMap.get(message.getCorrelationId());
      if (builder.position() == 0) {
        throw new IllegalStateException();
      }
      builder.append(message.buffer(),message.getDataOffset(),message.getFrameLength() - message.getDataOffset());
      if (message.isFlagSet(END_FLAG)) {
        final int msgLength=builder.position();
        ClientMessage cm=ClientMessage.createForDecode(builder.buffer(),0);
        cm.setFrameLength(msgLength);
        handleMessage(cm);
        builderBySessionIdMap.remove(message.getCorrelationId());
      }
    }
    message=ClientMessage.create();
    messagesCreated++;
  }
}",0.994712990936556
46364,"public static int calculateVersion(String version){
  if (null == version) {
    return UNKNOWN_HAZELCAST_VERSION;
  }
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (matcher.matches()) {
    try {
      int calculatedVersion=MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1)) + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));
      int groupCount=matcher.groupCount();
      if (groupCount >= PATCH_GROUP_COUNT) {
        String patchVersionString=matcher.group(PATCH_GROUP_COUNT);
        if (null != patchVersionString && !patchVersionString.startsWith(""String_Node_Str"")) {
          calculatedVersion+=Integer.valueOf(patchVersionString);
        }
      }
      return calculatedVersion;
    }
 catch (    Exception e) {
      Logger.getLogger(BuildInfo.class).warning(""String_Node_Str"" + version,e);
    }
  }
  return UNKNOWN_HAZELCAST_VERSION;
}","public static int calculateVersion(String version){
  if (null == version) {
    return UNKNOWN_HAZELCAST_VERSION;
  }
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (matcher.matches()) {
    try {
      int calculatedVersion=MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1)) + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));
      int groupCount=matcher.groupCount();
      if (groupCount >= PATCH_GROUP_COUNT) {
        String patchVersionString=matcher.group(PATCH_GROUP_COUNT);
        if (null != patchVersionString && !patchVersionString.startsWith(""String_Node_Str"")) {
          calculatedVersion+=Integer.parseInt(patchVersionString);
        }
      }
      return calculatedVersion;
    }
 catch (    Exception e) {
      Logger.getLogger(BuildInfo.class).warning(""String_Node_Str"" + version,e);
    }
  }
  return UNKNOWN_HAZELCAST_VERSION;
}",0.9747048903878583
46365,"@Test public void testConfigurationWithFileName() throws Exception {
  File file=createTempFile(""String_Node_Str"",""String_Node_Str"");
  file.deleteOnExit();
  String xml=HAZELCAST_START_TAG + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ HAZELCAST_END_TAG;
  Writer writer=new PrintWriter(file,""String_Node_Str"");
  writer.write(xml);
  writer.close();
  Config config=new XmlConfigBuilder(file.getAbsolutePath()).build();
  assertEquals(file,config.getConfigurationFile());
}","@Test public void testConfigurationWithFileName() throws Exception {
  File file=createTempFile(""String_Node_Str"",""String_Node_Str"");
  file.deleteOnExit();
  String xml=HAZELCAST_START_TAG + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ HAZELCAST_END_TAG;
  Writer writer=new PrintWriter(file,""String_Node_Str"");
  writer.write(xml);
  writer.close();
  String path=file.getAbsolutePath();
  Config config=new XmlConfigBuilder(path).build();
  assertEquals(path,config.getConfigurationFile().getAbsolutePath());
}",0.9144486692015208
46366,"@SuppressWarnings(""String_Node_Str"") public void store(long sequence,Data value){
  final Object actualValue;
  if (isBinaryFormat()) {
    actualValue=Arrays.copyOf(value.toByteArray(),value.totalSize());
  }
 else {
    actualValue=serializationService.toObject(value);
  }
  store.store(sequence,actualValue);
}","@Override @SuppressWarnings(""String_Node_Str"") public void store(long sequence,Data value){
  final Object actualValue;
  if (isBinaryFormat()) {
    actualValue=Arrays.copyOf(value.toByteArray(),value.totalSize());
  }
 else {
    actualValue=serializationService.toObject(value);
  }
  store.store(sequence,actualValue);
}",0.9843260188087776
46367,"private RingbufferContainer clone(RingbufferContainer original){
  BufferObjectDataOutput out=serializationService.createObjectDataOutput(100000);
  BufferObjectDataInput in=null;
  try {
    original.writeData(out);
    byte[] bytes=out.toByteArray();
    sleepMillis(CLOCK_DIFFERENCE_MS);
    RingbufferContainer clone=new RingbufferContainer(original.name);
    in=serializationService.createObjectDataInput(bytes);
    clone.readData(in);
    return clone;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    closeResource(out);
    closeResource(in);
  }
}","private RingbufferContainer clone(RingbufferContainer original){
  BufferObjectDataOutput out=serializationService.createObjectDataOutput(100000);
  BufferObjectDataInput in=null;
  try {
    original.writeData(out);
    byte[] bytes=out.toByteArray();
    sleepMillis(CLOCK_DIFFERENCE_MS);
    RingbufferContainer clone=new RingbufferContainer(original.getName());
    in=serializationService.createObjectDataInput(bytes);
    clone.readData(in);
    return clone;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    closeResource(out);
    closeResource(in);
  }
}",0.9941324392288348
46368,"public QueueItem poll(){
  QueueItem item=peek();
  if (item == null) {
    return null;
  }
  if (store.isEnabled()) {
    try {
      store.delete(item.getItemId());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  getItemQueue().poll();
  age(item,Clock.currentTimeMillis());
  scheduleEvictionIfEmpty();
  return item;
}","/** 
 * Retrieves and removes the head of the queue (in other words, the first item), or returns   {@code null} if it is empty.Also calls the queue store for item deletion by item ID.
 * @return the first item in the queue
 */
public QueueItem poll(){
  final QueueItem item=peek();
  if (item == null) {
    return null;
  }
  if (store.isEnabled()) {
    try {
      store.delete(item.getItemId());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  getItemQueue().poll();
  age(item,Clock.currentTimeMillis());
  scheduleEvictionIfEmpty();
  return item;
}",0.750788643533123
46369,"private void addTxItemOrdered(TxQueueItem txQueueItem){
  ListIterator<QueueItem> iterator=((List)getItemQueue()).listIterator();
  while (iterator.hasNext()) {
    QueueItem queueItem=iterator.next();
    if (txQueueItem.itemId < queueItem.itemId) {
      iterator.previous();
      break;
    }
  }
  iterator.add(txQueueItem);
}","@SuppressWarnings(""String_Node_Str"") private void addTxItemOrdered(TxQueueItem txQueueItem){
  final ListIterator<QueueItem> iterator=((List<QueueItem>)getItemQueue()).listIterator();
  while (iterator.hasNext()) {
    final QueueItem queueItem=iterator.next();
    if (txQueueItem.itemId < queueItem.itemId) {
      iterator.previous();
      break;
    }
  }
  iterator.add(txQueueItem);
}",0.9168975069252078
46370,"public boolean hasEnoughCapacity(int delta){
  return (getItemQueue().size() + delta) <= config.getMaxSize();
}","/** 
 * Returns if this queue can accommodate for   {@code delta} items.
 * @param delta the number of items that should be stored in the queue
 * @return if the queue has enough capacity for the items
 */
public boolean hasEnoughCapacity(int delta){
  return (getItemQueue().size() + delta) <= config.getMaxSize();
}",0.5186915887850467
46371,"/** 
 * This method does not trigger store load.
 */
public boolean contains(Collection<Data> dataSet){
  for (  Data data : dataSet) {
    boolean contains=false;
    for (    QueueItem item : getItemQueue()) {
      if (item.getData() != null && item.getData().equals(data)) {
        contains=true;
        break;
      }
    }
    if (!contains) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks if the queue contains all items in the dataSet. This method does not trigger store load.
 * @param dataSet the items which should be stored in the queue
 * @return true if the queue contains all items, false otherwise
 */
public boolean contains(Collection<Data> dataSet){
  for (  Data data : dataSet) {
    boolean contains=false;
    for (    QueueItem item : getItemQueue()) {
      if (item.getData() != null && item.getData().equals(data)) {
        contains=true;
        break;
      }
    }
    if (!contains) {
      return false;
    }
  }
  return true;
}",0.8122448979591836
46372,"public Map<Long,Data> drain(int maxSize){
  int maxSizeParam=maxSize;
  if (maxSizeParam < 0 || maxSizeParam > getItemQueue().size()) {
    maxSizeParam=getItemQueue().size();
  }
  LinkedHashMap<Long,Data> map=new LinkedHashMap<Long,Data>(maxSizeParam);
  mapDrainIterator(maxSizeParam,map);
  if (store.isEnabled() && maxSizeParam != 0) {
    try {
      store.deleteAll(map.keySet());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  long current=Clock.currentTimeMillis();
  for (int i=0; i < maxSizeParam; i++) {
    QueueItem item=getItemQueue().poll();
    age(item,current);
  }
  if (maxSizeParam != 0) {
    scheduleEvictionIfEmpty();
  }
  return map;
}","/** 
 * Removes items from the queue and the queue store (if configured), up to   {@code maxSize} or the size of the queue,whichever is smaller. Also schedules the queue for destruction if it is empty or destroys it immediately if it is empty and  {@link QueueConfig#getEmptyQueueTtl()} is 0.
 * @param maxSize the maximum number of items to be removed
 * @return the map of IDs and removed (drained) items
 */
public Map<Long,Data> drain(int maxSize){
  int maxSizeParam=maxSize;
  if (maxSizeParam < 0 || maxSizeParam > getItemQueue().size()) {
    maxSizeParam=getItemQueue().size();
  }
  final LinkedHashMap<Long,Data> map=new LinkedHashMap<Long,Data>(maxSizeParam);
  mapDrainIterator(maxSizeParam,map);
  if (store.isEnabled() && maxSizeParam != 0) {
    try {
      store.deleteAll(map.keySet());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  long current=Clock.currentTimeMillis();
  for (int i=0; i < maxSizeParam; i++) {
    final QueueItem item=getItemQueue().poll();
    age(item,current);
  }
  if (maxSizeParam != 0) {
    scheduleEvictionIfEmpty();
  }
  return map;
}",0.7677100494233937
46373,"/** 
 * Tries to load the data for the given queue item. The method will also try to load data in batches. To do so, it will check the item ID's in the item queue and load up to   {@link QueueStoreWrapper#getBulkLoad()} items. If the{@link QueueStoreWrapper#getBulkLoad()} is 1, it will just load data for the given item. Otherwise, it will load itemsfor other items in the queue too by collecting the IDs of the items in the queue sequentially. This method could mistakenly not load the data for the given parameter if it is located after the  {@link QueueStoreWrapper#getBulkLoad()}item in the queue.
 * @param item the item for which the data is being set
 * @throws Exception if there is any exception. For example, when calling methods on the queue store
 */
private void load(QueueItem item) throws Exception {
  int bulkLoad=store.getBulkLoad();
  bulkLoad=Math.min(getItemQueue().size(),bulkLoad);
  if (bulkLoad == 1) {
    item.setData(store.load(item.getItemId()));
  }
 else   if (bulkLoad > 1) {
    Iterator<QueueItem> iter=getItemQueue().iterator();
    HashSet<Long> keySet=new HashSet<Long>(bulkLoad);
    for (int i=0; i < bulkLoad; i++) {
      keySet.add(iter.next().getItemId());
    }
    Map<Long,Data> values=store.loadAll(keySet);
    dataMap.putAll(values);
    item.setData(getDataFromMap(item.getItemId()));
  }
}","/** 
 * Tries to load the data for the given queue item. The method will also try to load data in batches if configured to do so. <p> If the   {@link QueueStoreWrapper#getBulkLoad()} is 1, it will just load data for the given item. Otherwise, it willload items for other items in the queue too by collecting the IDs of the items in the queue sequentially up to {@link QueueStoreWrapper#getBulkLoad()} items. While doing so, it will make sure that the ID of the initially requesteditem is also being loaded even though it is not amongst the first  {@link QueueStoreWrapper#getBulkLoad()} items in thequeue.
 * @param item the item for which the data is being set
 * @throws Exception if there is any exception. For example, when calling methods on the queue store
 */
private void load(QueueItem item) throws Exception {
  int bulkLoad=store.getBulkLoad();
  bulkLoad=Math.min(getItemQueue().size(),bulkLoad);
  if (bulkLoad == 1) {
    item.setData(store.load(item.getItemId()));
  }
 else   if (bulkLoad > 1) {
    final Iterator<QueueItem> iter=getItemQueue().iterator();
    final HashSet<Long> keySet=new HashSet<Long>(bulkLoad);
    keySet.add(item.getItemId());
    while (keySet.size() < bulkLoad) {
      keySet.add(iter.next().getItemId());
    }
    final Map<Long,Data> values=store.loadAll(keySet);
    dataMap.putAll(values);
    item.setData(getDataFromMap(item.getItemId()));
  }
}",0.6949214468396054
46374,"private void scheduleEvictionIfEmpty(){
  final int emptyQueueTtl=config.getEmptyQueueTtl();
  if (emptyQueueTtl < 0) {
    return;
  }
  if (getItemQueue().isEmpty() && txMap.isEmpty() && !isEvictionScheduled) {
    if (emptyQueueTtl == 0) {
      nodeEngine.getProxyService().destroyDistributedObject(QueueService.SERVICE_NAME,name);
    }
 else     if (emptyQueueTtl > 0) {
      service.scheduleEviction(name,TimeUnit.SECONDS.toMillis(emptyQueueTtl));
      isEvictionScheduled=true;
    }
  }
}","/** 
 * Schedules the queue for destruction if the queue is empty. Destroys the queue immediately the queue is empty and the  {@link QueueConfig#getEmptyQueueTtl()} is 0. Upon scheduled execution, the queue will be checked if it is still empty.
 */
private void scheduleEvictionIfEmpty(){
  final int emptyQueueTtl=config.getEmptyQueueTtl();
  if (emptyQueueTtl < 0) {
    return;
  }
  if (getItemQueue().isEmpty() && txMap.isEmpty() && !isEvictionScheduled) {
    if (emptyQueueTtl == 0) {
      nodeEngine.getProxyService().destroyDistributedObject(QueueService.SERVICE_NAME,name);
    }
 else     if (emptyQueueTtl > 0) {
      service.scheduleEviction(name,TimeUnit.SECONDS.toMillis(emptyQueueTtl));
      isEvictionScheduled=true;
    }
  }
}",0.8003207698476343
46375,"public QueueItem peek(){
  QueueItem item=getItemQueue().peek();
  if (item == null) {
    return null;
  }
  if (store.isEnabled() && item.getData() == null) {
    try {
      load(item);
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  return item;
}","/** 
 * Retrieves, but does not remove, the head of this queue, or returns   {@code null} if this queue is empty.Loads the data from the queue store if the item data is empty.
 * @return the first item in the queue
 */
public QueueItem peek(){
  final QueueItem item=getItemQueue().peek();
  if (item == null) {
    return null;
  }
  if (store.isEnabled() && item.getData() == null) {
    try {
      load(item);
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  return item;
}",0.7133917396745932
46376,"public void mapIterateAndRemove(Map map){
  if (map.size() <= 0) {
    return;
  }
  if (store.isEnabled()) {
    try {
      store.deleteAll(map.keySet());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  Iterator<QueueItem> iter=getItemQueue().iterator();
  while (iter.hasNext()) {
    QueueItem item=iter.next();
    if (map.containsKey(item.getItemId())) {
      iter.remove();
      age(item,Clock.currentTimeMillis());
    }
  }
  scheduleEvictionIfEmpty();
}","/** 
 * Deletes items from the queue which have IDs contained in the key set of the given map. Also schedules the queue for destruction if it is empty or destroys it immediately if it is empty and   {@link QueueConfig#getEmptyQueueTtl()} is 0.
 * @param map the map of items which to be removed.
 */
public void mapIterateAndRemove(Map<Long,Data> map){
  if (map.size() <= 0) {
    return;
  }
  if (store.isEnabled()) {
    try {
      store.deleteAll(map.keySet());
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  final Iterator<QueueItem> iter=getItemQueue().iterator();
  while (iter.hasNext()) {
    final QueueItem item=iter.next();
    if (map.containsKey(item.getItemId())) {
      iter.remove();
      age(item,Clock.currentTimeMillis());
    }
  }
  scheduleEvictionIfEmpty();
}",0.7471698113207547
46377,"public Map<Long,Data> addAll(Collection<Data> dataList){
  Map<Long,Data> map=new HashMap<Long,Data>(dataList.size());
  List<QueueItem> list=new ArrayList<QueueItem>(dataList.size());
  for (  Data data : dataList) {
    QueueItem item=new QueueItem(this,nextId(),null);
    if (!store.isEnabled() || store.getMemoryLimit() > getItemQueue().size()) {
      item.setData(data);
    }
    map.put(item.getItemId(),data);
    list.add(item);
  }
  if (store.isEnabled() && !map.isEmpty()) {
    try {
      store.storeAll(map);
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  if (!list.isEmpty()) {
    getItemQueue().addAll(list);
    cancelEvictionIfExists();
  }
  return map;
}","/** 
 * Adds all items from the   {@code dataList} to the queue. The data will be stored in the queue store if configured andenabled. If the store is enabled, only  {@link QueueStoreWrapper#getMemoryLimit()} item data will be stored in memory.Cancels the eviction if one is scheduled.
 * @param dataList the items to be added to the queue and stored in the queue store
 * @return map of item ID and items added
 */
public Map<Long,Data> addAll(Collection<Data> dataList){
  final Map<Long,Data> map=new HashMap<Long,Data>(dataList.size());
  final List<QueueItem> list=new ArrayList<QueueItem>(dataList.size());
  for (  Data data : dataList) {
    final QueueItem item=new QueueItem(this,nextId(),null);
    if (!store.isEnabled() || store.getMemoryLimit() > getItemQueue().size()) {
      item.setData(data);
    }
    map.put(item.getItemId(),data);
    list.add(item);
  }
  if (store.isEnabled() && !map.isEmpty()) {
    try {
      store.storeAll(map);
    }
 catch (    Exception e) {
      throw new HazelcastException(e);
    }
  }
  if (!list.isEmpty()) {
    getItemQueue().addAll(list);
    cancelEvictionIfExists();
  }
  return map;
}",0.7675791733762748
46378,"/** 
 * This method triggers store load
 */
public Map<Long,Data> compareAndRemove(Collection<Data> dataList,boolean retain){
  LinkedHashMap<Long,Data> map=new LinkedHashMap<Long,Data>();
  for (  QueueItem item : getItemQueue()) {
    if (item.getData() == null && store.isEnabled()) {
      try {
        load(item);
      }
 catch (      Exception e) {
        throw new HazelcastException(e);
      }
    }
    boolean contains=dataList.contains(item.getData());
    if ((retain && !contains) || (!retain && contains)) {
      map.put(item.getItemId(),item.getData());
    }
  }
  mapIterateAndRemove(map);
  return map;
}","/** 
 * Compares if the queue contains the items in the dataList and removes them according to the retain parameter. If the retain parameter is true, it will remove items which are not in the dataList (retaining the items which are in the list). If the retain parameter is false, it will remove items which are in the dataList (retaining all other items which are not in the list). Note : this method will trigger store load.
 * @param dataList the list of items which are to be retained in the queue or which are to be removed from the queue
 * @param retain does the method retain the items in the list (true) or remove them from the queue (false)
 * @return map of removed items by id
 */
public Map<Long,Data> compareAndRemove(Collection<Data> dataList,boolean retain){
  final LinkedHashMap<Long,Data> map=new LinkedHashMap<Long,Data>();
  for (  QueueItem item : getItemQueue()) {
    if (item.getData() == null && store.isEnabled()) {
      try {
        load(item);
      }
 catch (      Exception e) {
        throw new HazelcastException(e);
      }
    }
    boolean contains=dataList.contains(item.getData());
    if ((retain && !contains) || (!retain && contains)) {
      map.put(item.getItemId(),item.getData());
    }
  }
  mapIterateAndRemove(map);
  return map;
}",0.6341719077568134
46379,"/** 
 * This method triggers store load.
 */
public List<Data> getAsDataList(){
  List<Data> dataList=new ArrayList<Data>(getItemQueue().size());
  for (  QueueItem item : getItemQueue()) {
    if (store.isEnabled() && item.getData() == null) {
      try {
        load(item);
      }
 catch (      Exception e) {
        throw new HazelcastException(e);
      }
    }
    dataList.add(item.getData());
  }
  return dataList;
}","/** 
 * Returns data in the queue. This method triggers store load.
 * @return the item data in the queue.
 */
public List<Data> getAsDataList(){
  final List<Data> dataList=new ArrayList<Data>(getItemQueue().size());
  for (  QueueItem item : getItemQueue()) {
    if (store.isEnabled() && item.getData() == null) {
      try {
        load(item);
      }
 catch (      Exception e) {
        throw new HazelcastException(e);
      }
    }
    dataList.add(item.getData());
  }
  return dataList;
}",0.9222462203023758
46380,"@Override public void close(){
  ioThread.addTaskAndWakeup(new Runnable(){
    @Override public void run(){
      try {
        socketChannel.closeInbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
    }
  }
);
}","@Override public void close(){
  ioThread.addTaskAndWakeup(new Runnable(){
    @Override public void run(){
      if (ioThread != Thread.currentThread()) {
        ioThread.addTaskAndWakeup(this);
        return;
      }
      try {
        socketChannel.closeInbound();
      }
 catch (      IOException e) {
        logger.finest(""String_Node_Str"",e);
      }
    }
  }
);
}",0.8231611893583725
46381,"@Override public Connection getOrConnect(Address address,boolean asOwner) throws IOException {
  try {
    while (true) {
      Connection connection=getConnection(address,asOwner);
      if (connection != null) {
        return connection;
      }
      AuthenticationFuture firstCallback=triggerConnect(address,asOwner);
      connection=firstCallback.get(connectionTimeout);
      if (!asOwner) {
        return connection;
      }
      if (firstCallback.authenticatedAsOwner) {
        return connection;
      }
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
}","@Override public Connection getOrConnect(Address address,boolean asOwner) throws IOException {
  try {
    while (true) {
      Connection connection=getConnection(address,asOwner);
      if (connection != null) {
        return connection;
      }
      AuthenticationFuture firstCallback=triggerConnect(addressTranslator.translate(address),asOwner);
      connection=firstCallback.get(connectionTimeout);
      if (!asOwner) {
        return connection;
      }
      if (firstCallback.authenticatedAsOwner) {
        return connection;
      }
    }
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9761709120788824
46382,"private Map<String,String> getLookupTable(){
  Map<String,String> table=privateToPublic;
  return table != null ? table : Collections.<String,String>emptyMap();
}","private Map<String,String> getLookupTable(){
  return privateToPublic;
}",0.5897435897435898
46383,"/** 
 * @param address
 * @return public address of network whose private address is given, if addressnot founds returns null.
 */
public Address translate(Address address){
  if (isInsideAws) {
    return address;
  }
  if (address == null) {
    return null;
  }
  String publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  refresh();
  publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  return null;
}","/** 
 * @param address
 * @return public address of network whose private address is given, if addressnot founds returns null.
 */
public Address translate(Address address){
  if (isInsideAws) {
    return address;
  }
  if (address == null) {
    return null;
  }
  String publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  if (privateToPublic.values().contains(address.getHost())) {
    return address;
  }
  refresh();
  publicAddress=getLookupTable().get(address.getHost());
  if (publicAddress != null) {
    return constructPrivateAddress(publicAddress,address);
  }
  return null;
}",0.93343653250774
46384,"@Test public void testConnection(){
  HazelcastInstance instance=hzFactory.newHazelcastClient();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      clean();
      plugin.run(logWriter);
      assertContains(""String_Node_Str"");
    }
  }
);
  instance.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      clean();
      plugin.run(logWriter);
      assertContains(""String_Node_Str"");
    }
  }
);
}","@Test public void testConnection(){
  HazelcastInstance instance=hzFactory.newHazelcastClient();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"");
    }
  }
);
  instance.shutdown();
  assertTrueEventually(new AssertTask(){
    @Override public void run() throws Exception {
      plugin.run(logWriter);
      assertContains(""String_Node_Str"");
    }
  }
);
}",0.9691358024691358
46385,"@Before public void setUp(){
  setLoggingLog4j();
  Config config=new Config();
  config.setProperty(LOG_PARTITIONS.getName(),""String_Node_Str"");
  hzFactory=new TestHazelcastFactory();
  HazelcastInstance hz=hzFactory.newHazelcastInstance(config);
  plugin=new SystemLogPlugin(getNodeEngineImpl(hz));
  plugin.onStart();
}","@Before public void setUp(){
  Config config=new Config();
  config.setProperty(LOG_PARTITIONS.getName(),""String_Node_Str"");
  hzFactory=new TestHazelcastFactory();
  HazelcastInstance hz=hzFactory.newHazelcastInstance(config);
  plugin=new SystemLogPlugin(getNodeEngineImpl(hz));
  plugin.onStart();
}",0.9664
46386,"@Override public void run() throws Exception {
  clean();
  plugin.run(logWriter);
  assertContains(""String_Node_Str"");
}","@Override public void run() throws Exception {
  plugin.run(logWriter);
  assertContains(""String_Node_Str"");
}",0.9523809523809524
46387,"private void renderPlugin(DiagnosticsPlugin plugin) throws IOException {
  logWriter.clean();
  plugin.run(logWriter);
  int desiredLength=charBuff.length;
  int actualSize=logWriter.length();
  while (desiredLength < actualSize) {
    desiredLength*=2;
  }
  if (desiredLength != charBuff.length) {
    charBuff=new char[desiredLength];
  }
  logWriter.copyInto(charBuff);
  bufferedWriter.write(charBuff,0,actualSize);
  fileLength+=actualSize;
}","private void renderPlugin(DiagnosticsPlugin plugin) throws IOException {
  logWriter.init(printWriter);
  plugin.run(logWriter);
}",0.3979238754325259
46388,"private BufferedWriter newWriter() throws FileNotFoundException {
  FileOutputStream fos=new FileOutputStream(file,true);
  CharsetEncoder encoder=Charset.forName(""String_Node_Str"").newEncoder();
  return new BufferedWriter(new OutputStreamWriter(fos,encoder));
}","private PrintWriter newWriter() throws FileNotFoundException {
  FileOutputStream fos=new FileOutputStream(file,true);
  CharsetEncoder encoder=Charset.forName(""String_Node_Str"").newEncoder();
  return new PrintWriter(new BufferedWriter(new OutputStreamWriter(fos,encoder),Short.MAX_VALUE));
}",0.9172661870503596
46389,"@SuppressFBWarnings(""String_Node_Str"") private void rollover(){
  closeResource(bufferedWriter);
  bufferedWriter=null;
  file=null;
  fileLength=0;
  index++;
  File file=new File(format(fileName,index - maxRollingFileCount));
  file.delete();
}","@SuppressFBWarnings(""String_Node_Str"") private void rollover(){
  closeResource(printWriter);
  printWriter=null;
  file=null;
  index++;
  File file=new File(format(fileName,index - maxRollingFileCount));
  file.delete();
}",0.9106382978723404
46390,"public void write(DiagnosticsPlugin plugin){
  try {
    if (file == null) {
      file=new File(diagnostics.directory,format(fileName,index));
      bufferedWriter=newWriter();
      renderStaticPlugins();
    }
    renderPlugin(plugin);
    bufferedWriter.flush();
    if (fileLength >= maxRollingFileSizeBytes) {
      rollover();
    }
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + file.getAbsolutePath(),e);
    file=null;
    closeResource(bufferedWriter);
    bufferedWriter=null;
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + file,e);
  }
}","public void write(DiagnosticsPlugin plugin){
  try {
    if (file == null) {
      file=new File(diagnostics.directory,format(fileName,index));
      printWriter=newWriter();
      renderStaticPlugins();
    }
    renderPlugin(plugin);
    printWriter.flush();
    if (file.length() >= maxRollingFileSizeBytes) {
      rollover();
    }
  }
 catch (  IOException e) {
    logger.warning(""String_Node_Str"" + file.getAbsolutePath(),e);
    file=null;
    closeResource(printWriter);
    printWriter=null;
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + file,e);
  }
}",0.9521410579345088
46391,"protected void appendDateTime(){
  date.setTime(System.currentTimeMillis());
  calendar.setTime(date);
  appendDate();
  sb.append(' ');
  appendTime();
}","protected void appendDateTime(){
  date.setTime(System.currentTimeMillis());
  calendar.setTime(date);
  appendDate();
  write(' ');
  appendTime();
}",0.9605263157894736
46392,"private void appendDate(){
  sb.append(calendar.get(DAY_OF_MONTH));
  sb.append('-');
  sb.append(calendar.get(MONTH));
  sb.append('-');
  sb.append(calendar.get(YEAR));
}","private void appendDate(){
  write(calendar.get(DAY_OF_MONTH));
  write('-');
  write(calendar.get(MONTH));
  write('-');
  write(calendar.get(YEAR));
}",0.8148148148148148
46393,"@SuppressWarnings(""String_Node_Str"") private void appendTime(){
  int hour=calendar.get(HOUR_OF_DAY);
  if (hour < 10) {
    sb.append('0');
  }
  sb.append(hour);
  sb.append(':');
  int minute=calendar.get(MINUTE);
  if (minute < 10) {
    sb.append('0');
  }
  sb.append(minute);
  sb.append(':');
  int second=calendar.get(SECOND);
  if (second < 10) {
    sb.append('0');
  }
  sb.append(second);
}","@SuppressWarnings(""String_Node_Str"") private void appendTime(){
  int hour=calendar.get(HOUR_OF_DAY);
  if (hour < 10) {
    write('0');
  }
  write(hour);
  write(':');
  int minute=calendar.get(MINUTE);
  if (minute < 10) {
    write('0');
  }
  write(minute);
  write(':');
  int second=calendar.get(SECOND);
  if (second < 10) {
    write('0');
  }
  write(second);
}",0.8552971576227391
46394,"@SuppressWarnings(""String_Node_Str"") void writeLong(long value){
  if (value == Long.MIN_VALUE) {
    sb.append(STR_LONG_MIN_VALUE);
    return;
  }
  if (value < 0) {
    sb.append('-');
    value=-value;
  }
  int digitsWithoutComma=0;
  tmpSb.setLength(0);
  do {
    digitsWithoutComma++;
    if (digitsWithoutComma == 4) {
      tmpSb.append(',');
      digitsWithoutComma=1;
    }
    int mod=(int)(value % 10);
    tmpSb.append(DIGITS[mod]);
    value=value / 10;
  }
 while (value > 0);
  for (int k=tmpSb.length() - 1; k >= 0; k--) {
    char c=tmpSb.charAt(k);
    sb.append(c);
  }
}","@SuppressWarnings(""String_Node_Str"") void writeLong(long value){
  if (value == Long.MIN_VALUE) {
    write(STR_LONG_MIN_VALUE);
    return;
  }
  if (value < 0) {
    write('-');
    value=-value;
  }
  int digitsWithoutComma=0;
  tmpSb.setLength(0);
  do {
    digitsWithoutComma++;
    if (digitsWithoutComma == 4) {
      tmpSb.append(',');
      digitsWithoutComma=1;
    }
    int mod=(int)(value % 10);
    tmpSb.append(DIGITS[mod]);
    value=value / 10;
  }
 while (value > 0);
  for (int k=tmpSb.length() - 1; k >= 0; k--) {
    char c=tmpSb.charAt(k);
    write(c);
  }
}",0.9642857142857144
46395,"@Override public void writeKeyValueEntry(String key,boolean value){
  writeKeyValueHead(key);
  sb.append(value);
}","@Override public void writeKeyValueEntry(String key,boolean value){
  writeKeyValueHead(key);
  write(value);
}",0.9469026548672568
46396,"@Override public void endSection(){
  sb.append(']');
  sectionLevel--;
  if (sectionLevel == -1) {
    sb.append(LINE_SEPARATOR);
  }
}","@Override public void endSection(){
  write(']');
  sectionLevel--;
  if (sectionLevel == -1) {
    write(LINE_SEPARATOR);
  }
}",0.9090909090909092
46397,"@Override public void writeEntry(String s){
  sb.append(INDENTS[sectionLevel]);
  sb.append(s);
}","@Override public void writeEntry(String s){
  write(INDENTS[sectionLevel]);
  write(s);
}",0.8709677419354839
46398,"private void writeKeyValueHead(String key){
  sb.append(INDENTS[sectionLevel]);
  sb.append(key);
  sb.append('=');
}","private void writeKeyValueHead(String key){
  write(INDENTS[sectionLevel]);
  write(key);
  write('=');
}",0.8378378378378378
46399,"@Override public void startSection(String name){
  if (sectionLevel == -1) {
    appendDateTime();
    sb.append(' ');
  }
  if (sectionLevel >= 0) {
    sb.append(INDENTS[sectionLevel]);
  }
  sb.append(name);
  sb.append('[');
  sectionLevel++;
}","@Override public void startSection(String name){
  if (sectionLevel == -1) {
    appendDateTime();
    write(' ');
  }
  if (sectionLevel >= 0) {
    write(INDENTS[sectionLevel]);
  }
  write(name);
  write('[');
  sectionLevel++;
}",0.8833333333333333
46400,"@Override public void populate(LiveOperations liveOperations){
  for (  Queue<WaitingOperation> queue : mapWaitingOps.values()) {
    for (    WaitingOperation op : queue) {
      liveOperations.add(op.getCallerAddress(),op.getCallId());
    }
  }
}","@Override public void populate(LiveOperations liveOperations){
  for (  Queue<WaitingOperation> queue : mapWaitingOps.values()) {
    for (    WaitingOperation waitingOperation : queue) {
      Operation operation=waitingOperation.getOperation();
      liveOperations.add(operation.getCallerAddress(),operation.getCallId());
    }
  }
}",0.7726495726495727
46401,"@Override public void populate(LiveOperations liveOperations){
  for (  Queue<ParkedOperation> parkQueue : parkQueueMap.values()) {
    for (    ParkedOperation op : parkQueue) {
      liveOperations.add(op.getCallerAddress(),op.getCallId());
    }
  }
}","@Override public void populate(LiveOperations liveOperations){
  for (  Queue<ParkedOperation> parkQueue : parkQueueMap.values()) {
    for (    ParkedOperation parkedOperation : parkQueue) {
      Operation operation=parkedOperation.getOperation();
      liveOperations.add(operation.getCallerAddress(),operation.getCallId());
    }
  }
}",0.7790893760539629
46402,"@SuppressWarnings(""String_Node_Str"") public ExpirationManager(PartitionContainer[] partitionContainers,NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.partitionContainers=partitionContainers;
  this.thisAddress=nodeEngine.getThisAddress();
  this.partitionService=nodeEngine.getPartitionService();
  this.executionService=nodeEngine.getExecutionService();
  this.operationService=(InternalOperationService)nodeEngine.getOperationService();
  this.partitionCount=partitionService.getPartitionCount();
  this.taskPeriodSeconds=getInteger(SYS_PROP_EXPIRATION_TASK_PERIOD_SECONDS,DEFAULT_EXPIRATION_TASK_PERIOD_SECONDS);
  checkPositive(taskPeriodSeconds,""String_Node_Str"");
  this.cleanupPercentage=getInteger(SYS_PROP_EXPIRATION_CLEANUP_PERCENTAGE,DEFAULT_EXPIRATION_CLEANUP_PERCENTAGE);
  checkTrue(cleanupPercentage > 0 && cleanupPercentage <= 100,""String_Node_Str"");
  int defaultCleanupOpCount=calculateCleanupOperationCount(partitionCount,operationService.getPartitionThreadCount());
  this.cleanupOperationCount=getInteger(SYS_PROP_EXPIRATION_CLEANUP_OPERATION_COUNT,defaultCleanupOpCount);
  checkPositive(cleanupOperationCount,""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") @SuppressFBWarnings({""String_Node_Str""}) public ExpirationManager(PartitionContainer[] partitionContainers,NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.partitionContainers=partitionContainers;
  this.thisAddress=nodeEngine.getThisAddress();
  this.partitionService=nodeEngine.getPartitionService();
  this.executionService=nodeEngine.getExecutionService();
  this.operationService=(InternalOperationService)nodeEngine.getOperationService();
  this.partitionCount=partitionService.getPartitionCount();
  this.taskPeriodSeconds=getInteger(SYS_PROP_EXPIRATION_TASK_PERIOD_SECONDS,DEFAULT_EXPIRATION_TASK_PERIOD_SECONDS);
  checkPositive(taskPeriodSeconds,""String_Node_Str"");
  this.cleanupPercentage=getInteger(SYS_PROP_EXPIRATION_CLEANUP_PERCENTAGE,DEFAULT_EXPIRATION_CLEANUP_PERCENTAGE);
  checkTrue(cleanupPercentage > 0 && cleanupPercentage <= 100,""String_Node_Str"");
  int defaultCleanupOpCount=calculateCleanupOperationCount(partitionCount,operationService.getPartitionThreadCount());
  this.cleanupOperationCount=getInteger(SYS_PROP_EXPIRATION_CLEANUP_OPERATION_COUNT,defaultCleanupOpCount);
  checkPositive(cleanupOperationCount,""String_Node_Str"");
}",0.9827368421052632
46403,"private int getInteger(String propertyName,int defaultValue){
  Config config=nodeEngine.getConfig();
  String property=config.getProperty(propertyName);
  return property == null ? defaultValue : valueOf(property);
}","private int getInteger(String propertyName,int defaultValue){
  Config config=nodeEngine.getConfig();
  String property=config.getProperty(propertyName);
  return property == null ? defaultValue : parseInt(property);
}",0.9655172413793104
46404,"private NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}","protected NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}",0.95
46405,"/** 
 * There is a time-window in that an ""is Near Cache evictable?"" check may return   {@code false}, although the Near Cache size is bigger than the configured Near Cache max-size. This can happen because eviction process is offloaded to a different thread and there is no synchronization between the thread that puts the entry to the Near Cache and the thread which sweeps the entries from the Near Cache. This method continuously triggers the eviction to bring the Near Cache size under the configured max-size. Only needed for testing purposes.
 */
private void triggerNearCacheEviction(IMap<Integer,Integer> map){
  populateMap(map,1);
  pullEntriesToNearCache(map,1);
}","/** 
 * There is a time-window in that an ""is Near Cache evictable?"" check may return   {@code false}, although the Near Cache size is bigger than the configured Near Cache max-size. This can happen because eviction process is offloaded to a different thread and there is no synchronization between the thread that puts the entry to the Near Cache and the thread which sweeps the entries from the Near Cache. This method continuously triggers the eviction to bring the Near Cache size under the configured max-size. Only needed for testing purposes.
 */
protected void triggerNearCacheEviction(IMap<Integer,Integer> map){
  populateMap(map,1);
  pullEntriesToNearCache(map,1);
}",0.9911373707533236
46406,"private void pullEntriesToNearCache(IMap<Integer,Integer> map,int mapSize){
  for (int i=0; i < mapSize; i++) {
    map.get(i);
  }
}","protected void pullEntriesToNearCache(IMap<Integer,Integer> map,int mapSize){
  for (int i=0; i < mapSize; i++) {
    map.get(i);
  }
}",0.9701492537313432
46407,"private NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}","protected NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}",0.95
46408,"private ClientConfig getClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=getNearCacheConfig(mapName);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}","protected ClientConfig getClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=getNearCacheConfig(mapName);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}",0.975206611570248
46409,"private void populateNearCache(IMap<Integer,Integer> map,int size){
  for (int i=0; i < size; i++) {
    map.put(i,i);
  }
  for (int i=0; i < size; i++) {
    map.get(i);
  }
}","protected void populateNearCache(IMap<Integer,Integer> map,int size){
  for (int i=0; i < size; i++) {
    map.put(i,i);
  }
  for (int i=0; i < size; i++) {
    map.get(i);
  }
}",0.9775280898876404
46410,"private <K,V>IMap<K,V> getNearCachedMapFromClient(Config config,NearCacheConfig nearCacheConfig){
  String mapName=randomMapName();
  hazelcastFactory.newHazelcastInstance(config);
  nearCacheConfig.setName(mapName + ""String_Node_Str"");
  ClientConfig clientConfig=newClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  return client.getMap(mapName);
}","protected <K,V>IMap<K,V> getNearCachedMapFromClient(Config config,NearCacheConfig nearCacheConfig){
  String mapName=randomMapName();
  hazelcastFactory.newHazelcastInstance(config);
  nearCacheConfig.setName(mapName + ""String_Node_Str"");
  ClientConfig clientConfig=newClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  HazelcastInstance client=hazelcastFactory.newHazelcastClient(clientConfig);
  return client.getMap(mapName);
}",0.9866369710467706
46411,"private void assertThatOwnedEntryCountIsSmallerThan(IMap<Integer,Integer> clientMap,long expected){
  long ownedEntryCount=getOwnedEntryCount(clientMap);
  assertTrue(format(""String_Node_Str"",expected,ownedEntryCount),ownedEntryCount < expected);
}","protected void assertThatOwnedEntryCountIsSmallerThan(IMap<Integer,Integer> clientMap,long expected){
  long ownedEntryCount=getOwnedEntryCount(clientMap);
  assertTrue(format(""String_Node_Str"",expected,ownedEntryCount),ownedEntryCount < expected);
}",0.9759036144578314
46412,"private NearCacheConfig newNoInvalidationNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
  nearCacheConfig.setInvalidateOnChange(false);
  return nearCacheConfig;
}","protected NearCacheConfig newNoInvalidationNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInMemoryFormat(InMemoryFormat.OBJECT);
  nearCacheConfig.setInvalidateOnChange(false);
  return nearCacheConfig;
}",0.9761904761904762
46413,"private NearCacheConfig newInvalidationEnabledNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  return nearCacheConfig;
}","protected NearCacheConfig newInvalidationEnabledNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  return nearCacheConfig;
}",0.979591836734694
46414,"private NearCacheConfig newInvalidationAndCacheLocalEntriesEnabledNearCacheConfig(String name){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  nearCacheConfig.setName(name);
  return nearCacheConfig;
}","protected NearCacheConfig newInvalidationAndCacheLocalEntriesEnabledNearCacheConfig(String name){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  nearCacheConfig.setName(name);
  return nearCacheConfig;
}",0.9803921568627452
46415,"private ClientConfig newClientConfig(){
  return new ClientConfig();
}","protected ClientConfig newClientConfig(){
  return new ClientConfig();
}",0.943661971830986
46416,"private NearCacheConfig newTTLNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(false);
  nearCacheConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  return nearCacheConfig;
}","protected NearCacheConfig newTTLNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(false);
  nearCacheConfig.setTimeToLiveSeconds(MAX_TTL_SECONDS);
  return nearCacheConfig;
}",0.9747899159663864
46417,"private NearCacheConfig newMaxIdleSecondsNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(false);
  nearCacheConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  return nearCacheConfig;
}","protected NearCacheConfig newMaxIdleSecondsNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(false);
  nearCacheConfig.setMaxIdleSeconds(MAX_IDLE_SECONDS);
  return nearCacheConfig;
}",0.9757085020242916
46418,"private NearCacheConfig newLFUMaxSizeNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}","protected NearCacheConfig newLFUMaxSizeNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}",0.9792387543252596
46419,"private void assertThatOwnedEntryCountEquals(IMap<Integer,Integer> clientMap,long expected){
  long ownedEntryCount=getOwnedEntryCount(clientMap);
  assertEquals(expected,ownedEntryCount);
}","protected void assertThatOwnedEntryCountEquals(IMap<Integer,Integer> clientMap,long expected){
  long ownedEntryCount=getOwnedEntryCount(clientMap);
  assertEquals(expected,ownedEntryCount);
}",0.9790575916230366
46420,"private NearCacheConfig newMaxSizeNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setInvalidateOnChange(false);
  return nearCacheConfig;
}","protected NearCacheConfig newMaxSizeNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setInvalidateOnChange(false);
  return nearCacheConfig;
}",0.974025974025974
46421,"private void assertNearCacheInvalidation_whenMaxSizeExceeded(NearCacheConfig config){
  final IMap<Integer,Integer> map=getNearCachedMapFromClient(config);
  populateNearCache(map,MAX_CACHE_SIZE);
  triggerEviction(map);
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertThatOwnedEntryCountIsSmallerThan(map,MAX_CACHE_SIZE);
    }
  }
);
}","protected void assertNearCacheInvalidation_whenMaxSizeExceeded(NearCacheConfig config){
  final IMap<Integer,Integer> map=getNearCachedMapFromClient(config);
  populateNearCache(map,MAX_CACHE_SIZE);
  triggerEviction(map);
  assertTrueEventually(new AssertTask(){
    @Override public void run(){
      assertThatOwnedEntryCountIsSmallerThan(map,MAX_CACHE_SIZE);
    }
  }
);
}",0.9840425531914894
46422,"private Config newConfig(){
  Config config=new Config();
  config.setProperty(MAP_INVALIDATION_MESSAGE_BATCH_ENABLED.getName(),String.valueOf(batchInvalidationEnabled));
  return config;
}","protected Config newConfig(){
  Config config=new Config();
  config.setProperty(MAP_INVALIDATION_MESSAGE_BATCH_ENABLED.getName(),String.valueOf(batchInvalidationEnabled));
  return config;
}",0.9789473684210528
46423,"private NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}","protected NearCacheConfig newNearCacheConfig(){
  return new NearCacheConfig();
}",0.95
46424,"private HazelcastInstance getClient(TestHazelcastFactory testHazelcastFactory,NearCacheConfig nearCacheConfig){
  ClientConfig clientConfig=newClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return testHazelcastFactory.newHazelcastClient(clientConfig);
}","protected HazelcastInstance getClient(TestHazelcastFactory testHazelcastFactory,NearCacheConfig nearCacheConfig){
  ClientConfig clientConfig=newClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return testHazelcastFactory.newHazelcastClient(clientConfig);
}",0.9783393501805054
46425,"private NearCacheConfig newNoneNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}","protected NearCacheConfig newNoneNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}",0.978798586572438
46426,"private void triggerEviction(IMap<Integer,Integer> map){
  map.put(0,0);
}","protected void triggerEviction(IMap<Integer,Integer> map){
  map.put(0,0);
}",0.9466666666666668
46427,"private NearCacheConfig newLRUMaxSizeConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}","protected NearCacheConfig newLRUMaxSizeConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}",0.9785714285714284
46428,"private long getOwnedEntryCount(IMap<Integer,Integer> map){
  NearCacheStats stats=map.getLocalMapStats().getNearCacheStats();
  return stats.getOwnedEntryCount();
}","protected long getOwnedEntryCount(IMap<Integer,Integer> map){
  NearCacheStats stats=map.getLocalMapStats().getNearCacheStats();
  return stats.getOwnedEntryCount();
}",0.9759036144578314
46429,"private NearCacheConfig newRandomNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}","protected NearCacheConfig newRandomNearCacheConfig(){
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setMaxSize(MAX_CACHE_SIZE);
  nearCacheConfig.setEvictionPolicy(""String_Node_Str"");
  return nearCacheConfig;
}",0.9789473684210528
46430,"private ClientConfig newClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  nearCacheConfig.setInMemoryFormat(getNearCacheInMemoryFormat());
  nearCacheConfig.setName(mapName);
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}","protected ClientConfig newClientConfig(String mapName){
  NearCacheConfig nearCacheConfig=new NearCacheConfig();
  nearCacheConfig.setInMemoryFormat(getNearCacheInMemoryFormat());
  nearCacheConfig.setName(mapName);
  nearCacheConfig.setInvalidateOnChange(true);
  nearCacheConfig.setCacheLocalEntries(true);
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  return clientConfig;
}",0.9861111111111112
46431,"public static NodeExtension create(Node node){
  try {
    ClassLoader classLoader=node.getConfigClassLoader();
    Iterator<Class<NodeExtension>> iter=ServiceLoader.classIterator(FACTORY_ID,classLoader);
    while (iter.hasNext()) {
      Class<NodeExtension> clazz=iter.next();
      if (!(clazz.equals(DefaultNodeExtension.class))) {
        if (clazz.getName().equals(DefaultNodeExtension.class.getName())) {
          node.nodeEngine.getLogger(NodeExtensionFactory.class).warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
        Constructor<NodeExtension> constructor=clazz.getDeclaredConstructor(new Class[]{Node.class});
        return constructor.newInstance(node);
      }
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DefaultNodeExtension(node);
}","public static NodeExtension create(Node node){
  try {
    ClassLoader classLoader=node.getConfigClassLoader();
    Iterator<Class<NodeExtension>> iter=ServiceLoader.classIterator(FACTORY_ID,classLoader);
    while (iter.hasNext()) {
      Class<NodeExtension> clazz=iter.next();
      if (!(clazz.equals(DefaultNodeExtension.class))) {
        if (clazz.getName().equals(DefaultNodeExtension.class.getName())) {
          Logger.getLogger(NodeExtensionFactory.class).warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
        Constructor<NodeExtension> constructor=clazz.getDeclaredConstructor(new Class[]{Node.class});
        return constructor.newInstance(node);
      }
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DefaultNodeExtension(node);
}",0.9872495446265938
46432,"public static NodeExtension create(Node node){
  try {
    ClassLoader classLoader=node.getConfigClassLoader();
    Iterator<Class<NodeExtension>> iter=ServiceLoader.classIterator(FACTORY_ID,classLoader);
    while (iter.hasNext()) {
      Class<NodeExtension> clazz=iter.next();
      if (!(clazz.equals(DefaultNodeExtension.class))) {
        if (clazz.getName().equals(DefaultNodeExtension.class.getName())) {
          node.nodeEngine.getLogger(NodeExtensionFactory.class).warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
        Constructor<NodeExtension> constructor=clazz.getDeclaredConstructor(new Class[]{Node.class});
        return constructor.newInstance(node);
      }
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DefaultNodeExtension(node);
}","public static NodeExtension create(Node node){
  try {
    ClassLoader classLoader=node.getConfigClassLoader();
    Iterator<Class<NodeExtension>> iter=ServiceLoader.classIterator(FACTORY_ID,classLoader);
    while (iter.hasNext()) {
      Class<NodeExtension> clazz=iter.next();
      if (!(clazz.equals(DefaultNodeExtension.class))) {
        if (clazz.getName().equals(DefaultNodeExtension.class.getName())) {
          Logger.getLogger(NodeExtensionFactory.class).warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
        }
        Constructor<NodeExtension> constructor=clazz.getDeclaredConstructor(new Class[]{Node.class});
        return constructor.newInstance(node);
      }
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new DefaultNodeExtension(node);
}",0.9872495446265938
46433,"private void initializeAndProcessMessage() throws Throwable {
  if (!node.joined()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}","private void initializeAndProcessMessage() throws Throwable {
  if (!node.getNodeExtension().isStartCompleted()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}",0.8373879641485276
46434,"private void initializeAndProcessMessage() throws Throwable {
  if (!node.joined()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}","private void initializeAndProcessMessage() throws Throwable {
  if (!node.getNodeExtension().isStartCompleted()) {
    throw new HazelcastInstanceNotActiveException(""String_Node_Str"");
  }
  parameters=decodeClientMessage(clientMessage);
  Credentials credentials=endpoint.getCredentials();
  interceptBefore(credentials);
  checkPermissions(endpoint);
  processMessage();
  interceptAfter(credentials);
}",0.8373879641485276
46435,"private Map<Integer,List<Data>> getPartitionIdToKeysMap(){
  if (isEmpty(keySet)) {
    return Collections.emptyMap();
  }
  Map<Integer,List<Data>> partitionToKeys=new Int2ObjectHashMap<List<Data>>();
  for (  Data key : keySet) {
    int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
    List<Data> keyList=partitionToKeys.get(partitionId);
    if (keyList == null) {
      keyList=new ArrayList<Data>();
      partitionToKeys.put(partitionId,keyList);
    }
    keyList.add(key);
  }
  return partitionToKeys;
}","private Map<Integer,List<Data>> getPartitionIdToKeysMap(Set<Data> keys,InternalPartitionService partitionService){
  if (isEmpty(keys)) {
    return Collections.emptyMap();
  }
  Map<Integer,List<Data>> partitionToKeys=new Int2ObjectHashMap<List<Data>>();
  for (  Data key : keys) {
    int partitionId=partitionService.getPartitionId(key);
    List<Data> keyList=partitionToKeys.get(partitionId);
    if (keyList == null) {
      keyList=new ArrayList<Data>();
      partitionToKeys.put(partitionId,keyList);
    }
    keyList.add(key);
  }
  return partitionToKeys;
}",0.8677536231884058
46436,"@Override public Operation createPartitionOperation(int partition){
  if (hasIndex) {
    List<Data> keys=partitionIdToKeys.get(partition);
    InflatableSet<Data> keySet=InflatableSet.newBuilder(keys).build();
    return new MultipleEntryWithPredicateOperation(name,keySet,entryProcessor,predicate);
  }
  return createOperation();
}","@Override public Operation createPartitionOperation(int partition){
  if (isNullOrEmpty(partitionIdToKeysMap)) {
    return new PartitionWideEntryWithPredicateOperation(name,entryProcessor,predicate);
  }
  List<Data> keyList=partitionIdToKeysMap.get(partition);
  InflatableSet<Data> keys=newBuilder(keyList).build();
  return new MultipleEntryWithPredicateOperation(name,keys,entryProcessor,predicate);
}",0.7108108108108108
46437,"/** 
 * Created operations by this factory will be run on these partitions. Return null to preserve  default behaviour.
 * @return null to preserve default behaviour or return all partition-ids for the operations of this factory.
 */
int[] getPartitions();","/** 
 * This method will be called on operation runner node. Created operations by this factory will be run on the partitions returned by this method. Returning null means operations will be run provided partitions by default.
 * @return null to preserve default behaviour or return relevant partition-ids for the operations of this factory.
 */
@SuppressFBWarnings(""String_Node_Str"") public int[] getPartitions(){
  return partitions;
}",0.4329004329004329
46438,"/** 
 * Create a partition-operation for the supplied partition-id
 * @param partition id of partition
 * @return new operation
 */
Operation createPartitionOperation(int partition);","/** 
 * This method can be called both caller and runner nodes. Creates a partition-operation for supplied partition-id
 * @param partition id of partition
 * @return created partition-operation
 */
public abstract Operation createPartitionOperation(int partition);",0.7785234899328859
46439,"private Object[] executePartitionAwareOperations(PartitionAwareOperationFactory partitionAwareFactory){
  partitionAwareFactory.init(getNodeEngine());
  NodeEngine nodeEngine=getNodeEngine();
  int[] operationFactoryPartitions=partitionAwareFactory.getPartitions();
  partitions=operationFactoryPartitions == null ? partitions : operationFactoryPartitions;
  Object[] responses=new Object[partitions.length];
  for (int i=0; i < partitions.length; i++) {
    ResponseQueue responseQueue=new ResponseQueue();
    responses[i]=responseQueue;
    int partition=partitions[i];
    Operation operation=partitionAwareFactory.createPartitionOperation(partition);
    operation.setNodeEngine(nodeEngine).setPartitionId(partition).setReplicaIndex(getReplicaIndex()).setOperationResponseHandler(responseQueue).setServiceName(getServiceName()).setService(getService()).setCallerUuid(extractCallerUuid());
    OperationAccessor.setCallerAddress(operation,getCallerAddress());
    nodeEngine.getOperationService().execute(operation);
  }
  return responses;
}","private Object[] executePartitionAwareOperations(PartitionAwareOperationFactory givenFactory){
  PartitionAwareOperationFactory factory=givenFactory.createFactoryOnRunner(getNodeEngine());
  NodeEngine nodeEngine=getNodeEngine();
  int[] operationFactoryPartitions=factory.getPartitions();
  partitions=operationFactoryPartitions == null ? partitions : operationFactoryPartitions;
  Object[] responses=new Object[partitions.length];
  for (int i=0; i < partitions.length; i++) {
    ResponseQueue responseQueue=new ResponseQueue();
    responses[i]=responseQueue;
    int partition=partitions[i];
    Operation operation=factory.createPartitionOperation(partition);
    operation.setNodeEngine(nodeEngine).setPartitionId(partition).setReplicaIndex(getReplicaIndex()).setOperationResponseHandler(responseQueue).setServiceName(getServiceName()).setService(getService()).setCallerUuid(extractCallerUuid());
    OperationAccessor.setCallerAddress(operation,getCallerAddress());
    nodeEngine.getOperationService().execute(operation);
  }
  return responses;
}",0.5870599429115129
46440,"public JoinRequest createJoinRequest(boolean withCredentials){
  final Credentials credentials=(withCredentials && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null;
  return new JoinRequest(Packet.VERSION,buildInfo.getBuildNumber(),address,localMember.getUuid(),localMember.isLiteMember(),createConfigCheck(),credentials,config.getMemberAttributeConfig().getAttributes());
}","public JoinRequest createJoinRequest(boolean withCredentials){
  final Credentials credentials=(withCredentials && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null;
  return new JoinRequest(Packet.VERSION,buildInfo.getBuildNumber(),address,localMember.getUuid(),localMember.isLiteMember(),createConfigCheck(),credentials,localMember.getAttributes());
}",0.9604938271604938
46441,"public JoinRequest createJoinRequest(boolean withCredentials){
  final Credentials credentials=(withCredentials && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null;
  return new JoinRequest(Packet.VERSION,buildInfo.getBuildNumber(),address,localMember.getUuid(),localMember.isLiteMember(),createConfigCheck(),credentials,config.getMemberAttributeConfig().getAttributes());
}","public JoinRequest createJoinRequest(boolean withCredentials){
  final Credentials credentials=(withCredentials && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null;
  return new JoinRequest(Packet.VERSION,buildInfo.getBuildNumber(),address,localMember.getUuid(),localMember.isLiteMember(),createConfigCheck(),credentials,localMember.getAttributes());
}",0.9604938271604938
46442,"private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,DEFAULT_MULTICAST_PORT);
    PortValueValidator validator=new PortValueValidator();
    validator.validate(port);
    String group=getOrDefault(MulticastProperties.GROUP,DEFAULT_MULTICAST_GROUP);
    multicastSocket=new MulticastSocket(null);
    multicastSocket.bind(new InetSocketAddress(port));
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(SOCKET_TIME_TO_LIVE);
    multicastSocket.setReceiveBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(SOCKET_TIMEOUT);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket,logger,group,port);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket,logger);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
  }
}","private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,DEFAULT_MULTICAST_PORT);
    PortValueValidator validator=new PortValueValidator();
    validator.validate(port);
    String group=getOrDefault(MulticastProperties.GROUP,DEFAULT_MULTICAST_GROUP);
    multicastSocket=new MulticastSocket(null);
    multicastSocket.bind(new InetSocketAddress(port));
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(SOCKET_TIME_TO_LIVE);
    multicastSocket.setReceiveBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(SOCKET_TIMEOUT);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket,logger,group,port);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket,logger);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
    rethrow(e);
  }
}",0.9925442684063374
46443,"@Override public Collection<PropertyDefinition> getConfigurationProperties(){
  return null;
}","@Override public Collection<PropertyDefinition> getConfigurationProperties(){
  return PROPERTY_DEFINITIONS;
}",0.8823529411764706
46444,"@Before public void setUp(){
  String xmlFileName=""String_Node_Str"";
  InputStream xmlResource=MulticastDiscoveryStrategy.class.getClassLoader().getResourceAsStream(xmlFileName);
  config=new XmlConfigBuilder(xmlResource).build();
  System.setProperty(TestEnvironment.HAZELCAST_TEST_USE_NETWORK,""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  factory=createHazelcastInstanceFactory(2);
}","@Before public void setUp(){
  String xmlFileName=""String_Node_Str"";
  InputStream xmlResource=MulticastDiscoveryStrategy.class.getClassLoader().getResourceAsStream(xmlFileName);
  config=new XmlConfigBuilder(xmlResource).build();
  System.setProperty(TestEnvironment.HAZELCAST_TEST_USE_NETWORK,""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}",0.9433962264150944
46445,"private static String createFileName(float version){
  return version + ""String_Node_Str"";
}","private static String createFileName(String version){
  return version + ""String_Node_Str"";
}",0.9513513513513514
46446,"@BeforeClass public static void init() throws IOException {
  for (  float version : versions) {
    String fileName=createFileName(version);
    InputStream input=BinaryCompatibilityTest.class.getResourceAsStream(""String_Node_Str"" + fileName);
    DataInputStream inputStream=new DataInputStream(input);
    while (input.available() != 0) {
      String objectKey=inputStream.readUTF();
      int length=inputStream.readInt();
      byte[] bytes=new byte[length];
      inputStream.read(bytes);
      dataMap.put(objectKey,bytes);
    }
    inputStream.close();
  }
}","@BeforeClass public static void init() throws IOException {
  for (  String version : versions) {
    String fileName=createFileName(version);
    InputStream input=BinaryCompatibilityTest.class.getResourceAsStream(""String_Node_Str"" + fileName);
    DataInputStream inputStream=new DataInputStream(input);
    while (input.available() != 0) {
      String objectKey=inputStream.readUTF();
      int length=inputStream.readInt();
      byte[] bytes=new byte[length];
      inputStream.read(bytes);
      dataMap.put(objectKey,bytes);
    }
    inputStream.close();
  }
}",0.990325417766051
46447,"@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable<Object[]> parameters(){
  LinkedList<Object[]> parameters=new LinkedList<Object[]>();
  for (  Throwable throwable : throwables) {
    for (    float version : versions) {
      parameters.add(new Object[]{throwable,version});
    }
  }
  return parameters;
}","@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable<Object[]> parameters(){
  LinkedList<Object[]> parameters=new LinkedList<Object[]>();
  for (  String version : versions) {
    for (    Throwable throwable : throwables.get(version)) {
      parameters.add(new Object[]{throwable,version});
    }
  }
  return parameters;
}",0.8790560471976401
46448,"private static String createFileName(){
  return VERSION + ""String_Node_Str"";
}","private static String createFileName(String version){
  return version + ""String_Node_Str"";
}",0.8372093023255814
46449,"private static String createObjectKey(Object object){
  return VERSION + ""String_Node_Str"" + object.getClass().getSimpleName();
}","private static String createObjectKey(Object object,String version){
  return version + ""String_Node_Str"" + object.getClass().getSimpleName();
}",0.8937728937728938
46450,"public static void main(String[] args) throws IOException {
  Throwable[] throwables=ReferenceObjects.throwables;
  String fileName=createFileName();
  OutputStream out=new FileOutputStream(fileName);
  DataOutputStream outputStream=new DataOutputStream(out);
  ClientExceptionFactory clientExceptionFactory=new ClientExceptionFactory(true);
  for (  Throwable throwable : throwables) {
    outputStream.writeUTF(createObjectKey(throwable));
    ClientMessage clientMessage=clientExceptionFactory.createExceptionMessage(throwable);
    outputStream.writeInt(clientMessage.getFrameLength());
    outputStream.write(clientMessage.buffer().byteArray(),0,clientMessage.getFrameLength());
  }
  outputStream.close();
}","public static void main(String[] args) throws IOException {
  Map<String,Throwable[]> allThrowables=ReferenceObjects.throwables;
  ClientExceptionFactory clientExceptionFactory=new ClientExceptionFactory(true);
  for (  String version : allThrowables.keySet()) {
    String fileName=createFileName(version);
    OutputStream out=new FileOutputStream(fileName);
    DataOutputStream outputStream=new DataOutputStream(out);
    Throwable[] throwables=allThrowables.get(version);
    for (    Throwable throwable : throwables) {
      outputStream.writeUTF(createObjectKey(throwable,version));
      ClientMessage clientMessage=clientExceptionFactory.createExceptionMessage(throwable);
      outputStream.writeInt(clientMessage.getFrameLength());
      outputStream.write(clientMessage.buffer().byteArray(),0,clientMessage.getFrameLength());
    }
    outputStream.close();
  }
}",0.6784140969162996
46451,"@Override public Xid[] recover(int flag) throws XAException {
  NodeEngine nodeEngine=getNodeEngine();
  XAService xaService=getService();
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  Collection<Member> memberList=clusterService.getMembers();
  List<InternalCompletableFuture<SerializableList>> futureList=new ArrayList<InternalCompletableFuture<SerializableList>>();
  for (  Member member : memberList) {
    if (member.localMember()) {
      continue;
    }
    CollectRemoteTransactionsOperation op=new CollectRemoteTransactionsOperation();
    Address address=member.getAddress();
    InternalCompletableFuture<SerializableList> future=operationService.invokeOnTarget(SERVICE_NAME,op,address);
    futureList.add(future);
  }
  HashSet<SerializableXID> xids=new HashSet<SerializableXID>();
  xids.addAll(xaService.getPreparedXids());
  for (  InternalCompletableFuture<SerializableList> future : futureList) {
    SerializableList xidSet=future.getSafely();
    for (    Data xidData : xidSet) {
      SerializableXID xid=nodeEngine.toObject(xidData);
      xids.add(xid);
    }
  }
  return xids.toArray(new SerializableXID[xids.size()]);
}","@Override public Xid[] recover(int flag) throws XAException {
  NodeEngine nodeEngine=getNodeEngine();
  XAService xaService=getService();
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  Collection<Member> memberList=clusterService.getMembers();
  List<Future<SerializableList>> futureList=new ArrayList<Future<SerializableList>>();
  for (  Member member : memberList) {
    if (member.localMember()) {
      continue;
    }
    CollectRemoteTransactionsOperation op=new CollectRemoteTransactionsOperation();
    Address address=member.getAddress();
    InternalCompletableFuture<SerializableList> future=operationService.invokeOnTarget(SERVICE_NAME,op,address);
    futureList.add(future);
  }
  HashSet<SerializableXID> xids=new HashSet<SerializableXID>();
  xids.addAll(xaService.getPreparedXids());
  for (  Future<SerializableList> future : futureList) {
    try {
      SerializableList xidSet=future.get();
      for (      Data xidData : xidSet) {
        SerializableXID xid=nodeEngine.toObject(xidData);
        xids.add(xid);
      }
    }
 catch (    InterruptedException e) {
      throw new XAException(XAException.XAER_RMERR);
    }
catch (    MemberLeftException e) {
      logger.warning(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof HazelcastInstanceNotActiveException || cause instanceof TargetNotMemberException) {
        logger.warning(""String_Node_Str"",e);
      }
 else {
        throw new XAException(XAException.XAER_RMERR);
      }
    }
  }
  return xids.toArray(new SerializableXID[xids.size()]);
}",0.7828162291169452
46452,"public XAResourceImpl(NodeEngine nodeEngine,XAService service){
  super(nodeEngine,service);
  GroupConfig groupConfig=nodeEngine.getConfig().getGroupConfig();
  groupName=groupConfig.getName();
}","public XAResourceImpl(NodeEngine nodeEngine,XAService service){
  super(nodeEngine,service);
  GroupConfig groupConfig=nodeEngine.getConfig().getGroupConfig();
  groupName=groupConfig.getName();
  logger=nodeEngine.getLogger(getClass());
}",0.9011494252873564
46453,"@Override public void end(Xid xid,int flags) throws XAException {
  long threadId=currentThreadId();
  TransactionContext threadContext=threadContextMap.remove(threadId);
  if (threadContext == null && LOGGER.isFinestEnabled()) {
    LOGGER.finest(""String_Node_Str"" + threadId);
  }
  List<TransactionContext> contexts=xidContextMap.get(xid);
  if (contexts == null && LOGGER.isFinestEnabled()) {
    LOGGER.finest(""String_Node_Str"" + xid);
  }
}","@Override public void end(Xid xid,int flags) throws XAException {
  long threadId=currentThreadId();
  TransactionContext threadContext=threadContextMap.remove(threadId);
  if (threadContext == null && logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + threadId);
  }
  List<TransactionContext> contexts=xidContextMap.get(xid);
  if (contexts == null && logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + xid);
  }
}",0.905829596412556
46454,"/** 
 * Validates index attribute content
 * @param attribute attribute to validate
 * @return the attribute for fluent assignment
 */
public static String validateIndexAttribute(String attribute){
  checkHasText(attribute,""String_Node_Str"");
  String keyPrefix=KEY_ATTRIBUTE_NAME.value();
  if (attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()) {
    if (attribute.charAt(keyPrefix.length()) != '#') {
      LOG.warning(KEY_ATTRIBUTE_NAME.value() + ""String_Node_Str"" + attribute+ ""String_Node_Str"");
    }
  }
  return attribute;
}","/** 
 * Validates index attribute content
 * @param attribute attribute to validate
 * @return the attribute for fluent assignment
 */
public static String validateIndexAttribute(String attribute){
  checkHasText(attribute,""String_Node_Str"");
  String keyPrefix=KEY_ATTRIBUTE_NAME.value();
  if (attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()) {
    if (attribute.charAt(keyPrefix.length()) != '#') {
      LOG.warning(KEY_ATTRIBUTE_NAME.value() + ""String_Node_Str"" + attribute+ ""String_Node_Str"");
    }
  }
  return attribute;
}",0.9991031390134528
46455,"private void replicateTxnLog() throws InterruptedException, ExecutionException, java.util.concurrent.TimeoutException {
  if (skipBackupLogReplication()) {
    return;
  }
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  List<Future> futures=new ArrayList<Future>(backupAddresses.length);
  for (  Address backupAddress : backupAddresses) {
    if (clusterService.getMember(backupAddress) != null) {
      Operation op=createReplicateTxBackupLogOperation();
      Future f=operationService.invokeOnTarget(SERVICE_NAME,op,backupAddress);
      futures.add(f);
    }
  }
  waitWithDeadline(futures,timeoutMillis,MILLISECONDS,RETHROW_TRANSACTION_EXCEPTION);
}","private void replicateTxnLog() throws InterruptedException, ExecutionException, java.util.concurrent.TimeoutException {
  if (skipBackupLogReplication()) {
    return;
  }
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  List<Future> futures=new ArrayList<Future>(backupAddresses.length);
  for (  Address backupAddress : backupAddresses) {
    if (clusterService.getMember(backupAddress) != null) {
      Operation op=createReplicateTxBackupLogOperation();
      Future f=operationService.invokeOnTarget(SERVICE_NAME,op,backupAddress);
      futures.add(f);
    }
  }
  waitWithDeadline(futures,timeoutMillis,MILLISECONDS,replicationTxExceptionHandler);
}",0.9636608344549124
46456,"private void forceCreateBackupLogs(){
  backupLogsCreated=true;
  OperationService operationService=nodeEngine.getOperationService();
  List<Future> futures=new ArrayList<Future>(backupAddresses.length);
  for (  Address backupAddress : backupAddresses) {
    if (nodeEngine.getClusterService().getMember(backupAddress) != null) {
      final CreateTxBackupLogOperation op=createCreateTxBackupLogOperation();
      Future f=operationService.invokeOnTarget(SERVICE_NAME,op,backupAddress);
      futures.add(f);
    }
  }
  for (  Future future : futures) {
    try {
      future.get(timeoutMillis,MILLISECONDS);
    }
 catch (    MemberLeftException e) {
      nodeEngine.getLogger(Transaction.class).warning(""String_Node_Str"" + e);
    }
catch (    Throwable e) {
      if (e instanceof ExecutionException) {
        e=e.getCause() != null ? e.getCause() : e;
      }
      if (e instanceof TargetNotMemberException) {
        nodeEngine.getLogger(Transaction.class).warning(""String_Node_Str"" + e);
      }
 else {
        RETHROW_TRANSACTION_EXCEPTION.handleException(e);
      }
    }
  }
}","private void forceCreateBackupLogs(){
  backupLogsCreated=true;
  OperationService operationService=nodeEngine.getOperationService();
  List<Future> futures=new ArrayList<Future>(backupAddresses.length);
  for (  Address backupAddress : backupAddresses) {
    if (nodeEngine.getClusterService().getMember(backupAddress) != null) {
      final CreateTxBackupLogOperation op=createCreateTxBackupLogOperation();
      Future f=operationService.invokeOnTarget(SERVICE_NAME,op,backupAddress);
      futures.add(f);
    }
  }
  waitWithDeadline(futures,timeoutMillis,MILLISECONDS,replicationTxExceptionHandler);
}",0.66
46457,"TransactionImpl(TransactionManagerServiceImpl transactionManagerService,NodeEngine nodeEngine,String txnId,List<TransactionLogRecord> transactionLog,long timeoutMillis,long startTime,String txOwnerUuid){
  this.transactionLog=new TransactionLog(transactionLog);
  this.transactionManagerService=transactionManagerService;
  this.nodeEngine=nodeEngine;
  this.txnId=txnId;
  this.timeoutMillis=timeoutMillis;
  this.startTime=startTime;
  this.durability=0;
  this.transactionType=TWO_PHASE;
  this.state=PREPARED;
  this.txOwnerUuid=txOwnerUuid;
  this.checkThreadAccess=false;
  this.logger=nodeEngine.getLogger(getClass());
  this.rollbackExceptionHandler=logAllExceptions(logger,""String_Node_Str"",Level.FINEST);
  this.rollbackTxExceptionHandler=logAllExceptions(logger,""String_Node_Str"",Level.FINEST);
}","TransactionImpl(TransactionManagerServiceImpl transactionManagerService,NodeEngine nodeEngine,String txnId,List<TransactionLogRecord> transactionLog,long timeoutMillis,long startTime,String txOwnerUuid){
  this.transactionLog=new TransactionLog(transactionLog);
  this.transactionManagerService=transactionManagerService;
  this.nodeEngine=nodeEngine;
  this.txnId=txnId;
  this.timeoutMillis=timeoutMillis;
  this.startTime=startTime;
  this.durability=0;
  this.transactionType=TWO_PHASE;
  this.state=PREPARED;
  this.txOwnerUuid=txOwnerUuid;
  this.checkThreadAccess=false;
  this.logger=nodeEngine.getLogger(getClass());
  this.rollbackExceptionHandler=logAllExceptions(logger,""String_Node_Str"",Level.FINEST);
  this.rollbackTxExceptionHandler=logAllExceptions(logger,""String_Node_Str"",Level.FINEST);
  this.replicationTxExceptionHandler=createReplicationTxExceptionHandler(logger);
}",0.9516509433962264
46458,"@Override public Xid[] recover(int flag) throws XAException {
  NodeEngine nodeEngine=getNodeEngine();
  XAService xaService=getService();
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  Collection<Member> memberList=clusterService.getMembers();
  List<InternalCompletableFuture<SerializableList>> futureList=new ArrayList<InternalCompletableFuture<SerializableList>>();
  for (  Member member : memberList) {
    if (member.localMember()) {
      continue;
    }
    CollectRemoteTransactionsOperation op=new CollectRemoteTransactionsOperation();
    Address address=member.getAddress();
    InternalCompletableFuture<SerializableList> future=operationService.invokeOnTarget(SERVICE_NAME,op,address);
    futureList.add(future);
  }
  HashSet<SerializableXID> xids=new HashSet<SerializableXID>();
  xids.addAll(xaService.getPreparedXids());
  for (  InternalCompletableFuture<SerializableList> future : futureList) {
    SerializableList xidSet=future.join();
    for (    Data xidData : xidSet) {
      SerializableXID xid=nodeEngine.toObject(xidData);
      xids.add(xid);
    }
  }
  return xids.toArray(new SerializableXID[xids.size()]);
}","@Override public Xid[] recover(int flag) throws XAException {
  NodeEngine nodeEngine=getNodeEngine();
  XAService xaService=getService();
  OperationService operationService=nodeEngine.getOperationService();
  ClusterService clusterService=nodeEngine.getClusterService();
  Collection<Member> memberList=clusterService.getMembers();
  List<Future<SerializableList>> futureList=new ArrayList<Future<SerializableList>>();
  for (  Member member : memberList) {
    if (member.localMember()) {
      continue;
    }
    CollectRemoteTransactionsOperation op=new CollectRemoteTransactionsOperation();
    Address address=member.getAddress();
    InternalCompletableFuture<SerializableList> future=operationService.invokeOnTarget(SERVICE_NAME,op,address);
    futureList.add(future);
  }
  HashSet<SerializableXID> xids=new HashSet<SerializableXID>();
  xids.addAll(xaService.getPreparedXids());
  for (  Future<SerializableList> future : futureList) {
    try {
      SerializableList xidSet=future.get();
      for (      Data xidData : xidSet) {
        SerializableXID xid=nodeEngine.toObject(xidData);
        xids.add(xid);
      }
    }
 catch (    InterruptedException e) {
      throw new XAException(XAException.XAER_RMERR);
    }
catch (    MemberLeftException e) {
      logger.warning(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof HazelcastInstanceNotActiveException || cause instanceof TargetNotMemberException) {
        logger.warning(""String_Node_Str"",e);
      }
 else {
        throw new XAException(XAException.XAER_RMERR);
      }
    }
  }
  return xids.toArray(new SerializableXID[xids.size()]);
}",0.787568306010929
46459,"public XAResourceImpl(NodeEngine nodeEngine,XAService service){
  super(nodeEngine,service);
  GroupConfig groupConfig=nodeEngine.getConfig().getGroupConfig();
  groupName=groupConfig.getName();
}","public XAResourceImpl(NodeEngine nodeEngine,XAService service){
  super(nodeEngine,service);
  GroupConfig groupConfig=nodeEngine.getConfig().getGroupConfig();
  groupName=groupConfig.getName();
  logger=nodeEngine.getLogger(getClass());
}",0.9011494252873564
46460,"@Override public void end(Xid xid,int flags) throws XAException {
  long threadId=currentThreadId();
  TransactionContext threadContext=threadContextMap.remove(threadId);
  if (threadContext == null && LOGGER.isFinestEnabled()) {
    LOGGER.finest(""String_Node_Str"" + threadId);
  }
  List<TransactionContext> contexts=xidContextMap.get(xid);
  if (contexts == null && LOGGER.isFinestEnabled()) {
    LOGGER.finest(""String_Node_Str"" + xid);
  }
}","@Override public void end(Xid xid,int flags) throws XAException {
  long threadId=currentThreadId();
  TransactionContext threadContext=threadContextMap.remove(threadId);
  if (threadContext == null && logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + threadId);
  }
  List<TransactionContext> contexts=xidContextMap.get(xid);
  if (contexts == null && logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + xid);
  }
}",0.905829596412556
46461,"/** 
 * Populate the LifeOperations
 * @param result the result.
 */
void populate(LiveOperations result);","/** 
 * Populate the LiveOperations
 * @param liveOperations the LiveOperations to populate.
 */
void populate(LiveOperations liveOperations);",0.7741935483870968
46462,"public MulticastDiscoverySender(DiscoveryNode discoveryNode,MulticastSocket multicastSocket,ILogger logger) throws IOException {
  this.multicastSocket=multicastSocket;
  this.logger=logger;
  if (discoveryNode != null) {
    Address address=discoveryNode.getPublicAddress();
    multicastMemberInfo=new MulticastMemberInfo(address.getHost(),address.getPort());
  }
  initDatagramPacket();
}","public MulticastDiscoverySender(DiscoveryNode discoveryNode,MulticastSocket multicastSocket,ILogger logger,String group,int port) throws IOException {
  this.multicastSocket=multicastSocket;
  this.logger=logger;
  this.group=group;
  this.port=port;
  if (discoveryNode != null) {
    Address address=discoveryNode.getPublicAddress();
    multicastMemberInfo=new MulticastMemberInfo(address.getHost(),address.getPort());
  }
  initDatagramPacket();
}",0.9287410926365796
46463,"private void initDatagramPacket() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutput out;
  out=new ObjectOutputStream(bos);
  out.writeObject(multicastMemberInfo);
  byte[] yourBytes=bos.toByteArray();
  datagramPacket=new DatagramPacket(yourBytes,yourBytes.length,multicastSocket.getInetAddress(),multicastSocket.getPort());
}","private void initDatagramPacket() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutput out;
  out=new ObjectOutputStream(bos);
  out.writeObject(multicastMemberInfo);
  byte[] yourBytes=bos.toByteArray();
  datagramPacket=new DatagramPacket(yourBytes,yourBytes.length,InetAddress.getByName(group),port);
}",0.9090909090909092
46464,"private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,DEFAULT_MULTICAST_PORT);
    String group=getOrDefault(MulticastProperties.GROUP,DEFAULT_MULTICAST_GROUP);
    multicastSocket=new MulticastSocket(port);
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(SOCKET_TIME_TO_LIVE);
    multicastSocket.setReceiveBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(SOCKET_TIMEOUT);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket,logger);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket,logger);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
  }
}","private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,DEFAULT_MULTICAST_PORT);
    MulticastProperties.PortValueValidator validator=new MulticastProperties.PortValueValidator();
    validator.validate(port);
    String group=getOrDefault(MulticastProperties.GROUP,DEFAULT_MULTICAST_GROUP);
    multicastSocket=new MulticastSocket(null);
    multicastSocket.bind(new InetSocketAddress(port));
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(SOCKET_TIME_TO_LIVE);
    multicastSocket.setReceiveBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(SOCKET_TIMEOUT);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket,logger,group,port);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket,logger);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
  }
}",0.8992555831265509
46465,"@Test public void formClusterWithTwoMembersTest() throws InterruptedException {
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  instances=factory.newInstances(config);
  assertClusterSizeEventually(2,instances[0]);
  factory.shutdownAll();
}","@Test public void formClusterWithTwoMembersTest() throws InterruptedException {
  System.setProperty(TestEnvironment.HAZELCAST_TEST_USE_NETWORK,""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  instances=factory.newInstances(config);
  assertClusterSizeEventually(2,instances[0]);
  factory.shutdownAll();
}",0.7900146842878121
46466,"@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc == null) {
    ensureInstanceIsUp();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
  }
 else {
    cc.copyInto(this);
    ensureInstanceIsUp();
    cc.copyFrom(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}","@Before public void setup() throws Exception {
  ContainerContext cc=CONTAINER_CONTEXT_MAP.get(getClass());
  if (cc != null) {
    if (!cc.serverXml1.equals(serverXml1) || !cc.serverXml2.equals(serverXml2)) {
      cc.server1.stop();
      cc.server2.stop();
      cc=null;
    }
  }
  if (cc == null) {
    ensureInstanceIsUp();
    CONTAINER_CONTEXT_MAP.put(getClass(),new ContainerContext(this,serverXml1,serverXml2,serverPort1,serverPort2,server1,server2,hz));
  }
 else {
    cc.copyInto(this);
    ensureInstanceIsUp();
    cc.copyFrom(this);
  }
  IMap<String,Object> map=hz.getMap(DEFAULT_MAP_NAME);
  map.clear();
}",0.8350419384902144
46467,"@ManagedAnnotation(""String_Node_Str"") @ManagedDescription(""String_Node_Str"") public String getConfig(){
  return service.instance.getConfig().findMapConfig(managedObject.getName()).toString();
}","@ManagedAnnotation(""String_Node_Str"") @ManagedDescription(""String_Node_Str"") public String getConfig(){
  return service.instance.getConfig().findReplicatedMapConfig(managedObject.getName()).toString();
}",0.9748743718592964
46468,"@Override public Thread newThread(Runnable r){
  Thread thread=new InvocationMonitorThread(r,threadGroup);
  thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      logger.severe(e);
    }
  }
);
  return thread;
}","@Override public Thread newThread(Runnable r){
  return new InvocationMonitorThread(r,threadGroup);
}",0.4685990338164251
46469,"@Override public void run(){
  LiveOperations result=populate();
  Set<Address> addresses=result.addresses();
  if (logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + addresses.size() + ""String_Node_Str"");
  }
  for (  Address address : addresses) {
    sendHeartbeats(address,result.callIds(address));
  }
}","@Override public void run(){
  long currentTimeMillis=System.currentTimeMillis();
  try {
    if (expectedNextMillis + MAX_DELAY_MILLIS < currentTimeMillis) {
      logger.warning(getClass().getSimpleName() + ""String_Node_Str"" + (currentTimeMillis - expectedNextMillis)+ ""String_Node_Str"");
      delayedExecutionCount.inc();
    }
    run0();
  }
 catch (  Throwable t) {
    inspectOutOfMemoryError(t);
    logger.severe(t);
  }
 finally {
    expectedNextMillis=currentTimeMillis + periodMillis;
  }
}",0.2370012091898428
46470,"private long heartbeatBroadcastPeriodMillis(HazelcastProperties groupProperties){
  int callTimeoutMs=groupProperties.getInteger(OPERATION_CALL_TIMEOUT_MILLIS);
  long periodMs=Math.max(SECONDS.toMillis(1),callTimeoutMs / HEARTBEAT_CALL_TIMEOUT_RATIO);
  if (logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + periodMs + ""String_Node_Str"");
  }
  return periodMs;
}","private long heartbeatBroadcastPeriodMillis(HazelcastProperties properties){
  int callTimeoutMs=properties.getInteger(OPERATION_CALL_TIMEOUT_MILLIS);
  long periodMs=Math.max(SECONDS.toMillis(1),callTimeoutMs / HEARTBEAT_CALL_TIMEOUT_RATIO);
  if (logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + periodMs + ""String_Node_Str"");
  }
  return periodMs;
}",0.912
46471,"public void start(){
  scheduler.scheduleAtFixedRate(new MonitorInvocationsTask(),0,invocationScanPeriodMillis,MILLISECONDS);
  scheduler.scheduleAtFixedRate(new BroadcastOperationHeartbeatsTask(),0,heartbeatBroadcastPeriodMillis,MILLISECONDS);
}","public void start(){
  MonitorInvocationsTask monitorInvocationsTask=new MonitorInvocationsTask(invocationScanPeriodMillis);
  scheduler.scheduleAtFixedRate(monitorInvocationsTask,0,monitorInvocationsTask.periodMillis,MILLISECONDS);
  BroadcastOperationHeartbeatsTask broadcastOperationHeartbeatsTask=new BroadcastOperationHeartbeatsTask(heartbeatBroadcastPeriodMillis);
  scheduler.scheduleAtFixedRate(broadcastOperationHeartbeatsTask,0,broadcastOperationHeartbeatsTask.periodMillis,MILLISECONDS);
}",0.4691689008042895
46472,"private ScheduledExecutorService newScheduler(final HazelcastThreadGroup threadGroup){
  return new ScheduledThreadPoolExecutor(1,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread thread=new InvocationMonitorThread(r,threadGroup);
      thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
        @Override public void uncaughtException(        Thread t,        Throwable e){
          logger.severe(e);
        }
      }
);
      return thread;
    }
  }
);
}","private ScheduledExecutorService newScheduler(final HazelcastThreadGroup threadGroup){
  return new ScheduledThreadPoolExecutor(1,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      return new InvocationMonitorThread(r,threadGroup);
    }
  }
);
}",0.6616541353383458
46473,"InvocationMonitor(NodeEngineImpl nodeEngine,Address thisAddress,HazelcastThreadGroup threadGroup,HazelcastProperties hazelcastProperties,InvocationRegistry invocationRegistry,ILogger logger,InternalSerializationService serializationService,ServiceManager serviceManager){
  this.nodeEngine=nodeEngine;
  this.thisAddress=thisAddress;
  this.serializationService=serializationService;
  this.serviceManager=serviceManager;
  this.invocationRegistry=invocationRegistry;
  this.logger=logger;
  this.backupTimeoutMillis=backupTimeoutMillis(hazelcastProperties);
  this.invocationTimeoutMillis=invocationTimeoutMillis(hazelcastProperties);
  this.heartbeatBroadcastPeriodMillis=heartbeatBroadcastPeriodMillis(hazelcastProperties);
  this.scheduler=newScheduler(threadGroup);
}","InvocationMonitor(NodeEngineImpl nodeEngine,Address thisAddress,HazelcastThreadGroup threadGroup,HazelcastProperties properties,InvocationRegistry invocationRegistry,ILogger logger,InternalSerializationService serializationService,ServiceManager serviceManager){
  this.nodeEngine=nodeEngine;
  this.thisAddress=thisAddress;
  this.serializationService=serializationService;
  this.serviceManager=serviceManager;
  this.invocationRegistry=invocationRegistry;
  this.logger=logger;
  this.backupTimeoutMillis=backupTimeoutMillis(properties);
  this.invocationTimeoutMillis=invocationTimeoutMillis(properties);
  this.heartbeatBroadcastPeriodMillis=heartbeatBroadcastPeriodMillis(properties);
  this.scheduler=newScheduler(threadGroup);
}",0.7904509283819628
46474,"private void process(Object task){
  try {
    if (task.getClass() == Packet.class) {
      Packet packet=(Packet)task;
      currentRunner=getOperationRunner(packet.getPartitionId());
      currentRunner.run(packet);
      completedPacketCount.inc();
    }
 else     if (task instanceof Operation) {
      Operation operation=(Operation)task;
      currentRunner=getOperationRunner(operation.getPartitionId());
      currentRunner.run(operation);
      completedOperationCount.inc();
    }
 else     if (task instanceof PartitionSpecificRunnable) {
      PartitionSpecificRunnable runnable=(PartitionSpecificRunnable)task;
      currentRunner=getOperationRunner(runnable.getPartitionId());
      currentRunner.run(runnable);
      completedPartitionSpecificRunnableCount.inc();
    }
 else     if (task instanceof Runnable) {
      Runnable runnable=(Runnable)task;
      runnable.run();
      completedRunnableCount.inc();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + task);
    }
    completedTotalCount.inc();
  }
 catch (  Throwable t) {
    errorCount.inc();
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"" + task + ""String_Node_Str""+ getName(),t);
  }
 finally {
    currentRunner=null;
  }
}","private void process(Object task){
  try {
    if (task.getClass() == Packet.class) {
      Packet packet=(Packet)task;
      currentRunner=getOperationRunner(packet.getPartitionId());
      currentRunner.run(packet);
      completedPacketCount.inc();
    }
 else     if (task instanceof Operation) {
      Operation operation=(Operation)task;
      currentRunner=getOperationRunner(operation.getPartitionId());
      currentRunner.run(operation);
      completedOperationCount.inc();
    }
 else     if (task instanceof PartitionSpecificRunnable) {
      PartitionSpecificRunnable runnable=(PartitionSpecificRunnable)task;
      currentRunner=getOperationRunner(runnable.getPartitionId());
      currentRunner.run(runnable);
      completedPartitionSpecificRunnableCount.inc();
    }
 else     if (task instanceof Runnable) {
      Runnable runnable=(Runnable)task;
      runnable.run();
      completedRunnableCount.inc();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + task);
    }
    completedTotalCount.inc();
  }
 catch (  Throwable t) {
    errorCount.inc();
    inspectOutOfMemoryError(t);
    logger.severe(""String_Node_Str"" + task + ""String_Node_Str""+ getName(),t);
  }
 finally {
    currentRunner=null;
  }
}",0.9979943842759728
46475,"@Override public final void run(){
  nodeExtension.onThreadStart(this);
  try {
    while (!shutdown) {
      Object task;
      try {
        task=queue.take(priority);
      }
 catch (      InterruptedException e) {
        continue;
      }
      process(task);
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(t);
  }
 finally {
    nodeExtension.onThreadStop(this);
  }
}","@Override public final void run(){
  nodeExtension.onThreadStart(this);
  try {
    while (!shutdown) {
      Object task;
      try {
        task=queue.take(priority);
      }
 catch (      InterruptedException e) {
        continue;
      }
      process(task);
    }
  }
 catch (  Throwable t) {
    inspectOutOfMemoryError(t);
    logger.severe(t);
  }
 finally {
    nodeExtension.onThreadStop(this);
  }
}",0.993939393939394
46476,"private void doRun() throws InterruptedException {
  while (!shutdown) {
    Packet response=responseQueue.take();
    try {
      responsePacketHandler.handle(response);
    }
 catch (    Throwable e) {
      inspectOutputMemoryError(e);
      logger.severe(""String_Node_Str"" + response + ""String_Node_Str""+ getName(),e);
    }
  }
}","private void doRun() throws InterruptedException {
  while (!shutdown) {
    Packet response=responseQueue.take();
    try {
      responsePacketHandler.handle(response);
    }
 catch (    Throwable e) {
      inspectOutOfMemoryError(e);
      logger.severe(""String_Node_Str"" + response + ""String_Node_Str""+ getName(),e);
    }
  }
}",0.992503748125937
46477,"@Override public void run(){
  try {
    doRun();
  }
 catch (  InterruptedException e) {
    ignore(e);
  }
catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(t);
  }
}","@Override public void run(){
  try {
    doRun();
  }
 catch (  InterruptedException e) {
    ignore(e);
  }
catch (  Throwable t) {
    inspectOutOfMemoryError(t);
    logger.severe(t);
  }
}",0.987012987012987
46478,"@Override public void dispatch(Packet packet){
  try {
    if (packet.isFlagSet(FLAG_OP)) {
      if (packet.isFlagSet(FLAG_RESPONSE)) {
        responseHandler.handle(packet);
      }
 else       if (packet.isFlagSet(FLAG_OP_CONTROL)) {
        invocationMonitor.handle(packet);
      }
 else {
        operationExecutor.handle(packet);
      }
    }
 else     if (packet.isFlagSet(FLAG_EVENT)) {
      eventService.handle(packet);
    }
 else     if (packet.isFlagSet(FLAG_BIND)) {
      connectionManager.handle(packet);
    }
 else {
      logger.severe(""String_Node_Str"" + packet.getFlags());
    }
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(""String_Node_Str"" + packet,t);
  }
}","@Override public void dispatch(Packet packet){
  try {
    if (packet.isFlagSet(FLAG_OP)) {
      if (packet.isFlagSet(FLAG_RESPONSE)) {
        responseHandler.handle(packet);
      }
 else       if (packet.isFlagSet(FLAG_OP_CONTROL)) {
        invocationMonitor.handle(packet);
      }
 else {
        operationExecutor.handle(packet);
      }
    }
 else     if (packet.isFlagSet(FLAG_EVENT)) {
      eventService.handle(packet);
    }
 else     if (packet.isFlagSet(FLAG_BIND)) {
      connectionManager.handle(packet);
    }
 else {
      logger.severe(""String_Node_Str"" + packet.getFlags());
    }
  }
 catch (  Throwable t) {
    inspectOutOfMemoryError(t);
    logger.severe(""String_Node_Str"" + packet,t);
  }
}",0.9965253648366922
46479,"private void process(Runnable task){
  try {
    task.run();
  }
 catch (  Throwable e) {
    OutOfMemoryErrorDispatcher.inspectOutputMemoryError(e);
    logger.severe(getName() + ""String_Node_Str"" + task,e);
  }
}","private void process(Runnable task){
  try {
    task.run();
  }
 catch (  Throwable e) {
    OutOfMemoryErrorDispatcher.inspectOutOfMemoryError(e);
    logger.severe(getName() + ""String_Node_Str"" + task,e);
  }
}",0.9882903981264636
46480,"@Override public <K,V>void setPredicates(Predicate<K,V>[] predicates){
  if (this.predicates == null) {
    this.predicates=predicates;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Visitable predicates are treated as effectively immutable, therefore callers should not make any changes to the array passed as argument after is has been set.
 * @param predicates    the array of sub-predicates for this {@code And} operator. It is not safe to make any changes tothis array after it has been set.
 */
@Override @SuppressFBWarnings(""String_Node_Str"") public <K,V>void setPredicates(Predicate<K,V>[] predicates){
  if (this.predicates == null) {
    this.predicates=predicates;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.5338441890166028
46481,"@Override public <K,V>Predicate<K,V>[] getPredicates(){
  return predicates;
}","/** 
 * Visitable predicates are treated as effectively immutable, therefore callers should not make any changes to the returned array.
 */
@Override @SuppressFBWarnings(""String_Node_Str"") public <K,V>Predicate<K,V>[] getPredicates(){
  return predicates;
}",0.4656716417910447
46482,"@Override public <K,V>void setPredicates(Predicate<K,V>[] predicates){
  if (this.predicates == null) {
    this.predicates=predicates;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Visitable predicates are treated as effectively immutable, therefore callers should not make any changes to the array passed as argument after is has been set.
 * @param predicates    the array of sub-predicates for this {@code Or} operator. It is not safe to make any changes tothis array after it has been set.
 */
@Override @SuppressFBWarnings(""String_Node_Str"") public <K,V>void setPredicates(Predicate<K,V>[] predicates){
  if (this.predicates == null) {
    this.predicates=predicates;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.5345268542199488
46483,"@Override public <K,V>Predicate<K,V>[] getPredicates(){
  return predicates;
}","/** 
 * Visitable predicates are treated as effectively immutable, therefore callers should not make any changes to the returned array.
 */
@Override @SuppressFBWarnings(""String_Node_Str"") public <K,V>Predicate<K,V>[] getPredicates(){
  return predicates;
}",0.4656716417910447
46484,"protected <K,V>void registerListeners(CacheConfig<K,V> cacheConfig,ICache<K,V> source){
  Iterator<CacheEntryListenerConfiguration<K,V>> iterator=cacheConfig.getCacheEntryListenerConfigurations().iterator();
  while (iterator.hasNext()) {
    CacheEntryListenerConfiguration<K,V> listenerConfig=iterator.next();
    iterator.remove();
    source.registerCacheEntryListener(listenerConfig);
  }
}","protected <K,V>void registerListeners(CacheConfig<K,V> cacheConfig,ICache<K,V> source){
  Iterator<CacheEntryListenerConfiguration<K,V>> iterator=cacheConfig.getCacheEntryListenerConfigurations().iterator();
  Set<CacheEntryListenerConfiguration> removedListenerConfigs=new HashSet<CacheEntryListenerConfiguration>();
  while (iterator.hasNext()) {
    CacheEntryListenerConfiguration<K,V> listenerConfig=iterator.next();
    if (removedListenerConfigs.contains(listenerConfig)) {
      continue;
    }
    iterator.remove();
    removedListenerConfigs.add(listenerConfig);
    source.registerCacheEntryListener(listenerConfig);
  }
}",0.7482993197278912
46485,"protected <K,V>void registerListeners(CacheConfig<K,V> cacheConfig,ICache<K,V> source){
  Iterator<CacheEntryListenerConfiguration<K,V>> iterator=cacheConfig.getCacheEntryListenerConfigurations().iterator();
  while (iterator.hasNext()) {
    CacheEntryListenerConfiguration<K,V> listenerConfig=iterator.next();
    iterator.remove();
    source.registerCacheEntryListener(listenerConfig);
  }
}","protected <K,V>void registerListeners(CacheConfig<K,V> cacheConfig,ICache<K,V> source){
  Iterator<CacheEntryListenerConfiguration<K,V>> iterator=cacheConfig.getCacheEntryListenerConfigurations().iterator();
  Set<CacheEntryListenerConfiguration> removedListenerConfigs=new HashSet<CacheEntryListenerConfiguration>();
  while (iterator.hasNext()) {
    CacheEntryListenerConfiguration<K,V> listenerConfig=iterator.next();
    if (removedListenerConfigs.contains(listenerConfig)) {
      continue;
    }
    iterator.remove();
    removedListenerConfigs.add(listenerConfig);
    source.registerCacheEntryListener(listenerConfig);
  }
}",0.7482993197278912
46486,"public PutAllPerMemberOperation(String name,int[] partitions,MapEntries[] mapEntries){
  super(name);
  this.partitions=partitions;
  this.mapEntries=mapEntries;
}","@SuppressFBWarnings(""String_Node_Str"") public PutAllPerMemberOperation(String name,int[] partitions,MapEntries[] mapEntries){
  super(name);
  this.partitions=partitions;
  this.mapEntries=mapEntries;
}",0.8931506849315068
46487,"/** 
 * This method will group all puts per partition and send a   {@link com.hazelcast.map.impl.operation.PutAllPerMemberOperation}per member. <p/> If there are e.g. five keys for a single member, there will only be a single remote invocation instead of having five remote invocations. <p/> There is also an optional support for batching to send smaller packages. Takes care about   {@code null} checks for keys and values.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void putAllInternal(Map<?,?> map){
  try {
    int mapSize=map.size();
    if (mapSize == 0) {
      return;
    }
    boolean useBatching=isPutAllUseBatching(mapSize);
    int partitionCount=partitionService.getPartitionCount();
    int initialSize=getPutAllInitialSize(useBatching,mapSize,partitionCount);
    Map<Address,List<Integer>> memberPartitionsMap=partitionService.getMemberPartitionsMap();
    List<Future> futures=new ArrayList<Future>(getPutAllFutureSize(mapSize,useBatching,partitionCount));
    Long[] counterPerMember=null;
    Address[] addresses=null;
    if (useBatching) {
      counterPerMember=new Long[partitionCount];
      addresses=new Address[partitionCount];
      for (      Entry<Address,List<Integer>> addressListEntry : memberPartitionsMap.entrySet()) {
        Long counter=new Long(0);
        Address address=addressListEntry.getKey();
        for (        int partitionId : addressListEntry.getValue()) {
          counterPerMember[partitionId]=counter;
          addresses[partitionId]=address;
        }
      }
    }
    MapEntries[] entriesPerPartition=new MapEntries[partitionCount];
    for (    Entry entry : map.entrySet()) {
      checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
      checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
      Data keyData=toData(entry.getKey(),partitionStrategy);
      int partitionId=partitionService.getPartitionId(keyData);
      MapEntries entries=entriesPerPartition[partitionId];
      if (entries == null) {
        entries=new MapEntries(initialSize);
        entriesPerPartition[partitionId]=entries;
      }
      entries.add(keyData,toData(entry.getValue()));
      if (useBatching) {
        long currentSize=++counterPerMember[partitionId];
        if (currentSize % putAllBatchSize == 0) {
          List<Integer> partitions=memberPartitionsMap.get(addresses[partitionId]);
          invokePutAllOperation(addresses[partitionId],partitions,futures,entriesPerPartition);
        }
      }
    }
    for (    Entry<Address,List<Integer>> entry : memberPartitionsMap.entrySet()) {
      invokePutAllOperation(entry.getKey(),entry.getValue(),futures,entriesPerPartition);
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}","/** 
 * This method will group all puts per partition and send a   {@link com.hazelcast.map.impl.operation.PutAllPerMemberOperation}per member. <p/> If there are e.g. five keys for a single member, there will only be a single remote invocation instead of having five remote invocations. <p/> There is also an optional support for batching to send smaller packages. Takes care about   {@code null} checks for keys and values.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") protected void putAllInternal(Map<?,?> map){
  try {
    int mapSize=map.size();
    if (mapSize == 0) {
      return;
    }
    boolean useBatching=isPutAllUseBatching(mapSize);
    int partitionCount=partitionService.getPartitionCount();
    int initialSize=getPutAllInitialSize(useBatching,mapSize,partitionCount);
    Map<Address,List<Integer>> memberPartitionsMap=partitionService.getMemberPartitionsMap();
    List<Future> futures=new ArrayList<Future>(getPutAllFutureSize(mapSize,useBatching,partitionCount));
    Long[] counterPerMember=null;
    Address[] addresses=null;
    if (useBatching) {
      counterPerMember=new Long[partitionCount];
      addresses=new Address[partitionCount];
      for (      Entry<Address,List<Integer>> addressListEntry : memberPartitionsMap.entrySet()) {
        Long counter=new Long(0);
        Address address=addressListEntry.getKey();
        for (        int partitionId : addressListEntry.getValue()) {
          counterPerMember[partitionId]=counter;
          addresses[partitionId]=address;
        }
      }
    }
    MapEntries[] entriesPerPartition=new MapEntries[partitionCount];
    for (    Entry entry : map.entrySet()) {
      checkNotNull(entry.getKey(),NULL_KEY_IS_NOT_ALLOWED);
      checkNotNull(entry.getValue(),NULL_VALUE_IS_NOT_ALLOWED);
      Data keyData=toData(entry.getKey(),partitionStrategy);
      int partitionId=partitionService.getPartitionId(keyData);
      MapEntries entries=entriesPerPartition[partitionId];
      if (entries == null) {
        entries=new MapEntries(initialSize);
        entriesPerPartition[partitionId]=entries;
      }
      entries.add(keyData,toData(entry.getValue()));
      if (useBatching) {
        long currentSize=++counterPerMember[partitionId];
        if (currentSize % putAllBatchSize == 0) {
          List<Integer> partitions=memberPartitionsMap.get(addresses[partitionId]);
          invokePutAllOperation(addresses[partitionId],partitions,futures,entriesPerPartition);
        }
      }
    }
    for (    Entry<Address,List<Integer>> entry : memberPartitionsMap.entrySet()) {
      invokePutAllOperation(entry.getKey(),entry.getValue(),futures,entriesPerPartition);
    }
    for (    Future future : futures) {
      future.get();
    }
  }
 catch (  Exception e) {
    throw rethrow(e);
  }
}",0.986431718061674
46488,"private static Boolean isCompressedOopsOrNull(){
  if (!UNSAFE_AVAILABLE) {
    return null;
  }
  int oopSize;
  try {
    long off1=UNSAFE.objectFieldOffset(CompressedOopsClass.class.getField(""String_Node_Str""));
    long off2=UNSAFE.objectFieldOffset(CompressedOopsClass.class.getField(""String_Node_Str""));
    oopSize=(int)Math.abs(off2 - off1);
  }
 catch (  Exception e) {
    getLogger(JVMUtil.class).warning(e);
    return null;
  }
  return oopSize != UNSAFE.addressSize();
}","/** 
 * Fallback when checking CompressedOopsEnabled. Borrowed from http://openjdk.java.net/projects/code-tools/jol/
 */
@SuppressFBWarnings(""String_Node_Str"") private static Boolean isCompressedOopsOrNull(){
  if (!UNSAFE_AVAILABLE) {
    return null;
  }
  int oopSize;
  try {
    long off1=UNSAFE.objectFieldOffset(CompressedOopsClass.class.getField(""String_Node_Str""));
    long off2=UNSAFE.objectFieldOffset(CompressedOopsClass.class.getField(""String_Node_Str""));
    oopSize=(int)Math.abs(off2 - off1);
  }
 catch (  Exception e) {
    getLogger(JVMUtil.class).warning(e);
    return null;
  }
  return oopSize != UNSAFE.addressSize();
}",0.8581560283687943
46489,"private static Boolean isHotSpotCompressedOopsOrNull(){
  try {
    MBeanServer server=ManagementFactory.getPlatformMBeanServer();
    ObjectName mbean=new ObjectName(""String_Node_Str"");
    Object[] objects={""String_Node_Str""};
    String[] strings={""String_Node_Str""};
    String operation=""String_Node_Str"";
    CompositeDataSupport compressedOopsValue=(CompositeDataSupport)server.invoke(mbean,operation,objects,strings);
    return Boolean.valueOf(compressedOopsValue.get(""String_Node_Str"").toString());
  }
 catch (  Exception e) {
    getLogger(JVMUtil.class).warning(""String_Node_Str"",e);
  }
  return null;
}","@SuppressFBWarnings(""String_Node_Str"") private static Boolean isHotSpotCompressedOopsOrNull(){
  try {
    MBeanServer server=ManagementFactory.getPlatformMBeanServer();
    ObjectName mbean=new ObjectName(""String_Node_Str"");
    Object[] objects={""String_Node_Str""};
    String[] strings={""String_Node_Str""};
    String operation=""String_Node_Str"";
    CompositeDataSupport compressedOopsValue=(CompositeDataSupport)server.invoke(mbean,operation,objects,strings);
    return Boolean.valueOf(compressedOopsValue.get(""String_Node_Str"").toString());
  }
 catch (  Exception e) {
    getLogger(JVMUtil.class).warning(""String_Node_Str"",e);
  }
  return null;
}",0.969363707776905
46490,"@Override public final void destroy(){
  if (preDestroy()) {
    onDestroy();
    ClientMessage clientMessage=ClientDestroyProxyCodec.encodeRequest(getDistributedObjectName(),getServiceName());
    context.removeProxy(this);
    try {
      new ClientInvocation(getClient(),clientMessage).invoke().get();
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}","@Override public final void destroy(){
  if (preDestroy()) {
    onDestroy();
    ClientMessage clientMessage=ClientDestroyProxyCodec.encodeRequest(getDistributedObjectName(),getServiceName());
    context.removeProxy(this);
    try {
      new ClientInvocation(getClient(),clientMessage).invoke().get();
      postDestroy();
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
}",0.9735849056603774
46491,"protected boolean preDestroy(){
  return true;
}","/** 
 * Called before proxy is destroyed and determines whether destroy should be done.
 * @return <code>true</code> if destroy should be done, otherwise <code>false</code>
 */
protected boolean preDestroy(){
  return true;
}",0.3516483516483517
46492,"/** 
 * Gets cache name by adding manager prefix.
 * @param name pure cache name with prefix
 * @return the cache name with manager prefix
 */
String getCacheNameWithPrefix(String name);","/** 
 * Gets cache name by adding manager prefix.
 * @param name pure cache name without prefix
 * @return the cache name with manager prefix
 */
String getCacheNameWithPrefix(String name);",0.992
46493,"@Override public void destroyCache(String cacheName){
  checkIfManagerNotClosed();
  checkNotNull(cacheName,""String_Node_Str"");
  String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  ICacheInternal<?,?> cache=caches.remove(cacheNameWithPrefix);
  if (cache != null) {
    cache.destroy();
  }
  removeCacheConfigFromLocal(cacheNameWithPrefix);
}","@Override public void destroyCache(String cacheName){
  removeCache(cacheName,true);
}",0.3484162895927601
46494,"@Test public void getButCantOperateOnCacheAfterDestroy(){
  String cacheName=randomString();
  ICache<Integer,Integer> cache=createCache(cacheName);
  cache.destroy();
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  Cache<Object,Object> cacheAfterClose=cacheManager.getCache(cacheName);
  assertNotNull(cacheAfterClose);
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  try {
    cache.put(1,1);
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
catch (  Throwable t) {
    t.printStackTrace();
    fail(""String_Node_Str"" + ""String_Node_Str"" + t.getMessage());
  }
}","@Test public void getButCantOperateOnCacheAfterDestroy(){
  String cacheName=randomString();
  ICache<Integer,Integer> cache=createCache(cacheName);
  cache.destroy();
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  Cache<Object,Object> cacheAfterDestroy=cacheManager.getCache(cacheName);
  assertNull(cacheAfterDestroy);
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  try {
    cache.put(1,1);
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
catch (  Throwable t) {
    t.printStackTrace();
    fail(""String_Node_Str"" + ""String_Node_Str"" + t.getMessage());
  }
}",0.978622327790974
46495,"public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    CacheDestroyRequest request=new CacheDestroyRequest(nameWithPrefix,partitionId);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    final Future<SerializableList> future=clientInvocation.invoke();
    future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    CacheDestroyRequest request=new CacheDestroyRequest(nameWithPrefix,partitionId);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    final Future<SerializableList> future=clientInvocation.invoke();
    future.get();
    postDestroy();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.984689766317486
46496,"public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  waitOnGoingLoadAllCallsToFinish();
  closeListeners();
}","public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  waitOnGoingLoadAllCallsToFinish();
  closeListeners();
  postClose();
}",0.9491525423728814
46497,"public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    ClientMessage request=CacheDestroyCodec.encodeRequest(nameWithPrefix);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    final Future<ClientMessage> future=clientInvocation.invoke();
    future.get();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}","public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  try {
    int partitionId=clientContext.getPartitionService().getPartitionId(nameWithPrefix);
    ClientMessage request=CacheDestroyCodec.encodeRequest(nameWithPrefix);
    final ClientInvocation clientInvocation=new ClientInvocation((HazelcastClientInstanceImpl)clientContext.getHazelcastInstance(),request,partitionId);
    final Future<ClientMessage> future=clientInvocation.invoke();
    future.get();
    postDestroy();
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
}",0.9843621399176956
46498,"public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  waitOnGoingLoadAllCallsToFinish();
  closeListeners();
}","public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  waitOnGoingLoadAllCallsToFinish();
  closeListeners();
  postClose();
}",0.9491525423728814
46499,"/** 
 * Gets cache name by adding manager prefix.
 * @param name pure cache name with prefix
 * @return the cache name with manager prefix
 */
String getCacheNameWithPrefix(String name);","/** 
 * Gets cache name by adding manager prefix.
 * @param name pure cache name without prefix
 * @return the cache name with manager prefix
 */
String getCacheNameWithPrefix(String name);",0.992
46500,"public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  Operation operation=new CacheDestroyOperation(cacheConfig.getNameWithPrefix());
  int partitionId=getNodeEngine().getPartitionService().getPartitionId(getDistributedObjectName());
  OperationService operationService=getNodeEngine().getOperationService();
  InternalCompletableFuture f=operationService.invokeOnPartition(CacheService.SERVICE_NAME,operation,partitionId);
  f.getSafely();
  cacheService.deleteCache(getDistributedObjectName(),true,null,true);
  f.getSafely();
}","public void destroy(){
  close();
  if (!isDestroyed.compareAndSet(false,true)) {
    return;
  }
  isClosed.set(true);
  Operation operation=new CacheDestroyOperation(cacheConfig.getNameWithPrefix());
  int partitionId=getNodeEngine().getPartitionService().getPartitionId(getDistributedObjectName());
  OperationService operationService=getNodeEngine().getOperationService();
  InternalCompletableFuture f=operationService.invokeOnPartition(CacheService.SERVICE_NAME,operation,partitionId);
  f.getSafely();
  cacheService.deleteCache(getDistributedObjectName(),true,null,true);
  f.getSafely();
  postDestroy();
}",0.98598516075845
46501,"@Override public void destroyCache(String cacheName){
  checkIfManagerNotClosed();
  checkNotNull(cacheName,""String_Node_Str"");
  String cacheNameWithPrefix=getCacheNameWithPrefix(cacheName);
  ICacheInternal<?,?> cache=caches.remove(cacheNameWithPrefix);
  if (cache != null) {
    cache.destroy();
  }
  removeCacheConfigFromLocal(cacheNameWithPrefix);
}","@Override public void destroyCache(String cacheName){
  removeCache(cacheName,true);
}",0.3484162895927601
46502,"@Test public void getButCantOperateOnCacheAfterDestroy(){
  String cacheName=randomString();
  ICache<Integer,Integer> cache=createCache(cacheName);
  cache.destroy();
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  Cache<Object,Object> cacheAfterClose=cacheManager.getCache(cacheName);
  assertNotNull(cacheAfterClose);
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  try {
    cache.put(1,1);
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
catch (  Throwable t) {
    t.printStackTrace();
    fail(""String_Node_Str"" + ""String_Node_Str"" + t.getMessage());
  }
}","@Test public void getButCantOperateOnCacheAfterDestroy(){
  String cacheName=randomString();
  ICache<Integer,Integer> cache=createCache(cacheName);
  cache.destroy();
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  Cache<Object,Object> cacheAfterDestroy=cacheManager.getCache(cacheName);
  assertNull(cacheAfterDestroy);
  assertTrue(cache.isClosed());
  assertTrue(cache.isDestroyed());
  try {
    cache.put(1,1);
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException e) {
  }
catch (  Throwable t) {
    t.printStackTrace();
    fail(""String_Node_Str"" + ""String_Node_Str"" + t.getMessage());
  }
}",0.978622327790974
46503,"protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}","protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=getAdjustedExpireTime(expiryDuration,now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}",0.9701686121919584
46504,"protected R createRecordWithExpiry(Data key,Object value,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  Duration expiryDuration;
  try {
    expiryDuration=expiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=expiryDuration.getAdjustedTime(now);
  return createRecordWithExpiry(key,value,expiryTime,now,disableWriteThrough,completionId,origin);
}","protected R createRecordWithExpiry(Data key,Object value,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  Duration expiryDuration;
  try {
    expiryDuration=expiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=getAdjustedExpireTime(expiryDuration,now);
  return createRecordWithExpiry(key,value,expiryTime,now,disableWriteThrough,completionId,origin);
}",0.9652509652509652
46505,"public R readThroughRecord(Data key,long now){
  Object value=readThroughCache(key);
  if (value == null) {
    return null;
  }
  Duration expiryDuration;
  try {
    expiryDuration=defaultExpiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=expiryDuration.getAdjustedTime(now);
  if (isExpiredAt(expiryTime,now)) {
    return null;
  }
  return createRecord(key,value,expiryTime,IGNORE_COMPLETION);
}","public R readThroughRecord(Data key,long now){
  Object value=readThroughCache(key);
  if (value == null) {
    return null;
  }
  Duration expiryDuration;
  try {
    expiryDuration=defaultExpiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=getAdjustedExpireTime(expiryDuration,now);
  if (isExpiredAt(expiryTime,now)) {
    return null;
  }
  return createRecord(key,value,expiryTime,IGNORE_COMPLETION);
}",0.9622641509433962
46506,"protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}","protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=getAdjustedExpireTime(expiryDuration,now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}",0.6741573033707865
46507,"public MulticastMemberInfo receive(){
  try {
    Object o;
    multicastSocket.receive(datagramPacketReceive);
    byte[] data=datagramPacketReceive.getData();
    MulticastMemberInfo multicastMemberInfo;
    ByteArrayInputStream bis=new ByteArrayInputStream(data);
    ObjectInputStream in;
    in=new ObjectInputStream(bis);
    o=in.readObject();
    multicastMemberInfo=(MulticastMemberInfo)o;
    IOUtil.closeResource(bis);
    IOUtil.closeResource(in);
    return multicastMemberInfo;
  }
 catch (  Exception e) {
  }
  return null;
}","public MulticastMemberInfo receive(){
  ObjectInputStream in=null;
  ByteArrayInputStream bis=null;
  try {
    Object o;
    multicastSocket.receive(datagramPacketReceive);
    byte[] data=datagramPacketReceive.getData();
    MulticastMemberInfo multicastMemberInfo;
    bis=new ByteArrayInputStream(data);
    in=new ObjectInputStream(bis);
    o=in.readObject();
    multicastMemberInfo=(MulticastMemberInfo)o;
    return multicastMemberInfo;
  }
 catch (  Exception e) {
    logger.finest(""String_Node_Str"" + e.getMessage());
  }
 finally {
    IOUtil.closeResource(bis);
    IOUtil.closeResource(in);
  }
  return null;
}",0.7043701799485861
46508,"public MulticastDiscoveryReceiver(MulticastSocket multicastSocket){
  this.multicastSocket=multicastSocket;
}","public MulticastDiscoveryReceiver(MulticastSocket multicastSocket,ILogger logger){
  this.multicastSocket=multicastSocket;
  this.logger=logger;
}",0.8549019607843137
46509,"public MulticastDiscoverySender(DiscoveryNode discoveryNode,MulticastSocket multicastSocket) throws IOException {
  this.discoveryNode=discoveryNode;
  this.multicastSocket=multicastSocket;
  if (discoveryNode != null) {
    multicastMemberInfo=new MulticastMemberInfo(discoveryNode.getPublicAddress().getHost(),discoveryNode.getPublicAddress().getPort());
  }
  initDatagramPacket();
}","public MulticastDiscoverySender(DiscoveryNode discoveryNode,MulticastSocket multicastSocket,ILogger logger) throws IOException {
  this.multicastSocket=multicastSocket;
  this.logger=logger;
  if (discoveryNode != null) {
    Address address=discoveryNode.getPublicAddress();
    multicastMemberInfo=new MulticastMemberInfo(address.getHost(),address.getPort());
  }
  initDatagramPacket();
}",0.4478764478764478
46510,"private void initDatagramPacket() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutput out;
  out=new ObjectOutputStream(bos);
  out.writeObject(multicastMemberInfo);
  byte[] yourBytes=bos.toByteArray();
  datagramPacket=new DatagramPacket(yourBytes,yourBytes.length,InetAddress.getByName(""String_Node_Str""),54327);
}","private void initDatagramPacket() throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutput out;
  out=new ObjectOutputStream(bos);
  out.writeObject(multicastMemberInfo);
  byte[] yourBytes=bos.toByteArray();
  datagramPacket=new DatagramPacket(yourBytes,yourBytes.length,multicastSocket.getInetAddress(),multicastSocket.getPort());
}",0.8928571428571429
46511,"@Override public void run(){
  while (!stop) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    try {
      send();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  while (!stop) {
    try {
      Thread.sleep(SLEEP_DURATION);
    }
 catch (    InterruptedException e) {
      logger.finest(""String_Node_Str"");
    }
    try {
      send();
    }
 catch (    IOException e) {
      logger.finest(e.getMessage());
    }
  }
}",0.376599634369287
46512,"private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,54327);
    String group=getOrDefault(MulticastProperties.GROUP,""String_Node_Str"");
    multicastSocket=new MulticastSocket(port);
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(255);
    multicastSocket.setReceiveBufferSize(64 * DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(64 * DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(3000);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.warning(e.getMessage());
  }
}","private void initializeMulticastSocket(){
  try {
    int port=getOrDefault(MulticastProperties.PORT,DEFAULT_MULTICAST_PORT);
    String group=getOrDefault(MulticastProperties.GROUP,DEFAULT_MULTICAST_GROUP);
    multicastSocket=new MulticastSocket(port);
    multicastSocket.setReuseAddress(true);
    multicastSocket.setTimeToLive(SOCKET_TIME_TO_LIVE);
    multicastSocket.setReceiveBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSendBufferSize(DATA_OUTPUT_BUFFER_SIZE);
    multicastSocket.setSoTimeout(SOCKET_TIMEOUT);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastDiscoverySender=new MulticastDiscoverySender(discoveryNode,multicastSocket,logger);
    multicastDiscoveryReceiver=new MulticastDiscoveryReceiver(multicastSocket,logger);
    if (discoveryNode != null) {
      isClient=false;
    }
  }
 catch (  Exception e) {
    logger.finest(e.getMessage());
  }
}",0.918552036199095
46513,"@Override public Iterable<DiscoveryNode> discoverNodes(){
  DiscoveryNode discoveryNode;
  MulticastMemberInfo multicastMemberInfo=multicastDiscoveryReceiver.receive();
  if (multicastMemberInfo == null)   return null;
  ArrayList<DiscoveryNode> arrayList=new ArrayList<DiscoveryNode>();
  try {
    discoveryNode=new SimpleDiscoveryNode(new Address(multicastMemberInfo.getHost(),multicastMemberInfo.getPort()));
    arrayList.add(discoveryNode);
  }
 catch (  UnknownHostException e) {
    logger.warning(e.getMessage());
  }
  return arrayList;
}","@Override public Iterable<DiscoveryNode> discoverNodes(){
  DiscoveryNode discoveryNode;
  MulticastMemberInfo multicastMemberInfo=multicastDiscoveryReceiver.receive();
  if (multicastMemberInfo == null) {
    return null;
  }
  ArrayList<DiscoveryNode> arrayList=new ArrayList<DiscoveryNode>();
  try {
    discoveryNode=new SimpleDiscoveryNode(new Address(multicastMemberInfo.getHost(),multicastMemberInfo.getPort()));
    arrayList.add(discoveryNode);
  }
 catch (  UnknownHostException e) {
    logger.finest(e.getMessage());
  }
  return arrayList;
}",0.9555757026291932
46514,"public MulticastDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> properties){
  super(logger,properties);
  this.discoveryNode=discoveryNode;
  this.properties=properties;
  this.logger=logger;
}","public MulticastDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> properties){
  super(logger,properties);
  this.discoveryNode=discoveryNode;
  this.logger=logger;
}",0.8744186046511628
46515,"@Override public DiscoveryStrategy newDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> properties){
  return new MulticastDiscoveryStrategy(discoveryNode,logger,properties);
}","@Override public DiscoveryStrategy newDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> prop){
  return new MulticastDiscoveryStrategy(discoveryNode,logger,prop);
}",0.9705882352941176
46516,"protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}","protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=getAdjustedExpireTime(expiryDuration,now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}",0.9701686121919584
46517,"protected R createRecordWithExpiry(Data key,Object value,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  Duration expiryDuration;
  try {
    expiryDuration=expiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=expiryDuration.getAdjustedTime(now);
  return createRecordWithExpiry(key,value,expiryTime,now,disableWriteThrough,completionId,origin);
}","protected R createRecordWithExpiry(Data key,Object value,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  Duration expiryDuration;
  try {
    expiryDuration=expiryPolicy.getExpiryForCreation();
  }
 catch (  Exception e) {
    expiryDuration=Duration.ETERNAL;
  }
  long expiryTime=getAdjustedExpireTime(expiryDuration,now);
  return createRecordWithExpiry(key,value,expiryTime,now,disableWriteThrough,completionId,origin);
}",0.9652509652509652
46518,"protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}","protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=getAdjustedExpireTime(expiryDuration,now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}",0.6741573033707865
46519,"protected R processExpiredEntry(Data key,R record,long expiryTime,long now,String source,String origin){
  boolean isExpired=isExpiredAt(expiryTime,now);
  if (!isExpired) {
    return record;
  }
  if (isStatisticsEnabled()) {
    statistics.increaseCacheExpiries(1);
  }
  R removedRecord=doRemoveRecord(key,source);
  Data keyEventData=toEventData(key);
  Data recordEventData=toEventData(removedRecord);
  onProcessExpiredEntry(key,removedRecord,expiryTime,now,source,origin);
  if (isEventsEnabled()) {
    publishEvent(createCacheExpiredEvent(keyEventData,recordEventData,CacheRecord.TIME_NOT_AVAILABLE,origin,IGNORE_COMPLETION));
  }
  return null;
}","protected R processExpiredEntry(Data key,R record,long expiryTime,long now,String source,String origin){
  if (!isExpiredAt(expiryTime,now)) {
    return record;
  }
  if (isStatisticsEnabled()) {
    statistics.increaseCacheExpiries(1);
  }
  R removedRecord=doRemoveRecord(key,source);
  Data keyEventData=toEventData(key);
  Data recordEventData=toEventData(removedRecord);
  onProcessExpiredEntry(key,removedRecord,expiryTime,now,source,origin);
  if (isEventsEnabled()) {
    publishEvent(createCacheExpiredEvent(keyEventData,recordEventData,CacheRecord.TIME_NOT_AVAILABLE,origin,IGNORE_COMPLETION));
  }
  return null;
}",0.9680436477007016
46520,"/** 
 * Extracts and validates the quantifier from the given path token
 * @param token    token from which the quantifier is retrieved
 * @param fullPath fullPath to which the token belongs - just for output
 * @return validated quantifier
 */
static int validateAndGetArrayQuantifierFromCurrentToken(String token,String fullPath){
  String quantifier=extractArgumentsFromAttributeName(token);
  if (quantifier == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + quantifier + ""String_Node_Str""+ fullPath);
  }
  int index=Integer.valueOf(quantifier);
  if (index < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str""+ fullPath);
  }
  return index;
}","/** 
 * Extracts and validates the quantifier from the given path token
 * @param token    token from which the quantifier is retrieved
 * @param fullPath fullPath to which the token belongs - just for output
 * @return validated quantifier
 */
static int validateAndGetArrayQuantifierFromCurrentToken(String token,String fullPath){
  String quantifier=extractArgumentsFromAttributeName(token);
  if (quantifier == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + fullPath);
  }
  int index=Integer.parseInt(quantifier);
  if (index < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + index + ""String_Node_Str""+ fullPath);
  }
  return index;
}",0.7678958785249458
46521,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  Object output=f.apply(input);
  shouldBackup=true;
  backup=nodeEngine.toData(output);
  atomicReferenceContainer.set(backup);
  response=output;
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Data originalData=atomicReferenceContainer.get();
  Object input=nodeEngine.toObject(originalData);
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(originalData,serializedOutput);
  if (shouldBackup) {
    backup=serializedOutput;
    atomicReferenceContainer.set(backup);
  }
  response=output;
}",0.5542168674698795
46522,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer reference=getReferenceContainer();
  Object input=nodeEngine.toObject(reference.get());
  Object output=f.apply(input);
  shouldBackup=!isEquals(input,output);
  if (shouldBackup) {
    backup=nodeEngine.toData(output);
    reference.set(backup);
  }
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer reference=getReferenceContainer();
  Data originalData=reference.get();
  Object input=nodeEngine.toObject(originalData);
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(originalData,serializedOutput);
  if (shouldBackup) {
    backup=serializedOutput;
    reference.set(backup);
  }
}",0.7088331515812432
46523,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  response=input;
  Object output=f.apply(input);
  shouldBackup=!isEquals(input,output);
  if (shouldBackup) {
    backup=nodeEngine.toData(output);
    atomicReferenceContainer.set(backup);
  }
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  response=atomicReferenceContainer.get();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(response,serializedOutput);
  if (shouldBackup) {
    atomicReferenceContainer.set(serializedOutput);
    backup=serializedOutput;
  }
}",0.7384615384615385
46524,"@Test public void getAndAlter_when_same_reference(){
  BitSet bitSet=new BitSet();
  IAtomicReference<BitSet> ref2=newInstance();
  ref2.set(bitSet);
  bitSet.set(100);
  assertEquals(bitSet,ref2.alterAndGet(new FailingFunctionAlter()));
  assertEquals(bitSet,ref2.get());
}","@Test public void getAndAlter_when_same_reference(){
  BitSet bitSet=new BitSet();
  IAtomicReference<BitSet> ref2=newInstance();
  ref2.set(bitSet);
  assertEquals(bitSet,ref2.getAndAlter(new FailingFunctionAlter()));
  bitSet.set(100);
  assertEquals(bitSet,ref2.get());
}",0.7481751824817519
46525,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  Object output=f.apply(input);
  shouldBackup=true;
  backup=nodeEngine.toData(output);
  atomicReferenceContainer.set(backup);
  response=output;
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Data originalData=atomicReferenceContainer.get();
  Object input=nodeEngine.toObject(originalData);
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(originalData,serializedOutput);
  if (shouldBackup) {
    backup=serializedOutput;
    atomicReferenceContainer.set(backup);
  }
  response=output;
}",0.5542168674698795
46526,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer reference=getReferenceContainer();
  Object input=nodeEngine.toObject(reference.get());
  Object output=f.apply(input);
  shouldBackup=!isEquals(input,output);
  if (shouldBackup) {
    backup=nodeEngine.toData(output);
    reference.set(backup);
  }
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer reference=getReferenceContainer();
  Data originalData=reference.get();
  Object input=nodeEngine.toObject(originalData);
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(originalData,serializedOutput);
  if (shouldBackup) {
    backup=serializedOutput;
    reference.set(backup);
  }
}",0.7088331515812432
46527,"@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  response=input;
  Object output=f.apply(input);
  shouldBackup=!isEquals(input,output);
  if (shouldBackup) {
    backup=nodeEngine.toData(output);
    atomicReferenceContainer.set(backup);
  }
}","@Override public void run() throws Exception {
  NodeEngine nodeEngine=getNodeEngine();
  IFunction f=nodeEngine.toObject(function);
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  response=atomicReferenceContainer.get();
  Object input=nodeEngine.toObject(atomicReferenceContainer.get());
  Object output=f.apply(input);
  Data serializedOutput=nodeEngine.toData(output);
  shouldBackup=!isEquals(response,serializedOutput);
  if (shouldBackup) {
    atomicReferenceContainer.set(serializedOutput);
    backup=serializedOutput;
  }
}",0.7384615384615385
46528,"@Test public void getAndAlter_when_same_reference(){
  BitSet bitSet=new BitSet();
  IAtomicReference<BitSet> ref2=newInstance();
  ref2.set(bitSet);
  bitSet.set(100);
  assertEquals(bitSet,ref2.alterAndGet(new FailingFunctionAlter()));
  assertEquals(bitSet,ref2.get());
}","@Test public void getAndAlter_when_same_reference(){
  BitSet bitSet=new BitSet();
  IAtomicReference<BitSet> ref2=newInstance();
  ref2.set(bitSet);
  assertEquals(bitSet,ref2.getAndAlter(new FailingFunctionAlter()));
  bitSet.set(100);
  assertEquals(bitSet,ref2.get());
}",0.7481751824817519
46529,"public AWSClient(AwsConfig awsConfig){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getSecretKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  endpoint=awsConfig.getHostHeader();
  if (awsConfig.getRegion() != null && awsConfig.getRegion().length() > 0) {
    setEndpoint(""String_Node_Str"" + awsConfig.getRegion() + ""String_Node_Str"");
  }
}","public AWSClient(AwsConfig awsConfig){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getSecretKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  endpoint=awsConfig.getHostHeader();
  if (awsConfig.getRegion() != null && awsConfig.getRegion().length() > 0) {
    if (!awsConfig.getHostHeader().startsWith(""String_Node_Str"")) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    setEndpoint(awsConfig.getHostHeader().replace(""String_Node_Str"",""String_Node_Str"" + awsConfig.getRegion() + ""String_Node_Str""));
  }
}",0.8557758031442242
46530,"private void tryGetDefaultIamRole(){
  if (!awsConfig.getIamRole().equals(""String_Node_Str"")) {
    return;
  }
  try {
    String query=""String_Node_Str"";
    URL url;
    url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    InputStreamReader is=new InputStreamReader(url.openStream(),""String_Node_Str"");
    BufferedReader reader=new BufferedReader(is);
    awsConfig.setIamRole(reader.readLine());
  }
 catch (  Exception e) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
}","private void tryGetDefaultIamRole() throws IOException {
  InputStreamReader is=null;
  BufferedReader reader=null;
  if (!awsConfig.getIamRole().equals(""String_Node_Str"")) {
    return;
  }
  try {
    String query=""String_Node_Str"";
    URL url;
    url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    is=new InputStreamReader(url.openStream(),""String_Node_Str"");
    reader=new BufferedReader(is);
    awsConfig.setIamRole(reader.readLine());
  }
 catch (  IOException e) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
 finally {
    if (is != null) {
      is.close();
    }
    if (reader != null) {
      reader.close();
    }
  }
}",0.7795744680851063
46531,"public DescribeInstances(AwsConfig awsConfig,String endpoint){
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  this.endpoint=endpoint;
  if (awsConfig.getIamRole() != null) {
    tryGetDefaultIamRole();
    getKeysFromIamRole();
  }
  rs=new EC2RequestSigner(awsConfig,timeStamp,endpoint);
  attributes.put(""String_Node_Str"",this.getClass().getSimpleName());
  attributes.put(""String_Node_Str"",DOC_VERSION);
  attributes.put(""String_Node_Str"",SIGNATURE_METHOD_V4);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  attributes.put(""String_Node_Str"",timeStamp);
  attributes.put(""String_Node_Str"",""String_Node_Str"");
  attributes.put(""String_Node_Str"",""String_Node_Str"");
}","public DescribeInstances(AwsConfig awsConfig,String endpoint) throws IOException {
  if (awsConfig == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (awsConfig.getAccessKey() == null && awsConfig.getIamRole() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.awsConfig=awsConfig;
  this.endpoint=endpoint;
  if (awsConfig.getIamRole() != null) {
    tryGetDefaultIamRole();
    getKeysFromIamRole();
  }
  rs=new EC2RequestSigner(awsConfig,timeStamp,endpoint);
  attributes.put(""String_Node_Str"",this.getClass().getSimpleName());
  attributes.put(""String_Node_Str"",DOC_VERSION);
  attributes.put(""String_Node_Str"",SIGNATURE_METHOD_V4);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  attributes.put(""String_Node_Str"",timeStamp);
  attributes.put(""String_Node_Str"",""String_Node_Str"");
  attributes.put(""String_Node_Str"",""String_Node_Str"");
}",0.9890350877192984
46532,"@Test public void test_whenProperConfig(){
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setAccessKey(""String_Node_Str"");
  awsConfig.setSecretKey(""String_Node_Str"");
  new DescribeInstances(awsConfig,""String_Node_Str"");
}","@Test public void test_whenProperConfig() throws IOException {
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setAccessKey(""String_Node_Str"");
  awsConfig.setSecretKey(""String_Node_Str"");
  new DescribeInstances(awsConfig,""String_Node_Str"");
}",0.9578059071729956
46533,"@Test(expected=IllegalArgumentException.class) public void test_whenAwsConfigIsNull(){
  new DescribeInstances(null,""String_Node_Str"");
}","@Test(expected=IllegalArgumentException.class) public void test_whenAwsConfigIsNull() throws IOException {
  new DescribeInstances(null,""String_Node_Str"");
}",0.9319727891156464
46534,"@Test(expected=IllegalArgumentException.class) public void test_whenAccessKeyNull(){
  new DescribeInstances(new AwsConfig(),""String_Node_Str"");
}","@Test(expected=IllegalArgumentException.class) public void test_whenAccessKeyNull() throws IOException {
  new DescribeInstances(new AwsConfig(),""String_Node_Str"");
}",0.935897435897436
46535,"@Test public void testSigning() throws NoSuchFieldException, IllegalAccessException {
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION).setHostHeader(TEST_HOST).setAccessKey(TEST_ACCESS_KEY).setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig,TEST_HOST);
  Field attributesField=di.getClass().getDeclaredField(""String_Node_Str"");
  attributesField.setAccessible(true);
  Map<String,String> attributes=(Map<String,String>)attributesField.get(di);
  attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE,TEST_HOST);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  String signature=rs.sign(TEST_SERVICE,attributes);
  assertEquals(TEST_SIGNATURE_EXPECTED,signature);
}","@Test public void testSigning() throws NoSuchFieldException, IllegalAccessException, IOException {
  AwsConfig awsConfig=new AwsConfig();
  awsConfig.setRegion(TEST_REGION).setHostHeader(TEST_HOST).setAccessKey(TEST_ACCESS_KEY).setSecretKey(TEST_SECRET_KEY);
  DescribeInstances di=new DescribeInstances(awsConfig,TEST_HOST);
  Field attributesField=di.getClass().getDeclaredField(""String_Node_Str"");
  attributesField.setAccessible(true);
  Map<String,String> attributes=(Map<String,String>)attributesField.get(di);
  attributes.put(""String_Node_Str"",TEST_REQUEST_DATE);
  EC2RequestSigner rs=new EC2RequestSigner(awsConfig,TEST_REQUEST_DATE,TEST_HOST);
  attributes.put(""String_Node_Str"",rs.createFormattedCredential());
  String signature=rs.sign(TEST_SERVICE,attributes);
  assertEquals(TEST_SIGNATURE_EXPECTED,signature);
}",0.9920876445526476
46536,"/** 
 * Creates a server instance of Hazelcast If user pass print.port property, Server writes port number of the instance to file. The file name is the same as print.port property.
 * @param args none
 */
public static void main(String[] args) throws FileNotFoundException {
  HazelcastInstance hz=Hazelcast.newHazelcastInstance(null);
  printMemberPort(hz);
}","/** 
 * Creates a server instance of Hazelcast If user pass print.port property, Server writes port number of the instance to file. The file name is the same as print.port property.
 * @param args none
 */
public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
  HazelcastInstance hz=Hazelcast.newHazelcastInstance(null);
  printMemberPort(hz);
}",0.9601063829787234
46537,"public static void printMemberPort(HazelcastInstance hz) throws FileNotFoundException {
  if (System.getProperty(""String_Node_Str"") != null) {
    PrintWriter printWriter=null;
    try {
      printWriter=new PrintWriter(""String_Node_Str"" + File.pathSeparator + System.getProperty(""String_Node_Str""));
      printWriter.println(hz.getCluster().getLocalMember().getAddress().getPort());
    }
 catch (    FileNotFoundException e) {
      throw e;
    }
 finally {
      if (printWriter != null) {
        printWriter.close();
      }
    }
  }
}","public static void printMemberPort(HazelcastInstance hz) throws FileNotFoundException, UnsupportedEncodingException {
  if (System.getProperty(""String_Node_Str"") != null) {
    PrintWriter printWriter=null;
    try {
      printWriter=new PrintWriter(""String_Node_Str"" + File.pathSeparator + System.getProperty(""String_Node_Str""),""String_Node_Str"");
      printWriter.println(hz.getCluster().getLocalMember().getAddress().getPort());
    }
 catch (    FileNotFoundException e) {
      throw e;
    }
 finally {
      if (printWriter != null) {
        printWriter.close();
      }
    }
  }
}",0.9577464788732394
46538,"@Test public void testMain() throws FileNotFoundException {
  StartServer.main(new String[]{});
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}","@Test public void testMain() throws FileNotFoundException, UnsupportedEncodingException {
  StartServer.main(new String[]{});
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}",0.9142857142857144
46539,"@Override public int hashCode(){
  return super.hashCode();
}","@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + partitionId;
  result=31 * result + (member != null ? member.hashCode() : 0);
  return result;
}",0.4672131147540984
46540,"@Override public boolean equals(Object o){
  return super.equals(o);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof CachePartitionEventData)) {
    return false;
  }
  if (!super.equals(o)) {
    return false;
  }
  CachePartitionEventData that=(CachePartitionEventData)o;
  if (partitionId != that.partitionId) {
    return false;
  }
  if (member != null ? !member.equals(that.member) : that.member != null) {
    return false;
  }
  return true;
}",0.2362204724409448
46541,"@Override public int hashCode(){
  return super.hashCode();
}","@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + partitionId;
  result=31 * result + (member != null ? member.hashCode() : 0);
  return result;
}",0.4672131147540984
46542,"@Override public boolean equals(Object o){
  return super.equals(o);
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof CachePartitionEventData)) {
    return false;
  }
  if (!super.equals(o)) {
    return false;
  }
  CachePartitionEventData that=(CachePartitionEventData)o;
  if (partitionId != that.partitionId) {
    return false;
  }
  if (member != null ? !member.equals(that.member) : that.member != null) {
    return false;
  }
  return true;
}",0.2362204724409448
46543,"@Override public void run() throws Exception {
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  returnValue=atomicReferenceContainer.compareAndSet(expect,update);
  shouldBackup=!returnValue;
}","@Override public void run() throws Exception {
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  returnValue=atomicReferenceContainer.compareAndSet(expect,update);
  shouldBackup=returnValue;
}",0.997752808988764
46544,"@Override public void run() throws Exception {
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  returnValue=atomicReferenceContainer.compareAndSet(expect,update);
  shouldBackup=!returnValue;
}","@Override public void run() throws Exception {
  AtomicReferenceContainer atomicReferenceContainer=getReferenceContainer();
  returnValue=atomicReferenceContainer.compareAndSet(expect,update);
  shouldBackup=returnValue;
}",0.997752808988764
46545,"private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=url.toURI();
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}","private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=new URI(url.toExternalForm().replace(""String_Node_Str"",""String_Node_Str""));
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}",0.961439588688946
46546,"private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=url.toURI();
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}","private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=new URI(url.toExternalForm().replace(""String_Node_Str"",""String_Node_Str""));
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}",0.961439588688946
46547,"Connection get(int timeout) throws Throwable {
  countDownLatch.await(timeout,TimeUnit.MILLISECONDS);
  if (connection != null) {
    return connection;
  }
  if (throwable != null) {
    throw throwable;
  }
  throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
}","Connection get(int timeout) throws Throwable {
  if (!countDownLatch.await(timeout,TimeUnit.MILLISECONDS)) {
    throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
  if (connection != null) {
    return connection;
  }
  throw throwable;
}",0.6129032258064516
46548,"Connection get(int timeout) throws Throwable {
  countDownLatch.await(timeout,TimeUnit.MILLISECONDS);
  if (connection != null) {
    return connection;
  }
  if (throwable != null) {
    throw throwable;
  }
  throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
}","Connection get(int timeout) throws Throwable {
  if (!countDownLatch.await(timeout,TimeUnit.MILLISECONDS)) {
    throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
  if (connection != null) {
    return connection;
  }
  throw throwable;
}",0.6129032258064516
46549,"@Override public void destroyDistributedObject(String name){
  mapServiceContext.destroyMap(name);
  nodeEngine.getEventService().deregisterAllListeners(SERVICE_NAME,name);
  Map<String,MapContainer> mapContainers=mapServiceContext.getMapContainers();
  MapContainer mapContainer=mapContainers.get(name);
  if (mapContainer != null) {
    mapServiceContext.getNearCacheProvider().destroyNearCache(name);
    mapContainer.getMapStoreContext().stop();
    mapContainers.remove(name);
  }
}","@Override public void destroyDistributedObject(String name){
  mapServiceContext.destroyMap(name);
}",0.3407155025553662
46550,"@Override public void destroyMap(final String mapName){
  localMapStatsProvider.destroyLocalMapStatsImpl(mapName);
  final PartitionContainer[] containers=partitionContainers;
  final Semaphore semaphore=new Semaphore(0);
  InternalOperationService operationService=(InternalOperationService)nodeEngine.getOperationService();
  for (  final PartitionContainer container : containers) {
    MapPartitionDestroyTask partitionDestroyTask=new MapPartitionDestroyTask(container,mapName,semaphore);
    operationService.execute(partitionDestroyTask);
  }
  try {
    semaphore.tryAcquire(containers.length,DESTROY_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","@Override public void destroyMap(String mapName){
  MapContainer mapContainer=mapContainers.get(mapName);
  if (mapContainer == null) {
    return;
  }
  mapContainer.getMapStoreContext().stop();
  nearCacheProvider.destroyNearCache(mapName);
  nodeEngine.getEventService().deregisterAllListeners(SERVICE_NAME,mapName);
  localMapStatsProvider.destroyLocalMapStatsImpl(mapContainer.getName());
  destroyPartitionsAndMapContainer(mapContainer);
}",0.1692573402417962
46551,"public void destroyMap(String name){
  RecordStore recordStore=maps.remove(name);
  if (recordStore != null) {
    recordStore.destroy();
  }
 else {
    clearLockStore(name);
  }
}","public void destroyMap(MapContainer mapContainer){
  String name=mapContainer.getName();
  RecordStore recordStore=maps.remove(name);
  if (recordStore != null) {
    recordStore.destroy();
  }
 else {
    clearLockStore(name);
  }
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  mapServiceContext.removeMapContainer(mapContainer);
}",0.6617375231053605
46552,"public MapPartitionDestroyTask(PartitionContainer partitionContainer,String mapName,Semaphore semaphore){
  this.partitionContainer=partitionContainer;
  this.mapName=mapName;
  this.semaphore=semaphore;
}","public MapPartitionDestroyTask(PartitionContainer container,MapContainer mapContainer,Semaphore semaphore){
  this.partitionContainer=container;
  this.mapContainer=mapContainer;
  this.semaphore=semaphore;
}",0.7893462469733656
46553,"@Override public void run(){
  partitionContainer.destroyMap(mapName);
  semaphore.release();
}","@Override public void run(){
  partitionContainer.destroyMap(mapContainer);
  semaphore.release();
}",0.953846153846154
46554,"Connection get(int timeout) throws Throwable {
  countDownLatch.await(timeout,TimeUnit.MILLISECONDS);
  if (connection != null) {
    return connection;
  }
  if (throwable != null) {
    throw throwable;
  }
  throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
}","Connection get(int timeout) throws Throwable {
  if (!countDownLatch.await(timeout,TimeUnit.MILLISECONDS)) {
    throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
  if (connection != null) {
    return connection;
  }
  throw throwable;
}",0.6129032258064516
46555,"Connection get(int timeout) throws Throwable {
  countDownLatch.await(timeout,TimeUnit.MILLISECONDS);
  if (connection != null) {
    return connection;
  }
  if (throwable != null) {
    throw throwable;
  }
  throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
}","Connection get(int timeout) throws Throwable {
  if (!countDownLatch.await(timeout,TimeUnit.MILLISECONDS)) {
    throw new TimeoutException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
  if (connection != null) {
    return connection;
  }
  throw throwable;
}",0.6129032258064516
46556,"@Override public void destroyDistributedObject(String name){
  mapServiceContext.destroyMap(name);
  nodeEngine.getEventService().deregisterAllListeners(SERVICE_NAME,name);
  Map<String,MapContainer> mapContainers=mapServiceContext.getMapContainers();
  MapContainer mapContainer=mapContainers.get(name);
  if (mapContainer != null) {
    mapServiceContext.getNearCacheProvider().destroyNearCache(name);
    mapContainer.getMapStoreContext().stop();
    mapContainers.remove(name);
  }
}","@Override public void destroyDistributedObject(String name){
  mapServiceContext.destroyMap(name);
}",0.3407155025553662
46557,"@Override public void destroyMap(final String mapName){
  localMapStatsProvider.destroyLocalMapStatsImpl(mapName);
  final PartitionContainer[] containers=partitionContainers;
  final Semaphore semaphore=new Semaphore(0);
  InternalOperationService operationService=(InternalOperationService)nodeEngine.getOperationService();
  for (  final PartitionContainer container : containers) {
    MapPartitionDestroyTask partitionDestroyTask=new MapPartitionDestroyTask(container,mapName,semaphore);
    operationService.execute(partitionDestroyTask);
  }
  try {
    semaphore.tryAcquire(containers.length,DESTROY_TIMEOUT_SECONDS,TimeUnit.SECONDS);
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","@Override public void destroyMap(String mapName){
  MapContainer mapContainer=mapContainers.get(mapName);
  if (mapContainer == null) {
    return;
  }
  mapContainer.getMapStoreContext().stop();
  nearCacheProvider.destroyNearCache(mapName);
  nodeEngine.getEventService().deregisterAllListeners(SERVICE_NAME,mapName);
  localMapStatsProvider.destroyLocalMapStatsImpl(mapContainer.getName());
  destroyPartitionsAndMapContainer(mapContainer);
}",0.1692573402417962
46558,"public void destroyMap(String name){
  RecordStore recordStore=maps.remove(name);
  if (recordStore != null) {
    recordStore.destroy();
  }
 else {
    clearLockStore(name);
  }
}","public void destroyMap(MapContainer mapContainer){
  String name=mapContainer.getName();
  RecordStore recordStore=maps.remove(name);
  if (recordStore != null) {
    recordStore.destroy();
  }
 else {
    clearLockStore(name);
  }
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  mapServiceContext.removeMapContainer(mapContainer);
}",0.6617375231053605
46559,"public MapPartitionDestroyTask(PartitionContainer partitionContainer,String mapName,Semaphore semaphore){
  this.partitionContainer=partitionContainer;
  this.mapName=mapName;
  this.semaphore=semaphore;
}","public MapPartitionDestroyTask(PartitionContainer container,MapContainer mapContainer,Semaphore semaphore){
  this.partitionContainer=container;
  this.mapContainer=mapContainer;
  this.semaphore=semaphore;
}",0.7893462469733656
46560,"@Override public void run(){
  partitionContainer.destroyMap(mapName);
  semaphore.release();
}","@Override public void run(){
  partitionContainer.destroyMap(mapContainer);
  semaphore.release();
}",0.953846153846154
46561,"private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}","private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  if (!alive) {
    throw new HazelcastException(""String_Node_Str"");
  }
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}",0.9327188940092166
46562,"public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  ((InternalSerializationService)serializationService).dispose();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
  metricsRegistry.shutdown();
  performanceMonitor.shutdown();
}","public void doShutdown(){
  proxyManager.destroy();
  connectionManager.shutdown();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  ((InternalSerializationService)serializationService).dispose();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
  metricsRegistry.shutdown();
  performanceMonitor.shutdown();
}",0.93713163064833
46563,"void listenMembershipEvents(Address ownerConnectionAddress){
  initialListFetchedLatch=new CountDownLatch(1);
  try {
    ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
    Connection connection=connectionManager.getConnection(ownerConnectionAddress);
    if (connection == null) {
      throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
    }
    ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
    invocation.setEventHandler(this);
    invocation.invokeUrgent().get();
    waitInitialMemberListFetched();
  }
 catch (  Exception e) {
    if (client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.warning(""String_Node_Str"" + ownerConnectionAddress,e);
      }
 else {
        logger.warning(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ e.toString());
      }
    }
  }
}","void listenMembershipEvents(Address ownerConnectionAddress) throws Exception {
  initialListFetchedLatch=new CountDownLatch(1);
  ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
  Connection connection=connectionManager.getConnection(ownerConnectionAddress);
  if (connection == null) {
    throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
  }
  ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
  invocation.setEventHandler(this);
  invocation.invokeUrgent().get();
  waitInitialMemberListFetched();
}",0.7586657946370177
46564,"protected void connectToCluster() throws Exception {
  connectToOne();
  clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
}","public void connectToCluster() throws Exception {
  ownerConnectionAddress=null;
  final ClientNetworkConfig networkConfig=client.getClientConfig().getNetworkConfig();
  final int connAttemptLimit=networkConfig.getConnectionAttemptLimit();
  final int connectionAttemptPeriod=networkConfig.getConnectionAttemptPeriod();
  final int connectionAttemptLimit=connAttemptLimit == 0 ? Integer.MAX_VALUE : connAttemptLimit;
  int attempt=0;
  Set<InetSocketAddress> triedAddresses=new HashSet<InetSocketAddress>();
  while (attempt < connectionAttemptLimit) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    attempt++;
    final long nextTry=Clock.currentTimeMillis() + connectionAttemptPeriod;
    boolean isConnected=connect(triedAddresses);
    if (isConnected) {
      return;
    }
    final long remainingTime=nextTry - Clock.currentTimeMillis();
    logger.warning(String.format(""String_Node_Str"",Math.max(0,remainingTime),attempt,connectionAttemptLimit));
    if (remainingTime > 0) {
      try {
        Thread.sleep(remainingTime);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + triedAddresses);
}",0.0842963970088375
46565,"public void shutdown(){
  clusterExecutor.shutdown();
}","public void shutdown(){
  clusterExecutor.shutdown();
  try {
    boolean success=clusterExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      logger.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"",e);
  }
}",0.2644230769230769
46566,"private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      ownerConnectionAddress=connection.getEndPoint();
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}","private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      ownerConnectionAddress=connection.getEndPoint();
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}",0.7204464738711314
46567,"@Test @Ignore public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}","@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t.getCause() instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}",0.9927784112504752
46568,"private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}","private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  if (!alive) {
    throw new HazelcastException(""String_Node_Str"");
  }
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}",0.9327188940092166
46569,"public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
}","public void doShutdown(){
  proxyManager.destroy();
  connectionManager.shutdown();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
}",0.9227053140096618
46570,"void listenMembershipEvents(Address ownerConnectionAddress){
  initialListFetchedLatch=new CountDownLatch(1);
  try {
    ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
    Connection connection=connectionManager.getConnection(ownerConnectionAddress);
    if (connection == null) {
      throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
    }
    ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
    invocation.setEventHandler(this);
    invocation.invokeUrgent().get();
    waitInitialMemberListFetched();
  }
 catch (  Exception e) {
    if (client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.warning(""String_Node_Str"" + ownerConnectionAddress,e);
      }
 else {
        LOGGER.warning(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ e.toString());
      }
    }
  }
}","void listenMembershipEvents(Address ownerConnectionAddress) throws Exception {
  initialListFetchedLatch=new CountDownLatch(1);
  ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
  Connection connection=connectionManager.getConnection(ownerConnectionAddress);
  if (connection == null) {
    throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
  }
  ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
  invocation.setEventHandler(this);
  invocation.invokeUrgent().get();
  waitInitialMemberListFetched();
}",0.7586657946370177
46571,"protected void connectToCluster() throws Exception {
  connectToOne();
  clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
}","public void connectToCluster() throws Exception {
  ownerConnectionAddress=null;
  final ClientNetworkConfig networkConfig=client.getClientConfig().getNetworkConfig();
  final int connAttemptLimit=networkConfig.getConnectionAttemptLimit();
  final int connectionAttemptPeriod=networkConfig.getConnectionAttemptPeriod();
  final int connectionAttemptLimit=connAttemptLimit == 0 ? Integer.MAX_VALUE : connAttemptLimit;
  int attempt=0;
  Set<InetSocketAddress> triedAddresses=new HashSet<InetSocketAddress>();
  while (attempt < connectionAttemptLimit) {
    if (!client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"");
      }
      break;
    }
    attempt++;
    final long nextTry=Clock.currentTimeMillis() + connectionAttemptPeriod;
    boolean isConnected=connect(triedAddresses);
    if (isConnected) {
      return;
    }
    final long remainingTime=nextTry - Clock.currentTimeMillis();
    LOGGER.warning(String.format(""String_Node_Str"",Math.max(0,remainingTime),attempt,connectionAttemptLimit));
    if (remainingTime > 0) {
      try {
        Thread.sleep(remainingTime);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + triedAddresses);
}",0.080217539089055
46572,"public void shutdown(){
  clusterExecutor.shutdown();
}","public void shutdown(){
  clusterExecutor.shutdown();
  try {
    boolean success=clusterExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}",0.2644230769230769
46573,"private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      ownerConnectionAddress=connection.getEndPoint();
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      LOGGER.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}","private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"");
      }
      break;
    }
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      ownerConnectionAddress=connection.getEndPoint();
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      LOGGER.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}",0.7204464738711314
46574,"@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}","@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t.getCause() instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}",0.995806328631338
46575,"private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}","private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  if (!alive) {
    throw new HazelcastException(""String_Node_Str"");
  }
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}",0.9327188940092166
46576,"public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  ((InternalSerializationService)serializationService).dispose();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
  metricsRegistry.shutdown();
  performanceMonitor.shutdown();
}","public void doShutdown(){
  proxyManager.destroy();
  connectionManager.shutdown();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  ((InternalSerializationService)serializationService).dispose();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
  metricsRegistry.shutdown();
  performanceMonitor.shutdown();
}",0.93713163064833
46577,"void listenMembershipEvents(Address ownerConnectionAddress){
  initialListFetchedLatch=new CountDownLatch(1);
  try {
    ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
    Connection connection=connectionManager.getConnection(ownerConnectionAddress);
    if (connection == null) {
      throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
    }
    ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
    invocation.setEventHandler(this);
    invocation.invokeUrgent().get();
    waitInitialMemberListFetched();
  }
 catch (  Exception e) {
    if (client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.warning(""String_Node_Str"" + ownerConnectionAddress,e);
      }
 else {
        logger.warning(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ e.toString());
      }
    }
  }
}","void listenMembershipEvents(Address ownerConnectionAddress) throws Exception {
  initialListFetchedLatch=new CountDownLatch(1);
  ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
  Connection connection=connectionManager.getConnection(ownerConnectionAddress);
  if (connection == null) {
    throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
  }
  ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
  invocation.setEventHandler(this);
  invocation.invokeUrgent().get();
  waitInitialMemberListFetched();
}",0.7586657946370177
46578,"protected void connectToCluster() throws Exception {
  connectToOne();
  clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
}","public void connectToCluster() throws Exception {
  ownerConnectionAddress=null;
  final ClientNetworkConfig networkConfig=client.getClientConfig().getNetworkConfig();
  final int connAttemptLimit=networkConfig.getConnectionAttemptLimit();
  final int connectionAttemptPeriod=networkConfig.getConnectionAttemptPeriod();
  final int connectionAttemptLimit=connAttemptLimit == 0 ? Integer.MAX_VALUE : connAttemptLimit;
  int attempt=0;
  Set<InetSocketAddress> triedAddresses=new HashSet<InetSocketAddress>();
  while (attempt < connectionAttemptLimit) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    attempt++;
    final long nextTry=Clock.currentTimeMillis() + connectionAttemptPeriod;
    boolean isConnected=connect(triedAddresses);
    if (isConnected) {
      return;
    }
    final long remainingTime=nextTry - Clock.currentTimeMillis();
    logger.warning(String.format(""String_Node_Str"",Math.max(0,remainingTime),attempt,connectionAttemptLimit));
    if (remainingTime > 0) {
      try {
        Thread.sleep(remainingTime);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + triedAddresses);
}",0.0842963970088375
46579,"public void shutdown(){
  clusterExecutor.shutdown();
}","public void shutdown(){
  clusterExecutor.shutdown();
  try {
    boolean success=clusterExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      logger.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    logger.warning(""String_Node_Str"",e);
  }
}",0.2644230769230769
46580,"private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      ownerConnectionAddress=connection.getEndPoint();
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}","private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
      break;
    }
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      ownerConnectionAddress=connection.getEndPoint();
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      logger.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}",0.7204464738711314
46581,"@Test @Ignore public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}","@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t.getCause() instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}",0.9927784112504752
46582,"private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}","private AuthenticationFuture triggerConnect(Address target,boolean asOwner){
  if (!alive) {
    throw new HazelcastException(""String_Node_Str"");
  }
  AuthenticationFuture callback=new AuthenticationFuture();
  AuthenticationFuture firstCallback=connectionsInProgress.putIfAbsent(target,callback);
  if (firstCallback == null) {
    ClientExecutionServiceImpl executionService=(ClientExecutionServiceImpl)client.getClientExecutionService();
    executionService.executeInternal(new InitConnectionTask(target,asOwner,callback));
    return callback;
  }
  return firstCallback;
}",0.9327188940092166
46583,"public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
}","public void doShutdown(){
  proxyManager.destroy();
  connectionManager.shutdown();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
}",0.9227053140096618
46584,"void listenMembershipEvents(Address ownerConnectionAddress){
  initialListFetchedLatch=new CountDownLatch(1);
  try {
    ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
    Connection connection=connectionManager.getConnection(ownerConnectionAddress);
    if (connection == null) {
      throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
    }
    ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
    invocation.setEventHandler(this);
    invocation.invokeUrgent().get();
    waitInitialMemberListFetched();
  }
 catch (  Exception e) {
    if (client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.warning(""String_Node_Str"" + ownerConnectionAddress,e);
      }
 else {
        LOGGER.warning(""String_Node_Str"" + ownerConnectionAddress + ""String_Node_Str""+ e.toString());
      }
    }
  }
}","void listenMembershipEvents(Address ownerConnectionAddress) throws Exception {
  initialListFetchedLatch=new CountDownLatch(1);
  ClientMessage clientMessage=ClientAddMembershipListenerCodec.encodeRequest(false);
  Connection connection=connectionManager.getConnection(ownerConnectionAddress);
  if (connection == null) {
    throw new IllegalStateException(""String_Node_Str"" + ownerConnectionAddress);
  }
  ClientInvocation invocation=new ClientInvocation(client,clientMessage,connection);
  invocation.setEventHandler(this);
  invocation.invokeUrgent().get();
  waitInitialMemberListFetched();
}",0.7586657946370177
46585,"protected void connectToCluster() throws Exception {
  connectToOne();
  clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
}","public void connectToCluster() throws Exception {
  ownerConnectionAddress=null;
  final ClientNetworkConfig networkConfig=client.getClientConfig().getNetworkConfig();
  final int connAttemptLimit=networkConfig.getConnectionAttemptLimit();
  final int connectionAttemptPeriod=networkConfig.getConnectionAttemptPeriod();
  final int connectionAttemptLimit=connAttemptLimit == 0 ? Integer.MAX_VALUE : connAttemptLimit;
  int attempt=0;
  Set<InetSocketAddress> triedAddresses=new HashSet<InetSocketAddress>();
  while (attempt < connectionAttemptLimit) {
    if (!client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"");
      }
      break;
    }
    attempt++;
    final long nextTry=Clock.currentTimeMillis() + connectionAttemptPeriod;
    boolean isConnected=connect(triedAddresses);
    if (isConnected) {
      return;
    }
    final long remainingTime=nextTry - Clock.currentTimeMillis();
    LOGGER.warning(String.format(""String_Node_Str"",Math.max(0,remainingTime),attempt,connectionAttemptLimit));
    if (remainingTime > 0) {
      try {
        Thread.sleep(remainingTime);
      }
 catch (      InterruptedException e) {
        break;
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + triedAddresses);
}",0.080217539089055
46586,"public void shutdown(){
  clusterExecutor.shutdown();
}","public void shutdown(){
  clusterExecutor.shutdown();
  try {
    boolean success=clusterExecutor.awaitTermination(TERMINATE_TIMEOUT_SECONDS,TimeUnit.SECONDS);
    if (!success) {
      LOGGER.warning(""String_Node_Str"" + TERMINATE_TIMEOUT_SECONDS + ""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    LOGGER.warning(""String_Node_Str"",e);
  }
}",0.2644230769230769
46587,"private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      ownerConnectionAddress=connection.getEndPoint();
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      LOGGER.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}","private boolean connect(Set<InetSocketAddress> triedAddresses) throws Exception {
  final Collection<InetSocketAddress> socketAddresses=getSocketAddresses();
  for (  InetSocketAddress inetSocketAddress : socketAddresses) {
    if (!client.getLifecycleService().isRunning()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"");
      }
      break;
    }
    try {
      triedAddresses.add(inetSocketAddress);
      Address address=new Address(inetSocketAddress);
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + address);
      }
      Connection connection=connectionManager.getOrConnect(address,true);
      ownerConnectionAddress=connection.getEndPoint();
      clientMembershipListener.listenMembershipEvents(ownerConnectionAddress);
      fireConnectionEvent(LifecycleEvent.LifecycleState.CLIENT_CONNECTED);
      return true;
    }
 catch (    Exception e) {
      Level level=e instanceof AuthenticationException ? Level.WARNING : Level.FINEST;
      LOGGER.log(level,""String_Node_Str"" + inetSocketAddress,e);
    }
  }
  return false;
}",0.7204464738711314
46588,"@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}","@Test public void executionCallback_FailOnShutdown(){
  HazelcastInstance server=hazelcastFactory.newHazelcastInstance();
  HazelcastInstance client=hazelcastFactory.newHazelcastClient();
  final CountDownLatch disconnectedLatch=new CountDownLatch(1);
  IMap<Object,Object> map=client.getMap(randomName());
  client.getLifecycleService().addLifecycleListener(new LifecycleListener(){
    @Override public void stateChanged(    LifecycleEvent event){
      if (event.getState() == LifecycleEvent.LifecycleState.CLIENT_DISCONNECTED) {
        disconnectedLatch.countDown();
      }
    }
  }
);
  server.shutdown();
  assertOpenEventually(disconnectedLatch);
  final CountDownLatch shutdownLatch=new CountDownLatch(1);
  int n=100;
  final CountDownLatch errorLatch=new CountDownLatch(n);
  for (int i=0; i < n; i++) {
    map.submitToKey(randomString(),new DummyEntryProcessor(),new ExecutionCallback(){
      @Override public void onResponse(      Object response){
      }
      @Override public void onFailure(      Throwable t){
        if (t.getCause() instanceof HazelcastClientNotActiveException) {
          shutdownLatch.countDown();
        }
        errorLatch.countDown();
      }
    }
);
  }
  assertOpenEventually(""String_Node_Str"",shutdownLatch);
  assertOpenEventually(""String_Node_Str"",errorLatch);
}",0.995806328631338
46589,"@Override public final void run(){
  nodeExtension.onThreadStart(this);
  try {
    doRun();
  }
 catch (  InterruptedException e) {
    EmptyStatement.ignore(e);
  }
catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(t);
  }
 finally {
    nodeExtension.onThreadStop(this);
  }
}","@Override public final void run(){
  nodeExtension.onThreadStart(this);
  try {
    doRun();
  }
 catch (  Throwable t) {
    inspectOutputMemoryError(t);
    logger.severe(t);
  }
 finally {
    nodeExtension.onThreadStop(this);
  }
}",0.411873840445269
46590,"private void doRun() throws Exception {
  while (!shutdown) {
    Object task=queue.take();
    processedTotal.inc();
    if (task.getClass() == Packet.class) {
      processPacket((Packet)task);
    }
 else     if (task instanceof Operation) {
      processOperation((Operation)task);
    }
 else     if (task instanceof PartitionSpecificRunnable) {
      processPartitionSpecificRunnable((PartitionSpecificRunnable)task);
    }
 else     if (task instanceof Runnable) {
      processRunnable((Runnable)task);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + task);
    }
  }
}","private void doRun(){
  while (!shutdown) {
    Object task;
    try {
      task=queue.take();
    }
 catch (    InterruptedException e) {
      continue;
    }
    processedTotal.inc();
    if (task.getClass() == Packet.class) {
      processPacket((Packet)task);
    }
 else     if (task instanceof Operation) {
      processOperation((Operation)task);
    }
 else     if (task instanceof PartitionSpecificRunnable) {
      processPartitionSpecificRunnable((PartitionSpecificRunnable)task);
    }
 else     if (task instanceof Runnable) {
      processRunnable((Runnable)task);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + task);
    }
  }
}",0.9166666666666666
46591,"/** 
 * Gets the call timeout in milliseconds. For example, if a call should be executed within 60 seconds orotherwise it should be aborted, then the call-timeout is 60000 milliseconds. For more information about the default value, see  {@link com.hazelcast.instance.GroupProperties#OPERATION_CALL_TIMEOUT_MILLIS}
 * @return the call timeout in milliseconds.
 * @see #setCallTimeout(long)
 * @see com.hazelcast.spi.OperationAccessor#setCallTimeout(Operation,long)
 */
public final long getCallTimeout(){
  return callTimeout;
}","/** 
 * Gets the call timeout in milliseconds. For example, if a call should be executed within 60 seconds orotherwise it should be aborted, then the call-timeout is 60000 milliseconds. For more information about the default value, see  {@link com.hazelcast.instance.GroupProperty#OPERATION_CALL_TIMEOUT_MILLIS}
 * @return the call timeout in milliseconds.
 * @see #setCallTimeout(long)
 * @see com.hazelcast.spi.OperationAccessor#setCallTimeout(Operation,long)
 */
public final long getCallTimeout(){
  return callTimeout;
}",0.9961977186311788
46592,"/** 
 * Allocate a new slot array with the requested size and move all the assigned slots from the current array into the new one.
 */
private void resizeTo(long newCapacity){
  final long oldCapacity=capacity();
  final long oldAllocatedSize=HEADER_SIZE + oldCapacity * slotLength;
  final MemoryAllocator oldMalloc;
  final long oldAddress;
  if (auxMalloc != null) {
    oldAddress=move(baseAddress,oldCapacity,malloc,auxMalloc);
    oldMalloc=auxMalloc;
    auxAllocateAndAdjustFields(oldAddress,oldCapacity,newCapacity);
  }
 else {
    oldMalloc=malloc;
    oldAddress=baseAddress;
    allocateArrayAndAdjustFields(size(),newCapacity);
  }
  final long mask=mask();
  for (long slot=oldCapacity; --slot >= 0; ) {
    if (isAssigned(oldAddress,slot)) {
      long key1=key1OfSlot(oldAddress,slot);
      long key2=key2OfSlot(oldAddress,slot);
      long valueAddress=slotBase(oldAddress,slot) + valueOffset;
      long newSlot=hash(key1,key2) & mask;
      while (isAssigned(newSlot)) {
        newSlot=(newSlot + 1) & mask;
      }
      putKey(newSlot,key1,key2);
      mem.copyMemory(valueAddress,valueAddrOfSlot(newSlot),valueLength);
    }
  }
  oldMalloc.free(oldAddress - HEADER_SIZE,oldAllocatedSize);
}","/** 
 * Allocate a new slot array with the requested size and move all the assigned slots from the current array into the new one.
 */
private void resizeTo(long newCapacity){
  final long oldCapacity=capacity();
  final long oldAllocatedSize=HEADER_SIZE + oldCapacity * slotLength;
  final MemoryAllocator oldMalloc;
  final long oldAddress;
  if (auxMalloc != null) {
    final long size=size();
    oldAddress=move(baseAddress,oldCapacity,malloc,auxMalloc);
    oldMalloc=auxMalloc;
    auxAllocateAndAdjustFields(oldAddress,size,oldCapacity,newCapacity);
  }
 else {
    oldMalloc=malloc;
    oldAddress=baseAddress;
    allocateArrayAndAdjustFields(size(),newCapacity);
  }
  final long mask=mask();
  for (long slot=oldCapacity; --slot >= 0; ) {
    if (isAssigned(oldAddress,slot)) {
      long key1=key1OfSlot(oldAddress,slot);
      long key2=key2OfSlot(oldAddress,slot);
      long valueAddress=slotBase(oldAddress,slot) + valueOffset;
      long newSlot=hash(key1,key2) & mask;
      while (isAssigned(newSlot)) {
        newSlot=(newSlot + 1) & mask;
      }
      putKey(newSlot,key1,key2);
      mem.copyMemory(valueAddress,valueAddrOfSlot(newSlot),valueLength);
    }
  }
  oldMalloc.free(oldAddress - HEADER_SIZE,oldAllocatedSize);
}",0.9866125760649088
46593,"private void auxAllocateAndAdjustFields(long auxAddress,long oldCapacity,long newCapacity){
  try {
    allocateArrayAndAdjustFields(size(),newCapacity);
  }
 catch (  Error e) {
    try {
      baseAddress=move(auxAddress,oldCapacity,auxMalloc,malloc);
    }
 catch (    Error e1) {
      baseAddress=NULL_ADDRESS;
    }
    throw e;
  }
}","private void auxAllocateAndAdjustFields(long auxAddress,long size,long oldCapacity,long newCapacity){
  try {
    allocateArrayAndAdjustFields(size,newCapacity);
  }
 catch (  Error e) {
    try {
      baseAddress=move(auxAddress,oldCapacity,auxMalloc,malloc);
    }
 catch (    Error e1) {
      baseAddress=NULL_ADDRESS;
    }
    throw e;
  }
}",0.9825581395348836
46594,"private void waitIfAlreadyShuttingDown(){
  if (!shuttingDown.get()) {
    return;
  }
  logger.info(""String_Node_Str"");
  while (state != NodeState.SHUT_DOWN) {
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      logger.warning(""String_Node_Str"");
      return;
    }
  }
}","private void waitIfAlreadyShuttingDown(){
  if (!shuttingDown.get()) {
    return;
  }
  logger.info(""String_Node_Str"");
  while (state != NodeState.SHUT_DOWN) {
    try {
      Thread.sleep(SLEEP_DURATION);
    }
 catch (    InterruptedException e) {
      logger.warning(""String_Node_Str"");
      return;
    }
  }
}",0.9728
46595,"/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  this.serializationService=nodeEngine.getSerializationService();
  this.recordFactoryConstructor=createRecordFactoryConstructor(serializationService);
  this.queryEntryFactory=new QueryEntryFactory(mapConfig.getCacheDeserializedValues());
  initWanReplication(nodeEngine);
  this.nearCacheSizeEstimator=createNearCacheSizeEstimator(mapConfig.getNearCacheConfig());
  this.mapStoreContext=createMapStoreContext(this);
  this.mapStoreContext.start();
  this.extractors=new Extractors(mapConfig.getMapAttributeConfigs());
  this.indexes=new Indexes(serializationService,extractors);
  this.evictor=createEvictor(mapServiceContext);
  this.memberNearCacheInvalidationEnabled=isNearCacheEnabled() && mapConfig.getNearCacheConfig().isInvalidateOnChange();
}","/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  this.serializationService=nodeEngine.getSerializationService();
  this.recordFactoryConstructor=createRecordFactoryConstructor(serializationService);
  this.queryEntryFactory=new QueryEntryFactory(mapConfig.getCacheDeserializedValues());
  initWanReplication(nodeEngine);
  this.nearCacheSizeEstimator=createNearCacheSizeEstimator(mapConfig.getNearCacheConfig());
  this.mapStoreContext=createMapStoreContext(this);
  this.mapStoreContext.start();
  this.extractors=new Extractors(mapConfig.getMapAttributeConfigs());
  this.indexes=new Indexes(serializationService,extractors);
  this.evictor=createEvictor(mapServiceContext);
  this.memberNearCacheInvalidationEnabled=hasMemberNearCache() && mapConfig.getNearCacheConfig().isInvalidateOnChange();
}",0.9933481152993348
46596,"public Object getFromNearCache(String mapName,Data key){
  MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  if (!mapContainer.isNearCacheEnabled()) {
    return null;
  }
  NearCache nearCache=getOrCreateNearCache(mapName);
  return nearCache.get(key);
}","public Object getFromNearCache(String mapName,Data key){
  MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  if (!mapContainer.hasMemberNearCache()) {
    return null;
  }
  NearCache nearCache=getOrCreateNearCache(mapName);
  return nearCache.get(key);
}",0.9422382671480144
46597,"@Override public void run(){
  if (mapContainer.isNearCacheEnabled()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,null,keys);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","@Override public void run(){
  if (mapContainer.hasMemberNearCache()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,null,keys);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.9621749408983452
46598,"@Override public void run(){
  if (mapContainer.isNearCacheEnabled()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,key,null);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","@Override public void run(){
  if (mapContainer.hasMemberNearCache()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,key,null);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.962085308056872
46599,"private void addInvalidation(Data dataKey){
  if (mapContainer.isNearCacheEnabled()) {
    if (invalidationKeys == null) {
      invalidationKeys=new ArrayList<Data>(mapEntries.size());
    }
    invalidationKeys.add(dataKey);
  }
}","private void addInvalidation(Data dataKey){
  if (mapContainer.isInvalidationEnabled()) {
    if (invalidationKeys == null) {
      invalidationKeys=new ArrayList<Data>(mapEntries.size());
    }
    invalidationKeys.add(dataKey);
  }
}",0.9550321199143468
46600,"private void addInvalidation(Data key){
  if (!mapContainer.isNearCacheEnabled()) {
    return;
  }
  if (invalidationKeys == null) {
    invalidationKeys=new ArrayList<Data>(keyValueSequence.size() / 2);
  }
  invalidationKeys.add(key);
}","private void addInvalidation(Data key){
  if (!mapContainer.isInvalidationEnabled()) {
    return;
  }
  if (invalidationKeys == null) {
    invalidationKeys=new ArrayList<Data>(keyValueSequence.size() / 2);
  }
  invalidationKeys.add(key);
}",0.9563409563409564
46601,"public Object getInternal(Data key){
  MapService mapService=getService();
  boolean nearCacheEnabled=mapService.getMapServiceContext().getMapContainer(name).isNearCacheEnabled();
  if (nearCacheEnabled) {
    Object cached=mapService.getMapServiceContext().getNearCacheProvider().getFromNearCache(name,key);
    if (cached != null) {
      if (cached.equals(NULL_OBJECT)) {
        cached=null;
      }
      return cached;
    }
  }
  MapOperation operation=operationProvider.createGetOperation(name,key);
  operation.setThreadId(ThreadUtil.getThreadId());
  NodeEngine nodeEngine=getNodeEngine();
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  try {
    Future future=nodeEngine.getOperationService().invokeOnPartition(MapService.SERVICE_NAME,operation,partitionId);
    return future.get();
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","public Object getInternal(Data key){
  MapService mapService=getService();
  boolean nearCacheEnabled=mapService.getMapServiceContext().getMapContainer(name).hasMemberNearCache();
  if (nearCacheEnabled) {
    Object cached=mapService.getMapServiceContext().getNearCacheProvider().getFromNearCache(name,key);
    if (cached != null) {
      if (cached.equals(NULL_OBJECT)) {
        cached=null;
      }
      return cached;
    }
  }
  MapOperation operation=operationProvider.createGetOperation(name,key);
  operation.setThreadId(ThreadUtil.getThreadId());
  NodeEngine nodeEngine=getNodeEngine();
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  try {
    Future future=nodeEngine.getOperationService().invokeOnPartition(MapService.SERVICE_NAME,operation,partitionId);
    return future.get();
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}",0.9910313901345292
46602,"public Node(HazelcastInstanceImpl hazelcastInstance,Config config,NodeContext nodeContext){
  this.hazelcastInstance=hazelcastInstance;
  this.config=config;
  this.liteMember=config.isLiteMember();
  this.configClassLoader=config.getClassLoader();
  this.groupProperties=new GroupProperties(config);
  this.buildInfo=BuildInfoProvider.getBuildInfo();
  String loggingType=groupProperties.getString(GroupProperty.LOGGING_TYPE);
  loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,buildInfo);
  final AddressPicker addressPicker=nodeContext.createAddressPicker(this);
  try {
    addressPicker.pickAddress();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
  final ServerSocketChannel serverSocketChannel=addressPicker.getServerSocketChannel();
  try {
    address=addressPicker.getPublicAddress();
    final Map<String,Object> memberAttributes=findMemberAttributes(config.getMemberAttributeConfig().asReadOnly());
    localMember=new MemberImpl(address,true,createMemberUuid(address),hazelcastInstance,memberAttributes,liteMember);
    loggingService.setThisMember(localMember);
    logger=loggingService.getLogger(Node.class.getName());
    hazelcastThreadGroup=new HazelcastThreadGroup(hazelcastInstance.getName(),logger,configClassLoader);
    this.nodeExtension=createNodeExtension(nodeContext);
    nodeExtension.beforeStart();
    serializationService=nodeExtension.createSerializationService();
    securityContext=config.getSecurityConfig().isEnabled() ? nodeExtension.getSecurityContext() : null;
    nodeEngine=new NodeEngineImpl(this);
    clientEngine=new ClientEngineImpl(this);
    connectionManager=nodeContext.createConnectionManager(this,serverSocketChannel);
    partitionService=new InternalPartitionServiceImpl(this);
    clusterService=new ClusterServiceImpl(this);
    textCommandService=new TextCommandServiceImpl(this);
    nodeExtension.printNodeInfo();
    multicastService=createMulticastService(addressPicker.getBindAddress(),this,config,logger);
    discoveryService=createDiscoveryService(config);
    joiner=nodeContext.createJoiner(this);
  }
 catch (  Throwable e) {
    try {
      serverSocketChannel.close();
    }
 catch (    Throwable ignored) {
    }
    throw ExceptionUtil.rethrow(e);
  }
}","public Node(HazelcastInstanceImpl hazelcastInstance,Config config,NodeContext nodeContext){
  this.hazelcastInstance=hazelcastInstance;
  this.config=config;
  this.liteMember=config.isLiteMember();
  this.configClassLoader=config.getClassLoader();
  this.groupProperties=new GroupProperties(config);
  this.buildInfo=BuildInfoProvider.getBuildInfo();
  String loggingType=groupProperties.getString(GroupProperty.LOGGING_TYPE);
  loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,buildInfo);
  final AddressPicker addressPicker=nodeContext.createAddressPicker(this);
  try {
    addressPicker.pickAddress();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
  final ServerSocketChannel serverSocketChannel=addressPicker.getServerSocketChannel();
  try {
    address=addressPicker.getPublicAddress();
    final Map<String,Object> memberAttributes=findMemberAttributes(config.getMemberAttributeConfig().asReadOnly());
    localMember=new MemberImpl(address,true,createMemberUuid(address),hazelcastInstance,memberAttributes,liteMember);
    loggingService.setThisMember(localMember);
    logger=loggingService.getLogger(Node.class.getName());
    hazelcastThreadGroup=new HazelcastThreadGroup(hazelcastInstance.getName(),logger,configClassLoader);
    this.nodeExtension=createNodeExtension(nodeContext);
    nodeExtension.printNodeInfo();
    nodeExtension.beforeStart();
    serializationService=nodeExtension.createSerializationService();
    securityContext=config.getSecurityConfig().isEnabled() ? nodeExtension.getSecurityContext() : null;
    nodeEngine=new NodeEngineImpl(this);
    clientEngine=new ClientEngineImpl(this);
    connectionManager=nodeContext.createConnectionManager(this,serverSocketChannel);
    partitionService=new InternalPartitionServiceImpl(this);
    clusterService=new ClusterServiceImpl(this);
    textCommandService=new TextCommandServiceImpl(this);
    multicastService=createMulticastService(addressPicker.getBindAddress(),this,config,logger);
    discoveryService=createDiscoveryService(config);
    joiner=nodeContext.createJoiner(this);
  }
 catch (  Throwable e) {
    try {
      serverSocketChannel.close();
    }
 catch (    Throwable ignored) {
    }
    throw ExceptionUtil.rethrow(e);
  }
}",0.7922134733158355
46603,"@Test public void verifyMethods() throws Exception {
  TestNodeContext nodeContext=new TestNodeContext();
  NodeExtension nodeExtension=nodeContext.getNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),nodeContext);
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}","@Test public void verifyMethods() throws Exception {
  TestNodeContext nodeContext=new TestNodeContext();
  NodeExtension nodeExtension=nodeContext.getNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),nodeContext);
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}",0.9277708592777086
46604,"/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  this.serializationService=nodeEngine.getSerializationService();
  this.recordFactoryConstructor=createRecordFactoryConstructor(serializationService);
  this.queryEntryFactory=new QueryEntryFactory(mapConfig.getCacheDeserializedValues());
  initWanReplication(nodeEngine);
  this.nearCacheSizeEstimator=createNearCacheSizeEstimator(mapConfig.getNearCacheConfig());
  this.extractors=new Extractors(mapConfig.getMapAttributeConfigs());
  this.indexes=new Indexes(serializationService,extractors);
  this.evictor=createEvictor(mapConfig,mapServiceContext);
  this.memberNearCacheInvalidationEnabled=isNearCacheEnabled() && mapConfig.getNearCacheConfig().isInvalidateOnChange();
  this.mapStoreContext=createMapStoreContext(this);
  this.mapStoreContext.start();
}","/** 
 * Operations which are done in this constructor should obey the rules defined in the method comment   {@link com.hazelcast.spi.PostJoinAwareService#getPostJoinOperation()}Otherwise undesired situations, like deadlocks, may appear.
 */
public MapContainer(final String name,final MapConfig mapConfig,final MapServiceContext mapServiceContext){
  this.name=name;
  this.mapConfig=mapConfig;
  this.mapServiceContext=mapServiceContext;
  NodeEngine nodeEngine=mapServiceContext.getNodeEngine();
  this.partitioningStrategy=createPartitioningStrategy();
  this.quorumName=mapConfig.getQuorumName();
  this.serializationService=nodeEngine.getSerializationService();
  this.recordFactoryConstructor=createRecordFactoryConstructor(serializationService);
  this.queryEntryFactory=new QueryEntryFactory(mapConfig.getCacheDeserializedValues());
  initWanReplication(nodeEngine);
  this.nearCacheSizeEstimator=createNearCacheSizeEstimator(mapConfig.getNearCacheConfig());
  this.extractors=new Extractors(mapConfig.getMapAttributeConfigs());
  this.indexes=new Indexes(serializationService,extractors);
  this.evictor=createEvictor(mapConfig,mapServiceContext);
  this.memberNearCacheInvalidationEnabled=hasMemberNearCache() && mapConfig.getNearCacheConfig().isInvalidateOnChange();
  this.mapStoreContext=createMapStoreContext(this);
  this.mapStoreContext.start();
}",0.9933969185619956
46605,"public Object getFromNearCache(String mapName,Data key){
  MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  if (!mapContainer.isNearCacheEnabled()) {
    return null;
  }
  NearCache nearCache=getOrCreateNearCache(mapName);
  return nearCache.get(key);
}","public Object getFromNearCache(String mapName,Data key){
  MapContainer mapContainer=mapServiceContext.getMapContainer(mapName);
  if (!mapContainer.hasMemberNearCache()) {
    return null;
  }
  NearCache nearCache=getOrCreateNearCache(mapName);
  return nearCache.get(key);
}",0.9422382671480144
46606,"@Override public void run(){
  if (mapContainer.isNearCacheEnabled()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,null,keys);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","@Override public void run(){
  if (mapContainer.hasMemberNearCache()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,null,keys);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.9621749408983452
46607,"@Override public void run(){
  if (mapContainer.isNearCacheEnabled()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,key,null);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}","@Override public void run(){
  if (mapContainer.hasMemberNearCache()) {
    NearCacheProvider nearCacheProvider=mapServiceContext.getNearCacheProvider();
    NearCacheInvalidator nearCacheInvalidator=nearCacheProvider.getNearCacheInvalidator();
    ((AbstractNearCacheInvalidator)nearCacheInvalidator).invalidateLocal(name,key,null);
  }
 else {
    getLogger().warning(""String_Node_Str"" + name + ""String_Node_Str"");
  }
}",0.962085308056872
46608,"private void addInvalidation(Data dataKey){
  if (mapContainer.isNearCacheEnabled()) {
    if (invalidationKeys == null) {
      invalidationKeys=new ArrayList<Data>(mapEntries.size());
    }
    invalidationKeys.add(dataKey);
  }
}","private void addInvalidation(Data dataKey){
  if (mapContainer.isInvalidationEnabled()) {
    if (invalidationKeys == null) {
      invalidationKeys=new ArrayList<Data>(mapEntries.size());
    }
    invalidationKeys.add(dataKey);
  }
}",0.9550321199143468
46609,"private void addInvalidation(Data key){
  if (!mapContainer.isNearCacheEnabled()) {
    return;
  }
  if (invalidationKeys == null) {
    invalidationKeys=new ArrayList<Data>(keyValueSequence.size() / 2);
  }
  invalidationKeys.add(key);
}","private void addInvalidation(Data key){
  if (!mapContainer.isInvalidationEnabled()) {
    return;
  }
  if (invalidationKeys == null) {
    invalidationKeys=new ArrayList<Data>(keyValueSequence.size() / 2);
  }
  invalidationKeys.add(key);
}",0.9563409563409564
46610,"public Object getInternal(Data key){
  MapService mapService=getService();
  boolean nearCacheEnabled=mapService.getMapServiceContext().getMapContainer(name).isNearCacheEnabled();
  if (nearCacheEnabled) {
    Object cached=mapService.getMapServiceContext().getNearCacheProvider().getFromNearCache(name,key);
    if (cached != null) {
      if (cached.equals(NULL_OBJECT)) {
        cached=null;
      }
      return cached;
    }
  }
  MapOperation operation=operationProvider.createGetOperation(name,key);
  operation.setThreadId(ThreadUtil.getThreadId());
  NodeEngine nodeEngine=getNodeEngine();
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  try {
    Future future=nodeEngine.getOperationService().invokeOnPartition(MapService.SERVICE_NAME,operation,partitionId);
    return future.get();
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}","public Object getInternal(Data key){
  MapService mapService=getService();
  boolean nearCacheEnabled=mapService.getMapServiceContext().getMapContainer(name).hasMemberNearCache();
  if (nearCacheEnabled) {
    Object cached=mapService.getMapServiceContext().getNearCacheProvider().getFromNearCache(name,key);
    if (cached != null) {
      if (cached.equals(NULL_OBJECT)) {
        cached=null;
      }
      return cached;
    }
  }
  MapOperation operation=operationProvider.createGetOperation(name,key);
  operation.setThreadId(ThreadUtil.getThreadId());
  NodeEngine nodeEngine=getNodeEngine();
  int partitionId=nodeEngine.getPartitionService().getPartitionId(key);
  try {
    Future future=nodeEngine.getOperationService().invokeOnPartition(MapService.SERVICE_NAME,operation,partitionId);
    return future.get();
  }
 catch (  Throwable t) {
    throw ExceptionUtil.rethrow(t);
  }
}",0.9910313901345292
46611,"public Node(HazelcastInstanceImpl hazelcastInstance,Config config,NodeContext nodeContext){
  this.hazelcastInstance=hazelcastInstance;
  this.config=config;
  this.liteMember=config.isLiteMember();
  this.configClassLoader=config.getClassLoader();
  this.groupProperties=new GroupProperties(config);
  this.buildInfo=BuildInfoProvider.getBuildInfo();
  String loggingType=groupProperties.getString(GroupProperty.LOGGING_TYPE);
  loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,buildInfo);
  final AddressPicker addressPicker=nodeContext.createAddressPicker(this);
  try {
    addressPicker.pickAddress();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
  final ServerSocketChannel serverSocketChannel=addressPicker.getServerSocketChannel();
  try {
    address=addressPicker.getPublicAddress();
    final Map<String,Object> memberAttributes=findMemberAttributes(config.getMemberAttributeConfig().asReadOnly());
    localMember=new MemberImpl(address,true,createMemberUuid(address),hazelcastInstance,memberAttributes,liteMember);
    loggingService.setThisMember(localMember);
    logger=loggingService.getLogger(Node.class.getName());
    hazelcastThreadGroup=new HazelcastThreadGroup(hazelcastInstance.getName(),logger,configClassLoader);
    this.nodeExtension=nodeContext.createNodeExtension(this);
    nodeExtension.beforeStart();
    serializationService=nodeExtension.createSerializationService();
    securityContext=config.getSecurityConfig().isEnabled() ? nodeExtension.getSecurityContext() : null;
    nodeEngine=new NodeEngineImpl(this);
    clientEngine=new ClientEngineImpl(this);
    connectionManager=nodeContext.createConnectionManager(this,serverSocketChannel);
    partitionService=new InternalPartitionServiceImpl(this);
    clusterService=new ClusterServiceImpl(this);
    textCommandService=new TextCommandServiceImpl(this);
    nodeExtension.printNodeInfo();
    multicastService=createMulticastService(addressPicker.getBindAddress(),this,config,logger);
    discoveryService=createDiscoveryService(config);
    joiner=nodeContext.createJoiner(this);
  }
 catch (  Throwable e) {
    try {
      serverSocketChannel.close();
    }
 catch (    Throwable ignored) {
    }
    throw ExceptionUtil.rethrow(e);
  }
}","public Node(HazelcastInstanceImpl hazelcastInstance,Config config,NodeContext nodeContext){
  this.hazelcastInstance=hazelcastInstance;
  this.config=config;
  this.liteMember=config.isLiteMember();
  this.configClassLoader=config.getClassLoader();
  this.groupProperties=new GroupProperties(config);
  this.buildInfo=BuildInfoProvider.getBuildInfo();
  String loggingType=groupProperties.getString(GroupProperty.LOGGING_TYPE);
  loggingService=new LoggingServiceImpl(config.getGroupConfig().getName(),loggingType,buildInfo);
  final AddressPicker addressPicker=nodeContext.createAddressPicker(this);
  try {
    addressPicker.pickAddress();
  }
 catch (  Throwable e) {
    throw ExceptionUtil.rethrow(e);
  }
  final ServerSocketChannel serverSocketChannel=addressPicker.getServerSocketChannel();
  try {
    address=addressPicker.getPublicAddress();
    final Map<String,Object> memberAttributes=findMemberAttributes(config.getMemberAttributeConfig().asReadOnly());
    localMember=new MemberImpl(address,true,createMemberUuid(address),hazelcastInstance,memberAttributes,liteMember);
    loggingService.setThisMember(localMember);
    logger=loggingService.getLogger(Node.class.getName());
    hazelcastThreadGroup=new HazelcastThreadGroup(hazelcastInstance.getName(),logger,configClassLoader);
    this.nodeExtension=nodeContext.createNodeExtension(this);
    nodeExtension.printNodeInfo();
    nodeExtension.beforeStart();
    serializationService=nodeExtension.createSerializationService();
    securityContext=config.getSecurityConfig().isEnabled() ? nodeExtension.getSecurityContext() : null;
    nodeEngine=new NodeEngineImpl(this);
    clientEngine=new ClientEngineImpl(this);
    connectionManager=nodeContext.createConnectionManager(this,serverSocketChannel);
    partitionService=new InternalPartitionServiceImpl(this);
    clusterService=new ClusterServiceImpl(this);
    textCommandService=new TextCommandServiceImpl(this);
    multicastService=createMulticastService(addressPicker.getBindAddress(),this,config,logger);
    discoveryService=createDiscoveryService(config);
    joiner=nodeContext.createJoiner(this);
  }
 catch (  Throwable e) {
    try {
      serverSocketChannel.close();
    }
 catch (    Throwable ignored) {
    }
    throw ExceptionUtil.rethrow(e);
  }
}",0.7926669576604103
46612,"@Test public void verifyMethods() throws Exception {
  TestNodeContext nodeContext=new TestNodeContext();
  NodeExtension nodeExtension=nodeContext.getNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),nodeContext);
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}","@Test public void verifyMethods() throws Exception {
  TestNodeContext nodeContext=new TestNodeContext();
  NodeExtension nodeExtension=nodeContext.getNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),nodeContext);
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}",0.9277708592777086
46613,"public CollectionPrepareBackupOperation(String name,long[] itemIds,String transactionId){
  super(name);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}","@SuppressFBWarnings(""String_Node_Str"") public CollectionPrepareBackupOperation(String name,long[] itemIds,String transactionId){
  super(name);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}",0.894878706199461
46614,"public CollectionPrepareOperation(int partitionId,String name,String serviceName,long[] itemIds,String transactionId){
  super(name);
  setPartitionId(partitionId);
  setServiceName(serviceName);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}","@SuppressFBWarnings(""String_Node_Str"") public CollectionPrepareOperation(int partitionId,String name,String serviceName,long[] itemIds,String transactionId){
  super(name);
  setPartitionId(partitionId);
  setServiceName(serviceName);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}",0.929475587703436
46615,"public CollectionRollbackBackupOperation(String name,long[] itemIds){
  super(name);
  this.itemIds=itemIds;
}","@SuppressFBWarnings(""String_Node_Str"") public CollectionRollbackBackupOperation(String name,long[] itemIds){
  super(name);
  this.itemIds=itemIds;
}",0.8494208494208494
46616,"public CollectionRollbackOperation(int partitionId,String name,String serviceName,long[] itemIds){
  super(name);
  setPartitionId(partitionId);
  setServiceName(serviceName);
  this.itemIds=itemIds;
}","@SuppressFBWarnings(""String_Node_Str"") public CollectionRollbackOperation(int partitionId,String name,String serviceName,long[] itemIds){
  super(name);
  setPartitionId(partitionId);
  setServiceName(serviceName);
  this.itemIds=itemIds;
}",0.91156462585034
46617,"public TxnPrepareBackupOperation(String name,long[] itemIds,String transactionId){
  super(name);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}","@SuppressFBWarnings(""String_Node_Str"") public TxnPrepareBackupOperation(String name,long[] itemIds,String transactionId){
  super(name);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}",0.8907563025210085
46618,"public TxnPrepareOperation(int partitionId,String name,long[] itemIds,String transactionId){
  super(name);
  setPartitionId(partitionId);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}","@SuppressFBWarnings(""String_Node_Str"") public TxnPrepareOperation(int partitionId,String name,long[] itemIds,String transactionId){
  super(name);
  setPartitionId(partitionId);
  this.itemIds=itemIds;
  this.transactionId=transactionId;
}",0.9111617312072892
46619,"public TxnRollbackBackupOperation(String name,long[] itemIds){
  super(name);
  this.itemIds=itemIds;
}","@SuppressFBWarnings(""String_Node_Str"") public TxnRollbackBackupOperation(String name,long[] itemIds){
  super(name);
  this.itemIds=itemIds;
}",0.8408163265306122
46620,"public TxnRollbackOperation(int partitionId,String name,long[] itemIds){
  super(name);
  setPartitionId(partitionId);
  this.itemIds=itemIds;
}","@SuppressFBWarnings(""String_Node_Str"") public TxnRollbackOperation(int partitionId,String name,long[] itemIds){
  super(name);
  setPartitionId(partitionId);
  this.itemIds=itemIds;
}",0.8807339449541285
46621,"protected Object putInternal(final K key,final V value,final ExpiryPolicy expiryPolicy,final boolean isGet,final boolean withCompletionEvent,final boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),putResponseDecoder);
  if (!async) {
    try {
      Object response=delegatingFuture.get();
      if (nearCache != null) {
        if (cacheOnUpdate) {
          storeInNearCache(keyData,valueData,value);
        }
 else {
          invalidateNearCache(keyData);
        }
      }
      if (statisticsEnabled) {
        handleStatisticsOnPut(isGet,start,response);
      }
      return response;
    }
 catch (    Throwable e) {
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
 else {
    if (nearCache != null || statisticsEnabled) {
      delegatingFuture.andThen(new ExecutionCallback<Object>(){
        @Override public void onResponse(        Object responseData){
          if (nearCache != null) {
            if (cacheOnUpdate) {
              storeInNearCache(keyData,valueData,value);
            }
 else {
              invalidateNearCache(keyData);
            }
          }
          if (statisticsEnabled) {
            handleStatisticsOnPut(isGet,start,responseData);
          }
        }
        @Override public void onFailure(        Throwable t){
        }
      }
);
    }
    return delegatingFuture;
  }
}","protected Object putInternal(final K key,final V value,final ExpiryPolicy expiryPolicy,final boolean isGet,final boolean withCompletionEvent,final boolean async){
  final long start=System.nanoTime();
  ensureOpen();
  validateNotNull(key,value);
  CacheProxyUtil.validateConfiguredTypes(cacheConfig,key,value);
  final Data keyData=toData(key);
  final Data valueData=toData(value);
  final Data expiryPolicyData=toData(expiryPolicy);
  final int completionId=withCompletionEvent ? nextCompletionId() : -1;
  ClientMessage request=CachePutCodec.encodeRequest(nameWithPrefix,keyData,valueData,expiryPolicyData,isGet,completionId);
  ClientInvocationFuture future;
  try {
    future=invoke(request,keyData,completionId);
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  if (!async) {
    try {
      ClientDelegatingFuture delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),putResponseDecoder);
      Object response=delegatingFuture.get();
      if (nearCache != null) {
        if (cacheOnUpdate) {
          storeInNearCache(keyData,valueData,value);
        }
 else {
          invalidateNearCache(keyData);
        }
      }
      if (statisticsEnabled) {
        handleStatisticsOnPut(isGet,start,response);
      }
      return response;
    }
 catch (    Throwable e) {
      throw ExceptionUtil.rethrowAllowedTypeFirst(e,CacheException.class);
    }
  }
 else {
    OneShotExecutionCallback oneShotExecutionCallback=null;
    if (nearCache != null || statisticsEnabled) {
      oneShotExecutionCallback=new OneShotExecutionCallback(){
        @Override protected void onResponseInternal(        Object responseData){
          if (nearCache != null) {
            if (cacheOnUpdate) {
              storeInNearCache(keyData,valueData,value);
            }
 else {
              invalidateNearCache(keyData);
            }
          }
          if (statisticsEnabled) {
            handleStatisticsOnPut(isGet,start,responseData);
          }
        }
        @Override protected void onFailureInternal(        Throwable t){
        }
      }
;
    }
    ClientDelegatingFuture delegatingFuture;
    if (oneShotExecutionCallback != null) {
      delegatingFuture=new CallbackAwareClientDelegatingFuture(future,clientContext.getSerializationService(),putResponseDecoder,oneShotExecutionCallback);
      delegatingFuture.andThen(oneShotExecutionCallback);
    }
 else {
      delegatingFuture=new ClientDelegatingFuture(future,clientContext.getSerializationService(),putResponseDecoder);
    }
    return delegatingFuture;
  }
}",0.6626686656671664
46622,"/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!isRecordStoreExpirable()) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  final Object value=record.getValue();
  evict(key,backup);
  if (!backup) {
    doPostEvictionOperations(record,backup);
  }
  return null;
}","/** 
 * Check if record is reachable according to ttl or idle times. If not reachable return null.
 * @param record {@link com.hazelcast.map.impl.record.Record}
 * @return null if evictable.
 */
protected Record getOrNullIfExpired(Record record,long now,boolean backup){
  if (!isRecordStoreExpirable()) {
    return record;
  }
  if (record == null) {
    return null;
  }
  final Data key=record.getKey();
  if (isLocked(key)) {
    return record;
  }
  if (!isExpired(record,now,backup)) {
    return record;
  }
  evict(key,backup);
  if (!backup) {
    doPostEvictionOperations(record,backup);
  }
  return null;
}",0.9687010954616588
46623,"public AbstractHandler(TcpIpConnection connection,NonBlockingIOThread ioThread,int initialOps){
  this.connection=connection;
  this.ioThread=ioThread;
  this.selector=ioThread.getSelector();
  this.socketChannel=connection.getSocketChannelWrapper();
  this.connectionManager=connection.getConnectionManager();
  this.ioService=connectionManager.getIoService();
  this.logger=ioService.getLogger(this.getClass().getName());
  this.initialOps=initialOps;
}","public AbstractHandler(TcpIpConnection connection,NonBlockingIOThread ioThread,int initialOps){
  this.connection=connection;
  this.ioThread=ioThread;
  this.ioThreadId=ioThread.id;
  this.selector=ioThread.getSelector();
  this.socketChannel=connection.getSocketChannelWrapper();
  this.connectionManager=connection.getConnectionManager();
  this.ioService=connectionManager.getIoService();
  this.logger=ioService.getLogger(this.getClass().getName());
  this.initialOps=initialOps;
}",0.967056323060574
46624,"protected void updateCacheListenerConfigOnOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final Collection<Member> members=clientContext.getClusterService().getMemberList();
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  Member member : members) {
    try {
      final Address address=member.getAddress();
      Data configData=toData(cacheEntryListenerConfiguration);
      final ClientMessage request=CacheListenerRegistrationCodec.encodeRequest(nameWithPrefix,configData,isRegister,address);
      final ClientInvocation invocation=new ClientInvocation(client,request,address);
      final Future future=invocation.invoke();
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","protected void updateCacheListenerConfigOnOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final Collection<Member> members=clientContext.getClusterService().getMemberList();
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
  for (  Member member : members) {
    try {
      final Address address=member.getAddress();
      Data configData=toData(cacheEntryListenerConfiguration);
      final ClientMessage request=CacheListenerRegistrationCodec.encodeRequest(nameWithPrefix,configData,isRegister,address);
      final ClientInvocation invocation=new ClientInvocation(client,request,address);
      invocation.invoke();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}",0.7924094307073031
46625,"protected void deleteAllCacheEntry(Set<Data> keys){
  if (isWriteThrough() && cacheWriter != null && keys != null && !keys.isEmpty()) {
    Map<Object,Data> keysToDelete=new HashMap<Object,Data>();
    for (    Data key : keys) {
      final Object localKeyObj=dataToValue(key);
      keysToDelete.put(localKeyObj,key);
    }
    final Set<Object> keysObject=keysToDelete.keySet();
    try {
      cacheWriter.deleteAll(keysObject);
    }
 catch (    Exception e) {
      if (!(e instanceof CacheWriterException)) {
        throw new CacheWriterException(""String_Node_Str"",e);
      }
 else {
        throw (CacheWriterException)e;
      }
    }
 finally {
      for (      Object undeletedKey : keysObject) {
        final Data undeletedKeyData=keysToDelete.get(undeletedKey);
        keys.remove(undeletedKeyData);
      }
    }
  }
}","@SuppressFBWarnings(""String_Node_Str"") protected void deleteAllCacheEntry(Set<Data> keys){
  if (isWriteThrough() && cacheWriter != null && keys != null && !keys.isEmpty()) {
    Map<Object,Data> keysToDelete=new HashMap<Object,Data>();
    for (    Data key : keys) {
      final Object localKeyObj=dataToValue(key);
      keysToDelete.put(localKeyObj,key);
    }
    final Set<Object> keysObject=keysToDelete.keySet();
    try {
      cacheWriter.deleteAll(keysObject);
    }
 catch (    Exception e) {
      if (!(e instanceof CacheWriterException)) {
        throw new CacheWriterException(""String_Node_Str"",e);
      }
 else {
        throw (CacheWriterException)e;
      }
    }
 finally {
      for (      Object undeletedKey : keysObject) {
        final Data undeletedKeyData=keysToDelete.get(undeletedKey);
        keys.remove(undeletedKeyData);
      }
    }
  }
}",0.3156049094097019
46626,"@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Long> data=new HashMap<String,Long>();
  int partitionId=event.getPartitionId();
  for (  String name : containers.keySet()) {
    if (partitionId == getPartitionId(name)) {
      AtomicLongContainer container=containers.get(name);
      data.put(name,container.get());
    }
  }
  return data.isEmpty() ? null : new AtomicLongReplicationOperation(data);
}","@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Long> data=new HashMap<String,Long>();
  int partitionId=event.getPartitionId();
  for (  Map.Entry<String,AtomicLongContainer> containerEntry : containers.entrySet()) {
    String name=containerEntry.getKey();
    if (partitionId == getPartitionId(name)) {
      AtomicLongContainer container=containerEntry.getValue();
      data.put(name,container.get());
    }
  }
  return data.isEmpty() ? null : new AtomicLongReplicationOperation(data);
}",0.8920606601248885
46627,"@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Data> data=new HashMap<String,Data>();
  int partitionId=event.getPartitionId();
  for (  String name : containers.keySet()) {
    if (partitionId == getPartitionId(name)) {
      AtomicReferenceContainer atomicReferenceContainer=containers.get(name);
      Data value=atomicReferenceContainer.get();
      data.put(name,value);
    }
  }
  return data.isEmpty() ? null : new AtomicReferenceReplicationOperation(data);
}","@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Data> data=new HashMap<String,Data>();
  int partitionId=event.getPartitionId();
  for (  Map.Entry<String,AtomicReferenceContainer> containerEntry : containers.entrySet()) {
    String name=containerEntry.getKey();
    if (partitionId == getPartitionId(name)) {
      AtomicReferenceContainer atomicReferenceContainer=containerEntry.getValue();
      Data value=atomicReferenceContainer.get();
      data.put(name,value);
    }
  }
  return data.isEmpty() ? null : new AtomicReferenceReplicationOperation(data);
}",0.89792663476874
46628,"private void setMembersRef(Map<Address,MemberImpl> memberMap){
  memberMap=unmodifiableMap(memberMap);
  memberMap.values();
  memberMap.keySet();
  memberMap.entrySet();
  membersMapRef.set(memberMap);
  membersRef.set(unmodifiableSet(new LinkedHashSet<MemberImpl>(memberMap.values())));
}","@SuppressFBWarnings(""String_Node_Str"") private void setMembersRef(Map<Address,MemberImpl> memberMap){
  memberMap=unmodifiableMap(memberMap);
  memberMap.values();
  memberMap.keySet();
  memberMap.entrySet();
  membersMapRef.set(memberMap);
  membersRef.set(unmodifiableSet(new LinkedHashSet<MemberImpl>(memberMap.values())));
}",0.936995153473344
46629,"@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(MapSplitBrainHandlerService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  MapContainer mapContainer : recordMap.keySet()) {
    String mapName=mapContainer.getName();
    Collection<Record> recordList=recordMap.get(mapContainer);
    String mergePolicyName=mapContainer.getMapConfig().getMergePolicy();
    final MapMergePolicy finalMergePolicy=mapServiceContext.getMergePolicyProvider().getMergePolicy(mergePolicyName);
    MapOperationProvider operationProvider=mapServiceContext.getMapOperationProvider(mapName);
    for (    Record record : recordList) {
      recordCount++;
      EntryView entryView=EntryViews.createSimpleEntryView(record.getKey(),mapServiceContext.toData(record.getValue()),record);
      MapOperation operation=operationProvider.createMergeOperation(mapName,record.getKey(),entryView,finalMergePolicy,false);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKey());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,operation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}","@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(MapSplitBrainHandlerService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<MapContainer,Collection<Record>> recordMapEntry : recordMap.entrySet()) {
    MapContainer mapContainer=recordMapEntry.getKey();
    Collection<Record> recordList=recordMapEntry.getValue();
    String mergePolicyName=mapContainer.getMapConfig().getMergePolicy();
    String mapName=mapContainer.getName();
    final MapMergePolicy finalMergePolicy=mapServiceContext.getMergePolicyProvider().getMergePolicy(mergePolicyName);
    MapOperationProvider operationProvider=mapServiceContext.getMapOperationProvider(mapName);
    for (    Record record : recordList) {
      recordCount++;
      EntryView entryView=EntryViews.createSimpleEntryView(record.getKey(),mapServiceContext.toData(record.getValue()),record);
      MapOperation operation=operationProvider.createMergeOperation(mapName,record.getKey(),entryView,finalMergePolicy,false);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKey());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,operation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}",0.9152263374485596
46630,"@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=searchedValue.compareTo(value);
switch (comparisonType) {
case LESSER:
        valid=result > 0;
      break;
case LESSER_EQUAL:
    valid=result >= 0;
  break;
case GREATER:
valid=result < 0;
break;
case GREATER_EQUAL:
valid=result <= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
return results;
}
  finally {
releaseReadLock();
}
}","@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    for (    Map.Entry<Comparable,ConcurrentMap<Data,QueryableEntry>> recordMapEntry : recordMap.entrySet()) {
      Comparable value=recordMapEntry.getKey();
      boolean valid;
      int result=searchedValue.compareTo(value);
switch (comparisonType) {
case LESSER:
        valid=result > 0;
      break;
case LESSER_EQUAL:
    valid=result >= 0;
  break;
case GREATER:
valid=result < 0;
break;
case GREATER_EQUAL:
valid=result <= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=recordMapEntry.getValue();
if (records != null) {
results.addResultSet(records);
}
}
}
return results;
}
  finally {
releaseReadLock();
}
}",0.8915795266923501
46631,"@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return results;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
    return results;
  }
  finally {
    releaseReadLock();
  }
}","@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return results;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    for (    Map.Entry<Comparable,ConcurrentMap<Data,QueryableEntry>> recordMapEntry : recordMap.entrySet()) {
      Comparable value=recordMapEntry.getKey();
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=recordMapEntry.getValue();
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
    return results;
  }
  finally {
    releaseReadLock();
  }
}",0.9028120374938332
46632,"protected void updateCacheListenerConfigOnOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final Collection<Member> members=clientContext.getClusterService().getMemberList();
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
  final Collection<Future> futures=new ArrayList<Future>();
  for (  Member member : members) {
    try {
      final Address address=member.getAddress();
      Data configData=toData(cacheEntryListenerConfiguration);
      final ClientMessage request=CacheListenerRegistrationCodec.encodeRequest(nameWithPrefix,configData,isRegister,address);
      final ClientInvocation invocation=new ClientInvocation(client,request,address);
      final Future future=invocation.invoke();
      futures.add(future);
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}","protected void updateCacheListenerConfigOnOtherNodes(CacheEntryListenerConfiguration<K,V> cacheEntryListenerConfiguration,boolean isRegister){
  final Collection<Member> members=clientContext.getClusterService().getMemberList();
  final HazelcastClientInstanceImpl client=(HazelcastClientInstanceImpl)clientContext.getHazelcastInstance();
  for (  Member member : members) {
    try {
      final Address address=member.getAddress();
      Data configData=toData(cacheEntryListenerConfiguration);
      final ClientMessage request=CacheListenerRegistrationCodec.encodeRequest(nameWithPrefix,configData,isRegister,address);
      final ClientInvocation invocation=new ClientInvocation(client,request,address);
      invocation.invoke();
    }
 catch (    Exception e) {
      ExceptionUtil.sneakyThrow(e);
    }
  }
}",0.7924094307073031
46633,"protected void deleteAllCacheEntry(Set<Data> keys){
  if (isWriteThrough() && cacheWriter != null && keys != null && !keys.isEmpty()) {
    Map<Object,Data> keysToDelete=new HashMap<Object,Data>();
    for (    Data key : keys) {
      final Object localKeyObj=dataToValue(key);
      keysToDelete.put(localKeyObj,key);
    }
    final Set<Object> keysObject=keysToDelete.keySet();
    try {
      cacheWriter.deleteAll(keysObject);
    }
 catch (    Exception e) {
      if (!(e instanceof CacheWriterException)) {
        throw new CacheWriterException(""String_Node_Str"",e);
      }
 else {
        throw (CacheWriterException)e;
      }
    }
 finally {
      for (      Object undeletedKey : keysObject) {
        final Data undeletedKeyData=keysToDelete.get(undeletedKey);
        keys.remove(undeletedKeyData);
      }
    }
  }
}","@SuppressFBWarnings(""String_Node_Str"") protected void deleteAllCacheEntry(Set<Data> keys){
  if (isWriteThrough() && cacheWriter != null && keys != null && !keys.isEmpty()) {
    Map<Object,Data> keysToDelete=new HashMap<Object,Data>();
    for (    Data key : keys) {
      final Object localKeyObj=dataToValue(key);
      keysToDelete.put(localKeyObj,key);
    }
    final Set<Object> keysObject=keysToDelete.keySet();
    try {
      cacheWriter.deleteAll(keysObject);
    }
 catch (    Exception e) {
      if (!(e instanceof CacheWriterException)) {
        throw new CacheWriterException(""String_Node_Str"",e);
      }
 else {
        throw (CacheWriterException)e;
      }
    }
 finally {
      for (      Object undeletedKey : keysObject) {
        final Data undeletedKeyData=keysToDelete.get(undeletedKey);
        keys.remove(undeletedKeyData);
      }
    }
  }
}",0.3156049094097019
46634,"@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Long> data=new HashMap<String,Long>();
  int partitionId=event.getPartitionId();
  for (  String name : containers.keySet()) {
    if (partitionId == getPartitionId(name)) {
      AtomicLongContainer container=containers.get(name);
      data.put(name,container.get());
    }
  }
  return data.isEmpty() ? null : new AtomicLongReplicationOperation(data);
}","@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Long> data=new HashMap<String,Long>();
  int partitionId=event.getPartitionId();
  for (  Map.Entry<String,AtomicLongContainer> containerEntry : containers.entrySet()) {
    String name=containerEntry.getKey();
    if (partitionId == getPartitionId(name)) {
      AtomicLongContainer container=containerEntry.getValue();
      data.put(name,container.get());
    }
  }
  return data.isEmpty() ? null : new AtomicLongReplicationOperation(data);
}",0.8920606601248885
46635,"@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Data> data=new HashMap<String,Data>();
  int partitionId=event.getPartitionId();
  for (  String name : containers.keySet()) {
    if (partitionId == getPartitionId(name)) {
      AtomicReferenceContainer atomicReferenceContainer=containers.get(name);
      Data value=atomicReferenceContainer.get();
      data.put(name,value);
    }
  }
  return data.isEmpty() ? null : new AtomicReferenceReplicationOperation(data);
}","@Override public Operation prepareReplicationOperation(PartitionReplicationEvent event){
  if (event.getReplicaIndex() > 1) {
    return null;
  }
  Map<String,Data> data=new HashMap<String,Data>();
  int partitionId=event.getPartitionId();
  for (  Map.Entry<String,AtomicReferenceContainer> containerEntry : containers.entrySet()) {
    String name=containerEntry.getKey();
    if (partitionId == getPartitionId(name)) {
      AtomicReferenceContainer atomicReferenceContainer=containerEntry.getValue();
      Data value=atomicReferenceContainer.get();
      data.put(name,value);
    }
  }
  return data.isEmpty() ? null : new AtomicReferenceReplicationOperation(data);
}",0.89792663476874
46636,"private void setMembersRef(Map<Address,MemberImpl> memberMap){
  memberMap=unmodifiableMap(memberMap);
  memberMap.values();
  memberMap.keySet();
  memberMap.entrySet();
  membersMapRef.set(memberMap);
  membersRef.set(unmodifiableSet(new LinkedHashSet<MemberImpl>(memberMap.values())));
}","@SuppressFBWarnings(""String_Node_Str"") private void setMembersRef(Map<Address,MemberImpl> memberMap){
  memberMap=unmodifiableMap(memberMap);
  memberMap.values();
  memberMap.keySet();
  memberMap.entrySet();
  membersMapRef.set(memberMap);
  membersRef.set(unmodifiableSet(new LinkedHashSet<MemberImpl>(memberMap.values())));
}",0.936995153473344
46637,"@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(MapSplitBrainHandlerService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  MapContainer mapContainer : recordMap.keySet()) {
    String mapName=mapContainer.getName();
    Collection<Record> recordList=recordMap.get(mapContainer);
    String mergePolicyName=mapContainer.getMapConfig().getMergePolicy();
    final MapMergePolicy finalMergePolicy=mapServiceContext.getMergePolicyProvider().getMergePolicy(mergePolicyName);
    MapOperationProvider operationProvider=mapServiceContext.getMapOperationProvider(mapName);
    for (    Record record : recordList) {
      recordCount++;
      EntryView entryView=EntryViews.createSimpleEntryView(record.getKey(),mapServiceContext.toData(record.getValue()),record);
      MapOperation operation=operationProvider.createMergeOperation(mapName,record.getKey(),entryView,finalMergePolicy,false);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKey());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,operation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}","@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(MapSplitBrainHandlerService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<MapContainer,Collection<Record>> recordMapEntry : recordMap.entrySet()) {
    MapContainer mapContainer=recordMapEntry.getKey();
    Collection<Record> recordList=recordMapEntry.getValue();
    String mergePolicyName=mapContainer.getMapConfig().getMergePolicy();
    String mapName=mapContainer.getName();
    final MapMergePolicy finalMergePolicy=mapServiceContext.getMergePolicyProvider().getMergePolicy(mergePolicyName);
    MapOperationProvider operationProvider=mapServiceContext.getMapOperationProvider(mapName);
    for (    Record record : recordList) {
      recordCount++;
      EntryView entryView=EntryViews.createSimpleEntryView(record.getKey(),mapServiceContext.toData(record.getValue()),record);
      MapOperation operation=operationProvider.createMergeOperation(mapName,record.getKey(),entryView,finalMergePolicy,false);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKey());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,operation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}",0.9152263374485596
46638,"@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      boolean valid;
      int result=searchedValue.compareTo(value);
switch (comparisonType) {
case LESSER:
        valid=result > 0;
      break;
case LESSER_EQUAL:
    valid=result >= 0;
  break;
case GREATER:
valid=result < 0;
break;
case GREATER_EQUAL:
valid=result <= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
if (records != null) {
results.addResultSet(records);
}
}
}
return results;
}
  finally {
releaseReadLock();
}
}","@Override public Set<QueryableEntry> getSubRecords(ComparisonType comparisonType,Comparable searchedValue){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    for (    Map.Entry<Comparable,ConcurrentMap<Data,QueryableEntry>> recordMapEntry : recordMap.entrySet()) {
      Comparable value=recordMapEntry.getKey();
      boolean valid;
      int result=searchedValue.compareTo(value);
switch (comparisonType) {
case LESSER:
        valid=result > 0;
      break;
case LESSER_EQUAL:
    valid=result >= 0;
  break;
case GREATER:
valid=result < 0;
break;
case GREATER_EQUAL:
valid=result <= 0;
break;
case NOT_EQUAL:
valid=result != 0;
break;
default :
throw new IllegalStateException(""String_Node_Str"" + comparisonType);
}
if (valid) {
ConcurrentMap<Data,QueryableEntry> records=recordMapEntry.getValue();
if (records != null) {
results.addResultSet(records);
}
}
}
return results;
}
  finally {
releaseReadLock();
}
}",0.8915795266923501
46639,"@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return results;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    Set<Comparable> values=recordMap.keySet();
    for (    Comparable value : values) {
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=recordMap.get(value);
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
    return results;
  }
  finally {
    releaseReadLock();
  }
}","@Override public Set<QueryableEntry> getSubRecordsBetween(Comparable from,Comparable to){
  takeReadLock();
  try {
    MultiResultSet results=createMultiResultSet();
    Comparable paramFrom=from;
    Comparable paramTo=to;
    int trend=paramFrom.compareTo(paramTo);
    if (trend == 0) {
      ConcurrentMap<Data,QueryableEntry> records=recordMap.get(paramFrom);
      if (records != null) {
        results.addResultSet(records);
      }
      return results;
    }
    if (trend < 0) {
      Comparable oldFrom=paramFrom;
      paramFrom=to;
      paramTo=oldFrom;
    }
    for (    Map.Entry<Comparable,ConcurrentMap<Data,QueryableEntry>> recordMapEntry : recordMap.entrySet()) {
      Comparable value=recordMapEntry.getKey();
      if (value.compareTo(paramFrom) <= 0 && value.compareTo(paramTo) >= 0) {
        ConcurrentMap<Data,QueryableEntry> records=recordMapEntry.getValue();
        if (records != null) {
          results.addResultSet(records);
        }
      }
    }
    return results;
  }
  finally {
    releaseReadLock();
  }
}",0.9028120374938332
46640,"@Override public boolean shouldWait(){
  WriteBehindQueue<DelayedEntry> writeBehindQueue=store.getWriteBehindQueue();
  int size=writeBehindQueue.size();
  if (size == 0) {
    return false;
  }
  DelayedEntry entry=writeBehindQueue.peek();
  long currentSequence=entry.getSequence();
  return entry != null && currentSequence <= this.sequence && size + currentSequence - 1 >= this.sequence;
}","@Override public boolean shouldWait(){
  WriteBehindQueue<DelayedEntry> writeBehindQueue=store.getWriteBehindQueue();
  DelayedEntry entry=writeBehindQueue.peek();
  if (entry == null) {
    return false;
  }
  long currentSequence=entry.getSequence();
  return currentSequence <= this.sequence && writeBehindQueue.size() + currentSequence - 1 >= this.sequence;
}",0.7142857142857143
46641,"private HazelcastInstance getOrCreateInstance(ClassLoader classLoader,Properties properties,boolean isDefaultURI) throws URISyntaxException, IOException {
  String location=properties.getProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION);
  if (location != null) {
    URI uri=new URI(location);
    String scheme=uri.getScheme();
    if (scheme == null) {
      uri=new URI(System.getProperty(uri.getRawSchemeSpecificPart()));
    }
    ClassLoader theClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
    final URL configURL;
    if (""String_Node_Str"".equals(scheme)) {
      configURL=theClassLoader.getResource(uri.getRawSchemeSpecificPart());
    }
 else     if (""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme)) {
      configURL=uri.toURL();
    }
 else {
      throw new URISyntaxException(location,""String_Node_Str"");
    }
    try {
      Config config=new XmlConfigBuilder(configURL).build();
      config.setClassLoader(theClassLoader);
      config.setInstanceName(configURL.toString());
      return HazelcastInstanceManager.getOrCreateHazelcastInstance(config);
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  String instanceName=properties.getProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME);
  if (instanceName != null) {
    return Hazelcast.getHazelcastInstanceByName(instanceName);
  }
  HazelcastInstance instance=null;
  if (isDefaultURI) {
    if (hazelcastInstance == null) {
      instance=Hazelcast.newHazelcastInstance();
      hazelcastInstance=instance;
    }
 else {
      instance=hazelcastInstance;
    }
  }
  return instance;
}","private HazelcastInstance getOrCreateInstance(ClassLoader classLoader,Properties properties,boolean isDefaultURI) throws URISyntaxException, IOException {
  String location=properties.getProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION);
  String instanceName=properties.getProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME);
  if (location != null) {
    URI uri=new URI(location);
    String scheme=uri.getScheme();
    if (scheme == null) {
      uri=new URI(System.getProperty(uri.getRawSchemeSpecificPart()));
    }
    ClassLoader theClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
    final URL configURL;
    if (""String_Node_Str"".equals(scheme)) {
      configURL=theClassLoader.getResource(uri.getRawSchemeSpecificPart());
    }
 else     if (""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme)) {
      configURL=uri.toURL();
    }
 else {
      throw new URISyntaxException(location,""String_Node_Str"");
    }
    try {
      Config config=getConfig(configURL,theClassLoader,instanceName);
      return HazelcastInstanceManager.getOrCreateHazelcastInstance(config);
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  if (instanceName != null) {
    return Hazelcast.getHazelcastInstanceByName(instanceName);
  }
  HazelcastInstance instance=null;
  if (isDefaultURI) {
    if (hazelcastInstance == null) {
      instance=Hazelcast.newHazelcastInstance();
      hazelcastInstance=instance;
    }
 else {
      instance=hazelcastInstance;
    }
  }
  return instance;
}",0.422168382798304
46642,"@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=""String_Node_Str"";
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}","@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=randomName();
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}",0.9773679798826488
46643,"private HazelcastInstance getOrCreateInstance(ClassLoader classLoader,Properties properties,boolean isDefaultURI) throws URISyntaxException, IOException {
  String location=properties.getProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION);
  if (location != null) {
    URI uri=new URI(location);
    String scheme=uri.getScheme();
    if (scheme == null) {
      uri=new URI(System.getProperty(uri.getRawSchemeSpecificPart()));
    }
    ClassLoader theClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
    final URL configURL;
    if (""String_Node_Str"".equals(scheme)) {
      configURL=theClassLoader.getResource(uri.getRawSchemeSpecificPart());
    }
 else     if (""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme)) {
      configURL=uri.toURL();
    }
 else {
      throw new URISyntaxException(location,""String_Node_Str"");
    }
    try {
      Config config=new XmlConfigBuilder(configURL).build();
      config.setClassLoader(theClassLoader);
      config.setInstanceName(configURL.toString());
      return HazelcastInstanceFactory.getOrCreateHazelcastInstance(config);
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  String instanceName=properties.getProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME);
  if (instanceName != null) {
    return Hazelcast.getHazelcastInstanceByName(instanceName);
  }
  HazelcastInstance instance=null;
  if (isDefaultURI) {
    if (hazelcastInstance == null) {
      instance=Hazelcast.newHazelcastInstance();
      hazelcastInstance=instance;
    }
 else {
      instance=hazelcastInstance;
    }
  }
  return instance;
}","private HazelcastInstance getOrCreateInstance(ClassLoader classLoader,Properties properties,boolean isDefaultURI) throws URISyntaxException, IOException {
  String location=properties.getProperty(HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION);
  String instanceName=properties.getProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME);
  if (location != null) {
    URI uri=new URI(location);
    String scheme=uri.getScheme();
    if (scheme == null) {
      uri=new URI(System.getProperty(uri.getRawSchemeSpecificPart()));
    }
    ClassLoader theClassLoader=classLoader == null ? getDefaultClassLoader() : classLoader;
    final URL configURL;
    if (""String_Node_Str"".equals(scheme)) {
      configURL=theClassLoader.getResource(uri.getRawSchemeSpecificPart());
    }
 else     if (""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme) || ""String_Node_Str"".equals(scheme)) {
      configURL=uri.toURL();
    }
 else {
      throw new URISyntaxException(location,""String_Node_Str"");
    }
    try {
      Config config=getConfig(configURL,theClassLoader,instanceName);
      return HazelcastInstanceFactory.getOrCreateHazelcastInstance(config);
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  if (instanceName != null) {
    return Hazelcast.getHazelcastInstanceByName(instanceName);
  }
  HazelcastInstance instance=null;
  if (isDefaultURI) {
    if (hazelcastInstance == null) {
      instance=Hazelcast.newHazelcastInstance();
      hazelcastInstance=instance;
    }
 else {
      instance=hazelcastInstance;
    }
  }
  return instance;
}",0.422168382798304
46644,"@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=""String_Node_Str"";
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}","@Test public void cacheManagerByInstanceNameTest() throws URISyntaxException {
  final String instanceName=randomName();
  Config config=new Config();
  config.setInstanceName(instanceName);
  Hazelcast.newHazelcastInstance(config);
  URI uri1=new URI(""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,instanceName);
  CacheManager cacheManager=Caching.getCachingProvider().getCacheManager(uri1,null,properties);
  assertNotNull(cacheManager);
  assertEquals(1,Hazelcast.getAllHazelcastInstances().size());
}",0.9773679798826488
46645,"public void updateReloadFlag(){
  for (  Map.Entry<String,LocalCacheEntry> entry : localCache.entrySet()) {
    entry.getValue().setReload(true);
  }
}","public void updateReloadFlag(){
  for (  Map.Entry<String,LocalCacheEntry> entry : localCache.entrySet()) {
    if (!entry.getValue().isDirty()) {
      entry.getValue().setReload(true);
    }
  }
}",0.8653295128939829
46646,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    resp.sendRedirect(""String_Node_Str"");
    return;
  }
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    HttpSession session=req.getSession(false);
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value.toString());
    return;
  }
  HttpSession session=req.getSession();
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.putValue(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(null,""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getValue(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeAttribute(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeValue(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",null);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session=req.getSession();
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    List<String> names=Collections.list(session.getAttributeNames());
    String nameList=names.toString();
    resp.getWriter().write(nameList.substring(1,nameList.length() - 1).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    session=req.getSession();
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    session.setMaxInactiveInterval(1);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    resp.getWriter().write(session.isNew() == true ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    resp.sendRedirect(""String_Node_Str"");
    return;
  }
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    HttpSession session=req.getSession(false);
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value.toString());
    return;
  }
  HttpSession session=req.getSession();
  if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.putValue(""String_Node_Str"",""String_Node_Str"");
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.putValue(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(null,""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    Object value=session.getValue(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeAttribute(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.removeValue(""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",null);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session=req.getSession();
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    List<String> names=Collections.list(session.getAttributeNames());
    String nameList=names.toString();
    resp.getWriter().write(nameList.substring(1,nameList.length() - 1).replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    Object value=session.getAttribute(""String_Node_Str"");
    resp.getWriter().write(value == null ? ""String_Node_Str"" : value.toString());
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session.invalidate();
    session=req.getSession();
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",""String_Node_Str"");
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    session.setMaxInactiveInterval(1);
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().endsWith(""String_Node_Str"")) {
    session=req.getSession();
    resp.getWriter().write(session.isNew() == true ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
 else   if (req.getRequestURI().contains(""String_Node_Str"")) {
    Enumeration<String> itParams=req.getParameterNames();
    while (itParams.hasMoreElements()) {
      String param=itParams.nextElement();
      Object value=req.getParameter(param);
      session.setAttribute(param,value);
    }
    resp.getWriter().write(""String_Node_Str"");
  }
}",0.9670578546427836
46647,"@Override protected void onSetup(){
  super.onSetup();
  instanceFactory.newHazelcastInstance(createConfig());
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}","@Override protected void onSetup(){
  super.onSetup();
  getHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}",0.9174757281553398
46648,"@Override protected void onSetup(){
  super.onSetup();
  instanceFactory.newHazelcastInstance(createConfig());
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}","@Override protected void onSetup(){
  super.onSetup();
  getHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}",0.9174757281553398
46649,"@Override public void init(){
  primary=isPrimary();
}","@Override public void init(){
  primary=isPrimary();
  records.setEntryCounting(primary);
}",0.7448275862068966
46650,"public CacheRecordHashMap(int initialCapacity,float loadFactor,int concurrencyLevel,ConcurrentReferenceHashMap.ReferenceType keyType,ConcurrentReferenceHashMap.ReferenceType valueType,EnumSet<Option> options,CacheContext cacheContext){
  super(initialCapacity,loadFactor,concurrencyLevel,keyType,valueType,options);
  this.cacheContext=cacheContext;
}","public CacheRecordHashMap(int initialCapacity,CacheContext cacheContext){
  super(initialCapacity);
  this.cacheContext=cacheContext;
}",0.5555555555555556
46651,"@Override public void clear(){
  final int sizeBeforeClear=size();
  super.clear();
  cacheContext.decreaseEntryCount(sizeBeforeClear);
}","@Override public void clear(){
  final int sizeBeforeClear=size();
  super.clear();
  if (entryCountingEnable) {
    cacheContext.decreaseEntryCount(sizeBeforeClear);
  }
}",0.8867313915857605
46652,"@Override public CacheRecord putIfAbsent(Data key,CacheRecord value){
  CacheRecord oldRecord=super.putIfAbsent(key,value);
  if (oldRecord == null) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}","@Override public CacheRecord putIfAbsent(Data key,CacheRecord value){
  CacheRecord oldRecord=super.putIfAbsent(key,value);
  if (oldRecord == null && entryCountingEnable) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}",0.9492273730684326
46653,"@Override public CacheRecord put(Data key,CacheRecord value){
  CacheRecord oldRecord=super.put(key,value);
  if (oldRecord == null) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}","@Override public CacheRecord put(Data key,CacheRecord value){
  CacheRecord oldRecord=super.put(key,value);
  if (oldRecord == null && entryCountingEnable) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}",0.9453681710213776
46654,"@Override public boolean remove(Object key,Object value){
  boolean removed=super.remove(key,value);
  if (removed) {
    cacheContext.decreaseEntryCount();
  }
  return removed;
}","@Override public boolean remove(Object key,Object value){
  boolean removed=super.remove(key,value);
  if (removed && entryCountingEnable) {
    cacheContext.decreaseEntryCount();
  }
  return removed;
}",0.9399477806788512
46655,"CacheKeyIteratorResult fetchNext(int nextTableIndex,int size);","/** 
 * Fetches keys in bulk as specified <tt>size</tt> at most.
 * @param nextTableIndex starting point for fetching
 * @param size maximum bulk size to fetch the keys
 * @return the {@link CacheKeyIteratorResult} instance contains fetched keys
 */
CacheKeyIteratorResult fetchNext(int nextTableIndex,int size);",0.3315508021390374
46656,"protected CachingProvider getCachingProvider(){
  return HazelcastServerCachingProvider.createCachingProvider(getHazelcastInstance());
}","protected CachingProvider getCachingProvider(HazelcastInstance instance){
  return HazelcastServerCachingProvider.createCachingProvider(instance);
}",0.852112676056338
46657,"@Override public void run() throws Exception {
  assertEquals(0,stats.getOwnedEntryCount());
}","@Override public void run() throws Exception {
  assertEquals(0,getOwnedEntryCount(allStatistics));
}",0.9025641025641026
46658,"@Test public void testLargePackets() throws Exception {
  makePayloads(10000);
  test();
}","@Test(timeout=10 * 60 * 1000) public void testLargePackets() throws Exception {
  makePayloads(10000);
  testPackets((10 * 60 * 1000) - (WRITER_THREAD_RUNNING_TIME_IN_SECONDS * 1000));
}",0.6521739130434783
46659,"@Test public void testSmallPackets() throws Exception {
  makePayloads(100);
  test();
}","@Test public void testSmallPackets() throws Exception {
  makePayloads(100);
  testPackets();
}",0.9617486338797814
46660,"@Test public void testSemiRealisticPackets() throws Exception {
  makeSemiRealisticPayloads();
  test();
}","@Test public void testSemiRealisticPackets() throws Exception {
  makeSemiRealisticPayloads();
  testPackets();
}",0.9680365296803652
46661,"@Test public void testMediumPackets() throws Exception {
  makePayloads(1000);
  test();
}","@Test public void testMediumPackets() throws Exception {
  makePayloads(1000);
  testPackets();
}",0.962566844919786
46662,"@Override public void run() throws Exception {
  assertEquals(expectedNormalPackets,XReadHandler.getNormalFramesReadCounter().get());
  assertEquals(expectedUrgentPackets,XReadHandler.getPriorityFramesReadCounter().get());
}","@Override public void run() throws Exception {
  logger.info(""String_Node_Str"" + writer.totalFramesPending());
  logger.info(""String_Node_Str"" + writer.getLastWriteTimeMillis());
  logger.info(""String_Node_Str"" + reader.getNormalFramesReadCounter().get() + reader.getPriorityFramesReadCounter().get());
  logger.info(""String_Node_Str"" + reader.getLastReadTimeMillis());
  assertEquals(expectedNormalPackets,reader.getNormalFramesReadCounter().get());
  assertEquals(expectedUrgentPackets,reader.getPriorityFramesReadCounter().get());
}",0.5375494071146245
46663,"@Test public void testTinyPackets() throws Exception {
  makePayloads(10);
  test();
}","@Test public void testTinyPackets() throws Exception {
  makePayloads(10);
  testPackets();
}",0.9608938547486032
46664,"protected String generateThreadDump(){
  StringBuilder dump=new StringBuilder();
  ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();
  ThreadInfo[] threadInfos=threadMXBean.dumpAllThreads(true,true);
  long currentThreadId=Thread.currentThread().getId();
  for (  ThreadInfo threadInfo : threadInfos) {
    if (threadInfo.getThreadId() == currentThreadId) {
      continue;
    }
    dump.append('""');
    dump.append(threadInfo.getThreadName());
    dump.append(""String_Node_Str"");
    Thread.State state=threadInfo.getThreadState();
    dump.append(""String_Node_Str"");
    dump.append(state);
    if (threadInfo.getLockName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockName());
    }
    if (threadInfo.getLockOwnerName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerName());
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerId());
    }
    StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();
    for (    StackTraceElement stackTraceElement : stackTraceElements) {
      dump.append(""String_Node_Str"");
      dump.append(stackTraceElement);
    }
    dump.append(""String_Node_Str"");
  }
  return dump.toString();
}","protected String generateThreadDump(){
  StringBuilder dump=new StringBuilder();
  ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();
  ThreadInfo[] threadInfos=threadMXBean.dumpAllThreads(true,true);
  long currentThreadId=Thread.currentThread().getId();
  for (  ThreadInfo threadInfo : threadInfos) {
    long threadId=threadInfo.getThreadId();
    if (threadId == currentThreadId) {
      continue;
    }
    dump.append('""');
    dump.append(threadInfo.getThreadName());
    dump.append(""String_Node_Str"");
    Thread.State state=threadInfo.getThreadState();
    dump.append(""String_Node_Str"");
    dump.append(state);
    if (threadInfo.getLockName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockName());
    }
    if (threadInfo.getLockOwnerName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerName());
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerId());
    }
    if (THREAD_CPU_TIME_INFO_AVAILABLE) {
      dump.append(""String_Node_Str"").append(threadMXBean.getThreadCpuTime(threadId)).append(""String_Node_Str"");
      dump.append(""String_Node_Str"").append(threadMXBean.getThreadUserTime(threadId)).append(""String_Node_Str"");
    }
    if (THREAD_CONTENTION_INFO_AVAILABLE) {
      dump.append(""String_Node_Str"").append(threadInfo.getBlockedTime()).append(""String_Node_Str"");
      dump.append(""String_Node_Str"").append(threadInfo.getWaitedTime()).append(""String_Node_Str"");
    }
    StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();
    for (    StackTraceElement stackTraceElement : stackTraceElements) {
      dump.append(""String_Node_Str"");
      dump.append(stackTraceElement);
    }
    dump.append(""String_Node_Str"");
  }
  return dump.toString();
}",0.7982689747003995
46665,"@Override protected void onSetup(){
  super.onSetup();
  instanceFactory.newHazelcastInstance(createConfig());
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}","@Override protected void onSetup(){
  super.onSetup();
  getHazelcastInstance();
  ClientConfig clientConfig=createClientConfig();
  client=instanceFactory.newHazelcastClient(clientConfig);
}",0.9174757281553398
46666,"@Override public void init(){
  primary=isPrimary();
}","@Override public void init(){
  primary=isPrimary();
  records.setEntryCounting(primary);
}",0.7448275862068966
46667,"public CacheRecordHashMap(int initialCapacity,float loadFactor,int concurrencyLevel,ConcurrentReferenceHashMap.ReferenceType keyType,ConcurrentReferenceHashMap.ReferenceType valueType,EnumSet<Option> options,CacheContext cacheContext){
  super(initialCapacity,loadFactor,concurrencyLevel,keyType,valueType,options);
  this.cacheContext=cacheContext;
}","public CacheRecordHashMap(int initialCapacity,CacheContext cacheContext){
  super(initialCapacity);
  this.cacheContext=cacheContext;
}",0.5555555555555556
46668,"@Override public void clear(){
  final int sizeBeforeClear=size();
  super.clear();
  cacheContext.decreaseEntryCount(sizeBeforeClear);
}","@Override public void clear(){
  final int sizeBeforeClear=size();
  super.clear();
  if (entryCountingEnable) {
    cacheContext.decreaseEntryCount(sizeBeforeClear);
  }
}",0.8867313915857605
46669,"@Override public CacheRecord putIfAbsent(Data key,CacheRecord value){
  CacheRecord oldRecord=super.putIfAbsent(key,value);
  if (oldRecord == null) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}","@Override public CacheRecord putIfAbsent(Data key,CacheRecord value){
  CacheRecord oldRecord=super.putIfAbsent(key,value);
  if (oldRecord == null && entryCountingEnable) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}",0.9492273730684326
46670,"@Override public CacheRecord put(Data key,CacheRecord value){
  CacheRecord oldRecord=super.put(key,value);
  if (oldRecord == null) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}","@Override public CacheRecord put(Data key,CacheRecord value){
  CacheRecord oldRecord=super.put(key,value);
  if (oldRecord == null && entryCountingEnable) {
    cacheContext.increaseEntryCount();
  }
  return oldRecord;
}",0.9453681710213776
46671,"@Override public boolean remove(Object key,Object value){
  boolean removed=super.remove(key,value);
  if (removed) {
    cacheContext.decreaseEntryCount();
  }
  return removed;
}","@Override public boolean remove(Object key,Object value){
  boolean removed=super.remove(key,value);
  if (removed && entryCountingEnable) {
    cacheContext.decreaseEntryCount();
  }
  return removed;
}",0.9399477806788512
46672,"CacheKeyIteratorResult fetchNext(int nextTableIndex,int size);","/** 
 * Fetches keys in bulk as specified <tt>size</tt> at most.
 * @param nextTableIndex starting point for fetching
 * @param size maximum bulk size to fetch the keys
 * @return the {@link CacheKeyIteratorResult} instance contains fetched keys
 */
CacheKeyIteratorResult fetchNext(int nextTableIndex,int size);",0.3315508021390374
46673,"protected CachingProvider getCachingProvider(){
  return HazelcastServerCachingProvider.createCachingProvider(getHazelcastInstance());
}","protected CachingProvider getCachingProvider(HazelcastInstance instance){
  return HazelcastServerCachingProvider.createCachingProvider(instance);
}",0.852112676056338
46674,"@Override public void run() throws Exception {
  assertEquals(0,stats.getOwnedEntryCount());
}","@Override public void run() throws Exception {
  assertEquals(0,getOwnedEntryCount(allStatistics));
}",0.9025641025641026
46675,"@Test public void testLargePackets() throws Exception {
  makePayloads(10000);
  test();
}","@Test(timeout=10 * 60 * 1000) public void testLargePackets() throws Exception {
  makePayloads(10000);
  testPackets((10 * 60 * 1000) - (WRITER_THREAD_RUNNING_TIME_IN_SECONDS * 1000));
}",0.6521739130434783
46676,"@Test public void testSmallPackets() throws Exception {
  makePayloads(100);
  test();
}","@Test public void testSmallPackets() throws Exception {
  makePayloads(100);
  testPackets();
}",0.9617486338797814
46677,"@Test public void testSemiRealisticPackets() throws Exception {
  makeSemiRealisticPayloads();
  test();
}","@Test public void testSemiRealisticPackets() throws Exception {
  makeSemiRealisticPayloads();
  testPackets();
}",0.9680365296803652
46678,"@Test public void testMediumPackets() throws Exception {
  makePayloads(1000);
  test();
}","@Test public void testMediumPackets() throws Exception {
  makePayloads(1000);
  testPackets();
}",0.962566844919786
46679,"@Override public void run() throws Exception {
  assertEquals(expectedNormalPackets,XReadHandler.getNormalFramesReadCounter().get());
  assertEquals(expectedUrgentPackets,XReadHandler.getPriorityFramesReadCounter().get());
}","@Override public void run() throws Exception {
  logger.info(""String_Node_Str"" + writer.totalFramesPending());
  logger.info(""String_Node_Str"" + writer.getLastWriteTimeMillis());
  logger.info(""String_Node_Str"" + reader.getNormalFramesReadCounter().get() + reader.getPriorityFramesReadCounter().get());
  logger.info(""String_Node_Str"" + reader.getLastReadTimeMillis());
  assertEquals(expectedNormalPackets,reader.getNormalFramesReadCounter().get());
  assertEquals(expectedUrgentPackets,reader.getPriorityFramesReadCounter().get());
}",0.5375494071146245
46680,"@Test public void testTinyPackets() throws Exception {
  makePayloads(10);
  test();
}","@Test public void testTinyPackets() throws Exception {
  makePayloads(10);
  testPackets();
}",0.9608938547486032
46681,"protected String generateThreadDump(){
  StringBuilder dump=new StringBuilder();
  ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();
  ThreadInfo[] threadInfos=threadMXBean.dumpAllThreads(true,true);
  long currentThreadId=Thread.currentThread().getId();
  for (  ThreadInfo threadInfo : threadInfos) {
    if (threadInfo.getThreadId() == currentThreadId) {
      continue;
    }
    dump.append('""');
    dump.append(threadInfo.getThreadName());
    dump.append(""String_Node_Str"");
    Thread.State state=threadInfo.getThreadState();
    dump.append(""String_Node_Str"");
    dump.append(state);
    if (threadInfo.getLockName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockName());
    }
    if (threadInfo.getLockOwnerName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerName());
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerId());
    }
    StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();
    for (    StackTraceElement stackTraceElement : stackTraceElements) {
      dump.append(""String_Node_Str"");
      dump.append(stackTraceElement);
    }
    dump.append(""String_Node_Str"");
  }
  return dump.toString();
}","protected String generateThreadDump(){
  StringBuilder dump=new StringBuilder();
  ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();
  ThreadInfo[] threadInfos=threadMXBean.dumpAllThreads(true,true);
  long currentThreadId=Thread.currentThread().getId();
  for (  ThreadInfo threadInfo : threadInfos) {
    long threadId=threadInfo.getThreadId();
    if (threadId == currentThreadId) {
      continue;
    }
    dump.append('""');
    dump.append(threadInfo.getThreadName());
    dump.append(""String_Node_Str"");
    Thread.State state=threadInfo.getThreadState();
    dump.append(""String_Node_Str"");
    dump.append(state);
    if (threadInfo.getLockName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockName());
    }
    if (threadInfo.getLockOwnerName() != null) {
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerName());
      dump.append(""String_Node_Str"").append(threadInfo.getLockOwnerId());
    }
    if (THREAD_CPU_TIME_INFO_AVAILABLE) {
      dump.append(""String_Node_Str"").append(threadMXBean.getThreadCpuTime(threadId)).append(""String_Node_Str"");
      dump.append(""String_Node_Str"").append(threadMXBean.getThreadUserTime(threadId)).append(""String_Node_Str"");
    }
    if (THREAD_CONTENTION_INFO_AVAILABLE) {
      dump.append(""String_Node_Str"").append(threadInfo.getBlockedTime()).append(""String_Node_Str"");
      dump.append(""String_Node_Str"").append(threadInfo.getWaitedTime()).append(""String_Node_Str"");
    }
    StackTraceElement[] stackTraceElements=threadInfo.getStackTrace();
    for (    StackTraceElement stackTraceElement : stackTraceElements) {
      dump.append(""String_Node_Str"");
      dump.append(stackTraceElement);
    }
    dump.append(""String_Node_Str"");
  }
  return dump.toString();
}",0.7982689747003995
46682,"private Collection<AddressProvider> createAddressProviders(AddressProvider externalAddressProvider){
  ClientNetworkConfig networkConfig=getClientConfig().getNetworkConfig();
  final ClientAwsConfig awsConfig=networkConfig.getAwsConfig();
  Collection<AddressProvider> addressProviders=new LinkedList<AddressProvider>();
  addressProviders.add(new DefaultAddressProvider(networkConfig));
  if (externalAddressProvider != null) {
    addressProviders.add(externalAddressProvider);
  }
  if (discoveryService != null) {
    addressProviders.add(new DiscoveryAddressProvider(discoveryService));
  }
  if (awsConfig != null && awsConfig.isEnabled()) {
    try {
      addressProviders.add(new AwsAddressProvider(awsConfig));
    }
 catch (    NoClassDefFoundError e) {
      LOGGER.log(Level.WARNING,""String_Node_Str"");
      throw e;
    }
  }
  return addressProviders;
}","private Collection<AddressProvider> createAddressProviders(AddressProvider externalAddressProvider){
  ClientNetworkConfig networkConfig=getClientConfig().getNetworkConfig();
  final ClientAwsConfig awsConfig=networkConfig.getAwsConfig();
  Collection<AddressProvider> addressProviders=new LinkedList<AddressProvider>();
  addressProviders.add(new DefaultAddressProvider(networkConfig));
  if (externalAddressProvider != null) {
    addressProviders.add(externalAddressProvider);
  }
  if (discoveryService != null) {
    addressProviders.add(new DiscoveryAddressProvider(discoveryService));
  }
  if (clientProperties.getBoolean(ClientProperty.DISCOVERY_SPI_ENABLED)) {
    discoveryService.start();
  }
  if (awsConfig != null && awsConfig.isEnabled()) {
    try {
      addressProviders.add(new AwsAddressProvider(awsConfig));
    }
 catch (    NoClassDefFoundError e) {
      LOGGER.log(Level.WARNING,""String_Node_Str"");
      throw e;
    }
  }
  return addressProviders;
}",0.9409853817000542
46683,"public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
}","public void doShutdown(){
  proxyManager.destroy();
  clusterService.shutdown();
  executionService.shutdown();
  partitionService.stop();
  transactionManager.shutdown();
  connectionManager.shutdown();
  invocationService.shutdown();
  listenerService.shutdown();
  serializationService.destroy();
  nearCacheManager.destroyAllNearCaches();
  if (discoveryService != null) {
    discoveryService.destroy();
  }
}",0.907651715039578
46684,"@Override public void start(){
  super.start();
  discoveryNodes.add(discoveryNode);
  getLogger();
  getProperties();
}","@Override public void start(){
  super.start();
  startLatch.countDown();
  if (discoveryNode != null) {
    discoveryNodes.add(discoveryNode);
  }
}",0.6617100371747212
46685,"@Override public void destroy(){
  super.destroy();
  discoveryNodes.remove(discoveryNode);
}","@Override public void destroy(){
  super.destroy();
  stopLatch.countDown();
  discoveryNodes.remove(discoveryNode);
}",0.8815165876777251
46686,"@Override public Class<? extends DiscoveryStrategy> getDiscoveryStrategyType(){
  return CollectingDiscoveryStrategy.class;
}","@Override public Class<? extends DiscoveryStrategy> getDiscoveryStrategyType(){
  return LifecycleDiscoveryStrategy.class;
}",0.9397590361445785
46687,"@Override public DiscoveryStrategy newDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> properties){
  return new CollectingDiscoveryStrategy(discoveryNode,discoveryNodes,logger,properties);
}","@Override public DiscoveryStrategy newDiscoveryStrategy(DiscoveryNode discoveryNode,ILogger logger,Map<String,Comparable> properties){
  return new LifecycleDiscoveryStrategy(startLatch,stopLatch,discoveryNode,discoveryNodes,logger,properties);
}",0.9152542372881356
46688,"private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=url.toURI();
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}","private static Set<URLDefinition> collectFactoryUrls(String factoryId,ClassLoader classLoader){
  final String resourceName=""String_Node_Str"" + factoryId;
  try {
    final Enumeration<URL> configs;
    if (classLoader != null) {
      configs=classLoader.getResources(resourceName);
    }
 else {
      configs=ClassLoader.getSystemResources(resourceName);
    }
    Set<URLDefinition> urlDefinitions=new HashSet<URLDefinition>();
    while (configs.hasMoreElements()) {
      URL url=configs.nextElement();
      final URI uri=new URI(url.toExternalForm().replace(""String_Node_Str"",""String_Node_Str""));
      ClassLoader highestClassLoader=findHighestReachableClassLoader(url,classLoader,resourceName);
      if (!highestClassLoader.getClass().getName().equals(IGNORED_GLASSFISH_MAGIC_CLASSLOADER)) {
        urlDefinitions.add(new URLDefinition(uri,highestClassLoader));
      }
    }
    return urlDefinitions;
  }
 catch (  Exception e) {
    LOGGER.severe(e);
  }
  return Collections.emptySet();
}",0.961439588688946
46689,"@Test public void testGetAll() throws Exception {
  int mapSize=1000;
  int expectedNearCacheHits=400;
  String mapName=""String_Node_Str"";
  Config config=getConfig();
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  config.getMapConfig(mapName).setNearCacheConfig(nearCacheConfig);
  TestHazelcastInstanceFactory hazelcastInstanceFactory=createHazelcastInstanceFactory(2);
  HazelcastInstance[] instances=hazelcastInstanceFactory.newInstances(config);
  IMap<Integer,Integer> map=instances[0].getMap(mapName);
  HashSet<Integer> keys=new HashSet<Integer>();
  for (int i=0; i < mapSize; i++) {
    map.put(i,i);
    keys.add(i);
  }
  for (int i=0; i < mapSize; i++) {
    map.get(i);
  }
  Map<Integer,Integer> allEntries=map.getAll(keys);
  for (int i=0; i < mapSize; i++) {
    assertEquals(i,(int)allEntries.get(i));
  }
  NearCacheStats stats=map.getLocalMapStats().getNearCacheStats();
  assertTrue(String.format(""String_Node_Str"",expectedNearCacheHits,stats.getHits()),stats.getHits() > expectedNearCacheHits);
}","@Test public void testGetAll() throws Exception {
  int mapSize=1000;
  int expectedNearCacheHits=0;
  String mapName=""String_Node_Str"";
  Config config=getConfig();
  NearCacheConfig nearCacheConfig=newNearCacheConfig();
  config.getMapConfig(mapName).setNearCacheConfig(nearCacheConfig);
  TestHazelcastInstanceFactory hazelcastInstanceFactory=createHazelcastInstanceFactory(2);
  HazelcastInstance[] instances=hazelcastInstanceFactory.newInstances(config);
  warmUpPartitions(instances);
  HazelcastInstance hazelcastInstance=instances[0];
  Node node=TestUtil.getNode(hazelcastInstance);
  InternalPartitionService partitionService=node.getNodeEngine().getPartitionService();
  IMap<Integer,Integer> map=hazelcastInstance.getMap(mapName);
  HashSet<Integer> keys=new HashSet<Integer>();
  for (int i=0; i < mapSize; i++) {
    map.put(i,i);
    keys.add(i);
  }
  for (int i=0; i < mapSize; i++) {
    map.get(i);
    int partitionId=partitionService.getPartitionId(i);
    if (!partitionService.isPartitionOwner(partitionId)) {
      expectedNearCacheHits++;
    }
  }
  Map<Integer,Integer> allEntries=map.getAll(keys);
  for (int i=0; i < mapSize; i++) {
    assertEquals(i,(int)allEntries.get(i));
  }
  NearCacheStats stats=map.getLocalMapStats().getNearCacheStats();
  assertEquals(String.format(""String_Node_Str"",expectedNearCacheHits,stats.getHits()),expectedNearCacheHits,stats.getHits());
}",0.7957254418413481
46690,"@Override public void run() throws Exception {
  final ICacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(simpleName);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.putCacheConfigIfAbsent(cacheConfigFromSimpleConfig) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}","@Override public void run() throws Exception {
  final ICacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        cacheConfig=new CacheConfig(simpleConfig);
        cacheConfig.setName(simpleName);
        cacheConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        CacheConfig existingCacheConfig=service.putCacheConfigIfAbsent(cacheConfig);
        if (existingCacheConfig != null) {
          cacheConfig=existingCacheConfig;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}",0.8417721518987342
46691,"@Override public void run() throws Exception {
  final CacheService service=getService();
  final CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        CacheConfig cacheConfigFromSimpleConfig=new CacheConfig(simpleConfig);
        cacheConfigFromSimpleConfig.setName(simpleName);
        cacheConfigFromSimpleConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        if (service.createCacheConfigIfAbsent(cacheConfigFromSimpleConfig) == null) {
          response=cacheConfigFromSimpleConfig;
          return;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}","@Override public void run() throws Exception {
  final CacheService service=getService();
  CacheConfig cacheConfig=service.getCacheConfig(name);
  if (cacheConfig == null) {
    CacheSimpleConfig simpleConfig=service.findCacheConfig(simpleName);
    if (simpleConfig != null) {
      try {
        cacheConfig=new CacheConfig(simpleConfig);
        cacheConfig.setName(simpleName);
        cacheConfig.setManagerPrefix(name.substring(0,name.lastIndexOf(simpleName)));
        CacheConfig existingCacheConfig=service.createCacheConfigIfAbsent(cacheConfig);
        if (existingCacheConfig != null) {
          cacheConfig=existingCacheConfig;
        }
      }
 catch (      Exception e) {
        throw new CacheException(e);
      }
    }
  }
  response=cacheConfig;
}",0.8421717171717171
46692,"@Override public void partitionLost(MapPartitionLostEvent event){
  this.events.add(event);
}","@Override public synchronized void partitionLost(MapPartitionLostEvent event){
  this.events.add(event);
}",0.9346733668341708
46693,"public List<MapPartitionLostEvent> getEvents(){
synchronized (events) {
    return new ArrayList<MapPartitionLostEvent>(events);
  }
}","public synchronized List<MapPartitionLostEvent> getEvents(){
  return new ArrayList<MapPartitionLostEvent>(events);
}",0.8286852589641435
46694,"@Override public void partitionLost(MapPartitionLostEvent event){
  this.events.add(event);
}","@Override public synchronized void partitionLost(MapPartitionLostEvent event){
  this.events.add(event);
}",0.9346733668341708
46695,"public List<MapPartitionLostEvent> getEvents(){
synchronized (events) {
    return new ArrayList<MapPartitionLostEvent>(events);
  }
}","public synchronized List<MapPartitionLostEvent> getEvents(){
  return new ArrayList<MapPartitionLostEvent>(events);
}",0.8286852589641435
46696,"protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=-1L;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}","protected long updateAccessDuration(Data key,R record,ExpiryPolicy expiryPolicy,long now){
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForAccess();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
      record.setExpirationTime(expiryTime);
      if (isEventsEnabled()) {
        CacheEventContext cacheEventContext=createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED,toEventData(key),toEventData(record.getValue()),expiryTime,null,IGNORE_COMPLETION);
        cacheEventContext.setAccessHit(record.getAccessHit());
        publishEvent(cacheEventContext);
      }
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return expiryTime;
}",0.979456593770709
46697,"protected void updateRecord(Data key,R record,Object value,long expiryTime,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  Data dataOldValue=null;
  Data dataValue=null;
  Object recordValue=value;
  try {
    record.setExpirationTime(expiryTime);
    if (isExpiredAt(expiryTime,now)) {
      if (!disableWriteThrough) {
        writeThroughCache(key,value);
      }
    }
 else {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
        recordValue=toData(value);
      dataValue=(Data)recordValue;
    dataOldValue=toData(record);
  break;
case OBJECT:
if (value instanceof Data) {
  recordValue=dataToValue((Data)value);
  dataValue=(Data)value;
}
 else {
  dataValue=valueToData(value);
}
dataOldValue=toData(record);
break;
case NATIVE:
recordValue=toData(value);
dataValue=(Data)recordValue;
dataOldValue=toData(record);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
if (!disableWriteThrough) {
writeThroughCache(key,value);
}
Data eventDataKey=toEventData(key);
Data eventDataValue=toEventData(dataValue);
Data eventDataOldValue=toEventData(dataOldValue);
updateRecordValue(record,recordValue);
onUpdateRecord(key,record,value,dataOldValue);
invalidateEntry(key,source);
if (isEventsEnabled()) {
publishEvent(createCacheUpdatedEvent(eventDataKey,eventDataValue,eventDataOldValue,record.getExpirationTime(),record.getAccessTime(),record.getAccessHit(),origin,completionId));
}
}
}
 catch (Throwable error) {
onUpdateRecordError(key,record,value,dataValue,dataOldValue,error);
throw ExceptionUtil.rethrow(error);
}
}","protected void updateRecord(Data key,R record,Object value,long expiryTime,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  Data dataOldValue=null;
  Data dataValue=null;
  Object recordValue=value;
  try {
    if (expiryTime != CacheRecord.TIME_NOT_AVAILABLE) {
      record.setExpirationTime(expiryTime);
    }
    if (isExpiredAt(expiryTime,now)) {
      if (!disableWriteThrough) {
        writeThroughCache(key,value);
      }
    }
 else {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
        recordValue=toData(value);
      dataValue=(Data)recordValue;
    dataOldValue=toData(record);
  break;
case OBJECT:
if (value instanceof Data) {
  recordValue=dataToValue((Data)value);
  dataValue=(Data)value;
}
 else {
  dataValue=valueToData(value);
}
dataOldValue=toData(record);
break;
case NATIVE:
recordValue=toData(value);
dataValue=(Data)recordValue;
dataOldValue=toData(record);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
if (!disableWriteThrough) {
writeThroughCache(key,value);
}
Data eventDataKey=toEventData(key);
Data eventDataValue=toEventData(dataValue);
Data eventDataOldValue=toEventData(dataOldValue);
updateRecordValue(record,recordValue);
onUpdateRecord(key,record,value,dataOldValue);
invalidateEntry(key,source);
if (isEventsEnabled()) {
publishEvent(createCacheUpdatedEvent(eventDataKey,eventDataValue,eventDataOldValue,record.getExpirationTime(),record.getAccessTime(),record.getAccessHit(),origin,completionId));
}
}
}
 catch (Throwable error) {
onUpdateRecordError(key,record,value,dataValue,dataOldValue,error);
throw ExceptionUtil.rethrow(error);
}
}",0.9801204819277108
46698,"public Object getAndRemove(Data key,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  deleteCacheEntry(key);
  R record=records.get(key);
  final Object obj;
  boolean removed=false;
  try {
    if (recordNotExistOrExpired(record,now)) {
      obj=null;
      if (isEventsEnabled()) {
        publishEvent(createCacheCompleteEvent(toEventData(key),CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin,completionId));
      }
    }
 else {
      obj=toValue(record);
      removed=deleteRecord(key,completionId,source,origin);
    }
    onRemove(key,null,source,false,record,removed);
    if (isStatisticsEnabled()) {
      statistics.addGetTimeNanos(System.nanoTime() - start);
      if (obj != null) {
        statistics.increaseCacheHits(1);
        statistics.increaseCacheRemovals(1);
        statistics.addRemoveTimeNanos(System.nanoTime() - start);
      }
 else {
        statistics.increaseCacheMisses(1);
      }
    }
    return obj;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","public Object getAndRemove(Data key,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=isStatisticsEnabled() ? System.nanoTime() : 0;
  deleteCacheEntry(key);
  R record=records.get(key);
  final Object obj;
  boolean removed=false;
  try {
    if (recordNotExistOrExpired(record,now)) {
      obj=null;
      if (isEventsEnabled()) {
        publishEvent(createCacheCompleteEvent(toEventData(key),CacheRecord.TIME_NOT_AVAILABLE,origin,completionId));
      }
    }
 else {
      obj=toValue(record);
      removed=deleteRecord(key,completionId,source,origin);
    }
    onRemove(key,null,source,false,record,removed);
    if (isStatisticsEnabled()) {
      statistics.addGetTimeNanos(System.nanoTime() - start);
      if (obj != null) {
        statistics.increaseCacheHits(1);
        statistics.increaseCacheRemovals(1);
        statistics.addRemoveTimeNanos(System.nanoTime() - start);
      }
 else {
        statistics.increaseCacheMisses(1);
      }
    }
    return obj;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9953566905867456
46699,"public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  int hitCount=0;
  boolean removed=false;
  try {
    if (recordNotExistOrExpired(record,now)) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
      }
    }
    if (!removed) {
      if (isEventsEnabled()) {
        publishEvent(createCacheCompleteEvent(toEventData(key),CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin,completionId));
      }
    }
    onRemove(key,value,source,false,record,removed);
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}","public boolean remove(Data key,Object value,String source,int completionId,String origin){
  final long now=Clock.currentTimeMillis();
  final long start=System.nanoTime();
  R record=records.get(key);
  int hitCount=0;
  boolean removed=false;
  try {
    if (recordNotExistOrExpired(record,now)) {
      if (isStatisticsEnabled()) {
        statistics.increaseCacheMisses(1);
      }
    }
 else {
      hitCount++;
      if (compare(toStorageValue(record),toStorageValue(value))) {
        deleteCacheEntry(key);
        removed=deleteRecord(key,completionId,source,origin);
      }
 else {
        long expiryTime=onRecordAccess(key,record,defaultExpiryPolicy,now);
        processExpiredEntry(key,record,expiryTime,now,source,origin);
      }
    }
    if (!removed) {
      if (isEventsEnabled()) {
        publishEvent(createCacheCompleteEvent(toEventData(key),CacheRecord.TIME_NOT_AVAILABLE,origin,completionId));
      }
    }
    onRemove(key,value,source,false,record,removed);
    updateRemoveStatistics(removed,hitCount,start);
    return removed;
  }
 catch (  Throwable error) {
    onRemoveError(key,null,source,false,record,removed,error);
    throw ExceptionUtil.rethrow(error);
  }
}",0.9954451345755694
46700,"protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}","protected boolean updateRecordWithExpiry(Data key,Object value,R record,ExpiryPolicy expiryPolicy,long now,boolean disableWriteThrough,int completionId,String source,String origin){
  expiryPolicy=getExpiryPolicy(expiryPolicy);
  long expiryTime=CacheRecord.TIME_NOT_AVAILABLE;
  try {
    Duration expiryDuration=expiryPolicy.getExpiryForUpdate();
    if (expiryDuration != null) {
      expiryTime=expiryDuration.getAdjustedTime(now);
    }
  }
 catch (  Exception e) {
    EmptyStatement.ignore(e);
  }
  return updateRecordWithExpiry(key,value,record,expiryTime,now,disableWriteThrough,completionId,source,origin);
}",0.991207034372502
46701,"protected R processExpiredEntry(Data key,R record,long expiryTime,long now,String source,String origin){
  final boolean isExpired=isExpiredAt(expiryTime,now);
  if (!isExpired) {
    return record;
  }
  if (isStatisticsEnabled()) {
    statistics.increaseCacheExpiries(1);
  }
  R removedRecord=doRemoveRecord(key,source);
  Data keyEventData=toEventData(key);
  Data recordEventData=toEventData(removedRecord);
  onProcessExpiredEntry(key,removedRecord,expiryTime,now,source,origin);
  if (isEventsEnabled()) {
    publishEvent(createCacheExpiredEvent(keyEventData,recordEventData,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin,IGNORE_COMPLETION));
  }
  return null;
}","protected R processExpiredEntry(Data key,R record,long expiryTime,long now,String source,String origin){
  final boolean isExpired=isExpiredAt(expiryTime,now);
  if (!isExpired) {
    return record;
  }
  if (isStatisticsEnabled()) {
    statistics.increaseCacheExpiries(1);
  }
  R removedRecord=doRemoveRecord(key,source);
  Data keyEventData=toEventData(key);
  Data recordEventData=toEventData(removedRecord);
  onProcessExpiredEntry(key,removedRecord,expiryTime,now,source,origin);
  if (isEventsEnabled()) {
    publishEvent(createCacheExpiredEvent(keyEventData,recordEventData,CacheRecord.TIME_NOT_AVAILABLE,origin,IGNORE_COMPLETION));
  }
  return null;
}",0.9917726252804788
46702,"protected boolean deleteRecord(Data key,int completionId,String source,String origin){
  final R record=doRemoveRecord(key,source);
  Data dataValue=null;
  try {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
case OBJECT:
case NATIVE:
      dataValue=toData(record);
    break;
default :
  throw new IllegalArgumentException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
Data eventDataKey=toEventData(key);
Data eventDataValue=toEventData(dataValue);
onDeleteRecord(key,record,dataValue,record != null);
if (isEventsEnabled()) {
publishEvent(createCacheRemovedEvent(eventDataKey,eventDataValue,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,origin,completionId));
}
return record != null;
}
 catch (Throwable error) {
onDeleteRecordError(key,record,dataValue,record != null,error);
throw ExceptionUtil.rethrow(error);
}
}","protected boolean deleteRecord(Data key,int completionId,String source,String origin){
  final R record=doRemoveRecord(key,source);
  Data dataValue=null;
  try {
switch (cacheConfig.getInMemoryFormat()) {
case BINARY:
case OBJECT:
case NATIVE:
      dataValue=toData(record);
    break;
default :
  throw new IllegalArgumentException(""String_Node_Str"" + cacheConfig.getInMemoryFormat());
}
Data eventDataKey=toEventData(key);
Data eventDataValue=toEventData(dataValue);
onDeleteRecord(key,record,dataValue,record != null);
if (isEventsEnabled()) {
publishEvent(createCacheRemovedEvent(eventDataKey,eventDataValue,CacheRecord.TIME_NOT_AVAILABLE,origin,completionId));
}
return record != null;
}
 catch (Throwable error) {
onDeleteRecordError(key,record,dataValue,record != null,error);
throw ExceptionUtil.rethrow(error);
}
}",0.9933774834437086
46703,"public static CacheEventContext createCacheRemovedEvent(Data dataKey){
  return createCacheRemovedEvent(dataKey,null,CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,null,MutableOperation.IGNORE_COMPLETION);
}","public static CacheEventContext createCacheRemovedEvent(Data dataKey){
  return createCacheRemovedEvent(dataKey,null,CacheRecord.TIME_NOT_AVAILABLE,null,MutableOperation.IGNORE_COMPLETION);
}",0.9720101781170484
46704,"@Override public boolean isExpiredAt(long now){
  return expirationTime > -1 && expirationTime <= now;
}","@Override public boolean isExpiredAt(long now){
  return expirationTime > TIME_NOT_AVAILABLE && expirationTime <= now;
}",0.9107142857142856
46705,"private IMap<Integer,SampleObject> createInstanceAndGetMap(){
  String name=randomString();
  Config config=new Config();
  MapConfig mapConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true).setClassName(IncrementerPostProcessingMapStore.class.getName());
  mapConfig.setMapStoreConfig(mapStoreConfig);
  HazelcastInstance instance=createHazelcastInstance(config);
  return instance.getMap(name);
}","private IMap<Integer,SampleObject> createInstanceAndGetMap(){
  String name=randomString();
  Config config=new Config();
  MapConfig mapConfig=config.getMapConfig(name);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true).setClassName(IncrementerPostProcessingMapStore.class.getName());
  mapConfig.setMapStoreConfig(mapStoreConfig);
  HazelcastInstance instance=factory.newHazelcastInstance(config);
  warmUpPartitions(instance);
  return instance.getMap(name);
}",0.9513960703205792
46706,"@Test public void testProcessedValueCarriedToTheBackup(){
  TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory(2);
  String name=randomString();
  Config config=new Config();
  MapConfig mapConfig=config.getMapConfig(name);
  mapConfig.setReadBackupData(true);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true).setClassName(IncrementerPostProcessingMapStore.class.getName());
  mapConfig.setMapStoreConfig(mapStoreConfig);
  HazelcastInstance instance1=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  IMap<Integer,SampleObject> map1=instance1.getMap(name);
  IMap<Integer,SampleObject> map2=instance2.getMap(name);
  for (int i=0; i < 100; i++) {
    map1.put(i,new SampleObject(i));
  }
  for (int i=0; i < 100; i++) {
    SampleObject o=map1.get(i);
    assertEquals(i + 1,o.version);
  }
  for (int i=0; i < 100; i++) {
    SampleObject o=map2.get(i);
    assertEquals(i + 1,o.version);
  }
}","@Test public void testProcessedValueCarriedToTheBackup(){
  String name=randomString();
  Config config=new Config();
  MapConfig mapConfig=config.getMapConfig(name);
  mapConfig.setReadBackupData(true);
  MapStoreConfig mapStoreConfig=new MapStoreConfig();
  mapStoreConfig.setEnabled(true).setClassName(IncrementerPostProcessingMapStore.class.getName());
  mapConfig.setMapStoreConfig(mapStoreConfig);
  HazelcastInstance instance1=factory.newHazelcastInstance(config);
  HazelcastInstance instance2=factory.newHazelcastInstance(config);
  IMap<Integer,SampleObject> map1=instance1.getMap(name);
  IMap<Integer,SampleObject> map2=instance2.getMap(name);
  for (int i=0; i < 100; i++) {
    map1.put(i,new SampleObject(i));
  }
  for (int i=0; i < 100; i++) {
    SampleObject o=map1.get(i);
    assertEquals(i + 1,o.version);
  }
  for (int i=0; i < 100; i++) {
    SampleObject o=map2.get(i);
    assertEquals(i + 1,o.version);
  }
}",0.9619732785200412
46707,"void initialClusterState(ClusterState initialState){
  clusterServiceLock.lock();
  try {
    final ClusterState currentState=getState();
    if (currentState != ClusterState.ACTIVE && currentState != initialState) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + currentState + ""String_Node_Str""+ initialState);
      return;
    }
    this.state=initialState;
    changeNodeState(initialState);
    node.getNodeExtension().onClusterStateChange(initialState);
  }
  finally {
    clusterServiceLock.unlock();
  }
}","void initialClusterState(ClusterState initialState){
  clusterServiceLock.lock();
  try {
    final ClusterState currentState=getState();
    if (currentState != ClusterState.ACTIVE && currentState != initialState) {
      logger.warning(""String_Node_Str"" + ""String_Node_Str"" + currentState + ""String_Node_Str""+ initialState);
      return;
    }
    this.state=initialState;
    changeNodeState(initialState);
    node.getNodeExtension().onClusterStateChange(initialState,false);
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9943609022556392
46708,"public void commitClusterState(ClusterState newState,Address initiator,String txnId){
  Preconditions.checkNotNull(newState);
  if (newState == ClusterState.IN_TRANSITION) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  clusterServiceLock.lock();
  try {
    final ClusterStateLock stateLock=getStateLock();
    if (!stateLock.allowsUnlock(txnId)) {
      throw new TransactionException(""String_Node_Str"" + state + ""String_Node_Str""+ newState+ ""String_Node_Str""+ initiator+ ""String_Node_Str""+ stateToString());
    }
    this.state=newState;
    stateLockRef.set(ClusterStateLock.NOT_LOCKED);
    changeNodeState(newState);
    node.getNodeExtension().onClusterStateChange(newState);
    if (newState == ClusterState.ACTIVE) {
      node.getClusterService().removeMembersDeadWhileClusterIsNotActive();
    }
  }
  finally {
    clusterServiceLock.unlock();
  }
}","public void commitClusterState(ClusterState newState,Address initiator,String txnId){
  Preconditions.checkNotNull(newState);
  if (newState == ClusterState.IN_TRANSITION) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  clusterServiceLock.lock();
  try {
    final ClusterStateLock stateLock=getStateLock();
    if (!stateLock.allowsUnlock(txnId)) {
      throw new TransactionException(""String_Node_Str"" + state + ""String_Node_Str""+ newState+ ""String_Node_Str""+ initiator+ ""String_Node_Str""+ stateToString());
    }
    this.state=newState;
    stateLockRef.set(ClusterStateLock.NOT_LOCKED);
    changeNodeState(newState);
    node.getNodeExtension().onClusterStateChange(newState,true);
    if (newState == ClusterState.ACTIVE) {
      node.getClusterService().removeMembersDeadWhileClusterIsNotActive();
    }
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9971703452178834
46709,"void setClusterState(ClusterState newState){
  clusterServiceLock.lock();
  try {
    this.state=newState;
    stateLockRef.set(ClusterStateLock.NOT_LOCKED);
    changeNodeState(newState);
    node.getNodeExtension().onClusterStateChange(newState);
  }
  finally {
    clusterServiceLock.unlock();
  }
}","void setClusterState(ClusterState newState,boolean persistentChange){
  clusterServiceLock.lock();
  try {
    this.state=newState;
    stateLockRef.set(ClusterStateLock.NOT_LOCKED);
    changeNodeState(newState);
    node.getNodeExtension().onClusterStateChange(newState,persistentChange);
  }
  finally {
    clusterServiceLock.unlock();
  }
}",0.9351851851851852
46710,"@Override public void onClusterStateChange(ClusterState newState){
}","@Override public void onClusterStateChange(ClusterState newState,boolean persistentChange){
}",0.84472049689441
46711,"/** 
 * Called when cluster state is changed
 * @param newState new state
 */
void onClusterStateChange(ClusterState newState);","/** 
 * Called when cluster state is changed
 * @param newState new state
 * @param persistentChange status of the change. A cluster state change may be non-persistent if it has been done temporarilyduring system operations such cluster start etc.
 */
void onClusterStateChange(ClusterState newState,boolean persistentChange);",0.5607064017660044
46712,"private void reconnectHZInstance() throws ServletException {
  LOGGER.info(""String_Node_Str"");
  lastConnectionTry=System.currentTimeMillis();
  hazelcastInstance=HazelcastInstanceLoader.createInstance(this,filterConfig,properties);
  clusterMap=hazelcastInstance.getMap(clusterMapName);
  sss=(SerializationServiceSupport)hazelcastInstance;
  setFailedConnection(false);
  LOGGER.info(""String_Node_Str"");
}","private void reconnectHZInstance() throws ServletException {
  LOGGER.info(""String_Node_Str"");
  lastConnectionTry=System.currentTimeMillis();
  hazelcastInstance=HazelcastInstanceLoader.createInstance(this,filterConfig,properties,clusterMapName);
  clusterMap=hazelcastInstance.getMap(clusterMapName);
  sss=(SerializationServiceSupport)hazelcastInstance;
  setFailedConnection(false);
  LOGGER.info(""String_Node_Str"");
}",0.9819059107358264
46713,"/** 
 * Gets attributes.
 * @param sessionId the session id
 * @return the attributes
 * @throws Exception the exception
 */
Set<Map.Entry<String,Object>> getAttributes(String sessionId) throws Exception {
  GetSessionStateEntryProcessor entryProcessor=new GetSessionStateEntryProcessor();
  entryProcessor.setJvmId(jvmId);
  SessionState sessionState=(SessionState)executeOnKey(sessionId,entryProcessor);
  if (sessionState == null) {
    return null;
  }
  Map<String,Data> dataAttributes=sessionState.getAttributes();
  Set<Map.Entry<String,Object>> attributes=new HashSet<Map.Entry<String,Object>>(dataAttributes.size());
  for (  Map.Entry<String,Data> entry : dataAttributes.entrySet()) {
    String key=entry.getKey();
    Object value=sss.getSerializationService().toObject(entry.getValue());
    attributes.add(new MapEntrySimple<String,Object>(key,value));
  }
  return attributes;
}","/** 
 * Gets attributes.
 * @param sessionId the session id
 * @return the attributes
 * @throws Exception the exception
 */
Set<Map.Entry<String,Object>> getAttributes(String sessionId) throws Exception {
  GetSessionStateEntryProcessor entryProcessor=new GetSessionStateEntryProcessor();
  SessionState sessionState=(SessionState)executeOnKey(sessionId,entryProcessor);
  if (sessionState == null) {
    return null;
  }
  Map<String,Data> dataAttributes=sessionState.getAttributes();
  Set<Map.Entry<String,Object>> attributes=new HashSet<Map.Entry<String,Object>>(dataAttributes.size());
  for (  Map.Entry<String,Data> entry : dataAttributes.entrySet()) {
    String key=entry.getKey();
    Object value=sss.getSerializationService().toObject(entry.getValue());
    attributes.add(new MapEntrySimple<String,Object>(key,value));
  }
  return attributes;
}",0.980593607305936
46714,"/** 
 * Update attributes.
 * @param id      the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  sessionUpdate.setJvmId(jvmId);
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}","/** 
 * Update attributes.
 * @param id      the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}",0.972749793559042
46715,"/** 
 * Sets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @param value         the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  sessionUpdateProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,sessionUpdateProcessor);
}","/** 
 * Sets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @param value         the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  executeOnKey(sessionId,sessionUpdateProcessor);
}",0.9182156133828996
46716,"/** 
 * Gets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  entryProcessor.setJvmId(jvmId);
  return executeOnKey(sessionId,entryProcessor);
}","/** 
 * Gets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  return executeOnKey(sessionId,entryProcessor);
}",0.958128078817734
46717,"/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}","/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}",0.8862559241706162
46718,"private void doDeleteSession(String sessionId,boolean invalidate) throws Exception {
  DeleteSessionEntryProcessor entryProcessor=new DeleteSessionEntryProcessor(sessionId,invalidate);
  entryProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,entryProcessor);
}","private void doDeleteSession(String sessionId,boolean invalidate) throws Exception {
  DeleteSessionEntryProcessor entryProcessor=new DeleteSessionEntryProcessor(invalidate);
  executeOnKey(sessionId,entryProcessor);
}",0.8666666666666667
46719,"public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,configUrl,isSticky);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(sessionService,instanceName,config);
}","public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties,final String mapName) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  String sessionTTLConfig=properties.getProperty(SESSION_TTL_CONFIG);
  if (useClient) {
    if (sessionTTLConfig != null) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,configUrl,isSticky);
  }
  Config config=getServerConfig(mapName,configUrl,sessionTTLConfig);
  return createHazelcastInstance(sessionService,instanceName,config);
}",0.7713073659853451
46720,"@Override public void readData(ObjectDataInput in) throws IOException {
  int jvmCount=in.readInt();
  for (int i=0; i < jvmCount; i++) {
    jvmIds.add(in.readUTF());
  }
  int attCount=in.readInt();
  for (int i=0; i < attCount; i++) {
    attributes.put(in.readUTF(),in.readData());
  }
}","@Override public void readData(ObjectDataInput in) throws IOException {
  int attCount=in.readInt();
  for (int i=0; i < attCount; i++) {
    attributes.put(in.readUTF(),in.readData());
  }
}",0.7925311203319502
46721,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"" + jvmIds.size());
  sb.append(""String_Node_Str"" + ((attributes == null) ? 0 : attributes.size()));
  if (attributes != null) {
    for (    Map.Entry<String,Data> entry : attributes.entrySet()) {
      Data data=entry.getValue();
      int len=(data == null) ? 0 : data.dataSize();
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey() + ""String_Node_Str"" + len+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ((attributes == null) ? 0 : attributes.size()));
  if (attributes != null) {
    for (    Map.Entry<String,Data> entry : attributes.entrySet()) {
      Data data=entry.getValue();
      int len=(data == null) ? 0 : data.dataSize();
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey() + ""String_Node_Str"" + len+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9572953736654805
46722,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeInt(jvmIds.size());
  for (  String jvmId : jvmIds) {
    out.writeUTF(jvmId);
  }
  out.writeInt(attributes.size());
  for (  Map.Entry<String,Data> entry : attributes.entrySet()) {
    out.writeUTF(entry.getKey());
    out.writeData(entry.getValue());
  }
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeInt(attributes.size());
  for (  Map.Entry<String,Data> entry : attributes.entrySet()) {
    out.writeUTF(entry.getKey());
    out.writeData(entry.getValue());
  }
}",0.4966442953020134
46723,"public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.clusteredSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}","@Override public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.clusteredSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}",0.995787700084246
46724,"private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
}","private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
  setProperty(HazelcastInstanceLoader.SESSION_TTL_CONFIG);
}",0.9325714285714286
46725,"public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}","@Override public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}",0.992548435171386
46726,"public final void destroy(){
  sessions.clear();
  originalSessions.clear();
  if (shutdownOnDestroy) {
    clusteredSessionService.destroy();
  }
}","@Override public final void destroy(){
  sessions.clear();
  originalSessions.clear();
  if (shutdownOnDestroy) {
    clusteredSessionService.destroy();
  }
}",0.9673202614379084
46727,"@Override public Object process(Map.Entry<String,SessionState> entry){
  SessionState sessionState=entry.getValue();
  if (sessionState == null) {
    return Boolean.FALSE;
  }
  sessionState.removeJvmId(jvmId);
  if (invalidate || sessionState.getJvmIds().isEmpty()) {
    entry.setValue(null);
    removed=true;
  }
 else {
    entry.setValue(sessionState);
  }
  return Boolean.TRUE;
}","@Override public Object process(Map.Entry<String,SessionState> entry){
  SessionState sessionState=entry.getValue();
  if (sessionState == null) {
    return Boolean.FALSE;
  }
  if (invalidate) {
    entry.setValue(null);
    removed=true;
  }
 else {
    entry.setValue(sessionState);
  }
  return Boolean.TRUE;
}",0.8620199146514936
46728,"@Override public void readData(ObjectDataInput in) throws IOException {
  jvmId=in.readUTF();
  invalidate=in.readBoolean();
}","@Override public void readData(ObjectDataInput in) throws IOException {
  invalidate=in.readBoolean();
}",0.9043478260869564
46729,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeUTF(jvmId);
  out.writeBoolean(invalidate);
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeBoolean(invalidate);
}",0.9037656903765692
46730,"private void reconnectHZInstance() throws ServletException {
  LOGGER.info(""String_Node_Str"");
  lastConnectionTry=System.currentTimeMillis();
  hazelcastInstance=HazelcastInstanceLoader.createInstance(this,filterConfig,properties);
  clusterMap=hazelcastInstance.getMap(clusterMapName);
  sss=(SerializationServiceSupport)hazelcastInstance;
  setFailedConnection(false);
  LOGGER.info(""String_Node_Str"");
}","private void reconnectHZInstance() throws ServletException {
  LOGGER.info(""String_Node_Str"");
  lastConnectionTry=System.currentTimeMillis();
  hazelcastInstance=HazelcastInstanceLoader.createInstance(this,filterConfig,properties,clusterMapName);
  clusterMap=hazelcastInstance.getMap(clusterMapName);
  sss=(SerializationServiceSupport)hazelcastInstance;
  setFailedConnection(false);
  LOGGER.info(""String_Node_Str"");
}",0.9819059107358264
46731,"/** 
 * Gets attributes.
 * @param sessionId the session id
 * @return the attributes
 * @throws Exception the exception
 */
Set<Map.Entry<String,Object>> getAttributes(String sessionId) throws Exception {
  GetSessionStateEntryProcessor entryProcessor=new GetSessionStateEntryProcessor();
  entryProcessor.setJvmId(jvmId);
  SessionState sessionState=(SessionState)executeOnKey(sessionId,entryProcessor);
  if (sessionState == null) {
    return null;
  }
  Map<String,Data> dataAttributes=sessionState.getAttributes();
  Set<Map.Entry<String,Object>> attributes=new HashSet<Map.Entry<String,Object>>(dataAttributes.size());
  for (  Map.Entry<String,Data> entry : dataAttributes.entrySet()) {
    String key=entry.getKey();
    Object value=sss.getSerializationService().toObject(entry.getValue());
    attributes.add(new MapEntrySimple<String,Object>(key,value));
  }
  return attributes;
}","/** 
 * Gets attributes.
 * @param sessionId the session id
 * @return the attributes
 * @throws Exception the exception
 */
Set<Map.Entry<String,Object>> getAttributes(String sessionId) throws Exception {
  GetSessionStateEntryProcessor entryProcessor=new GetSessionStateEntryProcessor();
  SessionState sessionState=(SessionState)executeOnKey(sessionId,entryProcessor);
  if (sessionState == null) {
    return null;
  }
  Map<String,Data> dataAttributes=sessionState.getAttributes();
  Set<Map.Entry<String,Object>> attributes=new HashSet<Map.Entry<String,Object>>(dataAttributes.size());
  for (  Map.Entry<String,Data> entry : dataAttributes.entrySet()) {
    String key=entry.getKey();
    Object value=sss.getSerializationService().toObject(entry.getValue());
    attributes.add(new MapEntrySimple<String,Object>(key,value));
  }
  return attributes;
}",0.980593607305936
46732,"/** 
 * Update attributes.
 * @param id      the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  sessionUpdate.setJvmId(jvmId);
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}","/** 
 * Update attributes.
 * @param id      the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}",0.972749793559042
46733,"/** 
 * Sets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @param value         the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  sessionUpdateProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,sessionUpdateProcessor);
}","/** 
 * Sets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @param value         the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  executeOnKey(sessionId,sessionUpdateProcessor);
}",0.9182156133828996
46734,"/** 
 * Gets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  entryProcessor.setJvmId(jvmId);
  return executeOnKey(sessionId,entryProcessor);
}","/** 
 * Gets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  return executeOnKey(sessionId,entryProcessor);
}",0.958128078817734
46735,"/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}","/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}",0.8862559241706162
46736,"private void doDeleteSession(String sessionId,boolean invalidate) throws Exception {
  DeleteSessionEntryProcessor entryProcessor=new DeleteSessionEntryProcessor(sessionId,invalidate);
  entryProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,entryProcessor);
}","private void doDeleteSession(String sessionId,boolean invalidate) throws Exception {
  DeleteSessionEntryProcessor entryProcessor=new DeleteSessionEntryProcessor(invalidate);
  executeOnKey(sessionId,entryProcessor);
}",0.8666666666666667
46737,"public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,instanceName,configUrl,isSticky);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(sessionService,instanceName,config);
}","public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties,final String mapName) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  String sessionTTLConfig=properties.getProperty(SESSION_TTL_CONFIG);
  if (useClient) {
    if (sessionTTLConfig != null) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,configUrl,isSticky);
  }
  Config config=getServerConfig(mapName,configUrl,sessionTTLConfig);
  return createHazelcastInstance(sessionService,instanceName,config);
}",0.7674597083653109
46738,"private static HazelcastInstance createClientInstance(ClusteredSessionService sessionService,String instanceName,URL configUrl,boolean isSticky) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  clientConfig.setInstanceName(instanceName);
  if (isSticky) {
    clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  }
  ListenerConfig listenerConfig=new ListenerConfig(new ClientLifecycleListener(sessionService));
  clientConfig.addListenerConfig(listenerConfig);
  return HazelcastClient.newHazelcastClient(clientConfig);
}","private static HazelcastInstance createClientInstance(ClusteredSessionService sessionService,URL configUrl,boolean isSticky) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  if (isSticky) {
    clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  }
  ListenerConfig listenerConfig=new ListenerConfig(new ClientLifecycleListener(sessionService));
  clientConfig.addListenerConfig(listenerConfig);
  return HazelcastClient.newHazelcastClient(clientConfig);
}",0.9595588235294118
46739,"@Override public void readData(ObjectDataInput in) throws IOException {
  int jvmCount=in.readInt();
  for (int i=0; i < jvmCount; i++) {
    jvmIds.add(in.readUTF());
  }
  int attCount=in.readInt();
  for (int i=0; i < attCount; i++) {
    attributes.put(in.readUTF(),in.readData());
  }
}","@Override public void readData(ObjectDataInput in) throws IOException {
  int attCount=in.readInt();
  for (int i=0; i < attCount; i++) {
    attributes.put(in.readUTF(),in.readData());
  }
}",0.7925311203319502
46740,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"" + jvmIds.size());
  sb.append(""String_Node_Str"" + ((attributes == null) ? 0 : attributes.size()));
  if (attributes != null) {
    for (    Map.Entry<String,Data> entry : attributes.entrySet()) {
      Data data=entry.getValue();
      int len=(data == null) ? 0 : data.dataSize();
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey() + ""String_Node_Str"" + len+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ((attributes == null) ? 0 : attributes.size()));
  if (attributes != null) {
    for (    Map.Entry<String,Data> entry : attributes.entrySet()) {
      Data data=entry.getValue();
      int len=(data == null) ? 0 : data.dataSize();
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey() + ""String_Node_Str"" + len+ ""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9572953736654805
46741,"@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeInt(jvmIds.size());
  for (  String jvmId : jvmIds) {
    out.writeUTF(jvmId);
  }
  out.writeInt(attributes.size());
  for (  Map.Entry<String,Data> entry : attributes.entrySet()) {
    out.writeUTF(entry.getKey());
    out.writeData(entry.getValue());
  }
}","@Override public void writeData(ObjectDataOutput out) throws IOException {
  out.writeInt(attributes.size());
  for (  Map.Entry<String,Data> entry : attributes.entrySet()) {
    out.writeUTF(entry.getKey());
    out.writeData(entry.getValue());
  }
}",0.4966442953020134
46742,"public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.clusteredSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}","@Override public final void doFilter(ServletRequest req,ServletResponse res,final FilterChain chain) throws IOException, ServletException {
  if (!(req instanceof HttpServletRequest)) {
    chain.doFilter(req,res);
  }
 else {
    if (req instanceof RequestWrapper) {
      LOGGER.finest(""String_Node_Str"");
      chain.doFilter(req,res);
      return;
    }
    HttpServletRequest httpReq=(HttpServletRequest)req;
    RequestWrapper existingReq=(RequestWrapper)req.getAttribute(HAZELCAST_REQUEST);
    final ResponseWrapper resWrapper=new ResponseWrapper((HttpServletResponse)res);
    final RequestWrapper reqWrapper=new RequestWrapper(httpReq,resWrapper);
    if (existingReq != null) {
      reqWrapper.setHazelcastSession(existingReq.hazelcastSession,existingReq.clusteredSessionId);
    }
    chain.doFilter(reqWrapper,resWrapper);
    if (existingReq != null) {
      return;
    }
    HazelcastHttpSession session=reqWrapper.getSession(false);
    if (session != null && session.isValid()) {
      if (LOGGER.isFinestEnabled()) {
        LOGGER.finest(""String_Node_Str"" + session.getId());
      }
      if (deferredWrite) {
        session.sessionDeferredWrite();
      }
    }
  }
}",0.995787700084246
46743,"private void addSessionCookie(final RequestWrapper req,final String sessionId){
  final Cookie sessionCookie=new Cookie(sessionCookieName,sessionId);
  String path=req.getContextPath();
  if (""String_Node_Str"".equals(path)) {
    path=""String_Node_Str"";
  }
  sessionCookie.setPath(path);
  sessionCookie.setMaxAge(-1);
  if (sessionCookieDomain != null) {
    sessionCookie.setDomain(sessionCookieDomain);
  }
  if (sessionCookieHttpOnly) {
    try {
      sessionCookie.setHttpOnly(true);
    }
 catch (    NoSuchMethodError e) {
      LOGGER.info(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  sessionCookie.setSecure(sessionCookieSecure || req.isSecure());
  req.res.addCookie(sessionCookie);
}","private void addSessionCookie(final RequestWrapper req,final String sessionId){
  final Cookie sessionCookie=new Cookie(sessionCookieName,sessionId);
  String path=req.getContextPath();
  if (""String_Node_Str"".equals(path)) {
    path=""String_Node_Str"";
  }
  sessionCookie.setPath(path);
  sessionCookie.setMaxAge(-1);
  if (sessionCookieDomain != null) {
    sessionCookie.setDomain(sessionCookieDomain);
  }
  if (sessionCookieHttpOnly) {
    try {
      sessionCookie.setHttpOnly(true);
    }
 catch (    NoSuchMethodError e) {
      LOGGER.info(""String_Node_Str"" + getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  sessionCookie.setSecure(sessionCookieSecure);
  req.res.addCookie(sessionCookie);
}",0.9836065573770492
46744,"private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
}","private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
  setProperty(HazelcastInstanceLoader.SESSION_TTL_CONFIG);
}",0.9325714285714286
46745,"public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}","@Override public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}",0.992548435171386
46746,"public final void destroy(){
  sessions.clear();
  originalSessions.clear();
  if (shutdownOnDestroy) {
    clusteredSessionService.destroy();
  }
}","@Override public final void destroy(){
  sessions.clear();
  originalSessions.clear();
  if (shutdownOnDestroy) {
    clusteredSessionService.destroy();
  }
}",0.9673202614379084
46747,"public ClientInvocationServiceSupport(HazelcastClientInstanceImpl client){
  this.client=client;
  int maxAllowedConcurrentInvocations=client.getClientProperties().getInteger(MAX_CONCURRENT_INVOCATIONS);
  callIdSequence=new CallIdSequence.CallIdSequenceWithBackpressureViaException(maxAllowedConcurrentInvocations);
}","public ClientInvocationServiceSupport(HazelcastClientInstanceImpl client){
  this.client=client;
  int maxAllowedConcurrentInvocations=client.getClientProperties().getInteger(MAX_CONCURRENT_INVOCATIONS);
  callIdSequence=new CallIdSequence.CallIdSequenceFailFast(maxAllowedConcurrentInvocations);
}",0.9318181818181818
46748,"public EventServiceImpl(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.serializationService=nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  final Node node=nodeEngine.getNode();
  GroupProperties groupProperties=node.getGroupProperties();
  this.eventThreadCount=groupProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=groupProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=groupProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  final String eventSyncFrequencyProp=System.getProperty(EVENT_SYNC_FREQUENCY_PROP);
  int eventSyncFrequency;
  try {
    eventSyncFrequency=Integer.parseInt(eventSyncFrequencyProp);
    if (eventSyncFrequency <= 0) {
      eventSyncFrequency=EVENT_SYNC_FREQUENCY;
    }
  }
 catch (  Exception e) {
    eventSyncFrequency=EVENT_SYNC_FREQUENCY;
  }
  this.eventSyncFrequency=eventSyncFrequency;
  HazelcastThreadGroup threadGroup=node.getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(node.getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix(""String_Node_Str""),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}","public EventServiceImpl(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.serializationService=nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  GroupProperties groupProperties=nodeEngine.getNode().getGroupProperties();
  this.eventThreadCount=groupProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=groupProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=groupProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  int eventSyncFrequency;
  try {
    eventSyncFrequency=Integer.parseInt(System.getProperty(EVENT_SYNC_FREQUENCY_PROP));
    if (eventSyncFrequency <= 0) {
      eventSyncFrequency=EVENT_SYNC_FREQUENCY;
    }
  }
 catch (  Exception e) {
    eventSyncFrequency=EVENT_SYNC_FREQUENCY;
  }
  this.eventSyncFrequency=eventSyncFrequency;
  HazelcastThreadGroup threadGroup=nodeEngine.getNode().getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(nodeEngine.getNode().getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix(""String_Node_Str""),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}",0.918158567774936
46749,"public EventServiceImpl(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.serializationService=nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  final Node node=nodeEngine.getNode();
  GroupProperties groupProperties=node.getGroupProperties();
  this.eventThreadCount=groupProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=groupProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=groupProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  final String eventSyncFrequencyProp=System.getProperty(EVENT_SYNC_FREQUENCY_PROP);
  int eventSyncFrequency;
  try {
    eventSyncFrequency=Integer.valueOf(eventSyncFrequencyProp);
  }
 catch (  Exception e) {
    eventSyncFrequency=EVENT_SYNC_FREQUENCY;
  }
  this.eventSyncFrequency=eventSyncFrequency;
  HazelcastThreadGroup threadGroup=node.getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(node.getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix(""String_Node_Str""),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}","public EventServiceImpl(NodeEngineImpl nodeEngine){
  this.nodeEngine=nodeEngine;
  this.serializationService=nodeEngine.getSerializationService();
  this.logger=nodeEngine.getLogger(EventService.class.getName());
  final Node node=nodeEngine.getNode();
  GroupProperties groupProperties=node.getGroupProperties();
  this.eventThreadCount=groupProperties.getInteger(GroupProperty.EVENT_THREAD_COUNT);
  this.eventQueueCapacity=groupProperties.getInteger(GroupProperty.EVENT_QUEUE_CAPACITY);
  this.eventQueueTimeoutMs=groupProperties.getMillis(GroupProperty.EVENT_QUEUE_TIMEOUT_MILLIS);
  final String eventSyncFrequencyProp=System.getProperty(EVENT_SYNC_FREQUENCY_PROP);
  int eventSyncFrequency;
  try {
    eventSyncFrequency=Integer.parseInt(eventSyncFrequencyProp);
    if (eventSyncFrequency <= 0) {
      eventSyncFrequency=EVENT_SYNC_FREQUENCY;
    }
  }
 catch (  Exception e) {
    eventSyncFrequency=EVENT_SYNC_FREQUENCY;
  }
  this.eventSyncFrequency=eventSyncFrequency;
  HazelcastThreadGroup threadGroup=node.getHazelcastThreadGroup();
  this.eventExecutor=new StripedExecutor(node.getLogger(EventServiceImpl.class),threadGroup.getThreadNamePrefix(""String_Node_Str""),threadGroup.getInternalThreadGroup(),eventThreadCount,eventQueueCapacity);
  this.registrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.deregistrationExceptionHandler=new FutureUtilExceptionHandler(logger,""String_Node_Str"");
  this.segments=new ConcurrentHashMap<String,EventServiceSegment>();
  nodeEngine.getMetricsRegistry().scanAndRegister(this,""String_Node_Str"");
}",0.9466537342386032
46750,"public ClientInvocationServiceSupport(HazelcastClientInstanceImpl client){
  this.client=client;
  int maxAllowedConcurrentInvocations=client.getClientProperties().getInteger(MAX_CONCURRENT_INVOCATIONS);
  callIdSequence=new CallIdSequence.CallIdSequenceWithBackpressureViaException(maxAllowedConcurrentInvocations);
}","public ClientInvocationServiceSupport(HazelcastClientInstanceImpl client){
  this.client=client;
  int maxAllowedConcurrentInvocations=client.getClientProperties().getInteger(MAX_CONCURRENT_INVOCATIONS);
  callIdSequence=new CallIdSequence.CallIdSequenceFailFast(maxAllowedConcurrentInvocations);
}",0.9318181818181818
46751,"private LoadFinishedFuture(){
  super((Executor)null,null);
}","private LoadFinishedFuture(){
  super((Executor)null,getLogger(LoadFinishedFuture.class));
}",0.7843137254901961
46752,"@Test public void testHigherHitsCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,HigherHitsCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}","@Test public void testHigherHitsCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  warmUpPartitions(h1,h2);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  CountDownLatch mergeBlockingLatch=new CountDownLatch(1);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1,mergeBlockingLatch);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.memberRemovedLatch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,HigherHitsCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  mergeBlockingLatch.countDown();
  assertOpenEventually(lifeCycleListener.mergeFinishedLatch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}",0.8163658243080626
46753,"@Test public void testPassThroughCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,PassThroughCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  String key=generateKeyOwnedBy(h1);
  cache1.put(key,""String_Node_Str"");
  cache2.put(key,""String_Node_Str"");
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(key));
}","@Test public void testPassThroughCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  warmUpPartitions(h1,h2);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  CountDownLatch mergeBlockingLatch=new CountDownLatch(1);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1,mergeBlockingLatch);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.memberRemovedLatch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,PassThroughCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  String key=generateKeyOwnedBy(h1);
  cache1.put(key,""String_Node_Str"");
  cache2.put(key,""String_Node_Str"");
  mergeBlockingLatch.countDown();
  assertOpenEventually(lifeCycleListener.mergeFinishedLatch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(key));
}",0.7680145941015506
46754,"@Override public void memberRemoved(MembershipEvent membershipEvent){
  latch.countDown();
}","@Override public void memberRemoved(MembershipEvent membershipEvent){
  memberRemovedLatch.countDown();
}",0.9238578680203046
46755,"TestLifeCycleListener(int countdown){
  latch=new CountDownLatch(countdown);
}","TestLifeCycleListener(int countdown,CountDownLatch mergeBlockingLatch){
  this.mergeFinishedLatch=new CountDownLatch(countdown);
  this.mergeBlockingLatch=mergeBlockingLatch;
}",0.6062992125984252
46756,"@Test public void testLatestAccessCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,LatestAccessCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  sleepAtLeastMillis(1);
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  sleepAtLeastMillis(1);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager1.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}","@Test public void testLatestAccessCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  warmUpPartitions(h1,h2);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  CountDownLatch mergeBlockingLatch=new CountDownLatch(1);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1,mergeBlockingLatch);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.memberRemovedLatch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,LatestAccessCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  sleepAtLeastMillis(1);
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache2.get(""String_Node_Str""));
  sleepAtLeastMillis(1);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",cache1.get(""String_Node_Str""));
  mergeBlockingLatch.countDown();
  assertOpenEventually(lifeCycleListener.mergeFinishedLatch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager1.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}",0.8210180623973727
46757,"@Test public void testPutIfAbsentCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,PutIfAbsentCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}","@Test public void testPutIfAbsentCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  warmUpPartitions(h1,h2);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  CountDownLatch mergeBlockingLatch=new CountDownLatch(1);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1,mergeBlockingLatch);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.memberRemovedLatch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,PutIfAbsentCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  cache1.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  cache2.put(""String_Node_Str"",""String_Node_Str"");
  mergeBlockingLatch.countDown();
  assertOpenEventually(lifeCycleListener.mergeFinishedLatch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cacheTest.get(""String_Node_Str""));
}",0.7842804636697767
46758,"@Test public void testCustomCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.latch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,CustomCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  String key=generateKeyOwnedBy(h1);
  cache1.put(key,""String_Node_Str"");
  cache2.put(key,Integer.valueOf(1));
  assertOpenEventually(lifeCycleListener.latch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertNotNull(cacheTest.get(key));
  assertTrue(cacheTest.get(key) instanceof Integer);
}","@Test public void testCustomCacheMergePolicy(){
  String cacheName=randomMapName();
  Config config=newConfig();
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  warmUpPartitions(h1,h2);
  TestMemberShipListener memberShipListener=new TestMemberShipListener(1);
  h2.getCluster().addMembershipListener(memberShipListener);
  CountDownLatch mergeBlockingLatch=new CountDownLatch(1);
  TestLifeCycleListener lifeCycleListener=new TestLifeCycleListener(1,mergeBlockingLatch);
  h2.getLifecycleService().addLifecycleListener(lifeCycleListener);
  closeConnectionBetween(h1,h2);
  assertOpenEventually(memberShipListener.memberRemovedLatch);
  assertClusterSizeEventually(1,h1);
  assertClusterSizeEventually(1,h2);
  CachingProvider cachingProvider1=HazelcastServerCachingProvider.createCachingProvider(h1);
  CachingProvider cachingProvider2=HazelcastServerCachingProvider.createCachingProvider(h2);
  CacheManager cacheManager1=cachingProvider1.getCacheManager();
  CacheManager cacheManager2=cachingProvider2.getCacheManager();
  CacheConfig cacheConfig=newCacheConfig(cacheName,CustomCacheMergePolicy.class.getName());
  Cache cache1=cacheManager1.createCache(cacheName,cacheConfig);
  Cache cache2=cacheManager2.createCache(cacheName,cacheConfig);
  String key=generateKeyOwnedBy(h1);
  cache1.put(key,""String_Node_Str"");
  cache2.put(key,Integer.valueOf(1));
  mergeBlockingLatch.countDown();
  assertOpenEventually(lifeCycleListener.mergeFinishedLatch);
  assertClusterSizeEventually(2,h1);
  assertClusterSizeEventually(2,h2);
  Cache cacheTest=cacheManager2.getCache(cacheName);
  assertNotNull(cacheTest.get(key));
  assertTrue(cacheTest.get(key) instanceof Integer);
}",0.9494466048459468
46759,"@Override public void stateChanged(LifecycleEvent event){
  if (event.getState() == LifecycleEvent.LifecycleState.MERGED) {
    latch.countDown();
  }
}","@Override public void stateChanged(LifecycleEvent event){
  if (event.getState() == LifecycleEvent.LifecycleState.MERGING) {
    try {
      mergeBlockingLatch.await(30,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      ExceptionUtil.rethrow(e);
    }
  }
 else   if (event.getState() == LifecycleEvent.LifecycleState.MERGED) {
    mergeFinishedLatch.countDown();
  }
}",0.4935064935064935
46760,"TestMemberShipListener(int countdown){
  latch=new CountDownLatch(countdown);
}","TestMemberShipListener(int countdown){
  memberRemovedLatch=new CountDownLatch(countdown);
}",0.912280701754386
46761,"@Override public void setStringAttribute(String key,String value){
  notSupportedOnClient();
}","@Override public void setStringAttribute(String key,String value){
  throw notSupportedOnClient();
}",0.9690721649484536
46762,"@Override public void setFloatAttribute(String key,float value){
  notSupportedOnClient();
}","@Override public void setFloatAttribute(String key,float value){
  throw notSupportedOnClient();
}",0.968421052631579
46763,"@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") @Override public Boolean getBooleanAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Boolean.valueOf(attribute.toString()) : null;
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") @Override public Boolean getBooleanAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Boolean.valueOf(attribute.toString()) : null;
}",0.988095238095238
46764,"@Override public void setDoubleAttribute(String key,double value){
  notSupportedOnClient();
}","@Override public void setDoubleAttribute(String key,double value){
  throw notSupportedOnClient();
}",0.9690721649484536
46765,"@Override public Short getShortAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Short.valueOf(attribute.toString()) : null;
}","@Override public Short getShortAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Short.valueOf(attribute.toString()) : null;
}",0.9822485207100592
46766,"@Override public Double getDoubleAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Double.valueOf(attribute.toString()) : null;
}","@Override public Double getDoubleAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Double.valueOf(attribute.toString()) : null;
}",0.9825581395348836
46767,"private void notSupportedOnClient(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","private UnsupportedOperationException notSupportedOnClient(){
  return new UnsupportedOperationException(""String_Node_Str"");
}",0.8407079646017699
46768,"@Override public void setShortAttribute(String key,short value){
  notSupportedOnClient();
}","@Override public void setShortAttribute(String key,short value){
  throw notSupportedOnClient();
}",0.968421052631579
46769,"@Override public Byte getByteAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Byte.valueOf(attribute.toString()) : null;
}","@Override public Byte getByteAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Byte.valueOf(attribute.toString()) : null;
}",0.9819277108433736
46770,"@Override public void setBooleanAttribute(String key,boolean value){
  notSupportedOnClient();
}","@Override public void setBooleanAttribute(String key,boolean value){
  throw notSupportedOnClient();
}",0.9696969696969696
46771,"@Override public void setLongAttribute(String key,long value){
  notSupportedOnClient();
}","@Override public void setLongAttribute(String key,long value){
  throw notSupportedOnClient();
}",0.967741935483871
46772,"@Override public void setIntAttribute(String key,int value){
  notSupportedOnClient();
}","@Override public void setIntAttribute(String key,int value){
  throw notSupportedOnClient();
}",0.967032967032967
46773,"@Override public Long getLongAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Long.getLong(attribute.toString()) : null;
}","@Override public Long getLongAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Long.valueOf(attribute.toString()) : null;
}",0.9457831325301204
46774,"@Override public Integer getIntAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Integer.valueOf(attribute.toString()) : null;
}","@Override public Integer getIntAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Integer.valueOf(attribute.toString()) : null;
}",0.9824561403508772
46775,"@Override public void setByteAttribute(String key,byte value){
  notSupportedOnClient();
}","@Override public void setByteAttribute(String key,byte value){
  throw notSupportedOnClient();
}",0.967741935483871
46776,"@Override public Float getFloatAttribute(String key){
  final Object attribute=getAttribute(key);
  return attribute != null ? Float.valueOf(attribute.toString()) : null;
}","@Override public Float getFloatAttribute(String key){
  Object attribute=getAttribute(key);
  return attribute != null ? Float.valueOf(attribute.toString()) : null;
}",0.9822485207100592
46777,"@Override public void removeAttribute(String key){
  notSupportedOnClient();
}","@Override public void removeAttribute(String key){
  throw notSupportedOnClient();
}",0.9629629629629628
46778,"public static byte[] compress(byte[] input) throws IOException {
  Deflater compressor=new Deflater();
  compressor.setLevel(Deflater.BEST_SPEED);
  compressor.setInput(input);
  compressor.finish();
  ByteArrayOutputStream bos=new ByteArrayOutputStream(input.length / 10);
  byte[] buf=new byte[input.length / 10];
  while (!compressor.finished()) {
    int count=compressor.deflate(buf);
    bos.write(buf,0,count);
  }
  bos.close();
  compressor.end();
  return bos.toByteArray();
}","public static byte[] compress(byte[] input) throws IOException {
  if (input.length == 0) {
    return new byte[0];
  }
  Deflater compressor=new Deflater();
  compressor.setLevel(Deflater.BEST_SPEED);
  compressor.setInput(input);
  compressor.finish();
  ByteArrayOutputStream bos=new ByteArrayOutputStream(input.length / 10);
  byte[] buf=new byte[input.length / 10];
  while (!compressor.finished()) {
    int count=compressor.deflate(buf);
    bos.write(buf,0,count);
  }
  bos.close();
  compressor.end();
  return bos.toByteArray();
}",0.9464459591041868
46779,"/** 
 * This method has a direct dependency on how objects are serialized in  {@link com.hazelcast.nio.serialization.DataSerializer}! If the stream format is ever changed this extraction method needs to be changed too!
 */
public static long extractOperationCallId(Data data,SerializationService serializationService) throws IOException {
  ObjectDataInput input=serializationService.createObjectDataInput(data);
  boolean identified=input.readBoolean();
  if (identified) {
    input.readInt();
    input.readInt();
  }
 else {
    input.readUTF();
  }
  return input.readLong();
}","/** 
 * This method has a direct dependency on how objects are serialized in  {@link com.hazelcast.internal.serialization.impl.DataSerializer}! If the stream format is ever changed this extraction method needs to be changed too!
 */
public static long extractOperationCallId(Data data,SerializationService serializationService) throws IOException {
  ObjectDataInput input=serializationService.createObjectDataInput(data);
  boolean identified=input.readBoolean();
  if (identified) {
    input.readInt();
    input.readInt();
  }
 else {
    input.readUTF();
  }
  return input.readLong();
}",0.9625212947189096
46780,"/** 
 * Closes the Closable quietly. So no exception will be thrown. Can also safely be called with a null value.
 * @param closeable the Closeable to close.
 */
public static void closeResource(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
      Logger.getLogger(IOUtil.class).finest(""String_Node_Str"",e);
    }
  }
}","/** 
 * Closes the Closable quietly. So no exception will be thrown. Can also safely be called with a null value.
 * @param closeable the Closeable to close.
 */
public static void closeResource(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException e) {
      Logger.getLogger(IOUtil.class).finest(""String_Node_Str"",e);
    }
  }
}",0.9923857868020304
46781,"public static ObjectInputStream newObjectInputStream(final ClassLoader classLoader,final InputStream in) throws IOException {
  return new ObjectInputStream(in){
    protected Class<?> resolveClass(    final ObjectStreamClass desc) throws ClassNotFoundException {
      return ClassLoaderUtil.loadClass(classLoader,desc.getName());
    }
  }
;
}","public static ObjectInputStream newObjectInputStream(final ClassLoader classLoader,InputStream in) throws IOException {
  return new ObjectInputStream(in){
    protected Class<?> resolveClass(    ObjectStreamClass desc) throws ClassNotFoundException {
      return ClassLoaderUtil.loadClass(classLoader,desc.getName());
    }
  }
;
}",0.9823008849557522
46782,"/** 
 * Ensures that the file described by the supplied parameter does not exist after the method returns. If the file didn't exist, returns silently. If the file could not be deleted, fails with an exception. If the file is a directory, its children are recursively deleted.
 */
public static void delete(File f){
  if (!f.exists()) {
    return;
  }
  final File[] subFiles=f.listFiles();
  if (subFiles != null) {
    for (    File sf : subFiles) {
      delete(sf);
    }
  }
  if (!f.delete()) {
    throw new HazelcastException(""String_Node_Str"" + f);
  }
}","/** 
 * Ensures that the file described by the supplied parameter does not exist after the method returns. If the file didn't exist, returns silently. If the file could not be deleted, fails with an exception. If the file is a directory, its children are recursively deleted.
 */
public static void delete(File f){
  if (!f.exists()) {
    return;
  }
  File[] subFiles=f.listFiles();
  if (subFiles != null) {
    for (    File sf : subFiles) {
      delete(sf);
    }
  }
  if (!f.delete()) {
    throw new HazelcastException(""String_Node_Str"" + f);
  }
}",0.9946428571428572
46783,"public static <T>T readObject(ObjectDataInput in) throws IOException {
  boolean isBinary=in.readBoolean();
  if (isBinary) {
    return (T)in.readData();
  }
  return in.readObject();
}","@SuppressWarnings(""String_Node_Str"") public static <T>T readObject(ObjectDataInput in) throws IOException {
  boolean isBinary=in.readBoolean();
  if (isBinary) {
    return (T)in.readData();
  }
  return in.readObject();
}",0.9095354523227384
46784,"protected Class<?> resolveClass(final ObjectStreamClass desc) throws ClassNotFoundException {
  return ClassLoaderUtil.loadClass(classLoader,desc.getName());
}","protected Class<?> resolveClass(ObjectStreamClass desc) throws ClassNotFoundException {
  return ClassLoaderUtil.loadClass(classLoader,desc.getName());
}",0.9807692307692308
46785,"public MockedNodeConnection(int connectionId,Address localEndpoint,Address remoteEndpoint,NodeEngineImpl nodeEngine,MockedClientConnection responseConnection){
  super(localEndpoint,remoteEndpoint,nodeEngine);
  this.responseConnection=responseConnection;
  this.connectionId=connectionId;
}","public MockedNodeConnection(int connectionId,Address localEndpoint,Address remoteEndpoint,NodeEngineImpl nodeEngine,MockedClientConnection responseConnection){
  super(localEndpoint,remoteEndpoint,nodeEngine);
  this.responseConnection=responseConnection;
  this.connectionId=connectionId;
  register();
}",0.976510067114094
46786,"public MockedNodeConnection(int connectionId,Address localEndpoint,Address remoteEndpoint,NodeEngineImpl nodeEngine,MockedClientConnection responseConnection){
  super(localEndpoint,remoteEndpoint,nodeEngine);
  this.responseConnection=responseConnection;
  this.connectionId=connectionId;
}","public MockedNodeConnection(int connectionId,Address localEndpoint,Address remoteEndpoint,NodeEngineImpl nodeEngine,MockedClientConnection responseConnection){
  super(localEndpoint,remoteEndpoint,nodeEngine);
  this.responseConnection=responseConnection;
  this.connectionId=connectionId;
  register();
}",0.976510067114094
46787,"@Test public void runPacket() throws Exception {
  Operation op=new DummyOperation();
  setCallId(op,1000 * 1000);
  Packet packet=toPacket(remote,op);
  operationRunner.run(packet);
}","@Test public void runPacket() throws Exception {
  Operation op=new DummyOperation();
  setCallId(op,1000 * 1000);
  Packet packet=toPacket(local,remote,op);
  operationRunner.run(packet);
}",0.983957219251337
46788,"@Test(expected=HazelcastSerializationException.class) public void runPacket_whenBroken() throws Exception {
  Operation op=new DummyOperation();
  setCallId(op,1000 * 1000);
  Packet packet=toPacket(remote,op);
  byte[] bytes=packet.toByteArray();
  for (int k=0; k < bytes.length; k++) {
    bytes[k]++;
  }
  operationRunner.run(packet);
}","@Test(expected=HazelcastSerializationException.class) public void runPacket_whenBroken() throws Exception {
  Operation op=new DummyOperation();
  setCallId(op,1000 * 1000);
  Packet packet=toPacket(local,remote,op);
  byte[] bytes=packet.toByteArray();
  for (int k=0; k < bytes.length; k++) {
    bytes[k]++;
  }
  operationRunner.run(packet);
}",0.9912790697674418
46789,"public static Packet toPacket(HazelcastInstance hz,Operation operation){
  SerializationService serializationService=getSerializationService(hz);
  ConnectionManager connectionManager=getConnectionManager(hz);
  Packet packet=new Packet(serializationService.toBytes(operation),operation.getPartitionId());
  packet.setHeader(Packet.HEADER_OP);
  packet.setConn(connectionManager.getConnection(getAddress(hz)));
  return packet;
}","public static Packet toPacket(HazelcastInstance local,HazelcastInstance remote,Operation operation){
  SerializationService serializationService=getSerializationService(local);
  ConnectionManager connectionManager=getConnectionManager(local);
  Packet packet=new Packet(serializationService.toBytes(operation),operation.getPartitionId());
  packet.setHeader(Packet.HEADER_OP);
  packet.setConn(connectionManager.getConnection(getAddress(remote)));
  return packet;
}",0.9397321428571428
46790,"@Override public boolean isAlive(){
  return live;
}","@Override public boolean isAlive(){
  return live && nodeEngine.isRunning();
}",0.8
46791,"@Override public Connection getConnection(Address address){
  MockConnection conn=mapConnections.get(address);
  if (conn == null || !conn.isAlive()) {
    NodeEngineImpl nodeEngine=nodes.get(address);
    if (nodeEngine != null && nodeEngine.getNode().getState() != NodeState.SHUT_DOWN) {
      MockConnection thisConnection=new MockConnection(address,node.getThisAddress(),node.nodeEngine);
      conn=new MockConnection(node.getThisAddress(),address,nodeEngine);
      conn.localConnection=thisConnection;
      thisConnection.localConnection=conn;
      mapConnections.put(address,conn);
    }
  }
  return conn;
}","@Override public Connection getConnection(Address address){
  return mapConnections.get(address);
}",0.2677824267782426
46792,"@Override public Connection getOrConnect(Address address,boolean silent){
  return getConnection(address);
}","@Override public Connection getOrConnect(Address address,boolean silent){
  return getOrConnect(address);
}",0.9767441860465116
46793,"public void destroyConnection(final Connection connection){
  final Address endPoint=connection.getEndPoint();
  mapConnections.remove(endPoint);
  ioService.getEventService().executeEventCallback(new StripedRunnable(){
    @Override public void run(){
      for (      ConnectionListener listener : connectionListeners) {
        listener.connectionRemoved(connection);
      }
    }
    @Override public int getKey(){
      return endPoint.hashCode();
    }
  }
);
}","public void destroyConnection(final Connection connection){
  final Address endPoint=connection.getEndPoint();
  final boolean removed=mapConnections.remove(endPoint,connection);
  if (!removed) {
    return;
  }
  logger.info(""String_Node_Str"" + endPoint + ""String_Node_Str""+ connection);
  ioService.getEventService().executeEventCallback(new StripedRunnable(){
    @Override public void run(){
      for (      ConnectionListener listener : connectionListeners) {
        listener.connectionRemoved(connection);
      }
    }
    @Override public int getKey(){
      return endPoint.hashCode();
    }
  }
);
}",0.8666666666666667
46794,"@Override public void shutdown(){
  for (  Address address : nodes.keySet()) {
    if (address.equals(node.getThisAddress())) {
      continue;
    }
    final NodeEngineImpl nodeEngine=nodes.get(address);
    if (nodeEngine != null && nodeEngine.isRunning()) {
      nodeEngine.getExecutionService().execute(ExecutionService.SYSTEM_EXECUTOR,new Runnable(){
        public void run(){
          ClusterServiceImpl clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
          clusterService.removeAddress(node.getThisAddress());
        }
      }
);
    }
  }
}","@Override public void shutdown(){
  for (  Address address : nodes.keySet()) {
    if (address.equals(node.getThisAddress())) {
      continue;
    }
    final NodeEngineImpl nodeEngine=nodes.get(address);
    if (nodeEngine != null && nodeEngine.isRunning()) {
      nodeEngine.getExecutionService().execute(ExecutionService.SYSTEM_EXECUTOR,new Runnable(){
        public void run(){
          ClusterServiceImpl clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
          clusterService.removeAddress(node.getThisAddress());
        }
      }
);
    }
  }
  for (  MockConnection connection : mapConnections.values()) {
    connection.close();
  }
}",0.9260450160771704
46795,"protected boolean isInvalidationEnabled(){
  return isOwner && cacheContext.getInvalidationListenerCount() > 0;
}","protected boolean isInvalidationEnabled(){
  return primary && cacheContext.getInvalidationListenerCount() > 0;
}",0.9557522123893806
46796,"public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.isOwner=nodeEngine.getPartitionService().isPartitionOwner(partitionId);
  this.nodeEngine=nodeEngine;
  this.partitionService=nodeEngine.getPartitionService();
  this.partitionCount=partitionService.getPartitionCount();
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  this.cacheContext=cacheService.getOrCreateCacheContext(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + name + ""String_Node_Str""+ nodeEngine.getLocalMember());
  }
  this.wanReplicationEnabled=cacheService.isWanReplicationEnabled(name);
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    if (cacheLoaderFactory instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)cacheLoaderFactory).setHazelcastInstance(nodeEngine.getHazelcastInstance());
    }
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    if (cacheWriterFactory instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)cacheWriterFactory).setHazelcastInstance(nodeEngine.getHazelcastInstance());
    }
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.records=createRecordCacheMap();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaximumSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=createEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
}","public AbstractCacheRecordStore(final String name,final int partitionId,final NodeEngine nodeEngine,final AbstractCacheService cacheService){
  this.name=name;
  this.partitionId=partitionId;
  this.nodeEngine=nodeEngine;
  this.partitionCount=nodeEngine.getPartitionService().getPartitionCount();
  this.cacheService=cacheService;
  this.cacheConfig=cacheService.getCacheConfig(name);
  this.cacheContext=cacheService.getOrCreateCacheContext(name);
  if (cacheConfig == null) {
    throw new CacheNotExistsException(""String_Node_Str"" + name + ""String_Node_Str""+ nodeEngine.getLocalMember());
  }
  this.wanReplicationEnabled=cacheService.isWanReplicationEnabled(name);
  this.evictionConfig=cacheConfig.getEvictionConfig();
  if (evictionConfig == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cacheConfig.getCacheLoaderFactory() != null) {
    final Factory<CacheLoader> cacheLoaderFactory=cacheConfig.getCacheLoaderFactory();
    if (cacheLoaderFactory instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)cacheLoaderFactory).setHazelcastInstance(nodeEngine.getHazelcastInstance());
    }
    cacheLoader=cacheLoaderFactory.create();
  }
  if (cacheConfig.getCacheWriterFactory() != null) {
    final Factory<CacheWriter> cacheWriterFactory=cacheConfig.getCacheWriterFactory();
    if (cacheWriterFactory instanceof HazelcastInstanceAware) {
      ((HazelcastInstanceAware)cacheWriterFactory).setHazelcastInstance(nodeEngine.getHazelcastInstance());
    }
    cacheWriter=cacheWriterFactory.create();
  }
  if (cacheConfig.isStatisticsEnabled()) {
    this.statistics=cacheService.createCacheStatIfAbsent(name);
  }
  final Factory<ExpiryPolicy> expiryPolicyFactory=cacheConfig.getExpiryPolicyFactory();
  this.defaultExpiryPolicy=expiryPolicyFactory.create();
  this.records=createRecordCacheMap();
  this.maxSizeChecker=createCacheMaxSizeChecker(evictionConfig.getSize(),evictionConfig.getMaximumSizePolicy());
  this.evictionPolicyEvaluator=createEvictionPolicyEvaluator(evictionConfig);
  this.evictionChecker=createEvictionChecker(evictionConfig);
  this.evictionStrategy=createEvictionStrategy(evictionConfig);
  if (cacheWriter instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheWriter);
  }
  if (cacheLoader instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)cacheLoader);
  }
  if (defaultExpiryPolicy instanceof Closeable) {
    cacheService.addCacheResource(name,(Closeable)defaultExpiryPolicy);
  }
  init();
}",0.9570957095709572
46797,"@Override public void rollbackMigration(PartitionMigrationEvent event){
  if (event.getMigrationEndpoint() == MigrationEndpoint.DESTINATION) {
    clearPartitionReplica(event.getPartitionId());
  }
}","@Override public void rollbackMigration(PartitionMigrationEvent event){
  if (event.getMigrationEndpoint() == MigrationEndpoint.DESTINATION) {
    clearPartitionReplica(event.getPartitionId());
  }
  initPartitionReplica(event.getPartitionId());
}",0.8923766816143498
46798,"@Override public void reset(){
  for (  String objectName : configs.keySet()) {
    deleteCache(objectName,true,null,false);
  }
  final CachePartitionSegment[] partitionSegments=segments;
  for (  CachePartitionSegment partitionSegment : partitionSegments) {
    if (partitionSegment != null) {
      partitionSegment.clear();
    }
  }
}","@Override public void reset(){
  for (  String objectName : configs.keySet()) {
    deleteCache(objectName,true,null,false);
  }
  final CachePartitionSegment[] partitionSegments=segments;
  for (  CachePartitionSegment partitionSegment : partitionSegments) {
    if (partitionSegment != null) {
      partitionSegment.clear();
      partitionSegment.init();
    }
  }
}",0.9562764456981664
46799,"@Override public void commitMigration(PartitionMigrationEvent event){
  if (event.getMigrationEndpoint() == MigrationEndpoint.SOURCE) {
    clearPartitionReplica(event.getPartitionId());
  }
}","@Override public void commitMigration(PartitionMigrationEvent event){
  if (event.getMigrationEndpoint() == MigrationEndpoint.SOURCE) {
    clearPartitionReplica(event.getPartitionId());
  }
  initPartitionReplica(event.getPartitionId());
}",0.8888888888888888
46800,"public String getCacheNameWithPrefix(String name){
  return cacheNamePrefix + name;
}","@Override public String getCacheNameWithPrefix(String name){
  return cacheNamePrefix + name;
}",0.9444444444444444
46801,"@Override protected void onTearDown(){
  factory.terminateAll();
}","@Override protected void onTearDown(){
  factory.shutdownAll();
}",0.900763358778626
46802,"@Override public void run() throws Exception {
  final List<Data> keyValueSequence=this.keyValueSequence;
  if (keyValueSequence == null || keyValueSequence.isEmpty()) {
    return;
  }
  final int partitionId=getPartitionId();
  final MapService mapService=this.mapService;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final RecordStore recordStore=mapServiceContext.getRecordStore(partitionId,name);
  for (int i=0; i < keyValueSequence.size(); i+=2) {
    final Data key=keyValueSequence.get(i);
    final Data value=keyValueSequence.get(i + 1);
    final Object object=mapServiceContext.toObject(value);
    recordStore.putFromLoad(key,object);
    publishWanReplicationEvent(key,value,recordStore.getRecord(key));
  }
}","@Override public void run() throws Exception {
  final List<Data> keyValueSequence=this.keyValueSequence;
  if (keyValueSequence == null || keyValueSequence.isEmpty()) {
    return;
  }
  final int partitionId=getPartitionId();
  final MapService mapService=this.mapService;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final RecordStore recordStore=mapServiceContext.getRecordStore(partitionId,name);
  for (int i=0; i < keyValueSequence.size(); i+=2) {
    final Data key=keyValueSequence.get(i);
    final Data value=keyValueSequence.get(i + 1);
    final Object object=mapServiceContext.toObject(value);
    recordStore.putFromLoadBackup(key,object);
    publishWanReplicationEvent(key,value,recordStore.getRecord(key));
  }
}",0.9960369881109644
46803,"@Override public Object putFromLoad(Data key,Object value,long ttl){
  if (!isKeyAndValueLoadable(key,value)) {
    return null;
  }
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(value,ttl,now);
    storage.put(key,record);
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,oldValue,value);
    updateRecord(key,record,value,now);
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record,oldValue);
  return oldValue;
}","@Override public Object putFromLoad(Data key,Object value,long ttl){
  return putFromLoadInternal(key,value,ttl,false);
}",0.240566037735849
46804,"@Override public Object putFromLoad(Data key,Object value,long ttl){
  if (key == null || value == null) {
    return null;
  }
  final long now=getNow();
  if (shouldEvict(now)) {
    return null;
  }
  markRecordStoreExpirable(ttl);
  Record record=getRecordOrNull(key,now,false);
  Object oldValue=null;
  if (record == null) {
    value=mapServiceContext.interceptPut(name,null,value);
    record=createRecord(key,value,ttl,now);
    records.put(key,record);
    updateSizeEstimator(calculateRecordHeapCost(record));
  }
 else {
    oldValue=record.getValue();
    value=mapServiceContext.interceptPut(name,record.getValue(),value);
    updateSizeEstimator(-calculateRecordHeapCost(record));
    updateRecord(record,value,now);
    updateSizeEstimator(calculateRecordHeapCost(record));
    updateExpiryTime(record,ttl,mapContainer.getMapConfig());
  }
  saveIndex(record);
  return oldValue;
}","@Override public Object putFromLoad(Data key,Object value,long ttl){
  return putFromLoadInternal(key,value,ttl,false);
}",0.2180746561886051
46805,"@Override public void run() throws Exception {
  final List<Data> keyValueSequence=this.keyValueSequence;
  if (keyValueSequence == null || keyValueSequence.isEmpty()) {
    return;
  }
  final int partitionId=getPartitionId();
  final MapService mapService=this.mapService;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final RecordStore recordStore=mapServiceContext.getRecordStore(partitionId,name);
  for (int i=0; i < keyValueSequence.size(); i+=2) {
    final Data key=keyValueSequence.get(i);
    final Data value=keyValueSequence.get(i + 1);
    final Object object=mapServiceContext.toObject(value);
    recordStore.putFromLoad(key,object);
  }
}","@Override public void run() throws Exception {
  final List<Data> keyValueSequence=this.keyValueSequence;
  if (keyValueSequence == null || keyValueSequence.isEmpty()) {
    return;
  }
  final int partitionId=getPartitionId();
  final MapService mapService=this.mapService;
  MapServiceContext mapServiceContext=mapService.getMapServiceContext();
  final RecordStore recordStore=mapServiceContext.getRecordStore(partitionId,name);
  for (int i=0; i < keyValueSequence.size(); i+=2) {
    final Data key=keyValueSequence.get(i);
    final Data value=keyValueSequence.get(i + 1);
    final Object object=mapServiceContext.toObject(value);
    recordStore.putFromLoadBackup(key,object);
  }
}",0.9956331877729258
46806,"@Override public void onResponse(ClientMessage message){
  if (!done) {
synchronized (mutex) {
      if (!done) {
        response=resolveMessageToValue(message);
        if (shouldDeserializeData && deserializedValue == null) {
          deserializedValue=serializationService.toObject(response);
        }
        done=true;
      }
    }
  }
  if (shouldDeserializeData) {
    callback.onResponse((T)deserializedValue);
  }
 else {
    callback.onResponse((T)response);
  }
}","@Override public void onResponse(ClientMessage message){
  if (!done || response == null) {
synchronized (mutex) {
      if (!done || response == null) {
        response=resolveMessageToValue(message);
        if (shouldDeserializeData && deserializedValue == null) {
          deserializedValue=serializationService.toObject(response);
        }
        done=true;
      }
    }
  }
  if (shouldDeserializeData) {
    callback.onResponse((T)deserializedValue);
  }
 else {
    callback.onResponse((T)response);
  }
}",0.9598393574297188
46807,"@Override public void onResponse(Object response){
  if (!done) {
synchronized (mutex) {
      if (!done) {
        value=getResult(response);
        done=true;
      }
    }
  }
  callback.onResponse((T)value);
}","@Override public void onResponse(Object response){
  if (!done || value == null) {
synchronized (mutex) {
      if (!done || value == null) {
        value=getResult(response);
        done=true;
      }
    }
  }
  callback.onResponse((T)value);
}",0.9264069264069263
46808,"@Override public void onResponse(ClientMessage message){
  if (!done) {
synchronized (mutex) {
      if (!done) {
        response=resolveMessageToValue(message);
        if (shouldDeserializeData && deserializedValue == null) {
          deserializedValue=serializationService.toObject(response);
        }
        done=true;
      }
    }
  }
  if (shouldDeserializeData) {
    callback.onResponse((T)deserializedValue);
  }
 else {
    callback.onResponse((T)response);
  }
}","@Override public void onResponse(ClientMessage message){
  if (!done || response == null) {
synchronized (mutex) {
      if (!done || response == null) {
        response=resolveMessageToValue(message);
        if (shouldDeserializeData && deserializedValue == null) {
          deserializedValue=serializationService.toObject(response);
        }
        done=true;
      }
    }
  }
  if (shouldDeserializeData) {
    callback.onResponse((T)deserializedValue);
  }
 else {
    callback.onResponse((T)response);
  }
}",0.9598393574297188
46809,"void process(EventPacket eventPacket){
  Object eventObject=getEventObject(eventPacket);
  String serviceName=eventPacket.getServiceName();
  EventPublishingService<Object,Object> service=getPublishingService(serviceName);
  Registration registration=getRegistration(eventPacket,serviceName);
  if (registration == null) {
    return;
  }
  service.dispatchEvent(eventObject,registration.getListener());
}","void process(EventPacket eventPacket){
  Object eventObject=getEventObject(eventPacket);
  String serviceName=eventPacket.getServiceName();
  EventPublishingService<Object,Object> service=eventService.nodeEngine.getService(serviceName);
  Registration registration=getRegistration(eventPacket,serviceName);
  if (registration == null) {
    return;
  }
  service.dispatchEvent(eventObject,registration.getListener());
}",0.9514563106796116
46810,"ProxyRegistry(ProxyServiceImpl proxyService,String serviceName){
  this.proxyService=proxyService;
  this.serviceName=serviceName;
  this.service=getService(proxyService,serviceName);
}","ProxyRegistry(ProxyServiceImpl proxyService,String serviceName){
  this.proxyService=proxyService;
  this.serviceName=serviceName;
  this.service=proxyService.nodeEngine.getService(serviceName);
}",0.9081364829396326
46811,"@Override public void onResponse(Object response){
  if (!done) {
synchronized (mutex) {
      if (!done) {
        value=getResult(response);
        done=true;
      }
    }
  }
  callback.onResponse((T)value);
}","@Override public void onResponse(Object response){
  if (!done || value == null) {
synchronized (mutex) {
      if (!done || value == null) {
        value=getResult(response);
        done=true;
      }
    }
  }
  callback.onResponse((T)value);
}",0.9264069264069263
46812,"@Override public void run(){
  try {
    final Map<Integer,Object> results=invoke(request);
    validateResults(results);
    if (completionListener != null) {
      completionListener.onCompletion();
    }
  }
 catch (  Exception e) {
    if (completionListener != null) {
      completionListener.onException(e);
    }
  }
}","@Override public void run(){
  try {
    final Map<Integer,Object> results=invoke(request);
    validateResults(results);
    if (completionListener != null) {
      completionListener.onCompletion();
    }
  }
 catch (  Exception e) {
    if (completionListener != null) {
      completionListener.onException(e);
    }
  }
catch (  Throwable t) {
    if (t instanceof OutOfMemoryError) {
      ExceptionUtil.rethrow(t);
    }
 else {
      if (completionListener != null) {
        completionListener.onException(new CacheException(t));
      }
    }
  }
}",0.7352941176470589
46813,"@Override public CacheOperationProvider getCacheOperationProvider(String nameWithPrefix,InMemoryFormat inMemoryFormat){
  if (InMemoryFormat.NATIVE.equals(inMemoryFormat)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CacheOperationProvider cacheOperationProvider=operationProviderCache.get(nameWithPrefix);
  if (cacheOperationProvider != null) {
    return cacheOperationProvider;
  }
  cacheOperationProvider=new DefaultOperationProvider(nameWithPrefix);
  CacheOperationProvider current=operationProviderCache.putIfAbsent(nameWithPrefix,cacheOperationProvider);
  return current == null ? cacheOperationProvider : current;
}","@Override public CacheOperationProvider getCacheOperationProvider(String nameWithPrefix,InMemoryFormat inMemoryFormat){
  if (InMemoryFormat.NATIVE.equals(inMemoryFormat)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  CacheOperationProvider cacheOperationProvider=operationProviderCache.get(nameWithPrefix);
  if (cacheOperationProvider != null) {
    return cacheOperationProvider;
  }
  cacheOperationProvider=new DefaultOperationProvider(nameWithPrefix);
  CacheOperationProvider current=operationProviderCache.putIfAbsent(nameWithPrefix,cacheOperationProvider);
  return current == null ? cacheOperationProvider : current;
}",0.984825493171472
46814,"public R newRecordWithExpiry(Object value,long creationTime,long expiryTime){
  final R record;
switch (inMemoryFormat) {
case BINARY:
    Data dataValue=serializationService.toData(value);
  record=(R)createCacheDataRecord(dataValue,creationTime,expiryTime);
break;
case OBJECT:
Object objectValue=serializationService.toObject(value);
record=(R)createCacheObjectRecord(objectValue,creationTime,expiryTime);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
}
return record;
}","public R newRecordWithExpiry(Object value,long creationTime,long expiryTime){
  final R record;
switch (inMemoryFormat) {
case BINARY:
    Data dataValue=serializationService.toData(value);
  record=(R)createCacheDataRecord(dataValue,creationTime,expiryTime);
break;
case OBJECT:
Object objectValue=serializationService.toObject(value);
record=(R)createCacheObjectRecord(objectValue,creationTime,expiryTime);
break;
case NATIVE:
throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
default :
throw new IllegalArgumentException(""String_Node_Str"" + inMemoryFormat);
}
return record;
}",0.9071428571428573
46815,"ConstructorFunction<Void,RecordFactory> createRecordFactoryConstructor(final SerializationService serializationService){
  return new ConstructorFunction<Void,RecordFactory>(){
    @Override public RecordFactory createNew(    Void notUsedArg){
      RecordFactory recordFactory;
switch (mapConfig.getInMemoryFormat()) {
case BINARY:
        recordFactory=new DataRecordFactory(mapConfig,serializationService,partitioningStrategy);
      break;
case OBJECT:
    recordFactory=new ObjectRecordFactory(mapConfig,serializationService);
  break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + mapConfig.getInMemoryFormat());
}
return recordFactory;
}
}
;
}","ConstructorFunction<Void,RecordFactory> createRecordFactoryConstructor(final SerializationService serializationService){
  return new ConstructorFunction<Void,RecordFactory>(){
    @Override public RecordFactory createNew(    Void notUsedArg){
      RecordFactory recordFactory;
switch (mapConfig.getInMemoryFormat()) {
case BINARY:
        recordFactory=new DataRecordFactory(mapConfig,serializationService,partitioningStrategy);
      break;
case OBJECT:
    recordFactory=new ObjectRecordFactory(mapConfig,serializationService);
  break;
case NATIVE:
throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
default :
throw new IllegalArgumentException(""String_Node_Str"" + mapConfig.getInMemoryFormat());
}
return recordFactory;
}
}
;
}",0.9270687237026648
46816,"@Override public RecordFactory createNew(Void notUsedArg){
  RecordFactory recordFactory;
switch (mapConfig.getInMemoryFormat()) {
case BINARY:
    recordFactory=new DataRecordFactory(mapConfig,serializationService,partitioningStrategy);
  break;
case OBJECT:
recordFactory=new ObjectRecordFactory(mapConfig,serializationService);
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + mapConfig.getInMemoryFormat());
}
return recordFactory;
}","@Override public RecordFactory createNew(Void notUsedArg){
  RecordFactory recordFactory;
switch (mapConfig.getInMemoryFormat()) {
case BINARY:
    recordFactory=new DataRecordFactory(mapConfig,serializationService,partitioningStrategy);
  break;
case OBJECT:
recordFactory=new ObjectRecordFactory(mapConfig,serializationService);
break;
case NATIVE:
throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
default :
throw new IllegalArgumentException(""String_Node_Str"" + mapConfig.getInMemoryFormat());
}
return recordFactory;
}",0.8968253968253969
46817,"@Override public void memberRemoved(final MemberImpl member){
  logger.info(""String_Node_Str"" + member);
  updateMemberGroupsSize();
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  if (thisAddress.equals(deadAddress)) {
    return;
  }
  lock.lock();
  try {
    if (initialized && node.getClusterService().getClusterState() == ClusterState.ACTIVE) {
      stateVersion.incrementAndGet();
    }
    migrationQueue.clear();
    if (!activeMigrations.isEmpty()) {
      if (node.isMaster()) {
        rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
      }
      for (      MigrationInfo migrationInfo : activeMigrations.values()) {
        if (deadAddress.equals(migrationInfo.getSource()) || deadAddress.equals(migrationInfo.getDestination())) {
          migrationInfo.invalidate();
        }
      }
    }
    pauseMigration();
    cancelReplicaSyncRequestsInternal(deadAddress);
    removeDeadAddress(deadAddress,thisAddress);
    if (node.isMaster() && initialized) {
      migrationQueue.add(new RepartitioningTask());
    }
    resumeMigrationEventually();
  }
  finally {
    lock.unlock();
  }
}","@Override public void memberRemoved(final MemberImpl member){
  logger.info(""String_Node_Str"" + member);
  updateMemberGroupsSize();
  final Address deadAddress=member.getAddress();
  final Address thisAddress=node.getThisAddress();
  if (thisAddress.equals(deadAddress)) {
    return;
  }
  lock.lock();
  try {
    if (initialized && node.getClusterService().getClusterState() == ClusterState.ACTIVE) {
      stateVersion.incrementAndGet();
    }
    migrationQueue.clear();
    if (node.isMaster()) {
      rollbackActiveMigrationsFromPreviousMaster(node.getLocalMember().getUuid());
    }
    invalidateActiveMigrationsBelongingTo(deadAddress);
    pauseMigration();
    cancelReplicaSyncRequestsInternal(deadAddress);
    removeDeadAddress(deadAddress,thisAddress);
    if (node.isMaster() && initialized) {
      migrationQueue.add(new RepartitioningTask());
    }
    resumeMigrationEventually();
  }
  finally {
    lock.unlock();
  }
}",0.7671361502347418
46818,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ scheduledDelayMillis+ ""String_Node_Str""+ actualDelaySeconds+ ""String_Node_Str""+ scheduleStartTimeInNanos+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ scheduledDelayMillis+ ""String_Node_Str""+ actualDelaySeconds+ ""String_Node_Str""+ scheduleId+ '}';
}",0.966804979253112
46819,"public ScheduledEntry(K key,V value,long scheduledDelayMillis,int actualDelaySeconds,long scheduleStartTimeInNanos){
  this.key=key;
  this.value=value;
  this.scheduledDelayMillis=scheduledDelayMillis;
  this.actualDelaySeconds=actualDelaySeconds;
  this.scheduleStartTimeInNanos=scheduleStartTimeInNanos;
}","public ScheduledEntry(K key,V value,long scheduledDelayMillis,int actualDelaySeconds,long scheduleId){
  this.key=key;
  this.value=value;
  this.scheduledDelayMillis=scheduledDelayMillis;
  this.actualDelaySeconds=actualDelaySeconds;
  this.scheduleId=scheduleId;
}",0.8885017421602788
46820,"@Override public ScheduledEntry<K,V> cancel(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByTimeKey(key);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return null;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return null;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key);
}","@Override public ScheduledEntry<K,V> cancel(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByCompositeKey(key);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return null;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return null;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key);
}",0.9894736842105264
46821,"@Override public int compare(ScheduledEntry o1,ScheduledEntry o2){
  if (o1.getScheduleStartTimeInNanos() > o2.getScheduleStartTimeInNanos()) {
    return 1;
  }
 else   if (o1.getScheduleStartTimeInNanos() < o2.getScheduleStartTimeInNanos()) {
    return -1;
  }
  return 0;
}","@Override public int compare(ScheduledEntry o1,ScheduledEntry o2){
  if (o1.getScheduleId() > o2.getScheduleId()) {
    return 1;
  }
 else   if (o1.getScheduleId() < o2.getScheduleId()) {
    return -1;
  }
  return 0;
}",0.5662650602409639
46822,"@Override public void run(){
  scheduledTaskMap.remove(second);
  final Map<Object,ScheduledEntry<K,V>> entries=scheduledEntries.remove(second);
  if (entries == null || entries.isEmpty()) {
    return;
  }
  Set<ScheduledEntry<K,V>> values=new HashSet<ScheduledEntry<K,V>>(entries.size());
  for (  Map.Entry<Object,ScheduledEntry<K,V>> entry : entries.entrySet()) {
    Integer removed=secondsOfKeys.remove(entry.getKey());
    if (removed != null) {
      values.add(entry.getValue());
    }
  }
  entryProcessor.process(SecondsBasedEntryTaskScheduler.this,sortForEntryProcessing(values));
}","@Override public void run(){
  scheduledTaskMap.remove(second);
  final Map<Object,ScheduledEntry<K,V>> entries=scheduledEntries.remove(second);
  if (entries == null || entries.isEmpty()) {
    return;
  }
  List<ScheduledEntry<K,V>> values=new ArrayList<ScheduledEntry<K,V>>(entries.size());
  for (  Map.Entry<Object,ScheduledEntry<K,V>> entry : entries.entrySet()) {
    Integer removed=secondsOfKeys.remove(entry.getKey());
    if (removed != null) {
      values.add(entry.getValue());
    }
  }
  entryProcessor.process(SecondsBasedEntryTaskScheduler.this,sortForEntryProcessing(values));
}",0.984047019311503
46823,"private boolean scheduleEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  long time=System.nanoTime();
  TimeKey timeKey=new TimeKey(key,time);
  secondsOfKeys.put(timeKey,newSecond);
  doSchedule(timeKey,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,time),newSecond);
  return true;
}","private boolean scheduleEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final long id=uniqueIdGenerator.incrementAndGet();
  Object compositeKey=new CompositeKey(key,id);
  secondsOfKeys.put(compositeKey,newSecond);
  doSchedule(compositeKey,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.8195937873357229
46824,"@Override public Set<K> flush(Set<K> keys){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return flushByTimeKeys(keys);
  }
  Set<ScheduledEntry<K,V>> res=new HashSet<ScheduledEntry<K,V>>(keys.size());
  Set<K> processedKeys=new HashSet<K>();
  for (  K key : keys) {
    final Integer second=secondsOfKeys.remove(key);
    if (second != null) {
      final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
      if (entries != null) {
        processedKeys.add(key);
        res.add(entries.remove(key));
      }
    }
  }
  entryProcessor.process(this,sortForEntryProcessing(res));
  return processedKeys;
}","@Override public Set<K> flush(Set<K> keys){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return flushByCompositeKeys(keys);
  }
  List<ScheduledEntry<K,V>> res=new ArrayList<ScheduledEntry<K,V>>(keys.size());
  Set<K> processedKeys=new HashSet<K>();
  for (  K key : keys) {
    final Integer second=secondsOfKeys.remove(key);
    if (second != null) {
      final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
      if (entries != null) {
        processedKeys.add(key);
        res.add(entries.remove(key));
      }
    }
  }
  entryProcessor.process(this,sortForEntryProcessing(res));
  return processedKeys;
}",0.9785932721712538
46825,"@Override public ScheduledEntry<K,V> get(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return getByTimeKey(key);
  }
  final Integer second=secondsOfKeys.get(key);
  if (second != null) {
    final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
    if (entries != null) {
      return entries.get(key);
    }
  }
  return null;
}","@Override public ScheduledEntry<K,V> get(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return getByCompositeKey(key);
  }
  final Integer second=secondsOfKeys.get(key);
  if (second != null) {
    final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
    if (entries != null) {
      return entries.get(key);
    }
  }
  return null;
}",0.9882352941176472
46826,"private boolean schedulePostponeEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final Integer existingSecond=secondsOfKeys.put(key,newSecond);
  if (existingSecond != null) {
    if (existingSecond.equals(newSecond)) {
      return false;
    }
    removeKeyFromSecond(key,existingSecond);
  }
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds),newSecond);
  return true;
}","private boolean schedulePostponeEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final Integer existingSecond=secondsOfKeys.put(key,newSecond);
  if (existingSecond != null) {
    if (existingSecond.equals(newSecond)) {
      return false;
    }
    removeKeyFromSecond(key,existingSecond);
  }
  final long id=uniqueIdGenerator.incrementAndGet();
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.9472693032015066
46827,"private boolean scheduleIfNew(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  if (secondsOfKeys.putIfAbsent(key,newSecond) != null) {
    return false;
  }
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds),newSecond);
  return true;
}","private boolean scheduleIfNew(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  if (secondsOfKeys.putIfAbsent(key,newSecond) != null) {
    return false;
  }
  final long id=uniqueIdGenerator.incrementAndGet();
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.9276485788113696
46828,"private List<ScheduledEntry<K,V>> sortForEntryProcessing(Set<ScheduledEntry<K,V>> coll){
  if (coll == null || coll.isEmpty()) {
    return Collections.emptyList();
  }
  final List<ScheduledEntry<K,V>> sortedEntries=new ArrayList<ScheduledEntry<K,V>>(coll);
  Collections.sort(sortedEntries,SCHEDULED_ENTRIES_COMPARATOR);
  return sortedEntries;
}","private List<ScheduledEntry<K,V>> sortForEntryProcessing(List<ScheduledEntry<K,V>> coll){
  if (coll == null || coll.isEmpty()) {
    return Collections.emptyList();
  }
  Collections.sort(coll,SCHEDULED_ENTRIES_COMPARATOR);
  return coll;
}",0.7809847198641766
46829,"@Override public int cancelIfExists(K key,V value){
  final ScheduledEntry<K,V> scheduledEntry=new ScheduledEntry<K,V>(key,value,0,0);
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByTimeKey(key,scheduledEntry);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return 0;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return 0;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key,scheduledEntry) ? 1 : 0;
}","@Override public int cancelIfExists(K key,V value){
  final ScheduledEntry<K,V> scheduledEntry=new ScheduledEntry<K,V>(key,value,0,0,0);
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByCompositeKey(key,scheduledEntry);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return 0;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return 0;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key,scheduledEntry) ? 1 : 0;
}",0.9898804047838088
46830,"/** 
 * Instantiates a new Clustered session service.
 * @param filterConfig   the filter config
 * @param properties     the properties
 * @param clusterMapName the cluster map name
 * @param sessionTTL     the session tTL
 */
public ClusteredSessionService(FilterConfig filterConfig,Properties properties,String clusterMapName,String sessionTTL){
  this.filterConfig=filterConfig;
  this.properties=properties;
  this.clusterMapName=clusterMapName;
  this.sessionTTL=sessionTTL;
  try {
    ensureInstance();
  }
 catch (  Exception ignored) {
    EmptyStatement.ignore(ignored);
  }
  es.scheduleWithFixedDelay(new Runnable(){
    public void run(){
      try {
        ensureInstance();
      }
 catch (      Exception ignored) {
        EmptyStatement.ignore(ignored);
      }
    }
  }
,CLUSTER_CHECK_INTERVAL,CLUSTER_CHECK_INTERVAL,TimeUnit.SECONDS);
}","/** 
 * Instantiates a new Clustered session service.
 * @param filterConfig   the filter config
 * @param properties     the properties
 * @param clusterMapName the cluster map name
 */
public ClusteredSessionService(FilterConfig filterConfig,Properties properties,String clusterMapName){
  this.filterConfig=filterConfig;
  this.properties=properties;
  this.clusterMapName=clusterMapName;
  try {
    init();
  }
 catch (  Exception e) {
    ExceptionUtil.rethrow(e);
  }
}",0.6756554307116105
46831,"private void ensureInstance() throws Exception {
  if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
synchronized (this) {
      try {
        if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
          reconnectHZInstansce();
          clearOrphanSessionQueue();
        }
      }
 catch (      Exception e) {
        failedConnection=true;
        throw e;
      }
    }
  }
}","private void ensureInstance() throws Exception {
  if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
synchronized (this) {
      try {
        if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
          reconnectHZInstance();
          clearOrphanSessionQueue();
        }
      }
 catch (      Exception e) {
        setFailedConnection(true);
        if (LOGGER.isFinestEnabled()) {
          LOGGER.finest(""String_Node_Str"",e);
        }
      }
    }
  }
}",0.8189134808853119
46832,"/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception the exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    ensureInstance();
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    failedConnection=true;
    throw e;
  }
}","/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}",0.9075804776739356
46833,"public Object getAttribute(final String name){
  LocalCacheEntry cacheEntry=localCache.get(name);
  Object value=null;
  if (cacheEntry == null || cacheEntry.isReload()) {
    try {
      value=webFilter.getClusteredSessionService().getAttribute(id,name);
      cacheEntry=new LocalCacheEntry(false,value);
      cacheEntry.setReload(false);
      localCache.put(name,cacheEntry);
    }
 catch (    Exception e) {
      WebFilter.LOGGER.warning(""String_Node_Str"",e);
      if (cacheEntry == null) {
        return null;
      }
    }
  }
  if (cacheEntry.isRemoved()) {
    return null;
  }
  return cacheEntry.getValue();
}","public Object getAttribute(final String name){
  LocalCacheEntry cacheEntry=localCache.get(name);
  Object value=null;
  if (cacheEntry == null || cacheEntry.isReload()) {
    try {
      value=webFilter.getClusteredSessionService().getAttribute(id,name);
      cacheEntry=new LocalCacheEntry(false,value);
      cacheEntry.setReload(false);
      localCache.put(name,cacheEntry);
    }
 catch (    Exception e) {
      if (WebFilter.LOGGER.isFinestEnabled()) {
        WebFilter.LOGGER.finest(""String_Node_Str"",e);
      }
      if (cacheEntry == null) {
        return null;
      }
    }
  }
  if (cacheEntry.isRemoved()) {
    return null;
  }
  return cacheEntry.getValue();
}",0.9455938697318008
46834,"public static HazelcastInstance createInstance(final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    return createClientInstance(configUrl);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(instanceName,config);
}","public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,instanceName,configUrl,isSticky);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(sessionService,instanceName,config);
}",0.9009159034138218
46835,"private static HazelcastInstance createHazelcastInstance(String instanceName,Config config){
  if (!isEmpty(instanceName)) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.info(format(""String_Node_Str"",instanceName));
    }
    config.setInstanceName(instanceName);
    return Hazelcast.getOrCreateHazelcastInstance(config);
  }
 else {
    LOGGER.info(""String_Node_Str"");
    return Hazelcast.newHazelcastInstance(config);
  }
}","private static HazelcastInstance createHazelcastInstance(ClusteredSessionService sessionService,String instanceName,Config config){
  ListenerConfig listenerConfig=new ListenerConfig(new ServerLifecycleListener(sessionService));
  config.addListenerConfig(listenerConfig);
  if (!isEmpty(instanceName)) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.info(format(""String_Node_Str"",instanceName));
    }
    config.setInstanceName(instanceName);
    return Hazelcast.getOrCreateHazelcastInstance(config);
  }
 else {
    LOGGER.info(""String_Node_Str"");
    return Hazelcast.newHazelcastInstance(config);
  }
}",0.8288973384030418
46836,"private static HazelcastInstance createClientInstance(URL configUrl) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  return HazelcastClient.newHazelcastClient(clientConfig);
}","private static HazelcastInstance createClientInstance(ClusteredSessionService sessionService,String instanceName,URL configUrl,boolean isSticky) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  clientConfig.setInstanceName(instanceName);
  if (isSticky) {
    clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  }
  ListenerConfig listenerConfig=new ListenerConfig(new ClientLifecycleListener(sessionService));
  clientConfig.addListenerConfig(listenerConfig);
  return HazelcastClient.newHazelcastClient(clientConfig);
}",0.7914590747330961
46837,"private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
}","private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
}",0.9177718832891246
46838,"public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  String sessionTTL=getParam(""String_Node_Str"");
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName,sessionTTL);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}","public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}",0.9166666666666666
46839,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ scheduledDelayMillis+ ""String_Node_Str""+ actualDelaySeconds+ ""String_Node_Str""+ scheduleStartTimeInNanos+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ scheduledDelayMillis+ ""String_Node_Str""+ actualDelaySeconds+ ""String_Node_Str""+ scheduleId+ '}';
}",0.966804979253112
46840,"public ScheduledEntry(K key,V value,long scheduledDelayMillis,int actualDelaySeconds,long scheduleStartTimeInNanos){
  this.key=key;
  this.value=value;
  this.scheduledDelayMillis=scheduledDelayMillis;
  this.actualDelaySeconds=actualDelaySeconds;
  this.scheduleStartTimeInNanos=scheduleStartTimeInNanos;
}","public ScheduledEntry(K key,V value,long scheduledDelayMillis,int actualDelaySeconds,long scheduleId){
  this.key=key;
  this.value=value;
  this.scheduledDelayMillis=scheduledDelayMillis;
  this.actualDelaySeconds=actualDelaySeconds;
  this.scheduleId=scheduleId;
}",0.8885017421602788
46841,"@Override public ScheduledEntry<K,V> cancel(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByTimeKey(key);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return null;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return null;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key);
}","@Override public ScheduledEntry<K,V> cancel(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByCompositeKey(key);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return null;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return null;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key);
}",0.9894736842105264
46842,"@Override public int compare(ScheduledEntry o1,ScheduledEntry o2){
  if (o1.getScheduleStartTimeInNanos() > o2.getScheduleStartTimeInNanos()) {
    return 1;
  }
 else   if (o1.getScheduleStartTimeInNanos() < o2.getScheduleStartTimeInNanos()) {
    return -1;
  }
  return 0;
}","@Override public int compare(ScheduledEntry o1,ScheduledEntry o2){
  if (o1.getScheduleId() > o2.getScheduleId()) {
    return 1;
  }
 else   if (o1.getScheduleId() < o2.getScheduleId()) {
    return -1;
  }
  return 0;
}",0.5662650602409639
46843,"@Override public void run(){
  scheduledTaskMap.remove(second);
  final Map<Object,ScheduledEntry<K,V>> entries=scheduledEntries.remove(second);
  if (entries == null || entries.isEmpty()) {
    return;
  }
  Set<ScheduledEntry<K,V>> values=new HashSet<ScheduledEntry<K,V>>(entries.size());
  for (  Map.Entry<Object,ScheduledEntry<K,V>> entry : entries.entrySet()) {
    Integer removed=secondsOfKeys.remove(entry.getKey());
    if (removed != null) {
      values.add(entry.getValue());
    }
  }
  entryProcessor.process(SecondsBasedEntryTaskScheduler.this,sortForEntryProcessing(values));
}","@Override public void run(){
  scheduledTaskMap.remove(second);
  final Map<Object,ScheduledEntry<K,V>> entries=scheduledEntries.remove(second);
  if (entries == null || entries.isEmpty()) {
    return;
  }
  List<ScheduledEntry<K,V>> values=new ArrayList<ScheduledEntry<K,V>>(entries.size());
  for (  Map.Entry<Object,ScheduledEntry<K,V>> entry : entries.entrySet()) {
    Integer removed=secondsOfKeys.remove(entry.getKey());
    if (removed != null) {
      values.add(entry.getValue());
    }
  }
  entryProcessor.process(SecondsBasedEntryTaskScheduler.this,sortForEntryProcessing(values));
}",0.984047019311503
46844,"private boolean scheduleEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  long time=System.nanoTime();
  TimeKey timeKey=new TimeKey(key,time);
  secondsOfKeys.put(timeKey,newSecond);
  doSchedule(timeKey,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,time),newSecond);
  return true;
}","private boolean scheduleEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final long id=uniqueIdGenerator.incrementAndGet();
  Object compositeKey=new CompositeKey(key,id);
  secondsOfKeys.put(compositeKey,newSecond);
  doSchedule(compositeKey,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.8195937873357229
46845,"@Override public Set<K> flush(Set<K> keys){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return flushByTimeKeys(keys);
  }
  Set<ScheduledEntry<K,V>> res=new HashSet<ScheduledEntry<K,V>>(keys.size());
  Set<K> processedKeys=new HashSet<K>();
  for (  K key : keys) {
    final Integer second=secondsOfKeys.remove(key);
    if (second != null) {
      final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
      if (entries != null) {
        processedKeys.add(key);
        res.add(entries.remove(key));
      }
    }
  }
  entryProcessor.process(this,sortForEntryProcessing(res));
  return processedKeys;
}","@Override public Set<K> flush(Set<K> keys){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return flushByCompositeKeys(keys);
  }
  List<ScheduledEntry<K,V>> res=new ArrayList<ScheduledEntry<K,V>>(keys.size());
  Set<K> processedKeys=new HashSet<K>();
  for (  K key : keys) {
    final Integer second=secondsOfKeys.remove(key);
    if (second != null) {
      final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
      if (entries != null) {
        processedKeys.add(key);
        res.add(entries.remove(key));
      }
    }
  }
  entryProcessor.process(this,sortForEntryProcessing(res));
  return processedKeys;
}",0.9785932721712538
46846,"@Override public ScheduledEntry<K,V> get(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return getByTimeKey(key);
  }
  final Integer second=secondsOfKeys.get(key);
  if (second != null) {
    final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
    if (entries != null) {
      return entries.get(key);
    }
  }
  return null;
}","@Override public ScheduledEntry<K,V> get(K key){
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return getByCompositeKey(key);
  }
  final Integer second=secondsOfKeys.get(key);
  if (second != null) {
    final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
    if (entries != null) {
      return entries.get(key);
    }
  }
  return null;
}",0.9882352941176472
46847,"private boolean schedulePostponeEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final Integer existingSecond=secondsOfKeys.put(key,newSecond);
  if (existingSecond != null) {
    if (existingSecond.equals(newSecond)) {
      return false;
    }
    removeKeyFromSecond(key,existingSecond);
  }
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds),newSecond);
  return true;
}","private boolean schedulePostponeEntry(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  final Integer existingSecond=secondsOfKeys.put(key,newSecond);
  if (existingSecond != null) {
    if (existingSecond.equals(newSecond)) {
      return false;
    }
    removeKeyFromSecond(key,existingSecond);
  }
  final long id=uniqueIdGenerator.incrementAndGet();
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.9472693032015066
46848,"private boolean scheduleIfNew(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  if (secondsOfKeys.putIfAbsent(key,newSecond) != null) {
    return false;
  }
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds),newSecond);
  return true;
}","private boolean scheduleIfNew(long delayMillis,K key,V value){
  final int delaySeconds=ceilToSecond(delayMillis);
  final Integer newSecond=findRelativeSecond(delayMillis);
  if (secondsOfKeys.putIfAbsent(key,newSecond) != null) {
    return false;
  }
  final long id=uniqueIdGenerator.incrementAndGet();
  doSchedule(key,new ScheduledEntry<K,V>(key,value,delayMillis,delaySeconds,id),newSecond);
  return true;
}",0.9276485788113696
46849,"private List<ScheduledEntry<K,V>> sortForEntryProcessing(Set<ScheduledEntry<K,V>> coll){
  if (coll == null || coll.isEmpty()) {
    return Collections.emptyList();
  }
  final List<ScheduledEntry<K,V>> sortedEntries=new ArrayList<ScheduledEntry<K,V>>(coll);
  Collections.sort(sortedEntries,SCHEDULED_ENTRIES_COMPARATOR);
  return sortedEntries;
}","private List<ScheduledEntry<K,V>> sortForEntryProcessing(List<ScheduledEntry<K,V>> coll){
  if (coll == null || coll.isEmpty()) {
    return Collections.emptyList();
  }
  Collections.sort(coll,SCHEDULED_ENTRIES_COMPARATOR);
  return coll;
}",0.7809847198641766
46850,"@Override public int cancelIfExists(K key,V value){
  final ScheduledEntry<K,V> scheduledEntry=new ScheduledEntry<K,V>(key,value,0,0);
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByTimeKey(key,scheduledEntry);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return 0;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return 0;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key,scheduledEntry) ? 1 : 0;
}","@Override public int cancelIfExists(K key,V value){
  final ScheduledEntry<K,V> scheduledEntry=new ScheduledEntry<K,V>(key,value,0,0,0);
  if (scheduleType.equals(ScheduleType.FOR_EACH)) {
    return cancelByCompositeKey(key,scheduledEntry);
  }
  final Integer second=secondsOfKeys.remove(key);
  if (second == null) {
    return 0;
  }
  final ConcurrentMap<Object,ScheduledEntry<K,V>> entries=scheduledEntries.get(second);
  if (entries == null) {
    return 0;
  }
  return cancelAndCleanUpIfEmpty(second,entries,key,scheduledEntry) ? 1 : 0;
}",0.9898804047838088
46851,"/** 
 * Update attributes.
 * @param id the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  sessionUpdate.setJvmId(jvmId);
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}","/** 
 * Update attributes.
 * @param id      the id
 * @param updates the updates
 * @throws Exception the exception
 */
public void updateAttributes(String id,Map<String,Object> updates) throws Exception {
  SerializationService ss=sss.getSerializationService();
  SessionUpdateEntryProcessor sessionUpdate=new SessionUpdateEntryProcessor(updates.size());
  sessionUpdate.setJvmId(jvmId);
  for (  Map.Entry<String,Object> entry : updates.entrySet()) {
    String name=entry.getKey();
    Object value=entry.getValue();
    sessionUpdate.getAttributes().put(name,ss.toData(value));
  }
  executeOnKey(id,sessionUpdate);
}",0.9959644874899112
46852,"/** 
 * Instantiates a new Clustered session service.
 * @param filterConfig the filter config
 * @param properties the properties
 * @param clusterMapName the cluster map name
 * @param sessionTTL the session tTL
 */
public ClusteredSessionService(FilterConfig filterConfig,Properties properties,String clusterMapName,String sessionTTL){
  this.filterConfig=filterConfig;
  this.properties=properties;
  this.clusterMapName=clusterMapName;
  this.sessionTTL=sessionTTL;
  try {
    ensureInstance();
  }
 catch (  Exception ignored) {
    EmptyStatement.ignore(ignored);
  }
  es.scheduleWithFixedDelay(new Runnable(){
    public void run(){
      try {
        ensureInstance();
      }
 catch (      Exception ignored) {
        EmptyStatement.ignore(ignored);
      }
    }
  }
,CLUSTER_CHECK_INTERVAL,CLUSTER_CHECK_INTERVAL,TimeUnit.SECONDS);
}","/** 
 * Instantiates a new Clustered session service.
 * @param filterConfig   the filter config
 * @param properties     the properties
 * @param clusterMapName the cluster map name
 */
public ClusteredSessionService(FilterConfig filterConfig,Properties properties,String clusterMapName){
  this.filterConfig=filterConfig;
  this.properties=properties;
  this.clusterMapName=clusterMapName;
  try {
    init();
  }
 catch (  Exception e) {
    ExceptionUtil.rethrow(e);
  }
}",0.6716981132075471
46853,"/** 
 * Delete session.
 * @param sessionId sessionId
 * @param invalidate if true remove the distributed session, otherwise justremove the jvm reference
 * @return the boolean
 */
public boolean deleteSession(String sessionId,boolean invalidate){
  try {
    doDeleteSession(sessionId,invalidate);
    return true;
  }
 catch (  Exception e) {
    orphanSessions.add(new AbstractMap.SimpleEntry(sessionId,invalidate));
    return false;
  }
}","/** 
 * Delete session.
 * @param sessionId  sessionId
 * @param invalidate if true remove the distributed session, otherwise justremove the jvm reference
 * @return the boolean
 */
public boolean deleteSession(String sessionId,boolean invalidate){
  try {
    doDeleteSession(sessionId,invalidate);
    return true;
  }
 catch (  Exception e) {
    orphanSessions.add(new AbstractMap.SimpleEntry(sessionId,invalidate));
    return false;
  }
}",0.9988726042841036
46854,"/** 
 * Sets attribute.
 * @param sessionId the session id
 * @param attributeName the attribute name
 * @param value the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  sessionUpdateProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,sessionUpdateProcessor);
}","/** 
 * Sets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @param value         the value
 * @throws Exception the exception
 */
void setAttribute(String sessionId,String attributeName,Object value) throws Exception {
  Data dataValue=(value == null) ? null : sss.getSerializationService().toData(value);
  SessionUpdateEntryProcessor sessionUpdateProcessor=new SessionUpdateEntryProcessor(attributeName,dataValue);
  sessionUpdateProcessor.setJvmId(jvmId);
  executeOnKey(sessionId,sessionUpdateProcessor);
}",0.9891500904159132
46855,"/** 
 * Gets attribute.
 * @param sessionId the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  entryProcessor.setJvmId(jvmId);
  return executeOnKey(sessionId,entryProcessor);
}","/** 
 * Gets attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @return the attribute
 * @throws Exception the exception
 */
Object getAttribute(String sessionId,String attributeName) throws Exception {
  GetAttributeEntryProcessor entryProcessor=new GetAttributeEntryProcessor(attributeName);
  entryProcessor.setJvmId(jvmId);
  return executeOnKey(sessionId,entryProcessor);
}",0.995249406175772
46856,"private void ensureInstance() throws Exception {
  if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
synchronized (this) {
      try {
        if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
          reconnectHZInstansce();
          clearOrphanSessionQueue();
        }
      }
 catch (      Exception e) {
        failedConnection=true;
        throw e;
      }
    }
  }
}","private void ensureInstance() throws Exception {
  if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
synchronized (this) {
      try {
        if (failedConnection && System.currentTimeMillis() > lastConnectionTry + RETRY_MILLIS) {
          reconnectHZInstance();
          clearOrphanSessionQueue();
        }
      }
 catch (      Exception e) {
        setFailedConnection(true);
        if (LOGGER.isFinestEnabled()) {
          LOGGER.finest(""String_Node_Str"",e);
        }
      }
    }
  }
}",0.8189134808853119
46857,"/** 
 * Delete attribute.
 * @param sessionId the session id
 * @param attributeName the attribute name
 * @throws Exception the exception
 */
void deleteAttribute(String sessionId,String attributeName) throws Exception {
  setAttribute(sessionId,attributeName,null);
}","/** 
 * Delete attribute.
 * @param sessionId     the session id
 * @param attributeName the attribute name
 * @throws Exception the exception
 */
void deleteAttribute(String sessionId,String attributeName) throws Exception {
  setAttribute(sessionId,attributeName,null);
}",0.992619926199262
46858,"/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception the exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    ensureInstance();
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    failedConnection=true;
    throw e;
  }
}","/** 
 * Execute on key.
 * @param sessionId the session id
 * @param processor the processor
 * @return the object
 * @throws Exception
 */
Object executeOnKey(String sessionId,EntryProcessor processor) throws Exception {
  try {
    if (processor instanceof JvmIdAware) {
      ((JvmIdAware)processor).setJvmId(jvmId);
    }
    return clusterMap.executeOnKey(sessionId,processor);
  }
 catch (  Exception e) {
    LOGGER.finest(""String_Node_Str"",e);
    throw e;
  }
}",0.9075804776739356
46859,"public Object getAttribute(final String name){
  LocalCacheEntry cacheEntry=localCache.get(name);
  Object value=null;
  if (cacheEntry == null || cacheEntry.isReload()) {
    try {
      value=webFilter.getClusteredSessionService().getAttribute(id,name);
      cacheEntry=new LocalCacheEntry(false,value);
      cacheEntry.setReload(false);
      localCache.put(name,cacheEntry);
    }
 catch (    Exception e) {
      WebFilter.LOGGER.warning(""String_Node_Str"",e);
      if (cacheEntry == null) {
        return null;
      }
    }
  }
  if (cacheEntry.isRemoved()) {
    return null;
  }
  return cacheEntry.getValue();
}","public Object getAttribute(final String name){
  LocalCacheEntry cacheEntry=localCache.get(name);
  Object value=null;
  if (cacheEntry == null || cacheEntry.isReload()) {
    try {
      value=webFilter.getClusteredSessionService().getAttribute(id,name);
      cacheEntry=new LocalCacheEntry(false,value);
      cacheEntry.setReload(false);
      localCache.put(name,cacheEntry);
    }
 catch (    Exception e) {
      if (WebFilter.LOGGER.isFinestEnabled()) {
        WebFilter.LOGGER.finest(""String_Node_Str"",e);
      }
      if (cacheEntry == null) {
        return null;
      }
    }
  }
  if (cacheEntry.isRemoved()) {
    return null;
  }
  return cacheEntry.getValue();
}",0.9455938697318008
46860,"public static HazelcastInstance createInstance(final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    return createClientInstance(configUrl);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(instanceName,config);
}","public static HazelcastInstance createInstance(final ClusteredSessionService sessionService,final FilterConfig filterConfig,final Properties properties) throws ServletException {
  final String instanceName=properties.getProperty(INSTANCE_NAME);
  final String configLocation=properties.getProperty(CONFIG_LOCATION);
  final String useClientProp=properties.getProperty(USE_CLIENT);
  final String clientConfigLocation=properties.getProperty(CLIENT_CONFIG_LOCATION);
  final boolean useClient=!isEmpty(useClientProp) && Boolean.parseBoolean(useClientProp);
  URL configUrl=null;
  if (useClient && !isEmpty(clientConfigLocation)) {
    configUrl=getConfigURL(filterConfig,clientConfigLocation);
  }
 else   if (!isEmpty(configLocation)) {
    configUrl=getConfigURL(filterConfig,configLocation);
  }
  if (useClient) {
    boolean isSticky=Boolean.valueOf(properties.getProperty(STICKY_SESSION_CONFIG));
    return createClientInstance(sessionService,configUrl,isSticky);
  }
  Config config;
  if (configUrl == null) {
    config=new XmlConfigBuilder().build();
  }
 else {
    try {
      config=new UrlXmlConfig(configUrl);
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  return createHazelcastInstance(sessionService,instanceName,config);
}",0.9058183340309752
46861,"private static HazelcastInstance createHazelcastInstance(String instanceName,Config config){
  if (!isEmpty(instanceName)) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.info(format(""String_Node_Str"",instanceName));
    }
    config.setInstanceName(instanceName);
    return Hazelcast.getOrCreateHazelcastInstance(config);
  }
 else {
    LOGGER.info(""String_Node_Str"");
    return Hazelcast.newHazelcastInstance(config);
  }
}","private static HazelcastInstance createHazelcastInstance(ClusteredSessionService sessionService,String instanceName,Config config){
  ListenerConfig listenerConfig=new ListenerConfig(new ServerLifecycleListener(sessionService));
  config.addListenerConfig(listenerConfig);
  if (!isEmpty(instanceName)) {
    if (LOGGER.isLoggable(Level.INFO)) {
      LOGGER.info(format(""String_Node_Str"",instanceName));
    }
    config.setInstanceName(instanceName);
    return Hazelcast.getOrCreateHazelcastInstance(config);
  }
 else {
    LOGGER.info(""String_Node_Str"");
    return Hazelcast.newHazelcastInstance(config);
  }
}",0.8288973384030418
46862,"private static HazelcastInstance createClientInstance(URL configUrl) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  return HazelcastClient.newHazelcastClient(clientConfig);
}","private static HazelcastInstance createClientInstance(ClusteredSessionService sessionService,URL configUrl,boolean isSticky) throws ServletException {
  LOGGER.warning(""String_Node_Str"");
  LOGGER.warning(""String_Node_Str"");
  ClientConfig clientConfig;
  if (configUrl == null) {
    clientConfig=new ClientConfig();
  }
 else {
    try {
      clientConfig=new XmlClientConfigBuilder(configUrl).build();
    }
 catch (    IOException e) {
      throw new ServletException(e);
    }
  }
  if (isSticky) {
    clientConfig.getNetworkConfig().setConnectionAttemptLimit(1);
  }
  ListenerConfig listenerConfig=new ListenerConfig(new ClientLifecycleListener(sessionService));
  clientConfig.addListenerConfig(listenerConfig);
  return HazelcastClient.newHazelcastClient(clientConfig);
}",0.830470500373413
46863,"private static String generateSessionId(){
  final String id=UUID.randomUUID().toString();
  final StringBuilder sb=new StringBuilder(""String_Node_Str"");
  final char[] chars=id.toCharArray();
  for (  final char c : chars) {
    if (c != '-') {
      if (Character.isLetter(c)) {
        sb.append(Character.toUpperCase(c));
      }
 else {
        sb.append(c);
      }
    }
  }
  return sb.toString();
}","private static String generateSessionId(){
  String id=UUID.randomUUID().toString();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  char[] chars=id.toCharArray();
  for (  final char c : chars) {
    if (c != '-') {
      if (Character.isLetter(c)) {
        sb.append(Character.toUpperCase(c));
      }
 else {
        sb.append(c);
      }
    }
  }
  return sb.toString();
}",0.9773869346733668
46864,"private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
}","private void loadProperties() throws ServletException {
  if (properties == null) {
    properties=new Properties();
  }
  setProperty(HazelcastInstanceLoader.CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.INSTANCE_NAME);
  setProperty(HazelcastInstanceLoader.USE_CLIENT);
  setProperty(HazelcastInstanceLoader.CLIENT_CONFIG_LOCATION);
  setProperty(HazelcastInstanceLoader.STICKY_SESSION_CONFIG);
}",0.9177718832891246
46865,"public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  String sessionTTL=getParam(""String_Node_Str"");
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName,sessionTTL);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}","public final void init(final FilterConfig config) throws ServletException {
  filterConfig=config;
  servletContext=config.getServletContext();
  servletContext.setAttribute(WEB_FILTER_ATTRIBUTE_KEY,this);
  loadProperties();
  initCookieParams();
  initParams();
  String mapName=getParam(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"" + servletContext.getServletContextName();
  }
  clusteredSessionService=new ClusteredSessionService(filterConfig,properties,mapName);
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.finest(""String_Node_Str"" + stickySession + ""String_Node_Str""+ shutdownOnDestroy+ ""String_Node_Str""+ mapName);
  }
}",0.9166666666666666
46866,"public void invalidate(){
  webFilter.destroySession(this,true);
  originalSession.invalidate();
}","public void invalidate(){
  webFilter.destroySession(this,true);
  originalSession.invalidate();
  invalidatedOriginalSessionId=originalSession.getId();
}",0.7777777777777778
46867,"private HazelcastHttpSession readSessionFromLocal(){
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (hazelcastSession != null && !hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    originalSessions.remove(originalSession.getId());
    originalSession.invalidate();
  }
  if (clusteredSessionId != null) {
    hazelcastSession=sessions.get(clusteredSessionId);
  }
  return readFromCookie();
}","private HazelcastHttpSession readSessionFromLocal(){
  String invalidatedOriginalSessionId=null;
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    invalidatedOriginalSessionId=hazelcastSession.invalidatedOriginalSessionId;
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (hazelcastSession != null && !hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    if (!originalSession.getId().equals(invalidatedOriginalSessionId)) {
      originalSession.invalidate();
    }
  }
  if (clusteredSessionId != null) {
    hazelcastSession=sessions.get(clusteredSessionId);
  }
  return readFromCookie();
}",0.8801955990220048
46868,"public void invalidate(){
  webFilter.destroySession(this,true);
  originalSession.invalidate();
}","public void invalidate(){
  webFilter.destroySession(this,true);
  originalSession.invalidate();
  invalidatedOriginalSessionId=originalSession.getId();
}",0.7777777777777778
46869,"private HazelcastHttpSession readSessionFromLocal(){
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (hazelcastSession != null && !hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    originalSessions.remove(originalSession.getId());
    originalSession.invalidate();
  }
  if (clusteredSessionId != null) {
    hazelcastSession=sessions.get(clusteredSessionId);
  }
  return readFromCookie();
}","private HazelcastHttpSession readSessionFromLocal(){
  String invalidatedOriginalSessionId=null;
  if (hazelcastSession != null && !hazelcastSession.isValid()) {
    LOGGER.finest(""String_Node_Str"");
    destroySession(hazelcastSession,true);
    invalidatedOriginalSessionId=hazelcastSession.invalidatedOriginalSessionId;
    hazelcastSession=null;
  }
 else   if (hazelcastSession != null) {
    return hazelcastSession;
  }
  HttpSession originalSession=getOriginalSession(false);
  if (originalSession != null) {
    String hazelcastSessionId=originalSessions.get(originalSession.getId());
    if (hazelcastSessionId != null) {
      hazelcastSession=sessions.get(hazelcastSessionId);
      if (hazelcastSession != null && !hazelcastSession.isStickySession()) {
        hazelcastSession.updateReloadFlag();
      }
      return hazelcastSession;
    }
    if (!originalSession.getId().equals(invalidatedOriginalSessionId)) {
      originalSession.invalidate();
    }
  }
  if (clusteredSessionId != null) {
    hazelcastSession=sessions.get(clusteredSessionId);
  }
  return readFromCookie();
}",0.8801955990220048
46870,"static void remove(HazelcastInstanceImpl instance){
  OutOfMemoryErrorDispatcher.deregisterServer(instance);
  InstanceFuture future=INSTANCE_MAP.remove(instance.getName());
  if (future != null) {
    future.get().original=null;
  }
  if (INSTANCE_MAP.size() == 0) {
    ManagementService.shutdownAll();
  }
}","static void remove(HazelcastInstanceImpl instance){
  OutOfMemoryErrorDispatcher.deregisterServer(instance);
  InstanceFuture future=INSTANCE_MAP.remove(instance.getName());
  if (future != null && future.isSet()) {
    future.get().original=null;
  }
  if (INSTANCE_MAP.size() == 0) {
    ManagementService.shutdownAll();
  }
}",0.9717868338557992
46871,"public void shutdown(final boolean terminate){
  long start=Clock.currentTimeMillis();
  if (logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + state);
  }
  if (!setShuttingDown()) {
    waitIfAlreadyShuttingDown();
    return;
  }
  if (!terminate) {
    final int maxWaitSeconds=groupProperties.getSeconds(GroupProperty.GRACEFUL_SHUTDOWN_MAX_WAIT);
    if (!partitionService.prepareToSafeShutdown(maxWaitSeconds,TimeUnit.SECONDS)) {
      logger.warning(""String_Node_Str"" + maxWaitSeconds + ""String_Node_Str"");
    }
    try {
      clusterService.sendShutdownMessage();
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      EmptyStatement.ignore(t);
    }
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  joined.set(false);
  setMasterAddress(null);
  try {
    if (groupProperties.getBoolean(GroupProperty.SHUTDOWNHOOK_ENABLED)) {
      Runtime.getRuntime().removeShutdownHook(shutdownHookThread);
    }
    discoveryService.destroy();
  }
 catch (  Throwable ignored) {
  }
  nodeExtension.beforeShutdown();
  phoneHome.shutdown();
  if (managementCenterService != null) {
    managementCenterService.shutdown();
  }
  textCommandService.stop();
  if (multicastService != null) {
    logger.info(""String_Node_Str"");
    multicastService.stop();
  }
  logger.info(""String_Node_Str"");
  connectionManager.shutdown();
  logger.info(""String_Node_Str"");
  nodeEngine.shutdown(terminate);
  if (securityContext != null) {
    securityContext.destroy();
  }
  logger.finest(""String_Node_Str"");
  serializationService.destroy();
  hazelcastThreadGroup.destroy();
  nodeExtension.shutdown();
  logger.info(""String_Node_Str"" + (Clock.currentTimeMillis() - start) + ""String_Node_Str"");
  state=NodeState.SHUT_DOWN;
}","public void shutdown(final boolean terminate){
  long start=Clock.currentTimeMillis();
  if (logger.isFinestEnabled()) {
    logger.finest(""String_Node_Str"" + state);
  }
  if (!setShuttingDown()) {
    waitIfAlreadyShuttingDown();
    return;
  }
  if (!terminate) {
    final int maxWaitSeconds=groupProperties.getSeconds(GroupProperty.GRACEFUL_SHUTDOWN_MAX_WAIT);
    if (!partitionService.prepareToSafeShutdown(maxWaitSeconds,TimeUnit.SECONDS)) {
      logger.warning(""String_Node_Str"" + maxWaitSeconds + ""String_Node_Str"");
    }
    try {
      clusterService.sendShutdownMessage();
      if (logger.isFinestEnabled()) {
        logger.finest(""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      EmptyStatement.ignore(t);
    }
  }
 else {
    logger.warning(""String_Node_Str"");
  }
  joined.set(false);
  setMasterAddress(null);
  try {
    if (groupProperties.getBoolean(GroupProperty.SHUTDOWNHOOK_ENABLED)) {
      Runtime.getRuntime().removeShutdownHook(shutdownHookThread);
    }
    discoveryService.destroy();
  }
 catch (  Throwable ignored) {
  }
  try {
    shutdownServices(terminate);
    state=NodeState.SHUT_DOWN;
    logger.info(""String_Node_Str"" + (Clock.currentTimeMillis() - start) + ""String_Node_Str"");
  }
  finally {
    if (state != NodeState.SHUT_DOWN) {
      shuttingDown.compareAndSet(true,false);
    }
  }
}",0.709044908285895
46872,"private boolean hasOnGoingMigrationMaster(Level level){
  Address masterAddress=node.getMasterAddress();
  if (masterAddress == null) {
    return true;
  }
  Operation operation=new HasOngoingMigration();
  OperationService operationService=nodeEngine.getOperationService();
  InvocationBuilder invocationBuilder=operationService.createInvocationBuilder(SERVICE_NAME,operation,masterAddress);
  Future future=invocationBuilder.setTryCount(100).setTryPauseMillis(100).invoke();
  try {
    return (Boolean)future.get(1,TimeUnit.MINUTES);
  }
 catch (  InterruptedException ie) {
    Logger.getLogger(InternalPartitionServiceImpl.class).finest(""String_Node_Str"",ie);
  }
catch (  Exception e) {
    logger.log(level,""String_Node_Str"" + e.toString());
  }
  return false;
}","private boolean hasOnGoingMigrationMaster(Level level){
  Address masterAddress=node.getMasterAddress();
  if (masterAddress == null) {
    return node.joined();
  }
  Operation operation=new HasOngoingMigration();
  OperationService operationService=nodeEngine.getOperationService();
  InvocationBuilder invocationBuilder=operationService.createInvocationBuilder(SERVICE_NAME,operation,masterAddress);
  Future future=invocationBuilder.setTryCount(100).setTryPauseMillis(100).invoke();
  try {
    return (Boolean)future.get(1,TimeUnit.MINUTES);
  }
 catch (  InterruptedException ie) {
    Logger.getLogger(InternalPartitionServiceImpl.class).finest(""String_Node_Str"",ie);
  }
catch (  Exception e) {
    logger.log(level,""String_Node_Str"" + e.toString());
  }
  return false;
}",0.9890393294648614
46873,"@Override public NodeExtension createNodeExtension(Node node){
  return nodeExtension;
}","@Override public NodeExtension createNodeExtension(Node node){
  when(nodeExtension.createService(MapService.class)).thenReturn(mock(MapService.class));
  when(nodeExtension.createService(ICacheService.class)).thenReturn(mock(ICacheService.class));
  when(nodeExtension.createService(WanReplicationService.class)).thenReturn(mock(WanReplicationService.class));
  when(nodeExtension.createSerializationService()).thenReturn(new DefaultSerializationServiceBuilder().build());
  return nodeExtension;
}",0.231686541737649
46874,"@Test public void verifyMethods() throws Exception {
  NodeExtension nodeExtension=prepareNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),new DummyNodeContext(nextAddress(),nodeExtension));
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}","@Test public void verifyMethods() throws Exception {
  DummyNodeContext nodeContext=new DummyNodeContext(new Address(""String_Node_Str"",5000));
  NodeExtension nodeExtension=nodeContext.getNodeExtension();
  hazelcastInstance=new HazelcastInstanceImpl(randomName(),getConfig(),nodeContext);
  InOrder inOrder=inOrder(nodeExtension);
  inOrder.verify(nodeExtension,times(1)).beforeStart();
  inOrder.verify(nodeExtension,times(1)).createSerializationService();
  inOrder.verify(nodeExtension,times(1)).printNodeInfo();
  inOrder.verify(nodeExtension,times(1)).createExtensionServices();
  inOrder.verify(nodeExtension,times(1)).beforeJoin();
  inOrder.verify(nodeExtension,times(1)).afterStart();
  hazelcastInstance.shutdown();
  inOrder.verify(nodeExtension,times(1)).beforeShutdown();
  inOrder.verify(nodeExtension,times(1)).shutdown();
}",0.8790123456790123
46875,"private DummyNodeContext(Address address,NodeExtension nodeExtension){
  this.address=address;
  this.nodeExtension=nodeExtension;
}","public DummyNodeContext(Address address){
  this.address=address;
}",0.6331658291457286
46876,"public TestHazelcastInstanceFactory(String... addresses){
  this.count=addresses.length;
  if (mockNetwork) {
    this.addresses=new CopyOnWriteArrayList<Address>();
    this.addresses.addAll(createAddresses(-1,PORTS,addresses));
    this.registry=new TestNodeRegistry(this.addresses);
  }
}","public TestHazelcastInstanceFactory(Collection<Address> addresses){
  this.count=addresses.size();
  if (mockNetwork) {
    initFactory(addresses);
  }
}",0.581081081081081
46877,"@Override public boolean shouldBackup(){
  return response != null;
}","@Override public boolean shouldBackup(){
  return response != null && backupRecord != null;
}",0.8518518518518519
46878,"public CachePutBackupOperation(String name,Data key,CacheRecord cacheRecord){
  super(name,key);
  this.cacheRecord=cacheRecord;
}","public CachePutBackupOperation(String name,Data key,CacheRecord cacheRecord){
  super(name,key);
  if (cacheRecord == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.cacheRecord=cacheRecord;
}",0.7386363636363636
46879,"@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response) && backupRecord != null;
}",0.8723404255319149
46880,"@Override public boolean shouldBackup(){
  return true;
}","@Override public boolean shouldBackup(){
  return backupRecord != null;
}",0.8461538461538461
46881,"@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response) && backupRecord != null;
}",0.8723404255319149
46882,"@BeforeClass public static void init() throws Exception {
  final URL configUrl1=CacheCreationTest.class.getClassLoader().getResource(""String_Node_Str"");
  XmlConfigBuilder configBuilder=new XmlConfigBuilder(configUrl1.getFile());
  hzConfig=configBuilder.build();
}","@BeforeClass public static void init() throws Exception {
  final URL configUrl1=CacheCreationTest.class.getClassLoader().getResource(""String_Node_Str"");
  String decodedURL=URLDecoder.decode(configUrl1.getFile(),""String_Node_Str"");
  XmlConfigBuilder configBuilder=new XmlConfigBuilder(decodedURL);
  hzConfig=configBuilder.build();
}",0.8186356073211315
46883,"@Test public void testConfigurationWithFile() throws Exception {
  URL url=getClass().getClassLoader().getResource(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",url.getFile());
  Config config=new XmlConfigBuilder().build();
  assertEquals(url,config.getConfigurationUrl());
}","@Test public void testConfigurationWithFile() throws Exception {
  URL url=getClass().getClassLoader().getResource(""String_Node_Str"");
  assertNotNull(url);
  String decodedURL=URLDecoder.decode(url.getFile(),""String_Node_Str"");
  System.setProperty(""String_Node_Str"",decodedURL);
  Config config=new XmlConfigBuilder().build();
  URL file=new URL(""String_Node_Str"");
  URL encodedURL=new URL(file,decodedURL);
  assertEquals(encodedURL,config.getConfigurationUrl());
}",0.7203166226912929
46884,"@Before public void setUp() throws Exception {
  startMS=System.currentTimeMillis();
  URL root=new URL(MancenterServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  String baseDir=new File(root.getFile().replaceAll(""String_Node_Str"",""String_Node_Str"")).toString();
  String sourceDir=baseDir + ""String_Node_Str"";
  String sourceName=""String_Node_Str"";
  portNum=availablePort();
  jettyServer=new JettyServer(portNum,sourceDir,sourceName);
  hazelcastInstance=Hazelcast.newHazelcastInstance(makeConfig());
}","@Before public void setUp() throws Exception {
  startMS=System.currentTimeMillis();
  URL root=new URL(MancenterServlet.class.getResource(""String_Node_Str""),""String_Node_Str"");
  String baseDir=URLDecoder.decode(root.getFile(),""String_Node_Str"");
  String sourceDir=baseDir + ""String_Node_Str"";
  String sourceName=""String_Node_Str"";
  portNum=availablePort();
  jettyServer=new JettyServer(portNum,sourceDir,sourceName);
  hazelcastInstance=Hazelcast.newHazelcastInstance(makeConfig());
}",0.9150197628458498
46885,"@Test public void all_nodes_should_have_the_same_cluster_start_time_and_id_after_master_shutdown_and_new_node_join(){
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertSizeEventually(3,h1.getCluster().getMembers());
  assertSizeEventually(3,h2.getCluster().getMembers());
  assertSizeEventually(3,h3.getCluster().getMembers());
  Node node1=TestUtil.getNode(h1);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertTrue(node1.isMaster());
  h1.shutdown();
  assertSizeEventually(2,h2.getCluster().getMembers());
  HazelcastInstance h4=factory.newHazelcastInstance();
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  Node node4=TestUtil.getNode(h4);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node4.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node4.getClusterService().getClusterId());
}","@Test public void all_nodes_should_have_the_same_cluster_start_time_and_id_after_master_shutdown_and_new_node_join(){
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  Node node1=TestUtil.getNode(h1);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertTrue(node1.isMaster());
  h1.shutdown();
  assertClusterSizeEventually(2,h2);
  HazelcastInstance h4=factory.newHazelcastInstance();
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  Node node4=TestUtil.getNode(h4);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node4.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node4.getClusterService().getClusterId());
}",0.945712523133868
46886,"@Test public void all_nodes_should_have_the_same_cluster_start_time_and_cluster_id() throws Exception {
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertSizeEventually(3,h1.getCluster().getMembers());
  assertSizeEventually(3,h2.getCluster().getMembers());
  assertSizeEventually(3,h3.getCluster().getMembers());
  Node node1=TestUtil.getNode(h1);
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertNotNull(node1ClusterId);
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
}","@Test public void all_nodes_should_have_the_same_cluster_start_time_and_cluster_id() throws Exception {
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  Node node1=TestUtil.getNode(h1);
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertNotNull(node1ClusterId);
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
}",0.9439874657265962
46887,"@Override public boolean shouldBackup(){
  return response != null;
}","@Override public boolean shouldBackup(){
  return response != null && backupRecord != null;
}",0.8518518518518519
46888,"public CachePutBackupOperation(String name,Data key,CacheRecord cacheRecord,boolean wanOriginated){
  this(name,key,cacheRecord);
  this.wanOriginated=wanOriginated;
}","public CachePutBackupOperation(String name,Data key,CacheRecord cacheRecord,boolean wanOriginated){
  this(name,key,cacheRecord);
  if (cacheRecord == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.wanOriginated=wanOriginated;
}",0.784037558685446
46889,"@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response) && backupRecord != null;
}",0.8723404255319149
46890,"@Override public boolean shouldBackup(){
  return true;
}","@Override public boolean shouldBackup(){
  return backupRecord != null;
}",0.8461538461538461
46891,"@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response);
}","@Override public boolean shouldBackup(){
  return Boolean.TRUE.equals(response) && backupRecord != null;
}",0.8723404255319149
46892,"@Test public void all_nodes_should_have_the_same_cluster_start_time_and_id_after_master_shutdown_and_new_node_join(){
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertSizeEventually(3,h1.getCluster().getMembers());
  assertSizeEventually(3,h2.getCluster().getMembers());
  assertSizeEventually(3,h3.getCluster().getMembers());
  Node node1=TestUtil.getNode(h1);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertTrue(node1.isMaster());
  h1.shutdown();
  assertSizeEventually(2,h2.getCluster().getMembers());
  HazelcastInstance h4=factory.newHazelcastInstance();
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  Node node4=TestUtil.getNode(h4);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node4.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node4.getClusterService().getClusterId());
}","@Test public void all_nodes_should_have_the_same_cluster_start_time_and_id_after_master_shutdown_and_new_node_join(){
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  Node node1=TestUtil.getNode(h1);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertTrue(node1.isMaster());
  h1.shutdown();
  assertClusterSizeEventually(2,h2);
  HazelcastInstance h4=factory.newHazelcastInstance();
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  Node node4=TestUtil.getNode(h4);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node4.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node4.getClusterService().getClusterId());
}",0.945712523133868
46893,"@Test public void all_nodes_should_have_the_same_cluster_start_time_and_cluster_id() throws Exception {
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertSizeEventually(3,h1.getCluster().getMembers());
  assertSizeEventually(3,h2.getCluster().getMembers());
  assertSizeEventually(3,h3.getCluster().getMembers());
  Node node1=TestUtil.getNode(h1);
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertNotNull(node1ClusterId);
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
}","@Test public void all_nodes_should_have_the_same_cluster_start_time_and_cluster_id() throws Exception {
  HazelcastInstance h1=factory.newHazelcastInstance();
  HazelcastInstance h2=factory.newHazelcastInstance();
  HazelcastInstance h3=factory.newHazelcastInstance();
  assertClusterSizeEventually(3,h1);
  assertClusterSizeEventually(3,h2);
  assertClusterSizeEventually(3,h3);
  Node node1=TestUtil.getNode(h1);
  Node node2=TestUtil.getNode(h2);
  Node node3=TestUtil.getNode(h3);
  final ClusterServiceImpl clusterService=node1.getClusterService();
  long node1ClusterStartTime=clusterService.getClusterClock().getClusterStartTime();
  long clusterUpTime=clusterService.getClusterClock().getClusterUpTime();
  String node1ClusterId=clusterService.getClusterId();
  assertTrue(clusterUpTime > 0);
  assertNotEquals(node1ClusterStartTime,Long.MIN_VALUE);
  assertEquals(node1ClusterStartTime,node2.getClusterService().getClusterClock().getClusterStartTime());
  assertEquals(node1ClusterStartTime,node3.getClusterService().getClusterClock().getClusterStartTime());
  assertNotNull(node1ClusterId);
  assertEquals(node1ClusterId,node2.getClusterService().getClusterId());
  assertEquals(node1ClusterId,node3.getClusterService().getClusterId());
}",0.9439874657265962
46894,"/** 
 * It may be useful to use this   {@code init} method in some cases that same instance of this class can be usedinstead of creating a new one for every iteration when scanning large data sets, for example: <pre> <code>Predicate predicate = ... QueryEntry entry = new QueryEntry() for(i == 0; i < HUGE_NUMBER; i++) { entry.init(...) boolean valid = predicate.apply(queryEntry); if(valid) { .... } } </code> </pre>
 */
public void init(SerializationService serializationService,Data key,Object value,Extractors extractors){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.serializationService=serializationService;
  this.key=key;
  this.value=value;
  this.extractors=extractors;
}","/** 
 * It may be useful to use this   {@code init} method in some cases that same instance of this class can be usedinstead of creating a new one for every iteration when scanning large data sets, for example: <pre> <code>Predicate predicate = ... QueryEntry entry = new QueryEntry() for (i == 0; i < HUGE_NUMBER; i++) { entry.init(...) boolean valid = predicate.apply(queryEntry); if (valid) { .... } } </code> </pre>
 */
public void init(SerializationService serializationService,Data key,Object value,Extractors extractors){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.serializationService=serializationService;
  this.key=key;
  this.value=value;
  this.extractors=extractors;
}",0.9986282578875172
46895,"@Before public void setup(){
  HazelcastInstance[] cluster=createHazelcastInstanceFactory(2).newInstances();
  local=cluster[0];
  remote=cluster[1];
  map=local.getMap(randomName());
  serializationService=getSerializationService(local);
  remoteKey1=generateKeyOwnedBy(remote);
  remoteKey2=generateKeyOwnedBy(remote);
  remoteKey3=generateKeyOwnedBy(remote);
  localKey1=generateKeyOwnedBy(local);
  localKey2=generateKeyOwnedBy(local);
  localKey3=generateKeyOwnedBy(local);
}","@Before public void setup(){
  HazelcastInstance[] cluster=createHazelcastInstanceFactory(2).newInstances();
  HazelcastInstance local=cluster[0];
  HazelcastInstance remote=cluster[1];
  map=local.getMap(randomName());
  serializationService=getSerializationService(local);
  localKey1=generateKeyOwnedBy(local);
  localKey2=generateKeyOwnedBy(local);
  localKey3=generateKeyOwnedBy(local);
  remoteKey1=generateKeyOwnedBy(remote);
  remoteKey2=generateKeyOwnedBy(remote);
  remoteKey3=generateKeyOwnedBy(remote);
}",0.7811244979919679
46896,"@Before public void setup(){
  hz=createHazelcastInstance();
  map=hz.getMap(randomName());
  serializationService=getSerializationService(hz);
}","@Before public void setup(){
  HazelcastInstance instance=createHazelcastInstance();
  map=instance.getMap(randomName());
  serializationService=getSerializationService(instance);
}",0.8588957055214724
46897,"private void assertResultContains(Set<Map.Entry<String,String>> result,String key,String value){
  assertTrue(result.contains(new SimpleEntry(key,value)));
}","private void assertResultContains(Set<Map.Entry<String,String>> result,String key,String value){
  assertTrue(result.contains(new SimpleEntry<String,String>(key,value)));
}",0.9544072948328268
46898,"@Before public void setup(){
  hz=createHazelcastInstance();
  map=hz.getMap(randomName());
  serializationService=getSerializationService(hz);
}","@Before public void setup(){
  HazelcastInstance instance=createHazelcastInstance();
  map=instance.getMap(randomName());
  serializationService=getSerializationService(instance);
}",0.8588957055214724
46899,"@Test(expected=QueryResultSizeExceededException.class) public void whenLimitExceeded() throws Exception {
  fillPartition(limit + 1);
  queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,IterationType.ENTRY);
}","@Test(expected=QueryResultSizeExceededException.class) public void whenLimitExceeded() throws Exception {
  fillPartition(limit + 1);
  queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,ENTRY);
}",0.97008547008547
46900,"@Test public void whenLimitEquals() throws Exception {
  fillPartition(limit);
  QueryResult result=queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,IterationType.ENTRY);
  assertEquals(limit,result.getRows().size());
}","@Test public void whenLimitEquals() throws Exception {
  fillPartition(limit);
  QueryResult result=queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,ENTRY);
  assertEquals(limit,result.getRows().size());
}",0.9714285714285714
46901,"@Test public void whenLimitNotExceeded() throws Exception {
  fillPartition(limit - 1);
  QueryResult result=queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,IterationType.ENTRY);
  assertEquals(limit - 1,result.getRows().size());
}","@Test public void whenLimitNotExceeded() throws Exception {
  fillPartition(limit - 1);
  QueryResult result=queryEngine.queryLocalPartition(map.getName(),TruePredicate.INSTANCE,PARTITION_ID,ENTRY);
  assertEquals(limit - 1,result.getRows().size());
}",0.9728682170542636
46902,"@Test public void whenResultSizeLimitEquals() throws Exception {
  fillMap(limit);
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,IterationType.ENTRY);
  assertEquals(limit,result.getRows().size());
}","@Test public void whenResultSizeLimitEquals() throws Exception {
  fillMap(limit);
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,ENTRY);
  assertEquals(limit,result.getRows().size());
}",0.9704641350210972
46903,"@Test public void whenResultSizeLimitNotExceeded() throws Exception {
  fillMap(limit - 1);
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,IterationType.ENTRY);
  assertEquals(limit - 1,result.getRows().size());
}","@Test public void whenResultSizeLimitNotExceeded() throws Exception {
  fillMap(limit - 1);
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,ENTRY);
  assertEquals(limit - 1,result.getRows().size());
}",0.972
46904,"@Test public void checkResultLimit() throws Exception {
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,IterationType.ENTRY);
  assertEquals(limit,result.getResultLimit());
}","@Test public void checkResultLimit() throws Exception {
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,ENTRY);
  assertEquals(limit,result.getResultLimit());
}",0.9666666666666668
46905,"@Test(expected=QueryResultSizeExceededException.class) public void whenResultSizeLimitExceeded() throws Exception {
  fillMap(limit + 1);
  queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,IterationType.ENTRY);
}","@Test(expected=QueryResultSizeExceededException.class) public void whenResultSizeLimitExceeded() throws Exception {
  fillMap(limit + 1);
  queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,ENTRY);
}",0.9690265486725664
46906,"@Test public void checkResultLimit() throws Exception {
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,IterationType.ENTRY);
  assertEquals(Long.MAX_VALUE,result.getResultLimit());
}","@Test public void checkResultLimit() throws Exception {
  QueryResult result=queryEngine.queryLocalPartitions(map.getName(),TruePredicate.INSTANCE,ENTRY);
  assertEquals(Long.MAX_VALUE,result.getResultLimit());
}",0.9680365296803652
46907,"@Before public void setup(){
  hz=createHazelcastInstance();
  map=hz.getMap(randomName());
  serializationService=getSerializationService(hz);
}","@Before public void setup(){
  HazelcastInstance instance=createHazelcastInstance();
  map=instance.getMap(randomName());
  serializationService=getSerializationService(instance);
}",0.8588957055214724
46908,"protected void putAndGetFromCacheAndThenGetFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    assertNull(nearCacheTestContext.nearCache.get(nearCacheTestContext.serializationService.toData(i)));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext.cache.get(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    String expectedValue=generateValueFromKey(i);
    Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertEquals(expectedValue,nearCacheTestContext.nearCache.get(keyData));
  }
  nearCacheTestContext.close();
}","protected void putAndGetFromCacheAndThenGetFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    assertNull(nearCacheTestContext.nearCache.get(nearCacheTestContext.serializationService.toData(i)));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext.cache.get(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    String expectedValue=generateValueFromKey(i);
    Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertEquals(expectedValue,nearCacheTestContext.nearCache.get(keyData));
  }
}",0.980173482032218
46909,"protected void putToCacheAndUpdateFromOtherNodeThenGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(DEFAULT_RECORD_COUNT + i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndUpdateFromOtherNodeThenGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(DEFAULT_RECORD_COUNT + i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
}",0.9820944112859468
46910,"protected void putToCacheAndRemoveFromOtherNodeThenCantGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.remove(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndRemoveFromOtherNodeThenCantGetUpdatedFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.remove(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
}",0.9765791341376864
46911,"@After public void tearDown(){
  if (serverInstance != null) {
    serverInstance.shutdown();
  }
}","@After public void tearDown(){
  hazelcastFactory.shutdownAll();
}",0.6424242424242425
46912,"NearCacheTestContext(HazelcastClientProxy client,HazelcastClientCacheManager cacheManager,NearCacheManager nearCacheManager,ICache<Integer,String> cache,NearCache<Data,String> nearCache){
  this.client=client;
  this.serializationService=client.getSerializationService();
  this.cacheManager=cacheManager;
  this.nearCacheManager=nearCacheManager;
  this.cache=cache;
  this.nearCache=nearCache;
}","NearCacheTestContext(HazelcastClientProxy client,HazelcastClientCacheManager cacheManager,NearCacheManager nearCacheManager,ICache<Object,String> cache,NearCache<Data,String> nearCache){
  this.client=client;
  this.serializationService=client.getSerializationService();
  this.cacheManager=cacheManager;
  this.nearCacheManager=nearCacheManager;
  this.cache=cache;
  this.nearCache=nearCache;
}",0.9836065573770492
46913,"protected void doTestGetAllReturnsFromNearCache(){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(InMemoryFormat.OBJECT);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    assertNull(nearCacheTestContext.nearCache.get(nearCacheTestContext.serializationService.toData(i)));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext.cache.get(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertTrue(nearCacheTestContext.cache.get(i) == nearCacheTestContext.nearCache.get(keyData));
  }
  nearCacheTestContext.close();
}","protected void doTestGetAllReturnsFromNearCache(){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(InMemoryFormat.OBJECT);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    assertNull(nearCacheTestContext.nearCache.get(nearCacheTestContext.serializationService.toData(i)));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext.cache.get(i);
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertTrue(nearCacheTestContext.cache.get(i) == nearCacheTestContext.nearCache.get(keyData));
  }
}",0.9785809906291834
46914,"protected NearCacheTestContext createNearCacheTest(String cacheName,NearCacheConfig nearCacheConfig){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  HazelcastClientProxy client=(HazelcastClientProxy)hazelcastFactory.newHazelcastClient(clientConfig);
  NearCacheManager nearCacheManager=client.client.getNearCacheManager();
  CachingProvider provider=HazelcastClientCachingProvider.createCachingProvider(client);
  HazelcastClientCacheManager cacheManager=(HazelcastClientCacheManager)provider.getCacheManager();
  CacheConfig<Integer,String> cacheConfig=createCacheConfig(nearCacheConfig.getInMemoryFormat());
  ICache<Integer,String> cache=cacheManager.createCache(cacheName,cacheConfig);
  NearCache<Data,String> nearCache=nearCacheManager.getNearCache(cacheManager.getCacheNameWithPrefix(cacheName));
  return new NearCacheTestContext(client,cacheManager,nearCacheManager,cache,nearCache);
}","protected NearCacheTestContext createNearCacheTest(String cacheName,NearCacheConfig nearCacheConfig){
  ClientConfig clientConfig=createClientConfig();
  clientConfig.addNearCacheConfig(nearCacheConfig);
  HazelcastClientProxy client=(HazelcastClientProxy)hazelcastFactory.newHazelcastClient(clientConfig);
  NearCacheManager nearCacheManager=client.client.getNearCacheManager();
  CachingProvider provider=HazelcastClientCachingProvider.createCachingProvider(client);
  HazelcastClientCacheManager cacheManager=(HazelcastClientCacheManager)provider.getCacheManager();
  CacheConfig<Object,String> cacheConfig=createCacheConfig(nearCacheConfig.getInMemoryFormat());
  ICache<Object,String> cache=cacheManager.createCache(cacheName,cacheConfig);
  NearCache<Data,String> nearCache=nearCacheManager.getNearCache(cacheManager.getCacheNameWithPrefix(cacheName));
  return new NearCacheTestContext(client,cacheManager,nearCacheManager,cache,nearCache);
}",0.9863157894736844
46915,"protected void putToCacheAndClearOrDestroyThenCantGetAnyRecordFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.cache.clear();
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.close();
  nearCacheTestContext2.close();
}","protected void putToCacheAndClearOrDestroyThenCantGetAnyRecordFromClientNearCache(InMemoryFormat inMemoryFormat){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setInvalidateOnChange(true);
  NearCacheTestContext nearCacheTestContext1=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  final NearCacheTestContext nearCacheTestContext2=createNearCacheTest(DEFAULT_CACHE_NAME,nearCacheConfig);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    nearCacheTestContext1.cache.put(i,generateValueFromKey(i));
  }
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final Integer key=i;
    final String value=nearCacheTestContext2.cache.get(key);
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertEquals(value,nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
  nearCacheTestContext1.cache.clear();
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    final int key=i;
    HazelcastTestSupport.assertTrueEventually(new AssertTask(){
      @Override public void run() throws Exception {
        assertNull(nearCacheTestContext2.nearCache.get(nearCacheTestContext2.serializationService.toData(key)));
      }
    }
);
  }
}",0.9755374351371386
46916,"protected void putToCacheAndThenGetFromClientNearCacheInternal(InMemoryFormat inMemoryFormat,boolean putIfAbsent){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setLocalUpdatePolicy(NearCacheConfig.LocalUpdatePolicy.CACHE);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig,putIfAbsent);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    String expectedValue=generateValueFromKey(i);
    Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertEquals(expectedValue,nearCacheTestContext.nearCache.get(keyData));
  }
  nearCacheTestContext.close();
}","protected void putToCacheAndThenGetFromClientNearCacheInternal(InMemoryFormat inMemoryFormat,boolean putIfAbsent){
  NearCacheConfig nearCacheConfig=createNearCacheConfig(inMemoryFormat);
  nearCacheConfig.setLocalUpdatePolicy(NearCacheConfig.LocalUpdatePolicy.CACHE);
  final NearCacheTestContext nearCacheTestContext=createNearCacheTestAndFillWithData(DEFAULT_CACHE_NAME,nearCacheConfig,putIfAbsent);
  for (int i=0; i < DEFAULT_RECORD_COUNT; i++) {
    String expectedValue=generateValueFromKey(i);
    Data keyData=nearCacheTestContext.serializationService.toData(i);
    assertEquals(expectedValue,nearCacheTestContext.nearCache.get(keyData));
  }
}",0.9761194029850746
46917,"@Test public void test_getCredentialFromFile_when_google_compute_engine() throws Exception {
  ComputeServiceBuilder builder=new ComputeServiceBuilder(new HashMap<String,Comparable>());
  URL resourceUrl=getClass().getResource(""String_Node_Str"");
  assertEquals(""String_Node_Str"",builder.getCredentialFromFile(""String_Node_Str"",resourceUrl.getPath()));
}","@Test public void test_getCredentialFromFile_when_google_compute_engine() throws Exception {
  ComputeServiceBuilder builder=new ComputeServiceBuilder(new HashMap<String,Comparable>());
  URL resourceUrl=getClass().getResource(""String_Node_Str"");
  String decodedURL=URLDecoder.decode(resourceUrl.getFile(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",builder.getCredentialFromFile(""String_Node_Str"",decodedURL));
}",0.8571428571428571
46918,"@Test public void test_getCredentialFromFile_when_cloud_provider_other_than_google() throws Exception {
  ComputeServiceBuilder builder=new ComputeServiceBuilder(new HashMap<String,Comparable>());
  URL resourceUrl=getClass().getResource(""String_Node_Str"");
  assertEquals(""String_Node_Str"",builder.getCredentialFromFile(""String_Node_Str"",resourceUrl.getPath()));
}","@Test public void test_getCredentialFromFile_when_cloud_provider_other_than_google() throws Exception {
  ComputeServiceBuilder builder=new ComputeServiceBuilder(new HashMap<String,Comparable>());
  URL resourceUrl=getClass().getResource(""String_Node_Str"");
  String decodedURL=URLDecoder.decode(resourceUrl.getFile(),""String_Node_Str"");
  assertEquals(""String_Node_Str"",builder.getCredentialFromFile(""String_Node_Str"",decodedURL));
}",0.8610763454317898
46919,"@Override public void run(){
  final long now=getNow();
  oldValue=recordStore.get(dataKey,true);
  Map.Entry entry=createMapEntry(dataKey,oldValue);
  processBackup(entry);
  if (noOpBackup(entry)) {
    return;
  }
  if (entryRemovedBackup(entry)) {
    return;
  }
  entryAddedOrUpdatedBackup(entry);
}","@Override public void run(){
  oldValue=recordStore.get(dataKey,true);
  Map.Entry entry=createMapEntry(dataKey,oldValue);
  processBackup(entry);
  if (noOpBackup(entry)) {
    return;
  }
  if (entryRemovedBackup(entry)) {
    return;
  }
  entryAddedOrUpdatedBackup(entry);
}",0.95368782161235
46920,"@Override public void run() throws Exception {
  final long now=getNow();
  final Set<Data> keys=this.keys;
  for (  Data dataKey : keys) {
    if (keyNotOwnedByThisPartition(dataKey)) {
      continue;
    }
    final Object oldValue=recordStore.get(dataKey,true);
    final Map.Entry entry=createMapEntry(dataKey,oldValue);
    processBackup(entry);
    if (noOp(entry,oldValue)) {
      continue;
    }
    if (entryRemovedBackup(entry,dataKey)) {
      continue;
    }
    entryAddedOrUpdatedBackup(entry,dataKey);
    evict();
  }
}","@Override public void run() throws Exception {
  final Set<Data> keys=this.keys;
  for (  Data dataKey : keys) {
    if (keyNotOwnedByThisPartition(dataKey)) {
      continue;
    }
    final Object oldValue=recordStore.get(dataKey,true);
    final Map.Entry entry=createMapEntry(dataKey,oldValue);
    processBackup(entry);
    if (noOp(entry,oldValue)) {
      continue;
    }
    if (entryRemovedBackup(entry,dataKey)) {
      continue;
    }
    entryAddedOrUpdatedBackup(entry,dataKey);
    evict();
  }
}",0.9742120343839542
46921,"@Test public void testConfigurationWithFile() throws Exception {
  URL url=getClass().getClassLoader().getResource(""String_Node_Str"");
  assertNotNull(url);
  System.setProperty(""String_Node_Str"",url.getFile());
  Config config=new XmlConfigBuilder().build();
  assertEquals(url,config.getConfigurationUrl());
}","@Test public void testConfigurationWithFile() throws Exception {
  URL url=getClass().getClassLoader().getResource(""String_Node_Str"");
  assertNotNull(url);
  System.setProperty(""String_Node_Str"",URLDecoder.decode(url.getPath(),""String_Node_Str""));
  Config config=new XmlConfigBuilder().build();
  assertEquals(url,config.getConfigurationUrl());
}",0.9074355083459787
46922,"private void collectResult(MultiResult collector,Object parentObject) throws IllegalAccessException, InvocationTargetException {
  if (parentObject == null) {
    collector.add(parentObject);
  }
 else {
    Object currentObject=extractFrom(parentObject);
    if (shouldReduce()) {
      reduceInto(collector,currentObject);
    }
 else {
      collector.add(currentObject);
    }
  }
}","private void collectResult(MultiResult collector,Object parentObject) throws IllegalAccessException, InvocationTargetException {
  if (parentObject == null) {
    collector.add(null);
  }
 else {
    Object currentObject=extractFrom(parentObject);
    if (shouldReduce()) {
      reduceInto(collector,currentObject);
    }
 else {
      collector.add(currentObject);
    }
  }
}",0.9790575916230366
46923,"private ContextBuilder newContextBuilder(final String cloudProvider,final String identity,final String credential,final String roleName){
  try {
    if (roleName != null && (identity != null || credential != null)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (roleName != null && !cloudProvider.equals(AWS_EC2)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + cloudProvider);
    }
    if (cloudProvider.equals(AWS_EC2) && roleName != null) {
      Supplier<Credentials> credentialsSupplier=new Supplier<Credentials>(){
        @Override public Credentials get(){
          return new IAMRoleCredentialSupplierBuilder().withRoleName(roleName).build();
        }
      }
;
      return ContextBuilder.newBuilder(cloudProvider).credentialsSupplier(credentialsSupplier);
    }
 else {
      checkNotNull(identity,""String_Node_Str"");
      checkNotNull(credential,""String_Node_Str"");
      return ContextBuilder.newBuilder(cloudProvider).credentials(identity,credential);
    }
  }
 catch (  NoSuchElementException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + cloudProvider + ""String_Node_Str"");
  }
}","public ContextBuilder newContextBuilder(final String cloudProvider,final String identity,final String credential,final String roleName){
  try {
    if (roleName != null && (identity != null || credential != null)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (roleName != null && !cloudProvider.equals(AWS_EC2)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + cloudProvider);
    }
    if (cloudProvider.equals(AWS_EC2) && roleName != null) {
      Supplier<Credentials> credentialsSupplier=new Supplier<Credentials>(){
        @Override public Credentials get(){
          return new IAMRoleCredentialSupplierBuilder().withRoleName(roleName).build();
        }
      }
;
      return ContextBuilder.newBuilder(cloudProvider).credentialsSupplier(credentialsSupplier);
    }
 else {
      checkNotNull(identity,""String_Node_Str"");
      checkNotNull(credential,""String_Node_Str"");
      return ContextBuilder.newBuilder(cloudProvider).credentials(identity,credential);
    }
  }
 catch (  NoSuchElementException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + cloudProvider + ""String_Node_Str"");
  }
}",0.9954862535904802
46924,"@Override public boolean apply(ComputeMetadata nodeMetadata){
  if (nodeMetadata == null) {
    return false;
  }
  for (  AbstractMap.SimpleImmutableEntry entry : tagPairs) {
    if (!nodeMetadata.getUserMetadata().get(entry.getKey()).equals(entry.getValue())) {
      return false;
    }
  }
  return true;
}","@Override public boolean apply(ComputeMetadata nodeMetadata){
  if (nodeMetadata == null) {
    return false;
  }
  if (tagPairs.size() > nodeMetadata.getUserMetadata().size()) {
    return false;
  }
  for (  AbstractMap.SimpleImmutableEntry entry : tagPairs) {
    String value=nodeMetadata.getUserMetadata().get(entry.getKey());
    if (value == null || !value.equals(entry.getValue())) {
      return false;
    }
  }
  return true;
}",0.6844919786096256
46925,"private Properties buildRegionZonesConfig(){
  final String regions=getOrNull(JCloudsProperties.REGIONS);
  final String zones=getOrNull(JCloudsProperties.ZONES);
  Properties jcloudsProperties=newOverrideProperties();
  if (regions != null) {
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_REGIONS,regions);
  }
  if (zones != null) {
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_ZONES,zones);
  }
  return jcloudsProperties;
}","public Properties buildRegionZonesConfig(){
  final String regions=getOrNull(JCloudsProperties.REGIONS);
  final String zones=getOrNull(JCloudsProperties.ZONES);
  Properties jcloudsProperties=newOverrideProperties();
  if (regions != null) {
    List<String> regionList=Arrays.asList(regions.split(""String_Node_Str""));
    for (    String region : regionList) {
      regionsSet.add(region);
    }
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_REGIONS,regions);
  }
  if (zones != null) {
    List<String> zoneList=Arrays.asList(zones.split(""String_Node_Str""));
    for (    String zone : zoneList) {
      zonesSet.add(zone);
    }
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_ZONES,zones);
  }
  return jcloudsProperties;
}",0.7440329218106996
46926,"private String getCredentialFromFile(String provider,String credentialPath) throws IllegalArgumentException {
  try {
    String fileContents=Files.toString(new File(credentialPath),Charsets.UTF_8);
    if (provider.equals(GOOGLE_COMPUTE_ENGINE)) {
      Supplier<Credentials> credentialSupplier=new GoogleCredentialsFromJson(fileContents);
      return credentialSupplier.get().credential;
    }
    return fileContents;
  }
 catch (  IOException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + credentialPath,e);
  }
}","public String getCredentialFromFile(String provider,String credentialPath) throws IllegalArgumentException {
  try {
    String fileContents=Files.toString(new File(credentialPath),Charsets.UTF_8);
    if (provider.equals(GOOGLE_COMPUTE_ENGINE)) {
      Supplier<Credentials> credentialSupplier=new GoogleCredentialsFromJson(fileContents);
      return credentialSupplier.get().credential;
    }
    return fileContents;
  }
 catch (  IOException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + credentialPath,e);
  }
}",0.9898242368177612
46927,"private void buildNodeFilter(){
  nodesFilter=new Predicate<ComputeMetadata>(){
    @Override public boolean apply(    ComputeMetadata nodeMetadata){
      if (nodeMetadata == null) {
        return false;
      }
      for (      AbstractMap.SimpleImmutableEntry entry : tagPairs) {
        if (!nodeMetadata.getUserMetadata().get(entry.getKey()).equals(entry.getValue())) {
          return false;
        }
      }
      return true;
    }
  }
;
}","public Predicate<ComputeMetadata> buildNodeFilter(){
  nodesFilter=new Predicate<ComputeMetadata>(){
    @Override public boolean apply(    ComputeMetadata nodeMetadata){
      if (nodeMetadata == null) {
        return false;
      }
      if (tagPairs.size() > nodeMetadata.getUserMetadata().size()) {
        return false;
      }
      for (      AbstractMap.SimpleImmutableEntry entry : tagPairs) {
        String value=nodeMetadata.getUserMetadata().get(entry.getKey());
        if (value == null || !value.equals(entry.getValue())) {
          return false;
        }
      }
      return true;
    }
  }
;
  return nodesFilter;
}",0.702851885924563
46928,"private void buildTagConfig(){
  final String tagKeys=getOrNull(JCloudsProperties.TAG_KEYS);
  final String tagValues=getOrNull(JCloudsProperties.TAG_VALUES);
  if (tagKeys != null && tagValues != null) {
    List<String> keysList=Arrays.asList(tagKeys.split(""String_Node_Str""));
    List<String> valueList=Arrays.asList(tagValues.split(""String_Node_Str""));
    if (keysList.size() != valueList.size()) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    for (int i=0; i < keysList.size(); i++) {
      tagPairs.add(new AbstractMap.SimpleImmutableEntry(keysList.get(i),valueList.get(i)));
    }
  }
}","public void buildTagConfig(){
  final String tagKeys=getOrNull(JCloudsProperties.TAG_KEYS);
  final String tagValues=getOrNull(JCloudsProperties.TAG_VALUES);
  if (tagKeys != null && tagValues != null) {
    List<String> keysList=Arrays.asList(tagKeys.split(""String_Node_Str""));
    List<String> valueList=Arrays.asList(tagValues.split(""String_Node_Str""));
    if (keysList.size() != valueList.size()) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    for (int i=0; i < keysList.size(); i++) {
      tagPairs.add(new AbstractMap.SimpleImmutableEntry(keysList.get(i),valueList.get(i)));
    }
  }
}",0.991207034372502
46929,"/** 
 * Gets filtered nodes.
 * @return the filtered nodes
 */
public Iterable<? extends NodeMetadata> getFilteredNodes(){
  final String group=getOrNull(JCloudsProperties.GROUP);
  Set<? extends NodeMetadata> result=computeService.listNodesDetailsMatching(nodesFilter);
  Iterable<? extends NodeMetadata> filteredResult=new HashSet<NodeMetadata>();
  for (  NodeMetadata metadata : result) {
    if (group != null && !group.equals(metadata.getGroup())) {
      continue;
    }
    if (checkRegionZoneConfig(metadata)) {
      continue;
    }
    ((HashSet<NodeMetadata>)filteredResult).add(metadata);
  }
  return filteredResult;
}","/** 
 * Gets filtered nodes.
 * @return the filtered nodes
 */
public Iterable<? extends NodeMetadata> getFilteredNodes(){
  final String group=getOrNull(JCloudsProperties.GROUP);
  Set<? extends NodeMetadata> result=computeService.listNodesDetailsMatching(nodesFilter);
  Iterable<? extends NodeMetadata> filteredResult=new HashSet<NodeMetadata>();
  for (  NodeMetadata metadata : result) {
    if (group != null && !group.equals(metadata.getGroup())) {
      continue;
    }
    if (!isNodeInsideZones(metadata) || !isNodeInsideRegions(metadata)) {
      continue;
    }
    ((HashSet<NodeMetadata>)filteredResult).add(metadata);
  }
  return filteredResult;
}",0.9528957528957528
46930,"protected Map<String,String> getKeysFromIamRole(){
  try {
    String query=""String_Node_Str"" + roleName;
    URL url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    InputStreamReader is=new InputStreamReader(url.openStream(),""String_Node_Str"");
    BufferedReader reader=new BufferedReader(is);
    Map<String,String> map=parseIamRole(reader);
    return map;
  }
 catch (  IOException io) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
}","protected Map<String,String> getKeysFromIamRole(){
  try {
    URL url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream(),""String_Node_Str""));
    return parseIamRole(reader);
  }
 catch (  IOException io) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
}",0.5552884615384616
46931,"public IAMRoleCredentialSupplierBuilder withRoleName(String roleName){
  isNotNull(roleName,""String_Node_Str"");
  this.roleName=roleName;
  return this;
}","public IAMRoleCredentialSupplierBuilder withRoleName(String roleName){
  isNotNull(roleName,""String_Node_Str"");
  this.roleName=roleName;
  query=query + roleName;
  return this;
}",0.9221556886227544
46932,"@Override public Iterable<DiscoveryNode> discoverNodes(){
  List<DiscoveryNode> discoveryNodes=new ArrayList<DiscoveryNode>();
  try {
    Iterable<? extends NodeMetadata> nodes=computeServiceBuilder.getFilteredNodes();
    for (    NodeMetadata metadata : nodes) {
      if (metadata.getStatus() != NodeMetadata.Status.RUNNING) {
        continue;
      }
      discoveryNodes.add(buildDiscoveredNode(metadata));
    }
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
  return discoveryNodes;
}","@Override public Iterable<DiscoveryNode> discoverNodes(){
  List<DiscoveryNode> discoveryNodes=new ArrayList<DiscoveryNode>();
  try {
    Iterable<? extends NodeMetadata> nodes=computeServiceBuilder.getFilteredNodes();
    for (    NodeMetadata metadata : nodes) {
      if (metadata.getStatus() != NodeMetadata.Status.RUNNING) {
        continue;
      }
      discoveryNodes.add(buildDiscoveredNode(metadata));
    }
    if (discoveryNodes.isEmpty()) {
      LOGGER.warning(""String_Node_Str"");
    }
 else {
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      for (      DiscoveryNode node : discoveryNodes) {
        sb.append(""String_Node_Str"").append(node.getPublicAddress().toString()).append(""String_Node_Str"");
      }
      LOGGER.finest(sb.toString());
    }
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
  return discoveryNodes;
}",0.7452896022330775
46933,"protected AbstractClientCacheProxyBase(CacheConfig cacheConfig,ClientContext clientContext){
  this.name=cacheConfig.getName();
  this.nameWithPrefix=cacheConfig.getNameWithPrefix();
  this.cacheConfig=cacheConfig;
  this.clientContext=clientContext;
  init();
}","protected AbstractClientCacheProxyBase(CacheConfig cacheConfig,ClientContext clientContext){
  this.name=cacheConfig.getName();
  this.nameWithPrefix=cacheConfig.getNameWithPrefix();
  this.cacheConfig=cacheConfig;
  this.clientContext=clientContext;
}",0.980544747081712
46934,"public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  for (  Future f : loadAllTasks) {
    try {
      f.get(TIMEOUT,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      throw new CacheException(e);
    }
  }
  loadAllTasks.clear();
  closeCacheLoader();
  closeListeners();
}","public void close(){
  if (!isClosed.compareAndSet(false,true)) {
    return;
  }
  for (  Future f : loadAllTasks) {
    try {
      f.get(TIMEOUT,TimeUnit.SECONDS);
    }
 catch (    Exception e) {
      throw new CacheException(e);
    }
  }
  loadAllTasks.clear();
  closeListeners();
}",0.920265780730897
46935,"public void open(){
  if (isDestroyed.get()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!isClosed.compareAndSet(true,false)) {
    return;
  }
  init();
}","public void open(){
  if (isDestroyed.get()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!isClosed.compareAndSet(true,false)) {
    return;
  }
}",0.971264367816092
46936,"@Override public void loadAll(Set<? extends K> keys,boolean replaceExistingValues,CompletionListener completionListener){
  ensureOpen();
  validateNotNull(keys);
  for (  K key : keys) {
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key);
  }
  validateCacheLoader(completionListener);
  HashSet<Data> keysData=new HashSet<Data>();
  for (  K key : keys) {
    keysData.add(toData(key));
  }
  CacheLoadAllRequest request=new CacheLoadAllRequest(nameWithPrefix,keysData,replaceExistingValues);
  try {
    submitLoadAllTask(request,completionListener);
  }
 catch (  Exception e) {
    if (completionListener != null) {
      completionListener.onException(e);
    }
    throw new CacheException(e);
  }
}","@Override public void loadAll(Set<? extends K> keys,boolean replaceExistingValues,CompletionListener completionListener){
  ensureOpen();
  validateNotNull(keys);
  for (  K key : keys) {
    CacheProxyUtil.validateConfiguredTypes(cacheConfig,key);
  }
  HashSet<Data> keysData=new HashSet<Data>();
  for (  K key : keys) {
    keysData.add(toData(key));
  }
  CacheLoadAllRequest request=new CacheLoadAllRequest(nameWithPrefix,keysData,replaceExistingValues);
  try {
    submitLoadAllTask(request,completionListener);
  }
 catch (  Exception e) {
    if (completionListener != null) {
      completionListener.onException(e);
    }
    throw new CacheException(e);
  }
}",0.9689978370583994
46937,"@Override public Integer load(Integer key){
  return key != null && key < 100 ? key : null;
}","@Override public String load(Integer key){
  return valueOf(key);
}",0.675
46938,"@Override public void run() throws Exception {
  CacheManager cm1=cachingProvider1.getCacheManager();
  assertNotNull(cm1.getCache(cacheName,Integer.class,Integer.class));
  CacheManager cm2=cachingProvider2.getCacheManager();
  assertNotNull(cm2.getCache(cacheName,Integer.class,Integer.class));
}","@Override public void run() throws Exception {
  CacheManager cm1=serverProvider1.getCacheManager();
  assertNotNull(cm1.getCache(cacheName,Integer.class,Integer.class));
  CacheManager cm2=serverProvider2.getCacheManager();
  assertNotNull(cm2.getCache(cacheName,Integer.class,Integer.class));
}",0.9562289562289562
46939,"@Override public Map<Integer,Integer> loadAll(Iterable<? extends Integer> keys) throws CacheLoaderException {
  Map<Integer,Integer> result=new HashMap<Integer,Integer>();
  for (  Integer key : keys) {
    Integer value=load(key);
    if (value != null) {
      result.put(key,value);
    }
  }
  return result;
}","@Override public Map<Integer,String> loadAll(Iterable<? extends Integer> keys) throws CacheLoaderException {
  Map<Integer,String> result=new HashMap<Integer,String>();
  for (  Integer key : keys) {
    String value=load(key);
    result.put(key,value);
  }
  return result;
}",0.7445008460236887
46940,"private ContextBuilder newContextBuilder(final String cloudProvider,final String identity,final String credential,final String roleName){
  try {
    if (roleName != null && (identity != null || credential != null)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (roleName != null && !cloudProvider.equals(AWS_EC2)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + cloudProvider);
    }
    if (cloudProvider.equals(AWS_EC2) && roleName != null) {
      Supplier<Credentials> credentialsSupplier=new Supplier<Credentials>(){
        @Override public Credentials get(){
          return new IAMRoleCredentialSupplierBuilder().withRoleName(roleName).build();
        }
      }
;
      return ContextBuilder.newBuilder(cloudProvider).credentialsSupplier(credentialsSupplier);
    }
 else {
      checkNotNull(identity,""String_Node_Str"");
      checkNotNull(credential,""String_Node_Str"");
      return ContextBuilder.newBuilder(cloudProvider).credentials(identity,credential);
    }
  }
 catch (  NoSuchElementException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + cloudProvider + ""String_Node_Str"");
  }
}","public ContextBuilder newContextBuilder(final String cloudProvider,final String identity,final String credential,final String roleName){
  try {
    if (roleName != null && (identity != null || credential != null)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (roleName != null && !cloudProvider.equals(AWS_EC2)) {
      throw new InvalidConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + cloudProvider);
    }
    if (cloudProvider.equals(AWS_EC2) && roleName != null) {
      Supplier<Credentials> credentialsSupplier=new Supplier<Credentials>(){
        @Override public Credentials get(){
          return new IAMRoleCredentialSupplierBuilder().withRoleName(roleName).build();
        }
      }
;
      return ContextBuilder.newBuilder(cloudProvider).credentialsSupplier(credentialsSupplier);
    }
 else {
      checkNotNull(identity,""String_Node_Str"");
      checkNotNull(credential,""String_Node_Str"");
      return ContextBuilder.newBuilder(cloudProvider).credentials(identity,credential);
    }
  }
 catch (  NoSuchElementException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + cloudProvider + ""String_Node_Str"");
  }
}",0.9954862535904802
46941,"@Override public boolean apply(ComputeMetadata nodeMetadata){
  if (nodeMetadata == null) {
    return false;
  }
  for (  AbstractMap.SimpleImmutableEntry entry : tagPairs) {
    if (!nodeMetadata.getUserMetadata().get(entry.getKey()).equals(entry.getValue())) {
      return false;
    }
  }
  return true;
}","@Override public boolean apply(ComputeMetadata nodeMetadata){
  if (nodeMetadata == null) {
    return false;
  }
  if (tagPairs.size() > nodeMetadata.getUserMetadata().size()) {
    return false;
  }
  for (  AbstractMap.SimpleImmutableEntry entry : tagPairs) {
    String value=nodeMetadata.getUserMetadata().get(entry.getKey());
    if (value == null || !value.equals(entry.getValue())) {
      return false;
    }
  }
  return true;
}",0.6844919786096256
46942,"private Properties buildRegionZonesConfig(){
  final String regions=getOrNull(JCloudsProperties.REGIONS);
  final String zones=getOrNull(JCloudsProperties.ZONES);
  Properties jcloudsProperties=newOverrideProperties();
  if (regions != null) {
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_REGIONS,regions);
  }
  if (zones != null) {
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_ZONES,zones);
  }
  return jcloudsProperties;
}","public Properties buildRegionZonesConfig(){
  final String regions=getOrNull(JCloudsProperties.REGIONS);
  final String zones=getOrNull(JCloudsProperties.ZONES);
  Properties jcloudsProperties=newOverrideProperties();
  if (regions != null) {
    List<String> regionList=Arrays.asList(regions.split(""String_Node_Str""));
    for (    String region : regionList) {
      regionsSet.add(region);
    }
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_REGIONS,regions);
  }
  if (zones != null) {
    List<String> zoneList=Arrays.asList(zones.split(""String_Node_Str""));
    for (    String zone : zoneList) {
      zonesSet.add(zone);
    }
    jcloudsProperties.setProperty(LocationConstants.PROPERTY_ZONES,zones);
  }
  return jcloudsProperties;
}",0.7440329218106996
46943,"private String getCredentialFromFile(String provider,String credentialPath) throws IllegalArgumentException {
  try {
    String fileContents=Files.toString(new File(credentialPath),Charsets.UTF_8);
    if (provider.equals(GOOGLE_COMPUTE_ENGINE)) {
      Supplier<Credentials> credentialSupplier=new GoogleCredentialsFromJson(fileContents);
      return credentialSupplier.get().credential;
    }
    return fileContents;
  }
 catch (  IOException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + credentialPath,e);
  }
}","public String getCredentialFromFile(String provider,String credentialPath) throws IllegalArgumentException {
  try {
    String fileContents=Files.toString(new File(credentialPath),Charsets.UTF_8);
    if (provider.equals(GOOGLE_COMPUTE_ENGINE)) {
      Supplier<Credentials> credentialSupplier=new GoogleCredentialsFromJson(fileContents);
      return credentialSupplier.get().credential;
    }
    return fileContents;
  }
 catch (  IOException e) {
    throw new InvalidConfigurationException(""String_Node_Str"" + credentialPath,e);
  }
}",0.9898242368177612
46944,"private void buildNodeFilter(){
  nodesFilter=new Predicate<ComputeMetadata>(){
    @Override public boolean apply(    ComputeMetadata nodeMetadata){
      if (nodeMetadata == null) {
        return false;
      }
      for (      AbstractMap.SimpleImmutableEntry entry : tagPairs) {
        if (!nodeMetadata.getUserMetadata().get(entry.getKey()).equals(entry.getValue())) {
          return false;
        }
      }
      return true;
    }
  }
;
}","public Predicate<ComputeMetadata> buildNodeFilter(){
  nodesFilter=new Predicate<ComputeMetadata>(){
    @Override public boolean apply(    ComputeMetadata nodeMetadata){
      if (nodeMetadata == null) {
        return false;
      }
      if (tagPairs.size() > nodeMetadata.getUserMetadata().size()) {
        return false;
      }
      for (      AbstractMap.SimpleImmutableEntry entry : tagPairs) {
        String value=nodeMetadata.getUserMetadata().get(entry.getKey());
        if (value == null || !value.equals(entry.getValue())) {
          return false;
        }
      }
      return true;
    }
  }
;
  return nodesFilter;
}",0.702851885924563
46945,"private void buildTagConfig(){
  final String tagKeys=getOrNull(JCloudsProperties.TAG_KEYS);
  final String tagValues=getOrNull(JCloudsProperties.TAG_VALUES);
  if (tagKeys != null && tagValues != null) {
    List<String> keysList=Arrays.asList(tagKeys.split(""String_Node_Str""));
    List<String> valueList=Arrays.asList(tagValues.split(""String_Node_Str""));
    if (keysList.size() != valueList.size()) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    for (int i=0; i < keysList.size(); i++) {
      tagPairs.add(new AbstractMap.SimpleImmutableEntry(keysList.get(i),valueList.get(i)));
    }
  }
}","public void buildTagConfig(){
  final String tagKeys=getOrNull(JCloudsProperties.TAG_KEYS);
  final String tagValues=getOrNull(JCloudsProperties.TAG_VALUES);
  if (tagKeys != null && tagValues != null) {
    List<String> keysList=Arrays.asList(tagKeys.split(""String_Node_Str""));
    List<String> valueList=Arrays.asList(tagValues.split(""String_Node_Str""));
    if (keysList.size() != valueList.size()) {
      throw new InvalidConfigurationException(""String_Node_Str"");
    }
    for (int i=0; i < keysList.size(); i++) {
      tagPairs.add(new AbstractMap.SimpleImmutableEntry(keysList.get(i),valueList.get(i)));
    }
  }
}",0.991207034372502
46946,"/** 
 * Gets filtered nodes.
 * @return the filtered nodes
 */
public Iterable<? extends NodeMetadata> getFilteredNodes(){
  final String group=getOrNull(JCloudsProperties.GROUP);
  Set<? extends NodeMetadata> result=computeService.listNodesDetailsMatching(nodesFilter);
  Iterable<? extends NodeMetadata> filteredResult=new HashSet<NodeMetadata>();
  for (  NodeMetadata metadata : result) {
    if (group != null && !group.equals(metadata.getGroup())) {
      continue;
    }
    if (checkRegionZoneConfig(metadata)) {
      continue;
    }
    ((HashSet<NodeMetadata>)filteredResult).add(metadata);
  }
  return filteredResult;
}","/** 
 * Gets filtered nodes.
 * @return the filtered nodes
 */
public Iterable<? extends NodeMetadata> getFilteredNodes(){
  final String group=getOrNull(JCloudsProperties.GROUP);
  Set<? extends NodeMetadata> result=computeService.listNodesDetailsMatching(nodesFilter);
  Iterable<? extends NodeMetadata> filteredResult=new HashSet<NodeMetadata>();
  for (  NodeMetadata metadata : result) {
    if (group != null && !group.equals(metadata.getGroup())) {
      continue;
    }
    if (!isNodeInsideZones(metadata) || !isNodeInsideRegions(metadata)) {
      continue;
    }
    ((HashSet<NodeMetadata>)filteredResult).add(metadata);
  }
  return filteredResult;
}",0.9528957528957528
46947,"protected Map<String,String> getKeysFromIamRole(){
  try {
    String query=""String_Node_Str"" + roleName;
    URL url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    InputStreamReader is=new InputStreamReader(url.openStream(),""String_Node_Str"");
    BufferedReader reader=new BufferedReader(is);
    Map<String,String> map=parseIamRole(reader);
    return map;
  }
 catch (  IOException io) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
}","protected Map<String,String> getKeysFromIamRole(){
  try {
    URL url=new URL(""String_Node_Str"",IAM_ROLE_ENDPOINT,query);
    BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream(),""String_Node_Str""));
    return parseIamRole(reader);
  }
 catch (  IOException io) {
    throw new InvalidConfigurationException(""String_Node_Str"");
  }
}",0.5552884615384616
46948,"public IAMRoleCredentialSupplierBuilder withRoleName(String roleName){
  isNotNull(roleName,""String_Node_Str"");
  this.roleName=roleName;
  return this;
}","public IAMRoleCredentialSupplierBuilder withRoleName(String roleName){
  isNotNull(roleName,""String_Node_Str"");
  this.roleName=roleName;
  query=query + roleName;
  return this;
}",0.9221556886227544
46949,"@Override public Iterable<DiscoveryNode> discoverNodes(){
  List<DiscoveryNode> discoveryNodes=new ArrayList<DiscoveryNode>();
  try {
    Iterable<? extends NodeMetadata> nodes=computeServiceBuilder.getFilteredNodes();
    for (    NodeMetadata metadata : nodes) {
      if (metadata.getStatus() != NodeMetadata.Status.RUNNING) {
        continue;
      }
      discoveryNodes.add(buildDiscoveredNode(metadata));
    }
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
  return discoveryNodes;
}","@Override public Iterable<DiscoveryNode> discoverNodes(){
  List<DiscoveryNode> discoveryNodes=new ArrayList<DiscoveryNode>();
  try {
    Iterable<? extends NodeMetadata> nodes=computeServiceBuilder.getFilteredNodes();
    for (    NodeMetadata metadata : nodes) {
      if (metadata.getStatus() != NodeMetadata.Status.RUNNING) {
        continue;
      }
      discoveryNodes.add(buildDiscoveredNode(metadata));
    }
    if (discoveryNodes.isEmpty()) {
      LOGGER.warning(""String_Node_Str"");
    }
 else {
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      for (      DiscoveryNode node : discoveryNodes) {
        sb.append(""String_Node_Str"").append(node.getPublicAddress().toString()).append(""String_Node_Str"");
      }
      LOGGER.finest(sb.toString());
    }
  }
 catch (  Exception e) {
    throw new HazelcastException(""String_Node_Str"",e);
  }
  return discoveryNodes;
}",0.7452896022330775
46950,"@Override public void writeResponse(ManagementCenterService mcs,JsonObject out) throws Exception {
  String resultString=""String_Node_Str"";
  try {
    Cluster cluster=mcs.getHazelcastInstance().getCluster();
    cluster.changeClusterState(getClusterState(state));
  }
 catch (  Exception e) {
    ILogger logger=mcs.getHazelcastInstance().node.nodeEngine.getLogger(getClass());
    logger.warning(""String_Node_Str"",e);
    resultString=failure + e.getMessage();
  }
  JsonObject result=new JsonObject().add(""String_Node_Str"",resultString);
  out.add(""String_Node_Str"",result);
}","@Override public void writeResponse(ManagementCenterService mcs,JsonObject out) throws Exception {
  String resultString=""String_Node_Str"";
  try {
    Cluster cluster=mcs.getHazelcastInstance().getCluster();
    cluster.changeClusterState(getClusterState(state));
  }
 catch (  Exception e) {
    ILogger logger=mcs.getHazelcastInstance().node.nodeEngine.getLogger(getClass());
    logger.warning(""String_Node_Str"",e);
    resultString=FAILURE + e.getMessage();
  }
  JsonObject result=new JsonObject().add(""String_Node_Str"",resultString);
  out.add(""String_Node_Str"",result);
}",0.9879101899827288
46951,"protected EvictionPolicyEvaluator<Data,R> createEvictionPolicyEvaluator(EvictionConfig cacheEvictionConfig){
  final EvictionPolicy evictionPolicy=cacheEvictionConfig.getEvictionPolicy();
  if (evictionPolicy == null || evictionPolicy == EvictionPolicy.NONE) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return EvictionPolicyEvaluatorProvider.getEvictionPolicyEvaluator(cacheEvictionConfig);
}","protected EvictionPolicyEvaluator<Data,R> createEvictionPolicyEvaluator(EvictionConfig cacheEvictionConfig){
  final EvictionPolicy evictionPolicy=cacheEvictionConfig.getEvictionPolicy();
  if (evictionPolicy == null || evictionPolicy == EvictionPolicy.NONE || evictionPolicy == EvictionPolicy.RANDOM) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return EvictionPolicyEvaluatorProvider.getEvictionPolicyEvaluator(cacheEvictionConfig);
}",0.9507445589919816
46952,"@Override public Cache.Entry<K,V> next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  currentIndex=index;
  index++;
  final Data keyData=result.getKey(currentIndex);
  final K key=toObject(keyData);
  final V value=cache.get(key);
  return new CacheEntry<K,V>(key,value);
}","@Override public Cache.Entry<K,V> next(){
  while (hasNext()) {
    currentIndex=index;
    index++;
    final Data keyData=result.getKey(currentIndex);
    final K key=toObject(keyData);
    final V value=cache.get(key);
    if (value != null) {
      return new CacheEntry<K,V>(key,value);
    }
  }
  throw new NoSuchElementException();
}",0.7817896389324961
46953,"@Test @SuppressWarnings(""String_Node_Str"") public void testIteratorDuringInsertion_withoutEviction(){
  CacheConfig<Integer,Integer> config=getCacheConfigWithMaxSize(1000000);
  final ICache<Integer,Integer> cache=createCache(config);
  final int maxSize=getMaxCacheSizeWithoutEviction(config);
  int prefillSize=maxSize / 2;
  for (int i=0; i < prefillSize; i++) {
    cache.put(i,i);
  }
  AbstractCacheWorker worker=new AbstractCacheWorker(){
    @Override void doRun(    Random random){
      int i=random.nextInt(maxSize);
      cache.put(i,i);
    }
  }
;
  worker.awaitFirstIteration();
  try {
    int i=0;
    Iterator<Cache.Entry<Integer,Integer>> iterator=cache.iterator();
    while (iterator.hasNext()) {
      Cache.Entry<Integer,Integer> e=iterator.next();
      Integer key=e.getKey();
      Integer value=e.getValue();
      assertEquals(key,value);
      i++;
    }
    assertTrue(""String_Node_Str"" + prefillSize + ""String_Node_Str""+ i,i >= prefillSize);
    assertThatNoCacheEvictionHappened(cache);
  }
  finally {
    worker.shutdown();
  }
}","@Test public void testIteratorDuringInsertion_withoutEviction(){
  testIteratorDuringInsertion(true);
}",0.1526586620926243
46954,"@Test @SuppressWarnings(""String_Node_Str"") public void testIteratorDuringRemoval_withoutEviction(){
  CacheConfig<Integer,Integer> config=getCacheConfigWithMaxSize(1000000);
  final ICache<Integer,Integer> cache=createCache(config);
  final int maxSize=getMaxCacheSizeWithoutEviction(config);
  for (int i=0; i < maxSize; i++) {
    cache.put(i,i);
  }
  AbstractCacheWorker worker=new AbstractCacheWorker(){
    @Override void doRun(    Random random){
      int i=random.nextInt(maxSize);
      cache.remove(i);
    }
  }
;
  worker.awaitFirstIteration();
  try {
    int i=0;
    Iterator<Cache.Entry<Integer,Integer>> iterator=cache.iterator();
    while (iterator.hasNext()) {
      Cache.Entry<Integer,Integer> e=iterator.next();
      Integer key=e.getKey();
      Integer value=e.getValue();
      if (value != null) {
        assertEquals(key,value);
      }
      i++;
    }
    assertTrue(""String_Node_Str"" + maxSize + ""String_Node_Str""+ i,i <= maxSize);
    assertThatNoCacheEvictionHappened(cache);
  }
  finally {
    worker.shutdown();
  }
}","@Test public void testIteratorDuringRemoval_withoutEviction(){
  testIteratorDuringRemoval(true);
}",0.1593073593073593
46955,"@Test @SuppressWarnings(""String_Node_Str"") public void testIteratorDuringUpdate_withoutEviction(){
  CacheConfig<Integer,Integer> config=getCacheConfigWithMaxSize(1000000);
  final ICache<Integer,Integer> cache=createCache(config);
  final int maxSize=getMaxCacheSizeWithoutEviction(config);
  for (int i=0; i < maxSize; i++) {
    cache.put(i,i);
  }
  AbstractCacheWorker worker=new AbstractCacheWorker(){
    @Override void doRun(    Random random){
      int i=random.nextInt(maxSize);
      cache.put(i,-i);
    }
  }
;
  worker.awaitFirstIteration();
  try {
    int i=0;
    Iterator<Cache.Entry<Integer,Integer>> iterator=cache.iterator();
    while (iterator.hasNext()) {
      Cache.Entry<Integer,Integer> e=iterator.next();
      Integer key=e.getKey();
      Integer value=e.getValue();
      assertTrue(""String_Node_Str"" + key + ""String_Node_Str""+ value,key == Math.abs(value));
      i++;
    }
    assertEquals(""String_Node_Str"" + maxSize + ""String_Node_Str"",maxSize,i);
    assertThatNoCacheEvictionHappened(cache);
  }
  finally {
    worker.shutdown();
  }
}","@Test public void testIteratorDuringUpdate_withoutEviction(){
  testIteratorDuringUpdate(true);
}",0.155157715260017
46956,"protected <K,V>CacheConfig<K,V> getCacheConfigWithMaxSize(int maxCacheSize){
  CacheConfig<K,V> config=createCacheConfig();
  config.getEvictionConfig().setEvictionPolicy(EvictionPolicy.RANDOM);
  config.getEvictionConfig().setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.ENTRY_COUNT);
  config.getEvictionConfig().setSize(maxCacheSize);
  return config;
}","protected <K,V>CacheConfig<K,V> getCacheConfigWithMaxSize(int maxCacheSize){
  CacheConfig<K,V> config=createCacheConfig();
  config.getEvictionConfig().setMaximumSizePolicy(EvictionConfig.MaxSizePolicy.ENTRY_COUNT);
  config.getEvictionConfig().setSize(maxCacheSize);
  return config;
}",0.889922480620155
46957,"@Override protected HazelcastClientCacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties properties){
  final HazelcastInstance instance;
  if (uri == null || uri.equals(getDefaultURI())) {
    if (hazelcastInstance == null) {
      try {
        hazelcastInstance=instanceFromProperties(classLoader,properties,true);
      }
 catch (      Exception e) {
        throw ExceptionUtil.rethrow(e);
      }
    }
    instance=hazelcastInstance;
  }
 else {
    try {
      instance=instanceFromProperties(classLoader,properties,false);
      if (instance == null) {
        throw new IllegalArgumentException(INVALID_HZ_INSTANCE_SPECIFICATION_MESSAGE);
      }
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  return new HazelcastClientCacheManager(this,instance,uri,classLoader,properties);
}","@Override protected HazelcastClientCacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties properties){
  final boolean isDefaultURI=(uri == null || uri.equals(getDefaultURI()));
  final HazelcastInstance instance;
  try {
    instance=getOrCreateInstance(classLoader,properties,isDefaultURI);
    if (instance == null) {
      throw new IllegalArgumentException(INVALID_HZ_INSTANCE_SPECIFICATION_MESSAGE);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new HazelcastClientCacheManager(this,instance,uri,classLoader,properties);
}",0.5193370165745856
46958,"@Override protected HazelcastClientCacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties properties){
  final HazelcastInstance instance;
  if (uri == null || uri.equals(getDefaultURI())) {
    if (hazelcastInstance == null) {
      try {
        hazelcastInstance=instanceFromProperties(classLoader,properties,true);
      }
 catch (      Exception e) {
        throw ExceptionUtil.rethrow(e);
      }
    }
    instance=hazelcastInstance;
  }
 else {
    try {
      instance=instanceFromProperties(classLoader,properties,false);
      if (instance == null) {
        throw new IllegalArgumentException(INVALID_HZ_INSTANCE_SPECIFICATION_MESSAGE);
      }
    }
 catch (    Exception e) {
      throw ExceptionUtil.rethrow(e);
    }
  }
  return new HazelcastClientCacheManager(this,instance,uri,classLoader,properties);
}","@Override protected HazelcastClientCacheManager createHazelcastCacheManager(URI uri,ClassLoader classLoader,Properties properties){
  final boolean isDefaultURI=(uri == null || uri.equals(getDefaultURI()));
  final HazelcastInstance instance;
  try {
    instance=getOrCreateInstance(classLoader,properties,isDefaultURI);
    if (instance == null) {
      throw new IllegalArgumentException(INVALID_HZ_INSTANCE_SPECIFICATION_MESSAGE);
    }
  }
 catch (  Exception e) {
    throw ExceptionUtil.rethrow(e);
  }
  return new HazelcastClientCacheManager(this,instance,uri,classLoader,properties);
}",0.5193370165745856
46959,"protected void testJoin(Config config) throws Exception {
  config.setProperty(GroupProperty.WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  assertEquals(1,h1.getCluster().getMembers().size());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  h1.shutdown();
  h1=Hazelcast.newHazelcastInstance(config);
  assertClusterSize(2,h1);
  assertClusterSize(2,h2);
}","protected void testJoin(Config config) throws Exception {
  config.setProperty(GroupProperty.WAIT_SECONDS_BEFORE_JOIN,""String_Node_Str"");
  HazelcastInstance h1=Hazelcast.newHazelcastInstance(config);
  assertEquals(1,h1.getCluster().getMembers().size());
  HazelcastInstance h2=Hazelcast.newHazelcastInstance(config);
  assertEquals(2,h1.getCluster().getMembers().size());
  assertEquals(2,h2.getCluster().getMembers().size());
  h1.shutdown();
  h1=Hazelcast.newHazelcastInstance(config);
  assertClusterSize(2,h1);
  assertClusterSizeEventually(2,h2);
}",0.9909255898366606
46960,"public ClientReliableTopicConfig getReliableTopicConfig(String name){
  ClientReliableTopicConfig nearCacheConfig=lookupByPattern(reliableTopicConfigMap,name);
  if (nearCacheConfig == null) {
    nearCacheConfig=new ClientReliableTopicConfig(name);
    addReliableTopicConfig(nearCacheConfig);
  }
  return nearCacheConfig;
}","/** 
 * Gets the ClientReliableTopicConfig for a given reliable topic name.
 * @param name the name of the reliable topic
 * @return the found config. If none is found, a default configured one is returned.
 */
public ClientReliableTopicConfig getReliableTopicConfig(String name){
  ClientReliableTopicConfig nearCacheConfig=lookupByPattern(reliableTopicConfigMap,name);
  if (nearCacheConfig == null) {
    nearCacheConfig=new ClientReliableTopicConfig(name);
    addReliableTopicConfig(nearCacheConfig);
  }
  return nearCacheConfig;
}",0.7555040556199305
46961,"public ClientConfig addReliableTopicConfig(ClientReliableTopicConfig reliableTopicConfig){
  reliableTopicConfigMap.put(reliableTopicConfig.getName(),reliableTopicConfig);
  return this;
}","/** 
 * Adds a ClientReliableTopicConfig.
 * @param reliableTopicConfig the ClientReliableTopicConfig to add
 * @return configured {@link com.hazelcast.client.config.ClientConfig} for chaining
 */
public ClientConfig addReliableTopicConfig(ClientReliableTopicConfig reliableTopicConfig){
  reliableTopicConfigMap.put(reliableTopicConfig.getName(),reliableTopicConfig);
  return this;
}",0.6561954624781849
46962,"public ClientConfig addQueryCacheConfig(String mapName,QueryCacheConfig queryCacheConfig){
  Map<String,Map<String,QueryCacheConfig>> queryCacheConfigsPerMap=getQueryCacheConfigs();
  String cacheName=queryCacheConfig.getName();
  Map<String,QueryCacheConfig> queryCacheConfigs=queryCacheConfigsPerMap.get(mapName);
  if (queryCacheConfigs != null) {
    checkFalse(queryCacheConfigs.containsKey(cacheName),""String_Node_Str"" + cacheName + ']');
  }
 else {
    queryCacheConfigs=new HashMap<String,QueryCacheConfig>();
    queryCacheConfigsPerMap.put(mapName,queryCacheConfigs);
  }
  queryCacheConfigs.put(cacheName,queryCacheConfig);
  return this;
}","public ClientConfig addQueryCacheConfig(String mapName,QueryCacheConfig queryCacheConfig){
  Map<String,Map<String,QueryCacheConfig>> queryCacheConfigsPerMap=getQueryCacheConfigs();
  String queryCacheName=queryCacheConfig.getName();
  Map<String,QueryCacheConfig> queryCacheConfigs=queryCacheConfigsPerMap.get(mapName);
  if (queryCacheConfigs != null) {
    checkFalse(queryCacheConfigs.containsKey(queryCacheName),""String_Node_Str"" + queryCacheName + ']');
  }
 else {
    queryCacheConfigs=new ConcurrentHashMap<String,QueryCacheConfig>();
    queryCacheConfigsPerMap.put(mapName,queryCacheConfigs);
  }
  queryCacheConfigs.put(queryCacheName,queryCacheConfig);
  return this;
}",0.9715142428785608
46963,"public Map<String,Map<String,QueryCacheConfig>> getQueryCacheConfigs(){
  if (queryCacheConfigsPerMap == null) {
    queryCacheConfigsPerMap=new HashMap<String,Map<String,QueryCacheConfig>>();
  }
  return queryCacheConfigsPerMap;
}","public Map<String,Map<String,QueryCacheConfig>> getQueryCacheConfigs(){
  if (queryCacheConfigs == null) {
    queryCacheConfigs=new ConcurrentHashMap<String,Map<String,QueryCacheConfig>>();
  }
  return queryCacheConfigs;
}",0.9385964912280702
46964,"protected boolean tryEvict(Data key,Record record,RecordStore recordStore,boolean backup,long now){
  String mapName=recordStore.getName();
  Object value=record.getValue();
  if (recordStore.isLocked(key)) {
    return false;
  }
  recordStore.evict(key,backup);
  if (!backup) {
    boolean expired=recordStore.isExpired(record,now,false);
    recordStore.doPostEvictionOperations(key,value,expired);
  }
  return true;
}","protected boolean tryEvict(Data key,Record record,RecordStore recordStore,boolean backup,long now){
  Object value=record.getValue();
  if (recordStore.isLocked(key)) {
    return false;
  }
  recordStore.evict(key,backup);
  if (!backup) {
    boolean expired=recordStore.isExpired(record,now,false);
    recordStore.doPostEvictionOperations(key,value,expired);
  }
  return true;
}",0.9503722084367244
46965,"MapServiceContextImpl(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.partitionContainers=createPartitionContainers();
  this.mapContainers=new ConcurrentHashMap<String,MapContainer>();
  this.ownedPartitions=new AtomicReference<Collection<Integer>>();
  this.expirationManager=new ExpirationManager(this,nodeEngine);
  this.evictor=createEvictor();
  this.nearCacheProvider=createNearCacheProvider();
  this.localMapStatsProvider=createLocalMapStatsProvider();
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.mapEventPublisher=createMapEventPublisherSupport();
  this.mapQueryEngine=createMapQueryEngine();
  this.eventService=nodeEngine.getEventService();
  this.operationProvider=new DefaultMapOperationProvider();
}","MapServiceContextImpl(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.partitionContainers=createPartitionContainers();
  this.mapContainers=new ConcurrentHashMap<String,MapContainer>();
  this.ownedPartitions=new AtomicReference<Collection<Integer>>();
  this.expirationManager=new ExpirationManager(this,nodeEngine);
  this.nearCacheProvider=createNearCacheProvider();
  this.localMapStatsProvider=createLocalMapStatsProvider();
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.mapEventPublisher=createMapEventPublisherSupport();
  this.mapQueryEngine=createMapQueryEngine();
  this.eventService=nodeEngine.getEventService();
  this.operationProvider=new DefaultMapOperationProvider();
}",0.9783491204330176
46966,"@Override public Object remove(Data key){
  R record=records.remove(key);
  updateSizeEstimator(-calculateHeapCost(record));
  updateSizeEstimator(-calculateHeapCost(key));
  Object oldValue=record.getValue();
  if (record != null) {
    record.invalidate();
  }
  return oldValue;
}","@Override public Object remove(Data key){
  R record=records.remove(key);
  if (record == null) {
    return null;
  }
  updateSizeEstimator(-calculateHeapCost(record));
  updateSizeEstimator(-calculateHeapCost(key));
  Object oldValue=record.getValue();
  record.invalidate();
  return oldValue;
}",0.8123924268502581
46967,"private void sleep(){
  try {
    Thread.sleep(DELAY_MILLIS);
  }
 catch (  InterruptedException ignore) {
    EmptyStatement.ignore(ignore);
  }
}","private void sleep(){
  try {
    Thread.sleep(SCAN_DELAY_MILLIS);
  }
 catch (  InterruptedException ignore) {
    EmptyStatement.ignore(ignore);
  }
}",0.9832775919732442
46968,"public InvocationMonitor(InvocationRegistry invocationRegistry,ILogger logger,GroupProperties props,HazelcastThreadGroup hzThreadGroup,ExecutionService executionService,MetricsRegistry metricsRegistry){
  this.invocationRegistry=invocationRegistry;
  this.logger=logger;
  this.monitorThread=new MonitorThread(hzThreadGroup);
  this.executionService=executionService;
  monitorThread.start();
  this.backupTimeoutMillis=props.getMillis(GroupProperty.OPERATION_BACKUP_TIMEOUT_MILLIS);
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  metricsRegistry.scanAndRegister(this,""String_Node_Str"");
}","public InvocationMonitor(InvocationRegistry invocationRegistry,ILogger logger,GroupProperties props,HazelcastThreadGroup hzThreadGroup,ExecutionService executionService,MetricsRegistry metricsRegistry){
  this.invocationRegistry=invocationRegistry;
  this.logger=logger;
  this.executionService=executionService;
  this.backupTimeoutMillis=props.getMillis(GroupProperty.OPERATION_BACKUP_TIMEOUT_MILLIS);
  this.slowInvocationThresholdMs=initSlowInvocationThresholdMs(props);
  this.monitorThread=new MonitorThread(hzThreadGroup);
  metricsRegistry.scanAndRegister(this,""String_Node_Str"");
  monitorThread.start();
}",0.8439024390243902
46969,"@Override public void run() throws Exception {
  if (!valid) {
    return;
  }
  NodeEngine nodeEngine=getNodeEngine();
  if (backupOp == null && backupOpData != null) {
    backupOp=nodeEngine.getSerializationService().toObject(backupOpData);
  }
  if (backupOp != null) {
    backupOp.setPartitionId(getPartitionId()).setReplicaIndex(getReplicaIndex());
    backupOp.setNodeEngine(nodeEngine);
    backupOp.setCallerUuid(getCallerUuid());
    OperationAccessor.setCallerAddress(backupOp,getCallerAddress());
    OperationAccessor.setInvocationTime(backupOp,Clock.currentTimeMillis());
    backupOp.setOperationResponseHandler(createEmptyResponseHandler());
    backupOp.beforeRun();
    backupOp.run();
    backupOp.afterRun();
  }
  InternalPartitionService partitionService=nodeEngine.getPartitionService();
  partitionService.updatePartitionReplicaVersions(getPartitionId(),replicaVersions,getReplicaIndex());
}","@Override public void run() throws Exception {
  if (!valid) {
    onExecutionFailure(new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""));
    return;
  }
  NodeEngine nodeEngine=getNodeEngine();
  if (backupOp == null && backupOpData != null) {
    backupOp=nodeEngine.getSerializationService().toObject(backupOpData);
  }
  if (backupOp != null) {
    ensureBackupOperationInitialized();
    backupOp.beforeRun();
    backupOp.run();
    backupOp.afterRun();
  }
  InternalPartitionService partitionService=nodeEngine.getPartitionService();
  partitionService.updatePartitionReplicaVersions(getPartitionId(),replicaVersions,getReplicaIndex());
}",0.6842767295597484
46970,"@Override public void logError(Throwable e){
  if (backupOp != null) {
    if (backupOp.getNodeEngine() == null) {
      backupOp.setNodeEngine(getNodeEngine());
    }
    backupOp.logError(e);
  }
 else {
    ReplicaErrorLogger.log(e,getLogger());
  }
}","@Override public void logError(Throwable e){
  if (backupOp != null) {
    ensureBackupOperationInitialized();
    backupOp.logError(e);
  }
 else {
    ReplicaErrorLogger.log(e,getLogger());
  }
}",0.7804878048780488
46971,"@Override public void onExecutionFailure(Throwable e){
  if (backupOp != null) {
    try {
      if (backupOp.getNodeEngine() == null) {
        backupOp.setNodeEngine(getNodeEngine());
      }
      backupOp.onExecutionFailure(e);
    }
 catch (    Throwable t) {
      getLogger().warning(""String_Node_Str"" + backupOp,t);
    }
  }
}","@Override public void onExecutionFailure(Throwable e){
  if (backupOp != null) {
    try {
      ensureBackupOperationInitialized();
      backupOp.onExecutionFailure(e);
    }
 catch (    Throwable t) {
      getLogger().warning(""String_Node_Str"" + backupOp,t);
    }
  }
}",0.7947454844006568
46972,"public ReplicatedMapService(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.config=nodeEngine.getConfig();
  this.partitionService=(InternalPartitionServiceImpl)nodeEngine.getPartitionService();
  this.clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
  this.operationService=nodeEngine.getOperationService();
  this.partitionContainers=new PartitionContainer[nodeEngine.getPartitionService().getPartitionCount()];
  this.eventPublishingService=new ReplicatedMapEventPublishingService(this);
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.replicatedMapSplitBrainHandlerService=new ReplicatedMapSplitBrainHandlerService(this,mergePolicyProvider,partitionContainers);
}","public ReplicatedMapService(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.config=nodeEngine.getConfig();
  this.partitionService=(InternalPartitionServiceImpl)nodeEngine.getPartitionService();
  this.clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
  this.operationService=nodeEngine.getOperationService();
  this.partitionContainers=new PartitionContainer[nodeEngine.getPartitionService().getPartitionCount()];
  this.eventPublishingService=new ReplicatedMapEventPublishingService(this);
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.replicatedMapSplitBrainHandlerService=new ReplicatedMapSplitBrainHandlerService(this,mergePolicyProvider);
}",0.9859353023909986
46973,"@Override public void run(){
  if (clusterService.getSize() == 1) {
    return;
  }
  Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
  addresses.remove(nodeEngine.getThisAddress());
  for (int i=0; i < partitionContainers.length; i++) {
    Address thisAddress=nodeEngine.getThisAddress();
    InternalPartition partition=partitionService.getPartition(i,false);
    Address ownerAddress=partition.getOwnerOrNull();
    if (!thisAddress.equals(ownerAddress)) {
      continue;
    }
    PartitionContainer partitionContainer=partitionContainers[i];
    for (    Address address : addresses) {
      CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
      checkReplicaVersion.setPartitionId(i);
      checkReplicaVersion.setValidateTarget(false);
      operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
    }
  }
}","@Override public void run(){
  if (clusterService.getSize() == 1) {
    return;
  }
  Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
  addresses.remove(nodeEngine.getThisAddress());
  for (int i=0; i < partitionContainers.length; i++) {
    Address thisAddress=nodeEngine.getThisAddress();
    InternalPartition partition=partitionService.getPartition(i,false);
    Address ownerAddress=partition.getOwnerOrNull();
    if (!thisAddress.equals(ownerAddress)) {
      continue;
    }
    PartitionContainer partitionContainer=partitionContainers[i];
    if (partitionContainer.isEmpty()) {
      continue;
    }
    for (    Address address : addresses) {
      CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
      checkReplicaVersion.setPartitionId(i);
      checkReplicaVersion.setValidateTarget(false);
      operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
    }
  }
}",0.967436974789916
46974,"@Override public void init(final NodeEngine nodeEngine,Properties properties){
  if (config.isLiteMember()) {
    return;
  }
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    partitionContainers[i]=new PartitionContainer(this,i);
  }
  nodeEngine.getExecutionService().getDefaultScheduledExecutor().scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      if (clusterService.getSize() == 1) {
        return;
      }
      Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
      addresses.remove(nodeEngine.getThisAddress());
      for (int i=0; i < partitionContainers.length; i++) {
        Address thisAddress=nodeEngine.getThisAddress();
        InternalPartition partition=partitionService.getPartition(i,false);
        Address ownerAddress=partition.getOwnerOrNull();
        if (!thisAddress.equals(ownerAddress)) {
          continue;
        }
        PartitionContainer partitionContainer=partitionContainers[i];
        for (        Address address : addresses) {
          CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
          checkReplicaVersion.setPartitionId(i);
          checkReplicaVersion.setValidateTarget(false);
          operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
        }
      }
    }
  }
,0,SYNC_INTERVAL_SECONDS,TimeUnit.SECONDS);
}","@Override public void init(final NodeEngine nodeEngine,Properties properties){
  if (config.isLiteMember()) {
    return;
  }
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    partitionContainers[i]=new PartitionContainer(this,i);
  }
  nodeEngine.getExecutionService().getDefaultScheduledExecutor().scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      if (clusterService.getSize() == 1) {
        return;
      }
      Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
      addresses.remove(nodeEngine.getThisAddress());
      for (int i=0; i < partitionContainers.length; i++) {
        Address thisAddress=nodeEngine.getThisAddress();
        InternalPartition partition=partitionService.getPartition(i,false);
        Address ownerAddress=partition.getOwnerOrNull();
        if (!thisAddress.equals(ownerAddress)) {
          continue;
        }
        PartitionContainer partitionContainer=partitionContainers[i];
        if (partitionContainer.isEmpty()) {
          continue;
        }
        for (        Address address : addresses) {
          CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
          checkReplicaVersion.setPartitionId(i);
          checkReplicaVersion.setValidateTarget(false);
          operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
        }
      }
    }
  }
,0,SYNC_INTERVAL_SECONDS,TimeUnit.SECONDS);
}",0.974898236092266
46975,"public ReplicatedMapSplitBrainHandlerService(ReplicatedMapService replicatedMapService,MergePolicyProvider mergePolicyProvider,PartitionContainer[] partitionContainers){
  this.replicatedMapService=replicatedMapService;
  this.mergePolicyProvider=mergePolicyProvider;
  this.partitionContainers=partitionContainers;
  this.nodeEngine=replicatedMapService.getNodeEngine();
  this.serializationService=nodeEngine.getSerializationService();
}","public ReplicatedMapSplitBrainHandlerService(ReplicatedMapService service,MergePolicyProvider mergePolicyProvider){
  this.service=service;
  this.mergePolicyProvider=mergePolicyProvider;
  this.nodeEngine=service.getNodeEngine();
  this.serializationService=nodeEngine.getSerializationService();
}",0.7788331071913162
46976,"@Override public Runnable prepareMergeRunnable(){
  HashMap<String,Collection<ReplicatedRecord>> recordMap=new HashMap<String,Collection<ReplicatedRecord>>();
  Address thisAddress=replicatedMapService.getNodeEngine().getThisAddress();
  List<Integer> partitions=nodeEngine.getPartitionService().getMemberPartitions(thisAddress);
  for (  Integer partition : partitions) {
    PartitionContainer partitionContainer=partitionContainers[partition];
    ConcurrentMap<String,ReplicatedRecordStore> stores=partitionContainer.getStores();
    for (    ReplicatedRecordStore store : stores.values()) {
      String name=store.getName();
      Collection<ReplicatedRecord> records=recordMap.get(name);
      if (records == null) {
        records=new ArrayList<ReplicatedRecord>();
      }
      Iterator<ReplicatedRecord> iterator=store.recordIterator();
      while (iterator.hasNext()) {
        ReplicatedRecord record=iterator.next();
        records.add(record);
      }
      recordMap.put(name,records);
      store.reset();
    }
  }
  return new Merger(recordMap);
}","@Override public Runnable prepareMergeRunnable(){
  HashMap<String,Collection<ReplicatedRecord>> recordMap=new HashMap<String,Collection<ReplicatedRecord>>();
  Address thisAddress=service.getNodeEngine().getThisAddress();
  List<Integer> partitions=nodeEngine.getPartitionService().getMemberPartitions(thisAddress);
  for (  Integer partition : partitions) {
    PartitionContainer partitionContainer=service.getPartitionContainer(partition);
    ConcurrentMap<String,ReplicatedRecordStore> stores=partitionContainer.getStores();
    for (    ReplicatedRecordStore store : stores.values()) {
      String name=store.getName();
      Collection<ReplicatedRecord> records=recordMap.get(name);
      if (records == null) {
        records=new ArrayList<ReplicatedRecord>();
      }
      Iterator<ReplicatedRecord> iterator=store.recordIterator();
      while (iterator.hasNext()) {
        ReplicatedRecord record=iterator.next();
        records.add(record);
      }
      recordMap.put(name,records);
      store.reset();
    }
  }
  return new Merger(recordMap);
}",0.976112412177986
46977,"@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(ReplicatedMapService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<String,Collection<ReplicatedRecord>> entry : recordMap.entrySet()) {
    recordCount++;
    String name=entry.getKey();
    Collection<ReplicatedRecord> records=entry.getValue();
    ReplicatedMapConfig replicatedMapConfig=replicatedMapService.getReplicatedMapConfig(name);
    String mergePolicy=replicatedMapConfig.getMergePolicy();
    ReplicatedMapMergePolicy policy=mergePolicyProvider.getMergePolicy(mergePolicy);
    for (    ReplicatedRecord record : records) {
      ReplicatedMapEntryView entryView=createEntryView(record);
      MergeOperation mergeOperation=new MergeOperation(name,record.getKeyInternal(),entryView,policy);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKeyInternal());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,mergeOperation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}","@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(ReplicatedMapService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<String,Collection<ReplicatedRecord>> entry : recordMap.entrySet()) {
    recordCount++;
    String name=entry.getKey();
    Collection<ReplicatedRecord> records=entry.getValue();
    ReplicatedMapConfig replicatedMapConfig=service.getReplicatedMapConfig(name);
    String mergePolicy=replicatedMapConfig.getMergePolicy();
    ReplicatedMapMergePolicy policy=mergePolicyProvider.getMergePolicy(mergePolicy);
    for (    ReplicatedRecord record : records) {
      ReplicatedMapEntryView entryView=createEntryView(record);
      MergeOperation mergeOperation=new MergeOperation(name,record.getKeyInternal(),entryView,policy);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKeyInternal());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,mergeOperation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}",0.9954941423851006
46978,"@Override public void run() throws Exception {
  ReplicatedMapService service=getService();
  ReplicatedRecordStore store=service.getReplicatedRecordStore(name,true,key);
  merge=store.merge(key,entryView,policy);
}","@Override public void run() throws Exception {
  ReplicatedMapService service=getService();
  ReplicatedRecordStore store=service.getReplicatedRecordStore(name,true,key);
  store.merge(key,entryView,policy);
}",0.9858490566037736
46979,"@Override public ReplicatedRecord<K,V> next(){
  Map.Entry<K,ReplicatedRecord<K,V>> entry=this.entry;
  Object key=entry != null ? entry.getKey() : null;
  Object value=entry != null && entry.getValue() != null ? entry.getValue().getValue() : null;
  ReplicatedRecord<K,V> record=entry.getValue();
  while (entry == null) {
    entry=findNextEntry();
    key=entry.getKey();
    record=entry.getValue();
    value=record != null ? record.getValue() : null;
    if (key != null && value != null) {
      break;
    }
  }
  this.entry=null;
  if (key == null || value == null) {
    throw new NoSuchElementException();
  }
  return record;
}","@Override public ReplicatedRecord<K,V> next(){
  Map.Entry<K,ReplicatedRecord<K,V>> entry=this.entry;
  ReplicatedRecord<K,V> record=entry != null ? entry.getValue() : null;
  while (entry == null) {
    entry=findNextEntry();
    Object key=entry.getKey();
    record=entry.getValue();
    Object value=record != null ? record.getValue() : null;
    if (key != null && value != null) {
      break;
    }
  }
  this.entry=null;
  return record;
}",0.3093922651933701
46980,"public ReplicatedMapService(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.config=nodeEngine.getConfig();
  this.partitionService=(InternalPartitionServiceImpl)nodeEngine.getPartitionService();
  this.clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
  this.operationService=nodeEngine.getOperationService();
  this.partitionContainers=new PartitionContainer[nodeEngine.getPartitionService().getPartitionCount()];
  this.eventPublishingService=new ReplicatedMapEventPublishingService(this);
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.replicatedMapSplitBrainHandlerService=new ReplicatedMapSplitBrainHandlerService(this,mergePolicyProvider,partitionContainers);
}","public ReplicatedMapService(NodeEngine nodeEngine){
  this.nodeEngine=nodeEngine;
  this.config=nodeEngine.getConfig();
  this.partitionService=(InternalPartitionServiceImpl)nodeEngine.getPartitionService();
  this.clusterService=(ClusterServiceImpl)nodeEngine.getClusterService();
  this.operationService=nodeEngine.getOperationService();
  this.partitionContainers=new PartitionContainer[nodeEngine.getPartitionService().getPartitionCount()];
  this.eventPublishingService=new ReplicatedMapEventPublishingService(this);
  this.mergePolicyProvider=new MergePolicyProvider(nodeEngine);
  this.replicatedMapSplitBrainHandlerService=new ReplicatedMapSplitBrainHandlerService(this,mergePolicyProvider);
}",0.9859353023909986
46981,"@Override public void run(){
  if (clusterService.getSize() == 1) {
    return;
  }
  Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
  addresses.remove(nodeEngine.getThisAddress());
  for (int i=0; i < partitionContainers.length; i++) {
    Address thisAddress=nodeEngine.getThisAddress();
    InternalPartition partition=partitionService.getPartition(i,false);
    Address ownerAddress=partition.getOwnerOrNull();
    if (!thisAddress.equals(ownerAddress)) {
      continue;
    }
    PartitionContainer partitionContainer=partitionContainers[i];
    for (    Address address : addresses) {
      CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
      checkReplicaVersion.setPartitionId(i);
      checkReplicaVersion.setValidateTarget(false);
      operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
    }
  }
}","@Override public void run(){
  if (clusterService.getSize() == 1) {
    return;
  }
  Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
  addresses.remove(nodeEngine.getThisAddress());
  for (int i=0; i < partitionContainers.length; i++) {
    Address thisAddress=nodeEngine.getThisAddress();
    InternalPartition partition=partitionService.getPartition(i,false);
    Address ownerAddress=partition.getOwnerOrNull();
    if (!thisAddress.equals(ownerAddress)) {
      continue;
    }
    PartitionContainer partitionContainer=partitionContainers[i];
    if (partitionContainer.isEmpty()) {
      continue;
    }
    for (    Address address : addresses) {
      CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
      checkReplicaVersion.setPartitionId(i);
      checkReplicaVersion.setValidateTarget(false);
      operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
    }
  }
}",0.967436974789916
46982,"@Override public void init(final NodeEngine nodeEngine,Properties properties){
  if (config.isLiteMember()) {
    return;
  }
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    partitionContainers[i]=new PartitionContainer(this,i);
  }
  nodeEngine.getExecutionService().getDefaultScheduledExecutor().scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      if (clusterService.getSize() == 1) {
        return;
      }
      Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
      addresses.remove(nodeEngine.getThisAddress());
      for (int i=0; i < partitionContainers.length; i++) {
        Address thisAddress=nodeEngine.getThisAddress();
        InternalPartition partition=partitionService.getPartition(i,false);
        Address ownerAddress=partition.getOwnerOrNull();
        if (!thisAddress.equals(ownerAddress)) {
          continue;
        }
        PartitionContainer partitionContainer=partitionContainers[i];
        for (        Address address : addresses) {
          CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
          checkReplicaVersion.setPartitionId(i);
          checkReplicaVersion.setValidateTarget(false);
          operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
        }
      }
    }
  }
,0,SYNC_INTERVAL_SECONDS,TimeUnit.SECONDS);
}","@Override public void init(final NodeEngine nodeEngine,Properties properties){
  if (config.isLiteMember()) {
    return;
  }
  for (int i=0; i < nodeEngine.getPartitionService().getPartitionCount(); i++) {
    partitionContainers[i]=new PartitionContainer(this,i);
  }
  nodeEngine.getExecutionService().getDefaultScheduledExecutor().scheduleWithFixedDelay(new Runnable(){
    @Override public void run(){
      if (clusterService.getSize() == 1) {
        return;
      }
      Collection<Address> addresses=new ArrayList<Address>(getMemberAddresses(DATA_MEMBER_SELECTOR));
      addresses.remove(nodeEngine.getThisAddress());
      for (int i=0; i < partitionContainers.length; i++) {
        Address thisAddress=nodeEngine.getThisAddress();
        InternalPartition partition=partitionService.getPartition(i,false);
        Address ownerAddress=partition.getOwnerOrNull();
        if (!thisAddress.equals(ownerAddress)) {
          continue;
        }
        PartitionContainer partitionContainer=partitionContainers[i];
        if (partitionContainer.isEmpty()) {
          continue;
        }
        for (        Address address : addresses) {
          CheckReplicaVersion checkReplicaVersion=new CheckReplicaVersion(partitionContainer);
          checkReplicaVersion.setPartitionId(i);
          checkReplicaVersion.setValidateTarget(false);
          operationService.invokeOnTarget(SERVICE_NAME,checkReplicaVersion,address);
        }
      }
    }
  }
,0,SYNC_INTERVAL_SECONDS,TimeUnit.SECONDS);
}",0.974898236092266
46983,"public ReplicatedMapSplitBrainHandlerService(ReplicatedMapService replicatedMapService,MergePolicyProvider mergePolicyProvider,PartitionContainer[] partitionContainers){
  this.replicatedMapService=replicatedMapService;
  this.mergePolicyProvider=mergePolicyProvider;
  this.partitionContainers=partitionContainers;
  this.nodeEngine=replicatedMapService.getNodeEngine();
  this.serializationService=nodeEngine.getSerializationService();
}","public ReplicatedMapSplitBrainHandlerService(ReplicatedMapService service,MergePolicyProvider mergePolicyProvider){
  this.service=service;
  this.mergePolicyProvider=mergePolicyProvider;
  this.nodeEngine=service.getNodeEngine();
  this.serializationService=nodeEngine.getSerializationService();
}",0.7788331071913162
46984,"@Override public Runnable prepareMergeRunnable(){
  HashMap<String,Collection<ReplicatedRecord>> recordMap=new HashMap<String,Collection<ReplicatedRecord>>();
  Address thisAddress=replicatedMapService.getNodeEngine().getThisAddress();
  List<Integer> partitions=nodeEngine.getPartitionService().getMemberPartitions(thisAddress);
  for (  Integer partition : partitions) {
    PartitionContainer partitionContainer=partitionContainers[partition];
    ConcurrentMap<String,ReplicatedRecordStore> stores=partitionContainer.getStores();
    for (    ReplicatedRecordStore store : stores.values()) {
      String name=store.getName();
      Collection<ReplicatedRecord> records=recordMap.get(name);
      if (records == null) {
        records=new ArrayList<ReplicatedRecord>();
      }
      Iterator<ReplicatedRecord> iterator=store.recordIterator();
      while (iterator.hasNext()) {
        ReplicatedRecord record=iterator.next();
        records.add(record);
      }
      recordMap.put(name,records);
      store.reset();
    }
  }
  return new Merger(recordMap);
}","@Override public Runnable prepareMergeRunnable(){
  HashMap<String,Collection<ReplicatedRecord>> recordMap=new HashMap<String,Collection<ReplicatedRecord>>();
  Address thisAddress=service.getNodeEngine().getThisAddress();
  List<Integer> partitions=nodeEngine.getPartitionService().getMemberPartitions(thisAddress);
  for (  Integer partition : partitions) {
    PartitionContainer partitionContainer=service.getPartitionContainer(partition);
    ConcurrentMap<String,ReplicatedRecordStore> stores=partitionContainer.getStores();
    for (    ReplicatedRecordStore store : stores.values()) {
      String name=store.getName();
      Collection<ReplicatedRecord> records=recordMap.get(name);
      if (records == null) {
        records=new ArrayList<ReplicatedRecord>();
      }
      Iterator<ReplicatedRecord> iterator=store.recordIterator();
      while (iterator.hasNext()) {
        ReplicatedRecord record=iterator.next();
        records.add(record);
      }
      recordMap.put(name,records);
      store.reset();
    }
  }
  return new Merger(recordMap);
}",0.976112412177986
46985,"@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(ReplicatedMapService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<String,Collection<ReplicatedRecord>> entry : recordMap.entrySet()) {
    recordCount++;
    String name=entry.getKey();
    Collection<ReplicatedRecord> records=entry.getValue();
    ReplicatedMapConfig replicatedMapConfig=replicatedMapService.getReplicatedMapConfig(name);
    String mergePolicy=replicatedMapConfig.getMergePolicy();
    ReplicatedMapMergePolicy policy=mergePolicyProvider.getMergePolicy(mergePolicy);
    for (    ReplicatedRecord record : records) {
      ReplicatedMapEntryView entryView=createEntryView(record);
      MergeOperation mergeOperation=new MergeOperation(name,record.getKeyInternal(),entryView,policy);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKeyInternal());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,mergeOperation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}","@Override public void run(){
  final Semaphore semaphore=new Semaphore(0);
  int recordCount=0;
  final ILogger logger=nodeEngine.getLogger(ReplicatedMapService.class);
  ExecutionCallback mergeCallback=new ExecutionCallback(){
    @Override public void onResponse(    Object response){
      semaphore.release(1);
    }
    @Override public void onFailure(    Throwable t){
      logger.warning(""String_Node_Str"" + t.getMessage());
      semaphore.release(1);
    }
  }
;
  for (  Map.Entry<String,Collection<ReplicatedRecord>> entry : recordMap.entrySet()) {
    recordCount++;
    String name=entry.getKey();
    Collection<ReplicatedRecord> records=entry.getValue();
    ReplicatedMapConfig replicatedMapConfig=service.getReplicatedMapConfig(name);
    String mergePolicy=replicatedMapConfig.getMergePolicy();
    ReplicatedMapMergePolicy policy=mergePolicyProvider.getMergePolicy(mergePolicy);
    for (    ReplicatedRecord record : records) {
      ReplicatedMapEntryView entryView=createEntryView(record);
      MergeOperation mergeOperation=new MergeOperation(name,record.getKeyInternal(),entryView,policy);
      try {
        int partitionId=nodeEngine.getPartitionService().getPartitionId(record.getKeyInternal());
        ICompletableFuture f=nodeEngine.getOperationService().invokeOnPartition(SERVICE_NAME,mergeOperation,partitionId);
        f.andThen(mergeCallback);
      }
 catch (      Throwable t) {
        throw ExceptionUtil.rethrow(t);
      }
    }
  }
  try {
    semaphore.tryAcquire(recordCount,recordCount * TIMEOUT_FACTOR,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    logger.finest(""String_Node_Str"");
  }
}",0.9954941423851006
46986,"@Override public void run() throws Exception {
  ReplicatedMapService service=getService();
  ReplicatedRecordStore store=service.getReplicatedRecordStore(name,true,key);
  merge=store.merge(key,entryView,policy);
}","@Override public void run() throws Exception {
  ReplicatedMapService service=getService();
  ReplicatedRecordStore store=service.getReplicatedRecordStore(name,true,key);
  store.merge(key,entryView,policy);
}",0.9858490566037736
46987,"@Override public ReplicatedRecord<K,V> next(){
  Map.Entry<K,ReplicatedRecord<K,V>> entry=this.entry;
  Object key=entry != null ? entry.getKey() : null;
  Object value=entry != null && entry.getValue() != null ? entry.getValue().getValue() : null;
  ReplicatedRecord<K,V> record=entry.getValue();
  while (entry == null) {
    entry=findNextEntry();
    key=entry.getKey();
    record=entry.getValue();
    value=record != null ? record.getValue() : null;
    if (key != null && value != null) {
      break;
    }
  }
  this.entry=null;
  if (key == null || value == null) {
    throw new NoSuchElementException();
  }
  return record;
}","@Override public ReplicatedRecord<K,V> next(){
  Map.Entry<K,ReplicatedRecord<K,V>> entry=this.entry;
  ReplicatedRecord<K,V> record=entry != null ? entry.getValue() : null;
  while (entry == null) {
    entry=findNextEntry();
    Object key=entry.getKey();
    record=entry.getValue();
    Object value=record != null ? record.getValue() : null;
    if (key != null && value != null) {
      break;
    }
  }
  this.entry=null;
  return record;
}",0.3093922651933701
46988,"@Override public void run() throws Exception {
  MapService mapService=getService();
  MapContainer mapContainer=mapService.getMapServiceContext().getMapContainer(name);
  RecordStore recordStore=mapService.getMapServiceContext().getPartitionContainer(getPartitionId()).getRecordStore(name);
  Indexes indexes=mapContainer.getIndexes();
  Index index=indexes.addOrGetIndex(attributeName,ordered);
  MapServiceContext serviceContext=mapContainer.getMapServiceContext();
  final long now=getNow();
  final Iterator<Record> iterator=recordStore.iterator(now,false);
  SerializationService serializationService=getNodeEngine().getSerializationService();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    Data key=record.getKey();
    Object value=Records.getValueOrCachedValue(record,serializationService);
    QueryableEntry queryEntry=mapContainer.newQueryEntry(key,value);
    index.saveEntryIndex(queryEntry,null);
  }
}","@Override public void run() throws Exception {
  MapService mapService=getService();
  MapContainer mapContainer=mapService.getMapServiceContext().getMapContainer(name);
  RecordStore recordStore=mapService.getMapServiceContext().getPartitionContainer(getPartitionId()).getRecordStore(name);
  Indexes indexes=mapContainer.getIndexes();
  Index index=indexes.addOrGetIndex(attributeName,ordered);
  final long now=getNow();
  final Iterator<Record> iterator=recordStore.iterator(now,false);
  SerializationService serializationService=getNodeEngine().getSerializationService();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    Data key=record.getKey();
    Object value=Records.getValueOrCachedValue(record,serializationService);
    QueryableEntry queryEntry=mapContainer.newQueryEntry(key,value);
    index.saveEntryIndex(queryEntry,null);
  }
}",0.9604395604395604
46989,"@Override public boolean delete(Data key){
  checkIfLoaded();
  final long now=getNow();
  final Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    removeIndex(record);
    mapDataStore.remove(key,now);
  }
 else {
    return removeRecord(key,record,now) != null;
  }
  return false;
}","@Override public boolean delete(Data key){
  checkIfLoaded();
  final long now=getNow();
  final Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    mapDataStore.remove(key,now);
  }
 else {
    return removeRecord(key,record,now) != null;
  }
  return false;
}",0.957698815566836
46990,"@Override @SuppressWarnings(""String_Node_Str"") public Collection values(Predicate predicate){
  checkTransactionState();
  checkNotNull(predicate,""String_Node_Str"");
  checkNotInstanceOf(PagingPredicate.class,predicate,""String_Node_Str"");
  SerializationService serializationService=getNodeEngine().getSerializationService();
  QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  List<Object> valueSet=new ArrayList<Object>();
  Set<Object> keyWontBeIncluded=new HashSet<Object>();
  MapServiceContext mapServiceContext=getService().getMapServiceContext();
  for (  Map.Entry<Data,TxnValueWrapper> entry : txMap.entrySet()) {
    boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    Object keyObject=serializationService.toObject(entry.getKey());
    if (isRemoved) {
      keyWontBeIncluded.add(keyObject);
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(keyObject);
      }
      Object entryValue=entry.getValue().value;
      QueryableEntry queryEntry=new CachedQueryEntry(serializationService,entry.getKey(),entryValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(queryEntry.getValue());
      }
    }
  }
  removeFromResultSet(queryResultSet,valueSet,keyWontBeIncluded);
  return valueSet;
}","@Override @SuppressWarnings(""String_Node_Str"") public Collection values(Predicate predicate){
  checkTransactionState();
  checkNotNull(predicate,""String_Node_Str"");
  checkNotInstanceOf(PagingPredicate.class,predicate,""String_Node_Str"");
  SerializationService serializationService=getNodeEngine().getSerializationService();
  QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  List<Object> valueSet=new ArrayList<Object>();
  Set<Object> keyWontBeIncluded=new HashSet<Object>();
  for (  Map.Entry<Data,TxnValueWrapper> entry : txMap.entrySet()) {
    boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    Object keyObject=serializationService.toObject(entry.getKey());
    if (isRemoved) {
      keyWontBeIncluded.add(keyObject);
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(keyObject);
      }
      Object entryValue=entry.getValue().value;
      QueryableEntry queryEntry=new CachedQueryEntry(serializationService,entry.getKey(),entryValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(queryEntry.getValue());
      }
    }
  }
  removeFromResultSet(queryResultSet,valueSet,keyWontBeIncluded);
  return valueSet;
}",0.9723553262071508
46991,"@Override public void run() throws Exception {
  MapService mapService=getService();
  MapContainer mapContainer=mapService.getMapServiceContext().getMapContainer(name);
  RecordStore recordStore=mapService.getMapServiceContext().getPartitionContainer(getPartitionId()).getRecordStore(name);
  Indexes indexes=mapContainer.getIndexes();
  Index index=indexes.addOrGetIndex(attributeName,ordered);
  MapServiceContext serviceContext=mapContainer.getMapServiceContext();
  final long now=getNow();
  final Iterator<Record> iterator=recordStore.iterator(now,false);
  SerializationService serializationService=getNodeEngine().getSerializationService();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    Data key=record.getKey();
    Object value=Records.getValueOrCachedValue(record,serializationService);
    QueryableEntry queryEntry=mapContainer.newQueryEntry(key,value);
    index.saveEntryIndex(queryEntry,null);
  }
}","@Override public void run() throws Exception {
  MapService mapService=getService();
  MapContainer mapContainer=mapService.getMapServiceContext().getMapContainer(name);
  RecordStore recordStore=mapService.getMapServiceContext().getPartitionContainer(getPartitionId()).getRecordStore(name);
  Indexes indexes=mapContainer.getIndexes();
  Index index=indexes.addOrGetIndex(attributeName,ordered);
  final long now=getNow();
  final Iterator<Record> iterator=recordStore.iterator(now,false);
  SerializationService serializationService=getNodeEngine().getSerializationService();
  while (iterator.hasNext()) {
    final Record record=iterator.next();
    Data key=record.getKey();
    Object value=Records.getValueOrCachedValue(record,serializationService);
    QueryableEntry queryEntry=mapContainer.newQueryEntry(key,value);
    index.saveEntryIndex(queryEntry,null);
  }
}",0.9604395604395604
46992,"@Override public boolean delete(Data key){
  checkIfLoaded();
  final long now=getNow();
  final Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    removeIndex(record);
    mapDataStore.remove(key,now);
  }
 else {
    return removeRecord(key,record,now) != null;
  }
  return false;
}","@Override public boolean delete(Data key){
  checkIfLoaded();
  final long now=getNow();
  final Record record=getRecordOrNull(key,now,false);
  if (record == null) {
    mapDataStore.remove(key,now);
  }
 else {
    return removeRecord(key,record,now) != null;
  }
  return false;
}",0.957698815566836
46993,"@Override @SuppressWarnings(""String_Node_Str"") public Collection values(Predicate predicate){
  checkTransactionState();
  checkNotNull(predicate,""String_Node_Str"");
  checkNotInstanceOf(PagingPredicate.class,predicate,""String_Node_Str"");
  SerializationService serializationService=getNodeEngine().getSerializationService();
  QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  List<Object> valueSet=new ArrayList<Object>();
  Set<Object> keyWontBeIncluded=new HashSet<Object>();
  MapServiceContext mapServiceContext=getService().getMapServiceContext();
  for (  Map.Entry<Data,TxnValueWrapper> entry : txMap.entrySet()) {
    boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    Object keyObject=serializationService.toObject(entry.getKey());
    if (isRemoved) {
      keyWontBeIncluded.add(keyObject);
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(keyObject);
      }
      Object entryValue=entry.getValue().value;
      QueryableEntry queryEntry=new CachedQueryEntry(serializationService,entry.getKey(),entryValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(queryEntry.getValue());
      }
    }
  }
  removeFromResultSet(queryResultSet,valueSet,keyWontBeIncluded);
  return valueSet;
}","@Override @SuppressWarnings(""String_Node_Str"") public Collection values(Predicate predicate){
  checkTransactionState();
  checkNotNull(predicate,""String_Node_Str"");
  checkNotInstanceOf(PagingPredicate.class,predicate,""String_Node_Str"");
  SerializationService serializationService=getNodeEngine().getSerializationService();
  QueryResultSet queryResultSet=(QueryResultSet)queryInternal(predicate,IterationType.ENTRY,false);
  List<Object> valueSet=new ArrayList<Object>();
  Set<Object> keyWontBeIncluded=new HashSet<Object>();
  for (  Map.Entry<Data,TxnValueWrapper> entry : txMap.entrySet()) {
    boolean isRemoved=TxnValueWrapper.Type.REMOVED.equals(entry.getValue().type);
    boolean isUpdated=TxnValueWrapper.Type.UPDATED.equals(entry.getValue().type);
    Object keyObject=serializationService.toObject(entry.getKey());
    if (isRemoved) {
      keyWontBeIncluded.add(keyObject);
    }
 else {
      if (isUpdated) {
        keyWontBeIncluded.add(keyObject);
      }
      Object entryValue=entry.getValue().value;
      QueryableEntry queryEntry=new CachedQueryEntry(serializationService,entry.getKey(),entryValue);
      if (predicate.apply(queryEntry)) {
        valueSet.add(queryEntry.getValue());
      }
    }
  }
  removeFromResultSet(queryResultSet,valueSet,keyWontBeIncluded);
  return valueSet;
}",0.9723553262071508
46994,"public ListenerAdapter[] getListenerAdapters(){
  return listenerAdapters;
}","@SuppressFBWarnings(value=""String_Node_Str"",justification=""String_Node_Str"") public ListenerAdapter[] getListenerAdapters(){
  return listenerAdapters;
}",0.6637554585152838
46995,"@Test public void testValues_withPredicate(){
  final int max=27;
  final IMap map=client.getMap(randomString());
  final Set expected=new TreeSet();
  for (int key=0; key < max; key++) {
    Object value=key + ""String_Node_Str"";
    map.put(key,value);
  }
  expected.add(4);
  final Set keySet=map.keySet(new SqlPredicate(""String_Node_Str""));
  assertEquals(expected,keySet);
}","@Test public void testValues_withPredicate(){
  final int max=27;
  final IMap map=client.getMap(randomString());
  final Set expected=new TreeSet();
  for (int key=0; key < max; key++) {
    Object value=key + ""String_Node_Str"";
    map.put(key,value);
  }
  expected.add(""String_Node_Str"");
  final Collection collection=map.values(new SqlPredicate(""String_Node_Str""));
  final Set resultSet=new TreeSet(collection);
  assertEquals(expected,resultSet);
}",0.8335329341317366
46996,"@Test public void testValues_withPredicate(){
  final int max=27;
  final IMap map=client.getMap(randomString());
  final Set expected=new TreeSet();
  for (int key=0; key < max; key++) {
    Object value=key + ""String_Node_Str"";
    map.put(key,value);
  }
  expected.add(4);
  final Set keySet=map.keySet(new SqlPredicate(""String_Node_Str""));
  assertEquals(expected,keySet);
}","@Test public void testValues_withPredicate(){
  final int max=27;
  final IMap map=client.getMap(randomString());
  final Set expected=new TreeSet();
  for (int key=0; key < max; key++) {
    Object value=key + ""String_Node_Str"";
    map.put(key,value);
  }
  expected.add(""String_Node_Str"");
  final Collection collection=map.values(new SqlPredicate(""String_Node_Str""));
  final Set resultSet=new TreeSet(collection);
  assertEquals(expected,resultSet);
}",0.8335329341317366
46997,"private int getOrInitTargetPartitionId(){
  int targetPartitionId=this.targetPartitionId;
  while (targetPartitionId == Operation.GENERIC_PARTITION_ID) {
    final int partitionCount=getContext().getPartitionService().getPartitionCount();
    targetPartitionId=new Random().nextInt(partitionCount);
    if (!TARGET_PARTITION_ID_UPDATER.compareAndSet(this,-1,targetPartitionId)) {
      targetPartitionId=this.targetPartitionId;
    }
  }
  return targetPartitionId;
}","private int getOrInitTargetPartitionId(){
  int targetPartitionId=this.targetPartitionId;
  while (targetPartitionId == Operation.GENERIC_PARTITION_ID) {
    final int partitionCount=getContext().getPartitionService().getPartitionCount();
    targetPartitionId=RANDOM_PARTITION_ID_GENERATOR.nextInt(partitionCount);
    if (!TARGET_PARTITION_ID_UPDATER.compareAndSet(this,-1,targetPartitionId)) {
      targetPartitionId=this.targetPartitionId;
    }
  }
  return targetPartitionId;
}",0.9568874868559412
46998,"private int getOrInitTargetPartitionId(){
  int targetPartitionId=this.targetPartitionId;
  while (targetPartitionId == Operation.GENERIC_PARTITION_ID) {
    final int partitionCount=getContext().getPartitionService().getPartitionCount();
    targetPartitionId=new Random().nextInt(partitionCount);
    if (!TARGET_PARTITION_ID_UPDATER.compareAndSet(this,-1,targetPartitionId)) {
      targetPartitionId=this.targetPartitionId;
    }
  }
  return targetPartitionId;
}","private int getOrInitTargetPartitionId(){
  int targetPartitionId=this.targetPartitionId;
  while (targetPartitionId == Operation.GENERIC_PARTITION_ID) {
    final int partitionCount=getContext().getPartitionService().getPartitionCount();
    targetPartitionId=RANDOM_PARTITION_ID_GENERATOR.nextInt(partitionCount);
    if (!TARGET_PARTITION_ID_UPDATER.compareAndSet(this,-1,targetPartitionId)) {
      targetPartitionId=this.targetPartitionId;
    }
  }
  return targetPartitionId;
}",0.9568874868559412
46999,"@Test public void testResultType(){
  map.put(""String_Node_Str"",""String_Node_Str"");
  Set<String> entries=map.localKeySet(TruePredicate.INSTANCE);
  QueryResultCollection collection=assertInstanceOf(QueryResultCollection.class,entries);
  QueryResultRow row=(QueryResultRow)collection.getRows().iterator().next();
  assertEquals(serializationService.toData(""String_Node_Str""),row.getKey());
  assertNull(row.getValue());
}","@Test public void testResultType(){
  map.put(localKey1,""String_Node_Str"");
  Set<String> entries=map.localKeySet(TruePredicate.INSTANCE);
  QueryResultCollection collection=assertInstanceOf(QueryResultCollection.class,entries);
  QueryResultRow row=(QueryResultRow)collection.getRows().iterator().next();
  assertEquals(localKey1,serializationService.toObject(row.getKey()));
  assertNull(row.getValue());
}",0.8554216867469879
47000,"@Override protected Predicate getPredicate(){
  return predicate;
}","@Override protected Predicate getPredicate(){
  return predicate == null ? TruePredicate.INSTANCE : predicate;
}",0.7486033519553073
